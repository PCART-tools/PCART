
----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/__config__.py----------------------------------------
A:numpy.__config__.extra_dll_dir->os.path.join(os.path.dirname(__file__), '.libs')
A:numpy.__config__.g->globals()
A:numpy.__config__.v->str(v)
numpy.__config__.get_info(name)
numpy.__config__.show()
numpy.show_config()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ctypeslib.py----------------------------------------
A:numpy.ctypeslib.c_intp->numpy.core._internal._getintp_ctype()
A:numpy.ctypeslib.so_ext->get_shared_lib_extension()
A:numpy.ctypeslib.so_ext2->get_shared_lib_extension(is_python_ext=True)
A:numpy.ctypeslib.loader_path->os.path.abspath(loader_path)
A:numpy.ctypeslib.libdir->os.path.dirname(loader_path)
A:numpy.ctypeslib.libpath->os.path.join(libdir, ln)
A:numpy.ctypeslib.full_dtype->_dtype((self._dtype_, self._shape_))
A:numpy.ctypeslib.dtype->_dtype(dtype)
A:numpy.ctypeslib.flags->_flags_fromnum(num)
A:numpy.ctypeslib.num->_num_fromflags(flags)
A:numpy.ctypeslib.shape->tuple(shape)
A:numpy.ctypeslib.name->str(id(dtype))
A:numpy.ctypeslib.klass->type('ndpointer_%s' % name, (base,), {'_dtype_': dtype, '_shape_': shape, '_ndim_': ndim, '_flags_': num})
A:numpy.ctypeslib._scalar_type_map->_get_scalar_type_map()
A:numpy.ctypeslib.dtype_with_endian->_dtype(dtype).newbyteorder('S').newbyteorder('S')
A:numpy.ctypeslib.dtype_native->_dtype(dtype).newbyteorder('=')
A:numpy.ctypeslib.ctype->_ctype_from_dtype(element_dtype)
A:numpy.ctypeslib.field_data->sorted(field_data, key=lambda f: f[0])
A:numpy.ctypeslib.size->max(size, ctypes.sizeof(ctype))
A:numpy.ctypeslib.p_arr_type->ctypes.POINTER(_ctype_ndarray(obj._type_, shape))
A:numpy.ctypeslib.ctype_scalar->as_ctypes_type(ai['typestr'])
A:numpy.ctypeslib.result_type->_ctype_ndarray(ctype_scalar, ai['shape'])
A:numpy.ctypeslib.result->_ctype_ndarray(ctype_scalar, ai['shape']).from_address(addr)
numpy.ctypes_concrete_ndptr(_ndptr)
numpy.ctypes_concrete_ndptr._check_retval_(self)
numpy.ctypes_concrete_ndptr.contents(self)
numpy.ctypes_flags_fromnum(num)
numpy.ctypes_ndptr(_ndptr_base)
numpy.ctypes_ndptr.from_param(cls,obj)
numpy.ctypes_num_fromflags(flaglist)
numpy.ctypeslib._concrete_ndptr(_ndptr)
numpy.ctypeslib._concrete_ndptr._check_retval_(self)
numpy.ctypeslib._concrete_ndptr.contents(self)
numpy.ctypeslib._flags_fromnum(num)
numpy.ctypeslib._ndptr(_ndptr_base)
numpy.ctypeslib._ndptr.from_param(cls,obj)
numpy.ctypeslib._num_fromflags(flaglist)
numpy.ctypeslib.ndpointer(dtype=None,ndim=None,shape=None,flags=None)
numpy.ctypesndpointer(dtype=None,ndim=None,shape=None,flags=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ctypeslib.pyi----------------------------------------
numpy.ctypesas_array(obj,shape=...)
numpy.ctypesas_ctypes(obj)
numpy.ctypesas_ctypes_type(dtype)
numpy.ctypeslib.as_array(obj,shape=...)
numpy.ctypeslib.as_ctypes(obj)
numpy.ctypeslib.as_ctypes_type(dtype)
numpy.ctypeslib.load_library(libname,loader_path)
numpy.ctypesload_library(libname,loader_path)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/dual.py----------------------------------------
numpy.dual.register_func(name,func)
numpy.dual.restore_all()
numpy.dual.restore_func(name)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/__init__.py----------------------------------------
A:numpy.__init__.vinfo->get_versions()
A:numpy.__init__.__version__->get_versions().get('closest-tag', vinfo['version'])
A:numpy.__init__.__git_version__->get_versions().get('full-revisionid')
A:numpy.__init__.test->PytestTester(__name__)
A:numpy.__init__.x->linspace(0, 2, 5)
A:numpy.__init__.c->array([3.0, 2.0, 1.0])
A:numpy.__init__.y->polyval(c, x)
A:numpy.__init__._->polyfit(x, y, 2, cov=True)
A:numpy.__init__.error_message->'{}: {}'.format(w[-1].category.__name__, str(w[-1].message))
A:numpy.__init__.msg->'Polyfit sanity test emitted a warning, most likely due to using a buggy Accelerate backend. If you compiled yourself, more information is available at https://numpy.org/doc/stable/user/building.html#accelerated-blas-lapack-libraries Otherwise report this to the vendor that provided NumPy.\n{}\n'.format(error_message)
A:numpy.__init__.use_hugepage->int(use_hugepage)
A:numpy.__init__.kernel_version->tuple((int(v) for v in kernel_version))


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/__init__.pyi----------------------------------------
numpy.__init__.AxisError(self,axis:int,ndim:Optional[int]=...,msg_prefix:Optional[str]=...)
numpy.__init__.AxisError.__init__(self,axis:int,ndim:Optional[int]=...,msg_prefix:Optional[str]=...)
numpy.__init__.ComplexWarning(RuntimeWarning)
numpy.__init__.DataSource(self,destpath:Union[None,str,os.PathLike[str]]=...)
numpy.__init__.DataSource.__del__(self)->None
numpy.__init__.DataSource.__init__(self,destpath:Union[None,str,os.PathLike[str]]=...)
numpy.__init__.DataSource.abspath(self,path:str)->str
numpy.__init__.DataSource.exists(self,path:str)->bool
numpy.__init__.DataSource.open(self,path:str,mode:str=...,encoding:Optional[str]=...,newline:Optional[str]=...)->IO[Any]
numpy.__init__.MachAr(self,float_conv:Any=...,int_conv:Any=...,float_to_float:Any=...,float_to_str:Any=...,title:Any=...)
numpy.__init__.MachAr.__getattr__(self,key:str)->Any
numpy.__init__.MachAr.__init__(self,float_conv:Any=...,int_conv:Any=...,float_to_float:Any=...,float_to_str:Any=...,title:Any=...)
numpy.__init__.ModuleDeprecationWarning(DeprecationWarning)
numpy.__init__.RankWarning(UserWarning)
numpy.__init__.TooHardError(RuntimeError)
numpy.__init__.VisibleDeprecationWarning(UserWarning)
numpy.__init__._ArrayOrScalarCommon
numpy.__init__._ArrayOrScalarCommon.T(self:_ArraySelf)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.__array_interface__(self)
numpy.__init__._ArrayOrScalarCommon.__array_priority__(self)
numpy.__init__._ArrayOrScalarCommon.__array_struct__(self)
numpy.__init__._ArrayOrScalarCommon.__array_wrap__(array,context=...)
numpy.__init__._ArrayOrScalarCommon.__bool__(self)->bool
numpy.__init__._ArrayOrScalarCommon.__bytes__(self)->bytes
numpy.__init__._ArrayOrScalarCommon.__copy__(self:_ArraySelf)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.__deepcopy__(self:_ArraySelf,__memo:Optional[dict]=...)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.__eq__(self,other)
numpy.__init__._ArrayOrScalarCommon.__getitem__(self,key)->Any
numpy.__init__._ArrayOrScalarCommon.__ne__(self,other)
numpy.__init__._ArrayOrScalarCommon.__repr__(self)->str
numpy.__init__._ArrayOrScalarCommon.__setstate__(self,__state)
numpy.__init__._ArrayOrScalarCommon.__str__(self)->str
numpy.__init__._ArrayOrScalarCommon.all(self,axis:None=...,out:None=...,keepdims:L[False]=...)->bool_
numpy.__init__._ArrayOrScalarCommon.all(self,axis:Optional[_ShapeLike]=...,out:None=...,keepdims:bool=...)->Any
numpy.__init__._ArrayOrScalarCommon.all(self,axis:Optional[_ShapeLike]=...,out:_NdArraySubClass=...,keepdims:bool=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.any(self,axis:None=...,out:None=...,keepdims:L[False]=...)->bool_
numpy.__init__._ArrayOrScalarCommon.any(self,axis:Optional[_ShapeLike]=...,out:None=...,keepdims:bool=...)->Any
numpy.__init__._ArrayOrScalarCommon.any(self,axis:Optional[_ShapeLike]=...,out:_NdArraySubClass=...,keepdims:bool=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.argmax(self,axis:None=...,out:None=...)->intp
numpy.__init__._ArrayOrScalarCommon.argmax(self,axis:Optional[_ShapeLike]=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.argmax(self,axis:_ShapeLike=...,out:None=...)->Any
numpy.__init__._ArrayOrScalarCommon.argmin(self,axis:None=...,out:None=...)->intp
numpy.__init__._ArrayOrScalarCommon.argmin(self,axis:Optional[_ShapeLike]=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.argmin(self,axis:_ShapeLike=...,out:None=...)->Any
numpy.__init__._ArrayOrScalarCommon.argsort(self,axis:Optional[SupportsIndex]=...,kind:Optional[_SortKind]=...,order:Union[None,str,Sequence[str]]=...)->ndarray
numpy.__init__._ArrayOrScalarCommon.astype(self:_ArraySelf,dtype:DTypeLike,order:_OrderKACF=...,casting:_Casting=...,subok:bool=...,copy:bool=...)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.choose(self,choices:ArrayLike,out:None=...,mode:_ModeKind=...)->ndarray
numpy.__init__._ArrayOrScalarCommon.choose(self,choices:ArrayLike,out:_NdArraySubClass=...,mode:_ModeKind=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.clip(self,min:ArrayLike=...,max:Optional[ArrayLike]=...,out:None=...,**kwargs:Any)->ndarray
numpy.__init__._ArrayOrScalarCommon.clip(self,min:ArrayLike=...,max:Optional[ArrayLike]=...,out:_NdArraySubClass=...,**kwargs:Any)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.clip(self,min:None=...,max:ArrayLike=...,out:None=...,**kwargs:Any)->ndarray
numpy.__init__._ArrayOrScalarCommon.clip(self,min:None=...,max:ArrayLike=...,out:_NdArraySubClass=...,**kwargs:Any)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.compress(self,a:ArrayLike,axis:Optional[SupportsIndex]=...,out:None=...)->ndarray
numpy.__init__._ArrayOrScalarCommon.compress(self,a:ArrayLike,axis:Optional[SupportsIndex]=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.conj(self:_ArraySelf)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.conjugate(self:_ArraySelf)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.copy(self:_ArraySelf,order:_OrderKACF=...)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.cumprod(self,axis:Optional[SupportsIndex]=...,dtype:DTypeLike=...,out:None=...)->ndarray
numpy.__init__._ArrayOrScalarCommon.cumprod(self,axis:Optional[SupportsIndex]=...,dtype:DTypeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.cumsum(self,axis:Optional[SupportsIndex]=...,dtype:DTypeLike=...,out:None=...)->ndarray
numpy.__init__._ArrayOrScalarCommon.cumsum(self,axis:Optional[SupportsIndex]=...,dtype:DTypeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.data(self)->memoryview
numpy.__init__._ArrayOrScalarCommon.dump(self,file:str)->None
numpy.__init__._ArrayOrScalarCommon.dumps(self)->bytes
numpy.__init__._ArrayOrScalarCommon.flags(self)->_flagsobj
numpy.__init__._ArrayOrScalarCommon.getfield(self:_ArraySelf,dtype:DTypeLike,offset:int=...)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.itemsize(self)->int
numpy.__init__._ArrayOrScalarCommon.max(self,axis:Optional[_ShapeLike]=...,out:None=...,keepdims:bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->Any
numpy.__init__._ArrayOrScalarCommon.max(self,axis:Optional[_ShapeLike]=...,out:_NdArraySubClass=...,keepdims:bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.mean(self,axis:Optional[_ShapeLike]=...,dtype:DTypeLike=...,out:None=...,keepdims:bool=...)->Any
numpy.__init__._ArrayOrScalarCommon.mean(self,axis:Optional[_ShapeLike]=...,dtype:DTypeLike=...,out:_NdArraySubClass=...,keepdims:bool=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.min(self,axis:Optional[_ShapeLike]=...,out:None=...,keepdims:bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->Any
numpy.__init__._ArrayOrScalarCommon.min(self,axis:Optional[_ShapeLike]=...,out:_NdArraySubClass=...,keepdims:bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.nbytes(self)->int
numpy.__init__._ArrayOrScalarCommon.newbyteorder(self:_ArraySelf,__new_order:_ByteOrder=...)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.prod(self,axis:Optional[_ShapeLike]=...,dtype:DTypeLike=...,out:None=...,keepdims:bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->Any
numpy.__init__._ArrayOrScalarCommon.prod(self,axis:Optional[_ShapeLike]=...,dtype:DTypeLike=...,out:_NdArraySubClass=...,keepdims:bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.ptp(self,axis:Optional[_ShapeLike]=...,out:None=...,keepdims:bool=...)->Any
numpy.__init__._ArrayOrScalarCommon.ptp(self,axis:Optional[_ShapeLike]=...,out:_NdArraySubClass=...,keepdims:bool=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.round(self,decimals:SupportsIndex=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.round(self:_ArraySelf,decimals:SupportsIndex=...,out:None=...)->_ArraySelf
numpy.__init__._ArrayOrScalarCommon.std(self,axis:Optional[_ShapeLike]=...,dtype:DTypeLike=...,out:None=...,ddof:int=...,keepdims:bool=...)->Any
numpy.__init__._ArrayOrScalarCommon.std(self,axis:Optional[_ShapeLike]=...,dtype:DTypeLike=...,out:_NdArraySubClass=...,ddof:int=...,keepdims:bool=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.sum(self,axis:Optional[_ShapeLike]=...,dtype:DTypeLike=...,out:None=...,keepdims:bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->Any
numpy.__init__._ArrayOrScalarCommon.sum(self,axis:Optional[_ShapeLike]=...,dtype:DTypeLike=...,out:_NdArraySubClass=...,keepdims:bool=...,initial:_NumberLike_co=...,where:_ArrayLikeBool_co=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.tobytes(self,order:_OrderKACF=...)->bytes
numpy.__init__._ArrayOrScalarCommon.tofile(self,fid:Union[IO[bytes],str,bytes,os.PathLike[Any]],sep:str=...,format:str=...)->None
numpy.__init__._ArrayOrScalarCommon.tolist(self)->Any
numpy.__init__._ArrayOrScalarCommon.var(self,axis:Optional[_ShapeLike]=...,dtype:DTypeLike=...,out:None=...,ddof:int=...,keepdims:bool=...)->Any
numpy.__init__._ArrayOrScalarCommon.var(self,axis:Optional[_ShapeLike]=...,dtype:DTypeLike=...,out:_NdArraySubClass=...,ddof:int=...,keepdims:bool=...)->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.view(self,dtype:DTypeLike,type:Type[_NdArraySubClass])->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.view(self,type:Type[_NdArraySubClass])->_NdArraySubClass
numpy.__init__._ArrayOrScalarCommon.view(self:_ArraySelf,dtype:DTypeLike=...)->_ArraySelf
numpy.__init__._DatetimeScalar(Protocol)
numpy.__init__._DatetimeScalar.day(self)->int
numpy.__init__._DatetimeScalar.month(self)->int
numpy.__init__._DatetimeScalar.year(self)->int
numpy.__init__._SupportsImag(Protocol[_T_co])
numpy.__init__._SupportsImag.imag(self)->_T_co
numpy.__init__._SupportsItem(Protocol[_T_co])
numpy.__init__._SupportsItem.item(self,__args:Any)->_T_co
numpy.__init__._SupportsReal(Protocol[_T_co])
numpy.__init__._SupportsReal.real(self)->_T_co
numpy.__init__._flagsobj
numpy.__init__._flagsobj.__getitem__(self,key:str)->bool
numpy.__init__._flagsobj.__setitem__(self,key:str,value:bool)->None
numpy.__init__._flagsobj.behaved(self)->bool
numpy.__init__._flagsobj.c_contiguous(self)->bool
numpy.__init__._flagsobj.carray(self)->bool
numpy.__init__._flagsobj.contiguous(self)->bool
numpy.__init__._flagsobj.f_contiguous(self)->bool
numpy.__init__._flagsobj.farray(self)->bool
numpy.__init__._flagsobj.fnc(self)->bool
numpy.__init__._flagsobj.forc(self)->bool
numpy.__init__._flagsobj.fortran(self)->bool
numpy.__init__._flagsobj.num(self)->int
numpy.__init__._flagsobj.owndata(self)->bool
numpy.__init__.arange(start,stop,step=...,dtype=...,*,like=...)
numpy.__init__.arange(stop,dtype=...,*,like=...)
numpy.__init__.array(object:object,dtype:DTypeLike=...,*,copy:bool=...,order:_OrderKACF=...,subok:bool=...,ndmin:int=...,like:ArrayLike=...)->ndarray
numpy.__init__.asmatrix(data,dtype=...)
numpy.__init__.asscalar(a)
numpy.__init__.bool_(self,__value:object=...)
numpy.__init__.bool_.__abs__(self:_ArraySelf)->_ArraySelf
numpy.__init__.bool_.__complex__(self)->complex
numpy.__init__.bool_.__float__(self)->float
numpy.__init__.bool_.__init__(self,__value:object=...)
numpy.__init__.bool_.__int__(self)->int
numpy.__init__.bool_.__invert__(self)->bool_
numpy.__init__.bool_.imag(self:_ArraySelf)->_ArraySelf
numpy.__init__.bool_.item(self,__args:Union[L[0],Tuple[()],Tuple[L[0]]]=...)->bool
numpy.__init__.bool_.real(self:_ArraySelf)->_ArraySelf
numpy.__init__.bool_.tolist(self)->bool
numpy.__init__.broadcast(cls,*args:ArrayLike)
numpy.__init__.broadcast.__iter__(self:_T)->_T
numpy.__init__.broadcast.__new__(cls,*args:ArrayLike)
numpy.__init__.broadcast.__next__(self)->Tuple[Any, ...]
numpy.__init__.broadcast.index(self)->int
numpy.__init__.broadcast.iters(self)->Tuple[flatiter[Any], ...]
numpy.__init__.broadcast.nd(self)->int
numpy.__init__.broadcast.ndim(self)->int
numpy.__init__.broadcast.numiter(self)->int
numpy.__init__.broadcast.reset(self)->None
numpy.__init__.broadcast.shape(self)->_Shape
numpy.__init__.broadcast.size(self)->int
numpy.__init__.busday_count(begindates,enddates,weekmask=...,holidays=...,busdaycal=...,out=...)
numpy.__init__.busday_offset(dates,offsets,roll=...,weekmask=...,holidays=...,busdaycal=...,out=...)
numpy.__init__.busdaycalendar(cls,weekmask:Any=...,holidays:Any=...)
numpy.__init__.busdaycalendar.__getattr__(self,key:str)->Any
numpy.__init__.busdaycalendar.__new__(cls,weekmask:Any=...,holidays:Any=...)
numpy.__init__.bytes_(self,__value:str,encoding:str=...,errors:str=...)
numpy.__init__.bytes_.__init__(self,__value:str,encoding:str=...,errors:str=...)
numpy.__init__.bytes_.item(self,__args:Union[L[0],Tuple[()],Tuple[L[0]]]=...)->bytes
numpy.__init__.bytes_.tolist(self)->bytes
numpy.__init__.can_cast(from_,to,casting=...)
numpy.__init__.character(flexible)
numpy.__init__.character.__float__(self)->float
numpy.__init__.character.__int__(self)->int
numpy.__init__.chararray(subtype,shape:Any,itemsize:Any=...,unicode:Any=...,buffer:Any=...,offset:Any=...,strides:Any=...,order:Any=...)
numpy.__init__.chararray.__array_finalize__(self,obj)
numpy.__init__.chararray.__new__(subtype,shape:Any,itemsize:Any=...,unicode:Any=...,buffer:Any=...,offset:Any=...,strides:Any=...,order:Any=...)
numpy.__init__.chararray.argsort(self,axis=...,kind=...,order=...)
numpy.__init__.chararray.capitalize(self)
numpy.__init__.chararray.center(self,width,fillchar=...)
numpy.__init__.chararray.count(self,sub,start=...,end=...)
numpy.__init__.chararray.decode(self,encoding=...,errors=...)
numpy.__init__.chararray.encode(self,encoding=...,errors=...)
numpy.__init__.chararray.endswith(self,suffix,start=...,end=...)
numpy.__init__.chararray.expandtabs(self,tabsize=...)
numpy.__init__.chararray.find(self,sub,start=...,end=...)
numpy.__init__.chararray.index(self,sub,start=...,end=...)
numpy.__init__.chararray.isalnum(self)
numpy.__init__.chararray.isalpha(self)
numpy.__init__.chararray.isdecimal(self)
numpy.__init__.chararray.isdigit(self)
numpy.__init__.chararray.islower(self)
numpy.__init__.chararray.isnumeric(self)
numpy.__init__.chararray.isspace(self)
numpy.__init__.chararray.istitle(self)
numpy.__init__.chararray.isupper(self)
numpy.__init__.chararray.join(self,seq)
numpy.__init__.chararray.ljust(self,width,fillchar=...)
numpy.__init__.chararray.lower(self)
numpy.__init__.chararray.lstrip(self,chars=...)
numpy.__init__.chararray.partition(self,sep)
numpy.__init__.chararray.replace(self,old,new,count=...)
numpy.__init__.chararray.rfind(self,sub,start=...,end=...)
numpy.__init__.chararray.rindex(self,sub,start=...,end=...)
numpy.__init__.chararray.rjust(self,width,fillchar=...)
numpy.__init__.chararray.rpartition(self,sep)
numpy.__init__.chararray.rsplit(self,sep=...,maxsplit=...)
numpy.__init__.chararray.rstrip(self,chars=...)
numpy.__init__.chararray.split(self,sep=...,maxsplit=...)
numpy.__init__.chararray.splitlines(self,keepends=...)
numpy.__init__.chararray.startswith(self,prefix,start=...,end=...)
numpy.__init__.chararray.strip(self,chars=...)
numpy.__init__.chararray.swapcase(self)
numpy.__init__.chararray.title(self)
numpy.__init__.chararray.translate(self,table,deletechars=...)
numpy.__init__.chararray.upper(self)
numpy.__init__.chararray.zfill(self,width)
numpy.__init__.compare_chararrays(a,b,cmp_op,rstrip)
numpy.__init__.complexfloating(self,__value:_ComplexValue=...)
numpy.__init__.complexfloating.__abs__(self)->floating[_NBit1]
numpy.__init__.complexfloating.__getnewargs__(self:complex128)->Tuple[float, float]
numpy.__init__.complexfloating.__init__(self,__value:_ComplexValue=...)
numpy.__init__.complexfloating.imag(self)->floating[_NBit2]
numpy.__init__.complexfloating.item(self,__args:Union[L[0],Tuple[()],Tuple[L[0]]]=...)->complex
numpy.__init__.complexfloating.real(self)->floating[_NBit1]
numpy.__init__.complexfloating.tolist(self)->complex
numpy.__init__.concatenate(__a,axis=...,out=...,dtype=...,casting=...)
numpy.__init__.copyto(dst,src,casting=...,where=...)
numpy.__init__.cumproduct(*args,**kwargs)
numpy.__init__.datetime64(self,__value:int,__format:Union[_CharLike_co,Tuple[_CharLike_co,_IntLike_co]])
numpy.__init__.datetime64.__add__(self,other:_TD64Like_co)->datetime64
numpy.__init__.datetime64.__init__(self,__value:int,__format:Union[_CharLike_co,Tuple[_CharLike_co,_IntLike_co]])
numpy.__init__.datetime64.__radd__(self,other:_TD64Like_co)->datetime64
numpy.__init__.datetime64.__rsub__(self,other:datetime64)->timedelta64
numpy.__init__.datetime64.__sub__(self,other:_TD64Like_co)->datetime64
numpy.__init__.datetime64.__sub__(self,other:datetime64)->timedelta64
numpy.__init__.datetime_as_string(arr,unit=...,timezone=...,casting=...)
numpy.__init__.datetime_data(__dtype)
numpy.__init__.dot(a,b,out=...)
numpy.__init__.dtype(cls,dtype:Type[object],align:bool=...,copy:bool=...)
numpy.__init__.dtype.__ge__(self,other:DTypeLike)->bool
numpy.__init__.dtype.__getitem__(self:dtype[void],key:List[str])->dtype[void]
numpy.__init__.dtype.__getitem__(self:dtype[void],key:Union[str,int])->dtype[Any]
numpy.__init__.dtype.__gt__(self,other:DTypeLike)->bool
numpy.__init__.dtype.__le__(self,other:DTypeLike)->bool
numpy.__init__.dtype.__lt__(self,other:DTypeLike)->bool
numpy.__init__.dtype.__mul__(self,value:L[0])->None
numpy.__init__.dtype.__mul__(self,value:int)->dtype[void]
numpy.__init__.dtype.__mul__(self:_DType,value:L[1])->_DType
numpy.__init__.dtype.__new__(cls,dtype:Type[object],align:bool=...,copy:bool=...)
numpy.__init__.dtype.__rmul__(self,value:int)->Any
numpy.__init__.dtype.alignment(self)->int
numpy.__init__.dtype.base(self:_DType)->_DType
numpy.__init__.dtype.byteorder(self)->str
numpy.__init__.dtype.char(self)->str
numpy.__init__.dtype.descr(self)->List[Union[Tuple[str, str], Tuple[str, str, _Shape]]]
numpy.__init__.dtype.fields(self)->Optional[Mapping[str, Union[Tuple[dtype[Any], int], Tuple[dtype[Any], int, Any]]]]
numpy.__init__.dtype.flags(self)->int
numpy.__init__.dtype.hasobject(self)->bool
numpy.__init__.dtype.isalignedstruct(self)->bool
numpy.__init__.dtype.isbuiltin(self)->int
numpy.__init__.dtype.isnative(self)->bool
numpy.__init__.dtype.itemsize(self)->int
numpy.__init__.dtype.kind(self)->str
numpy.__init__.dtype.metadata(self)->Optional[Mapping[str, Any]]
numpy.__init__.dtype.name(self)->str
numpy.__init__.dtype.names(self)->Optional[Tuple[str, ...]]
numpy.__init__.dtype.ndim(self)->int
numpy.__init__.dtype.newbyteorder(self:_DType,__new_order:_ByteOrder=...)->_DType
numpy.__init__.dtype.num(self)->int
numpy.__init__.dtype.shape(self)->_Shape
numpy.__init__.dtype.str(self)->builtins.str
numpy.__init__.dtype.subdtype(self:_DType)->Optional[Tuple[_DType, _Shape]]
numpy.__init__.dtype.type(self)->Type[_DTypeScalar_co]
numpy.__init__.empty(shape:_ShapeLike,dtype:DTypeLike=...,order:_OrderCF=...,*,like:ArrayLike=...)->ndarray
numpy.__init__.errstate(self,*,call:_CallType=...,all:Optional[_ErrKind]=...,divide:Optional[_ErrKind]=...,over:Optional[_ErrKind]=...,under:Optional[_ErrKind]=...,invalid:Optional[_ErrKind]=...)
numpy.__init__.errstate.__enter__(self)->None
numpy.__init__.errstate.__exit__(self,__exc_type:Optional[Type[BaseException]],__exc_value:Optional[BaseException],__traceback:Optional[TracebackType])->None
numpy.__init__.errstate.__init__(self,*,call:_CallType=...,all:Optional[_ErrKind]=...,divide:Optional[_ErrKind]=...,over:Optional[_ErrKind]=...,under:Optional[_ErrKind]=...,invalid:Optional[_ErrKind]=...)
numpy.__init__.finfo(cls,dtype:Any)
numpy.__init__.finfo.__getattr__(self,key:str)->Any
numpy.__init__.finfo.__new__(cls,dtype:Any)
numpy.__init__.flatiter(Generic[_NdArraySubClass])
numpy.__init__.flatiter.__array__(self,__dtype:_DType)->ndarray[Any, _DType]
numpy.__init__.flatiter.__array__(self:flatiter[ndarray[Any,_DType]],__dtype:None=...)->ndarray[Any, _DType]
numpy.__init__.flatiter.__getitem__(self,key:Union[_ArrayLikeInt,slice,ellipsis])->_NdArraySubClass
numpy.__init__.flatiter.__getitem__(self:flatiter[ndarray[Any,dtype[_ScalarType]]],key:Union[int,integer])->_ScalarType
numpy.__init__.flatiter.__iter__(self:_FlatIterSelf)->_FlatIterSelf
numpy.__init__.flatiter.__len__(self)->int
numpy.__init__.flatiter.__next__(self:flatiter[ndarray[Any,dtype[_ScalarType]]])->_ScalarType
numpy.__init__.flatiter.base(self)->_NdArraySubClass
numpy.__init__.flatiter.coords(self)->_Shape
numpy.__init__.flatiter.copy(self)->_NdArraySubClass
numpy.__init__.flatiter.index(self)->int
numpy.__init__.flexible(generic)
numpy.__init__.floating(self,__value:_FloatValue=...)
numpy.__init__.floating.__getformat__(self:float64,__typestr:L['double','float'])->str
numpy.__init__.floating.__getnewargs__(self:float64)->Tuple[float]
numpy.__init__.floating.__init__(self,__value:_FloatValue=...)
numpy.__init__.floating.__round__(self,ndigits:None=...)->int
numpy.__init__.floating.__round__(self:_ScalarType,ndigits:SupportsIndex)->_ScalarType
numpy.__init__.floating.__trunc__(self:float64)->int
numpy.__init__.floating.as_integer_ratio(self)->Tuple[int, int]
numpy.__init__.floating.fromhex(cls:Type[float64],__string:str)->float64
numpy.__init__.floating.hex(self:float64)->str
numpy.__init__.floating.is_integer(self:float64)->bool
numpy.__init__.floating.item(self,__args:Union[L[0],Tuple[()],Tuple[L[0]]]=...)->float
numpy.__init__.floating.tolist(self)->float
numpy.__init__.format_parser(self,formats:Any,names:Any,titles:Any,aligned:Any=...,byteorder:Any=...)
numpy.__init__.format_parser.__init__(self,formats:Any,names:Any,titles:Any,aligned:Any=...,byteorder:Any=...)
numpy.__init__.frombuffer(buffer,dtype=...,count=...,offset=...,*,like=...)
numpy.__init__.fromfile(file,dtype=...,count=...,sep=...,offset=...,*,like=...)
numpy.__init__.fromiter(iter,dtype,count=...,*,like=...)
numpy.__init__.frompyfunc(func,nin,nout,*identity)
numpy.__init__.fromstring(string,dtype=...,count=...,sep=...,*,like=...)
numpy.__init__.generic(self,*args:Any,**kwargs:Any)
numpy.__init__.generic.__array__(self,__dtype:_DType)->ndarray[Any, _DType]
numpy.__init__.generic.__array__(self:_ScalarType,__dtype:None=...)->ndarray[Any, dtype[_ScalarType]]
numpy.__init__.generic.__init__(self,*args:Any,**kwargs:Any)
numpy.__init__.generic.base(self)->None
numpy.__init__.generic.byteswap(self:_ScalarType,inplace:L[False]=...)->_ScalarType
numpy.__init__.generic.dtype(self:_ScalarType)->dtype[_ScalarType]
numpy.__init__.generic.flat(self:_ScalarType)->flatiter[ndarray[Any, dtype[_ScalarType]]]
numpy.__init__.generic.flatten(self:_ScalarType,order:_OrderKACF=...)->ndarray[Any, dtype[_ScalarType]]
numpy.__init__.generic.item(self,__args:Union[L[0],Tuple[()],Tuple[L[0]]]=...)->Any
numpy.__init__.generic.ndim(self)->L[0]
numpy.__init__.generic.ravel(self:_ScalarType,order:_OrderKACF=...)->ndarray[Any, dtype[_ScalarType]]
numpy.__init__.generic.repeat(self:_ScalarType,repeats:_ArrayLikeInt_co,axis:Optional[SupportsIndex]=...)->ndarray[Any, dtype[_ScalarType]]
numpy.__init__.generic.reshape(self:_ScalarType,*shape:SupportsIndex,order:_OrderACF=...)->ndarray[Any, dtype[_ScalarType]]
numpy.__init__.generic.reshape(self:_ScalarType,__shape:_ShapeLike,*,order:_OrderACF=...)->ndarray[Any, dtype[_ScalarType]]
numpy.__init__.generic.shape(self)->Tuple[()]
numpy.__init__.generic.size(self)->L[1]
numpy.__init__.generic.squeeze(self:_ScalarType,axis:Union[L[0],Tuple[()]]=...)->_ScalarType
numpy.__init__.generic.strides(self)->Tuple[()]
numpy.__init__.generic.take(self,indices:_ArrayLikeInt_co,axis:Optional[SupportsIndex]=...,out:_NdArraySubClass=...,mode:_ModeKind=...)->_NdArraySubClass
numpy.__init__.generic.take(self:_ScalarType,indices:_ArrayLikeInt_co,axis:Optional[SupportsIndex]=...,out:None=...,mode:_ModeKind=...)->ndarray[Any, dtype[_ScalarType]]
numpy.__init__.generic.take(self:_ScalarType,indices:_IntLike_co,axis:Optional[SupportsIndex]=...,out:None=...,mode:_ModeKind=...)->_ScalarType
numpy.__init__.generic.transpose(self:_ScalarType,__axes:Tuple[()]=...)->_ScalarType
numpy.__init__.geterrobj()
numpy.__init__.histogram(a,bins=...,range=...,normed=...,weights=...,density=...)
numpy.__init__.histogram_bin_edges(a,bins=...,range=...,weights=...)
numpy.__init__.histogramdd(sample,bins=...,range=...,normed=...,weights=...,density=...)
numpy.__init__.iinfo(self,int_type:Any)
numpy.__init__.iinfo.__getattr__(self,key:str)->Any
numpy.__init__.iinfo.__init__(self,int_type:Any)
numpy.__init__.inexact(number[_NBit1])
numpy.__init__.inexact.__getnewargs__(self:inexact[_64Bit])->Tuple[float, ...]
numpy.__init__.inner(a,b)
numpy.__init__.integer(number[_NBit1])
numpy.__init__.integer.__and__(self,other:_IntLike_co)->integer
numpy.__init__.integer.__index__(self)->int
numpy.__init__.integer.__invert__(self:_IntType)->_IntType
numpy.__init__.integer.__lshift__(self,other:_IntLike_co)->integer
numpy.__init__.integer.__mod__(self,value:_IntLike_co)->integer
numpy.__init__.integer.__or__(self,other:_IntLike_co)->integer
numpy.__init__.integer.__rand__(self,other:_IntLike_co)->integer
numpy.__init__.integer.__rlshift__(self,other:_IntLike_co)->integer
numpy.__init__.integer.__rmod__(self,value:_IntLike_co)->integer
numpy.__init__.integer.__ror__(self,other:_IntLike_co)->integer
numpy.__init__.integer.__round__(self,ndigits:None=...)->int
numpy.__init__.integer.__round__(self:_ScalarType,ndigits:SupportsIndex)->_ScalarType
numpy.__init__.integer.__rrshift__(self,other:_IntLike_co)->integer
numpy.__init__.integer.__rshift__(self,other:_IntLike_co)->integer
numpy.__init__.integer.__rxor__(self,other:_IntLike_co)->integer
numpy.__init__.integer.__xor__(self,other:_IntLike_co)->integer
numpy.__init__.integer.denominator(self)->L[1]
numpy.__init__.integer.item(self,__args:Union[L[0],Tuple[()],Tuple[L[0]]]=...)->int
numpy.__init__.integer.numerator(self:_ScalarType)->_ScalarType
numpy.__init__.integer.tolist(self)->int
numpy.__init__.is_busday(dates,weekmask=...,holidays=...,busdaycal=...,out=...)
numpy.__init__.lexsort(keys,axis=...)
numpy.__init__.mat(data,dtype=...)
numpy.__init__.matrix(subtype,data:Any,dtype:Any=...,copy:Any=...)
numpy.__init__.matrix.A(self)
numpy.__init__.matrix.A1(self)
numpy.__init__.matrix.H(self)
numpy.__init__.matrix.I(self)
numpy.__init__.matrix.T(self)
numpy.__init__.matrix.__array_finalize__(self,obj)
numpy.__init__.matrix.__getitem__(self,index)
numpy.__init__.matrix.__imul__(self,other)
numpy.__init__.matrix.__ipow__(self,other)
numpy.__init__.matrix.__mul__(self,other)
numpy.__init__.matrix.__new__(subtype,data:Any,dtype:Any=...,copy:Any=...)
numpy.__init__.matrix.__pow__(self,other)
numpy.__init__.matrix.__rmul__(self,other)
numpy.__init__.matrix.__rpow__(self,other)
numpy.__init__.matrix.all(self,axis=...,out=...)
numpy.__init__.matrix.any(self,axis=...,out=...)
numpy.__init__.matrix.argmax(self,axis=...,out=...)
numpy.__init__.matrix.argmin(self,axis=...,out=...)
numpy.__init__.matrix.flatten(self,order=...)
numpy.__init__.matrix.getA(self)
numpy.__init__.matrix.getA1(self)
numpy.__init__.matrix.getH(self)
numpy.__init__.matrix.getI(self)
numpy.__init__.matrix.getT(self)
numpy.__init__.matrix.max(self,axis=...,out=...)
numpy.__init__.matrix.mean(self,axis=...,dtype=...,out=...)
numpy.__init__.matrix.min(self,axis=...,out=...)
numpy.__init__.matrix.prod(self,axis=...,dtype=...,out=...)
numpy.__init__.matrix.ptp(self,axis=...,out=...)
numpy.__init__.matrix.ravel(self,order=...)
numpy.__init__.matrix.squeeze(self,axis=...)
numpy.__init__.matrix.std(self,axis=...,dtype=...,out=...,ddof=...)
numpy.__init__.matrix.sum(self,axis=...,dtype=...,out=...)
numpy.__init__.matrix.tolist(self)
numpy.__init__.matrix.var(self,axis=...,dtype=...,out=...,ddof=...)
numpy.__init__.max(a,axis=...,out=...,keepdims=...,initial=...,where=...)
numpy.__init__.may_share_memory(a,b,max_work=...)
numpy.__init__.memmap(subtype,filename:Any,dtype:Any=...,mode:Any=...,offset:Any=...,shape:Any=...,order:Any=...)
numpy.__init__.memmap.__getattr__(self,key:str)->Any
numpy.__init__.memmap.__new__(subtype,filename:Any,dtype:Any=...,mode:Any=...,offset:Any=...,shape:Any=...,order:Any=...)
numpy.__init__.min(a,axis=...,out=...,keepdims=...,initial=...,where=...)
numpy.__init__.min_scalar_type(a)
numpy.__init__.ndarray(cls:Type[_ArraySelf],shape:_ShapeLike,dtype:DTypeLike=...,buffer:_BufferType=...,offset:int=...,strides:_ShapeLike=...,order:_OrderKACF=...)
numpy.__init__.ndarray.__abs__(self:NDArray[_NumberType])->NDArray[_NumberType]
numpy.__init__.ndarray.__abs__(self:NDArray[bool_])->NDArray[bool_]
numpy.__init__.ndarray.__abs__(self:NDArray[complexfloating[_NBit1,_NBit1]])->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__abs__(self:NDArray[object_])->Any
numpy.__init__.ndarray.__abs__(self:NDArray[timedelta64])->NDArray[timedelta64]
numpy.__init__.ndarray.__add__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__add__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__add__(self:NDArray[Union[bool_,number[Any],timedelta64,datetime64]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__add__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__add__(self:NDArray[datetime64],other:_ArrayLikeTD64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__add__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__add__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__add__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__add__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__add__(self:_ArrayTD64_co,other:_ArrayLikeDT64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__add__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__add__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__and__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__and__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__and__(self:NDArray[Union[bool_,integer[Any]]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__and__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__and__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__and__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__and__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__array__(self,__dtype:None=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.__array__(self,__dtype:_DType)->ndarray[Any, _DType]
numpy.__init__.ndarray.__complex__(self:ndarray[Any,dtype[SupportsComplex]])->complex
numpy.__init__.ndarray.__contains__(self,key)->bool
numpy.__init__.ndarray.__divmod__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__divmod__(self:NDArray[Union[bool_,integer[Any],floating[Any],timedelta64]],other:_RecursiveSequence)->_2Tuple[Any]
numpy.__init__.ndarray.__divmod__(self:NDArray[bool_],other:_ArrayLikeBool_co)->_2Tuple[NDArray[int8]]
numpy.__init__.ndarray.__divmod__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->_2Tuple[NDArray[floating[Any]]]
numpy.__init__.ndarray.__divmod__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->_2Tuple[NDArray[signedinteger[Any]]]
numpy.__init__.ndarray.__divmod__(self:_ArrayTD64_co,other:_NestedSequence[_SupportsArray[dtype[timedelta64]]])->Tuple[NDArray[int64], NDArray[timedelta64]]
numpy.__init__.ndarray.__divmod__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->_2Tuple[NDArray[unsignedinteger[Any]]]
numpy.__init__.ndarray.__float__(self:ndarray[Any,dtype[SupportsFloat]])->float
numpy.__init__.ndarray.__floordiv__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__floordiv__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__floordiv__(self:NDArray[Union[bool_,number[Any],timedelta64]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__floordiv__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__floordiv__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__floordiv__(self:NDArray[timedelta64],other:_ArrayLikeBool_co)->NoReturn
numpy.__init__.ndarray.__floordiv__(self:NDArray[timedelta64],other:_ArrayLikeFloat_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__floordiv__(self:NDArray[timedelta64],other:_NestedSequence[_SupportsArray[dtype[timedelta64]]])->NDArray[int64]
numpy.__init__.ndarray.__floordiv__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__floordiv__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__floordiv__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__floordiv__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__ge__(self:NDArray[Any],other:_ArrayLikeObject_co)->NDArray[bool_]
numpy.__init__.ndarray.__ge__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__ge__(self:NDArray[Union[number[Any],datetime64,timedelta64,bool_]],other:_RecursiveSequence)->NDArray[bool_]
numpy.__init__.ndarray.__ge__(self:NDArray[datetime64],other:_ArrayLikeDT64_co)->NDArray[bool_]
numpy.__init__.ndarray.__ge__(self:NDArray[object_],other:Any)->NDArray[bool_]
numpy.__init__.ndarray.__ge__(self:_ArrayNumber_co,other:_ArrayLikeNumber_co)->NDArray[bool_]
numpy.__init__.ndarray.__ge__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[bool_]
numpy.__init__.ndarray.__gt__(self:NDArray[Any],other:_ArrayLikeObject_co)->NDArray[bool_]
numpy.__init__.ndarray.__gt__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__gt__(self:NDArray[Union[number[Any],datetime64,timedelta64,bool_]],other:_RecursiveSequence)->NDArray[bool_]
numpy.__init__.ndarray.__gt__(self:NDArray[datetime64],other:_ArrayLikeDT64_co)->NDArray[bool_]
numpy.__init__.ndarray.__gt__(self:NDArray[object_],other:Any)->NDArray[bool_]
numpy.__init__.ndarray.__gt__(self:_ArrayNumber_co,other:_ArrayLikeNumber_co)->NDArray[bool_]
numpy.__init__.ndarray.__gt__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[bool_]
numpy.__init__.ndarray.__iadd__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__iadd__(self:NDArray[_ScalarType],other:_RecursiveSequence)->NDArray[_ScalarType]
numpy.__init__.ndarray.__iadd__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__iadd__(self:NDArray[complexfloating[_NBit1,_NBit1]],other:_ArrayLikeComplex_co)->NDArray[complexfloating[_NBit1, _NBit1]]
numpy.__init__.ndarray.__iadd__(self:NDArray[datetime64],other:_ArrayLikeTD64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__iadd__(self:NDArray[floating[_NBit1]],other:_ArrayLikeFloat_co)->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__iadd__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__iadd__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__iadd__(self:NDArray[timedelta64],other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__iadd__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__iand__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__iand__(self:NDArray[_ScalarType],other:_RecursiveSequence)->NDArray[_ScalarType]
numpy.__init__.ndarray.__iand__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__iand__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__iand__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__iand__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[_ScalarType],other:_RecursiveSequence)->NDArray[_ScalarType]
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[complexfloating[_NBit1,_NBit1]],other:_ArrayLikeComplex_co)->NDArray[complexfloating[_NBit1, _NBit1]]
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[floating[_NBit1]],other:_ArrayLikeFloat_co)->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[timedelta64],other:_ArrayLikeBool_co)->NoReturn
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[timedelta64],other:_ArrayLikeInt_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__ifloordiv__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__ilshift__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__ilshift__(self:NDArray[_ScalarType],other:_RecursiveSequence)->NDArray[_ScalarType]
numpy.__init__.ndarray.__ilshift__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__ilshift__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__ilshift__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__imod__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__imod__(self:NDArray[_ScalarType],other:_RecursiveSequence)->NDArray[_ScalarType]
numpy.__init__.ndarray.__imod__(self:NDArray[floating[_NBit1]],other:_ArrayLikeFloat_co)->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__imod__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__imod__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__imod__(self:NDArray[timedelta64],other:_NestedSequence[_SupportsArray[dtype[timedelta64]]])->NDArray[timedelta64]
numpy.__init__.ndarray.__imod__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__imul__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__imul__(self:NDArray[_ScalarType],other:_RecursiveSequence)->NDArray[_ScalarType]
numpy.__init__.ndarray.__imul__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__imul__(self:NDArray[complexfloating[_NBit1,_NBit1]],other:_ArrayLikeComplex_co)->NDArray[complexfloating[_NBit1, _NBit1]]
numpy.__init__.ndarray.__imul__(self:NDArray[floating[_NBit1]],other:_ArrayLikeFloat_co)->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__imul__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__imul__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__imul__(self:NDArray[timedelta64],other:_ArrayLikeFloat_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__imul__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__index__(self:ndarray[Any,dtype[SupportsIndex]])->int
numpy.__init__.ndarray.__int__(self:ndarray[Any,dtype[SupportsInt]])->int
numpy.__init__.ndarray.__invert__(self:NDArray[_IntType])->NDArray[_IntType]
numpy.__init__.ndarray.__invert__(self:NDArray[bool_])->NDArray[bool_]
numpy.__init__.ndarray.__invert__(self:NDArray[object_])->Any
numpy.__init__.ndarray.__ior__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__ior__(self:NDArray[_ScalarType],other:_RecursiveSequence)->NDArray[_ScalarType]
numpy.__init__.ndarray.__ior__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__ior__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__ior__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__ior__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__ipow__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__ipow__(self:NDArray[_ScalarType],other:_RecursiveSequence)->NDArray[_ScalarType]
numpy.__init__.ndarray.__ipow__(self:NDArray[complexfloating[_NBit1,_NBit1]],other:_ArrayLikeComplex_co)->NDArray[complexfloating[_NBit1, _NBit1]]
numpy.__init__.ndarray.__ipow__(self:NDArray[floating[_NBit1]],other:_ArrayLikeFloat_co)->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__ipow__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__ipow__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__ipow__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__irshift__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__irshift__(self:NDArray[_ScalarType],other:_RecursiveSequence)->NDArray[_ScalarType]
numpy.__init__.ndarray.__irshift__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__irshift__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__irshift__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__isub__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__isub__(self:NDArray[_ScalarType],other:_RecursiveSequence)->NDArray[_ScalarType]
numpy.__init__.ndarray.__isub__(self:NDArray[complexfloating[_NBit1,_NBit1]],other:_ArrayLikeComplex_co)->NDArray[complexfloating[_NBit1, _NBit1]]
numpy.__init__.ndarray.__isub__(self:NDArray[datetime64],other:_ArrayLikeTD64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__isub__(self:NDArray[floating[_NBit1]],other:_ArrayLikeFloat_co)->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__isub__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__isub__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__isub__(self:NDArray[timedelta64],other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__isub__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__iter__(self)->Any
numpy.__init__.ndarray.__itruediv__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__itruediv__(self:NDArray[_ScalarType],other:_RecursiveSequence)->NDArray[_ScalarType]
numpy.__init__.ndarray.__itruediv__(self:NDArray[complexfloating[_NBit1,_NBit1]],other:_ArrayLikeComplex_co)->NDArray[complexfloating[_NBit1, _NBit1]]
numpy.__init__.ndarray.__itruediv__(self:NDArray[floating[_NBit1]],other:_ArrayLikeFloat_co)->NDArray[floating[_NBit1]]
numpy.__init__.ndarray.__itruediv__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__itruediv__(self:NDArray[timedelta64],other:_ArrayLikeBool_co)->NoReturn
numpy.__init__.ndarray.__itruediv__(self:NDArray[timedelta64],other:_ArrayLikeInt_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__ixor__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__ixor__(self:NDArray[_ScalarType],other:_RecursiveSequence)->NDArray[_ScalarType]
numpy.__init__.ndarray.__ixor__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__ixor__(self:NDArray[object_],other:Any)->NDArray[object_]
numpy.__init__.ndarray.__ixor__(self:NDArray[signedinteger[_NBit1]],other:_ArrayLikeInt_co)->NDArray[signedinteger[_NBit1]]
numpy.__init__.ndarray.__ixor__(self:NDArray[unsignedinteger[_NBit1]],other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[_NBit1]]
numpy.__init__.ndarray.__le__(self:NDArray[Any],other:_ArrayLikeObject_co)->NDArray[bool_]
numpy.__init__.ndarray.__le__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__le__(self:NDArray[Union[number[Any],datetime64,timedelta64,bool_]],other:_RecursiveSequence)->NDArray[bool_]
numpy.__init__.ndarray.__le__(self:NDArray[datetime64],other:_ArrayLikeDT64_co)->NDArray[bool_]
numpy.__init__.ndarray.__le__(self:NDArray[object_],other:Any)->NDArray[bool_]
numpy.__init__.ndarray.__le__(self:_ArrayNumber_co,other:_ArrayLikeNumber_co)->NDArray[bool_]
numpy.__init__.ndarray.__le__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[bool_]
numpy.__init__.ndarray.__len__(self)->int
numpy.__init__.ndarray.__lshift__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__lshift__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__lshift__(self:NDArray[Union[bool_,integer[Any]]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__lshift__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__lshift__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__lshift__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__lshift__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__lt__(self:NDArray[Any],other:_ArrayLikeObject_co)->NDArray[bool_]
numpy.__init__.ndarray.__lt__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__lt__(self:NDArray[Union[number[Any],datetime64,timedelta64,bool_]],other:_RecursiveSequence)->NDArray[bool_]
numpy.__init__.ndarray.__lt__(self:NDArray[datetime64],other:_ArrayLikeDT64_co)->NDArray[bool_]
numpy.__init__.ndarray.__lt__(self:NDArray[object_],other:Any)->NDArray[bool_]
numpy.__init__.ndarray.__lt__(self:_ArrayNumber_co,other:_ArrayLikeNumber_co)->NDArray[bool_]
numpy.__init__.ndarray.__lt__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[bool_]
numpy.__init__.ndarray.__matmul__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__matmul__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__matmul__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__matmul__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__matmul__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__matmul__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__matmul__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__matmul__(self:_ArrayNumber_co,other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__matmul__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__mod__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__mod__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__mod__(self:NDArray[Union[bool_,integer[Any],floating[Any],timedelta64]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__mod__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__mod__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__mod__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__mod__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__mod__(self:_ArrayTD64_co,other:_NestedSequence[_SupportsArray[dtype[timedelta64]]])->NDArray[timedelta64]
numpy.__init__.ndarray.__mod__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__mul__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__mul__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__mul__(self:NDArray[Union[bool_,number[Any],timedelta64]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__mul__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__mul__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__mul__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__mul__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__mul__(self:_ArrayFloat_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__mul__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__mul__(self:_ArrayTD64_co,other:_ArrayLikeFloat_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__mul__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__neg__(self:NDArray[_NumberType])->NDArray[_NumberType]
numpy.__init__.ndarray.__neg__(self:NDArray[object_])->Any
numpy.__init__.ndarray.__neg__(self:NDArray[timedelta64])->NDArray[timedelta64]
numpy.__init__.ndarray.__new__(cls:Type[_ArraySelf],shape:_ShapeLike,dtype:DTypeLike=...,buffer:_BufferType=...,offset:int=...,strides:_ShapeLike=...,order:_OrderKACF=...)
numpy.__init__.ndarray.__or__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__or__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__or__(self:NDArray[Union[bool_,integer[Any]]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__or__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__or__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__or__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__or__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__pos__(self:NDArray[_NumberType])->NDArray[_NumberType]
numpy.__init__.ndarray.__pos__(self:NDArray[object_])->Any
numpy.__init__.ndarray.__pos__(self:NDArray[timedelta64])->NDArray[timedelta64]
numpy.__init__.ndarray.__pow__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__pow__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__pow__(self:NDArray[Union[bool_,number[Any]]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__pow__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__pow__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__pow__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__pow__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__pow__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__pow__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__radd__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__radd__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__radd__(self:NDArray[Union[bool_,number[Any],timedelta64,datetime64]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__radd__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__radd__(self:NDArray[datetime64],other:_ArrayLikeTD64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__radd__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__radd__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__radd__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__radd__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__radd__(self:_ArrayTD64_co,other:_ArrayLikeDT64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__radd__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__radd__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rand__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rand__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__rand__(self:NDArray[Union[bool_,integer[Any]]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__rand__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__rand__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rand__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rand__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rdivmod__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__rdivmod__(self:NDArray[Union[bool_,integer[Any],floating[Any],timedelta64]],other:_RecursiveSequence)->_2Tuple[Any]
numpy.__init__.ndarray.__rdivmod__(self:NDArray[bool_],other:_ArrayLikeBool_co)->_2Tuple[NDArray[int8]]
numpy.__init__.ndarray.__rdivmod__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->_2Tuple[NDArray[floating[Any]]]
numpy.__init__.ndarray.__rdivmod__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->_2Tuple[NDArray[signedinteger[Any]]]
numpy.__init__.ndarray.__rdivmod__(self:_ArrayTD64_co,other:_NestedSequence[_SupportsArray[dtype[timedelta64]]])->Tuple[NDArray[int64], NDArray[timedelta64]]
numpy.__init__.ndarray.__rdivmod__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->_2Tuple[NDArray[unsignedinteger[Any]]]
numpy.__init__.ndarray.__rfloordiv__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rfloordiv__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__rfloordiv__(self:NDArray[Union[bool_,number[Any],timedelta64]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__rfloordiv__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__rfloordiv__(self:NDArray[bool_],other:_ArrayLikeTD64_co)->NoReturn
numpy.__init__.ndarray.__rfloordiv__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rfloordiv__(self:NDArray[timedelta64],other:_NestedSequence[_SupportsArray[dtype[timedelta64]]])->NDArray[int64]
numpy.__init__.ndarray.__rfloordiv__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__rfloordiv__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__rfloordiv__(self:_ArrayFloat_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__rfloordiv__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rfloordiv__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rlshift__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rlshift__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__rlshift__(self:NDArray[Union[bool_,integer[Any]]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__rlshift__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__rlshift__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rlshift__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rlshift__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rmatmul__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rmatmul__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__rmatmul__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__rmatmul__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rmatmul__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__rmatmul__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__rmatmul__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rmatmul__(self:_ArrayNumber_co,other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__rmatmul__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rmod__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rmod__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__rmod__(self:NDArray[Union[bool_,integer[Any],floating[Any],timedelta64]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__rmod__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__rmod__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rmod__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__rmod__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rmod__(self:_ArrayTD64_co,other:_NestedSequence[_SupportsArray[dtype[timedelta64]]])->NDArray[timedelta64]
numpy.__init__.ndarray.__rmod__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rmul__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rmul__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__rmul__(self:NDArray[Union[bool_,number[Any],timedelta64]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__rmul__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__rmul__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rmul__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__rmul__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__rmul__(self:_ArrayFloat_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__rmul__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rmul__(self:_ArrayTD64_co,other:_ArrayLikeFloat_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__rmul__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__ror__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__ror__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__ror__(self:NDArray[Union[bool_,integer[Any]]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__ror__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__ror__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__ror__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__ror__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rpow__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rpow__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__rpow__(self:NDArray[Union[bool_,number[Any]]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__rpow__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__rpow__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rpow__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__rpow__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__rpow__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rpow__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rrshift__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rrshift__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__rrshift__(self:NDArray[Union[bool_,integer[Any]]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__rrshift__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__rrshift__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rrshift__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rrshift__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rshift__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rshift__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__rshift__(self:NDArray[Union[bool_,integer[Any]]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__rshift__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[int8]
numpy.__init__.ndarray.__rshift__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rshift__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rshift__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rsub__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rsub__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__rsub__(self:NDArray[Union[bool_,number[Any],timedelta64,datetime64]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__rsub__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NoReturn
numpy.__init__.ndarray.__rsub__(self:NDArray[datetime64],other:_ArrayLikeDT64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__rsub__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rsub__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__rsub__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__rsub__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rsub__(self:_ArrayTD64_co,other:_ArrayLikeDT64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__rsub__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__rsub__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__rtruediv__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rtruediv__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__rtruediv__(self:NDArray[Union[bool_,number[Any],timedelta64]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__rtruediv__(self:NDArray[bool_],other:_ArrayLikeTD64_co)->NoReturn
numpy.__init__.ndarray.__rtruediv__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rtruediv__(self:NDArray[timedelta64],other:_NestedSequence[_SupportsArray[dtype[timedelta64]]])->NDArray[float64]
numpy.__init__.ndarray.__rtruediv__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__rtruediv__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__rtruediv__(self:_ArrayFloat_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__rtruediv__(self:_ArrayInt_co,other:_ArrayInt_co)->NDArray[float64]
numpy.__init__.ndarray.__rxor__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__rxor__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__rxor__(self:NDArray[Union[bool_,integer[Any]]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__rxor__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__rxor__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__rxor__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__rxor__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__setitem__(self,key,value)
numpy.__init__.ndarray.__sub__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__sub__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__sub__(self:NDArray[Union[bool_,number[Any],timedelta64,datetime64]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__sub__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NoReturn
numpy.__init__.ndarray.__sub__(self:NDArray[datetime64],other:_ArrayLikeDT64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__sub__(self:NDArray[datetime64],other:_ArrayLikeTD64_co)->NDArray[datetime64]
numpy.__init__.ndarray.__sub__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__sub__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__sub__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__sub__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__sub__(self:_ArrayTD64_co,other:_ArrayLikeTD64_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__sub__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.__truediv__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__truediv__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__truediv__(self:NDArray[Union[bool_,number[Any],timedelta64]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__truediv__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__truediv__(self:NDArray[timedelta64],other:_ArrayLikeBool_co)->NoReturn
numpy.__init__.ndarray.__truediv__(self:NDArray[timedelta64],other:_ArrayLikeFloat_co)->NDArray[timedelta64]
numpy.__init__.ndarray.__truediv__(self:NDArray[timedelta64],other:_NestedSequence[_SupportsArray[dtype[timedelta64]]])->NDArray[float64]
numpy.__init__.ndarray.__truediv__(self:_ArrayComplex_co,other:_ArrayLikeComplex_co)->NDArray[complexfloating[Any, Any]]
numpy.__init__.ndarray.__truediv__(self:_ArrayFloat_co,other:_ArrayLikeFloat_co)->NDArray[floating[Any]]
numpy.__init__.ndarray.__truediv__(self:_ArrayInt_co,other:_ArrayInt_co)->NDArray[float64]
numpy.__init__.ndarray.__xor__(self:NDArray[Any],other:_ArrayLikeObject_co)->Any
numpy.__init__.ndarray.__xor__(self:NDArray[Any],other:_NestedSequence[Union[str,bytes]])->NoReturn
numpy.__init__.ndarray.__xor__(self:NDArray[Union[bool_,integer[Any]]],other:_RecursiveSequence)->Any
numpy.__init__.ndarray.__xor__(self:NDArray[bool_],other:_ArrayLikeBool_co)->NDArray[bool_]
numpy.__init__.ndarray.__xor__(self:NDArray[object_],other:Any)->Any
numpy.__init__.ndarray.__xor__(self:_ArrayInt_co,other:_ArrayLikeInt_co)->NDArray[signedinteger[Any]]
numpy.__init__.ndarray.__xor__(self:_ArrayUInt_co,other:_ArrayLikeUInt_co)->NDArray[unsignedinteger[Any]]
numpy.__init__.ndarray.argpartition(self,kth:_ArrayLikeInt_co,axis:Optional[SupportsIndex]=...,kind:_PartitionKind=...,order:Union[None,str,Sequence[str]]=...)->ndarray[Any, dtype[intp]]
numpy.__init__.ndarray.base(self)->Optional[ndarray]
numpy.__init__.ndarray.byteswap(self:_ArraySelf,inplace:bool=...)->_ArraySelf
numpy.__init__.ndarray.ctypes(self)->_ctypes[int]
numpy.__init__.ndarray.diagonal(self,offset:SupportsIndex=...,axis1:SupportsIndex=...,axis2:SupportsIndex=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.dot(self,b:ArrayLike,out:None=...)->Any
numpy.__init__.ndarray.dot(self,b:ArrayLike,out:_NdArraySubClass)->_NdArraySubClass
numpy.__init__.ndarray.dot(self,b:_ScalarLike_co,out:None=...)->ndarray
numpy.__init__.ndarray.dtype(self)->_DType_co
numpy.__init__.ndarray.fill(self,value:Any)->None
numpy.__init__.ndarray.flat(self:_NdArraySubClass)->flatiter[_NdArraySubClass]
numpy.__init__.ndarray.flatten(self,order:_OrderKACF=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.imag(self,value:ArrayLike)->None
numpy.__init__.ndarray.imag(self:NDArray[_SupportsImag[_ScalarType]])->ndarray[_ShapeType, dtype[_ScalarType]]
numpy.__init__.ndarray.item(self:ndarray[Any,dtype[_SupportsItem[_T]]],*args:SupportsIndex)->_T
numpy.__init__.ndarray.item(self:ndarray[Any,dtype[_SupportsItem[_T]]],__args:Tuple[SupportsIndex,...])->_T
numpy.__init__.ndarray.itemset(self,__item:_ShapeLike,__value:Any)->None
numpy.__init__.ndarray.itemset(self,__value:Any)->None
numpy.__init__.ndarray.ndim(self)->int
numpy.__init__.ndarray.nonzero(self)->Tuple[ndarray[Any, dtype[intp]], ...]
numpy.__init__.ndarray.partition(self,kth:_ArrayLikeInt_co,axis:SupportsIndex=...,kind:_PartitionKind=...,order:Union[None,str,Sequence[str]]=...)->None
numpy.__init__.ndarray.put(self,ind:_ArrayLikeInt_co,v:ArrayLike,mode:_ModeKind=...)->None
numpy.__init__.ndarray.ravel(self,order:_OrderKACF=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.real(self,value:ArrayLike)->None
numpy.__init__.ndarray.real(self:NDArray[_SupportsReal[_ScalarType]])->ndarray[_ShapeType, dtype[_ScalarType]]
numpy.__init__.ndarray.repeat(self,repeats:_ArrayLikeInt_co,axis:Optional[SupportsIndex]=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.reshape(self,*shape:SupportsIndex,order:_OrderACF=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.reshape(self,__shape:_ShapeLike,*,order:_OrderACF=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.resize(self,*new_shape:SupportsIndex,refcheck:bool=...)->None
numpy.__init__.ndarray.resize(self,__new_shape:_ShapeLike,*,refcheck:bool=...)->None
numpy.__init__.ndarray.searchsorted(self,v:ArrayLike,side:_SortSide=...,sorter:Optional[_ArrayLikeInt_co]=...)->ndarray[Any, dtype[intp]]
numpy.__init__.ndarray.searchsorted(self,v:_ScalarLike_co,side:_SortSide=...,sorter:Optional[_ArrayLikeInt_co]=...)->intp
numpy.__init__.ndarray.setfield(self,val:ArrayLike,dtype:DTypeLike,offset:SupportsIndex=...)->None
numpy.__init__.ndarray.setflags(self,write:bool=...,align:bool=...,uic:bool=...)->None
numpy.__init__.ndarray.shape(self)->_Shape
numpy.__init__.ndarray.shape(self,value:_ShapeLike)->None
numpy.__init__.ndarray.size(self)->int
numpy.__init__.ndarray.sort(self,axis:SupportsIndex=...,kind:Optional[_SortKind]=...,order:Union[None,str,Sequence[str]]=...)->None
numpy.__init__.ndarray.squeeze(self,axis:Union[SupportsIndex,Tuple[SupportsIndex,...]]=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.strides(self)->_Shape
numpy.__init__.ndarray.strides(self,value:_ShapeLike)->None
numpy.__init__.ndarray.swapaxes(self,axis1:SupportsIndex,axis2:SupportsIndex)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.take(self,indices:_ArrayLikeInt_co,axis:Optional[SupportsIndex]=...,out:None=...,mode:_ModeKind=...)->ndarray[Any, _DType_co]
numpy.__init__.ndarray.take(self,indices:_ArrayLikeInt_co,axis:Optional[SupportsIndex]=...,out:_NdArraySubClass=...,mode:_ModeKind=...)->_NdArraySubClass
numpy.__init__.ndarray.take(self:ndarray[Any,dtype[_ScalarType]],indices:_IntLike_co,axis:Optional[SupportsIndex]=...,out:None=...,mode:_ModeKind=...)->_ScalarType
numpy.__init__.ndarray.trace(self,offset:SupportsIndex=...,axis1:SupportsIndex=...,axis2:SupportsIndex=...,dtype:DTypeLike=...,out:None=...)->Any
numpy.__init__.ndarray.trace(self,offset:SupportsIndex=...,axis1:SupportsIndex=...,axis2:SupportsIndex=...,dtype:DTypeLike=...,out:_NdArraySubClass=...)->_NdArraySubClass
numpy.__init__.ndarray.transpose(self:_ArraySelf,*axes:SupportsIndex)->_ArraySelf
numpy.__init__.ndarray.transpose(self:_ArraySelf,__axes:_ShapeLike)->_ArraySelf
numpy.__init__.ndenumerate(cls,arr:_RecursiveSequence)
numpy.__init__.ndenumerate.__iter__(self:_T)->_T
numpy.__init__.ndenumerate.__new__(cls,arr:_RecursiveSequence)
numpy.__init__.ndenumerate.__next__(self:ndenumerate[_ScalarType])->Tuple[_Shape, _ScalarType]
numpy.__init__.ndindex(self,*shape:SupportsIndex)
numpy.__init__.ndindex.__init__(self,*shape:SupportsIndex)
numpy.__init__.ndindex.__iter__(self:_T)->_T
numpy.__init__.ndindex.__next__(self)->_Shape
numpy.__init__.nditer(cls,op:Any,flags:Any=...,op_flags:Any=...,op_dtypes:Any=...,order:Any=...,casting:Any=...,op_axes:Any=...,itershape:Any=...,buffersize:Any=...)
numpy.__init__.nditer.__getattr__(self,key:str)->Any
numpy.__init__.nditer.__new__(cls,op:Any,flags:Any=...,op_flags:Any=...,op_dtypes:Any=...,order:Any=...,casting:Any=...,op_axes:Any=...,itershape:Any=...,buffersize:Any=...)
numpy.__init__.nested_iters(*args,**kwargs)
numpy.__init__.number(generic,Generic[_NBit1])
numpy.__init__.number.__abs__(self:_ArraySelf)->_ArraySelf
numpy.__init__.number.__complex__(self)->complex
numpy.__init__.number.__float__(self)->float
numpy.__init__.number.__int__(self)->int
numpy.__init__.number.__neg__(self:_ArraySelf)->_ArraySelf
numpy.__init__.number.__pos__(self:_ArraySelf)->_ArraySelf
numpy.__init__.number.imag(self:_ArraySelf)->_ArraySelf
numpy.__init__.number.real(self:_ArraySelf)->_ArraySelf
numpy.__init__.object_(self,__value:object=...)
numpy.__init__.object_.__complex__(self)->complex
numpy.__init__.object_.__float__(self)->float
numpy.__init__.object_.__init__(self,__value:object=...)
numpy.__init__.object_.__int__(self)->int
numpy.__init__.object_.imag(self:_ArraySelf)->_ArraySelf
numpy.__init__.object_.real(self:_ArraySelf)->_ArraySelf
numpy.__init__.poly1d(self,c_or_r:Any,r:Any=...,variable:Any=...)
numpy.__init__.poly1d.__add__(self,other)
numpy.__init__.poly1d.__array__(self,t=...)
numpy.__init__.poly1d.__div__(self,other)
numpy.__init__.poly1d.__eq__(self,other)
numpy.__init__.poly1d.__getitem__(self,val)
numpy.__init__.poly1d.__init__(self,c_or_r:Any,r:Any=...,variable:Any=...)
numpy.__init__.poly1d.__iter__(self)
numpy.__init__.poly1d.__len__(self)
numpy.__init__.poly1d.__mul__(self,other)
numpy.__init__.poly1d.__ne__(self,other)
numpy.__init__.poly1d.__neg__(self)
numpy.__init__.poly1d.__pos__(self)
numpy.__init__.poly1d.__pow__(self,val)
numpy.__init__.poly1d.__radd__(self,other)
numpy.__init__.poly1d.__rdiv__(self,other)
numpy.__init__.poly1d.__rmul__(self,other)
numpy.__init__.poly1d.__rsub__(self,other)
numpy.__init__.poly1d.__rtruediv__(self,other)
numpy.__init__.poly1d.__setitem__(self,key,val)
numpy.__init__.poly1d.__sub__(self,other)
numpy.__init__.poly1d.__truediv__(self,other)
numpy.__init__.poly1d.c(self)
numpy.__init__.poly1d.c(self,value)
numpy.__init__.poly1d.coef(self)
numpy.__init__.poly1d.coef(self,value)
numpy.__init__.poly1d.coefficients(self)
numpy.__init__.poly1d.coefficients(self,value)
numpy.__init__.poly1d.coeffs(self)
numpy.__init__.poly1d.coeffs(self,value)
numpy.__init__.poly1d.deriv(self,m=...)
numpy.__init__.poly1d.integ(self,m=...,k=...)
numpy.__init__.poly1d.o(self)
numpy.__init__.poly1d.order(self)
numpy.__init__.poly1d.r(self)
numpy.__init__.poly1d.roots(self)
numpy.__init__.poly1d.variable(self)
numpy.__init__.product(*args,**kwargs)
numpy.__init__.promote_types(type1,type2)
numpy.__init__.putmask(a,mask,values)
numpy.__init__.recarray(subtype,shape:Any,dtype:Any=...,buf:Any=...,offset:Any=...,strides:Any=...,formats:Any=...,names:Any=...,titles:Any=...,byteorder:Any=...,aligned:Any=...,order:Any=...)
numpy.__init__.recarray.__array_finalize__(self,obj)
numpy.__init__.recarray.__getattribute__(self,attr)
numpy.__init__.recarray.__getitem__(self,indx)
numpy.__init__.recarray.__new__(subtype,shape:Any,dtype:Any=...,buf:Any=...,offset:Any=...,strides:Any=...,formats:Any=...,names:Any=...,titles:Any=...,byteorder:Any=...,aligned:Any=...,order:Any=...)
numpy.__init__.recarray.__setattr__(self,attr,val)
numpy.__init__.recarray.field(self,attr,val=...)
numpy.__init__.record(void)
numpy.__init__.record.__getattribute__(self,attr)
numpy.__init__.record.__getitem__(self,indx)
numpy.__init__.record.__setattr__(self,attr,val)
numpy.__init__.record.pprint(self)
numpy.__init__.result_type(*arrays_and_dtypes)
numpy.__init__.round(a,decimals=...,out=...)
numpy.__init__.round_(a,decimals=...,out=...)
numpy.__init__.seterrobj(errobj)
numpy.__init__.shares_memory(a,b,max_work=...)
numpy.__init__.show_config()
numpy.__init__.signedinteger(self,__value:_IntValue=...)
numpy.__init__.signedinteger.__init__(self,__value:_IntValue=...)
numpy.__init__.str_(self,__value:bytes,encoding:str=...,errors:str=...)
numpy.__init__.str_.__init__(self,__value:bytes,encoding:str=...,errors:str=...)
numpy.__init__.str_.item(self,__args:Union[L[0],Tuple[()],Tuple[L[0]]]=...)->str
numpy.__init__.str_.tolist(self)->str
numpy.__init__.timedelta64(self,__value:Union[None,int,_CharLike_co,dt.timedelta,timedelta64]=...,__format:Union[_CharLike_co,Tuple[_CharLike_co,_IntLike_co]]=...)
numpy.__init__.timedelta64.__abs__(self:_ArraySelf)->_ArraySelf
numpy.__init__.timedelta64.__add__(self,other:_TD64Like_co)->timedelta64
numpy.__init__.timedelta64.__complex__(self)->complex
numpy.__init__.timedelta64.__divmod__(self,other:timedelta64)->Tuple[int64, timedelta64]
numpy.__init__.timedelta64.__float__(self)->float
numpy.__init__.timedelta64.__init__(self,__value:Union[None,int,_CharLike_co,dt.timedelta,timedelta64]=...,__format:Union[_CharLike_co,Tuple[_CharLike_co,_IntLike_co]]=...)
numpy.__init__.timedelta64.__int__(self)->int
numpy.__init__.timedelta64.__mod__(self,other:timedelta64)->timedelta64
numpy.__init__.timedelta64.__mul__(self,other:_FloatLike_co)->timedelta64
numpy.__init__.timedelta64.__neg__(self:_ArraySelf)->_ArraySelf
numpy.__init__.timedelta64.__pos__(self:_ArraySelf)->_ArraySelf
numpy.__init__.timedelta64.__radd__(self,other:_TD64Like_co)->timedelta64
numpy.__init__.timedelta64.__rdivmod__(self,other:timedelta64)->Tuple[int64, timedelta64]
numpy.__init__.timedelta64.__rfloordiv__(self,other:timedelta64)->int64
numpy.__init__.timedelta64.__rmod__(self,other:timedelta64)->timedelta64
numpy.__init__.timedelta64.__rmul__(self,other:_FloatLike_co)->timedelta64
numpy.__init__.timedelta64.__rsub__(self,other:_TD64Like_co)->timedelta64
numpy.__init__.timedelta64.__rtruediv__(self,other:timedelta64)->float64
numpy.__init__.timedelta64.__sub__(self,other:_TD64Like_co)->timedelta64
numpy.__init__.timedelta64.denominator(self)->L[1]
numpy.__init__.timedelta64.numerator(self:_ScalarType)->_ScalarType
numpy.__init__.ufunc
numpy.__init__.ufunc.__doc__(self)->str
numpy.__init__.ufunc.__name__(self)->str
numpy.__init__.ufunc.identity(self)->Any
numpy.__init__.ufunc.nargs(self)->int
numpy.__init__.ufunc.nin(self)->int
numpy.__init__.ufunc.nout(self)->int
numpy.__init__.ufunc.ntypes(self)->int
numpy.__init__.ufunc.signature(self)->Optional[str]
numpy.__init__.ufunc.types(self)->List[str]
numpy.__init__.unsignedinteger(self,__value:_IntValue=...)
numpy.__init__.unsignedinteger.__init__(self,__value:_IntValue=...)
numpy.__init__.vdot(a,b)
numpy.__init__.vectorize(self,pyfunc,otypes:Any=...,doc:Any=...,excluded:Any=...,cache:Any=...,signature:Any=...)
numpy.__init__.vectorize.__init__(self,pyfunc,otypes:Any=...,doc:Any=...,excluded:Any=...,cache:Any=...,signature:Any=...)
numpy.__init__.void(self,__value:Union[_IntLike_co,bytes])
numpy.__init__.void.__getitem__(self,key:SupportsIndex)->Any
numpy.__init__.void.__init__(self,__value:Union[_IntLike_co,bytes])
numpy.__init__.void.__setitem__(self,key:SupportsIndex,value:ArrayLike)->None
numpy.__init__.void.imag(self:_ArraySelf)->_ArraySelf
numpy.__init__.void.real(self:_ArraySelf)->_ArraySelf
numpy.__init__.void.setfield(self,val:ArrayLike,dtype:DTypeLike,offset:int=...)->None
numpy.__init__.where(__condition)
numpy.__init__.where(__condition,__x,__y)
numpy.__init__.zeros(shape:_ShapeLike,dtype:DTypeLike=...,order:_OrderCF=...,*,like:ArrayLike=...)->ndarray


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/_version.py----------------------------------------
numpy._version.get_versions()
numpy.get_versions()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/_distributor_init.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/rec.pyi----------------------------------------
numpy.rec.array(obj,dtype=...,shape=...,offset=...,strides=...,formats=...,names=...,titles=...,aligned=...,byteorder=...,copy=...)
numpy.rec.fromarrays(arrayList,dtype=...,shape=...,formats=...,names=...,titles=...,aligned=...,byteorder=...)
numpy.rec.fromfile(fd,dtype=...,shape=...,offset=...,formats=...,names=...,titles=...,aligned=...,byteorder=...)
numpy.rec.fromrecords(recList,dtype=...,shape=...,formats=...,names=...,titles=...,aligned=...,byteorder=...)
numpy.rec.fromstring(datastring,dtype=...,shape=...,offset=...,formats=...,names=...,titles=...,aligned=...,byteorder=...)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/char.pyi----------------------------------------
numpy.char.add(x1,x2)
numpy.char.array(obj,itemsize=...,copy=...,unicode=...,order=...)
numpy.char.asarray(obj,itemsize=...,unicode=...,order=...)
numpy.char.capitalize(a)
numpy.char.center(a,width,fillchar=...)
numpy.char.count(a,sub,start=...,end=...)
numpy.char.decode(a,encoding=...,errors=...)
numpy.char.encode(a,encoding=...,errors=...)
numpy.char.endswith(a,suffix,start=...,end=...)
numpy.char.equal(x1,x2)
numpy.char.expandtabs(a,tabsize=...)
numpy.char.find(a,sub,start=...,end=...)
numpy.char.greater(x1,x2)
numpy.char.greater_equal(x1,x2)
numpy.char.index(a,sub,start=...,end=...)
numpy.char.isalnum(a)
numpy.char.isalpha(a)
numpy.char.isdecimal(a)
numpy.char.isdigit(a)
numpy.char.islower(a)
numpy.char.isnumeric(a)
numpy.char.isspace(a)
numpy.char.istitle(a)
numpy.char.isupper(a)
numpy.char.join(sep,seq)
numpy.char.less(x1,x2)
numpy.char.less_equal(x1,x2)
numpy.char.ljust(a,width,fillchar=...)
numpy.char.lower(a)
numpy.char.lstrip(a,chars=...)
numpy.char.mod(a,values)
numpy.char.multiply(a,i)
numpy.char.not_equal(x1,x2)
numpy.char.partition(a,sep)
numpy.char.replace(a,old,new,count=...)
numpy.char.rfind(a,sub,start=...,end=...)
numpy.char.rindex(a,sub,start=...,end=...)
numpy.char.rjust(a,width,fillchar=...)
numpy.char.rpartition(a,sep)
numpy.char.rsplit(a,sep=...,maxsplit=...)
numpy.char.rstrip(a,chars=...)
numpy.char.split(a,sep=...,maxsplit=...)
numpy.char.splitlines(a,keepends=...)
numpy.char.startswith(a,prefix,start=...,end=...)
numpy.char.str_len(a)
numpy.char.strip(a,chars=...)
numpy.char.swapcase(a)
numpy.char.title(a)
numpy.char.translate(a,table,deletechars=...)
numpy.char.upper(a)
numpy.char.zfill(a,width)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/matlib.py----------------------------------------
A:numpy.matlib.a->asanyarray(a)
A:numpy.matlib.b->empty((n, n), dtype=dtype)
A:numpy.matlib.c->asanyarray(a).reshape(1, a.size).repeat(m, 0).reshape(rows, origcols).repeat(n, 0)
numpy.matempty(shape,dtype=None,order='C')
numpy.mateye(n,M=None,k=0,dtype=float,order='C')
numpy.matidentity(n,dtype=None)
numpy.matlib.empty(shape,dtype=None,order='C')
numpy.matlib.eye(n,M=None,k=0,dtype=float,order='C')
numpy.matlib.identity(n,dtype=None)
numpy.matlib.ones(shape,dtype=None,order='C')
numpy.matlib.rand(*args)
numpy.matlib.randn(*args)
numpy.matlib.repmat(a,m,n)
numpy.matlib.zeros(shape,dtype=None,order='C')
numpy.matones(shape,dtype=None,order='C')
numpy.matrand(*args)
numpy.matrandn(*args)
numpy.matrepmat(a,m,n)
numpy.matzeros(shape,dtype=None,order='C')


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/_pytesttester.py----------------------------------------
A:numpy._pytesttester.info->numpy.lib.utils._opt_info()
A:numpy._pytesttester.module_path->os.path.abspath(module.__path__[0])
A:numpy._pytesttester.code->pytest.main(pytest_args)
numpy.PytestTester(self,module_name)
numpy._pytesttester.PytestTester(self,module_name)
numpy._pytesttester.PytestTester.__init__(self,module_name)
numpy._pytesttester._show_numpy_info()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/setup.py----------------------------------------
A:numpy.setup.config->Configuration('numpy', parent_package, top_path)
numpy.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/version.py----------------------------------------
A:numpy.version.vinfo->get_versions()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/conftest.py----------------------------------------
A:numpy.conftest._pytest_ini->os.path.join(os.path.dirname(__file__), '..', 'pytest.ini')
A:numpy.conftest.available_mem->session.config.getoption('available_memory')
A:numpy.conftest.mode->get_fpu_mode()
A:numpy.conftest.old_mode->get_fpu_mode()
A:numpy.conftest.new_mode->get_fpu_mode()
A:numpy.conftest.collect_result->_collect_results.get(request.node)
numpy.conftest.add_np(doctest_namespace)
numpy.conftest.check_fpu_mode(request)
numpy.conftest.env_setup(monkeypatch)
numpy.conftest.pytest_addoption(parser)
numpy.conftest.pytest_configure(config)
numpy.conftest.pytest_itemcollected(item)
numpy.conftest.pytest_sessionstart(session)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/_globals.py----------------------------------------
A:numpy._globals.cls.__instance->super().__new__(cls)
A:numpy._globals._NoValue->_NoValueType()
numpy.ModuleDeprecationWarning(DeprecationWarning)
numpy.VisibleDeprecationWarning(UserWarning)
numpy._NoValueType(cls)
numpy._NoValueType.__reduce__(self)
numpy._NoValueType.__repr__(self)
numpy._globals.ModuleDeprecationWarning(DeprecationWarning)
numpy._globals.VisibleDeprecationWarning(UserWarning)
numpy._globals._NoValueType(cls)
numpy._globals._NoValueType.__new__(cls)
numpy._globals._NoValueType.__reduce__(self)
numpy._globals._NoValueType.__repr__(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/histograms.py----------------------------------------
A:numpy.lib.histograms.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib.histograms.ptp_x->_ptp(x)
A:numpy.lib.histograms.nbins_upper_bound->max(100, int(np.sqrt(n)))
A:numpy.lib.histograms.nbins->min(_range(1, nbins_upper_bound + 1), key=jhat)
A:numpy.lib.histograms.sg1->numpy.sqrt(6.0 * (x.size - 2) / ((x.size + 1.0) * (x.size + 3)))
A:numpy.lib.histograms.sigma->numpy.std(x)
A:numpy.lib.histograms.g1->numpy.mean(temp)
A:numpy.lib.histograms.iqr->numpy.subtract(*np.percentile(x, [75, 25]))
A:numpy.lib.histograms.fd_bw->_hist_bin_fd(x, range)
A:numpy.lib.histograms.sturges_bw->_hist_bin_sturges(x, range)
A:numpy.lib.histograms.a->a.ravel().ravel()
A:numpy.lib.histograms.weights->numpy.asarray(weights)
A:numpy.lib.histograms.dt->numpy.result_type(a, b)
A:numpy.lib.histograms.(first_edge, last_edge)->_get_outer_edges(a, range)
A:numpy.lib.histograms.width->_hist_bin_selectors[bin_name](a, (first_edge, last_edge))
A:numpy.lib.histograms.n_equal_bins->operator.index(bins)
A:numpy.lib.histograms.bin_edges->numpy.linspace(first_edge, last_edge, n_equal_bins + 1, endpoint=True, dtype=bin_type)
A:numpy.lib.histograms.bin_type->numpy.result_type(bin_type, float)
A:numpy.lib.histograms.(a, weights)->_ravel_and_check_weights(a, weights)
A:numpy.lib.histograms.(bin_edges, _)->_get_bin_edges(a, bins, range, weights)
A:numpy.lib.histograms.(bin_edges, uniform_bins)->_get_bin_edges(a, bins, range, weights)
A:numpy.lib.histograms.ntype->numpy.dtype(np.intp)
A:numpy.lib.histograms.n->operator.index(bins[i])
A:numpy.lib.histograms.tmp_a->tmp_a.astype(bin_edges.dtype, copy=False).astype(bin_edges.dtype, copy=False)
A:numpy.lib.histograms.indices->f_indices.astype(np.intp)
A:numpy.lib.histograms.cum_n->numpy.zeros(bin_edges.shape, ntype)
A:numpy.lib.histograms.sa->numpy.sort(a[i:i + BLOCK])
A:numpy.lib.histograms.zero->numpy.zeros(1, dtype=ntype)
A:numpy.lib.histograms.sorting_index->numpy.argsort(tmp_a)
A:numpy.lib.histograms.cw->numpy.concatenate((zero, sw.cumsum()))
A:numpy.lib.histograms.bin_index->_search_sorted_inclusive(sa, bin_edges)
A:numpy.lib.histograms.db->numpy.array(np.diff(bin_edges), float)
A:numpy.lib.histograms.nbin->numpy.empty(D, int)
A:numpy.lib.histograms.M->len(bins)
A:numpy.lib.histograms.(smin, smax)->_get_outer_edges(sample[:, i], range[i])
A:numpy.lib.histograms.edges[i]->numpy.asarray(bins[i])
A:numpy.lib.histograms.dedges[i]->numpy.diff(edges[i])
A:numpy.lib.histograms.Ncount->tuple((np.searchsorted(edges[i], sample[:, i], side='right') for i in _range(D)))
A:numpy.lib.histograms.xy->numpy.ravel_multi_index(Ncount, nbin)
A:numpy.lib.histograms.hist->hist.astype(float, casting='safe').astype(float, casting='safe')
A:numpy.lib.histograms.s->hist.astype(float, casting='safe').astype(float, casting='safe').sum()
A:numpy.lib.histograms.shape->numpy.ones(D, int)
numpy._get_bin_edges(a,bins,range,weights)
numpy._get_outer_edges(a,range)
numpy._hist_bin_auto(x,range)
numpy._hist_bin_doane(x,range)
numpy._hist_bin_fd(x,range)
numpy._hist_bin_rice(x,range)
numpy._hist_bin_scott(x,range)
numpy._hist_bin_sqrt(x,range)
numpy._hist_bin_stone(x,range)
numpy._hist_bin_sturges(x,range)
numpy._histogram_bin_edges_dispatcher(a,bins=None,range=None,weights=None)
numpy._histogram_dispatcher(a,bins=None,range=None,normed=None,weights=None,density=None)
numpy._histogramdd_dispatcher(sample,bins=None,range=None,normed=None,weights=None,density=None)
numpy._ptp(x)
numpy._ravel_and_check_weights(a,weights)
numpy._search_sorted_inclusive(a,v)
numpy._unsigned_subtract(a,b)
numpy.histogram(a,bins=10,range=None,normed=None,weights=None,density=None)
numpy.histogram_bin_edges(a,bins=10,range=None,weights=None)
numpy.histogramdd(sample,bins=10,range=None,normed=None,weights=None,density=None)
numpy.lib.histograms._get_bin_edges(a,bins,range,weights)
numpy.lib.histograms._get_outer_edges(a,range)
numpy.lib.histograms._hist_bin_auto(x,range)
numpy.lib.histograms._hist_bin_doane(x,range)
numpy.lib.histograms._hist_bin_fd(x,range)
numpy.lib.histograms._hist_bin_rice(x,range)
numpy.lib.histograms._hist_bin_scott(x,range)
numpy.lib.histograms._hist_bin_sqrt(x,range)
numpy.lib.histograms._hist_bin_stone(x,range)
numpy.lib.histograms._hist_bin_sturges(x,range)
numpy.lib.histograms._histogram_bin_edges_dispatcher(a,bins=None,range=None,weights=None)
numpy.lib.histograms._histogram_dispatcher(a,bins=None,range=None,normed=None,weights=None,density=None)
numpy.lib.histograms._histogramdd_dispatcher(sample,bins=None,range=None,normed=None,weights=None,density=None)
numpy.lib.histograms._ptp(x)
numpy.lib.histograms._ravel_and_check_weights(a,weights)
numpy.lib.histograms._search_sorted_inclusive(a,v)
numpy.lib.histograms._unsigned_subtract(a,b)
numpy.lib.histograms.histogram(a,bins=10,range=None,normed=None,weights=None,density=None)
numpy.lib.histograms.histogram_bin_edges(a,bins=10,range=None,weights=None)
numpy.lib.histograms.histogramdd(sample,bins=10,range=None,normed=None,weights=None,density=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/histograms.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/recfunctions.py----------------------------------------
A:numpy.lib.recfunctions.output->numpy.ma.masked_all((cmn + r1spc + r2spc,), dtype=ndtype)
A:numpy.lib.recfunctions.seqarrays->seqarrays.ravel().ravel()
A:numpy.lib.recfunctions.seqdtype->numpy.dtype([('', seqdtype)])
A:numpy.lib.recfunctions.sizes->tuple((a.size for a in seqarrays))
A:numpy.lib.recfunctions.maxlength->max(sizes)
A:numpy.lib.recfunctions.newdtype->_recursive_rename_fields(base.dtype, namemapper)
A:numpy.lib.recfunctions.data->data.pop().pop()
A:numpy.lib.recfunctions.mask->numpy.ma.getmaskarray(a).ravel()
A:numpy.lib.recfunctions.fval->numpy.array(fval, dtype=a.dtype, ndmin=1)
A:numpy.lib.recfunctions.fmsk->numpy.ones((1,), dtype=mask.dtype)
A:numpy.lib.recfunctions.drop_names->set(drop_names)
A:numpy.lib.recfunctions.descr->_drop_descr(current, drop_names)
A:numpy.lib.recfunctions.newname->namemapper.get(name, name)
A:numpy.lib.recfunctions.base->merge_arrays(base, usemask=usemask, fill_value=fill_value)
A:numpy.lib.recfunctions.dt->numpy.dtype(fieldinfo, align=align)
A:numpy.lib.recfunctions.fmt->repack_fields(tup[0], align=align, recurse=True)
A:numpy.lib.recfunctions.(f_dt, n)->count_elem(f_dt)
A:numpy.lib.recfunctions.subfields->_get_fields_and_offsets(f_dt, f_offset + offset)
A:numpy.lib.recfunctions.fields->get_fieldstructure(a.dtype)
A:numpy.lib.recfunctions.n_fields->len(fields)
A:numpy.lib.recfunctions.(dts, counts, offsets)->zip(*fields)
A:numpy.lib.recfunctions.out_dtype->numpy.dtype([(n, arr.dtype) for n in names], align=align)
A:numpy.lib.recfunctions.flattened_fields->numpy.dtype({'names': names, 'formats': dts, 'offsets': offsets, 'itemsize': out_dtype.itemsize})
A:numpy.lib.recfunctions.arr->arr.astype(flattened_fields, copy=copy, casting=casting).astype(flattened_fields, copy=copy, casting=casting)
A:numpy.lib.recfunctions.packed_fields->numpy.dtype({'names': names, 'formats': [(arr.dtype, dt.shape) for dt in dts]})
A:numpy.lib.recfunctions.uarr->structured_to_unstructured(arr)
A:numpy.lib.recfunctions.out->numpy.empty(array.shape, dtype=required_dtype)
A:numpy.lib.recfunctions.newdescr->_get_fieldspec(dtype_l)
A:numpy.lib.recfunctions.nameidx->list((name for (name, dtype) in ndtype)).index(fname)
A:numpy.lib.recfunctions.offset->numpy.cumsum(np.r_[0, nrecords])
A:numpy.lib.recfunctions.a->numpy.asanyarray(a).ravel()
A:numpy.lib.recfunctions.sortidx->merge_arrays(base, usemask=usemask, fill_value=fill_value).argsort()
A:numpy.lib.recfunctions.sorteddata->sortedbase.filled()
A:numpy.lib.recfunctions.flag->numpy.concatenate(([False], flag))
A:numpy.lib.recfunctions.dup->next((x for (n, x) in enumerate(key) if x in key[n + 1:]))
A:numpy.lib.recfunctions.r1->r1.ravel().ravel()
A:numpy.lib.recfunctions.r2->r2.ravel().ravel()
A:numpy.lib.recfunctions.nb1->len(r1)
A:numpy.lib.recfunctions.r1k->_keep_fields(r1, key1)
A:numpy.lib.recfunctions.r2k->_keep_fields(r2, key1)
A:numpy.lib.recfunctions.aux->numpy.ma.concatenate((r1k, r2k))
A:numpy.lib.recfunctions.idx_sort->numpy.ma.concatenate((r1k, r2k)).argsort(order=key)
A:numpy.lib.recfunctions.flag_in->numpy.ma.concatenate(([False], aux[1:] == aux[:-1]))
A:numpy.lib.recfunctions.idx_1->numpy.concatenate((idx_1, idx_out[idx_out < nb1]))
A:numpy.lib.recfunctions.idx_2->numpy.concatenate((idx_2, idx_out[idx_out >= nb1] - nb1))
A:numpy.lib.recfunctions.ndtype->numpy.dtype(ndtype)
A:numpy.lib.recfunctions.names->list((name for (name, dtype) in ndtype))
A:numpy.lib.recfunctions.cmn->max(r1cmn, r2cmn)
A:numpy.lib.recfunctions.kwargs->dict(jointype=jointype, r1postfix=r1postfix, r2postfix=r2postfix, defaults=defaults, usemask=False, asrecarray=True)
numpy.lib.recfunctions._append_fields_dispatcher(base,names,data,dtypes=None,fill_value=None,usemask=None,asrecarray=None)
numpy.lib.recfunctions._apply_along_fields_dispatcher(func,arr)
numpy.lib.recfunctions._assign_fields_by_name_dispatcher(dst,src,zero_unassigned=None)
numpy.lib.recfunctions._drop_fields_dispatcher(base,drop_names,usemask=None,asrecarray=None)
numpy.lib.recfunctions._find_duplicates_dispatcher(a,key=None,ignoremask=None,return_index=None)
numpy.lib.recfunctions._fix_defaults(output,defaults=None)
numpy.lib.recfunctions._fix_output(output,usemask=True,asrecarray=False)
numpy.lib.recfunctions._get_fields_and_offsets(dt,offset=0)
numpy.lib.recfunctions._get_fieldspec(dtype)
numpy.lib.recfunctions._izip_fields(iterable)
numpy.lib.recfunctions._izip_fields_flat(iterable)
numpy.lib.recfunctions._izip_records(seqarrays,fill_value=None,flatten=True)
numpy.lib.recfunctions._join_by_dispatcher(key,r1,r2,jointype=None,r1postfix=None,r2postfix=None,defaults=None,usemask=None,asrecarray=None)
numpy.lib.recfunctions._keep_fields(base,keep_names,usemask=True,asrecarray=False)
numpy.lib.recfunctions._merge_arrays_dispatcher(seqarrays,fill_value=None,flatten=None,usemask=None,asrecarray=None)
numpy.lib.recfunctions._rec_append_fields_dispatcher(base,names,data,dtypes=None)
numpy.lib.recfunctions._rec_drop_fields_dispatcher(base,drop_names)
numpy.lib.recfunctions._rec_join_dispatcher(key,r1,r2,jointype=None,r1postfix=None,r2postfix=None,defaults=None)
numpy.lib.recfunctions._recursive_fill_fields_dispatcher(input,output)
numpy.lib.recfunctions._rename_fields_dispatcher(base,namemapper)
numpy.lib.recfunctions._repack_fields_dispatcher(a,align=None,recurse=None)
numpy.lib.recfunctions._require_fields_dispatcher(array,required_dtype)
numpy.lib.recfunctions._stack_arrays_dispatcher(arrays,defaults=None,usemask=None,asrecarray=None,autoconvert=None)
numpy.lib.recfunctions._structured_to_unstructured_dispatcher(arr,dtype=None,copy=None,casting=None)
numpy.lib.recfunctions._unstructured_to_structured_dispatcher(arr,dtype=None,names=None,align=None,copy=None,casting=None)
numpy.lib.recfunctions._zip_descr(seqarrays,flatten=False)
numpy.lib.recfunctions._zip_dtype(seqarrays,flatten=False)
numpy.lib.recfunctions.append_fields(base,names,data,dtypes=None,fill_value=-1,usemask=True,asrecarray=False)
numpy.lib.recfunctions.apply_along_fields(func,arr)
numpy.lib.recfunctions.assign_fields_by_name(dst,src,zero_unassigned=True)
numpy.lib.recfunctions.drop_fields(base,drop_names,usemask=True,asrecarray=False)
numpy.lib.recfunctions.find_duplicates(a,key=None,ignoremask=True,return_index=False)
numpy.lib.recfunctions.flatten_descr(ndtype)
numpy.lib.recfunctions.get_fieldstructure(adtype,lastname=None,parents=None)
numpy.lib.recfunctions.get_names(adtype)
numpy.lib.recfunctions.get_names_flat(adtype)
numpy.lib.recfunctions.join_by(key,r1,r2,jointype='inner',r1postfix='1',r2postfix='2',defaults=None,usemask=True,asrecarray=False)
numpy.lib.recfunctions.merge_arrays(seqarrays,fill_value=-1,flatten=False,usemask=False,asrecarray=False)
numpy.lib.recfunctions.rec_append_fields(base,names,data,dtypes=None)
numpy.lib.recfunctions.rec_drop_fields(base,drop_names)
numpy.lib.recfunctions.rec_join(key,r1,r2,jointype='inner',r1postfix='1',r2postfix='2',defaults=None)
numpy.lib.recfunctions.recursive_fill_fields(input,output)
numpy.lib.recfunctions.rename_fields(base,namemapper)
numpy.lib.recfunctions.repack_fields(a,align=False,recurse=False)
numpy.lib.recfunctions.require_fields(array,required_dtype)
numpy.lib.recfunctions.stack_arrays(arrays,defaults=None,usemask=True,asrecarray=False,autoconvert=False)
numpy.lib.recfunctions.structured_to_unstructured(arr,dtype=None,copy=False,casting='unsafe')
numpy.lib.recfunctions.unstructured_to_structured(arr,dtype=None,names=None,align=False,copy=False,casting='unsafe')
numpy.recfunctions._append_fields_dispatcher(base,names,data,dtypes=None,fill_value=None,usemask=None,asrecarray=None)
numpy.recfunctions._apply_along_fields_dispatcher(func,arr)
numpy.recfunctions._assign_fields_by_name_dispatcher(dst,src,zero_unassigned=None)
numpy.recfunctions._drop_fields_dispatcher(base,drop_names,usemask=None,asrecarray=None)
numpy.recfunctions._find_duplicates_dispatcher(a,key=None,ignoremask=None,return_index=None)
numpy.recfunctions._fix_defaults(output,defaults=None)
numpy.recfunctions._fix_output(output,usemask=True,asrecarray=False)
numpy.recfunctions._get_fields_and_offsets(dt,offset=0)
numpy.recfunctions._get_fieldspec(dtype)
numpy.recfunctions._izip_fields(iterable)
numpy.recfunctions._izip_fields_flat(iterable)
numpy.recfunctions._izip_records(seqarrays,fill_value=None,flatten=True)
numpy.recfunctions._join_by_dispatcher(key,r1,r2,jointype=None,r1postfix=None,r2postfix=None,defaults=None,usemask=None,asrecarray=None)
numpy.recfunctions._keep_fields(base,keep_names,usemask=True,asrecarray=False)
numpy.recfunctions._merge_arrays_dispatcher(seqarrays,fill_value=None,flatten=None,usemask=None,asrecarray=None)
numpy.recfunctions._rec_append_fields_dispatcher(base,names,data,dtypes=None)
numpy.recfunctions._rec_drop_fields_dispatcher(base,drop_names)
numpy.recfunctions._rec_join_dispatcher(key,r1,r2,jointype=None,r1postfix=None,r2postfix=None,defaults=None)
numpy.recfunctions._recursive_fill_fields_dispatcher(input,output)
numpy.recfunctions._rename_fields_dispatcher(base,namemapper)
numpy.recfunctions._repack_fields_dispatcher(a,align=None,recurse=None)
numpy.recfunctions._require_fields_dispatcher(array,required_dtype)
numpy.recfunctions._stack_arrays_dispatcher(arrays,defaults=None,usemask=None,asrecarray=None,autoconvert=None)
numpy.recfunctions._structured_to_unstructured_dispatcher(arr,dtype=None,copy=None,casting=None)
numpy.recfunctions._unstructured_to_structured_dispatcher(arr,dtype=None,names=None,align=None,copy=None,casting=None)
numpy.recfunctions._zip_descr(seqarrays,flatten=False)
numpy.recfunctions._zip_dtype(seqarrays,flatten=False)
numpy.recfunctions.append_fields(base,names,data,dtypes=None,fill_value=-1,usemask=True,asrecarray=False)
numpy.recfunctions.apply_along_fields(func,arr)
numpy.recfunctions.assign_fields_by_name(dst,src,zero_unassigned=True)
numpy.recfunctions.drop_fields(base,drop_names,usemask=True,asrecarray=False)
numpy.recfunctions.find_duplicates(a,key=None,ignoremask=True,return_index=False)
numpy.recfunctions.flatten_descr(ndtype)
numpy.recfunctions.get_fieldstructure(adtype,lastname=None,parents=None)
numpy.recfunctions.get_names(adtype)
numpy.recfunctions.get_names_flat(adtype)
numpy.recfunctions.join_by(key,r1,r2,jointype='inner',r1postfix='1',r2postfix='2',defaults=None,usemask=True,asrecarray=False)
numpy.recfunctions.merge_arrays(seqarrays,fill_value=-1,flatten=False,usemask=False,asrecarray=False)
numpy.recfunctions.rec_append_fields(base,names,data,dtypes=None)
numpy.recfunctions.rec_drop_fields(base,drop_names)
numpy.recfunctions.rec_join(key,r1,r2,jointype='inner',r1postfix='1',r2postfix='2',defaults=None)
numpy.recfunctions.recursive_fill_fields(input,output)
numpy.recfunctions.rename_fields(base,namemapper)
numpy.recfunctions.repack_fields(a,align=False,recurse=False)
numpy.recfunctions.require_fields(array,required_dtype)
numpy.recfunctions.stack_arrays(arrays,defaults=None,usemask=True,asrecarray=False,autoconvert=False)
numpy.recfunctions.structured_to_unstructured(arr,dtype=None,copy=False,casting='unsafe')
numpy.recfunctions.unstructured_to_structured(arr,dtype=None,names=None,align=False,copy=False,casting='unsafe')


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/index_tricks.py----------------------------------------
A:numpy.lib.index_tricks.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib.index_tricks.nd->len(args)
A:numpy.lib.index_tricks.new->new.reshape((1,) * k + (new.size,) + (1,) * (nd - k - 1)).reshape((1,) * k + (new.size,) + (1,) * (nd - k - 1))
A:numpy.lib.index_tricks.(new,)->new.reshape((1,) * k + (new.size,) + (1,) * (nd - k - 1)).reshape((1,) * k + (new.size,) + (1,) * (nd - k - 1)).nonzero()
A:numpy.lib.index_tricks.nn->numpy.core.numeric.indices(size, typ)
A:numpy.lib.index_tricks.step->abs(step)
A:numpy.lib.index_tricks.slobj[k]->slice(None, None)
A:numpy.lib.index_tricks.length->int(step)
A:numpy.lib.index_tricks.mgrid->MGridClass()
A:numpy.lib.index_tricks.ogrid->OGridClass()
A:numpy.lib.index_tricks.concatenate->staticmethod(_nx.concatenate)
A:numpy.lib.index_tricks.makemat->staticmethod(matrixlib.matrix)
A:numpy.lib.index_tricks.mymat->numpy.matrixlib.bmat(key, frame.f_globals, frame.f_locals)
A:numpy.lib.index_tricks.size->int(abs(step))
A:numpy.lib.index_tricks.newobj->newobj.transpose(axes).transpose(axes)
A:numpy.lib.index_tricks.vec->item.split(',')
A:numpy.lib.index_tricks.trans1d->int(vec[2])
A:numpy.lib.index_tricks.axis->int(item)
A:numpy.lib.index_tricks.item_ndim->ndim(item)
A:numpy.lib.index_tricks.defaxes->list(range(ndmin))
A:numpy.lib.index_tricks.final_dtype->find_common_type(arraytypes, scalartypes)
A:numpy.lib.index_tricks.objs[k]->objs[k].astype(final_dtype).astype(final_dtype)
A:numpy.lib.index_tricks.res->self.makemat(res)
A:numpy.lib.index_tricks.r_->RClass()
A:numpy.lib.index_tricks.c_->CClass()
A:numpy.lib.index_tricks.x->as_strided(_nx.zeros(1), shape=shape, strides=_nx.zeros_like(shape))
A:numpy.lib.index_tricks.self._it->numpy.core.numeric.nditer(x, flags=['multi_index', 'zerosize_ok'], order='C')
A:numpy.lib.index_tricks.index_exp->IndexExpression(maketuple=True)
A:numpy.lib.index_tricks.s_->IndexExpression(maketuple=False)
A:numpy.lib.index_tricks.idx->arange(n)
numpy.AxisConcatenator(self,axis=0,matrix=False,ndmin=1,trans1d=-1)
numpy.AxisConcatenator.__getitem__(self,key)
numpy.AxisConcatenator.__len__(self)
numpy.CClass(self)
numpy.IndexExpression(self,maketuple)
numpy.IndexExpression.__getitem__(self,item)
numpy.MGridClass(self)
numpy.OGridClass(self)
numpy.RClass(self)
numpy._diag_indices_from(arr)
numpy._fill_diagonal_dispatcher(a,val,wrap=None)
numpy._ix__dispatcher(*args)
numpy.diag_indices(n,ndim=2)
numpy.diag_indices_from(arr)
numpy.fill_diagonal(a,val,wrap=False)
numpy.ix_(*args)
numpy.lib.index_tricks.AxisConcatenator(self,axis=0,matrix=False,ndmin=1,trans1d=-1)
numpy.lib.index_tricks.AxisConcatenator.__getitem__(self,key)
numpy.lib.index_tricks.AxisConcatenator.__init__(self,axis=0,matrix=False,ndmin=1,trans1d=-1)
numpy.lib.index_tricks.AxisConcatenator.__len__(self)
numpy.lib.index_tricks.CClass(self)
numpy.lib.index_tricks.CClass.__init__(self)
numpy.lib.index_tricks.IndexExpression(self,maketuple)
numpy.lib.index_tricks.IndexExpression.__getitem__(self,item)
numpy.lib.index_tricks.IndexExpression.__init__(self,maketuple)
numpy.lib.index_tricks.MGridClass(self)
numpy.lib.index_tricks.MGridClass.__init__(self)
numpy.lib.index_tricks.OGridClass(self)
numpy.lib.index_tricks.OGridClass.__init__(self)
numpy.lib.index_tricks.RClass(self)
numpy.lib.index_tricks.RClass.__init__(self)
numpy.lib.index_tricks._diag_indices_from(arr)
numpy.lib.index_tricks._fill_diagonal_dispatcher(a,val,wrap=None)
numpy.lib.index_tricks._ix__dispatcher(*args)
numpy.lib.index_tricks.diag_indices(n,ndim=2)
numpy.lib.index_tricks.diag_indices_from(arr)
numpy.lib.index_tricks.fill_diagonal(a,val,wrap=False)
numpy.lib.index_tricks.ix_(*args)
numpy.lib.index_tricks.nd_grid(self,sparse=False)
numpy.lib.index_tricks.nd_grid.__getitem__(self,key)
numpy.lib.index_tricks.nd_grid.__init__(self,sparse=False)
numpy.lib.index_tricks.ndenumerate(self,arr)
numpy.lib.index_tricks.ndenumerate.__init__(self,arr)
numpy.lib.index_tricks.ndenumerate.__iter__(self)
numpy.lib.index_tricks.ndenumerate.__next__(self)
numpy.lib.index_tricks.ndindex(self,*shape)
numpy.lib.index_tricks.ndindex.__init__(self,*shape)
numpy.lib.index_tricks.ndindex.__iter__(self)
numpy.lib.index_tricks.ndindex.__next__(self)
numpy.lib.index_tricks.ndindex.ndincr(self)
numpy.nd_grid(self,sparse=False)
numpy.nd_grid.__getitem__(self,key)
numpy.ndenumerate(self,arr)
numpy.ndenumerate.__iter__(self)
numpy.ndenumerate.__next__(self)
numpy.ndindex(self,*shape)
numpy.ndindex.__iter__(self)
numpy.ndindex.__next__(self)
numpy.ndindex.ndincr(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/index_tricks.pyi----------------------------------------
numpy.AxisConcatenator.concatenate(*a:ArrayLike,axis:SupportsIndex=...,out:None=...)->NDArray[Any]
numpy.AxisConcatenator.concatenate(*a:ArrayLike,axis:SupportsIndex=...,out:_ArrayType=...)->_ArrayType
numpy.AxisConcatenator.makemat(data:ArrayLike,dtype:DTypeLike=...,copy:bool=...)->_Matrix
numpy.lib.index_tricks.AxisConcatenator.concatenate(*a:ArrayLike,axis:SupportsIndex=...,out:None=...)->NDArray[Any]
numpy.lib.index_tricks.AxisConcatenator.concatenate(*a:ArrayLike,axis:SupportsIndex=...,out:_ArrayType=...)->_ArrayType
numpy.lib.index_tricks.AxisConcatenator.makemat(data:ArrayLike,dtype:DTypeLike=...,copy:bool=...)->_Matrix
numpy.lib.index_tricks.ravel_multi_index(multi_index:Sequence[Union[int,integer[Any]]],dims:_ShapeLike,mode:Union[_ModeKind,Tuple[_ModeKind,...]]=...,order:_OrderCF=...)->intp
numpy.lib.index_tricks.ravel_multi_index(multi_index:Sequence[_ArrayLikeInt],dims:_ShapeLike,mode:Union[_ModeKind,Tuple[_ModeKind,...]]=...,order:_OrderCF=...)->NDArray[intp]
numpy.lib.index_tricks.unravel_index(indices:Union[int,integer[Any]],shape:_ShapeLike,order:_OrderCF=...)->Tuple[intp, ...]
numpy.lib.index_tricks.unravel_index(indices:_ArrayLikeInt,shape:_ShapeLike,order:_OrderCF=...)->Tuple[NDArray[intp], ...]
numpy.ravel_multi_index(multi_index:Sequence[Union[int,integer[Any]]],dims:_ShapeLike,mode:Union[_ModeKind,Tuple[_ModeKind,...]]=...,order:_OrderCF=...)->intp
numpy.ravel_multi_index(multi_index:Sequence[_ArrayLikeInt],dims:_ShapeLike,mode:Union[_ModeKind,Tuple[_ModeKind,...]]=...,order:_OrderCF=...)->NDArray[intp]
numpy.unravel_index(indices:Union[int,integer[Any]],shape:_ShapeLike,order:_OrderCF=...)->Tuple[intp, ...]
numpy.unravel_index(indices:_ArrayLikeInt,shape:_ShapeLike,order:_OrderCF=...)->Tuple[NDArray[intp], ...]


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/twodim_base.py----------------------------------------
A:numpy.lib.twodim_base.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib.twodim_base.i1->iinfo(int8)
A:numpy.lib.twodim_base.i2->iinfo(int16)
A:numpy.lib.twodim_base.i4->iinfo(int32)
A:numpy.lib.twodim_base.m->ones((n, n), int)
A:numpy.lib.twodim_base._eye_with_like->array_function_dispatch(_eye_dispatcher)(eye)
A:numpy.lib.twodim_base.v->empty((len(x), N), dtype=promote_types(x.dtype, int))
A:numpy.lib.twodim_base.res->zeros((n, n), v.dtype)
A:numpy.lib.twodim_base.s->len(v)
A:numpy.lib.twodim_base.i->arange(0, n + k, dtype=intp)
A:numpy.lib.twodim_base._tri_with_like->array_function_dispatch(_tri_dispatcher)(tri)
A:numpy.lib.twodim_base.mask->tri(*m.shape[-2:], k=k - 1, dtype=bool)
A:numpy.lib.twodim_base.x->asarray(x)
A:numpy.lib.twodim_base.N->len(bins)
A:numpy.lib.twodim_base.xedgesyedges->asarray(bins)
A:numpy.lib.twodim_base.(hist, edges)->histogramdd([x, y], bins, range, normed, weights, density)
A:numpy.lib.twodim_base.a->mask_func(m, k)
A:numpy.lib.twodim_base.tri_->tri(n, m, k=k, dtype=bool)
numpy._diag_dispatcher(v,k=None)
numpy._eye_dispatcher(N,M=None,k=None,dtype=None,order=None,*,like=None)
numpy._flip_dispatcher(m)
numpy._histogram2d_dispatcher(x,y,bins=None,range=None,normed=None,weights=None,density=None)
numpy._min_int(low,high)
numpy._tri_dispatcher(N,M=None,k=None,dtype=None,*,like=None)
numpy._trilu_dispatcher(m,k=None)
numpy._trilu_indices_form_dispatcher(arr,k=None)
numpy._vander_dispatcher(x,N=None,increasing=None)
numpy.diag(v,k=0)
numpy.diagflat(v,k=0)
numpy.eye(N,M=None,k=0,dtype=float,order='C',*,like=None)
numpy.fliplr(m)
numpy.flipud(m)
numpy.histogram2d(x,y,bins=10,range=None,normed=None,weights=None,density=None)
numpy.lib.twodim_base._diag_dispatcher(v,k=None)
numpy.lib.twodim_base._eye_dispatcher(N,M=None,k=None,dtype=None,order=None,*,like=None)
numpy.lib.twodim_base._flip_dispatcher(m)
numpy.lib.twodim_base._histogram2d_dispatcher(x,y,bins=None,range=None,normed=None,weights=None,density=None)
numpy.lib.twodim_base._min_int(low,high)
numpy.lib.twodim_base._tri_dispatcher(N,M=None,k=None,dtype=None,*,like=None)
numpy.lib.twodim_base._trilu_dispatcher(m,k=None)
numpy.lib.twodim_base._trilu_indices_form_dispatcher(arr,k=None)
numpy.lib.twodim_base._vander_dispatcher(x,N=None,increasing=None)
numpy.lib.twodim_base.diag(v,k=0)
numpy.lib.twodim_base.diagflat(v,k=0)
numpy.lib.twodim_base.eye(N,M=None,k=0,dtype=float,order='C',*,like=None)
numpy.lib.twodim_base.fliplr(m)
numpy.lib.twodim_base.flipud(m)
numpy.lib.twodim_base.histogram2d(x,y,bins=10,range=None,normed=None,weights=None,density=None)
numpy.lib.twodim_base.mask_indices(n,mask_func,k=0)
numpy.lib.twodim_base.tri(N,M=None,k=0,dtype=float,*,like=None)
numpy.lib.twodim_base.tril(m,k=0)
numpy.lib.twodim_base.tril_indices(n,k=0,m=None)
numpy.lib.twodim_base.tril_indices_from(arr,k=0)
numpy.lib.twodim_base.triu(m,k=0)
numpy.lib.twodim_base.triu_indices(n,k=0,m=None)
numpy.lib.twodim_base.triu_indices_from(arr,k=0)
numpy.lib.twodim_base.vander(x,N=None,increasing=False)
numpy.mask_indices(n,mask_func,k=0)
numpy.tri(N,M=None,k=0,dtype=float,*,like=None)
numpy.tril(m,k=0)
numpy.tril_indices(n,k=0,m=None)
numpy.tril_indices_from(arr,k=0)
numpy.triu(m,k=0)
numpy.triu_indices(n,k=0,m=None)
numpy.triu_indices_from(arr,k=0)
numpy.vander(x,N=None,increasing=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/twodim_base.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/polynomial.py----------------------------------------
A:numpy.lib.polynomial.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib.polynomial.seq_of_zeros->seq_of_zeros.astype(mintypecode(dt.char)).astype(mintypecode(dt.char))
A:numpy.lib.polynomial.a->a.real.copy().real.copy()
A:numpy.lib.polynomial.roots->hstack((roots, NX.zeros(trailing_zeros, roots.dtype)))
A:numpy.lib.polynomial.p->numpy.core.numeric.asarray(p)
A:numpy.lib.polynomial.N->len(p)
A:numpy.lib.polynomial.A->diag(NX.ones((N - 2,), p.dtype), -1)
A:numpy.lib.polynomial.m->int(m)
A:numpy.lib.polynomial.k->atleast_1d(k)
A:numpy.lib.polynomial.truepoly->isinstance(p, poly1d)
A:numpy.lib.polynomial.y->numpy.core.numeric.zeros_like(x)
A:numpy.lib.polynomial.val->poly1d(val)
A:numpy.lib.polynomial.lhs->vander(x, order)
A:numpy.lib.polynomial.scale->numpy.core.numeric.sqrt((lhs * lhs).sum(axis=0))
A:numpy.lib.polynomial.(c, resids, rank, s)->lstsq(lhs, rhs, rcond)
A:numpy.lib.polynomial.Vbase->inv(dot(lhs.T, lhs))
A:numpy.lib.polynomial.x->numpy.core.numeric.asanyarray(x)
A:numpy.lib.polynomial.a1->atleast_1d(a1)
A:numpy.lib.polynomial.a2->atleast_1d(a2)
A:numpy.lib.polynomial.zr->numpy.core.numeric.zeros(key - self.order, self.coeffs.dtype)
A:numpy.lib.polynomial.q->numpy.core.numeric.zeros((max(m - n + 1, 1),), w.dtype)
A:numpy.lib.polynomial.r->u.astype(w.dtype)
A:numpy.lib.polynomial._poly_mat->re.compile('\\*\\*([0-9]*)')
A:numpy.lib.polynomial.mat->re.compile('\\*\\*([0-9]*)').search(astr, n)
A:numpy.lib.polynomial.span->re.compile('\\*\\*([0-9]*)').search(astr, n).span()
A:numpy.lib.polynomial.c_or_r->numpy.core.numeric.array([0], dtype=c_or_r.dtype)
A:numpy.lib.polynomial.vals->repr(self.coeffs)
A:numpy.lib.polynomial.coefstr->fmt_float(real(coeffs[k]))
A:numpy.lib.polynomial.other->poly1d(other)
A:numpy.lib.polynomial.res->polymul(self.coeffs, res)
A:numpy.lib.polynomial.self._coeffs->numpy.core.numeric.concatenate((zr, self.coeffs))
numpy.RankWarning(UserWarning)
numpy._binary_op_dispatcher(a1,a2)
numpy._poly_dispatcher(seq_of_zeros)
numpy._polyder_dispatcher(p,m=None)
numpy._polydiv_dispatcher(u,v)
numpy._polyfit_dispatcher(x,y,deg,rcond=None,full=None,w=None,cov=None)
numpy._polyint_dispatcher(p,m=None,k=None)
numpy._polyval_dispatcher(p,x)
numpy._raise_power(astr,wrap=70)
numpy._roots_dispatcher(p)
numpy.lib.polynomial.RankWarning(UserWarning)
numpy.lib.polynomial._binary_op_dispatcher(a1,a2)
numpy.lib.polynomial._poly_dispatcher(seq_of_zeros)
numpy.lib.polynomial._polyder_dispatcher(p,m=None)
numpy.lib.polynomial._polydiv_dispatcher(u,v)
numpy.lib.polynomial._polyfit_dispatcher(x,y,deg,rcond=None,full=None,w=None,cov=None)
numpy.lib.polynomial._polyint_dispatcher(p,m=None,k=None)
numpy.lib.polynomial._polyval_dispatcher(p,x)
numpy.lib.polynomial._raise_power(astr,wrap=70)
numpy.lib.polynomial._roots_dispatcher(p)
numpy.lib.polynomial.poly(seq_of_zeros)
numpy.lib.polynomial.poly1d(self,c_or_r,r=False,variable=None)
numpy.lib.polynomial.poly1d.__add__(self,other)
numpy.lib.polynomial.poly1d.__array__(self,t=None)
numpy.lib.polynomial.poly1d.__div__(self,other)
numpy.lib.polynomial.poly1d.__eq__(self,other)
numpy.lib.polynomial.poly1d.__getitem__(self,val)
numpy.lib.polynomial.poly1d.__init__(self,c_or_r,r=False,variable=None)
numpy.lib.polynomial.poly1d.__iter__(self)
numpy.lib.polynomial.poly1d.__len__(self)
numpy.lib.polynomial.poly1d.__mul__(self,other)
numpy.lib.polynomial.poly1d.__ne__(self,other)
numpy.lib.polynomial.poly1d.__neg__(self)
numpy.lib.polynomial.poly1d.__pos__(self)
numpy.lib.polynomial.poly1d.__pow__(self,val)
numpy.lib.polynomial.poly1d.__radd__(self,other)
numpy.lib.polynomial.poly1d.__rdiv__(self,other)
numpy.lib.polynomial.poly1d.__repr__(self)
numpy.lib.polynomial.poly1d.__rmul__(self,other)
numpy.lib.polynomial.poly1d.__rsub__(self,other)
numpy.lib.polynomial.poly1d.__setitem__(self,key,val)
numpy.lib.polynomial.poly1d.__str__(self)
numpy.lib.polynomial.poly1d.__sub__(self,other)
numpy.lib.polynomial.poly1d._coeffs(self)
numpy.lib.polynomial.poly1d._coeffs(self,coeffs)
numpy.lib.polynomial.poly1d.coeffs(self)
numpy.lib.polynomial.poly1d.coeffs(self,value)
numpy.lib.polynomial.poly1d.deriv(self,m=1)
numpy.lib.polynomial.poly1d.integ(self,m=1,k=0)
numpy.lib.polynomial.poly1d.order(self)
numpy.lib.polynomial.poly1d.roots(self)
numpy.lib.polynomial.poly1d.variable(self)
numpy.lib.polynomial.polyadd(a1,a2)
numpy.lib.polynomial.polyder(p,m=1)
numpy.lib.polynomial.polydiv(u,v)
numpy.lib.polynomial.polyfit(x,y,deg,rcond=None,full=False,w=None,cov=False)
numpy.lib.polynomial.polyint(p,m=1,k=None)
numpy.lib.polynomial.polymul(a1,a2)
numpy.lib.polynomial.polysub(a1,a2)
numpy.lib.polynomial.polyval(p,x)
numpy.lib.polynomial.roots(p)
numpy.poly(seq_of_zeros)
numpy.poly1d(self,c_or_r,r=False,variable=None)
numpy.poly1d.__add__(self,other)
numpy.poly1d.__array__(self,t=None)
numpy.poly1d.__div__(self,other)
numpy.poly1d.__eq__(self,other)
numpy.poly1d.__getitem__(self,val)
numpy.poly1d.__iter__(self)
numpy.poly1d.__len__(self)
numpy.poly1d.__mul__(self,other)
numpy.poly1d.__ne__(self,other)
numpy.poly1d.__neg__(self)
numpy.poly1d.__pos__(self)
numpy.poly1d.__pow__(self,val)
numpy.poly1d.__radd__(self,other)
numpy.poly1d.__rdiv__(self,other)
numpy.poly1d.__repr__(self)
numpy.poly1d.__rmul__(self,other)
numpy.poly1d.__rsub__(self,other)
numpy.poly1d.__setitem__(self,key,val)
numpy.poly1d.__str__(self)
numpy.poly1d.__sub__(self,other)
numpy.poly1d._coeffs(self)
numpy.poly1d._coeffs(self,coeffs)
numpy.poly1d.coeffs(self)
numpy.poly1d.coeffs(self,value)
numpy.poly1d.deriv(self,m=1)
numpy.poly1d.integ(self,m=1,k=0)
numpy.poly1d.order(self)
numpy.poly1d.roots(self)
numpy.poly1d.variable(self)
numpy.polyadd(a1,a2)
numpy.polyder(p,m=1)
numpy.polydiv(u,v)
numpy.polyfit(x,y,deg,rcond=None,full=False,w=None,cov=False)
numpy.polyint(p,m=1,k=None)
numpy.polymul(a1,a2)
numpy.polysub(a1,a2)
numpy.polyval(p,x)
numpy.roots(p)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/polynomial.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/npyio.py----------------------------------------
A:numpy.lib.npyio.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib.npyio.self._obj->weakref.proxy(obj)
A:numpy.lib.npyio.file->numpy.lib._datasource.open(file, 'rt', encoding=encoding)
A:numpy.lib.npyio._zip->zipfile_factory(fid)
A:numpy.lib.npyio.self._files->zipfile_factory(fid).namelist()
A:numpy.lib.npyio.self.f->BagObj(self)
A:numpy.lib.npyio.bytes->self.zip.open(key)
A:numpy.lib.npyio.magic->numpy.lib._datasource.open(fname, 'rt', encoding=encoding).read(N)
A:numpy.lib.npyio.pickle_kwargs->dict(encoding=encoding, fix_imports=fix_imports)
A:numpy.lib.npyio.fid->numpy.lib._datasource.open(fname, 'rt', encoding=encoding)
A:numpy.lib.npyio.N->len(usecols or first_vals)
A:numpy.lib.npyio.ret->NpzFile(fid, own_fid=own_fid, allow_pickle=allow_pickle, pickle_kwargs=pickle_kwargs)
A:numpy.lib.npyio.file_ctx->open(file, 'wb')
A:numpy.lib.npyio.arr->numpy.asanyarray(arr)
A:numpy.lib.npyio.zipf->zipfile_factory(file, mode='w', compression=compression)
A:numpy.lib.npyio.val->numpy.asanyarray(val)
A:numpy.lib.npyio.(flat_dt, flat_packing)->self(tp)
A:numpy.lib.npyio.line->line.strip('\r\n').strip('\r\n')
A:numpy.lib.npyio.line_iter->itertools.islice(line_iter, max_rows)
A:numpy.lib.npyio.vals->split_line(line)
A:numpy.lib.npyio.items->pack_items(items, packing)
A:numpy.lib.npyio.regex_comments->re.compile('|'.join(comments))
A:numpy.lib.npyio.delimiter->asstr(delimiter)
A:numpy.lib.npyio.usecols_as_list->list(usecols)
A:numpy.lib.npyio.dtype->numpy.dtype(ttype)
A:numpy.lib.npyio.defconv->_getconv(dtype)
A:numpy.lib.npyio.(dtype_types, packing)->flatten_dtype_internal(dtype)
A:numpy.lib.npyio.fname->os_fspath(fname)
A:numpy.lib.npyio.fh->WriteWrap(fname, encoding or 'latin1')
A:numpy.lib.npyio.fencoding->locale.getpreferredencoding()
A:numpy.lib.npyio.first_line->''.join(first_line.split(comments)[1:])
A:numpy.lib.npyio.first_vals->split_line(first_line)
A:numpy.lib.npyio.i->list(usecols).index(j)
A:numpy.lib.npyio.converters[i]->functools.partial(tobytes_first, conv=conv)
A:numpy.lib.npyio.X->numpy.asarray(X)
A:numpy.lib.npyio.nshape->list(X.shape)
A:numpy.lib.npyio._loadtxt_with_like->array_function_dispatch(_loadtxt_dispatcher)(loadtxt)
A:numpy.lib.npyio.fmt->asstr(fmt)
A:numpy.lib.npyio.ncol->len(X.dtype.names)
A:numpy.lib.npyio.iscomplex_X->numpy.iscomplexobj(X)
A:numpy.lib.npyio.format->asstr(delimiter).join(fmt)
A:numpy.lib.npyio.n_fmt_chars->asstr(fmt).count('%')
A:numpy.lib.npyio.error->ValueError('fmt has wrong number of %% formats:  %s' % fmt)
A:numpy.lib.npyio.header->header.replace('\n', '\n' + comments).replace('\n', '\n' + comments)
A:numpy.lib.npyio.footer->footer.replace('\n', '\n' + comments).replace('\n', '\n' + comments)
A:numpy.lib.npyio.content->numpy.lib._datasource.open(file, 'rt', encoding=encoding).read()
A:numpy.lib.npyio.regexp->re.compile(regexp)
A:numpy.lib.npyio.seq->re.compile(regexp).findall(content)
A:numpy.lib.npyio.newdtype->numpy.dtype(dtype[dtype.names[0]])
A:numpy.lib.npyio.output->output.view(np.recarray).view(np.recarray)
A:numpy.lib.npyio.fid_ctx->contextlib.nullcontext(fid)
A:numpy.lib.npyio.fhd->iter(fid)
A:numpy.lib.npyio.split_line->LineSplitter(delimiter=delimiter, comments=comments, autostrip=autostrip, encoding=encoding)
A:numpy.lib.npyio.validate_names->NameValidator(excludelist=excludelist, deletechars=deletechars, case_sensitive=case_sensitive, replace_space=replace_space)
A:numpy.lib.npyio.first_values->split_line(first_line)
A:numpy.lib.npyio.fval->first_values[0].strip()
A:numpy.lib.npyio.usecols->list(usecols)
A:numpy.lib.npyio.nbcols->len(usecols or first_values)
A:numpy.lib.npyio.names->list(dtype.names)
A:numpy.lib.npyio.usecols[i]->list(dtype.names).index(current)
A:numpy.lib.npyio.user_missing_values->user_missing_values.decode('latin1').decode('latin1')
A:numpy.lib.npyio.key->list(usecols).index(key)
A:numpy.lib.npyio.value->str(value)
A:numpy.lib.npyio.user_value->user_missing_values.decode('latin1').decode('latin1').split(',')
A:numpy.lib.npyio.n->len(user_filling_values)
A:numpy.lib.npyio.dtype_flat->flatten_dtype(dtype, flatten_base=True)
A:numpy.lib.npyio.zipit->zip(missing_values, filling_values)
A:numpy.lib.npyio.j->list(dtype.names).index(j)
A:numpy.lib.npyio.user_conv->functools.partial(tobytes_first, conv=conv)
A:numpy.lib.npyio.values->split_line(line)
A:numpy.lib.npyio.nbvalues->len(values)
A:numpy.lib.npyio.current_column->map(itemgetter(i), rows)
A:numpy.lib.npyio.nbinvalid->len(invalid)
A:numpy.lib.npyio.nbinvalid_skipped->len([_ for _ in invalid if _[0] > nbrows + skip_header])
A:numpy.lib.npyio.errmsg->'\n'.join(errmsg)
A:numpy.lib.npyio.rows->numpy.array(data, dtype=[('', _) for _ in dtype_flat])
A:numpy.lib.npyio.row->list(row_tup)
A:numpy.lib.npyio.row[i]->row[i].encode('latin1').encode('latin1')
A:numpy.lib.npyio.n_chars->max((len(row[i]) for row in data))
A:numpy.lib.npyio.ddtype->list(zip(names, sized_column_types))
A:numpy.lib.npyio.mdtype->make_mask_descr(dtype)
A:numpy.lib.npyio.outputmask->numpy.array(masks, dtype=mdtype)
A:numpy.lib.npyio.rowmasks->numpy.array(masks, dtype=np.dtype([('', bool) for t in dtype_flat]))
A:numpy.lib.npyio._genfromtxt_with_like->array_function_dispatch(_genfromtxt_dispatcher)(genfromtxt)
A:numpy.lib.npyio.usemask->kwargs.get('usemask', False)
numpy.BagObj(self,obj)
numpy.BagObj.__dir__(self)
numpy.BagObj.__getattribute__(self,key)
numpy.NpzFile(self,fid,own_fid=False,allow_pickle=False,pickle_kwargs=None)
numpy.NpzFile.__del__(self)
numpy.NpzFile.__enter__(self)
numpy.NpzFile.__exit__(self,exc_type,exc_value,traceback)
numpy.NpzFile.__getitem__(self,key)
numpy.NpzFile.__iter__(self)
numpy.NpzFile.__len__(self)
numpy.NpzFile.close(self)
numpy.NpzFile.iteritems(self)
numpy.NpzFile.iterkeys(self)
numpy._genfromtxt_dispatcher(fname,dtype=None,comments=None,delimiter=None,skip_header=None,skip_footer=None,converters=None,missing_values=None,filling_values=None,usecols=None,names=None,excludelist=None,deletechars=None,replace_space=None,autostrip=None,case_sensitive=None,defaultfmt=None,unpack=None,usemask=None,loose=None,invalid_raise=None,max_rows=None,encoding=None,*,like=None)
numpy._getconv(dtype)
numpy._loadtxt_dispatcher(fname,dtype=None,comments=None,delimiter=None,converters=None,skiprows=None,usecols=None,unpack=None,ndmin=None,encoding=None,max_rows=None,*,like=None)
numpy._save_dispatcher(file,arr,allow_pickle=None,fix_imports=None)
numpy._savetxt_dispatcher(fname,X,fmt=None,delimiter=None,newline=None,header=None,footer=None,comments=None,encoding=None)
numpy._savez(file,args,kwds,compress,allow_pickle=True,pickle_kwargs=None)
numpy._savez_compressed_dispatcher(file,*args,**kwds)
numpy._savez_dispatcher(file,*args,**kwds)
numpy.fromregex(file,regexp,dtype,encoding=None)
numpy.genfromtxt(fname,dtype=float,comments='#',delimiter=None,skip_header=0,skip_footer=0,converters=None,missing_values=None,filling_values=None,usecols=None,names=None,excludelist=None,deletechars=''.join(sorted(NameValidator.defaultdeletechars)),replace_space='_',autostrip=False,case_sensitive=True,defaultfmt='f%i',unpack=None,usemask=False,loose=True,invalid_raise=True,max_rows=None,encoding='bytes',*,like=None)
numpy.lib.npyio.BagObj(self,obj)
numpy.lib.npyio.BagObj.__dir__(self)
numpy.lib.npyio.BagObj.__getattribute__(self,key)
numpy.lib.npyio.BagObj.__init__(self,obj)
numpy.lib.npyio.NpzFile(self,fid,own_fid=False,allow_pickle=False,pickle_kwargs=None)
numpy.lib.npyio.NpzFile.__del__(self)
numpy.lib.npyio.NpzFile.__enter__(self)
numpy.lib.npyio.NpzFile.__exit__(self,exc_type,exc_value,traceback)
numpy.lib.npyio.NpzFile.__getitem__(self,key)
numpy.lib.npyio.NpzFile.__init__(self,fid,own_fid=False,allow_pickle=False,pickle_kwargs=None)
numpy.lib.npyio.NpzFile.__iter__(self)
numpy.lib.npyio.NpzFile.__len__(self)
numpy.lib.npyio.NpzFile.close(self)
numpy.lib.npyio.NpzFile.iteritems(self)
numpy.lib.npyio.NpzFile.iterkeys(self)
numpy.lib.npyio._genfromtxt_dispatcher(fname,dtype=None,comments=None,delimiter=None,skip_header=None,skip_footer=None,converters=None,missing_values=None,filling_values=None,usecols=None,names=None,excludelist=None,deletechars=None,replace_space=None,autostrip=None,case_sensitive=None,defaultfmt=None,unpack=None,usemask=None,loose=None,invalid_raise=None,max_rows=None,encoding=None,*,like=None)
numpy.lib.npyio._getconv(dtype)
numpy.lib.npyio._loadtxt_dispatcher(fname,dtype=None,comments=None,delimiter=None,converters=None,skiprows=None,usecols=None,unpack=None,ndmin=None,encoding=None,max_rows=None,*,like=None)
numpy.lib.npyio._save_dispatcher(file,arr,allow_pickle=None,fix_imports=None)
numpy.lib.npyio._savetxt_dispatcher(fname,X,fmt=None,delimiter=None,newline=None,header=None,footer=None,comments=None,encoding=None)
numpy.lib.npyio._savez(file,args,kwds,compress,allow_pickle=True,pickle_kwargs=None)
numpy.lib.npyio._savez_compressed_dispatcher(file,*args,**kwds)
numpy.lib.npyio._savez_dispatcher(file,*args,**kwds)
numpy.lib.npyio.fromregex(file,regexp,dtype,encoding=None)
numpy.lib.npyio.genfromtxt(fname,dtype=float,comments='#',delimiter=None,skip_header=0,skip_footer=0,converters=None,missing_values=None,filling_values=None,usecols=None,names=None,excludelist=None,deletechars=''.join(sorted(NameValidator.defaultdeletechars)),replace_space='_',autostrip=False,case_sensitive=True,defaultfmt='f%i',unpack=None,usemask=False,loose=True,invalid_raise=True,max_rows=None,encoding='bytes',*,like=None)
numpy.lib.npyio.load(file,mmap_mode=None,allow_pickle=False,fix_imports=True,encoding='ASCII')
numpy.lib.npyio.loads(*args,**kwargs)
numpy.lib.npyio.loadtxt(fname,dtype=float,comments='#',delimiter=None,converters=None,skiprows=0,usecols=None,unpack=False,ndmin=0,encoding='bytes',max_rows=None,*,like=None)
numpy.lib.npyio.mafromtxt(fname,**kwargs)
numpy.lib.npyio.ndfromtxt(fname,**kwargs)
numpy.lib.npyio.recfromcsv(fname,**kwargs)
numpy.lib.npyio.recfromtxt(fname,**kwargs)
numpy.lib.npyio.save(file,arr,allow_pickle=True,fix_imports=True)
numpy.lib.npyio.savetxt(fname,X,fmt='%.18e',delimiter='',newline='\n',header='',footer='',comments='#',encoding=None)
numpy.lib.npyio.savez(file,*args,**kwds)
numpy.lib.npyio.savez_compressed(file,*args,**kwds)
numpy.lib.npyio.zipfile_factory(file,*args,**kwargs)
numpy.load(file,mmap_mode=None,allow_pickle=False,fix_imports=True,encoding='ASCII')
numpy.loads(*args,**kwargs)
numpy.loadtxt(fname,dtype=float,comments='#',delimiter=None,converters=None,skiprows=0,usecols=None,unpack=False,ndmin=0,encoding='bytes',max_rows=None,*,like=None)
numpy.mafromtxt(fname,**kwargs)
numpy.ndfromtxt(fname,**kwargs)
numpy.recfromcsv(fname,**kwargs)
numpy.recfromtxt(fname,**kwargs)
numpy.save(file,arr,allow_pickle=True,fix_imports=True)
numpy.savetxt(fname,X,fmt='%.18e',delimiter='',newline='\n',header='',footer='',comments='#',encoding=None)
numpy.savez(file,*args,**kwds)
numpy.savez_compressed(file,*args,**kwds)
numpy.zipfile_factory(file,*args,**kwargs)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/npyio.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/arraysetops.py----------------------------------------
A:numpy.lib.arraysetops.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib.arraysetops.ary->numpy.asanyarray(ary).ravel()
A:numpy.lib.arraysetops.to_begin->to_begin.ravel().ravel()
A:numpy.lib.arraysetops.l_begin->len(to_begin)
A:numpy.lib.arraysetops.to_end->to_end.ravel().ravel()
A:numpy.lib.arraysetops.l_end->len(to_end)
A:numpy.lib.arraysetops.l_diff->max(len(ary) - 1, 0)
A:numpy.lib.arraysetops.result->numpy.asanyarray(ary).ravel().__array_wrap__(result)
A:numpy.lib.arraysetops.ar->numpy.concatenate((ar1, ar2))
A:numpy.lib.arraysetops.ret->numpy.empty(ar.shape, dtype=bool)
A:numpy.lib.arraysetops.consolidated->numpy.empty(len(ar), dtype=dtype)
A:numpy.lib.arraysetops.n->len(uniq)
A:numpy.lib.arraysetops.uniq->numpy.moveaxis(uniq, 0, axis)
A:numpy.lib.arraysetops.output->_unique1d(consolidated, return_index, return_inverse, return_counts)
A:numpy.lib.arraysetops.perm->numpy.concatenate((ar1, ar2)).argsort(kind='mergesort' if return_index else 'quicksort')
A:numpy.lib.arraysetops.mask->numpy.zeros(len(ar1), dtype=bool)
A:numpy.lib.arraysetops.aux_firstnan->numpy.searchsorted(aux, aux[-1], side='left')
A:numpy.lib.arraysetops.inv_idx->numpy.empty(mask.shape, dtype=np.intp)
A:numpy.lib.arraysetops.idx->numpy.concatenate(np.nonzero(mask) + ([mask.size],))
A:numpy.lib.arraysetops.ar1->unique(ar1)
A:numpy.lib.arraysetops.ar2->unique(ar2)
A:numpy.lib.arraysetops.(ar1, ind1)->unique(ar1, return_index=True)
A:numpy.lib.arraysetops.(ar2, ind2)->unique(ar2, return_index=True)
A:numpy.lib.arraysetops.aux->numpy.concatenate((ar1, ar2))
A:numpy.lib.arraysetops.aux_sort_indices->numpy.argsort(aux, kind='mergesort')
A:numpy.lib.arraysetops.flag->numpy.concatenate((bool_ar, [invert]))
A:numpy.lib.arraysetops.(ar1, rev_idx)->numpy.unique(ar1, return_inverse=True)
A:numpy.lib.arraysetops.order->numpy.concatenate((ar1, ar2)).argsort(kind='mergesort')
A:numpy.lib.arraysetops.element->numpy.asarray(element)
numpy._ediff1d_dispatcher(ary,to_end=None,to_begin=None)
numpy._in1d_dispatcher(ar1,ar2,assume_unique=None,invert=None)
numpy._intersect1d_dispatcher(ar1,ar2,assume_unique=None,return_indices=None)
numpy._isin_dispatcher(element,test_elements,assume_unique=None,invert=None)
numpy._setdiff1d_dispatcher(ar1,ar2,assume_unique=None)
numpy._setxor1d_dispatcher(ar1,ar2,assume_unique=None)
numpy._union1d_dispatcher(ar1,ar2)
numpy._unique1d(ar,return_index=False,return_inverse=False,return_counts=False)
numpy._unique_dispatcher(ar,return_index=None,return_inverse=None,return_counts=None,axis=None)
numpy._unpack_tuple(x)
numpy.ediff1d(ary,to_end=None,to_begin=None)
numpy.in1d(ar1,ar2,assume_unique=False,invert=False)
numpy.intersect1d(ar1,ar2,assume_unique=False,return_indices=False)
numpy.isin(element,test_elements,assume_unique=False,invert=False)
numpy.lib.arraysetops._ediff1d_dispatcher(ary,to_end=None,to_begin=None)
numpy.lib.arraysetops._in1d_dispatcher(ar1,ar2,assume_unique=None,invert=None)
numpy.lib.arraysetops._intersect1d_dispatcher(ar1,ar2,assume_unique=None,return_indices=None)
numpy.lib.arraysetops._isin_dispatcher(element,test_elements,assume_unique=None,invert=None)
numpy.lib.arraysetops._setdiff1d_dispatcher(ar1,ar2,assume_unique=None)
numpy.lib.arraysetops._setxor1d_dispatcher(ar1,ar2,assume_unique=None)
numpy.lib.arraysetops._union1d_dispatcher(ar1,ar2)
numpy.lib.arraysetops._unique1d(ar,return_index=False,return_inverse=False,return_counts=False)
numpy.lib.arraysetops._unique_dispatcher(ar,return_index=None,return_inverse=None,return_counts=None,axis=None)
numpy.lib.arraysetops._unpack_tuple(x)
numpy.lib.arraysetops.ediff1d(ary,to_end=None,to_begin=None)
numpy.lib.arraysetops.in1d(ar1,ar2,assume_unique=False,invert=False)
numpy.lib.arraysetops.intersect1d(ar1,ar2,assume_unique=False,return_indices=False)
numpy.lib.arraysetops.isin(element,test_elements,assume_unique=False,invert=False)
numpy.lib.arraysetops.setdiff1d(ar1,ar2,assume_unique=False)
numpy.lib.arraysetops.setxor1d(ar1,ar2,assume_unique=False)
numpy.lib.arraysetops.union1d(ar1,ar2)
numpy.lib.arraysetops.unique(ar,return_index=False,return_inverse=False,return_counts=False,axis=None)
numpy.setdiff1d(ar1,ar2,assume_unique=False)
numpy.setxor1d(ar1,ar2,assume_unique=False)
numpy.union1d(ar1,ar2)
numpy.unique(ar,return_index=False,return_inverse=False,return_counts=False,axis=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/arraysetops.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/stride_tricks.py----------------------------------------
A:numpy.lib.stride_tricks.new_array->new_array.view(type=type(original_array)).view(type=type(original_array))
A:numpy.lib.stride_tricks.x->numpy.array(x, copy=False, subok=subok)
A:numpy.lib.stride_tricks.interface->dict(x.__array_interface__)
A:numpy.lib.stride_tricks.interface['shape']->tuple(shape)
A:numpy.lib.stride_tricks.interface['strides']->tuple(strides)
A:numpy.lib.stride_tricks.array->numpy.array(array, copy=False, subok=subok)
A:numpy.lib.stride_tricks.view->_maybe_view_as_subclass(x, array)
A:numpy.lib.stride_tricks.window_shape_array->numpy.array(window_shape)
A:numpy.lib.stride_tricks.axis->normalize_axis_tuple(axis, x.ndim, allow_duplicate=True)
A:numpy.lib.stride_tricks.x_shape_trimmed->list(x.shape)
A:numpy.lib.stride_tricks.it->numpy.nditer((array,), flags=['multi_index', 'refs_ok', 'zerosize_ok'] + extras, op_flags=['readonly'], itershape=shape, order='C')
A:numpy.lib.stride_tricks.result->_maybe_view_as_subclass(array, broadcast)
A:numpy.lib.stride_tricks.b->numpy.broadcast(b, *args[pos:pos + 31])
A:numpy.lib.stride_tricks.shape->_broadcast_shape(*args)
numpy.DummyArray(self,interface,base=None)
numpy._broadcast_arrays_dispatcher(*args,subok=None)
numpy._broadcast_shape(*args)
numpy._broadcast_to(array,shape,subok,readonly)
numpy._broadcast_to_dispatcher(array,shape,subok=None)
numpy._maybe_view_as_subclass(original_array,new_array)
numpy._sliding_window_view_dispatcher(x,window_shape,axis=None,*,subok=None,writeable=None)
numpy.as_strided(x,shape=None,strides=None,subok=False,writeable=True)
numpy.broadcast_arrays(*args,subok=False)
numpy.broadcast_shapes(*args)
numpy.broadcast_to(array,shape,subok=False)
numpy.lib.stride_tricks.DummyArray(self,interface,base=None)
numpy.lib.stride_tricks.DummyArray.__init__(self,interface,base=None)
numpy.lib.stride_tricks._broadcast_arrays_dispatcher(*args,subok=None)
numpy.lib.stride_tricks._broadcast_shape(*args)
numpy.lib.stride_tricks._broadcast_to(array,shape,subok,readonly)
numpy.lib.stride_tricks._broadcast_to_dispatcher(array,shape,subok=None)
numpy.lib.stride_tricks._maybe_view_as_subclass(original_array,new_array)
numpy.lib.stride_tricks._sliding_window_view_dispatcher(x,window_shape,axis=None,*,subok=None,writeable=None)
numpy.lib.stride_tricks.as_strided(x,shape=None,strides=None,subok=False,writeable=True)
numpy.lib.stride_tricks.broadcast_arrays(*args,subok=False)
numpy.lib.stride_tricks.broadcast_shapes(*args)
numpy.lib.stride_tricks.broadcast_to(array,shape,subok=False)
numpy.lib.stride_tricks.sliding_window_view(x,window_shape,axis=None,*,subok=False,writeable=False)
numpy.sliding_window_view(x,window_shape,axis=None,*,subok=False,writeable=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/stride_tricks.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/mixins.py----------------------------------------
A:numpy.lib.mixins.func.__name__->'__{}__'.format(name)
A:numpy.lib.mixins.__lt__->_binary_method(um.less, 'lt')
A:numpy.lib.mixins.__le__->_binary_method(um.less_equal, 'le')
A:numpy.lib.mixins.__eq__->_binary_method(um.equal, 'eq')
A:numpy.lib.mixins.__ne__->_binary_method(um.not_equal, 'ne')
A:numpy.lib.mixins.__gt__->_binary_method(um.greater, 'gt')
A:numpy.lib.mixins.__ge__->_binary_method(um.greater_equal, 'ge')
A:numpy.lib.mixins.(__add__, __radd__, __iadd__)->_numeric_methods(um.add, 'add')
A:numpy.lib.mixins.(__sub__, __rsub__, __isub__)->_numeric_methods(um.subtract, 'sub')
A:numpy.lib.mixins.(__mul__, __rmul__, __imul__)->_numeric_methods(um.multiply, 'mul')
A:numpy.lib.mixins.(__matmul__, __rmatmul__, __imatmul__)->_numeric_methods(um.matmul, 'matmul')
A:numpy.lib.mixins.(__truediv__, __rtruediv__, __itruediv__)->_numeric_methods(um.true_divide, 'truediv')
A:numpy.lib.mixins.(__floordiv__, __rfloordiv__, __ifloordiv__)->_numeric_methods(um.floor_divide, 'floordiv')
A:numpy.lib.mixins.(__mod__, __rmod__, __imod__)->_numeric_methods(um.remainder, 'mod')
A:numpy.lib.mixins.__divmod__->_binary_method(um.divmod, 'divmod')
A:numpy.lib.mixins.__rdivmod__->_reflected_binary_method(um.divmod, 'divmod')
A:numpy.lib.mixins.(__pow__, __rpow__, __ipow__)->_numeric_methods(um.power, 'pow')
A:numpy.lib.mixins.(__lshift__, __rlshift__, __ilshift__)->_numeric_methods(um.left_shift, 'lshift')
A:numpy.lib.mixins.(__rshift__, __rrshift__, __irshift__)->_numeric_methods(um.right_shift, 'rshift')
A:numpy.lib.mixins.(__and__, __rand__, __iand__)->_numeric_methods(um.bitwise_and, 'and')
A:numpy.lib.mixins.(__xor__, __rxor__, __ixor__)->_numeric_methods(um.bitwise_xor, 'xor')
A:numpy.lib.mixins.(__or__, __ror__, __ior__)->_numeric_methods(um.bitwise_or, 'or')
A:numpy.lib.mixins.__neg__->_unary_method(um.negative, 'neg')
A:numpy.lib.mixins.__pos__->_unary_method(um.positive, 'pos')
A:numpy.lib.mixins.__abs__->_unary_method(um.absolute, 'abs')
A:numpy.lib.mixins.__invert__->_unary_method(um.invert, 'invert')
numpy.lib.mixins.NDArrayOperatorsMixin
numpy.lib.mixins._binary_method(ufunc,name)
numpy.lib.mixins._disables_array_ufunc(obj)
numpy.lib.mixins._inplace_binary_method(ufunc,name)
numpy.lib.mixins._numeric_methods(ufunc,name)
numpy.lib.mixins._reflected_binary_method(ufunc,name)
numpy.lib.mixins._unary_method(ufunc,name)
numpy.mixins.NDArrayOperatorsMixin
numpy.mixins._binary_method(ufunc,name)
numpy.mixins._disables_array_ufunc(obj)
numpy.mixins._inplace_binary_method(ufunc,name)
numpy.mixins._numeric_methods(ufunc,name)
numpy.mixins._reflected_binary_method(ufunc,name)
numpy.mixins._unary_method(ufunc,name)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/mixins.pyi----------------------------------------
numpy.lib.mixins.NDArrayOperatorsMixin.__abs__(self)
numpy.lib.mixins.NDArrayOperatorsMixin.__add__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__and__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
numpy.lib.mixins.NDArrayOperatorsMixin.__divmod__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__eq__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__floordiv__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__ge__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__gt__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__iadd__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__iand__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__ifloordiv__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__ilshift__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__imatmul__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__imod__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__imul__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__invert__(self)
numpy.lib.mixins.NDArrayOperatorsMixin.__ior__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__ipow__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__irshift__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__isub__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__itruediv__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__ixor__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__le__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__lshift__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__lt__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__matmul__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__mod__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__mul__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__ne__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__neg__(self)
numpy.lib.mixins.NDArrayOperatorsMixin.__or__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__pos__(self)
numpy.lib.mixins.NDArrayOperatorsMixin.__pow__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__radd__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__rand__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__rdivmod__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__rfloordiv__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__rlshift__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__rmatmul__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__rmod__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__rmul__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__ror__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__rpow__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__rrshift__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__rshift__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__rsub__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__rtruediv__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__rxor__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__sub__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__truediv__(self,other)
numpy.lib.mixins.NDArrayOperatorsMixin.__xor__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__abs__(self)
numpy.mixins.NDArrayOperatorsMixin.__add__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__and__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
numpy.mixins.NDArrayOperatorsMixin.__divmod__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__eq__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__floordiv__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__ge__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__gt__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__iadd__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__iand__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__ifloordiv__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__ilshift__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__imatmul__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__imod__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__imul__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__invert__(self)
numpy.mixins.NDArrayOperatorsMixin.__ior__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__ipow__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__irshift__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__isub__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__itruediv__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__ixor__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__le__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__lshift__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__lt__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__matmul__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__mod__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__mul__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__ne__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__neg__(self)
numpy.mixins.NDArrayOperatorsMixin.__or__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__pos__(self)
numpy.mixins.NDArrayOperatorsMixin.__pow__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__radd__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__rand__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__rdivmod__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__rfloordiv__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__rlshift__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__rmatmul__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__rmod__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__rmul__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__ror__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__rpow__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__rrshift__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__rshift__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__rsub__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__rtruediv__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__rxor__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__sub__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__truediv__(self,other)
numpy.mixins.NDArrayOperatorsMixin.__xor__(self,other)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/utils.py----------------------------------------
A:numpy.lib.utils.d->os.path.join(os.path.dirname(core.__file__), 'include')
A:numpy.lib.utils.newfunc->_set_function_name(newfunc, old_name)
A:numpy.lib.utils.lines->inspect.getdoc(item).expandtabs().split('\n')
A:numpy.lib.utils.indent->min(indent, len(line) - content)
A:numpy.lib.utils.depdoc->textwrap.indent(depdoc, ' ' * indent)
A:numpy.lib.utils.doc->inspect.getdoc(item)
A:numpy.lib.utils.content->len(line.lstrip())
A:numpy.lib.utils.idv->id(var)
A:numpy.lib.utils.shapestr->' x '.join(map(str, var.shape))
A:numpy.lib.utils.bytestr->str(var.nbytes)
A:numpy.lib.utils.maxname->len(val[0])
A:numpy.lib.utils.maxshape->len(val[1])
A:numpy.lib.utils.maxbyte->len(val[2])
A:numpy.lib.utils.sp1->max(10, maxname)
A:numpy.lib.utils.sp2->max(10, maxshape)
A:numpy.lib.utils.sp3->max(10, maxbyte)
A:numpy.lib.utils.firstwidth->len(name)
A:numpy.lib.utils.arglist->str(inspect.signature(object)).split(sepstr)
A:numpy.lib.utils.module->__import__(module, globals(), locals(), [])
A:numpy.lib.utils.thisdict->totraverse.pop(0)
A:numpy.lib.utils.cls->getattr(obj, '__class__', type(obj))
A:numpy.lib.utils.nm->getattr(cls, '__name__', cls)
A:numpy.lib.utils.(_namedict, _dictlist)->_makenamedict(toplevel)
A:numpy.lib.utils.arguments->str(inspect.signature(object))
A:numpy.lib.utils.argstr->_split_line(name, arguments, maxwidth)
A:numpy.lib.utils.doc1->inspect.getdoc(object)
A:numpy.lib.utils.methods->pydoc.allmethods(object)
A:numpy.lib.utils.thisobj->getattr(object, meth, None)
A:numpy.lib.utils.(methstr, other)->pydoc.splitdoc(inspect.getdoc(thisobj) or 'None')
A:numpy.lib.utils._function_signature_re->re.compile('[a-z0-9_]+\\(.*[,=].*\\)', re.I)
A:numpy.lib.utils.cache->_lookfor_generate_cache(module, import_modules, regenerate)
A:numpy.lib.utils.whats->str(what).lower().split()
A:numpy.lib.utils.first_doc->doclines[1].strip()
A:numpy.lib.utils.pager->pydoc.getpager()
A:numpy.lib.utils.(name, item)->stack.pop(0)
A:numpy.lib.utils.this_py->os.path.join(pth, mod_path)
A:numpy.lib.utils.init_py->os.path.join(pth, mod_path, '__init__.py')
A:numpy.lib.utils.sys.stdout->StringIO()
A:numpy.lib.utils.sys.stderr->StringIO()
A:numpy.lib.utils.item_name->getattr(v, '__name__', '%s.%s' % (name, n))
A:numpy.lib.utils.mod_name->getattr(v, '__module__', None)
A:numpy.lib.utils.members->inspect.getmembers(item)
A:numpy.lib.utils.n->n.filled(False).filled(False)
A:numpy.lib.utils.out[...]->data.dtype.type(np.nan)
A:numpy.lib.utils.result->data.dtype.type(np.nan)
A:numpy.lib.utils.enabled_features->' '.join(__cpu_baseline__)
numpy._Deprecate(self,old_name=None,new_name=None,message=None)
numpy._get_indent(lines)
numpy._getmembers(item)
numpy._info(obj,output=sys.stdout)
numpy._lookfor_generate_cache(module,import_modules,regenerate)
numpy._makenamedict(module='numpy')
numpy._median_nancheck(data,result,axis,out)
numpy._opt_info()
numpy._set_function_name(func,name)
numpy._split_line(name,arguments,width)
numpy.byte_bounds(a)
numpy.deprecate(*args,**kwargs)
numpy.deprecate_with_doc(msg)
numpy.get_include()
numpy.info(object=None,maxwidth=76,output=sys.stdout,toplevel='numpy')
numpy.lib.utils._Deprecate(self,old_name=None,new_name=None,message=None)
numpy.lib.utils._Deprecate.__init__(self,old_name=None,new_name=None,message=None)
numpy.lib.utils._get_indent(lines)
numpy.lib.utils._getmembers(item)
numpy.lib.utils._info(obj,output=sys.stdout)
numpy.lib.utils._lookfor_generate_cache(module,import_modules,regenerate)
numpy.lib.utils._makenamedict(module='numpy')
numpy.lib.utils._median_nancheck(data,result,axis,out)
numpy.lib.utils._opt_info()
numpy.lib.utils._set_function_name(func,name)
numpy.lib.utils._split_line(name,arguments,width)
numpy.lib.utils.byte_bounds(a)
numpy.lib.utils.deprecate(*args,**kwargs)
numpy.lib.utils.deprecate_with_doc(msg)
numpy.lib.utils.get_include()
numpy.lib.utils.info(object=None,maxwidth=76,output=sys.stdout,toplevel='numpy')
numpy.lib.utils.lookfor(what,module=None,import_modules=True,regenerate=False,output=None)
numpy.lib.utils.safe_eval(source)
numpy.lib.utils.source(object,output=sys.stdout)
numpy.lib.utils.who(vardict=None)
numpy.lookfor(what,module=None,import_modules=True,regenerate=False,output=None)
numpy.safe_eval(source)
numpy.source(object,output=sys.stdout)
numpy.who(vardict=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/utils.pyi----------------------------------------
numpy._SupportsWrite(Protocol[_T_contra])
numpy._SupportsWrite.write(self,__s:_T_contra)->Any
numpy.lib.utils._SupportsWrite(Protocol[_T_contra])
numpy.lib.utils._SupportsWrite.write(self,__s:_T_contra)->Any


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/_datasource.py----------------------------------------
A:numpy.lib._datasource._file_openers->_FileOpeners()
A:numpy.lib._datasource.ds->DataSource(destpath)
A:numpy.lib._datasource.self._destpath->tempfile.mkdtemp()
A:numpy.lib._datasource.(fname, ext)->os.path.splitext(filename)
A:numpy.lib._datasource.(scheme, netloc, upath, uparams, uquery, ufrag)->urlparse(path)
A:numpy.lib._datasource.upath->self.abspath(path)
A:numpy.lib._datasource.filelist->self._possible_names(self.abspath(path))
A:numpy.lib._datasource.name->self._cache(name)
A:numpy.lib._datasource.splitpath->path.lstrip(os.pardir).lstrip('..').split(self._baseurl, 2)
A:numpy.lib._datasource.netloc->self._sanitize_relative_path(netloc)
A:numpy.lib._datasource.path->path.lstrip(os.pardir).lstrip('..').lstrip(os.pardir).lstrip('..')
A:numpy.lib._datasource.(drive, path)->os.path.splitdrive(path)
A:numpy.lib._datasource.netfile->urlopen(path)
A:numpy.lib._datasource.found->self._findfile(path)
A:numpy.lib._datasource.(_fname, ext)->self._splitzipext(found)
A:numpy.lib._datasource.result->os.path.join(self._baseurl, path)
numpy._datasource.DataSource(self,destpath=os.curdir)
numpy._datasource.DataSource.__del__(self)
numpy._datasource.DataSource._cache(self,path)
numpy._datasource.DataSource._findfile(self,path)
numpy._datasource.DataSource._isurl(self,path)
numpy._datasource.DataSource._iswritemode(self,mode)
numpy._datasource.DataSource._iszip(self,filename)
numpy._datasource.DataSource._possible_names(self,filename)
numpy._datasource.DataSource._sanitize_relative_path(self,path)
numpy._datasource.DataSource._splitzipext(self,filename)
numpy._datasource.DataSource.abspath(self,path)
numpy._datasource.DataSource.exists(self,path)
numpy._datasource.DataSource.open(self,path,mode='r',encoding=None,newline=None)
numpy._datasource.Repository(self,baseurl,destpath=os.curdir)
numpy._datasource.Repository.__del__(self)
numpy._datasource.Repository._findfile(self,path)
numpy._datasource.Repository._fullpath(self,path)
numpy._datasource.Repository.abspath(self,path)
numpy._datasource.Repository.exists(self,path)
numpy._datasource.Repository.listdir(self)
numpy._datasource.Repository.open(self,path,mode='r',encoding=None,newline=None)
numpy._datasource._FileOpeners(self)
numpy._datasource._FileOpeners.__getitem__(self,key)
numpy._datasource._FileOpeners._load(self)
numpy._datasource._FileOpeners.keys(self)
numpy._datasource._check_mode(mode,encoding,newline)
numpy._datasource.open(path,mode='r',destpath=os.curdir,encoding=None,newline=None)
numpy.lib._datasource.DataSource(self,destpath=os.curdir)
numpy.lib._datasource.DataSource.__del__(self)
numpy.lib._datasource.DataSource.__init__(self,destpath=os.curdir)
numpy.lib._datasource.DataSource._cache(self,path)
numpy.lib._datasource.DataSource._findfile(self,path)
numpy.lib._datasource.DataSource._isurl(self,path)
numpy.lib._datasource.DataSource._iswritemode(self,mode)
numpy.lib._datasource.DataSource._iszip(self,filename)
numpy.lib._datasource.DataSource._possible_names(self,filename)
numpy.lib._datasource.DataSource._sanitize_relative_path(self,path)
numpy.lib._datasource.DataSource._splitzipext(self,filename)
numpy.lib._datasource.DataSource.abspath(self,path)
numpy.lib._datasource.DataSource.exists(self,path)
numpy.lib._datasource.DataSource.open(self,path,mode='r',encoding=None,newline=None)
numpy.lib._datasource.Repository(self,baseurl,destpath=os.curdir)
numpy.lib._datasource.Repository.__del__(self)
numpy.lib._datasource.Repository.__init__(self,baseurl,destpath=os.curdir)
numpy.lib._datasource.Repository._findfile(self,path)
numpy.lib._datasource.Repository._fullpath(self,path)
numpy.lib._datasource.Repository.abspath(self,path)
numpy.lib._datasource.Repository.exists(self,path)
numpy.lib._datasource.Repository.listdir(self)
numpy.lib._datasource.Repository.open(self,path,mode='r',encoding=None,newline=None)
numpy.lib._datasource._FileOpeners(self)
numpy.lib._datasource._FileOpeners.__getitem__(self,key)
numpy.lib._datasource._FileOpeners.__init__(self)
numpy.lib._datasource._FileOpeners._load(self)
numpy.lib._datasource._FileOpeners.keys(self)
numpy.lib._datasource._check_mode(mode,encoding,newline)
numpy.lib._datasource.open(path,mode='r',destpath=os.curdir,encoding=None,newline=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/arraypad.py----------------------------------------
A:numpy.lib.arraypad.new_shape->tuple((left + size + right for (size, (left, right)) in zip(array.shape, pad_width)))
A:numpy.lib.arraypad.padded->numpy.empty(new_shape, dtype=array.dtype, order=order)
A:numpy.lib.arraypad.original_area_slice->tuple((slice(left, left + size) for (size, (left, right)) in zip(array.shape, pad_width)))
A:numpy.lib.arraypad.left_slice->_slice_at_axis(slice(left_pad, left_pad + min(period, right_pad)), axis)
A:numpy.lib.arraypad.right_slice->_slice_at_axis(slice(-right_pad - min(period, left_pad), -right_pad if right_pad != 0 else None), axis)
A:numpy.lib.arraypad.edge_pair->_get_edges(padded, axis, (left_index, right_index))
A:numpy.lib.arraypad.left_stat->stat_func(left_chunk, axis=axis, keepdims=True)
A:numpy.lib.arraypad.right_stat->stat_func(right_chunk, axis=axis, keepdims=True)
A:numpy.lib.arraypad.chunk_length->min(old_length, right_pad)
A:numpy.lib.arraypad.edge_slice->_slice_at_axis(slice(-right_pad - 1, -right_pad), axis)
A:numpy.lib.arraypad.pad_area->_slice_at_axis(slice(-right_pad, None), axis)
A:numpy.lib.arraypad.x->x.ravel().ravel()
A:numpy.lib.arraypad.array->numpy.asarray(array)
A:numpy.lib.arraypad.pad_width->_as_pairs(pad_width, array.ndim, as_index=True)
A:numpy.lib.arraypad.(padded, _)->_pad_simple(array, pad_width, fill_value=0)
A:numpy.lib.arraypad.view->numpy.moveaxis(padded, axis, -1)
A:numpy.lib.arraypad.inds->ndindex(view.shape[:-1])
A:numpy.lib.arraypad.(padded, original_area_slice)->_pad_simple(array, pad_width)
A:numpy.lib.arraypad.axes->range(padded.ndim)
A:numpy.lib.arraypad.values->_as_pairs(values, padded.ndim)
A:numpy.lib.arraypad.roi->_view_roi(padded, original_area_slice, axis)
A:numpy.lib.arraypad.end_values->_as_pairs(end_values, padded.ndim)
A:numpy.lib.arraypad.ramp_pair->_get_linear_ramps(roi, axis, width_pair, value_pair)
A:numpy.lib.arraypad.length->_as_pairs(length, padded.ndim, as_index=True)
A:numpy.lib.arraypad.stat_pair->_get_stats(roi, axis, width_pair, length_pair, func)
A:numpy.lib.arraypad.method->kwargs.get('reflect_type', 'even')
A:numpy.lib.arraypad.(left_index, right_index)->_set_wrap_both(roi, axis, (left_index, right_index))
numpy._as_pairs(x,ndim,as_index=False)
numpy._get_edges(padded,axis,width_pair)
numpy._get_linear_ramps(padded,axis,width_pair,end_value_pair)
numpy._get_stats(padded,axis,width_pair,length_pair,stat_func)
numpy._pad_dispatcher(array,pad_width,mode=None,**kwargs)
numpy._pad_simple(array,pad_width,fill_value=None)
numpy._round_if_needed(arr,dtype)
numpy._set_pad_area(padded,axis,width_pair,value_pair)
numpy._set_reflect_both(padded,axis,width_pair,method,include_edge=False)
numpy._set_wrap_both(padded,axis,width_pair)
numpy._slice_at_axis(sl,axis)
numpy._view_roi(array,original_area_slice,axis)
numpy.lib.arraypad._as_pairs(x,ndim,as_index=False)
numpy.lib.arraypad._get_edges(padded,axis,width_pair)
numpy.lib.arraypad._get_linear_ramps(padded,axis,width_pair,end_value_pair)
numpy.lib.arraypad._get_stats(padded,axis,width_pair,length_pair,stat_func)
numpy.lib.arraypad._pad_dispatcher(array,pad_width,mode=None,**kwargs)
numpy.lib.arraypad._pad_simple(array,pad_width,fill_value=None)
numpy.lib.arraypad._round_if_needed(arr,dtype)
numpy.lib.arraypad._set_pad_area(padded,axis,width_pair,value_pair)
numpy.lib.arraypad._set_reflect_both(padded,axis,width_pair,method,include_edge=False)
numpy.lib.arraypad._set_wrap_both(padded,axis,width_pair)
numpy.lib.arraypad._slice_at_axis(sl,axis)
numpy.lib.arraypad._view_roi(array,original_area_slice,axis)
numpy.lib.arraypad.pad(array,pad_width,mode='constant',**kwargs)
numpy.pad(array,pad_width,mode='constant',**kwargs)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/arraypad.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/shape_base.py----------------------------------------
A:numpy.lib.shape_base.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib.shape_base.axis->normalize_axis_tuple(axis, out_ndim)
A:numpy.lib.shape_base.arr->asanyarray(v)
A:numpy.lib.shape_base.in_dims->list(range(nd))
A:numpy.lib.shape_base.inarr_view->transpose(arr, in_dims[:axis] + in_dims[axis + 1:] + [axis])
A:numpy.lib.shape_base.inds->ndindex(inarr_view.shape[:-1])
A:numpy.lib.shape_base.ind0->next(inds)
A:numpy.lib.shape_base.res->expand_dims(res, axis)
A:numpy.lib.shape_base.buff->expand_dims(res, axis).__array_wrap__(buff)
A:numpy.lib.shape_base.buff_dims->list(range(buff.ndim))
A:numpy.lib.shape_base.buff[ind]->asanyarray(func1d(inarr_view[ind], *args, **kwargs))
A:numpy.lib.shape_base.out_arr->transpose(buff, buff_permute)
A:numpy.lib.shape_base.val->asarray(a)
A:numpy.lib.shape_base.a->reshape(a, as_)
A:numpy.lib.shape_base.shape_it->iter(a.shape)
A:numpy.lib.shape_base.arrs->atleast_3d(*tup)
A:numpy.lib.shape_base.sub_arys[i]->numpy.core.numeric.empty(0, dtype=sub_arys[i].dtype)
A:numpy.lib.shape_base.Ntotal->len(ary)
A:numpy.lib.shape_base.Nsections->int(indices_or_sections)
A:numpy.lib.shape_base.(Neach_section, extras)->divmod(Ntotal, Nsections)
A:numpy.lib.shape_base.div_points->numpy.core.numeric.array(section_sizes, dtype=_nx.intp).cumsum()
A:numpy.lib.shape_base.sary->numpy.core.numeric.swapaxes(ary, axis, 0)
A:numpy.lib.shape_base.wrappers->sorted(((getattr(x, '__array_priority__', 0), -i, x.__array_wrap__) for (i, x) in enumerate(args) if hasattr(x, '__array_wrap__')))
A:numpy.lib.shape_base.b->reshape(b, bs)
A:numpy.lib.shape_base.result->wrapper(result)
A:numpy.lib.shape_base.wrapper->get_array_wrap(a, b)
A:numpy.lib.shape_base.tup->tuple(reps)
A:numpy.lib.shape_base.d->len(tup)
A:numpy.lib.shape_base.c->c.reshape(-1, n).repeat(nrep, 0).reshape(-1, n).repeat(nrep, 0)
A:numpy.lib.shape_base.shape_out->tuple((s * t for (s, t) in zip(c.shape, tup)))
numpy._apply_along_axis_dispatcher(func1d,axis,arr,*args,**kwargs)
numpy._apply_over_axes_dispatcher(func,a,axes)
numpy._array_split_dispatcher(ary,indices_or_sections,axis=None)
numpy._column_stack_dispatcher(tup)
numpy._dstack_dispatcher(tup)
numpy._expand_dims_dispatcher(a,axis)
numpy._hvdsplit_dispatcher(ary,indices_or_sections)
numpy._kron_dispatcher(a,b)
numpy._make_along_axis_idx(arr_shape,indices,axis)
numpy._put_along_axis_dispatcher(arr,indices,values,axis)
numpy._replace_zero_by_x_arrays(sub_arys)
numpy._split_dispatcher(ary,indices_or_sections,axis=None)
numpy._take_along_axis_dispatcher(arr,indices,axis)
numpy._tile_dispatcher(A,reps)
numpy.apply_along_axis(func1d,axis,arr,*args,**kwargs)
numpy.apply_over_axes(func,a,axes)
numpy.array_split(ary,indices_or_sections,axis=0)
numpy.column_stack(tup)
numpy.dsplit(ary,indices_or_sections)
numpy.dstack(tup)
numpy.expand_dims(a,axis)
numpy.get_array_prepare(*args)
numpy.get_array_wrap(*args)
numpy.hsplit(ary,indices_or_sections)
numpy.kron(a,b)
numpy.lib.shape_base._apply_along_axis_dispatcher(func1d,axis,arr,*args,**kwargs)
numpy.lib.shape_base._apply_over_axes_dispatcher(func,a,axes)
numpy.lib.shape_base._array_split_dispatcher(ary,indices_or_sections,axis=None)
numpy.lib.shape_base._column_stack_dispatcher(tup)
numpy.lib.shape_base._dstack_dispatcher(tup)
numpy.lib.shape_base._expand_dims_dispatcher(a,axis)
numpy.lib.shape_base._hvdsplit_dispatcher(ary,indices_or_sections)
numpy.lib.shape_base._kron_dispatcher(a,b)
numpy.lib.shape_base._make_along_axis_idx(arr_shape,indices,axis)
numpy.lib.shape_base._put_along_axis_dispatcher(arr,indices,values,axis)
numpy.lib.shape_base._replace_zero_by_x_arrays(sub_arys)
numpy.lib.shape_base._split_dispatcher(ary,indices_or_sections,axis=None)
numpy.lib.shape_base._take_along_axis_dispatcher(arr,indices,axis)
numpy.lib.shape_base._tile_dispatcher(A,reps)
numpy.lib.shape_base.apply_along_axis(func1d,axis,arr,*args,**kwargs)
numpy.lib.shape_base.apply_over_axes(func,a,axes)
numpy.lib.shape_base.array_split(ary,indices_or_sections,axis=0)
numpy.lib.shape_base.column_stack(tup)
numpy.lib.shape_base.dsplit(ary,indices_or_sections)
numpy.lib.shape_base.dstack(tup)
numpy.lib.shape_base.expand_dims(a,axis)
numpy.lib.shape_base.get_array_prepare(*args)
numpy.lib.shape_base.get_array_wrap(*args)
numpy.lib.shape_base.hsplit(ary,indices_or_sections)
numpy.lib.shape_base.kron(a,b)
numpy.lib.shape_base.put_along_axis(arr,indices,values,axis)
numpy.lib.shape_base.split(ary,indices_or_sections,axis=0)
numpy.lib.shape_base.take_along_axis(arr,indices,axis)
numpy.lib.shape_base.tile(A,reps)
numpy.lib.shape_base.vsplit(ary,indices_or_sections)
numpy.put_along_axis(arr,indices,values,axis)
numpy.split(ary,indices_or_sections,axis=0)
numpy.take_along_axis(arr,indices,axis)
numpy.tile(A,reps)
numpy.vsplit(ary,indices_or_sections)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/shape_base.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/_iotools.py----------------------------------------
A:numpy.lib._iotools.line->line.strip('\r\n').strip('\r\n')
A:numpy.lib._iotools.flat_dt->flatten_dtype(info[0], flatten_base)
A:numpy.lib._iotools.delimiter->_decode_line(delimiter)
A:numpy.lib._iotools.comments->_decode_line(comments)
A:numpy.lib._iotools.idx->numpy.cumsum([0] + list(delimiter))
A:numpy.lib._iotools.self._handyman->self.autostrip(_handyman)
A:numpy.lib._iotools.defaultdeletechars->set("~!@#$%^&*()-=+~\\|]}[{';: /?.>,<")
A:numpy.lib._iotools.delete->set(deletechars)
A:numpy.lib._iotools.nbnames->len(names)
A:numpy.lib._iotools.seen->dict()
A:numpy.lib._iotools.item->''.join([c for c in item if c not in deletechars])
A:numpy.lib._iotools.cnt->dict().get(item, 0)
A:numpy.lib._iotools.value->value.upper().upper()
A:numpy.lib._iotools.default->self.func('0')
A:numpy.lib._iotools.self._locked->bool(locked)
A:numpy.lib._iotools.dtype->self._getdtype(default)
A:numpy.lib._iotools.(self._status, (_, func, default_def))->self._find_map_entry(dtype)
A:numpy.lib._iotools.missing_values->missing_values.split(',').split(',')
A:numpy.lib._iotools.self.missing_values->set()
A:numpy.lib._iotools.self.type->self._dtypeortype(self._getdtype(tester))
A:numpy.lib._iotools.new_value->self.func(value)
A:numpy.lib._iotools._statusmax->len(self._mapper)
A:numpy.lib._iotools.tester->func(testing_value or '1')
A:numpy.lib._iotools.ndtype->numpy.dtype(list(zip(names, formats)))
A:numpy.lib._iotools.validate->NameValidator(**validationargs)
A:numpy.lib._iotools.nbfields->len(ndtype)
A:numpy.lib._iotools.names->validate(names, defaultfmt=defaultfmt)
A:numpy.lib._iotools.formats->tuple([ndtype.type] * len(names))
A:numpy.lib._iotools.ndtype.names->validate(ndtype.names, defaultfmt=defaultfmt)
A:numpy.lib._iotools.numbered_names->tuple(('f%i' % i for i in range(len(ndtype.names))))
numpy._iotools.ConversionWarning(UserWarning)
numpy._iotools.ConverterError(Exception)
numpy._iotools.ConverterLockError(ConverterError)
numpy._iotools.LineSplitter(self,delimiter=None,comments='#',autostrip=True,encoding=None)
numpy._iotools.LineSplitter._delimited_splitter(self,line)
numpy._iotools.LineSplitter._fixedwidth_splitter(self,line)
numpy._iotools.LineSplitter._variablewidth_splitter(self,line)
numpy._iotools.LineSplitter.autostrip(self,method)
numpy._iotools.NameValidator(self,excludelist=None,deletechars=None,case_sensitive=None,replace_space='_')
numpy._iotools.NameValidator.validate(self,names,defaultfmt='f%i',nbfields=None)
numpy._iotools.StringConverter(self,dtype_or_func=None,default=None,missing_values=None,locked=False)
numpy._iotools.StringConverter._do_upgrade(self)
numpy._iotools.StringConverter._dtypeortype(cls,dtype)
numpy._iotools.StringConverter._find_map_entry(cls,dtype)
numpy._iotools.StringConverter._getdtype(cls,val)
numpy._iotools.StringConverter._getsubdtype(cls,val)
numpy._iotools.StringConverter._loose_call(self,value)
numpy._iotools.StringConverter._strict_call(self,value)
numpy._iotools.StringConverter.iterupgrade(self,value)
numpy._iotools.StringConverter.update(self,func,default=None,testing_value=None,missing_values='',locked=False)
numpy._iotools.StringConverter.upgrade(self,value)
numpy._iotools.StringConverter.upgrade_mapper(cls,func,default=None)
numpy._iotools._decode_line(line,encoding=None)
numpy._iotools._is_bytes_like(obj)
numpy._iotools._is_string_like(obj)
numpy._iotools.easy_dtype(ndtype,names=None,defaultfmt='f%i',**validationargs)
numpy._iotools.flatten_dtype(ndtype,flatten_base=False)
numpy._iotools.has_nested_fields(ndtype)
numpy._iotools.str2bool(value)
numpy.lib._iotools.ConversionWarning(UserWarning)
numpy.lib._iotools.ConverterError(Exception)
numpy.lib._iotools.ConverterLockError(ConverterError)
numpy.lib._iotools.LineSplitter(self,delimiter=None,comments='#',autostrip=True,encoding=None)
numpy.lib._iotools.LineSplitter.__init__(self,delimiter=None,comments='#',autostrip=True,encoding=None)
numpy.lib._iotools.LineSplitter._delimited_splitter(self,line)
numpy.lib._iotools.LineSplitter._fixedwidth_splitter(self,line)
numpy.lib._iotools.LineSplitter._variablewidth_splitter(self,line)
numpy.lib._iotools.LineSplitter.autostrip(self,method)
numpy.lib._iotools.NameValidator(self,excludelist=None,deletechars=None,case_sensitive=None,replace_space='_')
numpy.lib._iotools.NameValidator.__init__(self,excludelist=None,deletechars=None,case_sensitive=None,replace_space='_')
numpy.lib._iotools.NameValidator.validate(self,names,defaultfmt='f%i',nbfields=None)
numpy.lib._iotools.StringConverter(self,dtype_or_func=None,default=None,missing_values=None,locked=False)
numpy.lib._iotools.StringConverter.__init__(self,dtype_or_func=None,default=None,missing_values=None,locked=False)
numpy.lib._iotools.StringConverter._do_upgrade(self)
numpy.lib._iotools.StringConverter._dtypeortype(cls,dtype)
numpy.lib._iotools.StringConverter._find_map_entry(cls,dtype)
numpy.lib._iotools.StringConverter._getdtype(cls,val)
numpy.lib._iotools.StringConverter._getsubdtype(cls,val)
numpy.lib._iotools.StringConverter._loose_call(self,value)
numpy.lib._iotools.StringConverter._strict_call(self,value)
numpy.lib._iotools.StringConverter.iterupgrade(self,value)
numpy.lib._iotools.StringConverter.update(self,func,default=None,testing_value=None,missing_values='',locked=False)
numpy.lib._iotools.StringConverter.upgrade(self,value)
numpy.lib._iotools.StringConverter.upgrade_mapper(cls,func,default=None)
numpy.lib._iotools._decode_line(line,encoding=None)
numpy.lib._iotools._is_bytes_like(obj)
numpy.lib._iotools._is_string_like(obj)
numpy.lib._iotools.easy_dtype(ndtype,names=None,defaultfmt='f%i',**validationargs)
numpy.lib._iotools.flatten_dtype(ndtype,flatten_base=False)
numpy.lib._iotools.has_nested_fields(ndtype)
numpy.lib._iotools.str2bool(value)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/__init__.py----------------------------------------
A:numpy.lib.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/__init__.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/_version.py----------------------------------------
A:numpy.lib._version.ver_main->re.match('\\d+\\.\\d+\\.\\d+', vstring)
A:numpy.lib._version.self.version->re.match('\\d+\\.\\d+\\.\\d+', vstring).group()
A:numpy.lib._version.alpha->re.match('a\\d', vstring[ver_main.end():])
A:numpy.lib._version.beta->re.match('b\\d', vstring[ver_main.end():])
A:numpy.lib._version.rc->re.match('rc\\d', vstring[ver_main.end():])
A:numpy.lib._version.self.pre_release->pre_rel[0].group()
A:numpy.lib._version.self.is_devversion->bool(re.search('.dev', vstring))
A:numpy.lib._version.other->NumpyVersion(other)
A:numpy.lib._version.vercmp->self._compare_pre_release(other)
numpy.NumpyVersion(self,vstring)
numpy.NumpyVersion.__eq__(self,other)
numpy.NumpyVersion.__ge__(self,other)
numpy.NumpyVersion.__gt__(self,other)
numpy.NumpyVersion.__le__(self,other)
numpy.NumpyVersion.__lt__(self,other)
numpy.NumpyVersion.__ne__(self,other)
numpy.NumpyVersion.__repr__(self)
numpy.NumpyVersion._compare(self,other)
numpy.NumpyVersion._compare_pre_release(self,other)
numpy.NumpyVersion._compare_version(self,other)
numpy.lib._version.NumpyVersion(self,vstring)
numpy.lib._version.NumpyVersion.__eq__(self,other)
numpy.lib._version.NumpyVersion.__ge__(self,other)
numpy.lib._version.NumpyVersion.__gt__(self,other)
numpy.lib._version.NumpyVersion.__init__(self,vstring)
numpy.lib._version.NumpyVersion.__le__(self,other)
numpy.lib._version.NumpyVersion.__lt__(self,other)
numpy.lib._version.NumpyVersion.__ne__(self,other)
numpy.lib._version.NumpyVersion.__repr__(self)
numpy.lib._version.NumpyVersion._compare(self,other)
numpy.lib._version.NumpyVersion._compare_pre_release(self,other)
numpy.lib._version.NumpyVersion._compare_version(self,other)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/_version.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/type_check.py----------------------------------------
A:numpy.lib.type_check.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib.type_check.intersection->set((t for t in typecodes if t in typeset))
A:numpy.lib.type_check.ax->asanyarray(x)
A:numpy.lib.type_check.res->zeros(ax.shape, bool)
A:numpy.lib.type_check.f->numpy.core.getlimits.finfo(a.dtype.type)
A:numpy.lib.type_check.x->numpy.core.numeric.array(x, subok=True, copy=copy)
A:numpy.lib.type_check.iscomplex->issubclass(xtype, _nx.complexfloating)
A:numpy.lib.type_check.(maxf, minf)->_getmaxmin(x.real.dtype)
A:numpy.lib.type_check.idx_nan->isnan(d)
A:numpy.lib.type_check.idx_posinf->isposinf(d)
A:numpy.lib.type_check.idx_neginf->isneginf(d)
A:numpy.lib.type_check.a->asanyarray(a)
A:numpy.lib.type_check.p->array_precision.get(t, None)
A:numpy.lib.type_check.precision->max(precision, p)
numpy._asfarray_dispatcher(a,dtype=None)
numpy._asscalar_dispatcher(a)
numpy._common_type_dispatcher(*arrays)
numpy._getmaxmin(t)
numpy._imag_dispatcher(val)
numpy._is_type_dispatcher(x)
numpy._nan_to_num_dispatcher(x,copy=None,nan=None,posinf=None,neginf=None)
numpy._real_dispatcher(val)
numpy._real_if_close_dispatcher(a,tol=None)
numpy.asfarray(a,dtype=_nx.float_)
numpy.asscalar(a)
numpy.common_type(*arrays)
numpy.imag(val)
numpy.iscomplex(x)
numpy.iscomplexobj(x)
numpy.isreal(x)
numpy.isrealobj(x)
numpy.lib.type_check._asfarray_dispatcher(a,dtype=None)
numpy.lib.type_check._asscalar_dispatcher(a)
numpy.lib.type_check._common_type_dispatcher(*arrays)
numpy.lib.type_check._getmaxmin(t)
numpy.lib.type_check._imag_dispatcher(val)
numpy.lib.type_check._is_type_dispatcher(x)
numpy.lib.type_check._nan_to_num_dispatcher(x,copy=None,nan=None,posinf=None,neginf=None)
numpy.lib.type_check._real_dispatcher(val)
numpy.lib.type_check._real_if_close_dispatcher(a,tol=None)
numpy.lib.type_check.asfarray(a,dtype=_nx.float_)
numpy.lib.type_check.asscalar(a)
numpy.lib.type_check.common_type(*arrays)
numpy.lib.type_check.imag(val)
numpy.lib.type_check.iscomplex(x)
numpy.lib.type_check.iscomplexobj(x)
numpy.lib.type_check.isreal(x)
numpy.lib.type_check.isrealobj(x)
numpy.lib.type_check.mintypecode(typechars,typeset='GDFgdf',default='d')
numpy.lib.type_check.nan_to_num(x,copy=True,nan=0.0,posinf=None,neginf=None)
numpy.lib.type_check.real(val)
numpy.lib.type_check.real_if_close(a,tol=100)
numpy.lib.type_check.typename(char)
numpy.mintypecode(typechars,typeset='GDFgdf',default='d')
numpy.nan_to_num(x,copy=True,nan=0.0,posinf=None,neginf=None)
numpy.real(val)
numpy.real_if_close(a,tol=100)
numpy.typename(char)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/type_check.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/ufunclike.py----------------------------------------
A:numpy.lib.ufunclike.out->kwargs.pop('y')
A:numpy.lib.ufunclike.res->numpy.core.numeric.floor(x, out=res, where=nx.greater_equal(x, 0))
A:numpy.lib.ufunclike.is_inf->numpy.core.numeric.isinf(x)
A:numpy.lib.ufunclike.signbit->numpy.core.numeric.signbit(x)
numpy._deprecate_out_named_y(f)
numpy._dispatcher(x,out=None)
numpy._fix_and_maybe_deprecate_out_named_y(f)
numpy._fix_out_named_y(f)
numpy.fix(x,out=None)
numpy.isneginf(x,out=None)
numpy.isposinf(x,out=None)
numpy.lib.ufunclike._deprecate_out_named_y(f)
numpy.lib.ufunclike._dispatcher(x,out=None)
numpy.lib.ufunclike._fix_and_maybe_deprecate_out_named_y(f)
numpy.lib.ufunclike._fix_out_named_y(f)
numpy.lib.ufunclike.fix(x,out=None)
numpy.lib.ufunclike.isneginf(x,out=None)
numpy.lib.ufunclike.isposinf(x,out=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/ufunclike.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/scimath.py----------------------------------------
A:numpy.lib.scimath._ln2->numpy.core.numeric.log(2.0)
A:numpy.lib.scimath.x->_fix_real_abs_gt_1(x)
A:numpy.lib.scimath.n->_fix_real_lt_zero(n)
A:numpy.lib.scimath.p->_fix_int_lt_zero(p)
numpy.lib.scimath._fix_int_lt_zero(x)
numpy.lib.scimath._fix_real_abs_gt_1(x)
numpy.lib.scimath._fix_real_lt_zero(x)
numpy.lib.scimath._logn_dispatcher(n,x)
numpy.lib.scimath._power_dispatcher(x,p)
numpy.lib.scimath._tocomplex(arr)
numpy.lib.scimath._unary_dispatcher(x)
numpy.lib.scimath.arccos(x)
numpy.lib.scimath.arcsin(x)
numpy.lib.scimath.arctanh(x)
numpy.lib.scimath.log(x)
numpy.lib.scimath.log10(x)
numpy.lib.scimath.log2(x)
numpy.lib.scimath.logn(n,x)
numpy.lib.scimath.power(x,p)
numpy.lib.scimath.sqrt(x)
numpy.scimath._fix_int_lt_zero(x)
numpy.scimath._fix_real_abs_gt_1(x)
numpy.scimath._fix_real_lt_zero(x)
numpy.scimath._logn_dispatcher(n,x)
numpy.scimath._power_dispatcher(x,p)
numpy.scimath._tocomplex(arr)
numpy.scimath._unary_dispatcher(x)
numpy.scimath.arccos(x)
numpy.scimath.arcsin(x)
numpy.scimath.arctanh(x)
numpy.scimath.log(x)
numpy.scimath.log10(x)
numpy.scimath.log2(x)
numpy.scimath.logn(n,x)
numpy.scimath.power(x,p)
numpy.scimath.sqrt(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/scimath.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/user_array.py----------------------------------------
A:numpy.lib.user_array.self.array->array(data, dtype, copy=copy)
A:numpy.lib.user_array.self.array[index]->asarray(value, self.dtype)
A:numpy.lib.user_array.temp->reshape(arange(10000), (100, 100))
A:numpy.lib.user_array.ua->container(temp)
numpy.lib.user_array.container(self,data,dtype=None,copy=True)
numpy.lib.user_array.container.__abs__(self)
numpy.lib.user_array.container.__add__(self,other)
numpy.lib.user_array.container.__and__(self,other)
numpy.lib.user_array.container.__array__(self,t=None)
numpy.lib.user_array.container.__array_wrap__(self,*args)
numpy.lib.user_array.container.__complex__(self)
numpy.lib.user_array.container.__div__(self,other)
numpy.lib.user_array.container.__divmod__(self,other)
numpy.lib.user_array.container.__eq__(self,other)
numpy.lib.user_array.container.__float__(self)
numpy.lib.user_array.container.__ge__(self,other)
numpy.lib.user_array.container.__getattr__(self,attr)
numpy.lib.user_array.container.__getitem__(self,index)
numpy.lib.user_array.container.__gt__(self,other)
numpy.lib.user_array.container.__hex__(self)
numpy.lib.user_array.container.__iadd__(self,other)
numpy.lib.user_array.container.__iand__(self,other)
numpy.lib.user_array.container.__idiv__(self,other)
numpy.lib.user_array.container.__ilshift__(self,other)
numpy.lib.user_array.container.__imod__(self,other)
numpy.lib.user_array.container.__imul__(self,other)
numpy.lib.user_array.container.__init__(self,data,dtype=None,copy=True)
numpy.lib.user_array.container.__int__(self)
numpy.lib.user_array.container.__invert__(self)
numpy.lib.user_array.container.__ior__(self,other)
numpy.lib.user_array.container.__ipow__(self,other)
numpy.lib.user_array.container.__irshift__(self,other)
numpy.lib.user_array.container.__isub__(self,other)
numpy.lib.user_array.container.__ixor__(self,other)
numpy.lib.user_array.container.__le__(self,other)
numpy.lib.user_array.container.__len__(self)
numpy.lib.user_array.container.__lshift__(self,other)
numpy.lib.user_array.container.__lt__(self,other)
numpy.lib.user_array.container.__mod__(self,other)
numpy.lib.user_array.container.__mul__(self,other)
numpy.lib.user_array.container.__ne__(self,other)
numpy.lib.user_array.container.__neg__(self)
numpy.lib.user_array.container.__oct__(self)
numpy.lib.user_array.container.__or__(self,other)
numpy.lib.user_array.container.__pos__(self)
numpy.lib.user_array.container.__pow__(self,other)
numpy.lib.user_array.container.__rand__(self,other)
numpy.lib.user_array.container.__rdiv__(self,other)
numpy.lib.user_array.container.__rdivmod__(self,other)
numpy.lib.user_array.container.__repr__(self)
numpy.lib.user_array.container.__rlshift__(self,other)
numpy.lib.user_array.container.__rmod__(self,other)
numpy.lib.user_array.container.__ror__(self,other)
numpy.lib.user_array.container.__rpow__(self,other)
numpy.lib.user_array.container.__rrshift__(self,other)
numpy.lib.user_array.container.__rshift__(self,other)
numpy.lib.user_array.container.__rsub__(self,other)
numpy.lib.user_array.container.__rxor__(self,other)
numpy.lib.user_array.container.__setattr__(self,attr,value)
numpy.lib.user_array.container.__setitem__(self,index,value)
numpy.lib.user_array.container.__sub__(self,other)
numpy.lib.user_array.container.__xor__(self,other)
numpy.lib.user_array.container._rc(self,a)
numpy.lib.user_array.container._scalarfunc(self,func)
numpy.lib.user_array.container.astype(self,typecode)
numpy.lib.user_array.container.byteswap(self)
numpy.lib.user_array.container.copy(self)
numpy.lib.user_array.container.tobytes(self)
numpy.lib.user_array.container.tostring(self)
numpy.user_array.container(self,data,dtype=None,copy=True)
numpy.user_array.container.__abs__(self)
numpy.user_array.container.__add__(self,other)
numpy.user_array.container.__and__(self,other)
numpy.user_array.container.__array__(self,t=None)
numpy.user_array.container.__array_wrap__(self,*args)
numpy.user_array.container.__complex__(self)
numpy.user_array.container.__div__(self,other)
numpy.user_array.container.__divmod__(self,other)
numpy.user_array.container.__eq__(self,other)
numpy.user_array.container.__float__(self)
numpy.user_array.container.__ge__(self,other)
numpy.user_array.container.__getattr__(self,attr)
numpy.user_array.container.__getitem__(self,index)
numpy.user_array.container.__gt__(self,other)
numpy.user_array.container.__hex__(self)
numpy.user_array.container.__iadd__(self,other)
numpy.user_array.container.__iand__(self,other)
numpy.user_array.container.__idiv__(self,other)
numpy.user_array.container.__ilshift__(self,other)
numpy.user_array.container.__imod__(self,other)
numpy.user_array.container.__imul__(self,other)
numpy.user_array.container.__int__(self)
numpy.user_array.container.__invert__(self)
numpy.user_array.container.__ior__(self,other)
numpy.user_array.container.__ipow__(self,other)
numpy.user_array.container.__irshift__(self,other)
numpy.user_array.container.__isub__(self,other)
numpy.user_array.container.__ixor__(self,other)
numpy.user_array.container.__le__(self,other)
numpy.user_array.container.__len__(self)
numpy.user_array.container.__lshift__(self,other)
numpy.user_array.container.__lt__(self,other)
numpy.user_array.container.__mod__(self,other)
numpy.user_array.container.__mul__(self,other)
numpy.user_array.container.__ne__(self,other)
numpy.user_array.container.__neg__(self)
numpy.user_array.container.__oct__(self)
numpy.user_array.container.__or__(self,other)
numpy.user_array.container.__pos__(self)
numpy.user_array.container.__pow__(self,other)
numpy.user_array.container.__rand__(self,other)
numpy.user_array.container.__rdiv__(self,other)
numpy.user_array.container.__rdivmod__(self,other)
numpy.user_array.container.__repr__(self)
numpy.user_array.container.__rlshift__(self,other)
numpy.user_array.container.__rmod__(self,other)
numpy.user_array.container.__ror__(self,other)
numpy.user_array.container.__rpow__(self,other)
numpy.user_array.container.__rrshift__(self,other)
numpy.user_array.container.__rshift__(self,other)
numpy.user_array.container.__rsub__(self,other)
numpy.user_array.container.__rxor__(self,other)
numpy.user_array.container.__setattr__(self,attr,value)
numpy.user_array.container.__setitem__(self,index,value)
numpy.user_array.container.__sub__(self,other)
numpy.user_array.container.__xor__(self,other)
numpy.user_array.container._rc(self,a)
numpy.user_array.container._scalarfunc(self,func)
numpy.user_array.container.astype(self,typecode)
numpy.user_array.container.byteswap(self)
numpy.user_array.container.copy(self)
numpy.user_array.container.tobytes(self)
numpy.user_array.container.tostring(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/nanfunctions.py----------------------------------------
A:numpy.lib.nanfunctions.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib.nanfunctions.y->numpy.invert(y, out=y)
A:numpy.lib.nanfunctions.a->numpy.asanyarray(a)
A:numpy.lib.nanfunctions.mask->numpy.all(mask, axis=axis)
A:numpy.lib.nanfunctions.c->numpy.isnan(arr1d)
A:numpy.lib.nanfunctions.arr1d->arr1d.copy().copy()
A:numpy.lib.nanfunctions.res->numpy.argmax(a, axis=axis)
A:numpy.lib.nanfunctions.(a, mask)->_replace_nan(a, 1)
A:numpy.lib.nanfunctions.(arr, mask)->_replace_nan(a, 0)
A:numpy.lib.nanfunctions.dtype->numpy.dtype(dtype)
A:numpy.lib.nanfunctions.cnt->cnt.squeeze(axis).squeeze(axis)
A:numpy.lib.nanfunctions.tot->numpy.sum(arr, axis=axis, dtype=dtype, out=out, keepdims=keepdims)
A:numpy.lib.nanfunctions.avg->_divide_by_count(avg, cnt)
A:numpy.lib.nanfunctions.(arr1d_parsed, overwrite_input)->_remove_nan_1d(arr1d, overwrite_input=overwrite_input)
A:numpy.lib.nanfunctions.part->numpy.asanyarray(a).ravel()
A:numpy.lib.nanfunctions.out[...]->numpy.ma.median(a, axis=axis, overwrite_input=overwrite_input).filled(fill_value)
A:numpy.lib.nanfunctions.result->numpy.moveaxis(result, axis, 0)
A:numpy.lib.nanfunctions.m->numpy.ma.median(a, axis=axis, overwrite_input=overwrite_input)
A:numpy.lib.nanfunctions.(r, k)->numpy.lib.function_base._ureduce(a, func=_nanquantile_ureduce_func, q=q, axis=axis, out=out, overwrite_input=overwrite_input, interpolation=interpolation)
A:numpy.lib.nanfunctions.q->numpy.asanyarray(q)
A:numpy.lib.nanfunctions.(arr1d, overwrite_input)->_remove_nan_1d(arr1d, overwrite_input=overwrite_input)
A:numpy.lib.nanfunctions.arr->_copyto(arr, 0, mask)
A:numpy.lib.nanfunctions.sqr->numpy.multiply(arr, arr, out=arr)
A:numpy.lib.nanfunctions.var->nanvar(a, axis=axis, dtype=dtype, out=out, ddof=ddof, keepdims=keepdims)
A:numpy.lib.nanfunctions.std->nanvar(a, axis=axis, dtype=dtype, out=out, ddof=ddof, keepdims=keepdims).dtype.type(np.sqrt(var))
numpy._copyto(a,val,mask)
numpy._divide_by_count(a,b,out=None)
numpy._nan_mask(a,out=None)
numpy._nanargmax_dispatcher(a,axis=None)
numpy._nanargmin_dispatcher(a,axis=None)
numpy._nancumprod_dispatcher(a,axis=None,dtype=None,out=None)
numpy._nancumsum_dispatcher(a,axis=None,dtype=None,out=None)
numpy._nanmax_dispatcher(a,axis=None,out=None,keepdims=None)
numpy._nanmean_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None)
numpy._nanmedian(a,axis=None,out=None,overwrite_input=False)
numpy._nanmedian1d(arr1d,overwrite_input=False)
numpy._nanmedian_dispatcher(a,axis=None,out=None,overwrite_input=None,keepdims=None)
numpy._nanmedian_small(a,axis=None,out=None,overwrite_input=False)
numpy._nanmin_dispatcher(a,axis=None,out=None,keepdims=None)
numpy._nanpercentile_dispatcher(a,q,axis=None,out=None,overwrite_input=None,interpolation=None,keepdims=None)
numpy._nanprod_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None)
numpy._nanquantile_1d(arr1d,q,overwrite_input=False,interpolation='linear')
numpy._nanquantile_dispatcher(a,q,axis=None,out=None,overwrite_input=None,interpolation=None,keepdims=None)
numpy._nanquantile_unchecked(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear',keepdims=np._NoValue)
numpy._nanquantile_ureduce_func(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear')
numpy._nanstd_dispatcher(a,axis=None,dtype=None,out=None,ddof=None,keepdims=None)
numpy._nansum_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None)
numpy._nanvar_dispatcher(a,axis=None,dtype=None,out=None,ddof=None,keepdims=None)
numpy._remove_nan_1d(arr1d,overwrite_input=False)
numpy._replace_nan(a,val)
numpy.lib.nanfunctions._copyto(a,val,mask)
numpy.lib.nanfunctions._divide_by_count(a,b,out=None)
numpy.lib.nanfunctions._nan_mask(a,out=None)
numpy.lib.nanfunctions._nanargmax_dispatcher(a,axis=None)
numpy.lib.nanfunctions._nanargmin_dispatcher(a,axis=None)
numpy.lib.nanfunctions._nancumprod_dispatcher(a,axis=None,dtype=None,out=None)
numpy.lib.nanfunctions._nancumsum_dispatcher(a,axis=None,dtype=None,out=None)
numpy.lib.nanfunctions._nanmax_dispatcher(a,axis=None,out=None,keepdims=None)
numpy.lib.nanfunctions._nanmean_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None)
numpy.lib.nanfunctions._nanmedian(a,axis=None,out=None,overwrite_input=False)
numpy.lib.nanfunctions._nanmedian1d(arr1d,overwrite_input=False)
numpy.lib.nanfunctions._nanmedian_dispatcher(a,axis=None,out=None,overwrite_input=None,keepdims=None)
numpy.lib.nanfunctions._nanmedian_small(a,axis=None,out=None,overwrite_input=False)
numpy.lib.nanfunctions._nanmin_dispatcher(a,axis=None,out=None,keepdims=None)
numpy.lib.nanfunctions._nanpercentile_dispatcher(a,q,axis=None,out=None,overwrite_input=None,interpolation=None,keepdims=None)
numpy.lib.nanfunctions._nanprod_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None)
numpy.lib.nanfunctions._nanquantile_1d(arr1d,q,overwrite_input=False,interpolation='linear')
numpy.lib.nanfunctions._nanquantile_dispatcher(a,q,axis=None,out=None,overwrite_input=None,interpolation=None,keepdims=None)
numpy.lib.nanfunctions._nanquantile_unchecked(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear',keepdims=np._NoValue)
numpy.lib.nanfunctions._nanquantile_ureduce_func(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear')
numpy.lib.nanfunctions._nanstd_dispatcher(a,axis=None,dtype=None,out=None,ddof=None,keepdims=None)
numpy.lib.nanfunctions._nansum_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None)
numpy.lib.nanfunctions._nanvar_dispatcher(a,axis=None,dtype=None,out=None,ddof=None,keepdims=None)
numpy.lib.nanfunctions._remove_nan_1d(arr1d,overwrite_input=False)
numpy.lib.nanfunctions._replace_nan(a,val)
numpy.lib.nanfunctions.nanargmax(a,axis=None)
numpy.lib.nanfunctions.nanargmin(a,axis=None)
numpy.lib.nanfunctions.nancumprod(a,axis=None,dtype=None,out=None)
numpy.lib.nanfunctions.nancumsum(a,axis=None,dtype=None,out=None)
numpy.lib.nanfunctions.nanmax(a,axis=None,out=None,keepdims=np._NoValue)
numpy.lib.nanfunctions.nanmean(a,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.lib.nanfunctions.nanmedian(a,axis=None,out=None,overwrite_input=False,keepdims=np._NoValue)
numpy.lib.nanfunctions.nanmin(a,axis=None,out=None,keepdims=np._NoValue)
numpy.lib.nanfunctions.nanpercentile(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear',keepdims=np._NoValue)
numpy.lib.nanfunctions.nanprod(a,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.lib.nanfunctions.nanquantile(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear',keepdims=np._NoValue)
numpy.lib.nanfunctions.nanstd(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue)
numpy.lib.nanfunctions.nansum(a,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.lib.nanfunctions.nanvar(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue)
numpy.nanargmax(a,axis=None)
numpy.nanargmin(a,axis=None)
numpy.nancumprod(a,axis=None,dtype=None,out=None)
numpy.nancumsum(a,axis=None,dtype=None,out=None)
numpy.nanmax(a,axis=None,out=None,keepdims=np._NoValue)
numpy.nanmean(a,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.nanmedian(a,axis=None,out=None,overwrite_input=False,keepdims=np._NoValue)
numpy.nanmin(a,axis=None,out=None,keepdims=np._NoValue)
numpy.nanpercentile(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear',keepdims=np._NoValue)
numpy.nanprod(a,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.nanquantile(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear',keepdims=np._NoValue)
numpy.nanstd(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue)
numpy.nansum(a,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.nanvar(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/nanfunctions.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/function_base.py----------------------------------------
A:numpy.lib.function_base.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.lib.function_base.axes->numpy.core.numeric.normalize_axis_tuple(axis, N)
A:numpy.lib.function_base.m->numpy.asarray(m)
A:numpy.lib.function_base.axes_list->arange(0, m.ndim)
A:numpy.lib.function_base.axis->normalize_axis_index(axis, ndim)
A:numpy.lib.function_base.indexer->tuple(indexer)
A:numpy.lib.function_base.a->asarray(a)
A:numpy.lib.function_base.avg->asarray(a).mean(axis)
A:numpy.lib.function_base.scl->numpy.broadcast_to(scl, avg.shape).copy()
A:numpy.lib.function_base.wgt->wgt.swapaxes(-1, axis).swapaxes(-1, axis)
A:numpy.lib.function_base.result_dtype->numpy.result_type(a.dtype, wgt.dtype)
A:numpy.lib.function_base.x->numpy.core.numeric.asarray(x)
A:numpy.lib.function_base.n2->len(funclist)
A:numpy.lib.function_base.condlist->numpy.broadcast_arrays(*condlist)
A:numpy.lib.function_base.n->numpy.array(False, dtype=bool)
A:numpy.lib.function_base.y->numpy.asarray(y)
A:numpy.lib.function_base.y[cond]->func(vals, *args, **kw)
A:numpy.lib.function_base.intermediate_dtype->numpy.result_type(*choicelist)
A:numpy.lib.function_base.default_array->numpy.asarray(default)
A:numpy.lib.function_base.dtype->numpy.result_type(m, y, np.float64)
A:numpy.lib.function_base.choicelist->numpy.broadcast_arrays(*choicelist)
A:numpy.lib.function_base.result->numpy.full(result_shape, choicelist[-1], dtype)
A:numpy.lib.function_base.f->f.astype(np.float64).astype(np.float64)
A:numpy.lib.function_base.len_axes->len(axes)
A:numpy.lib.function_base.dx->list(varargs)
A:numpy.lib.function_base.distances->distances.astype(np.float64).astype(np.float64)
A:numpy.lib.function_base.diffx->numpy.diff(distances)
A:numpy.lib.function_base.otype->numpy.dtype(otype.name.replace('datetime', 'timedelta'))
A:numpy.lib.function_base.out->numpy.empty_like(f, dtype=otype)
A:numpy.lib.function_base.slice1[axis]->slice(1, None)
A:numpy.lib.function_base.slice2[axis]->slice(None, -1)
A:numpy.lib.function_base.slice3[axis]->slice(None)
A:numpy.lib.function_base.slice4[axis]->slice(None)
A:numpy.lib.function_base.shape->list(a.shape)
A:numpy.lib.function_base.prepend->numpy.broadcast_to(prepend, tuple(shape))
A:numpy.lib.function_base.append->numpy.broadcast_to(append, tuple(shape))
A:numpy.lib.function_base.slice1->tuple(slice1)
A:numpy.lib.function_base.slice2->tuple(slice2)
A:numpy.lib.function_base.fp->numpy.concatenate((fp[-1:], fp, fp[0:1]))
A:numpy.lib.function_base.period->abs(period)
A:numpy.lib.function_base.xp->numpy.concatenate((xp[-1:] - period, xp, xp[0:1] + period))
A:numpy.lib.function_base.asort_xp->numpy.argsort(xp)
A:numpy.lib.function_base.z->asanyarray(z)
A:numpy.lib.function_base.p->asarray(p)
A:numpy.lib.function_base.dd->diff(p, axis=axis)
A:numpy.lib.function_base.(interval_high, rem)->divmod(period, 2)
A:numpy.lib.function_base.up->array(p, copy=True, dtype=dtype)
A:numpy.lib.function_base.b->array(a, subok=True, copy=True)
A:numpy.lib.function_base.trim->trim.upper().upper()
A:numpy.lib.function_base.last->len(filt)
A:numpy.lib.function_base._CORE_DIMENSION_LIST->'(?:{0:}(?:,{0:})*)?'.format(_DIMENSION_NAME)
A:numpy.lib.function_base._ARGUMENT->'\\({}\\)'.format(_CORE_DIMENSION_LIST)
A:numpy.lib.function_base._ARGUMENT_LIST->'{0:}(?:,{0:})*'.format(_ARGUMENT)
A:numpy.lib.function_base._SIGNATURE->'^{0:}->{0:}$'.format(_ARGUMENT_LIST)
A:numpy.lib.function_base.num_core_dims->len(core_dims)
A:numpy.lib.function_base.dummy_array->numpy.lib.stride_tricks.as_strided(0, arg.shape[:ndim])
A:numpy.lib.function_base.broadcast_shape->numpy.lib.stride_tricks._broadcast_shape(*broadcast_args)
A:numpy.lib.function_base.shapes->_calculate_shapes(broadcast_shape, dim_sizes, list_of_core_dims)
A:numpy.lib.function_base.arrays->tuple((np.empty(shape, dtype=dtype) for (shape, dtype) in zip(shapes, dtypes)))
A:numpy.lib.function_base.otypes->''.join([asarray(outputs[_k]).dtype.char for _k in range(nout)])
A:numpy.lib.function_base.excluded->set()
A:numpy.lib.function_base.self.excluded->set(excluded)
A:numpy.lib.function_base.self._in_and_out_core_dims->_parse_gufunc_signature(signature)
A:numpy.lib.function_base.nargs->len(args)
A:numpy.lib.function_base.the_args->list(args)
A:numpy.lib.function_base.nin->len(args)
A:numpy.lib.function_base.nout->len(output_core_dims)
A:numpy.lib.function_base.ufunc->frompyfunc(_func, len(args), nout)
A:numpy.lib.function_base.outputs->_create_arrays(broadcast_shape, dim_sizes, output_core_dims, otypes)
A:numpy.lib.function_base.res->tuple([asanyarray(x, dtype=t) for (x, t) in zip(outputs, otypes)])
A:numpy.lib.function_base.(ufunc, otypes)->self._get_ufunc_and_otypes(func=func, args=args)
A:numpy.lib.function_base.args->tuple((asanyarray(arg) for arg in args))
A:numpy.lib.function_base.(broadcast_shape, dim_sizes)->_parse_input_dimensions(args, input_core_dims)
A:numpy.lib.function_base.input_shapes->_calculate_shapes(broadcast_shape, dim_sizes, input_core_dims)
A:numpy.lib.function_base.results->func(*(arg[index] for arg in args))
A:numpy.lib.function_base.X->numpy.concatenate((X, y), axis=0)
A:numpy.lib.function_base.fweights->numpy.asarray(fweights, dtype=float)
A:numpy.lib.function_base.aweights->numpy.asarray(aweights, dtype=float)
A:numpy.lib.function_base.(avg, w_sum)->average(X, axis=1, weights=w, returned=True)
A:numpy.lib.function_base.c->cov(x, y, rowvar, dtype=dtype)
A:numpy.lib.function_base.d->numpy.asarray(d)
A:numpy.lib.function_base.stddev->sqrt(d.real)
A:numpy.lib.function_base.keepdim->tuple(keepdim)
A:numpy.lib.function_base.nkeep->len(keep)
A:numpy.lib.function_base.r->asarray(a).dtype.type(np.nan)
A:numpy.lib.function_base.(r, k)->_ureduce(a, func=_quantile_ureduce_func, q=q, axis=axis, out=out, overwrite_input=overwrite_input, interpolation=interpolation)
A:numpy.lib.function_base.part->partition(a, kth, axis=axis)
A:numpy.lib.function_base.indexer[axis]->slice(index - 1, index + 1)
A:numpy.lib.function_base.rout->mean(part[indexer], axis=axis, out=out)
A:numpy.lib.function_base.q->numpy.asanyarray(q)
A:numpy.lib.function_base.diff_b_a->subtract(b, a)
A:numpy.lib.function_base.lerp_interpolation->asanyarray(add(a, diff_b_a * t, out=out))
A:numpy.lib.function_base.ap->numpy.moveaxis(ap, axis, 0)
A:numpy.lib.function_base.indices->indices.astype(intp).astype(intp)
A:numpy.lib.function_base.indices_below->not_scalar(floor(indices)).astype(intp)
A:numpy.lib.function_base.indices_above->not_scalar(indices_below + 1)
A:numpy.lib.function_base.weights_above->not_scalar(indices - indices_below).reshape(weights_shape)
A:numpy.lib.function_base.x_below->take(ap, indices_below, axis=0)
A:numpy.lib.function_base.x_above->take(ap, indices_above, axis=0)
A:numpy.lib.function_base.r[..., n]->asarray(a).dtype.type(np.nan)
A:numpy.lib.function_base.ret->numpy.core.umath.add.reduce(d * (y[tuple(slice1)] + y[tuple(slice2)]) / 2.0, axis)
A:numpy.lib.function_base.ndim->len(xi)
A:numpy.lib.function_base.output->numpy.broadcast_arrays(*output, subok=True)
A:numpy.lib.function_base.arr->arr.ravel().ravel()
A:numpy.lib.function_base.newshape->list(arr.shape)
A:numpy.lib.function_base.(start, stop, step)->obj.astype(intp).indices(N)
A:numpy.lib.function_base.xr->range(start, stop, step)
A:numpy.lib.function_base.numtodel->len(xr)
A:numpy.lib.function_base.new->empty(newshape, arr.dtype, arrorder)
A:numpy.lib.function_base.slobj[axis]->slice(index + numnew, None)
A:numpy.lib.function_base.slobj2[axis]->slice(index, None)
A:numpy.lib.function_base.keep->ones(N, dtype=bool)
A:numpy.lib.function_base.obj->obj.astype(intp).astype(intp)
A:numpy.lib.function_base.index->indices.astype(intp).astype(intp).item()
A:numpy.lib.function_base.values->ravel(values)
A:numpy.lib.function_base.numnew->len(indices)
A:numpy.lib.function_base.order->indices.astype(intp).astype(intp).argsort(kind='mergesort')
A:numpy.lib.function_base.old_mask->ones(newshape[axis], dtype=bool)
A:numpy.lib.function_base.bins->numpy.core.numeric.asarray(bins)
A:numpy.lib.function_base.mono->_monotonicity(bins)
numpy._angle_dispatcher(z,deg=None)
numpy._append_dispatcher(arr,values,axis=None)
numpy._average_dispatcher(a,axis=None,weights=None,returned=None)
numpy._calculate_shapes(broadcast_shape,dim_sizes,list_of_core_dims)
numpy._chbevl(x,vals)
numpy._copy_dispatcher(a,order=None,subok=None)
numpy._corrcoef_dispatcher(x,y=None,rowvar=None,bias=None,ddof=None,*,dtype=None)
numpy._cov_dispatcher(m,y=None,rowvar=None,bias=None,ddof=None,fweights=None,aweights=None,*,dtype=None)
numpy._create_arrays(broadcast_shape,dim_sizes,list_of_core_dims,dtypes)
numpy._delete_dispatcher(arr,obj,axis=None)
numpy._diff_dispatcher(a,n=None,axis=None,prepend=None,append=None)
numpy._digitize_dispatcher(x,bins,right=None)
numpy._extract_dispatcher(condition,arr)
numpy._flip_dispatcher(m,axis=None)
numpy._gradient_dispatcher(f,*varargs,axis=None,edge_order=None)
numpy._i0_1(x)
numpy._i0_2(x)
numpy._i0_dispatcher(x)
numpy._insert_dispatcher(arr,obj,values,axis=None)
numpy._interp_dispatcher(x,xp,fp,left=None,right=None,period=None)
numpy._lerp(a,b,t,out=None)
numpy._median(a,axis=None,out=None,overwrite_input=False)
numpy._median_dispatcher(a,axis=None,out=None,overwrite_input=None,keepdims=None)
numpy._meshgrid_dispatcher(*xi,copy=None,sparse=None,indexing=None)
numpy._msort_dispatcher(a)
numpy._parse_gufunc_signature(signature)
numpy._parse_input_dimensions(args,input_core_dims)
numpy._percentile_dispatcher(a,q,axis=None,out=None,overwrite_input=None,interpolation=None,keepdims=None)
numpy._piecewise_dispatcher(x,condlist,funclist,*args,**kw)
numpy._place_dispatcher(arr,mask,vals)
numpy._quantile_dispatcher(a,q,axis=None,out=None,overwrite_input=None,interpolation=None,keepdims=None)
numpy._quantile_is_valid(q)
numpy._quantile_unchecked(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear',keepdims=False)
numpy._quantile_ureduce_func(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear',keepdims=False)
numpy._rot90_dispatcher(m,k=None,axes=None)
numpy._select_dispatcher(condlist,choicelist,default=None)
numpy._sinc_dispatcher(x)
numpy._sort_complex(a)
numpy._trapz_dispatcher(y,x=None,dx=None,axis=None)
numpy._trim_zeros(filt,trim=None)
numpy._unwrap_dispatcher(p,discont=None,axis=None,*,period=None)
numpy._update_dim_sizes(dim_sizes,arg,core_dims)
numpy._ureduce(a,func,**kwargs)
numpy.angle(z,deg=False)
numpy.append(arr,values,axis=None)
numpy.asarray_chkfinite(a,dtype=None,order=None)
numpy.average(a,axis=None,weights=None,returned=False)
numpy.bartlett(M)
numpy.blackman(M)
numpy.copy(a,order='K',subok=False)
numpy.corrcoef(x,y=None,rowvar=True,bias=np._NoValue,ddof=np._NoValue,*,dtype=None)
numpy.cov(m,y=None,rowvar=True,bias=False,ddof=None,fweights=None,aweights=None,*,dtype=None)
numpy.delete(arr,obj,axis=None)
numpy.diff(a,n=1,axis=-1,prepend=np._NoValue,append=np._NoValue)
numpy.digitize(x,bins,right=False)
numpy.disp(mesg,device=None,linefeed=True)
numpy.extract(condition,arr)
numpy.flip(m,axis=None)
numpy.gradient(f,*varargs,axis=None,edge_order=1)
numpy.hamming(M)
numpy.hanning(M)
numpy.i0(x)
numpy.insert(arr,obj,values,axis=None)
numpy.interp(x,xp,fp,left=None,right=None,period=None)
numpy.iterable(y)
numpy.kaiser(M,beta)
numpy.lib.function_base._angle_dispatcher(z,deg=None)
numpy.lib.function_base._append_dispatcher(arr,values,axis=None)
numpy.lib.function_base._average_dispatcher(a,axis=None,weights=None,returned=None)
numpy.lib.function_base._calculate_shapes(broadcast_shape,dim_sizes,list_of_core_dims)
numpy.lib.function_base._chbevl(x,vals)
numpy.lib.function_base._copy_dispatcher(a,order=None,subok=None)
numpy.lib.function_base._corrcoef_dispatcher(x,y=None,rowvar=None,bias=None,ddof=None,*,dtype=None)
numpy.lib.function_base._cov_dispatcher(m,y=None,rowvar=None,bias=None,ddof=None,fweights=None,aweights=None,*,dtype=None)
numpy.lib.function_base._create_arrays(broadcast_shape,dim_sizes,list_of_core_dims,dtypes)
numpy.lib.function_base._delete_dispatcher(arr,obj,axis=None)
numpy.lib.function_base._diff_dispatcher(a,n=None,axis=None,prepend=None,append=None)
numpy.lib.function_base._digitize_dispatcher(x,bins,right=None)
numpy.lib.function_base._extract_dispatcher(condition,arr)
numpy.lib.function_base._flip_dispatcher(m,axis=None)
numpy.lib.function_base._gradient_dispatcher(f,*varargs,axis=None,edge_order=None)
numpy.lib.function_base._i0_1(x)
numpy.lib.function_base._i0_2(x)
numpy.lib.function_base._i0_dispatcher(x)
numpy.lib.function_base._insert_dispatcher(arr,obj,values,axis=None)
numpy.lib.function_base._interp_dispatcher(x,xp,fp,left=None,right=None,period=None)
numpy.lib.function_base._lerp(a,b,t,out=None)
numpy.lib.function_base._median(a,axis=None,out=None,overwrite_input=False)
numpy.lib.function_base._median_dispatcher(a,axis=None,out=None,overwrite_input=None,keepdims=None)
numpy.lib.function_base._meshgrid_dispatcher(*xi,copy=None,sparse=None,indexing=None)
numpy.lib.function_base._msort_dispatcher(a)
numpy.lib.function_base._parse_gufunc_signature(signature)
numpy.lib.function_base._parse_input_dimensions(args,input_core_dims)
numpy.lib.function_base._percentile_dispatcher(a,q,axis=None,out=None,overwrite_input=None,interpolation=None,keepdims=None)
numpy.lib.function_base._piecewise_dispatcher(x,condlist,funclist,*args,**kw)
numpy.lib.function_base._place_dispatcher(arr,mask,vals)
numpy.lib.function_base._quantile_dispatcher(a,q,axis=None,out=None,overwrite_input=None,interpolation=None,keepdims=None)
numpy.lib.function_base._quantile_is_valid(q)
numpy.lib.function_base._quantile_unchecked(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear',keepdims=False)
numpy.lib.function_base._quantile_ureduce_func(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear',keepdims=False)
numpy.lib.function_base._rot90_dispatcher(m,k=None,axes=None)
numpy.lib.function_base._select_dispatcher(condlist,choicelist,default=None)
numpy.lib.function_base._sinc_dispatcher(x)
numpy.lib.function_base._sort_complex(a)
numpy.lib.function_base._trapz_dispatcher(y,x=None,dx=None,axis=None)
numpy.lib.function_base._trim_zeros(filt,trim=None)
numpy.lib.function_base._unwrap_dispatcher(p,discont=None,axis=None,*,period=None)
numpy.lib.function_base._update_dim_sizes(dim_sizes,arg,core_dims)
numpy.lib.function_base._ureduce(a,func,**kwargs)
numpy.lib.function_base.angle(z,deg=False)
numpy.lib.function_base.append(arr,values,axis=None)
numpy.lib.function_base.asarray_chkfinite(a,dtype=None,order=None)
numpy.lib.function_base.average(a,axis=None,weights=None,returned=False)
numpy.lib.function_base.bartlett(M)
numpy.lib.function_base.blackman(M)
numpy.lib.function_base.copy(a,order='K',subok=False)
numpy.lib.function_base.corrcoef(x,y=None,rowvar=True,bias=np._NoValue,ddof=np._NoValue,*,dtype=None)
numpy.lib.function_base.cov(m,y=None,rowvar=True,bias=False,ddof=None,fweights=None,aweights=None,*,dtype=None)
numpy.lib.function_base.delete(arr,obj,axis=None)
numpy.lib.function_base.diff(a,n=1,axis=-1,prepend=np._NoValue,append=np._NoValue)
numpy.lib.function_base.digitize(x,bins,right=False)
numpy.lib.function_base.disp(mesg,device=None,linefeed=True)
numpy.lib.function_base.extract(condition,arr)
numpy.lib.function_base.flip(m,axis=None)
numpy.lib.function_base.gradient(f,*varargs,axis=None,edge_order=1)
numpy.lib.function_base.hamming(M)
numpy.lib.function_base.hanning(M)
numpy.lib.function_base.i0(x)
numpy.lib.function_base.insert(arr,obj,values,axis=None)
numpy.lib.function_base.interp(x,xp,fp,left=None,right=None,period=None)
numpy.lib.function_base.iterable(y)
numpy.lib.function_base.kaiser(M,beta)
numpy.lib.function_base.median(a,axis=None,out=None,overwrite_input=False,keepdims=False)
numpy.lib.function_base.meshgrid(*xi,copy=True,sparse=False,indexing='xy')
numpy.lib.function_base.msort(a)
numpy.lib.function_base.percentile(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear',keepdims=False)
numpy.lib.function_base.piecewise(x,condlist,funclist,*args,**kw)
numpy.lib.function_base.place(arr,mask,vals)
numpy.lib.function_base.quantile(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear',keepdims=False)
numpy.lib.function_base.rot90(m,k=1,axes=(0,1))
numpy.lib.function_base.select(condlist,choicelist,default=0)
numpy.lib.function_base.sinc(x)
numpy.lib.function_base.sort_complex(a)
numpy.lib.function_base.trapz(y,x=None,dx=1.0,axis=-1)
numpy.lib.function_base.trim_zeros(filt,trim='fb')
numpy.lib.function_base.unwrap(p,discont=None,axis=-1,*,period=2*pi)
numpy.lib.function_base.vectorize(self,pyfunc,otypes=None,doc=None,excluded=None,cache=False,signature=None)
numpy.lib.function_base.vectorize.__init__(self,pyfunc,otypes=None,doc=None,excluded=None,cache=False,signature=None)
numpy.lib.function_base.vectorize._get_ufunc_and_otypes(self,func,args)
numpy.lib.function_base.vectorize._vectorize_call(self,func,args)
numpy.lib.function_base.vectorize._vectorize_call_with_signature(self,func,args)
numpy.median(a,axis=None,out=None,overwrite_input=False,keepdims=False)
numpy.meshgrid(*xi,copy=True,sparse=False,indexing='xy')
numpy.msort(a)
numpy.percentile(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear',keepdims=False)
numpy.piecewise(x,condlist,funclist,*args,**kw)
numpy.place(arr,mask,vals)
numpy.quantile(a,q,axis=None,out=None,overwrite_input=False,interpolation='linear',keepdims=False)
numpy.rot90(m,k=1,axes=(0,1))
numpy.select(condlist,choicelist,default=0)
numpy.sinc(x)
numpy.sort_complex(a)
numpy.trapz(y,x=None,dx=1.0,axis=-1)
numpy.trim_zeros(filt,trim='fb')
numpy.unwrap(p,discont=None,axis=-1,*,period=2*pi)
numpy.vectorize(self,pyfunc,otypes=None,doc=None,excluded=None,cache=False,signature=None)
numpy.vectorize._get_ufunc_and_otypes(self,func,args)
numpy.vectorize._vectorize_call(self,func,args)
numpy.vectorize._vectorize_call_with_signature(self,func,args)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/function_base.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/setup.py----------------------------------------
A:numpy.lib.setup.config->Configuration('lib', parent_package, top_path)
numpy.lib.setup.configuration(parent_package='',top_path=None)
numpy.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/format.py----------------------------------------
A:numpy.lib.format.magic_str->_read_bytes(fp, MAGIC_LEN, 'magic string')
A:numpy.lib.format.dt->numpy.dtype((descr_to_dtype(descr_str), shape))
A:numpy.lib.format.d['descr']->dtype_to_descr(array.dtype)
A:numpy.lib.format.header->_filter_header(header)
A:numpy.lib.format.msg->'Header length {} too big for version={}'.format(hlen, version)
A:numpy.lib.format.ret->_wrap_header(header, (2, 0))
A:numpy.lib.format.hinfo->_header_size_info.get(version)
A:numpy.lib.format.hlength_str->_read_bytes(fp, struct.calcsize(hlength_type), 'array header length')
A:numpy.lib.format.d->dict(descr=dtype_to_descr(dtype), fortran_order=fortran_order, shape=shape)
A:numpy.lib.format.keys->sorted(d.keys())
A:numpy.lib.format.dtype->numpy.dtype(dtype)
A:numpy.lib.format.buffersize->max(16 * 1024 ** 2 // array.itemsize, 1)
A:numpy.lib.format.version->read_magic(fp)
A:numpy.lib.format.(shape, fortran_order, dtype)->_read_array_header(fp, version)
A:numpy.lib.format.count->numpy.multiply.reduce(shape, dtype=numpy.int64)
A:numpy.lib.format.array->array.transpose().transpose()
A:numpy.lib.format.read_count->min(max_read_count, count - i)
A:numpy.lib.format.read_size->int(read_count * dtype.itemsize)
A:numpy.lib.format.data->bytes()
A:numpy.lib.format.array[i:i + read_count]->numpy.frombuffer(data, dtype=dtype, count=read_count)
A:numpy.lib.format.offset->fp.tell()
A:numpy.lib.format.marray->numpy.memmap(filename, dtype=dtype, shape=shape, order=order, mode=mode, offset=offset)
A:numpy.lib.format.r->fp.read(size - len(data))
numpy.format._check_version(version)
numpy.format._filter_header(s)
numpy.format._has_metadata(dt)
numpy.format._read_array_header(fp,version)
numpy.format._read_bytes(fp,size,error_template='ranoutofdata')
numpy.format._wrap_header(header,version)
numpy.format._wrap_header_guess_version(header)
numpy.format._write_array_header(fp,d,version=None)
numpy.format.descr_to_dtype(descr)
numpy.format.dtype_to_descr(dtype)
numpy.format.header_data_from_array_1_0(array)
numpy.format.magic(major,minor)
numpy.format.open_memmap(filename,mode='r+',dtype=None,shape=None,fortran_order=False,version=None)
numpy.format.read_array(fp,allow_pickle=False,pickle_kwargs=None)
numpy.format.read_array_header_1_0(fp)
numpy.format.read_array_header_2_0(fp)
numpy.format.read_magic(fp)
numpy.format.write_array(fp,array,version=None,allow_pickle=True,pickle_kwargs=None)
numpy.format.write_array_header_1_0(fp,d)
numpy.format.write_array_header_2_0(fp,d)
numpy.lib.format._check_version(version)
numpy.lib.format._filter_header(s)
numpy.lib.format._has_metadata(dt)
numpy.lib.format._read_array_header(fp,version)
numpy.lib.format._read_bytes(fp,size,error_template='ranoutofdata')
numpy.lib.format._wrap_header(header,version)
numpy.lib.format._wrap_header_guess_version(header)
numpy.lib.format._write_array_header(fp,d,version=None)
numpy.lib.format.descr_to_dtype(descr)
numpy.lib.format.dtype_to_descr(dtype)
numpy.lib.format.header_data_from_array_1_0(array)
numpy.lib.format.magic(major,minor)
numpy.lib.format.open_memmap(filename,mode='r+',dtype=None,shape=None,fortran_order=False,version=None)
numpy.lib.format.read_array(fp,allow_pickle=False,pickle_kwargs=None)
numpy.lib.format.read_array_header_1_0(fp)
numpy.lib.format.read_array_header_2_0(fp)
numpy.lib.format.read_magic(fp)
numpy.lib.format.write_array(fp,array,version=None,allow_pickle=True,pickle_kwargs=None)
numpy.lib.format.write_array_header_1_0(fp,d)
numpy.lib.format.write_array_header_2_0(fp,d)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/format.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/arrayterator.py----------------------------------------
A:numpy.lib.arrayterator.length->len(fixed)
A:numpy.lib.arrayterator.index->tuple(fixed)
A:numpy.lib.arrayterator.out->self.__class__(self.var, self.buf_size)
A:numpy.lib.arrayterator.out.stop[i]->min(stop, out.stop[i])
A:numpy.lib.arrayterator.slice_->tuple((slice(*t) for t in zip(start, stop, step)))
A:numpy.lib.arrayterator.stop[i]->min(self.stop[i], stop[i])
numpy.Arrayterator(self,var,buf_size=None)
numpy.Arrayterator.__array__(self)
numpy.Arrayterator.__getattr__(self,attr)
numpy.Arrayterator.__getitem__(self,index)
numpy.Arrayterator.__iter__(self)
numpy.Arrayterator.flat(self)
numpy.Arrayterator.shape(self)
numpy.lib.arrayterator.Arrayterator(self,var,buf_size=None)
numpy.lib.arrayterator.Arrayterator.__array__(self)
numpy.lib.arrayterator.Arrayterator.__getattr__(self,attr)
numpy.lib.arrayterator.Arrayterator.__getitem__(self,index)
numpy.lib.arrayterator.Arrayterator.__init__(self,var,buf_size=None)
numpy.lib.arrayterator.Arrayterator.__iter__(self)
numpy.lib.arrayterator.Arrayterator.flat(self)
numpy.lib.arrayterator.Arrayterator.shape(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/arrayterator.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_arraypad.py----------------------------------------
A:numpy.lib.tests.test_arraypad.expected->numpy.pad(a, ((1, 2), (1, 2), (1, 2)), 'edge')
A:numpy.lib.tests.test_arraypad.result->numpy.pad(arr, 1, mode=mode)
A:numpy.lib.tests.test_arraypad.obj->object()
A:numpy.lib.tests.test_arraypad.test->numpy.pad(arr, (2, 2), mode='linear_ramp', end_values=(0, 0))
A:numpy.lib.tests.test_arraypad.a->numpy.pad(a, np.array(((2, 3), (3, 2))), 'edge')
A:numpy.lib.tests.test_arraypad.b->numpy.array([[0, 0, 0, 0, 1, 2, 2, 2], [0, 0, 0, 0, 1, 2, 2, 2], [0, 0, 0, 0, 1, 2, 2, 2], [3, 3, 3, 3, 4, 5, 5, 5], [6, 6, 6, 6, 7, 8, 8, 8], [9, 9, 9, 9, 10, 11, 11, 11], [9, 9, 9, 9, 10, 11, 11, 11], [9, 9, 9, 9, 10, 11, 11, 11], [9, 9, 9, 9, 10, 11, 11, 11]])
A:numpy.lib.tests.test_arraypad.arr->numpy.zeros((3, 2, 1), dtype=dtype)
A:numpy.lib.tests.test_arraypad.arr_float->numpy.zeros((3, 2, 1), dtype=dtype).astype(np.float64)
A:numpy.lib.tests.test_arraypad.obj_a->object()
A:numpy.lib.tests.test_arraypad.obj_b->object()
A:numpy.lib.tests.test_arraypad.obj_c->object()
A:numpy.lib.tests.test_arraypad.actual->numpy.pad(arr, (2, 3), mode='linear_ramp', end_values=0)
A:numpy.lib.tests.test_arraypad.x->numpy.ones((5, 10), order='F')
A:numpy.lib.tests.test_arraypad.padded->numpy.pad(a, ((1, 2),), 'edge')
A:numpy.lib.tests.test_arraypad.match->"mode '{}' is not supported".format(mode)
numpy.lib.tests.test_arraypad.TestAsPairs
numpy.lib.tests.test_arraypad.TestAsPairs.test_as_index(self)
numpy.lib.tests.test_arraypad.TestAsPairs.test_exceptions(self)
numpy.lib.tests.test_arraypad.TestAsPairs.test_pass_through(self)
numpy.lib.tests.test_arraypad.TestAsPairs.test_single_value(self)
numpy.lib.tests.test_arraypad.TestAsPairs.test_two_values(self)
numpy.lib.tests.test_arraypad.TestAsPairs.test_with_none(self)
numpy.lib.tests.test_arraypad.TestConditionalShortcuts
numpy.lib.tests.test_arraypad.TestConditionalShortcuts.test_clip_statistic_range(self,mode)
numpy.lib.tests.test_arraypad.TestConditionalShortcuts.test_shallow_statistic_range(self,mode)
numpy.lib.tests.test_arraypad.TestConditionalShortcuts.test_zero_padding_shortcuts(self,mode)
numpy.lib.tests.test_arraypad.TestConstant
numpy.lib.tests.test_arraypad.TestConstant.test_check_constant(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_float(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_float2(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_float3(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_odd_pad_amount(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_pad_2d(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_zeros(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_large_integers(self)
numpy.lib.tests.test_arraypad.TestConstant.test_check_object_array(self)
numpy.lib.tests.test_arraypad.TestConstant.test_pad_empty_dimension(self)
numpy.lib.tests.test_arraypad.TestEdge
numpy.lib.tests.test_arraypad.TestEdge.test_check_simple(self)
numpy.lib.tests.test_arraypad.TestEdge.test_check_width_shape_1_2(self)
numpy.lib.tests.test_arraypad.TestEmpty
numpy.lib.tests.test_arraypad.TestEmpty.test_pad_empty_dimension(self)
numpy.lib.tests.test_arraypad.TestEmpty.test_simple(self)
numpy.lib.tests.test_arraypad.TestEmptyArray
numpy.lib.tests.test_arraypad.TestEmptyArray.test_pad_empty_dimension(self,mode)
numpy.lib.tests.test_arraypad.TestEmptyArray.test_pad_non_empty_dimension(self,mode)
numpy.lib.tests.test_arraypad.TestLinearRamp
numpy.lib.tests.test_arraypad.TestLinearRamp.test_check_2d(self)
numpy.lib.tests.test_arraypad.TestLinearRamp.test_check_simple(self)
numpy.lib.tests.test_arraypad.TestLinearRamp.test_end_values(self)
numpy.lib.tests.test_arraypad.TestLinearRamp.test_negative_difference(self,dtype)
numpy.lib.tests.test_arraypad.TestLinearRamp.test_object_array(self)
numpy.lib.tests.test_arraypad.TestPadWidth
numpy.lib.tests.test_arraypad.TestPadWidth.test_bad_type(self,pad_width,dtype,mode)
numpy.lib.tests.test_arraypad.TestPadWidth.test_misshaped_pad_width(self,pad_width,mode)
numpy.lib.tests.test_arraypad.TestPadWidth.test_misshaped_pad_width_2(self,mode)
numpy.lib.tests.test_arraypad.TestPadWidth.test_negative_pad_width(self,pad_width,mode)
numpy.lib.tests.test_arraypad.TestPadWidth.test_pad_width_as_ndarray(self)
numpy.lib.tests.test_arraypad.TestPadWidth.test_zero_pad_width(self,pad_width,mode)
numpy.lib.tests.test_arraypad.TestReflect
numpy.lib.tests.test_arraypad.TestReflect.test_check_01(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_02(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_03(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_large_pad(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_odd_method(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_shape(self)
numpy.lib.tests.test_arraypad.TestReflect.test_check_simple(self)
numpy.lib.tests.test_arraypad.TestStatistic
numpy.lib.tests.test_arraypad.TestStatistic.test_check_maximum_1(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_maximum_2(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_maximum_stat_length(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_mean_2(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_mean_shape_one(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_mean_stat_length(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_median(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_median_01(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_median_02(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_median_stat_length(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_minimum_1(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_minimum_2(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_minimum_stat_length(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_check_negative_stat_length(self,mode,stat_length)
numpy.lib.tests.test_arraypad.TestStatistic.test_same_prepend_append(self,mode)
numpy.lib.tests.test_arraypad.TestStatistic.test_simple_stat_length(self)
numpy.lib.tests.test_arraypad.TestStatistic.test_zero_stat_length_invalid(self,mode)
numpy.lib.tests.test_arraypad.TestStatistic.test_zero_stat_length_valid(self,mode)
numpy.lib.tests.test_arraypad.TestSymmetric
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_01(self)
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_02(self)
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_03(self)
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_large_pad(self)
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_large_pad_odd(self)
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_odd_method(self)
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_shape(self)
numpy.lib.tests.test_arraypad.TestSymmetric.test_check_simple(self)
numpy.lib.tests.test_arraypad.TestWrap
numpy.lib.tests.test_arraypad.TestWrap.test_check_01(self)
numpy.lib.tests.test_arraypad.TestWrap.test_check_02(self)
numpy.lib.tests.test_arraypad.TestWrap.test_check_large_pad(self)
numpy.lib.tests.test_arraypad.TestWrap.test_check_simple(self)
numpy.lib.tests.test_arraypad.TestWrap.test_pad_with_zero(self)
numpy.lib.tests.test_arraypad.TestWrap.test_repeated_wrapping(self)
numpy.lib.tests.test_arraypad.test_constant_zero_default()
numpy.lib.tests.test_arraypad.test_dtype_persistence(dtype,mode)
numpy.lib.tests.test_arraypad.test_kwargs(mode)
numpy.lib.tests.test_arraypad.test_legacy_vector_functionality()
numpy.lib.tests.test_arraypad.test_memory_layout_persistence(mode)
numpy.lib.tests.test_arraypad.test_non_contiguous_array(mode)
numpy.lib.tests.test_arraypad.test_object_input(mode)
numpy.lib.tests.test_arraypad.test_unicode_mode()
numpy.lib.tests.test_arraypad.test_unsupported_mode(mode)
numpy.tests.test_TestAsPairs
numpy.tests.test_TestAsPairs.test_as_index(self)
numpy.tests.test_TestAsPairs.test_exceptions(self)
numpy.tests.test_TestAsPairs.test_pass_through(self)
numpy.tests.test_TestAsPairs.test_single_value(self)
numpy.tests.test_TestAsPairs.test_two_values(self)
numpy.tests.test_TestAsPairs.test_with_none(self)
numpy.tests.test_TestConditionalShortcuts
numpy.tests.test_TestConditionalShortcuts.test_clip_statistic_range(self,mode)
numpy.tests.test_TestConditionalShortcuts.test_shallow_statistic_range(self,mode)
numpy.tests.test_TestConditionalShortcuts.test_zero_padding_shortcuts(self,mode)
numpy.tests.test_TestConstant
numpy.tests.test_TestConstant.test_check_constant(self)
numpy.tests.test_TestConstant.test_check_constant_float(self)
numpy.tests.test_TestConstant.test_check_constant_float2(self)
numpy.tests.test_TestConstant.test_check_constant_float3(self)
numpy.tests.test_TestConstant.test_check_constant_odd_pad_amount(self)
numpy.tests.test_TestConstant.test_check_constant_pad_2d(self)
numpy.tests.test_TestConstant.test_check_constant_zeros(self)
numpy.tests.test_TestConstant.test_check_large_integers(self)
numpy.tests.test_TestConstant.test_check_object_array(self)
numpy.tests.test_TestConstant.test_pad_empty_dimension(self)
numpy.tests.test_TestEdge
numpy.tests.test_TestEdge.test_check_simple(self)
numpy.tests.test_TestEdge.test_check_width_shape_1_2(self)
numpy.tests.test_TestEmpty
numpy.tests.test_TestEmpty.test_pad_empty_dimension(self)
numpy.tests.test_TestEmpty.test_simple(self)
numpy.tests.test_TestEmptyArray
numpy.tests.test_TestEmptyArray.test_pad_empty_dimension(self,mode)
numpy.tests.test_TestEmptyArray.test_pad_non_empty_dimension(self,mode)
numpy.tests.test_TestLinearRamp
numpy.tests.test_TestLinearRamp.test_check_2d(self)
numpy.tests.test_TestLinearRamp.test_check_simple(self)
numpy.tests.test_TestLinearRamp.test_end_values(self)
numpy.tests.test_TestLinearRamp.test_negative_difference(self,dtype)
numpy.tests.test_TestLinearRamp.test_object_array(self)
numpy.tests.test_TestPadWidth
numpy.tests.test_TestPadWidth.test_bad_type(self,pad_width,dtype,mode)
numpy.tests.test_TestPadWidth.test_misshaped_pad_width(self,pad_width,mode)
numpy.tests.test_TestPadWidth.test_misshaped_pad_width_2(self,mode)
numpy.tests.test_TestPadWidth.test_negative_pad_width(self,pad_width,mode)
numpy.tests.test_TestPadWidth.test_pad_width_as_ndarray(self)
numpy.tests.test_TestPadWidth.test_zero_pad_width(self,pad_width,mode)
numpy.tests.test_TestReflect
numpy.tests.test_TestReflect.test_check_01(self)
numpy.tests.test_TestReflect.test_check_02(self)
numpy.tests.test_TestReflect.test_check_03(self)
numpy.tests.test_TestReflect.test_check_large_pad(self)
numpy.tests.test_TestReflect.test_check_odd_method(self)
numpy.tests.test_TestReflect.test_check_shape(self)
numpy.tests.test_TestReflect.test_check_simple(self)
numpy.tests.test_TestStatistic
numpy.tests.test_TestStatistic.test_check_maximum_1(self)
numpy.tests.test_TestStatistic.test_check_maximum_2(self)
numpy.tests.test_TestStatistic.test_check_maximum_stat_length(self)
numpy.tests.test_TestStatistic.test_check_mean_2(self)
numpy.tests.test_TestStatistic.test_check_mean_shape_one(self)
numpy.tests.test_TestStatistic.test_check_mean_stat_length(self)
numpy.tests.test_TestStatistic.test_check_median(self)
numpy.tests.test_TestStatistic.test_check_median_01(self)
numpy.tests.test_TestStatistic.test_check_median_02(self)
numpy.tests.test_TestStatistic.test_check_median_stat_length(self)
numpy.tests.test_TestStatistic.test_check_minimum_1(self)
numpy.tests.test_TestStatistic.test_check_minimum_2(self)
numpy.tests.test_TestStatistic.test_check_minimum_stat_length(self)
numpy.tests.test_TestStatistic.test_check_negative_stat_length(self,mode,stat_length)
numpy.tests.test_TestStatistic.test_same_prepend_append(self,mode)
numpy.tests.test_TestStatistic.test_simple_stat_length(self)
numpy.tests.test_TestStatistic.test_zero_stat_length_invalid(self,mode)
numpy.tests.test_TestStatistic.test_zero_stat_length_valid(self,mode)
numpy.tests.test_TestSymmetric
numpy.tests.test_TestSymmetric.test_check_01(self)
numpy.tests.test_TestSymmetric.test_check_02(self)
numpy.tests.test_TestSymmetric.test_check_03(self)
numpy.tests.test_TestSymmetric.test_check_large_pad(self)
numpy.tests.test_TestSymmetric.test_check_large_pad_odd(self)
numpy.tests.test_TestSymmetric.test_check_odd_method(self)
numpy.tests.test_TestSymmetric.test_check_shape(self)
numpy.tests.test_TestSymmetric.test_check_simple(self)
numpy.tests.test_TestWrap
numpy.tests.test_TestWrap.test_check_01(self)
numpy.tests.test_TestWrap.test_check_02(self)
numpy.tests.test_TestWrap.test_check_large_pad(self)
numpy.tests.test_TestWrap.test_check_simple(self)
numpy.tests.test_TestWrap.test_pad_with_zero(self)
numpy.tests.test_TestWrap.test_repeated_wrapping(self)
numpy.tests.test_test_constant_zero_default()
numpy.tests.test_test_dtype_persistence(dtype,mode)
numpy.tests.test_test_kwargs(mode)
numpy.tests.test_test_legacy_vector_functionality()
numpy.tests.test_test_memory_layout_persistence(mode)
numpy.tests.test_test_non_contiguous_array(mode)
numpy.tests.test_test_object_input(mode)
numpy.tests.test_test_unicode_mode()
numpy.tests.test_test_unsupported_mode(mode)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_io.py----------------------------------------
A:numpy.lib.tests.test_io.s->BytesIO()
A:numpy.lib.tests.test_io.save_kwds->dict(missing_values='N/A', names=True, case_sensitive=True).get('save_kwds', {})
A:numpy.lib.tests.test_io.load_kwds->dict(missing_values='N/A', names=True, case_sensitive=True).get('load_kwds', {'allow_pickle': True})
A:numpy.lib.tests.test_io.file_on_disk->dict(missing_values='N/A', names=True, case_sensitive=True).get('file_on_disk', False)
A:numpy.lib.tests.test_io.target_file->BytesIO()
A:numpy.lib.tests.test_io.arr_reloaded->numpy.load(load_file, **load_kwds)
A:numpy.lib.tests.test_io.a->numpy.random.random((5, 5))
A:numpy.lib.tests.test_io.npfile->numpy.load(tmp)
A:numpy.lib.tests.test_io.b->numpy.load(path, mmap_mode='r+')
A:numpy.lib.tests.test_io.c->TextIO('aaaa  1.0  8.0  1 2 3 4 5 6')
A:numpy.lib.tests.test_io.l->numpy.load(c)
A:numpy.lib.tests.test_io.arr->numpy.loadtxt(c, usecols=(0, 2), dtype=list(zip(names, dtypes)))
A:numpy.lib.tests.test_io.data->numpy.genfromtxt(path)
A:numpy.lib.tests.test_io.lines->TextIO('aaaa  1.0  8.0  1 2 3 4 5 6').readlines()
A:numpy.lib.tests.test_io.path->Path(path)
A:numpy.lib.tests.test_io.w->CustomWriter()
A:numpy.lib.tests.test_io.utf8->b'\xcf\x96'.decode('UTF-8')
A:numpy.lib.tests.test_io.test_data->numpy.asarray([np.random.rand(np.random.randint(50, 100), 4) for i in range(800000)], dtype=object)
A:numpy.lib.tests.test_io.memoryerror_raised->Value(c_bool)
A:numpy.lib.tests.test_io.p->Process(target=check_large_zip, args=(memoryerror_raised,))
A:numpy.lib.tests.test_io.wanted->numpy.arange(6).reshape((2, 3))
A:numpy.lib.tests.test_io.res->numpy.loadtxt(name)
A:numpy.lib.tests.test_io.x->numpy.loadtxt(TextIO('0 1 2 3'), dtype=dt)
A:numpy.lib.tests.test_io.nonascii->b'\xc3\xb6\xc3\xbc\xc3\xb6'.decode('UTF-8')
A:numpy.lib.tests.test_io.v->self.loadfunc(BytesIO(utf16), dtype=None, encoding='UTF-16')
A:numpy.lib.tests.test_io.loadfunc->staticmethod(np.genfromtxt)
A:numpy.lib.tests.test_io.d->TextIO()
A:numpy.lib.tests.test_io.y->numpy.zeros((3, 3))
A:numpy.lib.tests.test_io.to_read->int_type(1)
A:numpy.lib.tests.test_io.crazy_int->CrazyInt()
A:numpy.lib.tests.test_io.dt->numpy.dtype([('name', 'S4'), ('x', float), ('y', float), ('block', int, (2, 3))])
A:numpy.lib.tests.test_io.test->numpy.recfromcsv(path, dtype=None, **kwargs)
A:numpy.lib.tests.test_io.control->numpy.array([(0, 1), (2, 3)], dtype=[('A', int), ('B', int)])
A:numpy.lib.tests.test_io.tgt->numpy.arange(6).reshape((2, 3))
A:numpy.lib.tests.test_io.inp->'\n'.join(map(float.hex, tgt))
A:numpy.lib.tests.test_io.txt->TextIO('1')
A:numpy.lib.tests.test_io.txt_bad->TextIO('1').replace(b'e+00-', b'e00+-')
A:numpy.lib.tests.test_io.(a, b, c)->numpy.genfromtxt(txt, dtype=dt, unpack=True)
A:numpy.lib.tests.test_io.e->TextIO()
A:numpy.lib.tests.test_io.f->BytesIO()
A:numpy.lib.tests.test_io.sutf8->butf8.decode('UTF-8').replace('\r', '').splitlines()
A:numpy.lib.tests.test_io.regexp->re.compile(b'(\\d)')
A:numpy.lib.tests.test_io.kwargs->dict(missing_values='N/A', names=True, case_sensitive=True)
A:numpy.lib.tests.test_io.ctrl->numpy.array([[1, 2, 3], [1, -999, 5], [0, 6, -999]], dtype=int)
A:numpy.lib.tests.test_io.fancydtype->numpy.dtype([('x', int), ('y', [('t', int), ('s', float)])])
A:numpy.lib.tests.test_io.fpath->os.path.join(tmpdir, 'test.csv')
A:numpy.lib.tests.test_io.parsed->numpy.genfromtxt(TextIO('string'), dtype=object)
A:numpy.lib.tests.test_io.ctrl_d->numpy.array([(1, 2, 3), (np.nan, 2, np.nan), (1, np.nan, 3)])
A:numpy.lib.tests.test_io.ctrl_m->numpy.array([(0, 0, 0), (1, 0, 1), (0, 1, 0)], dtype=bool)
A:numpy.lib.tests.test_io.basekwargs->dict(dtype=None, delimiter=',', names=True)
A:numpy.lib.tests.test_io.mdata->TextIO('\n'.join(data))
A:numpy.lib.tests.test_io.mtest->numpy.genfromtxt(TextIO(data), autostrip=True, **kwargs)
A:numpy.lib.tests.test_io.ctl->numpy.array([['norm1', 'norm2', 'norm3'], ['norm1', latin1, 'norm3'], ['test1', 'testNonethe' + utf8, 'test3']], dtype=np.unicode_)
A:numpy.lib.tests.test_io.encoding->locale.getpreferredencoding()
A:numpy.lib.tests.test_io.a1->numpy.genfromtxt(txt, max_rows=3)
A:numpy.lib.tests.test_io.a2->numpy.genfromtxt(txt)
A:numpy.lib.tests.test_io.expected->numpy.array((1,), dtype=np.int32)
A:numpy.lib.tests.test_io.g->gzip.GzipFile(fileobj=s, mode='w')
A:numpy.lib.tests.test_io.z->numpy.load(s)
numpy.lib.tests.test_io.JustReader(self,base)
numpy.lib.tests.test_io.JustReader.__init__(self,base)
numpy.lib.tests.test_io.JustReader.read(self,n)
numpy.lib.tests.test_io.JustReader.seek(self,off,whence=0)
numpy.lib.tests.test_io.JustWriter(self,base)
numpy.lib.tests.test_io.JustWriter.__init__(self,base)
numpy.lib.tests.test_io.JustWriter.flush(self)
numpy.lib.tests.test_io.JustWriter.write(self,s)
numpy.lib.tests.test_io.LoadTxtBase
numpy.lib.tests.test_io.LoadTxtBase.check_compressed(self,fopen,suffixes)
numpy.lib.tests.test_io.LoadTxtBase.test_binary_decode(self)
numpy.lib.tests.test_io.LoadTxtBase.test_compressed_bz2(self)
numpy.lib.tests.test_io.LoadTxtBase.test_compressed_gzip(self)
numpy.lib.tests.test_io.LoadTxtBase.test_compressed_lzma(self)
numpy.lib.tests.test_io.LoadTxtBase.test_converters_decode(self)
numpy.lib.tests.test_io.LoadTxtBase.test_converters_nodecode(self)
numpy.lib.tests.test_io.LoadTxtBase.test_encoding(self)
numpy.lib.tests.test_io.LoadTxtBase.test_stringload(self)
numpy.lib.tests.test_io.RoundtripTest
numpy.lib.tests.test_io.RoundtripTest.check_roundtrips(self,a)
numpy.lib.tests.test_io.RoundtripTest.roundtrip(self,save_func,*args,**kwargs)
numpy.lib.tests.test_io.RoundtripTest.test_1D(self)
numpy.lib.tests.test_io.RoundtripTest.test_array(self)
numpy.lib.tests.test_io.RoundtripTest.test_array_object(self)
numpy.lib.tests.test_io.RoundtripTest.test_format_2_0(self)
numpy.lib.tests.test_io.RoundtripTest.test_mmap(self)
numpy.lib.tests.test_io.RoundtripTest.test_record(self)
numpy.lib.tests.test_io.TestFromTxt(LoadTxtBase)
numpy.lib.tests.test_io.TestFromTxt.test_1D(self)
numpy.lib.tests.test_io.TestFromTxt.test_array(self)
numpy.lib.tests.test_io.TestFromTxt.test_auto_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_auto_dtype_largeint(self)
numpy.lib.tests.test_io.TestFromTxt.test_auto_dtype_uniform(self)
numpy.lib.tests.test_io.TestFromTxt.test_autonames_and_usecols(self)
numpy.lib.tests.test_io.TestFromTxt.test_autostrip(self)
numpy.lib.tests.test_io.TestFromTxt.test_binary_decode_autodtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_commented_header(self)
numpy.lib.tests.test_io.TestFromTxt.test_comments(self)
numpy.lib.tests.test_io.TestFromTxt.test_comments_is_none(self)
numpy.lib.tests.test_io.TestFromTxt.test_converters_cornercases(self)
numpy.lib.tests.test_io.TestFromTxt.test_converters_cornercases2(self)
numpy.lib.tests.test_io.TestFromTxt.test_converters_with_usecols(self)
numpy.lib.tests.test_io.TestFromTxt.test_converters_with_usecols_and_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_default_field_format(self)
numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_converters(self)
numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_converters_and_usecols(self)
numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_object(self)
numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_object_no_converter(self)
numpy.lib.tests.test_io.TestFromTxt.test_easy_structured_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_empty_file(self)
numpy.lib.tests.test_io.TestFromTxt.test_fancy_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_fancy_dtype_alt(self)
numpy.lib.tests.test_io.TestFromTxt.test_file_is_closed_on_error(self)
numpy.lib.tests.test_io.TestFromTxt.test_filling_values(self)
numpy.lib.tests.test_io.TestFromTxt.test_fixed_width_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_gft_from_gzip(self)
numpy.lib.tests.test_io.TestFromTxt.test_gft_using_filename(self)
numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator(self)
numpy.lib.tests.test_io.TestFromTxt.test_header(self)
numpy.lib.tests.test_io.TestFromTxt.test_incomplete_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_inconsistent_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_integer_delimiter(self)
numpy.lib.tests.test_io.TestFromTxt.test_invalid_converter(self)
numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise(self)
numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols(self)
numpy.lib.tests.test_io.TestFromTxt.test_latin1(self)
numpy.lib.tests.test_io.TestFromTxt.test_max_rows(self)
numpy.lib.tests.test_io.TestFromTxt.test_missing(self)
numpy.lib.tests.test_io.TestFromTxt.test_missing_with_tabs(self)
numpy.lib.tests.test_io.TestFromTxt.test_names_and_comments_none(self)
numpy.lib.tests.test_io.TestFromTxt.test_names_auto_completion(self)
numpy.lib.tests.test_io.TestFromTxt.test_names_overwrite(self)
numpy.lib.tests.test_io.TestFromTxt.test_names_with_usecols_bug1636(self)
numpy.lib.tests.test_io.TestFromTxt.test_recfromcsv(self)
numpy.lib.tests.test_io.TestFromTxt.test_recfromtxt(self)
numpy.lib.tests.test_io.TestFromTxt.test_record(self)
numpy.lib.tests.test_io.TestFromTxt.test_replace_space(self)
numpy.lib.tests.test_io.TestFromTxt.test_replace_space_known_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_shaped_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_single_dtype_w_explicit_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_single_dtype_w_implicit_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_single_dtype_wo_names(self)
numpy.lib.tests.test_io.TestFromTxt.test_skip_footer(self)
numpy.lib.tests.test_io.TestFromTxt.test_skip_footer_with_invalid(self)
numpy.lib.tests.test_io.TestFromTxt.test_skiprows(self)
numpy.lib.tests.test_io.TestFromTxt.test_spacedelimiter(self)
numpy.lib.tests.test_io.TestFromTxt.test_squeeze_scalar(self)
numpy.lib.tests.test_io.TestFromTxt.test_tricky_converter_bug1666(self)
numpy.lib.tests.test_io.TestFromTxt.test_unpack_auto_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_unpack_single_name(self)
numpy.lib.tests.test_io.TestFromTxt.test_unpack_structured(self)
numpy.lib.tests.test_io.TestFromTxt.test_unused_converter(self)
numpy.lib.tests.test_io.TestFromTxt.test_usecols(self)
numpy.lib.tests.test_io.TestFromTxt.test_usecols_as_css(self)
numpy.lib.tests.test_io.TestFromTxt.test_usecols_with_integer(self)
numpy.lib.tests.test_io.TestFromTxt.test_usecols_with_named_columns(self)
numpy.lib.tests.test_io.TestFromTxt.test_usecols_with_structured_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_user_filling_values(self)
numpy.lib.tests.test_io.TestFromTxt.test_user_missing_values(self)
numpy.lib.tests.test_io.TestFromTxt.test_userconverters_with_explicit_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_utf8_byte_encoding(self)
numpy.lib.tests.test_io.TestFromTxt.test_utf8_file(self)
numpy.lib.tests.test_io.TestFromTxt.test_utf8_file_nodtype_unicode(self)
numpy.lib.tests.test_io.TestFromTxt.test_utf8_userconverters_with_explicit_dtype(self)
numpy.lib.tests.test_io.TestFromTxt.test_with_masked_column_uniform(self)
numpy.lib.tests.test_io.TestFromTxt.test_with_masked_column_various(self)
numpy.lib.tests.test_io.TestFromTxt.test_withmissing(self)
numpy.lib.tests.test_io.TestFromTxt.test_withmissing_float(self)
numpy.lib.tests.test_io.TestLoadTxt(LoadTxtBase)
numpy.lib.tests.test_io.TestLoadTxt.setup(self)
numpy.lib.tests.test_io.TestLoadTxt.teardown(self)
numpy.lib.tests.test_io.TestLoadTxt.test_1D(self)
numpy.lib.tests.test_io.TestLoadTxt.test_3d_shaped_dtype(self)
numpy.lib.tests.test_io.TestLoadTxt.test_array(self)
numpy.lib.tests.test_io.TestLoadTxt.test_bad_line(self)
numpy.lib.tests.test_io.TestLoadTxt.test_binary_load(self)
numpy.lib.tests.test_io.TestLoadTxt.test_comments_byte(self)
numpy.lib.tests.test_io.TestLoadTxt.test_comments_multi_chars(self)
numpy.lib.tests.test_io.TestLoadTxt.test_comments_multiple(self)
numpy.lib.tests.test_io.TestLoadTxt.test_comments_unicode(self)
numpy.lib.tests.test_io.TestLoadTxt.test_complex_misformatted(self)
numpy.lib.tests.test_io.TestLoadTxt.test_converters_with_usecols(self)
numpy.lib.tests.test_io.TestLoadTxt.test_dtype_with_object(self)
numpy.lib.tests.test_io.TestLoadTxt.test_empty_field_after_tab(self)
numpy.lib.tests.test_io.TestLoadTxt.test_empty_file(self)
numpy.lib.tests.test_io.TestLoadTxt.test_fancy_dtype(self)
numpy.lib.tests.test_io.TestLoadTxt.test_from_complex(self)
numpy.lib.tests.test_io.TestLoadTxt.test_from_float_hex(self)
numpy.lib.tests.test_io.TestLoadTxt.test_generator_source(self)
numpy.lib.tests.test_io.TestLoadTxt.test_int64_type(self)
numpy.lib.tests.test_io.TestLoadTxt.test_max_rows(self)
numpy.lib.tests.test_io.TestLoadTxt.test_max_rows_larger(self)
numpy.lib.tests.test_io.TestLoadTxt.test_max_rows_with_read_continuation(self)
numpy.lib.tests.test_io.TestLoadTxt.test_max_rows_with_skiprows(self)
numpy.lib.tests.test_io.TestLoadTxt.test_missing(self)
numpy.lib.tests.test_io.TestLoadTxt.test_ndmin_keyword(self)
numpy.lib.tests.test_io.TestLoadTxt.test_none_as_string(self)
numpy.lib.tests.test_io.TestLoadTxt.test_record(self)
numpy.lib.tests.test_io.TestLoadTxt.test_shaped_dtype(self)
numpy.lib.tests.test_io.TestLoadTxt.test_skiprows(self)
numpy.lib.tests.test_io.TestLoadTxt.test_str_dtype(self)
numpy.lib.tests.test_io.TestLoadTxt.test_uint64_type(self)
numpy.lib.tests.test_io.TestLoadTxt.test_universal_newline(self)
numpy.lib.tests.test_io.TestLoadTxt.test_unpack_structured(self)
numpy.lib.tests.test_io.TestLoadTxt.test_unused_converter(self)
numpy.lib.tests.test_io.TestLoadTxt.test_usecols(self)
numpy.lib.tests.test_io.TestPathUsage
numpy.lib.tests.test_io.TestPathUsage.test_genfromtxt(self)
numpy.lib.tests.test_io.TestPathUsage.test_loadtxt(self)
numpy.lib.tests.test_io.TestPathUsage.test_mafromtxt(self)
numpy.lib.tests.test_io.TestPathUsage.test_ndfromtxt(self)
numpy.lib.tests.test_io.TestPathUsage.test_recfromcsv(self)
numpy.lib.tests.test_io.TestPathUsage.test_recfromtxt(self)
numpy.lib.tests.test_io.TestPathUsage.test_save_load(self)
numpy.lib.tests.test_io.TestPathUsage.test_save_load_memmap(self)
numpy.lib.tests.test_io.TestPathUsage.test_save_load_memmap_readwrite(self)
numpy.lib.tests.test_io.TestPathUsage.test_savez_compressed_load(self)
numpy.lib.tests.test_io.TestPathUsage.test_savez_load(self)
numpy.lib.tests.test_io.TestSaveLoad(RoundtripTest)
numpy.lib.tests.test_io.TestSaveLoad.roundtrip(self,*args,**kwargs)
numpy.lib.tests.test_io.TestSaveTxt
numpy.lib.tests.test_io.TestSaveTxt.test_0D_3D(self)
numpy.lib.tests.test_io.TestSaveTxt.test_1D(self)
numpy.lib.tests.test_io.TestSaveTxt.test_array(self)
numpy.lib.tests.test_io.TestSaveTxt.test_complex_arrays(self)
numpy.lib.tests.test_io.TestSaveTxt.test_complex_negative_exponent(self)
numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer(self)
numpy.lib.tests.test_io.TestSaveTxt.test_delimiter(self)
numpy.lib.tests.test_io.TestSaveTxt.test_file_roundtrip(self)
numpy.lib.tests.test_io.TestSaveTxt.test_format(self)
numpy.lib.tests.test_io.TestSaveTxt.test_header_footer(self)
numpy.lib.tests.test_io.TestSaveTxt.test_large_zip(self)
numpy.lib.tests.test_io.TestSaveTxt.test_multifield_view(self)
numpy.lib.tests.test_io.TestSaveTxt.test_structured(self)
numpy.lib.tests.test_io.TestSaveTxt.test_structured_padded(self)
numpy.lib.tests.test_io.TestSaveTxt.test_unicode(self)
numpy.lib.tests.test_io.TestSaveTxt.test_unicode_and_bytes_fmt(self,fmt,iotype)
numpy.lib.tests.test_io.TestSaveTxt.test_unicode_bytestream(self)
numpy.lib.tests.test_io.TestSaveTxt.test_unicode_roundtrip(self)
numpy.lib.tests.test_io.TestSaveTxt.test_unicode_stringstream(self)
numpy.lib.tests.test_io.TestSavezLoad(RoundtripTest)
numpy.lib.tests.test_io.TestSavezLoad.roundtrip(self,*args,**kwargs)
numpy.lib.tests.test_io.TestSavezLoad.test_BagObj(self)
numpy.lib.tests.test_io.TestSavezLoad.test_big_arrays(self)
numpy.lib.tests.test_io.TestSavezLoad.test_closing_fid(self)
numpy.lib.tests.test_io.TestSavezLoad.test_closing_zipfile_after_load(self)
numpy.lib.tests.test_io.TestSavezLoad.test_multiple_arrays(self)
numpy.lib.tests.test_io.TestSavezLoad.test_named_arrays(self)
numpy.lib.tests.test_io.TestSavezLoad.test_not_closing_opened_fid(self)
numpy.lib.tests.test_io.TestSavezLoad.test_savez_filename_clashes(self)
numpy.lib.tests.test_io.Testfromregex
numpy.lib.tests.test_io.Testfromregex.test_compiled_bytes(self)
numpy.lib.tests.test_io.Testfromregex.test_record(self)
numpy.lib.tests.test_io.Testfromregex.test_record_2(self)
numpy.lib.tests.test_io.Testfromregex.test_record_3(self)
numpy.lib.tests.test_io.Testfromregex.test_record_unicode(self)
numpy.lib.tests.test_io.TextIO(self,s='')
numpy.lib.tests.test_io.TextIO.__init__(self,s='')
numpy.lib.tests.test_io.TextIO.write(self,s)
numpy.lib.tests.test_io.TextIO.writelines(self,lines)
numpy.lib.tests.test_io.strptime(s,fmt=None)
numpy.lib.tests.test_io.test_ducktyping()
numpy.lib.tests.test_io.test_gzip_load()
numpy.lib.tests.test_io.test_gzip_loadtxt()
numpy.lib.tests.test_io.test_gzip_loadtxt_from_string()
numpy.lib.tests.test_io.test_load_refcount()
numpy.lib.tests.test_io.test_npzfile_dict()
numpy.tests.test_io.JustReader(self,base)
numpy.tests.test_io.JustReader.read(self,n)
numpy.tests.test_io.JustReader.seek(self,off,whence=0)
numpy.tests.test_io.JustWriter(self,base)
numpy.tests.test_io.JustWriter.flush(self)
numpy.tests.test_io.JustWriter.write(self,s)
numpy.tests.test_io.LoadTxtBase
numpy.tests.test_io.LoadTxtBase.check_compressed(self,fopen,suffixes)
numpy.tests.test_io.LoadTxtBase.test_binary_decode(self)
numpy.tests.test_io.LoadTxtBase.test_compressed_bz2(self)
numpy.tests.test_io.LoadTxtBase.test_compressed_gzip(self)
numpy.tests.test_io.LoadTxtBase.test_compressed_lzma(self)
numpy.tests.test_io.LoadTxtBase.test_converters_decode(self)
numpy.tests.test_io.LoadTxtBase.test_converters_nodecode(self)
numpy.tests.test_io.LoadTxtBase.test_encoding(self)
numpy.tests.test_io.LoadTxtBase.test_stringload(self)
numpy.tests.test_io.RoundtripTest
numpy.tests.test_io.RoundtripTest.check_roundtrips(self,a)
numpy.tests.test_io.RoundtripTest.roundtrip(self,save_func,*args,**kwargs)
numpy.tests.test_io.RoundtripTest.test_1D(self)
numpy.tests.test_io.RoundtripTest.test_array(self)
numpy.tests.test_io.RoundtripTest.test_array_object(self)
numpy.tests.test_io.RoundtripTest.test_format_2_0(self)
numpy.tests.test_io.RoundtripTest.test_mmap(self)
numpy.tests.test_io.RoundtripTest.test_record(self)
numpy.tests.test_io.TestFromTxt(LoadTxtBase)
numpy.tests.test_io.TestFromTxt.test_1D(self)
numpy.tests.test_io.TestFromTxt.test_array(self)
numpy.tests.test_io.TestFromTxt.test_auto_dtype(self)
numpy.tests.test_io.TestFromTxt.test_auto_dtype_largeint(self)
numpy.tests.test_io.TestFromTxt.test_auto_dtype_uniform(self)
numpy.tests.test_io.TestFromTxt.test_autonames_and_usecols(self)
numpy.tests.test_io.TestFromTxt.test_autostrip(self)
numpy.tests.test_io.TestFromTxt.test_binary_decode_autodtype(self)
numpy.tests.test_io.TestFromTxt.test_commented_header(self)
numpy.tests.test_io.TestFromTxt.test_comments(self)
numpy.tests.test_io.TestFromTxt.test_comments_is_none(self)
numpy.tests.test_io.TestFromTxt.test_converters_cornercases(self)
numpy.tests.test_io.TestFromTxt.test_converters_cornercases2(self)
numpy.tests.test_io.TestFromTxt.test_converters_with_usecols(self)
numpy.tests.test_io.TestFromTxt.test_converters_with_usecols_and_names(self)
numpy.tests.test_io.TestFromTxt.test_default_field_format(self)
numpy.tests.test_io.TestFromTxt.test_dtype_with_converters(self)
numpy.tests.test_io.TestFromTxt.test_dtype_with_converters_and_usecols(self)
numpy.tests.test_io.TestFromTxt.test_dtype_with_object(self)
numpy.tests.test_io.TestFromTxt.test_dtype_with_object_no_converter(self)
numpy.tests.test_io.TestFromTxt.test_easy_structured_dtype(self)
numpy.tests.test_io.TestFromTxt.test_empty_file(self)
numpy.tests.test_io.TestFromTxt.test_fancy_dtype(self)
numpy.tests.test_io.TestFromTxt.test_fancy_dtype_alt(self)
numpy.tests.test_io.TestFromTxt.test_file_is_closed_on_error(self)
numpy.tests.test_io.TestFromTxt.test_filling_values(self)
numpy.tests.test_io.TestFromTxt.test_fixed_width_names(self)
numpy.tests.test_io.TestFromTxt.test_gft_from_gzip(self)
numpy.tests.test_io.TestFromTxt.test_gft_using_filename(self)
numpy.tests.test_io.TestFromTxt.test_gft_using_generator(self)
numpy.tests.test_io.TestFromTxt.test_header(self)
numpy.tests.test_io.TestFromTxt.test_incomplete_names(self)
numpy.tests.test_io.TestFromTxt.test_inconsistent_dtype(self)
numpy.tests.test_io.TestFromTxt.test_integer_delimiter(self)
numpy.tests.test_io.TestFromTxt.test_invalid_converter(self)
numpy.tests.test_io.TestFromTxt.test_invalid_raise(self)
numpy.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols(self)
numpy.tests.test_io.TestFromTxt.test_latin1(self)
numpy.tests.test_io.TestFromTxt.test_max_rows(self)
numpy.tests.test_io.TestFromTxt.test_missing(self)
numpy.tests.test_io.TestFromTxt.test_missing_with_tabs(self)
numpy.tests.test_io.TestFromTxt.test_names_and_comments_none(self)
numpy.tests.test_io.TestFromTxt.test_names_auto_completion(self)
numpy.tests.test_io.TestFromTxt.test_names_overwrite(self)
numpy.tests.test_io.TestFromTxt.test_names_with_usecols_bug1636(self)
numpy.tests.test_io.TestFromTxt.test_recfromcsv(self)
numpy.tests.test_io.TestFromTxt.test_recfromtxt(self)
numpy.tests.test_io.TestFromTxt.test_record(self)
numpy.tests.test_io.TestFromTxt.test_replace_space(self)
numpy.tests.test_io.TestFromTxt.test_replace_space_known_dtype(self)
numpy.tests.test_io.TestFromTxt.test_shaped_dtype(self)
numpy.tests.test_io.TestFromTxt.test_single_dtype_w_explicit_names(self)
numpy.tests.test_io.TestFromTxt.test_single_dtype_w_implicit_names(self)
numpy.tests.test_io.TestFromTxt.test_single_dtype_wo_names(self)
numpy.tests.test_io.TestFromTxt.test_skip_footer(self)
numpy.tests.test_io.TestFromTxt.test_skip_footer_with_invalid(self)
numpy.tests.test_io.TestFromTxt.test_skiprows(self)
numpy.tests.test_io.TestFromTxt.test_spacedelimiter(self)
numpy.tests.test_io.TestFromTxt.test_squeeze_scalar(self)
numpy.tests.test_io.TestFromTxt.test_tricky_converter_bug1666(self)
numpy.tests.test_io.TestFromTxt.test_unpack_auto_dtype(self)
numpy.tests.test_io.TestFromTxt.test_unpack_single_name(self)
numpy.tests.test_io.TestFromTxt.test_unpack_structured(self)
numpy.tests.test_io.TestFromTxt.test_unused_converter(self)
numpy.tests.test_io.TestFromTxt.test_usecols(self)
numpy.tests.test_io.TestFromTxt.test_usecols_as_css(self)
numpy.tests.test_io.TestFromTxt.test_usecols_with_integer(self)
numpy.tests.test_io.TestFromTxt.test_usecols_with_named_columns(self)
numpy.tests.test_io.TestFromTxt.test_usecols_with_structured_dtype(self)
numpy.tests.test_io.TestFromTxt.test_user_filling_values(self)
numpy.tests.test_io.TestFromTxt.test_user_missing_values(self)
numpy.tests.test_io.TestFromTxt.test_userconverters_with_explicit_dtype(self)
numpy.tests.test_io.TestFromTxt.test_utf8_byte_encoding(self)
numpy.tests.test_io.TestFromTxt.test_utf8_file(self)
numpy.tests.test_io.TestFromTxt.test_utf8_file_nodtype_unicode(self)
numpy.tests.test_io.TestFromTxt.test_utf8_userconverters_with_explicit_dtype(self)
numpy.tests.test_io.TestFromTxt.test_with_masked_column_uniform(self)
numpy.tests.test_io.TestFromTxt.test_with_masked_column_various(self)
numpy.tests.test_io.TestFromTxt.test_withmissing(self)
numpy.tests.test_io.TestFromTxt.test_withmissing_float(self)
numpy.tests.test_io.TestLoadTxt(LoadTxtBase)
numpy.tests.test_io.TestLoadTxt.setup(self)
numpy.tests.test_io.TestLoadTxt.teardown(self)
numpy.tests.test_io.TestLoadTxt.test_1D(self)
numpy.tests.test_io.TestLoadTxt.test_3d_shaped_dtype(self)
numpy.tests.test_io.TestLoadTxt.test_array(self)
numpy.tests.test_io.TestLoadTxt.test_bad_line(self)
numpy.tests.test_io.TestLoadTxt.test_binary_load(self)
numpy.tests.test_io.TestLoadTxt.test_comments_byte(self)
numpy.tests.test_io.TestLoadTxt.test_comments_multi_chars(self)
numpy.tests.test_io.TestLoadTxt.test_comments_multiple(self)
numpy.tests.test_io.TestLoadTxt.test_comments_unicode(self)
numpy.tests.test_io.TestLoadTxt.test_complex_misformatted(self)
numpy.tests.test_io.TestLoadTxt.test_converters_with_usecols(self)
numpy.tests.test_io.TestLoadTxt.test_dtype_with_object(self)
numpy.tests.test_io.TestLoadTxt.test_empty_field_after_tab(self)
numpy.tests.test_io.TestLoadTxt.test_empty_file(self)
numpy.tests.test_io.TestLoadTxt.test_fancy_dtype(self)
numpy.tests.test_io.TestLoadTxt.test_from_complex(self)
numpy.tests.test_io.TestLoadTxt.test_from_float_hex(self)
numpy.tests.test_io.TestLoadTxt.test_generator_source(self)
numpy.tests.test_io.TestLoadTxt.test_int64_type(self)
numpy.tests.test_io.TestLoadTxt.test_max_rows(self)
numpy.tests.test_io.TestLoadTxt.test_max_rows_larger(self)
numpy.tests.test_io.TestLoadTxt.test_max_rows_with_read_continuation(self)
numpy.tests.test_io.TestLoadTxt.test_max_rows_with_skiprows(self)
numpy.tests.test_io.TestLoadTxt.test_missing(self)
numpy.tests.test_io.TestLoadTxt.test_ndmin_keyword(self)
numpy.tests.test_io.TestLoadTxt.test_none_as_string(self)
numpy.tests.test_io.TestLoadTxt.test_record(self)
numpy.tests.test_io.TestLoadTxt.test_shaped_dtype(self)
numpy.tests.test_io.TestLoadTxt.test_skiprows(self)
numpy.tests.test_io.TestLoadTxt.test_str_dtype(self)
numpy.tests.test_io.TestLoadTxt.test_uint64_type(self)
numpy.tests.test_io.TestLoadTxt.test_universal_newline(self)
numpy.tests.test_io.TestLoadTxt.test_unpack_structured(self)
numpy.tests.test_io.TestLoadTxt.test_unused_converter(self)
numpy.tests.test_io.TestLoadTxt.test_usecols(self)
numpy.tests.test_io.TestPathUsage
numpy.tests.test_io.TestPathUsage.test_genfromtxt(self)
numpy.tests.test_io.TestPathUsage.test_loadtxt(self)
numpy.tests.test_io.TestPathUsage.test_mafromtxt(self)
numpy.tests.test_io.TestPathUsage.test_ndfromtxt(self)
numpy.tests.test_io.TestPathUsage.test_recfromcsv(self)
numpy.tests.test_io.TestPathUsage.test_recfromtxt(self)
numpy.tests.test_io.TestPathUsage.test_save_load(self)
numpy.tests.test_io.TestPathUsage.test_save_load_memmap(self)
numpy.tests.test_io.TestPathUsage.test_save_load_memmap_readwrite(self)
numpy.tests.test_io.TestPathUsage.test_savez_compressed_load(self)
numpy.tests.test_io.TestPathUsage.test_savez_load(self)
numpy.tests.test_io.TestSaveLoad(RoundtripTest)
numpy.tests.test_io.TestSaveLoad.roundtrip(self,*args,**kwargs)
numpy.tests.test_io.TestSaveTxt
numpy.tests.test_io.TestSaveTxt.test_0D_3D(self)
numpy.tests.test_io.TestSaveTxt.test_1D(self)
numpy.tests.test_io.TestSaveTxt.test_array(self)
numpy.tests.test_io.TestSaveTxt.test_complex_arrays(self)
numpy.tests.test_io.TestSaveTxt.test_complex_negative_exponent(self)
numpy.tests.test_io.TestSaveTxt.test_custom_writer(self)
numpy.tests.test_io.TestSaveTxt.test_delimiter(self)
numpy.tests.test_io.TestSaveTxt.test_file_roundtrip(self)
numpy.tests.test_io.TestSaveTxt.test_format(self)
numpy.tests.test_io.TestSaveTxt.test_header_footer(self)
numpy.tests.test_io.TestSaveTxt.test_large_zip(self)
numpy.tests.test_io.TestSaveTxt.test_multifield_view(self)
numpy.tests.test_io.TestSaveTxt.test_structured(self)
numpy.tests.test_io.TestSaveTxt.test_structured_padded(self)
numpy.tests.test_io.TestSaveTxt.test_unicode(self)
numpy.tests.test_io.TestSaveTxt.test_unicode_and_bytes_fmt(self,fmt,iotype)
numpy.tests.test_io.TestSaveTxt.test_unicode_bytestream(self)
numpy.tests.test_io.TestSaveTxt.test_unicode_roundtrip(self)
numpy.tests.test_io.TestSaveTxt.test_unicode_stringstream(self)
numpy.tests.test_io.TestSavezLoad(RoundtripTest)
numpy.tests.test_io.TestSavezLoad.roundtrip(self,*args,**kwargs)
numpy.tests.test_io.TestSavezLoad.test_BagObj(self)
numpy.tests.test_io.TestSavezLoad.test_big_arrays(self)
numpy.tests.test_io.TestSavezLoad.test_closing_fid(self)
numpy.tests.test_io.TestSavezLoad.test_closing_zipfile_after_load(self)
numpy.tests.test_io.TestSavezLoad.test_multiple_arrays(self)
numpy.tests.test_io.TestSavezLoad.test_named_arrays(self)
numpy.tests.test_io.TestSavezLoad.test_not_closing_opened_fid(self)
numpy.tests.test_io.TestSavezLoad.test_savez_filename_clashes(self)
numpy.tests.test_io.Testfromregex
numpy.tests.test_io.Testfromregex.test_compiled_bytes(self)
numpy.tests.test_io.Testfromregex.test_record(self)
numpy.tests.test_io.Testfromregex.test_record_2(self)
numpy.tests.test_io.Testfromregex.test_record_3(self)
numpy.tests.test_io.Testfromregex.test_record_unicode(self)
numpy.tests.test_io.TextIO(self,s='')
numpy.tests.test_io.TextIO.write(self,s)
numpy.tests.test_io.TextIO.writelines(self,lines)
numpy.tests.test_io.strptime(s,fmt=None)
numpy.tests.test_io.test_ducktyping()
numpy.tests.test_io.test_gzip_load()
numpy.tests.test_io.test_gzip_loadtxt()
numpy.tests.test_io.test_gzip_loadtxt_from_string()
numpy.tests.test_io.test_load_refcount()
numpy.tests.test_io.test_npzfile_dict()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_twodim_base.py----------------------------------------
A:numpy.lib.tests.test_twodim_base.data->numpy.add.outer(data, data)
A:numpy.lib.tests.test_twodim_base.mat_c->eye(4, 3, k=-1)
A:numpy.lib.tests.test_twodim_base.mat_f->eye(4, 3, k=-1, order='F')
A:numpy.lib.tests.test_twodim_base.vals->array(100 * get_mat(5) + 1, order='F', dtype='l')
A:numpy.lib.tests.test_twodim_base.b->numpy.arange(1, 21).reshape(4, 5)
A:numpy.lib.tests.test_twodim_base.c->array([1.0 + 1j, 1.0 - 1j])
A:numpy.lib.tests.test_twodim_base.a->numpy.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])
A:numpy.lib.tests.test_twodim_base.x->array([0, 0.09207008, 0.64575234, 0.12875982, 0.47390599, 0.59944483, 1])
A:numpy.lib.tests.test_twodim_base.y->array([0, 0.14344267, 0.48988575, 0.30558665, 0.44700682, 0.15886423, 1])
A:numpy.lib.tests.test_twodim_base.xedges->numpy.linspace(0, 1, 10)
A:numpy.lib.tests.test_twodim_base.yedges->numpy.linspace(0, 1, 10)
A:numpy.lib.tests.test_twodim_base.answer->array([[1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]])
A:numpy.lib.tests.test_twodim_base.(H, xedges, yedges)->histogram2d(list(range(10)), list(range(10)))
A:numpy.lib.tests.test_twodim_base.(H, xed, yed)->histogram2d(r, r, (4, 5), range=([0, 1], [0, 1]))
A:numpy.lib.tests.test_twodim_base.(a, edge1, edge2)->histogram2d([], [], bins=4)
A:numpy.lib.tests.test_twodim_base.(H, xe, ye)->histogram2d(x, y, (4, edges))
A:numpy.lib.tests.test_twodim_base.s_d->ShouldDispatch()
A:numpy.lib.tests.test_twodim_base.r->histogram2d(xy, xy, weights=s_d)
A:numpy.lib.tests.test_twodim_base.out->array([[1, 0, 0], [1, 1, 0], [1, 1, 1]])
A:numpy.lib.tests.test_twodim_base.a_tril_desired->numpy.array([[[1, 0], [1, 1]], [[1, 0], [1, 0]], [[1, 0], [0, 0]]], dtype=dtype)
A:numpy.lib.tests.test_twodim_base.a_triu_desired->numpy.array([[[1, 1], [0, 1]], [[1, 1], [0, 0]], [[1, 1], [0, 0]]], dtype=dtype)
A:numpy.lib.tests.test_twodim_base.a_triu_observed->numpy.triu(a)
A:numpy.lib.tests.test_twodim_base.a_tril_observed->numpy.tril(a)
A:numpy.lib.tests.test_twodim_base.arr->numpy.zeros((3, 3), dtype='f4,f4')
A:numpy.lib.tests.test_twodim_base.out_tril->numpy.array([[1, 0, 0], [1, 1, 0], [np.inf, 1, 1]])
A:numpy.lib.tests.test_twodim_base.iu->mask_indices(3, np.triu)
A:numpy.lib.tests.test_twodim_base.iu1->triu_indices(4)
A:numpy.lib.tests.test_twodim_base.il1->tril_indices(4)
A:numpy.lib.tests.test_twodim_base.il2->tril_indices(4, k=2)
A:numpy.lib.tests.test_twodim_base.il3->tril_indices(4, m=5)
A:numpy.lib.tests.test_twodim_base.il4->tril_indices(4, k=2, m=5)
A:numpy.lib.tests.test_twodim_base.iu2->triu_indices(4, k=2)
A:numpy.lib.tests.test_twodim_base.iu3->triu_indices(4, m=5)
A:numpy.lib.tests.test_twodim_base.iu4->triu_indices(4, k=2, m=5)
A:numpy.lib.tests.test_twodim_base.v->vander(c, N=3)
A:numpy.lib.tests.test_twodim_base.powers->numpy.array([[0, 0, 0, 0, 1], [1, 1, 1, 1, 1], [16, -8, 4, -2, 1], [81, 27, 9, 3, 1]])
A:numpy.lib.tests.test_twodim_base.expected->numpy.array([[2j, 1 + 1j, 1], [-2j, 1 - 1j, 1]])
numpy.lib.tests.test_twodim_base.TestDiag
numpy.lib.tests.test_twodim_base.TestDiag.test_diag_bounds(self)
numpy.lib.tests.test_twodim_base.TestDiag.test_failure(self)
numpy.lib.tests.test_twodim_base.TestDiag.test_fortran_order(self)
numpy.lib.tests.test_twodim_base.TestDiag.test_matrix(self,vals=None)
numpy.lib.tests.test_twodim_base.TestDiag.test_vector(self)
numpy.lib.tests.test_twodim_base.TestEye
numpy.lib.tests.test_twodim_base.TestEye.test_2d(self)
numpy.lib.tests.test_twodim_base.TestEye.test_basic(self)
numpy.lib.tests.test_twodim_base.TestEye.test_bool(self)
numpy.lib.tests.test_twodim_base.TestEye.test_diag(self)
numpy.lib.tests.test_twodim_base.TestEye.test_diag2d(self)
numpy.lib.tests.test_twodim_base.TestEye.test_eye_bounds(self)
numpy.lib.tests.test_twodim_base.TestEye.test_order(self)
numpy.lib.tests.test_twodim_base.TestEye.test_strings(self)
numpy.lib.tests.test_twodim_base.TestFliplr
numpy.lib.tests.test_twodim_base.TestFliplr.test_basic(self)
numpy.lib.tests.test_twodim_base.TestFlipud
numpy.lib.tests.test_twodim_base.TestFlipud.test_basic(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_all_outliers(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_asym(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_binparameter_combination(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_density(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_dispatch(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_empty(self)
numpy.lib.tests.test_twodim_base.TestHistogram2d.test_simple(self)
numpy.lib.tests.test_twodim_base.TestTri
numpy.lib.tests.test_twodim_base.TestTri.test_dtype(self)
numpy.lib.tests.test_twodim_base.TestTrilIndicesFrom
numpy.lib.tests.test_twodim_base.TestTrilIndicesFrom.test_exceptions(self)
numpy.lib.tests.test_twodim_base.TestTriuIndices
numpy.lib.tests.test_twodim_base.TestTriuIndices.test_triu_indices(self)
numpy.lib.tests.test_twodim_base.TestTriuIndicesFrom
numpy.lib.tests.test_twodim_base.TestTriuIndicesFrom.test_exceptions(self)
numpy.lib.tests.test_twodim_base.TestVander
numpy.lib.tests.test_twodim_base.TestVander.test_basic(self)
numpy.lib.tests.test_twodim_base.TestVander.test_dtypes(self)
numpy.lib.tests.test_twodim_base.get_mat(n)
numpy.lib.tests.test_twodim_base.test_mask_indices()
numpy.lib.tests.test_twodim_base.test_tril_indices()
numpy.lib.tests.test_twodim_base.test_tril_triu_dtype()
numpy.lib.tests.test_twodim_base.test_tril_triu_ndim2()
numpy.lib.tests.test_twodim_base.test_tril_triu_ndim3()
numpy.lib.tests.test_twodim_base.test_tril_triu_with_inf()
numpy.tests.test_TestDiag
numpy.tests.test_TestDiag.test_diag_bounds(self)
numpy.tests.test_TestDiag.test_failure(self)
numpy.tests.test_TestDiag.test_fortran_order(self)
numpy.tests.test_TestDiag.test_matrix(self,vals=None)
numpy.tests.test_TestDiag.test_vector(self)
numpy.tests.test_TestEye
numpy.tests.test_TestEye.test_2d(self)
numpy.tests.test_TestEye.test_basic(self)
numpy.tests.test_TestEye.test_bool(self)
numpy.tests.test_TestEye.test_diag(self)
numpy.tests.test_TestEye.test_diag2d(self)
numpy.tests.test_TestEye.test_eye_bounds(self)
numpy.tests.test_TestEye.test_order(self)
numpy.tests.test_TestEye.test_strings(self)
numpy.tests.test_TestFliplr
numpy.tests.test_TestFliplr.test_basic(self)
numpy.tests.test_TestFlipud
numpy.tests.test_TestFlipud.test_basic(self)
numpy.tests.test_TestHistogram2d
numpy.tests.test_TestHistogram2d.test_all_outliers(self)
numpy.tests.test_TestHistogram2d.test_asym(self)
numpy.tests.test_TestHistogram2d.test_binparameter_combination(self)
numpy.tests.test_TestHistogram2d.test_density(self)
numpy.tests.test_TestHistogram2d.test_dispatch(self)
numpy.tests.test_TestHistogram2d.test_empty(self)
numpy.tests.test_TestHistogram2d.test_simple(self)
numpy.tests.test_TestTri
numpy.tests.test_TestTri.test_dtype(self)
numpy.tests.test_TestTrilIndicesFrom
numpy.tests.test_TestTrilIndicesFrom.test_exceptions(self)
numpy.tests.test_TestTriuIndices
numpy.tests.test_TestTriuIndices.test_triu_indices(self)
numpy.tests.test_TestTriuIndicesFrom
numpy.tests.test_TestTriuIndicesFrom.test_exceptions(self)
numpy.tests.test_TestVander
numpy.tests.test_TestVander.test_basic(self)
numpy.tests.test_TestVander.test_dtypes(self)
numpy.tests.test_get_mat(n)
numpy.tests.test_test_mask_indices()
numpy.tests.test_test_tril_indices()
numpy.tests.test_test_tril_triu_dtype()
numpy.tests.test_test_tril_triu_ndim2()
numpy.tests.test_test_tril_triu_ndim3()
numpy.tests.test_test_tril_triu_with_inf()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_polynomial.py----------------------------------------
A:numpy.lib.tests.test_polynomial.p->numpy.poly1d([1, 2, 3])
A:numpy.lib.tests.test_polynomial.q->numpy.poly1d([1.0, 2, 3], variable='lambda')
A:numpy.lib.tests.test_polynomial.r->numpy.poly1d([1.89999 + 2j, -3j, -5.12345678, 2 + 1j])
A:numpy.lib.tests.test_polynomial.c->numpy.array([3.0, 2.0, 1.0])
A:numpy.lib.tests.test_polynomial.x->numpy.linspace(0, 2, 7)
A:numpy.lib.tests.test_polynomial.y->numpy.random.normal(size=(4, 10000))
A:numpy.lib.tests.test_polynomial.(m, cov)->numpy.polyfit(x, yy + np.array(err)[:, np.newaxis], 2, cov=True)
A:numpy.lib.tests.test_polynomial.(m2, cov2)->numpy.polyfit(x, y + err, 2, w=weights, cov=True)
A:numpy.lib.tests.test_polynomial.(m3, cov3)->numpy.polyfit(x, y + err, 2, w=weights, cov='unscaled')
A:numpy.lib.tests.test_polynomial.yy->numpy.concatenate((y, y), axis=1)
A:numpy.lib.tests.test_polynomial.cc->numpy.concatenate((c, c), axis=1)
A:numpy.lib.tests.test_polynomial.(mean, cov)->numpy.polyfit(np.zeros(y.shape[0]), y, w=w, deg=0, cov='unscaled')
A:numpy.lib.tests.test_polynomial.w->numpy.full(y.shape[0], 1.0 / 0.5)
A:numpy.lib.tests.test_polynomial.p2->numpy.poly1d([1, 2, 4])
A:numpy.lib.tests.test_polynomial.v->numpy.arange(1, 21)
A:numpy.lib.tests.test_polynomial.z->numpy.array([0, 0, 0])
A:numpy.lib.tests.test_polynomial.b->numpy.poly1d([2, 6, 6, 1])
A:numpy.lib.tests.test_polynomial.a->numpy.poly1d([-1j, 1 + 2j, -(2 + 1j), 1])
A:numpy.lib.tests.test_polynomial.(q, r)->numpy.polydiv(b, a)
A:numpy.lib.tests.test_polynomial.d->numpy.poly1d([1, 2, 3])
A:numpy.lib.tests.test_polynomial.(s, t)->numpy.polydiv(c, d)
A:numpy.lib.tests.test_polynomial.(u, v)->numpy.polydiv(d, c)
numpy.lib.tests.test_polynomial.TestPolynomial
numpy.lib.tests.test_polynomial.TestPolynomial.test_complex(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_integ_coeffs(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_objects(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly1d_math(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly1d_misc(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly1d_resolution(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly1d_str_and_repr(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly1d_variable_arg(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly_coeffs_mutable(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly_eq(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_poly_int_overflow(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_polydiv(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_polyfit(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_roots(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_str_leading_zeros(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_zero_dims(self)
numpy.lib.tests.test_polynomial.TestPolynomial.test_zero_poly_dtype(self)
numpy.tests.test_TestPolynomial
numpy.tests.test_TestPolynomial.test_complex(self)
numpy.tests.test_TestPolynomial.test_integ_coeffs(self)
numpy.tests.test_TestPolynomial.test_objects(self)
numpy.tests.test_TestPolynomial.test_poly(self)
numpy.tests.test_TestPolynomial.test_poly1d_math(self)
numpy.tests.test_TestPolynomial.test_poly1d_misc(self)
numpy.tests.test_TestPolynomial.test_poly1d_resolution(self)
numpy.tests.test_TestPolynomial.test_poly1d_str_and_repr(self)
numpy.tests.test_TestPolynomial.test_poly1d_variable_arg(self)
numpy.tests.test_TestPolynomial.test_poly_coeffs_mutable(self)
numpy.tests.test_TestPolynomial.test_poly_eq(self)
numpy.tests.test_TestPolynomial.test_poly_int_overflow(self)
numpy.tests.test_TestPolynomial.test_polydiv(self)
numpy.tests.test_TestPolynomial.test_polyfit(self)
numpy.tests.test_TestPolynomial.test_roots(self)
numpy.tests.test_TestPolynomial.test_str_leading_zeros(self)
numpy.tests.test_TestPolynomial.test_zero_dims(self)
numpy.tests.test_TestPolynomial.test_zero_poly_dtype(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test__iotools.py----------------------------------------
A:numpy.lib.tests.test__iotools.test->convert('')
A:numpy.lib.tests.test__iotools.validator->NameValidator()
A:numpy.lib.tests.test__iotools.converter->StringConverter(np.uint64, default=0)
A:numpy.lib.tests.test__iotools.status_offset->int(nx.dtype(nx.int_).itemsize < nx.dtype(nx.int64).itemsize)
A:numpy.lib.tests.test__iotools.res->StringConverter(np.uint64, default=0).upgrade(s)
A:numpy.lib.tests.test__iotools.convert->StringConverter(dateparser, date(2000, 1, 1))
A:numpy.lib.tests.test__iotools.conv->StringConverter(_bytes_to_date)
A:numpy.lib.tests.test__iotools.ndtype->numpy.dtype(float)
A:numpy.lib.tests.test__iotools.dt->numpy.dtype([(('a', 'A'), 'f8'), (('b', 'B'), 'f8')])
A:numpy.lib.tests.test__iotools.dt_flat->flatten_dtype(dt)
numpy.lib.tests.test__iotools.TestLineSplitter
numpy.lib.tests.test__iotools.TestLineSplitter.test_constant_fixed_width(self)
numpy.lib.tests.test__iotools.TestLineSplitter.test_no_delimiter(self)
numpy.lib.tests.test__iotools.TestLineSplitter.test_other_delimiter(self)
numpy.lib.tests.test__iotools.TestLineSplitter.test_space_delimiter(self)
numpy.lib.tests.test__iotools.TestLineSplitter.test_tab_delimiter(self)
numpy.lib.tests.test__iotools.TestLineSplitter.test_variable_fixed_width(self)
numpy.lib.tests.test__iotools.TestMiscFunctions
numpy.lib.tests.test__iotools.TestMiscFunctions.test_easy_dtype(self)
numpy.lib.tests.test__iotools.TestMiscFunctions.test_flatten_dtype(self)
numpy.lib.tests.test__iotools.TestMiscFunctions.test_has_nested_dtype(self)
numpy.lib.tests.test__iotools.TestNameValidator
numpy.lib.tests.test__iotools.TestNameValidator.test_case_sensitivity(self)
numpy.lib.tests.test__iotools.TestNameValidator.test_excludelist(self)
numpy.lib.tests.test__iotools.TestNameValidator.test_missing_names(self)
numpy.lib.tests.test__iotools.TestNameValidator.test_validate_nb_names(self)
numpy.lib.tests.test__iotools.TestNameValidator.test_validate_wo_names(self)
numpy.lib.tests.test__iotools.TestStringConverter
numpy.lib.tests.test__iotools.TestStringConverter.test_creation(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_int64_dtype(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_keep_default(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_keep_default_zero(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_keep_missing_values(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_missing(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_string_to_object(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_uint64_dtype(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_upgrade(self)
numpy.lib.tests.test__iotools.TestStringConverter.test_upgrademapper(self)
numpy.lib.tests.test__iotools._bytes_to_date(s)
numpy.tests.test__iotools.TestLineSplitter
numpy.tests.test__iotools.TestLineSplitter.test_constant_fixed_width(self)
numpy.tests.test__iotools.TestLineSplitter.test_no_delimiter(self)
numpy.tests.test__iotools.TestLineSplitter.test_other_delimiter(self)
numpy.tests.test__iotools.TestLineSplitter.test_space_delimiter(self)
numpy.tests.test__iotools.TestLineSplitter.test_tab_delimiter(self)
numpy.tests.test__iotools.TestLineSplitter.test_variable_fixed_width(self)
numpy.tests.test__iotools.TestMiscFunctions
numpy.tests.test__iotools.TestMiscFunctions.test_easy_dtype(self)
numpy.tests.test__iotools.TestMiscFunctions.test_flatten_dtype(self)
numpy.tests.test__iotools.TestMiscFunctions.test_has_nested_dtype(self)
numpy.tests.test__iotools.TestNameValidator
numpy.tests.test__iotools.TestNameValidator.test_case_sensitivity(self)
numpy.tests.test__iotools.TestNameValidator.test_excludelist(self)
numpy.tests.test__iotools.TestNameValidator.test_missing_names(self)
numpy.tests.test__iotools.TestNameValidator.test_validate_nb_names(self)
numpy.tests.test__iotools.TestNameValidator.test_validate_wo_names(self)
numpy.tests.test__iotools.TestStringConverter
numpy.tests.test__iotools.TestStringConverter.test_creation(self)
numpy.tests.test__iotools.TestStringConverter.test_int64_dtype(self)
numpy.tests.test__iotools.TestStringConverter.test_keep_default(self)
numpy.tests.test__iotools.TestStringConverter.test_keep_default_zero(self)
numpy.tests.test__iotools.TestStringConverter.test_keep_missing_values(self)
numpy.tests.test__iotools.TestStringConverter.test_missing(self)
numpy.tests.test__iotools.TestStringConverter.test_string_to_object(self)
numpy.tests.test__iotools.TestStringConverter.test_uint64_dtype(self)
numpy.tests.test__iotools.TestStringConverter.test_upgrade(self)
numpy.tests.test__iotools.TestStringConverter.test_upgrademapper(self)
numpy.tests.test__iotools._bytes_to_date(s)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_financial_expired.py----------------------------------------
numpy.lib.tests.test_financial_expired.test_financial_expired()
numpy.tests.test_financial_expired.test_financial_expired()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_nanfunctions.py----------------------------------------
A:numpy.lib.tests.test_nanfunctions._ndat->numpy.array([[0.6244, np.nan, 0.2692, 0.0116, np.nan, 0.117], [0.5351, -0.9403, np.nan, 0.21, 0.4759, 0.2833], [np.nan, np.nan, np.nan, 0.1042, np.nan, -0.5954], [0.161, np.nan, np.nan, 0.1859, 0.3146, np.nan]])
A:numpy.lib.tests.test_nanfunctions._ndat_ones->numpy.array([[0.6244, 1.0, 0.2692, 0.0116, 1.0, 0.117], [0.5351, -0.9403, 1.0, 0.21, 0.4759, 0.2833], [1.0, 1.0, 1.0, 0.1042, 1.0, -0.5954], [0.161, 1.0, 1.0, 0.1859, 0.3146, 1.0]])
A:numpy.lib.tests.test_nanfunctions._ndat_zeros->numpy.array([[0.6244, 0.0, 0.2692, 0.0116, 0.0, 0.117], [0.5351, -0.9403, 0.0, 0.21, 0.4759, 0.2833], [0.0, 0.0, 0.0, 0.1042, 0.0, -0.5954], [0.161, 0.0, 0.0, 0.1859, 0.3146, 0.0]])
A:numpy.lib.tests.test_nanfunctions.ndat->numpy.array([[0.6244, np.nan, 0.2692, 0.0116, np.nan, 0.117], [0.5351, -0.9403, np.nan, 0.21, 0.4759, 0.2833], [np.nan, np.nan, np.nan, 0.1042, np.nan, -0.5954], [0.161, np.nan, np.nan, 0.1859, 0.3146, np.nan]]).copy()
A:numpy.lib.tests.test_nanfunctions.mat->numpy.ones((4, 3))
A:numpy.lib.tests.test_nanfunctions.tgt->numpy.transpose([np.percentile(d, (28, 98)) for d in _rdat])
A:numpy.lib.tests.test_nanfunctions.res->numpy.nanpercentile(_ndat, (28, 98), axis=1)
A:numpy.lib.tests.test_nanfunctions.resout->numpy.zeros(())
A:numpy.lib.tests.test_nanfunctions.msk->numpy.ones((4, 3))._mask.copy()
A:numpy.lib.tests.test_nanfunctions.mine->numpy.eye(3).view(MyNDArray)
A:numpy.lib.tests.test_nanfunctions.arr->numpy.array([0, 1], dtype=dtype)
A:numpy.lib.tests.test_nanfunctions.ind->f(row)
A:numpy.lib.tests.test_nanfunctions.array->numpy.eye(3)
A:numpy.lib.tests.test_nanfunctions.d->numpy.ones((3, 5, 7, 11))
A:numpy.lib.tests.test_nanfunctions.rs->numpy.random.RandomState(0)
A:numpy.lib.tests.test_nanfunctions.out->numpy.empty(_ndat.shape[0], dtype=dtype)
A:numpy.lib.tests.test_nanfunctions._TYPE_CODES->list(np.typecodes['AllFloat'])
A:numpy.lib.tests.test_nanfunctions.w->w.astype(np.intp).astype(np.intp)
A:numpy.lib.tests.test_nanfunctions.nan_mat->numpy.insert(mat, [0, 2], np.nan, axis=1)
A:numpy.lib.tests.test_nanfunctions.nonan->numpy.compress(~np.isnan(x), x)
A:numpy.lib.tests.test_nanfunctions.output->numpy.nanmedian(mat, axis=axis)
A:numpy.lib.tests.test_nanfunctions.output_scalar->numpy.nanmedian(scalar)
A:numpy.lib.tests.test_nanfunctions.a->numpy.arange(6)
A:numpy.lib.tests.test_nanfunctions.r->numpy.nanpercentile(a, 50, axis=0)
A:numpy.lib.tests.test_nanfunctions.large_mat->numpy.ones((3, 4, 5))
A:numpy.lib.tests.test_nanfunctions.val->numpy.percentile(large_mat, perc, axis=axis, keepdims=keepdim)
A:numpy.lib.tests.test_nanfunctions.nan_val->numpy.nanpercentile(large_mat, perc, axis=axis, keepdims=keepdim)
A:numpy.lib.tests.test_nanfunctions.megamat->numpy.ones((3, 4, 5, 6))
A:numpy.lib.tests.test_nanfunctions.ar->numpy.arange(24).reshape(2, 3, 4).astype(float)
A:numpy.lib.tests.test_nanfunctions.p0->p0.tolist().tolist()
A:numpy.lib.tests.test_nanfunctions.p->p.tolist().tolist()
A:numpy.lib.tests.test_nanfunctions.actual->_nan_mask(arr, out=out)
A:numpy.lib.tests.test_nanfunctions.(result, mask)->_replace_nan(arr, 2)
A:numpy.lib.tests.test_nanfunctions.arr_nan->numpy.array([0, 1, np.nan], dtype=dtype)
A:numpy.lib.tests.test_nanfunctions.(result_nan, mask_nan)->_replace_nan(arr_nan, 2)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_dtype_from_char(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_dtype_from_dtype(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_dtype_from_input(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_keepdims(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_mutation(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_out(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_result_values(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_scalar(self)
numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_subclass(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_allnans(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_empty(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_mutation(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_result_values(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_scalar(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_subclass(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd(SharedNanFunctionsTestsMixin)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_allnans(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_empty(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_keepdims(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_out(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_result_values(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.integer_arrays(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanargmax(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanargmin(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nancumprod(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nancumsum(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanmax(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanmean(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanmin(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanprod(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanstd(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nansum(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanvar(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd(SharedNanFunctionsTestsMixin)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_allnans(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_ddof(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_ddof_too_big(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_dtype_error(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_empty(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_out_dtype_error(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_allnans(self,dtype,axis)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_empty(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_extended_axis_invalid(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_float_special(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_keepdims(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_mutation(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_out(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_result_values(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_scalar(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_small_large(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_allnans(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_dtype_from_input(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_keepdims(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_masked(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_mutation(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_object_array(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_out(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_result_values(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_scalar(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_subclass(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_allnans(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_empty(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_extended_axis_invalid(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_keepdims(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_multiple_percentiles(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_mutation(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_out(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_result_values(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_scalar(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile.test_basic(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile.test_no_p_overwrite(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile.test_regression(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_SumProd(SharedNanFunctionsTestsMixin)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_SumProd.test_allnans(self)
numpy.lib.tests.test_nanfunctions.TestNanFunctions_SumProd.test_empty(self)
numpy.lib.tests.test_nanfunctions.test__nan_mask(arr,expected)
numpy.lib.tests.test_nanfunctions.test__replace_nan()
numpy.tests.test_SharedNanFunctionsTestsMixin
numpy.tests.test_SharedNanFunctionsTestsMixin.test_dtype_from_char(self)
numpy.tests.test_SharedNanFunctionsTestsMixin.test_dtype_from_dtype(self)
numpy.tests.test_SharedNanFunctionsTestsMixin.test_dtype_from_input(self)
numpy.tests.test_SharedNanFunctionsTestsMixin.test_keepdims(self)
numpy.tests.test_SharedNanFunctionsTestsMixin.test_mutation(self)
numpy.tests.test_SharedNanFunctionsTestsMixin.test_out(self)
numpy.tests.test_SharedNanFunctionsTestsMixin.test_result_values(self)
numpy.tests.test_SharedNanFunctionsTestsMixin.test_scalar(self)
numpy.tests.test_SharedNanFunctionsTestsMixin.test_subclass(self)
numpy.tests.test_TestNanFunctions_ArgminArgmax
numpy.tests.test_TestNanFunctions_ArgminArgmax.test_allnans(self)
numpy.tests.test_TestNanFunctions_ArgminArgmax.test_empty(self)
numpy.tests.test_TestNanFunctions_ArgminArgmax.test_mutation(self)
numpy.tests.test_TestNanFunctions_ArgminArgmax.test_result_values(self)
numpy.tests.test_TestNanFunctions_ArgminArgmax.test_scalar(self)
numpy.tests.test_TestNanFunctions_ArgminArgmax.test_subclass(self)
numpy.tests.test_TestNanFunctions_CumSumProd(SharedNanFunctionsTestsMixin)
numpy.tests.test_TestNanFunctions_CumSumProd.test_allnans(self)
numpy.tests.test_TestNanFunctions_CumSumProd.test_empty(self)
numpy.tests.test_TestNanFunctions_CumSumProd.test_keepdims(self)
numpy.tests.test_TestNanFunctions_CumSumProd.test_out(self)
numpy.tests.test_TestNanFunctions_CumSumProd.test_result_values(self)
numpy.tests.test_TestNanFunctions_IntTypes
numpy.tests.test_TestNanFunctions_IntTypes.integer_arrays(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nanargmax(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nanargmin(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nancumprod(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nancumsum(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nanmax(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nanmean(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nanmin(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nanprod(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nanstd(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nansum(self)
numpy.tests.test_TestNanFunctions_IntTypes.test_nanvar(self)
numpy.tests.test_TestNanFunctions_MeanVarStd(SharedNanFunctionsTestsMixin)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_allnans(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_ddof(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_ddof_too_big(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_dtype_error(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_empty(self)
numpy.tests.test_TestNanFunctions_MeanVarStd.test_out_dtype_error(self)
numpy.tests.test_TestNanFunctions_Median
numpy.tests.test_TestNanFunctions_Median.test_allnans(self,dtype,axis)
numpy.tests.test_TestNanFunctions_Median.test_empty(self)
numpy.tests.test_TestNanFunctions_Median.test_extended_axis_invalid(self)
numpy.tests.test_TestNanFunctions_Median.test_float_special(self)
numpy.tests.test_TestNanFunctions_Median.test_keepdims(self)
numpy.tests.test_TestNanFunctions_Median.test_mutation(self)
numpy.tests.test_TestNanFunctions_Median.test_out(self)
numpy.tests.test_TestNanFunctions_Median.test_result_values(self)
numpy.tests.test_TestNanFunctions_Median.test_scalar(self)
numpy.tests.test_TestNanFunctions_Median.test_small_large(self)
numpy.tests.test_TestNanFunctions_MinMax
numpy.tests.test_TestNanFunctions_MinMax.test_allnans(self)
numpy.tests.test_TestNanFunctions_MinMax.test_dtype_from_input(self)
numpy.tests.test_TestNanFunctions_MinMax.test_keepdims(self)
numpy.tests.test_TestNanFunctions_MinMax.test_masked(self)
numpy.tests.test_TestNanFunctions_MinMax.test_mutation(self)
numpy.tests.test_TestNanFunctions_MinMax.test_object_array(self)
numpy.tests.test_TestNanFunctions_MinMax.test_out(self)
numpy.tests.test_TestNanFunctions_MinMax.test_result_values(self)
numpy.tests.test_TestNanFunctions_MinMax.test_scalar(self)
numpy.tests.test_TestNanFunctions_MinMax.test_subclass(self)
numpy.tests.test_TestNanFunctions_Percentile
numpy.tests.test_TestNanFunctions_Percentile.test_allnans(self)
numpy.tests.test_TestNanFunctions_Percentile.test_empty(self)
numpy.tests.test_TestNanFunctions_Percentile.test_extended_axis_invalid(self)
numpy.tests.test_TestNanFunctions_Percentile.test_keepdims(self)
numpy.tests.test_TestNanFunctions_Percentile.test_multiple_percentiles(self)
numpy.tests.test_TestNanFunctions_Percentile.test_mutation(self)
numpy.tests.test_TestNanFunctions_Percentile.test_out(self)
numpy.tests.test_TestNanFunctions_Percentile.test_result_values(self)
numpy.tests.test_TestNanFunctions_Percentile.test_scalar(self)
numpy.tests.test_TestNanFunctions_Quantile
numpy.tests.test_TestNanFunctions_Quantile.test_basic(self)
numpy.tests.test_TestNanFunctions_Quantile.test_no_p_overwrite(self)
numpy.tests.test_TestNanFunctions_Quantile.test_regression(self)
numpy.tests.test_TestNanFunctions_SumProd(SharedNanFunctionsTestsMixin)
numpy.tests.test_TestNanFunctions_SumProd.test_allnans(self)
numpy.tests.test_TestNanFunctions_SumProd.test_empty(self)
numpy.tests.test_test__nan_mask(arr,expected)
numpy.tests.test_test__replace_nan()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_ufunclike.py----------------------------------------
A:numpy.lib.tests.test_ufunclike.a->numpy.core.array([1.1, -1.1])
A:numpy.lib.tests.test_ufunclike.out->numpy.array(0.0)
A:numpy.lib.tests.test_ufunclike.tgt->numpy.core.array([[1.0, 1.0, 1.0, 1.0], [-1.0, -1.0, -1.0, -1.0]])
A:numpy.lib.tests.test_ufunclike.res->numpy.core.array(data, copy=True).view(cls)
A:numpy.lib.tests.test_ufunclike.self.metadata->getattr(obj, 'metadata', None)
A:numpy.lib.tests.test_ufunclike.m->MyArray(a, metadata='foo')
A:numpy.lib.tests.test_ufunclike.f->numpy.lib.ufunclike.fix(m)
A:numpy.lib.tests.test_ufunclike.f0d->numpy.lib.ufunclike.fix(m0d)
A:numpy.lib.tests.test_ufunclike.actual->numpy.fix(x, out=out)
A:numpy.lib.tests.test_ufunclike.expected->numpy.float64(-3.0)
numpy.lib.tests.test_ufunclike.TestUfunclike
numpy.lib.tests.test_ufunclike.TestUfunclike.test_deprecated(self)
numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix(self)
numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass(self)
numpy.lib.tests.test_ufunclike.TestUfunclike.test_isneginf(self)
numpy.lib.tests.test_ufunclike.TestUfunclike.test_isposinf(self)
numpy.lib.tests.test_ufunclike.TestUfunclike.test_scalar(self)
numpy.tests.test_TestUfunclike
numpy.tests.test_TestUfunclike.test_deprecated(self)
numpy.tests.test_TestUfunclike.test_fix(self)
numpy.tests.test_TestUfunclike.test_fix_with_subclass(self)
numpy.tests.test_TestUfunclike.test_isneginf(self)
numpy.tests.test_TestUfunclike.test_isposinf(self)
numpy.tests.test_TestUfunclike.test_scalar(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test__datasource.py----------------------------------------
A:numpy.lib.tests.test__datasource.tmpfile->valid_textfile(local_path)
A:numpy.lib.tests.test__datasource.(fd, path)->mkstemp(suffix='.txt', prefix='dstmp_', dir=filedir)
A:numpy.lib.tests.test__datasource.self.tmpdir->mkdtemp()
A:numpy.lib.tests.test__datasource.self.ds->numpy.lib._datasource.DataSource(self.tmpdir)
A:numpy.lib.tests.test__datasource.fh->self.ds.open(local_file)
A:numpy.lib.tests.test__datasource.url->invalid_httpurl()
A:numpy.lib.tests.test__datasource.local_file->valid_textfile(self.tmpdir)
A:numpy.lib.tests.test__datasource.invalid_file->invalid_textfile(self.tmpdir)
A:numpy.lib.tests.test__datasource.filepath->self.repos.abspath(valid_httpfile())
A:numpy.lib.tests.test__datasource.fp->numpy.lib._datasource.open(local_file)
A:numpy.lib.tests.test__datasource.result->numpy.lib._datasource.open(local_file).readline()
A:numpy.lib.tests.test__datasource.localdir->mkdtemp()
A:numpy.lib.tests.test__datasource.(scheme, netloc, upath, pms, qry, frg)->urlparse(localfile)
A:numpy.lib.tests.test__datasource.local_path->os.path.join(self.repos._destpath, netloc)
A:numpy.lib.tests.test__datasource.invalidhttp->os.path.join(self.tmpdir, netloc, upath.strip(os.sep).strip('/'))
A:numpy.lib.tests.test__datasource.invalidfile->valid_textfile(self.tmpdir)
A:numpy.lib.tests.test__datasource.self.repos->numpy.lib._datasource.Repository(valid_baseurl(), self.tmpdir)
A:numpy.lib.tests.test__datasource.localfile->valid_httpurl()
A:numpy.lib.tests.test__datasource.ds->numpy.lib._datasource.DataSource()
numpy.lib.tests.test__datasource.TestDataSourceAbspath
numpy.lib.tests.test__datasource.TestDataSourceAbspath.setup(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.teardown(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_InvalidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_InvalidHTTP(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_ValidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_ValidHTTP(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_sandboxing(self)
numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_windows_os_sep(self)
numpy.lib.tests.test__datasource.TestDataSourceExists
numpy.lib.tests.test__datasource.TestDataSourceExists.setup(self)
numpy.lib.tests.test__datasource.TestDataSourceExists.teardown(self)
numpy.lib.tests.test__datasource.TestDataSourceExists.test_InvalidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceExists.test_InvalidHTTP(self)
numpy.lib.tests.test__datasource.TestDataSourceExists.test_ValidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceExists.test_ValidHTTP(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen
numpy.lib.tests.test__datasource.TestDataSourceOpen.setup(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.teardown(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_InvalidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_InvalidHTTP(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_InvalidHTTPCacheURLError(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidBz2File(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidFile(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidGzipFile(self)
numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidHTTP(self)
numpy.lib.tests.test__datasource.TestOpenFunc
numpy.lib.tests.test__datasource.TestOpenFunc.setup(self)
numpy.lib.tests.test__datasource.TestOpenFunc.teardown(self)
numpy.lib.tests.test__datasource.TestOpenFunc.test_DataSourceOpen(self)
numpy.lib.tests.test__datasource.TestRepositoryAbspath
numpy.lib.tests.test__datasource.TestRepositoryAbspath.setup(self)
numpy.lib.tests.test__datasource.TestRepositoryAbspath.teardown(self)
numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_ValidHTTP(self)
numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_sandboxing(self)
numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_windows_os_sep(self)
numpy.lib.tests.test__datasource.TestRepositoryExists
numpy.lib.tests.test__datasource.TestRepositoryExists.setup(self)
numpy.lib.tests.test__datasource.TestRepositoryExists.teardown(self)
numpy.lib.tests.test__datasource.TestRepositoryExists.test_CachedHTTPFile(self)
numpy.lib.tests.test__datasource.TestRepositoryExists.test_InvalidFile(self)
numpy.lib.tests.test__datasource.TestRepositoryExists.test_RemoveHTTPFile(self)
numpy.lib.tests.test__datasource.TestRepositoryExists.test_ValidFile(self)
numpy.lib.tests.test__datasource.invalid_baseurl()
numpy.lib.tests.test__datasource.invalid_httpfile()
numpy.lib.tests.test__datasource.invalid_httpurl()
numpy.lib.tests.test__datasource.invalid_textfile(filedir)
numpy.lib.tests.test__datasource.setup_module()
numpy.lib.tests.test__datasource.teardown_module()
numpy.lib.tests.test__datasource.test_del_attr_handling()
numpy.lib.tests.test__datasource.urlopen_stub(url,data=None)
numpy.lib.tests.test__datasource.valid_baseurl()
numpy.lib.tests.test__datasource.valid_httpfile()
numpy.lib.tests.test__datasource.valid_httpurl()
numpy.lib.tests.test__datasource.valid_textfile(filedir)
numpy.tests.test__datasource.TestDataSourceAbspath
numpy.tests.test__datasource.TestDataSourceAbspath.setup(self)
numpy.tests.test__datasource.TestDataSourceAbspath.teardown(self)
numpy.tests.test__datasource.TestDataSourceAbspath.test_InvalidFile(self)
numpy.tests.test__datasource.TestDataSourceAbspath.test_InvalidHTTP(self)
numpy.tests.test__datasource.TestDataSourceAbspath.test_ValidFile(self)
numpy.tests.test__datasource.TestDataSourceAbspath.test_ValidHTTP(self)
numpy.tests.test__datasource.TestDataSourceAbspath.test_sandboxing(self)
numpy.tests.test__datasource.TestDataSourceAbspath.test_windows_os_sep(self)
numpy.tests.test__datasource.TestDataSourceExists
numpy.tests.test__datasource.TestDataSourceExists.setup(self)
numpy.tests.test__datasource.TestDataSourceExists.teardown(self)
numpy.tests.test__datasource.TestDataSourceExists.test_InvalidFile(self)
numpy.tests.test__datasource.TestDataSourceExists.test_InvalidHTTP(self)
numpy.tests.test__datasource.TestDataSourceExists.test_ValidFile(self)
numpy.tests.test__datasource.TestDataSourceExists.test_ValidHTTP(self)
numpy.tests.test__datasource.TestDataSourceOpen
numpy.tests.test__datasource.TestDataSourceOpen.setup(self)
numpy.tests.test__datasource.TestDataSourceOpen.teardown(self)
numpy.tests.test__datasource.TestDataSourceOpen.test_InvalidFile(self)
numpy.tests.test__datasource.TestDataSourceOpen.test_InvalidHTTP(self)
numpy.tests.test__datasource.TestDataSourceOpen.test_InvalidHTTPCacheURLError(self)
numpy.tests.test__datasource.TestDataSourceOpen.test_ValidBz2File(self)
numpy.tests.test__datasource.TestDataSourceOpen.test_ValidFile(self)
numpy.tests.test__datasource.TestDataSourceOpen.test_ValidGzipFile(self)
numpy.tests.test__datasource.TestDataSourceOpen.test_ValidHTTP(self)
numpy.tests.test__datasource.TestOpenFunc
numpy.tests.test__datasource.TestOpenFunc.setup(self)
numpy.tests.test__datasource.TestOpenFunc.teardown(self)
numpy.tests.test__datasource.TestOpenFunc.test_DataSourceOpen(self)
numpy.tests.test__datasource.TestRepositoryAbspath
numpy.tests.test__datasource.TestRepositoryAbspath.setup(self)
numpy.tests.test__datasource.TestRepositoryAbspath.teardown(self)
numpy.tests.test__datasource.TestRepositoryAbspath.test_ValidHTTP(self)
numpy.tests.test__datasource.TestRepositoryAbspath.test_sandboxing(self)
numpy.tests.test__datasource.TestRepositoryAbspath.test_windows_os_sep(self)
numpy.tests.test__datasource.TestRepositoryExists
numpy.tests.test__datasource.TestRepositoryExists.setup(self)
numpy.tests.test__datasource.TestRepositoryExists.teardown(self)
numpy.tests.test__datasource.TestRepositoryExists.test_CachedHTTPFile(self)
numpy.tests.test__datasource.TestRepositoryExists.test_InvalidFile(self)
numpy.tests.test__datasource.TestRepositoryExists.test_RemoveHTTPFile(self)
numpy.tests.test__datasource.TestRepositoryExists.test_ValidFile(self)
numpy.tests.test__datasource.invalid_baseurl()
numpy.tests.test__datasource.invalid_httpfile()
numpy.tests.test__datasource.invalid_httpurl()
numpy.tests.test__datasource.invalid_textfile(filedir)
numpy.tests.test__datasource.setup_module()
numpy.tests.test__datasource.teardown_module()
numpy.tests.test__datasource.test_del_attr_handling()
numpy.tests.test__datasource.urlopen_stub(url,data=None)
numpy.tests.test__datasource.valid_baseurl()
numpy.tests.test__datasource.valid_httpfile()
numpy.tests.test__datasource.valid_httpurl()
numpy.tests.test__datasource.valid_textfile(filedir)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_utils.py----------------------------------------
A:numpy.lib.tests.test_utils.out->StringIO()
A:numpy.lib.tests.test_utils.new_func3->deprecate(old_func3, old_name='old_func3', new_name='new_func3')
A:numpy.lib.tests.test_utils.new_func4->deprecate(old_func4)
A:numpy.lib.tests.test_utils.new_func5->deprecate(old_func5, message='This function is\ndeprecated.')
A:numpy.lib.tests.test_utils.new_func6->deprecate(old_func6)
A:numpy.lib.tests.test_utils.old_doc->inspect.getdoc(old_func)
A:numpy.lib.tests.test_utils.new_doc->inspect.getdoc(new_func)
A:numpy.lib.tests.test_utils.a->arange(12)
A:numpy.lib.tests.test_utils.(low, high)->numpy.lib.utils.byte_bounds(b)
numpy.lib.tests.test_utils.TestByteBounds
numpy.lib.tests.test_utils.TestByteBounds.test_byte_bounds(self)
numpy.lib.tests.test_utils.TestByteBounds.test_strided(self)
numpy.lib.tests.test_utils.TestByteBounds.test_unusual_order_negative_stride(self)
numpy.lib.tests.test_utils.TestByteBounds.test_unusual_order_positive_stride(self)
numpy.lib.tests.test_utils._compare_docs(old_func,new_func)
numpy.lib.tests.test_utils.old_func(self,x)
numpy.lib.tests.test_utils.old_func2(self,x)
numpy.lib.tests.test_utils.old_func3(self,x)
numpy.lib.tests.test_utils.old_func4(self,x)
numpy.lib.tests.test_utils.old_func5(self,x)
numpy.lib.tests.test_utils.old_func6(self,x)
numpy.lib.tests.test_utils.old_func7(self,x)
numpy.lib.tests.test_utils.test_assert_raises_regex_context_manager()
numpy.lib.tests.test_utils.test_deprecate_decorator()
numpy.lib.tests.test_utils.test_deprecate_decorator_message()
numpy.lib.tests.test_utils.test_deprecate_fn()
numpy.lib.tests.test_utils.test_deprecate_help_indentation(old_func,new_func)
numpy.lib.tests.test_utils.test_deprecate_preserve_whitespace()
numpy.lib.tests.test_utils.test_deprecate_with_doc_decorator_message()
numpy.lib.tests.test_utils.test_info_method_heading()
numpy.lib.tests.test_utils.test_lookfor()
numpy.lib.tests.test_utils.test_safe_eval_nameconstant()
numpy.tests.test_TestByteBounds
numpy.tests.test_TestByteBounds.test_byte_bounds(self)
numpy.tests.test_TestByteBounds.test_strided(self)
numpy.tests.test_TestByteBounds.test_unusual_order_negative_stride(self)
numpy.tests.test_TestByteBounds.test_unusual_order_positive_stride(self)
numpy.tests.test__compare_docs(old_func,new_func)
numpy.tests.test_old_func(self,x)
numpy.tests.test_old_func2(self,x)
numpy.tests.test_old_func3(self,x)
numpy.tests.test_old_func4(self,x)
numpy.tests.test_old_func5(self,x)
numpy.tests.test_old_func6(self,x)
numpy.tests.test_old_func7(self,x)
numpy.tests.test_test_assert_raises_regex_context_manager()
numpy.tests.test_test_deprecate_decorator()
numpy.tests.test_test_deprecate_decorator_message()
numpy.tests.test_test_deprecate_fn()
numpy.tests.test_test_deprecate_help_indentation(old_func,new_func)
numpy.tests.test_test_deprecate_preserve_whitespace()
numpy.tests.test_test_deprecate_with_doc_decorator_message()
numpy.tests.test_test_info_method_heading()
numpy.tests.test_test_lookfor()
numpy.tests.test_test_safe_eval_nameconstant()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_index_tricks.py----------------------------------------
A:numpy.lib.tests.test_index_tricks.arr->numpy.array([[3, 6, 6], [4, 5, 1]])
A:numpy.lib.tests.test_index_tricks.coords->numpy.array([[1, 0, 1, 2, 3, 4], [1, 6, 1, 3, 2, 0], [1, 3, 1, 0, 9, 5]], dtype=dtype)
A:numpy.lib.tests.test_index_tricks.(x, y)->numpy.unravel_index([1, 2, 3], (4, 5))
A:numpy.lib.tests.test_index_tricks.x->list(ndindex(*[0]))
A:numpy.lib.tests.test_index_tricks.res->numpy.unravel_index(np.zeros(0, dtype=np.intp), (2, 1, 0))
A:numpy.lib.tests.test_index_tricks.(y, st)->numpy.linspace(2, 10, retstep=True)
A:numpy.lib.tests.test_index_tricks.grid_broadcast->numpy.broadcast_arrays(*grid_sparse)
A:numpy.lib.tests.test_index_tricks.b->numpy.random.rand(5, 5)
A:numpy.lib.tests.test_index_tricks.c->numpy.random.rand(5, 5)
A:numpy.lib.tests.test_index_tricks.a->numpy.zeros((2, 2, 2), int)
A:numpy.lib.tests.test_index_tricks.(a,)->numpy.ix_(np.array([], dtype=np.float32))
A:numpy.lib.tests.test_index_tricks.arrays->numpy.ix_(*[func(sz) for sz in sizes])
A:numpy.lib.tests.test_index_tricks.(int_a,)->numpy.nonzero(bool_a)
A:numpy.lib.tests.test_index_tricks.out->ix_(x, x)
A:numpy.lib.tests.test_index_tricks.i->numpy.array([0, 1, 2])
A:numpy.lib.tests.test_index_tricks.di->diag_indices(4)
A:numpy.lib.tests.test_index_tricks.d3->diag_indices(2, 3)
A:numpy.lib.tests.test_index_tricks.(r, c)->diag_indices_from(x)
numpy.lib.tests.test_index_tricks.TestConcatenator
numpy.lib.tests.test_index_tricks.TestConcatenator.test_0d(self)
numpy.lib.tests.test_index_tricks.TestConcatenator.test_1d(self)
numpy.lib.tests.test_index_tricks.TestConcatenator.test_2d(self)
numpy.lib.tests.test_index_tricks.TestConcatenator.test_complex_step(self)
numpy.lib.tests.test_index_tricks.TestConcatenator.test_mixed_type(self)
numpy.lib.tests.test_index_tricks.TestConcatenator.test_more_mixed_type(self)
numpy.lib.tests.test_index_tricks.TestDiagIndicesFrom
numpy.lib.tests.test_index_tricks.TestDiagIndicesFrom.test_diag_indices_from(self)
numpy.lib.tests.test_index_tricks.TestDiagIndicesFrom.test_error_shape_mismatch(self)
numpy.lib.tests.test_index_tricks.TestDiagIndicesFrom.test_error_small_input(self)
numpy.lib.tests.test_index_tricks.TestFillDiagonal
numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_basic(self)
numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_hetero_shape_handling(self)
numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_low_dim_handling(self)
numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_operate_4d_array(self)
numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_tall_matrix(self)
numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_tall_matrix_wrap(self)
numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_wide_matrix(self)
numpy.lib.tests.test_index_tricks.TestGrid
numpy.lib.tests.test_index_tricks.TestGrid.test_accepts_npcomplexfloating(self)
numpy.lib.tests.test_index_tricks.TestGrid.test_accepts_npfloating(self)
numpy.lib.tests.test_index_tricks.TestGrid.test_basic(self)
numpy.lib.tests.test_index_tricks.TestGrid.test_linspace_equivalence(self)
numpy.lib.tests.test_index_tricks.TestGrid.test_mgrid_size_none_handling(self,start,stop,step,expected)
numpy.lib.tests.test_index_tricks.TestGrid.test_nd(self)
numpy.lib.tests.test_index_tricks.TestGrid.test_sparse(self)
numpy.lib.tests.test_index_tricks.TestIndexExpression
numpy.lib.tests.test_index_tricks.TestIndexExpression.test_regression_1(self)
numpy.lib.tests.test_index_tricks.TestIndexExpression.test_simple_1(self)
numpy.lib.tests.test_index_tricks.TestIx_
numpy.lib.tests.test_index_tricks.TestIx_.test_1d_only(self)
numpy.lib.tests.test_index_tricks.TestIx_.test_bool(self)
numpy.lib.tests.test_index_tricks.TestIx_.test_regression_1(self)
numpy.lib.tests.test_index_tricks.TestIx_.test_repeated_input(self)
numpy.lib.tests.test_index_tricks.TestIx_.test_shape_and_dtype(self)
numpy.lib.tests.test_index_tricks.TestNdenumerate
numpy.lib.tests.test_index_tricks.TestNdenumerate.test_basic(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_0d(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_basic(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_big_indices(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_clipmodes(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_dtypes(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_empty_array_ravel(self,mode)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_empty_array_unravel(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_empty_indices(self)
numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_writeability(self)
numpy.lib.tests.test_index_tricks.test_c_()
numpy.lib.tests.test_index_tricks.test_diag_indices()
numpy.lib.tests.test_index_tricks.test_ndindex()
numpy.tests.test_TestConcatenator
numpy.tests.test_TestConcatenator.test_0d(self)
numpy.tests.test_TestConcatenator.test_1d(self)
numpy.tests.test_TestConcatenator.test_2d(self)
numpy.tests.test_TestConcatenator.test_complex_step(self)
numpy.tests.test_TestConcatenator.test_mixed_type(self)
numpy.tests.test_TestConcatenator.test_more_mixed_type(self)
numpy.tests.test_TestDiagIndicesFrom
numpy.tests.test_TestDiagIndicesFrom.test_diag_indices_from(self)
numpy.tests.test_TestDiagIndicesFrom.test_error_shape_mismatch(self)
numpy.tests.test_TestDiagIndicesFrom.test_error_small_input(self)
numpy.tests.test_TestFillDiagonal
numpy.tests.test_TestFillDiagonal.test_basic(self)
numpy.tests.test_TestFillDiagonal.test_hetero_shape_handling(self)
numpy.tests.test_TestFillDiagonal.test_low_dim_handling(self)
numpy.tests.test_TestFillDiagonal.test_operate_4d_array(self)
numpy.tests.test_TestFillDiagonal.test_tall_matrix(self)
numpy.tests.test_TestFillDiagonal.test_tall_matrix_wrap(self)
numpy.tests.test_TestFillDiagonal.test_wide_matrix(self)
numpy.tests.test_TestGrid
numpy.tests.test_TestGrid.test_accepts_npcomplexfloating(self)
numpy.tests.test_TestGrid.test_accepts_npfloating(self)
numpy.tests.test_TestGrid.test_basic(self)
numpy.tests.test_TestGrid.test_linspace_equivalence(self)
numpy.tests.test_TestGrid.test_mgrid_size_none_handling(self,start,stop,step,expected)
numpy.tests.test_TestGrid.test_nd(self)
numpy.tests.test_TestGrid.test_sparse(self)
numpy.tests.test_TestIndexExpression
numpy.tests.test_TestIndexExpression.test_regression_1(self)
numpy.tests.test_TestIndexExpression.test_simple_1(self)
numpy.tests.test_TestIx_
numpy.tests.test_TestIx_.test_1d_only(self)
numpy.tests.test_TestIx_.test_bool(self)
numpy.tests.test_TestIx_.test_regression_1(self)
numpy.tests.test_TestIx_.test_repeated_input(self)
numpy.tests.test_TestIx_.test_shape_and_dtype(self)
numpy.tests.test_TestNdenumerate
numpy.tests.test_TestNdenumerate.test_basic(self)
numpy.tests.test_TestRavelUnravelIndex
numpy.tests.test_TestRavelUnravelIndex.test_0d(self)
numpy.tests.test_TestRavelUnravelIndex.test_basic(self)
numpy.tests.test_TestRavelUnravelIndex.test_big_indices(self)
numpy.tests.test_TestRavelUnravelIndex.test_clipmodes(self)
numpy.tests.test_TestRavelUnravelIndex.test_dtypes(self)
numpy.tests.test_TestRavelUnravelIndex.test_empty_array_ravel(self,mode)
numpy.tests.test_TestRavelUnravelIndex.test_empty_array_unravel(self)
numpy.tests.test_TestRavelUnravelIndex.test_empty_indices(self)
numpy.tests.test_TestRavelUnravelIndex.test_writeability(self)
numpy.tests.test_test_c_()
numpy.tests.test_test_diag_indices()
numpy.tests.test_test_ndindex()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_type_check.py----------------------------------------
A:numpy.lib.tests.test_type_check.ai32->numpy.array([[1, 2], [3, 4]], dtype=np.int32)
A:numpy.lib.tests.test_type_check.af16->numpy.array([[1, 2], [3, 4]], dtype=np.float16)
A:numpy.lib.tests.test_type_check.af32->numpy.array([[1, 2], [3, 4]], dtype=np.float32)
A:numpy.lib.tests.test_type_check.af64->numpy.array([[1, 2], [3, 4]], dtype=np.float64)
A:numpy.lib.tests.test_type_check.acs->numpy.array([[1 + 5j, 2 + 6j], [3 + 7j, 4 + 8j]], dtype=np.csingle)
A:numpy.lib.tests.test_type_check.acd->numpy.array([[1 + 5j, 2 + 6j], [3 + 7j, 4 + 8j]], dtype=np.cdouble)
A:numpy.lib.tests.test_type_check.y->numpy.array(1 + 1j)
A:numpy.lib.tests.test_type_check.out->numpy.imag(y)
A:numpy.lib.tests.test_type_check.z->numpy.array((-1.0, 0.0, 1.0))
A:numpy.lib.tests.test_type_check.res->isreal(z)
A:numpy.lib.tests.test_type_check.dummy->DummyPd()
A:numpy.lib.tests.test_type_check.base->numpy.dtype('complex128')
A:numpy.lib.tests.test_type_check.a->asfarray(np.array([1, 2, 3]))
A:numpy.lib.tests.test_type_check.vals->nan_to_num(np.array((-1.0, 0, 1)) / 0.0, nan=np.inf, posinf=999)
A:numpy.lib.tests.test_type_check.result->nan_to_num(vals, copy=False, nan=10, posinf=20, neginf=30)
A:numpy.lib.tests.test_type_check.b->real_if_close(a + 1e-07j, tol=1e-06)
numpy.lib.tests.test_type_check.TestArrayConversion
numpy.lib.tests.test_type_check.TestArrayConversion.test_asfarray(self)
numpy.lib.tests.test_type_check.TestCommonType
numpy.lib.tests.test_type_check.TestCommonType.test_basic(self)
numpy.lib.tests.test_type_check.TestImag
numpy.lib.tests.test_type_check.TestImag.test_cmplx(self)
numpy.lib.tests.test_type_check.TestImag.test_real(self)
numpy.lib.tests.test_type_check.TestIscomplex
numpy.lib.tests.test_type_check.TestIscomplex.test_fail(self)
numpy.lib.tests.test_type_check.TestIscomplex.test_pass(self)
numpy.lib.tests.test_type_check.TestIscomplexobj
numpy.lib.tests.test_type_check.TestIscomplexobj.test_basic(self)
numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck(self)
numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck(self)
numpy.lib.tests.test_type_check.TestIscomplexobj.test_list(self)
numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck(self)
numpy.lib.tests.test_type_check.TestIscomplexobj.test_scalar(self)
numpy.lib.tests.test_type_check.TestIsfinite
numpy.lib.tests.test_type_check.TestIsfinite.test_complex(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_complex1(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_goodvalues(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_ind(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_integer(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_neginf(self)
numpy.lib.tests.test_type_check.TestIsfinite.test_posinf(self)
numpy.lib.tests.test_type_check.TestIsinf
numpy.lib.tests.test_type_check.TestIsinf.test_goodvalues(self)
numpy.lib.tests.test_type_check.TestIsinf.test_ind(self)
numpy.lib.tests.test_type_check.TestIsinf.test_neginf(self)
numpy.lib.tests.test_type_check.TestIsinf.test_neginf_scalar(self)
numpy.lib.tests.test_type_check.TestIsinf.test_posinf(self)
numpy.lib.tests.test_type_check.TestIsinf.test_posinf_scalar(self)
numpy.lib.tests.test_type_check.TestIsnan
numpy.lib.tests.test_type_check.TestIsnan.test_complex(self)
numpy.lib.tests.test_type_check.TestIsnan.test_complex1(self)
numpy.lib.tests.test_type_check.TestIsnan.test_goodvalues(self)
numpy.lib.tests.test_type_check.TestIsnan.test_ind(self)
numpy.lib.tests.test_type_check.TestIsnan.test_integer(self)
numpy.lib.tests.test_type_check.TestIsnan.test_neginf(self)
numpy.lib.tests.test_type_check.TestIsnan.test_posinf(self)
numpy.lib.tests.test_type_check.TestIsneginf
numpy.lib.tests.test_type_check.TestIsneginf.test_generic(self)
numpy.lib.tests.test_type_check.TestIsposinf
numpy.lib.tests.test_type_check.TestIsposinf.test_generic(self)
numpy.lib.tests.test_type_check.TestIsreal
numpy.lib.tests.test_type_check.TestIsreal.test_fail(self)
numpy.lib.tests.test_type_check.TestIsreal.test_pass(self)
numpy.lib.tests.test_type_check.TestIsrealobj
numpy.lib.tests.test_type_check.TestIsrealobj.test_basic(self)
numpy.lib.tests.test_type_check.TestIsscalar
numpy.lib.tests.test_type_check.TestIsscalar.test_basic(self)
numpy.lib.tests.test_type_check.TestMintypecode
numpy.lib.tests.test_type_check.TestMintypecode.test_default_1(self)
numpy.lib.tests.test_type_check.TestMintypecode.test_default_2(self)
numpy.lib.tests.test_type_check.TestMintypecode.test_default_3(self)
numpy.lib.tests.test_type_check.TestNanToNum
numpy.lib.tests.test_type_check.TestNanToNum.test_array(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_complex_bad(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_complex_bad2(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_complex_good(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_do_not_rewrite_previous_keyword(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_float(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_generic(self)
numpy.lib.tests.test_type_check.TestNanToNum.test_integer(self)
numpy.lib.tests.test_type_check.TestReal
numpy.lib.tests.test_type_check.TestReal.test_cmplx(self)
numpy.lib.tests.test_type_check.TestReal.test_real(self)
numpy.lib.tests.test_type_check.TestRealIfClose
numpy.lib.tests.test_type_check.TestRealIfClose.test_basic(self)
numpy.lib.tests.test_type_check.assert_all(x)
numpy.tests.test_TestArrayConversion
numpy.tests.test_TestArrayConversion.test_asfarray(self)
numpy.tests.test_TestCommonType
numpy.tests.test_TestCommonType.test_basic(self)
numpy.tests.test_TestImag
numpy.tests.test_TestImag.test_cmplx(self)
numpy.tests.test_TestImag.test_real(self)
numpy.tests.test_TestIscomplex
numpy.tests.test_TestIscomplex.test_fail(self)
numpy.tests.test_TestIscomplex.test_pass(self)
numpy.tests.test_TestIscomplexobj
numpy.tests.test_TestIscomplexobj.test_basic(self)
numpy.tests.test_TestIscomplexobj.test_custom_dtype_duck(self)
numpy.tests.test_TestIscomplexobj.test_duck(self)
numpy.tests.test_TestIscomplexobj.test_list(self)
numpy.tests.test_TestIscomplexobj.test_pandas_duck(self)
numpy.tests.test_TestIscomplexobj.test_scalar(self)
numpy.tests.test_TestIsfinite
numpy.tests.test_TestIsfinite.test_complex(self)
numpy.tests.test_TestIsfinite.test_complex1(self)
numpy.tests.test_TestIsfinite.test_goodvalues(self)
numpy.tests.test_TestIsfinite.test_ind(self)
numpy.tests.test_TestIsfinite.test_integer(self)
numpy.tests.test_TestIsfinite.test_neginf(self)
numpy.tests.test_TestIsfinite.test_posinf(self)
numpy.tests.test_TestIsinf
numpy.tests.test_TestIsinf.test_goodvalues(self)
numpy.tests.test_TestIsinf.test_ind(self)
numpy.tests.test_TestIsinf.test_neginf(self)
numpy.tests.test_TestIsinf.test_neginf_scalar(self)
numpy.tests.test_TestIsinf.test_posinf(self)
numpy.tests.test_TestIsinf.test_posinf_scalar(self)
numpy.tests.test_TestIsnan
numpy.tests.test_TestIsnan.test_complex(self)
numpy.tests.test_TestIsnan.test_complex1(self)
numpy.tests.test_TestIsnan.test_goodvalues(self)
numpy.tests.test_TestIsnan.test_ind(self)
numpy.tests.test_TestIsnan.test_integer(self)
numpy.tests.test_TestIsnan.test_neginf(self)
numpy.tests.test_TestIsnan.test_posinf(self)
numpy.tests.test_TestIsneginf
numpy.tests.test_TestIsneginf.test_generic(self)
numpy.tests.test_TestIsposinf
numpy.tests.test_TestIsposinf.test_generic(self)
numpy.tests.test_TestIsreal
numpy.tests.test_TestIsreal.test_fail(self)
numpy.tests.test_TestIsreal.test_pass(self)
numpy.tests.test_TestIsrealobj
numpy.tests.test_TestIsrealobj.test_basic(self)
numpy.tests.test_TestIsscalar
numpy.tests.test_TestIsscalar.test_basic(self)
numpy.tests.test_TestMintypecode
numpy.tests.test_TestMintypecode.test_default_1(self)
numpy.tests.test_TestMintypecode.test_default_2(self)
numpy.tests.test_TestMintypecode.test_default_3(self)
numpy.tests.test_TestNanToNum
numpy.tests.test_TestNanToNum.test_array(self)
numpy.tests.test_TestNanToNum.test_complex_bad(self)
numpy.tests.test_TestNanToNum.test_complex_bad2(self)
numpy.tests.test_TestNanToNum.test_complex_good(self)
numpy.tests.test_TestNanToNum.test_do_not_rewrite_previous_keyword(self)
numpy.tests.test_TestNanToNum.test_float(self)
numpy.tests.test_TestNanToNum.test_generic(self)
numpy.tests.test_TestNanToNum.test_integer(self)
numpy.tests.test_TestReal
numpy.tests.test_TestReal.test_cmplx(self)
numpy.tests.test_TestReal.test_real(self)
numpy.tests.test_TestRealIfClose
numpy.tests.test_TestRealIfClose.test_basic(self)
numpy.tests.test_assert_all(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_mixins.py----------------------------------------
A:numpy.lib.tests.test_mixins.self.value->numpy.asarray(value)
A:numpy.lib.tests.test_mixins.out->kwargs.get('out', ())
A:numpy.lib.tests.test_mixins.inputs->tuple((x.value if isinstance(x, ArrayLike) else x for x in inputs))
A:numpy.lib.tests.test_mixins.kwargs['out']->tuple((x.value if isinstance(x, ArrayLike) else x for x in out))
A:numpy.lib.tests.test_mixins.result->getattr(ufunc, method)(*inputs, **kwargs)
A:numpy.lib.tests.test_mixins.array_like->ArrayLike(array)
A:numpy.lib.tests.test_mixins.array->ArrayLike(np.array([1, 2, 3, 4]))
A:numpy.lib.tests.test_mixins.opt_out->OptOut()
A:numpy.lib.tests.test_mixins.x->ArrayLike(0)
A:numpy.lib.tests.test_mixins.y->SubArrayLike(1)
A:numpy.lib.tests.test_mixins.obj->object()
A:numpy.lib.tests.test_mixins.expected->ArrayLike(np.float64(5))
A:numpy.lib.tests.test_mixins.actual->op(2, ArrayLike(1))
A:numpy.lib.tests.test_mixins.err_msg->'failed for operator {}'.format(op)
A:numpy.lib.tests.test_mixins.(mantissa, exponent)->numpy.frexp(2 ** (-3))
numpy.lib.tests.test_mixins.ArrayLike(self,value)
numpy.lib.tests.test_mixins.ArrayLike.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
numpy.lib.tests.test_mixins.ArrayLike.__init__(self,value)
numpy.lib.tests.test_mixins.ArrayLike.__repr__(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_array_like_add(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_forward_binary_methods(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_inplace(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_matmul(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_object(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_opt_out(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_reflected_binary_methods(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_subclass(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_ufunc_at(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_ufunc_two_outputs(self)
numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_unary_methods(self)
numpy.lib.tests.test_mixins._assert_equal_type_and_value(result,expected,err_msg=None)
numpy.lib.tests.test_mixins.wrap_array_like(result)
numpy.tests.test_mixins.ArrayLike(self,value)
numpy.tests.test_mixins.ArrayLike.__array_ufunc__(self,ufunc,method,*inputs,**kwargs)
numpy.tests.test_mixins.ArrayLike.__repr__(self)
numpy.tests.test_mixins.TestNDArrayOperatorsMixin
numpy.tests.test_mixins.TestNDArrayOperatorsMixin.test_array_like_add(self)
numpy.tests.test_mixins.TestNDArrayOperatorsMixin.test_forward_binary_methods(self)
numpy.tests.test_mixins.TestNDArrayOperatorsMixin.test_inplace(self)
numpy.tests.test_mixins.TestNDArrayOperatorsMixin.test_matmul(self)
numpy.tests.test_mixins.TestNDArrayOperatorsMixin.test_object(self)
numpy.tests.test_mixins.TestNDArrayOperatorsMixin.test_opt_out(self)
numpy.tests.test_mixins.TestNDArrayOperatorsMixin.test_reflected_binary_methods(self)
numpy.tests.test_mixins.TestNDArrayOperatorsMixin.test_subclass(self)
numpy.tests.test_mixins.TestNDArrayOperatorsMixin.test_ufunc_at(self)
numpy.tests.test_mixins.TestNDArrayOperatorsMixin.test_ufunc_two_outputs(self)
numpy.tests.test_mixins.TestNDArrayOperatorsMixin.test_unary_methods(self)
numpy.tests.test_mixins._assert_equal_type_and_value(result,expected,err_msg=None)
numpy.tests.test_mixins.wrap_array_like(result)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_format.py----------------------------------------
A:numpy.lib.tests.test_format.dtype->numpy.dtype(scalar).newbyteorder(endian)
A:numpy.lib.tests.test_format.basic->numpy.arange(1500).astype(dtype)
A:numpy.lib.tests.test_format.size->random.randint(1, size)
A:numpy.lib.tests.test_format.f->BytesIO(magic)
A:numpy.lib.tests.test_format.f2->BytesIO(f.getvalue()[0:-1])
A:numpy.lib.tests.test_format.arr2->numpy.load(buf)
A:numpy.lib.tests.test_format.long_str_arr->numpy.ones(1, dtype=np.dtype((str, format.BUFFER_SIZE + 1)))
A:numpy.lib.tests.test_format.long_str_arr2->roundtrip(long_str_arr)
A:numpy.lib.tests.test_format.nfn->os.path.join(tmpdir, f'normal{i}.npy')
A:numpy.lib.tests.test_format.mfn->os.path.join(tmpdir, f'memmap{i}.npy')
A:numpy.lib.tests.test_format.ma->numpy.lib.format.open_memmap(tf2, mode='r')
A:numpy.lib.tests.test_format.normal_bytes->fp.read()
A:numpy.lib.tests.test_format.memmap_bytes->fp.read()
A:numpy.lib.tests.test_format.arr->numpy.ones(10, dtype=dt)
A:numpy.lib.tests.test_format.npz_file->os.path.join(tmpdir, 'aligned.npz')
A:numpy.lib.tests.test_format.dt1->numpy.lib.format.descr_to_dtype(dt.descr)
A:numpy.lib.tests.test_format.dt2->numpy.dtype({'names': ['a', 'b'], 'formats': ['i4', 'i4'], 'offsets': [1, 6]})
A:numpy.lib.tests.test_format.dt3->numpy.dtype({'names': ['c', 'd'], 'formats': ['i4', dt2]})
A:numpy.lib.tests.test_format.dt4->numpy.dtype({'names': ['a', '', 'b'], 'formats': ['i4'] * 3})
A:numpy.lib.tests.test_format.dt5->numpy.dtype({'names': ['a', 'b'], 'formats': ['i4', 'i4'], 'offsets': [1, 6], 'titles': ['aa', 'bb']})
A:numpy.lib.tests.test_format.dt6->numpy.dtype({'names': [], 'formats': [], 'itemsize': 8})
A:numpy.lib.tests.test_format.path->os.path.join(tmpdir, 'pickle-disabled.npy')
A:numpy.lib.tests.test_format.data->numpy.load(path, allow_pickle=True, fix_imports=False, encoding='latin1')
A:numpy.lib.tests.test_format.data_dir->os.path.join(os.path.dirname(__file__), 'data')
A:numpy.lib.tests.test_format.expected->numpy.array([None, range, u'優良', b'\xe4\xb8\x8d\xe8\x89\xaf'], dtype=object)
A:numpy.lib.tests.test_format.data_f->numpy.load(path, allow_pickle=True, encoding=encoding)
A:numpy.lib.tests.test_format.arr1->numpy.zeros(3, dt)
A:numpy.lib.tests.test_format.d->numpy.arange(5)
A:numpy.lib.tests.test_format.header->BytesIO(magic).readline()
A:numpy.lib.tests.test_format.n->numpy.lib.format.read_array(f)
A:numpy.lib.tests.test_format.tf1->os.path.join(tmpdir, f'version2_01.npy')
A:numpy.lib.tests.test_format.tf2->os.path.join(tmpdir, f'version2_02.npy')
A:numpy.lib.tests.test_format.s1->BytesIO()
A:numpy.lib.tests.test_format.s2->BytesIO()
A:numpy.lib.tests.test_format.version1->numpy.lib.format.read_magic(s1)
A:numpy.lib.tests.test_format.version2->numpy.lib.format.read_magic(s2)
A:numpy.lib.tests.test_format.s->BytesIO()
A:numpy.lib.tests.test_format.(shape, fortran, dtype)->numpy.lib.format.read_array_header_2_0(s)
A:numpy.lib.tests.test_format.tf_name->os.path.join(tmpdir, 'sparse_file')
A:numpy.lib.tests.test_format.r->numpy.load(f)
A:numpy.lib.tests.test_format.a->numpy.empty((2 ** 30, 2), dtype=np.uint8)
A:numpy.lib.tests.test_format.fname->os.path.join(tmpdir, 'unicode.npy')
A:numpy.lib.tests.test_format.buf->BytesIO()
numpy.lib.tests.test_format.BytesIOSRandomSize(BytesIO)
numpy.lib.tests.test_format.BytesIOSRandomSize.read(self,size=None)
numpy.lib.tests.test_format.assert_equal_(o1,o2)
numpy.lib.tests.test_format.roundtrip(arr)
numpy.lib.tests.test_format.roundtrip_randsize(arr)
numpy.lib.tests.test_format.roundtrip_truncated(arr)
numpy.lib.tests.test_format.test_bad_header()
numpy.lib.tests.test_format.test_bad_magic_args()
numpy.lib.tests.test_format.test_compressed_roundtrip(tmpdir)
numpy.lib.tests.test_format.test_descr_to_dtype(dt)
numpy.lib.tests.test_format.test_empty_npz(tmpdir)
numpy.lib.tests.test_format.test_large_archive(tmpdir)
numpy.lib.tests.test_format.test_large_file_support(tmpdir)
numpy.lib.tests.test_format.test_large_header()
numpy.lib.tests.test_format.test_load_padded_dtype(tmpdir,dt)
numpy.lib.tests.test_format.test_long_str()
numpy.lib.tests.test_format.test_memmap_roundtrip(tmpdir)
numpy.lib.tests.test_format.test_metadata_dtype(dt,fail)
numpy.lib.tests.test_format.test_pickle_disallow(tmpdir)
numpy.lib.tests.test_format.test_pickle_python2_python3()
numpy.lib.tests.test_format.test_python2_python3_interoperability()
numpy.lib.tests.test_format.test_read_array_header_1_0()
numpy.lib.tests.test_format.test_read_array_header_2_0()
numpy.lib.tests.test_format.test_read_magic()
numpy.lib.tests.test_format.test_read_magic_bad_magic()
numpy.lib.tests.test_format.test_read_version_1_0_bad_magic()
numpy.lib.tests.test_format.test_roundtrip()
numpy.lib.tests.test_format.test_roundtrip_randsize()
numpy.lib.tests.test_format.test_roundtrip_truncated()
numpy.lib.tests.test_format.test_unicode_field_names(tmpdir)
numpy.lib.tests.test_format.test_version_2_0()
numpy.lib.tests.test_format.test_version_2_0_memmap(tmpdir)
numpy.lib.tests.test_format.test_write_version()
numpy.tests.test_format.BytesIOSRandomSize(BytesIO)
numpy.tests.test_format.BytesIOSRandomSize.read(self,size=None)
numpy.tests.test_format.assert_equal_(o1,o2)
numpy.tests.test_format.roundtrip(arr)
numpy.tests.test_format.roundtrip_randsize(arr)
numpy.tests.test_format.roundtrip_truncated(arr)
numpy.tests.test_format.test_bad_header()
numpy.tests.test_format.test_bad_magic_args()
numpy.tests.test_format.test_compressed_roundtrip(tmpdir)
numpy.tests.test_format.test_descr_to_dtype(dt)
numpy.tests.test_format.test_empty_npz(tmpdir)
numpy.tests.test_format.test_large_archive(tmpdir)
numpy.tests.test_format.test_large_file_support(tmpdir)
numpy.tests.test_format.test_large_header()
numpy.tests.test_format.test_load_padded_dtype(tmpdir,dt)
numpy.tests.test_format.test_long_str()
numpy.tests.test_format.test_memmap_roundtrip(tmpdir)
numpy.tests.test_format.test_metadata_dtype(dt,fail)
numpy.tests.test_format.test_pickle_disallow(tmpdir)
numpy.tests.test_format.test_pickle_python2_python3()
numpy.tests.test_format.test_python2_python3_interoperability()
numpy.tests.test_format.test_read_array_header_1_0()
numpy.tests.test_format.test_read_array_header_2_0()
numpy.tests.test_format.test_read_magic()
numpy.tests.test_format.test_read_magic_bad_magic()
numpy.tests.test_format.test_read_version_1_0_bad_magic()
numpy.tests.test_format.test_roundtrip()
numpy.tests.test_format.test_roundtrip_randsize()
numpy.tests.test_format.test_roundtrip_truncated()
numpy.tests.test_format.test_unicode_field_names(tmpdir)
numpy.tests.test_format.test_version_2_0()
numpy.tests.test_format.test_version_2_0_memmap(tmpdir)
numpy.tests.test_format.test_write_version()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_histograms.py----------------------------------------
A:numpy.lib.tests.test_histograms.v->numpy.arange(10)
A:numpy.lib.tests.test_histograms.(a, b)->numpy.histogramdd([[], [], []], bins=2)
A:numpy.lib.tests.test_histograms.(hist, edges)->histogram(v, bins, density=True)
A:numpy.lib.tests.test_histograms.(h, e)->numpy.histogramdd(x, bins=[3, [-np.inf, 3, np.inf]])
A:numpy.lib.tests.test_histograms.sup->suppress_warnings()
A:numpy.lib.tests.test_histograms.rec->suppress_warnings().record(RuntimeWarning, 'Converting input from .*')
A:numpy.lib.tests.test_histograms.area->numpy.sum(a * np.diff(b))
A:numpy.lib.tests.test_histograms.(counts, dmy)->numpy.histogram([1, 2, 3, 4], [0.5, 1.5, np.inf], density=True)
A:numpy.lib.tests.test_histograms.(h, b)->histogram(all_nan, bins=[0, 1])
A:numpy.lib.tests.test_histograms.x->numpy.array([1] + [1] * 3 + [7] * 3 + [7] * 9)
A:numpy.lib.tests.test_histograms.y->numpy.array([7] + [1] * 3 + [7] * 3 + [1] * 9)
A:numpy.lib.tests.test_histograms.(counts_hist, xedges, yedges)->numpy.histogram2d(x, y, bins=100)
A:numpy.lib.tests.test_histograms.a->numpy.array([-2, 0, 127], dtype=np.int8)
A:numpy.lib.tests.test_histograms.(int_hist, int_edges)->numpy.histogram(a)
A:numpy.lib.tests.test_histograms.(na, nb)->histogram(v, density=True)
A:numpy.lib.tests.test_histograms.(wa, wb)->histogram(values, bins=2, range=[1, 3], weights=weights)
A:numpy.lib.tests.test_histograms.(nwa, nwb)->histogram(v, weights=w, density=True)
A:numpy.lib.tests.test_histograms.w->numpy.concatenate((np.zeros(5), np.ones(5)))
A:numpy.lib.tests.test_histograms.values->numpy.array([1.3, 2.5, 2.3])
A:numpy.lib.tests.test_histograms.weights->numpy.array([Decimal(1), Decimal(2), Decimal(3)])
A:numpy.lib.tests.test_histograms.vals->numpy.random.random((100, 3))
A:numpy.lib.tests.test_histograms.arr->numpy.array([0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 3.0, 4.0, 5.0])
A:numpy.lib.tests.test_histograms.bins->numpy.array([0, 1, 3, 6, 10])
A:numpy.lib.tests.test_histograms.one_nan->numpy.array([0, 1, np.nan])
A:numpy.lib.tests.test_histograms.all_nan->numpy.array([np.nan, np.nan])
A:numpy.lib.tests.test_histograms.begin->numpy.datetime64('2000-01-01', 'D')
A:numpy.lib.tests.test_histograms.offsets->numpy.array([0, 0, 1, 1, 2, 3, 5, 10, 20])
A:numpy.lib.tests.test_histograms.td->numpy.dtype('timedelta64[D]')
A:numpy.lib.tests.test_histograms.(d_count, d_edge)->histogram(dates, bins=date_bins)
A:numpy.lib.tests.test_histograms.(t_count, t_edge)->histogram(offsets.astype(td), bins=bins.astype(td))
A:numpy.lib.tests.test_histograms.(i_count, i_edge)->histogram(offsets, bins=bins)
A:numpy.lib.tests.test_histograms.(hist, e)->histogram(arr, bins='auto', range=(0, 1))
A:numpy.lib.tests.test_histograms.range->numpy.array([0.0, 1.0 - eps], float_large)
A:numpy.lib.tests.test_histograms.(count, x_loc)->numpy.histogram(arr, bins=1, range=range)
A:numpy.lib.tests.test_histograms.edges->histogram_bin_edges(arr, bins='auto', range=(0, 1))
A:numpy.lib.tests.test_histograms.x1->numpy.linspace(-10, -1, testlen // 5 * 2)
A:numpy.lib.tests.test_histograms.x2->numpy.linspace(1, 10, testlen // 5 * 3)
A:numpy.lib.tests.test_histograms.testdat->numpy.arange(testlen)
A:numpy.lib.tests.test_histograms.novar_dataset->numpy.ones(100)
A:numpy.lib.tests.test_histograms.lim_var_data->numpy.ones(1000)
A:numpy.lib.tests.test_histograms.edges_auto->histogram_bin_edges(lim_var_data, 'auto')
A:numpy.lib.tests.test_histograms.edges_fd->histogram_bin_edges(lim_var_data, 'fd')
A:numpy.lib.tests.test_histograms.edges_sturges->histogram_bin_edges(lim_var_data, 'sturges')
A:numpy.lib.tests.test_histograms.xcenter->numpy.linspace(-10, 10, 50)
A:numpy.lib.tests.test_histograms.outlier_dataset->numpy.hstack((np.linspace(-110, -100, 5), xcenter))
A:numpy.lib.tests.test_histograms.rng->numpy.random.RandomState(seed)
A:numpy.lib.tests.test_histograms.avg->abs(np.mean(ll, axis=0) - 0.5)
A:numpy.lib.tests.test_histograms.x3->numpy.linspace(-100, -50, testlen)
A:numpy.lib.tests.test_histograms.msg->'For the {0} estimator'.format(estimator)
A:numpy.lib.tests.test_histograms.(hist32, edges32)->numpy.histogram(a.astype(np.int32), bins=bins)
A:numpy.lib.tests.test_histograms.(H, edges)->histogramdd(r, b)
A:numpy.lib.tests.test_histograms.answer->numpy.array([[[0, 0], [0, 0], [0, 0]], [[0, 1], [0, 0], [1, 0]], [[0, 1], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]])
A:numpy.lib.tests.test_histograms.Z->numpy.zeros((5, 5, 5))
A:numpy.lib.tests.test_histograms.r->numpy.random.rand(10, 4)
A:numpy.lib.tests.test_histograms.(n_hist, edges)->histogramdd(v, density=True)
A:numpy.lib.tests.test_histograms.(w_hist, edges)->histogramdd(v, weights=np.ones(100, int) * 2)
A:numpy.lib.tests.test_histograms.expected->numpy.array([[1, 0], [0, 1], [0, 1]])
A:numpy.lib.tests.test_histograms.(hist, _)->histogramdd(x, bins=bins)
A:numpy.lib.tests.test_histograms.x_edges->numpy.array([0, 2, 8])
A:numpy.lib.tests.test_histograms.hist_expected->numpy.array([[2.0], [1.0]])
A:numpy.lib.tests.test_histograms.y_edges->numpy.array([0, 6, 8])
A:numpy.lib.tests.test_histograms.relative_areas->numpy.array([[3, 9], [1, 3]])
A:numpy.lib.tests.test_histograms.(hist_dd, edges_dd)->histogramdd((v,), (bins,), density=True, normed=True)
numpy.lib.tests.test_histograms.TestHistogram
numpy.lib.tests.test_histograms.TestHistogram.do_precision(self,float_small,float_large)
numpy.lib.tests.test_histograms.TestHistogram.do_precision_lower_bound(self,float_small,float_large)
numpy.lib.tests.test_histograms.TestHistogram.do_precision_upper_bound(self,float_small,float_large)
numpy.lib.tests.test_histograms.TestHistogram.do_signed_overflow_bounds(self,dtype)
numpy.lib.tests.test_histograms.TestHistogram.setup(self)
numpy.lib.tests.test_histograms.TestHistogram.teardown(self)
numpy.lib.tests.test_histograms.TestHistogram.test_arr_weights_mismatch(self)
numpy.lib.tests.test_histograms.TestHistogram.test_bin_array_dims(self)
numpy.lib.tests.test_histograms.TestHistogram.test_bin_edge_cases(self)
numpy.lib.tests.test_histograms.TestHistogram.test_bool_conversion(self)
numpy.lib.tests.test_histograms.TestHistogram.test_datetime(self)
numpy.lib.tests.test_histograms.TestHistogram.test_density(self)
numpy.lib.tests.test_histograms.TestHistogram.test_empty(self)
numpy.lib.tests.test_histograms.TestHistogram.test_error_binnum_type(self)
numpy.lib.tests.test_histograms.TestHistogram.test_exotic_weights(self)
numpy.lib.tests.test_histograms.TestHistogram.test_f32_rounding(self)
numpy.lib.tests.test_histograms.TestHistogram.test_finite_range(self)
numpy.lib.tests.test_histograms.TestHistogram.test_histogram_bin_edges(self)
numpy.lib.tests.test_histograms.TestHistogram.test_invalid_range(self)
numpy.lib.tests.test_histograms.TestHistogram.test_last_bin_inclusive_range(self)
numpy.lib.tests.test_histograms.TestHistogram.test_no_side_effects(self)
numpy.lib.tests.test_histograms.TestHistogram.test_normed(self)
numpy.lib.tests.test_histograms.TestHistogram.test_object_array_of_0d(self)
numpy.lib.tests.test_histograms.TestHistogram.test_one_bin(self)
numpy.lib.tests.test_histograms.TestHistogram.test_outliers(self)
numpy.lib.tests.test_histograms.TestHistogram.test_precision(self)
numpy.lib.tests.test_histograms.TestHistogram.test_signed_overflow_bounds(self)
numpy.lib.tests.test_histograms.TestHistogram.test_simple(self)
numpy.lib.tests.test_histograms.TestHistogram.test_some_nan_values(self)
numpy.lib.tests.test_histograms.TestHistogram.test_type(self)
numpy.lib.tests.test_histograms.TestHistogram.test_unsigned_monotonicity_check(self)
numpy.lib.tests.test_histograms.TestHistogram.test_weights(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_empty(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_incorrect_methods(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_limited_variance(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_novariance(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_outlier(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_scott_vs_stone(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_signed_integer_data(self,bins)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_simple(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_simple_range(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_simple_weighted(self)
numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_small(self)
numpy.lib.tests.test_histograms.TestHistogramdd
numpy.lib.tests.test_histograms.TestHistogramdd.test_bins_errors(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_density_non_uniform_1d(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_density_non_uniform_2d(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_density_normed_redundancy(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_density_via_normed(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_edge_dtype(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_empty(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_equal_edges(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_finite_range(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_identical_samples(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_inf_edges(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_large_integers(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_rightmost_binedge(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_shape_3d(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_shape_4d(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_simple(self)
numpy.lib.tests.test_histograms.TestHistogramdd.test_weights(self)
numpy.tests.test_TestHistogram
numpy.tests.test_TestHistogram.do_precision(self,float_small,float_large)
numpy.tests.test_TestHistogram.do_precision_lower_bound(self,float_small,float_large)
numpy.tests.test_TestHistogram.do_precision_upper_bound(self,float_small,float_large)
numpy.tests.test_TestHistogram.do_signed_overflow_bounds(self,dtype)
numpy.tests.test_TestHistogram.setup(self)
numpy.tests.test_TestHistogram.teardown(self)
numpy.tests.test_TestHistogram.test_arr_weights_mismatch(self)
numpy.tests.test_TestHistogram.test_bin_array_dims(self)
numpy.tests.test_TestHistogram.test_bin_edge_cases(self)
numpy.tests.test_TestHistogram.test_bool_conversion(self)
numpy.tests.test_TestHistogram.test_datetime(self)
numpy.tests.test_TestHistogram.test_density(self)
numpy.tests.test_TestHistogram.test_empty(self)
numpy.tests.test_TestHistogram.test_error_binnum_type(self)
numpy.tests.test_TestHistogram.test_exotic_weights(self)
numpy.tests.test_TestHistogram.test_f32_rounding(self)
numpy.tests.test_TestHistogram.test_finite_range(self)
numpy.tests.test_TestHistogram.test_histogram_bin_edges(self)
numpy.tests.test_TestHistogram.test_invalid_range(self)
numpy.tests.test_TestHistogram.test_last_bin_inclusive_range(self)
numpy.tests.test_TestHistogram.test_no_side_effects(self)
numpy.tests.test_TestHistogram.test_normed(self)
numpy.tests.test_TestHistogram.test_object_array_of_0d(self)
numpy.tests.test_TestHistogram.test_one_bin(self)
numpy.tests.test_TestHistogram.test_outliers(self)
numpy.tests.test_TestHistogram.test_precision(self)
numpy.tests.test_TestHistogram.test_signed_overflow_bounds(self)
numpy.tests.test_TestHistogram.test_simple(self)
numpy.tests.test_TestHistogram.test_some_nan_values(self)
numpy.tests.test_TestHistogram.test_type(self)
numpy.tests.test_TestHistogram.test_unsigned_monotonicity_check(self)
numpy.tests.test_TestHistogram.test_weights(self)
numpy.tests.test_TestHistogramOptimBinNums
numpy.tests.test_TestHistogramOptimBinNums.test_empty(self)
numpy.tests.test_TestHistogramOptimBinNums.test_incorrect_methods(self)
numpy.tests.test_TestHistogramOptimBinNums.test_limited_variance(self)
numpy.tests.test_TestHistogramOptimBinNums.test_novariance(self)
numpy.tests.test_TestHistogramOptimBinNums.test_outlier(self)
numpy.tests.test_TestHistogramOptimBinNums.test_scott_vs_stone(self)
numpy.tests.test_TestHistogramOptimBinNums.test_signed_integer_data(self,bins)
numpy.tests.test_TestHistogramOptimBinNums.test_simple(self)
numpy.tests.test_TestHistogramOptimBinNums.test_simple_range(self)
numpy.tests.test_TestHistogramOptimBinNums.test_simple_weighted(self)
numpy.tests.test_TestHistogramOptimBinNums.test_small(self)
numpy.tests.test_TestHistogramdd
numpy.tests.test_TestHistogramdd.test_bins_errors(self)
numpy.tests.test_TestHistogramdd.test_density_non_uniform_1d(self)
numpy.tests.test_TestHistogramdd.test_density_non_uniform_2d(self)
numpy.tests.test_TestHistogramdd.test_density_normed_redundancy(self)
numpy.tests.test_TestHistogramdd.test_density_via_normed(self)
numpy.tests.test_TestHistogramdd.test_edge_dtype(self)
numpy.tests.test_TestHistogramdd.test_empty(self)
numpy.tests.test_TestHistogramdd.test_equal_edges(self)
numpy.tests.test_TestHistogramdd.test_finite_range(self)
numpy.tests.test_TestHistogramdd.test_identical_samples(self)
numpy.tests.test_TestHistogramdd.test_inf_edges(self)
numpy.tests.test_TestHistogramdd.test_large_integers(self)
numpy.tests.test_TestHistogramdd.test_rightmost_binedge(self)
numpy.tests.test_TestHistogramdd.test_shape_3d(self)
numpy.tests.test_TestHistogramdd.test_shape_4d(self)
numpy.tests.test_TestHistogramdd.test_simple(self)
numpy.tests.test_TestHistogramdd.test_weights(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_regression.py----------------------------------------
A:numpy.lib.tests.test_regression.x->numpy.loadtxt(StringIO('0 1 2 3 4 5 6 7 8 9 10 11'), dtype=dt)
A:numpy.lib.tests.test_regression.y->numpy.poly1d([3, 4])
A:numpy.lib.tests.test_regression.vt->numpy.vectorize(lambda *args: args)
A:numpy.lib.tests.test_regression.v->numpy.poly1d([1, 2, 3, 4, 5])
A:numpy.lib.tests.test_regression.p->numpy.poly1d([np.nan, np.nan, 1], r=False)
A:numpy.lib.tests.test_regression.u->numpy.poly1d([1, 2, 3])
A:numpy.lib.tests.test_regression.(q, r)->numpy.polydiv(x, x)
A:numpy.lib.tests.test_regression.tested->numpy.polyfit(x, y, 4)
A:numpy.lib.tests.test_regression.thesize->int((2 ** nbits) ** (1.0 / 5.0) + 1)
A:numpy.lib.tests.test_regression.a->numpy.zeros(2, dtype=bool)
A:numpy.lib.tests.test_regression.i->numpy.random.randint(0, n, size=thesize)
A:numpy.lib.tests.test_regression.dt->numpy.dtype([('a', 'f4'), ('b', 'i4')])
A:numpy.lib.tests.test_regression.sys.stdout->open(os.devnull, 'w')
A:numpy.lib.tests.test_regression.base->numpy.array([1, 2, 3], dtype=np.int32)
A:numpy.lib.tests.test_regression.data->numpy.eye(3).astype(np.int32)
A:numpy.lib.tests.test_regression.out->open(os.devnull, 'w')
numpy.lib.tests.test_regression.TestRegression
numpy.lib.tests.test_regression.TestRegression.test_append_fields_dtype_list(self)
numpy.lib.tests.test_regression.TestRegression.test_asfarray_none(self)
numpy.lib.tests.test_regression.TestRegression.test_cov_parameters(self)
numpy.lib.tests.test_regression.TestRegression.test_histogramdd_too_many_bins(self)
numpy.lib.tests.test_regression.TestRegression.test_include_dirs(self)
numpy.lib.tests.test_regression.TestRegression.test_large_fancy_indexing(self)
numpy.lib.tests.test_regression.TestRegression.test_loadtxt_fields_subarrays(self)
numpy.lib.tests.test_regression.TestRegression.test_mem_digitize(self)
numpy.lib.tests.test_regression.TestRegression.test_mem_polymul(self)
numpy.lib.tests.test_regression.TestRegression.test_mem_string_concat(self)
numpy.lib.tests.test_regression.TestRegression.test_mem_vectorise(self)
numpy.lib.tests.test_regression.TestRegression.test_mgrid_single_element(self)
numpy.lib.tests.test_regression.TestRegression.test_nansum_with_boolean(self)
numpy.lib.tests.test_regression.TestRegression.test_ndenumerate_crash(self)
numpy.lib.tests.test_regression.TestRegression.test_poly1d(self)
numpy.lib.tests.test_regression.TestRegression.test_poly1d_nan_roots(self)
numpy.lib.tests.test_regression.TestRegression.test_poly_div(self)
numpy.lib.tests.test_regression.TestRegression.test_poly_eq(self)
numpy.lib.tests.test_regression.TestRegression.test_polyder_return_type(self)
numpy.lib.tests.test_regression.TestRegression.test_polydiv_type(self)
numpy.lib.tests.test_regression.TestRegression.test_polyfit_build(self)
numpy.lib.tests.test_regression.TestRegression.test_polyint_type(self)
numpy.lib.tests.test_regression.TestRegression.test_py3_compat(self)
numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize(self)
numpy.lib.tests.test_regression.TestRegression.test_unique_zero_sized(self)
numpy.lib.tests.test_regression.TestRegression.test_void_coercion(self)
numpy.lib.tests.test_regression.TestRegression.test_who_with_0dim_array(self)
numpy.tests.test_regression.TestRegression
numpy.tests.test_regression.TestRegression.test_append_fields_dtype_list(self)
numpy.tests.test_regression.TestRegression.test_asfarray_none(self)
numpy.tests.test_regression.TestRegression.test_cov_parameters(self)
numpy.tests.test_regression.TestRegression.test_histogramdd_too_many_bins(self)
numpy.tests.test_regression.TestRegression.test_include_dirs(self)
numpy.tests.test_regression.TestRegression.test_large_fancy_indexing(self)
numpy.tests.test_regression.TestRegression.test_loadtxt_fields_subarrays(self)
numpy.tests.test_regression.TestRegression.test_mem_digitize(self)
numpy.tests.test_regression.TestRegression.test_mem_polymul(self)
numpy.tests.test_regression.TestRegression.test_mem_string_concat(self)
numpy.tests.test_regression.TestRegression.test_mem_vectorise(self)
numpy.tests.test_regression.TestRegression.test_mgrid_single_element(self)
numpy.tests.test_regression.TestRegression.test_nansum_with_boolean(self)
numpy.tests.test_regression.TestRegression.test_ndenumerate_crash(self)
numpy.tests.test_regression.TestRegression.test_poly1d(self)
numpy.tests.test_regression.TestRegression.test_poly1d_nan_roots(self)
numpy.tests.test_regression.TestRegression.test_poly_div(self)
numpy.tests.test_regression.TestRegression.test_poly_eq(self)
numpy.tests.test_regression.TestRegression.test_polyder_return_type(self)
numpy.tests.test_regression.TestRegression.test_polydiv_type(self)
numpy.tests.test_regression.TestRegression.test_polyfit_build(self)
numpy.tests.test_regression.TestRegression.test_polyint_type(self)
numpy.tests.test_regression.TestRegression.test_py3_compat(self)
numpy.tests.test_regression.TestRegression.test_refcount_vectorize(self)
numpy.tests.test_regression.TestRegression.test_unique_zero_sized(self)
numpy.tests.test_regression.TestRegression.test_void_coercion(self)
numpy.tests.test_regression.TestRegression.test_who_with_0dim_array(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test__version.py----------------------------------------
numpy.lib.tests.test__version.test_alpha_beta_rc()
numpy.lib.tests.test__version.test_dev0_a_b_rc_mixed()
numpy.lib.tests.test__version.test_dev0_version()
numpy.lib.tests.test__version.test_dev_a_b_rc_mixed()
numpy.lib.tests.test__version.test_dev_version()
numpy.lib.tests.test__version.test_main_versions()
numpy.lib.tests.test__version.test_raises()
numpy.lib.tests.test__version.test_version_1_point_10()
numpy.tests.test_test_alpha_beta_rc()
numpy.tests.test_test_dev0_a_b_rc_mixed()
numpy.tests.test_test_dev0_version()
numpy.tests.test_test_dev_a_b_rc_mixed()
numpy.tests.test_test_dev_version()
numpy.tests.test_test_main_versions()
numpy.tests.test_test_raises()
numpy.tests.test_test_version_1_point_10()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_packbits.py----------------------------------------
A:numpy.lib.tests.test_packbits.arr->numpy.array(a, dtype=dtype)
A:numpy.lib.tests.test_packbits.b->numpy.unpackbits(a, axis=ax)
A:numpy.lib.tests.test_packbits.a->numpy.empty(in_shape, dtype=np.uint8)
A:numpy.lib.tests.test_packbits.rnd->numpy.random.randint(low=np.iinfo(dtype).min, high=np.iinfo(dtype).max, size=arr.size, dtype=dtype)
A:numpy.lib.tests.test_packbits.x->numpy.array([[1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0]], dtype=np.uint8)
A:numpy.lib.tests.test_packbits.b_little->numpy.unpackbits(a, axis=1, bitorder='little')
A:numpy.lib.tests.test_packbits.b_big->numpy.unpackbits(a, axis=1, bitorder='big')
A:numpy.lib.tests.test_packbits.d->d.T.copy().T.copy()
A:numpy.lib.tests.test_packbits.padded1->numpy.zeros(57, dtype=np.uint8)
A:numpy.lib.tests.test_packbits.padded1[:49]->numpy.array([[1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0]], dtype=np.uint8).ravel()
A:numpy.lib.tests.test_packbits.padded1b->numpy.zeros(57, dtype=np.uint8)
A:numpy.lib.tests.test_packbits.padded1b[:49]->x[::-1].copy().ravel()
A:numpy.lib.tests.test_packbits.padded2->numpy.zeros((9, 9), dtype=np.uint8)
A:numpy.lib.tests.test_packbits.packed->numpy.packbits(self.x)
A:numpy.lib.tests.test_packbits.unpacked->numpy.unpackbits(packed, **kwargs)
A:numpy.lib.tests.test_packbits.packed0->numpy.packbits(self.x, axis=0)
A:numpy.lib.tests.test_packbits.unpacked0->numpy.unpackbits(packed0, axis=0, **kwargs)
A:numpy.lib.tests.test_packbits.packed1->numpy.packbits(self.x, axis=1)
A:numpy.lib.tests.test_packbits.unpacked1->numpy.unpackbits(packed1, axis=1, **kwargs)
numpy.lib.tests.test_packbits.TestCount
numpy.lib.tests.test_packbits.TestCount.test_axis_count(self,kwargs)
numpy.lib.tests.test_packbits.TestCount.test_bad_count(self)
numpy.lib.tests.test_packbits.TestCount.test_count(self,kwargs)
numpy.lib.tests.test_packbits.TestCount.test_roundtrip(self,bitorder,count)
numpy.lib.tests.test_packbits.TestCount.test_roundtrip_axis(self,bitorder,count)
numpy.lib.tests.test_packbits.test_pack_unpack_order()
numpy.lib.tests.test_packbits.test_packbits()
numpy.lib.tests.test_packbits.test_packbits_empty()
numpy.lib.tests.test_packbits.test_packbits_empty_with_axis()
numpy.lib.tests.test_packbits.test_packbits_large(bitorder)
numpy.lib.tests.test_packbits.test_packbits_very_large()
numpy.lib.tests.test_packbits.test_unpackbits()
numpy.lib.tests.test_packbits.test_unpackbits_empty()
numpy.lib.tests.test_packbits.test_unpackbits_empty_with_axis()
numpy.lib.tests.test_packbits.test_unpackbits_large()
numpy.tests.test_packbits.TestCount
numpy.tests.test_packbits.TestCount.test_axis_count(self,kwargs)
numpy.tests.test_packbits.TestCount.test_bad_count(self)
numpy.tests.test_packbits.TestCount.test_count(self,kwargs)
numpy.tests.test_packbits.TestCount.test_roundtrip(self,bitorder,count)
numpy.tests.test_packbits.TestCount.test_roundtrip_axis(self,bitorder,count)
numpy.tests.test_packbits.test_pack_unpack_order()
numpy.tests.test_packbits.test_packbits()
numpy.tests.test_packbits.test_packbits_empty()
numpy.tests.test_packbits.test_packbits_empty_with_axis()
numpy.tests.test_packbits.test_packbits_large(bitorder)
numpy.tests.test_packbits.test_packbits_very_large()
numpy.tests.test_packbits.test_unpackbits()
numpy.tests.test_packbits.test_unpackbits_empty()
numpy.tests.test_packbits.test_unpackbits_empty_with_axis()
numpy.tests.test_packbits.test_unpackbits_large()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_arrayterator.py----------------------------------------
A:numpy.lib.tests.test_arrayterator.shape->tuple((randint(10) + 1 for dim in range(ndims)))
A:numpy.lib.tests.test_arrayterator.els->reduce(mul, shape)
A:numpy.lib.tests.test_arrayterator.a->numpy.arange(els)
A:numpy.lib.tests.test_arrayterator.buf_size->randint(2 * els)
A:numpy.lib.tests.test_arrayterator.b->Arrayterator(a, buf_size)
A:numpy.lib.tests.test_arrayterator.slice_->tuple((slice(*t) for t in zip(start, stop, step)))
numpy.lib.tests.test_arrayterator.test()
numpy.tests.test_arrayterator.test()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_shape_base.py----------------------------------------
A:numpy.lib.tests.test_shape_base.res->numpy.squeeze(a)
A:numpy.lib.tests.test_shape_base.a->numpy.ones(r, b.dtype)
A:numpy.lib.tests.test_shape_base.a_func->func(a, axis=axis, **kwargs)
A:numpy.lib.tests.test_shape_base.ai_func->argfunc(a, axis=axis, **kwargs)
A:numpy.lib.tests.test_shape_base.ai->numpy.ones((1, 2, 5), dtype=np.intp)
A:numpy.lib.tests.test_shape_base.actual->numpy.column_stack((a, b))
A:numpy.lib.tests.test_shape_base.a_base->numpy.array([[10, 30, 20], [60, 40, 50]])
A:numpy.lib.tests.test_shape_base.i_max->_add_keepdims(np.argmax)(a, axis=axis)
A:numpy.lib.tests.test_shape_base.i_min->_add_keepdims(np.argmin)(a, axis=axis)
A:numpy.lib.tests.test_shape_base.m->numpy.array([[0, 1], [2, 3]]).view(MyNDArray)
A:numpy.lib.tests.test_shape_base.expected->numpy.array([[1, 2], [2, 3], [3, 4]])
A:numpy.lib.tests.test_shape_base.result->apply_along_axis(double, 1, m)
A:numpy.lib.tests.test_shape_base.a2d->numpy.arange(6 * 3).reshape((6, 3))
A:numpy.lib.tests.test_shape_base.a3d->numpy.arange(6 * 5 * 3).reshape((6, 5, 3))
A:numpy.lib.tests.test_shape_base.d->numpy.ones((50, 60))
A:numpy.lib.tests.test_shape_base.aoa_a->apply_over_axes(np.sum, a, [0, 2])
A:numpy.lib.tests.test_shape_base.b->randint(0, 10, size=s)
A:numpy.lib.tests.test_shape_base.expanded->numpy.expand_dims(a, axis=1)
A:numpy.lib.tests.test_shape_base.chunk->numpy.broadcast_to([0], (1 << 30, 2))
A:numpy.lib.tests.test_shape_base.desired->numpy.array([[[1, 1], [2, 2]]])
A:numpy.lib.tests.test_shape_base.c->rand(1, 1, 20, 10)
A:numpy.lib.tests.test_shape_base.ma->myarray(a.shape, a.dtype, a.data)
A:numpy.lib.tests.test_shape_base.large->tile(b, r)
A:numpy.lib.tests.test_shape_base.klarge->kron(a, b)
A:numpy.lib.tests.test_shape_base.d2->numpy.ones((30, 60, 6))
numpy.lib.tests.test_shape_base.TestApplyAlongAxis
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_0d_array(self,cls=np.ndarray)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_3d(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_axis_insertion(self,cls=np.ndarray)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_axis_insertion_ma(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_empty(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_preserve_subclass(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_scalar_array(self,cls=np.ndarray)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_simple(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_simple101(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_subclass(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_subclass_preservation(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_tuple_func1d(self)
numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_with_iterable_object(self)
numpy.lib.tests.test_shape_base.TestApplyOverAxes
numpy.lib.tests.test_shape_base.TestApplyOverAxes.test_simple(self)
numpy.lib.tests.test_shape_base.TestArraySplit
numpy.lib.tests.test_shape_base.TestArraySplit.test_index_split_high_bound(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_index_split_low_bound(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_index_split_simple(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_0_split(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split_2D_cols(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split_2D_default(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split_2D_rows(self)
numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split_2D_rows_greater_max_int32(self)
numpy.lib.tests.test_shape_base.TestColumnStack
numpy.lib.tests.test_shape_base.TestColumnStack.test_1D_arrays(self)
numpy.lib.tests.test_shape_base.TestColumnStack.test_2D_arrays(self)
numpy.lib.tests.test_shape_base.TestColumnStack.test_generator(self)
numpy.lib.tests.test_shape_base.TestColumnStack.test_non_iterable(self)
numpy.lib.tests.test_shape_base.TestDsplit
numpy.lib.tests.test_shape_base.TestDsplit.test_0D_array(self)
numpy.lib.tests.test_shape_base.TestDsplit.test_1D_array(self)
numpy.lib.tests.test_shape_base.TestDsplit.test_2D_array(self)
numpy.lib.tests.test_shape_base.TestDsplit.test_3D_array(self)
numpy.lib.tests.test_shape_base.TestDsplit.test_non_iterable(self)
numpy.lib.tests.test_shape_base.TestDstack
numpy.lib.tests.test_shape_base.TestDstack.test_0D_array(self)
numpy.lib.tests.test_shape_base.TestDstack.test_1D_array(self)
numpy.lib.tests.test_shape_base.TestDstack.test_2D_array(self)
numpy.lib.tests.test_shape_base.TestDstack.test_2D_array2(self)
numpy.lib.tests.test_shape_base.TestDstack.test_generator(self)
numpy.lib.tests.test_shape_base.TestDstack.test_non_iterable(self)
numpy.lib.tests.test_shape_base.TestExpandDims
numpy.lib.tests.test_shape_base.TestExpandDims.test_axis_out_of_range(self)
numpy.lib.tests.test_shape_base.TestExpandDims.test_axis_tuple(self)
numpy.lib.tests.test_shape_base.TestExpandDims.test_functionality(self)
numpy.lib.tests.test_shape_base.TestExpandDims.test_repeated_axis(self)
numpy.lib.tests.test_shape_base.TestExpandDims.test_subclasses(self)
numpy.lib.tests.test_shape_base.TestHsplit
numpy.lib.tests.test_shape_base.TestHsplit.test_0D_array(self)
numpy.lib.tests.test_shape_base.TestHsplit.test_1D_array(self)
numpy.lib.tests.test_shape_base.TestHsplit.test_2D_array(self)
numpy.lib.tests.test_shape_base.TestHsplit.test_non_iterable(self)
numpy.lib.tests.test_shape_base.TestKron
numpy.lib.tests.test_shape_base.TestKron.test_return_type(self)
numpy.lib.tests.test_shape_base.TestMayShareMemory
numpy.lib.tests.test_shape_base.TestMayShareMemory.test_basic(self)
numpy.lib.tests.test_shape_base.TestPutAlongAxis
numpy.lib.tests.test_shape_base.TestPutAlongAxis.test_broadcast(self)
numpy.lib.tests.test_shape_base.TestPutAlongAxis.test_replace_max(self)
numpy.lib.tests.test_shape_base.TestSplit
numpy.lib.tests.test_shape_base.TestSplit.test_equal_split(self)
numpy.lib.tests.test_shape_base.TestSplit.test_unequal_split(self)
numpy.lib.tests.test_shape_base.TestSqueeze
numpy.lib.tests.test_shape_base.TestSqueeze.test_basic(self)
numpy.lib.tests.test_shape_base.TestTakeAlongAxis
numpy.lib.tests.test_shape_base.TestTakeAlongAxis.test_argequivalent(self)
numpy.lib.tests.test_shape_base.TestTakeAlongAxis.test_broadcast(self)
numpy.lib.tests.test_shape_base.TestTakeAlongAxis.test_empty(self)
numpy.lib.tests.test_shape_base.TestTakeAlongAxis.test_invalid(self)
numpy.lib.tests.test_shape_base.TestTile
numpy.lib.tests.test_shape_base.TestTile.test_basic(self)
numpy.lib.tests.test_shape_base.TestTile.test_empty(self)
numpy.lib.tests.test_shape_base.TestTile.test_kroncompare(self)
numpy.lib.tests.test_shape_base.TestTile.test_tile_one_repetition_on_array_gh4679(self)
numpy.lib.tests.test_shape_base.TestVsplit
numpy.lib.tests.test_shape_base.TestVsplit.test_0D_array(self)
numpy.lib.tests.test_shape_base.TestVsplit.test_1D_array(self)
numpy.lib.tests.test_shape_base.TestVsplit.test_2D_array(self)
numpy.lib.tests.test_shape_base.TestVsplit.test_non_iterable(self)
numpy.lib.tests.test_shape_base._add_keepdims(func)
numpy.lib.tests.test_shape_base.compare_results(res,desired)
numpy.tests.test_TestApplyAlongAxis
numpy.tests.test_TestApplyAlongAxis.test_0d_array(self,cls=np.ndarray)
numpy.tests.test_TestApplyAlongAxis.test_3d(self)
numpy.tests.test_TestApplyAlongAxis.test_axis_insertion(self,cls=np.ndarray)
numpy.tests.test_TestApplyAlongAxis.test_axis_insertion_ma(self)
numpy.tests.test_TestApplyAlongAxis.test_empty(self)
numpy.tests.test_TestApplyAlongAxis.test_preserve_subclass(self)
numpy.tests.test_TestApplyAlongAxis.test_scalar_array(self,cls=np.ndarray)
numpy.tests.test_TestApplyAlongAxis.test_simple(self)
numpy.tests.test_TestApplyAlongAxis.test_simple101(self)
numpy.tests.test_TestApplyAlongAxis.test_subclass(self)
numpy.tests.test_TestApplyAlongAxis.test_subclass_preservation(self)
numpy.tests.test_TestApplyAlongAxis.test_tuple_func1d(self)
numpy.tests.test_TestApplyAlongAxis.test_with_iterable_object(self)
numpy.tests.test_TestApplyOverAxes
numpy.tests.test_TestApplyOverAxes.test_simple(self)
numpy.tests.test_TestArraySplit
numpy.tests.test_TestArraySplit.test_index_split_high_bound(self)
numpy.tests.test_TestArraySplit.test_index_split_low_bound(self)
numpy.tests.test_TestArraySplit.test_index_split_simple(self)
numpy.tests.test_TestArraySplit.test_integer_0_split(self)
numpy.tests.test_TestArraySplit.test_integer_split(self)
numpy.tests.test_TestArraySplit.test_integer_split_2D_cols(self)
numpy.tests.test_TestArraySplit.test_integer_split_2D_default(self)
numpy.tests.test_TestArraySplit.test_integer_split_2D_rows(self)
numpy.tests.test_TestArraySplit.test_integer_split_2D_rows_greater_max_int32(self)
numpy.tests.test_TestColumnStack
numpy.tests.test_TestColumnStack.test_1D_arrays(self)
numpy.tests.test_TestColumnStack.test_2D_arrays(self)
numpy.tests.test_TestColumnStack.test_generator(self)
numpy.tests.test_TestColumnStack.test_non_iterable(self)
numpy.tests.test_TestDsplit
numpy.tests.test_TestDsplit.test_0D_array(self)
numpy.tests.test_TestDsplit.test_1D_array(self)
numpy.tests.test_TestDsplit.test_2D_array(self)
numpy.tests.test_TestDsplit.test_3D_array(self)
numpy.tests.test_TestDsplit.test_non_iterable(self)
numpy.tests.test_TestDstack
numpy.tests.test_TestDstack.test_0D_array(self)
numpy.tests.test_TestDstack.test_1D_array(self)
numpy.tests.test_TestDstack.test_2D_array(self)
numpy.tests.test_TestDstack.test_2D_array2(self)
numpy.tests.test_TestDstack.test_generator(self)
numpy.tests.test_TestDstack.test_non_iterable(self)
numpy.tests.test_TestExpandDims
numpy.tests.test_TestExpandDims.test_axis_out_of_range(self)
numpy.tests.test_TestExpandDims.test_axis_tuple(self)
numpy.tests.test_TestExpandDims.test_functionality(self)
numpy.tests.test_TestExpandDims.test_repeated_axis(self)
numpy.tests.test_TestExpandDims.test_subclasses(self)
numpy.tests.test_TestHsplit
numpy.tests.test_TestHsplit.test_0D_array(self)
numpy.tests.test_TestHsplit.test_1D_array(self)
numpy.tests.test_TestHsplit.test_2D_array(self)
numpy.tests.test_TestHsplit.test_non_iterable(self)
numpy.tests.test_TestKron
numpy.tests.test_TestKron.test_return_type(self)
numpy.tests.test_TestMayShareMemory
numpy.tests.test_TestMayShareMemory.test_basic(self)
numpy.tests.test_TestPutAlongAxis
numpy.tests.test_TestPutAlongAxis.test_broadcast(self)
numpy.tests.test_TestPutAlongAxis.test_replace_max(self)
numpy.tests.test_TestSplit
numpy.tests.test_TestSplit.test_equal_split(self)
numpy.tests.test_TestSplit.test_unequal_split(self)
numpy.tests.test_TestSqueeze
numpy.tests.test_TestSqueeze.test_basic(self)
numpy.tests.test_TestTakeAlongAxis
numpy.tests.test_TestTakeAlongAxis.test_argequivalent(self)
numpy.tests.test_TestTakeAlongAxis.test_broadcast(self)
numpy.tests.test_TestTakeAlongAxis.test_empty(self)
numpy.tests.test_TestTakeAlongAxis.test_invalid(self)
numpy.tests.test_TestTile
numpy.tests.test_TestTile.test_basic(self)
numpy.tests.test_TestTile.test_empty(self)
numpy.tests.test_TestTile.test_kroncompare(self)
numpy.tests.test_TestTile.test_tile_one_repetition_on_array_gh4679(self)
numpy.tests.test_TestVsplit
numpy.tests.test_TestVsplit.test_0D_array(self)
numpy.tests.test_TestVsplit.test_1D_array(self)
numpy.tests.test_TestVsplit.test_2D_array(self)
numpy.tests.test_TestVsplit.test_non_iterable(self)
numpy.tests.test__add_keepdims(func)
numpy.tests.test_compare_results(res,desired)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_arraysetops.py----------------------------------------
A:numpy.lib.tests.test_arraysetops.a->numpy.array([[-1], [0]], dt)
A:numpy.lib.tests.test_arraysetops.b->numpy.unique(a, axis=0)
A:numpy.lib.tests.test_arraysetops.ec->numpy.array([19, 20])
A:numpy.lib.tests.test_arraysetops.c->numpy.multiply([2, 1, 2, 2], 10)
A:numpy.lib.tests.test_arraysetops.ed->numpy.array([1, 2, 5])
A:numpy.lib.tests.test_arraysetops.res->intersect1d([1, 2, 3], [1, 2, 3])
A:numpy.lib.tests.test_arraysetops.(c, i1, i2)->intersect1d(a, b, return_indices=True)
A:numpy.lib.tests.test_arraysetops.ee->numpy.array([1, 2, 4])
A:numpy.lib.tests.test_arraysetops.ef->numpy.array([1, 2, 3, 4])
A:numpy.lib.tests.test_arraysetops.ui1->numpy.unravel_index(i1, a.shape)
A:numpy.lib.tests.test_arraysetops.ui2->numpy.unravel_index(i2, b.shape)
A:numpy.lib.tests.test_arraysetops.ea->numpy.array([2, 7, 8])
A:numpy.lib.tests.test_arraysetops.zero_elem->numpy.array([])
A:numpy.lib.tests.test_arraysetops.one_elem->numpy.array([1])
A:numpy.lib.tests.test_arraysetops.two_elem->numpy.array([1, 2])
A:numpy.lib.tests.test_arraysetops.msg->base_msg.format('return_index, return_inverse and return_counts', dt)
A:numpy.lib.tests.test_arraysetops.actual->setdiff1d(a, b, assume_unique=True)
A:numpy.lib.tests.test_arraysetops.isin_slow->numpy.vectorize(_isin_slow, otypes=[bool], excluded={1})
A:numpy.lib.tests.test_arraysetops.x->numpy.array([64, 0, 1, 2, 3, 63, 63, 0, 0, 0, 1, 2, 0, 63, 0], dtype='uint8')
A:numpy.lib.tests.test_arraysetops.y->numpy.ma.masked_equal(x, 0)
A:numpy.lib.tests.test_arraysetops.f->numpy.array(3)
A:numpy.lib.tests.test_arraysetops.long_b->numpy.arange(3, 63).reshape(30, 2)
A:numpy.lib.tests.test_arraysetops.ar2->numpy.array([(1,), 2], dtype=object)
A:numpy.lib.tests.test_arraysetops.expected->numpy.array([3, 1])
A:numpy.lib.tests.test_arraysetops.result->numpy.take(data3d, [1, 0], axis=2)
A:numpy.lib.tests.test_arraysetops.dt->numpy.dtype([('field1', int), ('field2', object)])
A:numpy.lib.tests.test_arraysetops.ar1->numpy.array([(1,), (2, 3), 1], dtype=object)
A:numpy.lib.tests.test_arraysetops.ez->numpy.array([0, 1, 2, 3, 4, 5])
A:numpy.lib.tests.test_arraysetops.z->union1d(x, y)
A:numpy.lib.tests.test_arraysetops.c1->setxor1d(a, b)
A:numpy.lib.tests.test_arraysetops.aux1->intersect1d(a, b)
A:numpy.lib.tests.test_arraysetops.aux2->union1d(a, b)
A:numpy.lib.tests.test_arraysetops.c2->setdiff1d(aux2, aux1)
A:numpy.lib.tests.test_arraysetops.v->numpy.unique(y)
A:numpy.lib.tests.test_arraysetops.(v, j)->unique(a, False, False, True)
A:numpy.lib.tests.test_arraysetops.(v, j1, j2)->unique(a, False, True, True)
A:numpy.lib.tests.test_arraysetops.(v, j1, j2, j3)->unique(a, True, True, True)
A:numpy.lib.tests.test_arraysetops.aa->numpy.array(list(zip(a, a)), dt)
A:numpy.lib.tests.test_arraysetops.bb->numpy.array(list(zip(b, b)), dt)
A:numpy.lib.tests.test_arraysetops.a1->unique(a)
A:numpy.lib.tests.test_arraysetops.(a2, a2_inv)->numpy.unique(a, return_inverse=True)
A:numpy.lib.tests.test_arraysetops.nat->numpy.timedelta64('nat')
A:numpy.lib.tests.test_arraysetops.inp_arr->numpy.asarray(inp)
A:numpy.lib.tests.test_arraysetops.data->numpy.array([[0, 1, 0, 0], [1, 0, 0, 0], [0, 1, 0, 0], [1, 0, 0, 0]]).astype(dtype)
A:numpy.lib.tests.test_arraysetops.uniq->unique(x, axis=axis)
A:numpy.lib.tests.test_arraysetops.single_zero->numpy.empty(shape=(2, 0), dtype=np.int8)
A:numpy.lib.tests.test_arraysetops.(uniq, idx, inv, cnt)->unique(data, axis=1, return_index=True, return_inverse=True, return_counts=True)
A:numpy.lib.tests.test_arraysetops.multiple_zeros->numpy.empty(shape=shape)
A:numpy.lib.tests.test_arraysetops.expected_shape->list(shape)
A:numpy.lib.tests.test_arraysetops.(v2, i, c)->numpy.unique(y, return_index=True, return_counts=True)
A:numpy.lib.tests.test_arraysetops.data3d->numpy.array([[[1, 1], [1, 0]], [[0, 1], [0, 0]]]).astype(dtype)
numpy.lib.tests.test_arraysetops.TestSetOps
numpy.lib.tests.test_arraysetops.TestSetOps.test_ediff1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_ediff1d_forbidden_type_casts(self,ary,prepend,append,expected)
numpy.lib.tests.test_arraysetops.TestSetOps.test_ediff1d_scalar_handling(self,ary,prepend,append,expected)
numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_both_arrays_are_object(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_both_arrays_have_structured_dtype(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_char_array(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_first_array_is_object(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_invert(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_ravel(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_second_array_is_object(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_with_arrays_containing_tuples(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_intersect1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_intersect1d_array_like(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_intersect1d_indices(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_isin(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_manyways(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_setdiff1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_setdiff1d_char_array(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_setdiff1d_unique(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_setxor1d(self)
numpy.lib.tests.test_arraysetops.TestSetOps.test_union1d(self)
numpy.lib.tests.test_arraysetops.TestUnique
numpy.lib.tests.test_arraysetops.TestUnique._run_axis_tests(self,dtype)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_1d(self)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_1d_with_axis(self,axis)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_axis(self)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_axis_errors(self)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_axis_list(self)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_axis_zeros(self)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_masked(self)
numpy.lib.tests.test_arraysetops.TestUnique.test_unique_sort_order_with_axis(self)
numpy.tests.test_TestSetOps
numpy.tests.test_TestSetOps.test_ediff1d(self)
numpy.tests.test_TestSetOps.test_ediff1d_forbidden_type_casts(self,ary,prepend,append,expected)
numpy.tests.test_TestSetOps.test_ediff1d_scalar_handling(self,ary,prepend,append,expected)
numpy.tests.test_TestSetOps.test_in1d(self)
numpy.tests.test_TestSetOps.test_in1d_both_arrays_are_object(self)
numpy.tests.test_TestSetOps.test_in1d_both_arrays_have_structured_dtype(self)
numpy.tests.test_TestSetOps.test_in1d_char_array(self)
numpy.tests.test_TestSetOps.test_in1d_first_array_is_object(self)
numpy.tests.test_TestSetOps.test_in1d_invert(self)
numpy.tests.test_TestSetOps.test_in1d_ravel(self)
numpy.tests.test_TestSetOps.test_in1d_second_array_is_object(self)
numpy.tests.test_TestSetOps.test_in1d_with_arrays_containing_tuples(self)
numpy.tests.test_TestSetOps.test_intersect1d(self)
numpy.tests.test_TestSetOps.test_intersect1d_array_like(self)
numpy.tests.test_TestSetOps.test_intersect1d_indices(self)
numpy.tests.test_TestSetOps.test_isin(self)
numpy.tests.test_TestSetOps.test_manyways(self)
numpy.tests.test_TestSetOps.test_setdiff1d(self)
numpy.tests.test_TestSetOps.test_setdiff1d_char_array(self)
numpy.tests.test_TestSetOps.test_setdiff1d_unique(self)
numpy.tests.test_TestSetOps.test_setxor1d(self)
numpy.tests.test_TestSetOps.test_union1d(self)
numpy.tests.test_TestUnique
numpy.tests.test_TestUnique._run_axis_tests(self,dtype)
numpy.tests.test_TestUnique.test_unique_1d(self)
numpy.tests.test_TestUnique.test_unique_1d_with_axis(self,axis)
numpy.tests.test_TestUnique.test_unique_axis(self)
numpy.tests.test_TestUnique.test_unique_axis_errors(self)
numpy.tests.test_TestUnique.test_unique_axis_list(self)
numpy.tests.test_TestUnique.test_unique_axis_zeros(self)
numpy.tests.test_TestUnique.test_unique_masked(self)
numpy.tests.test_TestUnique.test_unique_sort_order_with_axis(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_recfunctions.py----------------------------------------
A:numpy.lib.tests.test_recfunctions.x->numpy.array([(obj, 1.0), (obj, 2.0)], dtype=[('A', object), ('B', float)])
A:numpy.lib.tests.test_recfunctions.y->numpy.array([10, 20], dtype=int)
A:numpy.lib.tests.test_recfunctions.z->numpy.array([('A', 1), ('B', 2)], dtype=[('A', '|S3'), ('B', float, (1,))])
A:numpy.lib.tests.test_recfunctions.w->numpy.array([(1, (2, 3.0)), (4, (5, 6.0))], dtype=[('a', int), ('b', [('ba', float), ('bb', int)])])
A:numpy.lib.tests.test_recfunctions.test->append_fields(x, 'C', data=y, usemask=False)
A:numpy.lib.tests.test_recfunctions.a->numpy.array(list(zip(np.tile([10, 11], 5), np.repeat(np.arange(5), 2), np.arange(50, 60), np.arange(10, 20))), dtype=[('k', int), ('a', int), ('b', int), ('c', int)])
A:numpy.lib.tests.test_recfunctions.control->numpy.array([(obj, 1.0, 10), (obj, 2.0, 20)], dtype=[('A', object), ('B', float), ('C', int)])
A:numpy.lib.tests.test_recfunctions.ndtype->numpy.dtype([])
A:numpy.lib.tests.test_recfunctions.dt->numpy.dtype('i1,f4', align=True)
A:numpy.lib.tests.test_recfunctions.out->unstructured_to_structured(c, a.dtype)
A:numpy.lib.tests.test_recfunctions.b->numpy.array(list(zip(np.tile([10, 11], 5), np.repeat(np.arange(5), 2), np.arange(65, 75), np.arange(0, 10))), dtype=[('k', int), ('a', int), ('b', int), ('c', int)])
A:numpy.lib.tests.test_recfunctions.c->numpy.arange(20).reshape((4, 5))
A:numpy.lib.tests.test_recfunctions.want->numpy.array([(0, (1.0, 2), [3.0, 4.0]), (5, (6.0, 7), [8.0, 9.0]), (10, (11.0, 12), [13.0, 14.0]), (15, (16.0, 17), [18.0, 19.0])], dtype=[('a', 'i4'), ('b', [('f0', 'f4'), ('f1', 'u2')]), ('c', 'f4', (2,))])
A:numpy.lib.tests.test_recfunctions.d->numpy.array([(1, [2, 3], [[4, 5], [6, 7]]), (8, [9, 10], [[11, 12], [13, 14]])], dtype=[('x0', 'i4'), ('x1', ('i4', 2)), ('x2', ('i4', (2, 2)))])
A:numpy.lib.tests.test_recfunctions.dd->structured_to_unstructured(d)
A:numpy.lib.tests.test_recfunctions.ddd->unstructured_to_structured(dd, d.dtype)
A:numpy.lib.tests.test_recfunctions.point->numpy.dtype([('x', int), ('y', int)])
A:numpy.lib.tests.test_recfunctions.triangle->numpy.dtype([('a', point), ('b', point), ('c', point)])
A:numpy.lib.tests.test_recfunctions.arr->numpy.zeros((), dt)
A:numpy.lib.tests.test_recfunctions.res->join_by('k', a, b)
A:numpy.lib.tests.test_recfunctions.ret->structured_to_unstructured(arr, dtype=dtype)
A:numpy.lib.tests.test_recfunctions.backarr->unstructured_to_structured(ret, dt)
A:numpy.lib.tests.test_recfunctions.mx->numpy.ma.array([1, 2, 3], mask=[1, 0, 0])
A:numpy.lib.tests.test_recfunctions.zz->numpy.array([('a', [10.0], 100.0), ('b', [20.0], 200.0), ('c', [30.0], 300.0)], dtype=[('A', '|S3'), ('B', float, (1,)), ('C', float)])
A:numpy.lib.tests.test_recfunctions.expected->numpy.array([([1, 1, 1], np.pi, 3)], dtype=expected_dtype)
A:numpy.lib.tests.test_recfunctions.self.a->numpy.array(list(zip(np.arange(10), np.arange(50, 60), np.arange(100, 110))), dtype=[('a', int), ('b', int), ('c', int)])
A:numpy.lib.tests.test_recfunctions.self.b->numpy.array(list(zip(np.arange(5, 15), np.arange(65, 75), np.arange(100, 110))), dtype=[('a', int), ('b', int), ('d', int)])
A:numpy.lib.tests.test_recfunctions.foo->numpy.array([(1,)], dtype=[('key', int)])
A:numpy.lib.tests.test_recfunctions.bar->numpy.array([(1, np.array([1, 2, 3]))], dtype=[('key', int), ('value', 'uint16', 3)])
A:numpy.lib.tests.test_recfunctions.j->join_by(['c', 'b'], a, b, jointype='inner', usemask=False)
A:numpy.lib.tests.test_recfunctions.a_dtype->numpy.dtype([('pos', int, 3), ('f', '<f4')])
A:numpy.lib.tests.test_recfunctions.b_dtype->numpy.dtype([('pos', int, 3), ('g', '<f4')])
A:numpy.lib.tests.test_recfunctions.expected_dtype->numpy.dtype([('k', 'i1'), ('v1', 'f4'), ('v2', 'f4')])
A:numpy.lib.tests.test_recfunctions.cls.a->numpy.array(list(zip(np.arange(10), np.arange(50, 60), np.arange(100, 110))), dtype=[('a', int), ('b', int), ('c', int)])
A:numpy.lib.tests.test_recfunctions.cls.b->numpy.array(list(zip(np.arange(10), np.arange(65, 75), np.arange(100, 110))), dtype=[('a', int), ('b', int), ('d', int)])
A:numpy.lib.tests.test_recfunctions.self.data->dict(obj=date(2000, 1, 1))
numpy.lib.tests.test_recfunctions.TestAppendFields
numpy.lib.tests.test_recfunctions.TestAppendFields.setup(self)
numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_double(self)
numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_on_flex(self)
numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_on_nested(self)
numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_single(self)
numpy.lib.tests.test_recfunctions.TestAppendFieldsObj
numpy.lib.tests.test_recfunctions.TestAppendFieldsObj.setup(self)
numpy.lib.tests.test_recfunctions.TestAppendFieldsObj.test_append_to_objects(self)
numpy.lib.tests.test_recfunctions.TestJoinBy
numpy.lib.tests.test_recfunctions.TestJoinBy.setup(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_different_field_order(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_duplicate_keys(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_inner_join(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_join(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_join_subdtype(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_leftouter_join(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_outer_join(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_padded_dtype(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_same_name_different_dtypes(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_same_name_different_dtypes_key(self)
numpy.lib.tests.test_recfunctions.TestJoinBy.test_subarray_key(self)
numpy.lib.tests.test_recfunctions.TestJoinBy2
numpy.lib.tests.test_recfunctions.TestJoinBy2.setup(cls)
numpy.lib.tests.test_recfunctions.TestJoinBy2.test_no_postfix(self)
numpy.lib.tests.test_recfunctions.TestJoinBy2.test_no_r1postfix(self)
numpy.lib.tests.test_recfunctions.TestJoinBy2.test_no_r2postfix(self)
numpy.lib.tests.test_recfunctions.TestJoinBy2.test_two_keys_two_vars(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays
numpy.lib.tests.test_recfunctions.TestMergeArrays.setup(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_flatten(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_flatten_wflexible(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_singlerecord(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_solo(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_solo_w_flatten(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_standard(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_w_shorter_flex(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_w_singlefield(self)
numpy.lib.tests.test_recfunctions.TestMergeArrays.test_wmasked_arrays(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions
numpy.lib.tests.test_recfunctions.TestRecFunctions.setup(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_drop_fields(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_field_assignment_by_name(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_find_duplicates(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_find_duplicates_ignoremask(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_get_fieldstructure(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_get_names(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_get_names_flat(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_rename_fields(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_repack_fields(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_structured_to_unstructured(self)
numpy.lib.tests.test_recfunctions.TestRecFunctions.test_zip_descr(self)
numpy.lib.tests.test_recfunctions.TestRecursiveFillFields
numpy.lib.tests.test_recfunctions.TestRecursiveFillFields.test_masked_flexible(self)
numpy.lib.tests.test_recfunctions.TestRecursiveFillFields.test_simple_flexible(self)
numpy.lib.tests.test_recfunctions.TestStackArrays
numpy.lib.tests.test_recfunctions.TestStackArrays.setup(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_autoconversion(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_checktitles(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_defaults(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_matching_named_fields(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_solo(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_subdtype(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_unnamed_and_named_fields(self)
numpy.lib.tests.test_recfunctions.TestStackArrays.test_unnamed_fields(self)
numpy.tests.test_recfunctions.TestAppendFields
numpy.tests.test_recfunctions.TestAppendFields.setup(self)
numpy.tests.test_recfunctions.TestAppendFields.test_append_double(self)
numpy.tests.test_recfunctions.TestAppendFields.test_append_on_flex(self)
numpy.tests.test_recfunctions.TestAppendFields.test_append_on_nested(self)
numpy.tests.test_recfunctions.TestAppendFields.test_append_single(self)
numpy.tests.test_recfunctions.TestAppendFieldsObj
numpy.tests.test_recfunctions.TestAppendFieldsObj.setup(self)
numpy.tests.test_recfunctions.TestAppendFieldsObj.test_append_to_objects(self)
numpy.tests.test_recfunctions.TestJoinBy
numpy.tests.test_recfunctions.TestJoinBy.setup(self)
numpy.tests.test_recfunctions.TestJoinBy.test_different_field_order(self)
numpy.tests.test_recfunctions.TestJoinBy.test_duplicate_keys(self)
numpy.tests.test_recfunctions.TestJoinBy.test_inner_join(self)
numpy.tests.test_recfunctions.TestJoinBy.test_join(self)
numpy.tests.test_recfunctions.TestJoinBy.test_join_subdtype(self)
numpy.tests.test_recfunctions.TestJoinBy.test_leftouter_join(self)
numpy.tests.test_recfunctions.TestJoinBy.test_outer_join(self)
numpy.tests.test_recfunctions.TestJoinBy.test_padded_dtype(self)
numpy.tests.test_recfunctions.TestJoinBy.test_same_name_different_dtypes(self)
numpy.tests.test_recfunctions.TestJoinBy.test_same_name_different_dtypes_key(self)
numpy.tests.test_recfunctions.TestJoinBy.test_subarray_key(self)
numpy.tests.test_recfunctions.TestJoinBy2
numpy.tests.test_recfunctions.TestJoinBy2.setup(cls)
numpy.tests.test_recfunctions.TestJoinBy2.test_no_postfix(self)
numpy.tests.test_recfunctions.TestJoinBy2.test_no_r1postfix(self)
numpy.tests.test_recfunctions.TestJoinBy2.test_no_r2postfix(self)
numpy.tests.test_recfunctions.TestJoinBy2.test_two_keys_two_vars(self)
numpy.tests.test_recfunctions.TestMergeArrays
numpy.tests.test_recfunctions.TestMergeArrays.setup(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_flatten(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_flatten_wflexible(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_singlerecord(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_solo(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_solo_w_flatten(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_standard(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_w_shorter_flex(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_w_singlefield(self)
numpy.tests.test_recfunctions.TestMergeArrays.test_wmasked_arrays(self)
numpy.tests.test_recfunctions.TestRecFunctions
numpy.tests.test_recfunctions.TestRecFunctions.setup(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_drop_fields(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_field_assignment_by_name(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_find_duplicates(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_find_duplicates_ignoremask(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_get_fieldstructure(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_get_names(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_get_names_flat(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_rename_fields(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_repack_fields(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_structured_to_unstructured(self)
numpy.tests.test_recfunctions.TestRecFunctions.test_zip_descr(self)
numpy.tests.test_recfunctions.TestRecursiveFillFields
numpy.tests.test_recfunctions.TestRecursiveFillFields.test_masked_flexible(self)
numpy.tests.test_recfunctions.TestRecursiveFillFields.test_simple_flexible(self)
numpy.tests.test_recfunctions.TestStackArrays
numpy.tests.test_recfunctions.TestStackArrays.setup(self)
numpy.tests.test_recfunctions.TestStackArrays.test_autoconversion(self)
numpy.tests.test_recfunctions.TestStackArrays.test_checktitles(self)
numpy.tests.test_recfunctions.TestStackArrays.test_defaults(self)
numpy.tests.test_recfunctions.TestStackArrays.test_matching_named_fields(self)
numpy.tests.test_recfunctions.TestStackArrays.test_solo(self)
numpy.tests.test_recfunctions.TestStackArrays.test_subdtype(self)
numpy.tests.test_recfunctions.TestStackArrays.test_unnamed_and_named_fields(self)
numpy.tests.test_recfunctions.TestStackArrays.test_unnamed_fields(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_function_base.py----------------------------------------
A:numpy.lib.tests.test_function_base.data->numpy.add.outer(data, data)
A:numpy.lib.tests.test_function_base.ret->numpy.zeros(np.broadcast(real, imag).shape, np.complex_)
A:numpy.lib.tests.test_function_base.a->numpy.array([2 + 3j, 1 - 2j, 1 - 3j, 2 + 1j], dtype='D')
A:numpy.lib.tests.test_function_base.b->numpy.array(np.nan, dtype=float, ndmin=2)
A:numpy.lib.tests.test_function_base.c->numpy.percentile(x, (25, 50), interpolation='lower', axis=1, out=out)
A:numpy.lib.tests.test_function_base.a_copy->numpy.copy(a)
A:numpy.lib.tests.test_function_base.a_fort->numpy.array([[1, 2], [3, 4]], order='F')
A:numpy.lib.tests.test_function_base.a_fort_copy->numpy.copy(a_fort)
A:numpy.lib.tests.test_function_base.mx->numpy.ma.ones(5)
A:numpy.lib.tests.test_function_base.y1->sinc(np.array(x))
A:numpy.lib.tests.test_function_base.y2->sinc(list(x))
A:numpy.lib.tests.test_function_base.y4->numpy.ones((4, 4))
A:numpy.lib.tests.test_function_base.y5->rand(5, 5)
A:numpy.lib.tests.test_function_base.y->numpy.zeros((3, 2))
A:numpy.lib.tests.test_function_base.w->numpy.array([0.2, 0.3, 0.5, 0.1, 0.2])
A:numpy.lib.tests.test_function_base.actual->numpy.sort_complex(a)
A:numpy.lib.tests.test_function_base.desired->numpy.array([3.0, 6.0])
A:numpy.lib.tests.test_function_base.y3->sinc(tuple(x))
A:numpy.lib.tests.test_function_base.w3->rand(5).astype(np.float64)
A:numpy.lib.tests.test_function_base.(avg, scl)->average(y, weights=w2, axis=1, returned=True)
A:numpy.lib.tests.test_function_base.d->numpy.ones((3, 5, 7, 11))
A:numpy.lib.tests.test_function_base.m->delete(k, slice(60, None), axis=1)
A:numpy.lib.tests.test_function_base.conditions[0]->conditions[0].astype(np.uint8).astype(np.uint8)
A:numpy.lib.tests.test_function_base.x->x.swapaxes(0, 1).copy().swapaxes(0, 1).copy()
A:numpy.lib.tests.test_function_base.a2->numpy.arange(6).reshape(2, 3)
A:numpy.lib.tests.test_function_base.tgt->numpy.array([[1.0, -1j], [1j, 1.0]])
A:numpy.lib.tests.test_function_base.out->numpy.empty((2, 3), dtype=x.dtype)
A:numpy.lib.tests.test_function_base.out2->numpy.array([True, True])
A:numpy.lib.tests.test_function_base.out3->diff(x, n=3)
A:numpy.lib.tests.test_function_base.exp->numpy.i0(a)
A:numpy.lib.tests.test_function_base.result->numpy.diff(x, axis=0, append=[[0, 0]])
A:numpy.lib.tests.test_function_base.self.a->numpy.arange(5)
A:numpy.lib.tests.test_function_base.self.nd_a->numpy.arange(5).repeat(2).reshape(1, 5, 2)
A:numpy.lib.tests.test_function_base.a_del->delete(self.a, indices)
A:numpy.lib.tests.test_function_base.nd_a_del->delete(self.nd_a, indices, axis=1)
A:numpy.lib.tests.test_function_base.xor->setxor1d(nd_a_del[0, :, 0], self.nd_a[0, indices, 0])
A:numpy.lib.tests.test_function_base.s->slice(start, stop, step)
A:numpy.lib.tests.test_function_base.k->numpy.arange(10).reshape(2, 5, order='F')
A:numpy.lib.tests.test_function_base.dx->numpy.array([2, 7, 7, 25, 154, 119, -21], dtype='timedelta64[D]')
A:numpy.lib.tests.test_function_base.f_2d->numpy.arange(25).reshape(5, 5)
A:numpy.lib.tests.test_function_base.x2->numpy.array([0.0, 1.0, 2.0], ndmin=2)
A:numpy.lib.tests.test_function_base.num_error->numpy.abs(np.gradient(y, x, edge_order=2) / analytical - 1)
A:numpy.lib.tests.test_function_base.f->numpy.ones(2, dtype=np.int_)
A:numpy.lib.tests.test_function_base.x_uneven->numpy.array([0.0, 0.5, 1.0, 3.0, 5.0, 7.0])
A:numpy.lib.tests.test_function_base.x_even->numpy.arange(6.0)
A:numpy.lib.tests.test_function_base.fdx_even_ord1->numpy.tile([2.0, 1.5, 1.0, 1.0, 0.5, 0.0], (6, 1))
A:numpy.lib.tests.test_function_base.fdx_even_ord2->numpy.tile([2.5, 1.5, 1.0, 1.0, 0.5, -0.5], (6, 1))
A:numpy.lib.tests.test_function_base.fdx_uneven_ord1->numpy.tile([4.0, 3.0, 1.7, 0.5, 0.25, 0.0], (6, 1))
A:numpy.lib.tests.test_function_base.fdx_uneven_ord2->numpy.tile([5.0, 3.0, 1.7, 0.5, 0.25, -0.25], (6, 1))
A:numpy.lib.tests.test_function_base.res1->numpy.array([[1.0, -1.0], [-1.0, 1.0]])
A:numpy.lib.tests.test_function_base.res2->numpy.array([[0.4, -0.4], [-0.4, 0.4]])
A:numpy.lib.tests.test_function_base.res3->numpy.array([[2.0 / 3.0, -2.0 / 3.0], [-2.0 / 3.0, 2.0 / 3.0]])
A:numpy.lib.tests.test_function_base.g->gradient(f)
A:numpy.lib.tests.test_function_base.dfdx->gradient(f, x)
A:numpy.lib.tests.test_function_base.z->numpy.linspace(0, 3, 13)
A:numpy.lib.tests.test_function_base.expected->numpy.array([1 - 3j, 1 - 2j, 2 + 1j, 2 + 3j], dtype='D')
A:numpy.lib.tests.test_function_base.res->i0(a)
A:numpy.lib.tests.test_function_base.arr->numpy.array([None, 1, None])
A:numpy.lib.tests.test_function_base.ac->numpy.array([2 + 3j, 1 - 2j, 1 - 3j, 2 + 1j], dtype='D').copy()
A:numpy.lib.tests.test_function_base.r->piecewise(x, [x < 2.0, x >= 4], [-1.0, 1.0, 0.0])
A:numpy.lib.tests.test_function_base.args->numpy.array([1, 2, 3])
A:numpy.lib.tests.test_function_base.r1->numpy.array([[0, 4, 8], [1, 5, 9]])
A:numpy.lib.tests.test_function_base.r2->numpy.array([3, 4, 5])
A:numpy.lib.tests.test_function_base.r3->f(10.4)
A:numpy.lib.tests.test_function_base._p->list(p)
A:numpy.lib.tests.test_function_base.vpolyval->numpy.vectorize(mypolyval, excluded=['p', 1])
A:numpy.lib.tests.test_function_base.f1->vectorize(lambda x: x)
A:numpy.lib.tests.test_function_base.res1a->f1(np.arange(3))
A:numpy.lib.tests.test_function_base.res1b->f1(np.arange(0.1, 3))
A:numpy.lib.tests.test_function_base.f2->vectorize(lambda x: x)
A:numpy.lib.tests.test_function_base.res2b->f2(np.arange(0.1, 3))
A:numpy.lib.tests.test_function_base.res2a->f2(np.arange(3))
A:numpy.lib.tests.test_function_base.A_func->getattr(self.A, name)
A:numpy.lib.tests.test_function_base.refcount->sys.getrefcount(A_func)
A:numpy.lib.tests.test_function_base.a.f->numpy.frompyfunc(getattr(a, name), 1, 1)
A:numpy.lib.tests.test_function_base.bins->numpy.linspace(x.min(), x.max(), 10)
A:numpy.lib.tests.test_function_base.bin->numpy.linspace(x.min(), x.max(), 10)
A:numpy.lib.tests.test_function_base.simple_seq->numpy.array([0, 75, 150, 225, 300])
A:numpy.lib.tests.test_function_base.wrap_seq->numpy.mod(simple_seq, 255)
A:numpy.lib.tests.test_function_base.uneven_seq->numpy.array([0, 75, 150, 225, 300, 430])
A:numpy.lib.tests.test_function_base.wrap_uneven->numpy.mod(uneven_seq, 250)
A:numpy.lib.tests.test_function_base.no_discont->unwrap(wrap_uneven, period=250)
A:numpy.lib.tests.test_function_base.sm_discont->unwrap(wrap_uneven, period=250, discont=140)
A:numpy.lib.tests.test_function_base.qx->(q * wx[:, None, None]).sum(axis=0)
A:numpy.lib.tests.test_function_base.qy->(q * wy[None, :, None]).sum(axis=1)
A:numpy.lib.tests.test_function_base.qz->(q * wz[None, None, :]).sum(axis=2)
A:numpy.lib.tests.test_function_base.ym->numpy.ma.array(y, mask=mask)
A:numpy.lib.tests.test_function_base.xm->numpy.ma.array(x, mask=mask)
A:numpy.lib.tests.test_function_base.A->numpy.array([[0.44567325, 0.79115165, 0.5490053], [0.36844147, 0.37325583, 0.96098397], [0.64864341, 0.52929049, 0.39172155]])
A:numpy.lib.tests.test_function_base.B->numpy.array([[0.827002, 0.99959078], [0.89694769, 0.39298162], [0.37954418, 0.05206293], [0.36465447, 0.72446427], [0.48164949, 0.50324519]])
A:numpy.lib.tests.test_function_base.tgt1->corrcoef(self.A)
A:numpy.lib.tests.test_function_base.tgt2->corrcoef(self.A, self.B)
A:numpy.lib.tests.test_function_base.cast_A->self.A.astype(test_type)
A:numpy.lib.tests.test_function_base.frequencies->numpy.array([1, 4, 1])
A:numpy.lib.tests.test_function_base.unit_frequencies->numpy.ones(3, dtype=np.int_)
A:numpy.lib.tests.test_function_base.weights->numpy.array([1.0, 4.0, 1.0])
A:numpy.lib.tests.test_function_base.unit_weights->numpy.ones(3)
A:numpy.lib.tests.test_function_base.x3->numpy.array([0.3942, 0.5969, 0.773, 0.9918, 0.7964])
A:numpy.lib.tests.test_function_base.cast_x1->self.x1.astype(test_type)
A:numpy.lib.tests.test_function_base.i0_0->numpy.i0([0.0])
A:numpy.lib.tests.test_function_base.[X, Y]->meshgrid([1, 2, 3], [4, 5, 6, 7], sparse=True)
A:numpy.lib.tests.test_function_base.[X]->meshgrid([1, 2, 3, 4])
A:numpy.lib.tests.test_function_base.(X, Y)->numpy.meshgrid(x, y, sparse=True)
A:numpy.lib.tests.test_function_base.X->numpy.array([1.1, 2.2])
A:numpy.lib.tests.test_function_base.Y->numpy.array([3.3, 4.4])
A:numpy.lib.tests.test_function_base.(x, y)->numpy.meshgrid(X, Y, sparse=False, copy=True)
A:numpy.lib.tests.test_function_base.(a, b, c, d, e)->numpy.meshgrid(*([0] * i for i in range(1, 6)))
A:numpy.lib.tests.test_function_base.(a, b, c)->numpy.meshgrid([0], [1, 2], [3, 4, 5], indexing='ij')
A:numpy.lib.tests.test_function_base.intp_refcount->sys.getrefcount(np.dtype(np.intp))
A:numpy.lib.tests.test_function_base.double_refcount->sys.getrefcount(np.dtype(np.double))
A:numpy.lib.tests.test_function_base.vals_arr->numpy.asarray(vals)
A:numpy.lib.tests.test_function_base.x0->numpy.array(0.3)
A:numpy.lib.tests.test_function_base.xp->numpy.arange(0, 10, 0.0001)
A:numpy.lib.tests.test_function_base.yp->numpy.ones(size, dtype=np.double)
A:numpy.lib.tests.test_function_base.incpts->numpy.array([-1, 0, size - 1, size], dtype=np.double)
A:numpy.lib.tests.test_function_base.incres->interp(incpts, xp, yp, left=0, right=2)
A:numpy.lib.tests.test_function_base.decres->interp(decpts, xp, yp, left=0, right=2)
A:numpy.lib.tests.test_function_base.inctgt->numpy.array([0, 1, 1, 2], dtype=float)
A:numpy.lib.tests.test_function_base.fp->numpy.sin(xp)
A:numpy.lib.tests.test_function_base.p->p.tolist().tolist()
A:numpy.lib.tests.test_function_base.o->numpy.random.normal(size=(71, 23))
A:numpy.lib.tests.test_function_base.r0->numpy.array([[0, 1, 2, 3], [4, 5, 6, 7]])
A:numpy.lib.tests.test_function_base.c0->numpy.percentile(x, 50, interpolation='lower', axis=0)
A:numpy.lib.tests.test_function_base.c1->numpy.percentile(x, 50, interpolation='lower', axis=1)
A:numpy.lib.tests.test_function_base.q->numpy.quantile(x, [[Fraction(1, 2)]])
A:numpy.lib.tests.test_function_base.tf_quant->numpy.quantile(True, False)
A:numpy.lib.tests.test_function_base.quant_res->numpy.quantile(a, a)
A:numpy.lib.tests.test_function_base.p0->numpy.arange(0, 1, 0.01)
A:numpy.lib.tests.test_function_base.quantile->numpy.quantile(arr, p0)
A:numpy.lib.tests.test_function_base.l0->numpy.lib.function_base._lerp(a, b, t0)
A:numpy.lib.tests.test_function_base.l1->numpy.lib.function_base._lerp(a, b, t1)
A:numpy.lib.tests.test_function_base.left->numpy.lib.function_base._lerp(a, b, 1 - (1 - t))
A:numpy.lib.tests.test_function_base.right->numpy.lib.function_base._lerp(b, a, 1 - t)
A:numpy.lib.tests.test_function_base.t->numpy.array(0.2)
A:numpy.lib.tests.test_function_base.a0->numpy.array(1)
A:numpy.lib.tests.test_function_base.a1->numpy.arange(2)
A:numpy.lib.tests.test_function_base.a3->numpy.array([[2, 3], [0, 1], [6, 7], [4, 5]])
A:numpy.lib.tests.test_function_base.orig->numpy.array([2 + 3j, 1 - 2j, 1 - 3j, 2 + 1j], dtype='D').copy()
A:numpy.lib.tests.test_function_base.a4->numpy.arange(3 * 4 * 5, dtype=np.float32).reshape((3, 4, 5))
A:numpy.lib.tests.test_function_base.obj->numpy.asarray(input_array).view(cls)
numpy.lib.tests.test_function_base.TestAddDocstring
numpy.lib.tests.test_function_base.TestAddDocstring.test_add_same_docstring(self)
numpy.lib.tests.test_function_base.TestAddDocstring.test_different_docstring_fails(self)
numpy.lib.tests.test_function_base.TestAdd_newdoc
numpy.lib.tests.test_function_base.TestAdd_newdoc.test_add_doc(self)
numpy.lib.tests.test_function_base.TestAdd_newdoc.test_errors_are_ignored(self)
numpy.lib.tests.test_function_base.TestAdd_newdoc_ufunc
numpy.lib.tests.test_function_base.TestAdd_newdoc_ufunc.test_string_arg(self)
numpy.lib.tests.test_function_base.TestAdd_newdoc_ufunc.test_ufunc_arg(self)
numpy.lib.tests.test_function_base.TestAll
numpy.lib.tests.test_function_base.TestAll.test_basic(self)
numpy.lib.tests.test_function_base.TestAll.test_nd(self)
numpy.lib.tests.test_function_base.TestAmax
numpy.lib.tests.test_function_base.TestAmax.test_basic(self)
numpy.lib.tests.test_function_base.TestAmin
numpy.lib.tests.test_function_base.TestAmin.test_basic(self)
numpy.lib.tests.test_function_base.TestAngle
numpy.lib.tests.test_function_base.TestAngle.test_basic(self)
numpy.lib.tests.test_function_base.TestAngle.test_subclass(self)
numpy.lib.tests.test_function_base.TestAny
numpy.lib.tests.test_function_base.TestAny.test_basic(self)
numpy.lib.tests.test_function_base.TestAny.test_nd(self)
numpy.lib.tests.test_function_base.TestAverage
numpy.lib.tests.test_function_base.TestAverage.test_basic(self)
numpy.lib.tests.test_function_base.TestAverage.test_object_dtype(self)
numpy.lib.tests.test_function_base.TestAverage.test_returned(self)
numpy.lib.tests.test_function_base.TestAverage.test_subclasses(self)
numpy.lib.tests.test_function_base.TestAverage.test_upcasting(self)
numpy.lib.tests.test_function_base.TestAverage.test_weights(self)
numpy.lib.tests.test_function_base.TestBincount
numpy.lib.tests.test_function_base.TestBincount.test_dtype_reference_leaks(self)
numpy.lib.tests.test_function_base.TestBincount.test_empty(self)
numpy.lib.tests.test_function_base.TestBincount.test_empty_with_minlength(self)
numpy.lib.tests.test_function_base.TestBincount.test_error_not_1d(self,vals)
numpy.lib.tests.test_function_base.TestBincount.test_simple(self)
numpy.lib.tests.test_function_base.TestBincount.test_simple2(self)
numpy.lib.tests.test_function_base.TestBincount.test_simple_weight(self)
numpy.lib.tests.test_function_base.TestBincount.test_simple_weight2(self)
numpy.lib.tests.test_function_base.TestBincount.test_with_incorrect_minlength(self)
numpy.lib.tests.test_function_base.TestBincount.test_with_minlength(self)
numpy.lib.tests.test_function_base.TestBincount.test_with_minlength_and_weights(self)
numpy.lib.tests.test_function_base.TestBincount.test_with_minlength_smaller_than_maxvalue(self)
numpy.lib.tests.test_function_base.TestCheckFinite
numpy.lib.tests.test_function_base.TestCheckFinite.test_dtype_order(self)
numpy.lib.tests.test_function_base.TestCheckFinite.test_simple(self)
numpy.lib.tests.test_function_base.TestCopy
numpy.lib.tests.test_function_base.TestCopy.test_basic(self)
numpy.lib.tests.test_function_base.TestCopy.test_order(self)
numpy.lib.tests.test_function_base.TestCopy.test_subok(self)
numpy.lib.tests.test_function_base.TestCorrCoef
numpy.lib.tests.test_function_base.TestCorrCoef.test_bias(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_complex(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_corrcoef_dtype(self,test_type)
numpy.lib.tests.test_function_base.TestCorrCoef.test_ddof(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_empty(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_extreme(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_non_array(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_simple(self)
numpy.lib.tests.test_function_base.TestCorrCoef.test_xy(self)
numpy.lib.tests.test_function_base.TestCov
numpy.lib.tests.test_function_base.TestCov.test_1D_rowvar(self)
numpy.lib.tests.test_function_base.TestCov.test_1D_variance(self)
numpy.lib.tests.test_function_base.TestCov.test_aweights(self)
numpy.lib.tests.test_function_base.TestCov.test_basic(self)
numpy.lib.tests.test_function_base.TestCov.test_complex(self)
numpy.lib.tests.test_function_base.TestCov.test_cov_dtype(self,test_type)
numpy.lib.tests.test_function_base.TestCov.test_empty(self)
numpy.lib.tests.test_function_base.TestCov.test_fweights(self)
numpy.lib.tests.test_function_base.TestCov.test_unit_fweights_and_aweights(self)
numpy.lib.tests.test_function_base.TestCov.test_wrong_ddof(self)
numpy.lib.tests.test_function_base.TestCov.test_xy(self)
numpy.lib.tests.test_function_base.TestCumprod
numpy.lib.tests.test_function_base.TestCumprod.test_basic(self)
numpy.lib.tests.test_function_base.TestCumsum
numpy.lib.tests.test_function_base.TestCumsum.test_basic(self)
numpy.lib.tests.test_function_base.TestDelete
numpy.lib.tests.test_function_base.TestDelete._check_inverse_of_slicing(self,indices)
numpy.lib.tests.test_function_base.TestDelete.setup(self)
numpy.lib.tests.test_function_base.TestDelete.test_0d(self)
numpy.lib.tests.test_function_base.TestDelete.test_array_order_preserve(self)
numpy.lib.tests.test_function_base.TestDelete.test_fancy(self)
numpy.lib.tests.test_function_base.TestDelete.test_index_floats(self)
numpy.lib.tests.test_function_base.TestDelete.test_single(self)
numpy.lib.tests.test_function_base.TestDelete.test_slices(self)
numpy.lib.tests.test_function_base.TestDelete.test_subclass(self)
numpy.lib.tests.test_function_base.TestDiff
numpy.lib.tests.test_function_base.TestDiff.test_append(self)
numpy.lib.tests.test_function_base.TestDiff.test_axis(self)
numpy.lib.tests.test_function_base.TestDiff.test_basic(self)
numpy.lib.tests.test_function_base.TestDiff.test_n(self)
numpy.lib.tests.test_function_base.TestDiff.test_nd(self)
numpy.lib.tests.test_function_base.TestDiff.test_prepend(self)
numpy.lib.tests.test_function_base.TestDiff.test_subclass(self)
numpy.lib.tests.test_function_base.TestDiff.test_times(self)
numpy.lib.tests.test_function_base.TestDigitize
numpy.lib.tests.test_function_base.TestDigitize.test_casting_error(self)
numpy.lib.tests.test_function_base.TestDigitize.test_forward(self)
numpy.lib.tests.test_function_base.TestDigitize.test_large_integers_decreasing(self)
numpy.lib.tests.test_function_base.TestDigitize.test_large_integers_increasing(self)
numpy.lib.tests.test_function_base.TestDigitize.test_monotonic(self)
numpy.lib.tests.test_function_base.TestDigitize.test_random(self)
numpy.lib.tests.test_function_base.TestDigitize.test_return_type(self)
numpy.lib.tests.test_function_base.TestDigitize.test_reverse(self)
numpy.lib.tests.test_function_base.TestDigitize.test_right_basic(self)
numpy.lib.tests.test_function_base.TestDigitize.test_right_open(self)
numpy.lib.tests.test_function_base.TestDigitize.test_right_open_random(self)
numpy.lib.tests.test_function_base.TestDigitize.test_right_open_reverse(self)
numpy.lib.tests.test_function_base.TestExtins
numpy.lib.tests.test_function_base.TestExtins.test_basic(self)
numpy.lib.tests.test_function_base.TestExtins.test_both(self)
numpy.lib.tests.test_function_base.TestExtins.test_place(self)
numpy.lib.tests.test_function_base.TestFilterwindows
numpy.lib.tests.test_function_base.TestFilterwindows.test_bartlett(self)
numpy.lib.tests.test_function_base.TestFilterwindows.test_blackman(self)
numpy.lib.tests.test_function_base.TestFilterwindows.test_hamming(self)
numpy.lib.tests.test_function_base.TestFilterwindows.test_hanning(self)
numpy.lib.tests.test_function_base.TestFlip
numpy.lib.tests.test_function_base.TestFlip.test_3d_swap_axis0(self)
numpy.lib.tests.test_function_base.TestFlip.test_3d_swap_axis1(self)
numpy.lib.tests.test_function_base.TestFlip.test_3d_swap_axis2(self)
numpy.lib.tests.test_function_base.TestFlip.test_4d(self)
numpy.lib.tests.test_function_base.TestFlip.test_axes(self)
numpy.lib.tests.test_function_base.TestFlip.test_basic_lr(self)
numpy.lib.tests.test_function_base.TestFlip.test_basic_ud(self)
numpy.lib.tests.test_function_base.TestFlip.test_default_axis(self)
numpy.lib.tests.test_function_base.TestFlip.test_multiple_axes(self)
numpy.lib.tests.test_function_base.TestGradient
numpy.lib.tests.test_function_base.TestGradient.test_args(self)
numpy.lib.tests.test_function_base.TestGradient.test_badargs(self)
numpy.lib.tests.test_function_base.TestGradient.test_basic(self)
numpy.lib.tests.test_function_base.TestGradient.test_datetime64(self)
numpy.lib.tests.test_function_base.TestGradient.test_f_decreasing_unsigned_int(self,f_dtype)
numpy.lib.tests.test_function_base.TestGradient.test_f_signed_int_big_jump(self,f_dtype)
numpy.lib.tests.test_function_base.TestGradient.test_inexact_dtypes(self)
numpy.lib.tests.test_function_base.TestGradient.test_masked(self)
numpy.lib.tests.test_function_base.TestGradient.test_second_order_accurate(self)
numpy.lib.tests.test_function_base.TestGradient.test_spacing(self)
numpy.lib.tests.test_function_base.TestGradient.test_specific_axes(self)
numpy.lib.tests.test_function_base.TestGradient.test_timedelta64(self)
numpy.lib.tests.test_function_base.TestGradient.test_values(self)
numpy.lib.tests.test_function_base.TestGradient.test_x_decreasing_unsigned(self,x_dtype)
numpy.lib.tests.test_function_base.TestGradient.test_x_signed_int_big_jump(self,x_dtype)
numpy.lib.tests.test_function_base.TestInsert
numpy.lib.tests.test_function_base.TestInsert.test_0d(self)
numpy.lib.tests.test_function_base.TestInsert.test_basic(self)
numpy.lib.tests.test_function_base.TestInsert.test_index_array_copied(self)
numpy.lib.tests.test_function_base.TestInsert.test_index_floats(self)
numpy.lib.tests.test_function_base.TestInsert.test_multidim(self)
numpy.lib.tests.test_function_base.TestInsert.test_structured_array(self)
numpy.lib.tests.test_function_base.TestInsert.test_subclass(self)
numpy.lib.tests.test_function_base.TestInterp
numpy.lib.tests.test_function_base.TestInterp.sc(self,request)
numpy.lib.tests.test_function_base.TestInterp.test_basic(self)
numpy.lib.tests.test_function_base.TestInterp.test_complex_interp(self)
numpy.lib.tests.test_function_base.TestInterp.test_exceptions(self)
numpy.lib.tests.test_function_base.TestInterp.test_if_len_x_is_small(self)
numpy.lib.tests.test_function_base.TestInterp.test_non_finite_any_nan(self,sc)
numpy.lib.tests.test_function_base.TestInterp.test_non_finite_behavior_exact_x(self)
numpy.lib.tests.test_function_base.TestInterp.test_non_finite_half_inf_f(self,sc)
numpy.lib.tests.test_function_base.TestInterp.test_non_finite_half_inf_x(self,sc)
numpy.lib.tests.test_function_base.TestInterp.test_non_finite_half_inf_xf(self,sc)
numpy.lib.tests.test_function_base.TestInterp.test_non_finite_inf(self,sc)
numpy.lib.tests.test_function_base.TestInterp.test_period(self)
numpy.lib.tests.test_function_base.TestInterp.test_right_left_behavior(self)
numpy.lib.tests.test_function_base.TestInterp.test_scalar_interpolation_point(self)
numpy.lib.tests.test_function_base.TestInterp.test_zero_dimensional_interpolation_point(self)
numpy.lib.tests.test_function_base.TestKaiser
numpy.lib.tests.test_function_base.TestKaiser.test_int_beta(self)
numpy.lib.tests.test_function_base.TestKaiser.test_simple(self)
numpy.lib.tests.test_function_base.TestLeaks
numpy.lib.tests.test_function_base.TestLeaks.A
numpy.lib.tests.test_function_base.TestLeaks.A.bound(self,*args)
numpy.lib.tests.test_function_base.TestLeaks.A.unbound(*args)
numpy.lib.tests.test_function_base.TestLeaks.test_frompyfunc_leaks(self,name,incr)
numpy.lib.tests.test_function_base.TestLerp
numpy.lib.tests.test_function_base.TestLerp.test_lerp_0d_inputs(self)
numpy.lib.tests.test_function_base.TestLerp.test_lerp_bounded(self,t,a,b)
numpy.lib.tests.test_function_base.TestLerp.test_lerp_monotonic(self,t0,t1,a,b)
numpy.lib.tests.test_function_base.TestLerp.test_lerp_symmetric(self,t,a,b)
numpy.lib.tests.test_function_base.TestMedian
numpy.lib.tests.test_function_base.TestMedian.test_array_like(self)
numpy.lib.tests.test_function_base.TestMedian.test_axis_keyword(self)
numpy.lib.tests.test_function_base.TestMedian.test_basic(self)
numpy.lib.tests.test_function_base.TestMedian.test_empty(self)
numpy.lib.tests.test_function_base.TestMedian.test_extended_axis(self)
numpy.lib.tests.test_function_base.TestMedian.test_extended_axis_invalid(self)
numpy.lib.tests.test_function_base.TestMedian.test_keepdims(self)
numpy.lib.tests.test_function_base.TestMedian.test_nan_behavior(self)
numpy.lib.tests.test_function_base.TestMedian.test_object(self)
numpy.lib.tests.test_function_base.TestMedian.test_out(self)
numpy.lib.tests.test_function_base.TestMedian.test_out_nan(self)
numpy.lib.tests.test_function_base.TestMedian.test_overwrite_keyword(self)
numpy.lib.tests.test_function_base.TestMedian.test_subclass(self)
numpy.lib.tests.test_function_base.TestMeshgrid
numpy.lib.tests.test_function_base.TestMeshgrid.test_indexing(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_invalid_arguments(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_nd_indexing(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_nd_shape(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_nd_values(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_no_input(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_return_type(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_simple(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_single_input(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_sparse(self)
numpy.lib.tests.test_function_base.TestMeshgrid.test_writeback(self)
numpy.lib.tests.test_function_base.TestMsort
numpy.lib.tests.test_function_base.TestMsort.test_simple(self)
numpy.lib.tests.test_function_base.TestPercentile
numpy.lib.tests.test_function_base.TestPercentile.test_2D(self)
numpy.lib.tests.test_function_base.TestPercentile.test_api(self)
numpy.lib.tests.test_function_base.TestPercentile.test_axis(self)
numpy.lib.tests.test_function_base.TestPercentile.test_basic(self)
numpy.lib.tests.test_function_base.TestPercentile.test_exception(self)
numpy.lib.tests.test_function_base.TestPercentile.test_extended_axis(self)
numpy.lib.tests.test_function_base.TestPercentile.test_extended_axis_invalid(self)
numpy.lib.tests.test_function_base.TestPercentile.test_fraction(self)
numpy.lib.tests.test_function_base.TestPercentile.test_keepdims(self)
numpy.lib.tests.test_function_base.TestPercentile.test_linear(self)
numpy.lib.tests.test_function_base.TestPercentile.test_lower_higher(self)
numpy.lib.tests.test_function_base.TestPercentile.test_midpoint(self)
numpy.lib.tests.test_function_base.TestPercentile.test_nan_behavior(self)
numpy.lib.tests.test_function_base.TestPercentile.test_nan_q(self)
numpy.lib.tests.test_function_base.TestPercentile.test_nearest(self)
numpy.lib.tests.test_function_base.TestPercentile.test_no_p_overwrite(self)
numpy.lib.tests.test_function_base.TestPercentile.test_out(self)
numpy.lib.tests.test_function_base.TestPercentile.test_out_nan(self)
numpy.lib.tests.test_function_base.TestPercentile.test_percentile_empty_dim(self)
numpy.lib.tests.test_function_base.TestPercentile.test_percentile_list(self)
numpy.lib.tests.test_function_base.TestPercentile.test_percentile_no_overwrite(self)
numpy.lib.tests.test_function_base.TestPercentile.test_percentile_out(self)
numpy.lib.tests.test_function_base.TestPercentile.test_percentile_overwrite(self)
numpy.lib.tests.test_function_base.TestPercentile.test_scalar_q(self)
numpy.lib.tests.test_function_base.TestPercentile.test_sequence(self)
numpy.lib.tests.test_function_base.TestPiecewise
numpy.lib.tests.test_function_base.TestPiecewise.test_0d(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_0d_0d_condition(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_0d_comparison(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_default(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_multidimensional_extrafunc(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_scalar_domains_three_conditions(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_simple(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_subclasses(self)
numpy.lib.tests.test_function_base.TestPiecewise.test_two_conditions(self)
numpy.lib.tests.test_function_base.TestProd
numpy.lib.tests.test_function_base.TestProd.test_basic(self)
numpy.lib.tests.test_function_base.TestPtp
numpy.lib.tests.test_function_base.TestPtp.test_basic(self)
numpy.lib.tests.test_function_base.TestQuantile
numpy.lib.tests.test_function_base.TestQuantile.test_basic(self)
numpy.lib.tests.test_function_base.TestQuantile.test_correct_quantile_value(self)
numpy.lib.tests.test_function_base.TestQuantile.test_fraction(self)
numpy.lib.tests.test_function_base.TestQuantile.test_no_p_overwrite(self)
numpy.lib.tests.test_function_base.TestQuantile.test_quantile_monotonic(self)
numpy.lib.tests.test_function_base.TestQuantile.test_quantile_monotonic_hypo(self,arr)
numpy.lib.tests.test_function_base.TestRot90
numpy.lib.tests.test_function_base.TestRot90.test_axes(self)
numpy.lib.tests.test_function_base.TestRot90.test_basic(self)
numpy.lib.tests.test_function_base.TestRot90.test_rotation_axes(self)
numpy.lib.tests.test_function_base.TestSelect
numpy.lib.tests.test_function_base.TestSelect._select(self,cond,values,default=0)
numpy.lib.tests.test_function_base.TestSelect.test_basic(self)
numpy.lib.tests.test_function_base.TestSelect.test_broadcasting(self)
numpy.lib.tests.test_function_base.TestSelect.test_deprecated_empty(self)
numpy.lib.tests.test_function_base.TestSelect.test_many_arguments(self)
numpy.lib.tests.test_function_base.TestSelect.test_non_bool_deprecation(self)
numpy.lib.tests.test_function_base.TestSelect.test_return_dtype(self)
numpy.lib.tests.test_function_base.TestSinc
numpy.lib.tests.test_function_base.TestSinc.test_array_like(self)
numpy.lib.tests.test_function_base.TestSinc.test_simple(self)
numpy.lib.tests.test_function_base.TestSortComplex
numpy.lib.tests.test_function_base.TestSortComplex.test_sort_complex(self)
numpy.lib.tests.test_function_base.TestSortComplex.test_sort_real(self,type_in,type_out)
numpy.lib.tests.test_function_base.TestTrapz
numpy.lib.tests.test_function_base.TestTrapz.test_masked(self)
numpy.lib.tests.test_function_base.TestTrapz.test_ndim(self)
numpy.lib.tests.test_function_base.TestTrapz.test_simple(self)
numpy.lib.tests.test_function_base.TestTrimZeros
numpy.lib.tests.test_function_base.TestTrimZeros.test_all_zero(self)
numpy.lib.tests.test_function_base.TestTrimZeros.test_basic(self)
numpy.lib.tests.test_function_base.TestTrimZeros.test_leading_skip(self)
numpy.lib.tests.test_function_base.TestTrimZeros.test_list_to_list(self)
numpy.lib.tests.test_function_base.TestTrimZeros.test_no_trim(self)
numpy.lib.tests.test_function_base.TestTrimZeros.test_overflow(self,arr)
numpy.lib.tests.test_function_base.TestTrimZeros.test_size_zero(self)
numpy.lib.tests.test_function_base.TestTrimZeros.test_trailing_skip(self)
numpy.lib.tests.test_function_base.TestTrimZeros.values(self)
numpy.lib.tests.test_function_base.TestUnique
numpy.lib.tests.test_function_base.TestUnique.test_simple(self)
numpy.lib.tests.test_function_base.TestUnwrap
numpy.lib.tests.test_function_base.TestUnwrap.test_period(self)
numpy.lib.tests.test_function_base.TestUnwrap.test_simple(self)
numpy.lib.tests.test_function_base.TestVectorize
numpy.lib.tests.test_function_base.TestVectorize.test_UnboundMethod_ticket_1156(self)
numpy.lib.tests.test_function_base.TestVectorize.test_assigning_docstring(self)
numpy.lib.tests.test_function_base.TestVectorize.test_cache(self)
numpy.lib.tests.test_function_base.TestVectorize.test_coverage1_ticket_2100(self)
numpy.lib.tests.test_function_base.TestVectorize.test_execution_order_ticket_1487(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords2_ticket_2100(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords3_ticket_2100(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords_no_func_code(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords_with_otypes_order1(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords_with_otypes_order2(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords_with_otypes_order3(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords_with_otypes_several_kwd_args1(self)
numpy.lib.tests.test_function_base.TestVectorize.test_keywords_with_otypes_several_kwd_args2(self)
numpy.lib.tests.test_function_base.TestVectorize.test_large(self)
numpy.lib.tests.test_function_base.TestVectorize.test_otypes(self)
numpy.lib.tests.test_function_base.TestVectorize.test_parse_gufunc_signature(self)
numpy.lib.tests.test_function_base.TestVectorize.test_scalar(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_center(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_computed_size(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_excluded(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_invalid_inputs(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_invalid_outputs(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_mean_last(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_otypes(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_outer(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_simple(self)
numpy.lib.tests.test_function_base.TestVectorize.test_signature_two_outputs(self)
numpy.lib.tests.test_function_base.TestVectorize.test_simple(self)
numpy.lib.tests.test_function_base.TestVectorize.test_size_zero_output(self)
numpy.lib.tests.test_function_base.TestVectorize.test_string_ticket_1892(self)
numpy.lib.tests.test_function_base.TestVectorize.test_ufunc(self)
numpy.lib.tests.test_function_base.Test_I0
numpy.lib.tests.test_function_base.Test_I0.test_complex(self)
numpy.lib.tests.test_function_base.Test_I0.test_non_array(self)
numpy.lib.tests.test_function_base.Test_I0.test_simple(self)
numpy.lib.tests.test_function_base._foo1(x,y=1.0)
numpy.lib.tests.test_function_base._foo2(x,y=1.0,z=0.0)
numpy.lib.tests.test_function_base._make_complex(real,imag)
numpy.lib.tests.test_function_base.compare_results(res,desired)
numpy.lib.tests.test_function_base.get_mat(n)
numpy.tests.test_TestAddDocstring
numpy.tests.test_TestAddDocstring.test_add_same_docstring(self)
numpy.tests.test_TestAddDocstring.test_different_docstring_fails(self)
numpy.tests.test_TestAdd_newdoc
numpy.tests.test_TestAdd_newdoc.test_add_doc(self)
numpy.tests.test_TestAdd_newdoc.test_errors_are_ignored(self)
numpy.tests.test_TestAdd_newdoc_ufunc
numpy.tests.test_TestAdd_newdoc_ufunc.test_string_arg(self)
numpy.tests.test_TestAdd_newdoc_ufunc.test_ufunc_arg(self)
numpy.tests.test_TestAll
numpy.tests.test_TestAll.test_basic(self)
numpy.tests.test_TestAll.test_nd(self)
numpy.tests.test_TestAmax
numpy.tests.test_TestAmax.test_basic(self)
numpy.tests.test_TestAmin
numpy.tests.test_TestAmin.test_basic(self)
numpy.tests.test_TestAngle
numpy.tests.test_TestAngle.test_basic(self)
numpy.tests.test_TestAngle.test_subclass(self)
numpy.tests.test_TestAny
numpy.tests.test_TestAny.test_basic(self)
numpy.tests.test_TestAny.test_nd(self)
numpy.tests.test_TestAverage
numpy.tests.test_TestAverage.test_basic(self)
numpy.tests.test_TestAverage.test_object_dtype(self)
numpy.tests.test_TestAverage.test_returned(self)
numpy.tests.test_TestAverage.test_subclasses(self)
numpy.tests.test_TestAverage.test_upcasting(self)
numpy.tests.test_TestAverage.test_weights(self)
numpy.tests.test_TestBincount
numpy.tests.test_TestBincount.test_dtype_reference_leaks(self)
numpy.tests.test_TestBincount.test_empty(self)
numpy.tests.test_TestBincount.test_empty_with_minlength(self)
numpy.tests.test_TestBincount.test_error_not_1d(self,vals)
numpy.tests.test_TestBincount.test_simple(self)
numpy.tests.test_TestBincount.test_simple2(self)
numpy.tests.test_TestBincount.test_simple_weight(self)
numpy.tests.test_TestBincount.test_simple_weight2(self)
numpy.tests.test_TestBincount.test_with_incorrect_minlength(self)
numpy.tests.test_TestBincount.test_with_minlength(self)
numpy.tests.test_TestBincount.test_with_minlength_and_weights(self)
numpy.tests.test_TestBincount.test_with_minlength_smaller_than_maxvalue(self)
numpy.tests.test_TestCheckFinite
numpy.tests.test_TestCheckFinite.test_dtype_order(self)
numpy.tests.test_TestCheckFinite.test_simple(self)
numpy.tests.test_TestCopy
numpy.tests.test_TestCopy.test_basic(self)
numpy.tests.test_TestCopy.test_order(self)
numpy.tests.test_TestCopy.test_subok(self)
numpy.tests.test_TestCorrCoef
numpy.tests.test_TestCorrCoef.test_bias(self)
numpy.tests.test_TestCorrCoef.test_complex(self)
numpy.tests.test_TestCorrCoef.test_corrcoef_dtype(self,test_type)
numpy.tests.test_TestCorrCoef.test_ddof(self)
numpy.tests.test_TestCorrCoef.test_empty(self)
numpy.tests.test_TestCorrCoef.test_extreme(self)
numpy.tests.test_TestCorrCoef.test_non_array(self)
numpy.tests.test_TestCorrCoef.test_simple(self)
numpy.tests.test_TestCorrCoef.test_xy(self)
numpy.tests.test_TestCov
numpy.tests.test_TestCov.test_1D_rowvar(self)
numpy.tests.test_TestCov.test_1D_variance(self)
numpy.tests.test_TestCov.test_aweights(self)
numpy.tests.test_TestCov.test_basic(self)
numpy.tests.test_TestCov.test_complex(self)
numpy.tests.test_TestCov.test_cov_dtype(self,test_type)
numpy.tests.test_TestCov.test_empty(self)
numpy.tests.test_TestCov.test_fweights(self)
numpy.tests.test_TestCov.test_unit_fweights_and_aweights(self)
numpy.tests.test_TestCov.test_wrong_ddof(self)
numpy.tests.test_TestCov.test_xy(self)
numpy.tests.test_TestCumprod
numpy.tests.test_TestCumprod.test_basic(self)
numpy.tests.test_TestCumsum
numpy.tests.test_TestCumsum.test_basic(self)
numpy.tests.test_TestDelete
numpy.tests.test_TestDelete._check_inverse_of_slicing(self,indices)
numpy.tests.test_TestDelete.setup(self)
numpy.tests.test_TestDelete.test_0d(self)
numpy.tests.test_TestDelete.test_array_order_preserve(self)
numpy.tests.test_TestDelete.test_fancy(self)
numpy.tests.test_TestDelete.test_index_floats(self)
numpy.tests.test_TestDelete.test_single(self)
numpy.tests.test_TestDelete.test_slices(self)
numpy.tests.test_TestDelete.test_subclass(self)
numpy.tests.test_TestDiff
numpy.tests.test_TestDiff.test_append(self)
numpy.tests.test_TestDiff.test_axis(self)
numpy.tests.test_TestDiff.test_basic(self)
numpy.tests.test_TestDiff.test_n(self)
numpy.tests.test_TestDiff.test_nd(self)
numpy.tests.test_TestDiff.test_prepend(self)
numpy.tests.test_TestDiff.test_subclass(self)
numpy.tests.test_TestDiff.test_times(self)
numpy.tests.test_TestDigitize
numpy.tests.test_TestDigitize.test_casting_error(self)
numpy.tests.test_TestDigitize.test_forward(self)
numpy.tests.test_TestDigitize.test_large_integers_decreasing(self)
numpy.tests.test_TestDigitize.test_large_integers_increasing(self)
numpy.tests.test_TestDigitize.test_monotonic(self)
numpy.tests.test_TestDigitize.test_random(self)
numpy.tests.test_TestDigitize.test_return_type(self)
numpy.tests.test_TestDigitize.test_reverse(self)
numpy.tests.test_TestDigitize.test_right_basic(self)
numpy.tests.test_TestDigitize.test_right_open(self)
numpy.tests.test_TestDigitize.test_right_open_random(self)
numpy.tests.test_TestDigitize.test_right_open_reverse(self)
numpy.tests.test_TestExtins
numpy.tests.test_TestExtins.test_basic(self)
numpy.tests.test_TestExtins.test_both(self)
numpy.tests.test_TestExtins.test_place(self)
numpy.tests.test_TestFilterwindows
numpy.tests.test_TestFilterwindows.test_bartlett(self)
numpy.tests.test_TestFilterwindows.test_blackman(self)
numpy.tests.test_TestFilterwindows.test_hamming(self)
numpy.tests.test_TestFilterwindows.test_hanning(self)
numpy.tests.test_TestFlip
numpy.tests.test_TestFlip.test_3d_swap_axis0(self)
numpy.tests.test_TestFlip.test_3d_swap_axis1(self)
numpy.tests.test_TestFlip.test_3d_swap_axis2(self)
numpy.tests.test_TestFlip.test_4d(self)
numpy.tests.test_TestFlip.test_axes(self)
numpy.tests.test_TestFlip.test_basic_lr(self)
numpy.tests.test_TestFlip.test_basic_ud(self)
numpy.tests.test_TestFlip.test_default_axis(self)
numpy.tests.test_TestFlip.test_multiple_axes(self)
numpy.tests.test_TestGradient
numpy.tests.test_TestGradient.test_args(self)
numpy.tests.test_TestGradient.test_badargs(self)
numpy.tests.test_TestGradient.test_basic(self)
numpy.tests.test_TestGradient.test_datetime64(self)
numpy.tests.test_TestGradient.test_f_decreasing_unsigned_int(self,f_dtype)
numpy.tests.test_TestGradient.test_f_signed_int_big_jump(self,f_dtype)
numpy.tests.test_TestGradient.test_inexact_dtypes(self)
numpy.tests.test_TestGradient.test_masked(self)
numpy.tests.test_TestGradient.test_second_order_accurate(self)
numpy.tests.test_TestGradient.test_spacing(self)
numpy.tests.test_TestGradient.test_specific_axes(self)
numpy.tests.test_TestGradient.test_timedelta64(self)
numpy.tests.test_TestGradient.test_values(self)
numpy.tests.test_TestGradient.test_x_decreasing_unsigned(self,x_dtype)
numpy.tests.test_TestGradient.test_x_signed_int_big_jump(self,x_dtype)
numpy.tests.test_TestInsert
numpy.tests.test_TestInsert.test_0d(self)
numpy.tests.test_TestInsert.test_basic(self)
numpy.tests.test_TestInsert.test_index_array_copied(self)
numpy.tests.test_TestInsert.test_index_floats(self)
numpy.tests.test_TestInsert.test_multidim(self)
numpy.tests.test_TestInsert.test_structured_array(self)
numpy.tests.test_TestInsert.test_subclass(self)
numpy.tests.test_TestInterp
numpy.tests.test_TestInterp.sc(self,request)
numpy.tests.test_TestInterp.test_basic(self)
numpy.tests.test_TestInterp.test_complex_interp(self)
numpy.tests.test_TestInterp.test_exceptions(self)
numpy.tests.test_TestInterp.test_if_len_x_is_small(self)
numpy.tests.test_TestInterp.test_non_finite_any_nan(self,sc)
numpy.tests.test_TestInterp.test_non_finite_behavior_exact_x(self)
numpy.tests.test_TestInterp.test_non_finite_half_inf_f(self,sc)
numpy.tests.test_TestInterp.test_non_finite_half_inf_x(self,sc)
numpy.tests.test_TestInterp.test_non_finite_half_inf_xf(self,sc)
numpy.tests.test_TestInterp.test_non_finite_inf(self,sc)
numpy.tests.test_TestInterp.test_period(self)
numpy.tests.test_TestInterp.test_right_left_behavior(self)
numpy.tests.test_TestInterp.test_scalar_interpolation_point(self)
numpy.tests.test_TestInterp.test_zero_dimensional_interpolation_point(self)
numpy.tests.test_TestKaiser
numpy.tests.test_TestKaiser.test_int_beta(self)
numpy.tests.test_TestKaiser.test_simple(self)
numpy.tests.test_TestLeaks
numpy.tests.test_TestLeaks.A
numpy.tests.test_TestLeaks.A.bound(self,*args)
numpy.tests.test_TestLeaks.A.unbound(*args)
numpy.tests.test_TestLeaks.test_frompyfunc_leaks(self,name,incr)
numpy.tests.test_TestLerp
numpy.tests.test_TestLerp.test_lerp_0d_inputs(self)
numpy.tests.test_TestLerp.test_lerp_bounded(self,t,a,b)
numpy.tests.test_TestLerp.test_lerp_monotonic(self,t0,t1,a,b)
numpy.tests.test_TestLerp.test_lerp_symmetric(self,t,a,b)
numpy.tests.test_TestMedian
numpy.tests.test_TestMedian.test_array_like(self)
numpy.tests.test_TestMedian.test_axis_keyword(self)
numpy.tests.test_TestMedian.test_basic(self)
numpy.tests.test_TestMedian.test_empty(self)
numpy.tests.test_TestMedian.test_extended_axis(self)
numpy.tests.test_TestMedian.test_extended_axis_invalid(self)
numpy.tests.test_TestMedian.test_keepdims(self)
numpy.tests.test_TestMedian.test_nan_behavior(self)
numpy.tests.test_TestMedian.test_object(self)
numpy.tests.test_TestMedian.test_out(self)
numpy.tests.test_TestMedian.test_out_nan(self)
numpy.tests.test_TestMedian.test_overwrite_keyword(self)
numpy.tests.test_TestMedian.test_subclass(self)
numpy.tests.test_TestMeshgrid
numpy.tests.test_TestMeshgrid.test_indexing(self)
numpy.tests.test_TestMeshgrid.test_invalid_arguments(self)
numpy.tests.test_TestMeshgrid.test_nd_indexing(self)
numpy.tests.test_TestMeshgrid.test_nd_shape(self)
numpy.tests.test_TestMeshgrid.test_nd_values(self)
numpy.tests.test_TestMeshgrid.test_no_input(self)
numpy.tests.test_TestMeshgrid.test_return_type(self)
numpy.tests.test_TestMeshgrid.test_simple(self)
numpy.tests.test_TestMeshgrid.test_single_input(self)
numpy.tests.test_TestMeshgrid.test_sparse(self)
numpy.tests.test_TestMeshgrid.test_writeback(self)
numpy.tests.test_TestMsort
numpy.tests.test_TestMsort.test_simple(self)
numpy.tests.test_TestPercentile
numpy.tests.test_TestPercentile.test_2D(self)
numpy.tests.test_TestPercentile.test_api(self)
numpy.tests.test_TestPercentile.test_axis(self)
numpy.tests.test_TestPercentile.test_basic(self)
numpy.tests.test_TestPercentile.test_exception(self)
numpy.tests.test_TestPercentile.test_extended_axis(self)
numpy.tests.test_TestPercentile.test_extended_axis_invalid(self)
numpy.tests.test_TestPercentile.test_fraction(self)
numpy.tests.test_TestPercentile.test_keepdims(self)
numpy.tests.test_TestPercentile.test_linear(self)
numpy.tests.test_TestPercentile.test_lower_higher(self)
numpy.tests.test_TestPercentile.test_midpoint(self)
numpy.tests.test_TestPercentile.test_nan_behavior(self)
numpy.tests.test_TestPercentile.test_nan_q(self)
numpy.tests.test_TestPercentile.test_nearest(self)
numpy.tests.test_TestPercentile.test_no_p_overwrite(self)
numpy.tests.test_TestPercentile.test_out(self)
numpy.tests.test_TestPercentile.test_out_nan(self)
numpy.tests.test_TestPercentile.test_percentile_empty_dim(self)
numpy.tests.test_TestPercentile.test_percentile_list(self)
numpy.tests.test_TestPercentile.test_percentile_no_overwrite(self)
numpy.tests.test_TestPercentile.test_percentile_out(self)
numpy.tests.test_TestPercentile.test_percentile_overwrite(self)
numpy.tests.test_TestPercentile.test_scalar_q(self)
numpy.tests.test_TestPercentile.test_sequence(self)
numpy.tests.test_TestPiecewise
numpy.tests.test_TestPiecewise.test_0d(self)
numpy.tests.test_TestPiecewise.test_0d_0d_condition(self)
numpy.tests.test_TestPiecewise.test_0d_comparison(self)
numpy.tests.test_TestPiecewise.test_default(self)
numpy.tests.test_TestPiecewise.test_multidimensional_extrafunc(self)
numpy.tests.test_TestPiecewise.test_scalar_domains_three_conditions(self)
numpy.tests.test_TestPiecewise.test_simple(self)
numpy.tests.test_TestPiecewise.test_subclasses(self)
numpy.tests.test_TestPiecewise.test_two_conditions(self)
numpy.tests.test_TestProd
numpy.tests.test_TestProd.test_basic(self)
numpy.tests.test_TestPtp
numpy.tests.test_TestPtp.test_basic(self)
numpy.tests.test_TestQuantile
numpy.tests.test_TestQuantile.test_basic(self)
numpy.tests.test_TestQuantile.test_correct_quantile_value(self)
numpy.tests.test_TestQuantile.test_fraction(self)
numpy.tests.test_TestQuantile.test_no_p_overwrite(self)
numpy.tests.test_TestQuantile.test_quantile_monotonic(self)
numpy.tests.test_TestQuantile.test_quantile_monotonic_hypo(self,arr)
numpy.tests.test_TestRot90
numpy.tests.test_TestRot90.test_axes(self)
numpy.tests.test_TestRot90.test_basic(self)
numpy.tests.test_TestRot90.test_rotation_axes(self)
numpy.tests.test_TestSelect
numpy.tests.test_TestSelect._select(self,cond,values,default=0)
numpy.tests.test_TestSelect.test_basic(self)
numpy.tests.test_TestSelect.test_broadcasting(self)
numpy.tests.test_TestSelect.test_deprecated_empty(self)
numpy.tests.test_TestSelect.test_many_arguments(self)
numpy.tests.test_TestSelect.test_non_bool_deprecation(self)
numpy.tests.test_TestSelect.test_return_dtype(self)
numpy.tests.test_TestSinc
numpy.tests.test_TestSinc.test_array_like(self)
numpy.tests.test_TestSinc.test_simple(self)
numpy.tests.test_TestSortComplex
numpy.tests.test_TestSortComplex.test_sort_complex(self)
numpy.tests.test_TestSortComplex.test_sort_real(self,type_in,type_out)
numpy.tests.test_TestTrapz
numpy.tests.test_TestTrapz.test_masked(self)
numpy.tests.test_TestTrapz.test_ndim(self)
numpy.tests.test_TestTrapz.test_simple(self)
numpy.tests.test_TestTrimZeros
numpy.tests.test_TestTrimZeros.test_all_zero(self)
numpy.tests.test_TestTrimZeros.test_basic(self)
numpy.tests.test_TestTrimZeros.test_leading_skip(self)
numpy.tests.test_TestTrimZeros.test_list_to_list(self)
numpy.tests.test_TestTrimZeros.test_no_trim(self)
numpy.tests.test_TestTrimZeros.test_overflow(self,arr)
numpy.tests.test_TestTrimZeros.test_size_zero(self)
numpy.tests.test_TestTrimZeros.test_trailing_skip(self)
numpy.tests.test_TestTrimZeros.values(self)
numpy.tests.test_TestUnique
numpy.tests.test_TestUnique.test_simple(self)
numpy.tests.test_TestUnwrap
numpy.tests.test_TestUnwrap.test_period(self)
numpy.tests.test_TestUnwrap.test_simple(self)
numpy.tests.test_TestVectorize
numpy.tests.test_TestVectorize.test_UnboundMethod_ticket_1156(self)
numpy.tests.test_TestVectorize.test_assigning_docstring(self)
numpy.tests.test_TestVectorize.test_cache(self)
numpy.tests.test_TestVectorize.test_coverage1_ticket_2100(self)
numpy.tests.test_TestVectorize.test_execution_order_ticket_1487(self)
numpy.tests.test_TestVectorize.test_keywords(self)
numpy.tests.test_TestVectorize.test_keywords2_ticket_2100(self)
numpy.tests.test_TestVectorize.test_keywords3_ticket_2100(self)
numpy.tests.test_TestVectorize.test_keywords4_ticket_2100(self)
numpy.tests.test_TestVectorize.test_keywords5_ticket_2100(self)
numpy.tests.test_TestVectorize.test_keywords_no_func_code(self)
numpy.tests.test_TestVectorize.test_keywords_with_otypes_order1(self)
numpy.tests.test_TestVectorize.test_keywords_with_otypes_order2(self)
numpy.tests.test_TestVectorize.test_keywords_with_otypes_order3(self)
numpy.tests.test_TestVectorize.test_keywords_with_otypes_several_kwd_args1(self)
numpy.tests.test_TestVectorize.test_keywords_with_otypes_several_kwd_args2(self)
numpy.tests.test_TestVectorize.test_large(self)
numpy.tests.test_TestVectorize.test_otypes(self)
numpy.tests.test_TestVectorize.test_parse_gufunc_signature(self)
numpy.tests.test_TestVectorize.test_scalar(self)
numpy.tests.test_TestVectorize.test_signature_center(self)
numpy.tests.test_TestVectorize.test_signature_computed_size(self)
numpy.tests.test_TestVectorize.test_signature_excluded(self)
numpy.tests.test_TestVectorize.test_signature_invalid_inputs(self)
numpy.tests.test_TestVectorize.test_signature_invalid_outputs(self)
numpy.tests.test_TestVectorize.test_signature_mean_last(self)
numpy.tests.test_TestVectorize.test_signature_otypes(self)
numpy.tests.test_TestVectorize.test_signature_outer(self)
numpy.tests.test_TestVectorize.test_signature_simple(self)
numpy.tests.test_TestVectorize.test_signature_two_outputs(self)
numpy.tests.test_TestVectorize.test_simple(self)
numpy.tests.test_TestVectorize.test_size_zero_output(self)
numpy.tests.test_TestVectorize.test_string_ticket_1892(self)
numpy.tests.test_TestVectorize.test_ufunc(self)
numpy.tests.test_Test_I0
numpy.tests.test_Test_I0.test_complex(self)
numpy.tests.test_Test_I0.test_non_array(self)
numpy.tests.test_Test_I0.test_simple(self)
numpy.tests.test__foo1(x,y=1.0)
numpy.tests.test__foo2(x,y=1.0,z=0.0)
numpy.tests.test__make_complex(real,imag)
numpy.tests.test_compare_results(res,desired)
numpy.tests.test_get_mat(n)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/lib/tests/test_stride_tricks.py----------------------------------------
A:numpy.lib.tests.test_stride_tricks.outarrays->broadcast_arrays(*inarrays)
A:numpy.lib.tests.test_stride_tricks.x0->numpy.zeros(shape0, dtype=int)
A:numpy.lib.tests.test_stride_tricks.n->int(np.multiply.reduce(shape1))
A:numpy.lib.tests.test_stride_tricks.x1->numpy.arange(n).reshape(shape1)
A:numpy.lib.tests.test_stride_tricks.(b0, b1)->broadcast_arrays(x0, x1)
A:numpy.lib.tests.test_stride_tricks.x->numpy.array([[1, 2, 3]])
A:numpy.lib.tests.test_stride_tricks.y->numpy.array([[1], [2], [3]])
A:numpy.lib.tests.test_stride_tricks.(bx, by)->broadcast_arrays(x, y)
A:numpy.lib.tests.test_stride_tricks.bx0->numpy.array([[1, 2, 3], [1, 2, 3], [1, 2, 3]])
A:numpy.lib.tests.test_stride_tricks.actual->broadcast_to(input_array, (3,))
A:numpy.lib.tests.test_stride_tricks.arr->numpy.ones(10)
A:numpy.lib.tests.test_stride_tricks.a->SimpleSubClass([1, 2, 3, 4])
A:numpy.lib.tests.test_stride_tricks.a_view->broadcast_to(a, shape, subok=True)
A:numpy.lib.tests.test_stride_tricks.expected->numpy.array(['a'] * 3, dtype=object)
A:numpy.lib.tests.test_stride_tricks.dt->numpy.dtype({'names': [''], 'formats': ['V4']})
A:numpy.lib.tests.test_stride_tricks.a['num']->numpy.arange(1, 5)
A:numpy.lib.tests.test_stride_tricks.arr_view->sliding_window_view(arr, shape)
A:numpy.lib.tests.test_stride_tricks.view->as_strided(arr, writeable=True)
A:numpy.lib.tests.test_stride_tricks.self->numpy.array(*args, subok=True, **kwargs).view(cls)
A:numpy.lib.tests.test_stride_tricks.b->numpy.arange(len(a)).reshape(-1, 1)
A:numpy.lib.tests.test_stride_tricks.(a_view, b_view)->broadcast_arrays(a, b, subok=True)
A:numpy.lib.tests.test_stride_tricks.original->numpy.array([1, 2, 3])
A:numpy.lib.tests.test_stride_tricks.result->broadcast_to(original, (2, 3))
A:numpy.lib.tests.test_stride_tricks.(_, result)->broadcast_arrays(0, original)
A:numpy.lib.tests.test_stride_tricks.tricky_array->as_strided(np.array(0), shape, strides)
A:numpy.lib.tests.test_stride_tricks.other->numpy.zeros((1,))
A:numpy.lib.tests.test_stride_tricks.(first, second)->broadcast_arrays(tricky_array, other)
A:numpy.lib.tests.test_stride_tricks.input_array->numpy.array('a', dtype=object)
A:numpy.lib.tests.test_stride_tricks.(actual, _)->broadcast_arrays(input_array, np.ones(3))
numpy.lib.tests.test_stride_tricks.SimpleSubClass(cls,*args,**kwargs)
numpy.lib.tests.test_stride_tricks.SimpleSubClass.__array_finalize__(self,obj)
numpy.lib.tests.test_stride_tricks.SimpleSubClass.__new__(cls,*args,**kwargs)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_1d(self)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_2d(self)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_2d_repeated_axis(self)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_2d_with_axis(self)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_2d_without_axis(self)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_errors(self)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_subok(self)
numpy.lib.tests.test_stride_tricks.TestSlidingWindowView.test_writeable(self)
numpy.lib.tests.test_stride_tricks.VerySimpleSubClass(cls,*args,**kwargs)
numpy.lib.tests.test_stride_tricks.VerySimpleSubClass.__new__(cls,*args,**kwargs)
numpy.lib.tests.test_stride_tricks.as_strided_writeable()
numpy.lib.tests.test_stride_tricks.assert_incompatible_shapes_raise(input_shapes)
numpy.lib.tests.test_stride_tricks.assert_same_as_ufunc(shape0,shape1,transposed=False,flipped=False)
numpy.lib.tests.test_stride_tricks.assert_shapes_correct(input_shapes,expected_shape)
numpy.lib.tests.test_stride_tricks.test_as_strided()
numpy.lib.tests.test_stride_tricks.test_broadcast_kwargs()
numpy.lib.tests.test_stride_tricks.test_broadcast_shape()
numpy.lib.tests.test_stride_tricks.test_broadcast_shapes_raises()
numpy.lib.tests.test_stride_tricks.test_broadcast_shapes_succeeds()
numpy.lib.tests.test_stride_tricks.test_broadcast_to_raises()
numpy.lib.tests.test_stride_tricks.test_broadcast_to_succeeds()
numpy.lib.tests.test_stride_tricks.test_incompatible_shapes_raise_valueerror()
numpy.lib.tests.test_stride_tricks.test_one_off()
numpy.lib.tests.test_stride_tricks.test_reference_types()
numpy.lib.tests.test_stride_tricks.test_same()
numpy.lib.tests.test_stride_tricks.test_same_as_ufunc()
numpy.lib.tests.test_stride_tricks.test_same_input_shapes()
numpy.lib.tests.test_stride_tricks.test_subclasses()
numpy.lib.tests.test_stride_tricks.test_two_compatible_by_ones_input_shapes()
numpy.lib.tests.test_stride_tricks.test_two_compatible_by_prepending_ones_input_shapes()
numpy.lib.tests.test_stride_tricks.test_writeable()
numpy.lib.tests.test_stride_tricks.test_writeable_memoryview()
numpy.tests.test_SimpleSubClass(cls,*args,**kwargs)
numpy.tests.test_SimpleSubClass.__array_finalize__(self,obj)
numpy.tests.test_TestSlidingWindowView
numpy.tests.test_TestSlidingWindowView.test_1d(self)
numpy.tests.test_TestSlidingWindowView.test_2d(self)
numpy.tests.test_TestSlidingWindowView.test_2d_repeated_axis(self)
numpy.tests.test_TestSlidingWindowView.test_2d_with_axis(self)
numpy.tests.test_TestSlidingWindowView.test_2d_without_axis(self)
numpy.tests.test_TestSlidingWindowView.test_errors(self)
numpy.tests.test_TestSlidingWindowView.test_subok(self)
numpy.tests.test_TestSlidingWindowView.test_writeable(self)
numpy.tests.test_VerySimpleSubClass(cls,*args,**kwargs)
numpy.tests.test_as_strided_writeable()
numpy.tests.test_assert_incompatible_shapes_raise(input_shapes)
numpy.tests.test_assert_same_as_ufunc(shape0,shape1,transposed=False,flipped=False)
numpy.tests.test_assert_shapes_correct(input_shapes,expected_shape)
numpy.tests.test_test_as_strided()
numpy.tests.test_test_broadcast_kwargs()
numpy.tests.test_test_broadcast_shape()
numpy.tests.test_test_broadcast_shapes_raises()
numpy.tests.test_test_broadcast_shapes_succeeds()
numpy.tests.test_test_broadcast_to_raises()
numpy.tests.test_test_broadcast_to_succeeds()
numpy.tests.test_test_incompatible_shapes_raise_valueerror()
numpy.tests.test_test_one_off()
numpy.tests.test_test_reference_types()
numpy.tests.test_test_same()
numpy.tests.test_test_same_as_ufunc()
numpy.tests.test_test_same_input_shapes()
numpy.tests.test_test_subclasses()
numpy.tests.test_test_two_compatible_by_ones_input_shapes()
numpy.tests.test_test_two_compatible_by_prepending_ones_input_shapes()
numpy.tests.test_test_writeable()
numpy.tests.test_test_writeable_memoryview()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/tests/test_public_api.py----------------------------------------
A:numpy.tests.test_public_api.item->getattr(module, name)
A:numpy.tests.test_public_api.allowlist->dict(undocumented, **builtins)
A:numpy.tests.test_public_api.bad_results->check_dir(np.fft)
A:numpy.tests.test_public_api.result->subprocess.check_output(exe)
A:numpy.tests.test_public_api.cdll->ctypes.CDLL(np.core._multiarray_tests.__file__)
A:numpy.tests.test_public_api.f->getattr(cdll, 'test_not_exported', None)
A:numpy.tests.test_public_api.module->importlib.import_module(mod_name)
A:numpy.tests.test_public_api.objnames->dir(module)
A:numpy.tests.test_public_api.unexpected_members->find_unexpected_members('numpy')
numpy.tests.test_public_api.check_dir(module,module_name=None)
numpy.tests.test_public_api.is_unexpected(name)
numpy.tests.test_public_api.test_NPY_NO_EXPORT()
numpy.tests.test_public_api.test_all_modules_are_expected()
numpy.tests.test_public_api.test_all_modules_are_expected_2()
numpy.tests.test_public_api.test_api_importable()
numpy.tests.test_public_api.test_dir_testing()
numpy.tests.test_public_api.test_import_lazy_import(name)
numpy.tests.test_public_api.test_numpy_fft()
numpy.tests.test_public_api.test_numpy_linalg()
numpy.tests.test_public_api.test_numpy_namespace()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/tests/test_warnings.py----------------------------------------
A:numpy.tests.test_warnings.p->ParseCall()
A:numpy.tests.test_warnings.tree->ast.parse(file.read())
numpy.tests.test_warnings.FindFuncs(self,filename)
numpy.tests.test_warnings.FindFuncs.__init__(self,filename)
numpy.tests.test_warnings.FindFuncs.visit_Call(self,node)
numpy.tests.test_warnings.ParseCall(self)
numpy.tests.test_warnings.ParseCall.__init__(self)
numpy.tests.test_warnings.ParseCall.visit_Attribute(self,node)
numpy.tests.test_warnings.ParseCall.visit_Name(self,node)
numpy.tests.test_warnings.test_warning_calls()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/tests/test_reloading.py----------------------------------------
A:numpy.tests.test_reloading.code->textwrap.dedent('\n        import sys\n        from pytest import warns\n        import numpy as np\n\n        for k in list(sys.modules.keys()):\n            if "numpy" in k:\n                del sys.modules[k]\n\n        with warns(UserWarning):\n            import numpy as np\n        ')
A:numpy.tests.test_reloading.p->subprocess.run([sys.executable, '-c', code])
numpy.tests.test_reloading.test_full_reimport()
numpy.tests.test_reloading.test_novalue()
numpy.tests.test_reloading.test_numpy_reloading()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/tests/test_scripts.py----------------------------------------
A:numpy.tests.test_scripts.is_inplace->isfile(pathjoin(dirname(np.__file__), '..', 'setup.py'))
A:numpy.tests.test_scripts.exe_dir->dirname(sys.executable)
A:numpy.tests.test_scripts.major->str(version.major)
A:numpy.tests.test_scripts.minor->str(version.minor)
A:numpy.tests.test_scripts.stdout->subprocess.check_output([sys.executable, '-mnumpy.f2py', '-v'])
numpy.tests.test_scripts.find_f2py_commands()
numpy.tests.test_scripts.test_f2py(f2py_cmd)
numpy.tests.test_scripts.test_pep338()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/tests/test_numpy_version.py----------------------------------------
A:numpy.tests.test_numpy_version.res->re.match(version_pattern + dev_suffix + '$', np.__version__)
numpy.tests.test_numpy_version.test_short_version()
numpy.tests.test_numpy_version.test_valid_numpy_version()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/tests/test_ctypeslib.py----------------------------------------
A:numpy.tests.test_ctypeslib.cdll->load_library('_multiarray_umath', np.core._multiarray_umath.__file__)
A:numpy.tests.test_ctypeslib.test_cdll->load_library('_multiarray_tests', np.core._multiarray_tests.__file__)
A:numpy.tests.test_ctypeslib.so->get_shared_lib_extension(is_python_ext=True)
A:numpy.tests.test_ctypeslib.p->cast((c_int * 10)(*range(10)), POINTER(c_int))
A:numpy.tests.test_ctypeslib.dt->numpy.dtype(dict(names=['a', 'b'], offsets=[0, 2], formats=[np.uint32, np.uint32]))
A:numpy.tests.test_ctypeslib.samedt->numpy.dtype(dtdescr)
A:numpy.tests.test_ctypeslib.dt2->numpy.dtype(dtdescr, align=True)
A:numpy.tests.test_ctypeslib.x->numpy.array([[1, 2], [3, 4]], order='F')
A:numpy.tests.test_ctypeslib.arr->numpy.zeros((224, 224, 3))
A:numpy.tests.test_ctypeslib.ptr_type->ndpointer(dtype=arr.dtype)
A:numpy.tests.test_ctypeslib.arr2->c_forward_pointer(arr)
A:numpy.tests.test_ctypeslib.ret->c_forward_pointer(arr)
A:numpy.tests.test_ctypeslib.a->numpy.arange(N, dtype=np.short)
A:numpy.tests.test_ctypeslib.c_array->(2 * Struct3)(Struct3(Struct(a=1), Struct(a=2), Struct(a=3)), Struct3(Struct(a=4), Struct(a=5), Struct(a=6)))
A:numpy.tests.test_ctypeslib.expected->numpy.array([[(1,), (2,), (3,)], [(4,), (5,), (6,)]], dtype=[('a', np.int16)])
A:numpy.tests.test_ctypeslib.pnt->numpy.ctypeslib.as_ctypes(a)
A:numpy.tests.test_ctypeslib.newpnt->ctypes.cast(pnt, ctypes.POINTER(ctypes.c_short))
A:numpy.tests.test_ctypeslib.b->numpy.ctypeslib.as_array(newpnt, (N,))
A:numpy.tests.test_ctypeslib.c_arr->numpy.ctypeslib.as_ctypes(arr)
A:numpy.tests.test_ctypeslib.arr_ref->weakref.ref(arr)
A:numpy.tests.test_ctypeslib.ct->numpy.ctypeslib.as_ctypes_type(dt)
numpy.tests.test_ctypesTestAsArray
numpy.tests.test_ctypesTestAsArray.test_array(self)
numpy.tests.test_ctypesTestAsArray.test_pointer(self)
numpy.tests.test_ctypesTestAsArray.test_reference_cycles(self)
numpy.tests.test_ctypesTestAsArray.test_segmentation_fault(self)
numpy.tests.test_ctypesTestAsArray.test_struct_array_pointer(self)
numpy.tests.test_ctypesTestAsCtypesType
numpy.tests.test_ctypesTestAsCtypesType.test_overlapping(self)
numpy.tests.test_ctypesTestAsCtypesType.test_padded_union(self)
numpy.tests.test_ctypesTestAsCtypesType.test_scalar(self)
numpy.tests.test_ctypesTestAsCtypesType.test_structure(self)
numpy.tests.test_ctypesTestAsCtypesType.test_structure_aligned(self)
numpy.tests.test_ctypesTestAsCtypesType.test_subarray(self)
numpy.tests.test_ctypesTestAsCtypesType.test_union(self)
numpy.tests.test_ctypesTestLoadLibrary
numpy.tests.test_ctypesTestLoadLibrary.test_basic(self)
numpy.tests.test_ctypesTestLoadLibrary.test_basic2(self)
numpy.tests.test_ctypesTestNdpointer
numpy.tests.test_ctypesTestNdpointer.test_cache(self)
numpy.tests.test_ctypesTestNdpointer.test_dtype(self)
numpy.tests.test_ctypesTestNdpointer.test_flags(self)
numpy.tests.test_ctypesTestNdpointer.test_ndim(self)
numpy.tests.test_ctypesTestNdpointer.test_shape(self)
numpy.tests.test_ctypesTestNdpointerCFunc
numpy.tests.test_ctypesTestNdpointerCFunc.test_arguments(self)
numpy.tests.test_ctypesTestNdpointerCFunc.test_return(self,dt)
numpy.tests.test_ctypesTestNdpointerCFunc.test_vague_return_value(self)
numpy.tests.test_ctypeslib.TestAsArray
numpy.tests.test_ctypeslib.TestAsArray.test_array(self)
numpy.tests.test_ctypeslib.TestAsArray.test_pointer(self)
numpy.tests.test_ctypeslib.TestAsArray.test_reference_cycles(self)
numpy.tests.test_ctypeslib.TestAsArray.test_segmentation_fault(self)
numpy.tests.test_ctypeslib.TestAsArray.test_struct_array_pointer(self)
numpy.tests.test_ctypeslib.TestAsCtypesType
numpy.tests.test_ctypeslib.TestAsCtypesType.test_overlapping(self)
numpy.tests.test_ctypeslib.TestAsCtypesType.test_padded_union(self)
numpy.tests.test_ctypeslib.TestAsCtypesType.test_scalar(self)
numpy.tests.test_ctypeslib.TestAsCtypesType.test_structure(self)
numpy.tests.test_ctypeslib.TestAsCtypesType.test_structure_aligned(self)
numpy.tests.test_ctypeslib.TestAsCtypesType.test_subarray(self)
numpy.tests.test_ctypeslib.TestAsCtypesType.test_union(self)
numpy.tests.test_ctypeslib.TestLoadLibrary
numpy.tests.test_ctypeslib.TestLoadLibrary.test_basic(self)
numpy.tests.test_ctypeslib.TestLoadLibrary.test_basic2(self)
numpy.tests.test_ctypeslib.TestNdpointer
numpy.tests.test_ctypeslib.TestNdpointer.test_cache(self)
numpy.tests.test_ctypeslib.TestNdpointer.test_dtype(self)
numpy.tests.test_ctypeslib.TestNdpointer.test_flags(self)
numpy.tests.test_ctypeslib.TestNdpointer.test_ndim(self)
numpy.tests.test_ctypeslib.TestNdpointer.test_shape(self)
numpy.tests.test_ctypeslib.TestNdpointerCFunc
numpy.tests.test_ctypeslib.TestNdpointerCFunc.test_arguments(self)
numpy.tests.test_ctypeslib.TestNdpointerCFunc.test_return(self,dt)
numpy.tests.test_ctypeslib.TestNdpointerCFunc.test_vague_return_value(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/tests/test_matlib.py----------------------------------------
A:numpy.tests.test_matlib.x->numpy.matlib.repmat(a1, 2, 2)
A:numpy.tests.test_matlib.xc->numpy.matlib.eye(3, k=1, dtype=int)
A:numpy.tests.test_matlib.xf->numpy.matlib.eye(3, 4, dtype=int, order='F')
A:numpy.tests.test_matlib.a1->numpy.arange(4)
A:numpy.tests.test_matlib.y->numpy.array([[0, 1, 2, 3, 0, 1, 2, 3], [0, 1, 2, 3, 0, 1, 2, 3]])
numpy.tests.test_matlib.test_empty()
numpy.tests.test_matlib.test_eye()
numpy.tests.test_matlib.test_identity()
numpy.tests.test_matlib.test_ones()
numpy.tests.test_matlib.test_rand()
numpy.tests.test_matlib.test_randn()
numpy.tests.test_matlib.test_repmat()
numpy.tests.test_matlib.test_zeros()
numpy.tests.test_mattest_empty()
numpy.tests.test_mattest_eye()
numpy.tests.test_mattest_identity()
numpy.tests.test_mattest_ones()
numpy.tests.test_mattest_rand()
numpy.tests.test_mattest_randn()
numpy.tests.test_mattest_repmat()
numpy.tests.test_mattest_zeros()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/compat/py3k.py----------------------------------------
numpy.compat.asbytes(s)
numpy.compat.asbytes_nested(x)
numpy.compat.asstr(s)
numpy.compat.asunicode(s)
numpy.compat.asunicode_nested(x)
numpy.compat.contextlib_nullcontext(self,enter_result=None)
numpy.compat.contextlib_nullcontext.__enter__(self)
numpy.compat.contextlib_nullcontext.__exit__(self,*excinfo)
numpy.compat.getexception()
numpy.compat.is_pathlib_path(obj)
numpy.compat.isfileobj(f)
numpy.compat.npy_load_module(name,fn,info=None)
numpy.compat.open_latin1(filename,mode='r')
numpy.compat.py3k.asbytes(s)
numpy.compat.py3k.asbytes_nested(x)
numpy.compat.py3k.asstr(s)
numpy.compat.py3k.asunicode(s)
numpy.compat.py3k.asunicode_nested(x)
numpy.compat.py3k.contextlib_nullcontext(self,enter_result=None)
numpy.compat.py3k.contextlib_nullcontext.__enter__(self)
numpy.compat.py3k.contextlib_nullcontext.__exit__(self,*excinfo)
numpy.compat.py3k.contextlib_nullcontext.__init__(self,enter_result=None)
numpy.compat.py3k.getexception()
numpy.compat.py3k.is_pathlib_path(obj)
numpy.compat.py3k.isfileobj(f)
numpy.compat.py3k.npy_load_module(name,fn,info=None)
numpy.compat.py3k.open_latin1(filename,mode='r')
numpy.compat.py3k.sixu(s)
numpy.compat.sixu(s)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/compat/_inspect.py----------------------------------------
A:numpy.compat._inspect.args->list(names[:nargs])
A:numpy.compat._inspect.(args, varargs, varkw)->getargs(frame.f_code)
A:numpy.compat._inspect.spec->strseq(args[i], formatarg, join)
numpy.compat._inspect.formatargspec(args,varargs=None,varkw=None,defaults=None,formatarg=str,formatvarargs=lambdaname:'*'+name,formatvarkw=lambdaname:'**'+name,formatvalue=lambdavalue:'='+repr(value),join=joinseq)
numpy.compat._inspect.formatargvalues(args,varargs,varkw,locals,formatarg=str,formatvarargs=lambdaname:'*'+name,formatvarkw=lambdaname:'**'+name,formatvalue=lambdavalue:'='+repr(value),join=joinseq)
numpy.compat._inspect.getargs(co)
numpy.compat._inspect.getargspec(func)
numpy.compat._inspect.getargvalues(frame)
numpy.compat._inspect.iscode(object)
numpy.compat._inspect.isfunction(object)
numpy.compat._inspect.ismethod(object)
numpy.compat._inspect.joinseq(seq)
numpy.compat._inspect.strseq(object,convert,join=joinseq)
numpy.compat.formatargspec(args,varargs=None,varkw=None,defaults=None,formatarg=str,formatvarargs=lambdaname:'*'+name,formatvarkw=lambdaname:'**'+name,formatvalue=lambdavalue:'='+repr(value),join=joinseq)
numpy.compat.getargspec(func)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/compat/setup.py----------------------------------------
A:numpy.compat.setup.config->Configuration('compat', parent_package, top_path)
numpy.compat.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/compat/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/compat/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/compat/tests/test_compat.py----------------------------------------
A:numpy.compat.tests.test_compat.filename->join(folder, 'a.bin')
numpy.compat.tests.test_compat.test_isfileobj()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/matrixlib/__init__.py----------------------------------------
A:numpy.matrixlib.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/matrixlib/__init__.pyi----------------------------------------
numpy.__init__.asmatrix(data,dtype=...)
numpy.__init__.bmat(obj,ldict=...,gdict=...)
numpy.matrixlib.__init__.asmatrix(data,dtype=...)
numpy.matrixlib.__init__.bmat(obj,ldict=...,gdict=...)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/matrixlib/defmatrix.py----------------------------------------
A:numpy.matrixlib.defmatrix.data->_convert_from_string(data)
A:numpy.matrixlib.defmatrix.rows->str.split(';')
A:numpy.matrixlib.defmatrix.trow->row.split(',')
A:numpy.matrixlib.defmatrix.temp->col.strip().split()
A:numpy.matrixlib.defmatrix.Ncols->len(newrow)
A:numpy.matrixlib.defmatrix.intype->numpy.core.numeric.dtype(dtype)
A:numpy.matrixlib.defmatrix.new->_convert_from_string(data).view(subtype)
A:numpy.matrixlib.defmatrix.arr->arr.copy().copy()
A:numpy.matrixlib.defmatrix.ret->numpy.core.numeric.ndarray.__new__(subtype, shape, arr.dtype, buffer=arr, order=order)
A:numpy.matrixlib.defmatrix.newshape->tuple([x for x in self.shape if x > 1])
A:numpy.matrixlib.defmatrix.ndim->len(newshape)
A:numpy.matrixlib.defmatrix.out->numpy.core.numeric.ndarray.__getitem__(self, index)
A:numpy.matrixlib.defmatrix.n->len(index)
A:numpy.matrixlib.defmatrix.col->col.strip().strip()
numpy._convert_from_string(data)
numpy._from_string(str,gdict,ldict)
numpy.asmatrix(data,dtype=None)
numpy.bmat(obj,ldict=None,gdict=None)
numpy.matrix(subtype,data,dtype=None,copy=True)
numpy.matrix.A(self)
numpy.matrix.A1(self)
numpy.matrix.H(self)
numpy.matrix.I(self)
numpy.matrix.T(self)
numpy.matrix.__array_finalize__(self,obj)
numpy.matrix.__getitem__(self,index)
numpy.matrix.__imul__(self,other)
numpy.matrix.__ipow__(self,other)
numpy.matrix.__mul__(self,other)
numpy.matrix.__pow__(self,other)
numpy.matrix.__rmul__(self,other)
numpy.matrix.__rpow__(self,other)
numpy.matrix._align(self,axis)
numpy.matrix._collapse(self,axis)
numpy.matrix.all(self,axis=None,out=None)
numpy.matrix.any(self,axis=None,out=None)
numpy.matrix.argmax(self,axis=None,out=None)
numpy.matrix.argmin(self,axis=None,out=None)
numpy.matrix.flatten(self,order='C')
numpy.matrix.max(self,axis=None,out=None)
numpy.matrix.mean(self,axis=None,dtype=None,out=None)
numpy.matrix.min(self,axis=None,out=None)
numpy.matrix.prod(self,axis=None,dtype=None,out=None)
numpy.matrix.ptp(self,axis=None,out=None)
numpy.matrix.ravel(self,order='C')
numpy.matrix.squeeze(self,axis=None)
numpy.matrix.std(self,axis=None,dtype=None,out=None,ddof=0)
numpy.matrix.sum(self,axis=None,dtype=None,out=None)
numpy.matrix.tolist(self)
numpy.matrix.var(self,axis=None,dtype=None,out=None,ddof=0)
numpy.matrixlib.defmatrix._convert_from_string(data)
numpy.matrixlib.defmatrix._from_string(str,gdict,ldict)
numpy.matrixlib.defmatrix.asmatrix(data,dtype=None)
numpy.matrixlib.defmatrix.bmat(obj,ldict=None,gdict=None)
numpy.matrixlib.defmatrix.matrix(subtype,data,dtype=None,copy=True)
numpy.matrixlib.defmatrix.matrix.A(self)
numpy.matrixlib.defmatrix.matrix.A1(self)
numpy.matrixlib.defmatrix.matrix.H(self)
numpy.matrixlib.defmatrix.matrix.I(self)
numpy.matrixlib.defmatrix.matrix.T(self)
numpy.matrixlib.defmatrix.matrix.__array_finalize__(self,obj)
numpy.matrixlib.defmatrix.matrix.__getitem__(self,index)
numpy.matrixlib.defmatrix.matrix.__imul__(self,other)
numpy.matrixlib.defmatrix.matrix.__ipow__(self,other)
numpy.matrixlib.defmatrix.matrix.__mul__(self,other)
numpy.matrixlib.defmatrix.matrix.__new__(subtype,data,dtype=None,copy=True)
numpy.matrixlib.defmatrix.matrix.__pow__(self,other)
numpy.matrixlib.defmatrix.matrix.__rmul__(self,other)
numpy.matrixlib.defmatrix.matrix.__rpow__(self,other)
numpy.matrixlib.defmatrix.matrix._align(self,axis)
numpy.matrixlib.defmatrix.matrix._collapse(self,axis)
numpy.matrixlib.defmatrix.matrix.all(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.any(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.argmax(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.argmin(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.flatten(self,order='C')
numpy.matrixlib.defmatrix.matrix.max(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.mean(self,axis=None,dtype=None,out=None)
numpy.matrixlib.defmatrix.matrix.min(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.prod(self,axis=None,dtype=None,out=None)
numpy.matrixlib.defmatrix.matrix.ptp(self,axis=None,out=None)
numpy.matrixlib.defmatrix.matrix.ravel(self,order='C')
numpy.matrixlib.defmatrix.matrix.squeeze(self,axis=None)
numpy.matrixlib.defmatrix.matrix.std(self,axis=None,dtype=None,out=None,ddof=0)
numpy.matrixlib.defmatrix.matrix.sum(self,axis=None,dtype=None,out=None)
numpy.matrixlib.defmatrix.matrix.tolist(self)
numpy.matrixlib.defmatrix.matrix.var(self,axis=None,dtype=None,out=None,ddof=0)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/matrixlib/setup.py----------------------------------------
A:numpy.matrixlib.setup.config->configuration(top_path='').todict()
numpy.matrixlib.setup.configuration(parent_package='',top_path=None)
numpy.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/matrixlib/tests/test_interaction.py----------------------------------------
A:numpy.matrixlib.tests.test_interaction.m->numpy.asmatrix(a)
A:numpy.matrixlib.tests.test_interaction.x->numpy.linspace(0, 5)
A:numpy.matrixlib.tests.test_interaction.res->f(mat)
A:numpy.matrixlib.tests.test_interaction.a->numpy.array(m)
A:numpy.matrixlib.tests.test_interaction.actual->numpy.partition(a, 1, axis=None)
A:numpy.matrixlib.tests.test_interaction.expected->numpy.bmat([[a, b], [c, d]])
A:numpy.matrixlib.tests.test_interaction.arr->numpy.matrix([1, 2], dtype=object)
A:numpy.matrixlib.tests.test_interaction.desired->numpy.matrix([[3, 6]], dtype=object)
A:numpy.matrixlib.tests.test_interaction.i->numpy.nditer([a, b, None], [], [['readonly'], ['readonly'], ['writeonly', 'allocate', 'no_subtype']])
A:numpy.matrixlib.tests.test_interaction.b->numpy.array([2])
A:numpy.matrixlib.tests.test_interaction.c->numpy.array([3])
A:numpy.matrixlib.tests.test_interaction.mat->numpy.matrix(np.eye(3))
A:numpy.matrixlib.tests.test_interaction.y->numpy.matrix(np.random.rand(5, 5))
A:numpy.matrixlib.tests.test_interaction.w->numpy.matrix([[1, 2], [3, 4]])
A:numpy.matrixlib.tests.test_interaction.r->numpy.trapz(y, x)
A:numpy.matrixlib.tests.test_interaction.mx->numpy.matrix(x)
A:numpy.matrixlib.tests.test_interaction.my->numpy.matrix(y)
A:numpy.matrixlib.tests.test_interaction.mr->numpy.trapz(my, mx)
A:numpy.matrixlib.tests.test_interaction.result->numpy.apply_along_axis(double, 1, m)
A:numpy.matrixlib.tests.test_interaction.d->numpy.array([4])
A:numpy.matrixlib.tests.test_interaction.msg->str(exc_info.value)
A:numpy.matrixlib.tests.test_interaction.msg_reference->textwrap.dedent('\n    Arrays are not equal\n\n    (shapes (2,), (1, 2) mismatch)\n     x: array([1, 2])\n     y: matrix([[1, 2]])')
A:numpy.matrixlib.tests.test_interaction.m1->numpy.matrix([[1.0, 2.0]])
A:numpy.matrixlib.tests.test_interaction.m2->numpy.matrix([[1.0, np.nan]])
A:numpy.matrixlib.tests.test_interaction.m3->numpy.matrix([[1.0, -np.inf]])
A:numpy.matrixlib.tests.test_interaction.m4->numpy.matrix([[np.nan, np.inf]])
A:numpy.matrixlib.tests.test_interaction.m5->numpy.matrix([[1.0, 2.0], [np.nan, np.inf]])
numpy.matrixlib.tests.test_interaction.TestConcatenatorMatrix
numpy.matrixlib.tests.test_interaction.TestConcatenatorMatrix.test_matrix(self)
numpy.matrixlib.tests.test_interaction.TestConcatenatorMatrix.test_matrix_builder(self)
numpy.matrixlib.tests.test_interaction.TestConcatenatorMatrix.test_matrix_scalar(self)
numpy.matrixlib.tests.test_interaction.like_function()
numpy.matrixlib.tests.test_interaction.test_apply_along_axis_matrix()
numpy.matrixlib.tests.test_interaction.test_array_almost_equal_matrix()
numpy.matrixlib.tests.test_interaction.test_array_astype()
numpy.matrixlib.tests.test_interaction.test_array_equal_error_message_matrix()
numpy.matrixlib.tests.test_interaction.test_average_matrix()
numpy.matrixlib.tests.test_interaction.test_dot_scalar_and_matrix_of_objects()
numpy.matrixlib.tests.test_interaction.test_ediff1d_matrix()
numpy.matrixlib.tests.test_interaction.test_fancy_indexing()
numpy.matrixlib.tests.test_interaction.test_inner_scalar_and_matrix()
numpy.matrixlib.tests.test_interaction.test_inner_scalar_and_matrix_of_objects()
numpy.matrixlib.tests.test_interaction.test_iter_allocate_output_subtype()
numpy.matrixlib.tests.test_interaction.test_kron_matrix()
numpy.matrixlib.tests.test_interaction.test_nanfunctions_matrices()
numpy.matrixlib.tests.test_interaction.test_nanfunctions_matrices_general()
numpy.matrixlib.tests.test_interaction.test_object_scalar_multiply()
numpy.matrixlib.tests.test_interaction.test_partition_matrix_none()
numpy.matrixlib.tests.test_interaction.test_polynomial_mapdomain()
numpy.matrixlib.tests.test_interaction.test_sort_matrix_none()
numpy.matrixlib.tests.test_interaction.test_stack()
numpy.matrixlib.tests.test_interaction.test_trapz_matrix()
numpy.tests.test_interaction.TestConcatenatorMatrix
numpy.tests.test_interaction.TestConcatenatorMatrix.test_matrix(self)
numpy.tests.test_interaction.TestConcatenatorMatrix.test_matrix_builder(self)
numpy.tests.test_interaction.TestConcatenatorMatrix.test_matrix_scalar(self)
numpy.tests.test_interaction.like_function()
numpy.tests.test_interaction.test_apply_along_axis_matrix()
numpy.tests.test_interaction.test_array_almost_equal_matrix()
numpy.tests.test_interaction.test_array_astype()
numpy.tests.test_interaction.test_array_equal_error_message_matrix()
numpy.tests.test_interaction.test_average_matrix()
numpy.tests.test_interaction.test_dot_scalar_and_matrix_of_objects()
numpy.tests.test_interaction.test_ediff1d_matrix()
numpy.tests.test_interaction.test_fancy_indexing()
numpy.tests.test_interaction.test_inner_scalar_and_matrix()
numpy.tests.test_interaction.test_inner_scalar_and_matrix_of_objects()
numpy.tests.test_interaction.test_iter_allocate_output_subtype()
numpy.tests.test_interaction.test_kron_matrix()
numpy.tests.test_interaction.test_nanfunctions_matrices()
numpy.tests.test_interaction.test_nanfunctions_matrices_general()
numpy.tests.test_interaction.test_object_scalar_multiply()
numpy.tests.test_interaction.test_partition_matrix_none()
numpy.tests.test_interaction.test_polynomial_mapdomain()
numpy.tests.test_interaction.test_sort_matrix_none()
numpy.tests.test_interaction.test_stack()
numpy.tests.test_interaction.test_trapz_matrix()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/matrixlib/tests/test_defmatrix.py----------------------------------------
A:numpy.matrixlib.tests.test_defmatrix.A->numpy.arange(6)
A:numpy.matrixlib.tests.test_defmatrix.mA->matrix(A)
A:numpy.matrixlib.tests.test_defmatrix.B->numpy.dot(B, Ainv)
A:numpy.matrixlib.tests.test_defmatrix.C->bmat([[A, A], [A, A]])
A:numpy.matrixlib.tests.test_defmatrix.D->numpy.array([[1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4]])
A:numpy.matrixlib.tests.test_defmatrix.E->numpy.array([[5, 6], [7, 8]])
A:numpy.matrixlib.tests.test_defmatrix.AEresult->matrix([[1, 2, 5, 6], [3, 4, 7, 8]])
A:numpy.matrixlib.tests.test_defmatrix.vec->numpy.arange(5)
A:numpy.matrixlib.tests.test_defmatrix.mvec->matrix(vec)
A:numpy.matrixlib.tests.test_defmatrix.Aresult->numpy.array([[1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4]])
A:numpy.matrixlib.tests.test_defmatrix.mixresult->numpy.array([[1, 2, 5, 6], [3, 4, 7, 8], [5, 6, 1, 2], [7, 8, 3, 4]])
A:numpy.matrixlib.tests.test_defmatrix.b2->bmat('A,B;C,D', ldict={'A': A, 'B': B}, gdict={'C': B, 'D': A})
A:numpy.matrixlib.tests.test_defmatrix.M->matrix([[1, 2, 0, 0], [3, 4, 0, 0], [1, 2, 1, 2], [3, 4, 3, 4]])
A:numpy.matrixlib.tests.test_defmatrix.sum0->matrix([8, 12, 4, 6])
A:numpy.matrixlib.tests.test_defmatrix.x->matrix([[1, 2, 3], [4, 5, 6]])
A:numpy.matrixlib.tests.test_defmatrix.y->numpy.zeros((3, 1), float)
A:numpy.matrixlib.tests.test_defmatrix.mx->matrix([[1, 2, 3], [4, 5, 6]]).view(np.matrix)
A:numpy.matrixlib.tests.test_defmatrix.mB->matrix(A).copy()
A:numpy.matrixlib.tests.test_defmatrix.xpinv->matrix([[-0.77777778, 0.27777778], [-0.11111111, 0.11111111], [0.55555556, -0.05555556]])
A:numpy.matrixlib.tests.test_defmatrix.mC->matrix(A).copy()
A:numpy.matrixlib.tests.test_defmatrix.O->numpy.ones((10, 10), np.complex128)
A:numpy.matrixlib.tests.test_defmatrix.Ainv->numpy.linalg.inv(A)
A:numpy.matrixlib.tests.test_defmatrix.mA2->matrix(A)
A:numpy.matrixlib.tests.test_defmatrix.m->matrix([[1], [2]])
A:numpy.matrixlib.tests.test_defmatrix.m2->matrix([[1], [2]]).copy()
A:numpy.matrixlib.tests.test_defmatrix.mi->matrix([[1], [2]]).copy()
A:numpy.matrixlib.tests.test_defmatrix.m4->matrix([[1], [2]]).copy().copy()
A:numpy.matrixlib.tests.test_defmatrix.two->scalar_t(2)
A:numpy.matrixlib.tests.test_defmatrix.a->numpy.arange(10).reshape((2, 5)).view(np.matrix)
A:numpy.matrixlib.tests.test_defmatrix.f->getattr(a, attrib)
A:numpy.matrixlib.tests.test_defmatrix.b->f(*args)
A:numpy.matrixlib.tests.test_defmatrix.(c, d)->matrix([0.0]).nonzero()
A:numpy.matrixlib.tests.test_defmatrix.expanded->numpy.expand_dims(a, axis=1)
numpy.matrixlib.tests.test_defmatrix.TestAlgebra
numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_basic(self)
numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_notimplemented(self)
numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_pow(self)
numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_scalar_type_pow(self)
numpy.matrixlib.tests.test_defmatrix.TestCasting
numpy.matrixlib.tests.test_defmatrix.TestCasting.test_basic(self)
numpy.matrixlib.tests.test_defmatrix.TestCtor
numpy.matrixlib.tests.test_defmatrix.TestCtor.test_basic(self)
numpy.matrixlib.tests.test_defmatrix.TestCtor.test_bmat_nondefault_str(self)
numpy.matrixlib.tests.test_defmatrix.TestCtor.test_exceptions(self)
numpy.matrixlib.tests.test_defmatrix.TestIndexing
numpy.matrixlib.tests.test_defmatrix.TestIndexing.test_basic(self)
numpy.matrixlib.tests.test_defmatrix.TestMatrixReturn
numpy.matrixlib.tests.test_defmatrix.TestMatrixReturn.test_instance_methods(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_array_from_matrix_list(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_array_to_list(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_boolean_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_dimesions(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_fancy_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_list_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_matrix_element(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_row_column_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_scalar_indexing(self)
numpy.matrixlib.tests.test_defmatrix.TestPower
numpy.matrixlib.tests.test_defmatrix.TestPower.test_list(self)
numpy.matrixlib.tests.test_defmatrix.TestPower.test_returntype(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_asmatrix(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_basic(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_comparisons(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_make_bool_matrix_from_str(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_max(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_min(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_noaxis(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_pinv(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_prod(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_ptp(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_repr(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_sum(self)
numpy.matrixlib.tests.test_defmatrix.TestProperties.test_var(self)
numpy.matrixlib.tests.test_defmatrix.TestShape
numpy.matrixlib.tests.test_defmatrix.TestShape.test_array_memory_sharing(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_expand_dims_matrix(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_matrix_memory_sharing(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_matrix_ravel_order(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_member_flatten(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_member_ravel(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_numpy_ravel(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_numpy_ravel_order(self)
numpy.matrixlib.tests.test_defmatrix.TestShape.test_shape(self)
numpy.tests.test_TestAlgebra
numpy.tests.test_TestAlgebra.test_basic(self)
numpy.tests.test_TestAlgebra.test_notimplemented(self)
numpy.tests.test_TestAlgebra.test_pow(self)
numpy.tests.test_TestAlgebra.test_scalar_type_pow(self)
numpy.tests.test_TestCasting
numpy.tests.test_TestCasting.test_basic(self)
numpy.tests.test_TestCtor
numpy.tests.test_TestCtor.test_basic(self)
numpy.tests.test_TestCtor.test_bmat_nondefault_str(self)
numpy.tests.test_TestCtor.test_exceptions(self)
numpy.tests.test_TestIndexing
numpy.tests.test_TestIndexing.test_basic(self)
numpy.tests.test_TestMatrixReturn
numpy.tests.test_TestMatrixReturn.test_instance_methods(self)
numpy.tests.test_TestNewScalarIndexing
numpy.tests.test_TestNewScalarIndexing.test_array_from_matrix_list(self)
numpy.tests.test_TestNewScalarIndexing.test_array_to_list(self)
numpy.tests.test_TestNewScalarIndexing.test_boolean_indexing(self)
numpy.tests.test_TestNewScalarIndexing.test_dimesions(self)
numpy.tests.test_TestNewScalarIndexing.test_fancy_indexing(self)
numpy.tests.test_TestNewScalarIndexing.test_list_indexing(self)
numpy.tests.test_TestNewScalarIndexing.test_matrix_element(self)
numpy.tests.test_TestNewScalarIndexing.test_row_column_indexing(self)
numpy.tests.test_TestNewScalarIndexing.test_scalar_indexing(self)
numpy.tests.test_TestPower
numpy.tests.test_TestPower.test_list(self)
numpy.tests.test_TestPower.test_returntype(self)
numpy.tests.test_TestProperties
numpy.tests.test_TestProperties.test_asmatrix(self)
numpy.tests.test_TestProperties.test_basic(self)
numpy.tests.test_TestProperties.test_comparisons(self)
numpy.tests.test_TestProperties.test_make_bool_matrix_from_str(self)
numpy.tests.test_TestProperties.test_max(self)
numpy.tests.test_TestProperties.test_min(self)
numpy.tests.test_TestProperties.test_noaxis(self)
numpy.tests.test_TestProperties.test_pinv(self)
numpy.tests.test_TestProperties.test_prod(self)
numpy.tests.test_TestProperties.test_ptp(self)
numpy.tests.test_TestProperties.test_repr(self)
numpy.tests.test_TestProperties.test_sum(self)
numpy.tests.test_TestProperties.test_var(self)
numpy.tests.test_TestShape
numpy.tests.test_TestShape.test_array_memory_sharing(self)
numpy.tests.test_TestShape.test_expand_dims_matrix(self)
numpy.tests.test_TestShape.test_matrix_memory_sharing(self)
numpy.tests.test_TestShape.test_matrix_ravel_order(self)
numpy.tests.test_TestShape.test_member_flatten(self)
numpy.tests.test_TestShape.test_member_ravel(self)
numpy.tests.test_TestShape.test_numpy_ravel(self)
numpy.tests.test_TestShape.test_numpy_ravel_order(self)
numpy.tests.test_TestShape.test_shape(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/matrixlib/tests/test_masked_matrix.py----------------------------------------
A:numpy.matrixlib.tests.test_masked_matrix.mat->numpy.matrix(data)
A:numpy.matrixlib.tests.test_masked_matrix._data->numpy.ma.core.MaskedArray.__new__(cls, data=mat, mask=mask)
A:numpy.matrixlib.tests.test_masked_matrix._view->self.view(MaskedArray)
A:numpy.matrixlib.tests.test_masked_matrix.x1->numpy.matrix(np.arange(5) * 1.0)
A:numpy.matrixlib.tests.test_masked_matrix.x2->masked_values(x1, 3.0)
A:numpy.matrixlib.tests.test_masked_matrix.x3->masked_array(x1, mask=[[0, 1, 0], [1, 0, 0]])
A:numpy.matrixlib.tests.test_masked_matrix.x4->masked_array(x1)
A:numpy.matrixlib.tests.test_masked_matrix.x3[1, :]->masked_array([1, 2, 3], [1, 1, 0])
A:numpy.matrixlib.tests.test_masked_matrix.x4[1, :]->masked_array([1, 2, 3], [1, 1, 0])
A:numpy.matrixlib.tests.test_masked_matrix.a->masked_array(iterator, dtype=[('a', float), ('b', float)])
A:numpy.matrixlib.tests.test_masked_matrix.a_pickled->numpy.compat.pickle.loads(pickle.dumps(a, protocol=proto))
A:numpy.matrixlib.tests.test_masked_matrix.m->numpy.array([[True, False, False], [False, False, False], [True, True, False]], dtype=np.bool_)
A:numpy.matrixlib.tests.test_masked_matrix.test->masked_array(iterator, dtype=[('a', float), ('b', float)]).view((float, 2), np.matrix)
A:numpy.matrixlib.tests.test_masked_matrix.test.flat->masked_array([3, 2, 1], mask=[1, 0, 0])
A:numpy.matrixlib.tests.test_masked_matrix.control->masked_array(np.matrix([[3, 2, 1]]), mask=[1, 0, 0])
A:numpy.matrixlib.tests.test_masked_matrix.x->numpy.arange(5, dtype='float')
A:numpy.matrixlib.tests.test_masked_matrix.X->numpy.matrix(x)
A:numpy.matrixlib.tests.test_masked_matrix.mX->masked_array(X, mask=m)
A:numpy.matrixlib.tests.test_masked_matrix.b->masked_array(iterator, dtype=[('a', float), ('b', float)]).compressed()
A:numpy.matrixlib.tests.test_masked_matrix.aravel->masked_array(iterator, dtype=[('a', float), ('b', float)]).ravel()
A:numpy.matrixlib.tests.test_masked_matrix.iterator->list(zip(np.arange(10), np.random.rand(10)))
A:numpy.matrixlib.tests.test_masked_matrix.data->numpy.array(iterator)
A:numpy.matrixlib.tests.test_masked_matrix.mx->MMatrix(x, mask=[0, 1, 0, 0, 0])
A:numpy.matrixlib.tests.test_masked_matrix.xmx->masked_array(mx.data.__array__(), mask=mx.mask)
A:numpy.matrixlib.tests.test_masked_matrix.expected->numpy.ma.array(np.r_['r', 1, 2, 3])
numpy.matrixlib.tests.test_masked_matrix.MMatrix(cls,data,mask=nomask)
numpy.matrixlib.tests.test_masked_matrix.MMatrix.__array_finalize__(self,obj)
numpy.matrixlib.tests.test_masked_matrix.MMatrix.__new__(cls,data,mask=nomask)
numpy.matrixlib.tests.test_masked_matrix.MMatrix._series(self)
numpy.matrixlib.tests.test_masked_matrix.TestConcatenator
numpy.matrixlib.tests.test_masked_matrix.TestConcatenator.test_matrix(self)
numpy.matrixlib.tests.test_masked_matrix.TestConcatenator.test_matrix_builder(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_allany_onmatrices(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_compressed(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_count_mean_with_matrix(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_flat(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_matrix_indexing(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_pickling_subbaseclass(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_ravel(self)
numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_view(self)
numpy.matrixlib.tests.test_masked_matrix.TestSubclassing
numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.setup(self)
numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_masked_binary_operations(self)
numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_masked_binary_operations2(self)
numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_masked_unary_operations(self)
numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_maskedarray_subclassing(self)
numpy.tests.test_masked_matrix.MMatrix(cls,data,mask=nomask)
numpy.tests.test_masked_matrix.MMatrix.__array_finalize__(self,obj)
numpy.tests.test_masked_matrix.MMatrix._series(self)
numpy.tests.test_masked_matrix.TestConcatenator
numpy.tests.test_masked_matrix.TestConcatenator.test_matrix(self)
numpy.tests.test_masked_matrix.TestConcatenator.test_matrix_builder(self)
numpy.tests.test_masked_matrix.TestMaskedMatrix
numpy.tests.test_masked_matrix.TestMaskedMatrix.test_allany_onmatrices(self)
numpy.tests.test_masked_matrix.TestMaskedMatrix.test_compressed(self)
numpy.tests.test_masked_matrix.TestMaskedMatrix.test_count_mean_with_matrix(self)
numpy.tests.test_masked_matrix.TestMaskedMatrix.test_flat(self)
numpy.tests.test_masked_matrix.TestMaskedMatrix.test_matrix_indexing(self)
numpy.tests.test_masked_matrix.TestMaskedMatrix.test_pickling_subbaseclass(self)
numpy.tests.test_masked_matrix.TestMaskedMatrix.test_ravel(self)
numpy.tests.test_masked_matrix.TestMaskedMatrix.test_view(self)
numpy.tests.test_masked_matrix.TestSubclassing
numpy.tests.test_masked_matrix.TestSubclassing.setup(self)
numpy.tests.test_masked_matrix.TestSubclassing.test_masked_binary_operations(self)
numpy.tests.test_masked_matrix.TestSubclassing.test_masked_binary_operations2(self)
numpy.tests.test_masked_matrix.TestSubclassing.test_masked_unary_operations(self)
numpy.tests.test_masked_matrix.TestSubclassing.test_maskedarray_subclassing(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/matrixlib/tests/test_regression.py----------------------------------------
A:numpy.matrixlib.tests.test_regression.x->numpy.asmatrix(np.random.uniform(0, 1, (3, 3)))
A:numpy.matrixlib.tests.test_regression.a->numpy.matrix([1.0], dtype=float)
A:numpy.matrixlib.tests.test_regression.(c, d)->numpy.matrix([0.0]).nonzero()
numpy.matrixlib.tests.test_regression.TestRegression
numpy.matrixlib.tests.test_regression.TestRegression.test_kron_matrix(self)
numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_multiply_by_1d_vector(self)
numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_properties(self)
numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_std_argmax(self)
numpy.tests.test_regression.TestRegression
numpy.tests.test_regression.TestRegression.test_kron_matrix(self)
numpy.tests.test_regression.TestRegression.test_matrix_multiply_by_1d_vector(self)
numpy.tests.test_regression.TestRegression.test_matrix_properties(self)
numpy.tests.test_regression.TestRegression.test_matrix_std_argmax(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/matrixlib/tests/test_matrix_linalg.py----------------------------------------
numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase(LinalgTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestCondMatrix(CondCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestDetMatrix(DetCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestEigMatrix(EigCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestEigvalsMatrix(EigvalsCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestInvMatrix(InvCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestLstsqMatrix(LstsqCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestNormDoubleMatrix(_TestNorm2DMatrix,_TestNormDoubleBase)
numpy.matrixlib.tests.test_matrix_linalg.TestNormInt64Matrix(_TestNorm2DMatrix,_TestNormInt64Base)
numpy.matrixlib.tests.test_matrix_linalg.TestNormSingleMatrix(_TestNorm2DMatrix,_TestNormSingleBase)
numpy.matrixlib.tests.test_matrix_linalg.TestPinvMatrix(PinvCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestQRMatrix(_TestQR)
numpy.matrixlib.tests.test_matrix_linalg.TestSVDMatrix(SVDCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg.TestSolveMatrix(SolveCases,MatrixTestCase)
numpy.matrixlib.tests.test_matrix_linalg._TestNorm2DMatrix(_TestNorm2D)
numpy.tests.test_matrix_linalg.MatrixTestCase(LinalgTestCase)
numpy.tests.test_matrix_linalg.TestCondMatrix(CondCases,MatrixTestCase)
numpy.tests.test_matrix_linalg.TestDetMatrix(DetCases,MatrixTestCase)
numpy.tests.test_matrix_linalg.TestEigMatrix(EigCases,MatrixTestCase)
numpy.tests.test_matrix_linalg.TestEigvalsMatrix(EigvalsCases,MatrixTestCase)
numpy.tests.test_matrix_linalg.TestInvMatrix(InvCases,MatrixTestCase)
numpy.tests.test_matrix_linalg.TestLstsqMatrix(LstsqCases,MatrixTestCase)
numpy.tests.test_matrix_linalg.TestNormDoubleMatrix(_TestNorm2DMatrix,_TestNormDoubleBase)
numpy.tests.test_matrix_linalg.TestNormInt64Matrix(_TestNorm2DMatrix,_TestNormInt64Base)
numpy.tests.test_matrix_linalg.TestNormSingleMatrix(_TestNorm2DMatrix,_TestNormSingleBase)
numpy.tests.test_matrix_linalg.TestPinvMatrix(PinvCases,MatrixTestCase)
numpy.tests.test_matrix_linalg.TestQRMatrix(_TestQR)
numpy.tests.test_matrix_linalg.TestSVDMatrix(SVDCases,MatrixTestCase)
numpy.tests.test_matrix_linalg.TestSolveMatrix(SolveCases,MatrixTestCase)
numpy.tests.test_matrix_linalg._TestNorm2DMatrix(_TestNorm2D)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/matrixlib/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/matrixlib/tests/test_numeric.py----------------------------------------
A:numpy.matrixlib.tests.test_numeric.b1->numpy.matrix([[1, 2], [3, 4]])
A:numpy.matrixlib.tests.test_numeric.diag_b1->numpy.matrix([[1, 4]])
A:numpy.matrixlib.tests.test_numeric.array_b1->numpy.array([1, 4])
numpy.matrixlib.tests.test_numeric.TestDot
numpy.matrixlib.tests.test_numeric.TestDot.test_matscalar(self)
numpy.matrixlib.tests.test_numeric.test_diagonal()
numpy.tests.test_numeric.TestDot
numpy.tests.test_numeric.TestDot.test_matscalar(self)
numpy.tests.test_numeric.test_diagonal()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/matrixlib/tests/test_multiarray.py----------------------------------------
A:numpy.matrixlib.tests.test_multiarray.x->numpy.array([(1, 2)], dtype=[('a', np.int8), ('b', np.int8)])
A:numpy.matrixlib.tests.test_multiarray.y->numpy.array([(1, 2)], dtype=[('a', np.int8), ('b', np.int8)]).view(dtype='<i2', type=np.matrix)
numpy.matrixlib.tests.test_multiarray.TestView
numpy.matrixlib.tests.test_multiarray.TestView.test_keywords(self)
numpy.matrixlib.tests.test_multiarray.TestView.test_type(self)
numpy.tests.test_multiarray.TestView
numpy.tests.test_multiarray.TestView.test_keywords(self)
numpy.tests.test_multiarray.TestView.test_type(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/fft/__init__.py----------------------------------------
A:numpy.fft.__init__.__all__->_pocketfft.__all__.copy()
A:numpy.fft.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/fft/__init__.pyi----------------------------------------
numpy.fft.__init__.fft(a,n=...,axis=...,norm=...)
numpy.fft.__init__.fft2(a,s=...,axes=...,norm=...)
numpy.fft.__init__.fftfreq(n,d=...)
numpy.fft.__init__.fftn(a,s=...,axes=...,norm=...)
numpy.fft.__init__.fftshift(x,axes=...)
numpy.fft.__init__.hfft(a,n=...,axis=...,norm=...)
numpy.fft.__init__.ifft(a,n=...,axis=...,norm=...)
numpy.fft.__init__.ifft2(a,s=...,axes=...,norm=...)
numpy.fft.__init__.ifftn(a,s=...,axes=...,norm=...)
numpy.fft.__init__.ifftshift(x,axes=...)
numpy.fft.__init__.ihfft(a,n=...,axis=...,norm=...)
numpy.fft.__init__.irfft(a,n=...,axis=...,norm=...)
numpy.fft.__init__.irfft2(a,s=...,axes=...,norm=...)
numpy.fft.__init__.irfftn(a,s=...,axes=...,norm=...)
numpy.fft.__init__.rfft(a,n=...,axis=...,norm=...)
numpy.fft.__init__.rfft2(a,s=...,axes=...,norm=...)
numpy.fft.__init__.rfftfreq(n,d=...)
numpy.fft.__init__.rfftn(a,s=...,axes=...,norm=...)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/fft/helper.py----------------------------------------
A:numpy.fft.helper.x->asarray(x)
A:numpy.fft.helper.axes->tuple(range(x.ndim))
A:numpy.fft.helper.results->arange(0, N, dtype=int)
A:numpy.fft.helper.p1->arange(0, N, dtype=int)
A:numpy.fft.helper.p2->arange(-(n // 2), 0, dtype=int)
numpy.fft._fftshift_dispatcher(x,axes=None)
numpy.fft.fftfreq(n,d=1.0)
numpy.fft.fftshift(x,axes=None)
numpy.fft.helper._fftshift_dispatcher(x,axes=None)
numpy.fft.helper.fftfreq(n,d=1.0)
numpy.fft.helper.fftshift(x,axes=None)
numpy.fft.helper.ifftshift(x,axes=None)
numpy.fft.helper.rfftfreq(n,d=1.0)
numpy.fft.ifftshift(x,axes=None)
numpy.fft.rfftfreq(n,d=1.0)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/fft/_pocketfft.py----------------------------------------
A:numpy.fft._pocketfft.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy.fft')
A:numpy.fft._pocketfft.axis->normalize_axis_index(axis, a.ndim)
A:numpy.fft._pocketfft.s->list(s)
A:numpy.fft._pocketfft.index[axis]->slice(0, s[axis])
A:numpy.fft._pocketfft.z->zeros(s, a.dtype.char)
A:numpy.fft._pocketfft.r->swapaxes(r, axis, -1)
A:numpy.fft._pocketfft.a->irfft(a, s[-1], axes[-1], norm)
A:numpy.fft._pocketfft.inv_norm->_get_backward_norm(n, norm)
A:numpy.fft._pocketfft.output->conjugate(rfft(a, n, axis, norm=new_norm))
A:numpy.fft._pocketfft.new_norm->_swap_direction(norm)
A:numpy.fft._pocketfft.axes->list(range(-len(s), 0))
A:numpy.fft._pocketfft.(s, axes)->_cook_nd_args(a, s, axes, invreal=1)
A:numpy.fft._pocketfft.itl->list(range(len(axes)))
numpy.fft._cook_nd_args(a,s=None,axes=None,invreal=0)
numpy.fft._fft_dispatcher(a,n=None,axis=None,norm=None)
numpy.fft._fftn_dispatcher(a,s=None,axes=None,norm=None)
numpy.fft._get_backward_norm(n,norm)
numpy.fft._get_forward_norm(n,norm)
numpy.fft._pocketfft._cook_nd_args(a,s=None,axes=None,invreal=0)
numpy.fft._pocketfft._fft_dispatcher(a,n=None,axis=None,norm=None)
numpy.fft._pocketfft._fftn_dispatcher(a,s=None,axes=None,norm=None)
numpy.fft._pocketfft._get_backward_norm(n,norm)
numpy.fft._pocketfft._get_forward_norm(n,norm)
numpy.fft._pocketfft._raw_fft(a,n,axis,is_real,is_forward,inv_norm)
numpy.fft._pocketfft._raw_fftnd(a,s=None,axes=None,function=fft,norm=None)
numpy.fft._pocketfft._swap_direction(norm)
numpy.fft._pocketfft.fft(a,n=None,axis=-1,norm=None)
numpy.fft._pocketfft.fft2(a,s=None,axes=(-2,-1),norm=None)
numpy.fft._pocketfft.fftn(a,s=None,axes=None,norm=None)
numpy.fft._pocketfft.hfft(a,n=None,axis=-1,norm=None)
numpy.fft._pocketfft.ifft(a,n=None,axis=-1,norm=None)
numpy.fft._pocketfft.ifft2(a,s=None,axes=(-2,-1),norm=None)
numpy.fft._pocketfft.ifftn(a,s=None,axes=None,norm=None)
numpy.fft._pocketfft.ihfft(a,n=None,axis=-1,norm=None)
numpy.fft._pocketfft.irfft(a,n=None,axis=-1,norm=None)
numpy.fft._pocketfft.irfft2(a,s=None,axes=(-2,-1),norm=None)
numpy.fft._pocketfft.irfftn(a,s=None,axes=None,norm=None)
numpy.fft._pocketfft.rfft(a,n=None,axis=-1,norm=None)
numpy.fft._pocketfft.rfft2(a,s=None,axes=(-2,-1),norm=None)
numpy.fft._pocketfft.rfftn(a,s=None,axes=None,norm=None)
numpy.fft._raw_fft(a,n,axis,is_real,is_forward,inv_norm)
numpy.fft._raw_fftnd(a,s=None,axes=None,function=fft,norm=None)
numpy.fft._swap_direction(norm)
numpy.fft.fft(a,n=None,axis=-1,norm=None)
numpy.fft.fft2(a,s=None,axes=(-2,-1),norm=None)
numpy.fft.fftn(a,s=None,axes=None,norm=None)
numpy.fft.hfft(a,n=None,axis=-1,norm=None)
numpy.fft.ifft(a,n=None,axis=-1,norm=None)
numpy.fft.ifft2(a,s=None,axes=(-2,-1),norm=None)
numpy.fft.ifftn(a,s=None,axes=None,norm=None)
numpy.fft.ihfft(a,n=None,axis=-1,norm=None)
numpy.fft.irfft(a,n=None,axis=-1,norm=None)
numpy.fft.irfft2(a,s=None,axes=(-2,-1),norm=None)
numpy.fft.irfftn(a,s=None,axes=None,norm=None)
numpy.fft.rfft(a,n=None,axis=-1,norm=None)
numpy.fft.rfft2(a,s=None,axes=(-2,-1),norm=None)
numpy.fft.rfftn(a,s=None,axes=None,norm=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/fft/setup.py----------------------------------------
A:numpy.fft.setup.config->Configuration('fft', parent_package, top_path)
numpy.fft.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/fft/tests/test_pocketfft.py----------------------------------------
A:numpy.fft.tests.test_pocketfft.L->len(x)
A:numpy.fft.tests.test_pocketfft.xr->random(maxlen)
A:numpy.fft.tests.test_pocketfft.x->random(30).astype(dtype)
A:numpy.fft.tests.test_pocketfft.x_herm->numpy.concatenate((random(1), x, random(1)))
A:numpy.fft.tests.test_pocketfft.op_tr->op(np.transpose(x, a))
A:numpy.fft.tests.test_pocketfft.tr_op->numpy.transpose(op(x, axes=a), a)
A:numpy.fft.tests.test_pocketfft.x_norm->numpy.linalg.norm(x)
A:numpy.fft.tests.test_pocketfft.tmp->back(tmp, n=n, norm=norm)
A:numpy.fft.tests.test_pocketfft.rng->numpy.random.RandomState(42)
A:numpy.fft.tests.test_pocketfft.X->numpy.ascontiguousarray(X[::-1])
A:numpy.fft.tests.test_pocketfft.Y->numpy.asfortranarray(X)
A:numpy.fft.tests.test_pocketfft.X_res->fft(X, axes=ax)
A:numpy.fft.tests.test_pocketfft.Y_res->fft(Y, axes=ax)
A:numpy.fft.tests.test_pocketfft.q->queue.Queue()
A:numpy.fft.tests.test_pocketfft.expected->func(*args)
A:numpy.fft.tests.test_pocketfft.a->numpy.ones(self.input_shape)
numpy.fft.tests.testTestFFT1D
numpy.fft.tests.testTestFFT1D.test_all_1d_norm_preserving(self)
numpy.fft.tests.testTestFFT1D.test_axes(self,op)
numpy.fft.tests.testTestFFT1D.test_dtypes(self,dtype)
numpy.fft.tests.testTestFFT1D.test_fft(self)
numpy.fft.tests.testTestFFT1D.test_fft2(self)
numpy.fft.tests.testTestFFT1D.test_fftn(self)
numpy.fft.tests.testTestFFT1D.test_hfft(self)
numpy.fft.tests.testTestFFT1D.test_identity(self)
numpy.fft.tests.testTestFFT1D.test_ifft(self,norm)
numpy.fft.tests.testTestFFT1D.test_ifft2(self)
numpy.fft.tests.testTestFFT1D.test_ifftn(self)
numpy.fft.tests.testTestFFT1D.test_ihfft(self)
numpy.fft.tests.testTestFFT1D.test_irfft(self)
numpy.fft.tests.testTestFFT1D.test_irfft2(self)
numpy.fft.tests.testTestFFT1D.test_irfftn(self)
numpy.fft.tests.testTestFFT1D.test_rfft(self)
numpy.fft.tests.testTestFFT1D.test_rfft2(self)
numpy.fft.tests.testTestFFT1D.test_rfftn(self)
numpy.fft.tests.testTestFFTShift
numpy.fft.tests.testTestFFTShift.test_fft_n(self)
numpy.fft.tests.testTestFFTThreadSafe
numpy.fft.tests.testTestFFTThreadSafe._test_mtsame(self,func,*args)
numpy.fft.tests.testTestFFTThreadSafe.test_fft(self)
numpy.fft.tests.testTestFFTThreadSafe.test_ifft(self)
numpy.fft.tests.testTestFFTThreadSafe.test_irfft(self)
numpy.fft.tests.testTestFFTThreadSafe.test_rfft(self)
numpy.fft.tests.test_pocketfft.TestFFT1D
numpy.fft.tests.test_pocketfft.TestFFT1D.test_all_1d_norm_preserving(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_axes(self,op)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_dtypes(self,dtype)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_fft(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_fft2(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_fftn(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_hfft(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_identity(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_ifft(self,norm)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_ifft2(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_ifftn(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_ihfft(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_irfft(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_irfft2(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_irfftn(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_rfft(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_rfft2(self)
numpy.fft.tests.test_pocketfft.TestFFT1D.test_rfftn(self)
numpy.fft.tests.test_pocketfft.TestFFTShift
numpy.fft.tests.test_pocketfft.TestFFTShift.test_fft_n(self)
numpy.fft.tests.test_pocketfft.TestFFTThreadSafe
numpy.fft.tests.test_pocketfft.TestFFTThreadSafe._test_mtsame(self,func,*args)
numpy.fft.tests.test_pocketfft.TestFFTThreadSafe.test_fft(self)
numpy.fft.tests.test_pocketfft.TestFFTThreadSafe.test_ifft(self)
numpy.fft.tests.test_pocketfft.TestFFTThreadSafe.test_irfft(self)
numpy.fft.tests.test_pocketfft.TestFFTThreadSafe.test_rfft(self)
numpy.fft.tests.test_pocketfft.fft1(x)
numpy.fft.tests.test_pocketfft.test_fft_with_order(dtype,order,fft)
numpy.fft.tests.testfft1(x)
numpy.fft.tests.testtest_fft_with_order(dtype,order,fft)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/fft/tests/test_helper.py----------------------------------------
A:numpy.fft.tests.test_helper.x->numpy.random.random((n,))
A:numpy.fft.tests.test_helper.tmp->asarray(x)
A:numpy.fft.tests.test_helper.axes->list(range(ndim))
A:numpy.fft.tests.test_helper.mylist->concatenate((arange(p2, n), arange(p2)))
A:numpy.fft.tests.test_helper.y->take(y, mylist, k)
A:numpy.fft.tests.test_helper.inp->numpy.random.rand(i, j)
A:numpy.fft.tests.test_helper.(ar, ai)->numpy.random.random((2, 16, 8, 32))
numpy.fft.tests.test_TestFFTFreq
numpy.fft.tests.test_TestFFTFreq.test_definition(self)
numpy.fft.tests.test_TestFFTShift
numpy.fft.tests.test_TestFFTShift.test_axes_keyword(self)
numpy.fft.tests.test_TestFFTShift.test_definition(self)
numpy.fft.tests.test_TestFFTShift.test_equal_to_original(self)
numpy.fft.tests.test_TestFFTShift.test_inverse(self)
numpy.fft.tests.test_TestFFTShift.test_uneven_dims(self)
numpy.fft.tests.test_TestIRFFTN
numpy.fft.tests.test_TestIRFFTN.test_not_last_axis_success(self)
numpy.fft.tests.test_TestRFFTFreq
numpy.fft.tests.test_TestRFFTFreq.test_definition(self)
numpy.fft.tests.test_helper.TestFFTFreq
numpy.fft.tests.test_helper.TestFFTFreq.test_definition(self)
numpy.fft.tests.test_helper.TestFFTShift
numpy.fft.tests.test_helper.TestFFTShift.test_axes_keyword(self)
numpy.fft.tests.test_helper.TestFFTShift.test_definition(self)
numpy.fft.tests.test_helper.TestFFTShift.test_equal_to_original(self)
numpy.fft.tests.test_helper.TestFFTShift.test_inverse(self)
numpy.fft.tests.test_helper.TestFFTShift.test_uneven_dims(self)
numpy.fft.tests.test_helper.TestIRFFTN
numpy.fft.tests.test_helper.TestIRFFTN.test_not_last_axis_success(self)
numpy.fft.tests.test_helper.TestRFFTFreq
numpy.fft.tests.test_helper.TestRFFTFreq.test_definition(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/fft/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/numerictypes.py----------------------------------------
A:numpy.core.numerictypes.g->obj2sctype(t)
A:numpy.core.numerictypes.base->_kind_name(dtype(t))
A:numpy.core.numerictypes.res->dtype(rep)
A:numpy.core.numerictypes.nbytes->_typedict()
A:numpy.core.numerictypes._alignment->_typedict()
A:numpy.core.numerictypes._maxvals->_typedict()
A:numpy.core.numerictypes._minvals->_typedict()
A:numpy.core.numerictypes.sctype->obj2sctype(sctype)
A:numpy.core.numerictypes.cast->_typedict()
A:numpy.core.numerictypes.dt->dtype(typ)
A:numpy.core.numerictypes.ScalarType->tuple(ScalarType)
A:numpy.core.numerictypes.__len_test_types->len(__test_types)
A:numpy.core.numerictypes.thisind->__test_types.index(a.char)
A:numpy.core.numerictypes.N->len(dtypelist)
A:numpy.core.numerictypes.newdtype->dtype(__test_types[thisind])
A:numpy.core.numerictypes.numcoerce->len([x for x in dtypelist if newdtype >= x])
A:numpy.core.numerictypes.maxa->_can_coerce_all(array_types)
A:numpy.core.numerictypes.maxsc->_can_coerce_all(scalar_types)
A:numpy.core.numerictypes.index_a->_kind_list.index(maxa.kind)
A:numpy.core.numerictypes.index_sc->_kind_list.index(maxsc.kind)
numpy.core.numerictypes._can_coerce_all(dtypelist,start=0)
numpy.core.numerictypes._construct_lookups()
numpy.core.numerictypes._find_common_coerce(a,b)
numpy.core.numerictypes._register_types()
numpy.core.numerictypes._scalar_type_key(typ)
numpy.core.numerictypes._typedict(dict)
numpy.core.numerictypes._typedict.__getitem__(self,obj)
numpy.core.numerictypes.find_common_type(array_types,scalar_types)
numpy.core.numerictypes.issctype(rep)
numpy.core.numerictypes.issubclass_(arg1,arg2)
numpy.core.numerictypes.issubdtype(arg1,arg2)
numpy.core.numerictypes.issubsctype(arg1,arg2)
numpy.core.numerictypes.maximum_sctype(t)
numpy.core.numerictypes.obj2sctype(rep,default=None)
numpy.core.numerictypes.sctype2char(sctype)
numpy.numerictypes._can_coerce_all(dtypelist,start=0)
numpy.numerictypes._construct_lookups()
numpy.numerictypes._find_common_coerce(a,b)
numpy.numerictypes._register_types()
numpy.numerictypes._scalar_type_key(typ)
numpy.numerictypes._typedict(dict)
numpy.numerictypes._typedict.__getitem__(self,obj)
numpy.numerictypes.find_common_type(array_types,scalar_types)
numpy.numerictypes.issctype(rep)
numpy.numerictypes.issubclass_(arg1,arg2)
numpy.numerictypes.issubdtype(arg1,arg2)
numpy.numerictypes.issubsctype(arg1,arg2)
numpy.numerictypes.maximum_sctype(t)
numpy.numerictypes.obj2sctype(rep,default=None)
numpy.numerictypes.sctype2char(sctype)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/numerictypes.pyi----------------------------------------
numpy.core.numerictypes._CastFunc(self,x:ArrayLike,k:DTypeLike=...)
numpy.core.numerictypes._CastFunc.__call__(self,x:ArrayLike,k:DTypeLike=...)
numpy.core.numerictypes._TypeCodes(TypedDict)
numpy.numerictypes._CastFunc(self,x:ArrayLike,k:DTypeLike=...)
numpy.numerictypes._TypeCodes(TypedDict)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/_asarray.py----------------------------------------
A:numpy.core._asarray.arr->arr.copy(order).copy(order)
A:numpy.core._asarray._require_with_like->array_function_dispatch(_require_dispatcher)(require)
numpy._asarray._require_dispatcher(a,dtype=None,requirements=None,*,like=None)
numpy._asarray.require(a,dtype=None,requirements=None,*,like=None)
numpy.core._asarray._require_dispatcher(a,dtype=None,requirements=None,*,like=None)
numpy.core._asarray.require(a,dtype=None,requirements=None,*,like=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/_asarray.pyi----------------------------------------
numpy._asarray.asanyarray(a:_ArrayType,dtype:None=...,order:_OrderKACF=...,*,like:ArrayLike=...)->_ArrayType
numpy._asarray.asanyarray(a:object,dtype:DTypeLike=...,order:_OrderKACF=...,*,like:ArrayLike=...)->ndarray
numpy._asarray.asarray(a:object,dtype:DTypeLike=...,order:_OrderKACF=...,*,like:ArrayLike=...)->ndarray
numpy._asarray.ascontiguousarray(a:object,dtype:DTypeLike=...,*,like:ArrayLike=...)->ndarray
numpy._asarray.asfortranarray(a:object,dtype:DTypeLike=...,*,like:ArrayLike=...)->ndarray
numpy.core._asarray.asanyarray(a:_ArrayType,dtype:None=...,order:_OrderKACF=...,*,like:ArrayLike=...)->_ArrayType
numpy.core._asarray.asanyarray(a:object,dtype:DTypeLike=...,order:_OrderKACF=...,*,like:ArrayLike=...)->ndarray
numpy.core._asarray.asarray(a:object,dtype:DTypeLike=...,order:_OrderKACF=...,*,like:ArrayLike=...)->ndarray
numpy.core._asarray.ascontiguousarray(a:object,dtype:DTypeLike=...,*,like:ArrayLike=...)->ndarray
numpy.core._asarray.asfortranarray(a:object,dtype:DTypeLike=...,*,like:ArrayLike=...)->ndarray


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/defchararray.py----------------------------------------
A:numpy.core.defchararray.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy.char')
A:numpy.core.defchararray.arr1->numpy.asarray(x1)
A:numpy.core.defchararray.arr2->numpy.asarray(x2)
A:numpy.core.defchararray.dtype->_use_unicode(arr1, arr2)
A:numpy.core.defchararray.a_arr->numpy.asarray(a)
A:numpy.core.defchararray.i_arr->numpy.asarray(i)
A:numpy.core.defchararray.width_arr->numpy.asarray(width)
A:numpy.core.defchararray.size->int(numpy.max(width_arr.flat))
A:numpy.core.defchararray.fillchar->asbytes(fillchar)
A:numpy.core.defchararray.itemsize->len(obj)
A:numpy.core.defchararray.self->numeric.ndarray.__new__(subtype, shape, (dtype, itemsize), buffer=buffer, offset=offset, strides=strides, order=order)
A:numpy.core.defchararray.val->narray(obj, dtype=(dtype, itemsize), order=order, subok=True)
A:numpy.core.defchararray.temp->narray(obj, dtype=(dtype, itemsize), order=order, subok=True).rstrip()
A:numpy.core.defchararray.obj->obj.tolist().tolist()
numpy.chararray(subtype,shape,itemsize=1,unicode=False,buffer=None,offset=0,strides=None,order='C')
numpy.chararray.__add__(self,other)
numpy.chararray.__array_finalize__(self,obj)
numpy.chararray.__eq__(self,other)
numpy.chararray.__ge__(self,other)
numpy.chararray.__getitem__(self,obj)
numpy.chararray.__gt__(self,other)
numpy.chararray.__le__(self,other)
numpy.chararray.__lt__(self,other)
numpy.chararray.__mod__(self,i)
numpy.chararray.__mul__(self,i)
numpy.chararray.__ne__(self,other)
numpy.chararray.__radd__(self,other)
numpy.chararray.__rmod__(self,other)
numpy.chararray.__rmul__(self,i)
numpy.chararray.argsort(self,axis=-1,kind=None,order=None)
numpy.chararray.capitalize(self)
numpy.chararray.center(self,width,fillchar='')
numpy.chararray.count(self,sub,start=0,end=None)
numpy.chararray.decode(self,encoding=None,errors=None)
numpy.chararray.encode(self,encoding=None,errors=None)
numpy.chararray.endswith(self,suffix,start=0,end=None)
numpy.chararray.expandtabs(self,tabsize=8)
numpy.chararray.find(self,sub,start=0,end=None)
numpy.chararray.index(self,sub,start=0,end=None)
numpy.chararray.isalnum(self)
numpy.chararray.isalpha(self)
numpy.chararray.isdecimal(self)
numpy.chararray.isdigit(self)
numpy.chararray.islower(self)
numpy.chararray.isnumeric(self)
numpy.chararray.isspace(self)
numpy.chararray.istitle(self)
numpy.chararray.isupper(self)
numpy.chararray.join(self,seq)
numpy.chararray.ljust(self,width,fillchar='')
numpy.chararray.lower(self)
numpy.chararray.lstrip(self,chars=None)
numpy.chararray.partition(self,sep)
numpy.chararray.replace(self,old,new,count=None)
numpy.chararray.rfind(self,sub,start=0,end=None)
numpy.chararray.rindex(self,sub,start=0,end=None)
numpy.chararray.rjust(self,width,fillchar='')
numpy.chararray.rpartition(self,sep)
numpy.chararray.rsplit(self,sep=None,maxsplit=None)
numpy.chararray.rstrip(self,chars=None)
numpy.chararray.split(self,sep=None,maxsplit=None)
numpy.chararray.splitlines(self,keepends=None)
numpy.chararray.startswith(self,prefix,start=0,end=None)
numpy.chararray.strip(self,chars=None)
numpy.chararray.swapcase(self)
numpy.chararray.title(self)
numpy.chararray.translate(self,table,deletechars=None)
numpy.chararray.upper(self)
numpy.chararray.zfill(self,width)
numpy.core.defchararray._binary_op_dispatcher(x1,x2)
numpy.core.defchararray._center_dispatcher(a,width,fillchar=None)
numpy.core.defchararray._clean_args(*args)
numpy.core.defchararray._code_dispatcher(a,encoding=None,errors=None)
numpy.core.defchararray._count_dispatcher(a,sub,start=None,end=None)
numpy.core.defchararray._endswith_dispatcher(a,suffix,start=None,end=None)
numpy.core.defchararray._expandtabs_dispatcher(a,tabsize=None)
numpy.core.defchararray._get_num_chars(a)
numpy.core.defchararray._join_dispatcher(sep,seq)
numpy.core.defchararray._just_dispatcher(a,width,fillchar=None)
numpy.core.defchararray._mod_dispatcher(a,values)
numpy.core.defchararray._multiply_dispatcher(a,i)
numpy.core.defchararray._partition_dispatcher(a,sep)
numpy.core.defchararray._replace_dispatcher(a,old,new,count=None)
numpy.core.defchararray._split_dispatcher(a,sep=None,maxsplit=None)
numpy.core.defchararray._splitlines_dispatcher(a,keepends=None)
numpy.core.defchararray._startswith_dispatcher(a,prefix,start=None,end=None)
numpy.core.defchararray._strip_dispatcher(a,chars=None)
numpy.core.defchararray._strip_dispatcher(a,chars=None)
numpy.core.defchararray._to_string_or_unicode_array(result)
numpy.core.defchararray._translate_dispatcher(a,table,deletechars=None)
numpy.core.defchararray._unary_op_dispatcher(a)
numpy.core.defchararray._use_unicode(*args)
numpy.core.defchararray._zfill_dispatcher(a,width)
numpy.core.defchararray.add(x1,x2)
numpy.core.defchararray.array(obj,itemsize=None,copy=True,unicode=None,order=None)
numpy.core.defchararray.asarray(obj,itemsize=None,unicode=None,order=None)
numpy.core.defchararray.capitalize(a)
numpy.core.defchararray.center(a,width,fillchar='')
numpy.core.defchararray.chararray(subtype,shape,itemsize=1,unicode=False,buffer=None,offset=0,strides=None,order='C')
numpy.core.defchararray.chararray.__add__(self,other)
numpy.core.defchararray.chararray.__array_finalize__(self,obj)
numpy.core.defchararray.chararray.__eq__(self,other)
numpy.core.defchararray.chararray.__ge__(self,other)
numpy.core.defchararray.chararray.__getitem__(self,obj)
numpy.core.defchararray.chararray.__gt__(self,other)
numpy.core.defchararray.chararray.__le__(self,other)
numpy.core.defchararray.chararray.__lt__(self,other)
numpy.core.defchararray.chararray.__mod__(self,i)
numpy.core.defchararray.chararray.__mul__(self,i)
numpy.core.defchararray.chararray.__ne__(self,other)
numpy.core.defchararray.chararray.__new__(subtype,shape,itemsize=1,unicode=False,buffer=None,offset=0,strides=None,order='C')
numpy.core.defchararray.chararray.__radd__(self,other)
numpy.core.defchararray.chararray.__rmod__(self,other)
numpy.core.defchararray.chararray.__rmul__(self,i)
numpy.core.defchararray.chararray.argsort(self,axis=-1,kind=None,order=None)
numpy.core.defchararray.chararray.capitalize(self)
numpy.core.defchararray.chararray.center(self,width,fillchar='')
numpy.core.defchararray.chararray.count(self,sub,start=0,end=None)
numpy.core.defchararray.chararray.decode(self,encoding=None,errors=None)
numpy.core.defchararray.chararray.encode(self,encoding=None,errors=None)
numpy.core.defchararray.chararray.endswith(self,suffix,start=0,end=None)
numpy.core.defchararray.chararray.expandtabs(self,tabsize=8)
numpy.core.defchararray.chararray.find(self,sub,start=0,end=None)
numpy.core.defchararray.chararray.index(self,sub,start=0,end=None)
numpy.core.defchararray.chararray.isalnum(self)
numpy.core.defchararray.chararray.isalpha(self)
numpy.core.defchararray.chararray.isdecimal(self)
numpy.core.defchararray.chararray.isdigit(self)
numpy.core.defchararray.chararray.islower(self)
numpy.core.defchararray.chararray.isnumeric(self)
numpy.core.defchararray.chararray.isspace(self)
numpy.core.defchararray.chararray.istitle(self)
numpy.core.defchararray.chararray.isupper(self)
numpy.core.defchararray.chararray.join(self,seq)
numpy.core.defchararray.chararray.ljust(self,width,fillchar='')
numpy.core.defchararray.chararray.lower(self)
numpy.core.defchararray.chararray.lstrip(self,chars=None)
numpy.core.defchararray.chararray.partition(self,sep)
numpy.core.defchararray.chararray.replace(self,old,new,count=None)
numpy.core.defchararray.chararray.rfind(self,sub,start=0,end=None)
numpy.core.defchararray.chararray.rindex(self,sub,start=0,end=None)
numpy.core.defchararray.chararray.rjust(self,width,fillchar='')
numpy.core.defchararray.chararray.rpartition(self,sep)
numpy.core.defchararray.chararray.rsplit(self,sep=None,maxsplit=None)
numpy.core.defchararray.chararray.rstrip(self,chars=None)
numpy.core.defchararray.chararray.split(self,sep=None,maxsplit=None)
numpy.core.defchararray.chararray.splitlines(self,keepends=None)
numpy.core.defchararray.chararray.startswith(self,prefix,start=0,end=None)
numpy.core.defchararray.chararray.strip(self,chars=None)
numpy.core.defchararray.chararray.swapcase(self)
numpy.core.defchararray.chararray.title(self)
numpy.core.defchararray.chararray.translate(self,table,deletechars=None)
numpy.core.defchararray.chararray.upper(self)
numpy.core.defchararray.chararray.zfill(self,width)
numpy.core.defchararray.count(a,sub,start=0,end=None)
numpy.core.defchararray.decode(a,encoding=None,errors=None)
numpy.core.defchararray.encode(a,encoding=None,errors=None)
numpy.core.defchararray.endswith(a,suffix,start=0,end=None)
numpy.core.defchararray.equal(x1,x2)
numpy.core.defchararray.expandtabs(a,tabsize=8)
numpy.core.defchararray.find(a,sub,start=0,end=None)
numpy.core.defchararray.greater(x1,x2)
numpy.core.defchararray.greater_equal(x1,x2)
numpy.core.defchararray.index(a,sub,start=0,end=None)
numpy.core.defchararray.isalnum(a)
numpy.core.defchararray.isalpha(a)
numpy.core.defchararray.isdecimal(a)
numpy.core.defchararray.isdigit(a)
numpy.core.defchararray.islower(a)
numpy.core.defchararray.isnumeric(a)
numpy.core.defchararray.isspace(a)
numpy.core.defchararray.istitle(a)
numpy.core.defchararray.isupper(a)
numpy.core.defchararray.join(sep,seq)
numpy.core.defchararray.less(x1,x2)
numpy.core.defchararray.less_equal(x1,x2)
numpy.core.defchararray.ljust(a,width,fillchar='')
numpy.core.defchararray.lower(a)
numpy.core.defchararray.lstrip(a,chars=None)
numpy.core.defchararray.mod(a,values)
numpy.core.defchararray.multiply(a,i)
numpy.core.defchararray.not_equal(x1,x2)
numpy.core.defchararray.partition(a,sep)
numpy.core.defchararray.replace(a,old,new,count=None)
numpy.core.defchararray.rfind(a,sub,start=0,end=None)
numpy.core.defchararray.rindex(a,sub,start=0,end=None)
numpy.core.defchararray.rjust(a,width,fillchar='')
numpy.core.defchararray.rpartition(a,sep)
numpy.core.defchararray.rsplit(a,sep=None,maxsplit=None)
numpy.core.defchararray.rstrip(a,chars=None)
numpy.core.defchararray.split(a,sep=None,maxsplit=None)
numpy.core.defchararray.splitlines(a,keepends=None)
numpy.core.defchararray.startswith(a,prefix,start=0,end=None)
numpy.core.defchararray.str_len(a)
numpy.core.defchararray.strip(a,chars=None)
numpy.core.defchararray.swapcase(a)
numpy.core.defchararray.title(a)
numpy.core.defchararray.translate(a,table,deletechars=None)
numpy.core.defchararray.upper(a)
numpy.core.defchararray.zfill(a,width)
numpy.defchararray._binary_op_dispatcher(x1,x2)
numpy.defchararray._center_dispatcher(a,width,fillchar=None)
numpy.defchararray._clean_args(*args)
numpy.defchararray._code_dispatcher(a,encoding=None,errors=None)
numpy.defchararray._count_dispatcher(a,sub,start=None,end=None)
numpy.defchararray._endswith_dispatcher(a,suffix,start=None,end=None)
numpy.defchararray._expandtabs_dispatcher(a,tabsize=None)
numpy.defchararray._get_num_chars(a)
numpy.defchararray._join_dispatcher(sep,seq)
numpy.defchararray._just_dispatcher(a,width,fillchar=None)
numpy.defchararray._mod_dispatcher(a,values)
numpy.defchararray._multiply_dispatcher(a,i)
numpy.defchararray._partition_dispatcher(a,sep)
numpy.defchararray._replace_dispatcher(a,old,new,count=None)
numpy.defchararray._split_dispatcher(a,sep=None,maxsplit=None)
numpy.defchararray._splitlines_dispatcher(a,keepends=None)
numpy.defchararray._startswith_dispatcher(a,prefix,start=None,end=None)
numpy.defchararray._strip_dispatcher(a,chars=None)
numpy.defchararray._strip_dispatcher(a,chars=None)
numpy.defchararray._to_string_or_unicode_array(result)
numpy.defchararray._translate_dispatcher(a,table,deletechars=None)
numpy.defchararray._unary_op_dispatcher(a)
numpy.defchararray._use_unicode(*args)
numpy.defchararray._zfill_dispatcher(a,width)
numpy.defchararray.add(x1,x2)
numpy.defchararray.array(obj,itemsize=None,copy=True,unicode=None,order=None)
numpy.defchararray.asarray(obj,itemsize=None,unicode=None,order=None)
numpy.defchararray.capitalize(a)
numpy.defchararray.center(a,width,fillchar='')
numpy.defchararray.count(a,sub,start=0,end=None)
numpy.defchararray.decode(a,encoding=None,errors=None)
numpy.defchararray.encode(a,encoding=None,errors=None)
numpy.defchararray.endswith(a,suffix,start=0,end=None)
numpy.defchararray.equal(x1,x2)
numpy.defchararray.expandtabs(a,tabsize=8)
numpy.defchararray.find(a,sub,start=0,end=None)
numpy.defchararray.greater(x1,x2)
numpy.defchararray.greater_equal(x1,x2)
numpy.defchararray.index(a,sub,start=0,end=None)
numpy.defchararray.isalnum(a)
numpy.defchararray.isalpha(a)
numpy.defchararray.isdecimal(a)
numpy.defchararray.isdigit(a)
numpy.defchararray.islower(a)
numpy.defchararray.isnumeric(a)
numpy.defchararray.isspace(a)
numpy.defchararray.istitle(a)
numpy.defchararray.isupper(a)
numpy.defchararray.join(sep,seq)
numpy.defchararray.less(x1,x2)
numpy.defchararray.less_equal(x1,x2)
numpy.defchararray.ljust(a,width,fillchar='')
numpy.defchararray.lower(a)
numpy.defchararray.lstrip(a,chars=None)
numpy.defchararray.mod(a,values)
numpy.defchararray.multiply(a,i)
numpy.defchararray.not_equal(x1,x2)
numpy.defchararray.partition(a,sep)
numpy.defchararray.replace(a,old,new,count=None)
numpy.defchararray.rfind(a,sub,start=0,end=None)
numpy.defchararray.rindex(a,sub,start=0,end=None)
numpy.defchararray.rjust(a,width,fillchar='')
numpy.defchararray.rpartition(a,sep)
numpy.defchararray.rsplit(a,sep=None,maxsplit=None)
numpy.defchararray.rstrip(a,chars=None)
numpy.defchararray.split(a,sep=None,maxsplit=None)
numpy.defchararray.splitlines(a,keepends=None)
numpy.defchararray.startswith(a,prefix,start=0,end=None)
numpy.defchararray.str_len(a)
numpy.defchararray.strip(a,chars=None)
numpy.defchararray.swapcase(a)
numpy.defchararray.title(a)
numpy.defchararray.translate(a,table,deletechars=None)
numpy.defchararray.upper(a)
numpy.defchararray.zfill(a,width)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/_add_newdocs.py----------------------------------------
numpy._add_newdocs.refer_to_array_attribute(attr,method=True)
numpy.core._add_newdocs.refer_to_array_attribute(attr,method=True)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/machar.py----------------------------------------
A:numpy.core.machar.one->float_conv(1)
A:numpy.core.machar.itemp->int_conv(temp - a)
A:numpy.core.machar.beta->float_conv(ibeta)
A:numpy.core.machar.self.epsneg->float_to_float(epsneg)
A:numpy.core.machar.self._str_epsneg->float_to_str(epsneg)
A:numpy.core.machar.self.eps->float_to_float(eps)
A:numpy.core.machar.self._str_eps->float_to_str(eps)
A:numpy.core.machar.self.xmin->float_to_float(xmin)
A:numpy.core.machar.self._str_xmin->float_to_str(xmin)
A:numpy.core.machar.self.xmax->float_to_float(xmax)
A:numpy.core.machar.self._str_xmax->float_to_str(xmax)
A:numpy.core.machar.self.precision->int(-math.log10(float_to_float(self.eps)))
A:numpy.core.machar.self.resolution->float_to_float(resolution)
A:numpy.core.machar.self._str_resolution->float_to_str(resolution)
numpy.MachAr(self,float_conv=float,int_conv=int,float_to_float=float,float_to_str=lambdav:'%24.16e'%v,title='Pythonfloatingpointnumber')
numpy.MachAr.__str__(self)
numpy.MachAr._do_init(self,float_conv,int_conv,float_to_float,float_to_str,title)
numpy.core.machar.MachAr(self,float_conv=float,int_conv=int,float_to_float=float,float_to_str=lambdav:'%24.16e'%v,title='Pythonfloatingpointnumber')
numpy.core.machar.MachAr.__init__(self,float_conv=float,int_conv=int,float_to_float=float,float_to_str=lambdav:'%24.16e'%v,title='Pythonfloatingpointnumber')
numpy.core.machar.MachAr.__str__(self)
numpy.core.machar.MachAr._do_init(self,float_conv,int_conv,float_to_float,float_to_str,title)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/_string_helpers.py----------------------------------------
A:numpy.core._string_helpers.LOWER_TABLE->''.join(_all_chars[:65] + _ascii_lower + _all_chars[65 + 26:])
A:numpy.core._string_helpers.UPPER_TABLE->''.join(_all_chars[:97] + _ascii_upper + _all_chars[97 + 26:])
A:numpy.core._string_helpers.lowered->s.translate(LOWER_TABLE)
A:numpy.core._string_helpers.uppered->s.translate(UPPER_TABLE)
numpy._string_helpers.english_capitalize(s)
numpy._string_helpers.english_lower(s)
numpy._string_helpers.english_upper(s)
numpy.core._string_helpers.english_capitalize(s)
numpy.core._string_helpers.english_lower(s)
numpy.core._string_helpers.english_upper(s)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/_dtype.py----------------------------------------
A:numpy.core._dtype.arg_str->_construction_repr(dtype, include_align=False)
A:numpy.core._dtype.byteorder->_byte_order_str(dtype)
A:numpy.core._dtype.swapped->numpy.dtype(int).newbyteorder('S')
A:numpy.core._dtype.native->numpy.dtype(int).newbyteorder('S').newbyteorder('S')
A:numpy.core._dtype.(unit, count)->numpy.datetime_data(dtype)
A:numpy.core._dtype.(fld_dtype, offset, title)->_unpack_field(*dtype.fields[name])
A:numpy.core._dtype.(fld_dtype, fld_offset, title)->_unpack_field(*dtype.fields[name])
A:numpy.core._dtype.sub->_struct_dict_str(dtype, include_align)
A:numpy.core._dtype.name->_kind_name(dtype)
numpy._dtype.__repr__(dtype)
numpy._dtype.__str__(dtype)
numpy._dtype._byte_order_str(dtype)
numpy._dtype._construction_repr(dtype,include_align=False,short=False)
numpy._dtype._datetime_metadata_str(dtype)
numpy._dtype._is_packed(dtype)
numpy._dtype._isunsized(dtype)
numpy._dtype._kind_name(dtype)
numpy._dtype._name_get(dtype)
numpy._dtype._name_includes_bit_suffix(dtype)
numpy._dtype._scalar_str(dtype,short)
numpy._dtype._struct_dict_str(dtype,includealignedflag)
numpy._dtype._struct_list_str(dtype)
numpy._dtype._struct_str(dtype,include_align)
numpy._dtype._subarray_str(dtype)
numpy._dtype._unpack_field(dtype,offset,title=None)
numpy.core._dtype.__repr__(dtype)
numpy.core._dtype.__str__(dtype)
numpy.core._dtype._byte_order_str(dtype)
numpy.core._dtype._construction_repr(dtype,include_align=False,short=False)
numpy.core._dtype._datetime_metadata_str(dtype)
numpy.core._dtype._is_packed(dtype)
numpy.core._dtype._isunsized(dtype)
numpy.core._dtype._kind_name(dtype)
numpy.core._dtype._name_get(dtype)
numpy.core._dtype._name_includes_bit_suffix(dtype)
numpy.core._dtype._scalar_str(dtype,short)
numpy.core._dtype._struct_dict_str(dtype,includealignedflag)
numpy.core._dtype._struct_list_str(dtype)
numpy.core._dtype._struct_str(dtype,include_align)
numpy.core._dtype._subarray_str(dtype)
numpy.core._dtype._unpack_field(dtype,offset,title=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/memmap.py----------------------------------------
A:numpy.core.memmap.f_ctx->open(os_fspath(filename), ('r' if mode == 'c' else mode) + 'b')
A:numpy.core.memmap.flen->fid.tell()
A:numpy.core.memmap.descr->dtypedescr(dtype)
A:numpy.core.memmap.size->numpy.intp(1)
A:numpy.core.memmap.bytes->int(offset + size * _dbytes)
A:numpy.core.memmap.mm->mmap.mmap(fid.fileno(), bytes, access=acc, offset=start)
A:numpy.core.memmap.self->numeric.ndarray.__new__(subtype, shape, dtype=descr, buffer=mm, offset=array_offset, order=order)
A:numpy.core.memmap.self.filename->os.path.abspath(fid.name)
A:numpy.core.memmap.arr->super().__array_wrap__(arr, context)
A:numpy.core.memmap.res->super().__getitem__(index)
numpy.__array_finalize__(self,obj)
numpy.__array_wrap__(self,arr,context=None)
numpy.__getitem__(self,index)
numpy.core.memmap.memmap(subtype,filename,dtype=uint8,mode='r+',offset=0,shape=None,order='C')
numpy.core.memmap.memmap.__array_finalize__(self,obj)
numpy.core.memmap.memmap.__array_wrap__(self,arr,context=None)
numpy.core.memmap.memmap.__getitem__(self,index)
numpy.core.memmap.memmap.__new__(subtype,filename,dtype=uint8,mode='r+',offset=0,shape=None,order='C')
numpy.core.memmap.memmap.flush(self)
numpy.flush(self)
numpy.memmap(subtype,filename,dtype=uint8,mode='r+',offset=0,shape=None,order='C')


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/numeric.py----------------------------------------
A:numpy.core.numeric.ufunc->type(sin)
A:numpy.core.numeric.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.core.numeric.res->all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan))
A:numpy.core.numeric.z->zeros(1, dtype=res.dtype)
A:numpy.core.numeric.a->moveaxis(a, axisa, -1)
A:numpy.core.numeric._ones_with_like->array_function_dispatch(_ones_dispatcher)(ones)
A:numpy.core.numeric.fill_value->asarray(fill_value)
A:numpy.core.numeric._full_with_like->array_function_dispatch(_full_dispatcher)(full)
A:numpy.core.numeric.a_bool->moveaxis(a, axisa, -1).astype(np.bool_, copy=False)
A:numpy.core.numeric.b->moveaxis(b, axisb, -1)
A:numpy.core.numeric.axes_a->list(axes_a)
A:numpy.core.numeric.axes_b->list(axes_b)
A:numpy.core.numeric.na->len(axes_a)
A:numpy.core.numeric.nb->len(axes_b)
A:numpy.core.numeric.at->moveaxis(a, axisa, -1).transpose(newaxes_a).reshape(newshape_a)
A:numpy.core.numeric.bt->moveaxis(b, axisb, -1).transpose(newaxes_b).reshape(newshape_b)
A:numpy.core.numeric.axis->tuple([normalize_axis_index(ax, ndim, argname) for ax in axis])
A:numpy.core.numeric.broadcasted->broadcast(shift, axis)
A:numpy.core.numeric.result->transpose(order)
A:numpy.core.numeric.(arr_index, res_index)->zip(*indices)
A:numpy.core.numeric.axes->list(range(0, n))
A:numpy.core.numeric.source->normalize_axis_tuple(source, a.ndim, 'source')
A:numpy.core.numeric.destination->normalize_axis_tuple(destination, a.ndim, 'destination')
A:numpy.core.numeric.axisa->normalize_axis_index(axisa, a.ndim, msg_prefix='axisa')
A:numpy.core.numeric.axisb->normalize_axis_index(axisb, b.ndim, msg_prefix='axisb')
A:numpy.core.numeric.axisc->normalize_axis_index(axisc, len(shape), msg_prefix='axisc')
A:numpy.core.numeric.dtype->promote_types(a.dtype, b.dtype)
A:numpy.core.numeric.cp->empty(shape, dtype)
A:numpy.core.numeric.tmp->array(a2 * b1)
A:numpy.core.numeric.dimensions->tuple(dimensions)
A:numpy.core.numeric.N->len(dimensions)
A:numpy.core.numeric.idx->arange(dim, dtype=dtype).reshape(shape[:i] + (dim,) + shape[i + 1:])
A:numpy.core.numeric.args->indices(shape, dtype=dtype)
A:numpy.core.numeric._fromfunction_with_like->array_function_dispatch(_fromfunction_dispatcher)(fromfunction)
A:numpy.core.numeric.num->abs(number)
A:numpy.core.numeric.binwidth->len(binary)
A:numpy.core.numeric.poswidth->len(bin(-num)[2:])
A:numpy.core.numeric.outwidth->max(binwidth, width)
A:numpy.core.numeric.dt->multiarray.result_type(y, 1.0)
A:numpy.core.numeric._identity_with_like->array_function_dispatch(_identity_dispatcher)(identity)
A:numpy.core.numeric.x->asanyarray(a)
A:numpy.core.numeric.y->asanyarray(y, dtype=dt)
A:numpy.core.numeric.xfin->isfinite(x)
A:numpy.core.numeric.yfin->isfinite(y)
A:numpy.core.numeric.cond->zeros_like(finite, subok=True)
A:numpy.core.numeric.cond[finite]->within_tol(x[finite], y[finite], atol, rtol)
A:numpy.core.numeric.False_->bool_(False)
A:numpy.core.numeric.True_->bool_(True)
A:numpy.core.numeric.existing->set(__all__)
A:numpy.core.numeric.mall->getattr(module, '__all__')
numpy.ComplexWarning(RuntimeWarning)
numpy._allclose_dispatcher(a,b,rtol=None,atol=None,equal_nan=None)
numpy._argwhere_dispatcher(a)
numpy._array_equal_dispatcher(a1,a2,equal_nan=None)
numpy._array_equiv_dispatcher(a1,a2)
numpy._convolve_dispatcher(a,v,mode=None)
numpy._correlate_dispatcher(a,v,mode=None)
numpy._count_nonzero_dispatcher(a,axis=None,*,keepdims=None)
numpy._cross_dispatcher(a,b,axisa=None,axisb=None,axisc=None,axis=None)
numpy._flatnonzero_dispatcher(a)
numpy._frombuffer(buf,dtype,shape,order)
numpy._fromfunction_dispatcher(function,shape,*,dtype=None,like=None,**kwargs)
numpy._full_dispatcher(shape,fill_value,dtype=None,order=None,*,like=None)
numpy._full_like_dispatcher(a,fill_value,dtype=None,order=None,subok=None,shape=None)
numpy._identity_dispatcher(n,dtype=None,*,like=None)
numpy._isclose_dispatcher(a,b,rtol=None,atol=None,equal_nan=None)
numpy._maketup(descr,val)
numpy._move_axis_to_0(a,axis)
numpy._moveaxis_dispatcher(a,source,destination)
numpy._ones_dispatcher(shape,dtype=None,order=None,*,like=None)
numpy._ones_like_dispatcher(a,dtype=None,order=None,subok=None,shape=None)
numpy._outer_dispatcher(a,b,out=None)
numpy._roll_dispatcher(a,shift,axis=None)
numpy._rollaxis_dispatcher(a,axis,start=None)
numpy._tensordot_dispatcher(a,b,axes=None)
numpy._zeros_like_dispatcher(a,dtype=None,order=None,subok=None,shape=None)
numpy.allclose(a,b,rtol=1e-05,atol=1e-08,equal_nan=False)
numpy.argwhere(a)
numpy.array_equal(a1,a2,equal_nan=False)
numpy.array_equiv(a1,a2)
numpy.base_repr(number,base=2,padding=0)
numpy.binary_repr(num,width=None)
numpy.convolve(a,v,mode='full')
numpy.core.numeric.ComplexWarning(RuntimeWarning)
numpy.core.numeric._allclose_dispatcher(a,b,rtol=None,atol=None,equal_nan=None)
numpy.core.numeric._argwhere_dispatcher(a)
numpy.core.numeric._array_equal_dispatcher(a1,a2,equal_nan=None)
numpy.core.numeric._array_equiv_dispatcher(a1,a2)
numpy.core.numeric._convolve_dispatcher(a,v,mode=None)
numpy.core.numeric._correlate_dispatcher(a,v,mode=None)
numpy.core.numeric._count_nonzero_dispatcher(a,axis=None,*,keepdims=None)
numpy.core.numeric._cross_dispatcher(a,b,axisa=None,axisb=None,axisc=None,axis=None)
numpy.core.numeric._flatnonzero_dispatcher(a)
numpy.core.numeric._frombuffer(buf,dtype,shape,order)
numpy.core.numeric._fromfunction_dispatcher(function,shape,*,dtype=None,like=None,**kwargs)
numpy.core.numeric._full_dispatcher(shape,fill_value,dtype=None,order=None,*,like=None)
numpy.core.numeric._full_like_dispatcher(a,fill_value,dtype=None,order=None,subok=None,shape=None)
numpy.core.numeric._identity_dispatcher(n,dtype=None,*,like=None)
numpy.core.numeric._isclose_dispatcher(a,b,rtol=None,atol=None,equal_nan=None)
numpy.core.numeric._maketup(descr,val)
numpy.core.numeric._move_axis_to_0(a,axis)
numpy.core.numeric._moveaxis_dispatcher(a,source,destination)
numpy.core.numeric._ones_dispatcher(shape,dtype=None,order=None,*,like=None)
numpy.core.numeric._ones_like_dispatcher(a,dtype=None,order=None,subok=None,shape=None)
numpy.core.numeric._outer_dispatcher(a,b,out=None)
numpy.core.numeric._roll_dispatcher(a,shift,axis=None)
numpy.core.numeric._rollaxis_dispatcher(a,axis,start=None)
numpy.core.numeric._tensordot_dispatcher(a,b,axes=None)
numpy.core.numeric._zeros_like_dispatcher(a,dtype=None,order=None,subok=None,shape=None)
numpy.core.numeric.allclose(a,b,rtol=1e-05,atol=1e-08,equal_nan=False)
numpy.core.numeric.argwhere(a)
numpy.core.numeric.array_equal(a1,a2,equal_nan=False)
numpy.core.numeric.array_equiv(a1,a2)
numpy.core.numeric.base_repr(number,base=2,padding=0)
numpy.core.numeric.binary_repr(num,width=None)
numpy.core.numeric.convolve(a,v,mode='full')
numpy.core.numeric.correlate(a,v,mode='valid')
numpy.core.numeric.count_nonzero(a,axis=None,*,keepdims=False)
numpy.core.numeric.cross(a,b,axisa=-1,axisb=-1,axisc=-1,axis=None)
numpy.core.numeric.extend_all(module)
numpy.core.numeric.flatnonzero(a)
numpy.core.numeric.fromfunction(function,shape,*,dtype=float,like=None,**kwargs)
numpy.core.numeric.full(shape,fill_value,dtype=None,order='C',*,like=None)
numpy.core.numeric.full_like(a,fill_value,dtype=None,order='K',subok=True,shape=None)
numpy.core.numeric.identity(n,dtype=None,*,like=None)
numpy.core.numeric.indices(dimensions,dtype=int,sparse=False)
numpy.core.numeric.isclose(a,b,rtol=1e-05,atol=1e-08,equal_nan=False)
numpy.core.numeric.isfortran(a)
numpy.core.numeric.isscalar(element)
numpy.core.numeric.moveaxis(a,source,destination)
numpy.core.numeric.normalize_axis_tuple(axis,ndim,argname=None,allow_duplicate=False)
numpy.core.numeric.ones(shape,dtype=None,order='C',*,like=None)
numpy.core.numeric.ones_like(a,dtype=None,order='K',subok=True,shape=None)
numpy.core.numeric.outer(a,b,out=None)
numpy.core.numeric.roll(a,shift,axis=None)
numpy.core.numeric.rollaxis(a,axis,start=0)
numpy.core.numeric.tensordot(a,b,axes=2)
numpy.core.numeric.zeros_like(a,dtype=None,order='K',subok=True,shape=None)
numpy.correlate(a,v,mode='valid')
numpy.count_nonzero(a,axis=None,*,keepdims=False)
numpy.cross(a,b,axisa=-1,axisb=-1,axisc=-1,axis=None)
numpy.extend_all(module)
numpy.flatnonzero(a)
numpy.fromfunction(function,shape,*,dtype=float,like=None,**kwargs)
numpy.full(shape,fill_value,dtype=None,order='C',*,like=None)
numpy.full_like(a,fill_value,dtype=None,order='K',subok=True,shape=None)
numpy.identity(n,dtype=None,*,like=None)
numpy.indices(dimensions,dtype=int,sparse=False)
numpy.isclose(a,b,rtol=1e-05,atol=1e-08,equal_nan=False)
numpy.isfortran(a)
numpy.isscalar(element)
numpy.moveaxis(a,source,destination)
numpy.normalize_axis_tuple(axis,ndim,argname=None,allow_duplicate=False)
numpy.ones(shape,dtype=None,order='C',*,like=None)
numpy.ones_like(a,dtype=None,order='K',subok=True,shape=None)
numpy.outer(a,b,out=None)
numpy.roll(a,shift,axis=None)
numpy.rollaxis(a,axis,start=0)
numpy.tensordot(a,b,axes=2)
numpy.zeros_like(a,dtype=None,order='K',subok=True,shape=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/numeric.pyi----------------------------------------
numpy.core.numeric.empty_like(a:ArrayLike,dtype:DTypeLike=...,order:_OrderKACF=...,subok:bool=...,shape:Optional[_ShapeLike]=...)->ndarray
numpy.core.numeric.empty_like(a:_ArrayType,dtype:None=...,order:_OrderKACF=...,subok:Literal[True]=...,shape:None=...)->_ArrayType
numpy.empty_like(a:ArrayLike,dtype:DTypeLike=...,order:_OrderKACF=...,subok:bool=...,shape:Optional[_ShapeLike]=...)->ndarray
numpy.empty_like(a:_ArrayType,dtype:None=...,order:_OrderKACF=...,subok:Literal[True]=...,shape:None=...)->_ArrayType


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/arrayprint.py----------------------------------------
A:numpy.core.arrayprint.options['suppress']->bool(suppress)
A:numpy.core.arrayprint.options['precision']->operator.index(precision)
A:numpy.core.arrayprint.opt->_make_options_dict(precision, threshold, edgeitems, linewidth, suppress, nanstr, infstr, sign, formatter, floatmode, legacy)
A:numpy.core.arrayprint.opts->numpy.get_printoptions()
A:numpy.core.arrayprint.axis->len(index)
A:numpy.core.arrayprint.formatdict[key]->indirect(formatter[key])
A:numpy.core.arrayprint.formatdict['numpystr']->indirect(formatter['str_kind'])
A:numpy.core.arrayprint.formatdict->_get_formatdict(data, **options)
A:numpy.core.arrayprint.repr_running->set()
A:numpy.core.arrayprint.data->_leading_trailing(data, options['edgeitems'])
A:numpy.core.arrayprint.format_function->SubArrayFormat(format_function)
A:numpy.core.arrayprint.lst->array2string(arr, max_line_width, precision, suppress_small, ', ', prefix, suffix=suffix)
A:numpy.core.arrayprint.overrides->_make_options_dict(precision, threshold, edgeitems, max_line_width, suppress_small, None, None, sign, formatter, floatmode, legacy)
A:numpy.core.arrayprint.options->_format_options.copy()
A:numpy.core.arrayprint.words->recurser(index + (-1,), next_hanging_indent, next_width).splitlines()
A:numpy.core.arrayprint.max_word_length->max((len(word) for word in words))
A:numpy.core.arrayprint.word->recurser(index + (-1,), next_hanging_indent, next_width)
A:numpy.core.arrayprint.(s, line)->_extendLine_pretty(s, line, word, elem_width, hanging_indent, legacy)
A:numpy.core.arrayprint.nested->recurser(index + (-1,), next_hanging_indent, next_width)
A:numpy.core.arrayprint.self.precision->max((len(s) for s in frac_part))
A:numpy.core.arrayprint.abs_non_zero->absolute(finite_vals[finite_vals != 0])
A:numpy.core.arrayprint.max_val->numpy.max(abs_non_zero)
A:numpy.core.arrayprint.min_val->numpy.min(abs_non_zero)
A:numpy.core.arrayprint.(frac_strs, _, exp_strs)->zip(*(s.partition('e') for s in strs))
A:numpy.core.arrayprint.(int_part, frac_part)->zip(*(s.split('.') for s in strs))
A:numpy.core.arrayprint.self.pad_left->max(self.pad_left, nanlen - offset, inflen - offset)
A:numpy.core.arrayprint.self.pad_right->max((len(s) for s in frac_part))
A:numpy.core.arrayprint.nanlen->len(_format_options['nanstr'])
A:numpy.core.arrayprint.precision->_none_or_positive_arg(precision, 'precision')
A:numpy.core.arrayprint.pad_left->_none_or_positive_arg(pad_left, 'pad_left')
A:numpy.core.arrayprint.exp_digits->_none_or_positive_arg(exp_digits, 'exp_digits')
A:numpy.core.arrayprint.min_digits->_none_or_positive_arg(min_digits, 'min_digits')
A:numpy.core.arrayprint.pad_right->_none_or_positive_arg(pad_right, 'pad_right')
A:numpy.core.arrayprint.max_str_len->max(max_str_len, 5)
A:numpy.core.arrayprint.self.format->'%{}d'.format(max_str_len)
A:numpy.core.arrayprint.self.real_format->FloatingFormat(x.real, precision, floatmode_real, suppress_small, sign=sign, legacy=legacy)
A:numpy.core.arrayprint.self.imag_format->FloatingFormat(x.imag, precision, floatmode_imag, suppress_small, sign='+', legacy=legacy)
A:numpy.core.arrayprint.r->self.real_format(x.real)
A:numpy.core.arrayprint.i->self.imag_format(x.imag)
A:numpy.core.arrayprint.sp->len(i.rstrip())
A:numpy.core.arrayprint.self._format->'%{}s'.format(max_str_len)
A:numpy.core.arrayprint.self._nat->"'NaT'".rjust(max_str_len)
A:numpy.core.arrayprint.dtype->numpy.dtype(dtype)
A:numpy.core.arrayprint.typename->repr(typename)
A:numpy.core.arrayprint.dtype_str->'dtype={})'.format(dtype_short_repr(arr.dtype))
A:numpy.core.arrayprint._array2string_impl->getattr(array2string, '__wrapped__', array2string)
A:numpy.core.arrayprint._default_array_str->functools.partial(_array_str_implementation, array2string=_array2string_impl)
A:numpy.core.arrayprint._default_array_repr->functools.partial(_array_repr_implementation, array2string=_array2string_impl)
numpy.arrayprint.BoolFormat(self,data,**kwargs)
numpy.arrayprint.ComplexFloatingFormat(self,x,precision,floatmode,suppress_small,sign=False,*,legacy=None)
numpy.arrayprint.DatetimeFormat(self,x,unit=None,timezone=None,casting='same_kind',legacy=False)
numpy.arrayprint.DatetimeFormat._format_non_nat(self,x)
numpy.arrayprint.FloatingFormat(self,data,precision,floatmode,suppress_small,sign=False,*,legacy=None)
numpy.arrayprint.FloatingFormat.fillFormat(self,data)
numpy.arrayprint.IntegerFormat(self,data)
numpy.arrayprint.StructuredVoidFormat(self,format_functions)
numpy.arrayprint.StructuredVoidFormat.from_data(cls,data,**options)
numpy.arrayprint.SubArrayFormat(self,format_function)
numpy.arrayprint.TimedeltaFormat(_TimelikeFormat)
numpy.arrayprint.TimedeltaFormat._format_non_nat(self,x)
numpy.arrayprint._TimelikeFormat(self,data)
numpy.arrayprint._TimelikeFormat._format_non_nat(self,x)
numpy.arrayprint._array2string(a,options,separator='',prefix='')
numpy.arrayprint._array2string_dispatcher(a,max_line_width=None,precision=None,suppress_small=None,separator=None,prefix=None,style=None,formatter=None,threshold=None,edgeitems=None,sign=None,floatmode=None,suffix=None,*,legacy=None)
numpy.arrayprint._array_repr_dispatcher(arr,max_line_width=None,precision=None,suppress_small=None)
numpy.arrayprint._array_repr_implementation(arr,max_line_width=None,precision=None,suppress_small=None,array2string=array2string)
numpy.arrayprint._array_str_dispatcher(a,max_line_width=None,precision=None,suppress_small=None)
numpy.arrayprint._array_str_implementation(a,max_line_width=None,precision=None,suppress_small=None,array2string=array2string)
numpy.arrayprint._extendLine(s,line,word,line_width,next_line_prefix,legacy)
numpy.arrayprint._extendLine_pretty(s,line,word,line_width,next_line_prefix,legacy)
numpy.arrayprint._formatArray(a,format_function,line_width,next_line_prefix,separator,edge_items,summary_insert,legacy)
numpy.arrayprint._get_format_function(data,**options)
numpy.arrayprint._get_formatdict(data,*,precision,floatmode,suppress,sign,legacy,formatter,**kwargs)
numpy.arrayprint._guarded_repr_or_str(v)
numpy.arrayprint._leading_trailing(a,edgeitems,index=())
numpy.arrayprint._make_options_dict(precision=None,threshold=None,edgeitems=None,linewidth=None,suppress=None,nanstr=None,infstr=None,sign=None,formatter=None,floatmode=None,legacy=None)
numpy.arrayprint._none_or_positive_arg(x,name)
numpy.arrayprint._object_format(o)
numpy.arrayprint._recursive_guard(fillvalue='...')
numpy.arrayprint._void_scalar_repr(x)
numpy.arrayprint.array2string(a,max_line_width=None,precision=None,suppress_small=None,separator='',prefix='',style=np._NoValue,formatter=None,threshold=None,edgeitems=None,sign=None,floatmode=None,suffix='',*,legacy=None)
numpy.arrayprint.array_repr(arr,max_line_width=None,precision=None,suppress_small=None)
numpy.arrayprint.array_str(a,max_line_width=None,precision=None,suppress_small=None)
numpy.arrayprint.dtype_is_implied(dtype)
numpy.arrayprint.dtype_short_repr(dtype)
numpy.arrayprint.format_float_positional(x,precision=None,unique=True,fractional=True,trim='k',sign=False,pad_left=None,pad_right=None,min_digits=None)
numpy.arrayprint.format_float_scientific(x,precision=None,unique=True,trim='k',sign=False,pad_left=None,exp_digits=None,min_digits=None)
numpy.arrayprint.get_printoptions()
numpy.arrayprint.printoptions(*args,**kwargs)
numpy.arrayprint.repr_format(x)
numpy.arrayprint.set_printoptions(precision=None,threshold=None,edgeitems=None,linewidth=None,suppress=None,nanstr=None,infstr=None,formatter=None,sign=None,floatmode=None,*,legacy=None)
numpy.arrayprint.set_string_function(f,repr=True)
numpy.arrayprint.str_format(x)
numpy.core.arrayprint.BoolFormat(self,data,**kwargs)
numpy.core.arrayprint.BoolFormat.__init__(self,data,**kwargs)
numpy.core.arrayprint.ComplexFloatingFormat(self,x,precision,floatmode,suppress_small,sign=False,*,legacy=None)
numpy.core.arrayprint.ComplexFloatingFormat.__init__(self,x,precision,floatmode,suppress_small,sign=False,*,legacy=None)
numpy.core.arrayprint.DatetimeFormat(self,x,unit=None,timezone=None,casting='same_kind',legacy=False)
numpy.core.arrayprint.DatetimeFormat.__init__(self,x,unit=None,timezone=None,casting='same_kind',legacy=False)
numpy.core.arrayprint.DatetimeFormat._format_non_nat(self,x)
numpy.core.arrayprint.FloatingFormat(self,data,precision,floatmode,suppress_small,sign=False,*,legacy=None)
numpy.core.arrayprint.FloatingFormat.__init__(self,data,precision,floatmode,suppress_small,sign=False,*,legacy=None)
numpy.core.arrayprint.FloatingFormat.fillFormat(self,data)
numpy.core.arrayprint.IntegerFormat(self,data)
numpy.core.arrayprint.IntegerFormat.__init__(self,data)
numpy.core.arrayprint.StructuredVoidFormat(self,format_functions)
numpy.core.arrayprint.StructuredVoidFormat.__init__(self,format_functions)
numpy.core.arrayprint.StructuredVoidFormat.from_data(cls,data,**options)
numpy.core.arrayprint.SubArrayFormat(self,format_function)
numpy.core.arrayprint.SubArrayFormat.__init__(self,format_function)
numpy.core.arrayprint.TimedeltaFormat(_TimelikeFormat)
numpy.core.arrayprint.TimedeltaFormat._format_non_nat(self,x)
numpy.core.arrayprint._TimelikeFormat(self,data)
numpy.core.arrayprint._TimelikeFormat.__init__(self,data)
numpy.core.arrayprint._TimelikeFormat._format_non_nat(self,x)
numpy.core.arrayprint._array2string(a,options,separator='',prefix='')
numpy.core.arrayprint._array2string_dispatcher(a,max_line_width=None,precision=None,suppress_small=None,separator=None,prefix=None,style=None,formatter=None,threshold=None,edgeitems=None,sign=None,floatmode=None,suffix=None,*,legacy=None)
numpy.core.arrayprint._array_repr_dispatcher(arr,max_line_width=None,precision=None,suppress_small=None)
numpy.core.arrayprint._array_repr_implementation(arr,max_line_width=None,precision=None,suppress_small=None,array2string=array2string)
numpy.core.arrayprint._array_str_dispatcher(a,max_line_width=None,precision=None,suppress_small=None)
numpy.core.arrayprint._array_str_implementation(a,max_line_width=None,precision=None,suppress_small=None,array2string=array2string)
numpy.core.arrayprint._extendLine(s,line,word,line_width,next_line_prefix,legacy)
numpy.core.arrayprint._extendLine_pretty(s,line,word,line_width,next_line_prefix,legacy)
numpy.core.arrayprint._formatArray(a,format_function,line_width,next_line_prefix,separator,edge_items,summary_insert,legacy)
numpy.core.arrayprint._get_format_function(data,**options)
numpy.core.arrayprint._get_formatdict(data,*,precision,floatmode,suppress,sign,legacy,formatter,**kwargs)
numpy.core.arrayprint._guarded_repr_or_str(v)
numpy.core.arrayprint._leading_trailing(a,edgeitems,index=())
numpy.core.arrayprint._make_options_dict(precision=None,threshold=None,edgeitems=None,linewidth=None,suppress=None,nanstr=None,infstr=None,sign=None,formatter=None,floatmode=None,legacy=None)
numpy.core.arrayprint._none_or_positive_arg(x,name)
numpy.core.arrayprint._object_format(o)
numpy.core.arrayprint._recursive_guard(fillvalue='...')
numpy.core.arrayprint._void_scalar_repr(x)
numpy.core.arrayprint.array2string(a,max_line_width=None,precision=None,suppress_small=None,separator='',prefix='',style=np._NoValue,formatter=None,threshold=None,edgeitems=None,sign=None,floatmode=None,suffix='',*,legacy=None)
numpy.core.arrayprint.array_repr(arr,max_line_width=None,precision=None,suppress_small=None)
numpy.core.arrayprint.array_str(a,max_line_width=None,precision=None,suppress_small=None)
numpy.core.arrayprint.dtype_is_implied(dtype)
numpy.core.arrayprint.dtype_short_repr(dtype)
numpy.core.arrayprint.format_float_positional(x,precision=None,unique=True,fractional=True,trim='k',sign=False,pad_left=None,pad_right=None,min_digits=None)
numpy.core.arrayprint.format_float_scientific(x,precision=None,unique=True,trim='k',sign=False,pad_left=None,exp_digits=None,min_digits=None)
numpy.core.arrayprint.get_printoptions()
numpy.core.arrayprint.printoptions(*args,**kwargs)
numpy.core.arrayprint.repr_format(x)
numpy.core.arrayprint.set_printoptions(precision=None,threshold=None,edgeitems=None,linewidth=None,suppress=None,nanstr=None,infstr=None,formatter=None,sign=None,floatmode=None,*,legacy=None)
numpy.core.arrayprint.set_string_function(f,repr=True)
numpy.core.arrayprint.str_format(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/arrayprint.pyi----------------------------------------
numpy.arrayprint._FormatDict(TypedDict,total=False)
numpy.arrayprint._FormatOptions(TypedDict)
numpy.core.arrayprint._FormatDict(TypedDict,total=False)
numpy.core.arrayprint._FormatOptions(TypedDict)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/_type_aliases.py----------------------------------------
A:numpy.core._type_aliases.k->english_lower(k)
A:numpy.core._type_aliases.info->next((v for v in _concrete_typeinfo.values() if v.type is obj))
A:numpy.core._type_aliases.bits->_bits_of(obj)
A:numpy.core._type_aliases.dt->dtype(obj)
A:numpy.core._type_aliases.base->_kind_name(dt)
A:numpy.core._type_aliases._uint_ctypes->list(('u' + t for t in _int_ctypes))
A:numpy.core._type_aliases.(base, bit, char)->bitname(info.type)
A:numpy.core._type_aliases.seen_bits->set()
A:numpy.core._type_aliases._gi->dtype('p')
numpy._type_aliases._add_aliases()
numpy._type_aliases._add_array_type(typename,bits)
numpy._type_aliases._add_integer_aliases()
numpy._type_aliases._add_types()
numpy._type_aliases._bits_of(obj)
numpy._type_aliases._set_array_types()
numpy._type_aliases._set_up_aliases()
numpy._type_aliases.bitname(obj)
numpy.core._type_aliases._add_aliases()
numpy.core._type_aliases._add_array_type(typename,bits)
numpy.core._type_aliases._add_integer_aliases()
numpy.core._type_aliases._add_types()
numpy.core._type_aliases._bits_of(obj)
numpy.core._type_aliases._set_array_types()
numpy.core._type_aliases._set_up_aliases()
numpy.core._type_aliases.bitname(obj)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/_type_aliases.pyi----------------------------------------
numpy._type_aliases._SCTypes(TypedDict)
numpy.core._type_aliases._SCTypes(TypedDict)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/_ufunc_config.py----------------------------------------
A:numpy.core._ufunc_config.pyvals->umath.geterrobj()
A:numpy.core._ufunc_config.old->geterrcall()
A:numpy.core._ufunc_config._Unspecified->_unspecified()
A:numpy.core._ufunc_config.self.oldstate->seterr(**self.kwargs)
A:numpy.core._ufunc_config.self.oldcall->seterrcall(self.call)
numpy._ufunc_config._setdef()
numpy._ufunc_config._unspecified
numpy._ufunc_config.errstate(self,*,call=_Unspecified,**kwargs)
numpy._ufunc_config.errstate.__enter__(self)
numpy._ufunc_config.errstate.__exit__(self,*exc_info)
numpy._ufunc_config.getbufsize()
numpy._ufunc_config.geterr()
numpy._ufunc_config.geterrcall()
numpy._ufunc_config.setbufsize(size)
numpy._ufunc_config.seterr(all=None,divide=None,over=None,under=None,invalid=None)
numpy._ufunc_config.seterrcall(func)
numpy.core._ufunc_config._setdef()
numpy.core._ufunc_config._unspecified
numpy.core._ufunc_config.errstate(self,*,call=_Unspecified,**kwargs)
numpy.core._ufunc_config.errstate.__enter__(self)
numpy.core._ufunc_config.errstate.__exit__(self,*exc_info)
numpy.core._ufunc_config.errstate.__init__(self,*,call=_Unspecified,**kwargs)
numpy.core._ufunc_config.getbufsize()
numpy.core._ufunc_config.geterr()
numpy.core._ufunc_config.geterrcall()
numpy.core._ufunc_config.setbufsize(size)
numpy.core._ufunc_config.seterr(all=None,divide=None,over=None,under=None,invalid=None)
numpy.core._ufunc_config.seterrcall(func)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/_ufunc_config.pyi----------------------------------------
numpy._ufunc_config._ErrDict(TypedDict)
numpy._ufunc_config._ErrDictOptional(TypedDict,total=False)
numpy._ufunc_config._SupportsWrite(Protocol)
numpy._ufunc_config._SupportsWrite.write(self,__msg:str)->Any
numpy.core._ufunc_config._ErrDict(TypedDict)
numpy.core._ufunc_config._ErrDictOptional(TypedDict,total=False)
numpy.core._ufunc_config._SupportsWrite(Protocol)
numpy.core._ufunc_config._SupportsWrite.write(self,__msg:str)->Any


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/shape_base.py----------------------------------------
A:numpy.core.shape_base.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.core.shape_base.ary->asanyarray(ary)
A:numpy.core.shape_base.result->result.copy().copy()
A:numpy.core.shape_base.arrs->atleast_1d(*tup)
A:numpy.core.shape_base.arrays->functools.reduce(operator.add, arrays)
A:numpy.core.shape_base.axis->normalize_axis_index(axis, result_ndim)
A:numpy.core.shape_base._size->getattr(_from_nx.size, '__wrapped__', _from_nx.size)
A:numpy.core.shape_base._ndim->getattr(_from_nx.ndim, '__wrapped__', _from_nx.ndim)
A:numpy.core.shape_base._concatenate->getattr(_from_nx.concatenate, '__wrapped__', _from_nx.concatenate)
A:numpy.core.shape_base.idx_str->''.join(('[{}]'.format(i) for i in index if i is not None))
A:numpy.core.shape_base.(first_index, max_arr_ndim, final_size)->next(idxs_ndims)
A:numpy.core.shape_base.size->_size(arrays)
A:numpy.core.shape_base.offsets_at_axis->_accumulate(shape_at_axis)
A:numpy.core.shape_base.(shapes, slices, arrays)->zip(*[_block_info_recursion(arr, max_depth, result_ndim, depth + 1) for arr in arrays])
A:numpy.core.shape_base.(shape, slice_prefixes)->_concatenate_shapes(shapes, axis)
A:numpy.core.shape_base.arr->_atleast_nd(arrays, result_ndim)
A:numpy.core.shape_base.(arrays, list_ndim, result_ndim, final_size)->_block_setup(arrays)
A:numpy.core.shape_base.(bottom_index, arr_ndim, final_size)->_block_check_depths_match(arrays)
A:numpy.core.shape_base.list_ndim->len(bottom_index)
A:numpy.core.shape_base.result_ndim->max(arr_ndim, list_ndim)
A:numpy.core.shape_base.(shape, slices, arrays)->_block_info_recursion(arrays, list_ndim, result_ndim)
A:numpy.core.shape_base.dtype->_nx.result_type(*[arr.dtype for arr in arrays])
A:numpy.core.shape_base.F_order->all((arr.flags['F_CONTIGUOUS'] for arr in arrays))
A:numpy.core.shape_base.C_order->all((arr.flags['C_CONTIGUOUS'] for arr in arrays))
numpy._accumulate(values)
numpy._arrays_for_stack_dispatcher(arrays,stacklevel=4)
numpy._atleast_1d_dispatcher(*arys)
numpy._atleast_2d_dispatcher(*arys)
numpy._atleast_3d_dispatcher(*arys)
numpy._atleast_nd(a,ndim)
numpy._block(arrays,max_depth,result_ndim,depth=0)
numpy._block_check_depths_match(arrays,parent_index=[])
numpy._block_concatenate(arrays,list_ndim,result_ndim)
numpy._block_dispatcher(arrays)
numpy._block_format_index(index)
numpy._block_info_recursion(arrays,max_depth,result_ndim,depth=0)
numpy._block_setup(arrays)
numpy._block_slicing(arrays,list_ndim,result_ndim)
numpy._concatenate_shapes(shapes,axis)
numpy._stack_dispatcher(arrays,axis=None,out=None)
numpy._vhstack_dispatcher(tup)
numpy.atleast_1d(*arys)
numpy.atleast_2d(*arys)
numpy.atleast_3d(*arys)
numpy.block(arrays)
numpy.core.shape_base._accumulate(values)
numpy.core.shape_base._arrays_for_stack_dispatcher(arrays,stacklevel=4)
numpy.core.shape_base._atleast_1d_dispatcher(*arys)
numpy.core.shape_base._atleast_2d_dispatcher(*arys)
numpy.core.shape_base._atleast_3d_dispatcher(*arys)
numpy.core.shape_base._atleast_nd(a,ndim)
numpy.core.shape_base._block(arrays,max_depth,result_ndim,depth=0)
numpy.core.shape_base._block_check_depths_match(arrays,parent_index=[])
numpy.core.shape_base._block_concatenate(arrays,list_ndim,result_ndim)
numpy.core.shape_base._block_dispatcher(arrays)
numpy.core.shape_base._block_format_index(index)
numpy.core.shape_base._block_info_recursion(arrays,max_depth,result_ndim,depth=0)
numpy.core.shape_base._block_setup(arrays)
numpy.core.shape_base._block_slicing(arrays,list_ndim,result_ndim)
numpy.core.shape_base._concatenate_shapes(shapes,axis)
numpy.core.shape_base._stack_dispatcher(arrays,axis=None,out=None)
numpy.core.shape_base._vhstack_dispatcher(tup)
numpy.core.shape_base.atleast_1d(*arys)
numpy.core.shape_base.atleast_2d(*arys)
numpy.core.shape_base.atleast_3d(*arys)
numpy.core.shape_base.block(arrays)
numpy.core.shape_base.hstack(tup)
numpy.core.shape_base.stack(arrays,axis=0,out=None)
numpy.core.shape_base.vstack(tup)
numpy.hstack(tup)
numpy.stack(arrays,axis=0,out=None)
numpy.vstack(tup)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/shape_base.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/__init__.py----------------------------------------
A:numpy.core.__init__.mod->__import__(module, fromlist=[name])
A:numpy.core.__init__.test->PytestTester(__name__)
numpy.__init__._DType_reconstruct(scalar_type)
numpy.__init__._DType_reduce(DType)
numpy.__init__._ufunc_reconstruct(module,name)
numpy.__init__._ufunc_reduce(func)
numpy.core.__init__._DType_reconstruct(scalar_type)
numpy.core.__init__._DType_reduce(DType)
numpy.core.__init__._ufunc_reconstruct(module,name)
numpy.core.__init__._ufunc_reduce(func)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/__init__.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/_internal.py----------------------------------------
A:numpy.core._internal.n->len(obj)
A:numpy.core._internal.num->int(obj[1])
A:numpy.core._internal.format->dtype(obj[0], align=align)
A:numpy.core._internal.(names, formats, offsets, titles)->_makenames_list(adict, align)
A:numpy.core._internal.new->descriptor.metadata.copy()
A:numpy.core._internal.format_re->re.compile('(?P<order1>[<>|=]?)(?P<repeats> *[(]?[ ,0-9]*[)]? *)(?P<order2>[<>|=]?)(?P<dtype>[A-Za-z0-9.?]*(?:\\[[a-zA-Z0-9,.]+\\])?)')
A:numpy.core._internal.sep_re->re.compile('\\s*,\\s*')
A:numpy.core._internal.space_re->re.compile('\\s+$')
A:numpy.core._internal.mo->re.compile('\\s*,\\s*').match(astr, pos=startindex)
A:numpy.core._internal.(order1, repeats, order2, dtype)->re.compile('\\s*,\\s*').match(astr, pos=startindex).groups()
A:numpy.core._internal.startindex->re.compile('\\s*,\\s*').match(astr, pos=startindex).end()
A:numpy.core._internal.order1->_convorder.get(order1, order1)
A:numpy.core._internal.order2->_convorder.get(order2, order2)
A:numpy.core._internal.val->dummy_ctype(np.intp)
A:numpy.core._internal.self._data->self._ctypes.c_void_p(ptr)
A:numpy.core._internal.self._ctypes->_missing_ctypes()
A:numpy.core._internal.ptr->self._ctypes.cast(self._data, obj)
A:numpy.core._internal.nameslist->list(oldnames)
A:numpy.core._internal.seen->set()
A:numpy.core._internal._pep3118_native_typechars->''.join(_pep3118_native_map.keys())
A:numpy.core._internal._pep3118_standard_typechars->''.join(_pep3118_standard_map.keys())
A:numpy.core._internal.i->self.s.index(c)
A:numpy.core._internal.res->self.advance(i)
A:numpy.core._internal.stream->_Stream(spec)
A:numpy.core._internal.(dtype, align)->__dtype_from_pep3118(stream, is_subdtype=False)
A:numpy.core._internal.field_spec->dict(names=names, formats=[fields[name][0] for name in names], offsets=[fields[name][1] for name in names], itemsize=value.itemsize)
A:numpy.core._internal.shape->tuple(map(int, shape.split(',')))
A:numpy.core._internal.byteorder->_Stream(spec).advance(1)
A:numpy.core._internal.itemsize_str->_Stream(spec).consume_until(lambda c: not c.isdigit())
A:numpy.core._internal.itemsize->int(itemsize_str)
A:numpy.core._internal.(value, align)->__dtype_from_pep3118(stream, is_subdtype=True)
A:numpy.core._internal.typechar->_Stream(spec).advance(1)
A:numpy.core._internal.numpy_byteorder->{'@': '=', '^': '='}.get(stream.byteorder, stream.byteorder)
A:numpy.core._internal.value->dtype((value, shape))
A:numpy.core._internal.common_alignment->_lcm(align, common_alignment)
A:numpy.core._internal.name->_Stream(spec).consume_until(':')
A:numpy.core._internal.ret->dtype(field_spec)
A:numpy.core._internal.args_string->', '.join(['{!r}'.format(arg) for arg in inputs] + ['{}={!r}'.format(k, v) for (k, v) in kwargs.items()])
A:numpy.core._internal.types_string->', '.join((repr(type(arg).__name__) for arg in args))
A:numpy.core._internal.func_name->'{}.{}'.format(public_api.__module__, public_api.__name__)
A:numpy.core._internal.in_args->', '.join((f'x{i + 1}' for i in range(ufunc.nin)))
A:numpy.core._internal.out_args->'[, {positional}], / [, out={default}]'.format(positional=', '.join(('out{}'.format(i + 1) for i in range(ufunc.nout))), default=repr((None,) * ufunc.nout))
numpy._internal._Stream(self,s)
numpy._internal._Stream.__bool__(self)
numpy._internal._Stream.advance(self,n)
numpy._internal._Stream.consume(self,c)
numpy._internal._Stream.consume_until(self,c)
numpy._internal._Stream.next(self)
numpy._internal.__dtype_from_pep3118(stream,is_subdtype)
numpy._internal._add_trailing_padding(value,padding)
numpy._internal._array_descr(descriptor)
numpy._internal._commastring(astr)
numpy._internal._copy_fields(ary)
numpy._internal._ctypes(self,array,ptr=None)
numpy._internal._ctypes._as_parameter_(self)
numpy._internal._ctypes.data(self)
numpy._internal._ctypes.data_as(self,obj)
numpy._internal._ctypes.get_as_parameter(self)
numpy._internal._ctypes.get_data(self)
numpy._internal._ctypes.get_shape(self)
numpy._internal._ctypes.get_strides(self)
numpy._internal._ctypes.shape(self)
numpy._internal._ctypes.shape_as(self,obj)
numpy._internal._ctypes.strides(self)
numpy._internal._ctypes.strides_as(self,obj)
numpy._internal._dtype_from_pep3118(spec)
numpy._internal._fix_names(field_spec)
numpy._internal._gcd(a,b)
numpy._internal._getfield_is_safe(oldtype,newtype,offset)
numpy._internal._getintp_ctype()
numpy._internal._lcm(a,b)
numpy._internal._makenames_list(adict,align)
numpy._internal._missing_ctypes
numpy._internal._missing_ctypes.c_void_p(self,ptr)
numpy._internal._missing_ctypes.cast(self,num,obj)
numpy._internal._newnames(datatype,order)
numpy._internal._prod(a)
numpy._internal._reconstruct(subtype,shape,dtype)
numpy._internal._ufunc_doc_signature_formatter(ufunc)
numpy._internal._usefields(adict,align)
numpy._internal._view_is_safe(oldtype,newtype)
numpy._internal.array_function_errmsg_formatter(public_api,types)
numpy._internal.array_ufunc_errmsg_formatter(dummy,ufunc,method,*inputs,**kwargs)
numpy._internal.dummy_ctype(self,cls)
numpy._internal.dummy_ctype.__eq__(self,other)
numpy._internal.dummy_ctype.__mul__(self,other)
numpy._internal.dummy_ctype.__ne__(self,other)
numpy._internal.npy_ctypes_check(cls)
numpy._internal.recursive(self,func)
numpy.core._internal._Stream(self,s)
numpy.core._internal._Stream.__bool__(self)
numpy.core._internal._Stream.__init__(self,s)
numpy.core._internal._Stream.advance(self,n)
numpy.core._internal._Stream.consume(self,c)
numpy.core._internal._Stream.consume_until(self,c)
numpy.core._internal._Stream.next(self)
numpy.core._internal.__dtype_from_pep3118(stream,is_subdtype)
numpy.core._internal._add_trailing_padding(value,padding)
numpy.core._internal._array_descr(descriptor)
numpy.core._internal._commastring(astr)
numpy.core._internal._copy_fields(ary)
numpy.core._internal._ctypes(self,array,ptr=None)
numpy.core._internal._ctypes.__init__(self,array,ptr=None)
numpy.core._internal._ctypes._as_parameter_(self)
numpy.core._internal._ctypes.data(self)
numpy.core._internal._ctypes.data_as(self,obj)
numpy.core._internal._ctypes.get_as_parameter(self)
numpy.core._internal._ctypes.get_data(self)
numpy.core._internal._ctypes.get_shape(self)
numpy.core._internal._ctypes.get_strides(self)
numpy.core._internal._ctypes.shape(self)
numpy.core._internal._ctypes.shape_as(self,obj)
numpy.core._internal._ctypes.strides(self)
numpy.core._internal._ctypes.strides_as(self,obj)
numpy.core._internal._dtype_from_pep3118(spec)
numpy.core._internal._fix_names(field_spec)
numpy.core._internal._gcd(a,b)
numpy.core._internal._getfield_is_safe(oldtype,newtype,offset)
numpy.core._internal._getintp_ctype()
numpy.core._internal._lcm(a,b)
numpy.core._internal._makenames_list(adict,align)
numpy.core._internal._missing_ctypes
numpy.core._internal._missing_ctypes.c_void_p(self,ptr)
numpy.core._internal._missing_ctypes.c_void_p.__init__(self,ptr)
numpy.core._internal._missing_ctypes.cast(self,num,obj)
numpy.core._internal._newnames(datatype,order)
numpy.core._internal._prod(a)
numpy.core._internal._reconstruct(subtype,shape,dtype)
numpy.core._internal._ufunc_doc_signature_formatter(ufunc)
numpy.core._internal._usefields(adict,align)
numpy.core._internal._view_is_safe(oldtype,newtype)
numpy.core._internal.array_function_errmsg_formatter(public_api,types)
numpy.core._internal.array_ufunc_errmsg_formatter(dummy,ufunc,method,*inputs,**kwargs)
numpy.core._internal.dummy_ctype(self,cls)
numpy.core._internal.dummy_ctype.__eq__(self,other)
numpy.core._internal.dummy_ctype.__init__(self,cls)
numpy.core._internal.dummy_ctype.__mul__(self,other)
numpy.core._internal.dummy_ctype.__ne__(self,other)
numpy.core._internal.npy_ctypes_check(cls)
numpy.core._internal.recursive(self,func)
numpy.core._internal.recursive.__init__(self,func)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/_internal.pyi----------------------------------------
numpy.core._internal._ctypes.__new__(cls,array:ndarray[Any,Any],ptr:_PT)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/fromnumeric.py----------------------------------------
A:numpy.core.fromnumeric.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.core.fromnumeric.result->wrap(result)
A:numpy.core.fromnumeric.bound->getattr(obj, method, None)
A:numpy.core.fromnumeric.reduction->getattr(obj, method)
A:numpy.core.fromnumeric.a->ravel(a)
A:numpy.core.fromnumeric.res->_sum_(a)
numpy._alen_dispathcer(a)
numpy._all_dispatcher(a,axis=None,out=None,keepdims=None,*,where=None)
numpy._amax_dispatcher(a,axis=None,out=None,keepdims=None,initial=None,where=None)
numpy._amin_dispatcher(a,axis=None,out=None,keepdims=None,initial=None,where=None)
numpy._any_dispatcher(a,axis=None,out=None,keepdims=None,*,where=np._NoValue)
numpy._argmax_dispatcher(a,axis=None,out=None)
numpy._argmin_dispatcher(a,axis=None,out=None)
numpy._argpartition_dispatcher(a,kth,axis=None,kind=None,order=None)
numpy._argsort_dispatcher(a,axis=None,kind=None,order=None)
numpy._around_dispatcher(a,decimals=None,out=None)
numpy._choose_dispatcher(a,choices,out=None,mode=None)
numpy._clip_dispatcher(a,a_min,a_max,out=None,**kwargs)
numpy._compress_dispatcher(condition,a,axis=None,out=None)
numpy._cumprod_dispatcher(a,axis=None,dtype=None,out=None)
numpy._cumsum_dispatcher(a,axis=None,dtype=None,out=None)
numpy._diagonal_dispatcher(a,offset=None,axis1=None,axis2=None)
numpy._mean_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None,*,where=None)
numpy._ndim_dispatcher(a)
numpy._nonzero_dispatcher(a)
numpy._partition_dispatcher(a,kth,axis=None,kind=None,order=None)
numpy._prod_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None,initial=None,where=None)
numpy._ptp_dispatcher(a,axis=None,out=None,keepdims=None)
numpy._put_dispatcher(a,ind,v,mode=None)
numpy._ravel_dispatcher(a,order=None)
numpy._repeat_dispatcher(a,repeats,axis=None)
numpy._reshape_dispatcher(a,newshape,order=None)
numpy._resize_dispatcher(a,new_shape)
numpy._searchsorted_dispatcher(a,v,side=None,sorter=None)
numpy._shape_dispatcher(a)
numpy._size_dispatcher(a,axis=None)
numpy._sort_dispatcher(a,axis=None,kind=None,order=None)
numpy._squeeze_dispatcher(a,axis=None)
numpy._std_dispatcher(a,axis=None,dtype=None,out=None,ddof=None,keepdims=None,*,where=None)
numpy._sum_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None,initial=None,where=None)
numpy._swapaxes_dispatcher(a,axis1,axis2)
numpy._take_dispatcher(a,indices,axis=None,out=None,mode=None)
numpy._trace_dispatcher(a,offset=None,axis1=None,axis2=None,dtype=None,out=None)
numpy._transpose_dispatcher(a,axes=None)
numpy._var_dispatcher(a,axis=None,dtype=None,out=None,ddof=None,keepdims=None,*,where=None)
numpy._wrapfunc(obj,method,*args,**kwds)
numpy._wrapit(obj,method,*args,**kwds)
numpy._wrapreduction(obj,ufunc,method,axis,dtype,out,**kwargs)
numpy.alen(a)
numpy.all(a,axis=None,out=None,keepdims=np._NoValue,*,where=np._NoValue)
numpy.alltrue(*args,**kwargs)
numpy.any(a,axis=None,out=None,keepdims=np._NoValue,*,where=np._NoValue)
numpy.argmax(a,axis=None,out=None)
numpy.argmin(a,axis=None,out=None)
numpy.argpartition(a,kth,axis=-1,kind='introselect',order=None)
numpy.argsort(a,axis=-1,kind=None,order=None)
numpy.around(a,decimals=0,out=None)
numpy.choose(a,choices,out=None,mode='raise')
numpy.clip(a,a_min,a_max,out=None,**kwargs)
numpy.compress(condition,a,axis=None,out=None)
numpy.core.fromnumeric._alen_dispathcer(a)
numpy.core.fromnumeric._all_dispatcher(a,axis=None,out=None,keepdims=None,*,where=None)
numpy.core.fromnumeric._amax_dispatcher(a,axis=None,out=None,keepdims=None,initial=None,where=None)
numpy.core.fromnumeric._amin_dispatcher(a,axis=None,out=None,keepdims=None,initial=None,where=None)
numpy.core.fromnumeric._any_dispatcher(a,axis=None,out=None,keepdims=None,*,where=np._NoValue)
numpy.core.fromnumeric._argmax_dispatcher(a,axis=None,out=None)
numpy.core.fromnumeric._argmin_dispatcher(a,axis=None,out=None)
numpy.core.fromnumeric._argpartition_dispatcher(a,kth,axis=None,kind=None,order=None)
numpy.core.fromnumeric._argsort_dispatcher(a,axis=None,kind=None,order=None)
numpy.core.fromnumeric._around_dispatcher(a,decimals=None,out=None)
numpy.core.fromnumeric._choose_dispatcher(a,choices,out=None,mode=None)
numpy.core.fromnumeric._clip_dispatcher(a,a_min,a_max,out=None,**kwargs)
numpy.core.fromnumeric._compress_dispatcher(condition,a,axis=None,out=None)
numpy.core.fromnumeric._cumprod_dispatcher(a,axis=None,dtype=None,out=None)
numpy.core.fromnumeric._cumsum_dispatcher(a,axis=None,dtype=None,out=None)
numpy.core.fromnumeric._diagonal_dispatcher(a,offset=None,axis1=None,axis2=None)
numpy.core.fromnumeric._mean_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None,*,where=None)
numpy.core.fromnumeric._ndim_dispatcher(a)
numpy.core.fromnumeric._nonzero_dispatcher(a)
numpy.core.fromnumeric._partition_dispatcher(a,kth,axis=None,kind=None,order=None)
numpy.core.fromnumeric._prod_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None,initial=None,where=None)
numpy.core.fromnumeric._ptp_dispatcher(a,axis=None,out=None,keepdims=None)
numpy.core.fromnumeric._put_dispatcher(a,ind,v,mode=None)
numpy.core.fromnumeric._ravel_dispatcher(a,order=None)
numpy.core.fromnumeric._repeat_dispatcher(a,repeats,axis=None)
numpy.core.fromnumeric._reshape_dispatcher(a,newshape,order=None)
numpy.core.fromnumeric._resize_dispatcher(a,new_shape)
numpy.core.fromnumeric._searchsorted_dispatcher(a,v,side=None,sorter=None)
numpy.core.fromnumeric._shape_dispatcher(a)
numpy.core.fromnumeric._size_dispatcher(a,axis=None)
numpy.core.fromnumeric._sort_dispatcher(a,axis=None,kind=None,order=None)
numpy.core.fromnumeric._squeeze_dispatcher(a,axis=None)
numpy.core.fromnumeric._std_dispatcher(a,axis=None,dtype=None,out=None,ddof=None,keepdims=None,*,where=None)
numpy.core.fromnumeric._sum_dispatcher(a,axis=None,dtype=None,out=None,keepdims=None,initial=None,where=None)
numpy.core.fromnumeric._swapaxes_dispatcher(a,axis1,axis2)
numpy.core.fromnumeric._take_dispatcher(a,indices,axis=None,out=None,mode=None)
numpy.core.fromnumeric._trace_dispatcher(a,offset=None,axis1=None,axis2=None,dtype=None,out=None)
numpy.core.fromnumeric._transpose_dispatcher(a,axes=None)
numpy.core.fromnumeric._var_dispatcher(a,axis=None,dtype=None,out=None,ddof=None,keepdims=None,*,where=None)
numpy.core.fromnumeric._wrapfunc(obj,method,*args,**kwds)
numpy.core.fromnumeric._wrapit(obj,method,*args,**kwds)
numpy.core.fromnumeric._wrapreduction(obj,ufunc,method,axis,dtype,out,**kwargs)
numpy.core.fromnumeric.alen(a)
numpy.core.fromnumeric.all(a,axis=None,out=None,keepdims=np._NoValue,*,where=np._NoValue)
numpy.core.fromnumeric.alltrue(*args,**kwargs)
numpy.core.fromnumeric.amax(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.core.fromnumeric.amin(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.core.fromnumeric.any(a,axis=None,out=None,keepdims=np._NoValue,*,where=np._NoValue)
numpy.core.fromnumeric.argmax(a,axis=None,out=None)
numpy.core.fromnumeric.argmin(a,axis=None,out=None)
numpy.core.fromnumeric.argpartition(a,kth,axis=-1,kind='introselect',order=None)
numpy.core.fromnumeric.argsort(a,axis=-1,kind=None,order=None)
numpy.core.fromnumeric.around(a,decimals=0,out=None)
numpy.core.fromnumeric.choose(a,choices,out=None,mode='raise')
numpy.core.fromnumeric.clip(a,a_min,a_max,out=None,**kwargs)
numpy.core.fromnumeric.compress(condition,a,axis=None,out=None)
numpy.core.fromnumeric.cumprod(a,axis=None,dtype=None,out=None)
numpy.core.fromnumeric.cumproduct(*args,**kwargs)
numpy.core.fromnumeric.cumsum(a,axis=None,dtype=None,out=None)
numpy.core.fromnumeric.diagonal(a,offset=0,axis1=0,axis2=1)
numpy.core.fromnumeric.mean(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,*,where=np._NoValue)
numpy.core.fromnumeric.ndim(a)
numpy.core.fromnumeric.nonzero(a)
numpy.core.fromnumeric.partition(a,kth,axis=-1,kind='introselect',order=None)
numpy.core.fromnumeric.prod(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.core.fromnumeric.product(*args,**kwargs)
numpy.core.fromnumeric.ptp(a,axis=None,out=None,keepdims=np._NoValue)
numpy.core.fromnumeric.put(a,ind,v,mode='raise')
numpy.core.fromnumeric.ravel(a,order='C')
numpy.core.fromnumeric.repeat(a,repeats,axis=None)
numpy.core.fromnumeric.reshape(a,newshape,order='C')
numpy.core.fromnumeric.resize(a,new_shape)
numpy.core.fromnumeric.round_(a,decimals=0,out=None)
numpy.core.fromnumeric.searchsorted(a,v,side='left',sorter=None)
numpy.core.fromnumeric.shape(a)
numpy.core.fromnumeric.size(a,axis=None)
numpy.core.fromnumeric.sometrue(*args,**kwargs)
numpy.core.fromnumeric.sort(a,axis=-1,kind=None,order=None)
numpy.core.fromnumeric.squeeze(a,axis=None)
numpy.core.fromnumeric.std(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,*,where=np._NoValue)
numpy.core.fromnumeric.sum(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.core.fromnumeric.swapaxes(a,axis1,axis2)
numpy.core.fromnumeric.take(a,indices,axis=None,out=None,mode='raise')
numpy.core.fromnumeric.trace(a,offset=0,axis1=0,axis2=1,dtype=None,out=None)
numpy.core.fromnumeric.transpose(a,axes=None)
numpy.core.fromnumeric.var(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,*,where=np._NoValue)
numpy.cumprod(a,axis=None,dtype=None,out=None)
numpy.cumproduct(*args,**kwargs)
numpy.cumsum(a,axis=None,dtype=None,out=None)
numpy.diagonal(a,offset=0,axis1=0,axis2=1)
numpy.max(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.mean(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,*,where=np._NoValue)
numpy.min(a,axis=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.ndim(a)
numpy.nonzero(a)
numpy.partition(a,kth,axis=-1,kind='introselect',order=None)
numpy.prod(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.product(*args,**kwargs)
numpy.ptp(a,axis=None,out=None,keepdims=np._NoValue)
numpy.put(a,ind,v,mode='raise')
numpy.ravel(a,order='C')
numpy.repeat(a,repeats,axis=None)
numpy.reshape(a,newshape,order='C')
numpy.resize(a,new_shape)
numpy.round(a,decimals=0,out=None)
numpy.searchsorted(a,v,side='left',sorter=None)
numpy.shape(a)
numpy.size(a,axis=None)
numpy.sometrue(*args,**kwargs)
numpy.sort(a,axis=-1,kind=None,order=None)
numpy.squeeze(a,axis=None)
numpy.std(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,*,where=np._NoValue)
numpy.sum(a,axis=None,dtype=None,out=None,keepdims=np._NoValue,initial=np._NoValue,where=np._NoValue)
numpy.swapaxes(a,axis1,axis2)
numpy.take(a,indices,axis=None,out=None,mode='raise')
numpy.trace(a,offset=0,axis1=0,axis2=1,dtype=None,out=None)
numpy.transpose(a,axes=None)
numpy.var(a,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue,*,where=np._NoValue)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/fromnumeric.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/overrides.py----------------------------------------
A:numpy.core.overrides.ARRAY_FUNCTION_ENABLED->bool(int(os.environ.get('NUMPY_EXPERIMENTAL_ARRAY_FUNCTION', 1)))
A:numpy.core.overrides.public_api.__doc__->public_api.__doc__.replace('${ARRAY_FUNCTION_LIKE}', array_function_like_doc)
A:numpy.core.overrides.ArgSpec->collections.namedtuple('ArgSpec', 'args varargs keywords defaults')
A:numpy.core.overrides.implementation_spec->ArgSpec(*getargspec(implementation))
A:numpy.core.overrides.dispatcher_spec->ArgSpec(*getargspec(dispatcher))
A:numpy.core.overrides._wrapped_func_source->textwrap.dedent('\n    @functools.wraps(implementation)\n    def {name}(*args, **kwargs):\n        relevant_args = dispatcher(*args, **kwargs)\n        return implement_array_function(\n            implementation, {name}, relevant_args, args, kwargs)\n    ')
A:numpy.core.overrides.source->textwrap.dedent('\n    @functools.wraps(implementation)\n    def {name}(*args, **kwargs):\n        relevant_args = dispatcher(*args, **kwargs)\n        return implement_array_function(\n            implementation, {name}, relevant_args, args, kwargs)\n    ').format(name=implementation.__name__)
A:numpy.core.overrides.source_object->compile(source, filename='<__array_function__ internals>', mode='exec')
numpy.core.overrides.array_function_dispatch(dispatcher,module=None,verify=True,docs_from_dispatcher=False)
numpy.core.overrides.array_function_from_dispatcher(implementation,module=None,verify=True,docs_from_dispatcher=True)
numpy.core.overrides.set_array_function_like_doc(public_api)
numpy.core.overrides.set_module(module)
numpy.core.overrides.verify_matching_signatures(implementation,dispatcher)
numpy.overrides.array_function_dispatch(dispatcher,module=None,verify=True,docs_from_dispatcher=False)
numpy.overrides.array_function_from_dispatcher(implementation,module=None,verify=True,docs_from_dispatcher=True)
numpy.overrides.set_array_function_like_doc(public_api)
numpy.overrides.set_module(module)
numpy.overrides.verify_matching_signatures(implementation,dispatcher)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/einsumfunc.py----------------------------------------
A:numpy.core.einsumfunc.einsum_symbols_set->set(einsum_symbols)
A:numpy.core.einsumfunc.overall_size->_compute_size_by_dict(idx_contraction, size_dictionary)
A:numpy.core.einsumfunc.op_factor->max(1, num_terms - 1)
A:numpy.core.einsumfunc.idx_contract->set()
A:numpy.core.einsumfunc.idx_remain->set(output_subscript).copy()
A:numpy.core.einsumfunc.cont->_find_contraction(con, remaining, output_set)
A:numpy.core.einsumfunc.new_size->_compute_size_by_dict(idx_result, idx_dict)
A:numpy.core.einsumfunc.contract->_find_contraction(contract_inds, input_sets, output_set)
A:numpy.core.einsumfunc.cost->_flop_count(idx_contract, idx_removed, len(contract_inds), dimension_dict)
A:numpy.core.einsumfunc.naive_cost->_flop_count(indices, inner_product, len(input_list), dimension_dict)
A:numpy.core.einsumfunc.comb_iter->itertools.combinations(range(len(input_sets)), 2)
A:numpy.core.einsumfunc.result->_parse_possible_contraction(positions, input_sets, output_set, idx_dict, memory_limit, path_cost, naive_cost)
A:numpy.core.einsumfunc.best->min(known_contractions, key=lambda x: x[0])
A:numpy.core.einsumfunc.known_contractions->_update_other_results(known_contractions, best)
A:numpy.core.einsumfunc.set_left->set(input_left)
A:numpy.core.einsumfunc.set_right->set(input_right)
A:numpy.core.einsumfunc.rs->len(idx_removed)
A:numpy.core.einsumfunc.subscripts->','.join(split_subscripts)
A:numpy.core.einsumfunc.tmp_operands->list(operands)
A:numpy.core.einsumfunc.s->operator.index(s)
A:numpy.core.einsumfunc.used->','.join(split_subscripts).replace('.', '').replace(',', '').replace('->', '')
A:numpy.core.einsumfunc.unused->list(einsum_symbols_set - set(used))
A:numpy.core.einsumfunc.ellipse_inds->''.join(unused)
A:numpy.core.einsumfunc.(input_tmp, output_sub)->','.join(split_subscripts).split('->')
A:numpy.core.einsumfunc.split_subscripts->','.join(split_subscripts).split(',')
A:numpy.core.einsumfunc.ellipse_count->max(operands[num].ndim, 1)
A:numpy.core.einsumfunc.split_subscripts[num]->sub.replace('...', rep_inds)
A:numpy.core.einsumfunc.tmp_subscripts->','.join(split_subscripts).replace(',', '')
A:numpy.core.einsumfunc.normal_inds->''.join(sorted(set(output_subscript) - set(out_ellipse)))
A:numpy.core.einsumfunc.(input_subscripts, output_subscript)->','.join(split_subscripts).split('->')
A:numpy.core.einsumfunc.memory_limit->int(path_type[1])
A:numpy.core.einsumfunc.(input_subscripts, output_subscript, operands)->_parse_einsum_input(operands)
A:numpy.core.einsumfunc.input_list->input_subscripts.split(',')
A:numpy.core.einsumfunc.output_set->set(output_subscript)
A:numpy.core.einsumfunc.indices->set(input_subscripts.replace(',', ''))
A:numpy.core.einsumfunc.max_size->max(size_list)
A:numpy.core.einsumfunc.path->_optimal_path(input_sets, output_set, dimension_dict, memory_arg)
A:numpy.core.einsumfunc.contract_inds->tuple(sorted(list(contract_inds), reverse=True))
A:numpy.core.einsumfunc.bcast->set()
A:numpy.core.einsumfunc.do_blas->_can_dot(tmp_inputs, out_inds, idx_removed)
A:numpy.core.einsumfunc.idx_result->''.join([x[1] for x in sorted(sort_result)])
A:numpy.core.einsumfunc.max_i->max(size_list)
A:numpy.core.einsumfunc.(operands, contraction_list)->einsum_path(*operands, optimize=optimize, einsum_call=True)
A:numpy.core.einsumfunc.output_order->kwargs.pop('order', 'K')
A:numpy.core.einsumfunc.(input_str, results_index)->einsum_str.split('->')
A:numpy.core.einsumfunc.(input_left, input_right)->input_str.split(',')
A:numpy.core.einsumfunc.tensor_result->tensor_result.replace(s, '').replace(s, '')
A:numpy.core.einsumfunc.new_view->c_einsum(einsum_str, *tmp_operands, **kwargs)
numpy._can_dot(inputs,result,idx_removed)
numpy._compute_size_by_dict(indices,idx_dict)
numpy._einsum_dispatcher(*operands,out=None,optimize=None,**kwargs)
numpy._einsum_path_dispatcher(*operands,optimize=None,einsum_call=None)
numpy._find_contraction(positions,input_sets,output_set)
numpy._flop_count(idx_contraction,inner,num_terms,size_dictionary)
numpy._greedy_path(input_sets,output_set,idx_dict,memory_limit)
numpy._optimal_path(input_sets,output_set,idx_dict,memory_limit)
numpy._parse_einsum_input(operands)
numpy._parse_possible_contraction(positions,input_sets,output_set,idx_dict,memory_limit,path_cost,naive_cost)
numpy._update_other_results(results,best)
numpy.core.einsumfunc._can_dot(inputs,result,idx_removed)
numpy.core.einsumfunc._compute_size_by_dict(indices,idx_dict)
numpy.core.einsumfunc._einsum_dispatcher(*operands,out=None,optimize=None,**kwargs)
numpy.core.einsumfunc._einsum_path_dispatcher(*operands,optimize=None,einsum_call=None)
numpy.core.einsumfunc._find_contraction(positions,input_sets,output_set)
numpy.core.einsumfunc._flop_count(idx_contraction,inner,num_terms,size_dictionary)
numpy.core.einsumfunc._greedy_path(input_sets,output_set,idx_dict,memory_limit)
numpy.core.einsumfunc._optimal_path(input_sets,output_set,idx_dict,memory_limit)
numpy.core.einsumfunc._parse_einsum_input(operands)
numpy.core.einsumfunc._parse_possible_contraction(positions,input_sets,output_set,idx_dict,memory_limit,path_cost,naive_cost)
numpy.core.einsumfunc._update_other_results(results,best)
numpy.core.einsumfunc.einsum(*operands,out=None,optimize=False,**kwargs)
numpy.core.einsumfunc.einsum_path(*operands,optimize='greedy',einsum_call=False)
numpy.einsum(*operands,out=None,optimize=False,**kwargs)
numpy.einsum_path(*operands,optimize='greedy',einsum_call=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/einsumfunc.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/multiarray.py----------------------------------------
A:numpy.core.multiarray.array_function_from_c_func_and_dispatcher->functools.partial(overrides.array_function_from_dispatcher, module='numpy', docs_from_dispatcher=True, verify=False)
A:numpy.core.multiarray.arrays->list(arrays)
numpy.core.multiarray.bincount(x,weights=None,minlength=None)
numpy.core.multiarray.busday_count(begindates,enddates,weekmask=None,holidays=None,busdaycal=None,out=None)
numpy.core.multiarray.busday_offset(dates,offsets,roll=None,weekmask=None,holidays=None,busdaycal=None,out=None)
numpy.core.multiarray.can_cast(from_,to,casting=None)
numpy.core.multiarray.concatenate(arrays,axis=None,out=None,*,dtype=None,casting=None)
numpy.core.multiarray.copyto(dst,src,casting=None,where=None)
numpy.core.multiarray.datetime_as_string(arr,unit=None,timezone=None,casting=None)
numpy.core.multiarray.dot(a,b,out=None)
numpy.core.multiarray.empty_like(prototype,dtype=None,order=None,subok=None,shape=None)
numpy.core.multiarray.inner(a,b)
numpy.core.multiarray.is_busday(dates,weekmask=None,holidays=None,busdaycal=None,out=None)
numpy.core.multiarray.lexsort(keys,axis=None)
numpy.core.multiarray.may_share_memory(a,b,max_work=None)
numpy.core.multiarray.min_scalar_type(a)
numpy.core.multiarray.packbits(a,axis=None,bitorder='big')
numpy.core.multiarray.putmask(a,mask,values)
numpy.core.multiarray.ravel_multi_index(multi_index,dims,mode=None,order=None)
numpy.core.multiarray.result_type(*arrays_and_dtypes)
numpy.core.multiarray.shares_memory(a,b,max_work=None)
numpy.core.multiarray.unpackbits(a,axis=None,count=None,bitorder='big')
numpy.core.multiarray.unravel_index(indices,shape=None,order=None)
numpy.core.multiarray.vdot(a,b)
numpy.core.multiarray.where(condition,x=None,y=None)
numpy.multiarray.bincount(x,weights=None,minlength=None)
numpy.multiarray.busday_count(begindates,enddates,weekmask=None,holidays=None,busdaycal=None,out=None)
numpy.multiarray.busday_offset(dates,offsets,roll=None,weekmask=None,holidays=None,busdaycal=None,out=None)
numpy.multiarray.can_cast(from_,to,casting=None)
numpy.multiarray.concatenate(arrays,axis=None,out=None,*,dtype=None,casting=None)
numpy.multiarray.copyto(dst,src,casting=None,where=None)
numpy.multiarray.datetime_as_string(arr,unit=None,timezone=None,casting=None)
numpy.multiarray.dot(a,b,out=None)
numpy.multiarray.empty_like(prototype,dtype=None,order=None,subok=None,shape=None)
numpy.multiarray.inner(a,b)
numpy.multiarray.is_busday(dates,weekmask=None,holidays=None,busdaycal=None,out=None)
numpy.multiarray.lexsort(keys,axis=None)
numpy.multiarray.may_share_memory(a,b,max_work=None)
numpy.multiarray.min_scalar_type(a)
numpy.multiarray.packbits(a,axis=None,bitorder='big')
numpy.multiarray.putmask(a,mask,values)
numpy.multiarray.ravel_multi_index(multi_index,dims,mode=None,order=None)
numpy.multiarray.result_type(*arrays_and_dtypes)
numpy.multiarray.shares_memory(a,b,max_work=None)
numpy.multiarray.unpackbits(a,axis=None,count=None,bitorder='big')
numpy.multiarray.unravel_index(indices,shape=None,order=None)
numpy.multiarray.vdot(a,b)
numpy.multiarray.where(condition,x=None,y=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/cversions.py----------------------------------------
A:numpy.core.cversions.curdir->dirname(__file__)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/umath_tests.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/function_base.py----------------------------------------
A:numpy.core.function_base.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy')
A:numpy.core.function_base.num->operator.index(num)
A:numpy.core.function_base.dt->result_type(start, stop, float(num), _nx.zeros((), dtype))
A:numpy.core.function_base.y->linspace(start, stop, num=num, endpoint=endpoint, axis=axis)
A:numpy.core.function_base._mult_inplace->_nx.isscalar(delta)
A:numpy.core.function_base.start->start.astype(dt, copy=True).astype(dt, copy=True)
A:numpy.core.function_base.stop->stop.astype(dt, copy=True).astype(dt, copy=True)
A:numpy.core.function_base.dtype->_nx.dtype(dtype)
A:numpy.core.function_base.out_sign->_nx.ones(_nx.broadcast(start, stop).shape, dt)
A:numpy.core.function_base.log_start->_nx.log10(start)
A:numpy.core.function_base.log_stop->_nx.log10(stop)
A:numpy.core.function_base.result->_nx.moveaxis(result, 0, axis)
A:numpy.core.function_base.new->getattr(__import__(place, globals(), {}, [obj]), obj)
numpy._add_docstring(obj,doc,warn_on_python)
numpy._geomspace_dispatcher(start,stop,num=None,endpoint=None,dtype=None,axis=None)
numpy._linspace_dispatcher(start,stop,num=None,endpoint=None,retstep=None,dtype=None,axis=None)
numpy._logspace_dispatcher(start,stop,num=None,endpoint=None,base=None,dtype=None,axis=None)
numpy._needs_add_docstring(obj)
numpy.add_newdoc(place,obj,doc,warn_on_python=True)
numpy.core.function_base._add_docstring(obj,doc,warn_on_python)
numpy.core.function_base._geomspace_dispatcher(start,stop,num=None,endpoint=None,dtype=None,axis=None)
numpy.core.function_base._linspace_dispatcher(start,stop,num=None,endpoint=None,retstep=None,dtype=None,axis=None)
numpy.core.function_base._logspace_dispatcher(start,stop,num=None,endpoint=None,base=None,dtype=None,axis=None)
numpy.core.function_base._needs_add_docstring(obj)
numpy.core.function_base.add_newdoc(place,obj,doc,warn_on_python=True)
numpy.core.function_base.geomspace(start,stop,num=50,endpoint=True,dtype=None,axis=0)
numpy.core.function_base.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0)
numpy.core.function_base.logspace(start,stop,num=50,endpoint=True,base=10.0,dtype=None,axis=0)
numpy.geomspace(start,stop,num=50,endpoint=True,dtype=None,axis=0)
numpy.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0)
numpy.logspace(start,stop,num=50,endpoint=True,base=10.0,dtype=None,axis=0)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/function_base.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/umath.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/_dtype_ctypes.py----------------------------------------
A:numpy.core._dtype_ctypes.effective_pack->min(t._pack_, ctypes.alignment(ftyp))
numpy._dtype_ctypes._from_ctypes_array(t)
numpy._dtype_ctypes._from_ctypes_scalar(t)
numpy._dtype_ctypes._from_ctypes_structure(t)
numpy._dtype_ctypes._from_ctypes_union(t)
numpy._dtype_ctypes.dtype_from_ctypes_type(t)
numpy.core._dtype_ctypes._from_ctypes_array(t)
numpy.core._dtype_ctypes._from_ctypes_scalar(t)
numpy.core._dtype_ctypes._from_ctypes_structure(t)
numpy.core._dtype_ctypes._from_ctypes_union(t)
numpy.core._dtype_ctypes.dtype_from_ctypes_type(t)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/setup.py----------------------------------------
A:numpy.core.setup.out->copy.deepcopy(pickle.loads(self._check_complex))
A:numpy.core.setup.self._check_types->pickle.dumps(out)
A:numpy.core.setup.self._check_ieee_macros->pickle.dumps(out)
A:numpy.core.setup.self._check_complex->pickle.dumps(out)
A:numpy.core.setup.a->get_build_architecture()
A:numpy.core.setup.decl->dict([(f, True) for f in flist])
A:numpy.core.setup.st->config.get_config_cmd().try_link('int main(void) { return 0;}')
A:numpy.core.setup.h->h.replace('.', '_').replace(os.path.sep, '_').replace('.', '_').replace(os.path.sep, '_')
A:numpy.core.setup.m->__import__(module_name)
A:numpy.core.setup.py_symbol->fname2def('decl_%s' % f)
A:numpy.core.setup.already_declared->config.get_config_cmd().check_decl('SIZEOF_%s' % sym2def(type), headers=['Python.h'])
A:numpy.core.setup.result->config.get_config_cmd().check_header('Python.h')
A:numpy.core.setup.res->config.get_config_cmd().check_type_size('long long', expected=expected['long long'])
A:numpy.core.setup.mathlib->os.environ.get('MATHLIB')
A:numpy.core.setup.config->Configuration('core', parent_package, top_path)
A:numpy.core.setup.codegen_dir->join(local_dir, 'code_generators')
A:numpy.core.setup.generate_umath_py->join(codegen_dir, 'generate_umath.py')
A:numpy.core.setup.n->dot_join(config.name, 'generate_umath')
A:numpy.core.setup.generate_umath->npy_load_module('_'.join(n.split('.')), generate_umath_py, ('.py', 'U', 1))
A:numpy.core.setup.cocache->CallOnceOnly()
A:numpy.core.setup.target->join(build_dir, header_dir, '__umath_generated.c')
A:numpy.core.setup.d->os.path.dirname(target)
A:numpy.core.setup.config_cmd->Configuration('core', parent_package, top_path).get_config_cmd()
A:numpy.core.setup.(moredefs, ignored)->CallOnceOnly().check_types(config_cmd, ext, build_dir)
A:numpy.core.setup.mathlibs->check_mathlib(config_cmd)
A:numpy.core.setup.inline->Configuration('core', parent_package, top_path).get_config_cmd().check_inline()
A:numpy.core.setup.rep->check_long_double_representation(config_cmd)
A:numpy.core.setup.value->line[len(s):].strip()
A:numpy.core.setup.incl_dir->os.path.dirname(target)
A:numpy.core.setup.(ignored, moredefs)->CallOnceOnly().check_types(config_cmd, ext, build_dir)
A:numpy.core.setup.hidden_visibility->visibility_define(config_cmd)
A:numpy.core.setup.script->join(codegen_dir, module_name + '.py')
A:numpy.core.setup.(h_file, c_file, doc_file)->__import__(module_name).generate_api(os.path.join(build_dir, header_dir))
A:numpy.core.setup.generate_numpy_api->generate_api_func('generate_numpy_api')
A:numpy.core.setup.generate_ufunc_api->generate_api_func('generate_ufunc_api')
A:numpy.core.setup.subst_dict->dict([('sep', os.path.sep), ('pkgname', 'numpy.core')])
A:numpy.core.setup.mlibs->check_mathlib(config_cmd)
A:numpy.core.setup.posix_mlib->' '.join(['-l%s' % l for l in mlibs])
A:numpy.core.setup.msvc_mlib->' '.join(['%s.lib' % l for l in mlibs])
A:numpy.core.setup.blas_info->get_info('blas_opt', 0)
A:numpy.core.setup.dir->os.path.dirname(target)
numpy.core.setup.CallOnceOnly(self)
numpy.core.setup.CallOnceOnly.__init__(self)
numpy.core.setup.CallOnceOnly.check_complex(self,*a,**kw)
numpy.core.setup.CallOnceOnly.check_ieee_macros(self,*a,**kw)
numpy.core.setup.CallOnceOnly.check_types(self,*a,**kw)
numpy.core.setup.check_complex(config,mathlibs)
numpy.core.setup.check_ieee_macros(config)
numpy.core.setup.check_math_capabilities(config,ext,moredefs,mathlibs)
numpy.core.setup.check_mathlib(config_cmd)
numpy.core.setup.check_types(config_cmd,ext,build_dir)
numpy.core.setup.configuration(parent_package='',top_path=None)
numpy.core.setup.is_npy_no_signal()
numpy.core.setup.is_npy_no_smp()
numpy.core.setup.pythonlib_dir()
numpy.core.setup.visibility_define(config)
numpy.core.setup.win32_checks(deflist)
numpy.setup.CallOnceOnly(self)
numpy.setup.CallOnceOnly.check_complex(self,*a,**kw)
numpy.setup.CallOnceOnly.check_ieee_macros(self,*a,**kw)
numpy.setup.CallOnceOnly.check_types(self,*a,**kw)
numpy.setup.check_complex(config,mathlibs)
numpy.setup.check_ieee_macros(config)
numpy.setup.check_math_capabilities(config,ext,moredefs,mathlibs)
numpy.setup.check_mathlib(config_cmd)
numpy.setup.check_types(config_cmd,ext,build_dir)
numpy.setup.configuration(parent_package='',top_path=None)
numpy.setup.is_npy_no_signal()
numpy.setup.is_npy_no_smp()
numpy.setup.pythonlib_dir()
numpy.setup.visibility_define(config)
numpy.setup.win32_checks(deflist)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/setup_common.py----------------------------------------
A:numpy.core.setup_common.v->config.get_version('../_version.py')
A:numpy.core.setup_common.m->__import__('genapi')
A:numpy.core.setup_common.numpy_api->__import__('numpy_api')
A:numpy.core.setup_common.curapi_hash->__import__('genapi').fullapi_hash(numpy_api.full_api)
A:numpy.core.setup_common.apis_hash->__import__('genapi').get_versions_hash()
A:numpy.core.setup_common.(curapi_hash, api_hash)->get_api_versions(apiversion, codegen_dir)
A:numpy.core.setup_common.define->symbol.replace(' ', '_')
A:numpy.core.setup_common.newcompiler->cmd.compiler.cc_exe.replace(' -ipo', '')
A:numpy.core.setup_common.(src, obj)->cmd._compile(body, None, None, 'c')
A:numpy.core.setup_common.ltype->long_double_representation(pyod('_configtest'))
A:numpy.core.setup_common.body->body.replace('struct', 'volatile struct').replace('struct', 'volatile struct')
A:numpy.core.setup_common.saw->copy.copy(read)
A:numpy.core.setup_common.has_optimize->cmd.try_compile(textwrap.dedent('        __attribute__((optimize("O3"))) void right_shift() {}\n        '), None, None)
A:numpy.core.setup_common.no_err->cmd.try_compile(textwrap.dedent('        typedef long the_type;  /* fails also for unsigned and long long */\n        __attribute__((optimize("O3"))) void right_shift(the_type in2, the_type *ip1, int n) {\n            for (int i = 0; i < n; i++) {\n                if (in2 < (the_type)sizeof(the_type) * 8) {\n                    ip1[i] = ip1[i] >> in2;\n                }\n            }\n        }\n        '), None, None)
numpy.core.setup_common.MismatchCAPIWarning(Warning)
numpy.core.setup_common.check_api_version(apiversion,codegen_dir)
numpy.core.setup_common.check_for_right_shift_internal_compiler_error(cmd)
numpy.core.setup_common.check_long_double_representation(cmd)
numpy.core.setup_common.fname2def(name)
numpy.core.setup_common.get_api_versions(apiversion,codegen_dir)
numpy.core.setup_common.is_released(config)
numpy.core.setup_common.long_double_representation(lines)
numpy.core.setup_common.pyod(filename)
numpy.core.setup_common.sym2def(symbol)
numpy.core.setup_common.type2def(symbol)
numpy.setup_common.MismatchCAPIWarning(Warning)
numpy.setup_common.check_api_version(apiversion,codegen_dir)
numpy.setup_common.check_for_right_shift_internal_compiler_error(cmd)
numpy.setup_common.check_long_double_representation(cmd)
numpy.setup_common.fname2def(name)
numpy.setup_common.get_api_versions(apiversion,codegen_dir)
numpy.setup_common.is_released(config)
numpy.setup_common.long_double_representation(lines)
numpy.setup_common.pyod(filename)
numpy.setup_common.sym2def(symbol)
numpy.setup_common.type2def(symbol)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/records.py----------------------------------------
A:numpy.core.records.dtype->sb.dtype(dtype)
A:numpy.core.records.self._nfields->len(keys)
A:numpy.core.records.names->names.split(',').split(',')
A:numpy.core.records._dup->find_duplicate(self._names)
A:numpy.core.records.res->sb.array(recList, dtype=descr).view(recarray)
A:numpy.core.records.obj->obj.view(dtype).view(dtype)
A:numpy.core.records.maxlen->max((len(name) for name in names))
A:numpy.core.records.descr->sb.dtype(dtype)
A:numpy.core.records.self->ndarray.__new__(subtype, shape, (record, descr), buffer=buf, offset=offset, strides=strides, order=order)
A:numpy.core.records.val->sb.dtype((record, val))
A:numpy.core.records.ret->object.__setattr__(self, attr, val)
A:numpy.core.records.repr_dtype->sb.dtype((nt.void, repr_dtype))
A:numpy.core.records.lst->sb.array2string(self, separator=', ', prefix=prefix, suffix=',')
A:numpy.core.records.shape->tuple(shape)
A:numpy.core.records.nn->len(d0)
A:numpy.core.records._array->recarray(shape, descr)
A:numpy.core.records.retval->sb.array(recList, dtype=descr)
A:numpy.core.records._array[k]->tuple(recList[k])
A:numpy.core.records.pos->fd.tell()
A:numpy.core.records.ctx->open(os_fspath(fd), 'rb')
A:numpy.core.records.size->get_remaining_size(fd)
A:numpy.core.records.shapeprod->sb.array(shape).prod(dtype=nt.intp)
A:numpy.core.records.nbytesread->fd.readinto(_array.data)
A:numpy.core.records.new->new.copy().copy()
A:numpy.core.records.interface->getattr(obj, '__array_interface__', None)
numpy.core.records._deprecate_shape_0_as_None(shape)
numpy.core.records.array(obj,dtype=None,shape=None,offset=0,strides=None,formats=None,names=None,titles=None,aligned=False,byteorder=None,copy=True)
numpy.core.records.find_duplicate(list)
numpy.core.records.format_parser(self,formats,names,titles,aligned=False,byteorder=None)
numpy.core.records.format_parser.__init__(self,formats,names,titles,aligned=False,byteorder=None)
numpy.core.records.format_parser._createdtype(self,byteorder)
numpy.core.records.format_parser._parseFormats(self,formats,aligned=False)
numpy.core.records.format_parser._setfieldnames(self,names,titles)
numpy.core.records.fromarrays(arrayList,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.core.records.fromfile(fd,dtype=None,shape=None,offset=0,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.core.records.fromrecords(recList,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.core.records.fromstring(datastring,dtype=None,shape=None,offset=0,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.core.records.get_remaining_size(fd)
numpy.core.records.recarray(subtype,shape,dtype=None,buf=None,offset=0,strides=None,formats=None,names=None,titles=None,byteorder=None,aligned=False,order='C')
numpy.core.records.recarray.__array_finalize__(self,obj)
numpy.core.records.recarray.__getattribute__(self,attr)
numpy.core.records.recarray.__getitem__(self,indx)
numpy.core.records.recarray.__new__(subtype,shape,dtype=None,buf=None,offset=0,strides=None,formats=None,names=None,titles=None,byteorder=None,aligned=False,order='C')
numpy.core.records.recarray.__repr__(self)
numpy.core.records.recarray.__setattr__(self,attr,val)
numpy.core.records.recarray.field(self,attr,val=None)
numpy.core.records.record(nt.void)
numpy.core.records.record.__getattribute__(self,attr)
numpy.core.records.record.__getitem__(self,indx)
numpy.core.records.record.__repr__(self)
numpy.core.records.record.__setattr__(self,attr,val)
numpy.core.records.record.__str__(self)
numpy.core.records.record.pprint(self)
numpy.format_parser(self,formats,names,titles,aligned=False,byteorder=None)
numpy.format_parser._createdtype(self,byteorder)
numpy.format_parser._parseFormats(self,formats,aligned=False)
numpy.format_parser._setfieldnames(self,names,titles)
numpy.recarray(subtype,shape,dtype=None,buf=None,offset=0,strides=None,formats=None,names=None,titles=None,byteorder=None,aligned=False,order='C')
numpy.recarray.__array_finalize__(self,obj)
numpy.recarray.__getattribute__(self,attr)
numpy.recarray.__getitem__(self,indx)
numpy.recarray.__repr__(self)
numpy.recarray.__setattr__(self,attr,val)
numpy.recarray.field(self,attr,val=None)
numpy.record(nt.void)
numpy.record.__getattribute__(self,attr)
numpy.record.__getitem__(self,indx)
numpy.record.__repr__(self)
numpy.record.__setattr__(self,attr,val)
numpy.record.__str__(self)
numpy.record.pprint(self)
numpy.records._deprecate_shape_0_as_None(shape)
numpy.records.array(obj,dtype=None,shape=None,offset=0,strides=None,formats=None,names=None,titles=None,aligned=False,byteorder=None,copy=True)
numpy.records.find_duplicate(list)
numpy.records.fromarrays(arrayList,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.records.fromfile(fd,dtype=None,shape=None,offset=0,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.records.fromrecords(recList,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.records.fromstring(datastring,dtype=None,shape=None,offset=0,formats=None,names=None,titles=None,aligned=False,byteorder=None)
numpy.records.get_remaining_size(fd)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/getlimits.py----------------------------------------
A:numpy.core.getlimits.a->a.copy().copy()
A:numpy.core.getlimits.self.epsilonself.eps->float_to_float(eps)
A:numpy.core.getlimits.self.epsneg->float_to_float(epsneg)
A:numpy.core.getlimits.self.xmaxself.huge->float_to_float(huge)
A:numpy.core.getlimits.self.xminself.tiny->float_to_float(tiny)
A:numpy.core.getlimits.self.ibeta->params['itype'](ibeta)
A:numpy.core.getlimits.self.precision->int(-log10(self.eps))
A:numpy.core.getlimits.self.resolution->float_to_float(float_conv(10) ** (-self.precision))
A:numpy.core.getlimits.self._str_eps->_get_machar(dtype)._str_eps.strip()
A:numpy.core.getlimits.self._str_epsneg->_get_machar(dtype)._str_epsneg.strip()
A:numpy.core.getlimits.self._str_xmin->float_to_str(self.xmin)
A:numpy.core.getlimits.self._str_xmax->float_to_str(self.xmax)
A:numpy.core.getlimits.self._str_resolution->_get_machar(dtype)._str_resolution.strip()
A:numpy.core.getlimits.float16_ma->MachArLike(f16, machep=-10, negep=-11, minexp=-14, maxexp=16, it=10, iexp=5, ibeta=2, irnd=5, ngrd=0, eps=exp2(f16(-10)), epsneg=exp2(f16(-11)), huge=f16(65504), tiny=f16(2 ** (-14)))
A:numpy.core.getlimits.float32_ma->MachArLike(f32, machep=-23, negep=-24, minexp=-126, maxexp=128, it=23, iexp=8, ibeta=2, irnd=5, ngrd=0, eps=exp2(f32(-23)), epsneg=exp2(f32(-24)), huge=f32((1 - 2 ** (-24)) * 2 ** 128), tiny=exp2(f32(-126)))
A:numpy.core.getlimits.float64_ma->MachArLike(f64, machep=-52, negep=-53, minexp=-1022, maxexp=1024, it=52, iexp=11, ibeta=2, irnd=5, ngrd=0, eps=2.0 ** (-52.0), epsneg=epsneg_f64, huge=(1.0 - epsneg_f64) / tiny_f64 * f64(4), tiny=tiny_f64)
A:numpy.core.getlimits.epsneg_f128->exp2(ld(-113))
A:numpy.core.getlimits.tiny_f128->exp2(ld(-16382))
A:numpy.core.getlimits.float128_ma->MachArLike(ld, machep=-112, negep=-113, minexp=-16382, maxexp=16384, it=112, iexp=15, ibeta=2, irnd=5, ngrd=0, eps=exp2(ld(-112)), epsneg=epsneg_f128, huge=huge_f128, tiny=tiny_f128)
A:numpy.core.getlimits.epsneg_f80->exp2(ld(-64))
A:numpy.core.getlimits.tiny_f80->exp2(ld(-16382))
A:numpy.core.getlimits.float80_ma->MachArLike(ld, machep=-63, negep=-64, minexp=-16382, maxexp=16384, it=63, iexp=15, ibeta=2, irnd=5, ngrd=0, eps=exp2(ld(-63)), epsneg=epsneg_f80, huge=huge_f80, tiny=tiny_f80)
A:numpy.core.getlimits.float_dd_ma->MachArLike(ld, machep=-105, negep=-106, minexp=-1022, maxexp=1024, it=105, iexp=11, ibeta=2, irnd=5, ngrd=0, eps=exp2(ld(-105)), epsneg=exp2(ld(-106)), huge=huge_dd, tiny=exp2(ld(-1022)))
A:numpy.core.getlimits.params->_MACHAR_PARAMS.get(ftype)
A:numpy.core.getlimits.key->ftype('-0.1').newbyteorder('<').tobytes()
A:numpy.core.getlimits.ma_like->_KNOWN_TYPES.get(key)
A:numpy.core.getlimits.dtype->numeric.dtype(type(dtype))
A:numpy.core.getlimits.obj->object.__new__(cls)._init(dtype)
A:numpy.core.getlimits.newdtype->numeric.obj2sctype(dtype)
A:numpy.core.getlimits.self.dtype->numeric.dtype(type(int_type))
A:numpy.core.getlimits.machar->_get_machar(dtype)
A:numpy.core.getlimits.self._str_tiny->_get_machar(dtype)._str_xmin.strip()
A:numpy.core.getlimits.self._str_max->_get_machar(dtype)._str_xmax.strip()
A:numpy.core.getlimits.d->self.__dict__.copy()
A:numpy.core.getlimits.val->int((1 << self.bits - 1) - 1)
numpy.MachArLike(self,ftype,*,eps,epsneg,huge,tiny,ibeta,**kwargs)
numpy._discovered_machar(ftype)
numpy._fr0(a)
numpy._fr1(a)
numpy._get_machar(ftype)
numpy._register_known_types()
numpy._register_type(machar,bytepat)
numpy.core.getlimits.MachArLike(self,ftype,*,eps,epsneg,huge,tiny,ibeta,**kwargs)
numpy.core.getlimits.MachArLike.__init__(self,ftype,*,eps,epsneg,huge,tiny,ibeta,**kwargs)
numpy.core.getlimits._discovered_machar(ftype)
numpy.core.getlimits._fr0(a)
numpy.core.getlimits._fr1(a)
numpy.core.getlimits._get_machar(ftype)
numpy.core.getlimits._register_known_types()
numpy.core.getlimits._register_type(machar,bytepat)
numpy.core.getlimits.finfo(cls,dtype)
numpy.core.getlimits.finfo.__new__(cls,dtype)
numpy.core.getlimits.finfo.__repr__(self)
numpy.core.getlimits.finfo.__str__(self)
numpy.core.getlimits.finfo._init(self,dtype)
numpy.core.getlimits.iinfo(self,int_type)
numpy.core.getlimits.iinfo.__init__(self,int_type)
numpy.core.getlimits.iinfo.__repr__(self)
numpy.core.getlimits.iinfo.__str__(self)
numpy.core.getlimits.iinfo.max(self)
numpy.core.getlimits.iinfo.min(self)
numpy.finfo(cls,dtype)
numpy.finfo.__repr__(self)
numpy.finfo.__str__(self)
numpy.finfo._init(self,dtype)
numpy.iinfo(self,int_type)
numpy.iinfo.__repr__(self)
numpy.iinfo.__str__(self)
numpy.iinfo.max(self)
numpy.iinfo.min(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/generate_numpy_api.py----------------------------------------
A:numpy.core.generate_numpy_api.h_file->os.path.join(output_dir, '__%s.h' % basename)
A:numpy.core.generate_numpy_api.c_file->os.path.join(output_dir, '__%s.c' % basename)
A:numpy.core.generate_numpy_api.d_file->os.path.join(output_dir, '%s.txt' % basename)
A:numpy.core.generate_numpy_api.multiarray_api_index->genapi.merge_api_dicts(multiarray_api)
A:numpy.core.generate_numpy_api.numpyapi_list->genapi.get_api_functions('NUMPY_API', multiarray_funcs)
A:numpy.core.generate_numpy_api.ordered_funcs_api->genapi.order_dict(multiarray_funcs)
A:numpy.core.generate_numpy_api.multiarray_api_dict[f.name]->FunctionApi(f.name, index, annotations, f.return_type, f.args, api_name)
A:numpy.core.generate_numpy_api.multiarray_api_dict[name]->TypeApi(name, index, 'PyTypeObject', api_name, internal_type)
A:numpy.core.generate_numpy_api.keys_dict->set(multiarray_api_dict.keys())
A:numpy.core.generate_numpy_api.keys_index->set(multiarray_api_index.keys())
numpy.core.generate_numpy_api.do_generate_api(targets,sources)
numpy.core.generate_numpy_api.generate_api(output_dir,force=False)
numpy.generate_numpy_api.do_generate_api(targets,sources)
numpy.generate_numpy_api.generate_api(output_dir,force=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/_methods.py----------------------------------------
A:numpy.core._methods.axis->tuple(range(arr.ndim))
A:numpy.core._methods.items->umr_sum(broadcast_to(where, arr.shape), axis, nt.intp, None, keepdims)
A:numpy.core._methods.max->float('inf')
A:numpy.core._methods.arr->asanyarray(a)
A:numpy.core._methods.rcount->numpy.core.umath.maximum(rcount - ddof, 0)
A:numpy.core._methods.dtype->numpy.core.multiarray.dtype('f8')
A:numpy.core._methods.ret->numpy.core.umath.sqrt(ret)
A:numpy.core._methods.arrmean->arrmean.dtype.type(arrmean / rcount).dtype.type(arrmean / rcount)
A:numpy.core._methods.div->numpy.core.umath.maximum(rcount - ddof, 0).reshape(arrmean.shape)
A:numpy.core._methods.x->numpy.core.umath.multiply(x, x, out=x)
A:numpy.core._methods.xv->numpy.core.umath.multiply(x, x, out=x).view(dtype=(_complex_to_float[x.dtype], (2,)))
A:numpy.core._methods.ctx->open(os_fspath(file), 'wb')
numpy._methods._all(a,axis=None,dtype=None,out=None,keepdims=False,*,where=True)
numpy._methods._amax(a,axis=None,out=None,keepdims=False,initial=_NoValue,where=True)
numpy._methods._amin(a,axis=None,out=None,keepdims=False,initial=_NoValue,where=True)
numpy._methods._any(a,axis=None,dtype=None,out=None,keepdims=False,*,where=True)
numpy._methods._clip(a,min=None,max=None,out=None,*,casting=None,**kwargs)
numpy._methods._clip_dep_invoke_with_casting(ufunc,*args,out=None,casting=None,**kwargs)
numpy._methods._clip_dep_is_byte_swapped(a)
numpy._methods._clip_dep_is_scalar_nan(a)
numpy._methods._count_reduce_items(arr,axis,keepdims=False,where=True)
numpy._methods._dump(self,file,protocol=2)
numpy._methods._dumps(self,protocol=2)
numpy._methods._mean(a,axis=None,dtype=None,out=None,keepdims=False,*,where=True)
numpy._methods._prod(a,axis=None,dtype=None,out=None,keepdims=False,initial=_NoValue,where=True)
numpy._methods._ptp(a,axis=None,out=None,keepdims=False)
numpy._methods._std(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False,*,where=True)
numpy._methods._sum(a,axis=None,dtype=None,out=None,keepdims=False,initial=_NoValue,where=True)
numpy._methods._var(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False,*,where=True)
numpy.core._methods._all(a,axis=None,dtype=None,out=None,keepdims=False,*,where=True)
numpy.core._methods._amax(a,axis=None,out=None,keepdims=False,initial=_NoValue,where=True)
numpy.core._methods._amin(a,axis=None,out=None,keepdims=False,initial=_NoValue,where=True)
numpy.core._methods._any(a,axis=None,dtype=None,out=None,keepdims=False,*,where=True)
numpy.core._methods._clip(a,min=None,max=None,out=None,*,casting=None,**kwargs)
numpy.core._methods._clip_dep_invoke_with_casting(ufunc,*args,out=None,casting=None,**kwargs)
numpy.core._methods._clip_dep_is_byte_swapped(a)
numpy.core._methods._clip_dep_is_scalar_nan(a)
numpy.core._methods._count_reduce_items(arr,axis,keepdims=False,where=True)
numpy.core._methods._dump(self,file,protocol=2)
numpy.core._methods._dumps(self,protocol=2)
numpy.core._methods._mean(a,axis=None,dtype=None,out=None,keepdims=False,*,where=True)
numpy.core._methods._prod(a,axis=None,dtype=None,out=None,keepdims=False,initial=_NoValue,where=True)
numpy.core._methods._ptp(a,axis=None,out=None,keepdims=False)
numpy.core._methods._std(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False,*,where=True)
numpy.core._methods._sum(a,axis=None,dtype=None,out=None,keepdims=False,initial=_NoValue,where=True)
numpy.core._methods._var(a,axis=None,dtype=None,out=None,ddof=0,keepdims=False,*,where=True)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/_exceptions.py----------------------------------------
A:numpy.core._exceptions.self.dtypes->tuple(dtypes)
A:numpy.core._exceptions.msg->'{}: {}'.format(msg_prefix, msg)
A:numpy.core._exceptions.size_str->self._size_to_string(self._total_size)
numpy._exceptions.AxisError(self,axis,ndim=None,msg_prefix=None)
numpy._exceptions.TooHardError(RuntimeError)
numpy._exceptions.UFuncTypeError(self,ufunc)
numpy._exceptions._ArrayMemoryError(self,shape,dtype)
numpy._exceptions._ArrayMemoryError.__str__(self)
numpy._exceptions._ArrayMemoryError._size_to_string(num_bytes)
numpy._exceptions._ArrayMemoryError._total_size(self)
numpy._exceptions._UFuncBinaryResolutionError(self,ufunc,dtypes)
numpy._exceptions._UFuncBinaryResolutionError.__str__(self)
numpy._exceptions._UFuncCastingError(self,ufunc,casting,from_,to)
numpy._exceptions._UFuncInputCastingError(self,ufunc,casting,from_,to,i)
numpy._exceptions._UFuncInputCastingError.__str__(self)
numpy._exceptions._UFuncNoLoopError(self,ufunc,dtypes)
numpy._exceptions._UFuncNoLoopError.__str__(self)
numpy._exceptions._UFuncOutputCastingError(self,ufunc,casting,from_,to,i)
numpy._exceptions._UFuncOutputCastingError.__str__(self)
numpy._exceptions._display_as_base(cls)
numpy._exceptions._unpack_tuple(tup)
numpy.core._exceptions.AxisError(self,axis,ndim=None,msg_prefix=None)
numpy.core._exceptions.AxisError.__init__(self,axis,ndim=None,msg_prefix=None)
numpy.core._exceptions.TooHardError(RuntimeError)
numpy.core._exceptions.UFuncTypeError(self,ufunc)
numpy.core._exceptions.UFuncTypeError.__init__(self,ufunc)
numpy.core._exceptions._ArrayMemoryError(self,shape,dtype)
numpy.core._exceptions._ArrayMemoryError.__init__(self,shape,dtype)
numpy.core._exceptions._ArrayMemoryError.__str__(self)
numpy.core._exceptions._ArrayMemoryError._size_to_string(num_bytes)
numpy.core._exceptions._ArrayMemoryError._total_size(self)
numpy.core._exceptions._UFuncBinaryResolutionError(self,ufunc,dtypes)
numpy.core._exceptions._UFuncBinaryResolutionError.__init__(self,ufunc,dtypes)
numpy.core._exceptions._UFuncBinaryResolutionError.__str__(self)
numpy.core._exceptions._UFuncCastingError(self,ufunc,casting,from_,to)
numpy.core._exceptions._UFuncCastingError.__init__(self,ufunc,casting,from_,to)
numpy.core._exceptions._UFuncInputCastingError(self,ufunc,casting,from_,to,i)
numpy.core._exceptions._UFuncInputCastingError.__init__(self,ufunc,casting,from_,to,i)
numpy.core._exceptions._UFuncInputCastingError.__str__(self)
numpy.core._exceptions._UFuncNoLoopError(self,ufunc,dtypes)
numpy.core._exceptions._UFuncNoLoopError.__init__(self,ufunc,dtypes)
numpy.core._exceptions._UFuncNoLoopError.__str__(self)
numpy.core._exceptions._UFuncOutputCastingError(self,ufunc,casting,from_,to,i)
numpy.core._exceptions._UFuncOutputCastingError.__init__(self,ufunc,casting,from_,to,i)
numpy.core._exceptions._UFuncOutputCastingError.__str__(self)
numpy.core._exceptions._display_as_base(cls)
numpy.core._exceptions._unpack_tuple(tup)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/_add_newdocs_scalars.py----------------------------------------
A:numpy.core._add_newdocs_scalars.alias_type->getattr(_numerictypes, alias)
A:numpy.core._add_newdocs_scalars.possible_aliases->numeric_type_aliases([('int8', '8-bit signed integer (``-128`` to ``127``)'), ('int16', '16-bit signed integer (``-32_768`` to ``32_767``)'), ('int32', '32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``)'), ('int64', '64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``)'), ('intp', 'Signed integer large enough to fit pointer, compatible with C ``intptr_t``'), ('uint8', '8-bit unsigned integer (``0`` to ``255``)'), ('uint16', '16-bit unsigned integer (``0`` to ``65_535``)'), ('uint32', '32-bit unsigned integer (``0`` to ``4_294_967_295``)'), ('uint64', '64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``)'), ('uintp', 'Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``'), ('float16', '16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa'), ('float32', '32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa'), ('float64', '64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa'), ('float96', '96-bit extended-precision floating-point number type'), ('float128', '128-bit extended-precision floating-point number type'), ('complex64', 'Complex number type composed of 2 32-bit-precision floating-point numbers'), ('complex128', 'Complex number type composed of 2 64-bit-precision floating-point numbers'), ('complex192', 'Complex number type composed of 2 96-bit extended-precision floating-point numbers'), ('complex256', 'Complex number type composed of 2 128-bit extended-precision floating-point numbers')])
A:numpy.core._add_newdocs_scalars.o->getattr(_numerictypes, obj)
A:numpy.core._add_newdocs_scalars.alias_doc->''.join((':Alias: `numpy.{}`\n    '.format(alias) for alias in fixed_aliases))
A:numpy.core._add_newdocs_scalars.docstring->"\n    {doc}\n\n    :Character code: ``'{character_code}'``\n    {canonical_name_doc}{alias_doc}\n    ".format(doc=doc.strip(), character_code=character_code, canonical_name_doc=canonical_name_doc, alias_doc=alias_doc)
numpy._add_newdocs_scalars.add_newdoc_for_scalar_type(obj,fixed_aliases,doc)
numpy._add_newdocs_scalars.numeric_type_aliases(aliases)
numpy.core._add_newdocs_scalars.add_newdoc_for_scalar_type(obj,fixed_aliases,doc)
numpy.core._add_newdocs_scalars.numeric_type_aliases(aliases)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_scalarinherit.py----------------------------------------
A:numpy.core.tests.test_scalarinherit.x->B1(1.0)
A:numpy.core.tests.test_scalarinherit.y->C0(2.0)
A:numpy.core.tests.test_scalarinherit.z->D(3.0)
A:numpy.core.tests.test_scalarinherit.np_s->numpy.string_('abc')
A:numpy.core.tests.test_scalarinherit.np_u->numpy.unicode_('abc')
numpy.core.tests.test_scalarinherit.A
numpy.core.tests.test_scalarinherit.B(A,np.float64)
numpy.core.tests.test_scalarinherit.B0(np.float64,A)
numpy.core.tests.test_scalarinherit.B1(np.float64,HasNew)
numpy.core.tests.test_scalarinherit.C(B)
numpy.core.tests.test_scalarinherit.C0(B0)
numpy.core.tests.test_scalarinherit.D(C,B)
numpy.core.tests.test_scalarinherit.HasNew(cls,*args,**kwargs)
numpy.core.tests.test_scalarinherit.HasNew.__new__(cls,*args,**kwargs)
numpy.core.tests.test_scalarinherit.TestCharacter
numpy.core.tests.test_scalarinherit.TestCharacter.test_char_radd(self)
numpy.core.tests.test_scalarinherit.TestCharacter.test_char_repeat(self)
numpy.core.tests.test_scalarinherit.TestInherit
numpy.core.tests.test_scalarinherit.TestInherit.test_gh_15395(self)
numpy.core.tests.test_scalarinherit.TestInherit.test_init(self)
numpy.core.tests.test_scalarinherit.TestInherit.test_init2(self)
numpy.tests.test_scalarinherit.A
numpy.tests.test_scalarinherit.B(A,np.float64)
numpy.tests.test_scalarinherit.B0(np.float64,A)
numpy.tests.test_scalarinherit.B1(np.float64,HasNew)
numpy.tests.test_scalarinherit.C(B)
numpy.tests.test_scalarinherit.C0(B0)
numpy.tests.test_scalarinherit.D(C,B)
numpy.tests.test_scalarinherit.HasNew(cls,*args,**kwargs)
numpy.tests.test_scalarinherit.TestCharacter
numpy.tests.test_scalarinherit.TestCharacter.test_char_radd(self)
numpy.tests.test_scalarinherit.TestCharacter.test_char_repeat(self)
numpy.tests.test_scalarinherit.TestInherit
numpy.tests.test_scalarinherit.TestInherit.test_gh_15395(self)
numpy.tests.test_scalarinherit.TestInherit.test_init(self)
numpy.tests.test_scalarinherit.TestInherit.test_init2(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_array_coercion.py----------------------------------------
A:numpy.core.tests.test_array_coercion.length->len(str(obj[0]))
A:numpy.core.tests.test_array_coercion.expected->numpy.dtype(f'S{length}')
A:numpy.core.tests.test_array_coercion.arr->numpy.broadcast_to(arr, 2 ** 62)
A:numpy.core.tests.test_array_coercion.obj->memoryview(arr)
A:numpy.core.tests.test_array_coercion.obj[0]->numpy.array(1.2)
A:numpy.core.tests.test_array_coercion.expected_dtype->numpy.promote_types(dt1, dt2)
A:numpy.core.tests.test_array_coercion.scalar->numpy.timedelta64(val, unit)
A:numpy.core.tests.test_array_coercion.arr1->numpy.array(scalar).reshape(1)
A:numpy.core.tests.test_array_coercion.arr2->numpy.array([scalar])
A:numpy.core.tests.test_array_coercion.arr3->numpy.empty(1, dtype=scalar.dtype)
A:numpy.core.tests.test_array_coercion.arr4->numpy.empty(1, dtype=scalar.dtype)
A:numpy.core.tests.test_array_coercion.cast->numpy.array(scalar).astype('S6')
A:numpy.core.tests.test_array_coercion.res->numpy.array(obj)
A:numpy.core.tests.test_array_coercion.ass->numpy.ones((), dtype='S6')
A:numpy.core.tests.test_array_coercion.dtype->numpy.dtype(dtype)
A:numpy.core.tests.test_array_coercion.(discovered_dtype, _)->_discover_array_parameters([], type(dtype))
A:numpy.core.tests.test_array_coercion.invalid_int->numpy.ulonglong(-1)
A:numpy.core.tests.test_array_coercion.float_nan->numpy.float64(np.nan)
A:numpy.core.tests.test_array_coercion.coerced->numpy.array(scalar, dtype=dtype)
A:numpy.core.tests.test_array_coercion.cut_string->numpy.dtype(dtype).type(str(scalar)[:6])
A:numpy.core.tests.test_array_coercion.initial->arraylike(np.ones((1, 1)))
A:numpy.core.tests.test_array_coercion.out->numpy.array([arr, [arr]], dtype=object)
A:numpy.core.tests.test_array_coercion.mismatch_first_dim->numpy.zeros((1, 2))
A:numpy.core.tests.test_array_coercion.mismatch_second_dim->numpy.zeros((3, 3))
A:numpy.core.tests.test_array_coercion.(dtype, shape)->_discover_array_parameters([arr, mismatch_first_dim], dtype=np.dtype('O'))
numpy.core.tests.test_array_coercion.TestArrayLikes
numpy.core.tests.test_array_coercion.TestArrayLikes.test_0d_generic_special_case(self)
numpy.core.tests.test_array_coercion.TestArrayLikes.test_0d_object_special_case(self,arraylike)
numpy.core.tests.test_array_coercion.TestArrayLikes.test_arraylike_classes(self)
numpy.core.tests.test_array_coercion.TestArrayLikes.test_bad_array_like_attributes(self,attribute,error)
numpy.core.tests.test_array_coercion.TestArrayLikes.test_bad_array_like_bad_length(self,error)
numpy.core.tests.test_array_coercion.TestArrayLikes.test_too_large_array_error_paths(self)
numpy.core.tests.test_array_coercion.TestBadSequences
numpy.core.tests.test_array_coercion.TestBadSequences.test_growing_list(self)
numpy.core.tests.test_array_coercion.TestBadSequences.test_mutated_list(self)
numpy.core.tests.test_array_coercion.TestBadSequences.test_replace_0d_array(self)
numpy.core.tests.test_array_coercion.TestNested
numpy.core.tests.test_array_coercion.TestNested.test_array_of_different_depths(self)
numpy.core.tests.test_array_coercion.TestNested.test_empty_sequence(self)
numpy.core.tests.test_array_coercion.TestNested.test_nested_arraylikes(self,arraylike)
numpy.core.tests.test_array_coercion.TestNested.test_nested_simple(self)
numpy.core.tests.test_array_coercion.TestNested.test_pathological_self_containing(self)
numpy.core.tests.test_array_coercion.TestNested.test_uneven_depth_ragged(self,arraylike)
numpy.core.tests.test_array_coercion.TestScalarDiscovery
numpy.core.tests.test_array_coercion.TestScalarDiscovery.test_char_special_case(self)
numpy.core.tests.test_array_coercion.TestScalarDiscovery.test_char_special_case_deep(self)
numpy.core.tests.test_array_coercion.TestScalarDiscovery.test_default_dtype_instance(self,dtype_char)
numpy.core.tests.test_array_coercion.TestScalarDiscovery.test_scalar(self,scalar)
numpy.core.tests.test_array_coercion.TestScalarDiscovery.test_scalar_coercion(self,scalar)
numpy.core.tests.test_array_coercion.TestScalarDiscovery.test_scalar_coercion_same_as_cast_and_assignment(self,cast_to)
numpy.core.tests.test_array_coercion.TestScalarDiscovery.test_scalar_promotion(self)
numpy.core.tests.test_array_coercion.TestScalarDiscovery.test_scalar_to_int_coerce_does_not_cast(self,dtype)
numpy.core.tests.test_array_coercion.TestScalarDiscovery.test_unknown_object(self)
numpy.core.tests.test_array_coercion.TestScalarDiscovery.test_void_special_case(self)
numpy.core.tests.test_array_coercion.TestStringDiscovery
numpy.core.tests.test_array_coercion.TestStringDiscovery.test_basic_stringlength(self,obj)
numpy.core.tests.test_array_coercion.TestStringDiscovery.test_nested_arrays_stringlength(self,obj)
numpy.core.tests.test_array_coercion.TestStringDiscovery.test_unpack_first_level(self,arraylike)
numpy.core.tests.test_array_coercion.TestTimeScalars
numpy.core.tests.test_array_coercion.TestTimeScalars.test_coercion_assignment_datetime(self,val,unit,dtype)
numpy.core.tests.test_array_coercion.TestTimeScalars.test_coercion_assignment_timedelta(self,val,unit)
numpy.core.tests.test_array_coercion.TestTimeScalars.test_coercion_basic(self,dtype,scalar)
numpy.core.tests.test_array_coercion.TestTimeScalars.test_coercion_timedelta_convert_to_number(self,dtype,scalar)
numpy.core.tests.test_array_coercion.arraylikes()
numpy.core.tests.test_array_coercion.is_parametric_dtype(dtype)
numpy.core.tests.test_array_coercion.scalar_instances(times=True,extended_precision=True,user_dtype=True)
numpy.tests.test_array_coercion.TestArrayLikes
numpy.tests.test_array_coercion.TestArrayLikes.test_0d_generic_special_case(self)
numpy.tests.test_array_coercion.TestArrayLikes.test_0d_object_special_case(self,arraylike)
numpy.tests.test_array_coercion.TestArrayLikes.test_arraylike_classes(self)
numpy.tests.test_array_coercion.TestArrayLikes.test_bad_array_like_attributes(self,attribute,error)
numpy.tests.test_array_coercion.TestArrayLikes.test_bad_array_like_bad_length(self,error)
numpy.tests.test_array_coercion.TestArrayLikes.test_too_large_array_error_paths(self)
numpy.tests.test_array_coercion.TestBadSequences
numpy.tests.test_array_coercion.TestBadSequences.test_growing_list(self)
numpy.tests.test_array_coercion.TestBadSequences.test_mutated_list(self)
numpy.tests.test_array_coercion.TestBadSequences.test_replace_0d_array(self)
numpy.tests.test_array_coercion.TestNested
numpy.tests.test_array_coercion.TestNested.test_array_of_different_depths(self)
numpy.tests.test_array_coercion.TestNested.test_empty_sequence(self)
numpy.tests.test_array_coercion.TestNested.test_nested_arraylikes(self,arraylike)
numpy.tests.test_array_coercion.TestNested.test_nested_simple(self)
numpy.tests.test_array_coercion.TestNested.test_pathological_self_containing(self)
numpy.tests.test_array_coercion.TestNested.test_uneven_depth_ragged(self,arraylike)
numpy.tests.test_array_coercion.TestScalarDiscovery
numpy.tests.test_array_coercion.TestScalarDiscovery.test_char_special_case(self)
numpy.tests.test_array_coercion.TestScalarDiscovery.test_char_special_case_deep(self)
numpy.tests.test_array_coercion.TestScalarDiscovery.test_default_dtype_instance(self,dtype_char)
numpy.tests.test_array_coercion.TestScalarDiscovery.test_scalar(self,scalar)
numpy.tests.test_array_coercion.TestScalarDiscovery.test_scalar_coercion(self,scalar)
numpy.tests.test_array_coercion.TestScalarDiscovery.test_scalar_coercion_same_as_cast_and_assignment(self,cast_to)
numpy.tests.test_array_coercion.TestScalarDiscovery.test_scalar_promotion(self)
numpy.tests.test_array_coercion.TestScalarDiscovery.test_scalar_to_int_coerce_does_not_cast(self,dtype)
numpy.tests.test_array_coercion.TestScalarDiscovery.test_unknown_object(self)
numpy.tests.test_array_coercion.TestScalarDiscovery.test_void_special_case(self)
numpy.tests.test_array_coercion.TestStringDiscovery
numpy.tests.test_array_coercion.TestStringDiscovery.test_basic_stringlength(self,obj)
numpy.tests.test_array_coercion.TestStringDiscovery.test_nested_arrays_stringlength(self,obj)
numpy.tests.test_array_coercion.TestStringDiscovery.test_unpack_first_level(self,arraylike)
numpy.tests.test_array_coercion.TestTimeScalars
numpy.tests.test_array_coercion.TestTimeScalars.test_coercion_assignment_datetime(self,val,unit,dtype)
numpy.tests.test_array_coercion.TestTimeScalars.test_coercion_assignment_timedelta(self,val,unit)
numpy.tests.test_array_coercion.TestTimeScalars.test_coercion_basic(self,dtype,scalar)
numpy.tests.test_array_coercion.TestTimeScalars.test_coercion_timedelta_convert_to_number(self,dtype,scalar)
numpy.tests.test_array_coercion.arraylikes()
numpy.tests.test_array_coercion.is_parametric_dtype(dtype)
numpy.tests.test_array_coercion.scalar_instances(times=True,extended_precision=True,user_dtype=True)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_protocols.py----------------------------------------
A:numpy.core.tests.test_protocols.array->Wrapper(np.arange(10))
A:numpy.core.tests.test_protocols.wrapped->Wrapper()
A:numpy.core.tests.test_protocols.arr->numpy.array(wrapped, dtype=str)
numpy.core.tests.test_protocols.test_array_called()
numpy.core.tests.test_protocols.test_getattr_warning()
numpy.tests.test_protocols.test_array_called()
numpy.tests.test_protocols.test_getattr_warning()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_abc.py----------------------------------------
numpy.core.tests.test_abc.TestABC
numpy.core.tests.test_abc.TestABC.test_abstract(self)
numpy.core.tests.test_abc.TestABC.test_complex(self)
numpy.core.tests.test_abc.TestABC.test_floats(self)
numpy.core.tests.test_abc.TestABC.test_int(self)
numpy.core.tests.test_abc.TestABC.test_uint(self)
numpy.tests.test_abc.TestABC
numpy.tests.test_abc.TestABC.test_abstract(self)
numpy.tests.test_abc.TestABC.test_complex(self)
numpy.tests.test_abc.TestABC.test_floats(self)
numpy.tests.test_abc.TestABC.test_int(self)
numpy.tests.test_abc.TestABC.test_uint(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_unicode.py----------------------------------------
A:numpy.core.tests.test_unicode.charmax->max([ord(c) for c in arr])
A:numpy.core.tests.test_unicode.v->memoryview(arr)
A:numpy.core.tests.test_unicode.str_arr->numpy.array(['1234', '1234\x00\x00'], dtype='S')
A:numpy.core.tests.test_unicode.uni_arr1->numpy.array(['1234', '1234\x00\x00'], dtype='S').astype('>U')
A:numpy.core.tests.test_unicode.uni_arr2->numpy.array(['1234', '1234\x00\x00'], dtype='S').astype('<U')
A:numpy.core.tests.test_unicode.ua->numpy.array([[[self.ucs_value * self.ulen] * 2] * 3] * 4, dtype='U%s' % self.ulen)
A:numpy.core.tests.test_unicode.ua2->numpy.array([[[self.ucs_value * self.ulen] * 2] * 3] * 4, dtype='U%s' % self.ulen).astype(dtype=longer_type)
A:numpy.core.tests.test_unicode.ua3->numpy.array([[[self.ucs_value * self.ulen] * 2] * 3] * 4, dtype='U%s' % self.ulen).astype(dtype=longer_type).astype(dtype=ua.dtype)
A:numpy.core.tests.test_unicode.test1->numpy.array([self.ucs_value * self.ulen] * 2, dtype='U%s' % self.ulen)
A:numpy.core.tests.test_unicode.longer_type->numpy.dtype('U%s' % (self.ulen + 1)).newbyteorder()
numpy.core.tests.test_unicode.AssignValues
numpy.core.tests.test_unicode.AssignValues.content_check(self,ua,ua_scalar,nbytes)
numpy.core.tests.test_unicode.AssignValues.test_values0D(self)
numpy.core.tests.test_unicode.AssignValues.test_valuesMD(self)
numpy.core.tests.test_unicode.AssignValues.test_valuesSD(self)
numpy.core.tests.test_unicode.ByteorderValues
numpy.core.tests.test_unicode.ByteorderValues.test_values0D(self)
numpy.core.tests.test_unicode.ByteorderValues.test_valuesMD(self)
numpy.core.tests.test_unicode.ByteorderValues.test_valuesSD(self)
numpy.core.tests.test_unicode.ByteorderValues.test_values_cast(self)
numpy.core.tests.test_unicode.ByteorderValues.test_values_updowncast(self)
numpy.core.tests.test_unicode.CreateValues
numpy.core.tests.test_unicode.CreateValues.content_check(self,ua,ua_scalar,nbytes)
numpy.core.tests.test_unicode.CreateValues.test_values0D(self)
numpy.core.tests.test_unicode.CreateValues.test_valuesMD(self)
numpy.core.tests.test_unicode.CreateValues.test_valuesSD(self)
numpy.core.tests.test_unicode.CreateZeros
numpy.core.tests.test_unicode.CreateZeros.content_check(self,ua,ua_scalar,nbytes)
numpy.core.tests.test_unicode.CreateZeros.test_zeros0D(self)
numpy.core.tests.test_unicode.CreateZeros.test_zerosMD(self)
numpy.core.tests.test_unicode.CreateZeros.test_zerosSD(self)
numpy.core.tests.test_unicode.TestAssignValues_1009_UCS2(AssignValues)
numpy.core.tests.test_unicode.TestAssignValues_1009_UCS4(AssignValues)
numpy.core.tests.test_unicode.TestAssignValues_1_UCS2(AssignValues)
numpy.core.tests.test_unicode.TestAssignValues_1_UCS4(AssignValues)
numpy.core.tests.test_unicode.TestAssignValues_2_UCS2(AssignValues)
numpy.core.tests.test_unicode.TestAssignValues_2_UCS4(AssignValues)
numpy.core.tests.test_unicode.TestByteorder_1009_UCS2(ByteorderValues)
numpy.core.tests.test_unicode.TestByteorder_1009_UCS4(ByteorderValues)
numpy.core.tests.test_unicode.TestByteorder_1_UCS2(ByteorderValues)
numpy.core.tests.test_unicode.TestByteorder_1_UCS4(ByteorderValues)
numpy.core.tests.test_unicode.TestByteorder_2_UCS2(ByteorderValues)
numpy.core.tests.test_unicode.TestByteorder_2_UCS4(ByteorderValues)
numpy.core.tests.test_unicode.TestCreateValues_1009_UCS2(CreateValues)
numpy.core.tests.test_unicode.TestCreateValues_1009_UCS4(CreateValues)
numpy.core.tests.test_unicode.TestCreateValues_1_UCS2(CreateValues)
numpy.core.tests.test_unicode.TestCreateValues_1_UCS4(CreateValues)
numpy.core.tests.test_unicode.TestCreateValues_2_UCS2(CreateValues)
numpy.core.tests.test_unicode.TestCreateValues_2_UCS4(CreateValues)
numpy.core.tests.test_unicode.TestCreateZeros_1(CreateZeros)
numpy.core.tests.test_unicode.TestCreateZeros_1009(CreateZeros)
numpy.core.tests.test_unicode.TestCreateZeros_2(CreateZeros)
numpy.core.tests.test_unicode.buffer_length(arr)
numpy.core.tests.test_unicode.test_string_cast()
numpy.tests.test_unicode.AssignValues
numpy.tests.test_unicode.AssignValues.content_check(self,ua,ua_scalar,nbytes)
numpy.tests.test_unicode.AssignValues.test_values0D(self)
numpy.tests.test_unicode.AssignValues.test_valuesMD(self)
numpy.tests.test_unicode.AssignValues.test_valuesSD(self)
numpy.tests.test_unicode.ByteorderValues
numpy.tests.test_unicode.ByteorderValues.test_values0D(self)
numpy.tests.test_unicode.ByteorderValues.test_valuesMD(self)
numpy.tests.test_unicode.ByteorderValues.test_valuesSD(self)
numpy.tests.test_unicode.ByteorderValues.test_values_cast(self)
numpy.tests.test_unicode.ByteorderValues.test_values_updowncast(self)
numpy.tests.test_unicode.CreateValues
numpy.tests.test_unicode.CreateValues.content_check(self,ua,ua_scalar,nbytes)
numpy.tests.test_unicode.CreateValues.test_values0D(self)
numpy.tests.test_unicode.CreateValues.test_valuesMD(self)
numpy.tests.test_unicode.CreateValues.test_valuesSD(self)
numpy.tests.test_unicode.CreateZeros
numpy.tests.test_unicode.CreateZeros.content_check(self,ua,ua_scalar,nbytes)
numpy.tests.test_unicode.CreateZeros.test_zeros0D(self)
numpy.tests.test_unicode.CreateZeros.test_zerosMD(self)
numpy.tests.test_unicode.CreateZeros.test_zerosSD(self)
numpy.tests.test_unicode.TestAssignValues_1009_UCS2(AssignValues)
numpy.tests.test_unicode.TestAssignValues_1009_UCS4(AssignValues)
numpy.tests.test_unicode.TestAssignValues_1_UCS2(AssignValues)
numpy.tests.test_unicode.TestAssignValues_1_UCS4(AssignValues)
numpy.tests.test_unicode.TestAssignValues_2_UCS2(AssignValues)
numpy.tests.test_unicode.TestAssignValues_2_UCS4(AssignValues)
numpy.tests.test_unicode.TestByteorder_1009_UCS2(ByteorderValues)
numpy.tests.test_unicode.TestByteorder_1009_UCS4(ByteorderValues)
numpy.tests.test_unicode.TestByteorder_1_UCS2(ByteorderValues)
numpy.tests.test_unicode.TestByteorder_1_UCS4(ByteorderValues)
numpy.tests.test_unicode.TestByteorder_2_UCS2(ByteorderValues)
numpy.tests.test_unicode.TestByteorder_2_UCS4(ByteorderValues)
numpy.tests.test_unicode.TestCreateValues_1009_UCS2(CreateValues)
numpy.tests.test_unicode.TestCreateValues_1009_UCS4(CreateValues)
numpy.tests.test_unicode.TestCreateValues_1_UCS2(CreateValues)
numpy.tests.test_unicode.TestCreateValues_1_UCS4(CreateValues)
numpy.tests.test_unicode.TestCreateValues_2_UCS2(CreateValues)
numpy.tests.test_unicode.TestCreateValues_2_UCS4(CreateValues)
numpy.tests.test_unicode.TestCreateZeros_1(CreateZeros)
numpy.tests.test_unicode.TestCreateZeros_1009(CreateZeros)
numpy.tests.test_unicode.TestCreateZeros_2(CreateZeros)
numpy.tests.test_unicode.buffer_length(arr)
numpy.tests.test_unicode.test_string_cast()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_ufunc.py----------------------------------------
A:numpy.core.tests.test_ufunc.xs->numpy.full(10, input_dtype(x), dtype=output_dtype)
A:numpy.core.tests.test_ufunc.x->x[4:6, 1:11:6, 1:5].transpose(1, 2, 0)
A:numpy.core.tests.test_ufunc.arr->numpy.array([value] * offset + ['string'] + [value] * int(1.5 * np.BUFSIZE), dtype=object)
A:numpy.core.tests.test_ufunc.res->ufunc(*args)
A:numpy.core.tests.test_ufunc.val->numpy.float64(np.pi / 4)
A:numpy.core.tests.test_ufunc.num_arr->numpy.array([val], dtype=np.float64)
A:numpy.core.tests.test_ufunc.obj_arr->numpy.array([MyFloat(val)], dtype='O')
A:numpy.core.tests.test_ufunc.res_num->ufunc(num_arr)
A:numpy.core.tests.test_ufunc.res_obj->ufunc(obj_arr)
A:numpy.core.tests.test_ufunc.obj->numpy.compat.pickle.loads(pickle.dumps(_pickleable_module_global.ufunc))
A:numpy.core.tests.test_ufunc.idx->numpy.array(list(zip(np.arange(L - 2), np.arange(L - 2) + 2))).ravel()
A:numpy.core.tests.test_ufunc.(enabled, num_dims, ixs, flags, sizes)->numpy.core._umath_tests.test_signature(3, 1, '(3?),(3?,3?),(n)->(9)')
A:numpy.core.tests.test_ufunc.b->numpy.array([9218868437227405313], 'i8').view('f8')
A:numpy.core.tests.test_ufunc.res1->numpy.maximum([3], [4], sig=(None, None, None))
A:numpy.core.tests.test_ufunc.res2->numpy.maximum([3], [4])
A:numpy.core.tests.test_ufunc.float_dtype->type(np.dtype(np.float64))
A:numpy.core.tests.test_ufunc.a->numpy.ones((1, 10))
A:numpy.core.tests.test_ufunc.int64->numpy.dtype('int64')
A:numpy.core.tests.test_ufunc.int64_2->numpy.compat.pickle.loads(pickle.dumps(int64))
A:numpy.core.tests.test_ufunc.tgt->dt(v * (v + 1) / 2)
A:numpy.core.tests.test_ufunc.dt->numpy.dtype(tc)
A:numpy.core.tests.test_ufunc.aa->numpy.ones((1, 10)).astype(dt)
A:numpy.core.tests.test_ufunc.bb->numpy.array([9218868437227405313], 'i8').view('f8').astype(dt)
A:numpy.core.tests.test_ufunc.rtol->max(np.finfo(dtout).resolution, 1e-15)
A:numpy.core.tests.test_ufunc.dtout->numpy.dtype(tcout)
A:numpy.core.tests.test_ufunc.atol->max(np.finfo(dtout).tiny, 3e-308)
A:numpy.core.tests.test_ufunc.d->numpy.ones((5, 2), dtype=int)
A:numpy.core.tests.test_ufunc.d.real->numpy.arange(1, v + 1)
A:numpy.core.tests.test_ufunc.(u, v)->numpy.broadcast_arrays(a, b)
A:numpy.core.tests.test_ufunc.out->numpy.array(-1, dtype=np.intp)
A:numpy.core.tests.test_ufunc.out2->numpy.empty(3)
A:numpy.core.tests.test_ufunc.c->numpy.array([1.0, 2.0])
A:numpy.core.tests.test_ufunc.Ba->numpy.arange(1, dtype='>f8')
A:numpy.core.tests.test_ufunc.La->numpy.arange(1, dtype='<f8')
A:numpy.core.tests.test_ufunc.z->numpy.zeros((2, 2))
A:numpy.core.tests.test_ufunc.w->numpy.array([], dtype='f8')
A:numpy.core.tests.test_ufunc.expected->numpy.array([_rational_tests.rational(1), _rational_tests.rational(2, 3), _rational_tests.rational(1, 2)], dtype=_rational_tests.rational)
A:numpy.core.tests.test_ufunc.(expected_s, expected_l)->numpy.linalg._umath_linalg.slogdet(a)
A:numpy.core.tests.test_ufunc.(cs, cl)->numpy.linalg._umath_linalg.slogdet(a, keepdims=True)
A:numpy.core.tests.test_ufunc.result->numpy.core._rational_tests.test_add_rationals(a, b)
A:numpy.core.tests.test_ufunc.mat->numpy.arange(12).reshape((2, 3, 2))
A:numpy.core.tests.test_ufunc.single_vec->numpy.arange(3)
A:numpy.core.tests.test_ufunc.mm_col_vec->numpy.core._umath_tests.matrix_multiply(mat, col_vec_array)
A:numpy.core.tests.test_ufunc.matmul_col_vec->numpy.core._umath_tests.matmul(mat, col_vec_array)
A:numpy.core.tests.test_ufunc.matmul_col->numpy.core._umath_tests.matmul(mat, single_vec)
A:numpy.core.tests.test_ufunc.mm_row_vec->numpy.core._umath_tests.matrix_multiply(row_vec_array, mat)
A:numpy.core.tests.test_ufunc.matmul_row_vec->numpy.core._umath_tests.matmul(row_vec_array, mat)
A:numpy.core.tests.test_ufunc.matmul_row->numpy.core._umath_tests.matmul(single_vec, mat)
A:numpy.core.tests.test_ufunc.col_vec_array->row_vec_array.swapaxes(-2, -1)
A:numpy.core.tests.test_ufunc.mm_row_col_vec->numpy.core._umath_tests.matrix_multiply(row_vec, col_vec)
A:numpy.core.tests.test_ufunc.matmul_row_col_vec->numpy.core._umath_tests.matmul(row_vec, col_vec)
A:numpy.core.tests.test_ufunc.matmul_row_col->numpy.core._umath_tests.matmul(single_vec, single_vec)
A:numpy.core.tests.test_ufunc.mm_row_col_array->numpy.core._umath_tests.matrix_multiply(row_vec_array, col_vec_array)
A:numpy.core.tests.test_ufunc.matmul_row_col_array->numpy.core._umath_tests.matmul(row_vec_array, col_vec_array)
A:numpy.core.tests.test_ufunc.d1->numpy.array(np.random.rand(2, 3, 4), dtype=tp)
A:numpy.core.tests.test_ufunc.d2->numpy.array(np.random.rand(2, 3, 4), dtype=tp)
A:numpy.core.tests.test_ufunc.base->slice_n(n - 1)
A:numpy.core.tests.test_ufunc.permute_3->permute_n(3)
A:numpy.core.tests.test_ufunc.arr0d->numpy.array(HasComparisons())
A:numpy.core.tests.test_ufunc.arr1d->numpy.array([HasComparisons()])
A:numpy.core.tests.test_ufunc.m->numpy.array([True], dtype=bool)
A:numpy.core.tests.test_ufunc.a_copy->numpy.ones((1, 10)).copy()
A:numpy.core.tests.test_ufunc.a_check->numpy.full(a.shape, -np.inf)
A:numpy.core.tests.test_ufunc.check->f_reduce(a, axis=0, out=out, keepdims=keepdims)
A:numpy.core.tests.test_ufunc.target->numpy.array([True, False, False, False], dtype=bool)
A:numpy.core.tests.test_ufunc.orig->numpy.arange(4)
A:numpy.core.tests.test_ufunc.index->numpy.array([1, 2, 1], np.dtype('i').newbyteorder())
A:numpy.core.tests.test_ufunc.values->numpy.array(['a', 1], dtype=object)
A:numpy.core.tests.test_ufunc.o->numpy.ones((2,), dtype=d.dtype)
A:numpy.core.tests.test_ufunc.ra->numpy.ones((1, 10)).view(dtype='f8,f8,f8').squeeze()
A:numpy.core.tests.test_ufunc.mra->numpy.ones((1, 10)).view(dtype='f8,f8,f8').squeeze().view(MyA)
A:numpy.core.tests.test_ufunc.y_base->numpy.arange(4 * 4, dtype=np.int16).reshape(4, 4)
A:numpy.core.tests.test_ufunc.y_base_copy->numpy.arange(4 * 4, dtype=np.int16).reshape(4, 4).copy()
A:numpy.core.tests.test_ufunc.r0->numpy.add.reduce(x, out=y.copy(), axis=2)
A:numpy.core.tests.test_ufunc.r1->numpy.add.reduce(x, out=y, axis=2)
A:numpy.core.tests.test_ufunc.correct_out->f_reduce(a, axis=0, keepdims=keepdims)
A:numpy.core.tests.test_ufunc.out_correct->numpy.empty((1, 1))
A:numpy.core.tests.test_ufunc.out_incorrect->numpy.empty((3, 1))
A:numpy.core.tests.test_ufunc.exc->pytest.raises(TypeError, np.sqrt, None)
A:numpy.core.tests.test_ufunc.(inp, out)->typ.split('->')
A:numpy.core.tests.test_ufunc.outs->tuple(out)
A:numpy.core.tests.test_ufunc.a.flat->range(1, 7)
A:numpy.core.tests.test_ufunc.res_c->ufunc(*args_c)
A:numpy.core.tests.test_ufunc.res_n->ufunc(*args_n)
A:numpy.core.tests.test_ufunc.count->sys.getrefcount(value)
numpy.core.tests.test_ufunc.TestUfunc
numpy.core.tests.test_ufunc.TestUfunc.check_identityless_reduction(self,a)
numpy.core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results(self,tp)
numpy.core.tests.test_ufunc.TestUfunc.test_NotImplemented_not_returned(self)
numpy.core.tests.test_ufunc.TestUfunc.test_all_ufunc(self)
numpy.core.tests.test_ufunc.TestUfunc.test_axes_argument(self)
numpy.core.tests.test_ufunc.TestUfunc.test_axis_argument(self)
numpy.core.tests.test_ufunc.TestUfunc.test_axis_out_of_bounds(self)
numpy.core.tests.test_ufunc.TestUfunc.test_broadcast(self)
numpy.core.tests.test_ufunc.TestUfunc.test_can_ignore_signature(self)
numpy.core.tests.test_ufunc.TestUfunc.test_casting_out_param(self)
numpy.core.tests.test_ufunc.TestUfunc.test_cross1d(self)
numpy.core.tests.test_ufunc.TestUfunc.test_cumsum(self)
numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like(self)
numpy.core.tests.test_ufunc.TestUfunc.test_custom_ufunc(self)
numpy.core.tests.test_ufunc.TestUfunc.test_custom_ufunc_forced_sig(self)
numpy.core.tests.test_ufunc.TestUfunc.test_endian(self)
numpy.core.tests.test_ufunc.TestUfunc.test_euclidean_pdist(self)
numpy.core.tests.test_ufunc.TestUfunc.test_forced_dtype_times(self)
numpy.core.tests.test_ufunc.TestUfunc.test_forced_dtype_warning(self)
numpy.core.tests.test_ufunc.TestUfunc.test_forced_sig(self)
numpy.core.tests.test_ufunc.TestUfunc.test_get_signature(self)
numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_corder(self)
numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_forder(self)
numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_noncontig(self)
numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_noncontig_unaligned(self)
numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_nonreorderable(self)
numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_otherorder(self)
numpy.core.tests.test_ufunc.TestUfunc.test_incontiguous_array(self)
numpy.core.tests.test_ufunc.TestUfunc.test_initial_reduction(self)
numpy.core.tests.test_ufunc.TestUfunc.test_inner1d(self)
numpy.core.tests.test_ufunc.TestUfunc.test_innerwt(self)
numpy.core.tests.test_ufunc.TestUfunc.test_innerwt_empty(self)
numpy.core.tests.test_ufunc.TestUfunc.test_inplace_fancy_indexing(self)
numpy.core.tests.test_ufunc.TestUfunc.test_invalid_args(self)
numpy.core.tests.test_ufunc.TestUfunc.test_keepdims_argument(self)
numpy.core.tests.test_ufunc.TestUfunc.test_matrix_multiply(self)
numpy.core.tests.test_ufunc.TestUfunc.test_matrix_multiply_umath_empty(self)
numpy.core.tests.test_ufunc.TestUfunc.test_nat_is_nan(self,nat)
numpy.core.tests.test_ufunc.TestUfunc.test_nat_is_not_finite(self,nat)
numpy.core.tests.test_ufunc.TestUfunc.test_nat_is_not_inf(self,nat)
numpy.core.tests.test_ufunc.TestUfunc.test_no_doc_string(self)
numpy.core.tests.test_ufunc.TestUfunc.test_object_array_accumulate_inplace(self)
numpy.core.tests.test_ufunc.TestUfunc.test_object_array_reduceat_inplace(self)
numpy.core.tests.test_ufunc.TestUfunc.test_object_array_reduction(self)
numpy.core.tests.test_ufunc.TestUfunc.test_object_comparison(self)
numpy.core.tests.test_ufunc.TestUfunc.test_object_logical(self)
numpy.core.tests.test_ufunc.TestUfunc.test_operand_flags(self)
numpy.core.tests.test_ufunc.TestUfunc.test_out_broadcasts(self)
numpy.core.tests.test_ufunc.TestUfunc.test_output_argument(self)
numpy.core.tests.test_ufunc.TestUfunc.test_partial_signature_mismatch(self,casting)
numpy.core.tests.test_ufunc.TestUfunc.test_pickle(self)
numpy.core.tests.test_ufunc.TestUfunc.test_pickle_name_is_qualname(self)
numpy.core.tests.test_ufunc.TestUfunc.test_pickle_withstring(self)
numpy.core.tests.test_ufunc.TestUfunc.test_reduce_arguments(self)
numpy.core.tests.test_ufunc.TestUfunc.test_reduce_noncontig_output(self)
numpy.core.tests.test_ufunc.TestUfunc.test_reduce_output_does_not_broadcast_input(self)
numpy.core.tests.test_ufunc.TestUfunc.test_reduce_output_subclass_ok(self)
numpy.core.tests.test_ufunc.TestUfunc.test_reduce_wrong_dimension_output(self,f_reduce,keepdims,out_shape)
numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis(self)
numpy.core.tests.test_ufunc.TestUfunc.test_reduceat_shifting_sum(self)
numpy.core.tests.test_ufunc.TestUfunc.test_reduction_where_initial_needed(self)
numpy.core.tests.test_ufunc.TestUfunc.test_reduction_with_where(self,axis,where)
numpy.core.tests.test_ufunc.TestUfunc.test_reduction_with_where_and_initial(self,axis,where,initial)
numpy.core.tests.test_ufunc.TestUfunc.test_safe_casting(self)
numpy.core.tests.test_ufunc.TestUfunc.test_scalar_equal(self)
numpy.core.tests.test_ufunc.TestUfunc.test_scalar_reduction(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature0(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature1(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature2(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature3(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature4(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature5(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature6(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature7(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature8(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature_all_None(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature_dtype_type(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature_errors(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature_failure_extra_parenthesis(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature_failure_mismatching_parenthesis(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature_failure_signature_missing_input_arg(self)
numpy.core.tests.test_ufunc.TestUfunc.test_signature_failure_signature_missing_output_arg(self)
numpy.core.tests.test_ufunc.TestUfunc.test_struct_ufunc(self)
numpy.core.tests.test_ufunc.TestUfunc.test_structured_equal(self)
numpy.core.tests.test_ufunc.TestUfunc.test_sum(self)
numpy.core.tests.test_ufunc.TestUfunc.test_sum_complex(self)
numpy.core.tests.test_ufunc.TestUfunc.test_sum_initial(self)
numpy.core.tests.test_ufunc.TestUfunc.test_sum_stability(self)
numpy.core.tests.test_ufunc.TestUfunc.test_sum_where(self)
numpy.core.tests.test_ufunc.TestUfunc.test_true_divide(self)
numpy.core.tests.test_ufunc.TestUfunc.test_type_cast(self)
numpy.core.tests.test_ufunc.TestUfunc.test_ufunc_custom_out(self)
numpy.core.tests.test_ufunc.TestUfunc.test_use_output_signature_for_all_arguments(self)
numpy.core.tests.test_ufunc.TestUfunc.test_where_param(self)
numpy.core.tests.test_ufunc.TestUfunc.test_where_param_alloc(self)
numpy.core.tests.test_ufunc.TestUfunc.test_where_param_buffer_output(self)
numpy.core.tests.test_ufunc.TestUfunc.test_where_with_broadcasting(self)
numpy.core.tests.test_ufunc.TestUfunc.test_zerosize_reduction(self)
numpy.core.tests.test_ufunc.TestUfuncGenericLoops
numpy.core.tests.test_ufunc.TestUfuncGenericLoops.f2(x,y)
numpy.core.tests.test_ufunc.TestUfuncGenericLoops.foo
numpy.core.tests.test_ufunc.TestUfuncGenericLoops.foo.conjugate(self)
numpy.core.tests.test_ufunc.TestUfuncGenericLoops.foo.logical_xor(self,obj)
numpy.core.tests.test_ufunc.TestUfuncGenericLoops.test_binary_PyUFunc(self,input_dtype,output_dtype,f=f2,x=0,y=1)
numpy.core.tests.test_ufunc.TestUfuncGenericLoops.test_binary_PyUFunc_OO_O(self)
numpy.core.tests.test_ufunc.TestUfuncGenericLoops.test_binary_PyUFunc_OO_O_method(self,foo=foo)
numpy.core.tests.test_ufunc.TestUfuncGenericLoops.test_binary_PyUFunc_On_Om_method(self,foo=foo)
numpy.core.tests.test_ufunc.TestUfuncGenericLoops.test_python_complex_conjugate(self)
numpy.core.tests.test_ufunc.TestUfuncGenericLoops.test_unary_PyUFunc(self,input_dtype,output_dtype,f=np.exp,x=0,y=1)
numpy.core.tests.test_ufunc.TestUfuncGenericLoops.test_unary_PyUFunc_O_O(self)
numpy.core.tests.test_ufunc.TestUfuncGenericLoops.test_unary_PyUFunc_O_O_method_full(self,ufunc)
numpy.core.tests.test_ufunc.TestUfuncGenericLoops.test_unary_PyUFunc_O_O_method_simple(self,foo=foo)
numpy.core.tests.test_ufunc.TestUfuncKwargs
numpy.core.tests.test_ufunc.TestUfuncKwargs.test_extobj_refcount(self)
numpy.core.tests.test_ufunc.TestUfuncKwargs.test_kwarg_exact(self)
numpy.core.tests.test_ufunc.TestUfuncKwargs.test_sig_dtype(self)
numpy.core.tests.test_ufunc.TestUfuncKwargs.test_sig_signature(self)
numpy.core.tests.test_ufunc._pickleable_module_global()
numpy.core.tests.test_ufunc.test_reduce_casterrors(offset)
numpy.core.tests.test_ufunc.test_ufunc_casterrors()
numpy.core.tests.test_ufunc.test_ufunc_noncontiguous(ufunc)
numpy.core.tests.test_ufunc.test_ufunc_types(ufunc)
numpy.core.tests.test_ufunc.test_ufunc_warn_with_nan(ufunc)
numpy.tests.test_ufunc.TestUfunc
numpy.tests.test_ufunc.TestUfunc.check_identityless_reduction(self,a)
numpy.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results(self,tp)
numpy.tests.test_ufunc.TestUfunc.test_NotImplemented_not_returned(self)
numpy.tests.test_ufunc.TestUfunc.test_all_ufunc(self)
numpy.tests.test_ufunc.TestUfunc.test_axes_argument(self)
numpy.tests.test_ufunc.TestUfunc.test_axis_argument(self)
numpy.tests.test_ufunc.TestUfunc.test_axis_out_of_bounds(self)
numpy.tests.test_ufunc.TestUfunc.test_broadcast(self)
numpy.tests.test_ufunc.TestUfunc.test_can_ignore_signature(self)
numpy.tests.test_ufunc.TestUfunc.test_casting_out_param(self)
numpy.tests.test_ufunc.TestUfunc.test_cross1d(self)
numpy.tests.test_ufunc.TestUfunc.test_cumsum(self)
numpy.tests.test_ufunc.TestUfunc.test_custom_array_like(self)
numpy.tests.test_ufunc.TestUfunc.test_custom_ufunc(self)
numpy.tests.test_ufunc.TestUfunc.test_custom_ufunc_forced_sig(self)
numpy.tests.test_ufunc.TestUfunc.test_endian(self)
numpy.tests.test_ufunc.TestUfunc.test_euclidean_pdist(self)
numpy.tests.test_ufunc.TestUfunc.test_forced_dtype_times(self)
numpy.tests.test_ufunc.TestUfunc.test_forced_dtype_warning(self)
numpy.tests.test_ufunc.TestUfunc.test_forced_sig(self)
numpy.tests.test_ufunc.TestUfunc.test_get_signature(self)
numpy.tests.test_ufunc.TestUfunc.test_identityless_reduction_corder(self)
numpy.tests.test_ufunc.TestUfunc.test_identityless_reduction_forder(self)
numpy.tests.test_ufunc.TestUfunc.test_identityless_reduction_noncontig(self)
numpy.tests.test_ufunc.TestUfunc.test_identityless_reduction_noncontig_unaligned(self)
numpy.tests.test_ufunc.TestUfunc.test_identityless_reduction_nonreorderable(self)
numpy.tests.test_ufunc.TestUfunc.test_identityless_reduction_otherorder(self)
numpy.tests.test_ufunc.TestUfunc.test_incontiguous_array(self)
numpy.tests.test_ufunc.TestUfunc.test_initial_reduction(self)
numpy.tests.test_ufunc.TestUfunc.test_inner1d(self)
numpy.tests.test_ufunc.TestUfunc.test_innerwt(self)
numpy.tests.test_ufunc.TestUfunc.test_innerwt_empty(self)
numpy.tests.test_ufunc.TestUfunc.test_inplace_fancy_indexing(self)
numpy.tests.test_ufunc.TestUfunc.test_invalid_args(self)
numpy.tests.test_ufunc.TestUfunc.test_keepdims_argument(self)
numpy.tests.test_ufunc.TestUfunc.test_matrix_multiply(self)
numpy.tests.test_ufunc.TestUfunc.test_matrix_multiply_umath_empty(self)
numpy.tests.test_ufunc.TestUfunc.test_nat_is_nan(self,nat)
numpy.tests.test_ufunc.TestUfunc.test_nat_is_not_finite(self,nat)
numpy.tests.test_ufunc.TestUfunc.test_nat_is_not_inf(self,nat)
numpy.tests.test_ufunc.TestUfunc.test_no_doc_string(self)
numpy.tests.test_ufunc.TestUfunc.test_object_array_accumulate_inplace(self)
numpy.tests.test_ufunc.TestUfunc.test_object_array_reduceat_inplace(self)
numpy.tests.test_ufunc.TestUfunc.test_object_array_reduction(self)
numpy.tests.test_ufunc.TestUfunc.test_object_comparison(self)
numpy.tests.test_ufunc.TestUfunc.test_object_logical(self)
numpy.tests.test_ufunc.TestUfunc.test_operand_flags(self)
numpy.tests.test_ufunc.TestUfunc.test_out_broadcasts(self)
numpy.tests.test_ufunc.TestUfunc.test_output_argument(self)
numpy.tests.test_ufunc.TestUfunc.test_partial_signature_mismatch(self,casting)
numpy.tests.test_ufunc.TestUfunc.test_pickle(self)
numpy.tests.test_ufunc.TestUfunc.test_pickle_name_is_qualname(self)
numpy.tests.test_ufunc.TestUfunc.test_pickle_withstring(self)
numpy.tests.test_ufunc.TestUfunc.test_reduce_arguments(self)
numpy.tests.test_ufunc.TestUfunc.test_reduce_noncontig_output(self)
numpy.tests.test_ufunc.TestUfunc.test_reduce_output_does_not_broadcast_input(self)
numpy.tests.test_ufunc.TestUfunc.test_reduce_output_subclass_ok(self)
numpy.tests.test_ufunc.TestUfunc.test_reduce_wrong_dimension_output(self,f_reduce,keepdims,out_shape)
numpy.tests.test_ufunc.TestUfunc.test_reduce_zero_axis(self)
numpy.tests.test_ufunc.TestUfunc.test_reduceat_shifting_sum(self)
numpy.tests.test_ufunc.TestUfunc.test_reduction_where_initial_needed(self)
numpy.tests.test_ufunc.TestUfunc.test_reduction_with_where(self,axis,where)
numpy.tests.test_ufunc.TestUfunc.test_reduction_with_where_and_initial(self,axis,where,initial)
numpy.tests.test_ufunc.TestUfunc.test_safe_casting(self)
numpy.tests.test_ufunc.TestUfunc.test_scalar_equal(self)
numpy.tests.test_ufunc.TestUfunc.test_scalar_reduction(self)
numpy.tests.test_ufunc.TestUfunc.test_signature0(self)
numpy.tests.test_ufunc.TestUfunc.test_signature1(self)
numpy.tests.test_ufunc.TestUfunc.test_signature2(self)
numpy.tests.test_ufunc.TestUfunc.test_signature3(self)
numpy.tests.test_ufunc.TestUfunc.test_signature4(self)
numpy.tests.test_ufunc.TestUfunc.test_signature5(self)
numpy.tests.test_ufunc.TestUfunc.test_signature6(self)
numpy.tests.test_ufunc.TestUfunc.test_signature7(self)
numpy.tests.test_ufunc.TestUfunc.test_signature8(self)
numpy.tests.test_ufunc.TestUfunc.test_signature_all_None(self)
numpy.tests.test_ufunc.TestUfunc.test_signature_dtype_type(self)
numpy.tests.test_ufunc.TestUfunc.test_signature_errors(self)
numpy.tests.test_ufunc.TestUfunc.test_signature_failure_extra_parenthesis(self)
numpy.tests.test_ufunc.TestUfunc.test_signature_failure_mismatching_parenthesis(self)
numpy.tests.test_ufunc.TestUfunc.test_signature_failure_signature_missing_input_arg(self)
numpy.tests.test_ufunc.TestUfunc.test_signature_failure_signature_missing_output_arg(self)
numpy.tests.test_ufunc.TestUfunc.test_struct_ufunc(self)
numpy.tests.test_ufunc.TestUfunc.test_structured_equal(self)
numpy.tests.test_ufunc.TestUfunc.test_sum(self)
numpy.tests.test_ufunc.TestUfunc.test_sum_complex(self)
numpy.tests.test_ufunc.TestUfunc.test_sum_initial(self)
numpy.tests.test_ufunc.TestUfunc.test_sum_stability(self)
numpy.tests.test_ufunc.TestUfunc.test_sum_where(self)
numpy.tests.test_ufunc.TestUfunc.test_true_divide(self)
numpy.tests.test_ufunc.TestUfunc.test_type_cast(self)
numpy.tests.test_ufunc.TestUfunc.test_ufunc_custom_out(self)
numpy.tests.test_ufunc.TestUfunc.test_use_output_signature_for_all_arguments(self)
numpy.tests.test_ufunc.TestUfunc.test_where_param(self)
numpy.tests.test_ufunc.TestUfunc.test_where_param_alloc(self)
numpy.tests.test_ufunc.TestUfunc.test_where_param_buffer_output(self)
numpy.tests.test_ufunc.TestUfunc.test_where_with_broadcasting(self)
numpy.tests.test_ufunc.TestUfunc.test_zerosize_reduction(self)
numpy.tests.test_ufunc.TestUfuncGenericLoops
numpy.tests.test_ufunc.TestUfuncGenericLoops.f2(x,y)
numpy.tests.test_ufunc.TestUfuncGenericLoops.foo
numpy.tests.test_ufunc.TestUfuncGenericLoops.foo.conjugate(self)
numpy.tests.test_ufunc.TestUfuncGenericLoops.foo.logical_xor(self,obj)
numpy.tests.test_ufunc.TestUfuncGenericLoops.test_binary_PyUFunc(self,input_dtype,output_dtype,f=f2,x=0,y=1)
numpy.tests.test_ufunc.TestUfuncGenericLoops.test_binary_PyUFunc_OO_O(self)
numpy.tests.test_ufunc.TestUfuncGenericLoops.test_binary_PyUFunc_OO_O_method(self,foo=foo)
numpy.tests.test_ufunc.TestUfuncGenericLoops.test_binary_PyUFunc_On_Om_method(self,foo=foo)
numpy.tests.test_ufunc.TestUfuncGenericLoops.test_python_complex_conjugate(self)
numpy.tests.test_ufunc.TestUfuncGenericLoops.test_unary_PyUFunc(self,input_dtype,output_dtype,f=np.exp,x=0,y=1)
numpy.tests.test_ufunc.TestUfuncGenericLoops.test_unary_PyUFunc_O_O(self)
numpy.tests.test_ufunc.TestUfuncGenericLoops.test_unary_PyUFunc_O_O_method_full(self,ufunc)
numpy.tests.test_ufunc.TestUfuncGenericLoops.test_unary_PyUFunc_O_O_method_simple(self,foo=foo)
numpy.tests.test_ufunc.TestUfuncKwargs
numpy.tests.test_ufunc.TestUfuncKwargs.test_extobj_refcount(self)
numpy.tests.test_ufunc.TestUfuncKwargs.test_kwarg_exact(self)
numpy.tests.test_ufunc.TestUfuncKwargs.test_sig_dtype(self)
numpy.tests.test_ufunc.TestUfuncKwargs.test_sig_signature(self)
numpy.tests.test_ufunc._pickleable_module_global()
numpy.tests.test_ufunc.test_reduce_casterrors(offset)
numpy.tests.test_ufunc.test_ufunc_casterrors()
numpy.tests.test_ufunc.test_ufunc_noncontiguous(ufunc)
numpy.tests.test_ufunc.test_ufunc_types(ufunc)
numpy.tests.test_ufunc.test_ufunc_warn_with_nan(ufunc)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_scalarmath.py----------------------------------------
A:numpy.core.tests.test_scalarmath.floating_types->numpy.floating.__subclasses__()
A:numpy.core.tests.test_scalarmath.complex_floating_types->numpy.complexfloating.__subclasses__()
A:numpy.core.tests.test_scalarmath.a->numpy.array(l[:3], dtype=np.uint64)
A:numpy.core.tests.test_scalarmath.a_scalar->atype(3)
A:numpy.core.tests.test_scalarmath.a_array->numpy.array([3], dtype=atype)
A:numpy.core.tests.test_scalarmath.b_scalar->btype(1)
A:numpy.core.tests.test_scalarmath.b_array->numpy.array([1], dtype=btype)
A:numpy.core.tests.test_scalarmath.b->t(0.0)
A:numpy.core.tests.test_scalarmath.exp1->numpy.ones_like(inp1)
A:numpy.core.tests.test_scalarmath.inp1[...]->numpy.ones_like(inp1)
A:numpy.core.tests.test_scalarmath.inp2[...]->numpy.ones_like(inp2)
A:numpy.core.tests.test_scalarmath.d->numpy.float32()
A:numpy.core.tests.test_scalarmath.o->sys.getrecursionlimit()
A:numpy.core.tests.test_scalarmath.res->absfunc(x)
A:numpy.core.tests.test_scalarmath.expected->pow(a, b, c)
A:numpy.core.tests.test_scalarmath.(div, rem)->op(a, b)
A:numpy.core.tests.test_scalarmath.nlst->list(range(-127, 0))
A:numpy.core.tests.test_scalarmath.plst->list(range(1, 128))
A:numpy.core.tests.test_scalarmath.arg->list(itertools.product(dividend, divisor))
A:numpy.core.tests.test_scalarmath.tgt->list((divmod(*t) for t in arg))
A:numpy.core.tests.test_scalarmath.tgtdiv->numpy.where((tgtdiv == 0.0) & ((b < 0) ^ (a < 0)), -0.0, tgtdiv)
A:numpy.core.tests.test_scalarmath.tgtrem->numpy.where((tgtrem == 0.0) & (b < 0), -0.0, tgtrem)
A:numpy.core.tests.test_scalarmath.fa->numpy.array(l[:3], dtype=np.uint64).astype(dt)
A:numpy.core.tests.test_scalarmath.fb->t(0.0).astype(dt)
A:numpy.core.tests.test_scalarmath.rem->operator.mod(finf, fone)
A:numpy.core.tests.test_scalarmath.fone->numpy.array(1.0, dtype=dt)
A:numpy.core.tests.test_scalarmath.fzer->numpy.array(0.0, dtype=dt)
A:numpy.core.tests.test_scalarmath.finf->numpy.array(np.inf, dtype=dt)
A:numpy.core.tests.test_scalarmath.fnan->numpy.array(np.nan, dtype=dt)
A:numpy.core.tests.test_scalarmath.(div, mod)->op(fone, fzer)
A:numpy.core.tests.test_scalarmath.data->list()
A:numpy.core.tests.test_scalarmath.x->test_dtype(np.finfo(test_dtype).min)
A:numpy.core.tests.test_scalarmath.finfo->numpy.finfo(t)
A:numpy.core.tests.test_scalarmath.constr->numpy.array([0] * storage_bytes, dtype=np.uint8)
A:numpy.core.tests.test_scalarmath.val_repr->repr(val)
A:numpy.core.tests.test_scalarmath.val2->t(eval(val_repr))
A:numpy.core.tests.test_scalarmath.accepted_types->set(np.typecodes['AllInteger'])
A:numpy.core.tests.test_scalarmath.seq->seq_type([1, 2, 3])
A:numpy.core.tests.test_scalarmath.i->numpy.dtype(numpy_type).type()
A:numpy.core.tests.test_scalarmath.dt->numpy.dtype(type_code)
A:numpy.core.tests.test_scalarmath.val_scl->numpy.dtype(type_code).type(val)
A:numpy.core.tests.test_scalarmath.shift_scl->numpy.dtype(type_code).type(shift)
A:numpy.core.tests.test_scalarmath.res_scl->op(val_scl, shift_scl)
A:numpy.core.tests.test_scalarmath.val_arr->numpy.array([val] * 32, dtype=dt)
A:numpy.core.tests.test_scalarmath.shift_arr->numpy.array([shift] * 32, dtype=dt)
A:numpy.core.tests.test_scalarmath.res_arr->op(val_arr, shift_arr)
A:numpy.core.tests.test_scalarmath.numpy_val->scalar(val)
A:numpy.core.tests.test_scalarmath.val->float(numpy_val)
numpy.core.tests.test_scalarmath.TestAbs
numpy.core.tests.test_scalarmath.TestAbs._test_abs_func(self,absfunc,test_dtype)
numpy.core.tests.test_scalarmath.TestAbs.test_builtin_abs(self,dtype)
numpy.core.tests.test_scalarmath.TestAbs.test_numpy_abs(self,dtype)
numpy.core.tests.test_scalarmath.TestBaseMath
numpy.core.tests.test_scalarmath.TestBaseMath.test_blocked(self)
numpy.core.tests.test_scalarmath.TestBaseMath.test_lower_align(self)
numpy.core.tests.test_scalarmath.TestBitShifts
numpy.core.tests.test_scalarmath.TestBitShifts.test_shift_all_bits(self,type_code,op)
numpy.core.tests.test_scalarmath.TestComplexDivision
numpy.core.tests.test_scalarmath.TestComplexDivision.test_branches(self)
numpy.core.tests.test_scalarmath.TestComplexDivision.test_signed_zeros(self)
numpy.core.tests.test_scalarmath.TestComplexDivision.test_zero_division(self)
numpy.core.tests.test_scalarmath.TestConversion
numpy.core.tests.test_scalarmath.TestConversion.test_iinfo_long_values(self)
numpy.core.tests.test_scalarmath.TestConversion.test_int_from_huge_longdouble(self)
numpy.core.tests.test_scalarmath.TestConversion.test_int_from_infinite_longdouble(self)
numpy.core.tests.test_scalarmath.TestConversion.test_int_from_infinite_longdouble___int__(self)
numpy.core.tests.test_scalarmath.TestConversion.test_int_from_long(self)
numpy.core.tests.test_scalarmath.TestConversion.test_int_from_longdouble(self)
numpy.core.tests.test_scalarmath.TestConversion.test_int_raise_behaviour(self)
numpy.core.tests.test_scalarmath.TestConversion.test_numpy_scalar_relational_operators(self)
numpy.core.tests.test_scalarmath.TestConversion.test_scalar_comparison_to_none(self)
numpy.core.tests.test_scalarmath.TestHash
numpy.core.tests.test_scalarmath.TestHash.test_complex_hashes(self,type_code)
numpy.core.tests.test_scalarmath.TestHash.test_float_and_complex_hashes(self,type_code)
numpy.core.tests.test_scalarmath.TestHash.test_integer_hashes(self,type_code)
numpy.core.tests.test_scalarmath.TestModulus
numpy.core.tests.test_scalarmath.TestModulus.test_float_modulus_corner_cases(self)
numpy.core.tests.test_scalarmath.TestModulus.test_float_modulus_exact(self)
numpy.core.tests.test_scalarmath.TestModulus.test_float_modulus_roundoff(self)
numpy.core.tests.test_scalarmath.TestModulus.test_inplace_floordiv_handling(self)
numpy.core.tests.test_scalarmath.TestModulus.test_modulus_basic(self)
numpy.core.tests.test_scalarmath.TestMultiply
numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like(self)
numpy.core.tests.test_scalarmath.TestMultiply.test_seq_repeat(self)
numpy.core.tests.test_scalarmath.TestNegative
numpy.core.tests.test_scalarmath.TestNegative.test_exceptions(self)
numpy.core.tests.test_scalarmath.TestNegative.test_result(self)
numpy.core.tests.test_scalarmath.TestPower
numpy.core.tests.test_scalarmath.TestPower.test_integers_to_negative_integer_power(self)
numpy.core.tests.test_scalarmath.TestPower.test_large_types(self)
numpy.core.tests.test_scalarmath.TestPower.test_mixed_types(self)
numpy.core.tests.test_scalarmath.TestPower.test_modular_power(self)
numpy.core.tests.test_scalarmath.TestPower.test_small_types(self)
numpy.core.tests.test_scalarmath.TestRepr
numpy.core.tests.test_scalarmath.TestRepr._test_type_repr(self,t)
numpy.core.tests.test_scalarmath.TestRepr.test_float_repr(self)
numpy.core.tests.test_scalarmath.TestSubtract
numpy.core.tests.test_scalarmath.TestSubtract.test_exceptions(self)
numpy.core.tests.test_scalarmath.TestSubtract.test_result(self)
numpy.core.tests.test_scalarmath.TestTypes
numpy.core.tests.test_scalarmath.TestTypes.test_leak(self)
numpy.core.tests.test_scalarmath.TestTypes.test_type_add(self)
numpy.core.tests.test_scalarmath.TestTypes.test_type_create(self)
numpy.core.tests.test_scalarmath.TestTypes.test_types(self)
numpy.core.tests.test_scalarmath._signs(dt)
numpy.core.tests.test_scalarmath.floordiv_and_mod(x,y)
numpy.core.tests.test_scalarmath.recursionlimit(n)
numpy.core.tests.test_scalarmath.test_clongdouble_inf_loop(op)
numpy.core.tests.test_scalarmath.test_longdouble_inf_loop(op)
numpy.core.tests.test_scalarmath.test_operator_object_left(o,op,type_)
numpy.core.tests.test_scalarmath.test_operator_object_right(o,op,type_)
numpy.core.tests.test_scalarmath.test_operator_scalars(op,type1,type2)
numpy.tests.test_scalarmath.TestAbs
numpy.tests.test_scalarmath.TestAbs._test_abs_func(self,absfunc,test_dtype)
numpy.tests.test_scalarmath.TestAbs.test_builtin_abs(self,dtype)
numpy.tests.test_scalarmath.TestAbs.test_numpy_abs(self,dtype)
numpy.tests.test_scalarmath.TestBaseMath
numpy.tests.test_scalarmath.TestBaseMath.test_blocked(self)
numpy.tests.test_scalarmath.TestBaseMath.test_lower_align(self)
numpy.tests.test_scalarmath.TestBitShifts
numpy.tests.test_scalarmath.TestBitShifts.test_shift_all_bits(self,type_code,op)
numpy.tests.test_scalarmath.TestComplexDivision
numpy.tests.test_scalarmath.TestComplexDivision.test_branches(self)
numpy.tests.test_scalarmath.TestComplexDivision.test_signed_zeros(self)
numpy.tests.test_scalarmath.TestComplexDivision.test_zero_division(self)
numpy.tests.test_scalarmath.TestConversion
numpy.tests.test_scalarmath.TestConversion.test_iinfo_long_values(self)
numpy.tests.test_scalarmath.TestConversion.test_int_from_huge_longdouble(self)
numpy.tests.test_scalarmath.TestConversion.test_int_from_infinite_longdouble(self)
numpy.tests.test_scalarmath.TestConversion.test_int_from_infinite_longdouble___int__(self)
numpy.tests.test_scalarmath.TestConversion.test_int_from_long(self)
numpy.tests.test_scalarmath.TestConversion.test_int_from_longdouble(self)
numpy.tests.test_scalarmath.TestConversion.test_int_raise_behaviour(self)
numpy.tests.test_scalarmath.TestConversion.test_numpy_scalar_relational_operators(self)
numpy.tests.test_scalarmath.TestConversion.test_scalar_comparison_to_none(self)
numpy.tests.test_scalarmath.TestHash
numpy.tests.test_scalarmath.TestHash.test_complex_hashes(self,type_code)
numpy.tests.test_scalarmath.TestHash.test_float_and_complex_hashes(self,type_code)
numpy.tests.test_scalarmath.TestHash.test_integer_hashes(self,type_code)
numpy.tests.test_scalarmath.TestModulus
numpy.tests.test_scalarmath.TestModulus.test_float_modulus_corner_cases(self)
numpy.tests.test_scalarmath.TestModulus.test_float_modulus_exact(self)
numpy.tests.test_scalarmath.TestModulus.test_float_modulus_roundoff(self)
numpy.tests.test_scalarmath.TestModulus.test_inplace_floordiv_handling(self)
numpy.tests.test_scalarmath.TestModulus.test_modulus_basic(self)
numpy.tests.test_scalarmath.TestMultiply
numpy.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like(self)
numpy.tests.test_scalarmath.TestMultiply.test_seq_repeat(self)
numpy.tests.test_scalarmath.TestNegative
numpy.tests.test_scalarmath.TestNegative.test_exceptions(self)
numpy.tests.test_scalarmath.TestNegative.test_result(self)
numpy.tests.test_scalarmath.TestPower
numpy.tests.test_scalarmath.TestPower.test_integers_to_negative_integer_power(self)
numpy.tests.test_scalarmath.TestPower.test_large_types(self)
numpy.tests.test_scalarmath.TestPower.test_mixed_types(self)
numpy.tests.test_scalarmath.TestPower.test_modular_power(self)
numpy.tests.test_scalarmath.TestPower.test_small_types(self)
numpy.tests.test_scalarmath.TestRepr
numpy.tests.test_scalarmath.TestRepr._test_type_repr(self,t)
numpy.tests.test_scalarmath.TestRepr.test_float_repr(self)
numpy.tests.test_scalarmath.TestSubtract
numpy.tests.test_scalarmath.TestSubtract.test_exceptions(self)
numpy.tests.test_scalarmath.TestSubtract.test_result(self)
numpy.tests.test_scalarmath.TestTypes
numpy.tests.test_scalarmath.TestTypes.test_leak(self)
numpy.tests.test_scalarmath.TestTypes.test_type_add(self)
numpy.tests.test_scalarmath.TestTypes.test_type_create(self)
numpy.tests.test_scalarmath.TestTypes.test_types(self)
numpy.tests.test_scalarmath._signs(dt)
numpy.tests.test_scalarmath.floordiv_and_mod(x,y)
numpy.tests.test_scalarmath.recursionlimit(n)
numpy.tests.test_scalarmath.test_clongdouble_inf_loop(op)
numpy.tests.test_scalarmath.test_longdouble_inf_loop(op)
numpy.tests.test_scalarmath.test_operator_object_left(o,op,type_)
numpy.tests.test_scalarmath.test_operator_object_right(o,op,type_)
numpy.tests.test_scalarmath.test_operator_scalars(op,type1,type2)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_scalarprint.py----------------------------------------
A:numpy.core.tests.test_scalarprint.msg->'for str({}({}))'.format(np.dtype(styp).name, repr(val))
A:numpy.core.tests.test_scalarprint.x->numpy.float32(1024 - 2 ** (-14))
A:numpy.core.tests.test_scalarprint.output->f.read()
A:numpy.core.tests.test_scalarprint.gen->userinput()
A:numpy.core.tests.test_scalarprint.capture->fo.read().strip()
A:numpy.core.tests.test_scalarprint.a->numpy.float64.fromhex('-1p-97')
A:numpy.core.tests.test_scalarprint.b->numpy.float128(str(a))
A:numpy.core.tests.test_scalarprint.y->numpy.float32(1024 - 2 ** (-13))
numpy.core.tests.test_scalarprint.TestRealScalars
numpy.core.tests.test_scalarprint.TestRealScalars.float32_roundtrip(self)
numpy.core.tests.test_scalarprint.TestRealScalars.float64_vs_python(self)
numpy.core.tests.test_scalarprint.TestRealScalars.test_dragon4(self)
numpy.core.tests.test_scalarprint.TestRealScalars.test_dragon4_interface(self)
numpy.core.tests.test_scalarprint.TestRealScalars.test_ppc64_ibm_double_double128(self)
numpy.core.tests.test_scalarprint.TestRealScalars.test_py2_float_print(self)
numpy.core.tests.test_scalarprint.TestRealScalars.test_scalar_cutoffs(self)
numpy.core.tests.test_scalarprint.TestRealScalars.test_str(self)
numpy.tests.test_scalarprint.TestRealScalars
numpy.tests.test_scalarprint.TestRealScalars.float32_roundtrip(self)
numpy.tests.test_scalarprint.TestRealScalars.float64_vs_python(self)
numpy.tests.test_scalarprint.TestRealScalars.test_dragon4(self)
numpy.tests.test_scalarprint.TestRealScalars.test_dragon4_interface(self)
numpy.tests.test_scalarprint.TestRealScalars.test_ppc64_ibm_double_double128(self)
numpy.tests.test_scalarprint.TestRealScalars.test_py2_float_print(self)
numpy.tests.test_scalarprint.TestRealScalars.test_scalar_cutoffs(self)
numpy.tests.test_scalarprint.TestRealScalars.test_str(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_errstate.py----------------------------------------
A:numpy.core.tests.test_errstate.hosttype->sysconfig.get_config_var('HOST_GNU_TYPE')
A:numpy.core.tests.test_errstate.olderrcall->numpy.geterrcall()
numpy.core.tests.test_errstate.TestErrstate
numpy.core.tests.test_errstate.TestErrstate.test_divide(self)
numpy.core.tests.test_errstate.TestErrstate.test_errcall(self)
numpy.core.tests.test_errstate.TestErrstate.test_errstate_decorator(self)
numpy.core.tests.test_errstate.TestErrstate.test_invalid(self)
numpy.tests.test_errstate.TestErrstate
numpy.tests.test_errstate.TestErrstate.test_divide(self)
numpy.tests.test_errstate.TestErrstate.test_errcall(self)
numpy.tests.test_errstate.TestErrstate.test_errstate_decorator(self)
numpy.tests.test_errstate.TestErrstate.test_invalid(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_indexerrors.py----------------------------------------
A:numpy.core.tests.test_indexerrors.x->numpy.empty((2, 3, 0, 4))
A:numpy.core.tests.test_indexerrors.d->numpy.zeros((5, 0), dtype=object)
A:numpy.core.tests.test_indexerrors.a->numpy.zeros((0, 3))
numpy.core.tests.test_indexerrors.TestIndexErrors
numpy.core.tests.test_indexerrors.TestIndexErrors.test_arraytypes_fasttake(self)
numpy.core.tests.test_indexerrors.TestIndexErrors.test_iterators_exceptions(self)
numpy.core.tests.test_indexerrors.TestIndexErrors.test_mapping(self)
numpy.core.tests.test_indexerrors.TestIndexErrors.test_mapping_error_message(self)
numpy.core.tests.test_indexerrors.TestIndexErrors.test_methods(self)
numpy.core.tests.test_indexerrors.TestIndexErrors.test_multiindex_exceptions(self)
numpy.core.tests.test_indexerrors.TestIndexErrors.test_put_exceptions(self)
numpy.core.tests.test_indexerrors.TestIndexErrors.test_take_from_object(self)
numpy.tests.test_indexerrors.TestIndexErrors
numpy.tests.test_indexerrors.TestIndexErrors.test_arraytypes_fasttake(self)
numpy.tests.test_indexerrors.TestIndexErrors.test_iterators_exceptions(self)
numpy.tests.test_indexerrors.TestIndexErrors.test_mapping(self)
numpy.tests.test_indexerrors.TestIndexErrors.test_mapping_error_message(self)
numpy.tests.test_indexerrors.TestIndexErrors.test_methods(self)
numpy.tests.test_indexerrors.TestIndexErrors.test_multiindex_exceptions(self)
numpy.tests.test_indexerrors.TestIndexErrors.test_put_exceptions(self)
numpy.tests.test_indexerrors.TestIndexErrors.test_take_from_object(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_simd_module.py----------------------------------------
A:numpy.core.tests.test_simd_module.nlanes->getattr(npyv, 'nlanes_' + sfx)
A:numpy.core.tests.test_simd_module.vector->getattr(npyv, 'setall_' + sfx)(1)
A:numpy.core.tests.test_simd_module.a->npyv.setall_u32(1)
A:numpy.core.tests.test_simd_module.a2->npyv2.setall_u32(1)
A:numpy.core.tests.test_simd_module.lanes->getattr(npyv, 'load_' + sfx)([mins_72] * nlanes)
A:numpy.core.tests.test_simd_module.data_range->range(0, npyv.nlanes_u32)
A:numpy.core.tests.test_simd_module.vdata->npyv.load_u32(data_range)
numpy.core.tests.test_simd_module.Test_SIMD_MODULE
numpy.core.tests.test_simd_module.Test_SIMD_MODULE.test_compare(self)
numpy.core.tests.test_simd_module.Test_SIMD_MODULE.test_nomix(self)
numpy.core.tests.test_simd_module.Test_SIMD_MODULE.test_num_lanes(self,sfx)
numpy.core.tests.test_simd_module.Test_SIMD_MODULE.test_raises(self)
numpy.core.tests.test_simd_module.Test_SIMD_MODULE.test_signed_overflow(self,sfx)
numpy.core.tests.test_simd_module.Test_SIMD_MODULE.test_truncate_f32(self)
numpy.core.tests.test_simd_module.Test_SIMD_MODULE.test_type_name(self,sfx)
numpy.core.tests.test_simd_module.Test_SIMD_MODULE.test_unsigned_overflow(self,sfx)
numpy.tests.test_simd_module.Test_SIMD_MODULE
numpy.tests.test_simd_module.Test_SIMD_MODULE.test_compare(self)
numpy.tests.test_simd_module.Test_SIMD_MODULE.test_nomix(self)
numpy.tests.test_simd_module.Test_SIMD_MODULE.test_num_lanes(self,sfx)
numpy.tests.test_simd_module.Test_SIMD_MODULE.test_raises(self)
numpy.tests.test_simd_module.Test_SIMD_MODULE.test_signed_overflow(self,sfx)
numpy.tests.test_simd_module.Test_SIMD_MODULE.test_truncate_f32(self)
numpy.tests.test_simd_module.Test_SIMD_MODULE.test_type_name(self,sfx)
numpy.tests.test_simd_module.Test_SIMD_MODULE.test_unsigned_overflow(self,sfx)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_simd.py----------------------------------------
A:numpy.core.tests.test_simd.rng->reversed(rng)
A:numpy.core.tests.test_simd.max_int->self._int_max()
A:numpy.core.tests.test_simd.min_int->self._int_min()
A:numpy.core.tests.test_simd.max_unsig->getattr(self.npyv, 'setall_u' + self.sfx[1:])(-1)
A:numpy.core.tests.test_simd.sfx->vector.__name__.replace('npyv_', '')
A:numpy.core.tests.test_simd.v->self.npyv.setall_u32(2143289344)
A:numpy.core.tests.test_simd.target->target.split('__').split('__')
A:numpy.core.tests.test_simd.nlanes->getattr(self.npyv, 'nlanes_u' + self.sfx[1:])
A:numpy.core.tests.test_simd.true_mask->self.cmpeq(self.zero(), self.zero())
A:numpy.core.tests.test_simd.load->getattr(self.npyv, 'load_u' + len_str)
A:numpy.core.tests.test_simd.cvt->getattr(self.npyv, f'cvt_b{len_str}_u{len_str}')
A:numpy.core.tests.test_simd.data_a->self._data(self._int_max() - self.nlanes)
A:numpy.core.tests.test_simd.data_b->self._data(self._int_min(), reverse=True)
A:numpy.core.tests.test_simd.vdata_a->self.load(self._data())
A:numpy.core.tests.test_simd.vdata_b->self.load(self._data(reverse=True))
A:numpy.core.tests.test_simd.vand->cast(getattr(self, 'and')(vdata_a, vdata_b))
A:numpy.core.tests.test_simd.vor->cast(getattr(self, 'or')(vdata_a, vdata_b))
A:numpy.core.tests.test_simd.vxor->cast(self.xor(vdata_a, vdata_b))
A:numpy.core.tests.test_simd.vnot->cast(getattr(self, 'not')(vdata_a))
A:numpy.core.tests.test_simd.vdata->self.load(data)
A:numpy.core.tests.test_simd.data_bits->data2bits(data)
A:numpy.core.tests.test_simd.tobits->bin(self.tobits(vdata))
A:numpy.core.tests.test_simd.data_shl_a->self.load([a << count for a in data_a])
A:numpy.core.tests.test_simd.shl->self.shl(vdata_a, count)
A:numpy.core.tests.test_simd.data_shr_a->self.load([a >> count for a in data_a])
A:numpy.core.tests.test_simd.shr->self.shr(vdata_a, count)
A:numpy.core.tests.test_simd.shli->self.shli(vdata_a, count)
A:numpy.core.tests.test_simd.shri->self.shri(vdata_a, count)
A:numpy.core.tests.test_simd.data_adds->self._int_clip([a + b for (a, b) in zip(data_a, data_b)])
A:numpy.core.tests.test_simd.adds->self.adds(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.data_subs->self._int_clip([a - b for (a, b) in zip(data_a, data_b)])
A:numpy.core.tests.test_simd.subs->self.subs(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.simd_max->self.max(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.simd_min->self.min(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.features->self._cpu_features()
A:numpy.core.tests.test_simd.vround->self.round_s32(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.vdata_cx2->self.add(vdata_c, vdata_c)
A:numpy.core.tests.test_simd.data_fma->self.load([a * b + c for (a, b, c) in zip(vdata_a, vdata_b, vdata_c)])
A:numpy.core.tests.test_simd.fma->self.muladd(vdata_a, vdata_b, vdata_c)
A:numpy.core.tests.test_simd.fms->self.mulsub(vdata_a, vdata_b, vdata_c)
A:numpy.core.tests.test_simd.data_fms->self.sub(data_fma, vdata_cx2)
A:numpy.core.tests.test_simd.nfma->self.nmuladd(vdata_a, vdata_b, vdata_c)
A:numpy.core.tests.test_simd.data_nfma->self.sub(vdata_cx2, data_fma)
A:numpy.core.tests.test_simd.nfms->self.nmulsub(vdata_a, vdata_b, vdata_c)
A:numpy.core.tests.test_simd.data_nfms->self.mul(data_fma, self.setall(-1))
A:numpy.core.tests.test_simd.data->self._data(r)
A:numpy.core.tests.test_simd.vabs->self.abs(self.mul(vdata, self.setall(-1)))
A:numpy.core.tests.test_simd.sqrt->self.sqrt(vdata)
A:numpy.core.tests.test_simd.data_sqrt->self.load([math.sqrt(x) for x in data])
A:numpy.core.tests.test_simd.square->self.square(vdata)
A:numpy.core.tests.test_simd._max->self.max(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.maxp->self.maxp(vdata_a, vdata_b)
A:numpy.core.tests.test_simd._min->self.min(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.minp->self.minp(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.recip->self.recip(vdata)
A:numpy.core.tests.test_simd.data_recip->self.load([1 / x for x in data])
A:numpy.core.tests.test_simd.nnan->self.notnan(self.setall(self._nan()))
A:numpy.core.tests.test_simd.load_data->self.load(data)
A:numpy.core.tests.test_simd.loada_data->self.loada(data)
A:numpy.core.tests.test_simd.loads_data->self.loads(data)
A:numpy.core.tests.test_simd.loadl->self.loadl(data)
A:numpy.core.tests.test_simd.lanes->list(range(1, self.nlanes + 1))
A:numpy.core.tests.test_simd.load_till->self.load_till(data, n, 15)
A:numpy.core.tests.test_simd.load_tillz->self.load_tillz(data, n)
A:numpy.core.tests.test_simd.data_rev->self._data(reverse=True)
A:numpy.core.tests.test_simd.data_till->self._data(reverse=True).copy()
A:numpy.core.tests.test_simd.store_till->self._data(reverse=True)
A:numpy.core.tests.test_simd.loadn->self.loadn(data, stride)
A:numpy.core.tests.test_simd.data_stride->list(self.load(data[::stride]))
A:numpy.core.tests.test_simd.loadn_till->self.loadn_till(data, stride, n, 15)
A:numpy.core.tests.test_simd.loadn_tillz->self.loadn_tillz(data, stride, n)
A:numpy.core.tests.test_simd.broadcast_zero->self.zero()
A:numpy.core.tests.test_simd.broadcasti->self.setall(i)
A:numpy.core.tests.test_simd.vset->self.set(*data_a)
A:numpy.core.tests.test_simd.vsetf->self.setf(10, *data_a)
A:numpy.core.tests.test_simd.select_a->self.select(self.cmpeq(self.zero(), self.zero()), vdata_a, vdata_b)
A:numpy.core.tests.test_simd.select_b->self.select(self.cmpneq(self.zero(), self.zero()), vdata_a, vdata_b)
A:numpy.core.tests.test_simd.combinel->self.combinel(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.combineh->self.combineh(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.combine->self.combine(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.vzip->self.zip(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.ssize->self._scalar_size()
A:numpy.core.tests.test_simd.rev64->self.rev64(self.load(range(self.nlanes)))
A:numpy.core.tests.test_simd.mask_true->self._true_mask()
A:numpy.core.tests.test_simd.cmpeq->to_bool(self.cmpeq(vdata_a, vdata_b))
A:numpy.core.tests.test_simd.cmpneq->to_bool(self.cmpneq(vdata_a, vdata_b))
A:numpy.core.tests.test_simd.cmpgt->to_bool(self.cmpgt(vdata_a, vdata_b))
A:numpy.core.tests.test_simd.cmpge->to_bool(self.cmpge(vdata_a, vdata_b))
A:numpy.core.tests.test_simd.cmplt->to_bool(self.cmplt(vdata_a, vdata_b))
A:numpy.core.tests.test_simd.cmple->to_bool(self.cmple(vdata_a, vdata_b))
A:numpy.core.tests.test_simd.data_cast_a->self._to_unsigned(vdata_a)
A:numpy.core.tests.test_simd.data_cast_b->self._to_unsigned(vdata_b)
A:numpy.core.tests.test_simd.data_xor->cast_data([a ^ b for (a, b) in zip(data_cast_a, data_cast_b)])
A:numpy.core.tests.test_simd.data_or->cast_data([a | b for (a, b) in zip(data_cast_a, data_cast_b)])
A:numpy.core.tests.test_simd.data_and->cast_data([a & b for (a, b) in zip(data_cast_a, data_cast_b)])
A:numpy.core.tests.test_simd.data_not->cast_data([~a for a in data_cast_a])
A:numpy.core.tests.test_simd.to_boolean->getattr(self.npyv, 'cvt_%s_%s' % (bsfx, self.sfx))
A:numpy.core.tests.test_simd.from_boolean->getattr(self.npyv, 'cvt_%s_%s' % (self.sfx, bsfx))
A:numpy.core.tests.test_simd.false_vb->to_boolean(self.setall(0))
A:numpy.core.tests.test_simd.true_vb->self.cmpeq(self.setall(0), self.setall(0))
A:numpy.core.tests.test_simd.false_vsfx->from_boolean(false_vb)
A:numpy.core.tests.test_simd.true_vsfx->from_boolean(true_vb)
A:numpy.core.tests.test_simd.expand->getattr(self.npyv, f'expand_{totype}_{self.sfx}')
A:numpy.core.tests.test_simd.edata->expand(vdata)
A:numpy.core.tests.test_simd.data_add->self.add(vdata_b, vdata_a)
A:numpy.core.tests.test_simd.add->self.add(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.data_sub->self.sub(vdata_b, vdata_a)
A:numpy.core.tests.test_simd.sub->self.sub(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.data_mul->self.load([a * b for (a, b) in zip(data_a, data_b)])
A:numpy.core.tests.test_simd.mul->self.mul(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.data_div->self.load([a / b for (a, b) in zip(data_a, data_b)])
A:numpy.core.tests.test_simd.div->self.div(vdata_a, vdata_b)
A:numpy.core.tests.test_simd.int_max->self._int_max()
A:numpy.core.tests.test_simd.divisor->self.divisor(-1)
A:numpy.core.tests.test_simd.divc->self.divc(vmin, divisor)
A:numpy.core.tests.test_simd.d_neg->safe_neg(d)
A:numpy.core.tests.test_simd.vdata_neg->self.load(data_neg)
A:numpy.core.tests.test_simd.divisor_neg->self.divisor(d_neg)
A:numpy.core.tests.test_simd.vzero->self.zero()
A:numpy.core.tests.test_simd.vmin->self.setall(int_min)
A:numpy.core.tests.test_simd.data_sum->sum(data)
A:numpy.core.tests.test_simd.vsum->self.sumup(vdata)
A:numpy.core.tests.test_simd.false_mask->self.cmpneq(self.zero(), self.zero())
A:numpy.core.tests.test_simd.ifsub->self.ifsub(false_mask, vdata_a, vdata_b, vdata_b)
A:numpy.core.tests.test_simd.ifadd->self.ifadd(false_mask, vdata_a, vdata_b, vdata_b)
A:numpy.core.tests.test_simd.pretty_name->target_name.split('__')
A:numpy.core.tests.test_simd.skip_sfx->dict()
A:numpy.core.tests.test_simd.skip_m->dict().get(sfx, skip)
A:numpy.core.tests.test_simd.attr->dict(npyv=targets[target_name], sfx=sfx, target_name=target_name)
A:numpy.core.tests.test_simd.tcls->type(f'Test{cls.__name__}_{simd_width}_{target_name}_{sfx}', inhr, attr)
numpy.core.tests.test_simd._SIMD_ALL(_Test_Utility)
numpy.core.tests.test_simd._SIMD_ALL.test_arithmetic_div(self)
numpy.core.tests.test_simd._SIMD_ALL.test_arithmetic_intdiv(self)
numpy.core.tests.test_simd._SIMD_ALL.test_arithmetic_mul(self)
numpy.core.tests.test_simd._SIMD_ALL.test_arithmetic_reduce_sum(self)
numpy.core.tests.test_simd._SIMD_ALL.test_arithmetic_reduce_sumup(self)
numpy.core.tests.test_simd._SIMD_ALL.test_arithmetic_subadd(self)
numpy.core.tests.test_simd._SIMD_ALL.test_conversion_boolean(self)
numpy.core.tests.test_simd._SIMD_ALL.test_conversion_expand(self)
numpy.core.tests.test_simd._SIMD_ALL.test_mask_conditional(self)
numpy.core.tests.test_simd._SIMD_ALL.test_memory_load(self)
numpy.core.tests.test_simd._SIMD_ALL.test_memory_noncont_load(self)
numpy.core.tests.test_simd._SIMD_ALL.test_memory_noncont_partial_load(self)
numpy.core.tests.test_simd._SIMD_ALL.test_memory_noncont_partial_store(self)
numpy.core.tests.test_simd._SIMD_ALL.test_memory_noncont_store(self)
numpy.core.tests.test_simd._SIMD_ALL.test_memory_partial_load(self)
numpy.core.tests.test_simd._SIMD_ALL.test_memory_partial_store(self)
numpy.core.tests.test_simd._SIMD_ALL.test_memory_store(self)
numpy.core.tests.test_simd._SIMD_ALL.test_misc(self)
numpy.core.tests.test_simd._SIMD_ALL.test_operators_comparison(self)
numpy.core.tests.test_simd._SIMD_ALL.test_operators_logical(self)
numpy.core.tests.test_simd._SIMD_ALL.test_reorder(self)
numpy.core.tests.test_simd._SIMD_ALL.test_reorder_rev64(self)
numpy.core.tests.test_simd._SIMD_BOOL(_Test_Utility)
numpy.core.tests.test_simd._SIMD_BOOL._data(self,start=None,count=None,reverse=False)
numpy.core.tests.test_simd._SIMD_BOOL._load_b(self,data)
numpy.core.tests.test_simd._SIMD_BOOL.test_operators_logical(self)
numpy.core.tests.test_simd._SIMD_BOOL.test_tobits(self)
numpy.core.tests.test_simd._SIMD_FP(_Test_Utility)
numpy.core.tests.test_simd._SIMD_FP.test_abs(self)
numpy.core.tests.test_simd._SIMD_FP.test_arithmetic_fused(self)
numpy.core.tests.test_simd._SIMD_FP.test_max(self)
numpy.core.tests.test_simd._SIMD_FP.test_min(self)
numpy.core.tests.test_simd._SIMD_FP.test_reciprocal(self)
numpy.core.tests.test_simd._SIMD_FP.test_special_cases(self)
numpy.core.tests.test_simd._SIMD_FP.test_sqrt(self)
numpy.core.tests.test_simd._SIMD_FP.test_square(self)
numpy.core.tests.test_simd._SIMD_FP32(_Test_Utility)
numpy.core.tests.test_simd._SIMD_FP32.test_conversions(self)
numpy.core.tests.test_simd._SIMD_FP64(_Test_Utility)
numpy.core.tests.test_simd._SIMD_FP64.test_conversions(self)
numpy.core.tests.test_simd._SIMD_INT(_Test_Utility)
numpy.core.tests.test_simd._SIMD_INT.test_arithmetic_subadd_saturated(self)
numpy.core.tests.test_simd._SIMD_INT.test_math_max_min(self)
numpy.core.tests.test_simd._SIMD_INT.test_operators_shift(self)
numpy.core.tests.test_simd._Test_Utility
numpy.core.tests.test_simd._Test_Utility.__getattr__(self,attr)
numpy.core.tests.test_simd._Test_Utility._cpu_features(self)
numpy.core.tests.test_simd._Test_Utility._data(self,start=None,count=None,reverse=False)
numpy.core.tests.test_simd._Test_Utility._int_clip(self,seq)
numpy.core.tests.test_simd._Test_Utility._int_max(self)
numpy.core.tests.test_simd._Test_Utility._int_min(self)
numpy.core.tests.test_simd._Test_Utility._is_fp(self)
numpy.core.tests.test_simd._Test_Utility._is_signed(self)
numpy.core.tests.test_simd._Test_Utility._is_unsigned(self)
numpy.core.tests.test_simd._Test_Utility._nan(self)
numpy.core.tests.test_simd._Test_Utility._ninfinity(self)
numpy.core.tests.test_simd._Test_Utility._pinfinity(self)
numpy.core.tests.test_simd._Test_Utility._scalar_size(self)
numpy.core.tests.test_simd._Test_Utility._to_unsigned(self,vector)
numpy.core.tests.test_simd._Test_Utility._true_mask(self)
numpy.tests.test_simd._SIMD_ALL(_Test_Utility)
numpy.tests.test_simd._SIMD_ALL.test_arithmetic_div(self)
numpy.tests.test_simd._SIMD_ALL.test_arithmetic_intdiv(self)
numpy.tests.test_simd._SIMD_ALL.test_arithmetic_mul(self)
numpy.tests.test_simd._SIMD_ALL.test_arithmetic_reduce_sum(self)
numpy.tests.test_simd._SIMD_ALL.test_arithmetic_reduce_sumup(self)
numpy.tests.test_simd._SIMD_ALL.test_arithmetic_subadd(self)
numpy.tests.test_simd._SIMD_ALL.test_conversion_boolean(self)
numpy.tests.test_simd._SIMD_ALL.test_conversion_expand(self)
numpy.tests.test_simd._SIMD_ALL.test_mask_conditional(self)
numpy.tests.test_simd._SIMD_ALL.test_memory_load(self)
numpy.tests.test_simd._SIMD_ALL.test_memory_noncont_load(self)
numpy.tests.test_simd._SIMD_ALL.test_memory_noncont_partial_load(self)
numpy.tests.test_simd._SIMD_ALL.test_memory_noncont_partial_store(self)
numpy.tests.test_simd._SIMD_ALL.test_memory_noncont_store(self)
numpy.tests.test_simd._SIMD_ALL.test_memory_partial_load(self)
numpy.tests.test_simd._SIMD_ALL.test_memory_partial_store(self)
numpy.tests.test_simd._SIMD_ALL.test_memory_store(self)
numpy.tests.test_simd._SIMD_ALL.test_misc(self)
numpy.tests.test_simd._SIMD_ALL.test_operators_comparison(self)
numpy.tests.test_simd._SIMD_ALL.test_operators_logical(self)
numpy.tests.test_simd._SIMD_ALL.test_reorder(self)
numpy.tests.test_simd._SIMD_ALL.test_reorder_rev64(self)
numpy.tests.test_simd._SIMD_BOOL(_Test_Utility)
numpy.tests.test_simd._SIMD_BOOL._data(self,start=None,count=None,reverse=False)
numpy.tests.test_simd._SIMD_BOOL._load_b(self,data)
numpy.tests.test_simd._SIMD_BOOL.test_operators_logical(self)
numpy.tests.test_simd._SIMD_BOOL.test_tobits(self)
numpy.tests.test_simd._SIMD_FP(_Test_Utility)
numpy.tests.test_simd._SIMD_FP.test_abs(self)
numpy.tests.test_simd._SIMD_FP.test_arithmetic_fused(self)
numpy.tests.test_simd._SIMD_FP.test_max(self)
numpy.tests.test_simd._SIMD_FP.test_min(self)
numpy.tests.test_simd._SIMD_FP.test_reciprocal(self)
numpy.tests.test_simd._SIMD_FP.test_special_cases(self)
numpy.tests.test_simd._SIMD_FP.test_sqrt(self)
numpy.tests.test_simd._SIMD_FP.test_square(self)
numpy.tests.test_simd._SIMD_FP32(_Test_Utility)
numpy.tests.test_simd._SIMD_FP32.test_conversions(self)
numpy.tests.test_simd._SIMD_FP64(_Test_Utility)
numpy.tests.test_simd._SIMD_FP64.test_conversions(self)
numpy.tests.test_simd._SIMD_INT(_Test_Utility)
numpy.tests.test_simd._SIMD_INT.test_arithmetic_subadd_saturated(self)
numpy.tests.test_simd._SIMD_INT.test_math_max_min(self)
numpy.tests.test_simd._SIMD_INT.test_operators_shift(self)
numpy.tests.test_simd._Test_Utility
numpy.tests.test_simd._Test_Utility.__getattr__(self,attr)
numpy.tests.test_simd._Test_Utility._cpu_features(self)
numpy.tests.test_simd._Test_Utility._data(self,start=None,count=None,reverse=False)
numpy.tests.test_simd._Test_Utility._int_clip(self,seq)
numpy.tests.test_simd._Test_Utility._int_max(self)
numpy.tests.test_simd._Test_Utility._int_min(self)
numpy.tests.test_simd._Test_Utility._is_fp(self)
numpy.tests.test_simd._Test_Utility._is_signed(self)
numpy.tests.test_simd._Test_Utility._is_unsigned(self)
numpy.tests.test_simd._Test_Utility._nan(self)
numpy.tests.test_simd._Test_Utility._ninfinity(self)
numpy.tests.test_simd._Test_Utility._pinfinity(self)
numpy.tests.test_simd._Test_Utility._scalar_size(self)
numpy.tests.test_simd._Test_Utility._to_unsigned(self,vector)
numpy.tests.test_simd._Test_Utility._true_mask(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_memmap.py----------------------------------------
A:numpy.core.tests.test_memmap.self.tmpfp->NamedTemporaryFile(prefix='mmap')
A:numpy.core.tests.test_memmap.self.data->arange(12, dtype=self.dtype)
A:numpy.core.tests.test_memmap.fp->memmap(self.tmpfp, shape=size, mode='w+', offset=offset)
A:numpy.core.tests.test_memmap.newfp->memmap(self.tmpfp, dtype=self.dtype, mode='r', shape=self.shape)
A:numpy.core.tests.test_memmap.abspath->str(Path(tmpname).resolve())
A:numpy.core.tests.test_memmap.fp_base->memmap(self.tmpfp, dtype=self.dtype, mode='w+', shape=self.shape)
A:numpy.core.tests.test_memmap.new1->memmap(self.tmpfp, shape=size, mode='w+', offset=offset).view()
A:numpy.core.tests.test_memmap.new2->memmap(self.tmpfp, shape=size, mode='w+', offset=offset).view().view()
A:numpy.core.tests.test_memmap.new_array->asarray(fp)
A:numpy.core.tests.test_memmap.result->unary_op(fp)
A:numpy.core.tests.test_memmap.mm->memmap(self.tmpfp, dtype='float64')
numpy.core.tests.test_memmap.TestMemmap
numpy.core.tests.test_memmap.TestMemmap.setup(self)
numpy.core.tests.test_memmap.TestMemmap.teardown(self)
numpy.core.tests.test_memmap.TestMemmap.test_arithmetic_drops_references(self)
numpy.core.tests.test_memmap.TestMemmap.test_attributes(self)
numpy.core.tests.test_memmap.TestMemmap.test_del(self)
numpy.core.tests.test_memmap.TestMemmap.test_empty_array(self)
numpy.core.tests.test_memmap.TestMemmap.test_filename(self,tmp_path)
numpy.core.tests.test_memmap.TestMemmap.test_filename_fileobj(self)
numpy.core.tests.test_memmap.TestMemmap.test_flush(self)
numpy.core.tests.test_memmap.TestMemmap.test_getitem(self)
numpy.core.tests.test_memmap.TestMemmap.test_indexing_drops_references(self)
numpy.core.tests.test_memmap.TestMemmap.test_memmap_subclass(self)
numpy.core.tests.test_memmap.TestMemmap.test_mmap_offset_greater_than_allocation_granularity(self)
numpy.core.tests.test_memmap.TestMemmap.test_no_shape(self)
numpy.core.tests.test_memmap.TestMemmap.test_open_with_filename(self,tmp_path)
numpy.core.tests.test_memmap.TestMemmap.test_path(self,tmp_path)
numpy.core.tests.test_memmap.TestMemmap.test_roundtrip(self)
numpy.core.tests.test_memmap.TestMemmap.test_slicing_keeps_references(self)
numpy.core.tests.test_memmap.TestMemmap.test_ufunc_return_ndarray(self)
numpy.core.tests.test_memmap.TestMemmap.test_unnamed_file(self)
numpy.core.tests.test_memmap.TestMemmap.test_view(self)
numpy.tests.test_TestMemmap
numpy.tests.test_TestMemmap.setup(self)
numpy.tests.test_TestMemmap.teardown(self)
numpy.tests.test_TestMemmap.test_arithmetic_drops_references(self)
numpy.tests.test_TestMemmap.test_attributes(self)
numpy.tests.test_TestMemmap.test_del(self)
numpy.tests.test_TestMemmap.test_empty_array(self)
numpy.tests.test_TestMemmap.test_filename(self,tmp_path)
numpy.tests.test_TestMemmap.test_filename_fileobj(self)
numpy.tests.test_TestMemmap.test_flush(self)
numpy.tests.test_TestMemmap.test_getitem(self)
numpy.tests.test_TestMemmap.test_indexing_drops_references(self)
numpy.tests.test_TestMemmap.test_memmap_subclass(self)
numpy.tests.test_TestMemmap.test_mmap_offset_greater_than_allocation_granularity(self)
numpy.tests.test_TestMemmap.test_no_shape(self)
numpy.tests.test_TestMemmap.test_open_with_filename(self,tmp_path)
numpy.tests.test_TestMemmap.test_path(self,tmp_path)
numpy.tests.test_TestMemmap.test_roundtrip(self)
numpy.tests.test_TestMemmap.test_slicing_keeps_references(self)
numpy.tests.test_TestMemmap.test_ufunc_return_ndarray(self)
numpy.tests.test_TestMemmap.test_unnamed_file(self)
numpy.tests.test_TestMemmap.test_view(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_mem_overlap.py----------------------------------------
A:numpy.core.tests.test_mem_overlap.shape->tuple((rng.randint(1, 30, dtype=np.intp) for j in range(ndim)))
A:numpy.core.tests.test_mem_overlap.ind->numpy.arange(0, 100, 2, dtype=np.int16)
A:numpy.core.tests.test_mem_overlap.arr->numpy.arange(np.product(shape)).reshape(shape)
A:numpy.core.tests.test_mem_overlap.cpy->numpy.arange(np.product(shape)).reshape(shape).copy()
A:numpy.core.tests.test_mem_overlap.inds->_indices(ndims)
A:numpy.core.tests.test_mem_overlap.srcidx->tuple([a[0] for a in ind])
A:numpy.core.tests.test_mem_overlap.dstidx->tuple([a[1] for a in ind])
A:numpy.core.tests.test_mem_overlap.rng->numpy.random.RandomState(1234)
A:numpy.core.tests.test_mem_overlap.A_max->min(max_int, A_max)
A:numpy.core.tests.test_mem_overlap.U_max->min(max_int - 1, U_max)
A:numpy.core.tests.test_mem_overlap.A->tuple((int(rng.randint(1, A_max + 1, dtype=np.intp)) for j in range(ndim)))
A:numpy.core.tests.test_mem_overlap.U->tuple((int(rng.randint(0, U_max + 2, dtype=np.intp)) for j in range(ndim)))
A:numpy.core.tests.test_mem_overlap.b_ub->min(max_int - 2, sum((a * ub for (a, ub) in zip(A, U))))
A:numpy.core.tests.test_mem_overlap.b->x[s2].transpose(t2)
A:numpy.core.tests.test_mem_overlap.X->solve_diophantine(A, U, 0, require_ub_nontrivial=1)
A:numpy.core.tests.test_mem_overlap.X_simplified->solve_diophantine(A, U, b, simplify=1)
A:numpy.core.tests.test_mem_overlap.ranges->tuple((range(n) for n in a.shape))
A:numpy.core.tests.test_mem_overlap.got->operation(*args, **kwargs).copy()
A:numpy.core.tests.test_mem_overlap.exact->x[s2].transpose(t2).any()
A:numpy.core.tests.test_mem_overlap.xp->as_strided(x, shape=x.shape, strides=strides)
A:numpy.core.tests.test_mem_overlap.x->numpy.random.RandomState(1234).rand(200, 200)
A:numpy.core.tests.test_mem_overlap.start->numpy.random.RandomState(1234).randint(0, n + 1, dtype=np.intp)
A:numpy.core.tests.test_mem_overlap.stop->numpy.random.RandomState(1234).randint(start, n + 1, dtype=np.intp)
A:numpy.core.tests.test_mem_overlap.strides->tuple((rng.randint(-1000, 1000, dtype=np.intp) for j in range(ndim)))
A:numpy.core.tests.test_mem_overlap.steps->tuple((rng.randint(1, 11, dtype=np.intp) if rng.randint(0, 5, dtype=np.intp) == 0 else 1 for j in range(x.ndim)))
A:numpy.core.tests.test_mem_overlap.s1->tuple((random_slice(p, s) for (p, s) in zip(x.shape, steps)))
A:numpy.core.tests.test_mem_overlap.t1->numpy.arange(x.ndim)
A:numpy.core.tests.test_mem_overlap.t2->numpy.arange(x.ndim)
A:numpy.core.tests.test_mem_overlap.steps2->tuple((rng.randint(1, 11, dtype=np.intp) if rng.randint(0, 5, dtype=np.intp) == 0 else 1 for j in range(x.ndim)))
A:numpy.core.tests.test_mem_overlap.s2->tuple((random_slice(p, s) for (p, s) in zip(x.shape, steps2)))
A:numpy.core.tests.test_mem_overlap.a->numpy.arange(100, dtype=np.int16)
A:numpy.core.tests.test_mem_overlap.pair_iter->iter_random_view_pairs(x, same_steps)
A:numpy.core.tests.test_mem_overlap.(a, b)->next(it)
A:numpy.core.tests.test_mem_overlap.bounds_overlap->numpy.may_share_memory(a, b)
A:numpy.core.tests.test_mem_overlap.may_share_answer->numpy.may_share_memory(a, b)
A:numpy.core.tests.test_mem_overlap.easy_answer->numpy.may_share_memory(a, b, max_work=get_max_work(a, b))
A:numpy.core.tests.test_mem_overlap.exact_answer->numpy.may_share_memory(a, b, max_work=MAY_SHARE_EXACT)
A:numpy.core.tests.test_mem_overlap.m->set()
A:numpy.core.tests.test_mem_overlap.offset->sum((s * w for (s, w) in zip(a.strides, v)))
A:numpy.core.tests.test_mem_overlap.ndim->numpy.random.RandomState(1234).randint(1, 4, dtype=np.intp)
A:numpy.core.tests.test_mem_overlap.result->check_internal_overlap(a)
A:numpy.core.tests.test_mem_overlap.interface->dict(x.__array_interface__)
A:numpy.core.tests.test_mem_overlap.kwargs2->dict(kwargs)
A:numpy.core.tests.test_mem_overlap.kwargs2['out']->out.copy()
A:numpy.core.tests.test_mem_overlap.out_orig->out.copy()
A:numpy.core.tests.test_mem_overlap.out[...]->operation(*args, **kwargs2)
A:numpy.core.tests.test_mem_overlap.expected->out.copy()
A:numpy.core.tests.test_mem_overlap.it->iter_random_view_pairs(x, same_steps=False, equal_size=True)
A:numpy.core.tests.test_mem_overlap.a_orig->numpy.arange(100, dtype=np.int16).copy()
A:numpy.core.tests.test_mem_overlap.b_orig->x[s2].transpose(t2).copy()
A:numpy.core.tests.test_mem_overlap.(outsize, scalarize)->get_out_axis_size(a, b, axis)
A:numpy.core.tests.test_mem_overlap.sl[axis]->slice(0, outsize)
A:numpy.core.tests.test_mem_overlap.b_out->b_out.reshape([]).reshape([])
A:numpy.core.tests.test_mem_overlap.size->len(a)
A:numpy.core.tests.test_mem_overlap.idx->numpy.arange(0, size, step)
A:numpy.core.tests.test_mem_overlap.c1->ufunc(a, b, out=c0)
A:numpy.core.tests.test_mem_overlap.c2->ufunc(a, b, out=c)
A:numpy.core.tests.test_mem_overlap.n->max(2, int(np.sqrt(b.shape[-1])) // 2)
A:numpy.core.tests.test_mem_overlap.a0->numpy.arange(100, dtype=np.int16).copy()
A:numpy.core.tests.test_mem_overlap.b0->x[s2].transpose(t2).copy()
A:numpy.core.tests.test_mem_overlap.mask->view_element_first_byte(b).view(np.bool_)
A:numpy.core.tests.test_mem_overlap.c3->ufunc(a, out=b, where=mask).copy()
A:numpy.core.tests.test_mem_overlap.v->numpy.arange(6 * n).astype(dtype)
A:numpy.core.tests.test_mem_overlap.c0->c.copy()
numpy.core.tests.test_mem_overlap.TestUFunc
numpy.core.tests.test_mem_overlap.TestUFunc.check_unary_fuzz(self,operation,get_out_axis_size,dtype=np.int16,count=5000)
numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_1d_manual(self)
numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_accumulate_fuzz(self)
numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduce_fuzz(self)
numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_fuzz(self)
numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_manual(self)
numpy.core.tests.test_mem_overlap.TestUFunc.test_inplace_op_simple_manual(self)
numpy.core.tests.test_mem_overlap.TestUFunc.test_ufunc_at_manual(self)
numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_gufunc_fuzz(self)
numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_1d_manual(self)
numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_call_complex_fuzz(self)
numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_call_fuzz(self)
numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_where_same(self)
numpy.core.tests.test_mem_overlap._check_assignment(srcidx,dstidx)
numpy.core.tests.test_mem_overlap._indices(ndims)
numpy.core.tests.test_mem_overlap._indices_for_axis()
numpy.core.tests.test_mem_overlap._indices_for_nelems(nelems)
numpy.core.tests.test_mem_overlap.assert_copy_equivalent(operation,args,out,**kwargs)
numpy.core.tests.test_mem_overlap.check_internal_overlap(a,manual_expected=None)
numpy.core.tests.test_mem_overlap.check_may_share_memory_easy_fuzz(get_max_work,same_steps,min_count)
numpy.core.tests.test_mem_overlap.check_may_share_memory_exact(a,b)
numpy.core.tests.test_mem_overlap.iter_random_view_pairs(x,same_steps=True,equal_size=False)
numpy.core.tests.test_mem_overlap.test_diophantine_fuzz()
numpy.core.tests.test_mem_overlap.test_diophantine_overflow()
numpy.core.tests.test_mem_overlap.test_internal_overlap_diophantine()
numpy.core.tests.test_mem_overlap.test_internal_overlap_fuzz()
numpy.core.tests.test_mem_overlap.test_internal_overlap_manual()
numpy.core.tests.test_mem_overlap.test_internal_overlap_slices()
numpy.core.tests.test_mem_overlap.test_may_share_memory_bad_max_work()
numpy.core.tests.test_mem_overlap.test_may_share_memory_easy_fuzz()
numpy.core.tests.test_mem_overlap.test_may_share_memory_harder_fuzz()
numpy.core.tests.test_mem_overlap.test_may_share_memory_manual()
numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs()
numpy.core.tests.test_mem_overlap.test_overlapping_assignments()
numpy.core.tests.test_mem_overlap.test_shares_memory_api()
numpy.core.tests.test_mem_overlap.view_element_first_byte(x)
numpy.tests.test_mem_overlap.TestUFunc
numpy.tests.test_mem_overlap.TestUFunc.check_unary_fuzz(self,operation,get_out_axis_size,dtype=np.int16,count=5000)
numpy.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_1d_manual(self)
numpy.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_accumulate_fuzz(self)
numpy.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduce_fuzz(self)
numpy.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_fuzz(self)
numpy.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_manual(self)
numpy.tests.test_mem_overlap.TestUFunc.test_inplace_op_simple_manual(self)
numpy.tests.test_mem_overlap.TestUFunc.test_ufunc_at_manual(self)
numpy.tests.test_mem_overlap.TestUFunc.test_unary_gufunc_fuzz(self)
numpy.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_1d_manual(self)
numpy.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_call_complex_fuzz(self)
numpy.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_call_fuzz(self)
numpy.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_where_same(self)
numpy.tests.test_mem_overlap._check_assignment(srcidx,dstidx)
numpy.tests.test_mem_overlap._indices(ndims)
numpy.tests.test_mem_overlap._indices_for_axis()
numpy.tests.test_mem_overlap._indices_for_nelems(nelems)
numpy.tests.test_mem_overlap.assert_copy_equivalent(operation,args,out,**kwargs)
numpy.tests.test_mem_overlap.check_internal_overlap(a,manual_expected=None)
numpy.tests.test_mem_overlap.check_may_share_memory_easy_fuzz(get_max_work,same_steps,min_count)
numpy.tests.test_mem_overlap.check_may_share_memory_exact(a,b)
numpy.tests.test_mem_overlap.iter_random_view_pairs(x,same_steps=True,equal_size=False)
numpy.tests.test_mem_overlap.test_diophantine_fuzz()
numpy.tests.test_mem_overlap.test_diophantine_overflow()
numpy.tests.test_mem_overlap.test_internal_overlap_diophantine()
numpy.tests.test_mem_overlap.test_internal_overlap_fuzz()
numpy.tests.test_mem_overlap.test_internal_overlap_manual()
numpy.tests.test_mem_overlap.test_internal_overlap_slices()
numpy.tests.test_mem_overlap.test_may_share_memory_bad_max_work()
numpy.tests.test_mem_overlap.test_may_share_memory_easy_fuzz()
numpy.tests.test_mem_overlap.test_may_share_memory_harder_fuzz()
numpy.tests.test_mem_overlap.test_may_share_memory_manual()
numpy.tests.test_mem_overlap.test_non_ndarray_inputs()
numpy.tests.test_mem_overlap.test_overlapping_assignments()
numpy.tests.test_mem_overlap.test_shares_memory_api()
numpy.tests.test_mem_overlap.view_element_first_byte(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_arraymethod.py----------------------------------------
A:numpy.core.tests.test_arraymethod.method->get_castingimpl(type(np.dtype('d')), type(np.dtype('f')))
numpy.core.tests.test_arraymethod.TestResolveDescriptors
numpy.core.tests.test_arraymethod.TestResolveDescriptors.test_invalid_arguments(self,args)
numpy.core.tests.test_arraymethod.TestSimpleStridedCall
numpy.core.tests.test_arraymethod.TestSimpleStridedCall.test_invalid_arguments(self,args,error)
numpy.tests.test_arraymethod.TestResolveDescriptors
numpy.tests.test_arraymethod.TestResolveDescriptors.test_invalid_arguments(self,args)
numpy.tests.test_arraymethod.TestSimpleStridedCall
numpy.tests.test_arraymethod.TestSimpleStridedCall.test_invalid_arguments(self,args,error)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_einsum.py----------------------------------------
A:numpy.core.tests.test_einsum.sizes->numpy.array([2, 3, 4, 5, 4, 3, 2, 6, 5, 4, 3])
A:numpy.core.tests.test_einsum.global_size_dict->dict(zip(chars, sizes))
A:numpy.core.tests.test_einsum.a->numpy.arange(9, dtype=int).reshape(3, 3)
A:numpy.core.tests.test_einsum.b->numpy.arange(9, dtype=int).reshape(3, 3)
A:numpy.core.tests.test_einsum.np_array->numpy.asarray([0, 0])
A:numpy.core.tests.test_einsum.c->numpy.einsum('ij,jk->ik', a, b, out=b)
A:numpy.core.tests.test_einsum.d->numpy.dot(a, b)
A:numpy.core.tests.test_einsum.tgt->numpy.ones((2, 1, 1), dtype=np.bool_)
A:numpy.core.tests.test_einsum.p->numpy.ones((10, 2))
A:numpy.core.tests.test_einsum.q->numpy.ones((1, 2))
A:numpy.core.tests.test_einsum.x->numpy.ones((2, 2), np.float32)
A:numpy.core.tests.test_einsum.y->numpy.random.random_sample((10, 10, 10, 10)).trace(axis1=0, axis2=2).trace()
A:numpy.core.tests.test_einsum.A->numpy.arange(3 * 3).reshape(3, 3).astype(np.float64)
A:numpy.core.tests.test_einsum.B->numpy.arange(3 * 3 * 64 * 64).reshape(3, 3, 64, 64).astype(np.float32)
A:numpy.core.tests.test_einsum.ref->numpy.einsum('...lmn,...lmno->...o', A, B, optimize=False)
A:numpy.core.tests.test_einsum.v->numpy.arange(dims[2])
A:numpy.core.tests.test_einsum.es->numpy.einsum('cl, cpxy->lpxy', A, B)
A:numpy.core.tests.test_einsum.tp->numpy.tensordot(A, B, axes=(0, 0))
A:numpy.core.tests.test_einsum.y1->numpy.zeros((5, 5))
A:numpy.core.tests.test_einsum.idx->numpy.arange(5)
A:numpy.core.tests.test_einsum.tensor->numpy.random.random_sample((10, 10, 10, 10))
A:numpy.core.tests.test_einsum.correct_base->numpy.ones((2, 2, 2))
A:numpy.core.tests.test_einsum.res->numpy.einsum('...ij,...jk->...ik', a, a, out=a)
A:numpy.core.tests.test_einsum.terms->string.split('->')[0].split(',')
A:numpy.core.tests.test_einsum.noopt->numpy.einsum(*path_test, optimize=False)
A:numpy.core.tests.test_einsum.opt->numpy.einsum(*path_test, optimize=exp_path)
A:numpy.core.tests.test_einsum.e->numpy.random.rand(1, 1, 5, 4)
A:numpy.core.tests.test_einsum.f->numpy.random.rand(7, 7)
A:numpy.core.tests.test_einsum.g->numpy.arange(64).reshape(2, 4, 8)
A:numpy.core.tests.test_einsum.tmp->numpy.einsum('...ft,mf->...mt', d, c, order='a', optimize=opt)
A:numpy.core.tests.test_einsum.outer_test->self.build_operands('a,b,c->abc')
A:numpy.core.tests.test_einsum.(path, path_str)->numpy.einsum_path(*path_test, optimize=exp_path)
A:numpy.core.tests.test_einsum.long_test->self.build_operands('acdf,jbje,gihb,hfac')
A:numpy.core.tests.test_einsum.long_test1->self.build_operands('acdf,jbje,gihb,hfac,gfac,gifabc,hfac')
A:numpy.core.tests.test_einsum.long_test2->self.build_operands('chd,bde,agbc,hiad,bdi,cgh,agdb')
A:numpy.core.tests.test_einsum.edge_test1->self.build_operands('eb,cb,fb->cef')
A:numpy.core.tests.test_einsum.edge_test2->self.build_operands('dd,fb,be,cdb->cef')
A:numpy.core.tests.test_einsum.edge_test3->self.build_operands('bca,cdb,dbf,afc->')
A:numpy.core.tests.test_einsum.edge_test4->self.build_operands('a,ac,ab,ad,cd,bd,bc->', size_dict={'a': 20, 'b': 20, 'c': 20, 'd': 20})
A:numpy.core.tests.test_einsum.path_test->self.build_operands('dcc,fce,ea,dbf->ab')
A:numpy.core.tests.test_einsum.arr->numpy.array([[1]])
numpy.core.tests.test_einsum.TestEinsum
numpy.core.tests.test_einsum.TestEinsum.check_einsum_sums(self,dtype,do_opt=False)
numpy.core.tests.test_einsum.TestEinsum.optimize_compare(self,subscripts,operands=None)
numpy.core.tests.test_einsum.TestEinsum.test_broadcasting_dot_cases(self)
numpy.core.tests.test_einsum.TestEinsum.test_collapse(self)
numpy.core.tests.test_einsum.TestEinsum.test_combined_views_mapping(self)
numpy.core.tests.test_einsum.TestEinsum.test_complex(self)
numpy.core.tests.test_einsum.TestEinsum.test_edge_cases(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_all_contig_non_contig_output(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_broadcast(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_errors(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_failed_on_p9_and_s390x(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_fixed_collapsingbug(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_fixedstridebug(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_misc(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_cfloat128(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_cfloat64(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_clongdouble(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_float16(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_float32(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_float64(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_int16(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_int32(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_int64(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_int8(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_longdouble(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_uint16(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_uint32(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_uint64(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_sums_uint8(self)
numpy.core.tests.test_einsum.TestEinsum.test_einsum_views(self)
numpy.core.tests.test_einsum.TestEinsum.test_expand(self)
numpy.core.tests.test_einsum.TestEinsum.test_hadamard_like_products(self)
numpy.core.tests.test_einsum.TestEinsum.test_index_transformations(self)
numpy.core.tests.test_einsum.TestEinsum.test_inner_product(self)
numpy.core.tests.test_einsum.TestEinsum.test_out_is_res(self)
numpy.core.tests.test_einsum.TestEinsum.test_output_order(self)
numpy.core.tests.test_einsum.TestEinsum.test_random_cases(self)
numpy.core.tests.test_einsum.TestEinsum.test_small_boolean_arrays(self)
numpy.core.tests.test_einsum.TestEinsum.test_subscript_range(self)
numpy.core.tests.test_einsum.TestEinsumPath
numpy.core.tests.test_einsum.TestEinsumPath.assert_path_equal(self,comp,benchmark)
numpy.core.tests.test_einsum.TestEinsumPath.build_operands(self,string,size_dict=global_size_dict)
numpy.core.tests.test_einsum.TestEinsumPath.test_edge_paths(self)
numpy.core.tests.test_einsum.TestEinsumPath.test_long_paths(self)
numpy.core.tests.test_einsum.TestEinsumPath.test_memory_contraints(self)
numpy.core.tests.test_einsum.TestEinsumPath.test_path_type_input(self)
numpy.core.tests.test_einsum.TestEinsumPath.test_spaces(self)
numpy.core.tests.test_einsum.test_overlap()
numpy.tests.test_einsum.TestEinsum
numpy.tests.test_einsum.TestEinsum.check_einsum_sums(self,dtype,do_opt=False)
numpy.tests.test_einsum.TestEinsum.optimize_compare(self,subscripts,operands=None)
numpy.tests.test_einsum.TestEinsum.test_broadcasting_dot_cases(self)
numpy.tests.test_einsum.TestEinsum.test_collapse(self)
numpy.tests.test_einsum.TestEinsum.test_combined_views_mapping(self)
numpy.tests.test_einsum.TestEinsum.test_complex(self)
numpy.tests.test_einsum.TestEinsum.test_edge_cases(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_all_contig_non_contig_output(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_broadcast(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_errors(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_failed_on_p9_and_s390x(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_fixed_collapsingbug(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_fixedstridebug(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_misc(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_sums_cfloat128(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_sums_cfloat64(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_sums_clongdouble(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_sums_float16(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_sums_float32(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_sums_float64(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_sums_int16(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_sums_int32(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_sums_int64(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_sums_int8(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_sums_longdouble(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_sums_uint16(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_sums_uint32(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_sums_uint64(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_sums_uint8(self)
numpy.tests.test_einsum.TestEinsum.test_einsum_views(self)
numpy.tests.test_einsum.TestEinsum.test_expand(self)
numpy.tests.test_einsum.TestEinsum.test_hadamard_like_products(self)
numpy.tests.test_einsum.TestEinsum.test_index_transformations(self)
numpy.tests.test_einsum.TestEinsum.test_inner_product(self)
numpy.tests.test_einsum.TestEinsum.test_out_is_res(self)
numpy.tests.test_einsum.TestEinsum.test_output_order(self)
numpy.tests.test_einsum.TestEinsum.test_random_cases(self)
numpy.tests.test_einsum.TestEinsum.test_small_boolean_arrays(self)
numpy.tests.test_einsum.TestEinsum.test_subscript_range(self)
numpy.tests.test_einsum.TestEinsumPath
numpy.tests.test_einsum.TestEinsumPath.assert_path_equal(self,comp,benchmark)
numpy.tests.test_einsum.TestEinsumPath.build_operands(self,string,size_dict=global_size_dict)
numpy.tests.test_einsum.TestEinsumPath.test_edge_paths(self)
numpy.tests.test_einsum.TestEinsumPath.test_long_paths(self)
numpy.tests.test_einsum.TestEinsumPath.test_memory_contraints(self)
numpy.tests.test_einsum.TestEinsumPath.test_path_type_input(self)
numpy.tests.test_einsum.TestEinsumPath.test_spaces(self)
numpy.tests.test_einsum.test_overlap()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_cpu_features.py----------------------------------------
A:numpy.core.tests.test_cpu_features.detected->str(__cpu_features__).replace("'", '')
A:numpy.core.tests.test_cpu_features.cpuinfo->str(err)
A:numpy.core.tests.test_cpu_features.auxv->subprocess.check_output(['/bin/true'], env=dict(LD_SHOW_AUXV='1'))
A:numpy.core.tests.test_cpu_features.error_report->textwrap.indent('\n###########################################\n### Extra debugging information\n###########################################\n-------------------------------------------\n--- NumPy Detections\n-------------------------------------------\n%s\n-------------------------------------------\n--- SYS / CPUINFO\n-------------------------------------------\n%s....\n-------------------------------------------\n--- SYS / AUXV\n-------------------------------------------\n%s\n' % (detected, cpuinfo, auxv), prefix='\r')
A:numpy.core.tests.test_cpu_features.features_flags->set()
A:numpy.core.tests.test_cpu_features.cpu_have->self.cpu_have(feature_name)
A:numpy.core.tests.test_cpu_features.npy_have->numpy.core._multiarray_umath.__cpu_features__.get(feature_name)
A:numpy.core.tests.test_cpu_features.map_names->self.features_map.get(feature_name, feature_name)
A:numpy.core.tests.test_cpu_features.self.features_flags->self.features_flags.union(hwcap_value[1].upper().decode().split())
A:numpy.core.tests.test_cpu_features.values->values.union(flags_value[1].upper().split()).union(flags_value[1].upper().split())
A:numpy.core.tests.test_cpu_features.is_linux->sys.platform.startswith('linux')
A:numpy.core.tests.test_cpu_features.machine->platform.machine()
A:numpy.core.tests.test_cpu_features.is_x86->re.match('^(amd64|x86|i386|i686)', machine, re.IGNORECASE)
A:numpy.core.tests.test_cpu_features.features_groups->dict(NEON_FP16=['NEON', 'HALF'], NEON_VFPV4=['NEON', 'VFPV4'])
A:numpy.core.tests.test_cpu_features.features_map->dict(VSX2='ARCH_2_07', VSX3='ARCH_3_00')
A:numpy.core.tests.test_cpu_features.is_power->re.match('^(powerpc|ppc)64', machine, re.IGNORECASE)
A:numpy.core.tests.test_cpu_features.is_arm->re.match('^(arm|aarch64)', machine, re.IGNORECASE)
A:numpy.core.tests.test_cpu_features.arch->self.get_cpuinfo_item('CPU architecture')
A:numpy.core.tests.test_cpu_features.self.features_map->dict(ASIMD=('AES', 'SHA1', 'SHA2', 'PMULL', 'CRC32'))
numpy.core.tests.test_cpu_features.AbstractTest
numpy.core.tests.test_cpu_features.AbstractTest.cpu_have(self,feature_name)
numpy.core.tests.test_cpu_features.AbstractTest.get_cpuinfo_item(self,magic_key)
numpy.core.tests.test_cpu_features.AbstractTest.load_flags(self)
numpy.core.tests.test_cpu_features.AbstractTest.load_flags_auxv(self)
numpy.core.tests.test_cpu_features.AbstractTest.load_flags_cpuinfo(self,magic_key)
numpy.core.tests.test_cpu_features.AbstractTest.test_features(self)
numpy.core.tests.test_cpu_features.Test_ARM_Features(AbstractTest)
numpy.core.tests.test_cpu_features.Test_ARM_Features.load_flags(self)
numpy.core.tests.test_cpu_features.Test_POWER_Features(AbstractTest)
numpy.core.tests.test_cpu_features.Test_POWER_Features.load_flags(self)
numpy.core.tests.test_cpu_features.Test_X86_Features(AbstractTest)
numpy.core.tests.test_cpu_features.Test_X86_Features.load_flags(self)
numpy.core.tests.test_cpu_features.assert_features_equal(actual,desired,fname)
numpy.tests.test_cpu_features.AbstractTest
numpy.tests.test_cpu_features.AbstractTest.cpu_have(self,feature_name)
numpy.tests.test_cpu_features.AbstractTest.get_cpuinfo_item(self,magic_key)
numpy.tests.test_cpu_features.AbstractTest.load_flags(self)
numpy.tests.test_cpu_features.AbstractTest.load_flags_auxv(self)
numpy.tests.test_cpu_features.AbstractTest.load_flags_cpuinfo(self,magic_key)
numpy.tests.test_cpu_features.AbstractTest.test_features(self)
numpy.tests.test_cpu_features.Test_ARM_Features(AbstractTest)
numpy.tests.test_cpu_features.Test_ARM_Features.load_flags(self)
numpy.tests.test_cpu_features.Test_POWER_Features(AbstractTest)
numpy.tests.test_cpu_features.Test_POWER_Features.load_flags(self)
numpy.tests.test_cpu_features.Test_X86_Features(AbstractTest)
numpy.tests.test_cpu_features.Test_X86_Features.load_flags(self)
numpy.tests.test_cpu_features.assert_features_equal(actual,desired,fname)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_scalarbuffer.py----------------------------------------
A:numpy.core.tests.test_scalarbuffer.(scalars_only, codes_only)->zip(*scalars_and_codes)
A:numpy.core.tests.test_scalarbuffer.x->scalar()
A:numpy.core.tests.test_scalarbuffer.a->numpy.empty(1, dt)
A:numpy.core.tests.test_scalarbuffer.mv_x->memoryview(x)
A:numpy.core.tests.test_scalarbuffer.mv_a->memoryview(a)
A:numpy.core.tests.test_scalarbuffer.expected->dict(strides=(), itemsize=8, ndim=0, shape=(), format='2w', readonly=True)
A:numpy.core.tests.test_scalarbuffer.dt->numpy.dtype([('a', 'uint16'), ('b', 'M8[s]')])
A:numpy.core.tests.test_scalarbuffer.dt1->numpy.datetime64('2016-01-01')
A:numpy.core.tests.test_scalarbuffer.dt2->numpy.datetime64('2017-01-01')
A:numpy.core.tests.test_scalarbuffer.v->memoryview(s)
A:numpy.core.tests.test_scalarbuffer.s->numpy.str_(s)
A:numpy.core.tests.test_scalarbuffer.code_points->numpy.frombuffer(v, dtype='i4')
A:numpy.core.tests.test_scalarbuffer.r->rational(1)
numpy.core.tests.test_scalarbuffer.TestScalarPEP3118
numpy.core.tests.test_scalarbuffer.TestScalarPEP3118._as_dict(self,m)
numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_datetime_memoryview(self)
numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_buffers_readonly(self,scalar)
numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_code_and_properties(self,scalar,code)
numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_dim(self,scalar)
numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_match_array(self,scalar)
numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_str_ucs4(self,s)
numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_user_scalar_fails_buffer(self)
numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_void_scalar_structured_data(self)
numpy.tests.test_scalarbuffer.TestScalarPEP3118
numpy.tests.test_scalarbuffer.TestScalarPEP3118._as_dict(self,m)
numpy.tests.test_scalarbuffer.TestScalarPEP3118.test_datetime_memoryview(self)
numpy.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_buffers_readonly(self,scalar)
numpy.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_code_and_properties(self,scalar,code)
numpy.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_dim(self,scalar)
numpy.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_match_array(self,scalar)
numpy.tests.test_scalarbuffer.TestScalarPEP3118.test_str_ucs4(self,s)
numpy.tests.test_scalarbuffer.TestScalarPEP3118.test_user_scalar_fails_buffer(self)
numpy.tests.test_scalarbuffer.TestScalarPEP3118.test_void_scalar_structured_data(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_getlimits.py----------------------------------------
A:numpy.core.tests.test_getlimits.ftype->finfo(longdouble)
A:numpy.core.tests.test_getlimits.ftype2->finfo(longdouble)
A:numpy.core.tests.test_getlimits.dts->list(zip(['i1', 'i2', 'i4', 'i8', 'u1', 'u2', 'u4', 'u8'], [np.int8, np.int16, np.int32, np.int64, np.uint8, np.uint16, np.uint32, np.uint64]))
A:numpy.core.tests.test_getlimits.ld_ma->_discovered_machar(np.longdouble)
A:numpy.core.tests.test_getlimits.info->numpy.finfo(ftype)
numpy.core.tests.test_getlimits.TestDouble
numpy.core.tests.test_getlimits.TestDouble.test_singleton(self)
numpy.core.tests.test_getlimits.TestFinfo
numpy.core.tests.test_getlimits.TestFinfo.test_basic(self)
numpy.core.tests.test_getlimits.TestHalf
numpy.core.tests.test_getlimits.TestHalf.test_singleton(self)
numpy.core.tests.test_getlimits.TestIinfo
numpy.core.tests.test_getlimits.TestIinfo.test_basic(self)
numpy.core.tests.test_getlimits.TestIinfo.test_unsigned_max(self)
numpy.core.tests.test_getlimits.TestLongdouble
numpy.core.tests.test_getlimits.TestLongdouble.test_singleton(self)
numpy.core.tests.test_getlimits.TestPythonFloat
numpy.core.tests.test_getlimits.TestPythonFloat.test_singleton(self)
numpy.core.tests.test_getlimits.TestRepr
numpy.core.tests.test_getlimits.TestRepr.test_finfo_repr(self)
numpy.core.tests.test_getlimits.TestRepr.test_iinfo_repr(self)
numpy.core.tests.test_getlimits.TestSingle
numpy.core.tests.test_getlimits.TestSingle.test_singleton(self)
numpy.core.tests.test_getlimits.assert_ma_equal(discovered,ma_like)
numpy.core.tests.test_getlimits.test_instances()
numpy.core.tests.test_getlimits.test_known_types()
numpy.core.tests.test_getlimits.test_plausible_finfo()
numpy.tests.test_TestDouble
numpy.tests.test_TestDouble.test_singleton(self)
numpy.tests.test_TestFinfo
numpy.tests.test_TestFinfo.test_basic(self)
numpy.tests.test_TestHalf
numpy.tests.test_TestHalf.test_singleton(self)
numpy.tests.test_TestIinfo
numpy.tests.test_TestIinfo.test_basic(self)
numpy.tests.test_TestIinfo.test_unsigned_max(self)
numpy.tests.test_TestLongdouble
numpy.tests.test_TestLongdouble.test_singleton(self)
numpy.tests.test_TestPythonFloat
numpy.tests.test_TestPythonFloat.test_singleton(self)
numpy.tests.test_TestRepr
numpy.tests.test_TestRepr.test_finfo_repr(self)
numpy.tests.test_TestRepr.test_iinfo_repr(self)
numpy.tests.test_TestSingle
numpy.tests.test_TestSingle.test_singleton(self)
numpy.tests.test_assert_ma_equal(discovered,ma_like)
numpy.tests.test_test_instances()
numpy.tests.test_test_known_types()
numpy.tests.test_test_plausible_finfo()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_dtype.py----------------------------------------
A:numpy.core.tests.test_dtype.dt->create_custom_field_dtype(blueprint, mytype, 0)
A:numpy.core.tests.test_dtype.dt2->numpy.dtype({'names': ['val1', 'val2'], 'formats': [(np.float32, (0,)), int]})
A:numpy.core.tests.test_dtype.dt3->numpy.dtype({'f0': ('i4', 0), 'f1': ([('f1', 'i1'), ('f2', 'i4'), ('f3', 'i1')], 4), 'f2': ('i1', 10)}, align=False)
A:numpy.core.tests.test_dtype.uintp->numpy.dtype(np.uintp)
A:numpy.core.tests.test_dtype.right->numpy.dtype(np.ulonglong)
A:numpy.core.tests.test_dtype.bytes_value->value.encode('ascii')
A:numpy.core.tests.test_dtype.from_bytes->numpy.dtype(bytes_value)
A:numpy.core.tests.test_dtype.from_str->numpy.dtype(value)
A:numpy.core.tests.test_dtype.x->rational(1)
A:numpy.core.tests.test_dtype.y->numpy.zeros(3, dtype=pickled)
A:numpy.core.tests.test_dtype.a->numpy.dtype([('yo', int), ('ye', simple1), ('yi', np.dtype((int, (3, 2))))])
A:numpy.core.tests.test_dtype.b->numpy.dtype([('yo', int), ('ye', simple1), ('yi', np.dtype((int, (3, 2))))])
A:numpy.core.tests.test_dtype.d->numpy.dtype((np.void, np.dtype('i4,i4', metadata={'datum': 1})))
A:numpy.core.tests.test_dtype.c->numpy.dtype([('yo', int), ('ye', simple1), ('yi', np.dtype((a, (3, 2))))])
A:numpy.core.tests.test_dtype.dt1->numpy.dtype([('a', '|i1'), ('b', [('f0', '<i2'), ('f1', '<f4')], 2)], align=True)
A:numpy.core.tests.test_dtype.dtype->numpy.dtype(dtype)
A:numpy.core.tests.test_dtype.res->numpy.result_type(other, complex_scalar)
A:numpy.core.tests.test_dtype.expected->numpy.dtype([('f0', pair[0]), ('f1', pair[1])])
A:numpy.core.tests.test_dtype.arr->numpy.zeros(3, self.dtype)
A:numpy.core.tests.test_dtype.t1->numpy.dtype('(1,)i4', align=True)
A:numpy.core.tests.test_dtype.t2->numpy.dtype('2i4', align=True)
A:numpy.core.tests.test_dtype.obj->object()
A:numpy.core.tests.test_dtype.before->sys.getrefcount(singleton)
A:numpy.core.tests.test_dtype.now->sys.getrefcount(creation_obj)
A:numpy.core.tests.test_dtype.before2->sys.getrefcount(one)
A:numpy.core.tests.test_dtype.after2->sys.getrefcount(one)
A:numpy.core.tests.test_dtype.before_zero->sys.getrefcount(zero)
A:numpy.core.tests.test_dtype.before_one->sys.getrefcount(one)
A:numpy.core.tests.test_dtype.after_zero->sys.getrefcount(zero)
A:numpy.core.tests.test_dtype.after_one->sys.getrefcount(one)
A:numpy.core.tests.test_dtype.after->sys.getrefcount(singleton)
A:numpy.core.tests.test_dtype.new->numpy.result_type(other, complex_scalar).repeat(10)
A:numpy.core.tests.test_dtype.after_repeat->sys.getrefcount(singleton)
A:numpy.core.tests.test_dtype.sparse_dtype->numpy.dtype([('a', {'names': ['ab'], 'formats': ['f'], 'offsets': [4]}, (2, 3))])
A:numpy.core.tests.test_dtype.sparse_arr->numpy.zeros(3, self.dtype).view(self.sparse_dtype)
A:numpy.core.tests.test_dtype.simple1->numpy.dtype({'names': ['r', 'b'], 'formats': ['u1', 'u1'], 'titles': ['Red pixel', 'Blue pixel']})
A:numpy.core.tests.test_dtype.l->list()
A:numpy.core.tests.test_dtype.new_dtype->numpy.dtype(dtype.descr)
A:numpy.core.tests.test_dtype.buf->numpy.compat.pickle.dumps(dtype, proto)
A:numpy.core.tests.test_dtype.pickled->numpy.compat.pickle.loads(buf)
A:numpy.core.tests.test_dtype.roundtrip_DType->numpy.compat.pickle.loads(pickle.dumps(DType, proto))
A:numpy.core.tests.test_dtype.min_complex->numpy.dtype(np.complex64)
A:numpy.core.tests.test_dtype.dt_instance->dt()
A:numpy.core.tests.test_dtype.p_uint8->ctypes.POINTER(ctypes.c_uint8)
A:numpy.core.tests.test_dtype.all_types->set(np.typecodes['All'])
A:numpy.core.tests.test_dtype.all_pairs->permutations(all_types, 2)
A:numpy.core.tests.test_dtype.pair_type->numpy.dtype('{},{}'.format(*pair))
A:numpy.core.tests.test_dtype.blueprint->numpy.dtype([('field', object)])
numpy.core.tests.test_dtype.TestBuiltin
numpy.core.tests.test_dtype.TestBuiltin.test_bad_param(self)
numpy.core.tests.test_dtype.TestBuiltin.test_dtype(self,t)
numpy.core.tests.test_dtype.TestBuiltin.test_dtype_bytes_str_equivalence(self,value)
numpy.core.tests.test_dtype.TestBuiltin.test_dtype_from_bytes(self)
numpy.core.tests.test_dtype.TestBuiltin.test_equivalent_dtype_hashing(self)
numpy.core.tests.test_dtype.TestBuiltin.test_field_order_equality(self)
numpy.core.tests.test_dtype.TestBuiltin.test_invalid_types(self)
numpy.core.tests.test_dtype.TestBuiltin.test_numeric_style_types_are_invalid(self,dtype)
numpy.core.tests.test_dtype.TestBuiltin.test_richcompare_invalid_dtype_comparison(self,operation)
numpy.core.tests.test_dtype.TestBuiltin.test_richcompare_invalid_dtype_equality(self)
numpy.core.tests.test_dtype.TestBuiltin.test_run(self,t)
numpy.core.tests.test_dtype.TestDTypeClasses
numpy.core.tests.test_dtype.TestDTypeClasses.test_basic_dtypes_subclass_properties(self,dtype)
numpy.core.tests.test_dtype.TestDTypeClasses.test_dtype_superclass(self)
numpy.core.tests.test_dtype.TestDtypeAttributeDeletion
numpy.core.tests.test_dtype.TestDtypeAttributeDeletion.test_dtype_non_writable_attributes_deletion(self)
numpy.core.tests.test_dtype.TestDtypeAttributeDeletion.test_dtype_writable_attributes_deletion(self)
numpy.core.tests.test_dtype.TestDtypeAttributes
numpy.core.tests.test_dtype.TestDtypeAttributes.test_descr_has_trailing_void(self)
numpy.core.tests.test_dtype.TestDtypeAttributes.test_name_dtype_subclass(self)
numpy.core.tests.test_dtype.TestFromCTypes
numpy.core.tests.test_dtype.TestFromCTypes.check(ctype,dtype)
numpy.core.tests.test_dtype.TestFromCTypes.test_array(self)
numpy.core.tests.test_dtype.TestFromCTypes.test_big_endian_structure(self)
numpy.core.tests.test_dtype.TestFromCTypes.test_big_endian_structure_packed(self)
numpy.core.tests.test_dtype.TestFromCTypes.test_bit_fields(self)
numpy.core.tests.test_dtype.TestFromCTypes.test_large_packed_structure(self)
numpy.core.tests.test_dtype.TestFromCTypes.test_little_endian_structure(self)
numpy.core.tests.test_dtype.TestFromCTypes.test_little_endian_structure_packed(self)
numpy.core.tests.test_dtype.TestFromCTypes.test_packed_structure(self)
numpy.core.tests.test_dtype.TestFromCTypes.test_padded_structure(self)
numpy.core.tests.test_dtype.TestFromCTypes.test_pairs(self,pair)
numpy.core.tests.test_dtype.TestFromCTypes.test_pointer(self)
numpy.core.tests.test_dtype.TestFromCTypes.test_simple_endian_types(self)
numpy.core.tests.test_dtype.TestFromCTypes.test_union(self)
numpy.core.tests.test_dtype.TestFromCTypes.test_union_packed(self)
numpy.core.tests.test_dtype.TestFromCTypes.test_union_with_struct_packed(self)
numpy.core.tests.test_dtype.TestFromCTypes.test_void_pointer(self)
numpy.core.tests.test_dtype.TestFromDTypeAttribute
numpy.core.tests.test_dtype.TestFromDTypeAttribute.test_recursion(self)
numpy.core.tests.test_dtype.TestFromDTypeAttribute.test_simple(self)
numpy.core.tests.test_dtype.TestFromDTypeAttribute.test_void_subtype(self)
numpy.core.tests.test_dtype.TestFromDTypeAttribute.test_void_subtype_recursion(self)
numpy.core.tests.test_dtype.TestMetadata
numpy.core.tests.test_dtype.TestMetadata.test_base_metadata_copied(self)
numpy.core.tests.test_dtype.TestMetadata.test_metadata_rejects_nondict(self)
numpy.core.tests.test_dtype.TestMetadata.test_metadata_takes_dict(self)
numpy.core.tests.test_dtype.TestMetadata.test_nested_metadata(self)
numpy.core.tests.test_dtype.TestMetadata.test_no_metadata(self)
numpy.core.tests.test_dtype.TestMonsterType
numpy.core.tests.test_dtype.TestMonsterType.test1(self)
numpy.core.tests.test_dtype.TestMonsterType.test_dict_recursion(self)
numpy.core.tests.test_dtype.TestMonsterType.test_list_recursion(self)
numpy.core.tests.test_dtype.TestMonsterType.test_tuple_recursion(self)
numpy.core.tests.test_dtype.TestPickling
numpy.core.tests.test_dtype.TestPickling.check_pickling(self,dtype)
numpy.core.tests.test_dtype.TestPickling.test_builtin(self,t)
numpy.core.tests.test_dtype.TestPickling.test_datetime(self,base,unit)
numpy.core.tests.test_dtype.TestPickling.test_metadata(self)
numpy.core.tests.test_dtype.TestPickling.test_pickle_types(self,DType)
numpy.core.tests.test_dtype.TestPickling.test_structured(self)
numpy.core.tests.test_dtype.TestPickling.test_structured_aligned(self)
numpy.core.tests.test_dtype.TestPickling.test_structured_padded(self)
numpy.core.tests.test_dtype.TestPickling.test_structured_titles(self)
numpy.core.tests.test_dtype.TestPickling.test_structured_unaligned(self)
numpy.core.tests.test_dtype.TestPromotion
numpy.core.tests.test_dtype.TestPromotion.test_complex_other_value_based(self,other,expected)
numpy.core.tests.test_dtype.TestPromotion.test_complex_pyscalar_promote_rational(self)
numpy.core.tests.test_dtype.TestPromotion.test_complex_scalar_value_based(self,other,expected)
numpy.core.tests.test_dtype.TestPromotion.test_float_int_pyscalar_promote_rational(self,other,expected)
numpy.core.tests.test_dtype.TestPromotion.test_permutations_do_not_influence_result(self,dtypes,expected)
numpy.core.tests.test_dtype.TestRecord
numpy.core.tests.test_dtype.TestRecord.test_aligned_size(self)
numpy.core.tests.test_dtype.TestRecord.test_bool_commastring(self)
numpy.core.tests.test_dtype.TestRecord.test_comma_datetime(self)
numpy.core.tests.test_dtype.TestRecord.test_different_names(self)
numpy.core.tests.test_dtype.TestRecord.test_different_titles(self)
numpy.core.tests.test_dtype.TestRecord.test_equivalent_record(self)
numpy.core.tests.test_dtype.TestRecord.test_fieldless_views(self)
numpy.core.tests.test_dtype.TestRecord.test_fields_by_index(self)
numpy.core.tests.test_dtype.TestRecord.test_from_dict_with_zero_width_field(self)
numpy.core.tests.test_dtype.TestRecord.test_from_dictproxy(self)
numpy.core.tests.test_dtype.TestRecord.test_multifield_index(self,align_flag)
numpy.core.tests.test_dtype.TestRecord.test_mutate(self)
numpy.core.tests.test_dtype.TestRecord.test_nonint_offsets(self)
numpy.core.tests.test_dtype.TestRecord.test_not_lists(self)
numpy.core.tests.test_dtype.TestRecord.test_partial_dict(self)
numpy.core.tests.test_dtype.TestRecord.test_refcount_dictionary_setting(self)
numpy.core.tests.test_dtype.TestRecord.test_subarray_list(self,obj,dtype,expected)
numpy.core.tests.test_dtype.TestRecord.test_union_struct(self)
numpy.core.tests.test_dtype.TestString
numpy.core.tests.test_dtype.TestString.test_base_dtype_with_object_type(self)
numpy.core.tests.test_dtype.TestString.test_complex_dtype_str(self)
numpy.core.tests.test_dtype.TestString.test_empty_string_to_object(self)
numpy.core.tests.test_dtype.TestString.test_repr_str_subarray(self)
numpy.core.tests.test_dtype.TestString.test_repr_structured(self)
numpy.core.tests.test_dtype.TestString.test_repr_structured_datetime(self)
numpy.core.tests.test_dtype.TestString.test_repr_structured_not_packed(self)
numpy.core.tests.test_dtype.TestString.test_void_subclass_fields(self)
numpy.core.tests.test_dtype.TestString.test_void_subclass_sized(self)
numpy.core.tests.test_dtype.TestString.test_void_subclass_unsized(self)
numpy.core.tests.test_dtype.TestStructuredDtypeSparseFields
numpy.core.tests.test_dtype.TestStructuredDtypeSparseFields.test_sparse_field_assignment(self)
numpy.core.tests.test_dtype.TestStructuredDtypeSparseFields.test_sparse_field_assignment_fancy(self)
numpy.core.tests.test_dtype.TestStructuredObjectRefcounting
numpy.core.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_create_delete(self,dt,pat,count,singleton,creation_func,creation_obj)
numpy.core.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_indexing(self,shape,index,items_changed,dt,pat,count,singleton)
numpy.core.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_item_setting(self,dt,pat,count,singleton)
numpy.core.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_take_and_repeat(self,dt,pat,count,singleton)
numpy.core.tests.test_dtype.TestSubarray
numpy.core.tests.test_dtype.TestSubarray.test_alignment(self)
numpy.core.tests.test_dtype.TestSubarray.test_equivalent_record(self)
numpy.core.tests.test_dtype.TestSubarray.test_nonequivalent_record(self)
numpy.core.tests.test_dtype.TestSubarray.test_shape_equal(self)
numpy.core.tests.test_dtype.TestSubarray.test_shape_invalid(self)
numpy.core.tests.test_dtype.TestSubarray.test_shape_matches_ndim(self)
numpy.core.tests.test_dtype.TestSubarray.test_shape_monster(self)
numpy.core.tests.test_dtype.TestSubarray.test_shape_sequence(self)
numpy.core.tests.test_dtype.TestSubarray.test_shape_simple(self)
numpy.core.tests.test_dtype.TestSubarray.test_single_subarray(self)
numpy.core.tests.test_dtype.TestUserDType
numpy.core.tests.test_dtype.TestUserDType.test_custom_structured_dtype(self)
numpy.core.tests.test_dtype.TestUserDType.test_custom_structured_dtype_errors(self)
numpy.core.tests.test_dtype.assert_dtype_equal(a,b)
numpy.core.tests.test_dtype.assert_dtype_not_equal(a,b)
numpy.core.tests.test_dtype.iter_struct_object_dtypes()
numpy.core.tests.test_dtype.test_dtypes_are_true()
numpy.core.tests.test_dtype.test_invalid_dtype_string()
numpy.core.tests.test_dtype.test_keyword_argument()
numpy.core.tests.test_dtype.test_rational_dtype()
numpy.tests.test_dtype.TestBuiltin
numpy.tests.test_dtype.TestBuiltin.test_bad_param(self)
numpy.tests.test_dtype.TestBuiltin.test_dtype(self,t)
numpy.tests.test_dtype.TestBuiltin.test_dtype_bytes_str_equivalence(self,value)
numpy.tests.test_dtype.TestBuiltin.test_dtype_from_bytes(self)
numpy.tests.test_dtype.TestBuiltin.test_equivalent_dtype_hashing(self)
numpy.tests.test_dtype.TestBuiltin.test_field_order_equality(self)
numpy.tests.test_dtype.TestBuiltin.test_invalid_types(self)
numpy.tests.test_dtype.TestBuiltin.test_numeric_style_types_are_invalid(self,dtype)
numpy.tests.test_dtype.TestBuiltin.test_richcompare_invalid_dtype_comparison(self,operation)
numpy.tests.test_dtype.TestBuiltin.test_richcompare_invalid_dtype_equality(self)
numpy.tests.test_dtype.TestBuiltin.test_run(self,t)
numpy.tests.test_dtype.TestDTypeClasses
numpy.tests.test_dtype.TestDTypeClasses.test_basic_dtypes_subclass_properties(self,dtype)
numpy.tests.test_dtype.TestDTypeClasses.test_dtype_superclass(self)
numpy.tests.test_dtype.TestDtypeAttributeDeletion
numpy.tests.test_dtype.TestDtypeAttributeDeletion.test_dtype_non_writable_attributes_deletion(self)
numpy.tests.test_dtype.TestDtypeAttributeDeletion.test_dtype_writable_attributes_deletion(self)
numpy.tests.test_dtype.TestDtypeAttributes
numpy.tests.test_dtype.TestDtypeAttributes.test_descr_has_trailing_void(self)
numpy.tests.test_dtype.TestDtypeAttributes.test_name_dtype_subclass(self)
numpy.tests.test_dtype.TestFromCTypes
numpy.tests.test_dtype.TestFromCTypes.check(ctype,dtype)
numpy.tests.test_dtype.TestFromCTypes.test_array(self)
numpy.tests.test_dtype.TestFromCTypes.test_big_endian_structure(self)
numpy.tests.test_dtype.TestFromCTypes.test_big_endian_structure_packed(self)
numpy.tests.test_dtype.TestFromCTypes.test_bit_fields(self)
numpy.tests.test_dtype.TestFromCTypes.test_large_packed_structure(self)
numpy.tests.test_dtype.TestFromCTypes.test_little_endian_structure(self)
numpy.tests.test_dtype.TestFromCTypes.test_little_endian_structure_packed(self)
numpy.tests.test_dtype.TestFromCTypes.test_packed_structure(self)
numpy.tests.test_dtype.TestFromCTypes.test_padded_structure(self)
numpy.tests.test_dtype.TestFromCTypes.test_pairs(self,pair)
numpy.tests.test_dtype.TestFromCTypes.test_pointer(self)
numpy.tests.test_dtype.TestFromCTypes.test_simple_endian_types(self)
numpy.tests.test_dtype.TestFromCTypes.test_union(self)
numpy.tests.test_dtype.TestFromCTypes.test_union_packed(self)
numpy.tests.test_dtype.TestFromCTypes.test_union_with_struct_packed(self)
numpy.tests.test_dtype.TestFromCTypes.test_void_pointer(self)
numpy.tests.test_dtype.TestFromDTypeAttribute
numpy.tests.test_dtype.TestFromDTypeAttribute.test_recursion(self)
numpy.tests.test_dtype.TestFromDTypeAttribute.test_simple(self)
numpy.tests.test_dtype.TestFromDTypeAttribute.test_void_subtype(self)
numpy.tests.test_dtype.TestFromDTypeAttribute.test_void_subtype_recursion(self)
numpy.tests.test_dtype.TestMetadata
numpy.tests.test_dtype.TestMetadata.test_base_metadata_copied(self)
numpy.tests.test_dtype.TestMetadata.test_metadata_rejects_nondict(self)
numpy.tests.test_dtype.TestMetadata.test_metadata_takes_dict(self)
numpy.tests.test_dtype.TestMetadata.test_nested_metadata(self)
numpy.tests.test_dtype.TestMetadata.test_no_metadata(self)
numpy.tests.test_dtype.TestMonsterType
numpy.tests.test_dtype.TestMonsterType.test1(self)
numpy.tests.test_dtype.TestMonsterType.test_dict_recursion(self)
numpy.tests.test_dtype.TestMonsterType.test_list_recursion(self)
numpy.tests.test_dtype.TestMonsterType.test_tuple_recursion(self)
numpy.tests.test_dtype.TestPickling
numpy.tests.test_dtype.TestPickling.check_pickling(self,dtype)
numpy.tests.test_dtype.TestPickling.test_builtin(self,t)
numpy.tests.test_dtype.TestPickling.test_datetime(self,base,unit)
numpy.tests.test_dtype.TestPickling.test_metadata(self)
numpy.tests.test_dtype.TestPickling.test_pickle_types(self,DType)
numpy.tests.test_dtype.TestPickling.test_structured(self)
numpy.tests.test_dtype.TestPickling.test_structured_aligned(self)
numpy.tests.test_dtype.TestPickling.test_structured_padded(self)
numpy.tests.test_dtype.TestPickling.test_structured_titles(self)
numpy.tests.test_dtype.TestPickling.test_structured_unaligned(self)
numpy.tests.test_dtype.TestPromotion
numpy.tests.test_dtype.TestPromotion.test_complex_other_value_based(self,other,expected)
numpy.tests.test_dtype.TestPromotion.test_complex_pyscalar_promote_rational(self)
numpy.tests.test_dtype.TestPromotion.test_complex_scalar_value_based(self,other,expected)
numpy.tests.test_dtype.TestPromotion.test_float_int_pyscalar_promote_rational(self,other,expected)
numpy.tests.test_dtype.TestPromotion.test_permutations_do_not_influence_result(self,dtypes,expected)
numpy.tests.test_dtype.TestRecord
numpy.tests.test_dtype.TestRecord.test_aligned_size(self)
numpy.tests.test_dtype.TestRecord.test_bool_commastring(self)
numpy.tests.test_dtype.TestRecord.test_comma_datetime(self)
numpy.tests.test_dtype.TestRecord.test_different_names(self)
numpy.tests.test_dtype.TestRecord.test_different_titles(self)
numpy.tests.test_dtype.TestRecord.test_equivalent_record(self)
numpy.tests.test_dtype.TestRecord.test_fieldless_views(self)
numpy.tests.test_dtype.TestRecord.test_fields_by_index(self)
numpy.tests.test_dtype.TestRecord.test_from_dict_with_zero_width_field(self)
numpy.tests.test_dtype.TestRecord.test_from_dictproxy(self)
numpy.tests.test_dtype.TestRecord.test_multifield_index(self,align_flag)
numpy.tests.test_dtype.TestRecord.test_mutate(self)
numpy.tests.test_dtype.TestRecord.test_nonint_offsets(self)
numpy.tests.test_dtype.TestRecord.test_not_lists(self)
numpy.tests.test_dtype.TestRecord.test_partial_dict(self)
numpy.tests.test_dtype.TestRecord.test_refcount_dictionary_setting(self)
numpy.tests.test_dtype.TestRecord.test_subarray_list(self,obj,dtype,expected)
numpy.tests.test_dtype.TestRecord.test_union_struct(self)
numpy.tests.test_dtype.TestString
numpy.tests.test_dtype.TestString.test_base_dtype_with_object_type(self)
numpy.tests.test_dtype.TestString.test_complex_dtype_str(self)
numpy.tests.test_dtype.TestString.test_empty_string_to_object(self)
numpy.tests.test_dtype.TestString.test_repr_str_subarray(self)
numpy.tests.test_dtype.TestString.test_repr_structured(self)
numpy.tests.test_dtype.TestString.test_repr_structured_datetime(self)
numpy.tests.test_dtype.TestString.test_repr_structured_not_packed(self)
numpy.tests.test_dtype.TestString.test_void_subclass_fields(self)
numpy.tests.test_dtype.TestString.test_void_subclass_sized(self)
numpy.tests.test_dtype.TestString.test_void_subclass_unsized(self)
numpy.tests.test_dtype.TestStructuredDtypeSparseFields
numpy.tests.test_dtype.TestStructuredDtypeSparseFields.test_sparse_field_assignment(self)
numpy.tests.test_dtype.TestStructuredDtypeSparseFields.test_sparse_field_assignment_fancy(self)
numpy.tests.test_dtype.TestStructuredObjectRefcounting
numpy.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_create_delete(self,dt,pat,count,singleton,creation_func,creation_obj)
numpy.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_indexing(self,shape,index,items_changed,dt,pat,count,singleton)
numpy.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_item_setting(self,dt,pat,count,singleton)
numpy.tests.test_dtype.TestStructuredObjectRefcounting.test_structured_object_take_and_repeat(self,dt,pat,count,singleton)
numpy.tests.test_dtype.TestSubarray
numpy.tests.test_dtype.TestSubarray.test_alignment(self)
numpy.tests.test_dtype.TestSubarray.test_equivalent_record(self)
numpy.tests.test_dtype.TestSubarray.test_nonequivalent_record(self)
numpy.tests.test_dtype.TestSubarray.test_shape_equal(self)
numpy.tests.test_dtype.TestSubarray.test_shape_invalid(self)
numpy.tests.test_dtype.TestSubarray.test_shape_matches_ndim(self)
numpy.tests.test_dtype.TestSubarray.test_shape_monster(self)
numpy.tests.test_dtype.TestSubarray.test_shape_sequence(self)
numpy.tests.test_dtype.TestSubarray.test_shape_simple(self)
numpy.tests.test_dtype.TestSubarray.test_single_subarray(self)
numpy.tests.test_dtype.TestUserDType
numpy.tests.test_dtype.TestUserDType.test_custom_structured_dtype(self)
numpy.tests.test_dtype.TestUserDType.test_custom_structured_dtype_errors(self)
numpy.tests.test_dtype.assert_dtype_equal(a,b)
numpy.tests.test_dtype.assert_dtype_not_equal(a,b)
numpy.tests.test_dtype.iter_struct_object_dtypes()
numpy.tests.test_dtype.test_dtypes_are_true()
numpy.tests.test_dtype.test_invalid_dtype_string()
numpy.tests.test_dtype.test_keyword_argument()
numpy.tests.test_dtype.test_rational_dtype()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_scalar_ctors.py----------------------------------------
A:numpy.core.tests.test_scalar_ctors.fsingle->numpy.single('-1e10000')
A:numpy.core.tests.test_scalar_ctors.fdouble->numpy.double('-1e10000')
A:numpy.core.tests.test_scalar_ctors.flongdouble->assert_warns(RuntimeWarning, np.longdouble, '-1e10000')
A:numpy.core.tests.test_scalar_ctors.fhalf->numpy.half('-1e10000')
A:numpy.core.tests.test_scalar_ctors.s->numpy.str_(b'\\x61', 'unicode-escape')
A:numpy.core.tests.test_scalar_ctors.dt->numpy.datetime64('2000-01', ('M', 2))
A:numpy.core.tests.test_scalar_ctors.x->t1(2)
A:numpy.core.tests.test_scalar_ctors.arr->numpy.array(x, dtype=t2)
numpy.core.tests.test_scalar_ctors.TestArrayFromScalar
numpy.core.tests.test_scalar_ctors.TestArrayFromScalar._do_test(self,t1,t2)
numpy.core.tests.test_scalar_ctors.TestArrayFromScalar.test_complex(self,t1,t2)
numpy.core.tests.test_scalar_ctors.TestArrayFromScalar.test_integers(self,t1,t2)
numpy.core.tests.test_scalar_ctors.TestArrayFromScalar.test_reals(self,t1,t2)
numpy.core.tests.test_scalar_ctors.TestExtraArgs
numpy.core.tests.test_scalar_ctors.TestExtraArgs.test_bool(self)
numpy.core.tests.test_scalar_ctors.TestExtraArgs.test_datetime(self)
numpy.core.tests.test_scalar_ctors.TestExtraArgs.test_superclass(self)
numpy.core.tests.test_scalar_ctors.TestExtraArgs.test_void(self)
numpy.core.tests.test_scalar_ctors.TestFromInt
numpy.core.tests.test_scalar_ctors.TestFromInt.test_intp(self)
numpy.core.tests.test_scalar_ctors.TestFromInt.test_uint64_from_negative(self)
numpy.core.tests.test_scalar_ctors.TestFromString
numpy.core.tests.test_scalar_ctors.TestFromString.test_floating(self)
numpy.core.tests.test_scalar_ctors.TestFromString.test_floating_overflow(self)
numpy.tests.test_scalar_ctors.TestArrayFromScalar
numpy.tests.test_scalar_ctors.TestArrayFromScalar._do_test(self,t1,t2)
numpy.tests.test_scalar_ctors.TestArrayFromScalar.test_complex(self,t1,t2)
numpy.tests.test_scalar_ctors.TestArrayFromScalar.test_integers(self,t1,t2)
numpy.tests.test_scalar_ctors.TestArrayFromScalar.test_reals(self,t1,t2)
numpy.tests.test_scalar_ctors.TestExtraArgs
numpy.tests.test_scalar_ctors.TestExtraArgs.test_bool(self)
numpy.tests.test_scalar_ctors.TestExtraArgs.test_datetime(self)
numpy.tests.test_scalar_ctors.TestExtraArgs.test_superclass(self)
numpy.tests.test_scalar_ctors.TestExtraArgs.test_void(self)
numpy.tests.test_scalar_ctors.TestFromInt
numpy.tests.test_scalar_ctors.TestFromInt.test_intp(self)
numpy.tests.test_scalar_ctors.TestFromInt.test_uint64_from_negative(self)
numpy.tests.test_scalar_ctors.TestFromString
numpy.tests.test_scalar_ctors.TestFromString.test_floating(self)
numpy.tests.test_scalar_ctors.TestFromString.test_floating_overflow(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test__exceptions.py----------------------------------------
A:numpy.core.tests.test__exceptions.error->_ArrayMemoryError((1023,), np.dtype(np.uint8))
A:numpy.core.tests.test__exceptions.res->pickle.loads(pickle.dumps(error))
A:numpy.core.tests.test__exceptions.e->_ArrayMemoryError((2, 4), np.dtype((np.uint64, 16)))
numpy.core.tests.test__exceptions.TestArrayMemoryError
numpy.core.tests.test__exceptions.TestArrayMemoryError.test__size_to_string(self)
numpy.core.tests.test__exceptions.TestArrayMemoryError.test__total_size(self)
numpy.core.tests.test__exceptions.TestArrayMemoryError.test_pickling(self)
numpy.core.tests.test__exceptions.TestArrayMemoryError.test_str(self)
numpy.core.tests.test__exceptions.TestUFuncNoLoopError
numpy.core.tests.test__exceptions.TestUFuncNoLoopError.test_pickling(self)
numpy.tests.test__exceptions.TestArrayMemoryError
numpy.tests.test__exceptions.TestArrayMemoryError.test__size_to_string(self)
numpy.tests.test__exceptions.TestArrayMemoryError.test__total_size(self)
numpy.tests.test__exceptions.TestArrayMemoryError.test_pickling(self)
numpy.tests.test__exceptions.TestArrayMemoryError.test_str(self)
numpy.tests.test__exceptions.TestUFuncNoLoopError
numpy.tests.test__exceptions.TestUFuncNoLoopError.test_pickling(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_print.py----------------------------------------
A:numpy.core.tests.test_print.file->StringIO()
A:numpy.core.tests.test_print.file_tp->StringIO()
numpy.core.tests.test_print.TestCommaDecimalPointLocale(CommaDecimalPointLocale)
numpy.core.tests.test_print.TestCommaDecimalPointLocale.test_locale_double(self)
numpy.core.tests.test_print.TestCommaDecimalPointLocale.test_locale_longdouble(self)
numpy.core.tests.test_print.TestCommaDecimalPointLocale.test_locale_single(self)
numpy.core.tests.test_print._test_redirected_print(x,tp,ref=None)
numpy.core.tests.test_print.test_complex_inf_nan(dtype)
numpy.core.tests.test_print.test_complex_type_print(tp)
numpy.core.tests.test_print.test_complex_types(tp)
numpy.core.tests.test_print.test_float_type_print(tp)
numpy.core.tests.test_print.test_float_types(tp)
numpy.core.tests.test_print.test_nan_inf_float(tp)
numpy.core.tests.test_print.test_scalar_format()
numpy.tests.test_print.TestCommaDecimalPointLocale(CommaDecimalPointLocale)
numpy.tests.test_print.TestCommaDecimalPointLocale.test_locale_double(self)
numpy.tests.test_print.TestCommaDecimalPointLocale.test_locale_longdouble(self)
numpy.tests.test_print.TestCommaDecimalPointLocale.test_locale_single(self)
numpy.tests.test_print._test_redirected_print(x,tp,ref=None)
numpy.tests.test_print.test_complex_inf_nan(dtype)
numpy.tests.test_print.test_complex_type_print(tp)
numpy.tests.test_print.test_complex_types(tp)
numpy.tests.test_print.test_float_type_print(tp)
numpy.tests.test_print.test_float_types(tp)
numpy.tests.test_print.test_nan_inf_float(tp)
numpy.tests.test_print.test_scalar_format()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_deprecations.py----------------------------------------
A:numpy.core.tests.test_deprecations.self.warn_ctx->warnings.catch_warnings(record=True)
A:numpy.core.tests.test_deprecations.self.log->self.warn_ctx.__enter__()
A:numpy.core.tests.test_deprecations.a->numpy.arange(10)
A:numpy.core.tests.test_deprecations.b->numpy.arange(5 * 2).reshape(5, 2).tobytes()
A:numpy.core.tests.test_deprecations.struct1->numpy.zeros(2, dtype='i4,i4')
A:numpy.core.tests.test_deprecations.struct2->numpy.zeros(2, dtype='i4,i4,i4')
A:numpy.core.tests.test_deprecations.struct->numpy.zeros(2, dtype='i4,i4')
A:numpy.core.tests.test_deprecations.tz->pytz.timezone('US/Eastern')
A:numpy.core.tests.test_deprecations.dt->datetime.datetime(2000, 1, 1, 0, 0, tzinfo=tz)
A:numpy.core.tests.test_deprecations.test_case_instance->_DeprecationTestCase()
A:numpy.core.tests.test_deprecations.arr->numpy.arange(5 * 2).reshape(5, 2)
A:numpy.core.tests.test_deprecations.x->numpy.array([1.51, 2, 3.51, 4], dtype=float)
A:numpy.core.tests.test_deprecations.res->numpy.empty(3, dtype=object)
A:numpy.core.tests.test_deprecations.x_str->'1.51,2,3.51,4{}'.format(invalid_str)
A:numpy.core.tests.test_deprecations.bytestr->'1.51,2,3.51,4{}'.format(invalid_str).encode('ascii')
A:numpy.core.tests.test_deprecations.message->re.escape('tostring() is deprecated. Use tobytes() instead.')
A:numpy.core.tests.test_deprecations.s->numpy.arange(5 * 2).reshape(5, 2).tostring()
A:numpy.core.tests.test_deprecations.scalar->scalar_type(0)
A:numpy.core.tests.test_deprecations.arr2->numpy.ones((2, 2, 1))
A:numpy.core.tests.test_deprecations.m->numpy.array([1, 2, 3]).view(np.matrix)
A:numpy.core.tests.test_deprecations.blueprint->numpy.arange(10).astype('f4')
A:numpy.core.tests.test_deprecations.MyArr->type('MyArr', (), {protocol: getattr(blueprint, protocol), '__float__': lambda _: 0.5})
A:numpy.core.tests.test_deprecations.myarr->MyArr()
A:numpy.core.tests.test_deprecations.expected->numpy.empty(1, dtype=object)
A:numpy.core.tests.test_deprecations.func->getattr(self.ctypes, name)
numpy.core.tests.test_deprecations.BuiltInRoundComplexDType(_DeprecationTestCase)
numpy.core.tests.test_deprecations.BuiltInRoundComplexDType.test_deprecated(self)
numpy.core.tests.test_deprecations.BuiltInRoundComplexDType.test_not_deprecated(self)
numpy.core.tests.test_deprecations.FlatteningConcatenateUnsafeCast(_DeprecationTestCase)
numpy.core.tests.test_deprecations.FlatteningConcatenateUnsafeCast.test_deprecated(self)
numpy.core.tests.test_deprecations.FlatteningConcatenateUnsafeCast.test_not_deprecated(self)
numpy.core.tests.test_deprecations.TestAlen(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestAlen.test_alen(self)
numpy.core.tests.test_deprecations.TestArrayDataAttributeAssignmentDeprecation(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestArrayDataAttributeAssignmentDeprecation.test_data_attr_assignment(self)
numpy.core.tests.test_deprecations.TestBinaryReprInsufficientWidthParameterForRepresentation(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestBinaryReprInsufficientWidthParameterForRepresentation.test_insufficient_width_negative(self)
numpy.core.tests.test_deprecations.TestBinaryReprInsufficientWidthParameterForRepresentation.test_insufficient_width_positive(self)
numpy.core.tests.test_deprecations.TestBincount(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestBincount.test_bincount_minlength(self)
numpy.core.tests.test_deprecations.TestComparisonBadDType(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestComparisonBadDType.test_deprecated(self)
numpy.core.tests.test_deprecations.TestComparisonBadDType.test_not_deprecated(self)
numpy.core.tests.test_deprecations.TestComparisonBadObjectDType(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestComparisonBadObjectDType.test_deprecated(self)
numpy.core.tests.test_deprecations.TestComparisonDeprecations(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_array_richcompare_legacy_weirdness(self)
numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_normal_types(self)
numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_string(self)
numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures(self)
numpy.core.tests.test_deprecations.TestCtypesGetter(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestCtypesGetter.test_deprecated(self,name:str)->None
numpy.core.tests.test_deprecations.TestCtypesGetter.test_not_deprecated(self,name:str)->None
numpy.core.tests.test_deprecations.TestDTypeAttributeIsDTypeDeprecation(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestDTypeAttributeIsDTypeDeprecation.test_deprecation_dtype_attribute_is_dtype(self)
numpy.core.tests.test_deprecations.TestDTypeCoercion(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestDTypeCoercion.test_array_construction(self)
numpy.core.tests.test_deprecations.TestDTypeCoercion.test_dtype_coercion(self)
numpy.core.tests.test_deprecations.TestDTypeCoercion.test_not_deprecated(self)
numpy.core.tests.test_deprecations.TestDatetime64Timezone(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestDatetime64Timezone.test_datetime(self)
numpy.core.tests.test_deprecations.TestDatetime64Timezone.test_string(self)
numpy.core.tests.test_deprecations.TestDatetimeEvent(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestDatetimeEvent.test_3_tuple(self)
numpy.core.tests.test_deprecations.TestDeprecateSubarrayDTypeDuringArrayCoercion(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestDeprecateSubarrayDTypeDuringArrayCoercion.test_deprecated_and_error(self)
numpy.core.tests.test_deprecations.TestDeprecateSubarrayDTypeDuringArrayCoercion.test_deprecated_array(self)
numpy.core.tests.test_deprecations.TestDeprecatedGlobals(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestDeprecatedGlobals.test_type_aliases(self)
numpy.core.tests.test_deprecations.TestDeprecatedUnpickleObjectScalar(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestDeprecatedUnpickleObjectScalar.test_deprecated(self)
numpy.core.tests.test_deprecations.TestFromStringAndFileInvalidData(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestFromStringAndFileInvalidData.test_deprecate_unparsable_data_file(self,invalid_str)
numpy.core.tests.test_deprecations.TestFromStringAndFileInvalidData.test_deprecate_unparsable_string(self,invalid_str)
numpy.core.tests.test_deprecations.TestFromstring(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestFromstring.test_fromstring(self)
numpy.core.tests.test_deprecations.TestFutureWarningArrayLikeNotIterable(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestFutureWarningArrayLikeNotIterable.test_0d_not_deprecated(self,protocol)
numpy.core.tests.test_deprecations.TestFutureWarningArrayLikeNotIterable.test_assignment_not_deprecated(self,protocol)
numpy.core.tests.test_deprecations.TestFutureWarningArrayLikeNotIterable.test_deprecated(self,protocol)
numpy.core.tests.test_deprecations.TestFutureWarningArrayLikeNotIterable.test_strange_dtype_handling(self,protocol)
numpy.core.tests.test_deprecations.TestFutureWarningArrayLikeNotIterable.test_unnested_not_deprecated(self,protocol)
numpy.core.tests.test_deprecations.TestGeneratorSum(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestGeneratorSum.test_generator_sum(self)
numpy.core.tests.test_deprecations.TestIncorrectAdvancedIndexWithEmptyResult(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestIncorrectAdvancedIndexWithEmptyResult.test_empty_index_broadcast_not_deprecated(self)
numpy.core.tests.test_deprecations.TestIncorrectAdvancedIndexWithEmptyResult.test_empty_subspace(self,index)
numpy.core.tests.test_deprecations.TestMatrixInOuter(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestMatrixInOuter.test_deprecated(self)
numpy.core.tests.test_deprecations.TestNPY_CHAR(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestNPY_CHAR.test_npy_char_deprecation(self)
numpy.core.tests.test_deprecations.TestNonCContiguousViewDeprecation(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestNonCContiguousViewDeprecation.test_fortran_contiguous(self)
numpy.core.tests.test_deprecations.TestNonExactMatchDeprecation(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestNonExactMatchDeprecation.test_non_exact_match(self)
numpy.core.tests.test_deprecations.TestNonNumericConjugate(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestNonNumericConjugate.test_conjugate(self)
numpy.core.tests.test_deprecations.TestNonTupleNDIndexDeprecation
numpy.core.tests.test_deprecations.TestNonTupleNDIndexDeprecation.test_basic(self)
numpy.core.tests.test_deprecations.TestNonZero(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestNonZero.test_zerod(self)
numpy.core.tests.test_deprecations.TestNoseDecoratorsDeprecated(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestNoseDecoratorsDeprecated.DidntSkipException(Exception)
numpy.core.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_deprecated(self)
numpy.core.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_parametrize(self)
numpy.core.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_setastest(self)
numpy.core.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_skip_functions_callable(self)
numpy.core.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_skip_functions_hardcoded(self)
numpy.core.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_skip_generators_callable(self)
numpy.core.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_skip_generators_hardcoded(self)
numpy.core.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_slow(self)
numpy.core.tests.test_deprecations.TestNumericStyleTypecodes(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestNumericStyleTypecodes.test_all_dtypes(self)
numpy.core.tests.test_deprecations.TestPositiveOnNonNumerical(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestPositiveOnNonNumerical.test_positive_on_non_number(self)
numpy.core.tests.test_deprecations.TestPyArray_AS1D(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestPyArray_AS1D.test_npy_pyarrayas1d_deprecation(self)
numpy.core.tests.test_deprecations.TestPyArray_AS2D(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestPyArray_AS2D.test_npy_pyarrayas2d_deprecation(self)
numpy.core.tests.test_deprecations.TestRaggedArray(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestRaggedArray.test_deprecated(self)
numpy.core.tests.test_deprecations.TestShape1Fields(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestShape1Fields.test_shape_1_fields(self)
numpy.core.tests.test_deprecations.TestSingleElementSignature(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestSingleElementSignature.test_deprecated(self)
numpy.core.tests.test_deprecations.TestSpecialAttributeLookupFailure(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestSpecialAttributeLookupFailure.WeirdArrayInterface
numpy.core.tests.test_deprecations.TestSpecialAttributeLookupFailure.WeirdArrayInterface.__array_interface__(self)
numpy.core.tests.test_deprecations.TestSpecialAttributeLookupFailure.WeirdArrayLike
numpy.core.tests.test_deprecations.TestSpecialAttributeLookupFailure.WeirdArrayLike.__array__(self)
numpy.core.tests.test_deprecations.TestSpecialAttributeLookupFailure.test_deprecated(self)
numpy.core.tests.test_deprecations.TestTestDeprecated
numpy.core.tests.test_deprecations.TestTestDeprecated.test_assert_deprecated(self)
numpy.core.tests.test_deprecations.TestToString(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestToString.test_tostring(self)
numpy.core.tests.test_deprecations.TestToString.test_tostring_matches_tobytes(self)
numpy.core.tests.test_deprecations.TestTooDeepDeprecation(_VisibleDeprecationTestCase)
numpy.core.tests.test_deprecations.TestTooDeepDeprecation.test_deprecation(self)
numpy.core.tests.test_deprecations.TestTruthTestingEmptyArrays(_DeprecationTestCase)
numpy.core.tests.test_deprecations.TestTruthTestingEmptyArrays.test_1d(self)
numpy.core.tests.test_deprecations.TestTruthTestingEmptyArrays.test_2d(self)
numpy.core.tests.test_deprecations.Test_GetSet_NumericOps(_DeprecationTestCase)
numpy.core.tests.test_deprecations.Test_GetSet_NumericOps.test_get_numeric_ops(self)
numpy.core.tests.test_deprecations.Test_UPDATEIFCOPY(_DeprecationTestCase)
numpy.core.tests.test_deprecations.Test_UPDATEIFCOPY.test_npy_updateifcopy_deprecation(self)
numpy.core.tests.test_deprecations._DeprecationTestCase
numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated(self,function,num=1,ignore_others=False,function_fails=False,exceptions=np._NoValue,args=(),kwargs={})
numpy.core.tests.test_deprecations._DeprecationTestCase.assert_not_deprecated(self,function,args=(),kwargs={})
numpy.core.tests.test_deprecations._DeprecationTestCase.setup(self)
numpy.core.tests.test_deprecations._DeprecationTestCase.teardown(self)
numpy.core.tests.test_deprecations._VisibleDeprecationTestCase(_DeprecationTestCase)
numpy.core.tests.test_deprecations.test_deprecate_ragged_arrays()
numpy.tests.test_deprecations.BuiltInRoundComplexDType(_DeprecationTestCase)
numpy.tests.test_deprecations.BuiltInRoundComplexDType.test_deprecated(self)
numpy.tests.test_deprecations.BuiltInRoundComplexDType.test_not_deprecated(self)
numpy.tests.test_deprecations.FlatteningConcatenateUnsafeCast(_DeprecationTestCase)
numpy.tests.test_deprecations.FlatteningConcatenateUnsafeCast.test_deprecated(self)
numpy.tests.test_deprecations.FlatteningConcatenateUnsafeCast.test_not_deprecated(self)
numpy.tests.test_deprecations.TestAlen(_DeprecationTestCase)
numpy.tests.test_deprecations.TestAlen.test_alen(self)
numpy.tests.test_deprecations.TestArrayDataAttributeAssignmentDeprecation(_DeprecationTestCase)
numpy.tests.test_deprecations.TestArrayDataAttributeAssignmentDeprecation.test_data_attr_assignment(self)
numpy.tests.test_deprecations.TestBinaryReprInsufficientWidthParameterForRepresentation(_DeprecationTestCase)
numpy.tests.test_deprecations.TestBinaryReprInsufficientWidthParameterForRepresentation.test_insufficient_width_negative(self)
numpy.tests.test_deprecations.TestBinaryReprInsufficientWidthParameterForRepresentation.test_insufficient_width_positive(self)
numpy.tests.test_deprecations.TestBincount(_DeprecationTestCase)
numpy.tests.test_deprecations.TestBincount.test_bincount_minlength(self)
numpy.tests.test_deprecations.TestComparisonBadDType(_DeprecationTestCase)
numpy.tests.test_deprecations.TestComparisonBadDType.test_deprecated(self)
numpy.tests.test_deprecations.TestComparisonBadDType.test_not_deprecated(self)
numpy.tests.test_deprecations.TestComparisonBadObjectDType(_DeprecationTestCase)
numpy.tests.test_deprecations.TestComparisonBadObjectDType.test_deprecated(self)
numpy.tests.test_deprecations.TestComparisonDeprecations(_DeprecationTestCase)
numpy.tests.test_deprecations.TestComparisonDeprecations.test_array_richcompare_legacy_weirdness(self)
numpy.tests.test_deprecations.TestComparisonDeprecations.test_normal_types(self)
numpy.tests.test_deprecations.TestComparisonDeprecations.test_string(self)
numpy.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures(self)
numpy.tests.test_deprecations.TestCtypesGetter(_DeprecationTestCase)
numpy.tests.test_deprecations.TestCtypesGetter.test_deprecated(self,name:str)->None
numpy.tests.test_deprecations.TestCtypesGetter.test_not_deprecated(self,name:str)->None
numpy.tests.test_deprecations.TestDTypeAttributeIsDTypeDeprecation(_DeprecationTestCase)
numpy.tests.test_deprecations.TestDTypeAttributeIsDTypeDeprecation.test_deprecation_dtype_attribute_is_dtype(self)
numpy.tests.test_deprecations.TestDTypeCoercion(_DeprecationTestCase)
numpy.tests.test_deprecations.TestDTypeCoercion.test_array_construction(self)
numpy.tests.test_deprecations.TestDTypeCoercion.test_dtype_coercion(self)
numpy.tests.test_deprecations.TestDTypeCoercion.test_not_deprecated(self)
numpy.tests.test_deprecations.TestDatetime64Timezone(_DeprecationTestCase)
numpy.tests.test_deprecations.TestDatetime64Timezone.test_datetime(self)
numpy.tests.test_deprecations.TestDatetime64Timezone.test_string(self)
numpy.tests.test_deprecations.TestDatetimeEvent(_DeprecationTestCase)
numpy.tests.test_deprecations.TestDatetimeEvent.test_3_tuple(self)
numpy.tests.test_deprecations.TestDeprecateSubarrayDTypeDuringArrayCoercion(_DeprecationTestCase)
numpy.tests.test_deprecations.TestDeprecateSubarrayDTypeDuringArrayCoercion.test_deprecated_and_error(self)
numpy.tests.test_deprecations.TestDeprecateSubarrayDTypeDuringArrayCoercion.test_deprecated_array(self)
numpy.tests.test_deprecations.TestDeprecatedGlobals(_DeprecationTestCase)
numpy.tests.test_deprecations.TestDeprecatedGlobals.test_type_aliases(self)
numpy.tests.test_deprecations.TestDeprecatedUnpickleObjectScalar(_DeprecationTestCase)
numpy.tests.test_deprecations.TestDeprecatedUnpickleObjectScalar.test_deprecated(self)
numpy.tests.test_deprecations.TestFromStringAndFileInvalidData(_DeprecationTestCase)
numpy.tests.test_deprecations.TestFromStringAndFileInvalidData.test_deprecate_unparsable_data_file(self,invalid_str)
numpy.tests.test_deprecations.TestFromStringAndFileInvalidData.test_deprecate_unparsable_string(self,invalid_str)
numpy.tests.test_deprecations.TestFromstring(_DeprecationTestCase)
numpy.tests.test_deprecations.TestFromstring.test_fromstring(self)
numpy.tests.test_deprecations.TestFutureWarningArrayLikeNotIterable(_DeprecationTestCase)
numpy.tests.test_deprecations.TestFutureWarningArrayLikeNotIterable.test_0d_not_deprecated(self,protocol)
numpy.tests.test_deprecations.TestFutureWarningArrayLikeNotIterable.test_assignment_not_deprecated(self,protocol)
numpy.tests.test_deprecations.TestFutureWarningArrayLikeNotIterable.test_deprecated(self,protocol)
numpy.tests.test_deprecations.TestFutureWarningArrayLikeNotIterable.test_strange_dtype_handling(self,protocol)
numpy.tests.test_deprecations.TestFutureWarningArrayLikeNotIterable.test_unnested_not_deprecated(self,protocol)
numpy.tests.test_deprecations.TestGeneratorSum(_DeprecationTestCase)
numpy.tests.test_deprecations.TestGeneratorSum.test_generator_sum(self)
numpy.tests.test_deprecations.TestIncorrectAdvancedIndexWithEmptyResult(_DeprecationTestCase)
numpy.tests.test_deprecations.TestIncorrectAdvancedIndexWithEmptyResult.test_empty_index_broadcast_not_deprecated(self)
numpy.tests.test_deprecations.TestIncorrectAdvancedIndexWithEmptyResult.test_empty_subspace(self,index)
numpy.tests.test_deprecations.TestMatrixInOuter(_DeprecationTestCase)
numpy.tests.test_deprecations.TestMatrixInOuter.test_deprecated(self)
numpy.tests.test_deprecations.TestNPY_CHAR(_DeprecationTestCase)
numpy.tests.test_deprecations.TestNPY_CHAR.test_npy_char_deprecation(self)
numpy.tests.test_deprecations.TestNonCContiguousViewDeprecation(_DeprecationTestCase)
numpy.tests.test_deprecations.TestNonCContiguousViewDeprecation.test_fortran_contiguous(self)
numpy.tests.test_deprecations.TestNonExactMatchDeprecation(_DeprecationTestCase)
numpy.tests.test_deprecations.TestNonExactMatchDeprecation.test_non_exact_match(self)
numpy.tests.test_deprecations.TestNonNumericConjugate(_DeprecationTestCase)
numpy.tests.test_deprecations.TestNonNumericConjugate.test_conjugate(self)
numpy.tests.test_deprecations.TestNonTupleNDIndexDeprecation
numpy.tests.test_deprecations.TestNonTupleNDIndexDeprecation.test_basic(self)
numpy.tests.test_deprecations.TestNonZero(_DeprecationTestCase)
numpy.tests.test_deprecations.TestNonZero.test_zerod(self)
numpy.tests.test_deprecations.TestNoseDecoratorsDeprecated(_DeprecationTestCase)
numpy.tests.test_deprecations.TestNoseDecoratorsDeprecated.DidntSkipException(Exception)
numpy.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_deprecated(self)
numpy.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_parametrize(self)
numpy.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_setastest(self)
numpy.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_skip_functions_callable(self)
numpy.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_skip_functions_hardcoded(self)
numpy.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_skip_generators_callable(self)
numpy.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_skip_generators_hardcoded(self)
numpy.tests.test_deprecations.TestNoseDecoratorsDeprecated.test_slow(self)
numpy.tests.test_deprecations.TestNumericStyleTypecodes(_DeprecationTestCase)
numpy.tests.test_deprecations.TestNumericStyleTypecodes.test_all_dtypes(self)
numpy.tests.test_deprecations.TestPositiveOnNonNumerical(_DeprecationTestCase)
numpy.tests.test_deprecations.TestPositiveOnNonNumerical.test_positive_on_non_number(self)
numpy.tests.test_deprecations.TestPyArray_AS1D(_DeprecationTestCase)
numpy.tests.test_deprecations.TestPyArray_AS1D.test_npy_pyarrayas1d_deprecation(self)
numpy.tests.test_deprecations.TestPyArray_AS2D(_DeprecationTestCase)
numpy.tests.test_deprecations.TestPyArray_AS2D.test_npy_pyarrayas2d_deprecation(self)
numpy.tests.test_deprecations.TestRaggedArray(_DeprecationTestCase)
numpy.tests.test_deprecations.TestRaggedArray.test_deprecated(self)
numpy.tests.test_deprecations.TestShape1Fields(_DeprecationTestCase)
numpy.tests.test_deprecations.TestShape1Fields.test_shape_1_fields(self)
numpy.tests.test_deprecations.TestSingleElementSignature(_DeprecationTestCase)
numpy.tests.test_deprecations.TestSingleElementSignature.test_deprecated(self)
numpy.tests.test_deprecations.TestSpecialAttributeLookupFailure(_DeprecationTestCase)
numpy.tests.test_deprecations.TestSpecialAttributeLookupFailure.WeirdArrayInterface
numpy.tests.test_deprecations.TestSpecialAttributeLookupFailure.WeirdArrayInterface.__array_interface__(self)
numpy.tests.test_deprecations.TestSpecialAttributeLookupFailure.WeirdArrayLike
numpy.tests.test_deprecations.TestSpecialAttributeLookupFailure.WeirdArrayLike.__array__(self)
numpy.tests.test_deprecations.TestSpecialAttributeLookupFailure.test_deprecated(self)
numpy.tests.test_deprecations.TestTestDeprecated
numpy.tests.test_deprecations.TestTestDeprecated.test_assert_deprecated(self)
numpy.tests.test_deprecations.TestToString(_DeprecationTestCase)
numpy.tests.test_deprecations.TestToString.test_tostring(self)
numpy.tests.test_deprecations.TestToString.test_tostring_matches_tobytes(self)
numpy.tests.test_deprecations.TestTooDeepDeprecation(_VisibleDeprecationTestCase)
numpy.tests.test_deprecations.TestTooDeepDeprecation.test_deprecation(self)
numpy.tests.test_deprecations.TestTruthTestingEmptyArrays(_DeprecationTestCase)
numpy.tests.test_deprecations.TestTruthTestingEmptyArrays.test_1d(self)
numpy.tests.test_deprecations.TestTruthTestingEmptyArrays.test_2d(self)
numpy.tests.test_deprecations.Test_GetSet_NumericOps(_DeprecationTestCase)
numpy.tests.test_deprecations.Test_GetSet_NumericOps.test_get_numeric_ops(self)
numpy.tests.test_deprecations.Test_UPDATEIFCOPY(_DeprecationTestCase)
numpy.tests.test_deprecations.Test_UPDATEIFCOPY.test_npy_updateifcopy_deprecation(self)
numpy.tests.test_deprecations._DeprecationTestCase
numpy.tests.test_deprecations._DeprecationTestCase.assert_deprecated(self,function,num=1,ignore_others=False,function_fails=False,exceptions=np._NoValue,args=(),kwargs={})
numpy.tests.test_deprecations._DeprecationTestCase.assert_not_deprecated(self,function,args=(),kwargs={})
numpy.tests.test_deprecations._DeprecationTestCase.setup(self)
numpy.tests.test_deprecations._DeprecationTestCase.teardown(self)
numpy.tests.test_deprecations._VisibleDeprecationTestCase(_DeprecationTestCase)
numpy.tests.test_deprecations.test_deprecate_ragged_arrays()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_indexing.py----------------------------------------
A:numpy.core.tests.test_indexing.a->a.reshape(5, 2).reshape(5, 2)
A:numpy.core.tests.test_indexing.s->numpy.arange(10).view(SubClass)
A:numpy.core.tests.test_indexing.index->tuple((i for i in index if not isskip(i)))
A:numpy.core.tests.test_indexing.u_index->tuple((i for i in index if not isskip(i))).astype(np.uintp)
A:numpy.core.tests.test_indexing.arr->arr.copy().copy()
A:numpy.core.tests.test_indexing.arr[u_index]->numpy.arange(5)
A:numpy.core.tests.test_indexing.b->arr.copy().copy().copy()
A:numpy.core.tests.test_indexing.indx->numpy.arange(*indx.indices(arr.shape[ax]))
A:numpy.core.tests.test_indexing.arr[indx]->numpy.ones(100, dtype=object)
A:numpy.core.tests.test_indexing.expected->numpy.zeros(1000)
A:numpy.core.tests.test_indexing.b[[0, 1]]->numpy.arange(2 * 4 * 2).reshape(2, 4, 2).T.copy()
A:numpy.core.tests.test_indexing.ind->numpy.broadcast_to(ind, (10, 55, 4, 4))
A:numpy.core.tests.test_indexing.res->numpy.broadcast(*indx[1:])
A:numpy.core.tests.test_indexing.a[[0, 1, 2, 3, 4], :]->memoryview(s)
A:numpy.core.tests.test_indexing.a[:, [0, 1, 2, 3, 4]]->memoryview(s)
A:numpy.core.tests.test_indexing.a[...]->numpy.ones((1, 3, 2))
A:numpy.core.tests.test_indexing.d->numpy.zeros((3, 3, 3))
A:numpy.core.tests.test_indexing.z->Zero()
A:numpy.core.tests.test_indexing.refcount->sys.getrefcount(np.dtype(np.intp))
A:numpy.core.tests.test_indexing.x->numpy.ones(10)
A:numpy.core.tests.test_indexing.x[...]->numpy.array('b' * 8, dtype='S')
A:numpy.core.tests.test_indexing.b[...]->numpy.arange(d.size)
A:numpy.core.tests.test_indexing.x2->numpy.ones((10, 2))
A:numpy.core.tests.test_indexing.zind->numpy.zeros(4, dtype=np.intp)
A:numpy.core.tests.test_indexing.arro->numpy.zeros((4, 4))
A:numpy.core.tests.test_indexing.arr[0]->numpy.str_('asdfg')
A:numpy.core.tests.test_indexing.dt->numpy.dtype([('', dt)] * 2)
A:numpy.core.tests.test_indexing.rng->numpy.random.default_rng()
A:numpy.core.tests.test_indexing.tpe->ThreadPoolExecutor(max_workers=8)
A:numpy.core.tests.test_indexing.a[[0, 1, 2], :]->numpy.ones((1, 3, 2))
A:numpy.core.tests.test_indexing.a[:, [0, 1]]->numpy.ones((1, 3, 2))
A:numpy.core.tests.test_indexing.a[[[0], [1], [2]], [0, 1]]->numpy.ones((1, 3, 2))
A:numpy.core.tests.test_indexing.values->numpy.zeros((100, 100))
A:numpy.core.tests.test_indexing.shape_str->str(arr[index].shape).replace(' ', '')
A:numpy.core.tests.test_indexing.self.finalize_status->numpy.array(self)
A:numpy.core.tests.test_indexing.bool_index->numpy.zeros(shape).astype(bool)
A:numpy.core.tests.test_indexing.zero_array->numpy.zeros(shape)
A:numpy.core.tests.test_indexing.zero_array[bool_index]->numpy.array([1])
A:numpy.core.tests.test_indexing.cmp_arr->arr.copy().copy().copy()
A:numpy.core.tests.test_indexing.a[:3]->numpy.array(['2', '-3', '-1'])
A:numpy.core.tests.test_indexing.b[[0, 2, 1]]->numpy.array(['2', '-1', '-3'])
A:numpy.core.tests.test_indexing.b[[0], :3]->numpy.array([['2', '-3', '-1']])
A:numpy.core.tests.test_indexing.self.a->numpy.arange(np.prod([3, 1, 5, 6])).reshape(3, 1, 5, 6)
A:numpy.core.tests.test_indexing.self.b->numpy.empty((3, 0, 5, 6))
A:numpy.core.tests.test_indexing.in_indices->list(indices)
A:numpy.core.tests.test_indexing.flat_indx->numpy.array([0] * indx.sum(), dtype=np.intp)
A:numpy.core.tests.test_indexing.axes->list(range(arr.ndim))
A:numpy.core.tests.test_indexing.mi->numpy.ravel_multi_index(indx[1:], orig_slice, mode='wrap')
A:numpy.core.tests.test_indexing.(mimic_get, no_copy)->self._get_multi_index(arr, (index,))
A:numpy.core.tests.test_indexing.prev_refcount->sys.getrefcount(arr)
A:numpy.core.tests.test_indexing.idx1->numpy.array([[False] * 9])
A:numpy.core.tests.test_indexing.idx2->numpy.array([[False] * 8 + [True]])
A:numpy.core.tests.test_indexing.idx3->numpy.array([[False] * 10])
A:numpy.core.tests.test_indexing.idx->numpy.array([[[True], [False]]])
A:numpy.core.tests.test_indexing.subscript->functools.partial(array_indexing, 0)
A:numpy.core.tests.test_indexing.assign->functools.partial(array_indexing, 1)
numpy.core.tests.test_indexing.TestArrayToIndexDeprecation
numpy.core.tests.test_indexing.TestArrayToIndexDeprecation.test_array_to_index_error(self)
numpy.core.tests.test_indexing.TestBooleanIndexing
numpy.core.tests.test_indexing.TestBooleanIndexing.test_bool_as_int_argument_errors(self)
numpy.core.tests.test_indexing.TestBooleanIndexing.test_boolean_indexing_fast_path(self)
numpy.core.tests.test_indexing.TestBooleanIndexing.test_boolean_indexing_weirdness(self)
numpy.core.tests.test_indexing.TestBroadcastedAssignments
numpy.core.tests.test_indexing.TestBroadcastedAssignments.assign(self,a,ind,val)
numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_broadcast_error_reports_correct_shape(self,index)
numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_broadcast_subspace(self)
numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_index_is_larger(self)
numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_prepend_not_one(self)
numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_prepending_ones(self)
numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_simple_broadcasting_errors(self)
numpy.core.tests.test_indexing.TestCApiAccess
numpy.core.tests.test_indexing.TestCApiAccess.test_getitem(self)
numpy.core.tests.test_indexing.TestCApiAccess.test_setitem(self)
numpy.core.tests.test_indexing.TestFancyIndexingCast
numpy.core.tests.test_indexing.TestFancyIndexingCast.test_boolean_index_cast_assign(self)
numpy.core.tests.test_indexing.TestFancyIndexingEquivalence
numpy.core.tests.test_indexing.TestFancyIndexingEquivalence.test_cast_equivalence(self)
numpy.core.tests.test_indexing.TestFancyIndexingEquivalence.test_object_assign(self)
numpy.core.tests.test_indexing.TestFieldIndexing
numpy.core.tests.test_indexing.TestFieldIndexing.test_scalar_return_type(self)
numpy.core.tests.test_indexing.TestFloatNonIntegerArgument
numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_non_integer_argument_errors(self)
numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_non_integer_sequence_multiplication(self)
numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_reduce_axis_float_index(self)
numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_valid_indexing(self)
numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_valid_slicing(self)
numpy.core.tests.test_indexing.TestIndexing
numpy.core.tests.test_indexing.TestIndexing.test_array_like_values(self)
numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_needs_api(self)
numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch(self)
numpy.core.tests.test_indexing.TestIndexing.test_boolean_indexing_list(self)
numpy.core.tests.test_indexing.TestIndexing.test_boolean_indexing_onedim(self)
numpy.core.tests.test_indexing.TestIndexing.test_boolean_indexing_twodim(self)
numpy.core.tests.test_indexing.TestIndexing.test_boolean_shape_mismatch(self)
numpy.core.tests.test_indexing.TestIndexing.test_broaderrors_indexing(self)
numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index(self)
numpy.core.tests.test_indexing.TestIndexing.test_character_assignment(self)
numpy.core.tests.test_indexing.TestIndexing.test_ellipsis_index(self)
numpy.core.tests.test_indexing.TestIndexing.test_empty_fancy_index(self)
numpy.core.tests.test_indexing.TestIndexing.test_empty_tuple_index(self)
numpy.core.tests.test_indexing.TestIndexing.test_everything_returns_views(self)
numpy.core.tests.test_indexing.TestIndexing.test_index_no_array_to_index(self)
numpy.core.tests.test_indexing.TestIndexing.test_index_no_floats(self)
numpy.core.tests.test_indexing.TestIndexing.test_indexing_array_negative_strides(self)
numpy.core.tests.test_indexing.TestIndexing.test_indexing_array_weird_strides(self)
numpy.core.tests.test_indexing.TestIndexing.test_memory_order(self)
numpy.core.tests.test_indexing.TestIndexing.test_nonbaseclass_values(self)
numpy.core.tests.test_indexing.TestIndexing.test_none_index(self)
numpy.core.tests.test_indexing.TestIndexing.test_reverse_strides_and_subspace_bufferinit(self)
numpy.core.tests.test_indexing.TestIndexing.test_reversed_strides_result_allocation(self)
numpy.core.tests.test_indexing.TestIndexing.test_same_kind_index_casting(self)
numpy.core.tests.test_indexing.TestIndexing.test_scalar_array_bool(self)
numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type(self)
numpy.core.tests.test_indexing.TestIndexing.test_single_bool_index(self)
numpy.core.tests.test_indexing.TestIndexing.test_single_int_index(self)
numpy.core.tests.test_indexing.TestIndexing.test_slicing_no_floats(self)
numpy.core.tests.test_indexing.TestIndexing.test_small_regressions(self)
numpy.core.tests.test_indexing.TestIndexing.test_structured_advanced_indexing(self)
numpy.core.tests.test_indexing.TestIndexing.test_subclass_writeable(self)
numpy.core.tests.test_indexing.TestIndexing.test_too_many_advanced_indices(self,index,num,original_ndim)
numpy.core.tests.test_indexing.TestIndexing.test_too_many_fancy_indices_special_case(self)
numpy.core.tests.test_indexing.TestIndexing.test_trivial_fancy_not_possible(self)
numpy.core.tests.test_indexing.TestIndexing.test_trivial_fancy_out_of_bounds(self)
numpy.core.tests.test_indexing.TestIndexing.test_tuple_subclass(self)
numpy.core.tests.test_indexing.TestIndexing.test_unaligned(self)
numpy.core.tests.test_indexing.TestIndexing.test_uncontiguous_subspace_assignment(self)
numpy.core.tests.test_indexing.TestIndexing.test_void_scalar_empty_tuple(self)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated
numpy.core.tests.test_indexing.TestMultiIndexingAutomated._check_multi_index(self,arr,index)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated._check_single_index(self,arr,index)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated._compare_index_result(self,arr,index,mimic_get,no_copy)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated._get_multi_index(self,arr,indices)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated.setup(self)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated.test_1d(self)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated.test_boolean(self)
numpy.core.tests.test_indexing.TestMultiIndexingAutomated.test_multidim(self)
numpy.core.tests.test_indexing.TestMultipleEllipsisError
numpy.core.tests.test_indexing.TestMultipleEllipsisError.test_basic(self)
numpy.core.tests.test_indexing.TestNonIntegerArrayLike
numpy.core.tests.test_indexing.TestNonIntegerArrayLike.test_basic(self)
numpy.core.tests.test_indexing.TestSubclasses
numpy.core.tests.test_indexing.TestSubclasses.test_basic(self)
numpy.core.tests.test_indexing.TestSubclasses.test_fancy_on_read_only(self)
numpy.core.tests.test_indexing.TestSubclasses.test_finalize_gets_full_info(self)
numpy.tests.test_indexing.TestArrayToIndexDeprecation
numpy.tests.test_indexing.TestArrayToIndexDeprecation.test_array_to_index_error(self)
numpy.tests.test_indexing.TestBooleanIndexing
numpy.tests.test_indexing.TestBooleanIndexing.test_bool_as_int_argument_errors(self)
numpy.tests.test_indexing.TestBooleanIndexing.test_boolean_indexing_fast_path(self)
numpy.tests.test_indexing.TestBooleanIndexing.test_boolean_indexing_weirdness(self)
numpy.tests.test_indexing.TestBroadcastedAssignments
numpy.tests.test_indexing.TestBroadcastedAssignments.assign(self,a,ind,val)
numpy.tests.test_indexing.TestBroadcastedAssignments.test_broadcast_error_reports_correct_shape(self,index)
numpy.tests.test_indexing.TestBroadcastedAssignments.test_broadcast_subspace(self)
numpy.tests.test_indexing.TestBroadcastedAssignments.test_index_is_larger(self)
numpy.tests.test_indexing.TestBroadcastedAssignments.test_prepend_not_one(self)
numpy.tests.test_indexing.TestBroadcastedAssignments.test_prepending_ones(self)
numpy.tests.test_indexing.TestBroadcastedAssignments.test_simple_broadcasting_errors(self)
numpy.tests.test_indexing.TestCApiAccess
numpy.tests.test_indexing.TestCApiAccess.test_getitem(self)
numpy.tests.test_indexing.TestCApiAccess.test_setitem(self)
numpy.tests.test_indexing.TestFancyIndexingCast
numpy.tests.test_indexing.TestFancyIndexingCast.test_boolean_index_cast_assign(self)
numpy.tests.test_indexing.TestFancyIndexingEquivalence
numpy.tests.test_indexing.TestFancyIndexingEquivalence.test_cast_equivalence(self)
numpy.tests.test_indexing.TestFancyIndexingEquivalence.test_object_assign(self)
numpy.tests.test_indexing.TestFieldIndexing
numpy.tests.test_indexing.TestFieldIndexing.test_scalar_return_type(self)
numpy.tests.test_indexing.TestFloatNonIntegerArgument
numpy.tests.test_indexing.TestFloatNonIntegerArgument.test_non_integer_argument_errors(self)
numpy.tests.test_indexing.TestFloatNonIntegerArgument.test_non_integer_sequence_multiplication(self)
numpy.tests.test_indexing.TestFloatNonIntegerArgument.test_reduce_axis_float_index(self)
numpy.tests.test_indexing.TestFloatNonIntegerArgument.test_valid_indexing(self)
numpy.tests.test_indexing.TestFloatNonIntegerArgument.test_valid_slicing(self)
numpy.tests.test_indexing.TestIndexing
numpy.tests.test_indexing.TestIndexing.test_array_like_values(self)
numpy.tests.test_indexing.TestIndexing.test_boolean_assignment_needs_api(self)
numpy.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch(self)
numpy.tests.test_indexing.TestIndexing.test_boolean_indexing_list(self)
numpy.tests.test_indexing.TestIndexing.test_boolean_indexing_onedim(self)
numpy.tests.test_indexing.TestIndexing.test_boolean_indexing_twodim(self)
numpy.tests.test_indexing.TestIndexing.test_boolean_shape_mismatch(self)
numpy.tests.test_indexing.TestIndexing.test_broaderrors_indexing(self)
numpy.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index(self)
numpy.tests.test_indexing.TestIndexing.test_character_assignment(self)
numpy.tests.test_indexing.TestIndexing.test_ellipsis_index(self)
numpy.tests.test_indexing.TestIndexing.test_empty_fancy_index(self)
numpy.tests.test_indexing.TestIndexing.test_empty_tuple_index(self)
numpy.tests.test_indexing.TestIndexing.test_everything_returns_views(self)
numpy.tests.test_indexing.TestIndexing.test_index_no_array_to_index(self)
numpy.tests.test_indexing.TestIndexing.test_index_no_floats(self)
numpy.tests.test_indexing.TestIndexing.test_indexing_array_negative_strides(self)
numpy.tests.test_indexing.TestIndexing.test_indexing_array_weird_strides(self)
numpy.tests.test_indexing.TestIndexing.test_memory_order(self)
numpy.tests.test_indexing.TestIndexing.test_nonbaseclass_values(self)
numpy.tests.test_indexing.TestIndexing.test_none_index(self)
numpy.tests.test_indexing.TestIndexing.test_reverse_strides_and_subspace_bufferinit(self)
numpy.tests.test_indexing.TestIndexing.test_reversed_strides_result_allocation(self)
numpy.tests.test_indexing.TestIndexing.test_same_kind_index_casting(self)
numpy.tests.test_indexing.TestIndexing.test_scalar_array_bool(self)
numpy.tests.test_indexing.TestIndexing.test_scalar_return_type(self)
numpy.tests.test_indexing.TestIndexing.test_single_bool_index(self)
numpy.tests.test_indexing.TestIndexing.test_single_int_index(self)
numpy.tests.test_indexing.TestIndexing.test_slicing_no_floats(self)
numpy.tests.test_indexing.TestIndexing.test_small_regressions(self)
numpy.tests.test_indexing.TestIndexing.test_structured_advanced_indexing(self)
numpy.tests.test_indexing.TestIndexing.test_subclass_writeable(self)
numpy.tests.test_indexing.TestIndexing.test_too_many_advanced_indices(self,index,num,original_ndim)
numpy.tests.test_indexing.TestIndexing.test_too_many_fancy_indices_special_case(self)
numpy.tests.test_indexing.TestIndexing.test_trivial_fancy_not_possible(self)
numpy.tests.test_indexing.TestIndexing.test_trivial_fancy_out_of_bounds(self)
numpy.tests.test_indexing.TestIndexing.test_tuple_subclass(self)
numpy.tests.test_indexing.TestIndexing.test_unaligned(self)
numpy.tests.test_indexing.TestIndexing.test_uncontiguous_subspace_assignment(self)
numpy.tests.test_indexing.TestIndexing.test_void_scalar_empty_tuple(self)
numpy.tests.test_indexing.TestMultiIndexingAutomated
numpy.tests.test_indexing.TestMultiIndexingAutomated._check_multi_index(self,arr,index)
numpy.tests.test_indexing.TestMultiIndexingAutomated._check_single_index(self,arr,index)
numpy.tests.test_indexing.TestMultiIndexingAutomated._compare_index_result(self,arr,index,mimic_get,no_copy)
numpy.tests.test_indexing.TestMultiIndexingAutomated._get_multi_index(self,arr,indices)
numpy.tests.test_indexing.TestMultiIndexingAutomated.setup(self)
numpy.tests.test_indexing.TestMultiIndexingAutomated.test_1d(self)
numpy.tests.test_indexing.TestMultiIndexingAutomated.test_boolean(self)
numpy.tests.test_indexing.TestMultiIndexingAutomated.test_multidim(self)
numpy.tests.test_indexing.TestMultipleEllipsisError
numpy.tests.test_indexing.TestMultipleEllipsisError.test_basic(self)
numpy.tests.test_indexing.TestNonIntegerArrayLike
numpy.tests.test_indexing.TestNonIntegerArrayLike.test_basic(self)
numpy.tests.test_indexing.TestSubclasses
numpy.tests.test_indexing.TestSubclasses.test_basic(self)
numpy.tests.test_indexing.TestSubclasses.test_fancy_on_read_only(self)
numpy.tests.test_indexing.TestSubclasses.test_finalize_gets_full_info(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_umath_accuracy.py----------------------------------------
A:numpy.core.tests.test_umath_accuracy.platform_skip->pytest.mark.skipif(not runtest, reason='avoid testing inconsistent platform library implementations')
A:numpy.core.tests.test_umath_accuracy.i->int(s, 16)
A:numpy.core.tests.test_umath_accuracy.cp->pointer(c_int(i))
A:numpy.core.tests.test_umath_accuracy.fp->cast(cp, POINTER(c_float))
A:numpy.core.tests.test_umath_accuracy.str_to_float->numpy.vectorize(convert)
A:numpy.core.tests.test_umath_accuracy.data_dir->os.path.join(path.dirname(__file__), 'data')
A:numpy.core.tests.test_umath_accuracy.filepath->os.path.join(data_dir, filename)
A:numpy.core.tests.test_umath_accuracy.data->numpy.genfromtxt(file_without_comments, dtype=('|S39', '|S39', '|S39', int), names=('type', 'input', 'output', 'ulperr'), delimiter=',', skip_header=1)
A:numpy.core.tests.test_umath_accuracy.npfunc->getattr(np, npname)
A:numpy.core.tests.test_umath_accuracy.inval->numpy.array(str_to_float(data_subset['input'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))
A:numpy.core.tests.test_umath_accuracy.outval->numpy.array(str_to_float(data_subset['output'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))
A:numpy.core.tests.test_umath_accuracy.perm->numpy.random.permutation(len(inval))
A:numpy.core.tests.test_umath_accuracy.maxulperr->data_subset['ulperr'].max()
numpy.core.tests.test_umath_accuracy.TestAccuracy
numpy.core.tests.test_umath_accuracy.TestAccuracy.test_validate_transcendentals(self)
numpy.core.tests.test_umath_accuracy.convert(s,datatype='np.float32')
numpy.tests.test_umath_accuracy.TestAccuracy
numpy.tests.test_umath_accuracy.TestAccuracy.test_validate_transcendentals(self)
numpy.tests.test_umath_accuracy.convert(s,datatype='np.float32')


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_item_selection.py----------------------------------------
A:numpy.core.tests.test_item_selection.ta->numpy.array(a if np.issubdtype(t, np.number) else a_str, dtype=t)
A:numpy.core.tests.test_item_selection.tresult->list(ta.T.copy())
A:numpy.core.tests.test_item_selection.res->numpy.array(a if np.issubdtype(t, np.number) else a_str, dtype=t).take(index_array, mode=mode, axis=1)
A:numpy.core.tests.test_item_selection.a->a.argpartition(np.array([], dtype=np.int16)).argpartition(np.array([], dtype=np.int16))
A:numpy.core.tests.test_item_selection.b->numpy.array([0, 1, 2, 3, 4, 5])
A:numpy.core.tests.test_item_selection.d->numpy.arange(10)
A:numpy.core.tests.test_item_selection.k->b'\xc3\xa4'.decode('UTF8')
A:numpy.core.tests.test_item_selection.a_original->numpy.array([0, 2, 4, 6, 8, 10])
numpy.core.tests.test_item_selection.TestTake
numpy.core.tests.test_item_selection.TestTake.test_empty_argpartition(self)
numpy.core.tests.test_item_selection.TestTake.test_empty_partition(self)
numpy.core.tests.test_item_selection.TestTake.test_refcounting(self)
numpy.core.tests.test_item_selection.TestTake.test_simple(self)
numpy.core.tests.test_item_selection.TestTake.test_unicode_mode(self)
numpy.tests.test_item_selection.TestTake
numpy.tests.test_item_selection.TestTake.test_empty_argpartition(self)
numpy.tests.test_item_selection.TestTake.test_empty_partition(self)
numpy.tests.test_item_selection.TestTake.test_refcounting(self)
numpy.tests.test_item_selection.TestTake.test_simple(self)
numpy.tests.test_item_selection.TestTake.test_unicode_mode(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_api.py----------------------------------------
A:numpy.core.tests.test_api.tobj->type(object)
A:numpy.core.tests.test_api.ones11->numpy.ones((1, 1), np.float64)
A:numpy.core.tests.test_api.tndarray->type(ones11)
A:numpy.core.tests.test_api.old_refcount->sys.getrefcount(np.float64)
A:numpy.core.tests.test_api.S2->numpy.dtype((bytes, 2))
A:numpy.core.tests.test_api.S3->numpy.dtype((bytes, 3))
A:numpy.core.tests.test_api.S5->numpy.dtype((bytes, 5))
A:numpy.core.tests.test_api.U2->numpy.dtype((str, 2))
A:numpy.core.tests.test_api.U3->numpy.dtype((str, 3))
A:numpy.core.tests.test_api.U5->numpy.dtype((str, 5))
A:numpy.core.tests.test_api.builtins->getattr(__builtins__, '__dict__', __builtins__)
A:numpy.core.tests.test_api.dat->numpy.array(memoryview(b'1.0'))
A:numpy.core.tests.test_api.a->numpy.array([(1, 2, 3)], dtype='u4,u4,u4')
A:numpy.core.tests.test_api.o->type('o', (object,), dict(__array__=lambda *x: np.array(100.0, dtype=np.float64)))()
A:numpy.core.tests.test_api.rt->numpy.array(rt)
A:numpy.core.tests.test_api.b->numpy.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)], dtype='u4,u4,u4')
A:numpy.core.tests.test_api.arr->numpy.zeros(1, dtype=dtype)
A:numpy.core.tests.test_api.dt->numpy.dtype(dt)
A:numpy.core.tests.test_api.expected->numpy.array([True, True, False, False], dtype=out_dtype)
A:numpy.core.tests.test_api.value->scalar_type(b'1+3j')
A:numpy.core.tests.test_api.mask->numpy.array(l)
A:numpy.core.tests.test_api.r->numpy.ones(power)
A:numpy.core.tests.test_api.d->numpy.zeros(power)
A:numpy.core.tests.test_api.imask->numpy.array(l).view(np.uint8)
A:numpy.core.tests.test_api.c->numpy.arange(24).reshape(2, 1, 4, 3).swapaxes(2, 3)
A:numpy.core.tests.test_api.res->numpy.copy(c, order='K')
A:numpy.core.tests.test_api.result->numpy.broadcast_arrays(a, b)
A:numpy.core.tests.test_api.output->numpy.full(shape, fill_value)
numpy.core.tests.test_api.test_array_array()
numpy.core.tests.test_api.test_array_astype()
numpy.core.tests.test_api.test_array_astype_to_string_discovery_empty(dt)
numpy.core.tests.test_api.test_array_astype_to_void(dt)
numpy.core.tests.test_api.test_array_astype_warning(t)
numpy.core.tests.test_api.test_array_impossible_casts(array)
numpy.core.tests.test_api.test_broadcast_arrays()
numpy.core.tests.test_api.test_contiguous_flags()
numpy.core.tests.test_api.test_copy_order()
numpy.core.tests.test_api.test_copyto()
numpy.core.tests.test_api.test_copyto_fromscalar()
numpy.core.tests.test_api.test_copyto_permut()
numpy.core.tests.test_api.test_fastCopyAndTranspose()
numpy.core.tests.test_api.test_full_from_list(shape,fill_value,expected_output)
numpy.core.tests.test_api.test_none_to_nan_cast(dtype)
numpy.core.tests.test_api.test_object_array_astype_to_void()
numpy.core.tests.test_api.test_string_to_boolean_cast(dtype,out_dtype)
numpy.core.tests.test_api.test_string_to_boolean_cast_errors(dtype,out_dtype)
numpy.core.tests.test_api.test_string_to_complex_cast(str_type,scalar_type)
numpy.tests.test_api.test_array_array()
numpy.tests.test_api.test_array_astype()
numpy.tests.test_api.test_array_astype_to_string_discovery_empty(dt)
numpy.tests.test_api.test_array_astype_to_void(dt)
numpy.tests.test_api.test_array_astype_warning(t)
numpy.tests.test_api.test_array_impossible_casts(array)
numpy.tests.test_api.test_broadcast_arrays()
numpy.tests.test_api.test_contiguous_flags()
numpy.tests.test_api.test_copy_order()
numpy.tests.test_api.test_copyto()
numpy.tests.test_api.test_copyto_fromscalar()
numpy.tests.test_api.test_copyto_permut()
numpy.tests.test_api.test_fastCopyAndTranspose()
numpy.tests.test_api.test_full_from_list(shape,fill_value,expected_output)
numpy.tests.test_api.test_none_to_nan_cast(dtype)
numpy.tests.test_api.test_object_array_astype_to_void()
numpy.tests.test_api.test_string_to_boolean_cast(dtype,out_dtype)
numpy.tests.test_api.test_string_to_boolean_cast_errors(dtype,out_dtype)
numpy.tests.test_api.test_string_to_complex_cast(str_type,scalar_type)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_longdouble.py----------------------------------------
A:numpy.core.tests.test_longdouble.LD_INFO->numpy.finfo(np.longdouble)
A:numpy.core.tests.test_longdouble.a->numpy.array([1, 2, 3, 4])
A:numpy.core.tests.test_longdouble.repr_precision->len(repr(np.longdouble(0.1)))
A:numpy.core.tests.test_longdouble.o_str->strtype(repr(o))
A:numpy.core.tests.test_longdouble.o_strarr->numpy.asarray([o] * 3, dtype=strtype)
A:numpy.core.tests.test_longdouble.tgt->numpy.array([ldbl] * 5)
A:numpy.core.tests.test_longdouble.out->''.join([repr(t) + '\n' for t in tgt])
A:numpy.core.tests.test_longdouble.res->numpy.fromfile(path, dtype=np.longdouble, sep=' ')
A:numpy.core.tests.test_longdouble.b->numpy.fromstring('1,234', dtype=np.longdouble, sep=' ')
A:numpy.core.tests.test_longdouble.str_val->str(int_val)
numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale(CommaDecimalPointLocale)
numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_best_effort(self)
numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_best_effort_float(self)
numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign(self)
numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign_repr(self)
numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign_sep(self)
numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign_value(self)
numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_repr_roundtrip_foreign(self)
numpy.core.tests.test_longdouble.TestFileBased
numpy.core.tests.test_longdouble.TestFileBased.test_fromfile(self)
numpy.core.tests.test_longdouble.TestFileBased.test_fromfile_bogus(self)
numpy.core.tests.test_longdouble.TestFileBased.test_fromfile_complex(self)
numpy.core.tests.test_longdouble.TestFileBased.test_genfromtxt(self)
numpy.core.tests.test_longdouble.TestFileBased.test_loadtxt(self)
numpy.core.tests.test_longdouble.TestFileBased.test_tofile_roundtrip(self)
numpy.core.tests.test_longdouble.test_array_and_stringlike_roundtrip(strtype)
numpy.core.tests.test_longdouble.test_array_repr()
numpy.core.tests.test_longdouble.test_bogus_string()
numpy.core.tests.test_longdouble.test_format()
numpy.core.tests.test_longdouble.test_fromstring()
numpy.core.tests.test_longdouble.test_fromstring_bogus()
numpy.core.tests.test_longdouble.test_fromstring_complex()
numpy.core.tests.test_longdouble.test_fromstring_empty()
numpy.core.tests.test_longdouble.test_fromstring_missing()
numpy.core.tests.test_longdouble.test_longdouble_from_bool(bool_val)
numpy.core.tests.test_longdouble.test_longdouble_from_int(int_val)
numpy.core.tests.test_longdouble.test_percent()
numpy.core.tests.test_longdouble.test_repr_exact()
numpy.core.tests.test_longdouble.test_repr_roundtrip()
numpy.core.tests.test_longdouble.test_repr_roundtrip_bytes()
numpy.core.tests.test_longdouble.test_scalar_extraction()
numpy.tests.test_longdouble.TestCommaDecimalPointLocale(CommaDecimalPointLocale)
numpy.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_best_effort(self)
numpy.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_best_effort_float(self)
numpy.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign(self)
numpy.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign_repr(self)
numpy.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign_sep(self)
numpy.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign_value(self)
numpy.tests.test_longdouble.TestCommaDecimalPointLocale.test_repr_roundtrip_foreign(self)
numpy.tests.test_longdouble.TestFileBased
numpy.tests.test_longdouble.TestFileBased.test_fromfile(self)
numpy.tests.test_longdouble.TestFileBased.test_fromfile_bogus(self)
numpy.tests.test_longdouble.TestFileBased.test_fromfile_complex(self)
numpy.tests.test_longdouble.TestFileBased.test_genfromtxt(self)
numpy.tests.test_longdouble.TestFileBased.test_loadtxt(self)
numpy.tests.test_longdouble.TestFileBased.test_tofile_roundtrip(self)
numpy.tests.test_longdouble.test_array_and_stringlike_roundtrip(strtype)
numpy.tests.test_longdouble.test_array_repr()
numpy.tests.test_longdouble.test_bogus_string()
numpy.tests.test_longdouble.test_format()
numpy.tests.test_longdouble.test_fromstring()
numpy.tests.test_longdouble.test_fromstring_bogus()
numpy.tests.test_longdouble.test_fromstring_complex()
numpy.tests.test_longdouble.test_fromstring_empty()
numpy.tests.test_longdouble.test_fromstring_missing()
numpy.tests.test_longdouble.test_longdouble_from_bool(bool_val)
numpy.tests.test_longdouble.test_longdouble_from_int(int_val)
numpy.tests.test_longdouble.test_percent()
numpy.tests.test_longdouble.test_repr_exact()
numpy.tests.test_longdouble.test_repr_roundtrip()
numpy.tests.test_longdouble.test_repr_roundtrip_bytes()
numpy.tests.test_longdouble.test_scalar_extraction()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_regression.py----------------------------------------
A:numpy.core.tests.test_regression.a->numpy.empty([n], dtype=np.float32)
A:numpy.core.tests.test_regression.b->copy.deepcopy(a)
A:numpy.core.tests.test_regression.c->numpy.rec.array([(1, 2, 3), (4, 5, 6)])
A:numpy.core.tests.test_regression.origidx->numpy.array([-1, 0, 1])
A:numpy.core.tests.test_regression.idx->numpy.array(origidx)
A:numpy.core.tests.test_regression.ca->numpy.char.array(['Hi', 'There'])
A:numpy.core.tests.test_regression.h->numpy.array(buffer, dtype=descr)
A:numpy.core.tests.test_regression.x->numpy.array([1, 2, 4, 7, 0], dtype=np.int16)
A:numpy.core.tests.test_regression.ua->numpy.array([[[ucs_value * ulen] * 2] * 3] * 4, dtype='U%s' % ulen)
A:numpy.core.tests.test_regression.xa->numpy.where((a > 2) & (a < 6))
A:numpy.core.tests.test_regression.xb->numpy.where((b > 2) & (b < 6))
A:numpy.core.tests.test_regression.net->numpy.zeros(3, dtype='>f4')
A:numpy.core.tests.test_regression.max_net->numpy.zeros(3, dtype='>f4').max()
A:numpy.core.tests.test_regression.test->numpy.where(net <= 0.0, max_net, net)
A:numpy.core.tests.test_regression.correct->numpy.array([0.60520202, 0.00458849, 0.60520202])
A:numpy.core.tests.test_regression.dt->numpy.dtype(dict(names=['a', 'b'], offsets=[0, 0], formats=[np.int64, np.int64]))
A:numpy.core.tests.test_regression.buf->numpy.zeros(40, dtype=np.int8)
A:numpy.core.tests.test_regression.y->str(x)
A:numpy.core.tests.test_regression._z->numpy.ones(10)
A:numpy.core.tests.test_regression._dummy->numpy.empty((0, 10))
A:numpy.core.tests.test_regression.z->numpy.array([2.2 - 1.1j], dtype)
A:numpy.core.tests.test_regression.ref->numpy.arange(0, -finfo.eps, 2 * finfo.eps)
A:numpy.core.tests.test_regression.finfo->numpy.finfo(np.float64)
A:numpy.core.tests.test_regression.descr->numpy.dtype([('i', int), ('f', float), ('s', '|S3')])
A:numpy.core.tests.test_regression.x.flat->numpy.arange(3, dtype=float)
A:numpy.core.tests.test_regression.x[:]->numpy.arange(3, dtype=float)
A:numpy.core.tests.test_regression.r->numpy.frombuffer(b'abcdefghijklmnop' * 4 * 3, dtype='i4,(2,3)u2')
A:numpy.core.tests.test_regression.a[b]->numpy.array(np.nan)
A:numpy.core.tests.test_regression.a[r]->numpy.array(np.nan)
A:numpy.core.tests.test_regression.dt_->numpy.compat.pickle.load(f)
A:numpy.core.tests.test_regression.tmp->numpy.atleast_1d([MyFloat()])
A:numpy.core.tests.test_regression.v->numpy.array(([0] * 5 + [1] * 6 + [2] * 6) * 4)
A:numpy.core.tests.test_regression.xs->numpy.empty(4, dt)
A:numpy.core.tests.test_regression.result->numpy.compat.pickle.loads(data, encoding='koi8-r')
A:numpy.core.tests.test_regression.arr->numpy.zeros((2 ** 31 + 1,), 'b')
A:numpy.core.tests.test_regression.arr2->numpy.array([[[u'H', u'e', u'l', u'l', u'o'], [u'F', u'o', u'o', u'b', u'']]])
A:numpy.core.tests.test_regression.res1->getattr(arr1, func)(arr2)
A:numpy.core.tests.test_regression.res2->getattr(np, func)(arr1, arr2)
A:numpy.core.tests.test_regression.arr1->numpy.zeros((5, 1), dtype=np.object_)
A:numpy.core.tests.test_regression.ra->numpy.fromiter(((i * 3, i * 2) for i in range(10)), dtype='i8,f8')
A:numpy.core.tests.test_regression.rb->numpy.rec.array(ra, dtype=dt)
A:numpy.core.tests.test_regression.x1->numpy.array([[1, 2], [3, 4], [5, 6]])
A:numpy.core.tests.test_regression.x2->numpy.array(['a', 'dd', 'xyz'])
A:numpy.core.tests.test_regression.x3->numpy.array([1.1, 2, 3])
A:numpy.core.tests.test_regression.data->numpy.zeros(10, t)
A:numpy.core.tests.test_regression.dt1->numpy.dtype([('f0', 'i8'), ('f1', 'i8')])
A:numpy.core.tests.test_regression.dt2->numpy.dtype(('uint32', (2,)))
A:numpy.core.tests.test_regression.a2->numpy.array([s[:i]] * 5)
A:numpy.core.tests.test_regression.dt0->numpy.dtype([('f0', 'i4'), ('f1', 'i4')])
A:numpy.core.tests.test_regression.tosubtract->numpy.arange(5)
A:numpy.core.tests.test_regression.todivide->numpy.array([2.0, 0.5, 0.25])
A:numpy.core.tests.test_regression.ref_d->sys.getrefcount(d)
A:numpy.core.tests.test_regression.s->numpy.compat.pickle.dumps(val, protocol)
A:numpy.core.tests.test_regression.uradians->numpy.frompyfunc(radians, 1, 1)
A:numpy.core.tests.test_regression.big_endian->numpy.array([83.4, 83.5], dtype='>f8')
A:numpy.core.tests.test_regression.little_endian->numpy.array([83.4, 83.5], dtype='<f8')
A:numpy.core.tests.test_regression.new->numpy.compat.pickle.loads(pickle.dumps(el, protocol=proto))
A:numpy.core.tests.test_regression.index->numpy.array(0, dtype=np.int32)
A:numpy.core.tests.test_regression.cnt0_a->cnt(a)
A:numpy.core.tests.test_regression.cnt0_b->cnt(b)
A:numpy.core.tests.test_regression.cnt0_c->cnt(c)
A:numpy.core.tests.test_regression.arr0->numpy.zeros(2, dtype=np.object_)
A:numpy.core.tests.test_regression.d->numpy.datetime64('2015-07-04 12:59:59.50', 'ns')
A:numpy.core.tests.test_regression.oldsize->numpy.setbufsize(10 * 16)
A:numpy.core.tests.test_regression.dtype->numpy.format_parser(['i4', 'i4'], [], [])
A:numpy.core.tests.test_regression.data_dir->os.path.join(path.dirname(__file__), 'data')
A:numpy.core.tests.test_regression.filename->os.path.join(data_dir, 'astype_copy.pkl')
A:numpy.core.tests.test_regression.xp->numpy.compat.pickle.load(f, encoding='latin1')
A:numpy.core.tests.test_regression.xpd->numpy.compat.pickle.load(f, encoding='latin1').astype(np.float64)
A:numpy.core.tests.test_regression.self.info->getattr(obj, 'info', '')
A:numpy.core.tests.test_regression.dat->TestArray([[1, 2, 3, 4], [5, 6, 7, 8]], 'jubba')
A:numpy.core.tests.test_regression.dat2->TestArray([2, 3, 1, 0], 'jubba')
A:numpy.core.tests.test_regression.t->T()
A:numpy.core.tests.test_regression.C->numpy.array([-np.inf, -2 + 1j, 0, 2 - 1j, np.inf, np.nan])
A:numpy.core.tests.test_regression.have->numpy.sign(C)
A:numpy.core.tests.test_regression.want->numpy.array([-1 + 0j, -1 + 0j, 0 + 0j, 1 + 0j, 1 + 0j, np.nan])
A:numpy.core.tests.test_regression.b2->numpy.object_(3.0)
A:numpy.core.tests.test_regression.test_string->numpy.string_('')
A:numpy.core.tests.test_regression.test_string_void_scalar->numpy.core.multiarray.scalar(np.dtype(('V', test_string.dtype.itemsize)), test_string.tobytes())
A:numpy.core.tests.test_regression.test_record->numpy.ones((), 'i,i')
A:numpy.core.tests.test_regression.test_record_void_scalar->numpy.core.multiarray.scalar(test_record.dtype, test_record.tobytes())
A:numpy.core.tests.test_regression.i->numpy.lexsort((a[::-1], b))
A:numpy.core.tests.test_regression.e->numpy.empty((2,), dtype=(np.str_, 8))
A:numpy.core.tests.test_regression.a1->numpy.array(a, '|S%d' % i)
A:numpy.core.tests.test_regression.s1->numpy.array(('a', 'Foo'), dtype='c,O')
A:numpy.core.tests.test_regression.s2->numpy.array(('b', 'Bar'), dtype='c,O')
A:numpy.core.tests.test_regression.numb->sys.getrefcount(strb)
A:numpy.core.tests.test_regression.numa->sys.getrefcount(stra)
A:numpy.core.tests.test_regression.min->numpy.array([np.iinfo(t).min])
A:numpy.core.tests.test_regression.out->numpy.zeros((3,))
A:numpy.core.tests.test_regression.ret->numpy.fromfile(f, count=4, dtype='u1')
A:numpy.core.tests.test_regression.cnan->complex(0, np.nan)
A:numpy.core.tests.test_regression.lut->numpy.ones((5 + 3, 4), float)
A:numpy.core.tests.test_regression.rgba->numpy.empty(shape=a.shape + (4,), dtype=lut.dtype)
A:numpy.core.tests.test_regression.c1->sys.getrefcount(rgba)
A:numpy.core.tests.test_regression.c2->sys.getrefcount(rgba)
A:numpy.core.tests.test_regression.f0->tempfile.NamedTemporaryFile()
A:numpy.core.tests.test_regression.obj->numpy.asarray(input_array).view(cls)
A:numpy.core.tests.test_regression.oldsqueeze->OldSqueeze(np.array([[1], [2], [3]]))
A:numpy.core.tests.test_regression.a[()]->numpy.array(4)
A:numpy.core.tests.test_regression.blob->numpy.compat.pickle.dumps(data, protocol=1)
A:numpy.core.tests.test_regression.bytestring->'\x01  '.encode('ascii')
A:numpy.core.tests.test_regression.a_rec->numpy.array([(0, 1), (3, 2)], dtype='i4,i8')
A:numpy.core.tests.test_regression.a_obj->numpy.empty((2,), dtype=object)
A:numpy.core.tests.test_regression.acnt->sys.getrefcount(a)
A:numpy.core.tests.test_regression.res->numpy.ediff1d(x, to_begin=1 << 20, to_end=1 << 20)
A:numpy.core.tests.test_regression.data_str->numpy.array([[[u'H', u'e', u'l', u'l', u'o'], [u'F', u'o', u'o', u'b', u'']]]).tobytes('F')
A:numpy.core.tests.test_regression.data_back->numpy.ndarray(arr2.shape, arr2.dtype, buffer=data_str, order='F')
A:numpy.core.tests.test_regression.count->numpy.count_nonzero(arr)
A:numpy.core.tests.test_regression.formatted->'{0}'.format(arr[0])
A:numpy.core.tests.test_regression.arr_cp->copy.deepcopy(arr)
A:numpy.core.tests.test_regression.rhs->Foo()
A:numpy.core.tests.test_regression.lhs->numpy.array(1)
A:numpy.core.tests.test_regression.uf->numpy.frompyfunc(f, 1, 0)
A:numpy.core.tests.test_regression.expected->numpy.array([[3, 2, 1], [5, 4], [9, 7, 8, 6]], dtype=object)
A:numpy.core.tests.test_regression.recordtype->numpy.dtype([('a', np.float64), ('b', np.int32), ('d', (str, 5))])
A:numpy.core.tests.test_regression.before->sys.getrefcount(a)
A:numpy.core.tests.test_regression.after->sys.getrefcount(a)
A:numpy.core.tests.test_regression.val->t()
A:numpy.core.tests.test_regression.scalar_types->set(np.sctypeDict.values())
A:numpy.core.tests.test_regression.item->sctype(values.get(sctype, 1))
A:numpy.core.tests.test_regression.item2->copy.copy(item)
A:numpy.core.tests.test_regression.va->numpy.zeros(10, 'V4')
A:numpy.core.tests.test_regression.structure->numpy.array([1], dtype=[(('x', 'X'), np.object_)])
A:numpy.core.tests.test_regression.structure[0]['x']->numpy.array([2])
A:numpy.core.tests.test_regression.scvalue->sctype(values.get(ch, 3))
A:numpy.core.tests.test_regression.squeezed->sctype(values.get(ch, 3)).squeeze(axis=axis)
A:numpy.core.tests.test_regression.base->sys.getrefcount(s)
A:numpy.core.tests.test_regression.dumped->numpy.compat.pickle.dumps(arr, protocol=proto)
A:numpy.core.tests.test_regression.c_arr->numpy.ctypeslib.as_ctypes(arr)
A:numpy.core.tests.test_regression.f->numpy.frompyfunc(cassé, 1, 1)
numpy.core.tests.test_regression.TestRegression
numpy.core.tests.test_regression.TestRegression.test_0d_string_scalar(self)
numpy.core.tests.test_regression.TestRegression.test_2d__array__shape(self)
numpy.core.tests.test_regression.TestRegression.test__array_interface__descr(self)
numpy.core.tests.test_regression.TestRegression.test_add_identity(self)
numpy.core.tests.test_regression.TestRegression.test_alignment_update(self)
numpy.core.tests.test_regression.TestRegression.test_any_float(self)
numpy.core.tests.test_regression.TestRegression.test_arange_endian(self)
numpy.core.tests.test_regression.TestRegression.test_arange_inf_step(self)
numpy.core.tests.test_regression.TestRegression.test_arange_non_native_dtype(self)
numpy.core.tests.test_regression.TestRegression.test_arange_underflow_stop_and_step(self)
numpy.core.tests.test_regression.TestRegression.test_argmax(self)
numpy.core.tests.test_regression.TestRegression.test_argmax_byteorder(self)
numpy.core.tests.test_regression.TestRegression.test_arr_transpose(self)
numpy.core.tests.test_regression.TestRegression.test_array_from_sequence_scalar_array(self)
numpy.core.tests.test_regression.TestRegression.test_array_from_sequence_scalar_array2(self)
numpy.core.tests.test_regression.TestRegression.test_array_index(self)
numpy.core.tests.test_regression.TestRegression.test_array_ndmin_overflow(self)
numpy.core.tests.test_regression.TestRegression.test_array_resize_method_system_error(self)
numpy.core.tests.test_regression.TestRegression.test_array_scalar_contiguous(self)
numpy.core.tests.test_regression.TestRegression.test_array_side_effect(self)
numpy.core.tests.test_regression.TestRegression.test_array_str_64bit(self)
numpy.core.tests.test_regression.TestRegression.test_array_too_big(self)
numpy.core.tests.test_regression.TestRegression.test_asarray_with_order(self)
numpy.core.tests.test_regression.TestRegression.test_assign_from_sequence_error(self)
numpy.core.tests.test_regression.TestRegression.test_assign_obj_listoflists(self)
numpy.core.tests.test_regression.TestRegression.test_astype_copy(self)
numpy.core.tests.test_regression.TestRegression.test_attributes(self)
numpy.core.tests.test_regression.TestRegression.test_bad_array_interface(self)
numpy.core.tests.test_regression.TestRegression.test_binary_repr_0(self)
numpy.core.tests.test_regression.TestRegression.test_binary_repr_0_width(self)
numpy.core.tests.test_regression.TestRegression.test_blasdot_uninitialized_memory(self)
numpy.core.tests.test_regression.TestRegression.test_bool(self)
numpy.core.tests.test_regression.TestRegression.test_bool_flat_indexing_invalid_nr_elements(self)
numpy.core.tests.test_regression.TestRegression.test_bool_subscript_crash(self)
numpy.core.tests.test_regression.TestRegression.test_broadcast_flat_assignment(self)
numpy.core.tests.test_regression.TestRegression.test_buffer_hashlib(self)
numpy.core.tests.test_regression.TestRegression.test_byteswap_complex_scalar(self)
numpy.core.tests.test_regression.TestRegression.test_char_array_creation(self)
numpy.core.tests.test_regression.TestRegression.test_char_dump(self)
numpy.core.tests.test_regression.TestRegression.test_character_array_strip(self)
numpy.core.tests.test_regression.TestRegression.test_chararray_rstrip(self)
numpy.core.tests.test_regression.TestRegression.test_complex64_alignment(self)
numpy.core.tests.test_regression.TestRegression.test_complex_boolean_cast(self)
numpy.core.tests.test_regression.TestRegression.test_complex_conversion_error(self)
numpy.core.tests.test_regression.TestRegression.test_complex_nan_maximum(self)
numpy.core.tests.test_regression.TestRegression.test_complex_scalar_complex_cast(self)
numpy.core.tests.test_regression.TestRegression.test_complex_scalar_warning(self)
numpy.core.tests.test_regression.TestRegression.test_compress_small_type(self)
numpy.core.tests.test_regression.TestRegression.test_convolve_empty(self)
numpy.core.tests.test_regression.TestRegression.test_copy_detection_corner_case(self)
numpy.core.tests.test_regression.TestRegression.test_copy_detection_corner_case2(self)
numpy.core.tests.test_regression.TestRegression.test_copy_detection_zero_dim(self)
numpy.core.tests.test_regression.TestRegression.test_copymodule_preserves_f_contiguity(self)
numpy.core.tests.test_regression.TestRegression.test_correct_hash_dict(self)
numpy.core.tests.test_regression.TestRegression.test_deepcopy_F_order_object_array(self)
numpy.core.tests.test_regression.TestRegression.test_deepcopy_empty_object_array(self)
numpy.core.tests.test_regression.TestRegression.test_deepcopy_on_0d_array(self)
numpy.core.tests.test_regression.TestRegression.test_dot_alignment_sse2(self)
numpy.core.tests.test_regression.TestRegression.test_dot_big_stride(self)
numpy.core.tests.test_regression.TestRegression.test_dot_negative_stride(self)
numpy.core.tests.test_regression.TestRegression.test_dtype_keyerrors_(self)
numpy.core.tests.test_regression.TestRegression.test_dtype_names(self)
numpy.core.tests.test_regression.TestRegression.test_dtype_posttuple(self)
numpy.core.tests.test_regression.TestRegression.test_dtype_repr(self)
numpy.core.tests.test_regression.TestRegression.test_dtype_scalar_squeeze(self)
numpy.core.tests.test_regression.TestRegression.test_dtype_tuple(self)
numpy.core.tests.test_regression.TestRegression.test_duplicate_field_names_assign(self)
numpy.core.tests.test_regression.TestRegression.test_duplicate_title_and_name(self)
numpy.core.tests.test_regression.TestRegression.test_eff1d_casting(self)
numpy.core.tests.test_regression.TestRegression.test_empty_array_type(self)
numpy.core.tests.test_regression.TestRegression.test_empty_mul(self)
numpy.core.tests.test_regression.TestRegression.test_empty_percentile(self)
numpy.core.tests.test_regression.TestRegression.test_endian_bool_indexing(self)
numpy.core.tests.test_regression.TestRegression.test_endian_recarray(self)
numpy.core.tests.test_regression.TestRegression.test_endian_where(self)
numpy.core.tests.test_regression.TestRegression.test_eq_string_and_object_array(self)
numpy.core.tests.test_regression.TestRegression.test_fancy_index(self)
numpy.core.tests.test_regression.TestRegression.test_field_access_by_title(self)
numpy.core.tests.test_regression.TestRegression.test_fields_strides(self)
numpy.core.tests.test_regression.TestRegression.test_find_common_type_boolean(self)
numpy.core.tests.test_regression.TestRegression.test_flat_assignment(self)
numpy.core.tests.test_regression.TestRegression.test_flat_byteorder(self)
numpy.core.tests.test_regression.TestRegression.test_flat_index_byteswap(self)
numpy.core.tests.test_regression.TestRegression.test_for_equal_names(self)
numpy.core.tests.test_regression.TestRegression.test_for_object_scalar_creation(self)
numpy.core.tests.test_regression.TestRegression.test_for_zero_length_in_choose(self)
numpy.core.tests.test_regression.TestRegression.test_format_on_flex_array_element(self)
numpy.core.tests.test_regression.TestRegression.test_fortran_order_buffer(self)
numpy.core.tests.test_regression.TestRegression.test_fromfile_tofile_seeks(self)
numpy.core.tests.test_regression.TestRegression.test_fromiter_bytes(self)
numpy.core.tests.test_regression.TestRegression.test_fromiter_comparison(self)
numpy.core.tests.test_regression.TestRegression.test_frompyfunc_endian(self)
numpy.core.tests.test_regression.TestRegression.test_frompyfunc_many_args(self)
numpy.core.tests.test_regression.TestRegression.test_frompyfunc_name(self)
numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0(self)
numpy.core.tests.test_regression.TestRegression.test_fromstring(self)
numpy.core.tests.test_regression.TestRegression.test_fromstring_crash(self)
numpy.core.tests.test_regression.TestRegression.test_hstack_invalid_dims(self)
numpy.core.tests.test_regression.TestRegression.test_huge_arange(self)
numpy.core.tests.test_regression.TestRegression.test_indexing1(self)
numpy.core.tests.test_regression.TestRegression.test_indexing2(self)
numpy.core.tests.test_regression.TestRegression.test_invalid_round(self)
numpy.core.tests.test_regression.TestRegression.test_invalid_structured_dtypes(self)
numpy.core.tests.test_regression.TestRegression.test_junk_in_string_fields_of_recarray(self)
numpy.core.tests.test_regression.TestRegression.test_large_float_sum(self)
numpy.core.tests.test_regression.TestRegression.test_leak_in_structured_dtype_comparison(self)
numpy.core.tests.test_regression.TestRegression.test_lexsort(self)
numpy.core.tests.test_regression.TestRegression.test_lexsort_buffer_length(self)
numpy.core.tests.test_regression.TestRegression.test_lexsort_invalid_axis(self)
numpy.core.tests.test_regression.TestRegression.test_lexsort_invalid_sequence(self)
numpy.core.tests.test_regression.TestRegression.test_lexsort_zerolen_custom_strides(self)
numpy.core.tests.test_regression.TestRegression.test_lexsort_zerolen_custom_strides_2d(self)
numpy.core.tests.test_regression.TestRegression.test_lexsort_zerolen_element(self)
numpy.core.tests.test_regression.TestRegression.test_log1p_compiler_shenanigans(self)
numpy.core.tests.test_regression.TestRegression.test_mem_0d_array_index(self)
numpy.core.tests.test_regression.TestRegression.test_mem_around(self)
numpy.core.tests.test_regression.TestRegression.test_mem_array_creation_invalid_specification(self)
numpy.core.tests.test_regression.TestRegression.test_mem_axis_minimization(self)
numpy.core.tests.test_regression.TestRegression.test_mem_custom_float_to_array(self)
numpy.core.tests.test_regression.TestRegression.test_mem_deallocation_leak(self)
numpy.core.tests.test_regression.TestRegression.test_mem_divmod(self)
numpy.core.tests.test_regression.TestRegression.test_mem_dot(self)
numpy.core.tests.test_regression.TestRegression.test_mem_dtype_align(self)
numpy.core.tests.test_regression.TestRegression.test_mem_empty(self)
numpy.core.tests.test_regression.TestRegression.test_mem_float_imag(self)
numpy.core.tests.test_regression.TestRegression.test_mem_fromiter_invalid_dtype_string(self)
numpy.core.tests.test_regression.TestRegression.test_mem_lexsort_strings(self)
numpy.core.tests.test_regression.TestRegression.test_mem_on_invalid_dtype(self)
numpy.core.tests.test_regression.TestRegression.test_mem_scalar_indexing(self)
numpy.core.tests.test_regression.TestRegression.test_mem_string_arr(self)
numpy.core.tests.test_regression.TestRegression.test_memoryleak(self)
numpy.core.tests.test_regression.TestRegression.test_method_args(self)
numpy.core.tests.test_regression.TestRegression.test_misaligned_dot_product_objects(self)
numpy.core.tests.test_regression.TestRegression.test_misaligned_objects_segfault(self)
numpy.core.tests.test_regression.TestRegression.test_misaligned_scalars_segfault(self)
numpy.core.tests.test_regression.TestRegression.test_mixed_string_unicode_array_creation(self)
numpy.core.tests.test_regression.TestRegression.test_multidim_byteswap(self)
numpy.core.tests.test_regression.TestRegression.test_multiple_assign(self)
numpy.core.tests.test_regression.TestRegression.test_ndmin_float64(self)
numpy.core.tests.test_regression.TestRegression.test_ndmin_order(self)
numpy.core.tests.test_regression.TestRegression.test_negative_nd_indexing(self)
numpy.core.tests.test_regression.TestRegression.test_nonarray_assignment(self)
numpy.core.tests.test_regression.TestRegression.test_noncommutative_reduce_accumulate(self)
numpy.core.tests.test_regression.TestRegression.test_noncontiguous_fill(self)
numpy.core.tests.test_regression.TestRegression.test_nonnative_endian_fill(self)
numpy.core.tests.test_regression.TestRegression.test_nonscalar_item_method(self)
numpy.core.tests.test_regression.TestRegression.test_nonzero_byteswap(self)
numpy.core.tests.test_regression.TestRegression.test_numeric_carray_compare(self)
numpy.core.tests.test_regression.TestRegression.test_numpy_float_python_long_addition(self)
numpy.core.tests.test_regression.TestRegression.test_object_argmax(self)
numpy.core.tests.test_regression.TestRegression.test_object_array_assign(self)
numpy.core.tests.test_regression.TestRegression.test_object_array_circular_reference(self)
numpy.core.tests.test_regression.TestRegression.test_object_array_fill(self)
numpy.core.tests.test_regression.TestRegression.test_object_array_from_list(self)
numpy.core.tests.test_regression.TestRegression.test_object_array_nested(self)
numpy.core.tests.test_regression.TestRegression.test_object_array_refcount_self_assign(self)
numpy.core.tests.test_regression.TestRegression.test_object_array_refcounting(self)
numpy.core.tests.test_regression.TestRegression.test_object_array_self_copy(self)
numpy.core.tests.test_regression.TestRegression.test_object_array_self_reference(self)
numpy.core.tests.test_regression.TestRegression.test_object_array_shape(self)
numpy.core.tests.test_regression.TestRegression.test_object_array_to_fixed_string(self)
numpy.core.tests.test_regression.TestRegression.test_object_casting(self)
numpy.core.tests.test_regression.TestRegression.test_object_casting_errors(self)
numpy.core.tests.test_regression.TestRegression.test_objectarray_setfield(self)
numpy.core.tests.test_regression.TestRegression.test_pickle_bytes_overwrite(self)
numpy.core.tests.test_regression.TestRegression.test_pickle_datetime64_array(self)
numpy.core.tests.test_regression.TestRegression.test_pickle_dtype(self)
numpy.core.tests.test_regression.TestRegression.test_pickle_empty_string(self)
numpy.core.tests.test_regression.TestRegression.test_pickle_module(self,protocol,val)
numpy.core.tests.test_regression.TestRegression.test_pickle_py2_array_latin1_hack(self)
numpy.core.tests.test_regression.TestRegression.test_pickle_py2_bytes_encoding(self)
numpy.core.tests.test_regression.TestRegression.test_pickle_py2_scalar_latin1_hack(self)
numpy.core.tests.test_regression.TestRegression.test_pickle_string_overwrite(self)
numpy.core.tests.test_regression.TestRegression.test_pickle_transposed(self)
numpy.core.tests.test_regression.TestRegression.test_rand_seed(self)
numpy.core.tests.test_regression.TestRegression.test_random_shuffle(self)
numpy.core.tests.test_regression.TestRegression.test_ravel_with_order(self)
numpy.core.tests.test_regression.TestRegression.test_rec_fromarray(self)
numpy.core.tests.test_regression.TestRegression.test_rec_iterate(self)
numpy.core.tests.test_regression.TestRegression.test_recarray_copy(self)
numpy.core.tests.test_regression.TestRegression.test_recarray_fields(self)
numpy.core.tests.test_regression.TestRegression.test_recarray_single_element(self)
numpy.core.tests.test_regression.TestRegression.test_recarray_tolist(self)
numpy.core.tests.test_regression.TestRegression.test_reduce(self)
numpy.core.tests.test_regression.TestRegression.test_reduce_big_object_array(self)
numpy.core.tests.test_regression.TestRegression.test_reduce_contiguous(self)
numpy.core.tests.test_regression.TestRegression.test_refcount_error_in_clip(self)
numpy.core.tests.test_regression.TestRegression.test_refcount_vdot(self)
numpy.core.tests.test_regression.TestRegression.test_repeat_broadcasting(self)
numpy.core.tests.test_regression.TestRegression.test_repeat_discont(self)
numpy.core.tests.test_regression.TestRegression.test_reshape_order(self)
numpy.core.tests.test_regression.TestRegression.test_reshape_size_overflow(self)
numpy.core.tests.test_regression.TestRegression.test_reshape_trailing_ones_strides(self)
numpy.core.tests.test_regression.TestRegression.test_reshape_zero_size(self)
numpy.core.tests.test_regression.TestRegression.test_reshape_zero_strides(self)
numpy.core.tests.test_regression.TestRegression.test_richcompare_crash(self)
numpy.core.tests.test_regression.TestRegression.test_richcompare_scalar_and_subclass(self)
numpy.core.tests.test_regression.TestRegression.test_round(self)
numpy.core.tests.test_regression.TestRegression.test_scalar_compare(self)
numpy.core.tests.test_regression.TestRegression.test_scalar_copy(self)
numpy.core.tests.test_regression.TestRegression.test_search_sorted_invalid_arguments(self)
numpy.core.tests.test_regression.TestRegression.test_searchsorted_variable_length(self)
numpy.core.tests.test_regression.TestRegression.test_searchsorted_wrong_dtype(self)
numpy.core.tests.test_regression.TestRegression.test_setting_rank0_string(self)
numpy.core.tests.test_regression.TestRegression.test_sign_bit(self)
numpy.core.tests.test_regression.TestRegression.test_sign_for_complex_nan(self)
numpy.core.tests.test_regression.TestRegression.test_signed_integer_division_overflow(self)
numpy.core.tests.test_regression.TestRegression.test_sort_bigendian(self)
numpy.core.tests.test_regression.TestRegression.test_squeeze_axis_handling(self)
numpy.core.tests.test_regression.TestRegression.test_squeeze_contiguous(self)
numpy.core.tests.test_regression.TestRegression.test_squeeze_type(self)
numpy.core.tests.test_regression.TestRegression.test_startswith(self)
numpy.core.tests.test_regression.TestRegression.test_string_NULL(self)
numpy.core.tests.test_regression.TestRegression.test_string_argsort_with_zeros(self)
numpy.core.tests.test_regression.TestRegression.test_string_array_size(self)
numpy.core.tests.test_regression.TestRegression.test_string_astype(self)
numpy.core.tests.test_regression.TestRegression.test_string_mergesort(self)
numpy.core.tests.test_regression.TestRegression.test_string_sort_with_zeros(self)
numpy.core.tests.test_regression.TestRegression.test_string_truncation(self)
numpy.core.tests.test_regression.TestRegression.test_string_truncation_ucs2(self)
numpy.core.tests.test_regression.TestRegression.test_structarray_title(self)
numpy.core.tests.test_regression.TestRegression.test_structured_arrays_with_objects1(self)
numpy.core.tests.test_regression.TestRegression.test_structured_arrays_with_objects2(self)
numpy.core.tests.test_regression.TestRegression.test_structured_count_nonzero(self)
numpy.core.tests.test_regression.TestRegression.test_structured_type_to_object(self)
numpy.core.tests.test_regression.TestRegression.test_subclass_int_tuple_assignment(self)
numpy.core.tests.test_regression.TestRegression.test_swap_real(self)
numpy.core.tests.test_regression.TestRegression.test_take_object_fail(self)
numpy.core.tests.test_regression.TestRegression.test_take_output(self)
numpy.core.tests.test_regression.TestRegression.test_take_refcount(self)
numpy.core.tests.test_regression.TestRegression.test_ticket_1434(self)
numpy.core.tests.test_regression.TestRegression.test_ticket_1538(self)
numpy.core.tests.test_regression.TestRegression.test_ticket_1539(self)
numpy.core.tests.test_regression.TestRegression.test_ticket_1608(self)
numpy.core.tests.test_regression.TestRegression.test_ticket_1756(self)
numpy.core.tests.test_regression.TestRegression.test_ticket_1770(self)
numpy.core.tests.test_regression.TestRegression.test_to_ctypes(self)
numpy.core.tests.test_regression.TestRegression.test_tobytes_FORTRANORDER_discontiguous(self)
numpy.core.tests.test_regression.TestRegression.test_ufunc_casting_out(self)
numpy.core.tests.test_regression.TestRegression.test_ufunc_no_unnecessary_views(self)
numpy.core.tests.test_regression.TestRegression.test_ufunc_order(self,operation,order)
numpy.core.tests.test_regression.TestRegression.test_ufunc_reduce_memoryleak(self)
numpy.core.tests.test_regression.TestRegression.test_uint_int_conversion(self)
numpy.core.tests.test_regression.TestRegression.test_unaligned_unicode_access(self)
numpy.core.tests.test_regression.TestRegression.test_unicode_alloc_dealloc_match(self)
numpy.core.tests.test_regression.TestRegression.test_unicode_scalar(self)
numpy.core.tests.test_regression.TestRegression.test_unicode_string_comparison(self)
numpy.core.tests.test_regression.TestRegression.test_unicode_swapping(self)
numpy.core.tests.test_regression.TestRegression.test_unicode_to_string_cast(self)
numpy.core.tests.test_regression.TestRegression.test_unicode_to_string_cast_error(self)
numpy.core.tests.test_regression.TestRegression.test_unique_stable(self)
numpy.core.tests.test_regression.TestRegression.test_unpickle_dtype_with_object(self)
numpy.core.tests.test_regression.TestRegression.test_void_compare_segfault(self)
numpy.core.tests.test_regression.TestRegression.test_void_copyswap(self)
numpy.core.tests.test_regression.TestRegression.test_void_getitem(self)
numpy.core.tests.test_regression.TestRegression.test_void_item_memview(self)
numpy.core.tests.test_regression.TestRegression.test_void_scalar_constructor(self)
numpy.core.tests.test_regression.TestRegression.test_void_scalar_with_titles(self)
numpy.core.tests.test_regression.TestRegression.test_zero_sized_array_indexing(self)
numpy.core.tests.test_regression.TestRegression.test_zeros(self)
numpy.core.tests.test_regression.TestRegression.test_zeros_order(self)
numpy.core.tests.test_regression.TestRegression.test_zerosize_accumulate(self)
numpy.tests.test_regression.TestRegression
numpy.tests.test_regression.TestRegression.test_0d_string_scalar(self)
numpy.tests.test_regression.TestRegression.test_2d__array__shape(self)
numpy.tests.test_regression.TestRegression.test__array_interface__descr(self)
numpy.tests.test_regression.TestRegression.test_add_identity(self)
numpy.tests.test_regression.TestRegression.test_alignment_update(self)
numpy.tests.test_regression.TestRegression.test_any_float(self)
numpy.tests.test_regression.TestRegression.test_arange_endian(self)
numpy.tests.test_regression.TestRegression.test_arange_inf_step(self)
numpy.tests.test_regression.TestRegression.test_arange_non_native_dtype(self)
numpy.tests.test_regression.TestRegression.test_arange_underflow_stop_and_step(self)
numpy.tests.test_regression.TestRegression.test_argmax(self)
numpy.tests.test_regression.TestRegression.test_argmax_byteorder(self)
numpy.tests.test_regression.TestRegression.test_arr_transpose(self)
numpy.tests.test_regression.TestRegression.test_array_from_sequence_scalar_array(self)
numpy.tests.test_regression.TestRegression.test_array_from_sequence_scalar_array2(self)
numpy.tests.test_regression.TestRegression.test_array_index(self)
numpy.tests.test_regression.TestRegression.test_array_ndmin_overflow(self)
numpy.tests.test_regression.TestRegression.test_array_resize_method_system_error(self)
numpy.tests.test_regression.TestRegression.test_array_scalar_contiguous(self)
numpy.tests.test_regression.TestRegression.test_array_side_effect(self)
numpy.tests.test_regression.TestRegression.test_array_str_64bit(self)
numpy.tests.test_regression.TestRegression.test_array_too_big(self)
numpy.tests.test_regression.TestRegression.test_asarray_with_order(self)
numpy.tests.test_regression.TestRegression.test_assign_from_sequence_error(self)
numpy.tests.test_regression.TestRegression.test_assign_obj_listoflists(self)
numpy.tests.test_regression.TestRegression.test_astype_copy(self)
numpy.tests.test_regression.TestRegression.test_attributes(self)
numpy.tests.test_regression.TestRegression.test_bad_array_interface(self)
numpy.tests.test_regression.TestRegression.test_binary_repr_0(self)
numpy.tests.test_regression.TestRegression.test_binary_repr_0_width(self)
numpy.tests.test_regression.TestRegression.test_blasdot_uninitialized_memory(self)
numpy.tests.test_regression.TestRegression.test_bool(self)
numpy.tests.test_regression.TestRegression.test_bool_flat_indexing_invalid_nr_elements(self)
numpy.tests.test_regression.TestRegression.test_bool_subscript_crash(self)
numpy.tests.test_regression.TestRegression.test_broadcast_flat_assignment(self)
numpy.tests.test_regression.TestRegression.test_buffer_hashlib(self)
numpy.tests.test_regression.TestRegression.test_byteswap_complex_scalar(self)
numpy.tests.test_regression.TestRegression.test_char_array_creation(self)
numpy.tests.test_regression.TestRegression.test_char_dump(self)
numpy.tests.test_regression.TestRegression.test_character_array_strip(self)
numpy.tests.test_regression.TestRegression.test_chararray_rstrip(self)
numpy.tests.test_regression.TestRegression.test_complex64_alignment(self)
numpy.tests.test_regression.TestRegression.test_complex_boolean_cast(self)
numpy.tests.test_regression.TestRegression.test_complex_conversion_error(self)
numpy.tests.test_regression.TestRegression.test_complex_nan_maximum(self)
numpy.tests.test_regression.TestRegression.test_complex_scalar_complex_cast(self)
numpy.tests.test_regression.TestRegression.test_complex_scalar_warning(self)
numpy.tests.test_regression.TestRegression.test_compress_small_type(self)
numpy.tests.test_regression.TestRegression.test_convolve_empty(self)
numpy.tests.test_regression.TestRegression.test_copy_detection_corner_case(self)
numpy.tests.test_regression.TestRegression.test_copy_detection_corner_case2(self)
numpy.tests.test_regression.TestRegression.test_copy_detection_zero_dim(self)
numpy.tests.test_regression.TestRegression.test_copymodule_preserves_f_contiguity(self)
numpy.tests.test_regression.TestRegression.test_correct_hash_dict(self)
numpy.tests.test_regression.TestRegression.test_deepcopy_F_order_object_array(self)
numpy.tests.test_regression.TestRegression.test_deepcopy_empty_object_array(self)
numpy.tests.test_regression.TestRegression.test_deepcopy_on_0d_array(self)
numpy.tests.test_regression.TestRegression.test_dot_alignment_sse2(self)
numpy.tests.test_regression.TestRegression.test_dot_big_stride(self)
numpy.tests.test_regression.TestRegression.test_dot_negative_stride(self)
numpy.tests.test_regression.TestRegression.test_dtype_keyerrors_(self)
numpy.tests.test_regression.TestRegression.test_dtype_names(self)
numpy.tests.test_regression.TestRegression.test_dtype_posttuple(self)
numpy.tests.test_regression.TestRegression.test_dtype_repr(self)
numpy.tests.test_regression.TestRegression.test_dtype_scalar_squeeze(self)
numpy.tests.test_regression.TestRegression.test_dtype_tuple(self)
numpy.tests.test_regression.TestRegression.test_duplicate_field_names_assign(self)
numpy.tests.test_regression.TestRegression.test_duplicate_title_and_name(self)
numpy.tests.test_regression.TestRegression.test_eff1d_casting(self)
numpy.tests.test_regression.TestRegression.test_empty_array_type(self)
numpy.tests.test_regression.TestRegression.test_empty_mul(self)
numpy.tests.test_regression.TestRegression.test_empty_percentile(self)
numpy.tests.test_regression.TestRegression.test_endian_bool_indexing(self)
numpy.tests.test_regression.TestRegression.test_endian_recarray(self)
numpy.tests.test_regression.TestRegression.test_endian_where(self)
numpy.tests.test_regression.TestRegression.test_eq_string_and_object_array(self)
numpy.tests.test_regression.TestRegression.test_fancy_index(self)
numpy.tests.test_regression.TestRegression.test_field_access_by_title(self)
numpy.tests.test_regression.TestRegression.test_fields_strides(self)
numpy.tests.test_regression.TestRegression.test_find_common_type_boolean(self)
numpy.tests.test_regression.TestRegression.test_flat_assignment(self)
numpy.tests.test_regression.TestRegression.test_flat_byteorder(self)
numpy.tests.test_regression.TestRegression.test_flat_index_byteswap(self)
numpy.tests.test_regression.TestRegression.test_for_equal_names(self)
numpy.tests.test_regression.TestRegression.test_for_object_scalar_creation(self)
numpy.tests.test_regression.TestRegression.test_for_zero_length_in_choose(self)
numpy.tests.test_regression.TestRegression.test_format_on_flex_array_element(self)
numpy.tests.test_regression.TestRegression.test_fortran_order_buffer(self)
numpy.tests.test_regression.TestRegression.test_fromfile_tofile_seeks(self)
numpy.tests.test_regression.TestRegression.test_fromiter_bytes(self)
numpy.tests.test_regression.TestRegression.test_fromiter_comparison(self)
numpy.tests.test_regression.TestRegression.test_frompyfunc_endian(self)
numpy.tests.test_regression.TestRegression.test_frompyfunc_many_args(self)
numpy.tests.test_regression.TestRegression.test_frompyfunc_name(self)
numpy.tests.test_regression.TestRegression.test_frompyfunc_nout_0(self)
numpy.tests.test_regression.TestRegression.test_fromstring(self)
numpy.tests.test_regression.TestRegression.test_fromstring_crash(self)
numpy.tests.test_regression.TestRegression.test_hstack_invalid_dims(self)
numpy.tests.test_regression.TestRegression.test_huge_arange(self)
numpy.tests.test_regression.TestRegression.test_indexing1(self)
numpy.tests.test_regression.TestRegression.test_indexing2(self)
numpy.tests.test_regression.TestRegression.test_invalid_round(self)
numpy.tests.test_regression.TestRegression.test_invalid_structured_dtypes(self)
numpy.tests.test_regression.TestRegression.test_junk_in_string_fields_of_recarray(self)
numpy.tests.test_regression.TestRegression.test_large_float_sum(self)
numpy.tests.test_regression.TestRegression.test_leak_in_structured_dtype_comparison(self)
numpy.tests.test_regression.TestRegression.test_lexsort(self)
numpy.tests.test_regression.TestRegression.test_lexsort_buffer_length(self)
numpy.tests.test_regression.TestRegression.test_lexsort_invalid_axis(self)
numpy.tests.test_regression.TestRegression.test_lexsort_invalid_sequence(self)
numpy.tests.test_regression.TestRegression.test_lexsort_zerolen_custom_strides(self)
numpy.tests.test_regression.TestRegression.test_lexsort_zerolen_custom_strides_2d(self)
numpy.tests.test_regression.TestRegression.test_lexsort_zerolen_element(self)
numpy.tests.test_regression.TestRegression.test_log1p_compiler_shenanigans(self)
numpy.tests.test_regression.TestRegression.test_mem_0d_array_index(self)
numpy.tests.test_regression.TestRegression.test_mem_around(self)
numpy.tests.test_regression.TestRegression.test_mem_array_creation_invalid_specification(self)
numpy.tests.test_regression.TestRegression.test_mem_axis_minimization(self)
numpy.tests.test_regression.TestRegression.test_mem_custom_float_to_array(self)
numpy.tests.test_regression.TestRegression.test_mem_deallocation_leak(self)
numpy.tests.test_regression.TestRegression.test_mem_divmod(self)
numpy.tests.test_regression.TestRegression.test_mem_dot(self)
numpy.tests.test_regression.TestRegression.test_mem_dtype_align(self)
numpy.tests.test_regression.TestRegression.test_mem_empty(self)
numpy.tests.test_regression.TestRegression.test_mem_float_imag(self)
numpy.tests.test_regression.TestRegression.test_mem_fromiter_invalid_dtype_string(self)
numpy.tests.test_regression.TestRegression.test_mem_lexsort_strings(self)
numpy.tests.test_regression.TestRegression.test_mem_on_invalid_dtype(self)
numpy.tests.test_regression.TestRegression.test_mem_scalar_indexing(self)
numpy.tests.test_regression.TestRegression.test_mem_string_arr(self)
numpy.tests.test_regression.TestRegression.test_memoryleak(self)
numpy.tests.test_regression.TestRegression.test_method_args(self)
numpy.tests.test_regression.TestRegression.test_misaligned_dot_product_objects(self)
numpy.tests.test_regression.TestRegression.test_misaligned_objects_segfault(self)
numpy.tests.test_regression.TestRegression.test_misaligned_scalars_segfault(self)
numpy.tests.test_regression.TestRegression.test_mixed_string_unicode_array_creation(self)
numpy.tests.test_regression.TestRegression.test_multidim_byteswap(self)
numpy.tests.test_regression.TestRegression.test_multiple_assign(self)
numpy.tests.test_regression.TestRegression.test_ndmin_float64(self)
numpy.tests.test_regression.TestRegression.test_ndmin_order(self)
numpy.tests.test_regression.TestRegression.test_negative_nd_indexing(self)
numpy.tests.test_regression.TestRegression.test_nonarray_assignment(self)
numpy.tests.test_regression.TestRegression.test_noncommutative_reduce_accumulate(self)
numpy.tests.test_regression.TestRegression.test_noncontiguous_fill(self)
numpy.tests.test_regression.TestRegression.test_nonnative_endian_fill(self)
numpy.tests.test_regression.TestRegression.test_nonscalar_item_method(self)
numpy.tests.test_regression.TestRegression.test_nonzero_byteswap(self)
numpy.tests.test_regression.TestRegression.test_numeric_carray_compare(self)
numpy.tests.test_regression.TestRegression.test_numpy_float_python_long_addition(self)
numpy.tests.test_regression.TestRegression.test_object_argmax(self)
numpy.tests.test_regression.TestRegression.test_object_array_assign(self)
numpy.tests.test_regression.TestRegression.test_object_array_circular_reference(self)
numpy.tests.test_regression.TestRegression.test_object_array_fill(self)
numpy.tests.test_regression.TestRegression.test_object_array_from_list(self)
numpy.tests.test_regression.TestRegression.test_object_array_nested(self)
numpy.tests.test_regression.TestRegression.test_object_array_refcount_self_assign(self)
numpy.tests.test_regression.TestRegression.test_object_array_refcounting(self)
numpy.tests.test_regression.TestRegression.test_object_array_self_copy(self)
numpy.tests.test_regression.TestRegression.test_object_array_self_reference(self)
numpy.tests.test_regression.TestRegression.test_object_array_shape(self)
numpy.tests.test_regression.TestRegression.test_object_array_to_fixed_string(self)
numpy.tests.test_regression.TestRegression.test_object_casting(self)
numpy.tests.test_regression.TestRegression.test_object_casting_errors(self)
numpy.tests.test_regression.TestRegression.test_objectarray_setfield(self)
numpy.tests.test_regression.TestRegression.test_pickle_bytes_overwrite(self)
numpy.tests.test_regression.TestRegression.test_pickle_datetime64_array(self)
numpy.tests.test_regression.TestRegression.test_pickle_dtype(self)
numpy.tests.test_regression.TestRegression.test_pickle_empty_string(self)
numpy.tests.test_regression.TestRegression.test_pickle_module(self,protocol,val)
numpy.tests.test_regression.TestRegression.test_pickle_py2_array_latin1_hack(self)
numpy.tests.test_regression.TestRegression.test_pickle_py2_bytes_encoding(self)
numpy.tests.test_regression.TestRegression.test_pickle_py2_scalar_latin1_hack(self)
numpy.tests.test_regression.TestRegression.test_pickle_string_overwrite(self)
numpy.tests.test_regression.TestRegression.test_pickle_transposed(self)
numpy.tests.test_regression.TestRegression.test_rand_seed(self)
numpy.tests.test_regression.TestRegression.test_random_shuffle(self)
numpy.tests.test_regression.TestRegression.test_ravel_with_order(self)
numpy.tests.test_regression.TestRegression.test_rec_fromarray(self)
numpy.tests.test_regression.TestRegression.test_rec_iterate(self)
numpy.tests.test_regression.TestRegression.test_recarray_copy(self)
numpy.tests.test_regression.TestRegression.test_recarray_fields(self)
numpy.tests.test_regression.TestRegression.test_recarray_single_element(self)
numpy.tests.test_regression.TestRegression.test_recarray_tolist(self)
numpy.tests.test_regression.TestRegression.test_reduce(self)
numpy.tests.test_regression.TestRegression.test_reduce_big_object_array(self)
numpy.tests.test_regression.TestRegression.test_reduce_contiguous(self)
numpy.tests.test_regression.TestRegression.test_refcount_error_in_clip(self)
numpy.tests.test_regression.TestRegression.test_refcount_vdot(self)
numpy.tests.test_regression.TestRegression.test_repeat_broadcasting(self)
numpy.tests.test_regression.TestRegression.test_repeat_discont(self)
numpy.tests.test_regression.TestRegression.test_reshape_order(self)
numpy.tests.test_regression.TestRegression.test_reshape_size_overflow(self)
numpy.tests.test_regression.TestRegression.test_reshape_trailing_ones_strides(self)
numpy.tests.test_regression.TestRegression.test_reshape_zero_size(self)
numpy.tests.test_regression.TestRegression.test_reshape_zero_strides(self)
numpy.tests.test_regression.TestRegression.test_richcompare_crash(self)
numpy.tests.test_regression.TestRegression.test_richcompare_scalar_and_subclass(self)
numpy.tests.test_regression.TestRegression.test_round(self)
numpy.tests.test_regression.TestRegression.test_scalar_compare(self)
numpy.tests.test_regression.TestRegression.test_scalar_copy(self)
numpy.tests.test_regression.TestRegression.test_search_sorted_invalid_arguments(self)
numpy.tests.test_regression.TestRegression.test_searchsorted_variable_length(self)
numpy.tests.test_regression.TestRegression.test_searchsorted_wrong_dtype(self)
numpy.tests.test_regression.TestRegression.test_setting_rank0_string(self)
numpy.tests.test_regression.TestRegression.test_sign_bit(self)
numpy.tests.test_regression.TestRegression.test_sign_for_complex_nan(self)
numpy.tests.test_regression.TestRegression.test_signed_integer_division_overflow(self)
numpy.tests.test_regression.TestRegression.test_sort_bigendian(self)
numpy.tests.test_regression.TestRegression.test_squeeze_axis_handling(self)
numpy.tests.test_regression.TestRegression.test_squeeze_contiguous(self)
numpy.tests.test_regression.TestRegression.test_squeeze_type(self)
numpy.tests.test_regression.TestRegression.test_startswith(self)
numpy.tests.test_regression.TestRegression.test_string_NULL(self)
numpy.tests.test_regression.TestRegression.test_string_argsort_with_zeros(self)
numpy.tests.test_regression.TestRegression.test_string_array_size(self)
numpy.tests.test_regression.TestRegression.test_string_astype(self)
numpy.tests.test_regression.TestRegression.test_string_mergesort(self)
numpy.tests.test_regression.TestRegression.test_string_sort_with_zeros(self)
numpy.tests.test_regression.TestRegression.test_string_truncation(self)
numpy.tests.test_regression.TestRegression.test_string_truncation_ucs2(self)
numpy.tests.test_regression.TestRegression.test_structarray_title(self)
numpy.tests.test_regression.TestRegression.test_structured_arrays_with_objects1(self)
numpy.tests.test_regression.TestRegression.test_structured_arrays_with_objects2(self)
numpy.tests.test_regression.TestRegression.test_structured_count_nonzero(self)
numpy.tests.test_regression.TestRegression.test_structured_type_to_object(self)
numpy.tests.test_regression.TestRegression.test_subclass_int_tuple_assignment(self)
numpy.tests.test_regression.TestRegression.test_swap_real(self)
numpy.tests.test_regression.TestRegression.test_take_object_fail(self)
numpy.tests.test_regression.TestRegression.test_take_output(self)
numpy.tests.test_regression.TestRegression.test_take_refcount(self)
numpy.tests.test_regression.TestRegression.test_ticket_1434(self)
numpy.tests.test_regression.TestRegression.test_ticket_1538(self)
numpy.tests.test_regression.TestRegression.test_ticket_1539(self)
numpy.tests.test_regression.TestRegression.test_ticket_1608(self)
numpy.tests.test_regression.TestRegression.test_ticket_1756(self)
numpy.tests.test_regression.TestRegression.test_ticket_1770(self)
numpy.tests.test_regression.TestRegression.test_to_ctypes(self)
numpy.tests.test_regression.TestRegression.test_tobytes_FORTRANORDER_discontiguous(self)
numpy.tests.test_regression.TestRegression.test_ufunc_casting_out(self)
numpy.tests.test_regression.TestRegression.test_ufunc_no_unnecessary_views(self)
numpy.tests.test_regression.TestRegression.test_ufunc_order(self,operation,order)
numpy.tests.test_regression.TestRegression.test_ufunc_reduce_memoryleak(self)
numpy.tests.test_regression.TestRegression.test_uint_int_conversion(self)
numpy.tests.test_regression.TestRegression.test_unaligned_unicode_access(self)
numpy.tests.test_regression.TestRegression.test_unicode_alloc_dealloc_match(self)
numpy.tests.test_regression.TestRegression.test_unicode_scalar(self)
numpy.tests.test_regression.TestRegression.test_unicode_string_comparison(self)
numpy.tests.test_regression.TestRegression.test_unicode_swapping(self)
numpy.tests.test_regression.TestRegression.test_unicode_to_string_cast(self)
numpy.tests.test_regression.TestRegression.test_unicode_to_string_cast_error(self)
numpy.tests.test_regression.TestRegression.test_unique_stable(self)
numpy.tests.test_regression.TestRegression.test_unpickle_dtype_with_object(self)
numpy.tests.test_regression.TestRegression.test_void_compare_segfault(self)
numpy.tests.test_regression.TestRegression.test_void_copyswap(self)
numpy.tests.test_regression.TestRegression.test_void_getitem(self)
numpy.tests.test_regression.TestRegression.test_void_item_memview(self)
numpy.tests.test_regression.TestRegression.test_void_scalar_constructor(self)
numpy.tests.test_regression.TestRegression.test_void_scalar_with_titles(self)
numpy.tests.test_regression.TestRegression.test_zero_sized_array_indexing(self)
numpy.tests.test_regression.TestRegression.test_zeros(self)
numpy.tests.test_regression.TestRegression.test_zeros_order(self)
numpy.tests.test_regression.TestRegression.test_zerosize_accumulate(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_umath.py----------------------------------------
A:numpy.core.tests.test_umath.glibcver->get_glibc_version()
A:numpy.core.tests.test_umath.glibc_newerthan_2_17->pytest.mark.xfail(glibcver != '0.0' and glibcver < '2.17', reason='Older glibc versions may not raise appropriate FP exceptions')
A:numpy.core.tests.test_umath.v1->numpy.arcsinh(np.float128(x))
A:numpy.core.tests.test_umath.self.olderr->numpy.seterr(invalid='ignore')
A:numpy.core.tests.test_umath.a->numpy.ndarray(shape=(), dtype='float32', buffer=b'\x00\xe0\xbf\xff')
A:numpy.core.tests.test_umath.o->numpy.ones(10 * 2, dtype=bool)
A:numpy.core.tests.test_umath.r->type(self)()
A:numpy.core.tests.test_umath.d->numpy.absolute(1 - np.arcsin(z) / p)
A:numpy.core.tests.test_umath.o1->numpy.empty((1,))
A:numpy.core.tests.test_umath.o2->numpy.empty((1,), dtype=np.int32)
A:numpy.core.tests.test_umath.(r1, r2)->numpy.frexp(d, out=o1, subok=subok)
A:numpy.core.tests.test_umath.x->numpy.array([x])
A:numpy.core.tests.test_umath.fo->numpy.iinfo(dtype)
A:numpy.core.tests.test_umath.(a, b, divisors)->eval(ex_val)
A:numpy.core.tests.test_umath.ac->numpy.ndarray(shape=(), dtype='float32', buffer=b'\x00\xe0\xbf\xff').copy()
A:numpy.core.tests.test_umath.lst->numpy.ndarray(shape=(), dtype='float32', buffer=b'\x00\xe0\xbf\xff').tolist()
A:numpy.core.tests.test_umath.div_a->numpy.floor_divide.reduce(a)
A:numpy.core.tests.test_umath.div_lst->reduce(c_div, lst)
A:numpy.core.tests.test_umath.dividend_array->numpy.array([dividend] * 5)
A:numpy.core.tests.test_umath.quotient_array->numpy.array([quotient] * 5)
A:numpy.core.tests.test_umath.y->numpy.array([y])
A:numpy.core.tests.test_umath.fnan->numpy.array(np.nan, dtype=dt)
A:numpy.core.tests.test_umath.fone->numpy.array(1.0, dtype=dt)
A:numpy.core.tests.test_umath.fzer->numpy.array(0.0, dtype=dt)
A:numpy.core.tests.test_umath.finf->numpy.array(np.inf, dtype=dt)
A:numpy.core.tests.test_umath.div->numpy.floor_divide(fnan, fzer)
A:numpy.core.tests.test_umath.z->numpy.array([1e-05 * (1 + 1j)], dtype=dtype)
A:numpy.core.tests.test_umath.b->cfunc(p)
A:numpy.core.tests.test_umath.(div, rem)->numpy.divmod(fnan, fzer)
A:numpy.core.tests.test_umath.nlst->list(range(-127, 0))
A:numpy.core.tests.test_umath.plst->list(range(1, 128))
A:numpy.core.tests.test_umath.arg->numpy.ones(1, dtype=dtin)
A:numpy.core.tests.test_umath.tgt->numpy.array([1.0, -1.0, np.nan, 0.0, 1.0, -1.0])
A:numpy.core.tests.test_umath.tgtdiv->numpy.where((tgtdiv == 0.0) & ((b < 0) ^ (a < 0)), -0.0, tgtdiv)
A:numpy.core.tests.test_umath.tgtrem->numpy.where((tgtrem == 0.0) & (b < 0), -0.0, tgtrem)
A:numpy.core.tests.test_umath.fa->numpy.ndarray(shape=(), dtype='float32', buffer=b'\x00\xe0\xbf\xff').astype(dt)
A:numpy.core.tests.test_umath.fb->cfunc(p).astype(dt)
A:numpy.core.tests.test_umath.fzero->numpy.array(0.0, dtype=dtype)
A:numpy.core.tests.test_umath.(div, mod)->numpy.divmod(4, a)
A:numpy.core.tests.test_umath.rem->numpy.remainder(fnan, fone)
A:numpy.core.tests.test_umath.fmod->numpy.fmod(fnan, fone)
A:numpy.core.tests.test_umath.zero->t(0)
A:numpy.core.tests.test_umath.one->t(1)
A:numpy.core.tests.test_umath.cnan->numpy.array([complex(np.nan, np.nan)])
A:numpy.core.tests.test_umath.arr->numpy.ones((2, 3)).view(cls)
A:numpy.core.tests.test_umath.minusone->numpy.array(-1, dtype=dt)
A:numpy.core.tests.test_umath.res->inner1d(1, 1, out=a)
A:numpy.core.tests.test_umath.xf->numpy.log(np.array(x, dtype=dt))
A:numpy.core.tests.test_umath.yf->numpy.log(np.array(y, dtype=dt))
A:numpy.core.tests.test_umath.v->numpy.log2(2.0 ** i)
A:numpy.core.tests.test_umath.zf->numpy.log(np.array(z, dtype=dt))
A:numpy.core.tests.test_umath.logxf->numpy.array(x, dtype=dt)
A:numpy.core.tests.test_umath.logyf->numpy.array(y, dtype=dt)
A:numpy.core.tests.test_umath.logzf->numpy.array(z, dtype=dt)
A:numpy.core.tests.test_umath.strides->numpy.array([-4, -3, -2, -1, 1, 2, 3, 4])
A:numpy.core.tests.test_umath.sizes->numpy.arange(2, 100)
A:numpy.core.tests.test_umath.x_f64->numpy.float64(x_f32)
A:numpy.core.tests.test_umath.x_special->numpy.float64(x_f32).copy()
A:numpy.core.tests.test_umath.y_true->numpy.exp(x_f64)
A:numpy.core.tests.test_umath.y_special->numpy.log(x_special)
A:numpy.core.tests.test_umath.arr_f64->numpy.array([np.nan, -np.nan, np.inf, -np.inf, -1.0, 1.0, -0.0, 0.0, 2.2251e-308, -2.2251e-308], dtype='d')
A:numpy.core.tests.test_umath.arr_f32->numpy.array([np.nan, -np.nan, np.inf, -np.inf, -1.0, 1.0, -0.0, 0.0, 1.4013e-45, -1.4013e-45], dtype='f')
A:numpy.core.tests.test_umath.nan->t(np.nan)
A:numpy.core.tests.test_umath.inf->t(np.inf)
A:numpy.core.tests.test_umath.sign->numpy.array([False, True, False, True, True, False, True, False, False, True])
A:numpy.core.tests.test_umath.finite->numpy.array([False, False, False, False, True, True, True, True, True, True])
A:numpy.core.tests.test_umath.mant->numpy.array([0.125, 0.25, 0.5, 1.0, 1.0, 2.0, 4.0, 8.0], dtype=dtype)
A:numpy.core.tests.test_umath.exp->numpy.array([3, 2, 1, 0, 0, -1, -2, -3], dtype='i')
A:numpy.core.tests.test_umath.out->numpy.zeros(a.shape)
A:numpy.core.tests.test_umath.mant_true->numpy.array([np.nan, np.nan, np.inf, -np.inf, 0.0, -0.0, 0.5, -0.5], dtype=dtype)
A:numpy.core.tests.test_umath.exp_true->numpy.exp(x_f32)
A:numpy.core.tests.test_umath.out_mant->numpy.ones(8, dtype=dtype)
A:numpy.core.tests.test_umath.(mant, exp)->numpy.frexp(arr[::stride], out=(out_mant[::stride], out_exp[::stride]))
A:numpy.core.tests.test_umath.myfunc->getattr(np, func)
A:numpy.core.tests.test_umath.x_f32->numpy.float32(np.random.uniform(low=0.01, high=88.1, size=ii))
A:numpy.core.tests.test_umath.x_f128->numpy.longdouble(x_f32)
A:numpy.core.tests.test_umath.y_true128->myfunc(x_f128)
A:numpy.core.tests.test_umath.y_true32->myfunc(x_f32)
A:numpy.core.tests.test_umath.y_true64->myfunc(x_f64)
A:numpy.core.tests.test_umath.M->numpy.int_(N / 20)
A:numpy.core.tests.test_umath.index->numpy.random.randint(low=0, high=N, size=M)
A:numpy.core.tests.test_umath.x_f32[index]->numpy.float32(100000000000.0 * np.random.rand(M))
A:numpy.core.tests.test_umath.tx_f32->numpy.float32(np.random.uniform(low=0.01, high=88.1, size=ii)).copy()
A:numpy.core.tests.test_umath.x_f32_large->numpy.float32(np.random.uniform(low=0.01, high=88.1, size=ii)).copy()
A:numpy.core.tests.test_umath.log_true->numpy.log(x_f32)
A:numpy.core.tests.test_umath.sin_true->numpy.sin(x_f32_large)
A:numpy.core.tests.test_umath.cos_true->numpy.cos(x_f32_large)
A:numpy.core.tests.test_umath.seq1->numpy.arange(11)
A:numpy.core.tests.test_umath.tmp1->numpy.arange(11).astype(dt)
A:numpy.core.tests.test_umath.tmp2->seq2.astype(dt)
A:numpy.core.tests.test_umath.arg1->numpy.asarray(input1, dtype=dtype)
A:numpy.core.tests.test_umath.arg2->numpy.asarray(input2, dtype=dtype)
A:numpy.core.tests.test_umath.arr1->numpy.array([-4.0, 1.0, 10.0, 0.0, np.nan, -np.nan, np.inf, -np.inf])
A:numpy.core.tests.test_umath.arr2->numpy.array([-2.0, -1.0, np.nan, 1.0, 0.0, np.nan, 1.0, -3.0])
A:numpy.core.tests.test_umath.maxtrue->numpy.array([-2.0, 1.0, np.nan, 1.0, np.nan, np.nan, np.inf, -3.0])
A:numpy.core.tests.test_umath.out_maxtrue->numpy.array([-2.0, 1.0, 1.0, 10.0, 1.0, 1.0, np.nan, 1.0])
A:numpy.core.tests.test_umath.mintrue->numpy.array([-4.0, -1.0, np.nan, 0.0, np.nan, np.nan, 1.0, -np.inf])
A:numpy.core.tests.test_umath.out_mintrue->numpy.array([-4.0, 1.0, 1.0, 1.0, 1.0, 1.0, np.nan, 1.0])
A:numpy.core.tests.test_umath.none->numpy.array([0, 0, 0, 0], bool)
A:numpy.core.tests.test_umath.some->numpy.array([1, 0, 1, 1], bool)
A:numpy.core.tests.test_umath.every->numpy.array([1, 1, 1, 1], bool)
A:numpy.core.tests.test_umath.empty->numpy.array([], dtype=object)
A:numpy.core.tests.test_umath.zeros->numpy.array([0], dtype=dt)
A:numpy.core.tests.test_umath.ones->numpy.array([-1], dtype=dt)
A:numpy.core.tests.test_umath.btype->numpy.array([True], dtype=object)
A:numpy.core.tests.test_umath.expectedhalf->numpy.array([[0.0, 0.0, 0.5, 1.0], [1.0, np.nan, 1.0, 0.0]])
A:numpy.core.tests.test_umath.expected1->numpy.array([[0.0, 0.0, 0.5, 1.0], [1.0, np.nan, 1.0, 0.0]]).copy()
A:numpy.core.tests.test_umath.h->numpy.core.umath.heaviside(x, np.float32(1.0))
A:numpy.core.tests.test_umath.foo->numpy.array([np.nan])
A:numpy.core.tests.test_umath.inp[:]->numpy.arange(inp.size, dtype=dt)
A:numpy.core.tests.test_umath.result->numpy.add.reduceat(x, [], axis=1)
A:numpy.core.tests.test_umath.expected->f_expected(a)
A:numpy.core.tests.test_umath.c->numpy.array([True, True])
A:numpy.core.tests.test_umath.singleton->numpy.array([1.0])
A:numpy.core.tests.test_umath.ok->numpy.empty(1).view(Ok)
A:numpy.core.tests.test_umath.bad->numpy.empty(1).view(Bad)
A:numpy.core.tests.test_umath.res0->numpy.multiply(a, b, 'out_arg')
A:numpy.core.tests.test_umath.res1->numpy.multiply(a, b, out='out_arg')
A:numpy.core.tests.test_umath.three_mul_ufunc->numpy.frompyfunc(tres_mul, 3, 1)
A:numpy.core.tests.test_umath.four_mul_ufunc->numpy.frompyfunc(quatro_mul, 4, 1)
A:numpy.core.tests.test_umath.a_sub->ASub()
A:numpy.core.tests.test_umath.c_sub->CSub()
A:numpy.core.tests.test_umath.c2->C()
A:numpy.core.tests.test_umath.res2->numpy.multiply(2, b, 'out_arg')
A:numpy.core.tests.test_umath.res3->numpy.multiply(3, b, out='out_arg')
A:numpy.core.tests.test_umath.res4->numpy.multiply(a, 4, 'out_arg')
A:numpy.core.tests.test_umath.res5->numpy.multiply(a, 5, out='out_arg')
A:numpy.core.tests.test_umath.res6->numpy.modf(a, 'out0', 'out1')
A:numpy.core.tests.test_umath.res7->numpy.frexp(a, 'out0', 'out1')
A:numpy.core.tests.test_umath.opt_out->OptOut()
A:numpy.core.tests.test_umath.greedy->GreedyArray()
A:numpy.core.tests.test_umath.kwargs['out']->tuple(out_args)
A:numpy.core.tests.test_umath.results->tuple((np.asarray(result).view(A) if output is None else output for (result, output) in zip(results, outputs)))
A:numpy.core.tests.test_umath.check->numpy.absolute(1 - np.arcsin(z) / p).copy()
A:numpy.core.tests.test_umath.(b1, b2)->numpy.modf(d, out=(None, a))
A:numpy.core.tests.test_umath.(c1, c2)->numpy.modf(a, out=(a, b))
A:numpy.core.tests.test_umath.big->numpy.int32(np.iinfo(np.int32).max // 11)
A:numpy.core.tests.test_umath.f->t(_f)
A:numpy.core.tests.test_umath.fr->f(x)
A:numpy.core.tests.test_umath.fz->f(complex(x))
A:numpy.core.tests.test_umath.fcf->f(np.csingle(z))
A:numpy.core.tests.test_umath.fcd->f(np.cdouble(z))
A:numpy.core.tests.test_umath.fcl->f(np.clongdouble(z))
A:numpy.core.tests.test_umath.cname->name_map.get(fname, fname)
A:numpy.core.tests.test_umath.cfunc->getattr(cmath, cname)
A:numpy.core.tests.test_umath.info->numpy.finfo(dtype)
A:numpy.core.tests.test_umath.x_series->numpy.logspace(-20, -3.001, 200)
A:numpy.core.tests.test_umath.x_basic->numpy.logspace(-2.999, 0, 10, endpoint=False)
A:numpy.core.tests.test_umath.z0->numpy.asarray(z0, dtype=dtype)
A:numpy.core.tests.test_umath.self->numpy.ndarray.__new__(subtype, shape, dtype=object)
A:numpy.core.tests.test_umath.mul_ufunc->numpy.frompyfunc(mul, nin=2, nout=1)
A:numpy.core.tests.test_umath.x0->numpy.atleast_1d(x0).astype(dtype)
A:numpy.core.tests.test_umath.dx->numpy.atleast_1d(dx).astype(dtype)
A:numpy.core.tests.test_umath.atol->numpy.float32(0.01)
A:numpy.core.tests.test_umath.y0->f(x0)
A:numpy.core.tests.test_umath.yp->f(x0 + dx * scale * np.absolute(x0) / np.absolute(dx))
A:numpy.core.tests.test_umath.ym->f(x)
A:numpy.core.tests.test_umath.two->t(2)
A:numpy.core.tests.test_umath.f1->t(_f + 1)
A:numpy.core.tests.test_umath.db->numpy.dtype([('name', 'S11'), ('time', np.int64), ('value', np.float32)])
A:numpy.core.tests.test_umath.h2->numpy.array(h2)
A:numpy.core.tests.test_umath.h1->numpy.add.reduceat(a['value'], indx)
A:numpy.core.tests.test_umath.indices->numpy.array([], 'i4')
A:numpy.core.tests.test_umath.out_max->numpy.array([0.61, 0.61, 0.77, 0.77, 0.77], dtype=ftype)
A:numpy.core.tests.test_umath.out_min->numpy.array([0.61, 0.6, 0.6, 0.41, 0.19], dtype=ftype)
A:numpy.core.tests.test_umath.actual->numpy.multiply.outer(arr.view(foo), arr.view(foo))
A:numpy.core.tests.test_umath.deep->numpy.ones((1,) * 17)
numpy.core.tests.test_umath.TestAVXFloat32Transcendental
numpy.core.tests.test_umath.TestAVXFloat32Transcendental.test_exp_float32(self)
numpy.core.tests.test_umath.TestAVXFloat32Transcendental.test_log_float32(self)
numpy.core.tests.test_umath.TestAVXFloat32Transcendental.test_sincos_float32(self)
numpy.core.tests.test_umath.TestAVXFloat32Transcendental.test_strided_float32(self)
numpy.core.tests.test_umath.TestAVXUfuncs
numpy.core.tests.test_umath.TestAVXUfuncs.test_avx_based_ufunc(self)
numpy.core.tests.test_umath.TestAbsoluteNegative
numpy.core.tests.test_umath.TestAbsoluteNegative.test_abs_neg_blocked(self)
numpy.core.tests.test_umath.TestAbsoluteNegative.test_lower_align(self)
numpy.core.tests.test_umath.TestAdd
numpy.core.tests.test_umath.TestAdd.test_reduce_alignment(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_any_ninf(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_any_pinf(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_inf_any(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_inf_ninf(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_inf_pinf(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_nan_any(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_negative_zero(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_one_one(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_positive_zero(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_zero_negative(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_zero_nzero(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_zero_positive(self)
numpy.core.tests.test_umath.TestArctan2SpecialValues.test_zero_pzero(self)
numpy.core.tests.test_umath.TestAttributes
numpy.core.tests.test_umath.TestAttributes.test_attributes(self)
numpy.core.tests.test_umath.TestAttributes.test_doc(self)
numpy.core.tests.test_umath.TestBitwiseUFuncs
numpy.core.tests.test_umath.TestBitwiseUFuncs.test_identity(self)
numpy.core.tests.test_umath.TestBitwiseUFuncs.test_reduction(self)
numpy.core.tests.test_umath.TestBitwiseUFuncs.test_types(self)
numpy.core.tests.test_umath.TestBitwiseUFuncs.test_values(self)
numpy.core.tests.test_umath.TestBool
numpy.core.tests.test_umath.TestBool.test_exceptions(self)
numpy.core.tests.test_umath.TestBool.test_reduce(self)
numpy.core.tests.test_umath.TestBool.test_truth_table_bitwise(self)
numpy.core.tests.test_umath.TestBool.test_truth_table_logical(self)
numpy.core.tests.test_umath.TestCbrt
numpy.core.tests.test_umath.TestCbrt.test_cbrt(self)
numpy.core.tests.test_umath.TestCbrt.test_cbrt_scalar(self)
numpy.core.tests.test_umath.TestChoose
numpy.core.tests.test_umath.TestChoose.test_mixed(self)
numpy.core.tests.test_umath.TestComparisons
numpy.core.tests.test_umath.TestComparisons.test_ignore_object_identity_in_equal(self)
numpy.core.tests.test_umath.TestComparisons.test_ignore_object_identity_in_not_equal(self)
numpy.core.tests.test_umath.TestComplexFunctions
numpy.core.tests.test_umath.TestComplexFunctions.test_against_cmath(self)
numpy.core.tests.test_umath.TestComplexFunctions.test_branch_cuts(self)
numpy.core.tests.test_umath.TestComplexFunctions.test_branch_cuts_complex64(self)
numpy.core.tests.test_umath.TestComplexFunctions.test_it(self)
numpy.core.tests.test_umath.TestComplexFunctions.test_loss_of_precision(self,dtype)
numpy.core.tests.test_umath.TestComplexFunctions.test_precisions_consistent(self)
numpy.core.tests.test_umath.TestConstants
numpy.core.tests.test_umath.TestConstants.test_e(self)
numpy.core.tests.test_umath.TestConstants.test_euler_gamma(self)
numpy.core.tests.test_umath.TestConstants.test_pi(self)
numpy.core.tests.test_umath.TestDegrees
numpy.core.tests.test_umath.TestDegrees.test_degrees(self)
numpy.core.tests.test_umath.TestDivision
numpy.core.tests.test_umath.TestDivision.test_division_complex(self)
numpy.core.tests.test_umath.TestDivision.test_division_int(self)
numpy.core.tests.test_umath.TestDivision.test_division_int_boundary(self,dtype,ex_val)
numpy.core.tests.test_umath.TestDivision.test_division_int_reduce(self,dtype,ex_val)
numpy.core.tests.test_umath.TestDivision.test_division_int_timedelta(self,dividend,divisor,quotient)
numpy.core.tests.test_umath.TestDivision.test_floor_division_complex(self)
numpy.core.tests.test_umath.TestDivision.test_floor_division_corner_cases(self,dtype)
numpy.core.tests.test_umath.TestDivision.test_floor_division_errors(self,dtype)
numpy.core.tests.test_umath.TestDivision.test_floor_division_signed_zero(self)
numpy.core.tests.test_umath.TestDivision.test_zero_division_complex(self)
numpy.core.tests.test_umath.TestExp
numpy.core.tests.test_umath.TestExp.test_exp_strides(self)
numpy.core.tests.test_umath.TestExp.test_exp_values(self)
numpy.core.tests.test_umath.TestExp2
numpy.core.tests.test_umath.TestExp2.test_exp2_values(self)
numpy.core.tests.test_umath.TestExpm1
numpy.core.tests.test_umath.TestExpm1.test_complex(self)
numpy.core.tests.test_umath.TestExpm1.test_expm1(self)
numpy.core.tests.test_umath.TestExpm1.test_special(self)
numpy.core.tests.test_umath.TestFPClass
numpy.core.tests.test_umath.TestFPClass.test_fpclass(self,stride)
numpy.core.tests.test_umath.TestFRExp
numpy.core.tests.test_umath.TestFRExp.test_frexp(self,dtype,stride)
numpy.core.tests.test_umath.TestFloat_power
numpy.core.tests.test_umath.TestFloat_power.test_type_conversion(self)
numpy.core.tests.test_umath.TestFloatingPoint
numpy.core.tests.test_umath.TestFloatingPoint.test_floating_point(self)
numpy.core.tests.test_umath.TestFmax(_FilterInvalids)
numpy.core.tests.test_umath.TestFmax.test_complex_nans(self)
numpy.core.tests.test_umath.TestFmax.test_float_nans(self)
numpy.core.tests.test_umath.TestFmax.test_reduce(self)
numpy.core.tests.test_umath.TestFmax.test_reduce_complex(self)
numpy.core.tests.test_umath.TestFmin(_FilterInvalids)
numpy.core.tests.test_umath.TestFmin.test_complex_nans(self)
numpy.core.tests.test_umath.TestFmin.test_float_nans(self)
numpy.core.tests.test_umath.TestFmin.test_reduce(self)
numpy.core.tests.test_umath.TestFmin.test_reduce_complex(self)
numpy.core.tests.test_umath.TestFrompyfunc
numpy.core.tests.test_umath.TestFrompyfunc.test_identity(self)
numpy.core.tests.test_umath.TestHeavside
numpy.core.tests.test_umath.TestHeavside.test_heaviside(self)
numpy.core.tests.test_umath.TestHypot
numpy.core.tests.test_umath.TestHypot.test_reduce(self)
numpy.core.tests.test_umath.TestHypot.test_simple(self)
numpy.core.tests.test_umath.TestHypotSpecialValues
numpy.core.tests.test_umath.TestHypotSpecialValues.test_nan_outputs(self)
numpy.core.tests.test_umath.TestHypotSpecialValues.test_nan_outputs2(self)
numpy.core.tests.test_umath.TestHypotSpecialValues.test_no_fpe(self)
numpy.core.tests.test_umath.TestInt
numpy.core.tests.test_umath.TestInt.test_logical_not(self)
numpy.core.tests.test_umath.TestLDExp
numpy.core.tests.test_umath.TestLDExp.test_ldexp(self,dtype,stride)
numpy.core.tests.test_umath.TestLdexp
numpy.core.tests.test_umath.TestLdexp._check_ldexp(self,tp)
numpy.core.tests.test_umath.TestLdexp.test_ldexp(self)
numpy.core.tests.test_umath.TestLdexp.test_ldexp_overflow(self)
numpy.core.tests.test_umath.TestLog
numpy.core.tests.test_umath.TestLog.test_log_strides(self)
numpy.core.tests.test_umath.TestLog.test_log_values(self)
numpy.core.tests.test_umath.TestLog1p
numpy.core.tests.test_umath.TestLog1p.test_log1p(self)
numpy.core.tests.test_umath.TestLog1p.test_special(self)
numpy.core.tests.test_umath.TestLog2
numpy.core.tests.test_umath.TestLog2.test_log2_ints(self)
numpy.core.tests.test_umath.TestLog2.test_log2_special(self)
numpy.core.tests.test_umath.TestLog2.test_log2_values(self)
numpy.core.tests.test_umath.TestLogAddExp(_FilterInvalids)
numpy.core.tests.test_umath.TestLogAddExp.test_inf(self)
numpy.core.tests.test_umath.TestLogAddExp.test_logaddexp_range(self)
numpy.core.tests.test_umath.TestLogAddExp.test_logaddexp_values(self)
numpy.core.tests.test_umath.TestLogAddExp.test_nan(self)
numpy.core.tests.test_umath.TestLogAddExp.test_reduce(self)
numpy.core.tests.test_umath.TestLogAddExp2(_FilterInvalids)
numpy.core.tests.test_umath.TestLogAddExp2.test_inf(self)
numpy.core.tests.test_umath.TestLogAddExp2.test_logaddexp2_range(self)
numpy.core.tests.test_umath.TestLogAddExp2.test_logaddexp2_values(self)
numpy.core.tests.test_umath.TestLogAddExp2.test_nan(self)
numpy.core.tests.test_umath.TestLogAddExp2.test_reduce(self)
numpy.core.tests.test_umath.TestMaximum(_FilterInvalids)
numpy.core.tests.test_umath.TestMaximum.test_complex_nans(self)
numpy.core.tests.test_umath.TestMaximum.test_float_nans(self)
numpy.core.tests.test_umath.TestMaximum.test_object_array(self)
numpy.core.tests.test_umath.TestMaximum.test_object_nans(self)
numpy.core.tests.test_umath.TestMaximum.test_reduce(self)
numpy.core.tests.test_umath.TestMaximum.test_reduce_complex(self)
numpy.core.tests.test_umath.TestMaximum.test_strided_array(self)
numpy.core.tests.test_umath.TestMinMax
numpy.core.tests.test_umath.TestMinMax.test_lower_align(self)
numpy.core.tests.test_umath.TestMinMax.test_minimize_no_warns(self)
numpy.core.tests.test_umath.TestMinMax.test_minmax_blocked(self)
numpy.core.tests.test_umath.TestMinMax.test_reduce_reorder(self)
numpy.core.tests.test_umath.TestMinimum(_FilterInvalids)
numpy.core.tests.test_umath.TestMinimum.test_complex_nans(self)
numpy.core.tests.test_umath.TestMinimum.test_float_nans(self)
numpy.core.tests.test_umath.TestMinimum.test_object_array(self)
numpy.core.tests.test_umath.TestMinimum.test_object_nans(self)
numpy.core.tests.test_umath.TestMinimum.test_reduce(self)
numpy.core.tests.test_umath.TestMinimum.test_reduce_complex(self)
numpy.core.tests.test_umath.TestMinimum.test_strided_array(self)
numpy.core.tests.test_umath.TestOut
numpy.core.tests.test_umath.TestOut.test_out_subok(self)
numpy.core.tests.test_umath.TestOut.test_out_wrap_subok(self)
numpy.core.tests.test_umath.TestPositive
numpy.core.tests.test_umath.TestPositive.test_invalid(self)
numpy.core.tests.test_umath.TestPositive.test_valid(self)
numpy.core.tests.test_umath.TestPower
numpy.core.tests.test_umath.TestPower.test_fast_power(self)
numpy.core.tests.test_umath.TestPower.test_integer_power(self)
numpy.core.tests.test_umath.TestPower.test_integer_power_of_1(self)
numpy.core.tests.test_umath.TestPower.test_integer_power_of_zero(self)
numpy.core.tests.test_umath.TestPower.test_integer_power_with_integer_zero_exponent(self)
numpy.core.tests.test_umath.TestPower.test_integer_to_negative_power(self)
numpy.core.tests.test_umath.TestPower.test_power_complex(self)
numpy.core.tests.test_umath.TestPower.test_power_float(self)
numpy.core.tests.test_umath.TestPower.test_power_zero(self)
numpy.core.tests.test_umath.TestRadians
numpy.core.tests.test_umath.TestRadians.test_radians(self)
numpy.core.tests.test_umath.TestRationalFunctions
numpy.core.tests.test_umath.TestRationalFunctions._test_gcd_inner(self,dtype)
numpy.core.tests.test_umath.TestRationalFunctions._test_lcm_inner(self,dtype)
numpy.core.tests.test_umath.TestRationalFunctions.test_builtin_long(self)
numpy.core.tests.test_umath.TestRationalFunctions.test_decimal(self)
numpy.core.tests.test_umath.TestRationalFunctions.test_float(self)
numpy.core.tests.test_umath.TestRationalFunctions.test_gcd(self)
numpy.core.tests.test_umath.TestRationalFunctions.test_gcd_object(self)
numpy.core.tests.test_umath.TestRationalFunctions.test_gcd_overflow(self)
numpy.core.tests.test_umath.TestRationalFunctions.test_lcm(self)
numpy.core.tests.test_umath.TestRationalFunctions.test_lcm_object(self)
numpy.core.tests.test_umath.TestRationalFunctions.test_lcm_overflow(self)
numpy.core.tests.test_umath.TestRemainder
numpy.core.tests.test_umath.TestRemainder.test_float_divmod_corner_cases(self)
numpy.core.tests.test_umath.TestRemainder.test_float_divmod_errors(self,dtype)
numpy.core.tests.test_umath.TestRemainder.test_float_remainder_corner_cases(self)
numpy.core.tests.test_umath.TestRemainder.test_float_remainder_errors(self,dtype,fn)
numpy.core.tests.test_umath.TestRemainder.test_float_remainder_exact(self)
numpy.core.tests.test_umath.TestRemainder.test_float_remainder_overflow(self)
numpy.core.tests.test_umath.TestRemainder.test_float_remainder_roundoff(self)
numpy.core.tests.test_umath.TestRemainder.test_remainder_basic(self)
numpy.core.tests.test_umath.TestRoundingFunctions
numpy.core.tests.test_umath.TestRoundingFunctions.test_fraction(self)
numpy.core.tests.test_umath.TestRoundingFunctions.test_object_direct(self)
numpy.core.tests.test_umath.TestRoundingFunctions.test_object_indirect(self)
numpy.core.tests.test_umath.TestSign
numpy.core.tests.test_umath.TestSign.test_sign(self)
numpy.core.tests.test_umath.TestSign.test_sign_dtype_nan_object(self)
numpy.core.tests.test_umath.TestSign.test_sign_dtype_object(self)
numpy.core.tests.test_umath.TestSpecialFloats
numpy.core.tests.test_umath.TestSpecialFloats.test_abs_values(self)
numpy.core.tests.test_umath.TestSpecialFloats.test_exp_exceptions(self)
numpy.core.tests.test_umath.TestSpecialFloats.test_exp_values(self)
numpy.core.tests.test_umath.TestSpecialFloats.test_log_values(self)
numpy.core.tests.test_umath.TestSpecialFloats.test_reciprocal_values(self)
numpy.core.tests.test_umath.TestSpecialFloats.test_sincos_values(self)
numpy.core.tests.test_umath.TestSpecialFloats.test_sqrt_values(self)
numpy.core.tests.test_umath.TestSpecialFloats.test_square_values(self)
numpy.core.tests.test_umath.TestSpecialMethods
numpy.core.tests.test_umath.TestSpecialMethods.test_array_too_many_args(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_failing_out_wrap(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_gufunc_override(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_prepare(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_prepare_out(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_priority(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_priority_with_scalar(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_disabled(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_exception(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_methods(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_not_implemented(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_out(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_wrap(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out(self)
numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_with_iterable(self)
numpy.core.tests.test_umath.TestSubclass
numpy.core.tests.test_umath.TestSubclass.test_subclass_op(self)
numpy.core.tests.test_umath._FilterInvalids
numpy.core.tests.test_umath._FilterInvalids.setup(self)
numpy.core.tests.test_umath._FilterInvalids.teardown(self)
numpy.core.tests.test_umath._check_branch_cut(f,x0,dx,re_sign=1,im_sign=-1,sig_zero_ok=False,dtype=complex)
numpy.core.tests.test_umath._signs(dt)
numpy.core.tests.test_umath._test_nextafter(t)
numpy.core.tests.test_umath._test_spacing(t)
numpy.core.tests.test_umath.assert_arctan2_isnan(x,y)
numpy.core.tests.test_umath.assert_arctan2_isninf(x,y)
numpy.core.tests.test_umath.assert_arctan2_isnzero(x,y)
numpy.core.tests.test_umath.assert_arctan2_ispinf(x,y)
numpy.core.tests.test_umath.assert_arctan2_ispzero(x,y)
numpy.core.tests.test_umath.assert_hypot_isinf(x,y)
numpy.core.tests.test_umath.assert_hypot_isnan(x,y)
numpy.core.tests.test_umath.bad_arcsinh()
numpy.core.tests.test_umath.floor_divide_and_remainder(x,y)
numpy.core.tests.test_umath.get_glibc_version()
numpy.core.tests.test_umath.on_powerpc()
numpy.core.tests.test_umath.test_complex_nan_comparisons()
numpy.core.tests.test_umath.test_copysign()
numpy.core.tests.test_umath.test_memoverlap_accumulate(ftype)
numpy.core.tests.test_umath.test_nextafter()
numpy.core.tests.test_umath.test_nextafter_0()
numpy.core.tests.test_umath.test_nextafter_vs_spacing()
numpy.core.tests.test_umath.test_nextafterf()
numpy.core.tests.test_umath.test_nextafterl()
numpy.core.tests.test_umath.test_outer_bad_subclass()
numpy.core.tests.test_umath.test_outer_exceeds_maxdims()
numpy.core.tests.test_umath.test_outer_subclass_preserve(arr)
numpy.core.tests.test_umath.test_pos_nan()
numpy.core.tests.test_umath.test_reduceat()
numpy.core.tests.test_umath.test_reduceat_empty()
numpy.core.tests.test_umath.test_rint_big_int()
numpy.core.tests.test_umath.test_signaling_nan_exceptions()
numpy.core.tests.test_umath.test_spacing()
numpy.core.tests.test_umath.test_spacing_gfortran()
numpy.core.tests.test_umath.test_spacingf()
numpy.core.tests.test_umath.test_spacingl()
numpy.tests.test_umath.TestAVXFloat32Transcendental
numpy.tests.test_umath.TestAVXFloat32Transcendental.test_exp_float32(self)
numpy.tests.test_umath.TestAVXFloat32Transcendental.test_log_float32(self)
numpy.tests.test_umath.TestAVXFloat32Transcendental.test_sincos_float32(self)
numpy.tests.test_umath.TestAVXFloat32Transcendental.test_strided_float32(self)
numpy.tests.test_umath.TestAVXUfuncs
numpy.tests.test_umath.TestAVXUfuncs.test_avx_based_ufunc(self)
numpy.tests.test_umath.TestAbsoluteNegative
numpy.tests.test_umath.TestAbsoluteNegative.test_abs_neg_blocked(self)
numpy.tests.test_umath.TestAbsoluteNegative.test_lower_align(self)
numpy.tests.test_umath.TestAdd
numpy.tests.test_umath.TestAdd.test_reduce_alignment(self)
numpy.tests.test_umath.TestArctan2SpecialValues
numpy.tests.test_umath.TestArctan2SpecialValues.test_any_ninf(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_any_pinf(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_inf_any(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_inf_ninf(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_inf_pinf(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_nan_any(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_negative_zero(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_one_one(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_positive_zero(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_zero_negative(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_zero_nzero(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_zero_positive(self)
numpy.tests.test_umath.TestArctan2SpecialValues.test_zero_pzero(self)
numpy.tests.test_umath.TestAttributes
numpy.tests.test_umath.TestAttributes.test_attributes(self)
numpy.tests.test_umath.TestAttributes.test_doc(self)
numpy.tests.test_umath.TestBitwiseUFuncs
numpy.tests.test_umath.TestBitwiseUFuncs.test_identity(self)
numpy.tests.test_umath.TestBitwiseUFuncs.test_reduction(self)
numpy.tests.test_umath.TestBitwiseUFuncs.test_types(self)
numpy.tests.test_umath.TestBitwiseUFuncs.test_values(self)
numpy.tests.test_umath.TestBool
numpy.tests.test_umath.TestBool.test_exceptions(self)
numpy.tests.test_umath.TestBool.test_reduce(self)
numpy.tests.test_umath.TestBool.test_truth_table_bitwise(self)
numpy.tests.test_umath.TestBool.test_truth_table_logical(self)
numpy.tests.test_umath.TestCbrt
numpy.tests.test_umath.TestCbrt.test_cbrt(self)
numpy.tests.test_umath.TestCbrt.test_cbrt_scalar(self)
numpy.tests.test_umath.TestChoose
numpy.tests.test_umath.TestChoose.test_mixed(self)
numpy.tests.test_umath.TestComparisons
numpy.tests.test_umath.TestComparisons.test_ignore_object_identity_in_equal(self)
numpy.tests.test_umath.TestComparisons.test_ignore_object_identity_in_not_equal(self)
numpy.tests.test_umath.TestComplexFunctions
numpy.tests.test_umath.TestComplexFunctions.test_against_cmath(self)
numpy.tests.test_umath.TestComplexFunctions.test_branch_cuts(self)
numpy.tests.test_umath.TestComplexFunctions.test_branch_cuts_complex64(self)
numpy.tests.test_umath.TestComplexFunctions.test_it(self)
numpy.tests.test_umath.TestComplexFunctions.test_loss_of_precision(self,dtype)
numpy.tests.test_umath.TestComplexFunctions.test_precisions_consistent(self)
numpy.tests.test_umath.TestConstants
numpy.tests.test_umath.TestConstants.test_e(self)
numpy.tests.test_umath.TestConstants.test_euler_gamma(self)
numpy.tests.test_umath.TestConstants.test_pi(self)
numpy.tests.test_umath.TestDegrees
numpy.tests.test_umath.TestDegrees.test_degrees(self)
numpy.tests.test_umath.TestDivision
numpy.tests.test_umath.TestDivision.test_division_complex(self)
numpy.tests.test_umath.TestDivision.test_division_int(self)
numpy.tests.test_umath.TestDivision.test_division_int_boundary(self,dtype,ex_val)
numpy.tests.test_umath.TestDivision.test_division_int_reduce(self,dtype,ex_val)
numpy.tests.test_umath.TestDivision.test_division_int_timedelta(self,dividend,divisor,quotient)
numpy.tests.test_umath.TestDivision.test_floor_division_complex(self)
numpy.tests.test_umath.TestDivision.test_floor_division_corner_cases(self,dtype)
numpy.tests.test_umath.TestDivision.test_floor_division_errors(self,dtype)
numpy.tests.test_umath.TestDivision.test_floor_division_signed_zero(self)
numpy.tests.test_umath.TestDivision.test_zero_division_complex(self)
numpy.tests.test_umath.TestExp
numpy.tests.test_umath.TestExp.test_exp_strides(self)
numpy.tests.test_umath.TestExp.test_exp_values(self)
numpy.tests.test_umath.TestExp2
numpy.tests.test_umath.TestExp2.test_exp2_values(self)
numpy.tests.test_umath.TestExpm1
numpy.tests.test_umath.TestExpm1.test_complex(self)
numpy.tests.test_umath.TestExpm1.test_expm1(self)
numpy.tests.test_umath.TestExpm1.test_special(self)
numpy.tests.test_umath.TestFPClass
numpy.tests.test_umath.TestFPClass.test_fpclass(self,stride)
numpy.tests.test_umath.TestFRExp
numpy.tests.test_umath.TestFRExp.test_frexp(self,dtype,stride)
numpy.tests.test_umath.TestFloat_power
numpy.tests.test_umath.TestFloat_power.test_type_conversion(self)
numpy.tests.test_umath.TestFloatingPoint
numpy.tests.test_umath.TestFloatingPoint.test_floating_point(self)
numpy.tests.test_umath.TestFmax(_FilterInvalids)
numpy.tests.test_umath.TestFmax.test_complex_nans(self)
numpy.tests.test_umath.TestFmax.test_float_nans(self)
numpy.tests.test_umath.TestFmax.test_reduce(self)
numpy.tests.test_umath.TestFmax.test_reduce_complex(self)
numpy.tests.test_umath.TestFmin(_FilterInvalids)
numpy.tests.test_umath.TestFmin.test_complex_nans(self)
numpy.tests.test_umath.TestFmin.test_float_nans(self)
numpy.tests.test_umath.TestFmin.test_reduce(self)
numpy.tests.test_umath.TestFmin.test_reduce_complex(self)
numpy.tests.test_umath.TestFrompyfunc
numpy.tests.test_umath.TestFrompyfunc.test_identity(self)
numpy.tests.test_umath.TestHeavside
numpy.tests.test_umath.TestHeavside.test_heaviside(self)
numpy.tests.test_umath.TestHypot
numpy.tests.test_umath.TestHypot.test_reduce(self)
numpy.tests.test_umath.TestHypot.test_simple(self)
numpy.tests.test_umath.TestHypotSpecialValues
numpy.tests.test_umath.TestHypotSpecialValues.test_nan_outputs(self)
numpy.tests.test_umath.TestHypotSpecialValues.test_nan_outputs2(self)
numpy.tests.test_umath.TestHypotSpecialValues.test_no_fpe(self)
numpy.tests.test_umath.TestInt
numpy.tests.test_umath.TestInt.test_logical_not(self)
numpy.tests.test_umath.TestLDExp
numpy.tests.test_umath.TestLDExp.test_ldexp(self,dtype,stride)
numpy.tests.test_umath.TestLdexp
numpy.tests.test_umath.TestLdexp._check_ldexp(self,tp)
numpy.tests.test_umath.TestLdexp.test_ldexp(self)
numpy.tests.test_umath.TestLdexp.test_ldexp_overflow(self)
numpy.tests.test_umath.TestLog
numpy.tests.test_umath.TestLog.test_log_strides(self)
numpy.tests.test_umath.TestLog.test_log_values(self)
numpy.tests.test_umath.TestLog1p
numpy.tests.test_umath.TestLog1p.test_log1p(self)
numpy.tests.test_umath.TestLog1p.test_special(self)
numpy.tests.test_umath.TestLog2
numpy.tests.test_umath.TestLog2.test_log2_ints(self)
numpy.tests.test_umath.TestLog2.test_log2_special(self)
numpy.tests.test_umath.TestLog2.test_log2_values(self)
numpy.tests.test_umath.TestLogAddExp(_FilterInvalids)
numpy.tests.test_umath.TestLogAddExp.test_inf(self)
numpy.tests.test_umath.TestLogAddExp.test_logaddexp_range(self)
numpy.tests.test_umath.TestLogAddExp.test_logaddexp_values(self)
numpy.tests.test_umath.TestLogAddExp.test_nan(self)
numpy.tests.test_umath.TestLogAddExp.test_reduce(self)
numpy.tests.test_umath.TestLogAddExp2(_FilterInvalids)
numpy.tests.test_umath.TestLogAddExp2.test_inf(self)
numpy.tests.test_umath.TestLogAddExp2.test_logaddexp2_range(self)
numpy.tests.test_umath.TestLogAddExp2.test_logaddexp2_values(self)
numpy.tests.test_umath.TestLogAddExp2.test_nan(self)
numpy.tests.test_umath.TestLogAddExp2.test_reduce(self)
numpy.tests.test_umath.TestMaximum(_FilterInvalids)
numpy.tests.test_umath.TestMaximum.test_complex_nans(self)
numpy.tests.test_umath.TestMaximum.test_float_nans(self)
numpy.tests.test_umath.TestMaximum.test_object_array(self)
numpy.tests.test_umath.TestMaximum.test_object_nans(self)
numpy.tests.test_umath.TestMaximum.test_reduce(self)
numpy.tests.test_umath.TestMaximum.test_reduce_complex(self)
numpy.tests.test_umath.TestMaximum.test_strided_array(self)
numpy.tests.test_umath.TestMinMax
numpy.tests.test_umath.TestMinMax.test_lower_align(self)
numpy.tests.test_umath.TestMinMax.test_minimize_no_warns(self)
numpy.tests.test_umath.TestMinMax.test_minmax_blocked(self)
numpy.tests.test_umath.TestMinMax.test_reduce_reorder(self)
numpy.tests.test_umath.TestMinimum(_FilterInvalids)
numpy.tests.test_umath.TestMinimum.test_complex_nans(self)
numpy.tests.test_umath.TestMinimum.test_float_nans(self)
numpy.tests.test_umath.TestMinimum.test_object_array(self)
numpy.tests.test_umath.TestMinimum.test_object_nans(self)
numpy.tests.test_umath.TestMinimum.test_reduce(self)
numpy.tests.test_umath.TestMinimum.test_reduce_complex(self)
numpy.tests.test_umath.TestMinimum.test_strided_array(self)
numpy.tests.test_umath.TestOut
numpy.tests.test_umath.TestOut.test_out_subok(self)
numpy.tests.test_umath.TestOut.test_out_wrap_subok(self)
numpy.tests.test_umath.TestPositive
numpy.tests.test_umath.TestPositive.test_invalid(self)
numpy.tests.test_umath.TestPositive.test_valid(self)
numpy.tests.test_umath.TestPower
numpy.tests.test_umath.TestPower.test_fast_power(self)
numpy.tests.test_umath.TestPower.test_integer_power(self)
numpy.tests.test_umath.TestPower.test_integer_power_of_1(self)
numpy.tests.test_umath.TestPower.test_integer_power_of_zero(self)
numpy.tests.test_umath.TestPower.test_integer_power_with_integer_zero_exponent(self)
numpy.tests.test_umath.TestPower.test_integer_to_negative_power(self)
numpy.tests.test_umath.TestPower.test_power_complex(self)
numpy.tests.test_umath.TestPower.test_power_float(self)
numpy.tests.test_umath.TestPower.test_power_zero(self)
numpy.tests.test_umath.TestRadians
numpy.tests.test_umath.TestRadians.test_radians(self)
numpy.tests.test_umath.TestRationalFunctions
numpy.tests.test_umath.TestRationalFunctions._test_gcd_inner(self,dtype)
numpy.tests.test_umath.TestRationalFunctions._test_lcm_inner(self,dtype)
numpy.tests.test_umath.TestRationalFunctions.test_builtin_long(self)
numpy.tests.test_umath.TestRationalFunctions.test_decimal(self)
numpy.tests.test_umath.TestRationalFunctions.test_float(self)
numpy.tests.test_umath.TestRationalFunctions.test_gcd(self)
numpy.tests.test_umath.TestRationalFunctions.test_gcd_object(self)
numpy.tests.test_umath.TestRationalFunctions.test_gcd_overflow(self)
numpy.tests.test_umath.TestRationalFunctions.test_lcm(self)
numpy.tests.test_umath.TestRationalFunctions.test_lcm_object(self)
numpy.tests.test_umath.TestRationalFunctions.test_lcm_overflow(self)
numpy.tests.test_umath.TestRemainder
numpy.tests.test_umath.TestRemainder.test_float_divmod_corner_cases(self)
numpy.tests.test_umath.TestRemainder.test_float_divmod_errors(self,dtype)
numpy.tests.test_umath.TestRemainder.test_float_remainder_corner_cases(self)
numpy.tests.test_umath.TestRemainder.test_float_remainder_errors(self,dtype,fn)
numpy.tests.test_umath.TestRemainder.test_float_remainder_exact(self)
numpy.tests.test_umath.TestRemainder.test_float_remainder_overflow(self)
numpy.tests.test_umath.TestRemainder.test_float_remainder_roundoff(self)
numpy.tests.test_umath.TestRemainder.test_remainder_basic(self)
numpy.tests.test_umath.TestRoundingFunctions
numpy.tests.test_umath.TestRoundingFunctions.test_fraction(self)
numpy.tests.test_umath.TestRoundingFunctions.test_object_direct(self)
numpy.tests.test_umath.TestRoundingFunctions.test_object_indirect(self)
numpy.tests.test_umath.TestSign
numpy.tests.test_umath.TestSign.test_sign(self)
numpy.tests.test_umath.TestSign.test_sign_dtype_nan_object(self)
numpy.tests.test_umath.TestSign.test_sign_dtype_object(self)
numpy.tests.test_umath.TestSpecialFloats
numpy.tests.test_umath.TestSpecialFloats.test_abs_values(self)
numpy.tests.test_umath.TestSpecialFloats.test_exp_exceptions(self)
numpy.tests.test_umath.TestSpecialFloats.test_exp_values(self)
numpy.tests.test_umath.TestSpecialFloats.test_log_values(self)
numpy.tests.test_umath.TestSpecialFloats.test_reciprocal_values(self)
numpy.tests.test_umath.TestSpecialFloats.test_sincos_values(self)
numpy.tests.test_umath.TestSpecialFloats.test_sqrt_values(self)
numpy.tests.test_umath.TestSpecialFloats.test_square_values(self)
numpy.tests.test_umath.TestSpecialMethods
numpy.tests.test_umath.TestSpecialMethods.test_array_too_many_args(self)
numpy.tests.test_umath.TestSpecialMethods.test_default_prepare(self)
numpy.tests.test_umath.TestSpecialMethods.test_failing_out_wrap(self)
numpy.tests.test_umath.TestSpecialMethods.test_failing_prepare(self)
numpy.tests.test_umath.TestSpecialMethods.test_failing_wrap(self)
numpy.tests.test_umath.TestSpecialMethods.test_gufunc_override(self)
numpy.tests.test_umath.TestSpecialMethods.test_none_wrap(self)
numpy.tests.test_umath.TestSpecialMethods.test_old_wrap(self)
numpy.tests.test_umath.TestSpecialMethods.test_prepare(self)
numpy.tests.test_umath.TestSpecialMethods.test_prepare_out(self)
numpy.tests.test_umath.TestSpecialMethods.test_priority(self)
numpy.tests.test_umath.TestSpecialMethods.test_priority_with_scalar(self)
numpy.tests.test_umath.TestSpecialMethods.test_ufunc_override(self)
numpy.tests.test_umath.TestSpecialMethods.test_ufunc_override_disabled(self)
numpy.tests.test_umath.TestSpecialMethods.test_ufunc_override_exception(self)
numpy.tests.test_umath.TestSpecialMethods.test_ufunc_override_methods(self)
numpy.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro(self)
numpy.tests.test_umath.TestSpecialMethods.test_ufunc_override_not_implemented(self)
numpy.tests.test_umath.TestSpecialMethods.test_ufunc_override_out(self)
numpy.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super(self)
numpy.tests.test_umath.TestSpecialMethods.test_wrap(self)
numpy.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out(self)
numpy.tests.test_umath.TestSpecialMethods.test_wrap_with_iterable(self)
numpy.tests.test_umath.TestSubclass
numpy.tests.test_umath.TestSubclass.test_subclass_op(self)
numpy.tests.test_umath._FilterInvalids
numpy.tests.test_umath._FilterInvalids.setup(self)
numpy.tests.test_umath._FilterInvalids.teardown(self)
numpy.tests.test_umath._check_branch_cut(f,x0,dx,re_sign=1,im_sign=-1,sig_zero_ok=False,dtype=complex)
numpy.tests.test_umath._signs(dt)
numpy.tests.test_umath._test_nextafter(t)
numpy.tests.test_umath._test_spacing(t)
numpy.tests.test_umath.assert_arctan2_isnan(x,y)
numpy.tests.test_umath.assert_arctan2_isninf(x,y)
numpy.tests.test_umath.assert_arctan2_isnzero(x,y)
numpy.tests.test_umath.assert_arctan2_ispinf(x,y)
numpy.tests.test_umath.assert_arctan2_ispzero(x,y)
numpy.tests.test_umath.assert_hypot_isinf(x,y)
numpy.tests.test_umath.assert_hypot_isnan(x,y)
numpy.tests.test_umath.bad_arcsinh()
numpy.tests.test_umath.floor_divide_and_remainder(x,y)
numpy.tests.test_umath.get_glibc_version()
numpy.tests.test_umath.on_powerpc()
numpy.tests.test_umath.test_complex_nan_comparisons()
numpy.tests.test_umath.test_copysign()
numpy.tests.test_umath.test_memoverlap_accumulate(ftype)
numpy.tests.test_umath.test_nextafter()
numpy.tests.test_umath.test_nextafter_0()
numpy.tests.test_umath.test_nextafter_vs_spacing()
numpy.tests.test_umath.test_nextafterf()
numpy.tests.test_umath.test_nextafterl()
numpy.tests.test_umath.test_outer_bad_subclass()
numpy.tests.test_umath.test_outer_exceeds_maxdims()
numpy.tests.test_umath.test_outer_subclass_preserve(arr)
numpy.tests.test_umath.test_pos_nan()
numpy.tests.test_umath.test_reduceat()
numpy.tests.test_umath.test_reduceat_empty()
numpy.tests.test_umath.test_rint_big_int()
numpy.tests.test_umath.test_signaling_nan_exceptions()
numpy.tests.test_umath.test_spacing()
numpy.tests.test_umath.test_spacing_gfortran()
numpy.tests.test_umath.test_spacingf()
numpy.tests.test_umath.test_spacingl()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_argparse.py----------------------------------------
A:numpy.core.tests.test_argparse.arg2->numpy.unicode_('arg2')
A:numpy.core.tests.test_argparse.missing_arg->numpy.unicode_('missing_arg')
numpy.core.tests.test_argparse.test_invalid_integers()
numpy.core.tests.test_argparse.test_missing_arguments()
numpy.core.tests.test_argparse.test_multiple_values()
numpy.core.tests.test_argparse.test_string_fallbacks()
numpy.core.tests.test_argparse.test_too_many_positional()
numpy.tests.test_argparse.test_invalid_integers()
numpy.tests.test_argparse.test_missing_arguments()
numpy.tests.test_argparse.test_multiple_values()
numpy.tests.test_argparse.test_string_fallbacks()
numpy.tests.test_argparse.test_too_many_positional()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_extint128.py----------------------------------------
A:numpy.core.tests.test_extint128.c->numpy.core._multiarray_tests.extint_shr_128(a)
A:numpy.core.tests.test_extint128.d->numpy.core._multiarray_tests.extint_ceildiv_128_64(a, b)
A:numpy.core.tests.test_extint128.b->numpy.core._multiarray_tests.extint_to_64(a)
A:numpy.core.tests.test_extint128.(c, cr)->divmod(-a, b)
A:numpy.core.tests.test_extint128.(d, dr)->numpy.core._multiarray_tests.extint_divmod_128_64(a, b)
numpy.core.tests.test_extint128.exc_iter(*args)
numpy.core.tests.test_extint128.test_add_128()
numpy.core.tests.test_extint128.test_ceildiv_128_64()
numpy.core.tests.test_extint128.test_divmod_128_64()
numpy.core.tests.test_extint128.test_floordiv_128_64()
numpy.core.tests.test_extint128.test_gt_128()
numpy.core.tests.test_extint128.test_mul_64_64()
numpy.core.tests.test_extint128.test_neg_128()
numpy.core.tests.test_extint128.test_safe_binop()
numpy.core.tests.test_extint128.test_shl_128()
numpy.core.tests.test_extint128.test_shr_128()
numpy.core.tests.test_extint128.test_sub_128()
numpy.core.tests.test_extint128.test_to_128()
numpy.core.tests.test_extint128.test_to_64()
numpy.tests.test_extint128.exc_iter(*args)
numpy.tests.test_extint128.test_add_128()
numpy.tests.test_extint128.test_ceildiv_128_64()
numpy.tests.test_extint128.test_divmod_128_64()
numpy.tests.test_extint128.test_floordiv_128_64()
numpy.tests.test_extint128.test_gt_128()
numpy.tests.test_extint128.test_mul_64_64()
numpy.tests.test_extint128.test_neg_128()
numpy.tests.test_extint128.test_safe_binop()
numpy.tests.test_extint128.test_shl_128()
numpy.tests.test_extint128.test_shr_128()
numpy.tests.test_extint128.test_sub_128()
numpy.tests.test_extint128.test_to_128()
numpy.tests.test_extint128.test_to_64()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_numerictypes.py----------------------------------------
A:numpy.core.tests.test_numerictypes.l->normalize_descr(dtype)
A:numpy.core.tests.test_numerictypes.h->numpy.array(self._buffer, dtype=self._descr)
A:numpy.core.tests.test_numerictypes.a->numpy.arange(10, dtype=np.float32)
A:numpy.core.tests.test_numerictypes.res->self.ary[['f0', 'f2']].tolist()
A:numpy.core.tests.test_numerictypes.self.ary->numpy.array([(1, 2, 3, 4), (5, 6, 7, 8)], dtype='i4,f4,i2,c8')
A:numpy.core.tests.test_numerictypes.actual->numpy.issctype(rep)
numpy.core.tests.test_numerictypes.CreateValues
numpy.core.tests.test_numerictypes.CreateValues.test_list_of_list_of_tuple(self)
numpy.core.tests.test_numerictypes.CreateValues.test_list_of_tuple(self)
numpy.core.tests.test_numerictypes.CreateValues.test_tuple(self)
numpy.core.tests.test_numerictypes.CreateZeros
numpy.core.tests.test_numerictypes.CreateZeros.test_zeros0D(self)
numpy.core.tests.test_numerictypes.CreateZeros.test_zerosMD(self)
numpy.core.tests.test_numerictypes.CreateZeros.test_zerosSD(self)
numpy.core.tests.test_numerictypes.ReadValuesNested
numpy.core.tests.test_numerictypes.ReadValuesNested.test_access_top_fields(self)
numpy.core.tests.test_numerictypes.ReadValuesNested.test_nested1_acessors(self)
numpy.core.tests.test_numerictypes.ReadValuesNested.test_nested1_descriptor(self)
numpy.core.tests.test_numerictypes.ReadValuesNested.test_nested2_acessors(self)
numpy.core.tests.test_numerictypes.ReadValuesNested.test_nested2_descriptor(self)
numpy.core.tests.test_numerictypes.ReadValuesPlain
numpy.core.tests.test_numerictypes.ReadValuesPlain.test_access_fields(self)
numpy.core.tests.test_numerictypes.TestBitName
numpy.core.tests.test_numerictypes.TestBitName.test_abstract(self)
numpy.core.tests.test_numerictypes.TestCommonType
numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_loses1(self)
numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_loses2(self)
numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_wins(self)
numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_wins2(self)
numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_wins3(self)
numpy.core.tests.test_numerictypes.TestCreateValuesNestedMultiple(CreateValues)
numpy.core.tests.test_numerictypes.TestCreateValuesNestedSingle(CreateValues)
numpy.core.tests.test_numerictypes.TestCreateValuesPlainMultiple(CreateValues)
numpy.core.tests.test_numerictypes.TestCreateValuesPlainSingle(CreateValues)
numpy.core.tests.test_numerictypes.TestCreateZerosNested(CreateZeros)
numpy.core.tests.test_numerictypes.TestCreateZerosPlain(CreateZeros)
numpy.core.tests.test_numerictypes.TestDocStrings
numpy.core.tests.test_numerictypes.TestDocStrings.test_platform_dependent_aliases(self)
numpy.core.tests.test_numerictypes.TestEmptyField
numpy.core.tests.test_numerictypes.TestEmptyField.test_assign(self)
numpy.core.tests.test_numerictypes.TestIsSubDType
numpy.core.tests.test_numerictypes.TestIsSubDType.test_both_abstract(self)
numpy.core.tests.test_numerictypes.TestIsSubDType.test_nondtype_nonscalartype(self)
numpy.core.tests.test_numerictypes.TestIsSubDType.test_same(self)
numpy.core.tests.test_numerictypes.TestIsSubDType.test_sibling_class(self)
numpy.core.tests.test_numerictypes.TestIsSubDType.test_subclass(self)
numpy.core.tests.test_numerictypes.TestIsSubDType.test_subclass_backwards(self)
numpy.core.tests.test_numerictypes.TestMaximumSctype
numpy.core.tests.test_numerictypes.TestMaximumSctype.test_complex(self,t)
numpy.core.tests.test_numerictypes.TestMaximumSctype.test_float(self,t)
numpy.core.tests.test_numerictypes.TestMaximumSctype.test_int(self,t)
numpy.core.tests.test_numerictypes.TestMaximumSctype.test_other(self,t)
numpy.core.tests.test_numerictypes.TestMaximumSctype.test_uint(self,t)
numpy.core.tests.test_numerictypes.TestMultipleFields
numpy.core.tests.test_numerictypes.TestMultipleFields._bad_call(self)
numpy.core.tests.test_numerictypes.TestMultipleFields.setup(self)
numpy.core.tests.test_numerictypes.TestMultipleFields.test_no_tuple(self)
numpy.core.tests.test_numerictypes.TestMultipleFields.test_return(self)
numpy.core.tests.test_numerictypes.TestReadValuesNestedMultiple(ReadValuesNested)
numpy.core.tests.test_numerictypes.TestReadValuesNestedSingle(ReadValuesNested)
numpy.core.tests.test_numerictypes.TestReadValuesPlainMultiple(ReadValuesPlain)
numpy.core.tests.test_numerictypes.TestReadValuesPlainSingle(ReadValuesPlain)
numpy.core.tests.test_numerictypes.TestScalarTypeNames
numpy.core.tests.test_numerictypes.TestScalarTypeNames.test_names_are_undersood_by_dtype(self,t)
numpy.core.tests.test_numerictypes.TestScalarTypeNames.test_names_are_unique(self)
numpy.core.tests.test_numerictypes.TestScalarTypeNames.test_names_reflect_attributes(self,t)
numpy.core.tests.test_numerictypes.TestSctypeDict
numpy.core.tests.test_numerictypes.TestSctypeDict.test_longdouble(self)
numpy.core.tests.test_numerictypes.Test_sctype2char
numpy.core.tests.test_numerictypes.Test_sctype2char.test_abstract_type(self)
numpy.core.tests.test_numerictypes.Test_sctype2char.test_array_instance(self)
numpy.core.tests.test_numerictypes.Test_sctype2char.test_non_type(self)
numpy.core.tests.test_numerictypes.Test_sctype2char.test_other_type(self)
numpy.core.tests.test_numerictypes.Test_sctype2char.test_scalar_type(self)
numpy.core.tests.test_numerictypes.Test_sctype2char.test_third_party_scalar_type(self)
numpy.core.tests.test_numerictypes.normalize_descr(descr)
numpy.core.tests.test_numerictypes.test_issctype(rep,expected)
numpy.tests.test_numerictypes.CreateValues
numpy.tests.test_numerictypes.CreateValues.test_list_of_list_of_tuple(self)
numpy.tests.test_numerictypes.CreateValues.test_list_of_tuple(self)
numpy.tests.test_numerictypes.CreateValues.test_tuple(self)
numpy.tests.test_numerictypes.CreateZeros
numpy.tests.test_numerictypes.CreateZeros.test_zeros0D(self)
numpy.tests.test_numerictypes.CreateZeros.test_zerosMD(self)
numpy.tests.test_numerictypes.CreateZeros.test_zerosSD(self)
numpy.tests.test_numerictypes.ReadValuesNested
numpy.tests.test_numerictypes.ReadValuesNested.test_access_top_fields(self)
numpy.tests.test_numerictypes.ReadValuesNested.test_nested1_acessors(self)
numpy.tests.test_numerictypes.ReadValuesNested.test_nested1_descriptor(self)
numpy.tests.test_numerictypes.ReadValuesNested.test_nested2_acessors(self)
numpy.tests.test_numerictypes.ReadValuesNested.test_nested2_descriptor(self)
numpy.tests.test_numerictypes.ReadValuesPlain
numpy.tests.test_numerictypes.ReadValuesPlain.test_access_fields(self)
numpy.tests.test_numerictypes.TestBitName
numpy.tests.test_numerictypes.TestBitName.test_abstract(self)
numpy.tests.test_numerictypes.TestCommonType
numpy.tests.test_numerictypes.TestCommonType.test_scalar_loses1(self)
numpy.tests.test_numerictypes.TestCommonType.test_scalar_loses2(self)
numpy.tests.test_numerictypes.TestCommonType.test_scalar_wins(self)
numpy.tests.test_numerictypes.TestCommonType.test_scalar_wins2(self)
numpy.tests.test_numerictypes.TestCommonType.test_scalar_wins3(self)
numpy.tests.test_numerictypes.TestCreateValuesNestedMultiple(CreateValues)
numpy.tests.test_numerictypes.TestCreateValuesNestedSingle(CreateValues)
numpy.tests.test_numerictypes.TestCreateValuesPlainMultiple(CreateValues)
numpy.tests.test_numerictypes.TestCreateValuesPlainSingle(CreateValues)
numpy.tests.test_numerictypes.TestCreateZerosNested(CreateZeros)
numpy.tests.test_numerictypes.TestCreateZerosPlain(CreateZeros)
numpy.tests.test_numerictypes.TestDocStrings
numpy.tests.test_numerictypes.TestDocStrings.test_platform_dependent_aliases(self)
numpy.tests.test_numerictypes.TestEmptyField
numpy.tests.test_numerictypes.TestEmptyField.test_assign(self)
numpy.tests.test_numerictypes.TestIsSubDType
numpy.tests.test_numerictypes.TestIsSubDType.test_both_abstract(self)
numpy.tests.test_numerictypes.TestIsSubDType.test_nondtype_nonscalartype(self)
numpy.tests.test_numerictypes.TestIsSubDType.test_same(self)
numpy.tests.test_numerictypes.TestIsSubDType.test_sibling_class(self)
numpy.tests.test_numerictypes.TestIsSubDType.test_subclass(self)
numpy.tests.test_numerictypes.TestIsSubDType.test_subclass_backwards(self)
numpy.tests.test_numerictypes.TestMaximumSctype
numpy.tests.test_numerictypes.TestMaximumSctype.test_complex(self,t)
numpy.tests.test_numerictypes.TestMaximumSctype.test_float(self,t)
numpy.tests.test_numerictypes.TestMaximumSctype.test_int(self,t)
numpy.tests.test_numerictypes.TestMaximumSctype.test_other(self,t)
numpy.tests.test_numerictypes.TestMaximumSctype.test_uint(self,t)
numpy.tests.test_numerictypes.TestMultipleFields
numpy.tests.test_numerictypes.TestMultipleFields._bad_call(self)
numpy.tests.test_numerictypes.TestMultipleFields.setup(self)
numpy.tests.test_numerictypes.TestMultipleFields.test_no_tuple(self)
numpy.tests.test_numerictypes.TestMultipleFields.test_return(self)
numpy.tests.test_numerictypes.TestReadValuesNestedMultiple(ReadValuesNested)
numpy.tests.test_numerictypes.TestReadValuesNestedSingle(ReadValuesNested)
numpy.tests.test_numerictypes.TestReadValuesPlainMultiple(ReadValuesPlain)
numpy.tests.test_numerictypes.TestReadValuesPlainSingle(ReadValuesPlain)
numpy.tests.test_numerictypes.TestScalarTypeNames
numpy.tests.test_numerictypes.TestScalarTypeNames.test_names_are_undersood_by_dtype(self,t)
numpy.tests.test_numerictypes.TestScalarTypeNames.test_names_are_unique(self)
numpy.tests.test_numerictypes.TestScalarTypeNames.test_names_reflect_attributes(self,t)
numpy.tests.test_numerictypes.TestSctypeDict
numpy.tests.test_numerictypes.TestSctypeDict.test_longdouble(self)
numpy.tests.test_numerictypes.Test_sctype2char
numpy.tests.test_numerictypes.Test_sctype2char.test_abstract_type(self)
numpy.tests.test_numerictypes.Test_sctype2char.test_array_instance(self)
numpy.tests.test_numerictypes.Test_sctype2char.test_non_type(self)
numpy.tests.test_numerictypes.Test_sctype2char.test_other_type(self)
numpy.tests.test_numerictypes.Test_sctype2char.test_scalar_type(self)
numpy.tests.test_numerictypes.Test_sctype2char.test_third_party_scalar_type(self)
numpy.tests.test_numerictypes.normalize_descr(descr)
numpy.tests.test_numerictypes.test_issctype(rep,expected)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_cpu_dispatcher.py----------------------------------------
A:numpy.core.tests.test_cpu_dispatcher.test->numpy.core._umath_tests.test_dispatch()
numpy.core.tests.test_cpu_dispatcher.test_dispatcher()
numpy.tests.test_cpu_dispatcher.test_dispatcher()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_umath_complex.py----------------------------------------
A:numpy.core.tests.test_umath_complex.platform_skip->pytest.mark.skipif(xfail_complex_tests, reason='Inadequate C99 complex support')
A:numpy.core.tests.test_umath_complex.z->numpy.sqrt(np.array(complex(-np.inf, np.nan)))
A:numpy.core.tests.test_umath_complex.x->numpy.array([complex(np.nan, np.NZERO)], dtype=complex)
A:numpy.core.tests.test_umath_complex.y->numpy.abs(x)
A:numpy.core.tests.test_umath_complex.xa->numpy.array(x, dtype=complex)
A:numpy.core.tests.test_umath_complex.ya->numpy.array(yl, dtype=complex)
A:numpy.core.tests.test_umath_complex.ref->g(x[i], y[i])
A:numpy.core.tests.test_umath_complex.self.olderr->numpy.seterr(invalid='ignore')
A:numpy.core.tests.test_umath_complex.lx->list(range(len(x)))
A:numpy.core.tests.test_umath_complex.p_r[4]->complex(np.inf, np.nan)
A:numpy.core.tests.test_umath_complex.y_r->numpy.array([np.sqrt(2.0), 2, np.sqrt(5), np.inf, np.nan])
A:numpy.core.tests.test_umath_complex.z1->numpy.array([complex(x1, y1)])
A:numpy.core.tests.test_umath_complex.z2->complex(x2, y2)
A:numpy.core.tests.test_umath_complex.arr->numpy.ones(arraysize, dtype=astype)
A:numpy.core.tests.test_umath_complex.abs_true->numpy.ones(arraysize, dtype=arr.real.dtype)
A:numpy.core.tests.test_umath_complex.sq_true->numpy.array([complex(np.nan, np.nan), complex(np.nan, np.nan), complex(np.nan, np.nan), complex(np.nan, np.inf), complex(-np.inf, np.nan), complex(np.inf, np.nan), complex(0.0, 0.0), complex(np.nan, np.nan), complex(np.nan, np.nan)], dtype=astype)
A:numpy.core.tests.test_umath_complex.vec->numpy.array([(0, 0.0, 0, -31.666483, 200, 0.0, 0.0, 1.0, 3.0 + 4j, 613090), (1, 0.0, 0, 260.91525, 42, 0.0, 0.0, 1.0, 5.0 + 12j, 787315), (1, 0.0, 0, 52.15155, 42, 0.0, 0.0, 1.0, 8.0 + 15j, 806641), (1, 0.0, 0, 52.430195, 42, 0.0, 0.0, 1.0, 7.0 + 24j, 1363540), (2, 0.0, 0, 304.43646, 58, 0.0, 0.0, 1.0, 20.0 + 21j, 787323), (3, 0.0, 0, 299.42108, 52, 0.0, 0.0, 1.0, 12.0 + 35j, 787332), (4, 0.0, 0, 39.4836, 28, 0.0, 0.0, 9.182192, 9.0 + 40j, 787304), (4, 0.0, 0, 76.83787, 28, 0.0, 0.0, 1.0, 28.0 + 45j, 1321869), (5, 0.0, 0, 143.26366, 24, 0.0, 0.0, 10.996129, 11.0 + 60j, 787299)], dtype=dtype)
A:numpy.core.tests.test_umath_complex.myfunc->getattr(np, func)
A:numpy.core.tests.test_umath_complex.g->myfunc(a[::stride])
A:numpy.core.tests.test_umath_complex.b->vec['mycomplex'].copy()
A:numpy.core.tests.test_umath_complex.h->myfunc(b[::stride])
numpy.core.tests.test_umath_complex.TestCabs
numpy.core.tests.test_umath_complex.TestCabs.setup(self)
numpy.core.tests.test_umath_complex.TestCabs.teardown(self)
numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan(self)
numpy.core.tests.test_umath_complex.TestCabs.test_fabs(self)
numpy.core.tests.test_umath_complex.TestCabs.test_simple(self)
numpy.core.tests.test_umath_complex.TestCarg
numpy.core.tests.test_umath_complex.TestCarg.test_simple(self)
numpy.core.tests.test_umath_complex.TestCarg.test_special_values(self)
numpy.core.tests.test_umath_complex.TestCarg.test_zero(self)
numpy.core.tests.test_umath_complex.TestCexp
numpy.core.tests.test_umath_complex.TestCexp.test_simple(self)
numpy.core.tests.test_umath_complex.TestCexp.test_special_values(self)
numpy.core.tests.test_umath_complex.TestCexp.test_special_values2(self)
numpy.core.tests.test_umath_complex.TestClog
numpy.core.tests.test_umath_complex.TestClog.test_simple(self)
numpy.core.tests.test_umath_complex.TestClog.test_special_values(self)
numpy.core.tests.test_umath_complex.TestComplexAbsoluteAVX
numpy.core.tests.test_umath_complex.TestComplexAbsoluteAVX.test_array(self,arraysize,stride,astype)
numpy.core.tests.test_umath_complex.TestComplexAbsoluteMixedDTypes
numpy.core.tests.test_umath_complex.TestComplexAbsoluteMixedDTypes.test_array(self,stride,astype,func)
numpy.core.tests.test_umath_complex.TestCpow
numpy.core.tests.test_umath_complex.TestCpow.setup(self)
numpy.core.tests.test_umath_complex.TestCpow.teardown(self)
numpy.core.tests.test_umath_complex.TestCpow.test_array(self)
numpy.core.tests.test_umath_complex.TestCpow.test_scalar(self)
numpy.core.tests.test_umath_complex.TestCpow.test_simple(self)
numpy.core.tests.test_umath_complex.TestCsqrt
numpy.core.tests.test_umath_complex.TestCsqrt.test_simple(self)
numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate(self)
numpy.core.tests.test_umath_complex.TestCsqrt.test_special_values(self)
numpy.core.tests.test_umath_complex.TestSpecialComplexAVX
numpy.core.tests.test_umath_complex.TestSpecialComplexAVX.test_array(self,stride,astype)
numpy.core.tests.test_umath_complex.check_complex_value(f,x1,y1,x2,y2,exact=True)
numpy.core.tests.test_umath_complex.check_real_value(f,x1,y1,x,exact=True)
numpy.tests.test_umath_complex.TestCabs
numpy.tests.test_umath_complex.TestCabs.setup(self)
numpy.tests.test_umath_complex.TestCabs.teardown(self)
numpy.tests.test_umath_complex.TestCabs.test_cabs_inf_nan(self)
numpy.tests.test_umath_complex.TestCabs.test_fabs(self)
numpy.tests.test_umath_complex.TestCabs.test_simple(self)
numpy.tests.test_umath_complex.TestCarg
numpy.tests.test_umath_complex.TestCarg.test_simple(self)
numpy.tests.test_umath_complex.TestCarg.test_special_values(self)
numpy.tests.test_umath_complex.TestCarg.test_zero(self)
numpy.tests.test_umath_complex.TestCexp
numpy.tests.test_umath_complex.TestCexp.test_simple(self)
numpy.tests.test_umath_complex.TestCexp.test_special_values(self)
numpy.tests.test_umath_complex.TestCexp.test_special_values2(self)
numpy.tests.test_umath_complex.TestClog
numpy.tests.test_umath_complex.TestClog.test_simple(self)
numpy.tests.test_umath_complex.TestClog.test_special_values(self)
numpy.tests.test_umath_complex.TestComplexAbsoluteAVX
numpy.tests.test_umath_complex.TestComplexAbsoluteAVX.test_array(self,arraysize,stride,astype)
numpy.tests.test_umath_complex.TestComplexAbsoluteMixedDTypes
numpy.tests.test_umath_complex.TestComplexAbsoluteMixedDTypes.test_array(self,stride,astype,func)
numpy.tests.test_umath_complex.TestCpow
numpy.tests.test_umath_complex.TestCpow.setup(self)
numpy.tests.test_umath_complex.TestCpow.teardown(self)
numpy.tests.test_umath_complex.TestCpow.test_array(self)
numpy.tests.test_umath_complex.TestCpow.test_scalar(self)
numpy.tests.test_umath_complex.TestCpow.test_simple(self)
numpy.tests.test_umath_complex.TestCsqrt
numpy.tests.test_umath_complex.TestCsqrt.test_simple(self)
numpy.tests.test_umath_complex.TestCsqrt.test_simple_conjugate(self)
numpy.tests.test_umath_complex.TestCsqrt.test_special_values(self)
numpy.tests.test_umath_complex.TestSpecialComplexAVX
numpy.tests.test_umath_complex.TestSpecialComplexAVX.test_array(self,stride,astype)
numpy.tests.test_umath_complex.check_complex_value(f,x1,y1,x2,y2,exact=True)
numpy.tests.test_umath_complex.check_real_value(f,x1,y1,x,exact=True)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_cython.py----------------------------------------
A:numpy.core.tests.test_cython.required_version->LooseVersion('0.29.21')
A:numpy.core.tests.test_cython.pytestmark->pytest.mark.skipif(cython is None, reason='requires cython')
A:numpy.core.tests.test_cython.here->os.path.dirname(__file__)
A:numpy.core.tests.test_cython.ext_dir->os.path.join(here, 'examples')
A:numpy.core.tests.test_cython.cytest->str(tmp_path / 'cytest')
A:numpy.core.tests.test_cython.install_log->str(tmp_path / 'tmp_install_log.txt')
A:numpy.core.tests.test_cython.dt64->numpy.datetime64('2016-01-01', 'ns')
A:numpy.core.tests.test_cython.result->checks.get_dt64_unit(td64)
A:numpy.core.tests.test_cython.expected->numpy.timedelta64(12345, 'h').view('i8')
A:numpy.core.tests.test_cython.td64->numpy.timedelta64(12345, 'h')
numpy.core.tests.test_cython.install_temp(request,tmp_path)
numpy.core.tests.test_cython.test_abstract_scalars(install_temp)
numpy.core.tests.test_cython.test_get_datetime64_unit(install_temp)
numpy.core.tests.test_cython.test_get_datetime64_value(install_temp)
numpy.core.tests.test_cython.test_get_timedelta64_value(install_temp)
numpy.core.tests.test_cython.test_is_datetime64_object(install_temp)
numpy.core.tests.test_cython.test_is_timedelta64_object(install_temp)
numpy.tests.test_cython.install_temp(request,tmp_path)
numpy.tests.test_cython.test_abstract_scalars(install_temp)
numpy.tests.test_cython.test_get_datetime64_unit(install_temp)
numpy.tests.test_cython.test_get_datetime64_value(install_temp)
numpy.tests.test_cython.test_get_timedelta64_value(install_temp)
numpy.tests.test_cython.test_is_datetime64_object(install_temp)
numpy.tests.test_cython.test_is_timedelta64_object(install_temp)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/_locales.py----------------------------------------
A:numpy.core.tests._locales.old_locale->locale.getlocale(locale.LC_NUMERIC)
A:numpy.core.tests._locales.(cur_locale, tst_locale)->find_comma_decimal_point_locale()
numpy.core.tests._locales.CommaDecimalPointLocale
numpy.core.tests._locales.CommaDecimalPointLocale.__enter__(self)
numpy.core.tests._locales.CommaDecimalPointLocale.__exit__(self,type,value,traceback)
numpy.core.tests._locales.CommaDecimalPointLocale.setup(self)
numpy.core.tests._locales.CommaDecimalPointLocale.teardown(self)
numpy.core.tests._locales.find_comma_decimal_point_locale()
numpy.tests._locales.CommaDecimalPointLocale
numpy.tests._locales.CommaDecimalPointLocale.__enter__(self)
numpy.tests._locales.CommaDecimalPointLocale.__exit__(self,type,value,traceback)
numpy.tests._locales.CommaDecimalPointLocale.setup(self)
numpy.tests._locales.CommaDecimalPointLocale.teardown(self)
numpy.tests._locales.find_comma_decimal_point_locale()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_overrides.py----------------------------------------
A:numpy.core.tests.test_overrides.requires_array_function->pytest.mark.skipif(not ARRAY_FUNCTION_ENABLED, reason='__array_function__ dispatch not enabled.')
A:numpy.core.tests.test_overrides.array->numpy.array(1).view(MyArray)
A:numpy.core.tests.test_overrides.args->_get_implementing_args([array, other])
A:numpy.core.tests.test_overrides.override_sub->numpy.array(1).view(MyArray).view(OverrideSub)
A:numpy.core.tests.test_overrides.no_override_sub->numpy.array(1).view(MyArray).view(NoOverrideSub)
A:numpy.core.tests.test_overrides.other->Other()
A:numpy.core.tests.test_overrides.subarray->numpy.array(1).view(OverrideSub)
A:numpy.core.tests.test_overrides.a->A()
A:numpy.core.tests.test_overrides.b->B()
A:numpy.core.tests.test_overrides.c->C()
A:numpy.core.tests.test_overrides.d->D()
A:numpy.core.tests.test_overrides.namespace->dict(__array_function__=_return_not_implemented)
A:numpy.core.tests.test_overrides.actual->_get_implementing_args(relevant_args[:32])
A:numpy.core.tests.test_overrides.result->numpy.sum(proxy)
A:numpy.core.tests.test_overrides.expected->numpy.concatenate((array, array))
A:numpy.core.tests.test_overrides.roundtripped->numpy.compat.pickle.loads(pickle.dumps(dispatched_one_arg, protocol=proto))
A:numpy.core.tests.test_overrides.original->MyArray()
A:numpy.core.tests.test_overrides.(obj, func, types, args, kwargs)->dispatched_one_arg(original)
A:numpy.core.tests.test_overrides.(MyArray, implements)->_new_duck_type_and_implements()
A:numpy.core.tests.test_overrides.signature->inspect.signature(np.sum)
A:numpy.core.tests.test_overrides.proxy->ArrayProxy(mock.Mock(spec=ArrayProxy))
A:numpy.core.tests.test_overrides.my_func->getattr(self.MyArray, function)
A:numpy.core.tests.test_overrides.ref->self.MyArray.array()
A:numpy.core.tests.test_overrides.array_like->numpy.fromfile(fname, like=ref)
A:numpy.core.tests.test_overrides.np_func->getattr(np, function)
A:numpy.core.tests.test_overrides.like_args->tuple((a() if callable(a) else a for a in args))
A:numpy.core.tests.test_overrides.np_args->tuple((a() if callable(a) else a for a in args))
A:numpy.core.tests.test_overrides.np_arr->np_func(*np_args, **kwargs)
A:numpy.core.tests.test_overrides.data->numpy.random.random(5)
A:numpy.core.tests.test_overrides.fname->os.path.join(tmpdir, 'testfile')
A:numpy.core.tests.test_overrides.np_res->numpy.fromfile(fname, like=ref)
numpy.core.tests.test_overrides.TestArrayFunctionDispatch
numpy.core.tests.test_overrides.TestArrayFunctionDispatch.test_interface(self)
numpy.core.tests.test_overrides.TestArrayFunctionDispatch.test_name_and_docstring(self)
numpy.core.tests.test_overrides.TestArrayFunctionDispatch.test_not_implemented(self)
numpy.core.tests.test_overrides.TestArrayFunctionDispatch.test_pickle(self)
numpy.core.tests.test_overrides.TestArrayFunctionImplementation
numpy.core.tests.test_overrides.TestArrayFunctionImplementation.test_not_implemented(self)
numpy.core.tests.test_overrides.TestArrayFunctionImplementation.test_one_arg(self)
numpy.core.tests.test_overrides.TestArrayFunctionImplementation.test_optional_args(self)
numpy.core.tests.test_overrides.TestArrayLike
numpy.core.tests.test_overrides.TestArrayLike.add_method(self,name,arr_class,enable_value_error=False)
numpy.core.tests.test_overrides.TestArrayLike.func_args(*args,**kwargs)
numpy.core.tests.test_overrides.TestArrayLike.setup(self)
numpy.core.tests.test_overrides.TestArrayLike.test_array_like(self,function,args,kwargs,numpy_ref)
numpy.core.tests.test_overrides.TestArrayLike.test_array_like_fromfile(self,numpy_ref)
numpy.core.tests.test_overrides.TestArrayLike.test_array_like_not_implemented(self)
numpy.core.tests.test_overrides.TestArrayLike.test_exception_handling(self)
numpy.core.tests.test_overrides.TestArrayLike.test_no_array_function_like(self,function,args,kwargs,ref)
numpy.core.tests.test_overrides.TestGetImplementingArgs
numpy.core.tests.test_overrides.TestGetImplementingArgs.test_many_duck_arrays(self)
numpy.core.tests.test_overrides.TestGetImplementingArgs.test_ndarray(self)
numpy.core.tests.test_overrides.TestGetImplementingArgs.test_ndarray_and_duck_array(self)
numpy.core.tests.test_overrides.TestGetImplementingArgs.test_ndarray_subclass_and_duck_array(self)
numpy.core.tests.test_overrides.TestGetImplementingArgs.test_ndarray_subclasses(self)
numpy.core.tests.test_overrides.TestGetImplementingArgs.test_too_many_duck_arrays(self)
numpy.core.tests.test_overrides.TestNDArrayArrayFunction
numpy.core.tests.test_overrides.TestNDArrayArrayFunction.test_method(self)
numpy.core.tests.test_overrides.TestNDArrayArrayFunction.test_no_wrapper(self)
numpy.core.tests.test_overrides.TestNDArrayMethods
numpy.core.tests.test_overrides.TestNDArrayMethods.test_repr(self)
numpy.core.tests.test_overrides.TestNumPyFunctions
numpy.core.tests.test_overrides.TestNumPyFunctions.test_inspect_sum(self)
numpy.core.tests.test_overrides.TestNumPyFunctions.test_override_sum(self)
numpy.core.tests.test_overrides.TestNumPyFunctions.test_set_module(self)
numpy.core.tests.test_overrides.TestNumPyFunctions.test_sum_forwarding_implementation(self)
numpy.core.tests.test_overrides.TestNumPyFunctions.test_sum_on_mock_array(self)
numpy.core.tests.test_overrides.TestVerifyMatchingSignatures
numpy.core.tests.test_overrides.TestVerifyMatchingSignatures.test_array_function_dispatch(self)
numpy.core.tests.test_overrides.TestVerifyMatchingSignatures.test_verify_matching_signatures(self)
numpy.core.tests.test_overrides._new_duck_type_and_implements()
numpy.core.tests.test_overrides._return_not_implemented(self,*args,**kwargs)
numpy.core.tests.test_overrides.dispatched_one_arg(array)
numpy.core.tests.test_overrides.dispatched_two_arg(array1,array2)
numpy.tests.test_overrides.TestArrayFunctionDispatch
numpy.tests.test_overrides.TestArrayFunctionDispatch.test_interface(self)
numpy.tests.test_overrides.TestArrayFunctionDispatch.test_name_and_docstring(self)
numpy.tests.test_overrides.TestArrayFunctionDispatch.test_not_implemented(self)
numpy.tests.test_overrides.TestArrayFunctionDispatch.test_pickle(self)
numpy.tests.test_overrides.TestArrayFunctionImplementation
numpy.tests.test_overrides.TestArrayFunctionImplementation.test_not_implemented(self)
numpy.tests.test_overrides.TestArrayFunctionImplementation.test_one_arg(self)
numpy.tests.test_overrides.TestArrayFunctionImplementation.test_optional_args(self)
numpy.tests.test_overrides.TestArrayLike
numpy.tests.test_overrides.TestArrayLike.add_method(self,name,arr_class,enable_value_error=False)
numpy.tests.test_overrides.TestArrayLike.func_args(*args,**kwargs)
numpy.tests.test_overrides.TestArrayLike.setup(self)
numpy.tests.test_overrides.TestArrayLike.test_array_like(self,function,args,kwargs,numpy_ref)
numpy.tests.test_overrides.TestArrayLike.test_array_like_fromfile(self,numpy_ref)
numpy.tests.test_overrides.TestArrayLike.test_array_like_not_implemented(self)
numpy.tests.test_overrides.TestArrayLike.test_exception_handling(self)
numpy.tests.test_overrides.TestArrayLike.test_no_array_function_like(self,function,args,kwargs,ref)
numpy.tests.test_overrides.TestGetImplementingArgs
numpy.tests.test_overrides.TestGetImplementingArgs.test_many_duck_arrays(self)
numpy.tests.test_overrides.TestGetImplementingArgs.test_ndarray(self)
numpy.tests.test_overrides.TestGetImplementingArgs.test_ndarray_and_duck_array(self)
numpy.tests.test_overrides.TestGetImplementingArgs.test_ndarray_subclass_and_duck_array(self)
numpy.tests.test_overrides.TestGetImplementingArgs.test_ndarray_subclasses(self)
numpy.tests.test_overrides.TestGetImplementingArgs.test_too_many_duck_arrays(self)
numpy.tests.test_overrides.TestNDArrayArrayFunction
numpy.tests.test_overrides.TestNDArrayArrayFunction.test_method(self)
numpy.tests.test_overrides.TestNDArrayArrayFunction.test_no_wrapper(self)
numpy.tests.test_overrides.TestNDArrayMethods
numpy.tests.test_overrides.TestNDArrayMethods.test_repr(self)
numpy.tests.test_overrides.TestNumPyFunctions
numpy.tests.test_overrides.TestNumPyFunctions.test_inspect_sum(self)
numpy.tests.test_overrides.TestNumPyFunctions.test_override_sum(self)
numpy.tests.test_overrides.TestNumPyFunctions.test_set_module(self)
numpy.tests.test_overrides.TestNumPyFunctions.test_sum_forwarding_implementation(self)
numpy.tests.test_overrides.TestNumPyFunctions.test_sum_on_mock_array(self)
numpy.tests.test_overrides.TestVerifyMatchingSignatures
numpy.tests.test_overrides.TestVerifyMatchingSignatures.test_array_function_dispatch(self)
numpy.tests.test_overrides.TestVerifyMatchingSignatures.test_verify_matching_signatures(self)
numpy.tests.test_overrides._new_duck_type_and_implements()
numpy.tests.test_overrides._return_not_implemented(self,*args,**kwargs)
numpy.tests.test_overrides.dispatched_one_arg(array)
numpy.tests.test_overrides.dispatched_two_arg(array1,array2)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_datetime.py----------------------------------------
A:numpy.core.tests.test_datetime.dt1->numpy.dtype('M8[%s]' % unit1)
A:numpy.core.tests.test_datetime.dt2->numpy.dtype('M8[%s]' % unit2)
A:numpy.core.tests.test_datetime.expected->numpy.array(['2017', 'NaT'], dtype=time_dtype).astype(dtype2)
A:numpy.core.tests.test_datetime.arr->arr.astype('S').astype('S')
A:numpy.core.tests.test_datetime.a->numpy.array(['1980-03-23'], dtype=np.datetime64)
A:numpy.core.tests.test_datetime.b->numpy.datetime64('2010-02-15T06:30', 'm')
A:numpy.core.tests.test_datetime.dt->numpy.datetime64('2000', '5μs')
A:numpy.core.tests.test_datetime.dm->numpy.datetime64('1970-01-01', 'M')
A:numpy.core.tests.test_datetime.d->numpy.array(5, dtype='m8[D]')
A:numpy.core.tests.test_datetime.actual->divmod(op1, op2)
A:numpy.core.tests.test_datetime.test->numpy.array(datetime.timedelta(seconds=20))
A:numpy.core.tests.test_datetime.nan->numpy.array([np.nan] * 8)
A:numpy.core.tests.test_datetime.fnan->numpy.array([np.nan] * 8).astype('f')
A:numpy.core.tests.test_datetime.lnan->numpy.array([np.nan] * 8).astype('g')
A:numpy.core.tests.test_datetime.cnan->numpy.array([np.nan] * 8).astype('D')
A:numpy.core.tests.test_datetime.cfnan->numpy.array([np.nan] * 8).astype('F')
A:numpy.core.tests.test_datetime.clnan->numpy.array([np.nan] * 8).astype('G')
A:numpy.core.tests.test_datetime.nat->numpy.timedelta64('NaT')
A:numpy.core.tests.test_datetime.str_a->numpy.array(a, dtype='S')
A:numpy.core.tests.test_datetime.uni_a->numpy.array(a, dtype='U')
A:numpy.core.tests.test_datetime.dt_a->numpy.array(a, dtype='M')
A:numpy.core.tests.test_datetime.dt_b->numpy.empty_like(dt_a)
A:numpy.core.tests.test_datetime.str_b->numpy.empty(str_a.shape, dtype=(np.string_, 128))
A:numpy.core.tests.test_datetime.uni_b->numpy.empty_like(uni_a)
A:numpy.core.tests.test_datetime.times->numpy.array(['2017', 'NaT'], dtype=time_dtype)
A:numpy.core.tests.test_datetime.times_swapped->numpy.array(['2017', 'NaT'], dtype=time_dtype).astype(times.dtype.newbyteorder())
A:numpy.core.tests.test_datetime.unswapped->numpy.array(['2017', 'NaT'], dtype=time_dtype).astype(times.dtype.newbyteorder()).view(np.int64).newbyteorder()
A:numpy.core.tests.test_datetime.dtype1->numpy.dtype(time1)
A:numpy.core.tests.test_datetime.dtype2->numpy.dtype(time2)
A:numpy.core.tests.test_datetime.res->numpy.array('2020-10-10', dtype='M8').reshape(shape)
A:numpy.core.tests.test_datetime.from_strings->numpy.array(['2017', 'NaT'], dtype=str_dtype)
A:numpy.core.tests.test_datetime.to_strings->numpy.array(['2017', 'NaT'], dtype=time_dtype).astype(str_dtype)
A:numpy.core.tests.test_datetime.from_strings_swapped->numpy.array(['2017', 'NaT'], dtype=str_dtype).astype(from_strings.dtype.newbyteorder())
A:numpy.core.tests.test_datetime.scalar->numpy.datetime64('2016-01-01T00:00:00.000000000')
A:numpy.core.tests.test_datetime.op1->numpy.timedelta64(val1)
A:numpy.core.tests.test_datetime.op2->numpy.timedelta64(val2)
A:numpy.core.tests.test_datetime.dt_nat->numpy.datetime64('NaT', 'D')
A:numpy.core.tests.test_datetime.dt_other->numpy.datetime64('2000-01-01')
A:numpy.core.tests.test_datetime.td_nat->numpy.timedelta64('NaT', 'h')
A:numpy.core.tests.test_datetime.td_other->numpy.timedelta64(1, 'h')
A:numpy.core.tests.test_datetime.dtnat->numpy.array('NaT', dtype='M8[h]')
A:numpy.core.tests.test_datetime.t->numpy.ones(3, dtype='M8[s]')
A:numpy.core.tests.test_datetime.timesteps->numpy.array([date], dtype='datetime64[s]')[0].astype(np.int64)
A:numpy.core.tests.test_datetime.x->numpy.array([date], dtype='datetime64[%s]' % unit)
A:numpy.core.tests.test_datetime.bdd->numpy.busdaycalendar(weekmask='1111100', holidays=holidays)
A:numpy.core.tests.test_datetime.dates->numpy.busday_offset('2011-12-31', -np.arange(366), roll='forward', busdaycal=bdd)
A:numpy.core.tests.test_datetime.pos->numpy.array([True, True, False])
A:numpy.core.tests.test_datetime.neg->numpy.array([False, False, True])
A:numpy.core.tests.test_datetime.false->numpy.array([False, False, False])
A:numpy.core.tests.test_datetime.obj_arr->numpy.array([None])
A:numpy.core.tests.test_datetime.arr[...]->numpy.bytes_('2020-10-10')
A:numpy.core.tests.test_datetime.epoch->numpy.datetime64(0, time_unit)
A:numpy.core.tests.test_datetime.latest->numpy.datetime64(np.iinfo(np.int64).max, time_unit)
A:numpy.core.tests.test_datetime.earliest->numpy.datetime64(-np.iinfo(np.int64).max, time_unit)
A:numpy.core.tests.test_datetime.limit->numpy.datetime64(np.iinfo(np.int64).max * sign, time_unit)
A:numpy.core.tests.test_datetime.limit_via_str->numpy.datetime64(str(limit), time_unit)
numpy.core.tests.test_datetime.TestDateTime
numpy.core.tests.test_datetime.TestDateTime.test_assert_equal(self)
numpy.core.tests.test_datetime.TestDateTime.test_cast_overflow(self)
numpy.core.tests.test_datetime.TestDateTime.test_compare_generic_nat(self)
numpy.core.tests.test_datetime.TestDateTime.test_corecursive_input(self)
numpy.core.tests.test_datetime.TestDateTime.test_creation_overflow(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_add(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_arange(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_arange_no_dtype(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_array_find_type(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_array_str(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_as_string(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_as_string_timezone(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_busday_holidays_count(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_busday_holidays_offset(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_busday_offset(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_busdaycalendar(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_casting_rules(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_compare(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_compare_nat(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_conversions_byteorders(self,str_dtype,time_dtype)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_divide(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_dtype_creation(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_is_busday(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_like(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_maximum_reduce(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_minmax(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_multiply(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_nat_argsort_stability(self,size)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_nat_casting(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_scalar_construction(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_scalar_construction_timezone(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_string_conversion(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_subtract(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_timedelta_sort_nat(self,arr,expected,dtype)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_unary(self)
numpy.core.tests.test_datetime.TestDateTime.test_datetime_y2038(self)
numpy.core.tests.test_datetime.TestDateTime.test_days_creation(self)
numpy.core.tests.test_datetime.TestDateTime.test_days_to_pydate(self)
numpy.core.tests.test_datetime.TestDateTime.test_different_unit_comparison(self)
numpy.core.tests.test_datetime.TestDateTime.test_discovery_from_object_array(self,shape)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_as(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_day(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_fs(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_hour(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_minute(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_month(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_second(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_week(self)
numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_year(self)
numpy.core.tests.test_datetime.TestDateTime.test_dtype_comparison(self)
numpy.core.tests.test_datetime.TestDateTime.test_dtype_promotion(self)
numpy.core.tests.test_datetime.TestDateTime.test_hours(self)
numpy.core.tests.test_datetime.TestDateTime.test_isfinite_isinf_isnan_units(self,unit,dstr)
numpy.core.tests.test_datetime.TestDateTime.test_isfinite_scalar(self)
numpy.core.tests.test_datetime.TestDateTime.test_isnat(self)
numpy.core.tests.test_datetime.TestDateTime.test_isnat_error(self)
numpy.core.tests.test_datetime.TestDateTime.test_limit_str_roundtrip(self,time_unit,sign)
numpy.core.tests.test_datetime.TestDateTime.test_limit_symmetry(self,time_unit)
numpy.core.tests.test_datetime.TestDateTime.test_month_truncation(self)
numpy.core.tests.test_datetime.TestDateTime.test_pickle(self)
numpy.core.tests.test_datetime.TestDateTime.test_pydatetime_creation(self)
numpy.core.tests.test_datetime.TestDateTime.test_pyobject_roundtrip(self)
numpy.core.tests.test_datetime.TestDateTime.test_setstate(self)
numpy.core.tests.test_datetime.TestDateTime.test_string_parser_error_check(self)
numpy.core.tests.test_datetime.TestDateTime.test_string_parser_variants(self)
numpy.core.tests.test_datetime.TestDateTime.test_time_byteswapped_cast(self,time1,time2)
numpy.core.tests.test_datetime.TestDateTime.test_time_byteswapping(self,time_dtype)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_0_dim_object_array_conversion(self)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_arange(self)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_arange_no_dtype(self)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_array_str(self)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_divmod(self,op1,op2)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_divmod_warnings(self,op1,op2)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_floor_div_error(self,val1,val2)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_floor_div_precision(self,val1,val2)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_floor_div_warnings(self,op1,op2)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_floor_divide(self,op1,op2,exp)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_modulus(self,val1,val2,expected)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_modulus_div_by_zero(self)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_modulus_error(self,val1,val2)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_modulus_type_resolution(self,val1,val2)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_nat_argsort_stability(self,size)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_nat_format(self)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_np_int_construction(self,unit)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_object_array_conversion(self)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_scalar_construction(self)
numpy.core.tests.test_datetime.TestDateTime.test_timedelta_scalar_construction_units(self)
numpy.core.tests.test_datetime.TestDateTimeData
numpy.core.tests.test_datetime.TestDateTimeData.test_basic(self)
numpy.core.tests.test_datetime.TestDateTimeData.test_bytes(self)
numpy.core.tests.test_datetime.TestDateTimeData.test_non_ascii(self)
numpy.tests.test_datetime.TestDateTime
numpy.tests.test_datetime.TestDateTime.test_assert_equal(self)
numpy.tests.test_datetime.TestDateTime.test_cast_overflow(self)
numpy.tests.test_datetime.TestDateTime.test_compare_generic_nat(self)
numpy.tests.test_datetime.TestDateTime.test_corecursive_input(self)
numpy.tests.test_datetime.TestDateTime.test_creation_overflow(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_add(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_arange(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_arange_no_dtype(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_array_find_type(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_array_str(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_as_string(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_as_string_timezone(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_busday_holidays_count(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_busday_holidays_offset(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_busday_offset(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_busdaycalendar(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_casting_rules(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_compare(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_compare_nat(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_conversions_byteorders(self,str_dtype,time_dtype)
numpy.tests.test_datetime.TestDateTime.test_datetime_divide(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_dtype_creation(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_is_busday(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_like(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_maximum_reduce(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_minmax(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_multiply(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_nat_argsort_stability(self,size)
numpy.tests.test_datetime.TestDateTime.test_datetime_nat_casting(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_scalar_construction(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_scalar_construction_timezone(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_string_conversion(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_subtract(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_timedelta_sort_nat(self,arr,expected,dtype)
numpy.tests.test_datetime.TestDateTime.test_datetime_unary(self)
numpy.tests.test_datetime.TestDateTime.test_datetime_y2038(self)
numpy.tests.test_datetime.TestDateTime.test_days_creation(self)
numpy.tests.test_datetime.TestDateTime.test_days_to_pydate(self)
numpy.tests.test_datetime.TestDateTime.test_different_unit_comparison(self)
numpy.tests.test_datetime.TestDateTime.test_discovery_from_object_array(self,shape)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_as(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_day(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_fs(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_hour(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_minute(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_month(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_second(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_week(self)
numpy.tests.test_datetime.TestDateTime.test_divisor_conversion_year(self)
numpy.tests.test_datetime.TestDateTime.test_dtype_comparison(self)
numpy.tests.test_datetime.TestDateTime.test_dtype_promotion(self)
numpy.tests.test_datetime.TestDateTime.test_hours(self)
numpy.tests.test_datetime.TestDateTime.test_isfinite_isinf_isnan_units(self,unit,dstr)
numpy.tests.test_datetime.TestDateTime.test_isfinite_scalar(self)
numpy.tests.test_datetime.TestDateTime.test_isnat(self)
numpy.tests.test_datetime.TestDateTime.test_isnat_error(self)
numpy.tests.test_datetime.TestDateTime.test_limit_str_roundtrip(self,time_unit,sign)
numpy.tests.test_datetime.TestDateTime.test_limit_symmetry(self,time_unit)
numpy.tests.test_datetime.TestDateTime.test_month_truncation(self)
numpy.tests.test_datetime.TestDateTime.test_pickle(self)
numpy.tests.test_datetime.TestDateTime.test_pydatetime_creation(self)
numpy.tests.test_datetime.TestDateTime.test_pyobject_roundtrip(self)
numpy.tests.test_datetime.TestDateTime.test_setstate(self)
numpy.tests.test_datetime.TestDateTime.test_string_parser_error_check(self)
numpy.tests.test_datetime.TestDateTime.test_string_parser_variants(self)
numpy.tests.test_datetime.TestDateTime.test_time_byteswapped_cast(self,time1,time2)
numpy.tests.test_datetime.TestDateTime.test_time_byteswapping(self,time_dtype)
numpy.tests.test_datetime.TestDateTime.test_timedelta_0_dim_object_array_conversion(self)
numpy.tests.test_datetime.TestDateTime.test_timedelta_arange(self)
numpy.tests.test_datetime.TestDateTime.test_timedelta_arange_no_dtype(self)
numpy.tests.test_datetime.TestDateTime.test_timedelta_array_str(self)
numpy.tests.test_datetime.TestDateTime.test_timedelta_divmod(self,op1,op2)
numpy.tests.test_datetime.TestDateTime.test_timedelta_divmod_warnings(self,op1,op2)
numpy.tests.test_datetime.TestDateTime.test_timedelta_floor_div_error(self,val1,val2)
numpy.tests.test_datetime.TestDateTime.test_timedelta_floor_div_precision(self,val1,val2)
numpy.tests.test_datetime.TestDateTime.test_timedelta_floor_div_warnings(self,op1,op2)
numpy.tests.test_datetime.TestDateTime.test_timedelta_floor_divide(self,op1,op2,exp)
numpy.tests.test_datetime.TestDateTime.test_timedelta_modulus(self,val1,val2,expected)
numpy.tests.test_datetime.TestDateTime.test_timedelta_modulus_div_by_zero(self)
numpy.tests.test_datetime.TestDateTime.test_timedelta_modulus_error(self,val1,val2)
numpy.tests.test_datetime.TestDateTime.test_timedelta_modulus_type_resolution(self,val1,val2)
numpy.tests.test_datetime.TestDateTime.test_timedelta_nat_argsort_stability(self,size)
numpy.tests.test_datetime.TestDateTime.test_timedelta_nat_format(self)
numpy.tests.test_datetime.TestDateTime.test_timedelta_np_int_construction(self,unit)
numpy.tests.test_datetime.TestDateTime.test_timedelta_object_array_conversion(self)
numpy.tests.test_datetime.TestDateTime.test_timedelta_scalar_construction(self)
numpy.tests.test_datetime.TestDateTime.test_timedelta_scalar_construction_units(self)
numpy.tests.test_datetime.TestDateTimeData
numpy.tests.test_datetime.TestDateTimeData.test_basic(self)
numpy.tests.test_datetime.TestDateTimeData.test_bytes(self)
numpy.tests.test_datetime.TestDateTimeData.test_non_ascii(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_shape_base.py----------------------------------------
A:numpy.core.tests.test_shape_base.a->ArrayLike()
A:numpy.core.tests.test_shape_base.b->ArrayLike()
A:numpy.core.tests.test_shape_base.res->numpy.concatenate(arrs, axis=axis, dtype=string_dt, casting='unsafe')
A:numpy.core.tests.test_shape_base.desired->numpy.array([[1, 1, 2, 2], [1, 1, 2, 2]])
A:numpy.core.tests.test_shape_base.axis->list(range(3))
A:numpy.core.tests.test_shape_base.r->numpy.concatenate(x, 100)
A:numpy.core.tests.test_shape_base.d->array(['0.0', '1.0', '2.0', '3.0', '0', '1', '2', 'x'])
A:numpy.core.tests.test_shape_base.out->numpy.zeros_like(r1)
A:numpy.core.tests.test_shape_base.rout->concatenate((a0, a1, a2), 2, out=out)
A:numpy.core.tests.test_shape_base.x->numpy.arange(1, 100)
A:numpy.core.tests.test_shape_base.r4->list(range(4))
A:numpy.core.tests.test_shape_base.r3->list(range(3))
A:numpy.core.tests.test_shape_base.a23->array([[10, 11, 12], [13, 14, 15]])
A:numpy.core.tests.test_shape_base.a13->array([[0, 1, 2]])
A:numpy.core.tests.test_shape_base.res_out->concatenate(to_concat, out=out, axis=axis, casting=casting)
A:numpy.core.tests.test_shape_base.res_dtype->concatenate(to_concat, dtype=out.dtype, axis=axis, casting=casting)
A:numpy.core.tests.test_shape_base.r1->array([[1, 2, 3], [4, 5, 6]])
A:numpy.core.tests.test_shape_base.result->block([[a, b], [c]])
A:numpy.core.tests.test_shape_base.(arrays, list_ndim, result_ndim, _)->_block_setup(arrays)
A:numpy.core.tests.test_shape_base.(_, _, _, total_size)->_block_setup([[1, 2], [3, 4]])
A:numpy.core.tests.test_shape_base.a_2d->numpy.ones((2, 2))
A:numpy.core.tests.test_shape_base.expected->numpy.array([[[1.0, 2.0, 2.0], [3.0, 3.0, 3.0], [3.0, 3.0, 3.0]]])
A:numpy.core.tests.test_shape_base.a_1d->numpy.array([1, 2, 3])
A:numpy.core.tests.test_shape_base.b_1d->numpy.array([2, 2])
A:numpy.core.tests.test_shape_base.one_2d->numpy.array([[1, 1, 1]])
A:numpy.core.tests.test_shape_base.two_2d->numpy.array([[2, 2, 2]])
A:numpy.core.tests.test_shape_base.three_2d->numpy.array([[3, 3, 3, 3, 3, 3]])
A:numpy.core.tests.test_shape_base.four_1d->numpy.array([4, 4, 4, 4, 4, 4])
A:numpy.core.tests.test_shape_base.five_0d->numpy.array(5)
A:numpy.core.tests.test_shape_base.six_1d->numpy.array([6, 6, 6, 6, 6])
A:numpy.core.tests.test_shape_base.zero_2d->numpy.zeros((2, 6))
A:numpy.core.tests.test_shape_base.one->numpy.array([1, 1, 1])
A:numpy.core.tests.test_shape_base.two->numpy.array([[2, 2, 2], [2, 2, 2], [2, 2, 2]])
A:numpy.core.tests.test_shape_base.three->numpy.array([3, 3, 3])
A:numpy.core.tests.test_shape_base.four->numpy.array([4, 4, 4])
A:numpy.core.tests.test_shape_base.five->numpy.array(5)
A:numpy.core.tests.test_shape_base.six->numpy.array([6, 6, 6, 6, 6])
A:numpy.core.tests.test_shape_base.zero->numpy.zeros((2, 6))
A:numpy.core.tests.test_shape_base.arr_c->numpy.zeros((3, 3), order='C')
A:numpy.core.tests.test_shape_base.arr_f->numpy.zeros((3, 3), order='F')
A:numpy.core.tests.test_shape_base.c->ArrayLike()
numpy.core.tests.test_shape_base.TestAtleast1d
numpy.core.tests.test_shape_base.TestAtleast1d.test_0D_array(self)
numpy.core.tests.test_shape_base.TestAtleast1d.test_1D_array(self)
numpy.core.tests.test_shape_base.TestAtleast1d.test_2D_array(self)
numpy.core.tests.test_shape_base.TestAtleast1d.test_3D_array(self)
numpy.core.tests.test_shape_base.TestAtleast1d.test_r1array(self)
numpy.core.tests.test_shape_base.TestAtleast2d
numpy.core.tests.test_shape_base.TestAtleast2d.test_0D_array(self)
numpy.core.tests.test_shape_base.TestAtleast2d.test_1D_array(self)
numpy.core.tests.test_shape_base.TestAtleast2d.test_2D_array(self)
numpy.core.tests.test_shape_base.TestAtleast2d.test_3D_array(self)
numpy.core.tests.test_shape_base.TestAtleast2d.test_r2array(self)
numpy.core.tests.test_shape_base.TestAtleast3d
numpy.core.tests.test_shape_base.TestAtleast3d.test_0D_array(self)
numpy.core.tests.test_shape_base.TestAtleast3d.test_1D_array(self)
numpy.core.tests.test_shape_base.TestAtleast3d.test_2D_array(self)
numpy.core.tests.test_shape_base.TestAtleast3d.test_3D_array(self)
numpy.core.tests.test_shape_base.TestBlock
numpy.core.tests.test_shape_base.TestBlock.block(self,request)
numpy.core.tests.test_shape_base.TestBlock.test_3d(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_block_complicated(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_block_memory_order(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_block_mixed_1d_and_2d(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_block_simple_column_wise(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_block_simple_row_wise(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_block_total_size_estimate(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_block_with_1d_arrays_column_wise(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_block_with_1d_arrays_multiple_rows(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_block_with_1d_arrays_row_wise(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_block_with_mismatched_shape(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_different_ndims(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_different_ndims_depths(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_empty_lists(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_invalid_nesting(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_nested(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_no_lists(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_returns_copy(self,block)
numpy.core.tests.test_shape_base.TestBlock.test_tuple(self,block)
numpy.core.tests.test_shape_base.TestConcatenate
numpy.core.tests.test_shape_base.TestConcatenate.test_bad_out_shape(self)
numpy.core.tests.test_shape_base.TestConcatenate.test_concatenate(self)
numpy.core.tests.test_shape_base.TestConcatenate.test_concatenate_axis_None(self)
numpy.core.tests.test_shape_base.TestConcatenate.test_dtype_with_promotion(self,arrs,string_dt,axis)
numpy.core.tests.test_shape_base.TestConcatenate.test_exceptions(self)
numpy.core.tests.test_shape_base.TestConcatenate.test_large_concatenate_axis_None(self)
numpy.core.tests.test_shape_base.TestConcatenate.test_operator_concat(self)
numpy.core.tests.test_shape_base.TestConcatenate.test_out_and_dtype(self,axis,out_dtype,casting)
numpy.core.tests.test_shape_base.TestConcatenate.test_returns_copy(self)
numpy.core.tests.test_shape_base.TestConcatenate.test_string_dtype_does_not_inspect(self,axis)
numpy.core.tests.test_shape_base.TestConcatenate.test_subarray_error(self,axis)
numpy.core.tests.test_shape_base.TestHstack
numpy.core.tests.test_shape_base.TestHstack.test_0D_array(self)
numpy.core.tests.test_shape_base.TestHstack.test_1D_array(self)
numpy.core.tests.test_shape_base.TestHstack.test_2D_array(self)
numpy.core.tests.test_shape_base.TestHstack.test_empty_input(self)
numpy.core.tests.test_shape_base.TestHstack.test_generator(self)
numpy.core.tests.test_shape_base.TestHstack.test_non_iterable(self)
numpy.core.tests.test_shape_base.TestVstack
numpy.core.tests.test_shape_base.TestVstack.test_0D_array(self)
numpy.core.tests.test_shape_base.TestVstack.test_1D_array(self)
numpy.core.tests.test_shape_base.TestVstack.test_2D_array(self)
numpy.core.tests.test_shape_base.TestVstack.test_2D_array2(self)
numpy.core.tests.test_shape_base.TestVstack.test_empty_input(self)
numpy.core.tests.test_shape_base.TestVstack.test_generator(self)
numpy.core.tests.test_shape_base.TestVstack.test_non_iterable(self)
numpy.core.tests.test_shape_base.test_block_dispatcher()
numpy.core.tests.test_shape_base.test_stack()
numpy.tests.test_TestAtleast1d
numpy.tests.test_TestAtleast1d.test_0D_array(self)
numpy.tests.test_TestAtleast1d.test_1D_array(self)
numpy.tests.test_TestAtleast1d.test_2D_array(self)
numpy.tests.test_TestAtleast1d.test_3D_array(self)
numpy.tests.test_TestAtleast1d.test_r1array(self)
numpy.tests.test_TestAtleast2d
numpy.tests.test_TestAtleast2d.test_0D_array(self)
numpy.tests.test_TestAtleast2d.test_1D_array(self)
numpy.tests.test_TestAtleast2d.test_2D_array(self)
numpy.tests.test_TestAtleast2d.test_3D_array(self)
numpy.tests.test_TestAtleast2d.test_r2array(self)
numpy.tests.test_TestAtleast3d
numpy.tests.test_TestAtleast3d.test_0D_array(self)
numpy.tests.test_TestAtleast3d.test_1D_array(self)
numpy.tests.test_TestAtleast3d.test_2D_array(self)
numpy.tests.test_TestAtleast3d.test_3D_array(self)
numpy.tests.test_TestBlock
numpy.tests.test_TestBlock.block(self,request)
numpy.tests.test_TestBlock.test_3d(self,block)
numpy.tests.test_TestBlock.test_block_complicated(self,block)
numpy.tests.test_TestBlock.test_block_memory_order(self,block)
numpy.tests.test_TestBlock.test_block_mixed_1d_and_2d(self,block)
numpy.tests.test_TestBlock.test_block_simple_column_wise(self,block)
numpy.tests.test_TestBlock.test_block_simple_row_wise(self,block)
numpy.tests.test_TestBlock.test_block_total_size_estimate(self,block)
numpy.tests.test_TestBlock.test_block_with_1d_arrays_column_wise(self,block)
numpy.tests.test_TestBlock.test_block_with_1d_arrays_multiple_rows(self,block)
numpy.tests.test_TestBlock.test_block_with_1d_arrays_row_wise(self,block)
numpy.tests.test_TestBlock.test_block_with_mismatched_shape(self,block)
numpy.tests.test_TestBlock.test_different_ndims(self,block)
numpy.tests.test_TestBlock.test_different_ndims_depths(self,block)
numpy.tests.test_TestBlock.test_empty_lists(self,block)
numpy.tests.test_TestBlock.test_invalid_nesting(self,block)
numpy.tests.test_TestBlock.test_nested(self,block)
numpy.tests.test_TestBlock.test_no_lists(self,block)
numpy.tests.test_TestBlock.test_returns_copy(self,block)
numpy.tests.test_TestBlock.test_tuple(self,block)
numpy.tests.test_TestConcatenate
numpy.tests.test_TestConcatenate.test_bad_out_shape(self)
numpy.tests.test_TestConcatenate.test_concatenate(self)
numpy.tests.test_TestConcatenate.test_concatenate_axis_None(self)
numpy.tests.test_TestConcatenate.test_dtype_with_promotion(self,arrs,string_dt,axis)
numpy.tests.test_TestConcatenate.test_exceptions(self)
numpy.tests.test_TestConcatenate.test_large_concatenate_axis_None(self)
numpy.tests.test_TestConcatenate.test_operator_concat(self)
numpy.tests.test_TestConcatenate.test_out_and_dtype(self,axis,out_dtype,casting)
numpy.tests.test_TestConcatenate.test_returns_copy(self)
numpy.tests.test_TestConcatenate.test_string_dtype_does_not_inspect(self,axis)
numpy.tests.test_TestConcatenate.test_subarray_error(self,axis)
numpy.tests.test_TestHstack
numpy.tests.test_TestHstack.test_0D_array(self)
numpy.tests.test_TestHstack.test_1D_array(self)
numpy.tests.test_TestHstack.test_2D_array(self)
numpy.tests.test_TestHstack.test_empty_input(self)
numpy.tests.test_TestHstack.test_generator(self)
numpy.tests.test_TestHstack.test_non_iterable(self)
numpy.tests.test_TestVstack
numpy.tests.test_TestVstack.test_0D_array(self)
numpy.tests.test_TestVstack.test_1D_array(self)
numpy.tests.test_TestVstack.test_2D_array(self)
numpy.tests.test_TestVstack.test_2D_array2(self)
numpy.tests.test_TestVstack.test_empty_input(self)
numpy.tests.test_TestVstack.test_generator(self)
numpy.tests.test_TestVstack.test_non_iterable(self)
numpy.tests.test_test_block_dispatcher()
numpy.tests.test_test_stack()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_numeric.py----------------------------------------
A:numpy.core.tests.test_numeric.A->numpy.array([1, 1j, -1, -1j])
A:numpy.core.tests.test_numeric.Ar1->numpy.array([[1, 2, 3, 1], [2, 3, 1, 2]])
A:numpy.core.tests.test_numeric.Ar2->numpy.array([[1, 2], [3, 1], [2, 3], [1, 2]])
A:numpy.core.tests.test_numeric.Ar3->numpy.array([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]])
A:numpy.core.tests.test_numeric.Ar->numpy.resize(A, (2, 1))
A:numpy.core.tests.test_numeric.my_arr->numpy.array([]).view(MyArray)
A:numpy.core.tests.test_numeric.out->numpy.array(0.0)
A:numpy.core.tests.test_numeric.tgt->numpy.array([2, 3])
A:numpy.core.tests.test_numeric.s->dtype(1)
A:numpy.core.tests.test_numeric.f->numpy.float64(5.1 * 10 ** 73)
A:numpy.core.tests.test_numeric.i->numpy.int64(501)
A:numpy.core.tests.test_numeric.B->numpy.array([None, 0])
A:numpy.core.tests.test_numeric.self.nm->self.f.copy()
A:numpy.core.tests.test_numeric.self.im->self.t.copy()
A:numpy.core.tests.test_numeric.d->numpy.ones(100)
A:numpy.core.tests.test_numeric.e->numpy.array([True] * 100043, dtype=bool)
A:numpy.core.tests.test_numeric.self.f->numpy.ones(256, dtype=np.float32)
A:numpy.core.tests.test_numeric.self.ef->numpy.ones(self.f.size, dtype=bool)
A:numpy.core.tests.test_numeric.self.d->numpy.ones(128, dtype=np.float64)
A:numpy.core.tests.test_numeric.self.ed->numpy.ones(self.d.size, dtype=bool)
A:numpy.core.tests.test_numeric.self.nf->self.f.copy()
A:numpy.core.tests.test_numeric.self.nd->self.d.copy()
A:numpy.core.tests.test_numeric.self.inff->self.f.copy()
A:numpy.core.tests.test_numeric.self.infd->self.d.copy()
A:numpy.core.tests.test_numeric.self.efnonan->self.ef.copy()
A:numpy.core.tests.test_numeric.self.ednonan->self.ed.copy()
A:numpy.core.tests.test_numeric.self.signf->self.f.copy()
A:numpy.core.tests.test_numeric.self.signd->self.d.copy()
A:numpy.core.tests.test_numeric.err->numpy.seterr()
A:numpy.core.tests.test_numeric.old->numpy.seterr(divide='print')
A:numpy.core.tests.test_numeric.new->numpy.seterr()
A:numpy.core.tests.test_numeric.olderrobj->numpy.geterrobj()
A:numpy.core.tests.test_numeric.ftype->numpy.obj2sctype(typecode)
A:numpy.core.tests.test_numeric.fi->numpy.finfo(dt)
A:numpy.core.tests.test_numeric.rtype->type(ftype(0).real)
A:numpy.core.tests.test_numeric.ft_tiny->ftype(fi.tiny)
A:numpy.core.tests.test_numeric.ft_max->ftype(fi.max)
A:numpy.core.tests.test_numeric.ft_eps->ftype(fi.eps)
A:numpy.core.tests.test_numeric.b->numpy.ndarray((0, 4))
A:numpy.core.tests.test_numeric.rational_dt->numpy.dtype(rational)
A:numpy.core.tests.test_numeric.numpy_dtype->numpy.dtype(numpy_dtype)
A:numpy.core.tests.test_numeric.double_dt->numpy.dtype('double')
A:numpy.core.tests.test_numeric.dtype->dtype.newbyteorder().newbyteorder()
A:numpy.core.tests.test_numeric.res->numpy.rollaxis(a, axis=-ip, start=-jp)
A:numpy.core.tests.test_numeric.dtype1->dtype1.newbyteorder().newbyteorder()
A:numpy.core.tests.test_numeric.dtype2->numpy.dtype(dtype2, metadata=metadata2)
A:numpy.core.tests.test_numeric.res_bs->numpy.promote_types(dtype1, dtype2)
A:numpy.core.tests.test_numeric.ii->numpy.iinfo(dt)
A:numpy.core.tests.test_numeric.ai32->numpy.fromiter(self.makegen(), np.int32)
A:numpy.core.tests.test_numeric.ai64->numpy.fromiter(self.makegen(), np.int64)
A:numpy.core.tests.test_numeric.af->numpy.fromiter(self.makegen(), float)
A:numpy.core.tests.test_numeric.expected->numpy.minimum(amax, np.maximum(arr, amin))
A:numpy.core.tests.test_numeric.a->numpy.ndarray((3, 0))
A:numpy.core.tests.test_numeric.a20->numpy.fromiter(self.makegen(), int, 20)
A:numpy.core.tests.test_numeric.x->numpy.arange(30).view(sub_class)
A:numpy.core.tests.test_numeric.c->numpy.require(b, None, [flag])
A:numpy.core.tests.test_numeric.shape->tuple(range(2, 2 + nd))
A:numpy.core.tests.test_numeric.m->numpy.zeros(a.shape)
A:numpy.core.tests.test_numeric.n->numpy.zeros(a.shape).astype(object)
A:numpy.core.tests.test_numeric.rng->numpy.random.RandomState(1234)
A:numpy.core.tests.test_numeric.dt->numpy.dtype([('', dt)] * 2)
A:numpy.core.tests.test_numeric.tpe->ThreadPoolExecutor(max_workers=8)
A:numpy.core.tests.test_numeric.V->rand(5, 8)
A:numpy.core.tests.test_numeric.g1->randint(0, 5, size=15)
A:numpy.core.tests.test_numeric.g2->randint(0, 8, size=15)
A:numpy.core.tests.test_numeric.a1->numpy.array([1, 2, np.nan])
A:numpy.core.tests.test_numeric.a2->numpy.clip(a, m, M, out=a)
A:numpy.core.tests.test_numeric.a3->numpy.array([1, 2, np.inf])
A:numpy.core.tests.test_numeric.zeros->numpy.zeros(3, dtype=dtype)
A:numpy.core.tests.test_numeric.nonzeros->numpy.array([b'1', b'2', b'3'], dtype=dtype)
A:numpy.core.tests.test_numeric.data->self._neg_byteorder(data)
A:numpy.core.tests.test_numeric.arr->numpy.empty((5,))
A:numpy.core.tests.test_numeric.actual->numpy.clip(arr, amin, amax)
A:numpy.core.tests.test_numeric.ac->numpy.ndarray((3, 0)).copy()
A:numpy.core.tests.test_numeric.act->numpy.ndarray((3, 0)).copy().copy()
A:numpy.core.tests.test_numeric.M->numpy.float64(1)
A:numpy.core.tests.test_numeric.am->self.fastclip(a, m, None)
A:numpy.core.tests.test_numeric.aM->self.fastclip(a, None, M)
A:numpy.core.tests.test_numeric.m_s->self._neg_byteorder(m)
A:numpy.core.tests.test_numeric.a_s->self._neg_byteorder(a)
A:numpy.core.tests.test_numeric.bt->numpy.ndarray((0, 4)).copy()
A:numpy.core.tests.test_numeric.dtype_strategy->hypothesis.strategies.just(data.draw(dtype_strategy))
A:numpy.core.tests.test_numeric.(in_shapes, result_shape)->self._neg_byteorder(data).draw(hynp.mutually_broadcastable_shapes(num_shapes=2, base_shape=shape, min_dims=1))
A:numpy.core.tests.test_numeric.amin->self._neg_byteorder(data).draw(dtype_strategy.flatmap(hynp.from_dtype) | hynp.arrays(dtype=dtype_strategy, shape=in_shapes[0]))
A:numpy.core.tests.test_numeric.amax->self._neg_byteorder(data).draw(dtype_strategy.flatmap(hynp.from_dtype) | hynp.arrays(dtype=dtype_strategy, shape=in_shapes[1]))
A:numpy.core.tests.test_numeric.result->numpy.moveaxis(x, 0, 0)
A:numpy.core.tests.test_numeric.self.olderr->numpy.seterr(invalid='ignore')
A:numpy.core.tests.test_numeric.aran->numpy.arange(125).reshape((5, 5, 5))
A:numpy.core.tests.test_numeric.y->numpy.array([-1, -2j, 3 + 1j], dtype=complex)
A:numpy.core.tests.test_numeric.self.A->numpy.array([1, -1, 1, -1])
A:numpy.core.tests.test_numeric.r->numpy.mean(d, out=out)
A:numpy.core.tests.test_numeric.self.dtypes->sorted(dtypes - variable_sized | {np.dtype(tp.str.replace('0', str(i))) for tp in variable_sized for i in range(1, 10)}, key=lambda dtype: dtype.str)
A:numpy.core.tests.test_numeric.val->str(fill_value)
A:numpy.core.tests.test_numeric.beg->sys.getrefcount(dim)
A:numpy.core.tests.test_numeric.z->numpy.tile([-3, 6, -3], (5, 1))
A:numpy.core.tests.test_numeric.dz->like_function(d, order='A', dtype=dtype, **fill_kwarg)
A:numpy.core.tests.test_numeric.sz->like_function(d, dtype=dtype, shape=s, order=o, **fill_kwarg)
A:numpy.core.tests.test_numeric.self.x->numpy.array([1, 2, 3, 4, 5], dtype=dt)
A:numpy.core.tests.test_numeric.self.y->numpy.array([-1, -2, -3], dtype=dt)
A:numpy.core.tests.test_numeric.self.z1->numpy.array([-3.0, -8.0, -14.0, -20.0, -26.0, -14.0, -5.0], dtype=dt)
A:numpy.core.tests.test_numeric.self.z1_4->numpy.array([-2.0, -5.0, -8.0, -11.0, -14.0, -5.0], dtype=dt)
A:numpy.core.tests.test_numeric.self.z1r->numpy.array([-15.0, -22.0, -22.0, -16.0, -10.0, -4.0, -1.0], dtype=dt)
A:numpy.core.tests.test_numeric.self.z2->numpy.array([-5.0, -14.0, -26.0, -20.0, -14.0, -8.0, -3.0], dtype=dt)
A:numpy.core.tests.test_numeric.self.z2r->numpy.array([-1.0, -4.0, -10.0, -16.0, -22.0, -22.0, -15.0], dtype=dt)
A:numpy.core.tests.test_numeric.self.zs->numpy.array([-3.0, -14.0, -30.0, -48.0, -66.0, -84.0, -102.0, -54.0, -19.0], dtype=dt)
A:numpy.core.tests.test_numeric.k->numpy.ones(3)
A:numpy.core.tests.test_numeric.r_z->r_z[::-1].conjugate()
A:numpy.core.tests.test_numeric.default_mode->numpy.convolve(d, k, mode='full')
A:numpy.core.tests.test_numeric.valid_mode->numpy.correlate(d, k, mode='v')
A:numpy.core.tests.test_numeric.full_mode->numpy.convolve(d, k, mode='f')
A:numpy.core.tests.test_numeric.xr->numpy.roll(x, 2)
A:numpy.core.tests.test_numeric.x2->numpy.reshape(np.arange(10), (2, 5))
A:numpy.core.tests.test_numeric.x2r->numpy.roll(x2, -4, axis=1)
A:numpy.core.tests.test_numeric.aind->numpy.indices(a.shape)
A:numpy.core.tests.test_numeric.cp->numpy.cross(v, u)
A:numpy.core.tests.test_numeric.u->numpy.ones((3, 4, 2))
A:numpy.core.tests.test_numeric.v->numpy.ones((5, 7, 2))
A:numpy.core.tests.test_numeric.arr1->numpy.ones((5,))
A:numpy.core.tests.test_numeric.arr2->numpy.ones((2,))
A:numpy.core.tests.test_numeric.arr3->numpy.linspace(-2, 2, 5)
A:numpy.core.tests.test_numeric.out1->numpy.ndarray(shape=(5, 5))
A:numpy.core.tests.test_numeric.out2->numpy.ndarray(shape=(2, 5))
A:numpy.core.tests.test_numeric.res1->numpy.outer(arr1, arr3, out1)
A:numpy.core.tests.test_numeric.[x, y]->numpy.indices((4, 3), sparse=True)
A:numpy.core.tests.test_numeric.[x]->numpy.indices((4,), sparse=True)
A:numpy.core.tests.test_numeric.inds->numpy.indices(dims, dtype=dtype)
A:numpy.core.tests.test_numeric.mit->numpy.broadcast(*arrs)
A:numpy.core.tests.test_numeric.mit2->numpy.broadcast(*arrs, **{})
A:numpy.core.tests.test_numeric.td->numpy.tensordot(a, b, (1, 0))
A:numpy.core.tests.test_numeric.arr_0d->numpy.array(1)
A:numpy.core.tests.test_numeric.ret->numpy.tensordot(arr_0d, arr_0d, ([], []))
numpy.core.tests.test_numeric.NIterError(Exception)
numpy.core.tests.test_numeric.TestAllclose
numpy.core.tests.test_numeric.TestAllclose.setup(self)
numpy.core.tests.test_numeric.TestAllclose.teardown(self)
numpy.core.tests.test_numeric.TestAllclose.test_equalnan(self)
numpy.core.tests.test_numeric.TestAllclose.test_ip_allclose(self)
numpy.core.tests.test_numeric.TestAllclose.test_ip_not_allclose(self)
numpy.core.tests.test_numeric.TestAllclose.test_min_int(self)
numpy.core.tests.test_numeric.TestAllclose.test_no_parameter_modification(self)
numpy.core.tests.test_numeric.TestAllclose.test_return_class_is_ndarray(self)
numpy.core.tests.test_numeric.TestAllclose.tst_allclose(self,x,y)
numpy.core.tests.test_numeric.TestAllclose.tst_not_allclose(self,x,y)
numpy.core.tests.test_numeric.TestArgwhere
numpy.core.tests.test_numeric.TestArgwhere.test_2D(self)
numpy.core.tests.test_numeric.TestArgwhere.test_list(self)
numpy.core.tests.test_numeric.TestArgwhere.test_nd(self,nd)
numpy.core.tests.test_numeric.TestArrayComparisons
numpy.core.tests.test_numeric.TestArrayComparisons.test_array_equal(self)
numpy.core.tests.test_numeric.TestArrayComparisons.test_array_equal_equal_nan(self)
numpy.core.tests.test_numeric.TestArrayComparisons.test_array_equiv(self)
numpy.core.tests.test_numeric.TestArrayComparisons.test_compare_unstructured_voids(self,dtype)
numpy.core.tests.test_numeric.TestArrayComparisons.test_none_compares_elementwise(self)
numpy.core.tests.test_numeric.TestBaseRepr
numpy.core.tests.test_numeric.TestBaseRepr.test_base3(self)
numpy.core.tests.test_numeric.TestBaseRepr.test_base_range(self)
numpy.core.tests.test_numeric.TestBaseRepr.test_negative(self)
numpy.core.tests.test_numeric.TestBaseRepr.test_positive(self)
numpy.core.tests.test_numeric.TestBinaryRepr
numpy.core.tests.test_numeric.TestBinaryRepr.test_large_neg_int64(self)
numpy.core.tests.test_numeric.TestBinaryRepr.test_neg_width_boundaries(self)
numpy.core.tests.test_numeric.TestBinaryRepr.test_negative(self)
numpy.core.tests.test_numeric.TestBinaryRepr.test_positive(self)
numpy.core.tests.test_numeric.TestBinaryRepr.test_sufficient_width(self)
numpy.core.tests.test_numeric.TestBinaryRepr.test_zero(self)
numpy.core.tests.test_numeric.TestBoolArray
numpy.core.tests.test_numeric.TestBoolArray.setup(self)
numpy.core.tests.test_numeric.TestBoolArray.test_all_any(self)
numpy.core.tests.test_numeric.TestBoolArray.test_logical_and_or_xor(self)
numpy.core.tests.test_numeric.TestBoolArray.test_logical_not_abs(self)
numpy.core.tests.test_numeric.TestBoolCmp
numpy.core.tests.test_numeric.TestBoolCmp.setup(self)
numpy.core.tests.test_numeric.TestBoolCmp.test_double(self)
numpy.core.tests.test_numeric.TestBoolCmp.test_float(self)
numpy.core.tests.test_numeric.TestBoolScalar
numpy.core.tests.test_numeric.TestBoolScalar.test_bitwise_and(self)
numpy.core.tests.test_numeric.TestBoolScalar.test_bitwise_or(self)
numpy.core.tests.test_numeric.TestBoolScalar.test_bitwise_xor(self)
numpy.core.tests.test_numeric.TestBoolScalar.test_logical(self)
numpy.core.tests.test_numeric.TestBroadcast
numpy.core.tests.test_numeric.TestBroadcast.test_broadcast_error_kwargs(self)
numpy.core.tests.test_numeric.TestBroadcast.test_broadcast_in_args(self)
numpy.core.tests.test_numeric.TestBroadcast.test_broadcast_single_arg(self)
numpy.core.tests.test_numeric.TestBroadcast.test_number_of_arguments(self)
numpy.core.tests.test_numeric.TestClip
numpy.core.tests.test_numeric.TestClip._generate_data(self,n,m)
numpy.core.tests.test_numeric.TestClip._generate_data_complex(self,n,m)
numpy.core.tests.test_numeric.TestClip._generate_flt_data(self,n,m)
numpy.core.tests.test_numeric.TestClip._generate_int32_data(self,n,m)
numpy.core.tests.test_numeric.TestClip._generate_int_data(self,n,m)
numpy.core.tests.test_numeric.TestClip._generate_non_native_data(self,n,m)
numpy.core.tests.test_numeric.TestClip._neg_byteorder(self,a)
numpy.core.tests.test_numeric.TestClip.clip(self,a,m,M,out=None)
numpy.core.tests.test_numeric.TestClip.fastclip(self,a,m,M,out=None,casting=None)
numpy.core.tests.test_numeric.TestClip.setup(self)
numpy.core.tests.test_numeric.TestClip.test_NaT_propagation(self,arr,amin,amax)
numpy.core.tests.test_numeric.TestClip.test_array_double(self)
numpy.core.tests.test_numeric.TestClip.test_clip_all_none(self)
numpy.core.tests.test_numeric.TestClip.test_clip_complex(self)
numpy.core.tests.test_numeric.TestClip.test_clip_func_takes_out(self)
numpy.core.tests.test_numeric.TestClip.test_clip_inplace_array(self)
numpy.core.tests.test_numeric.TestClip.test_clip_inplace_simple(self)
numpy.core.tests.test_numeric.TestClip.test_clip_invalid_casting(self)
numpy.core.tests.test_numeric.TestClip.test_clip_nan(self)
numpy.core.tests.test_numeric.TestClip.test_clip_non_contig(self)
numpy.core.tests.test_numeric.TestClip.test_clip_problem_cases(self,arr,amin,amax,exp)
numpy.core.tests.test_numeric.TestClip.test_clip_property(self,data,shape)
numpy.core.tests.test_numeric.TestClip.test_clip_scalar_nan_propagation(self,arr,amin,amax)
numpy.core.tests.test_numeric.TestClip.test_clip_value_min_max_flip(self,amin,amax)
numpy.core.tests.test_numeric.TestClip.test_clip_with_out_array_int32(self)
numpy.core.tests.test_numeric.TestClip.test_clip_with_out_array_outint32(self)
numpy.core.tests.test_numeric.TestClip.test_clip_with_out_memory_overlap(self)
numpy.core.tests.test_numeric.TestClip.test_clip_with_out_simple(self)
numpy.core.tests.test_numeric.TestClip.test_clip_with_out_simple2(self)
numpy.core.tests.test_numeric.TestClip.test_clip_with_out_simple_int32(self)
numpy.core.tests.test_numeric.TestClip.test_clip_with_out_transposed(self)
numpy.core.tests.test_numeric.TestClip.test_noncontig_inplace(self)
numpy.core.tests.test_numeric.TestClip.test_object_clip(self)
numpy.core.tests.test_numeric.TestClip.test_ones_pathological(self,dtype)
numpy.core.tests.test_numeric.TestClip.test_simple_complex(self)
numpy.core.tests.test_numeric.TestClip.test_simple_double(self)
numpy.core.tests.test_numeric.TestClip.test_simple_inplace_01(self)
numpy.core.tests.test_numeric.TestClip.test_simple_inplace_02(self)
numpy.core.tests.test_numeric.TestClip.test_simple_int(self)
numpy.core.tests.test_numeric.TestClip.test_simple_int32_inout(self,casting)
numpy.core.tests.test_numeric.TestClip.test_simple_int32_out(self)
numpy.core.tests.test_numeric.TestClip.test_simple_int64_inout(self)
numpy.core.tests.test_numeric.TestClip.test_simple_int64_out(self)
numpy.core.tests.test_numeric.TestClip.test_simple_nonnative(self)
numpy.core.tests.test_numeric.TestClip.test_simple_out(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_01(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_02(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_03(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_04(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_05(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_06(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_07(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_08(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_09(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_10(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_11(self)
numpy.core.tests.test_numeric.TestClip.test_type_cast_12(self)
numpy.core.tests.test_numeric.TestConvolve
numpy.core.tests.test_numeric.TestConvolve.test_mode(self)
numpy.core.tests.test_numeric.TestConvolve.test_no_overwrite(self)
numpy.core.tests.test_numeric.TestConvolve.test_object(self)
numpy.core.tests.test_numeric.TestCorrelate
numpy.core.tests.test_numeric.TestCorrelate._setup(self,dt)
numpy.core.tests.test_numeric.TestCorrelate.test_complex(self)
numpy.core.tests.test_numeric.TestCorrelate.test_float(self)
numpy.core.tests.test_numeric.TestCorrelate.test_mode(self)
numpy.core.tests.test_numeric.TestCorrelate.test_no_overwrite(self)
numpy.core.tests.test_numeric.TestCorrelate.test_object(self)
numpy.core.tests.test_numeric.TestCorrelate.test_zero_size(self)
numpy.core.tests.test_numeric.TestCreationFuncs
numpy.core.tests.test_numeric.TestCreationFuncs.check_function(self,func,fill_value=None)
numpy.core.tests.test_numeric.TestCreationFuncs.setup(self)
numpy.core.tests.test_numeric.TestCreationFuncs.test_empty(self)
numpy.core.tests.test_numeric.TestCreationFuncs.test_for_reference_leak(self)
numpy.core.tests.test_numeric.TestCreationFuncs.test_full(self)
numpy.core.tests.test_numeric.TestCreationFuncs.test_ones(self)
numpy.core.tests.test_numeric.TestCreationFuncs.test_zeros(self)
numpy.core.tests.test_numeric.TestCross
numpy.core.tests.test_numeric.TestCross.test_2x2(self)
numpy.core.tests.test_numeric.TestCross.test_2x3(self)
numpy.core.tests.test_numeric.TestCross.test_3x3(self)
numpy.core.tests.test_numeric.TestCross.test_broadcasting(self)
numpy.core.tests.test_numeric.TestCross.test_broadcasting_shapes(self)
numpy.core.tests.test_numeric.TestFloatExceptions
numpy.core.tests.test_numeric.TestFloatExceptions.assert_op_raises_fpe(self,fpeerr,flop,sc1,sc2)
numpy.core.tests.test_numeric.TestFloatExceptions.assert_raises_fpe(self,fpeerr,flop,x,y)
numpy.core.tests.test_numeric.TestFloatExceptions.test_floating_exceptions(self)
numpy.core.tests.test_numeric.TestFloatExceptions.test_warnings(self)
numpy.core.tests.test_numeric.TestFromiter
numpy.core.tests.test_numeric.TestFromiter.load_data(self,n,eindex)
numpy.core.tests.test_numeric.TestFromiter.makegen(self)
numpy.core.tests.test_numeric.TestFromiter.test_2592(self)
numpy.core.tests.test_numeric.TestFromiter.test_2592_edge(self)
numpy.core.tests.test_numeric.TestFromiter.test_lengths(self)
numpy.core.tests.test_numeric.TestFromiter.test_types(self)
numpy.core.tests.test_numeric.TestFromiter.test_values(self)
numpy.core.tests.test_numeric.TestIndex
numpy.core.tests.test_numeric.TestIndex.test_boolean(self)
numpy.core.tests.test_numeric.TestIndex.test_boolean_edgecase(self)
numpy.core.tests.test_numeric.TestIndices
numpy.core.tests.test_numeric.TestIndices.test_return_type(self,dtype,dims)
numpy.core.tests.test_numeric.TestIndices.test_scalar_input(self)
numpy.core.tests.test_numeric.TestIndices.test_simple(self)
numpy.core.tests.test_numeric.TestIndices.test_single_input(self)
numpy.core.tests.test_numeric.TestIndices.test_sparse(self)
numpy.core.tests.test_numeric.TestIsclose
numpy.core.tests.test_numeric.TestIsclose.setup(self)
numpy.core.tests.test_numeric.TestIsclose.test_equal_nan(self)
numpy.core.tests.test_numeric.TestIsclose.test_ip_all_isclose(self)
numpy.core.tests.test_numeric.TestIsclose.test_ip_isclose(self)
numpy.core.tests.test_numeric.TestIsclose.test_ip_isclose_allclose(self)
numpy.core.tests.test_numeric.TestIsclose.test_ip_none_isclose(self)
numpy.core.tests.test_numeric.TestIsclose.test_masked_arrays(self)
numpy.core.tests.test_numeric.TestIsclose.test_no_parameter_modification(self)
numpy.core.tests.test_numeric.TestIsclose.test_non_finite_scalar(self)
numpy.core.tests.test_numeric.TestIsclose.test_scalar_return(self)
numpy.core.tests.test_numeric.TestIsclose.test_timedelta(self)
numpy.core.tests.test_numeric.TestIsclose.tst_all_isclose(self,x,y)
numpy.core.tests.test_numeric.TestIsclose.tst_isclose_allclose(self,x,y)
numpy.core.tests.test_numeric.TestIsclose.tst_none_isclose(self,x,y)
numpy.core.tests.test_numeric.TestIsscalar
numpy.core.tests.test_numeric.TestIsscalar.test_isscalar(self)
numpy.core.tests.test_numeric.TestKeepdims
numpy.core.tests.test_numeric.TestKeepdims.sub_array(np.ndarray)
numpy.core.tests.test_numeric.TestKeepdims.sub_array.sum(self,axis=None,dtype=None,out=None)
numpy.core.tests.test_numeric.TestKeepdims.test_raise(self)
numpy.core.tests.test_numeric.TestLikeFuncs
numpy.core.tests.test_numeric.TestLikeFuncs.check_like_function(self,like_function,value,fill_value=False)
numpy.core.tests.test_numeric.TestLikeFuncs.compare_array_value(self,dz,value,fill_value)
numpy.core.tests.test_numeric.TestLikeFuncs.setup(self)
numpy.core.tests.test_numeric.TestLikeFuncs.test_empty_like(self)
numpy.core.tests.test_numeric.TestLikeFuncs.test_filled_like(self)
numpy.core.tests.test_numeric.TestLikeFuncs.test_ones_like(self)
numpy.core.tests.test_numeric.TestLikeFuncs.test_zeros_like(self)
numpy.core.tests.test_numeric.TestMoveaxis
numpy.core.tests.test_numeric.TestMoveaxis.test_array_likes(self)
numpy.core.tests.test_numeric.TestMoveaxis.test_errors(self)
numpy.core.tests.test_numeric.TestMoveaxis.test_move_multiples(self)
numpy.core.tests.test_numeric.TestMoveaxis.test_move_new_position(self)
numpy.core.tests.test_numeric.TestMoveaxis.test_move_to_end(self)
numpy.core.tests.test_numeric.TestMoveaxis.test_preserve_order(self)
numpy.core.tests.test_numeric.TestNonarrayArgs
numpy.core.tests.test_numeric.TestNonarrayArgs.test_choose(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_clip(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_compress(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_count_nonzero(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_cumproduct(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_diagonal(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_dunder_round(self,dtype)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_dunder_round_accuracy(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_dunder_round_edgecases(self,val,ndigits)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_mean(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_prod(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_ptp(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_ravel(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_repeat(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_reshape(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_round(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_round_py_consistency(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_searchsorted(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_size(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_squeeze(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_std(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_sum(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_swapaxes(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_take(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_trace(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_transpose(self)
numpy.core.tests.test_numeric.TestNonarrayArgs.test_var(self)
numpy.core.tests.test_numeric.TestNonzero
numpy.core.tests.test_numeric.TestNonzero.test_array_method(self)
numpy.core.tests.test_numeric.TestNonzero.test_count_nonzero_axis(self)
numpy.core.tests.test_numeric.TestNonzero.test_count_nonzero_axis_all_dtypes(self)
numpy.core.tests.test_numeric.TestNonzero.test_count_nonzero_axis_consistent(self)
numpy.core.tests.test_numeric.TestNonzero.test_countnonzero_axis_empty(self)
numpy.core.tests.test_numeric.TestNonzero.test_countnonzero_keepdims(self)
numpy.core.tests.test_numeric.TestNonzero.test_nonzero_exception_safe(self)
numpy.core.tests.test_numeric.TestNonzero.test_nonzero_invalid_object(self)
numpy.core.tests.test_numeric.TestNonzero.test_nonzero_onedim(self)
numpy.core.tests.test_numeric.TestNonzero.test_nonzero_sideeffect_safety(self)
numpy.core.tests.test_numeric.TestNonzero.test_nonzero_trivial(self)
numpy.core.tests.test_numeric.TestNonzero.test_nonzero_twodim(self)
numpy.core.tests.test_numeric.TestNonzero.test_nonzero_zerod(self)
numpy.core.tests.test_numeric.TestNonzero.test_return_type(self)
numpy.core.tests.test_numeric.TestNonzero.test_sparse(self)
numpy.core.tests.test_numeric.TestNonzero.test_structured_threadsafety(self)
numpy.core.tests.test_numeric.TestRequire
numpy.core.tests.test_numeric.TestRequire.generate_all_false(self,dtype)
numpy.core.tests.test_numeric.TestRequire.set_and_check_flag(self,flag,dtype,arr)
numpy.core.tests.test_numeric.TestRequire.test_C_and_F_simul(self)
numpy.core.tests.test_numeric.TestRequire.test_ensure_array(self)
numpy.core.tests.test_numeric.TestRequire.test_non_array_input(self)
numpy.core.tests.test_numeric.TestRequire.test_preserve_subtype(self)
numpy.core.tests.test_numeric.TestRequire.test_require_each(self)
numpy.core.tests.test_numeric.TestRequire.test_unknown_requirement(self)
numpy.core.tests.test_numeric.TestResize
numpy.core.tests.test_numeric.TestResize.test_copies(self)
numpy.core.tests.test_numeric.TestResize.test_negative_resize(self)
numpy.core.tests.test_numeric.TestResize.test_repeats(self)
numpy.core.tests.test_numeric.TestResize.test_reshape_from_zero(self)
numpy.core.tests.test_numeric.TestResize.test_subclass(self)
numpy.core.tests.test_numeric.TestResize.test_zeroresize(self)
numpy.core.tests.test_numeric.TestRoll
numpy.core.tests.test_numeric.TestRoll.test_roll1d(self)
numpy.core.tests.test_numeric.TestRoll.test_roll2d(self)
numpy.core.tests.test_numeric.TestRoll.test_roll_empty(self)
numpy.core.tests.test_numeric.TestRollaxis
numpy.core.tests.test_numeric.TestRollaxis.test_exceptions(self)
numpy.core.tests.test_numeric.TestRollaxis.test_results(self)
numpy.core.tests.test_numeric.TestSeterr
numpy.core.tests.test_numeric.TestSeterr.test_default(self)
numpy.core.tests.test_numeric.TestSeterr.test_divide_err(self)
numpy.core.tests.test_numeric.TestSeterr.test_errobj(self)
numpy.core.tests.test_numeric.TestSeterr.test_errobj_noerrmask(self)
numpy.core.tests.test_numeric.TestSeterr.test_set(self)
numpy.core.tests.test_numeric.TestStdVar
numpy.core.tests.test_numeric.TestStdVar.setup(self)
numpy.core.tests.test_numeric.TestStdVar.test_basic(self)
numpy.core.tests.test_numeric.TestStdVar.test_ddof1(self)
numpy.core.tests.test_numeric.TestStdVar.test_ddof2(self)
numpy.core.tests.test_numeric.TestStdVar.test_out_scalar(self)
numpy.core.tests.test_numeric.TestStdVar.test_scalars(self)
numpy.core.tests.test_numeric.TestStdVarComplex
numpy.core.tests.test_numeric.TestStdVarComplex.test_basic(self)
numpy.core.tests.test_numeric.TestStdVarComplex.test_scalars(self)
numpy.core.tests.test_numeric.TestStringFunction
numpy.core.tests.test_numeric.TestStringFunction.test_set_string_function(self)
numpy.core.tests.test_numeric.TestTensordot
numpy.core.tests.test_numeric.TestTensordot.test_zero_dimension(self)
numpy.core.tests.test_numeric.TestTensordot.test_zero_dimensional(self)
numpy.core.tests.test_numeric.TestTypes
numpy.core.tests.test_numeric.TestTypes.check_promotion_cases(self,promote_func)
numpy.core.tests.test_numeric.TestTypes.test_can_cast(self)
numpy.core.tests.test_numeric.TestTypes.test_can_cast_and_promote_usertypes(self)
numpy.core.tests.test_numeric.TestTypes.test_can_cast_simple_to_structured(self)
numpy.core.tests.test_numeric.TestTypes.test_can_cast_structured_to_simple(self)
numpy.core.tests.test_numeric.TestTypes.test_can_cast_values(self)
numpy.core.tests.test_numeric.TestTypes.test_coercion(self)
numpy.core.tests.test_numeric.TestTypes.test_invalid_void_promotion(self,dtype1,dtype2)
numpy.core.tests.test_numeric.TestTypes.test_invalid_void_promotion(self,dtype1,dtype2)
numpy.core.tests.test_numeric.TestTypes.test_promote_identical_types_metadata(self,dtype)
numpy.core.tests.test_numeric.TestTypes.test_promote_types_endian(self)
numpy.core.tests.test_numeric.TestTypes.test_promote_types_metadata(self,dtype1,dtype2)
numpy.core.tests.test_numeric.TestTypes.test_promote_types_strings(self,swap,string_dtype)
numpy.core.tests.test_numeric.TestTypes.test_result_type(self)
numpy.core.tests.test_numeric.TestTypes.test_valid_void_promotion(self,dtype1,dtype2)
numpy.core.tests.test_numeric.TestTypes.test_valid_void_promotion(self,dtype1,dtype2)
numpy.core.tests.test_numeric.assert_array_strict_equal(x,y)
numpy.core.tests.test_numeric.test_outer_out_param()
numpy.tests.test_NIterError(Exception)
numpy.tests.test_TestAllclose
numpy.tests.test_TestAllclose.setup(self)
numpy.tests.test_TestAllclose.teardown(self)
numpy.tests.test_TestAllclose.test_equalnan(self)
numpy.tests.test_TestAllclose.test_ip_allclose(self)
numpy.tests.test_TestAllclose.test_ip_not_allclose(self)
numpy.tests.test_TestAllclose.test_min_int(self)
numpy.tests.test_TestAllclose.test_no_parameter_modification(self)
numpy.tests.test_TestAllclose.test_return_class_is_ndarray(self)
numpy.tests.test_TestAllclose.tst_allclose(self,x,y)
numpy.tests.test_TestAllclose.tst_not_allclose(self,x,y)
numpy.tests.test_TestArgwhere
numpy.tests.test_TestArgwhere.test_2D(self)
numpy.tests.test_TestArgwhere.test_list(self)
numpy.tests.test_TestArgwhere.test_nd(self,nd)
numpy.tests.test_TestArrayComparisons
numpy.tests.test_TestArrayComparisons.test_array_equal(self)
numpy.tests.test_TestArrayComparisons.test_array_equal_equal_nan(self)
numpy.tests.test_TestArrayComparisons.test_array_equiv(self)
numpy.tests.test_TestArrayComparisons.test_compare_unstructured_voids(self,dtype)
numpy.tests.test_TestArrayComparisons.test_none_compares_elementwise(self)
numpy.tests.test_TestBaseRepr
numpy.tests.test_TestBaseRepr.test_base3(self)
numpy.tests.test_TestBaseRepr.test_base_range(self)
numpy.tests.test_TestBaseRepr.test_negative(self)
numpy.tests.test_TestBaseRepr.test_positive(self)
numpy.tests.test_TestBinaryRepr
numpy.tests.test_TestBinaryRepr.test_large_neg_int64(self)
numpy.tests.test_TestBinaryRepr.test_neg_width_boundaries(self)
numpy.tests.test_TestBinaryRepr.test_negative(self)
numpy.tests.test_TestBinaryRepr.test_positive(self)
numpy.tests.test_TestBinaryRepr.test_sufficient_width(self)
numpy.tests.test_TestBinaryRepr.test_zero(self)
numpy.tests.test_TestBoolArray
numpy.tests.test_TestBoolArray.setup(self)
numpy.tests.test_TestBoolArray.test_all_any(self)
numpy.tests.test_TestBoolArray.test_logical_and_or_xor(self)
numpy.tests.test_TestBoolArray.test_logical_not_abs(self)
numpy.tests.test_TestBoolCmp
numpy.tests.test_TestBoolCmp.setup(self)
numpy.tests.test_TestBoolCmp.test_double(self)
numpy.tests.test_TestBoolCmp.test_float(self)
numpy.tests.test_TestBoolScalar
numpy.tests.test_TestBoolScalar.test_bitwise_and(self)
numpy.tests.test_TestBoolScalar.test_bitwise_or(self)
numpy.tests.test_TestBoolScalar.test_bitwise_xor(self)
numpy.tests.test_TestBoolScalar.test_logical(self)
numpy.tests.test_TestBroadcast
numpy.tests.test_TestBroadcast.test_broadcast_error_kwargs(self)
numpy.tests.test_TestBroadcast.test_broadcast_in_args(self)
numpy.tests.test_TestBroadcast.test_broadcast_single_arg(self)
numpy.tests.test_TestBroadcast.test_number_of_arguments(self)
numpy.tests.test_TestClip
numpy.tests.test_TestClip._generate_data(self,n,m)
numpy.tests.test_TestClip._generate_data_complex(self,n,m)
numpy.tests.test_TestClip._generate_flt_data(self,n,m)
numpy.tests.test_TestClip._generate_int32_data(self,n,m)
numpy.tests.test_TestClip._generate_int_data(self,n,m)
numpy.tests.test_TestClip._generate_non_native_data(self,n,m)
numpy.tests.test_TestClip._neg_byteorder(self,a)
numpy.tests.test_TestClip.clip(self,a,m,M,out=None)
numpy.tests.test_TestClip.fastclip(self,a,m,M,out=None,casting=None)
numpy.tests.test_TestClip.setup(self)
numpy.tests.test_TestClip.test_NaT_propagation(self,arr,amin,amax)
numpy.tests.test_TestClip.test_array_double(self)
numpy.tests.test_TestClip.test_clip_all_none(self)
numpy.tests.test_TestClip.test_clip_complex(self)
numpy.tests.test_TestClip.test_clip_func_takes_out(self)
numpy.tests.test_TestClip.test_clip_inplace_array(self)
numpy.tests.test_TestClip.test_clip_inplace_simple(self)
numpy.tests.test_TestClip.test_clip_invalid_casting(self)
numpy.tests.test_TestClip.test_clip_nan(self)
numpy.tests.test_TestClip.test_clip_non_contig(self)
numpy.tests.test_TestClip.test_clip_problem_cases(self,arr,amin,amax,exp)
numpy.tests.test_TestClip.test_clip_property(self,data,shape)
numpy.tests.test_TestClip.test_clip_scalar_nan_propagation(self,arr,amin,amax)
numpy.tests.test_TestClip.test_clip_value_min_max_flip(self,amin,amax)
numpy.tests.test_TestClip.test_clip_with_out_array_int32(self)
numpy.tests.test_TestClip.test_clip_with_out_array_outint32(self)
numpy.tests.test_TestClip.test_clip_with_out_memory_overlap(self)
numpy.tests.test_TestClip.test_clip_with_out_simple(self)
numpy.tests.test_TestClip.test_clip_with_out_simple2(self)
numpy.tests.test_TestClip.test_clip_with_out_simple_int32(self)
numpy.tests.test_TestClip.test_clip_with_out_transposed(self)
numpy.tests.test_TestClip.test_noncontig_inplace(self)
numpy.tests.test_TestClip.test_object_clip(self)
numpy.tests.test_TestClip.test_ones_pathological(self,dtype)
numpy.tests.test_TestClip.test_simple_complex(self)
numpy.tests.test_TestClip.test_simple_double(self)
numpy.tests.test_TestClip.test_simple_inplace_01(self)
numpy.tests.test_TestClip.test_simple_inplace_02(self)
numpy.tests.test_TestClip.test_simple_int(self)
numpy.tests.test_TestClip.test_simple_int32_inout(self,casting)
numpy.tests.test_TestClip.test_simple_int32_out(self)
numpy.tests.test_TestClip.test_simple_int64_inout(self)
numpy.tests.test_TestClip.test_simple_int64_out(self)
numpy.tests.test_TestClip.test_simple_nonnative(self)
numpy.tests.test_TestClip.test_simple_out(self)
numpy.tests.test_TestClip.test_type_cast_01(self)
numpy.tests.test_TestClip.test_type_cast_02(self)
numpy.tests.test_TestClip.test_type_cast_03(self)
numpy.tests.test_TestClip.test_type_cast_04(self)
numpy.tests.test_TestClip.test_type_cast_05(self)
numpy.tests.test_TestClip.test_type_cast_06(self)
numpy.tests.test_TestClip.test_type_cast_07(self)
numpy.tests.test_TestClip.test_type_cast_08(self)
numpy.tests.test_TestClip.test_type_cast_09(self)
numpy.tests.test_TestClip.test_type_cast_10(self)
numpy.tests.test_TestClip.test_type_cast_11(self)
numpy.tests.test_TestClip.test_type_cast_12(self)
numpy.tests.test_TestConvolve
numpy.tests.test_TestConvolve.test_mode(self)
numpy.tests.test_TestConvolve.test_no_overwrite(self)
numpy.tests.test_TestConvolve.test_object(self)
numpy.tests.test_TestCorrelate
numpy.tests.test_TestCorrelate._setup(self,dt)
numpy.tests.test_TestCorrelate.test_complex(self)
numpy.tests.test_TestCorrelate.test_float(self)
numpy.tests.test_TestCorrelate.test_mode(self)
numpy.tests.test_TestCorrelate.test_no_overwrite(self)
numpy.tests.test_TestCorrelate.test_object(self)
numpy.tests.test_TestCorrelate.test_zero_size(self)
numpy.tests.test_TestCreationFuncs
numpy.tests.test_TestCreationFuncs.check_function(self,func,fill_value=None)
numpy.tests.test_TestCreationFuncs.setup(self)
numpy.tests.test_TestCreationFuncs.test_empty(self)
numpy.tests.test_TestCreationFuncs.test_for_reference_leak(self)
numpy.tests.test_TestCreationFuncs.test_full(self)
numpy.tests.test_TestCreationFuncs.test_ones(self)
numpy.tests.test_TestCreationFuncs.test_zeros(self)
numpy.tests.test_TestCross
numpy.tests.test_TestCross.test_2x2(self)
numpy.tests.test_TestCross.test_2x3(self)
numpy.tests.test_TestCross.test_3x3(self)
numpy.tests.test_TestCross.test_broadcasting(self)
numpy.tests.test_TestCross.test_broadcasting_shapes(self)
numpy.tests.test_TestFloatExceptions
numpy.tests.test_TestFloatExceptions.assert_op_raises_fpe(self,fpeerr,flop,sc1,sc2)
numpy.tests.test_TestFloatExceptions.assert_raises_fpe(self,fpeerr,flop,x,y)
numpy.tests.test_TestFloatExceptions.test_floating_exceptions(self)
numpy.tests.test_TestFloatExceptions.test_warnings(self)
numpy.tests.test_TestFromiter
numpy.tests.test_TestFromiter.load_data(self,n,eindex)
numpy.tests.test_TestFromiter.makegen(self)
numpy.tests.test_TestFromiter.test_2592(self)
numpy.tests.test_TestFromiter.test_2592_edge(self)
numpy.tests.test_TestFromiter.test_lengths(self)
numpy.tests.test_TestFromiter.test_types(self)
numpy.tests.test_TestFromiter.test_values(self)
numpy.tests.test_TestIndex
numpy.tests.test_TestIndex.test_boolean(self)
numpy.tests.test_TestIndex.test_boolean_edgecase(self)
numpy.tests.test_TestIndices
numpy.tests.test_TestIndices.test_return_type(self,dtype,dims)
numpy.tests.test_TestIndices.test_scalar_input(self)
numpy.tests.test_TestIndices.test_simple(self)
numpy.tests.test_TestIndices.test_single_input(self)
numpy.tests.test_TestIndices.test_sparse(self)
numpy.tests.test_TestIsclose
numpy.tests.test_TestIsclose.setup(self)
numpy.tests.test_TestIsclose.test_equal_nan(self)
numpy.tests.test_TestIsclose.test_ip_all_isclose(self)
numpy.tests.test_TestIsclose.test_ip_isclose(self)
numpy.tests.test_TestIsclose.test_ip_isclose_allclose(self)
numpy.tests.test_TestIsclose.test_ip_none_isclose(self)
numpy.tests.test_TestIsclose.test_masked_arrays(self)
numpy.tests.test_TestIsclose.test_no_parameter_modification(self)
numpy.tests.test_TestIsclose.test_non_finite_scalar(self)
numpy.tests.test_TestIsclose.test_scalar_return(self)
numpy.tests.test_TestIsclose.test_timedelta(self)
numpy.tests.test_TestIsclose.tst_all_isclose(self,x,y)
numpy.tests.test_TestIsclose.tst_isclose_allclose(self,x,y)
numpy.tests.test_TestIsclose.tst_none_isclose(self,x,y)
numpy.tests.test_TestIsscalar
numpy.tests.test_TestIsscalar.test_isscalar(self)
numpy.tests.test_TestKeepdims
numpy.tests.test_TestKeepdims.sub_array(np.ndarray)
numpy.tests.test_TestKeepdims.sub_array.sum(self,axis=None,dtype=None,out=None)
numpy.tests.test_TestKeepdims.test_raise(self)
numpy.tests.test_TestLikeFuncs
numpy.tests.test_TestLikeFuncs.check_like_function(self,like_function,value,fill_value=False)
numpy.tests.test_TestLikeFuncs.compare_array_value(self,dz,value,fill_value)
numpy.tests.test_TestLikeFuncs.setup(self)
numpy.tests.test_TestLikeFuncs.test_empty_like(self)
numpy.tests.test_TestLikeFuncs.test_filled_like(self)
numpy.tests.test_TestLikeFuncs.test_ones_like(self)
numpy.tests.test_TestLikeFuncs.test_zeros_like(self)
numpy.tests.test_TestMoveaxis
numpy.tests.test_TestMoveaxis.test_array_likes(self)
numpy.tests.test_TestMoveaxis.test_errors(self)
numpy.tests.test_TestMoveaxis.test_move_multiples(self)
numpy.tests.test_TestMoveaxis.test_move_new_position(self)
numpy.tests.test_TestMoveaxis.test_move_to_end(self)
numpy.tests.test_TestMoveaxis.test_preserve_order(self)
numpy.tests.test_TestNonarrayArgs
numpy.tests.test_TestNonarrayArgs.test_choose(self)
numpy.tests.test_TestNonarrayArgs.test_clip(self)
numpy.tests.test_TestNonarrayArgs.test_compress(self)
numpy.tests.test_TestNonarrayArgs.test_count_nonzero(self)
numpy.tests.test_TestNonarrayArgs.test_cumproduct(self)
numpy.tests.test_TestNonarrayArgs.test_diagonal(self)
numpy.tests.test_TestNonarrayArgs.test_dunder_round(self,dtype)
numpy.tests.test_TestNonarrayArgs.test_dunder_round_accuracy(self)
numpy.tests.test_TestNonarrayArgs.test_dunder_round_edgecases(self,val,ndigits)
numpy.tests.test_TestNonarrayArgs.test_mean(self)
numpy.tests.test_TestNonarrayArgs.test_prod(self)
numpy.tests.test_TestNonarrayArgs.test_ptp(self)
numpy.tests.test_TestNonarrayArgs.test_ravel(self)
numpy.tests.test_TestNonarrayArgs.test_repeat(self)
numpy.tests.test_TestNonarrayArgs.test_reshape(self)
numpy.tests.test_TestNonarrayArgs.test_round(self)
numpy.tests.test_TestNonarrayArgs.test_round_py_consistency(self)
numpy.tests.test_TestNonarrayArgs.test_searchsorted(self)
numpy.tests.test_TestNonarrayArgs.test_size(self)
numpy.tests.test_TestNonarrayArgs.test_squeeze(self)
numpy.tests.test_TestNonarrayArgs.test_std(self)
numpy.tests.test_TestNonarrayArgs.test_sum(self)
numpy.tests.test_TestNonarrayArgs.test_swapaxes(self)
numpy.tests.test_TestNonarrayArgs.test_take(self)
numpy.tests.test_TestNonarrayArgs.test_trace(self)
numpy.tests.test_TestNonarrayArgs.test_transpose(self)
numpy.tests.test_TestNonarrayArgs.test_var(self)
numpy.tests.test_TestNonzero
numpy.tests.test_TestNonzero.test_array_method(self)
numpy.tests.test_TestNonzero.test_count_nonzero_axis(self)
numpy.tests.test_TestNonzero.test_count_nonzero_axis_all_dtypes(self)
numpy.tests.test_TestNonzero.test_count_nonzero_axis_consistent(self)
numpy.tests.test_TestNonzero.test_countnonzero_axis_empty(self)
numpy.tests.test_TestNonzero.test_countnonzero_keepdims(self)
numpy.tests.test_TestNonzero.test_nonzero_exception_safe(self)
numpy.tests.test_TestNonzero.test_nonzero_invalid_object(self)
numpy.tests.test_TestNonzero.test_nonzero_onedim(self)
numpy.tests.test_TestNonzero.test_nonzero_sideeffect_safety(self)
numpy.tests.test_TestNonzero.test_nonzero_trivial(self)
numpy.tests.test_TestNonzero.test_nonzero_twodim(self)
numpy.tests.test_TestNonzero.test_nonzero_zerod(self)
numpy.tests.test_TestNonzero.test_return_type(self)
numpy.tests.test_TestNonzero.test_sparse(self)
numpy.tests.test_TestNonzero.test_structured_threadsafety(self)
numpy.tests.test_TestRequire
numpy.tests.test_TestRequire.generate_all_false(self,dtype)
numpy.tests.test_TestRequire.set_and_check_flag(self,flag,dtype,arr)
numpy.tests.test_TestRequire.test_C_and_F_simul(self)
numpy.tests.test_TestRequire.test_ensure_array(self)
numpy.tests.test_TestRequire.test_non_array_input(self)
numpy.tests.test_TestRequire.test_preserve_subtype(self)
numpy.tests.test_TestRequire.test_require_each(self)
numpy.tests.test_TestRequire.test_unknown_requirement(self)
numpy.tests.test_TestResize
numpy.tests.test_TestResize.test_copies(self)
numpy.tests.test_TestResize.test_negative_resize(self)
numpy.tests.test_TestResize.test_repeats(self)
numpy.tests.test_TestResize.test_reshape_from_zero(self)
numpy.tests.test_TestResize.test_subclass(self)
numpy.tests.test_TestResize.test_zeroresize(self)
numpy.tests.test_TestRoll
numpy.tests.test_TestRoll.test_roll1d(self)
numpy.tests.test_TestRoll.test_roll2d(self)
numpy.tests.test_TestRoll.test_roll_empty(self)
numpy.tests.test_TestRollaxis
numpy.tests.test_TestRollaxis.test_exceptions(self)
numpy.tests.test_TestRollaxis.test_results(self)
numpy.tests.test_TestSeterr
numpy.tests.test_TestSeterr.test_default(self)
numpy.tests.test_TestSeterr.test_divide_err(self)
numpy.tests.test_TestSeterr.test_errobj(self)
numpy.tests.test_TestSeterr.test_errobj_noerrmask(self)
numpy.tests.test_TestSeterr.test_set(self)
numpy.tests.test_TestStdVar
numpy.tests.test_TestStdVar.setup(self)
numpy.tests.test_TestStdVar.test_basic(self)
numpy.tests.test_TestStdVar.test_ddof1(self)
numpy.tests.test_TestStdVar.test_ddof2(self)
numpy.tests.test_TestStdVar.test_out_scalar(self)
numpy.tests.test_TestStdVar.test_scalars(self)
numpy.tests.test_TestStdVarComplex
numpy.tests.test_TestStdVarComplex.test_basic(self)
numpy.tests.test_TestStdVarComplex.test_scalars(self)
numpy.tests.test_TestStringFunction
numpy.tests.test_TestStringFunction.test_set_string_function(self)
numpy.tests.test_TestTensordot
numpy.tests.test_TestTensordot.test_zero_dimension(self)
numpy.tests.test_TestTensordot.test_zero_dimensional(self)
numpy.tests.test_TestTypes
numpy.tests.test_TestTypes.check_promotion_cases(self,promote_func)
numpy.tests.test_TestTypes.test_can_cast(self)
numpy.tests.test_TestTypes.test_can_cast_and_promote_usertypes(self)
numpy.tests.test_TestTypes.test_can_cast_simple_to_structured(self)
numpy.tests.test_TestTypes.test_can_cast_structured_to_simple(self)
numpy.tests.test_TestTypes.test_can_cast_values(self)
numpy.tests.test_TestTypes.test_coercion(self)
numpy.tests.test_TestTypes.test_invalid_void_promotion(self,dtype1,dtype2)
numpy.tests.test_TestTypes.test_invalid_void_promotion(self,dtype1,dtype2)
numpy.tests.test_TestTypes.test_promote_identical_types_metadata(self,dtype)
numpy.tests.test_TestTypes.test_promote_types_endian(self)
numpy.tests.test_TestTypes.test_promote_types_metadata(self,dtype1,dtype2)
numpy.tests.test_TestTypes.test_promote_types_strings(self,swap,string_dtype)
numpy.tests.test_TestTypes.test_result_type(self)
numpy.tests.test_TestTypes.test_valid_void_promotion(self,dtype1,dtype2)
numpy.tests.test_TestTypes.test_valid_void_promotion(self,dtype1,dtype2)
numpy.tests.test_assert_array_strict_equal(x,y)
numpy.tests.test_test_outer_out_param()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_arrayprint.py----------------------------------------
A:numpy.core.tests.test_arrayprint.x->numpy.array([u'é'], dtype=object)
A:numpy.core.tests.test_arrayprint.x1d->numpy.array([1, 2]).view(sub)
A:numpy.core.tests.test_arrayprint.x2d->numpy.array([[1, 2], [3, 4]]).view(sub)
A:numpy.core.tests.test_arrayprint.xstruct->numpy.ones((2, 2), dtype=[('a', '<i4')]).view(sub)
A:numpy.core.tests.test_arrayprint.obj->numpy.asarray(inp).view(cls)
A:numpy.core.tests.test_arrayprint.ret->super().__getitem__(ind)
A:numpy.core.tests.test_arrayprint.y->numpy.array([0.2918820979355541, 0.5064172631089138, 0.2848750619642916, 0.4342965294660567, 0.7326538397312751, 0.3459503329096204, 0.0862072768214508, 0.39112753029631175], dtype=np.float64)
A:numpy.core.tests.test_arrayprint.x[()]->sub(None)
A:numpy.core.tests.test_arrayprint.result->numpy.array2string(a, max_line_width=len(repr(text)) * 2 + 3)
A:numpy.core.tests.test_arrayprint.dc->numpy.arange(5).view(DuckCounter)
A:numpy.core.tests.test_arrayprint.arr0d->numpy.array(None)
A:numpy.core.tests.test_arrayprint.arr1d->numpy.array([None, None])
A:numpy.core.tests.test_arrayprint.first->numpy.array(None)
A:numpy.core.tests.test_arrayprint.second->numpy.array(None)
A:numpy.core.tests.test_arrayprint.no_fields->numpy.dtype([])
A:numpy.core.tests.test_arrayprint.arr_no_fields->numpy.empty(4, dtype=no_fields)
A:numpy.core.tests.test_arrayprint.a->numpy.arange(27).reshape((3, 3, 3))
A:numpy.core.tests.test_arrayprint.s->str(np.array([2.0]) / 3)
A:numpy.core.tests.test_arrayprint.dt->numpy.dtype([('name', np.str_, 16), ('grades', np.float64, (2,))])
A:numpy.core.tests.test_arrayprint.A->numpy.arange(1002).reshape(2, 501)
A:numpy.core.tests.test_arrayprint.struct_int->numpy.array([([1, -1],), ([123, 1],)], dtype=[('B', 'i4', 2)])
A:numpy.core.tests.test_arrayprint.struct_2dint->numpy.array([([[0, 1], [2, 3]],), ([[12, 0], [0, 0]],)], dtype=[('B', 'i4', (2, 2))])
A:numpy.core.tests.test_arrayprint.array_scalar->numpy.array((1.0, 2.1234567890123457, 3.0), dtype='f8,f8,f8')
A:numpy.core.tests.test_arrayprint.arr->numpy.zeros(3, int)
A:numpy.core.tests.test_arrayprint.a[0, 0]->numpy.eye(2)
A:numpy.core.tests.test_arrayprint.a[0, 1]->numpy.eye(3)
A:numpy.core.tests.test_arrayprint.a[1, 1]->numpy.ones((3, 1))
A:numpy.core.tests.test_arrayprint.expected_repr->'[{0!r} {0!r}\n {0!r}]'.format(text)
A:numpy.core.tests.test_arrayprint.r1->sys.getrefcount(a)
A:numpy.core.tests.test_arrayprint.r2->sys.getrefcount(a)
A:numpy.core.tests.test_arrayprint.self.oldopts->numpy.get_printoptions()
A:numpy.core.tests.test_arrayprint.z->numpy.array([np.inf, 1.1234, -1e+120])
A:numpy.core.tests.test_arrayprint.w->numpy.array(['1e{}'.format(i) for i in range(25)], dtype=np.float64)
A:numpy.core.tests.test_arrayprint.b->numpy.zeros((3, 3, 1, 1))
A:numpy.core.tests.test_arrayprint.c->numpy.array([1.0 + 1j, 1.123456789 + 1.123456789j], dtype='c16')
A:numpy.core.tests.test_arrayprint.wp->numpy.array([12.34, 100.0, 1e+123])
A:numpy.core.tests.test_arrayprint.opts->numpy.get_printoptions()
A:numpy.core.tests.test_arrayprint.saved_opts->ctx.copy()
numpy.core.tests.test_arrayprint.TestArray2String
numpy.core.tests.test_arrayprint.TestArray2String.test_any_text(self,text)
numpy.core.tests.test_arrayprint.TestArray2String.test_basic(self)
numpy.core.tests.test_arrayprint.TestArray2String.test_edgeitems_kwarg(self)
numpy.core.tests.test_arrayprint.TestArray2String.test_format_function(self)
numpy.core.tests.test_arrayprint.TestArray2String.test_linewidth(self)
numpy.core.tests.test_arrayprint.TestArray2String.test_multiline_repr(self)
numpy.core.tests.test_arrayprint.TestArray2String.test_nested_array_repr(self)
numpy.core.tests.test_arrayprint.TestArray2String.test_refcount(self)
numpy.core.tests.test_arrayprint.TestArray2String.test_structure_format(self)
numpy.core.tests.test_arrayprint.TestArray2String.test_summarize_1d(self)
numpy.core.tests.test_arrayprint.TestArray2String.test_summarize_2d(self)
numpy.core.tests.test_arrayprint.TestArray2String.test_unexpected_kwarg(self)
numpy.core.tests.test_arrayprint.TestArray2String.test_unstructured_void_repr(self)
numpy.core.tests.test_arrayprint.TestArray2String.test_wide_element(self)
numpy.core.tests.test_arrayprint.TestArrayRepr
numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass(self)
numpy.core.tests.test_arrayprint.TestArrayRepr.test_containing_list(self)
numpy.core.tests.test_arrayprint.TestArrayRepr.test_fieldless_structured(self)
numpy.core.tests.test_arrayprint.TestArrayRepr.test_nan_inf(self)
numpy.core.tests.test_arrayprint.TestArrayRepr.test_object_subclass(self)
numpy.core.tests.test_arrayprint.TestArrayRepr.test_self_containing(self)
numpy.core.tests.test_arrayprint.TestArrayRepr.test_subclass(self)
numpy.core.tests.test_arrayprint.TestArrayRepr.test_void_scalar_recursion(self)
numpy.core.tests.test_arrayprint.TestComplexArray
numpy.core.tests.test_arrayprint.TestComplexArray.test_str(self)
numpy.core.tests.test_arrayprint.TestContextManager
numpy.core.tests.test_arrayprint.TestContextManager.test_ctx_mgr(self)
numpy.core.tests.test_arrayprint.TestContextManager.test_ctx_mgr_as_smth(self)
numpy.core.tests.test_arrayprint.TestContextManager.test_ctx_mgr_exceptions(self)
numpy.core.tests.test_arrayprint.TestContextManager.test_ctx_mgr_restores(self)
numpy.core.tests.test_arrayprint.TestPrintOptions
numpy.core.tests.test_arrayprint.TestPrintOptions.setup(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.teardown(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_0d_arrays(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_bad_args(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_basic(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_bool_spacing(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_dtype_linewidth_wrapping(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_edgeitems(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_float_overflow_nowarn(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_float_spacing(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_floatmode(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_formatter(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_formatter_reset(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_legacy_mode_scalars(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_legacy_stray_comma(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_linewidth_repr(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_linewidth_str(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_precision_zero(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_sign_spacing(self)
numpy.core.tests.test_arrayprint.TestPrintOptions.test_sign_spacing_structured(self)
numpy.core.tests.test_arrayprint.test_unicode_object_array()
numpy.tests.test_arrayprint.TestArray2String
numpy.tests.test_arrayprint.TestArray2String.test_any_text(self,text)
numpy.tests.test_arrayprint.TestArray2String.test_basic(self)
numpy.tests.test_arrayprint.TestArray2String.test_edgeitems_kwarg(self)
numpy.tests.test_arrayprint.TestArray2String.test_format_function(self)
numpy.tests.test_arrayprint.TestArray2String.test_linewidth(self)
numpy.tests.test_arrayprint.TestArray2String.test_multiline_repr(self)
numpy.tests.test_arrayprint.TestArray2String.test_nested_array_repr(self)
numpy.tests.test_arrayprint.TestArray2String.test_refcount(self)
numpy.tests.test_arrayprint.TestArray2String.test_structure_format(self)
numpy.tests.test_arrayprint.TestArray2String.test_summarize_1d(self)
numpy.tests.test_arrayprint.TestArray2String.test_summarize_2d(self)
numpy.tests.test_arrayprint.TestArray2String.test_unexpected_kwarg(self)
numpy.tests.test_arrayprint.TestArray2String.test_unstructured_void_repr(self)
numpy.tests.test_arrayprint.TestArray2String.test_wide_element(self)
numpy.tests.test_arrayprint.TestArrayRepr
numpy.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass(self)
numpy.tests.test_arrayprint.TestArrayRepr.test_containing_list(self)
numpy.tests.test_arrayprint.TestArrayRepr.test_fieldless_structured(self)
numpy.tests.test_arrayprint.TestArrayRepr.test_nan_inf(self)
numpy.tests.test_arrayprint.TestArrayRepr.test_object_subclass(self)
numpy.tests.test_arrayprint.TestArrayRepr.test_self_containing(self)
numpy.tests.test_arrayprint.TestArrayRepr.test_subclass(self)
numpy.tests.test_arrayprint.TestArrayRepr.test_void_scalar_recursion(self)
numpy.tests.test_arrayprint.TestComplexArray
numpy.tests.test_arrayprint.TestComplexArray.test_str(self)
numpy.tests.test_arrayprint.TestContextManager
numpy.tests.test_arrayprint.TestContextManager.test_ctx_mgr(self)
numpy.tests.test_arrayprint.TestContextManager.test_ctx_mgr_as_smth(self)
numpy.tests.test_arrayprint.TestContextManager.test_ctx_mgr_exceptions(self)
numpy.tests.test_arrayprint.TestContextManager.test_ctx_mgr_restores(self)
numpy.tests.test_arrayprint.TestPrintOptions
numpy.tests.test_arrayprint.TestPrintOptions.setup(self)
numpy.tests.test_arrayprint.TestPrintOptions.teardown(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_0d_arrays(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_bad_args(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_basic(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_bool_spacing(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_dtype_linewidth_wrapping(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_edgeitems(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_float_overflow_nowarn(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_float_spacing(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_floatmode(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_formatter(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_formatter_reset(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_legacy_mode_scalars(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_legacy_stray_comma(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_linewidth_repr(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_linewidth_str(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_precision_zero(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_sign_spacing(self)
numpy.tests.test_arrayprint.TestPrintOptions.test_sign_spacing_structured(self)
numpy.tests.test_arrayprint.test_unicode_object_array()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_records.py----------------------------------------
A:numpy.core.tests.test_records.r->numpy.zeros((1, 3), dtype=dt).view(np.recarray)
A:numpy.core.tests.test_records.r1->numpy.rec.fromfile(fd, formats='f8,i4,a5', shape=3, byteorder='big')
A:numpy.core.tests.test_records.r2->numpy.rec.array(fd, formats='f8,i4,a5', shape=3, byteorder='big')
A:numpy.core.tests.test_records.x1->numpy.array([1, 2, 3, 4])
A:numpy.core.tests.test_records.x2->numpy.array(['a', 'dd', 'xyz', '12'])
A:numpy.core.tests.test_records.x3->numpy.array([1.1, 2, 3, 4])
A:numpy.core.tests.test_records.data_dir->Path(path).join(path.dirname(__file__), 'data')
A:numpy.core.tests.test_records.filename->Path(path).join(data_dir, 'recarray_from_file.fits')
A:numpy.core.tests.test_records.fd->open(filename, 'rb')
A:numpy.core.tests.test_records.bytes_array->BytesIO()
A:numpy.core.tests.test_records.r3->numpy.rec.fromfile(bytes_array, formats='f8,i4,a5', shape=3, byteorder='big')
A:numpy.core.tests.test_records.a->numpy.empty(1, dtype=dt)
A:numpy.core.tests.test_records.b->numpy.array([1, 2, 3, 4, 5], dtype=np.int64)
A:numpy.core.tests.test_records.c->numpy.zeros((1, 3), dtype=dt).view(np.recarray).view(C)
A:numpy.core.tests.test_records.a[i]->list(range(1, 10))
A:numpy.core.tests.test_records.mine->numpy.rec.fromarrays([a, b, c], names='date,data1,data2')
A:numpy.core.tests.test_records.arr_0d->numpy.rec.array((1, 2.0, '2003'), dtype='<i4,<f8,<M8[Y]')
A:numpy.core.tests.test_records.recordarr->numpy.rec.array(a)
A:numpy.core.tests.test_records.recarr->numpy.empty(1, dtype=dt).view(np.recarray)
A:numpy.core.tests.test_records.recordview->numpy.empty(1, dtype=dt).view(np.dtype((np.record, a.dtype)))
A:numpy.core.tests.test_records.recordarr_r->eval('numpy.' + repr(recordarr), {'numpy': np})
A:numpy.core.tests.test_records.recarr_r->eval('numpy.' + repr(recarr), {'numpy': np})
A:numpy.core.tests.test_records.recordview_r->eval('numpy.' + repr(recordview), {'numpy': np})
A:numpy.core.tests.test_records.rv->numpy.zeros((1, 3), dtype=dt).view(np.recarray).view('f8').view('f4,i4')
A:numpy.core.tests.test_records.rec->numpy.recarray(1, dtype=[('x', float, 5)])
A:numpy.core.tests.test_records.arr2->numpy.recarray(1, dtype=[('x', float, 5)]).view(rec.dtype.fields or rec.dtype, np.ndarray)
A:numpy.core.tests.test_records.ra->numpy.recarray((2,), dtype=[('x', object), ('y', float), ('z', int)])
A:numpy.core.tests.test_records.pa->numpy.compat.pickle.loads(pickle.dumps(a[0], protocol=proto))
A:numpy.core.tests.test_records.ndtype->numpy.dtype([('a', int), ('b', object)])
A:numpy.core.tests.test_records.dt->numpy.dtype([('a', np.uint8), ('b', np.uint8), ('c', np.uint8)])
A:numpy.core.tests.test_records.path->Path(path)
A:numpy.core.tests.test_records.x->numpy.core.records.fromfile(path, formats='f8,i4,a5', shape=10)
A:numpy.core.tests.test_records.self.data->numpy.rec.fromrecords([(1, 2, 3), (4, 5, 6)], dtype=[('col1', '<i4'), ('col2', '<i4'), ('col3', '<i4')])
A:numpy.core.tests.test_records.(ctor, args)->a[0].__reduce__()
A:numpy.core.tests.test_records.dump->numpy.compat.pickle.dumps(a[0])
A:numpy.core.tests.test_records.unpickled->numpy.compat.pickle.loads(dump)
A:numpy.core.tests.test_records.r.foo->numpy.array([1, 2, 3])
A:numpy.core.tests.test_records.arr->numpy.rec.fromarrays(arrays)
A:numpy.core.tests.test_records.data->numpy.zeros(3, dt_outer).view(np.recarray)
A:numpy.core.tests.test_records.dt_outer->numpy.dtype([('inner', dt_padded_end)])
numpy.core.tests.test_records.TestFromrecords
numpy.core.tests.test_records.TestFromrecords.test_0d_recarray_repr(self)
numpy.core.tests.test_records.TestFromrecords.test_fromrecords(self)
numpy.core.tests.test_records.TestFromrecords.test_fromrecords_0len(self)
numpy.core.tests.test_records.TestFromrecords.test_fromrecords_2d(self)
numpy.core.tests.test_records.TestFromrecords.test_fromrecords_with_explicit_dtype(self)
numpy.core.tests.test_records.TestFromrecords.test_method_array(self)
numpy.core.tests.test_records.TestFromrecords.test_method_array2(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_conflict_fields(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_from_names(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_from_obj(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_from_repr(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_fromarrays(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_fromfile(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_repr(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_returntypes(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_slices(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_stringtypes(self)
numpy.core.tests.test_records.TestFromrecords.test_recarray_views(self)
numpy.core.tests.test_records.TestFromrecords.test_zero_width_strings(self)
numpy.core.tests.test_records.TestPathUsage
numpy.core.tests.test_records.TestPathUsage.test_tofile_fromfile(self)
numpy.core.tests.test_records.TestRecord
numpy.core.tests.test_records.TestRecord.setup(self)
numpy.core.tests.test_records.TestRecord.test_assign_dtype_attribute(self,nfields)
numpy.core.tests.test_records.TestRecord.test_assignment1(self)
numpy.core.tests.test_records.TestRecord.test_assignment2(self)
numpy.core.tests.test_records.TestRecord.test_fromarrays_nested_structured_arrays(self)
numpy.core.tests.test_records.TestRecord.test_invalid_assignment(self)
numpy.core.tests.test_records.TestRecord.test_missing_field(self)
numpy.core.tests.test_records.TestRecord.test_nested_dtype_padding(self)
numpy.core.tests.test_records.TestRecord.test_nested_fields_are_records(self,nfields)
numpy.core.tests.test_records.TestRecord.test_nonwriteable_setfield(self)
numpy.core.tests.test_records.TestRecord.test_objview_record(self)
numpy.core.tests.test_records.TestRecord.test_out_of_order_fields(self)
numpy.core.tests.test_records.TestRecord.test_pickle_1(self)
numpy.core.tests.test_records.TestRecord.test_pickle_2(self)
numpy.core.tests.test_records.TestRecord.test_pickle_3(self)
numpy.core.tests.test_records.TestRecord.test_pickle_void(self)
numpy.core.tests.test_records.TestRecord.test_record_scalar_setitem(self)
numpy.core.tests.test_records.test_find_duplicate()
numpy.tests.test_records.TestFromrecords
numpy.tests.test_records.TestFromrecords.test_0d_recarray_repr(self)
numpy.tests.test_records.TestFromrecords.test_fromrecords(self)
numpy.tests.test_records.TestFromrecords.test_fromrecords_0len(self)
numpy.tests.test_records.TestFromrecords.test_fromrecords_2d(self)
numpy.tests.test_records.TestFromrecords.test_fromrecords_with_explicit_dtype(self)
numpy.tests.test_records.TestFromrecords.test_method_array(self)
numpy.tests.test_records.TestFromrecords.test_method_array2(self)
numpy.tests.test_records.TestFromrecords.test_recarray_conflict_fields(self)
numpy.tests.test_records.TestFromrecords.test_recarray_from_names(self)
numpy.tests.test_records.TestFromrecords.test_recarray_from_obj(self)
numpy.tests.test_records.TestFromrecords.test_recarray_from_repr(self)
numpy.tests.test_records.TestFromrecords.test_recarray_fromarrays(self)
numpy.tests.test_records.TestFromrecords.test_recarray_fromfile(self)
numpy.tests.test_records.TestFromrecords.test_recarray_repr(self)
numpy.tests.test_records.TestFromrecords.test_recarray_returntypes(self)
numpy.tests.test_records.TestFromrecords.test_recarray_slices(self)
numpy.tests.test_records.TestFromrecords.test_recarray_stringtypes(self)
numpy.tests.test_records.TestFromrecords.test_recarray_views(self)
numpy.tests.test_records.TestFromrecords.test_zero_width_strings(self)
numpy.tests.test_records.TestPathUsage
numpy.tests.test_records.TestPathUsage.test_tofile_fromfile(self)
numpy.tests.test_records.TestRecord
numpy.tests.test_records.TestRecord.setup(self)
numpy.tests.test_records.TestRecord.test_assign_dtype_attribute(self,nfields)
numpy.tests.test_records.TestRecord.test_assignment1(self)
numpy.tests.test_records.TestRecord.test_assignment2(self)
numpy.tests.test_records.TestRecord.test_fromarrays_nested_structured_arrays(self)
numpy.tests.test_records.TestRecord.test_invalid_assignment(self)
numpy.tests.test_records.TestRecord.test_missing_field(self)
numpy.tests.test_records.TestRecord.test_nested_dtype_padding(self)
numpy.tests.test_records.TestRecord.test_nested_fields_are_records(self,nfields)
numpy.tests.test_records.TestRecord.test_nonwriteable_setfield(self)
numpy.tests.test_records.TestRecord.test_objview_record(self)
numpy.tests.test_records.TestRecord.test_out_of_order_fields(self)
numpy.tests.test_records.TestRecord.test_pickle_1(self)
numpy.tests.test_records.TestRecord.test_pickle_2(self)
numpy.tests.test_records.TestRecord.test_pickle_3(self)
numpy.tests.test_records.TestRecord.test_pickle_void(self)
numpy.tests.test_records.TestRecord.test_record_scalar_setitem(self)
numpy.tests.test_records.test_find_duplicate()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_multiarray.py----------------------------------------
A:numpy.core.tests.test_multiarray.dtype->numpy.dtype(typ)
A:numpy.core.tests.test_multiarray.buf->_aligned_zeros(shape, dtype, order, align=align).tobytes()
A:numpy.core.tests.test_multiarray.data->bytearray(b'\x00' * 100)
A:numpy.core.tests.test_multiarray.self.a->numpy.arange(10)
A:numpy.core.tests.test_multiarray.mydict->locals()
A:numpy.core.tests.test_multiarray.arr->numpy.arange(9).reshape(3, 3)
A:numpy.core.tests.test_multiarray.view1->numpy.asarray(frominterface)
A:numpy.core.tests.test_multiarray.vals->pickle.loads(pickle.dumps(a, v))
A:numpy.core.tests.test_multiarray.types->''.join((np.typecodes['AllInteger'], np.typecodes['AllFloat'], np.typecodes['Datetime'], '?O'))
A:numpy.core.tests.test_multiarray.values->numpy.core.records.fromstring(data, types)
A:numpy.core.tests.test_multiarray.a->numpy.arange(32, dtype='uint16')
A:numpy.core.tests.test_multiarray.arr_writeable->get_c_wrapping_array(True)
A:numpy.core.tests.test_multiarray.arr_readonly->get_c_wrapping_array(False)
A:numpy.core.tests.test_multiarray.i->max(i - 1, 1)
A:numpy.core.tests.test_multiarray.self.one->numpy.arange(10)
A:numpy.core.tests.test_multiarray.self.two->numpy.arange(20).reshape(4, 5)
A:numpy.core.tests.test_multiarray.self.three->numpy.arange(60, dtype=np.float64).reshape(2, 5, 6)
A:numpy.core.tests.test_multiarray.numpy_int->numpy.int_(0)
A:numpy.core.tests.test_multiarray.r->numpy.array([5.0, 1.0, 3.0, 2.0, -1.0, -4.0, 1.0, -10.0, 10.0, 1.0, 1.0, 3.0], dtype=np.float64)
A:numpy.core.tests.test_multiarray.x->_aligned_zeros(shape, dtype, order, align=align)
A:numpy.core.tests.test_multiarray.arr_0d->numpy.array(0)
A:numpy.core.tests.test_multiarray.y->memoryview(x)
A:numpy.core.tests.test_multiarray.d->numpy.ones(100)
A:numpy.core.tests.test_multiarray.tgt->numpy.dot(a, b)
A:numpy.core.tests.test_multiarray.e->float(1e+150)
A:numpy.core.tests.test_multiarray.a[...]->numpy.arange(6)[::-1].reshape(1, 2, 3)
A:numpy.core.tests.test_multiarray.a1d->numpy.array([u'test'])
A:numpy.core.tests.test_multiarray.a0d->numpy.array(u'done')
A:numpy.core.tests.test_multiarray.u->numpy.array([u'done'])
A:numpy.core.tests.test_multiarray.b->numpy.arange(32, dtype='uint16').getfield('int8', j)
A:numpy.core.tests.test_multiarray.tinyb->numpy.nextafter(np.longdouble(0), 1).astype(dtype)
A:numpy.core.tests.test_multiarray.tinya->numpy.nextafter(np.longdouble(0), -1).astype(dtype)
A:numpy.core.tests.test_multiarray.tiny1d->numpy.array([tinya])
A:numpy.core.tests.test_multiarray.a[:]->list(range(101))
A:numpy.core.tests.test_multiarray.d1->numpy.dtype('u1,c8', align=True)
A:numpy.core.tests.test_multiarray.d2->numpy.dtype('u4,c8', align=True)
A:numpy.core.tests.test_multiarray.dt_int->numpy.dtype(('i4', fields))
A:numpy.core.tests.test_multiarray.arr_int->numpy.zeros(4, dt_int)
A:numpy.core.tests.test_multiarray.result->numpy.array([(0, 1), (2, 3)], dtype='i4,i4').nonzero()
A:numpy.core.tests.test_multiarray.outer->numpy.array([None, None])
A:numpy.core.tests.test_multiarray.outer[0]outer[1]->numpy.array([1, 2, 3])
A:numpy.core.tests.test_multiarray.outer_ragged->numpy.array([None, None])
A:numpy.core.tests.test_multiarray.outer_ragged[0]->numpy.array([1, 2, 3])
A:numpy.core.tests.test_multiarray.outer_ragged[1]->numpy.array([1, 2, 3, 4])
A:numpy.core.tests.test_multiarray.a['a']->numpy.arange(60).reshape(3, 5, 2, 2)
A:numpy.core.tests.test_multiarray.c->numpy.arange(32, dtype='uint16').getfield('int8', j).__array__()
A:numpy.core.tests.test_multiarray.dat2->numpy.zeros(3, [('A', 'i'), ('B', '|O')])
A:numpy.core.tests.test_multiarray.struct_dt->numpy.dtype([('elem', 'i4', 5)])
A:numpy.core.tests.test_multiarray.dt->numpy.dtype(dict(formats=['<i4', '<i4'], names=['one', 'two'], offsets=[4, 0], itemsize=8))
A:numpy.core.tests.test_multiarray.x[0]['field']->numpy.ones(10, dtype='i4')
A:numpy.core.tests.test_multiarray.x[0]['struct']->numpy.ones(1, dtype=struct_dt)
A:numpy.core.tests.test_multiarray.b[0]['x']->numpy.arange(3)
A:numpy.core.tests.test_multiarray.c[0]['x']->numpy.arange(3)
A:numpy.core.tests.test_multiarray.xx->x['S'].reshape((2, 2))
A:numpy.core.tests.test_multiarray.yy->numpy.load(tmp)
A:numpy.core.tests.test_multiarray.v1->numpy.array([1, 2]).astype(dt)
A:numpy.core.tests.test_multiarray.v2->numpy.array([3, 4]).reshape(-1, 1).astype(dt)
A:numpy.core.tests.test_multiarray.v3->numpy.array([(2, 3)], dtype=[('bar', 'i8'), ('baz', 'i8')])
A:numpy.core.tests.test_multiarray.v4->numpy.array([(2,)], dtype=[('bar', 'i8')])
A:numpy.core.tests.test_multiarray.v5->numpy.array([(2, 3)], dtype=[('foo', 'f8'), ('bar', 'f8')])
A:numpy.core.tests.test_multiarray.w->numpy.arange(9).reshape(3, 3).view({'names': ['bar'], 'formats': ['i8'], 'offsets': [8]})
A:numpy.core.tests.test_multiarray.ans->numpy.array([(2, 3), (2, 3)], dtype=dt)
A:numpy.core.tests.test_multiarray.scalar->pickle.loads(pickle.dumps(scalar))
A:numpy.core.tests.test_multiarray.a0->numpy.arange(20.0)
A:numpy.core.tests.test_multiarray.b0->numpy.bool_(False)
A:numpy.core.tests.test_multiarray.a1->numpy.bool_(1)
A:numpy.core.tests.test_multiarray.b1->numpy.zeros(dim1)
A:numpy.core.tests.test_multiarray.av->numpy.arange(32, dtype='uint16').view(np.uint8)
A:numpy.core.tests.test_multiarray.v->numpy.array([F(2, 3), F(5, 7)])
A:numpy.core.tests.test_multiarray.zs->self._zeros(10, dt)
A:numpy.core.tests.test_multiarray.sort_method->getattr(zs, name)
A:numpy.core.tests.test_multiarray.sort_func->getattr(np, name)
A:numpy.core.tests.test_multiarray.p->numpy.inner(a, a)
A:numpy.core.tests.test_multiarray.zs2->pickle.loads(p)
A:numpy.core.tests.test_multiarray.array->numpy.array([(0, 1), (2, 3)], dtype='i4,i4')
A:numpy.core.tests.test_multiarray.bytes_string->pickle.dumps(f_contiguous_array, protocol=5, buffer_callback=buffers.append)
A:numpy.core.tests.test_multiarray.array_from_buffer->pickle.loads(bytes_string, buffers=buffers)
A:numpy.core.tests.test_multiarray.wh_full->numpy.array([[False, True, False, True, True], [True, False, True, True, False], [True, True, False, False, True], [False, True, True, False, True], [True, False, True, True, False]])
A:numpy.core.tests.test_multiarray.wh_lower->numpy.array([[False], [False], [True]])
A:numpy.core.tests.test_multiarray.wh_middle->numpy.array([[False], [True], [False]])
A:numpy.core.tests.test_multiarray.out->numpy.empty((3, 3), dtype='int')
A:numpy.core.tests.test_multiarray.ind->list(range(x.shape[0]))
A:numpy.core.tests.test_multiarray.A->numpy.repeat(self.m_rect, 2, axis=1)
A:numpy.core.tests.test_multiarray.oned->numpy.ones(1)
A:numpy.core.tests.test_multiarray.ret->numpy.take(x, inds, out=out)
A:numpy.core.tests.test_multiarray.a2->numpy.array(ba2, ctype)
A:numpy.core.tests.test_multiarray.m->numpy.array([0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0], dtype=bool)
A:numpy.core.tests.test_multiarray.m_rect->numpy.array([0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0], dtype=bool).reshape((2, 3))
A:numpy.core.tests.test_multiarray.res->numpy.argmin(mat, 0, out=out)
A:numpy.core.tests.test_multiarray.ai->(a * (1 + 1j)).astype(cdtype)
A:numpy.core.tests.test_multiarray.bi->(b * (1 + 1j)).astype(cdtype)
A:numpy.core.tests.test_multiarray.msg->repr(f)
A:numpy.core.tests.test_multiarray.rand->numpy.random.randint(256, size=4000, dtype=np.uint8)
A:numpy.core.tests.test_multiarray.do->numpy.ones(100).copy()
A:numpy.core.tests.test_multiarray.x1->numpy.arange(dt1.itemsize, dtype=np.int8).view(dt1)
A:numpy.core.tests.test_multiarray.x2->numpy.arange(dt2.itemsize, dtype=np.int8).view(dt2)
A:numpy.core.tests.test_multiarray.x3->numpy.arange(dt3.itemsize, dtype=np.int8).view(dt3)
A:numpy.core.tests.test_multiarray.k->b'\xc3\xa4'.decode('UTF8')
A:numpy.core.tests.test_multiarray.aligned->aligned_array(arr.shape, align, dtype, order)
A:numpy.core.tests.test_multiarray.unaligned->aligned[1:].view(a.dtype)
A:numpy.core.tests.test_multiarray.s->numpy.core._multiarray_tests.get_struct_alignments()
A:numpy.core.tests.test_multiarray.keys->numpy.array([1, 3, 8, -2])
A:numpy.core.tests.test_multiarray.srt->numpy.empty((10,), dtype=np.intp)
A:numpy.core.tests.test_multiarray.d_obj->numpy.arange(10, dtype=object)
A:numpy.core.tests.test_multiarray.kth->numpy.array([30, 15, 5])
A:numpy.core.tests.test_multiarray.okth->numpy.array([30, 15, 5]).copy()
A:numpy.core.tests.test_multiarray.d0->numpy.transpose(d1)
A:numpy.core.tests.test_multiarray.dc->numpy.dtype('u1,c8', align=True).copy()
A:numpy.core.tests.test_multiarray.idx->numpy.lexsort((u, v))
A:numpy.core.tests.test_multiarray.x0->numpy.array([[1, 2, 3], [4, 5, 6]], np.int32)
A:numpy.core.tests.test_multiarray.y0->numpy.array([1, 2, 3, 4, 5, 6], np.int32)
A:numpy.core.tests.test_multiarray.y0f->numpy.array([1, 4, 2, 5, 3, 6], np.int32)
A:numpy.core.tests.test_multiarray.y1->numpy.array([1, 2, 3, 4, 5, 6, 7, 8], np.int32)
A:numpy.core.tests.test_multiarray.y1f->numpy.array([1, 5, 3, 7, 2, 6, 4, 8], np.int32)
A:numpy.core.tests.test_multiarray.ddt->numpy.array([[55, 145, 235, 325], [145, 451, 757, 1063], [235, 757, 1279, 1801], [325, 1063, 1801, 2539]])
A:numpy.core.tests.test_multiarray.dtd->numpy.array([[504, 540, 576, 612, 648, 684], [540, 580, 620, 660, 700, 740], [576, 620, 664, 708, 752, 796], [612, 660, 708, 756, 804, 852], [648, 700, 752, 804, 856, 908], [684, 740, 796, 852, 908, 964]])
A:numpy.core.tests.test_multiarray.eaf->numpy.arange(32, dtype='uint16').astype(et)
A:numpy.core.tests.test_multiarray.ebf->numpy.arange(32, dtype='uint16').getfield('int8', j).astype(et)
A:numpy.core.tests.test_multiarray.edf->numpy.ones(100).astype(et)
A:numpy.core.tests.test_multiarray.eddtf->numpy.array([[55, 145, 235, 325], [145, 451, 757, 1063], [235, 757, 1279, 1801], [325, 1063, 1801, 2539]]).astype(et)
A:numpy.core.tests.test_multiarray.edtdf->numpy.array([[504, 540, 576, 612, 648, 684], [540, 580, 620, 660, 700, 740], [576, 620, 664, 708, 752, 796], [612, 660, 708, 756, 804, 852], [648, 700, 752, 804, 856, 908], [684, 740, 796, 852, 908, 964]]).astype(et)
A:numpy.core.tests.test_multiarray.ret1->func(b.T, a.T)
A:numpy.core.tests.test_multiarray.ret2->func(b.T.copy(), a.T.copy())
A:numpy.core.tests.test_multiarray.b[...]->numpy.random.rand(3, 3)
A:numpy.core.tests.test_multiarray.t->numpy.arange(32, dtype='uint16').getfield('int8', j).trace()
A:numpy.core.tests.test_multiarray.strides->list(a.strides)
A:numpy.core.tests.test_multiarray.shape->list(src.shape)
A:numpy.core.tests.test_multiarray.ac->numpy.arange(32, dtype='uint16').conj()
A:numpy.core.tests.test_multiarray.ap->complex(a)
A:numpy.core.tests.test_multiarray.bp->complex(b)
A:numpy.core.tests.test_multiarray.cp->complex(c)
A:numpy.core.tests.test_multiarray.MyType->eval("type('MyType', (base,), class_namespace)", eval_namespace)
A:numpy.core.tests.test_multiarray.arr_method->getattr(arr, '__{0}__'.format(op))
A:numpy.core.tests.test_multiarray.arr_rmethod->getattr(arr, '__r{0}__'.format(op))
A:numpy.core.tests.test_multiarray.arr_imethod->getattr(arr, '__i{0}__'.format(op))
A:numpy.core.tests.test_multiarray.op_fn->getattr(builtins, op)
A:numpy.core.tests.test_multiarray.kw->numpy.add(a, [1], signature='ii->i')
A:numpy.core.tests.test_multiarray.dummy->numpy.arange(2.0)
A:numpy.core.tests.test_multiarray.tmp_kw->numpy.add(a, [1], signature='ii->i').copy()
A:numpy.core.tests.test_multiarray.func->getattr(ufunc, method)
A:numpy.core.tests.test_multiarray.kw['out'][0][...]->func(*inputs, **tmp_kw)
A:numpy.core.tests.test_multiarray.B->numpy.array([[1, 3], [2, 4]], dtype=dt)
A:numpy.core.tests.test_multiarray.C->numpy.array([1, 1], dtype=dt)
A:numpy.core.tests.test_multiarray.obj_arr->numpy.array(Dummy())
A:numpy.core.tests.test_multiarray.tst->numpy.array('foo').view(A)
A:numpy.core.tests.test_multiarray.(orig, res)->incref_elide(d)
A:numpy.core.tests.test_multiarray.f->Foo(0.5)
A:numpy.core.tests.test_multiarray.l->numpy.array(['aa', 'bb'])
A:numpy.core.tests.test_multiarray.my_object->object()
A:numpy.core.tests.test_multiarray.arr_with_object->numpy.array([(my_object, 1, 2.0)], dtype=[('a', object), ('b', int), ('c', float)])
A:numpy.core.tests.test_multiarray.arr_without_object->numpy.array([('xxx', 1, 2.0)], dtype=[('a', str), ('b', int), ('c', float)])
A:numpy.core.tests.test_multiarray.depickled_arr_with_object->pickle.loads(pickle.dumps(arr_with_object, protocol=proto))
A:numpy.core.tests.test_multiarray.depickled_arr_without_object->pickle.loads(pickle.dumps(arr_without_object, protocol=proto))
A:numpy.core.tests.test_multiarray.f_contiguous_array->numpy.array([[1, 2, 3], [4, 5, 6]], order='F')
A:numpy.core.tests.test_multiarray.depickled_f_contiguous_array->pickle.loads(bytes_string, buffers=buffers)
A:numpy.core.tests.test_multiarray.depickled_non_contiguous_array->pickle.loads(pickle.dumps(non_contiguous_array, protocol=proto))
A:numpy.core.tests.test_multiarray.carray->numpy.array([[2, 9], [7, 0], [3, 8]])
A:numpy.core.tests.test_multiarray.original->numpy.array([['2015-02-24T00:00:00.000000000']], dtype='datetime64[ns]')
A:numpy.core.tests.test_multiarray.original_byte_reversed->numpy.array([['2015-02-24T00:00:00.000000000']], dtype='datetime64[ns]').copy(order='K')
A:numpy.core.tests.test_multiarray.original_byte_reversed.dtype->numpy.array([['2015-02-24T00:00:00.000000000']], dtype='datetime64[ns]').copy(order='K').dtype.newbyteorder('S')
A:numpy.core.tests.test_multiarray.new->pickle.loads(pickle.dumps(original_byte_reversed))
A:numpy.core.tests.test_multiarray.m2->numpy.arange(21.0).reshape(3, 7)
A:numpy.core.tests.test_multiarray.m3->numpy.array([[0, 1, 0, 0], [0, 0, 0, 0]], bool)
A:numpy.core.tests.test_multiarray.xorig->numpy.array([[1, 2, 3, 4], [5, 6, 7, 8]])
A:numpy.core.tests.test_multiarray.g1->numpy.array([u'This', u'is', u'example'])
A:numpy.core.tests.test_multiarray.g2->numpy.array([u'This', u'was', u'example'])
A:numpy.core.tests.test_multiarray.amax->numpy.arange(32, dtype='uint16').max(i)
A:numpy.core.tests.test_multiarray.aargmax->numpy.arange(32, dtype='uint16').argmax(i)
A:numpy.core.tests.test_multiarray.axes->list(range(a.ndim))
A:numpy.core.tests.test_multiarray.max_val->numpy.max(arr)
A:numpy.core.tests.test_multiarray.out1->numpy.matmul(d, d.reshape(5, 4))
A:numpy.core.tests.test_multiarray.out2->numpy.dot(d, d.reshape(5, 4))
A:numpy.core.tests.test_multiarray.amin->numpy.arange(32, dtype='uint16').min(i)
A:numpy.core.tests.test_multiarray.aargmin->numpy.arange(32, dtype='uint16').argmin(i)
A:numpy.core.tests.test_multiarray.min_val->numpy.min(arr)
A:numpy.core.tests.test_multiarray.sk->numpy.array([0, -0.1, 0.1])
A:numpy.core.tests.test_multiarray.rec->numpy.array([(-5, 2.0, 3.0), (5.0, 4.0, 3.0)], dtype=[('x', '<f8'), ('y', '>f8'), ('z', '<f8')])
A:numpy.core.tests.test_multiarray.val->numpy.array([0, 1, 2, 3, 4, 5, 6, 7])
A:numpy.core.tests.test_multiarray.input_arr->numpy.array([-2.0, np.nan, 0.5, 3.0, 0.25, np.nan])
A:numpy.core.tests.test_multiarray.expected->npfun(z)
A:numpy.core.tests.test_multiarray.rec1->numpy.array([(-5, 2.0, 3.0), (5.0, 4.0, 3.0)], dtype=[('x', '<f8'), ('y', '>f8'), ('z', '<f8')]).take([1])
A:numpy.core.tests.test_multiarray.inds->numpy.zeros(shape, dtype=np.intp)
A:numpy.core.tests.test_multiarray.expected_idx->numpy.array([2, 1, 0])
A:numpy.core.tests.test_multiarray.left->numpy.lexsort((u.astype('O'),))
A:numpy.core.tests.test_multiarray.right->numpy.argsort(u, kind='mergesort')
A:numpy.core.tests.test_multiarray.filename->str(filename)
A:numpy.core.tests.test_multiarray.pos->Foo(0.5).tell()
A:numpy.core.tests.test_multiarray.z->t(x)
A:numpy.core.tests.test_multiarray.testbytes->numpy.arange(8, dtype=np.int8)
A:numpy.core.tests.test_multiarray.n->len(testbytes)
A:numpy.core.tests.test_multiarray.flike->tempfile.NamedTemporaryFile()
A:numpy.core.tests.test_multiarray.x_str->_aligned_zeros(shape, dtype, order, align=align).tobytes()
A:numpy.core.tests.test_multiarray.binary->npfun(z).tobytes()
A:numpy.core.tests.test_multiarray.indtype->numpy.dtype(np.intp)
A:numpy.core.tests.test_multiarray.rc_indtype->sys.getrefcount(indtype)
A:numpy.core.tests.test_multiarray.rc_ind->sys.getrefcount(ind)
A:numpy.core.tests.test_multiarray.xref->weakref.ref(x)
A:numpy.core.tests.test_multiarray.fn1->str('f1')
A:numpy.core.tests.test_multiarray.fnn->str('not at all')
A:numpy.core.tests.test_multiarray.fn3->str('f3')
A:numpy.core.tests.test_multiarray.sfn1->str('sf1')
A:numpy.core.tests.test_multiarray.fn2->str('f2')
A:numpy.core.tests.test_multiarray.self.rmat->numpy.random.random((4, 5))
A:numpy.core.tests.test_multiarray.self.omat->self.omat.reshape(4, 5)
A:numpy.core.tests.test_multiarray.mat->numpy.eye(5)
A:numpy.core.tests.test_multiarray.wh_partial->numpy.array([[False], [True], [True], [False], [True]])
A:numpy.core.tests.test_multiarray.a3d->numpy.arange(16).reshape((2, 2, 4))
A:numpy.core.tests.test_multiarray._wh_partial->numpy.array([False, True, True, False])
A:numpy.core.tests.test_multiarray.msqr->_mean(mat * mat.conj(), axis=axis)
A:numpy.core.tests.test_multiarray.mean->_mean(mat, axis=axis)
A:numpy.core.tests.test_multiarray.cmat->self.cmat.copy().astype('complex128')
A:numpy.core.tests.test_multiarray.cmat_swapped->self.cmat.copy().astype('complex128').astype(cmat.dtype.newbyteorder())
A:numpy.core.tests.test_multiarray.whf->numpy.array([[False, True, False, True, True], [True, False, True, False, True], [True, True, False, True, False], [True, False, True, True, False], [False, True, False, True, True]])
A:numpy.core.tests.test_multiarray.whp->numpy.array([[False], [False], [True], [True], [False]])
A:numpy.core.tests.test_multiarray.self.info->getattr(obj, 'info', '')
A:numpy.core.tests.test_multiarray.dat->TestArray([[1, 2, 3, 4], [5, 6, 7, 8]], 'jubba')
A:numpy.core.tests.test_multiarray.a[:, 0, 0]->numpy.arange(size)
A:numpy.core.tests.test_multiarray.self.A->numpy.random.rand(4, 2)
A:numpy.core.tests.test_multiarray.self.b1->numpy.random.rand(2, 1)
A:numpy.core.tests.test_multiarray.self.b2->numpy.random.rand(2)
A:numpy.core.tests.test_multiarray.self.b3->numpy.random.rand(1, 2)
A:numpy.core.tests.test_multiarray.self.b4->numpy.random.rand(4)
A:numpy.core.tests.test_multiarray.b2->numpy.zeros(dim2)
A:numpy.core.tests.test_multiarray.self.array->numpy.array(sequence)
A:numpy.core.tests.test_multiarray.U_non_cont->numpy.transpose([[1.0, 1.0], [1.0, 2.0]])
A:numpy.core.tests.test_multiarray.U_cont->numpy.ascontiguousarray(U_non_cont)
A:numpy.core.tests.test_multiarray.zeros->numpy.array([Vec([0.0, 0.0]), Vec([0.0, 0.0])])
A:numpy.core.tests.test_multiarray.r2->numpy.dot(*args)
A:numpy.core.tests.test_multiarray.N->numpy.prod(shape)
A:numpy.core.tests.test_multiarray.tmp->tmp[offset:offset + N * d.nbytes].view(dtype=dtype)
A:numpy.core.tests.test_multiarray.testdata->itertools.product((15, 32), (10000,), (200, 89), ('C', 'F'))
A:numpy.core.tests.test_multiarray.A_d->numpy.random.rand(m, n)
A:numpy.core.tests.test_multiarray.X_d->numpy.random.rand(n)
A:numpy.core.tests.test_multiarray.desired->numpy.array([[[[158, 182, 206], [230, 254, 278]], [[566, 654, 742], [830, 918, 1006]], [[974, 1126, 1278], [1430, 1582, 1734]]], [[[1382, 1598, 1814], [2030, 2246, 2462]], [[1790, 2070, 2350], [2630, 2910, 3190]], [[2198, 2542, 2886], [3230, 3574, 3918]]]], dtype=dt)
A:numpy.core.tests.test_multiarray.A_f->as_aligned(A_d, align, np.float32, order=a_order)
A:numpy.core.tests.test_multiarray.X_f->as_aligned(X_d, align, np.float32)
A:numpy.core.tests.test_multiarray.X_f_2c->as_aligned(X_f_2, align, np.float32)
A:numpy.core.tests.test_multiarray.vec->numpy.array([1, 2], dtype=dt)
A:numpy.core.tests.test_multiarray.vec1->numpy.array([1, 2])
A:numpy.core.tests.test_multiarray.vec2->numpy.array([3, 4]).reshape(-1, 1)
A:numpy.core.tests.test_multiarray.tgt1->numpy.array([True, False])
A:numpy.core.tests.test_multiarray.tgt2->numpy.stack([tgt1] * 2, axis=0)
A:numpy.core.tests.test_multiarray.mat1->numpy.array([[1, 2], [3, 4]])
A:numpy.core.tests.test_multiarray.mat2->numpy.array([[1, 0], [1, 1]])
A:numpy.core.tests.test_multiarray.m1->numpy.arange(15.0).reshape(5, 3)
A:numpy.core.tests.test_multiarray.mat12->numpy.stack([mat1, mat2], axis=0)
A:numpy.core.tests.test_multiarray.mat21->numpy.stack([mat2, mat1], axis=0)
A:numpy.core.tests.test_multiarray.tgt11->numpy.array([[7, 10], [15, 22]])
A:numpy.core.tests.test_multiarray.tgt12->numpy.array([[3, 2], [7, 4]])
A:numpy.core.tests.test_multiarray.tgt21->numpy.array([[1, 1], [1, 1]], dtype=np.bool_)
A:numpy.core.tests.test_multiarray.tgt12_21->numpy.stack([tgt12, tgt21], axis=0)
A:numpy.core.tests.test_multiarray.tgt11_12->numpy.stack((tgt11, tgt12), axis=0)
A:numpy.core.tests.test_multiarray.tgt11_21->numpy.stack((tgt11, tgt21), axis=0)
A:numpy.core.tests.test_multiarray.m12->numpy.stack([m1, m2], axis=0)
A:numpy.core.tests.test_multiarray.m21->numpy.stack([m2, m1], axis=0)
A:numpy.core.tests.test_multiarray.tgt_mv->numpy.dot(a, v)
A:numpy.core.tests.test_multiarray.vc->numpy.arange(10.0)
A:numpy.core.tests.test_multiarray.vr->numpy.arange(6.0)
A:numpy.core.tests.test_multiarray.m0->numpy.zeros((3, 0))
A:numpy.core.tests.test_multiarray.r1->numpy.matmul(*args)
A:numpy.core.tests.test_multiarray.r3->numpy.matmul(args[0].copy(), args[1].copy())
A:numpy.core.tests.test_multiarray.M1->f(random_ints(), random_ints())
A:numpy.core.tests.test_multiarray.M2->f(random_ints(), random_ints())
A:numpy.core.tests.test_multiarray.M3->self.matmul(M1, M2)
A:numpy.core.tests.test_multiarray.rg->numpy.random.default_rng(np.random.PCG64(43))
A:numpy.core.tests.test_multiarray.expected_dt->numpy.result_type(*ops)
A:numpy.core.tests.test_multiarray.self.m->numpy.array([1, 2, 3, 4, 5, 6])
A:numpy.core.tests.test_multiarray.self.m_rect->self.m.reshape((2, 3))
A:numpy.core.tests.test_multiarray.wanted->numpy.dtype('O')
A:numpy.core.tests.test_multiarray.actual->_dtype_from_pep3118(spec)
A:numpy.core.tests.test_multiarray.base->dict(formats=['i'], names=['f0'])
A:numpy.core.tests.test_multiarray.obj->numpy.asarray(obj)
A:numpy.core.tests.test_multiarray.y2->numpy.array(x)
A:numpy.core.tests.test_multiarray.sz->sum([np.dtype(b).itemsize for (a, b) in dt])
A:numpy.core.tests.test_multiarray.pickle_obj->pickle.dumps(obj)
A:numpy.core.tests.test_multiarray.count_1->sys.getrefcount(np.core._internal)
A:numpy.core.tests.test_multiarray.count_2->sys.getrefcount(np.core._internal)
A:numpy.core.tests.test_multiarray.dt1->numpy.dtype([('a', 'b'), ('b', 'i'), ('sub', np.dtype('b,i')), ('c', 'i')], align=True)
A:numpy.core.tests.test_multiarray.dt2->numpy.dtype([('a', 'b'), ('b', 'i'), ('c', 'b', (3,)), ('d', 'i')], align=True)
A:numpy.core.tests.test_multiarray.dt3->numpy.dtype([('a', 'b'), ('b', 'i'), ('c', 'b'), ('d', 'b'), ('e', 'b'), ('sub', np.dtype('b,i', align=True))])
A:numpy.core.tests.test_multiarray.fd->io.BytesIO()
A:numpy.core.tests.test_multiarray.(shape, strides)->numpy.core._multiarray_tests.get_buffer_info(arr, ['C_CONTIGUOUS'])
A:numpy.core.tests.test_multiarray.(_, s)->numpy.core._multiarray_tests.get_buffer_info(arr, ['C_CONTIGUOUS'])
A:numpy.core.tests.test_multiarray.c_u8_33d->make_ctype((1,) * 33, ctypes.c_uint8)
A:numpy.core.tests.test_multiarray.value->c_integer(42)
A:numpy.core.tests.test_multiarray.name->type(obj)
A:numpy.core.tests.test_multiarray.pre_cnt->sys.getrefcount(np.dtype('f8'))
A:numpy.core.tests.test_multiarray.post_cnt->sys.getrefcount(np.dtype('f8'))
A:numpy.core.tests.test_multiarray.my_dtype->numpy.dtype({'names': ['A', 'B'], 'formats': ['f4', 'f4'], 'offsets': [0, 8], 'itemsize': 16})
A:numpy.core.tests.test_multiarray.descr_t->numpy.dtype(a.__array_interface__['descr'])
A:numpy.core.tests.test_multiarray.typestr_t->numpy.dtype(a.__array_interface__['typestr'])
A:numpy.core.tests.test_multiarray.interface1->dict(arr.__array_interface__)
A:numpy.core.tests.test_multiarray.interface2->dict(interface1)
A:numpy.core.tests.test_multiarray.interface2['data']->arr[0].tobytes()
A:numpy.core.tests.test_multiarray.arr1->numpy.asarray(DummyArray())
A:numpy.core.tests.test_multiarray.arr2->numpy.asarray(DummyArray2())
A:numpy.core.tests.test_multiarray.arr3->arr[:1].reshape(())
A:numpy.core.tests.test_multiarray.interface->dict(arr.__array_interface__)
A:numpy.core.tests.test_multiarray.interface['data']->memoryview(arr)
A:numpy.core.tests.test_multiarray.from_c->numpy.core._multiarray_tests.test_as_c_array(array, 1, 2, 3)
A:numpy.core.tests.test_multiarray.self_containing->numpy.array([None])
A:numpy.core.tests.test_multiarray.nan->float('NaN')
A:numpy.core.tests.test_multiarray.ibad->numpy.vstack(np.where(x == 99.0))
A:numpy.core.tests.test_multiarray.benchmark->numpy.array([(0, 1), (2, 3)], dtype='i4,i4').nonzero()
A:numpy.core.tests.test_multiarray.old->sys.getsizeof(d)
A:numpy.core.tests.test_multiarray.l[:]->numpy.unicode_('cc')
A:numpy.core.tests.test_multiarray.test_arr->numpy.array([[1, 2, 3], [4, 5, 6]])
A:numpy.core.tests.test_multiarray.arr_ref->weakref.ref(arr)
A:numpy.core.tests.test_multiarray.ctypes_ptr->numpy.arange(9).reshape(3, 3).ctypes.data_as(ctypes.c_void_p)
A:numpy.core.tests.test_multiarray.arr_wb->npy_create_writebackifcopy(arr)
A:numpy.core.tests.test_multiarray.orig->numpy.arange(9).reshape(3, 3).copy()
A:numpy.core.tests.test_multiarray.arr_cnt->sys.getrefcount(arr)
A:numpy.core.tests.test_multiarray.keyword_stop->numpy.arange(stop=3)
A:numpy.core.tests.test_multiarray.keyword_zerotostop->numpy.arange(start=0, stop=3)
A:numpy.core.tests.test_multiarray.keyword_start_stop->numpy.arange(start=3, stop=9)
A:numpy.core.tests.test_multiarray.obj_ref->weakref.ref(obj_arr[()])
A:numpy.core.tests.test_multiarray.my_always_equal->my_always_equal_cls()
A:numpy.core.tests.test_multiarray.got->fun(z)
A:numpy.core.tests.test_multiarray.d3->numpy.dtype({'names': ['a', 'b'], 'formats': ['u1', d1]}, align=True)
A:numpy.core.tests.test_multiarray.dst->numpy.zeros((2, 2), dtype='c8')
A:numpy.core.tests.test_multiarray.err_msg->repr((shape, dtype, order, align))
A:numpy.core.tests.test_multiarray.xf64->_aligned_zeros(3, np.float64)
A:numpy.core.tests.test_multiarray.xc64->_aligned_zeros(3, np.complex64, align=align)
A:numpy.core.tests.test_multiarray.xf128->_aligned_zeros(3, np.longdouble, align=align)
A:numpy.core.tests.test_multiarray.xf64[:]->_aligned_zeros(3, np.float64).copy()
A:numpy.core.tests.test_multiarray.xc64[:]->_aligned_zeros(3, np.complex64, align=align).copy()
A:numpy.core.tests.test_multiarray.xf128[:]->_aligned_zeros(3, np.longdouble, align=align).copy()
A:numpy.core.tests.test_multiarray.xf64[::2]->xf64[::2].copy().copy()
A:numpy.core.tests.test_multiarray.xc64[::2]->xc64[::2].copy().copy()
A:numpy.core.tests.test_multiarray.xf128[::2]->xf128[::2].copy().copy()
numpy.core.tests.test_multiarray.MatmulCommon
numpy.core.tests.test_multiarray.MatmulCommon.test_exceptions(self)
numpy.core.tests.test_multiarray.MatmulCommon.test_matrix_matrix_values(self)
numpy.core.tests.test_multiarray.MatmulCommon.test_matrix_vector_values(self)
numpy.core.tests.test_multiarray.MatmulCommon.test_result_types(self)
numpy.core.tests.test_multiarray.MatmulCommon.test_scalar_output(self)
numpy.core.tests.test_multiarray.MatmulCommon.test_shapes(self)
numpy.core.tests.test_multiarray.MatmulCommon.test_vector_matrix_values(self)
numpy.core.tests.test_multiarray.MatmulCommon.test_vector_vector_values(self)
numpy.core.tests.test_multiarray.TestAlen
numpy.core.tests.test_multiarray.TestAlen.test_basic(self)
numpy.core.tests.test_multiarray.TestAlen.test_singleton(self)
numpy.core.tests.test_multiarray.TestAlignment
numpy.core.tests.test_multiarray.TestAlignment.check(self,shape,dtype,order,align)
numpy.core.tests.test_multiarray.TestAlignment.test_strided_loop_alignments(self)
numpy.core.tests.test_multiarray.TestAlignment.test_various_alignments(self)
numpy.core.tests.test_multiarray.TestArange
numpy.core.tests.test_multiarray.TestArange.test_infinite(self)
numpy.core.tests.test_multiarray.TestArange.test_nan_step(self)
numpy.core.tests.test_multiarray.TestArange.test_require_range(self)
numpy.core.tests.test_multiarray.TestArange.test_start_stop_kwarg(self)
numpy.core.tests.test_multiarray.TestArange.test_zero_step(self)
numpy.core.tests.test_multiarray.TestArgmax
numpy.core.tests.test_multiarray.TestArgmax.test_all(self)
numpy.core.tests.test_multiarray.TestArgmax.test_argmax_unicode(self)
numpy.core.tests.test_multiarray.TestArgmax.test_combinations(self)
numpy.core.tests.test_multiarray.TestArgmax.test_np_vs_ndarray(self)
numpy.core.tests.test_multiarray.TestArgmax.test_object_argmax_with_NULLs(self)
numpy.core.tests.test_multiarray.TestArgmax.test_output_shape(self)
numpy.core.tests.test_multiarray.TestArgmax.test_ret_is_out(self,ndim)
numpy.core.tests.test_multiarray.TestArgmin
numpy.core.tests.test_multiarray.TestArgmin.test_all(self)
numpy.core.tests.test_multiarray.TestArgmin.test_argmin_unicode(self)
numpy.core.tests.test_multiarray.TestArgmin.test_combinations(self)
numpy.core.tests.test_multiarray.TestArgmin.test_minimum_signed_integers(self)
numpy.core.tests.test_multiarray.TestArgmin.test_np_vs_ndarray(self)
numpy.core.tests.test_multiarray.TestArgmin.test_object_argmin_with_NULLs(self)
numpy.core.tests.test_multiarray.TestArgmin.test_output_shape(self)
numpy.core.tests.test_multiarray.TestArgmin.test_ret_is_out(self,ndim)
numpy.core.tests.test_multiarray.TestArrayAttributeDeletion
numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_flags_not_writable_attribute_deletion(self)
numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_flags_writable_attribute_deletion(self)
numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_not_writable_attributes_deletion(self)
numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_writable_attributes_deletion(self)
numpy.core.tests.test_multiarray.TestArrayConstruction
numpy.core.tests.test_multiarray.TestArrayConstruction.test_array(self)
numpy.core.tests.test_multiarray.TestArrayConstruction.test_array_as_keyword(self,func)
numpy.core.tests.test_multiarray.TestArrayConstruction.test_array_cont(self)
numpy.core.tests.test_multiarray.TestArrayConstruction.test_array_copy_false(self)
numpy.core.tests.test_multiarray.TestArrayConstruction.test_array_copy_true(self)
numpy.core.tests.test_multiarray.TestArrayConstruction.test_array_empty(self)
numpy.core.tests.test_multiarray.TestArrayConstruction.test_bad_arguments_error(self,func)
numpy.core.tests.test_multiarray.TestArrayFinalize
numpy.core.tests.test_multiarray.TestArrayFinalize.test_bad_finalize(self)
numpy.core.tests.test_multiarray.TestArrayFinalize.test_lifetime_on_error(self)
numpy.core.tests.test_multiarray.TestArrayFinalize.test_receives_base(self)
numpy.core.tests.test_multiarray.TestArrayInterface
numpy.core.tests.test_multiarray.TestArrayInterface.Foo(self,value)
numpy.core.tests.test_multiarray.TestArrayInterface.Foo.__array_interface__(self)
numpy.core.tests.test_multiarray.TestArrayInterface.Foo.__float__(self)
numpy.core.tests.test_multiarray.TestArrayInterface.Foo.__init__(self,value)
numpy.core.tests.test_multiarray.TestArrayInterface.test_scalar_interface(self,val,iface,expected)
numpy.core.tests.test_multiarray.TestArrayPriority
numpy.core.tests.test_multiarray.TestArrayPriority.Bar(cls,*args,**kwargs)
numpy.core.tests.test_multiarray.TestArrayPriority.Bar.__new__(cls,*args,**kwargs)
numpy.core.tests.test_multiarray.TestArrayPriority.Foo(cls,*args,**kwargs)
numpy.core.tests.test_multiarray.TestArrayPriority.Foo.__new__(cls,*args,**kwargs)
numpy.core.tests.test_multiarray.TestArrayPriority.Other
numpy.core.tests.test_multiarray.TestArrayPriority.Other._all(self,other)
numpy.core.tests.test_multiarray.TestArrayPriority.test_ndarray_other(self)
numpy.core.tests.test_multiarray.TestArrayPriority.test_ndarray_subclass(self)
numpy.core.tests.test_multiarray.TestArrayPriority.test_subclass_other(self)
numpy.core.tests.test_multiarray.TestArrayPriority.test_subclass_subclass(self)
numpy.core.tests.test_multiarray.TestAsCArray
numpy.core.tests.test_multiarray.TestAsCArray.test_1darray(self)
numpy.core.tests.test_multiarray.TestAsCArray.test_2darray(self)
numpy.core.tests.test_multiarray.TestAsCArray.test_3darray(self)
numpy.core.tests.test_multiarray.TestAssignment
numpy.core.tests.test_multiarray.TestAssignment.test_assignment_broadcasting(self)
numpy.core.tests.test_multiarray.TestAssignment.test_assignment_errors(self)
numpy.core.tests.test_multiarray.TestAssignment.test_cast_to_string(self)
numpy.core.tests.test_multiarray.TestAssignment.test_longdouble_assignment(self)
numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list(self)
numpy.core.tests.test_multiarray.TestAssignment.test_unicode_assignment(self)
numpy.core.tests.test_multiarray.TestAttributes
numpy.core.tests.test_multiarray.TestAttributes.setup(self)
numpy.core.tests.test_multiarray.TestAttributes.test_attributes(self)
numpy.core.tests.test_multiarray.TestAttributes.test_dtypeattr(self)
numpy.core.tests.test_multiarray.TestAttributes.test_fill(self)
numpy.core.tests.test_multiarray.TestAttributes.test_fill_max_uint64(self)
numpy.core.tests.test_multiarray.TestAttributes.test_fill_struct_array(self)
numpy.core.tests.test_multiarray.TestAttributes.test_int_subclassing(self)
numpy.core.tests.test_multiarray.TestAttributes.test_set_stridesattr(self)
numpy.core.tests.test_multiarray.TestAttributes.test_stridesattr(self)
numpy.core.tests.test_multiarray.TestBinop
numpy.core.tests.test_multiarray.TestBinop.test_array_ufunc_index(self)
numpy.core.tests.test_multiarray.TestBinop.test_inplace(self)
numpy.core.tests.test_multiarray.TestBinop.test_out_override(self)
numpy.core.tests.test_multiarray.TestBinop.test_pos_array_ufunc_override(self)
numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype(self)
numpy.core.tests.test_multiarray.TestBinop.test_pow_override_with_errors(self)
numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction(self)
numpy.core.tests.test_multiarray.TestBinop.test_ufunc_override_normalize_signature(self)
numpy.core.tests.test_multiarray.TestBool
numpy.core.tests.test_multiarray.TestBool._test_cast_from_flexible(self,dtype)
numpy.core.tests.test_multiarray.TestBool.check_count_nonzero(self,power,length)
numpy.core.tests.test_multiarray.TestBool.test_cast_from_bytes(self)
numpy.core.tests.test_multiarray.TestBool.test_cast_from_unicode(self)
numpy.core.tests.test_multiarray.TestBool.test_cast_from_void(self)
numpy.core.tests.test_multiarray.TestBool.test_count_nonzero(self)
numpy.core.tests.test_multiarray.TestBool.test_count_nonzero_all(self)
numpy.core.tests.test_multiarray.TestBool.test_count_nonzero_unaligned(self)
numpy.core.tests.test_multiarray.TestBool.test_sum(self)
numpy.core.tests.test_multiarray.TestBool.test_test_interning(self)
numpy.core.tests.test_multiarray.TestBytestringArrayNonzero
numpy.core.tests.test_multiarray.TestBytestringArrayNonzero.test_all_null_bstring_array_is_falsey(self)
numpy.core.tests.test_multiarray.TestBytestringArrayNonzero.test_empty_bstring_array_is_falsey(self)
numpy.core.tests.test_multiarray.TestBytestringArrayNonzero.test_null_inside_bstring_array_is_truthy(self)
numpy.core.tests.test_multiarray.TestBytestringArrayNonzero.test_whitespace_bstring_array_is_falsey(self)
numpy.core.tests.test_multiarray.TestCAPI
numpy.core.tests.test_multiarray.TestCAPI.test_IsPythonScalar(self)
numpy.core.tests.test_multiarray.TestCTypes
numpy.core.tests.test_multiarray.TestCTypes._make_readonly(x)
numpy.core.tests.test_multiarray.TestCTypes.test_ctypes_as_parameter_holds_reference(self)
numpy.core.tests.test_multiarray.TestCTypes.test_ctypes_data_as_holds_reference(self,arr)
numpy.core.tests.test_multiarray.TestCTypes.test_ctypes_is_available(self)
numpy.core.tests.test_multiarray.TestCTypes.test_ctypes_is_not_available(self)
numpy.core.tests.test_multiarray.TestCequenceMethods
numpy.core.tests.test_multiarray.TestCequenceMethods.test_array_contains(self)
numpy.core.tests.test_multiarray.TestChoose
numpy.core.tests.test_multiarray.TestChoose.setup(self)
numpy.core.tests.test_multiarray.TestChoose.test_basic(self)
numpy.core.tests.test_multiarray.TestChoose.test_broadcast1(self)
numpy.core.tests.test_multiarray.TestChoose.test_broadcast2(self)
numpy.core.tests.test_multiarray.TestChoose.test_output_dtype(self,ops)
numpy.core.tests.test_multiarray.TestClip
numpy.core.tests.test_multiarray.TestClip._check_range(self,x,cmin,cmax)
numpy.core.tests.test_multiarray.TestClip._clip_type(self,type_group,array_max,clip_min,clip_max,inplace=False,expected_min=None,expected_max=None)
numpy.core.tests.test_multiarray.TestClip.test_basic(self)
numpy.core.tests.test_multiarray.TestClip.test_max_or_min(self)
numpy.core.tests.test_multiarray.TestClip.test_nan(self)
numpy.core.tests.test_multiarray.TestClip.test_record_array(self)
numpy.core.tests.test_multiarray.TestCompress
numpy.core.tests.test_multiarray.TestCompress.test_axis(self)
numpy.core.tests.test_multiarray.TestCompress.test_flatten(self)
numpy.core.tests.test_multiarray.TestCompress.test_truncate(self)
numpy.core.tests.test_multiarray.TestConversion
numpy.core.tests.test_multiarray.TestConversion.test_array_scalar_relational_operation(self)
numpy.core.tests.test_multiarray.TestConversion.test_to_bool_scalar(self)
numpy.core.tests.test_multiarray.TestConversion.test_to_int_scalar(self)
numpy.core.tests.test_multiarray.TestCreation
numpy.core.tests.test_multiarray.TestCreation._ragged_creation(self,seq)
numpy.core.tests.test_multiarray.TestCreation.test_array_of_ragged_array(self)
numpy.core.tests.test_multiarray.TestCreation.test_array_too_big(self)
numpy.core.tests.test_multiarray.TestCreation.test_deep_nonragged_object(self)
numpy.core.tests.test_multiarray.TestCreation.test_empty_unicode(self)
numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence(self)
numpy.core.tests.test_multiarray.TestCreation.test_false_len_iterable(self)
numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence(self)
numpy.core.tests.test_multiarray.TestCreation.test_from_attribute(self)
numpy.core.tests.test_multiarray.TestCreation.test_from_string(self)
numpy.core.tests.test_multiarray.TestCreation.test_malloc_fails(self)
numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type(self)
numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence(self)
numpy.core.tests.test_multiarray.TestCreation.test_ragged_ndim_object(self)
numpy.core.tests.test_multiarray.TestCreation.test_ragged_shape_object(self)
numpy.core.tests.test_multiarray.TestCreation.test_sequence_non_homogeneous(self)
numpy.core.tests.test_multiarray.TestCreation.test_structured_void_promotion(self,idx)
numpy.core.tests.test_multiarray.TestCreation.test_too_big_error(self)
numpy.core.tests.test_multiarray.TestCreation.test_void(self)
numpy.core.tests.test_multiarray.TestCreation.test_zeros(self)
numpy.core.tests.test_multiarray.TestCreation.test_zeros_big(self)
numpy.core.tests.test_multiarray.TestCreation.test_zeros_like_like_zeros(self)
numpy.core.tests.test_multiarray.TestCreation.test_zeros_obj(self)
numpy.core.tests.test_multiarray.TestCreation.test_zeros_obj_obj(self)
numpy.core.tests.test_multiarray.TestDot
numpy.core.tests.test_multiarray.TestDot.setup(self)
numpy.core.tests.test_multiarray.TestDot.test_accelerate_framework_sgemv_fix(self)
numpy.core.tests.test_multiarray.TestDot.test_all(self)
numpy.core.tests.test_multiarray.TestDot.test_dot_2args(self)
numpy.core.tests.test_multiarray.TestDot.test_dot_3args(self)
numpy.core.tests.test_multiarray.TestDot.test_dot_3args_errors(self)
numpy.core.tests.test_multiarray.TestDot.test_dot_array_order(self)
numpy.core.tests.test_multiarray.TestDot.test_dotcolumnvect1(self)
numpy.core.tests.test_multiarray.TestDot.test_dotcolumnvect2(self)
numpy.core.tests.test_multiarray.TestDot.test_dotmatmat(self)
numpy.core.tests.test_multiarray.TestDot.test_dotmatvec(self)
numpy.core.tests.test_multiarray.TestDot.test_dotmatvec2(self)
numpy.core.tests.test_multiarray.TestDot.test_dotvecmat(self)
numpy.core.tests.test_multiarray.TestDot.test_dotvecmat2(self)
numpy.core.tests.test_multiarray.TestDot.test_dotvecmat3(self)
numpy.core.tests.test_multiarray.TestDot.test_dotvecscalar(self)
numpy.core.tests.test_multiarray.TestDot.test_dotvecscalar2(self)
numpy.core.tests.test_multiarray.TestDot.test_dotvecvecinner(self)
numpy.core.tests.test_multiarray.TestDot.test_dotvecvecouter(self)
numpy.core.tests.test_multiarray.TestDot.test_vecobject(self)
numpy.core.tests.test_multiarray.TestDtypedescr
numpy.core.tests.test_multiarray.TestDtypedescr.test_byteorders(self)
numpy.core.tests.test_multiarray.TestDtypedescr.test_construction(self)
numpy.core.tests.test_multiarray.TestDtypedescr.test_structured_non_void(self)
numpy.core.tests.test_multiarray.TestFancyIndexing
numpy.core.tests.test_multiarray.TestFancyIndexing.test_assign_mask(self)
numpy.core.tests.test_multiarray.TestFancyIndexing.test_assign_mask2(self)
numpy.core.tests.test_multiarray.TestFancyIndexing.test_list(self)
numpy.core.tests.test_multiarray.TestFancyIndexing.test_mask(self)
numpy.core.tests.test_multiarray.TestFancyIndexing.test_mask2(self)
numpy.core.tests.test_multiarray.TestFancyIndexing.test_tuple(self)
numpy.core.tests.test_multiarray.TestFlags
numpy.core.tests.test_multiarray.TestFlags.setup(self)
numpy.core.tests.test_multiarray.TestFlags.test_otherflags(self)
numpy.core.tests.test_multiarray.TestFlags.test_readonly_flag_protocols(self,flag,flag_value,writeable)
numpy.core.tests.test_multiarray.TestFlags.test_string_align(self)
numpy.core.tests.test_multiarray.TestFlags.test_void_align(self)
numpy.core.tests.test_multiarray.TestFlags.test_warnonwrite(self)
numpy.core.tests.test_multiarray.TestFlags.test_writeable(self)
numpy.core.tests.test_multiarray.TestFlags.test_writeable_any_base(self)
numpy.core.tests.test_multiarray.TestFlags.test_writeable_from_buffer(self)
numpy.core.tests.test_multiarray.TestFlags.test_writeable_from_c_data(self)
numpy.core.tests.test_multiarray.TestFlags.test_writeable_from_readonly(self)
numpy.core.tests.test_multiarray.TestFlags.test_writeable_pickle(self)
numpy.core.tests.test_multiarray.TestFlat
numpy.core.tests.test_multiarray.TestFlat.setup(self)
numpy.core.tests.test_multiarray.TestFlat.test___array__(self)
numpy.core.tests.test_multiarray.TestFlat.test_contiguous(self)
numpy.core.tests.test_multiarray.TestFlat.test_discontiguous(self)
numpy.core.tests.test_multiarray.TestFlat.test_index_getset(self)
numpy.core.tests.test_multiarray.TestFlat.test_refcount(self)
numpy.core.tests.test_multiarray.TestFormat
numpy.core.tests.test_multiarray.TestFormat.test_0d(self)
numpy.core.tests.test_multiarray.TestFormat.test_1d_format(self)
numpy.core.tests.test_multiarray.TestFormat.test_1d_no_format(self)
numpy.core.tests.test_multiarray.TestFromBuffer
numpy.core.tests.test_multiarray.TestFromBuffer.test_basic(self,byteorder,dtype)
numpy.core.tests.test_multiarray.TestFromBuffer.test_empty(self)
numpy.core.tests.test_multiarray.TestHash
numpy.core.tests.test_multiarray.TestHash.test_int(self)
numpy.core.tests.test_multiarray.TestHashing
numpy.core.tests.test_multiarray.TestHashing.test_arrays_not_hashable(self)
numpy.core.tests.test_multiarray.TestHashing.test_collections_hashable(self)
numpy.core.tests.test_multiarray.TestIO
numpy.core.tests.test_multiarray.TestIO._check_from(self,s,value,filename,**kw)
numpy.core.tests.test_multiarray.TestIO.decimal_sep_localization(self,request)
numpy.core.tests.test_multiarray.TestIO.test_ascii(self,tmp_filename,decimal_sep_localization)
numpy.core.tests.test_multiarray.TestIO.test_big_binary(self)
numpy.core.tests.test_multiarray.TestIO.test_binary(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_bool_fromstring(self)
numpy.core.tests.test_multiarray.TestIO.test_counted_string(self,tmp_filename,decimal_sep_localization)
numpy.core.tests.test_multiarray.TestIO.test_counted_string_with_ws(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_dtype(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_dtype_bool(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_empty_files_binary(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_empty_files_text(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_file_position_after_fromfile(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_file_position_after_tofile(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_fromfile_bad_dup(self,x,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_fromfile_offset(self,x,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_fromfile_subarray_binary(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_fromstring_count0(self)
numpy.core.tests.test_multiarray.TestIO.test_inf(self,tmp_filename,decimal_sep_localization)
numpy.core.tests.test_multiarray.TestIO.test_int64_fromstring(self)
numpy.core.tests.test_multiarray.TestIO.test_io_open_buffered_fromfile(self,x,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_io_open_unbuffered_fromfile(self,x,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_largish_file(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_load_object_array_fromfile(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_long_sep(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_malformed(self,tmp_filename,decimal_sep_localization)
numpy.core.tests.test_multiarray.TestIO.test_nan(self,tmp_filename,decimal_sep_localization)
numpy.core.tests.test_multiarray.TestIO.test_nofile(self)
numpy.core.tests.test_multiarray.TestIO.test_numbers(self,tmp_filename,decimal_sep_localization)
numpy.core.tests.test_multiarray.TestIO.test_parsing_subarray_unsupported(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_read_shorter_than_count_subarray(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_roundtrip(self,x,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_roundtrip_binary_str(self,x)
numpy.core.tests.test_multiarray.TestIO.test_roundtrip_dump_pathlib(self,x,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_roundtrip_file(self,x,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_roundtrip_repr(self,x)
numpy.core.tests.test_multiarray.TestIO.test_roundtrip_str(self,x)
numpy.core.tests.test_multiarray.TestIO.test_string(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_string_with_ws(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_tofile_cleanup(self,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.test_tofile_format(self,tmp_filename,decimal_sep_localization)
numpy.core.tests.test_multiarray.TestIO.test_tofile_sep(self,tmp_filename,decimal_sep_localization)
numpy.core.tests.test_multiarray.TestIO.test_uint64_fromstring(self)
numpy.core.tests.test_multiarray.TestIO.test_unseekable_fromfile(self,x,tmp_filename)
numpy.core.tests.test_multiarray.TestIO.tmp_filename(self,tmp_path,request)
numpy.core.tests.test_multiarray.TestIO.x(self)
numpy.core.tests.test_multiarray.TestInner
numpy.core.tests.test_multiarray.TestInner.test_3d_tensor(self)
numpy.core.tests.test_multiarray.TestInner.test_inner_product_with_various_contiguities(self)
numpy.core.tests.test_multiarray.TestInner.test_inner_scalar_and_vector(self)
numpy.core.tests.test_multiarray.TestInner.test_inner_type_mismatch(self)
numpy.core.tests.test_multiarray.TestInner.test_vecself(self)
numpy.core.tests.test_multiarray.TestLexsort
numpy.core.tests.test_multiarray.TestLexsort.test_basic(self,dtype)
numpy.core.tests.test_multiarray.TestLexsort.test_datetime(self)
numpy.core.tests.test_multiarray.TestLexsort.test_invalid_axis(self)
numpy.core.tests.test_multiarray.TestLexsort.test_mixed(self)
numpy.core.tests.test_multiarray.TestLexsort.test_object(self)
numpy.core.tests.test_multiarray.TestMapIter
numpy.core.tests.test_multiarray.TestMapIter.test_mapiter(self)
numpy.core.tests.test_multiarray.TestMatmul(MatmulCommon)
numpy.core.tests.test_multiarray.TestMatmul.test_dot_equivalent(self,args)
numpy.core.tests.test_multiarray.TestMatmul.test_empty_out(self)
numpy.core.tests.test_multiarray.TestMatmul.test_matmul_bool(self)
numpy.core.tests.test_multiarray.TestMatmul.test_matmul_empty(self)
numpy.core.tests.test_multiarray.TestMatmul.test_matmul_exception_add(self)
numpy.core.tests.test_multiarray.TestMatmul.test_matmul_exception_multiply(self)
numpy.core.tests.test_multiarray.TestMatmul.test_matmul_object(self)
numpy.core.tests.test_multiarray.TestMatmul.test_matmul_object_type_scalar(self)
numpy.core.tests.test_multiarray.TestMatmul.test_out_arg(self)
numpy.core.tests.test_multiarray.TestMatmul.test_out_contiguous(self)
numpy.core.tests.test_multiarray.TestMatmulOperator(MatmulCommon)
numpy.core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override(self)
numpy.core.tests.test_multiarray.TestMatmulOperator.test_matmul_raises(self)
numpy.core.tests.test_multiarray.TestMemEventHook
numpy.core.tests.test_multiarray.TestMemEventHook.test_mem_seteventhook(self)
numpy.core.tests.test_multiarray.TestMethods
numpy.core.tests.test_multiarray.TestMethods.assert_partitioned(self,d,kth)
numpy.core.tests.test_multiarray.TestMethods.test__complex__(self)
numpy.core.tests.test_multiarray.TestMethods.test__complex__should_not_work(self)
numpy.core.tests.test_multiarray.TestMethods.test_all_where(self)
numpy.core.tests.test_multiarray.TestMethods.test_any_where(self)
numpy.core.tests.test_multiarray.TestMethods.test_argpartition_empty_array(self)
numpy.core.tests.test_multiarray.TestMethods.test_argpartition_gh5524(self)
numpy.core.tests.test_multiarray.TestMethods.test_argpartition_integer(self)
numpy.core.tests.test_multiarray.TestMethods.test_argpartition_out_of_range(self)
numpy.core.tests.test_multiarray.TestMethods.test_argsort(self)
numpy.core.tests.test_multiarray.TestMethods.test_arr_mult(self,func)
numpy.core.tests.test_multiarray.TestMethods.test_choose(self)
numpy.core.tests.test_multiarray.TestMethods.test_compress(self)
numpy.core.tests.test_multiarray.TestMethods.test_conjugate(self)
numpy.core.tests.test_multiarray.TestMethods.test_conjugate_out(self)
numpy.core.tests.test_multiarray.TestMethods.test_copy(self)
numpy.core.tests.test_multiarray.TestMethods.test_diagonal(self)
numpy.core.tests.test_multiarray.TestMethods.test_diagonal_memleak(self)
numpy.core.tests.test_multiarray.TestMethods.test_diagonal_view_notwriteable(self)
numpy.core.tests.test_multiarray.TestMethods.test_dot(self)
numpy.core.tests.test_multiarray.TestMethods.test_dot_matmul_inner_array_casting_fails(self)
numpy.core.tests.test_multiarray.TestMethods.test_dot_matmul_out(self)
numpy.core.tests.test_multiarray.TestMethods.test_dot_out_mem_overlap(self)
numpy.core.tests.test_multiarray.TestMethods.test_dot_type_mismatch(self)
numpy.core.tests.test_multiarray.TestMethods.test_flatten(self)
numpy.core.tests.test_multiarray.TestMethods.test_matmul_out(self)
numpy.core.tests.test_multiarray.TestMethods.test_no_dgemv(self,func,dtype)
numpy.core.tests.test_multiarray.TestMethods.test_partition(self)
numpy.core.tests.test_multiarray.TestMethods.test_partition_cdtype(self)
numpy.core.tests.test_multiarray.TestMethods.test_partition_empty_array(self)
numpy.core.tests.test_multiarray.TestMethods.test_partition_fuzz(self)
numpy.core.tests.test_multiarray.TestMethods.test_partition_integer(self)
numpy.core.tests.test_multiarray.TestMethods.test_partition_iterative(self)
numpy.core.tests.test_multiarray.TestMethods.test_partition_out_of_range(self)
numpy.core.tests.test_multiarray.TestMethods.test_partition_unicode_kind(self)
numpy.core.tests.test_multiarray.TestMethods.test_prod(self)
numpy.core.tests.test_multiarray.TestMethods.test_put(self)
numpy.core.tests.test_multiarray.TestMethods.test_ravel(self)
numpy.core.tests.test_multiarray.TestMethods.test_ravel_subclass(self)
numpy.core.tests.test_multiarray.TestMethods.test_repeat(self)
numpy.core.tests.test_multiarray.TestMethods.test_reshape(self)
numpy.core.tests.test_multiarray.TestMethods.test_round(self)
numpy.core.tests.test_multiarray.TestMethods.test_searchsorted(self)
numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_return_type(self)
numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_unicode(self)
numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_with_invalid_sorter(self)
numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_with_sorter(self)
numpy.core.tests.test_multiarray.TestMethods.test_size_zero_memleak(self)
numpy.core.tests.test_multiarray.TestMethods.test_sort(self)
numpy.core.tests.test_multiarray.TestMethods.test_sort_axis(self)
numpy.core.tests.test_multiarray.TestMethods.test_sort_bad_ordering(self)
numpy.core.tests.test_multiarray.TestMethods.test_sort_complex(self,part,dtype)
numpy.core.tests.test_multiarray.TestMethods.test_sort_complex_byte_swapping(self)
numpy.core.tests.test_multiarray.TestMethods.test_sort_degraded(self)
numpy.core.tests.test_multiarray.TestMethods.test_sort_object(self)
numpy.core.tests.test_multiarray.TestMethods.test_sort_order(self)
numpy.core.tests.test_multiarray.TestMethods.test_sort_raises(self)
numpy.core.tests.test_multiarray.TestMethods.test_sort_signed(self,dtype)
numpy.core.tests.test_multiarray.TestMethods.test_sort_size_0(self)
numpy.core.tests.test_multiarray.TestMethods.test_sort_string(self,dtype)
numpy.core.tests.test_multiarray.TestMethods.test_sort_structured(self)
numpy.core.tests.test_multiarray.TestMethods.test_sort_time(self,dtype)
numpy.core.tests.test_multiarray.TestMethods.test_sort_unicode_kind(self)
numpy.core.tests.test_multiarray.TestMethods.test_sort_unsigned(self,dtype)
numpy.core.tests.test_multiarray.TestMethods.test_squeeze(self)
numpy.core.tests.test_multiarray.TestMethods.test_swapaxes(self)
numpy.core.tests.test_multiarray.TestMethods.test_trace(self)
numpy.core.tests.test_multiarray.TestMethods.test_trace_subclass(self)
numpy.core.tests.test_multiarray.TestMethods.test_transpose(self)
numpy.core.tests.test_multiarray.TestMethods.test_void_sort(self)
numpy.core.tests.test_multiarray.TestMinMax
numpy.core.tests.test_multiarray.TestMinMax.test_axis(self)
numpy.core.tests.test_multiarray.TestMinMax.test_datetime(self)
numpy.core.tests.test_multiarray.TestMinMax.test_scalar(self)
numpy.core.tests.test_multiarray.TestMinScalarType
numpy.core.tests.test_multiarray.TestMinScalarType.test_object(self)
numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_int(self)
numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_longlong(self)
numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_short(self)
numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_shortshort(self)
numpy.core.tests.test_multiarray.TestNeighborhoodIter
numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_circular(self,dt)
numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_mirror(self,dt)
numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_mirror2d(self,dt)
numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_simple(self,dt)
numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_simple2d(self,dt)
numpy.core.tests.test_multiarray.TestNewBufferProtocol
numpy.core.tests.test_multiarray.TestNewBufferProtocol._check_roundtrip(self,obj)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_ctypes_integer_via_memoryview(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_ctypes_struct_via_memoryview(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_error_if_stored_buffer_info_is_corrupted(self,obj)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_error_message_unsupported(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_error_pointer_type(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_error_too_many_dims(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_and_pickle_user_dtype(self,obj,error)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_discontiguous(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_endian(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_flags(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_record(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_simple_1d(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_simple_nd(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_subarray(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_invalid_buffer_format(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_max_dims(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_out_of_order_fields(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_padded_struct_array(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_padding(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_reference_leak(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_relaxed_strides(self,c=np.ones((1,10,10),dtype='i8'))
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_relaxed_strides_buffer_info_leak(self,arr=np.ones((1,10)))
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_half(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_scalar(self)
numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_single_types(self)
numpy.core.tests.test_multiarray.TestNewaxis
numpy.core.tests.test_multiarray.TestNewaxis.test_basic(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype
numpy.core.tests.test_multiarray.TestPEP3118Dtype._check(self,spec,wanted)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_byteorder_inside_struct(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_char_vs_string(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_field_order(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_native_padding(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_native_padding_2(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_native_padding_3(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_padding_with_array_inside_struct(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding(self)
numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_unnamed_fields(self)
numpy.core.tests.test_multiarray.TestPickling
numpy.core.tests.test_multiarray.TestPickling._loads(self,obj)
numpy.core.tests.test_multiarray.TestPickling.test_correct_protocol5_error_message(self)
numpy.core.tests.test_multiarray.TestPickling.test_datetime64_byteorder(self)
numpy.core.tests.test_multiarray.TestPickling.test_f_contiguous_array(self)
numpy.core.tests.test_multiarray.TestPickling.test_non_contiguous_array(self)
numpy.core.tests.test_multiarray.TestPickling.test_record_array_with_object_dtype(self)
numpy.core.tests.test_multiarray.TestPickling.test_roundtrip(self)
numpy.core.tests.test_multiarray.TestPickling.test_subarray_int_shape(self)
numpy.core.tests.test_multiarray.TestPickling.test_version0_float32(self)
numpy.core.tests.test_multiarray.TestPickling.test_version0_int8(self)
numpy.core.tests.test_multiarray.TestPickling.test_version0_object(self)
numpy.core.tests.test_multiarray.TestPickling.test_version1_float32(self)
numpy.core.tests.test_multiarray.TestPickling.test_version1_int8(self)
numpy.core.tests.test_multiarray.TestPickling.test_version1_object(self)
numpy.core.tests.test_multiarray.TestPutmask
numpy.core.tests.test_multiarray.TestPutmask.test_byteorder(self,dtype)
numpy.core.tests.test_multiarray.TestPutmask.test_ip_types(self)
numpy.core.tests.test_multiarray.TestPutmask.test_mask_size(self)
numpy.core.tests.test_multiarray.TestPutmask.test_overlaps(self)
numpy.core.tests.test_multiarray.TestPutmask.test_record_array(self)
numpy.core.tests.test_multiarray.TestPutmask.test_writeable(self)
numpy.core.tests.test_multiarray.TestPutmask.tst_basic(self,x,T,mask,val)
numpy.core.tests.test_multiarray.TestRecord
numpy.core.tests.test_multiarray.TestRecord.test_bytes_fields(self)
numpy.core.tests.test_multiarray.TestRecord.test_empty_structure_creation(self)
numpy.core.tests.test_multiarray.TestRecord.test_field_names(self)
numpy.core.tests.test_multiarray.TestRecord.test_field_rename(self)
numpy.core.tests.test_multiarray.TestRecord.test_fromarrays_unicode(self)
numpy.core.tests.test_multiarray.TestRecord.test_multifield_indexing_view(self)
numpy.core.tests.test_multiarray.TestRecord.test_multiple_field_name_occurrence(self)
numpy.core.tests.test_multiarray.TestRecord.test_multiple_field_name_unicode(self)
numpy.core.tests.test_multiarray.TestRecord.test_record_hash(self)
numpy.core.tests.test_multiarray.TestRecord.test_record_no_hash(self)
numpy.core.tests.test_multiarray.TestRecord.test_unicode_order(self)
numpy.core.tests.test_multiarray.TestRepeat
numpy.core.tests.test_multiarray.TestRepeat.setup(self)
numpy.core.tests.test_multiarray.TestRepeat.test_axis_spec(self)
numpy.core.tests.test_multiarray.TestRepeat.test_basic(self)
numpy.core.tests.test_multiarray.TestRepeat.test_broadcast1(self)
numpy.core.tests.test_multiarray.TestRepeat.test_broadcast2(self)
numpy.core.tests.test_multiarray.TestResize
numpy.core.tests.test_multiarray.TestResize.test_0d_shape(self)
numpy.core.tests.test_multiarray.TestResize.test_basic(self)
numpy.core.tests.test_multiarray.TestResize.test_check_reference(self)
numpy.core.tests.test_multiarray.TestResize.test_check_weakref(self)
numpy.core.tests.test_multiarray.TestResize.test_empty_view(self)
numpy.core.tests.test_multiarray.TestResize.test_freeform_shape(self)
numpy.core.tests.test_multiarray.TestResize.test_int_shape(self)
numpy.core.tests.test_multiarray.TestResize.test_invalid_arguments(self)
numpy.core.tests.test_multiarray.TestResize.test_none_shape(self)
numpy.core.tests.test_multiarray.TestResize.test_obj_obj(self)
numpy.core.tests.test_multiarray.TestResize.test_zeros_appended(self)
numpy.core.tests.test_multiarray.TestScalarIndexing
numpy.core.tests.test_multiarray.TestScalarIndexing.setup(self)
numpy.core.tests.test_multiarray.TestScalarIndexing.test_ellipsis_subscript(self)
numpy.core.tests.test_multiarray.TestScalarIndexing.test_empty_subscript(self)
numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_newaxis(self)
numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript(self)
numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript_assignment(self)
numpy.core.tests.test_multiarray.TestScalarIndexing.test_newaxis(self)
numpy.core.tests.test_multiarray.TestScalarIndexing.test_overlapping_assignment(self)
numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter
numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_circular(self)
numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_const(self)
numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_mirror(self)
numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_strict_within(self)
numpy.core.tests.test_multiarray.TestStats
numpy.core.tests.test_multiarray.TestStats.setup(self)
numpy.core.tests.test_multiarray.TestStats.test_ddof(self)
numpy.core.tests.test_multiarray.TestStats.test_ddof_too_big(self)
numpy.core.tests.test_multiarray.TestStats.test_dtype_from_dtype(self)
numpy.core.tests.test_multiarray.TestStats.test_dtype_from_input(self)
numpy.core.tests.test_multiarray.TestStats.test_empty(self)
numpy.core.tests.test_multiarray.TestStats.test_keepdims(self)
numpy.core.tests.test_multiarray.TestStats.test_mean_axis_error(self)
numpy.core.tests.test_multiarray.TestStats.test_mean_float16(self)
numpy.core.tests.test_multiarray.TestStats.test_mean_values(self)
numpy.core.tests.test_multiarray.TestStats.test_mean_where(self)
numpy.core.tests.test_multiarray.TestStats.test_out(self)
numpy.core.tests.test_multiarray.TestStats.test_python_type(self)
numpy.core.tests.test_multiarray.TestStats.test_std_values(self)
numpy.core.tests.test_multiarray.TestStats.test_std_where(self)
numpy.core.tests.test_multiarray.TestStats.test_subclass(self)
numpy.core.tests.test_multiarray.TestStats.test_var_axis_error(self)
numpy.core.tests.test_multiarray.TestStats.test_var_complex_byteorder(self)
numpy.core.tests.test_multiarray.TestStats.test_var_complex_values(self,complex_dtype,ndec)
numpy.core.tests.test_multiarray.TestStats.test_var_dimensions(self)
numpy.core.tests.test_multiarray.TestStats.test_var_values(self)
numpy.core.tests.test_multiarray.TestStats.test_var_where(self)
numpy.core.tests.test_multiarray.TestStringCompare
numpy.core.tests.test_multiarray.TestStringCompare.test_mixed(self)
numpy.core.tests.test_multiarray.TestStringCompare.test_string(self)
numpy.core.tests.test_multiarray.TestStringCompare.test_unicode(self)
numpy.core.tests.test_multiarray.TestStructured
numpy.core.tests.test_multiarray.TestStructured.test_assignment(self)
numpy.core.tests.test_multiarray.TestStructured.test_base_attr(self)
numpy.core.tests.test_multiarray.TestStructured.test_casting(self)
numpy.core.tests.test_multiarray.TestStructured.test_multiindex_titles(self)
numpy.core.tests.test_multiarray.TestStructured.test_objview(self)
numpy.core.tests.test_multiarray.TestStructured.test_scalar_assignment(self)
numpy.core.tests.test_multiarray.TestStructured.test_setfield(self)
numpy.core.tests.test_multiarray.TestStructured.test_setfield_object(self)
numpy.core.tests.test_multiarray.TestStructured.test_structured_asarray_is_view(self)
numpy.core.tests.test_multiarray.TestStructured.test_structuredscalar_indexing(self)
numpy.core.tests.test_multiarray.TestStructured.test_subarray_comparison(self)
numpy.core.tests.test_multiarray.TestStructured.test_subarray_field_access(self)
numpy.core.tests.test_multiarray.TestStructured.test_zero_width_string(self)
numpy.core.tests.test_multiarray.TestSubscripting
numpy.core.tests.test_multiarray.TestSubscripting.test_test_zero_rank(self)
numpy.core.tests.test_multiarray.TestTake
numpy.core.tests.test_multiarray.TestTake.test_byteorder(self,dtype)
numpy.core.tests.test_multiarray.TestTake.test_clip(self)
numpy.core.tests.test_multiarray.TestTake.test_ip_types(self)
numpy.core.tests.test_multiarray.TestTake.test_out_overlap(self)
numpy.core.tests.test_multiarray.TestTake.test_raise(self)
numpy.core.tests.test_multiarray.TestTake.test_record_array(self)
numpy.core.tests.test_multiarray.TestTake.test_ret_is_out(self,shape)
numpy.core.tests.test_multiarray.TestTake.test_wrap(self)
numpy.core.tests.test_multiarray.TestTake.tst_basic(self,x)
numpy.core.tests.test_multiarray.TestTemporaryElide
numpy.core.tests.test_multiarray.TestTemporaryElide.test_elide_broadcast(self)
numpy.core.tests.test_multiarray.TestTemporaryElide.test_elide_readonly(self)
numpy.core.tests.test_multiarray.TestTemporaryElide.test_elide_scalar(self)
numpy.core.tests.test_multiarray.TestTemporaryElide.test_elide_scalar_readonly(self)
numpy.core.tests.test_multiarray.TestTemporaryElide.test_elide_updateifcopy(self)
numpy.core.tests.test_multiarray.TestTemporaryElide.test_extension_incref_elide(self)
numpy.core.tests.test_multiarray.TestTemporaryElide.test_extension_incref_elide_stack(self)
numpy.core.tests.test_multiarray.TestTemporaryElide.test_temporary_with_cast(self)
numpy.core.tests.test_multiarray.TestUnicodeArrayNonzero
numpy.core.tests.test_multiarray.TestUnicodeArrayNonzero.test_all_null_ustring_array_is_falsey(self)
numpy.core.tests.test_multiarray.TestUnicodeArrayNonzero.test_empty_ustring_array_is_falsey(self)
numpy.core.tests.test_multiarray.TestUnicodeArrayNonzero.test_null_inside_ustring_array_is_truthy(self)
numpy.core.tests.test_multiarray.TestUnicodeArrayNonzero.test_whitespace_ustring_array_is_falsey(self)
numpy.core.tests.test_multiarray.TestUnicodeEncoding
numpy.core.tests.test_multiarray.TestUnicodeEncoding.test_assign_scalar(self)
numpy.core.tests.test_multiarray.TestUnicodeEncoding.test_fill_scalar(self)
numpy.core.tests.test_multiarray.TestUnicodeEncoding.test_round_trip(self)
numpy.core.tests.test_multiarray.TestVdot
numpy.core.tests.test_multiarray.TestVdot.test_basic(self)
numpy.core.tests.test_multiarray.TestVdot.test_vdot_array_order(self)
numpy.core.tests.test_multiarray.TestVdot.test_vdot_uncontiguous(self)
numpy.core.tests.test_multiarray.TestView
numpy.core.tests.test_multiarray.TestView.test_basic(self)
numpy.core.tests.test_multiarray.TestWarnings
numpy.core.tests.test_multiarray.TestWarnings.test_complex_warning(self)
numpy.core.tests.test_multiarray.TestWhere
numpy.core.tests.test_multiarray.TestWhere.test_basic(self)
numpy.core.tests.test_multiarray.TestWhere.test_dtype_mix(self)
numpy.core.tests.test_multiarray.TestWhere.test_empty_result(self)
numpy.core.tests.test_multiarray.TestWhere.test_error(self)
numpy.core.tests.test_multiarray.TestWhere.test_exotic(self)
numpy.core.tests.test_multiarray.TestWhere.test_foreign(self)
numpy.core.tests.test_multiarray.TestWhere.test_largedim(self)
numpy.core.tests.test_multiarray.TestWhere.test_ndim(self)
numpy.core.tests.test_multiarray.TestWhere.test_string(self)
numpy.core.tests.test_multiarray.TestWritebackIfCopy
numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_argmax_with_out(self)
numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_argmin_with_out(self)
numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_choose_mod_raise(self)
numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_dealloc_warning(self)
numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_dot_out(self)
numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_flatiter__array__(self)
numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_insert_noncontiguous(self)
numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_put_noncontiguous(self)
numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_putmask_noncontiguous(self)
numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_take_mode_raise(self)
numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_view_assign(self)
numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_view_discard_refcount(self)
numpy.core.tests.test_multiarray.TestZeroRank
numpy.core.tests.test_multiarray.TestZeroRank.setup(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_constructor(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_ellipsis_subscript(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_ellipsis_subscript_assignment(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_empty_subscript(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_empty_subscript_assignment(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_newaxis(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_subscript(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_subscript_assignment(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_newaxis(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_output(self)
numpy.core.tests.test_multiarray.TestZeroRank.test_real_imag(self)
numpy.core.tests.test_multiarray.TestZeroSizeFlexible
numpy.core.tests.test_multiarray.TestZeroSizeFlexible._test_sort_partition(self,name,kinds,**kwargs)
numpy.core.tests.test_multiarray.TestZeroSizeFlexible._zeros(shape,dtype=str)
numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_argpartition(self)
numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_argsort(self)
numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_create(self)
numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_dumps(self)
numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_partition(self)
numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_pickle(self)
numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_pickle_with_buffercallback(self)
numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_resize(self)
numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_sort(self)
numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_view(self)
numpy.core.tests.test_multiarray._aligned_zeros(shape,dtype=float,order='C',align=None)
numpy.core.tests.test_multiarray._mean(a,**args)
numpy.core.tests.test_multiarray._std(a,**args)
numpy.core.tests.test_multiarray._var(a,**args)
numpy.core.tests.test_multiarray.test_array_interface_empty_shape()
numpy.core.tests.test_multiarray.test_array_interface_itemsize()
numpy.core.tests.test_multiarray.test_array_interface_offset()
numpy.core.tests.test_multiarray.test_array_interface_unicode_typestr()
numpy.core.tests.test_multiarray.test_equal_override()
numpy.core.tests.test_multiarray.test_flat_element_deletion()
numpy.core.tests.test_multiarray.test_getfield()
numpy.core.tests.test_multiarray.test_interface_no_shape()
numpy.core.tests.test_multiarray.test_matmul_axes()
numpy.core.tests.test_multiarray.test_matmul_inplace()
numpy.core.tests.test_multiarray.test_npymath_complex(fun,npfun,x,y,test_dtype)
numpy.core.tests.test_multiarray.test_npymath_real()
numpy.core.tests.test_multiarray.test_orderconverter_with_nonASCII_unicode_ordering()
numpy.core.tests.test_multiarray.test_scalar_element_deletion()
numpy.core.tests.test_multiarray.test_uintalignment_and_alignment()
numpy.tests.test_multiarray.MatmulCommon
numpy.tests.test_multiarray.MatmulCommon.test_exceptions(self)
numpy.tests.test_multiarray.MatmulCommon.test_matrix_matrix_values(self)
numpy.tests.test_multiarray.MatmulCommon.test_matrix_vector_values(self)
numpy.tests.test_multiarray.MatmulCommon.test_result_types(self)
numpy.tests.test_multiarray.MatmulCommon.test_scalar_output(self)
numpy.tests.test_multiarray.MatmulCommon.test_shapes(self)
numpy.tests.test_multiarray.MatmulCommon.test_vector_matrix_values(self)
numpy.tests.test_multiarray.MatmulCommon.test_vector_vector_values(self)
numpy.tests.test_multiarray.TestAlen
numpy.tests.test_multiarray.TestAlen.test_basic(self)
numpy.tests.test_multiarray.TestAlen.test_singleton(self)
numpy.tests.test_multiarray.TestAlignment
numpy.tests.test_multiarray.TestAlignment.check(self,shape,dtype,order,align)
numpy.tests.test_multiarray.TestAlignment.test_strided_loop_alignments(self)
numpy.tests.test_multiarray.TestAlignment.test_various_alignments(self)
numpy.tests.test_multiarray.TestArange
numpy.tests.test_multiarray.TestArange.test_infinite(self)
numpy.tests.test_multiarray.TestArange.test_nan_step(self)
numpy.tests.test_multiarray.TestArange.test_require_range(self)
numpy.tests.test_multiarray.TestArange.test_start_stop_kwarg(self)
numpy.tests.test_multiarray.TestArange.test_zero_step(self)
numpy.tests.test_multiarray.TestArgmax
numpy.tests.test_multiarray.TestArgmax.test_all(self)
numpy.tests.test_multiarray.TestArgmax.test_argmax_unicode(self)
numpy.tests.test_multiarray.TestArgmax.test_combinations(self)
numpy.tests.test_multiarray.TestArgmax.test_np_vs_ndarray(self)
numpy.tests.test_multiarray.TestArgmax.test_object_argmax_with_NULLs(self)
numpy.tests.test_multiarray.TestArgmax.test_output_shape(self)
numpy.tests.test_multiarray.TestArgmax.test_ret_is_out(self,ndim)
numpy.tests.test_multiarray.TestArgmin
numpy.tests.test_multiarray.TestArgmin.test_all(self)
numpy.tests.test_multiarray.TestArgmin.test_argmin_unicode(self)
numpy.tests.test_multiarray.TestArgmin.test_combinations(self)
numpy.tests.test_multiarray.TestArgmin.test_minimum_signed_integers(self)
numpy.tests.test_multiarray.TestArgmin.test_np_vs_ndarray(self)
numpy.tests.test_multiarray.TestArgmin.test_object_argmin_with_NULLs(self)
numpy.tests.test_multiarray.TestArgmin.test_output_shape(self)
numpy.tests.test_multiarray.TestArgmin.test_ret_is_out(self,ndim)
numpy.tests.test_multiarray.TestArrayAttributeDeletion
numpy.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_flags_not_writable_attribute_deletion(self)
numpy.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_flags_writable_attribute_deletion(self)
numpy.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_not_writable_attributes_deletion(self)
numpy.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_writable_attributes_deletion(self)
numpy.tests.test_multiarray.TestArrayConstruction
numpy.tests.test_multiarray.TestArrayConstruction.test_array(self)
numpy.tests.test_multiarray.TestArrayConstruction.test_array_as_keyword(self,func)
numpy.tests.test_multiarray.TestArrayConstruction.test_array_cont(self)
numpy.tests.test_multiarray.TestArrayConstruction.test_array_copy_false(self)
numpy.tests.test_multiarray.TestArrayConstruction.test_array_copy_true(self)
numpy.tests.test_multiarray.TestArrayConstruction.test_array_empty(self)
numpy.tests.test_multiarray.TestArrayConstruction.test_bad_arguments_error(self,func)
numpy.tests.test_multiarray.TestArrayFinalize
numpy.tests.test_multiarray.TestArrayFinalize.test_bad_finalize(self)
numpy.tests.test_multiarray.TestArrayFinalize.test_lifetime_on_error(self)
numpy.tests.test_multiarray.TestArrayFinalize.test_receives_base(self)
numpy.tests.test_multiarray.TestArrayInterface
numpy.tests.test_multiarray.TestArrayInterface.Foo(self,value)
numpy.tests.test_multiarray.TestArrayInterface.Foo.__array_interface__(self)
numpy.tests.test_multiarray.TestArrayInterface.Foo.__float__(self)
numpy.tests.test_multiarray.TestArrayInterface.test_scalar_interface(self,val,iface,expected)
numpy.tests.test_multiarray.TestArrayPriority
numpy.tests.test_multiarray.TestArrayPriority.Bar(cls,*args,**kwargs)
numpy.tests.test_multiarray.TestArrayPriority.Foo(cls,*args,**kwargs)
numpy.tests.test_multiarray.TestArrayPriority.Other
numpy.tests.test_multiarray.TestArrayPriority.Other._all(self,other)
numpy.tests.test_multiarray.TestArrayPriority.test_ndarray_other(self)
numpy.tests.test_multiarray.TestArrayPriority.test_ndarray_subclass(self)
numpy.tests.test_multiarray.TestArrayPriority.test_subclass_other(self)
numpy.tests.test_multiarray.TestArrayPriority.test_subclass_subclass(self)
numpy.tests.test_multiarray.TestAsCArray
numpy.tests.test_multiarray.TestAsCArray.test_1darray(self)
numpy.tests.test_multiarray.TestAsCArray.test_2darray(self)
numpy.tests.test_multiarray.TestAsCArray.test_3darray(self)
numpy.tests.test_multiarray.TestAssignment
numpy.tests.test_multiarray.TestAssignment.test_assignment_broadcasting(self)
numpy.tests.test_multiarray.TestAssignment.test_assignment_errors(self)
numpy.tests.test_multiarray.TestAssignment.test_cast_to_string(self)
numpy.tests.test_multiarray.TestAssignment.test_longdouble_assignment(self)
numpy.tests.test_multiarray.TestAssignment.test_stringlike_empty_list(self)
numpy.tests.test_multiarray.TestAssignment.test_unicode_assignment(self)
numpy.tests.test_multiarray.TestAttributes
numpy.tests.test_multiarray.TestAttributes.setup(self)
numpy.tests.test_multiarray.TestAttributes.test_attributes(self)
numpy.tests.test_multiarray.TestAttributes.test_dtypeattr(self)
numpy.tests.test_multiarray.TestAttributes.test_fill(self)
numpy.tests.test_multiarray.TestAttributes.test_fill_max_uint64(self)
numpy.tests.test_multiarray.TestAttributes.test_fill_struct_array(self)
numpy.tests.test_multiarray.TestAttributes.test_int_subclassing(self)
numpy.tests.test_multiarray.TestAttributes.test_set_stridesattr(self)
numpy.tests.test_multiarray.TestAttributes.test_stridesattr(self)
numpy.tests.test_multiarray.TestBinop
numpy.tests.test_multiarray.TestBinop.test_array_ufunc_index(self)
numpy.tests.test_multiarray.TestBinop.test_inplace(self)
numpy.tests.test_multiarray.TestBinop.test_out_override(self)
numpy.tests.test_multiarray.TestBinop.test_pos_array_ufunc_override(self)
numpy.tests.test_multiarray.TestBinop.test_pow_array_object_dtype(self)
numpy.tests.test_multiarray.TestBinop.test_pow_override_with_errors(self)
numpy.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction(self)
numpy.tests.test_multiarray.TestBinop.test_ufunc_override_normalize_signature(self)
numpy.tests.test_multiarray.TestBool
numpy.tests.test_multiarray.TestBool._test_cast_from_flexible(self,dtype)
numpy.tests.test_multiarray.TestBool.check_count_nonzero(self,power,length)
numpy.tests.test_multiarray.TestBool.test_cast_from_bytes(self)
numpy.tests.test_multiarray.TestBool.test_cast_from_unicode(self)
numpy.tests.test_multiarray.TestBool.test_cast_from_void(self)
numpy.tests.test_multiarray.TestBool.test_count_nonzero(self)
numpy.tests.test_multiarray.TestBool.test_count_nonzero_all(self)
numpy.tests.test_multiarray.TestBool.test_count_nonzero_unaligned(self)
numpy.tests.test_multiarray.TestBool.test_sum(self)
numpy.tests.test_multiarray.TestBool.test_test_interning(self)
numpy.tests.test_multiarray.TestBytestringArrayNonzero
numpy.tests.test_multiarray.TestBytestringArrayNonzero.test_all_null_bstring_array_is_falsey(self)
numpy.tests.test_multiarray.TestBytestringArrayNonzero.test_empty_bstring_array_is_falsey(self)
numpy.tests.test_multiarray.TestBytestringArrayNonzero.test_null_inside_bstring_array_is_truthy(self)
numpy.tests.test_multiarray.TestBytestringArrayNonzero.test_whitespace_bstring_array_is_falsey(self)
numpy.tests.test_multiarray.TestCAPI
numpy.tests.test_multiarray.TestCAPI.test_IsPythonScalar(self)
numpy.tests.test_multiarray.TestCTypes
numpy.tests.test_multiarray.TestCTypes._make_readonly(x)
numpy.tests.test_multiarray.TestCTypes.test_ctypes_as_parameter_holds_reference(self)
numpy.tests.test_multiarray.TestCTypes.test_ctypes_data_as_holds_reference(self,arr)
numpy.tests.test_multiarray.TestCTypes.test_ctypes_is_available(self)
numpy.tests.test_multiarray.TestCTypes.test_ctypes_is_not_available(self)
numpy.tests.test_multiarray.TestCequenceMethods
numpy.tests.test_multiarray.TestCequenceMethods.test_array_contains(self)
numpy.tests.test_multiarray.TestChoose
numpy.tests.test_multiarray.TestChoose.setup(self)
numpy.tests.test_multiarray.TestChoose.test_basic(self)
numpy.tests.test_multiarray.TestChoose.test_broadcast1(self)
numpy.tests.test_multiarray.TestChoose.test_broadcast2(self)
numpy.tests.test_multiarray.TestChoose.test_output_dtype(self,ops)
numpy.tests.test_multiarray.TestClip
numpy.tests.test_multiarray.TestClip._check_range(self,x,cmin,cmax)
numpy.tests.test_multiarray.TestClip._clip_type(self,type_group,array_max,clip_min,clip_max,inplace=False,expected_min=None,expected_max=None)
numpy.tests.test_multiarray.TestClip.test_basic(self)
numpy.tests.test_multiarray.TestClip.test_max_or_min(self)
numpy.tests.test_multiarray.TestClip.test_nan(self)
numpy.tests.test_multiarray.TestClip.test_record_array(self)
numpy.tests.test_multiarray.TestCompress
numpy.tests.test_multiarray.TestCompress.test_axis(self)
numpy.tests.test_multiarray.TestCompress.test_flatten(self)
numpy.tests.test_multiarray.TestCompress.test_truncate(self)
numpy.tests.test_multiarray.TestConversion
numpy.tests.test_multiarray.TestConversion.test_array_scalar_relational_operation(self)
numpy.tests.test_multiarray.TestConversion.test_to_bool_scalar(self)
numpy.tests.test_multiarray.TestConversion.test_to_int_scalar(self)
numpy.tests.test_multiarray.TestCreation
numpy.tests.test_multiarray.TestCreation._ragged_creation(self,seq)
numpy.tests.test_multiarray.TestCreation.test_array_of_ragged_array(self)
numpy.tests.test_multiarray.TestCreation.test_array_too_big(self)
numpy.tests.test_multiarray.TestCreation.test_deep_nonragged_object(self)
numpy.tests.test_multiarray.TestCreation.test_empty_unicode(self)
numpy.tests.test_multiarray.TestCreation.test_failed_len_sequence(self)
numpy.tests.test_multiarray.TestCreation.test_false_len_iterable(self)
numpy.tests.test_multiarray.TestCreation.test_false_len_sequence(self)
numpy.tests.test_multiarray.TestCreation.test_from_attribute(self)
numpy.tests.test_multiarray.TestCreation.test_from_string(self)
numpy.tests.test_multiarray.TestCreation.test_malloc_fails(self)
numpy.tests.test_multiarray.TestCreation.test_no_len_object_type(self)
numpy.tests.test_multiarray.TestCreation.test_non_sequence_sequence(self)
numpy.tests.test_multiarray.TestCreation.test_ragged_ndim_object(self)
numpy.tests.test_multiarray.TestCreation.test_ragged_shape_object(self)
numpy.tests.test_multiarray.TestCreation.test_sequence_non_homogeneous(self)
numpy.tests.test_multiarray.TestCreation.test_structured_void_promotion(self,idx)
numpy.tests.test_multiarray.TestCreation.test_too_big_error(self)
numpy.tests.test_multiarray.TestCreation.test_void(self)
numpy.tests.test_multiarray.TestCreation.test_zeros(self)
numpy.tests.test_multiarray.TestCreation.test_zeros_big(self)
numpy.tests.test_multiarray.TestCreation.test_zeros_like_like_zeros(self)
numpy.tests.test_multiarray.TestCreation.test_zeros_obj(self)
numpy.tests.test_multiarray.TestCreation.test_zeros_obj_obj(self)
numpy.tests.test_multiarray.TestDot
numpy.tests.test_multiarray.TestDot.setup(self)
numpy.tests.test_multiarray.TestDot.test_accelerate_framework_sgemv_fix(self)
numpy.tests.test_multiarray.TestDot.test_all(self)
numpy.tests.test_multiarray.TestDot.test_dot_2args(self)
numpy.tests.test_multiarray.TestDot.test_dot_3args(self)
numpy.tests.test_multiarray.TestDot.test_dot_3args_errors(self)
numpy.tests.test_multiarray.TestDot.test_dot_array_order(self)
numpy.tests.test_multiarray.TestDot.test_dotcolumnvect1(self)
numpy.tests.test_multiarray.TestDot.test_dotcolumnvect2(self)
numpy.tests.test_multiarray.TestDot.test_dotmatmat(self)
numpy.tests.test_multiarray.TestDot.test_dotmatvec(self)
numpy.tests.test_multiarray.TestDot.test_dotmatvec2(self)
numpy.tests.test_multiarray.TestDot.test_dotvecmat(self)
numpy.tests.test_multiarray.TestDot.test_dotvecmat2(self)
numpy.tests.test_multiarray.TestDot.test_dotvecmat3(self)
numpy.tests.test_multiarray.TestDot.test_dotvecscalar(self)
numpy.tests.test_multiarray.TestDot.test_dotvecscalar2(self)
numpy.tests.test_multiarray.TestDot.test_dotvecvecinner(self)
numpy.tests.test_multiarray.TestDot.test_dotvecvecouter(self)
numpy.tests.test_multiarray.TestDot.test_vecobject(self)
numpy.tests.test_multiarray.TestDtypedescr
numpy.tests.test_multiarray.TestDtypedescr.test_byteorders(self)
numpy.tests.test_multiarray.TestDtypedescr.test_construction(self)
numpy.tests.test_multiarray.TestDtypedescr.test_structured_non_void(self)
numpy.tests.test_multiarray.TestFancyIndexing
numpy.tests.test_multiarray.TestFancyIndexing.test_assign_mask(self)
numpy.tests.test_multiarray.TestFancyIndexing.test_assign_mask2(self)
numpy.tests.test_multiarray.TestFancyIndexing.test_list(self)
numpy.tests.test_multiarray.TestFancyIndexing.test_mask(self)
numpy.tests.test_multiarray.TestFancyIndexing.test_mask2(self)
numpy.tests.test_multiarray.TestFancyIndexing.test_tuple(self)
numpy.tests.test_multiarray.TestFlags
numpy.tests.test_multiarray.TestFlags.setup(self)
numpy.tests.test_multiarray.TestFlags.test_otherflags(self)
numpy.tests.test_multiarray.TestFlags.test_readonly_flag_protocols(self,flag,flag_value,writeable)
numpy.tests.test_multiarray.TestFlags.test_string_align(self)
numpy.tests.test_multiarray.TestFlags.test_void_align(self)
numpy.tests.test_multiarray.TestFlags.test_warnonwrite(self)
numpy.tests.test_multiarray.TestFlags.test_writeable(self)
numpy.tests.test_multiarray.TestFlags.test_writeable_any_base(self)
numpy.tests.test_multiarray.TestFlags.test_writeable_from_buffer(self)
numpy.tests.test_multiarray.TestFlags.test_writeable_from_c_data(self)
numpy.tests.test_multiarray.TestFlags.test_writeable_from_readonly(self)
numpy.tests.test_multiarray.TestFlags.test_writeable_pickle(self)
numpy.tests.test_multiarray.TestFlat
numpy.tests.test_multiarray.TestFlat.setup(self)
numpy.tests.test_multiarray.TestFlat.test___array__(self)
numpy.tests.test_multiarray.TestFlat.test_contiguous(self)
numpy.tests.test_multiarray.TestFlat.test_discontiguous(self)
numpy.tests.test_multiarray.TestFlat.test_index_getset(self)
numpy.tests.test_multiarray.TestFlat.test_refcount(self)
numpy.tests.test_multiarray.TestFormat
numpy.tests.test_multiarray.TestFormat.test_0d(self)
numpy.tests.test_multiarray.TestFormat.test_1d_format(self)
numpy.tests.test_multiarray.TestFormat.test_1d_no_format(self)
numpy.tests.test_multiarray.TestFromBuffer
numpy.tests.test_multiarray.TestFromBuffer.test_basic(self,byteorder,dtype)
numpy.tests.test_multiarray.TestFromBuffer.test_empty(self)
numpy.tests.test_multiarray.TestHash
numpy.tests.test_multiarray.TestHash.test_int(self)
numpy.tests.test_multiarray.TestHashing
numpy.tests.test_multiarray.TestHashing.test_arrays_not_hashable(self)
numpy.tests.test_multiarray.TestHashing.test_collections_hashable(self)
numpy.tests.test_multiarray.TestIO
numpy.tests.test_multiarray.TestIO._check_from(self,s,value,filename,**kw)
numpy.tests.test_multiarray.TestIO.decimal_sep_localization(self,request)
numpy.tests.test_multiarray.TestIO.test_ascii(self,tmp_filename,decimal_sep_localization)
numpy.tests.test_multiarray.TestIO.test_big_binary(self)
numpy.tests.test_multiarray.TestIO.test_binary(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_bool_fromstring(self)
numpy.tests.test_multiarray.TestIO.test_counted_string(self,tmp_filename,decimal_sep_localization)
numpy.tests.test_multiarray.TestIO.test_counted_string_with_ws(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_dtype(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_dtype_bool(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_empty_files_binary(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_empty_files_text(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_file_position_after_fromfile(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_file_position_after_tofile(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_fromfile_bad_dup(self,x,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_fromfile_offset(self,x,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_fromfile_subarray_binary(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_fromstring_count0(self)
numpy.tests.test_multiarray.TestIO.test_inf(self,tmp_filename,decimal_sep_localization)
numpy.tests.test_multiarray.TestIO.test_int64_fromstring(self)
numpy.tests.test_multiarray.TestIO.test_io_open_buffered_fromfile(self,x,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_io_open_unbuffered_fromfile(self,x,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_largish_file(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_load_object_array_fromfile(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_long_sep(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_malformed(self,tmp_filename,decimal_sep_localization)
numpy.tests.test_multiarray.TestIO.test_nan(self,tmp_filename,decimal_sep_localization)
numpy.tests.test_multiarray.TestIO.test_nofile(self)
numpy.tests.test_multiarray.TestIO.test_numbers(self,tmp_filename,decimal_sep_localization)
numpy.tests.test_multiarray.TestIO.test_parsing_subarray_unsupported(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_read_shorter_than_count_subarray(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_roundtrip(self,x,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_roundtrip_binary_str(self,x)
numpy.tests.test_multiarray.TestIO.test_roundtrip_dump_pathlib(self,x,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_roundtrip_file(self,x,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_roundtrip_repr(self,x)
numpy.tests.test_multiarray.TestIO.test_roundtrip_str(self,x)
numpy.tests.test_multiarray.TestIO.test_string(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_string_with_ws(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_tofile_cleanup(self,tmp_filename)
numpy.tests.test_multiarray.TestIO.test_tofile_format(self,tmp_filename,decimal_sep_localization)
numpy.tests.test_multiarray.TestIO.test_tofile_sep(self,tmp_filename,decimal_sep_localization)
numpy.tests.test_multiarray.TestIO.test_uint64_fromstring(self)
numpy.tests.test_multiarray.TestIO.test_unseekable_fromfile(self,x,tmp_filename)
numpy.tests.test_multiarray.TestIO.tmp_filename(self,tmp_path,request)
numpy.tests.test_multiarray.TestIO.x(self)
numpy.tests.test_multiarray.TestInner
numpy.tests.test_multiarray.TestInner.test_3d_tensor(self)
numpy.tests.test_multiarray.TestInner.test_inner_product_with_various_contiguities(self)
numpy.tests.test_multiarray.TestInner.test_inner_scalar_and_vector(self)
numpy.tests.test_multiarray.TestInner.test_inner_type_mismatch(self)
numpy.tests.test_multiarray.TestInner.test_vecself(self)
numpy.tests.test_multiarray.TestLexsort
numpy.tests.test_multiarray.TestLexsort.test_basic(self,dtype)
numpy.tests.test_multiarray.TestLexsort.test_datetime(self)
numpy.tests.test_multiarray.TestLexsort.test_invalid_axis(self)
numpy.tests.test_multiarray.TestLexsort.test_mixed(self)
numpy.tests.test_multiarray.TestLexsort.test_object(self)
numpy.tests.test_multiarray.TestMapIter
numpy.tests.test_multiarray.TestMapIter.test_mapiter(self)
numpy.tests.test_multiarray.TestMatmul(MatmulCommon)
numpy.tests.test_multiarray.TestMatmul.test_dot_equivalent(self,args)
numpy.tests.test_multiarray.TestMatmul.test_empty_out(self)
numpy.tests.test_multiarray.TestMatmul.test_matmul_bool(self)
numpy.tests.test_multiarray.TestMatmul.test_matmul_empty(self)
numpy.tests.test_multiarray.TestMatmul.test_matmul_exception_add(self)
numpy.tests.test_multiarray.TestMatmul.test_matmul_exception_multiply(self)
numpy.tests.test_multiarray.TestMatmul.test_matmul_object(self)
numpy.tests.test_multiarray.TestMatmul.test_matmul_object_type_scalar(self)
numpy.tests.test_multiarray.TestMatmul.test_out_arg(self)
numpy.tests.test_multiarray.TestMatmul.test_out_contiguous(self)
numpy.tests.test_multiarray.TestMatmulOperator(MatmulCommon)
numpy.tests.test_multiarray.TestMatmulOperator.test_array_priority_override(self)
numpy.tests.test_multiarray.TestMatmulOperator.test_matmul_raises(self)
numpy.tests.test_multiarray.TestMemEventHook
numpy.tests.test_multiarray.TestMemEventHook.test_mem_seteventhook(self)
numpy.tests.test_multiarray.TestMethods
numpy.tests.test_multiarray.TestMethods.assert_partitioned(self,d,kth)
numpy.tests.test_multiarray.TestMethods.test__complex__(self)
numpy.tests.test_multiarray.TestMethods.test__complex__should_not_work(self)
numpy.tests.test_multiarray.TestMethods.test_all_where(self)
numpy.tests.test_multiarray.TestMethods.test_any_where(self)
numpy.tests.test_multiarray.TestMethods.test_argpartition_empty_array(self)
numpy.tests.test_multiarray.TestMethods.test_argpartition_gh5524(self)
numpy.tests.test_multiarray.TestMethods.test_argpartition_integer(self)
numpy.tests.test_multiarray.TestMethods.test_argpartition_out_of_range(self)
numpy.tests.test_multiarray.TestMethods.test_argsort(self)
numpy.tests.test_multiarray.TestMethods.test_arr_mult(self,func)
numpy.tests.test_multiarray.TestMethods.test_choose(self)
numpy.tests.test_multiarray.TestMethods.test_compress(self)
numpy.tests.test_multiarray.TestMethods.test_conjugate(self)
numpy.tests.test_multiarray.TestMethods.test_conjugate_out(self)
numpy.tests.test_multiarray.TestMethods.test_copy(self)
numpy.tests.test_multiarray.TestMethods.test_diagonal(self)
numpy.tests.test_multiarray.TestMethods.test_diagonal_memleak(self)
numpy.tests.test_multiarray.TestMethods.test_diagonal_view_notwriteable(self)
numpy.tests.test_multiarray.TestMethods.test_dot(self)
numpy.tests.test_multiarray.TestMethods.test_dot_matmul_inner_array_casting_fails(self)
numpy.tests.test_multiarray.TestMethods.test_dot_matmul_out(self)
numpy.tests.test_multiarray.TestMethods.test_dot_out_mem_overlap(self)
numpy.tests.test_multiarray.TestMethods.test_dot_type_mismatch(self)
numpy.tests.test_multiarray.TestMethods.test_flatten(self)
numpy.tests.test_multiarray.TestMethods.test_matmul_out(self)
numpy.tests.test_multiarray.TestMethods.test_no_dgemv(self,func,dtype)
numpy.tests.test_multiarray.TestMethods.test_partition(self)
numpy.tests.test_multiarray.TestMethods.test_partition_cdtype(self)
numpy.tests.test_multiarray.TestMethods.test_partition_empty_array(self)
numpy.tests.test_multiarray.TestMethods.test_partition_fuzz(self)
numpy.tests.test_multiarray.TestMethods.test_partition_integer(self)
numpy.tests.test_multiarray.TestMethods.test_partition_iterative(self)
numpy.tests.test_multiarray.TestMethods.test_partition_out_of_range(self)
numpy.tests.test_multiarray.TestMethods.test_partition_unicode_kind(self)
numpy.tests.test_multiarray.TestMethods.test_prod(self)
numpy.tests.test_multiarray.TestMethods.test_put(self)
numpy.tests.test_multiarray.TestMethods.test_ravel(self)
numpy.tests.test_multiarray.TestMethods.test_ravel_subclass(self)
numpy.tests.test_multiarray.TestMethods.test_repeat(self)
numpy.tests.test_multiarray.TestMethods.test_reshape(self)
numpy.tests.test_multiarray.TestMethods.test_round(self)
numpy.tests.test_multiarray.TestMethods.test_searchsorted(self)
numpy.tests.test_multiarray.TestMethods.test_searchsorted_return_type(self)
numpy.tests.test_multiarray.TestMethods.test_searchsorted_unicode(self)
numpy.tests.test_multiarray.TestMethods.test_searchsorted_with_invalid_sorter(self)
numpy.tests.test_multiarray.TestMethods.test_searchsorted_with_sorter(self)
numpy.tests.test_multiarray.TestMethods.test_size_zero_memleak(self)
numpy.tests.test_multiarray.TestMethods.test_sort(self)
numpy.tests.test_multiarray.TestMethods.test_sort_axis(self)
numpy.tests.test_multiarray.TestMethods.test_sort_bad_ordering(self)
numpy.tests.test_multiarray.TestMethods.test_sort_complex(self,part,dtype)
numpy.tests.test_multiarray.TestMethods.test_sort_complex_byte_swapping(self)
numpy.tests.test_multiarray.TestMethods.test_sort_degraded(self)
numpy.tests.test_multiarray.TestMethods.test_sort_object(self)
numpy.tests.test_multiarray.TestMethods.test_sort_order(self)
numpy.tests.test_multiarray.TestMethods.test_sort_raises(self)
numpy.tests.test_multiarray.TestMethods.test_sort_signed(self,dtype)
numpy.tests.test_multiarray.TestMethods.test_sort_size_0(self)
numpy.tests.test_multiarray.TestMethods.test_sort_string(self,dtype)
numpy.tests.test_multiarray.TestMethods.test_sort_structured(self)
numpy.tests.test_multiarray.TestMethods.test_sort_time(self,dtype)
numpy.tests.test_multiarray.TestMethods.test_sort_unicode_kind(self)
numpy.tests.test_multiarray.TestMethods.test_sort_unsigned(self,dtype)
numpy.tests.test_multiarray.TestMethods.test_squeeze(self)
numpy.tests.test_multiarray.TestMethods.test_swapaxes(self)
numpy.tests.test_multiarray.TestMethods.test_trace(self)
numpy.tests.test_multiarray.TestMethods.test_trace_subclass(self)
numpy.tests.test_multiarray.TestMethods.test_transpose(self)
numpy.tests.test_multiarray.TestMethods.test_void_sort(self)
numpy.tests.test_multiarray.TestMinMax
numpy.tests.test_multiarray.TestMinMax.test_axis(self)
numpy.tests.test_multiarray.TestMinMax.test_datetime(self)
numpy.tests.test_multiarray.TestMinMax.test_scalar(self)
numpy.tests.test_multiarray.TestMinScalarType
numpy.tests.test_multiarray.TestMinScalarType.test_object(self)
numpy.tests.test_multiarray.TestMinScalarType.test_usigned_int(self)
numpy.tests.test_multiarray.TestMinScalarType.test_usigned_longlong(self)
numpy.tests.test_multiarray.TestMinScalarType.test_usigned_short(self)
numpy.tests.test_multiarray.TestMinScalarType.test_usigned_shortshort(self)
numpy.tests.test_multiarray.TestNeighborhoodIter
numpy.tests.test_multiarray.TestNeighborhoodIter.test_circular(self,dt)
numpy.tests.test_multiarray.TestNeighborhoodIter.test_mirror(self,dt)
numpy.tests.test_multiarray.TestNeighborhoodIter.test_mirror2d(self,dt)
numpy.tests.test_multiarray.TestNeighborhoodIter.test_simple(self,dt)
numpy.tests.test_multiarray.TestNeighborhoodIter.test_simple2d(self,dt)
numpy.tests.test_multiarray.TestNewBufferProtocol
numpy.tests.test_multiarray.TestNewBufferProtocol._check_roundtrip(self,obj)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_ctypes_integer_via_memoryview(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_ctypes_struct_via_memoryview(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_error_if_stored_buffer_info_is_corrupted(self,obj)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_error_message_unsupported(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_error_pointer_type(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_error_too_many_dims(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_export_and_pickle_user_dtype(self,obj,error)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_export_discontiguous(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_export_endian(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_export_flags(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_export_record(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_export_simple_1d(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_export_simple_nd(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_export_subarray(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_invalid_buffer_format(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_max_dims(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_out_of_order_fields(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_padded_struct_array(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_padding(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_reference_leak(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_relaxed_strides(self,c=np.ones((1,10,10),dtype='i8'))
numpy.tests.test_multiarray.TestNewBufferProtocol.test_relaxed_strides_buffer_info_leak(self,arr=np.ones((1,10)))
numpy.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_half(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_scalar(self)
numpy.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_single_types(self)
numpy.tests.test_multiarray.TestNewaxis
numpy.tests.test_multiarray.TestNewaxis.test_basic(self)
numpy.tests.test_multiarray.TestPEP3118Dtype
numpy.tests.test_multiarray.TestPEP3118Dtype._check(self,spec,wanted)
numpy.tests.test_multiarray.TestPEP3118Dtype.test_byteorder_inside_struct(self)
numpy.tests.test_multiarray.TestPEP3118Dtype.test_char_vs_string(self)
numpy.tests.test_multiarray.TestPEP3118Dtype.test_field_order(self)
numpy.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding(self)
numpy.tests.test_multiarray.TestPEP3118Dtype.test_native_padding(self)
numpy.tests.test_multiarray.TestPEP3118Dtype.test_native_padding_2(self)
numpy.tests.test_multiarray.TestPEP3118Dtype.test_native_padding_3(self)
numpy.tests.test_multiarray.TestPEP3118Dtype.test_padding_with_array_inside_struct(self)
numpy.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding(self)
numpy.tests.test_multiarray.TestPEP3118Dtype.test_unnamed_fields(self)
numpy.tests.test_multiarray.TestPickling
numpy.tests.test_multiarray.TestPickling._loads(self,obj)
numpy.tests.test_multiarray.TestPickling.test_correct_protocol5_error_message(self)
numpy.tests.test_multiarray.TestPickling.test_datetime64_byteorder(self)
numpy.tests.test_multiarray.TestPickling.test_f_contiguous_array(self)
numpy.tests.test_multiarray.TestPickling.test_non_contiguous_array(self)
numpy.tests.test_multiarray.TestPickling.test_record_array_with_object_dtype(self)
numpy.tests.test_multiarray.TestPickling.test_roundtrip(self)
numpy.tests.test_multiarray.TestPickling.test_subarray_int_shape(self)
numpy.tests.test_multiarray.TestPickling.test_version0_float32(self)
numpy.tests.test_multiarray.TestPickling.test_version0_int8(self)
numpy.tests.test_multiarray.TestPickling.test_version0_object(self)
numpy.tests.test_multiarray.TestPickling.test_version1_float32(self)
numpy.tests.test_multiarray.TestPickling.test_version1_int8(self)
numpy.tests.test_multiarray.TestPickling.test_version1_object(self)
numpy.tests.test_multiarray.TestPutmask
numpy.tests.test_multiarray.TestPutmask.test_byteorder(self,dtype)
numpy.tests.test_multiarray.TestPutmask.test_ip_types(self)
numpy.tests.test_multiarray.TestPutmask.test_mask_size(self)
numpy.tests.test_multiarray.TestPutmask.test_overlaps(self)
numpy.tests.test_multiarray.TestPutmask.test_record_array(self)
numpy.tests.test_multiarray.TestPutmask.test_writeable(self)
numpy.tests.test_multiarray.TestPutmask.tst_basic(self,x,T,mask,val)
numpy.tests.test_multiarray.TestRecord
numpy.tests.test_multiarray.TestRecord.test_bytes_fields(self)
numpy.tests.test_multiarray.TestRecord.test_empty_structure_creation(self)
numpy.tests.test_multiarray.TestRecord.test_field_names(self)
numpy.tests.test_multiarray.TestRecord.test_field_rename(self)
numpy.tests.test_multiarray.TestRecord.test_fromarrays_unicode(self)
numpy.tests.test_multiarray.TestRecord.test_multifield_indexing_view(self)
numpy.tests.test_multiarray.TestRecord.test_multiple_field_name_occurrence(self)
numpy.tests.test_multiarray.TestRecord.test_multiple_field_name_unicode(self)
numpy.tests.test_multiarray.TestRecord.test_record_hash(self)
numpy.tests.test_multiarray.TestRecord.test_record_no_hash(self)
numpy.tests.test_multiarray.TestRecord.test_unicode_order(self)
numpy.tests.test_multiarray.TestRepeat
numpy.tests.test_multiarray.TestRepeat.setup(self)
numpy.tests.test_multiarray.TestRepeat.test_axis_spec(self)
numpy.tests.test_multiarray.TestRepeat.test_basic(self)
numpy.tests.test_multiarray.TestRepeat.test_broadcast1(self)
numpy.tests.test_multiarray.TestRepeat.test_broadcast2(self)
numpy.tests.test_multiarray.TestResize
numpy.tests.test_multiarray.TestResize.test_0d_shape(self)
numpy.tests.test_multiarray.TestResize.test_basic(self)
numpy.tests.test_multiarray.TestResize.test_check_reference(self)
numpy.tests.test_multiarray.TestResize.test_check_weakref(self)
numpy.tests.test_multiarray.TestResize.test_empty_view(self)
numpy.tests.test_multiarray.TestResize.test_freeform_shape(self)
numpy.tests.test_multiarray.TestResize.test_int_shape(self)
numpy.tests.test_multiarray.TestResize.test_invalid_arguments(self)
numpy.tests.test_multiarray.TestResize.test_none_shape(self)
numpy.tests.test_multiarray.TestResize.test_obj_obj(self)
numpy.tests.test_multiarray.TestResize.test_zeros_appended(self)
numpy.tests.test_multiarray.TestScalarIndexing
numpy.tests.test_multiarray.TestScalarIndexing.setup(self)
numpy.tests.test_multiarray.TestScalarIndexing.test_ellipsis_subscript(self)
numpy.tests.test_multiarray.TestScalarIndexing.test_empty_subscript(self)
numpy.tests.test_multiarray.TestScalarIndexing.test_invalid_newaxis(self)
numpy.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript(self)
numpy.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript_assignment(self)
numpy.tests.test_multiarray.TestScalarIndexing.test_newaxis(self)
numpy.tests.test_multiarray.TestScalarIndexing.test_overlapping_assignment(self)
numpy.tests.test_multiarray.TestStackedNeighborhoodIter
numpy.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_circular(self)
numpy.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_const(self)
numpy.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_mirror(self)
numpy.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_strict_within(self)
numpy.tests.test_multiarray.TestStats
numpy.tests.test_multiarray.TestStats.setup(self)
numpy.tests.test_multiarray.TestStats.test_ddof(self)
numpy.tests.test_multiarray.TestStats.test_ddof_too_big(self)
numpy.tests.test_multiarray.TestStats.test_dtype_from_dtype(self)
numpy.tests.test_multiarray.TestStats.test_dtype_from_input(self)
numpy.tests.test_multiarray.TestStats.test_empty(self)
numpy.tests.test_multiarray.TestStats.test_keepdims(self)
numpy.tests.test_multiarray.TestStats.test_mean_axis_error(self)
numpy.tests.test_multiarray.TestStats.test_mean_float16(self)
numpy.tests.test_multiarray.TestStats.test_mean_values(self)
numpy.tests.test_multiarray.TestStats.test_mean_where(self)
numpy.tests.test_multiarray.TestStats.test_out(self)
numpy.tests.test_multiarray.TestStats.test_python_type(self)
numpy.tests.test_multiarray.TestStats.test_std_values(self)
numpy.tests.test_multiarray.TestStats.test_std_where(self)
numpy.tests.test_multiarray.TestStats.test_subclass(self)
numpy.tests.test_multiarray.TestStats.test_var_axis_error(self)
numpy.tests.test_multiarray.TestStats.test_var_complex_byteorder(self)
numpy.tests.test_multiarray.TestStats.test_var_complex_values(self,complex_dtype,ndec)
numpy.tests.test_multiarray.TestStats.test_var_dimensions(self)
numpy.tests.test_multiarray.TestStats.test_var_values(self)
numpy.tests.test_multiarray.TestStats.test_var_where(self)
numpy.tests.test_multiarray.TestStringCompare
numpy.tests.test_multiarray.TestStringCompare.test_mixed(self)
numpy.tests.test_multiarray.TestStringCompare.test_string(self)
numpy.tests.test_multiarray.TestStringCompare.test_unicode(self)
numpy.tests.test_multiarray.TestStructured
numpy.tests.test_multiarray.TestStructured.test_assignment(self)
numpy.tests.test_multiarray.TestStructured.test_base_attr(self)
numpy.tests.test_multiarray.TestStructured.test_casting(self)
numpy.tests.test_multiarray.TestStructured.test_multiindex_titles(self)
numpy.tests.test_multiarray.TestStructured.test_objview(self)
numpy.tests.test_multiarray.TestStructured.test_scalar_assignment(self)
numpy.tests.test_multiarray.TestStructured.test_setfield(self)
numpy.tests.test_multiarray.TestStructured.test_setfield_object(self)
numpy.tests.test_multiarray.TestStructured.test_structured_asarray_is_view(self)
numpy.tests.test_multiarray.TestStructured.test_structuredscalar_indexing(self)
numpy.tests.test_multiarray.TestStructured.test_subarray_comparison(self)
numpy.tests.test_multiarray.TestStructured.test_subarray_field_access(self)
numpy.tests.test_multiarray.TestStructured.test_zero_width_string(self)
numpy.tests.test_multiarray.TestSubscripting
numpy.tests.test_multiarray.TestSubscripting.test_test_zero_rank(self)
numpy.tests.test_multiarray.TestTake
numpy.tests.test_multiarray.TestTake.test_byteorder(self,dtype)
numpy.tests.test_multiarray.TestTake.test_clip(self)
numpy.tests.test_multiarray.TestTake.test_ip_types(self)
numpy.tests.test_multiarray.TestTake.test_out_overlap(self)
numpy.tests.test_multiarray.TestTake.test_raise(self)
numpy.tests.test_multiarray.TestTake.test_record_array(self)
numpy.tests.test_multiarray.TestTake.test_ret_is_out(self,shape)
numpy.tests.test_multiarray.TestTake.test_wrap(self)
numpy.tests.test_multiarray.TestTake.tst_basic(self,x)
numpy.tests.test_multiarray.TestTemporaryElide
numpy.tests.test_multiarray.TestTemporaryElide.test_elide_broadcast(self)
numpy.tests.test_multiarray.TestTemporaryElide.test_elide_readonly(self)
numpy.tests.test_multiarray.TestTemporaryElide.test_elide_scalar(self)
numpy.tests.test_multiarray.TestTemporaryElide.test_elide_scalar_readonly(self)
numpy.tests.test_multiarray.TestTemporaryElide.test_elide_updateifcopy(self)
numpy.tests.test_multiarray.TestTemporaryElide.test_extension_incref_elide(self)
numpy.tests.test_multiarray.TestTemporaryElide.test_extension_incref_elide_stack(self)
numpy.tests.test_multiarray.TestTemporaryElide.test_temporary_with_cast(self)
numpy.tests.test_multiarray.TestUnicodeArrayNonzero
numpy.tests.test_multiarray.TestUnicodeArrayNonzero.test_all_null_ustring_array_is_falsey(self)
numpy.tests.test_multiarray.TestUnicodeArrayNonzero.test_empty_ustring_array_is_falsey(self)
numpy.tests.test_multiarray.TestUnicodeArrayNonzero.test_null_inside_ustring_array_is_truthy(self)
numpy.tests.test_multiarray.TestUnicodeArrayNonzero.test_whitespace_ustring_array_is_falsey(self)
numpy.tests.test_multiarray.TestUnicodeEncoding
numpy.tests.test_multiarray.TestUnicodeEncoding.test_assign_scalar(self)
numpy.tests.test_multiarray.TestUnicodeEncoding.test_fill_scalar(self)
numpy.tests.test_multiarray.TestUnicodeEncoding.test_round_trip(self)
numpy.tests.test_multiarray.TestVdot
numpy.tests.test_multiarray.TestVdot.test_basic(self)
numpy.tests.test_multiarray.TestVdot.test_vdot_array_order(self)
numpy.tests.test_multiarray.TestVdot.test_vdot_uncontiguous(self)
numpy.tests.test_multiarray.TestView
numpy.tests.test_multiarray.TestView.test_basic(self)
numpy.tests.test_multiarray.TestWarnings
numpy.tests.test_multiarray.TestWarnings.test_complex_warning(self)
numpy.tests.test_multiarray.TestWhere
numpy.tests.test_multiarray.TestWhere.test_basic(self)
numpy.tests.test_multiarray.TestWhere.test_dtype_mix(self)
numpy.tests.test_multiarray.TestWhere.test_empty_result(self)
numpy.tests.test_multiarray.TestWhere.test_error(self)
numpy.tests.test_multiarray.TestWhere.test_exotic(self)
numpy.tests.test_multiarray.TestWhere.test_foreign(self)
numpy.tests.test_multiarray.TestWhere.test_largedim(self)
numpy.tests.test_multiarray.TestWhere.test_ndim(self)
numpy.tests.test_multiarray.TestWhere.test_string(self)
numpy.tests.test_multiarray.TestWritebackIfCopy
numpy.tests.test_multiarray.TestWritebackIfCopy.test_argmax_with_out(self)
numpy.tests.test_multiarray.TestWritebackIfCopy.test_argmin_with_out(self)
numpy.tests.test_multiarray.TestWritebackIfCopy.test_choose_mod_raise(self)
numpy.tests.test_multiarray.TestWritebackIfCopy.test_dealloc_warning(self)
numpy.tests.test_multiarray.TestWritebackIfCopy.test_dot_out(self)
numpy.tests.test_multiarray.TestWritebackIfCopy.test_flatiter__array__(self)
numpy.tests.test_multiarray.TestWritebackIfCopy.test_insert_noncontiguous(self)
numpy.tests.test_multiarray.TestWritebackIfCopy.test_put_noncontiguous(self)
numpy.tests.test_multiarray.TestWritebackIfCopy.test_putmask_noncontiguous(self)
numpy.tests.test_multiarray.TestWritebackIfCopy.test_take_mode_raise(self)
numpy.tests.test_multiarray.TestWritebackIfCopy.test_view_assign(self)
numpy.tests.test_multiarray.TestWritebackIfCopy.test_view_discard_refcount(self)
numpy.tests.test_multiarray.TestZeroRank
numpy.tests.test_multiarray.TestZeroRank.setup(self)
numpy.tests.test_multiarray.TestZeroRank.test_constructor(self)
numpy.tests.test_multiarray.TestZeroRank.test_ellipsis_subscript(self)
numpy.tests.test_multiarray.TestZeroRank.test_ellipsis_subscript_assignment(self)
numpy.tests.test_multiarray.TestZeroRank.test_empty_subscript(self)
numpy.tests.test_multiarray.TestZeroRank.test_empty_subscript_assignment(self)
numpy.tests.test_multiarray.TestZeroRank.test_invalid_newaxis(self)
numpy.tests.test_multiarray.TestZeroRank.test_invalid_subscript(self)
numpy.tests.test_multiarray.TestZeroRank.test_invalid_subscript_assignment(self)
numpy.tests.test_multiarray.TestZeroRank.test_newaxis(self)
numpy.tests.test_multiarray.TestZeroRank.test_output(self)
numpy.tests.test_multiarray.TestZeroRank.test_real_imag(self)
numpy.tests.test_multiarray.TestZeroSizeFlexible
numpy.tests.test_multiarray.TestZeroSizeFlexible._test_sort_partition(self,name,kinds,**kwargs)
numpy.tests.test_multiarray.TestZeroSizeFlexible._zeros(shape,dtype=str)
numpy.tests.test_multiarray.TestZeroSizeFlexible.test_argpartition(self)
numpy.tests.test_multiarray.TestZeroSizeFlexible.test_argsort(self)
numpy.tests.test_multiarray.TestZeroSizeFlexible.test_create(self)
numpy.tests.test_multiarray.TestZeroSizeFlexible.test_dumps(self)
numpy.tests.test_multiarray.TestZeroSizeFlexible.test_partition(self)
numpy.tests.test_multiarray.TestZeroSizeFlexible.test_pickle(self)
numpy.tests.test_multiarray.TestZeroSizeFlexible.test_pickle_with_buffercallback(self)
numpy.tests.test_multiarray.TestZeroSizeFlexible.test_resize(self)
numpy.tests.test_multiarray.TestZeroSizeFlexible.test_sort(self)
numpy.tests.test_multiarray.TestZeroSizeFlexible.test_view(self)
numpy.tests.test_multiarray._aligned_zeros(shape,dtype=float,order='C',align=None)
numpy.tests.test_multiarray._mean(a,**args)
numpy.tests.test_multiarray._std(a,**args)
numpy.tests.test_multiarray._var(a,**args)
numpy.tests.test_multiarray.test_array_interface_empty_shape()
numpy.tests.test_multiarray.test_array_interface_itemsize()
numpy.tests.test_multiarray.test_array_interface_offset()
numpy.tests.test_multiarray.test_array_interface_unicode_typestr()
numpy.tests.test_multiarray.test_equal_override()
numpy.tests.test_multiarray.test_flat_element_deletion()
numpy.tests.test_multiarray.test_getfield()
numpy.tests.test_multiarray.test_interface_no_shape()
numpy.tests.test_multiarray.test_matmul_axes()
numpy.tests.test_multiarray.test_matmul_inplace()
numpy.tests.test_multiarray.test_npymath_complex(fun,npfun,x,y,test_dtype)
numpy.tests.test_multiarray.test_npymath_real()
numpy.tests.test_multiarray.test_orderconverter_with_nonASCII_unicode_ordering()
numpy.tests.test_multiarray.test_scalar_element_deletion()
numpy.tests.test_multiarray.test_uintalignment_and_alignment()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_half.py----------------------------------------
A:numpy.core.tests.test_half.self.all_f16->numpy.arange(65536, dtype=uint16)
A:numpy.core.tests.test_half.self.all_f32->numpy.array(self.all_f16, dtype=float32)
A:numpy.core.tests.test_half.self.all_f64->numpy.array(self.all_f16, dtype=float64)
A:numpy.core.tests.test_half.self.nonan_f16->numpy.concatenate((np.arange(64512, 32767, -1, dtype=uint16), np.arange(0, 31745, 1, dtype=uint16)))
A:numpy.core.tests.test_half.self.nonan_f32->numpy.array(self.nonan_f16, dtype=float32)
A:numpy.core.tests.test_half.self.nonan_f64->numpy.array(self.nonan_f16, dtype=float64)
A:numpy.core.tests.test_half.b->Dummy()
A:numpy.core.tests.test_half.a_ld->numpy.array(self.nonan_f16, dtype=np.longdouble)
A:numpy.core.tests.test_half.i_int->numpy.arange(-2048, 2049)
A:numpy.core.tests.test_half.i_f16->numpy.array(i_int, dtype=float16)
A:numpy.core.tests.test_half.j->numpy.array(i_f16, dtype=int)
A:numpy.core.tests.test_half.expected_dt->numpy.dtype(f'{string_dt}32')
A:numpy.core.tests.test_half.arr->numpy.ones(3, dtype=np.float16).astype(string_dt)
A:numpy.core.tests.test_half.string->numpy.array('3.1416', dtype=string_dt)
A:numpy.core.tests.test_half.max_pattern->numpy.float16(np.finfo(np.float16).max).view(np.uint16)
A:numpy.core.tests.test_half.f16s_patterns->numpy.arange(0, max_pattern + 1, dtype=np.uint16)
A:numpy.core.tests.test_half.f16s_float->numpy.nextafter(f16s_float, float_t(-1e+50))
A:numpy.core.tests.test_half.res_patterns->numpy.nextafter(f16s_float, float_t(-1e+50)).astype(np.float16).view(np.uint16)
A:numpy.core.tests.test_half.cmp_patterns->f16s_patterns[1:-1].copy()
A:numpy.core.tests.test_half.smallest_value->numpy.uint16(1).view(np.float16).astype(float_t)
A:numpy.core.tests.test_half.larger_value->larger_pattern.view(float_t)
A:numpy.core.tests.test_half.nan->float16(np.nan)
A:numpy.core.tests.test_half.a->numpy.ones((1,), dtype=float16)
A:numpy.core.tests.test_half.a_bits->self.finite_f16.view(dtype=uint16)
A:numpy.core.tests.test_half.hinf->numpy.array((np.inf,), dtype=float16)
A:numpy.core.tests.test_half.hnan->numpy.array((np.nan,), dtype=float16)
A:numpy.core.tests.test_half.a_f16->numpy.ones((1,), dtype=float16).view(dtype=float16)
A:numpy.core.tests.test_half.c->numpy.array(b)
A:numpy.core.tests.test_half.x->numpy.minimum(b, c)
A:numpy.core.tests.test_half.a16->numpy.array((1,), dtype=float16)
A:numpy.core.tests.test_half.a32->numpy.array((1,), dtype=float32)
A:numpy.core.tests.test_half.b16->float16(1)
A:numpy.core.tests.test_half.b32->float32(1)
A:numpy.core.tests.test_half.sx16->numpy.array((0.0001,), dtype=float16)
A:numpy.core.tests.test_half.bx16->numpy.array((10000.0,), dtype=float16)
A:numpy.core.tests.test_half.sy16->float16(0.0001)
A:numpy.core.tests.test_half.by16->float16(10000.0)
numpy.core.tests.test_half.TestHalf
numpy.core.tests.test_half.TestHalf.setup(self)
numpy.core.tests.test_half.TestHalf.test_half_array_interface(self)
numpy.core.tests.test_half.TestHalf.test_half_coercion(self)
numpy.core.tests.test_half.TestHalf.test_half_conversion_denormal_round_even(self,float_t,uint_t,bits)
numpy.core.tests.test_half.TestHalf.test_half_conversion_from_string(self,string_dt)
numpy.core.tests.test_half.TestHalf.test_half_conversion_rounding(self,float_t,shift,offset)
numpy.core.tests.test_half.TestHalf.test_half_conversion_to_string(self,string_dt)
numpy.core.tests.test_half.TestHalf.test_half_conversions(self)
numpy.core.tests.test_half.TestHalf.test_half_correctness(self)
numpy.core.tests.test_half.TestHalf.test_half_fpe(self)
numpy.core.tests.test_half.TestHalf.test_half_funcs(self)
numpy.core.tests.test_half.TestHalf.test_half_ordering(self)
numpy.core.tests.test_half.TestHalf.test_half_rounding(self)
numpy.core.tests.test_half.TestHalf.test_half_ufuncs(self)
numpy.core.tests.test_half.TestHalf.test_half_values(self)
numpy.core.tests.test_half.TestHalf.test_nans_infs(self)
numpy.core.tests.test_half.TestHalf.test_spacing_nextafter(self)
numpy.core.tests.test_half.assert_raises_fpe(strmatch,callable,*args,**kwargs)
numpy.tests.test_half.TestHalf
numpy.tests.test_half.TestHalf.setup(self)
numpy.tests.test_half.TestHalf.test_half_array_interface(self)
numpy.tests.test_half.TestHalf.test_half_coercion(self)
numpy.tests.test_half.TestHalf.test_half_conversion_denormal_round_even(self,float_t,uint_t,bits)
numpy.tests.test_half.TestHalf.test_half_conversion_from_string(self,string_dt)
numpy.tests.test_half.TestHalf.test_half_conversion_rounding(self,float_t,shift,offset)
numpy.tests.test_half.TestHalf.test_half_conversion_to_string(self,string_dt)
numpy.tests.test_half.TestHalf.test_half_conversions(self)
numpy.tests.test_half.TestHalf.test_half_correctness(self)
numpy.tests.test_half.TestHalf.test_half_fpe(self)
numpy.tests.test_half.TestHalf.test_half_funcs(self)
numpy.tests.test_half.TestHalf.test_half_ordering(self)
numpy.tests.test_half.TestHalf.test_half_rounding(self)
numpy.tests.test_half.TestHalf.test_half_ufuncs(self)
numpy.tests.test_half.TestHalf.test_half_values(self)
numpy.tests.test_half.TestHalf.test_nans_infs(self)
numpy.tests.test_half.TestHalf.test_spacing_nextafter(self)
numpy.tests.test_half.assert_raises_fpe(strmatch,callable,*args,**kwargs)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_function_base.py----------------------------------------
A:numpy.core.tests.test_function_base.y->linspace(-1, 3, num=8, dtype=int)
A:numpy.core.tests.test_function_base.start->array(1, dtype='O')
A:numpy.core.tests.test_function_base.stop->array(2, dtype='O')
A:numpy.core.tests.test_function_base.t1->array([1.0 + 2j, 1.5 + 2.5j, 2.0 + 3j, 2.5 + 3.5j, 3.0 + 4j])
A:numpy.core.tests.test_function_base.t2->array([0.0 + 1j, 2.5 + 0.75j, 5.0 + 0.5j, 7.5 + 0.25j, 10.0 + 0j])
A:numpy.core.tests.test_function_base.t3->linspace(start, stop[0], 5)
A:numpy.core.tests.test_function_base.t4->stack([linspace(_start, stop[0], 5) for _start in start], axis=1)
A:numpy.core.tests.test_function_base.t5->linspace(start, stop, 5, axis=-1)
A:numpy.core.tests.test_function_base.a->array(0).view(PhysicalQuantity2)
A:numpy.core.tests.test_function_base.b->array(1).view(PhysicalQuantity2)
A:numpy.core.tests.test_function_base.ls->linspace(a, b, 1)
A:numpy.core.tests.test_function_base.lim1->linspace(1 + 2j, 3 + 4j, 5)
A:numpy.core.tests.test_function_base.lim2->linspace(1j, 10, 5)
A:numpy.core.tests.test_function_base.lim3->array([1200, 1000], dtype='uint16')
A:numpy.core.tests.test_function_base.t6->linspace(1200.0, 1000.0, 5)
A:numpy.core.tests.test_function_base.gs->geomspace(a, b, 1)
A:numpy.core.tests.test_function_base.one->Arrayish(array(1, dtype='<i4'))
A:numpy.core.tests.test_function_base.five->Arrayish(array(5, dtype='<i4'))
A:numpy.core.tests.test_function_base.t->array([-1, -1, 0, 0, 1, 1, 2, 3], dtype=int)
numpy.core.tests.test_function_base.PhysicalQuantity(cls,value)
numpy.core.tests.test_function_base.PhysicalQuantity.__add__(self,x)
numpy.core.tests.test_function_base.PhysicalQuantity.__div__(self,x)
numpy.core.tests.test_function_base.PhysicalQuantity.__mul__(self,x)
numpy.core.tests.test_function_base.PhysicalQuantity.__new__(cls,value)
numpy.core.tests.test_function_base.PhysicalQuantity.__rdiv__(self,x)
numpy.core.tests.test_function_base.PhysicalQuantity.__rsub__(self,x)
numpy.core.tests.test_function_base.PhysicalQuantity.__sub__(self,x)
numpy.core.tests.test_function_base.PhysicalQuantity2(ndarray)
numpy.core.tests.test_function_base.TestGeomspace
numpy.core.tests.test_function_base.TestGeomspace.test_basic(self)
numpy.core.tests.test_function_base.TestGeomspace.test_boundaries_match_start_and_stop_exactly(self)
numpy.core.tests.test_function_base.TestGeomspace.test_bounds(self)
numpy.core.tests.test_function_base.TestGeomspace.test_complex(self)
numpy.core.tests.test_function_base.TestGeomspace.test_dtype(self)
numpy.core.tests.test_function_base.TestGeomspace.test_nan_interior(self)
numpy.core.tests.test_function_base.TestGeomspace.test_physical_quantities(self)
numpy.core.tests.test_function_base.TestGeomspace.test_start_stop_array(self)
numpy.core.tests.test_function_base.TestGeomspace.test_start_stop_array_scalar(self)
numpy.core.tests.test_function_base.TestGeomspace.test_subclass(self)
numpy.core.tests.test_function_base.TestLinspace
numpy.core.tests.test_function_base.TestLinspace.test_array_interface(self)
numpy.core.tests.test_function_base.TestLinspace.test_basic(self)
numpy.core.tests.test_function_base.TestLinspace.test_complex(self)
numpy.core.tests.test_function_base.TestLinspace.test_corner(self)
numpy.core.tests.test_function_base.TestLinspace.test_denormal_numbers(self)
numpy.core.tests.test_function_base.TestLinspace.test_dtype(self)
numpy.core.tests.test_function_base.TestLinspace.test_equivalent_to_arange(self)
numpy.core.tests.test_function_base.TestLinspace.test_object(self)
numpy.core.tests.test_function_base.TestLinspace.test_physical_quantities(self)
numpy.core.tests.test_function_base.TestLinspace.test_retstep(self)
numpy.core.tests.test_function_base.TestLinspace.test_round_negative(self)
numpy.core.tests.test_function_base.TestLinspace.test_start_stop_array(self)
numpy.core.tests.test_function_base.TestLinspace.test_start_stop_array_scalar(self)
numpy.core.tests.test_function_base.TestLinspace.test_subclass(self)
numpy.core.tests.test_function_base.TestLinspace.test_type(self)
numpy.core.tests.test_function_base.TestLogspace
numpy.core.tests.test_function_base.TestLogspace.test_basic(self)
numpy.core.tests.test_function_base.TestLogspace.test_dtype(self)
numpy.core.tests.test_function_base.TestLogspace.test_physical_quantities(self)
numpy.core.tests.test_function_base.TestLogspace.test_start_stop_array(self)
numpy.core.tests.test_function_base.TestLogspace.test_subclass(self)
numpy.tests.test_PhysicalQuantity(cls,value)
numpy.tests.test_PhysicalQuantity.__add__(self,x)
numpy.tests.test_PhysicalQuantity.__div__(self,x)
numpy.tests.test_PhysicalQuantity.__mul__(self,x)
numpy.tests.test_PhysicalQuantity.__rdiv__(self,x)
numpy.tests.test_PhysicalQuantity.__rsub__(self,x)
numpy.tests.test_PhysicalQuantity.__sub__(self,x)
numpy.tests.test_PhysicalQuantity2(ndarray)
numpy.tests.test_TestGeomspace
numpy.tests.test_TestGeomspace.test_basic(self)
numpy.tests.test_TestGeomspace.test_boundaries_match_start_and_stop_exactly(self)
numpy.tests.test_TestGeomspace.test_bounds(self)
numpy.tests.test_TestGeomspace.test_complex(self)
numpy.tests.test_TestGeomspace.test_dtype(self)
numpy.tests.test_TestGeomspace.test_nan_interior(self)
numpy.tests.test_TestGeomspace.test_physical_quantities(self)
numpy.tests.test_TestGeomspace.test_start_stop_array(self)
numpy.tests.test_TestGeomspace.test_start_stop_array_scalar(self)
numpy.tests.test_TestGeomspace.test_subclass(self)
numpy.tests.test_TestLinspace
numpy.tests.test_TestLinspace.test_array_interface(self)
numpy.tests.test_TestLinspace.test_basic(self)
numpy.tests.test_TestLinspace.test_complex(self)
numpy.tests.test_TestLinspace.test_corner(self)
numpy.tests.test_TestLinspace.test_denormal_numbers(self)
numpy.tests.test_TestLinspace.test_dtype(self)
numpy.tests.test_TestLinspace.test_equivalent_to_arange(self)
numpy.tests.test_TestLinspace.test_object(self)
numpy.tests.test_TestLinspace.test_physical_quantities(self)
numpy.tests.test_TestLinspace.test_retstep(self)
numpy.tests.test_TestLinspace.test_round_negative(self)
numpy.tests.test_TestLinspace.test_start_stop_array(self)
numpy.tests.test_TestLinspace.test_start_stop_array_scalar(self)
numpy.tests.test_TestLinspace.test_subclass(self)
numpy.tests.test_TestLinspace.test_type(self)
numpy.tests.test_TestLogspace
numpy.tests.test_TestLogspace.test_basic(self)
numpy.tests.test_TestLogspace.test_dtype(self)
numpy.tests.test_TestLogspace.test_physical_quantities(self)
numpy.tests.test_TestLogspace.test_start_stop_array(self)
numpy.tests.test_TestLogspace.test_subclass(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_conversion_utils.py----------------------------------------
A:numpy.core.tests.test_conversion_utils.pattern->'\\(got {}\\)'.format(re.escape(repr(val)))
numpy.core.tests.test_conversion_utils.StringConverterTestCase
numpy.core.tests.test_conversion_utils.StringConverterTestCase._check(self,val,expected)
numpy.core.tests.test_conversion_utils.StringConverterTestCase._check_conv_assert_warn(self,val,expected)
numpy.core.tests.test_conversion_utils.StringConverterTestCase._check_value_error(self,val)
numpy.core.tests.test_conversion_utils.StringConverterTestCase.test_wrong_type(self)
numpy.core.tests.test_conversion_utils.StringConverterTestCase.test_wrong_value(self)
numpy.core.tests.test_conversion_utils.TestByteorderConverter(StringConverterTestCase)
numpy.core.tests.test_conversion_utils.TestByteorderConverter.test_valid(self)
numpy.core.tests.test_conversion_utils.TestCastingConverter(StringConverterTestCase)
numpy.core.tests.test_conversion_utils.TestCastingConverter.test_valid(self)
numpy.core.tests.test_conversion_utils.TestClipmodeConverter(StringConverterTestCase)
numpy.core.tests.test_conversion_utils.TestClipmodeConverter.test_valid(self)
numpy.core.tests.test_conversion_utils.TestIntpConverter
numpy.core.tests.test_conversion_utils.TestIntpConverter.test_basic(self)
numpy.core.tests.test_conversion_utils.TestIntpConverter.test_float(self)
numpy.core.tests.test_conversion_utils.TestIntpConverter.test_none(self)
numpy.core.tests.test_conversion_utils.TestIntpConverter.test_too_large(self)
numpy.core.tests.test_conversion_utils.TestIntpConverter.test_too_many_dims(self)
numpy.core.tests.test_conversion_utils.TestOrderConverter(StringConverterTestCase)
numpy.core.tests.test_conversion_utils.TestOrderConverter.test_flatten_invalid_order(self)
numpy.core.tests.test_conversion_utils.TestOrderConverter.test_valid(self)
numpy.core.tests.test_conversion_utils.TestSearchsideConverter(StringConverterTestCase)
numpy.core.tests.test_conversion_utils.TestSearchsideConverter.test_valid(self)
numpy.core.tests.test_conversion_utils.TestSelectkindConverter(StringConverterTestCase)
numpy.core.tests.test_conversion_utils.TestSelectkindConverter.test_valid(self)
numpy.core.tests.test_conversion_utils.TestSortkindConverter(StringConverterTestCase)
numpy.core.tests.test_conversion_utils.TestSortkindConverter.test_valid(self)
numpy.tests.test_conversion_utils.StringConverterTestCase
numpy.tests.test_conversion_utils.StringConverterTestCase._check(self,val,expected)
numpy.tests.test_conversion_utils.StringConverterTestCase._check_conv_assert_warn(self,val,expected)
numpy.tests.test_conversion_utils.StringConverterTestCase._check_value_error(self,val)
numpy.tests.test_conversion_utils.StringConverterTestCase.test_wrong_type(self)
numpy.tests.test_conversion_utils.StringConverterTestCase.test_wrong_value(self)
numpy.tests.test_conversion_utils.TestByteorderConverter(StringConverterTestCase)
numpy.tests.test_conversion_utils.TestByteorderConverter.test_valid(self)
numpy.tests.test_conversion_utils.TestCastingConverter(StringConverterTestCase)
numpy.tests.test_conversion_utils.TestCastingConverter.test_valid(self)
numpy.tests.test_conversion_utils.TestClipmodeConverter(StringConverterTestCase)
numpy.tests.test_conversion_utils.TestClipmodeConverter.test_valid(self)
numpy.tests.test_conversion_utils.TestIntpConverter
numpy.tests.test_conversion_utils.TestIntpConverter.test_basic(self)
numpy.tests.test_conversion_utils.TestIntpConverter.test_float(self)
numpy.tests.test_conversion_utils.TestIntpConverter.test_none(self)
numpy.tests.test_conversion_utils.TestIntpConverter.test_too_large(self)
numpy.tests.test_conversion_utils.TestIntpConverter.test_too_many_dims(self)
numpy.tests.test_conversion_utils.TestOrderConverter(StringConverterTestCase)
numpy.tests.test_conversion_utils.TestOrderConverter.test_flatten_invalid_order(self)
numpy.tests.test_conversion_utils.TestOrderConverter.test_valid(self)
numpy.tests.test_conversion_utils.TestSearchsideConverter(StringConverterTestCase)
numpy.tests.test_conversion_utils.TestSearchsideConverter.test_valid(self)
numpy.tests.test_conversion_utils.TestSelectkindConverter(StringConverterTestCase)
numpy.tests.test_conversion_utils.TestSelectkindConverter.test_valid(self)
numpy.tests.test_conversion_utils.TestSortkindConverter(StringConverterTestCase)
numpy.tests.test_conversion_utils.TestSortkindConverter.test_valid(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_nditer.py----------------------------------------
A:numpy.core.tests.test_nditer.a->numpy.arange(6, dtype='f4')
A:numpy.core.tests.test_nditer.dt->numpy.dtype('f4')
A:numpy.core.tests.test_nditer.rc_a->sys.getrefcount(a)
A:numpy.core.tests.test_nditer.rc_dt->sys.getrefcount(dt)
A:numpy.core.tests.test_nditer.it->numpy.nditer((arr1, arr2), op_dtypes=['d', 'i4'], casting='unsafe', flags=['reduce_ok', 'buffered'], op_flags=[['readonly'], ['readwrite']])
A:numpy.core.tests.test_nditer.rc2_a->sys.getrefcount(a)
A:numpy.core.tests.test_nditer.rc2_dt->sys.getrefcount(dt)
A:numpy.core.tests.test_nditer.it2->nditer([a, None], ['reduce_ok', 'external_loop', 'buffered', 'delay_bufalloc'], [['readonly'], ['readwrite', 'allocate']], op_axes=[None, [0, -1, 1]], buffersize=10)
A:numpy.core.tests.test_nditer.dirs_index[bit]->slice(None, None, -1)
A:numpy.core.tests.test_nditer.dirs_index->tuple(dirs_index)
A:numpy.core.tests.test_nditer.i->nditer(a, ['buffered', 'refs_ok'], ['readonly'], casting='unsafe', op_dtypes=sdt)
A:numpy.core.tests.test_nditer.start_count->sys.getrefcount(index)
A:numpy.core.tests.test_nditer.end_count->sys.getrefcount(index)
A:numpy.core.tests.test_nditer.size->numpy.prod(shape)
A:numpy.core.tests.test_nditer.a3d->arange(24).reshape(2, 3, 4)
A:numpy.core.tests.test_nditer.msg->str(e)
A:numpy.core.tests.test_nditer.au->numpy.arange(6, dtype='f4').byteswap().newbyteorder()
A:numpy.core.tests.test_nditer.a[:]->numpy.arange(16, dtype='i4')
A:numpy.core.tests.test_nditer.rc->sys.getrefcount(a[0])
A:numpy.core.tests.test_nditer.x->numpy.ones((7, 13, 8), np.int8)[4:6, 1:11:6, 1:5].transpose(1, 2, 0)
A:numpy.core.tests.test_nditer.b->numpy.zeros((3,))
A:numpy.core.tests.test_nditer.j->nditer(a, ['buffered', 'refs_ok'], ['readonly'], casting='unsafe', op_dtypes=sdt).copy()
A:numpy.core.tests.test_nditer.arr->numpy.full(int(np.BUFSIZE * 2.5), value).astype(in_dtype)
A:numpy.core.tests.test_nditer.expected->"\n    ------ BEGIN ITERATOR DUMP ------\n    | Iterator Address:\n    | ItFlags: BUFFER REDUCE REUSE_REDUCE_LOOPS\n    | NDim: 2\n    | NOp: 2\n    | IterSize: 50\n    | IterStart: 0\n    | IterEnd: 50\n    | IterIndex: 0\n    | Iterator SizeOf:\n    | BufferData SizeOf:\n    | AxisData SizeOf:\n    |\n    | Perm: 0 1\n    | DTypes:\n    | DTypes: dtype('float64') dtype('int32')\n    | InitDataPtrs:\n    | BaseOffsets: 0 0\n    | Operands:\n    | Operand DTypes: dtype('int64') dtype('float64')\n    | OpItFlags:\n    |   Flags[0]: READ CAST ALIGNED\n    |   Flags[1]: READ WRITE CAST ALIGNED REDUCE\n    |\n    | BufferData:\n    |   BufferSize: 50\n    |   Size: 5\n    |   BufIterEnd: 5\n    |   REDUCE Pos: 0\n    |   REDUCE OuterSize: 10\n    |   REDUCE OuterDim: 1\n    |   Strides: 8 4\n    |   Ptrs:\n    |   REDUCE Outer Strides: 40 0\n    |   REDUCE Outer Ptrs:\n    |   ReadTransferFn:\n    |   ReadTransferData:\n    |   WriteTransferFn:\n    |   WriteTransferData:\n    |   Buffers:\n    |\n    | AxisData[0]:\n    |   Shape: 5\n    |   Index: 0\n    |   Strides: 16 8\n    |   Ptrs:\n    | AxisData[1]:\n    |   Shape: 10\n    |   Index: 0\n    |   Strides: 80 0\n    |   Ptrs:\n    ------- END ITERATOR DUMP -------\n    ".strip().splitlines()
A:numpy.core.tests.test_nditer.it_copy->numpy.nditer((arr1, arr2), op_dtypes=['d', 'i4'], casting='unsafe', flags=['reduce_ok', 'buffered'], op_flags=[['readonly'], ['readwrite']]).copy()
A:numpy.core.tests.test_nditer.res->res.strip().splitlines().strip().splitlines()
A:numpy.core.tests.test_nditer.res_copy->next(it_copy)
A:numpy.core.tests.test_nditer.in_dtype->numpy.dtype([('a', np.dtype('i,')), ('b', np.dtype('>i,<i,>d,S17,>d,(3)f,O,i1'))])
A:numpy.core.tests.test_nditer.out_dtype->numpy.dtype([('a', np.dtype('O')), ('b', np.dtype('>i,>i,S17,>d,>U3,(3)d,i1,O'))])
A:numpy.core.tests.test_nditer.res1->next(it)
A:numpy.core.tests.test_nditer.res2->next(it_copy)
A:numpy.core.tests.test_nditer.a_fort->numpy.arange(6, dtype='f4').ravel(order='F')
A:numpy.core.tests.test_nditer.val->numpy.concatenate((val, x))
A:numpy.core.tests.test_nditer.simple_arr->numpy.array([1, 2], dtype='i,i')
A:numpy.core.tests.test_nditer.buf->next(it)
A:numpy.core.tests.test_nditer.code->textwrap.dedent('\n        import numpy as np\n    \n        it = np.nditer((np.array(1, dtype="i"),), op_dtypes=["S1"],\n                       op_flags=["writeonly"], casting="unsafe", flags=["buffered"])\n        buf = next(it)\n        buf[...] = "a"\n        del buf, it  # Flushing only happens during deallocate right now.\n        ')
A:numpy.core.tests.test_nditer.a['a']->numpy.arange(6 * 2 * 3).reshape(6, 2, 3)
A:numpy.core.tests.test_nditer.a['a'][:, 0, 0]->numpy.arange(6)
A:numpy.core.tests.test_nditer.a['a'][:, 0, 0, 0]->numpy.arange(6)
A:numpy.core.tests.test_nditer.nditer2->numpy.nditer([arr.copy(), None], op_axes=op_axes, flags=flags, op_flags=op_flags, op_dtypes=op_dtypes)
A:numpy.core.tests.test_nditer.nditer1->numpy.nditer([arr, None], op_axes=op_axes, flags=flags, op_flags=op_flags, buffersize=bufsize, op_dtypes=op_dtypes)
A:numpy.core.tests.test_nditer.c->numpy.arange(12).reshape(3, 4)
A:numpy.core.tests.test_nditer.(i, j)->numpy.nested_iters(a, [[0], [1]], flags=['buffered'], op_flags=['readwrite'], casting='same_kind', op_dtypes='f8')
A:numpy.core.tests.test_nditer.(i, j, k)->numpy.nested_iters(a, [[2, 0], [], [1]])
A:numpy.core.tests.test_nditer.it1->nditer([a, None], ['reduce_ok', 'external_loop'], [['readonly'], ['readwrite', 'allocate']], op_axes=[None, [0, -1, 1]])
A:numpy.core.tests.test_nditer.x[...]->numpy.arange(x.size).reshape(x.shape)
A:numpy.core.tests.test_nditer.y_base->numpy.arange(4 * 4, dtype=np.int8).reshape(4, 4)
A:numpy.core.tests.test_nditer.y_base_copy->numpy.arange(4 * 4, dtype=np.int8).reshape(4, 4).copy()
A:numpy.core.tests.test_nditer.m->numpy.array([[True, True, False], [False, True, False]])
A:numpy.core.tests.test_nditer.m2->numpy.array([True, True, False])
A:numpy.core.tests.test_nditer.m3->numpy.array([0, 1, 1], dtype='u1')
A:numpy.core.tests.test_nditer.mbad1->numpy.array([0, 1, 1], dtype='i1')
A:numpy.core.tests.test_nditer.mbad2->numpy.array([0, 1, 1], dtype='f4')
A:numpy.core.tests.test_nditer.msk->numpy.empty(shape, dtype=bool)
A:numpy.core.tests.test_nditer.original->numpy.full(int(np.BUFSIZE * 2.5), value).astype(in_dtype).copy()
A:numpy.core.tests.test_nditer.mask->numpy.random.randint(0, 2, size=10000).astype(bool)
A:numpy.core.tests.test_nditer.singleton->object()
A:numpy.core.tests.test_nditer.count->sys.getrefcount(value)
A:numpy.core.tests.test_nditer.vals->next(i)
A:numpy.core.tests.test_nditer.oarr->numpy.full(int(np.BUFSIZE * 2.5), value).astype(in_dtype).astype(object)
A:numpy.core.tests.test_nditer.out->numpy.ones(8000, dtype=np.intp)
A:numpy.core.tests.test_nditer.arrays->tuple(arrays)
A:numpy.core.tests.test_nditer.z->add_context(range(5), range(5))
A:numpy.core.tests.test_nditer.arr2->numpy.arange(5.0)
numpy.core.tests.test_nditer.TestIterNested
numpy.core.tests.test_nditer.TestIterNested.test_0d(self)
numpy.core.tests.test_nditer.TestIterNested.test_basic(self)
numpy.core.tests.test_nditer.TestIterNested.test_broadcast(self)
numpy.core.tests.test_nditer.TestIterNested.test_dtype_buffered(self)
numpy.core.tests.test_nditer.TestIterNested.test_dtype_copy(self)
numpy.core.tests.test_nditer.TestIterNested.test_flip_axes(self)
numpy.core.tests.test_nditer.TestIterNested.test_iter_nested_iters_dtype_buffered(self)
numpy.core.tests.test_nditer.TestIterNested.test_reorder(self)
numpy.core.tests.test_nditer._is_buffered(iterator)
numpy.core.tests.test_nditer.iter_indices(i)
numpy.core.tests.test_nditer.iter_iterindices(i)
numpy.core.tests.test_nditer.iter_multi_index(i)
numpy.core.tests.test_nditer.test_0d_iter()
numpy.core.tests.test_nditer.test_buffered_cast_error_paths()
numpy.core.tests.test_nditer.test_buffered_cast_error_paths_unraisable()
numpy.core.tests.test_nditer.test_close_equivalent()
numpy.core.tests.test_nditer.test_close_parameters()
numpy.core.tests.test_nditer.test_close_raises()
numpy.core.tests.test_nditer.test_debug_print(capfd)
numpy.core.tests.test_nditer.test_iter_allocate_output_buffered_readwrite()
numpy.core.tests.test_nditer.test_iter_allocate_output_errors()
numpy.core.tests.test_nditer.test_iter_allocate_output_itorder()
numpy.core.tests.test_nditer.test_iter_allocate_output_opaxes()
numpy.core.tests.test_nditer.test_iter_allocate_output_simple()
numpy.core.tests.test_nditer.test_iter_allocate_output_subtype()
numpy.core.tests.test_nditer.test_iter_allocate_output_types_byte_order()
numpy.core.tests.test_nditer.test_iter_allocate_output_types_promotion()
numpy.core.tests.test_nditer.test_iter_allocate_output_types_scalar()
numpy.core.tests.test_nditer.test_iter_allocated_array_dtypes()
numpy.core.tests.test_nditer.test_iter_array_cast()
numpy.core.tests.test_nditer.test_iter_array_cast_errors()
numpy.core.tests.test_nditer.test_iter_assign_mapping()
numpy.core.tests.test_nditer.test_iter_best_order()
numpy.core.tests.test_nditer.test_iter_best_order_c_index_1d()
numpy.core.tests.test_nditer.test_iter_best_order_c_index_2d()
numpy.core.tests.test_nditer.test_iter_best_order_c_index_3d()
numpy.core.tests.test_nditer.test_iter_best_order_f_index_1d()
numpy.core.tests.test_nditer.test_iter_best_order_f_index_2d()
numpy.core.tests.test_nditer.test_iter_best_order_f_index_3d()
numpy.core.tests.test_nditer.test_iter_best_order_multi_index_1d()
numpy.core.tests.test_nditer.test_iter_best_order_multi_index_2d()
numpy.core.tests.test_nditer.test_iter_best_order_multi_index_3d()
numpy.core.tests.test_nditer.test_iter_broadcasting()
numpy.core.tests.test_nditer.test_iter_broadcasting_errors()
numpy.core.tests.test_nditer.test_iter_buffered_cast_byteswapped()
numpy.core.tests.test_nditer.test_iter_buffered_cast_byteswapped_complex()
numpy.core.tests.test_nditer.test_iter_buffered_cast_simple()
numpy.core.tests.test_nditer.test_iter_buffered_cast_structured_type()
numpy.core.tests.test_nditer.test_iter_buffered_cast_structured_type_failure_with_cleanup()
numpy.core.tests.test_nditer.test_iter_buffered_cast_subarray()
numpy.core.tests.test_nditer.test_iter_buffered_reduce_reuse()
numpy.core.tests.test_nditer.test_iter_buffering()
numpy.core.tests.test_nditer.test_iter_buffering_badwriteback()
numpy.core.tests.test_nditer.test_iter_buffering_delayed_alloc()
numpy.core.tests.test_nditer.test_iter_buffering_growinner()
numpy.core.tests.test_nditer.test_iter_buffering_reduction()
numpy.core.tests.test_nditer.test_iter_buffering_reduction_reuse_reduce_loops()
numpy.core.tests.test_nditer.test_iter_buffering_string()
numpy.core.tests.test_nditer.test_iter_c_or_f_order()
numpy.core.tests.test_nditer.test_iter_c_order()
numpy.core.tests.test_nditer.test_iter_common_dtype()
numpy.core.tests.test_nditer.test_iter_copy()
numpy.core.tests.test_nditer.test_iter_copy_casts(dtype,loop_dtype)
numpy.core.tests.test_nditer.test_iter_copy_casts_structured()
numpy.core.tests.test_nditer.test_iter_copy_if_overlap()
numpy.core.tests.test_nditer.test_iter_dim_coalescing()
numpy.core.tests.test_nditer.test_iter_element_deletion()
numpy.core.tests.test_nditer.test_iter_f_order()
numpy.core.tests.test_nditer.test_iter_flags_errors()
numpy.core.tests.test_nditer.test_iter_iterindex()
numpy.core.tests.test_nditer.test_iter_iterrange()
numpy.core.tests.test_nditer.test_iter_itershape()
numpy.core.tests.test_nditer.test_iter_nbo_align_contig()
numpy.core.tests.test_nditer.test_iter_no_broadcast()
numpy.core.tests.test_nditer.test_iter_no_inner_dim_coalescing()
numpy.core.tests.test_nditer.test_iter_no_inner_full_coalesce()
numpy.core.tests.test_nditer.test_iter_non_writable_attribute_deletion()
numpy.core.tests.test_nditer.test_iter_object_arrays_basic()
numpy.core.tests.test_nditer.test_iter_object_arrays_conversions()
numpy.core.tests.test_nditer.test_iter_op_axes()
numpy.core.tests.test_nditer.test_iter_op_axes_errors()
numpy.core.tests.test_nditer.test_iter_reduction()
numpy.core.tests.test_nditer.test_iter_reduction_error()
numpy.core.tests.test_nditer.test_iter_refcount()
numpy.core.tests.test_nditer.test_iter_remove_axis()
numpy.core.tests.test_nditer.test_iter_remove_multi_index_inner_loop()
numpy.core.tests.test_nditer.test_iter_scalar_cast()
numpy.core.tests.test_nditer.test_iter_scalar_cast_errors()
numpy.core.tests.test_nditer.test_iter_slice()
numpy.core.tests.test_nditer.test_iter_too_large()
numpy.core.tests.test_nditer.test_iter_too_large_with_multiindex()
numpy.core.tests.test_nditer.test_iter_writable_attribute_deletion()
numpy.core.tests.test_nditer.test_iter_write_buffering()
numpy.core.tests.test_nditer.test_iter_writemasked(a)
numpy.core.tests.test_nditer.test_iter_writemasked_badinput()
numpy.core.tests.test_nditer.test_iter_writemasked_decref()
numpy.core.tests.test_nditer.test_nditer_multi_index_set()
numpy.core.tests.test_nditer.test_nditer_multi_index_set_refcount()
numpy.core.tests.test_nditer.test_object_iter_cleanup()
numpy.core.tests.test_nditer.test_object_iter_cleanup_large_reduce(arr)
numpy.core.tests.test_nditer.test_object_iter_cleanup_reduce()
numpy.core.tests.test_nditer.test_partial_iteration_cleanup(in_dtype,buf_dtype,steps)
numpy.core.tests.test_nditer.test_partial_iteration_error(in_dtype,buf_dtype)
numpy.core.tests.test_nditer.test_warn_noclose()
numpy.core.tests.test_nditer.test_writebacks()
numpy.tests.test_nditer.TestIterNested
numpy.tests.test_nditer.TestIterNested.test_0d(self)
numpy.tests.test_nditer.TestIterNested.test_basic(self)
numpy.tests.test_nditer.TestIterNested.test_broadcast(self)
numpy.tests.test_nditer.TestIterNested.test_dtype_buffered(self)
numpy.tests.test_nditer.TestIterNested.test_dtype_copy(self)
numpy.tests.test_nditer.TestIterNested.test_flip_axes(self)
numpy.tests.test_nditer.TestIterNested.test_iter_nested_iters_dtype_buffered(self)
numpy.tests.test_nditer.TestIterNested.test_reorder(self)
numpy.tests.test_nditer._is_buffered(iterator)
numpy.tests.test_nditer.iter_indices(i)
numpy.tests.test_nditer.iter_iterindices(i)
numpy.tests.test_nditer.iter_multi_index(i)
numpy.tests.test_nditer.test_0d_iter()
numpy.tests.test_nditer.test_buffered_cast_error_paths()
numpy.tests.test_nditer.test_buffered_cast_error_paths_unraisable()
numpy.tests.test_nditer.test_close_equivalent()
numpy.tests.test_nditer.test_close_parameters()
numpy.tests.test_nditer.test_close_raises()
numpy.tests.test_nditer.test_debug_print(capfd)
numpy.tests.test_nditer.test_iter_allocate_output_buffered_readwrite()
numpy.tests.test_nditer.test_iter_allocate_output_errors()
numpy.tests.test_nditer.test_iter_allocate_output_itorder()
numpy.tests.test_nditer.test_iter_allocate_output_opaxes()
numpy.tests.test_nditer.test_iter_allocate_output_simple()
numpy.tests.test_nditer.test_iter_allocate_output_subtype()
numpy.tests.test_nditer.test_iter_allocate_output_types_byte_order()
numpy.tests.test_nditer.test_iter_allocate_output_types_promotion()
numpy.tests.test_nditer.test_iter_allocate_output_types_scalar()
numpy.tests.test_nditer.test_iter_allocated_array_dtypes()
numpy.tests.test_nditer.test_iter_array_cast()
numpy.tests.test_nditer.test_iter_array_cast_errors()
numpy.tests.test_nditer.test_iter_assign_mapping()
numpy.tests.test_nditer.test_iter_best_order()
numpy.tests.test_nditer.test_iter_best_order_c_index_1d()
numpy.tests.test_nditer.test_iter_best_order_c_index_2d()
numpy.tests.test_nditer.test_iter_best_order_c_index_3d()
numpy.tests.test_nditer.test_iter_best_order_f_index_1d()
numpy.tests.test_nditer.test_iter_best_order_f_index_2d()
numpy.tests.test_nditer.test_iter_best_order_f_index_3d()
numpy.tests.test_nditer.test_iter_best_order_multi_index_1d()
numpy.tests.test_nditer.test_iter_best_order_multi_index_2d()
numpy.tests.test_nditer.test_iter_best_order_multi_index_3d()
numpy.tests.test_nditer.test_iter_broadcasting()
numpy.tests.test_nditer.test_iter_broadcasting_errors()
numpy.tests.test_nditer.test_iter_buffered_cast_byteswapped()
numpy.tests.test_nditer.test_iter_buffered_cast_byteswapped_complex()
numpy.tests.test_nditer.test_iter_buffered_cast_simple()
numpy.tests.test_nditer.test_iter_buffered_cast_structured_type()
numpy.tests.test_nditer.test_iter_buffered_cast_structured_type_failure_with_cleanup()
numpy.tests.test_nditer.test_iter_buffered_cast_subarray()
numpy.tests.test_nditer.test_iter_buffered_reduce_reuse()
numpy.tests.test_nditer.test_iter_buffering()
numpy.tests.test_nditer.test_iter_buffering_badwriteback()
numpy.tests.test_nditer.test_iter_buffering_delayed_alloc()
numpy.tests.test_nditer.test_iter_buffering_growinner()
numpy.tests.test_nditer.test_iter_buffering_reduction()
numpy.tests.test_nditer.test_iter_buffering_reduction_reuse_reduce_loops()
numpy.tests.test_nditer.test_iter_buffering_string()
numpy.tests.test_nditer.test_iter_c_or_f_order()
numpy.tests.test_nditer.test_iter_c_order()
numpy.tests.test_nditer.test_iter_common_dtype()
numpy.tests.test_nditer.test_iter_copy()
numpy.tests.test_nditer.test_iter_copy_casts(dtype,loop_dtype)
numpy.tests.test_nditer.test_iter_copy_casts_structured()
numpy.tests.test_nditer.test_iter_copy_if_overlap()
numpy.tests.test_nditer.test_iter_dim_coalescing()
numpy.tests.test_nditer.test_iter_element_deletion()
numpy.tests.test_nditer.test_iter_f_order()
numpy.tests.test_nditer.test_iter_flags_errors()
numpy.tests.test_nditer.test_iter_iterindex()
numpy.tests.test_nditer.test_iter_iterrange()
numpy.tests.test_nditer.test_iter_itershape()
numpy.tests.test_nditer.test_iter_nbo_align_contig()
numpy.tests.test_nditer.test_iter_no_broadcast()
numpy.tests.test_nditer.test_iter_no_inner_dim_coalescing()
numpy.tests.test_nditer.test_iter_no_inner_full_coalesce()
numpy.tests.test_nditer.test_iter_non_writable_attribute_deletion()
numpy.tests.test_nditer.test_iter_object_arrays_basic()
numpy.tests.test_nditer.test_iter_object_arrays_conversions()
numpy.tests.test_nditer.test_iter_op_axes()
numpy.tests.test_nditer.test_iter_op_axes_errors()
numpy.tests.test_nditer.test_iter_reduction()
numpy.tests.test_nditer.test_iter_reduction_error()
numpy.tests.test_nditer.test_iter_refcount()
numpy.tests.test_nditer.test_iter_remove_axis()
numpy.tests.test_nditer.test_iter_remove_multi_index_inner_loop()
numpy.tests.test_nditer.test_iter_scalar_cast()
numpy.tests.test_nditer.test_iter_scalar_cast_errors()
numpy.tests.test_nditer.test_iter_slice()
numpy.tests.test_nditer.test_iter_too_large()
numpy.tests.test_nditer.test_iter_too_large_with_multiindex()
numpy.tests.test_nditer.test_iter_writable_attribute_deletion()
numpy.tests.test_nditer.test_iter_write_buffering()
numpy.tests.test_nditer.test_iter_writemasked(a)
numpy.tests.test_nditer.test_iter_writemasked_badinput()
numpy.tests.test_nditer.test_iter_writemasked_decref()
numpy.tests.test_nditer.test_nditer_multi_index_set()
numpy.tests.test_nditer.test_nditer_multi_index_set_refcount()
numpy.tests.test_nditer.test_object_iter_cleanup()
numpy.tests.test_nditer.test_object_iter_cleanup_large_reduce(arr)
numpy.tests.test_nditer.test_object_iter_cleanup_reduce()
numpy.tests.test_nditer.test_partial_iteration_cleanup(in_dtype,buf_dtype,steps)
numpy.tests.test_nditer.test_partial_iteration_error(in_dtype,buf_dtype)
numpy.tests.test_nditer.test_warn_noclose()
numpy.tests.test_nditer.test_writebacks()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_casting_unittests.py----------------------------------------
A:numpy.core.tests.test_casting_unittests.simple_dtypes->simple_dtypes.replace('l', '').replace('L', '').replace('l', '').replace('L', '')
A:numpy.core.tests.test_casting_unittests.dt->dt.newbyteorder().newbyteorder()
A:numpy.core.tests.test_casting_unittests.table->textwrap.dedent('\n        X ? b h i l q B H I L Q e f d g F D G S U V O M m\n        ? # = = = = = = = = = = = = = = = = = = = = = . =\n        b . # = = = = . . . . . = = = = = = = = = = = . =\n        h . ~ # = = = . . . . . ~ = = = = = = = = = = . =\n        i . ~ ~ # = = . . . . . ~ ~ = = ~ = = = = = = . =\n        l . ~ ~ ~ # # . . . . . ~ ~ = = ~ = = = = = = . =\n        q . ~ ~ ~ # # . . . . . ~ ~ = = ~ = = = = = = . =\n        B . ~ = = = = # = = = = = = = = = = = = = = = . =\n        H . ~ ~ = = = ~ # = = = ~ = = = = = = = = = = . =\n        I . ~ ~ ~ = = ~ ~ # = = ~ ~ = = ~ = = = = = = . =\n        L . ~ ~ ~ ~ ~ ~ ~ ~ # # ~ ~ = = ~ = = = = = = . ~\n        Q . ~ ~ ~ ~ ~ ~ ~ ~ # # ~ ~ = = ~ = = = = = = . ~\n        e . . . . . . . . . . . # = = = = = = = = = = . .\n        f . . . . . . . . . . . ~ # = = = = = = = = = . .\n        d . . . . . . . . . . . ~ ~ # = ~ = = = = = = . .\n        g . . . . . . . . . . . ~ ~ ~ # ~ ~ = = = = = . .\n        F . . . . . . . . . . . . . . . # = = = = = = . .\n        D . . . . . . . . . . . . . . . ~ # = = = = = . .\n        G . . . . . . . . . . . . . . . ~ ~ # = = = = . .\n        S . . . . . . . . . . . . . . . . . . # = = = . .\n        U . . . . . . . . . . . . . . . . . . . # = = . .\n        V . . . . . . . . . . . . . . . . . . . . # = . .\n        O . . . . . . . . . . . . . . . . . . . . = # . .\n        M . . . . . . . . . . . . . . . . . . . . = = # .\n        m . . . . . . . . . . . . . . . . . . . . = = . #\n        ').strip().split('\n')
A:numpy.core.tests.test_casting_unittests.CAST_TABLE->_get_cancast_table()
A:numpy.core.tests.test_casting_unittests.arr1->numpy.empty(length, dtype=dtype1)
A:numpy.core.tests.test_casting_unittests.arr2->arr2.view(time_dt).view(time_dt)
A:numpy.core.tests.test_casting_unittests.from_bytes->numpy.zeros(max_size1, dtype=np.uint8)
A:numpy.core.tests.test_casting_unittests.to_bytes->numpy.zeros(max_size2, dtype=np.uint8)
A:numpy.core.tests.test_casting_unittests.new1->as_strided(from_bytes[1:].view(arr1.dtype), arr1.shape, (stride1,))
A:numpy.core.tests.test_casting_unittests.new2->as_strided(to_bytes[1:].view(arr2.dtype), arr2.shape, (stride2,))
A:numpy.core.tests.test_casting_unittests.buf->from_bytes[offset::stride1].tobytes()
A:numpy.core.tests.test_casting_unittests.cast->get_castingimpl(object_dtype, other_dtype)
A:numpy.core.tests.test_casting_unittests.(casting, (from_res, to_res))->get_castingimpl(object_dtype, other_dtype)._resolve_descriptors((from_dt, to_dt))
A:numpy.core.tests.test_casting_unittests.(arr1, arr2, values)->self.get_data(from_dt, int64_dt)
A:numpy.core.tests.test_casting_unittests.(arr1_o, arr2_o)->self.get_data_variation(arr1, arr2, True, False)
A:numpy.core.tests.test_casting_unittests.from_dt->numpy.dtype(from_dt)
A:numpy.core.tests.test_casting_unittests.int64_dt->numpy.dtype(np.int64)
A:numpy.core.tests.test_casting_unittests.arr2[...]->numpy.datetime64('NaT')
A:numpy.core.tests.test_casting_unittests.to_dt->self.string_with_modified_length(string_dt, change_length)
A:numpy.core.tests.test_casting_unittests.values->values.astype(np.dtype('int64').newbyteorder(from_dt.byteorder)).astype(np.dtype('int64').newbyteorder(from_dt.byteorder))
A:numpy.core.tests.test_casting_unittests.DType->type(from_dt)
A:numpy.core.tests.test_casting_unittests.expected_out->expected_out.view(to_dt).view(to_dt)
A:numpy.core.tests.test_casting_unittests.orig_arr->values.astype(np.dtype('int64').newbyteorder(from_dt.byteorder)).astype(np.dtype('int64').newbyteorder(from_dt.byteorder)).view(from_dt)
A:numpy.core.tests.test_casting_unittests.orig_out->numpy.empty_like(expected_out)
A:numpy.core.tests.test_casting_unittests.(arr, out)->self.get_data_variation(orig_arr, orig_out, aligned, contig)
A:numpy.core.tests.test_casting_unittests.string_DT->type(np.dtype(string_char))
A:numpy.core.tests.test_casting_unittests.other_dt->numpy.dtype(other_dt)
A:numpy.core.tests.test_casting_unittests.expected_length->get_expected_stringlength(other_dt)
A:numpy.core.tests.test_casting_unittests.string_dt->numpy.dtype(f'{string_char}{expected_length}')
A:numpy.core.tests.test_casting_unittests.(safety, (res_other_dt, res_dt))->get_castingimpl(object_dtype, other_dtype)._resolve_descriptors((other_dt, None))
A:numpy.core.tests.test_casting_unittests.(safety, (_, res_dt))->get_castingimpl(object_dtype, other_dtype)._resolve_descriptors((other_dt, to_dt))
A:numpy.core.tests.test_casting_unittests.(safety, _)->get_castingimpl(object_dtype, other_dtype)._resolve_descriptors((string_dt, other_dt))
A:numpy.core.tests.test_casting_unittests.cast_back->get_castingimpl(string_DT, type(other_dt))
A:numpy.core.tests.test_casting_unittests.(_, (res_other_dt, string_dt))->get_castingimpl(object_dtype, other_dtype)._resolve_descriptors((other_dt, None))
A:numpy.core.tests.test_casting_unittests.(orig_arr, values)->self.get_data(other_dt, None)
A:numpy.core.tests.test_casting_unittests.str_arr->numpy.zeros(len(orig_arr), dtype=string_dt)
A:numpy.core.tests.test_casting_unittests.string_dt_short->self.string_with_modified_length(string_dt, -1)
A:numpy.core.tests.test_casting_unittests.str_arr_short->numpy.zeros(len(orig_arr), dtype=string_dt_short)
A:numpy.core.tests.test_casting_unittests.string_dt_long->self.string_with_modified_length(string_dt, 1)
A:numpy.core.tests.test_casting_unittests.str_arr_long->numpy.zeros(len(orig_arr), dtype=string_dt_long)
A:numpy.core.tests.test_casting_unittests.(other_arr, str_arr)->self.get_data_variation(orig_arr, str_arr, True, contig)
A:numpy.core.tests.test_casting_unittests.(_, str_arr_short)->self.get_data_variation(orig_arr, str_arr_short.copy(), True, contig)
A:numpy.core.tests.test_casting_unittests.(_, str_arr_long)->self.get_data_variation(orig_arr, str_arr_long, True, contig)
A:numpy.core.tests.test_casting_unittests.dtype1->numpy.dtype(f'{order1}U30')
A:numpy.core.tests.test_casting_unittests.dtype2->numpy.dtype(f'{order2}U30')
A:numpy.core.tests.test_casting_unittests.data1->numpy.empty(30 * 4 + 1, dtype=np.uint8)[1:].view(dtype1)
A:numpy.core.tests.test_casting_unittests.data2->numpy.empty(30 * 4 + 1, dtype=np.uint8)[1:].view(dtype2)
A:numpy.core.tests.test_casting_unittests.object_dtype->type(np.dtype(object))
A:numpy.core.tests.test_casting_unittests.other_dtype->type(np.dtype(str))
A:numpy.core.tests.test_casting_unittests.dtype->numpy.dtype([('foo', '<f4', (3, 2))])
A:numpy.core.tests.test_casting_unittests.arr_normal->numpy.array([None] * 5)
A:numpy.core.tests.test_casting_unittests.arr_NULLs->numpy.empty_like([None] * 5)
A:numpy.core.tests.test_casting_unittests.expected->numpy.array([None] * 5).astype(dtype)
numpy.core.tests.test_casting_unittests.Casting(enum.IntEnum)
numpy.core.tests.test_casting_unittests.TestCasting
numpy.core.tests.test_casting_unittests.TestCasting.get_data(self,dtype1,dtype2)
numpy.core.tests.test_casting_unittests.TestCasting.get_data_variation(self,arr1,arr2,aligned=True,contig=True)
numpy.core.tests.test_casting_unittests.TestCasting.string_with_modified_length(self,dtype,change_length)
numpy.core.tests.test_casting_unittests.TestCasting.test_numeric_to_times(self,from_Dt)
numpy.core.tests.test_casting_unittests.TestCasting.test_object_casts_NULL_None_equivalence(self,dtype)
numpy.core.tests.test_casting_unittests.TestCasting.test_object_to_parametric_internal_error(self)
numpy.core.tests.test_casting_unittests.TestCasting.test_simple_cancast(self,from_Dt)
numpy.core.tests.test_casting_unittests.TestCasting.test_simple_direct_casts(self,from_dt)
numpy.core.tests.test_casting_unittests.TestCasting.test_simple_string_casts_roundtrip(self,other_dt,string_char)
numpy.core.tests.test_casting_unittests.TestCasting.test_string_cancast(self,other_DT,string_char)
numpy.core.tests.test_casting_unittests.TestCasting.test_string_to_string_cancast(self,other_dt,string_char)
numpy.core.tests.test_casting_unittests.TestCasting.test_time_to_time(self,from_dt,to_dt,expected_casting,nom,denom)
numpy.core.tests.test_casting_unittests.TestCasting.test_unicode_byteswapped_cast(self,order1,order2)
numpy.core.tests.test_casting_unittests.TestCasting.test_void_and_structured_with_subarray(self,casting)
numpy.core.tests.test_casting_unittests.TestCasting.test_void_to_string_special_case(self)
numpy.core.tests.test_casting_unittests.TestChanges
numpy.core.tests.test_casting_unittests.TestChanges.test_float_to_string(self,floating,string)
numpy.core.tests.test_casting_unittests.TestChanges.test_to_void(self)
numpy.core.tests.test_casting_unittests._get_cancast_table()
numpy.core.tests.test_casting_unittests.get_expected_stringlength(dtype)
numpy.core.tests.test_casting_unittests.simple_dtype_instances()
numpy.tests.test_casting_unittests.Casting(enum.IntEnum)
numpy.tests.test_casting_unittests.TestCasting
numpy.tests.test_casting_unittests.TestCasting.get_data(self,dtype1,dtype2)
numpy.tests.test_casting_unittests.TestCasting.get_data_variation(self,arr1,arr2,aligned=True,contig=True)
numpy.tests.test_casting_unittests.TestCasting.string_with_modified_length(self,dtype,change_length)
numpy.tests.test_casting_unittests.TestCasting.test_numeric_to_times(self,from_Dt)
numpy.tests.test_casting_unittests.TestCasting.test_object_casts_NULL_None_equivalence(self,dtype)
numpy.tests.test_casting_unittests.TestCasting.test_object_to_parametric_internal_error(self)
numpy.tests.test_casting_unittests.TestCasting.test_simple_cancast(self,from_Dt)
numpy.tests.test_casting_unittests.TestCasting.test_simple_direct_casts(self,from_dt)
numpy.tests.test_casting_unittests.TestCasting.test_simple_string_casts_roundtrip(self,other_dt,string_char)
numpy.tests.test_casting_unittests.TestCasting.test_string_cancast(self,other_DT,string_char)
numpy.tests.test_casting_unittests.TestCasting.test_string_to_string_cancast(self,other_dt,string_char)
numpy.tests.test_casting_unittests.TestCasting.test_time_to_time(self,from_dt,to_dt,expected_casting,nom,denom)
numpy.tests.test_casting_unittests.TestCasting.test_unicode_byteswapped_cast(self,order1,order2)
numpy.tests.test_casting_unittests.TestCasting.test_void_and_structured_with_subarray(self,casting)
numpy.tests.test_casting_unittests.TestCasting.test_void_to_string_special_case(self)
numpy.tests.test_casting_unittests.TestChanges
numpy.tests.test_casting_unittests.TestChanges.test_float_to_string(self,floating,string)
numpy.tests.test_casting_unittests.TestChanges.test_to_void(self)
numpy.tests.test_casting_unittests._get_cancast_table()
numpy.tests.test_casting_unittests.get_expected_stringlength(dtype)
numpy.tests.test_casting_unittests.simple_dtype_instances()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_defchararray.py----------------------------------------
A:numpy.core.tests.test_defchararray.A->numpy.array([['%.3f', '%d'], ['%s', '%r']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.B->self.B.encode('unicode_escape')
A:numpy.core.tests.test_defchararray.C->numpy.array([[3, 7], [19, 1]])
A:numpy.core.tests.test_defchararray.self.A->numpy.array([['abc', '123'], ['789', 'xyz']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.self.B->numpy.array([['efg', '456'], ['051', 'tuv']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.out1->numpy.char.equal(self.A, self.B)
A:numpy.core.tests.test_defchararray.out2->numpy.char.equal('a', 'a')
A:numpy.core.tests.test_defchararray.T->self.A.expandtabs()
A:numpy.core.tests.test_defchararray.A0->self.A.decode('ascii')
A:numpy.core.tests.test_defchararray.tgt->numpy.array([[' ,a,b,c, ', ''], ['1,2,3,4,5', 'M#i#x#e#d#C#a#s#e'], ['1,2,3, ,\t, ,3,4,5, ,\x00, ', 'U#P#P#E#R']])
A:numpy.core.tests.test_defchararray.P->self.A.rpartition([b'3', b'M'])
A:numpy.core.tests.test_defchararray.R->self.A.replace([b'3', b'a'], [b'##########', b'@'])
A:numpy.core.tests.test_defchararray.AB->numpy.array([['abcefg', '123456'], ['789051', 'xyztuv']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.QA->numpy.array([['qabc', 'q123'], ['q789', 'qxyz']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.Ar->numpy.array([[A[0, 0] * r, A[0, 1] * r], [A[1, 0] * r, A[1, 1] * r]]).view(np.chararray)
A:numpy.core.tests.test_defchararray.F->numpy.array([['%d', '%f'], ['%s', '%r']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.FC->numpy.array([['3', '7.000000'], ['19', '1']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.A1->numpy.array([['1.000', '1'], ['1', '1']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.A2->numpy.array([['1.000', '2'], ['3', '4']]).view(np.chararray)
A:numpy.core.tests.test_defchararray.arr->numpy.array([['abc ', 'def '], ['geh ', 'ijk ']], dtype='S4').view(np.chararray)
A:numpy.core.tests.test_defchararray.s->numpy.chararray((4,))
numpy.core.tests.test_defchararray.TestBasic
numpy.core.tests.test_defchararray.TestBasic.test_from_object_array(self)
numpy.core.tests.test_defchararray.TestBasic.test_from_object_array_unicode(self)
numpy.core.tests.test_defchararray.TestBasic.test_from_string(self)
numpy.core.tests.test_defchararray.TestBasic.test_from_string_array(self)
numpy.core.tests.test_defchararray.TestBasic.test_from_unicode(self)
numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array(self)
numpy.core.tests.test_defchararray.TestBasic.test_unicode_upconvert(self)
numpy.core.tests.test_defchararray.TestChar
numpy.core.tests.test_defchararray.TestChar.setup(self)
numpy.core.tests.test_defchararray.TestChar.test_it(self)
numpy.core.tests.test_defchararray.TestComparisons
numpy.core.tests.test_defchararray.TestComparisons.setup(self)
numpy.core.tests.test_defchararray.TestComparisons.test_equal(self)
numpy.core.tests.test_defchararray.TestComparisons.test_greater(self)
numpy.core.tests.test_defchararray.TestComparisons.test_greater_equal(self)
numpy.core.tests.test_defchararray.TestComparisons.test_less(self)
numpy.core.tests.test_defchararray.TestComparisons.test_less_equal(self)
numpy.core.tests.test_defchararray.TestComparisons.test_not_equal(self)
numpy.core.tests.test_defchararray.TestComparisons.test_type(self)
numpy.core.tests.test_defchararray.TestComparisonsMixed1(TestComparisons)
numpy.core.tests.test_defchararray.TestComparisonsMixed1.setup(self)
numpy.core.tests.test_defchararray.TestComparisonsMixed2(TestComparisons)
numpy.core.tests.test_defchararray.TestComparisonsMixed2.setup(self)
numpy.core.tests.test_defchararray.TestInformation
numpy.core.tests.test_defchararray.TestInformation.setup(self)
numpy.core.tests.test_defchararray.TestInformation.test_count(self)
numpy.core.tests.test_defchararray.TestInformation.test_endswith(self)
numpy.core.tests.test_defchararray.TestInformation.test_find(self)
numpy.core.tests.test_defchararray.TestInformation.test_index(self)
numpy.core.tests.test_defchararray.TestInformation.test_isalnum(self)
numpy.core.tests.test_defchararray.TestInformation.test_isalpha(self)
numpy.core.tests.test_defchararray.TestInformation.test_isdigit(self)
numpy.core.tests.test_defchararray.TestInformation.test_islower(self)
numpy.core.tests.test_defchararray.TestInformation.test_isspace(self)
numpy.core.tests.test_defchararray.TestInformation.test_istitle(self)
numpy.core.tests.test_defchararray.TestInformation.test_isupper(self)
numpy.core.tests.test_defchararray.TestInformation.test_len(self)
numpy.core.tests.test_defchararray.TestInformation.test_rfind(self)
numpy.core.tests.test_defchararray.TestInformation.test_rindex(self)
numpy.core.tests.test_defchararray.TestInformation.test_startswith(self)
numpy.core.tests.test_defchararray.TestMethods
numpy.core.tests.test_defchararray.TestMethods.setup(self)
numpy.core.tests.test_defchararray.TestMethods.test_capitalize(self)
numpy.core.tests.test_defchararray.TestMethods.test_center(self)
numpy.core.tests.test_defchararray.TestMethods.test_decode(self)
numpy.core.tests.test_defchararray.TestMethods.test_encode(self)
numpy.core.tests.test_defchararray.TestMethods.test_expandtabs(self)
numpy.core.tests.test_defchararray.TestMethods.test_isdecimal(self)
numpy.core.tests.test_defchararray.TestMethods.test_isnumeric(self)
numpy.core.tests.test_defchararray.TestMethods.test_join(self)
numpy.core.tests.test_defchararray.TestMethods.test_ljust(self)
numpy.core.tests.test_defchararray.TestMethods.test_lower(self)
numpy.core.tests.test_defchararray.TestMethods.test_lstrip(self)
numpy.core.tests.test_defchararray.TestMethods.test_partition(self)
numpy.core.tests.test_defchararray.TestMethods.test_replace(self)
numpy.core.tests.test_defchararray.TestMethods.test_rjust(self)
numpy.core.tests.test_defchararray.TestMethods.test_rpartition(self)
numpy.core.tests.test_defchararray.TestMethods.test_rsplit(self)
numpy.core.tests.test_defchararray.TestMethods.test_rstrip(self)
numpy.core.tests.test_defchararray.TestMethods.test_split(self)
numpy.core.tests.test_defchararray.TestMethods.test_splitlines(self)
numpy.core.tests.test_defchararray.TestMethods.test_strip(self)
numpy.core.tests.test_defchararray.TestMethods.test_swapcase(self)
numpy.core.tests.test_defchararray.TestMethods.test_title(self)
numpy.core.tests.test_defchararray.TestMethods.test_upper(self)
numpy.core.tests.test_defchararray.TestOperations
numpy.core.tests.test_defchararray.TestOperations.setup(self)
numpy.core.tests.test_defchararray.TestOperations.test_add(self)
numpy.core.tests.test_defchararray.TestOperations.test_mod(self)
numpy.core.tests.test_defchararray.TestOperations.test_mul(self)
numpy.core.tests.test_defchararray.TestOperations.test_radd(self)
numpy.core.tests.test_defchararray.TestOperations.test_rmod(self)
numpy.core.tests.test_defchararray.TestOperations.test_rmul(self)
numpy.core.tests.test_defchararray.TestOperations.test_slice(self)
numpy.core.tests.test_defchararray.TestVecString
numpy.core.tests.test_defchararray.TestVecString.test_broadcast_error(self)
numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple(self)
numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args(self)
numpy.core.tests.test_defchararray.TestVecString.test_invalid_result_type(self)
numpy.core.tests.test_defchararray.TestVecString.test_invalid_type_descr(self)
numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method(self)
numpy.core.tests.test_defchararray.TestVecString.test_non_string_array(self)
numpy.core.tests.test_defchararray.TestWhitespace
numpy.core.tests.test_defchararray.TestWhitespace.setup(self)
numpy.core.tests.test_defchararray.TestWhitespace.test1(self)
numpy.core.tests.test_defchararray.test_empty_indexing()
numpy.tests.test_defchararray.TestBasic
numpy.tests.test_defchararray.TestBasic.test_from_object_array(self)
numpy.tests.test_defchararray.TestBasic.test_from_object_array_unicode(self)
numpy.tests.test_defchararray.TestBasic.test_from_string(self)
numpy.tests.test_defchararray.TestBasic.test_from_string_array(self)
numpy.tests.test_defchararray.TestBasic.test_from_unicode(self)
numpy.tests.test_defchararray.TestBasic.test_from_unicode_array(self)
numpy.tests.test_defchararray.TestBasic.test_unicode_upconvert(self)
numpy.tests.test_defchararray.TestChar
numpy.tests.test_defchararray.TestChar.setup(self)
numpy.tests.test_defchararray.TestChar.test_it(self)
numpy.tests.test_defchararray.TestComparisons
numpy.tests.test_defchararray.TestComparisons.setup(self)
numpy.tests.test_defchararray.TestComparisons.test_equal(self)
numpy.tests.test_defchararray.TestComparisons.test_greater(self)
numpy.tests.test_defchararray.TestComparisons.test_greater_equal(self)
numpy.tests.test_defchararray.TestComparisons.test_less(self)
numpy.tests.test_defchararray.TestComparisons.test_less_equal(self)
numpy.tests.test_defchararray.TestComparisons.test_not_equal(self)
numpy.tests.test_defchararray.TestComparisons.test_type(self)
numpy.tests.test_defchararray.TestComparisonsMixed1(TestComparisons)
numpy.tests.test_defchararray.TestComparisonsMixed1.setup(self)
numpy.tests.test_defchararray.TestComparisonsMixed2(TestComparisons)
numpy.tests.test_defchararray.TestComparisonsMixed2.setup(self)
numpy.tests.test_defchararray.TestInformation
numpy.tests.test_defchararray.TestInformation.setup(self)
numpy.tests.test_defchararray.TestInformation.test_count(self)
numpy.tests.test_defchararray.TestInformation.test_endswith(self)
numpy.tests.test_defchararray.TestInformation.test_find(self)
numpy.tests.test_defchararray.TestInformation.test_index(self)
numpy.tests.test_defchararray.TestInformation.test_isalnum(self)
numpy.tests.test_defchararray.TestInformation.test_isalpha(self)
numpy.tests.test_defchararray.TestInformation.test_isdigit(self)
numpy.tests.test_defchararray.TestInformation.test_islower(self)
numpy.tests.test_defchararray.TestInformation.test_isspace(self)
numpy.tests.test_defchararray.TestInformation.test_istitle(self)
numpy.tests.test_defchararray.TestInformation.test_isupper(self)
numpy.tests.test_defchararray.TestInformation.test_len(self)
numpy.tests.test_defchararray.TestInformation.test_rfind(self)
numpy.tests.test_defchararray.TestInformation.test_rindex(self)
numpy.tests.test_defchararray.TestInformation.test_startswith(self)
numpy.tests.test_defchararray.TestMethods
numpy.tests.test_defchararray.TestMethods.setup(self)
numpy.tests.test_defchararray.TestMethods.test_capitalize(self)
numpy.tests.test_defchararray.TestMethods.test_center(self)
numpy.tests.test_defchararray.TestMethods.test_decode(self)
numpy.tests.test_defchararray.TestMethods.test_encode(self)
numpy.tests.test_defchararray.TestMethods.test_expandtabs(self)
numpy.tests.test_defchararray.TestMethods.test_isdecimal(self)
numpy.tests.test_defchararray.TestMethods.test_isnumeric(self)
numpy.tests.test_defchararray.TestMethods.test_join(self)
numpy.tests.test_defchararray.TestMethods.test_ljust(self)
numpy.tests.test_defchararray.TestMethods.test_lower(self)
numpy.tests.test_defchararray.TestMethods.test_lstrip(self)
numpy.tests.test_defchararray.TestMethods.test_partition(self)
numpy.tests.test_defchararray.TestMethods.test_replace(self)
numpy.tests.test_defchararray.TestMethods.test_rjust(self)
numpy.tests.test_defchararray.TestMethods.test_rpartition(self)
numpy.tests.test_defchararray.TestMethods.test_rsplit(self)
numpy.tests.test_defchararray.TestMethods.test_rstrip(self)
numpy.tests.test_defchararray.TestMethods.test_split(self)
numpy.tests.test_defchararray.TestMethods.test_splitlines(self)
numpy.tests.test_defchararray.TestMethods.test_strip(self)
numpy.tests.test_defchararray.TestMethods.test_swapcase(self)
numpy.tests.test_defchararray.TestMethods.test_title(self)
numpy.tests.test_defchararray.TestMethods.test_upper(self)
numpy.tests.test_defchararray.TestOperations
numpy.tests.test_defchararray.TestOperations.setup(self)
numpy.tests.test_defchararray.TestOperations.test_add(self)
numpy.tests.test_defchararray.TestOperations.test_mod(self)
numpy.tests.test_defchararray.TestOperations.test_mul(self)
numpy.tests.test_defchararray.TestOperations.test_radd(self)
numpy.tests.test_defchararray.TestOperations.test_rmod(self)
numpy.tests.test_defchararray.TestOperations.test_rmul(self)
numpy.tests.test_defchararray.TestOperations.test_slice(self)
numpy.tests.test_defchararray.TestVecString
numpy.tests.test_defchararray.TestVecString.test_broadcast_error(self)
numpy.tests.test_defchararray.TestVecString.test_invalid_args_tuple(self)
numpy.tests.test_defchararray.TestVecString.test_invalid_function_args(self)
numpy.tests.test_defchararray.TestVecString.test_invalid_result_type(self)
numpy.tests.test_defchararray.TestVecString.test_invalid_type_descr(self)
numpy.tests.test_defchararray.TestVecString.test_non_existent_method(self)
numpy.tests.test_defchararray.TestVecString.test_non_string_array(self)
numpy.tests.test_defchararray.TestWhitespace
numpy.tests.test_defchararray.TestWhitespace.setup(self)
numpy.tests.test_defchararray.TestWhitespace.test1(self)
numpy.tests.test_defchararray.test_empty_indexing()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_machar.py----------------------------------------
numpy.core.tests.test_machar.TestMachAr
numpy.core.tests.test_machar.TestMachAr._run_machar_highprec(self)
numpy.core.tests.test_machar.TestMachAr.test_underlow(self)
numpy.tests.test_TestMachAr
numpy.tests.test_TestMachAr._run_machar_highprec(self)
numpy.tests.test_TestMachAr.test_underlow(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/test_scalar_methods.py----------------------------------------
A:numpy.core.tests.test_scalar_methods.f->numpy.ldexp(ftype(frac), exp)
A:numpy.core.tests.test_scalar_methods.(n, d)->numpy.ldexp(ftype(frac), exp).as_integer_ratio()
A:numpy.core.tests.test_scalar_methods.nf->numpy.longdouble(str(n))
A:numpy.core.tests.test_scalar_methods.df->numpy.longdouble(str(d))
numpy.core.tests.test_scalar_methods.TestAsIntegerRatio
numpy.core.tests.test_scalar_methods.TestAsIntegerRatio.test_against_known_values(self)
numpy.core.tests.test_scalar_methods.TestAsIntegerRatio.test_errors(self,ftype)
numpy.core.tests.test_scalar_methods.TestAsIntegerRatio.test_roundtrip(self,ftype,frac_vals,exp_vals)
numpy.core.tests.test_scalar_methods.TestAsIntegerRatio.test_simple_fractions(self,ftype)
numpy.core.tests.test_scalar_methods.TestAsIntegerRatio.test_small(self,ftype,f,ratio)
numpy.tests.test_scalar_methods.TestAsIntegerRatio
numpy.tests.test_scalar_methods.TestAsIntegerRatio.test_against_known_values(self)
numpy.tests.test_scalar_methods.TestAsIntegerRatio.test_errors(self,ftype)
numpy.tests.test_scalar_methods.TestAsIntegerRatio.test_roundtrip(self,ftype,frac_vals,exp_vals)
numpy.tests.test_scalar_methods.TestAsIntegerRatio.test_simple_fractions(self,ftype)
numpy.tests.test_scalar_methods.TestAsIntegerRatio.test_small(self,ftype,f,ratio)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/core/tests/examples/setup.py----------------------------------------
A:numpy.core.tests.examples.setup.checks->Extension('checks', sources=[os.path.join('.', 'checks.pyx')], include_dirs=[np.get_include()], define_macros=macros)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/rules.py----------------------------------------
A:numpy.f2py.rules.generationtime->int(os.environ.get('SOURCE_DATE_EPOCH', time.time()))
A:numpy.f2py.rules.vrd->capi_maps.sign2map(a, var[a])
A:numpy.f2py.rules.rd->dictappend(rd, ar)
A:numpy.f2py.rules.nb1->copy.deepcopy(nb)
A:numpy.f2py.rules.isf90->requiresf90wrapper(nb)
A:numpy.f2py.rules.(api, wrap)->buildapi(nb)
A:numpy.f2py.rules.ar->applyrules(routine_rules, rd)
A:numpy.f2py.rules.(cr, wrap)->common_rules.buildhooks(m)
A:numpy.f2py.rules.(mr, wrap)->f90mod_rules.buildhooks(m)
A:numpy.f2py.rules.needs->cfuncs.get_needs()
A:numpy.f2py.rules.fn->os.path.join(options['buildpath'], vrd['modulename'] + 'module.tex')
A:numpy.f2py.rules.wn->os.path.join(options['buildpath'], '%s-f2pywrappers2.f90' % vrd['modulename'])
A:numpy.f2py.rules.lines->''.join(lines).replace('\n     &\n', '\n')
A:numpy.f2py.rules.(rout, wrap)->func2subr.assubr(rout)
A:numpy.f2py.rules.(args, depargs)->getargs2(rout)
A:numpy.f2py.rules.rd['docsignature']->stripcomma(replace('#docsign##docsignopt##docsignxa#', {'docsign': rd['docsign'], 'docsignopt': rd['docsignopt'], 'docsignxa': rd['docsignxa']}))
A:numpy.f2py.rules.optargs->stripcomma(replace('#docsignopt##docsignxa#', {'docsignxa': rd['docsignxashort'], 'docsignopt': rd['docsignoptshort']}))
A:numpy.f2py.rules.rd['docsignatureshort']->replace('#docsign#[#docsignopt#]', {'docsign': rd['docsign'], 'docsignopt': optargs})
A:numpy.f2py.rules.rd['latexdocsignatureshort']->rd['latexdocsignatureshort'].replace(',', ', ').replace(',', ', ')
A:numpy.f2py.rules.cfs->stripcomma(replace('#callfortran##callfortranappend#', {'callfortran': rd['callfortran'], 'callfortranappend': rd['callfortranappend']}))
A:numpy.f2py.rules.rd['callcompaqfortran']->stripcomma(replace('#callfortran# 0,#callfortranappend#', {'callfortran': rd['callfortran'], 'callfortranappend': rd['callfortranappend']}))
numpy.f2py.rules.buildapi(rout)
numpy.f2py.rules.buildmodule(m,um)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/f2py_testing.py----------------------------------------
A:numpy.f2py.f2py_testing.m->re.compile('\\A\\d+\\Z')
A:numpy.f2py.f2py_testing.repeat->eval(a)
A:numpy.f2py.f2py_testing.f2py_opts->' '.join(args)
A:numpy.f2py.f2py_testing.start_memusage->memusage()
A:numpy.f2py.f2py_testing.start_jiffies->jiffies()
A:numpy.f2py.f2py_testing.current_memusage->memusage()
numpy.f2py.f2py_testing.cmdline()
numpy.f2py.f2py_testing.run(runtest,test_functions,repeat=1)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/cb_rules.py----------------------------------------
A:numpy.f2py.cb_rules.(args, depargs)->getargs(rout)
A:numpy.f2py.cb_rules.vrd->capi_maps.cb_sign2map(a, var[a], index=i)
A:numpy.f2py.cb_rules.rd->dictappend(rd, ar)
A:numpy.f2py.cb_rules.ar->applyrules(cb_routine_rules, rd)
A:numpy.f2py.cb_rules.rd['docreturn']->stripcomma(replace('#docreturn#', {'docreturn': rd['docreturn']}))
A:numpy.f2py.cb_rules.optargs->stripcomma(replace('#docsignopt#', {'docsignopt': rd['docsignopt']}))
A:numpy.f2py.cb_rules.rd['docsignature']->replace('#docsign#[#docsignopt#]', {'docsign': rd['docsign'], 'docsignopt': optargs})
A:numpy.f2py.cb_rules.rd['latexdocsignature']->rd['latexdocsignature'].replace(',', ', ').replace(',', ', ')
numpy.f2py.cb_rules.buildcallback(rout,um)
numpy.f2py.cb_rules.buildcallbacks(m)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/diagnose.py----------------------------------------
A:numpy.f2py.diagnose._path->os.getcwd()
A:numpy.f2py.diagnose.cpu->cpuinfo()
numpy.f2py.diagnose.run()
numpy.f2py.diagnose.run_command(cmd)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/__init__.py----------------------------------------
A:numpy.f2py.__init__.(f, fname)->tempfile.mkstemp(suffix=extension)
A:numpy.f2py.__init__.source->str(source, 'utf-8')
A:numpy.f2py.__init__.extra_args->shlex.split(extra_args, posix=is_posix)
A:numpy.f2py.__init__.cp->subprocess.CompletedProcess(c, 127, stdout=b'', stderr=b'')
A:numpy.f2py.__init__.test->PytestTester(__name__)
numpy.f2py.__init__.compile(source,modulename='untitled',extra_args='',verbose=True,source_fn=None,extension='.f',full_output=False)
numpy.f2py.__init__.get_include()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/__init__.pyi----------------------------------------
numpy.f2py.__init__.run_main(comline_list)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/func2subr.py----------------------------------------
A:numpy.f2py.func2subr.dv->dict(typespec='integer', intent=['hide'])
A:numpy.f2py.func2subr.need_interface->bool(extra_args)
A:numpy.f2py.func2subr.fortranname->getfortranname(rout)
A:numpy.f2py.func2subr.f90mode->ismoduleroutine(rout)
A:numpy.f2py.func2subr.l->var2fixfortran(vars, name, newname, f90mode)
A:numpy.f2py.func2subr.sargs->', '.join([a for a in args if a not in extra_args])
A:numpy.f2py.func2subr.rout->copy.copy(rout)
numpy.f2py.func2subr.assubr(rout)
numpy.f2py.func2subr.createfuncwrapper(rout,signature=0)
numpy.f2py.func2subr.createsubrwrapper(rout,signature=0)
numpy.f2py.func2subr.var2fixfortran(vars,a,fa=None,f90mode=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/f2py2e.py----------------------------------------
A:numpy.f2py.f2py2e.signsfile->os.path.join(buildpath, signsfile)
A:numpy.f2py.f2py2e.postlist->callcrackfortran(files, options)
A:numpy.f2py.f2py2e.pyf->crackfortran.crack2fortran(postlist)
A:numpy.f2py.f2py2e.f2pydir->os.path.dirname(os.path.abspath(cfuncs.__file__))
A:numpy.f2py.f2py2e.fobjhsrc->os.path.join(f2pydir, 'src', 'fortranobject.h')
A:numpy.f2py.f2py2e.fobjcsrc->os.path.join(f2pydir, 'src', 'fortranobject.c')
A:numpy.f2py.f2py2e.(files, options)->scaninputline(comline_list)
A:numpy.f2py.f2py2e.ret->buildmodules(postlist)
A:numpy.f2py.f2py2e.ind->len(prefix)
A:numpy.f2py.f2py2e.p->os.path.dirname(os.path.dirname(module.__file__))
A:numpy.f2py.f2py2e.i->get_info(n)
A:numpy.f2py.f2py2e.build_dir->tempfile.mkdtemp()
A:numpy.f2py.f2py2e._reg1->re.compile('--link-')
A:numpy.f2py.f2py2e._reg2->re.compile('--((no-|)(wrap-functions|lower)|debug-capi|quiet)|-include')
A:numpy.f2py.f2py2e._reg3->re.compile('--((f(90)?compiler(-exec|)|compiler)=|help-compiler)')
A:numpy.f2py.f2py2e._reg4->re.compile('--((f(77|90)(flags|exec)|opt|arch)=|(debug|noopt|noarch|help-fcompiler))')
A:numpy.f2py.f2py2e.allowed_keys->list(fcompiler.fcompiler_class.keys())
A:numpy.f2py.f2py2e.nvov->s[len(v):].lower()
A:numpy.f2py.f2py2e._reg5->re.compile('--(verbose)')
A:numpy.f2py.f2py2e.(pyf_files, sources)->filter_files('', '[.]pyf([.]src|)', sources)
A:numpy.f2py.f2py2e.modulename->get_f2py_modulename(f)
A:numpy.f2py.f2py2e.(extra_objects, sources)->filter_files('', '[.](o|a|so|dylib)', sources)
A:numpy.f2py.f2py2e.(include_dirs, sources)->filter_files('-I', '', sources, remove_prefix=1)
A:numpy.f2py.f2py2e.(library_dirs, sources)->filter_files('-L', '', sources, remove_prefix=1)
A:numpy.f2py.f2py2e.(libraries, sources)->filter_files('-l', '', sources, remove_prefix=1)
A:numpy.f2py.f2py2e.(undef_macros, sources)->filter_files('-U', '', sources, remove_prefix=1)
A:numpy.f2py.f2py2e.(define_macros, sources)->filter_files('-D', '', sources, remove_prefix=1)
A:numpy.f2py.f2py2e.name_value->tuple(name_value).split('=', 1)
A:numpy.f2py.f2py2e.define_macros[i]->tuple(name_value)
A:numpy.f2py.f2py2e.ext->Extension(**ext_args)
numpy.f2py.f2py2e.buildmodules(lst)
numpy.f2py.f2py2e.callcrackfortran(files,options)
numpy.f2py.f2py2e.dict_append(d_out,d_in)
numpy.f2py.f2py2e.filter_files(prefix,suffix,files,remove_prefix=None)
numpy.f2py.f2py2e.get_prefix(module)
numpy.f2py.f2py2e.main()
numpy.f2py.f2py2e.run_compile()
numpy.f2py.f2py2e.run_main(comline_list)
numpy.f2py.f2py2e.scaninputline(inputline)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/auxfuncs.py----------------------------------------
A:numpy.f2py.auxfuncs.r->getmultilineblock(rout, 'callprotoargument', comment=0)
A:numpy.f2py.auxfuncs.ctype->getctype(var)
A:numpy.f2py.auxfuncs.proto_args->','.join(arg_types + arg_types2)
A:numpy.f2py.auxfuncs.str->str.replace('#%s#' % k, d[k]).replace('#%s#' % k, d[k])
A:numpy.f2py.auxfuncs.rd->dictappend(rd, a)
A:numpy.f2py.auxfuncs.rd[k]->dictappend(rd[k], ar[k])
A:numpy.f2py.auxfuncs.rr->applyrules(r, d, var)
A:numpy.f2py.auxfuncs.ret->dictappend(ret, rr)
A:numpy.f2py.auxfuncs.res->applyrules({'supertext': i}, d)
A:numpy.f2py.auxfuncs.ret[k]->replace(rules[k], d)
A:numpy.f2py.auxfuncs.ar->applyrules({k: i}, d, var)
numpy.f2py.auxfuncs.F2PYError(Exception)
numpy.f2py.auxfuncs._isstring(var)
numpy.f2py.auxfuncs.applyrules(rules,d,var={})
numpy.f2py.auxfuncs.containscommon(rout)
numpy.f2py.auxfuncs.containsmodule(block)
numpy.f2py.auxfuncs.debugcapi(var)
numpy.f2py.auxfuncs.dictappend(rd,ar)
numpy.f2py.auxfuncs.flatlist(l)
numpy.f2py.auxfuncs.gentitle(name)
numpy.f2py.auxfuncs.get_kind(var)
numpy.f2py.auxfuncs.getargs(rout)
numpy.f2py.auxfuncs.getargs2(rout)
numpy.f2py.auxfuncs.getcallprotoargument(rout,cb_map={})
numpy.f2py.auxfuncs.getcallstatement(rout)
numpy.f2py.auxfuncs.getfortranname(rout)
numpy.f2py.auxfuncs.getmultilineblock(rout,blockname,comment=1,counter=0)
numpy.f2py.auxfuncs.getpymethoddef(rout)
numpy.f2py.auxfuncs.getrestdoc(rout)
numpy.f2py.auxfuncs.getusercode(rout)
numpy.f2py.auxfuncs.getusercode1(rout)
numpy.f2py.auxfuncs.hasassumedshape(rout)
numpy.f2py.auxfuncs.hasbody(rout)
numpy.f2py.auxfuncs.hascallstatement(rout)
numpy.f2py.auxfuncs.hascommon(rout)
numpy.f2py.auxfuncs.hasexternals(rout)
numpy.f2py.auxfuncs.hasinitvalue(var)
numpy.f2py.auxfuncs.hasinitvalueasstring(var)
numpy.f2py.auxfuncs.hasnote(var)
numpy.f2py.auxfuncs.hasresultnote(rout)
numpy.f2py.auxfuncs.hasvariables(rout)
numpy.f2py.auxfuncs.isallocatable(var)
numpy.f2py.auxfuncs.isarray(var)
numpy.f2py.auxfuncs.isarrayofstrings(var)
numpy.f2py.auxfuncs.ischaracter(var)
numpy.f2py.auxfuncs.iscomplex(var)
numpy.f2py.auxfuncs.iscomplexarray(var)
numpy.f2py.auxfuncs.iscomplexfunction(rout)
numpy.f2py.auxfuncs.iscomplexfunction_warn(rout)
numpy.f2py.auxfuncs.isdouble(var)
numpy.f2py.auxfuncs.isdummyroutine(rout)
numpy.f2py.auxfuncs.isexternal(var)
numpy.f2py.auxfuncs.isfalse(var)
numpy.f2py.auxfuncs.isfunction(rout)
numpy.f2py.auxfuncs.isfunction_wrap(rout)
numpy.f2py.auxfuncs.isint1array(var)
numpy.f2py.auxfuncs.isinteger(var)
numpy.f2py.auxfuncs.isintent_aligned16(var)
numpy.f2py.auxfuncs.isintent_aligned4(var)
numpy.f2py.auxfuncs.isintent_aligned8(var)
numpy.f2py.auxfuncs.isintent_aux(var)
numpy.f2py.auxfuncs.isintent_c(var)
numpy.f2py.auxfuncs.isintent_cache(var)
numpy.f2py.auxfuncs.isintent_callback(var)
numpy.f2py.auxfuncs.isintent_copy(var)
numpy.f2py.auxfuncs.isintent_hide(var)
numpy.f2py.auxfuncs.isintent_in(var)
numpy.f2py.auxfuncs.isintent_inout(var)
numpy.f2py.auxfuncs.isintent_inplace(var)
numpy.f2py.auxfuncs.isintent_nothide(var)
numpy.f2py.auxfuncs.isintent_out(var)
numpy.f2py.auxfuncs.isintent_overwrite(var)
numpy.f2py.auxfuncs.islogical(var)
numpy.f2py.auxfuncs.islogicalfunction(rout)
numpy.f2py.auxfuncs.islong_complex(var)
numpy.f2py.auxfuncs.islong_double(var)
numpy.f2py.auxfuncs.islong_doublefunction(rout)
numpy.f2py.auxfuncs.islong_long(var)
numpy.f2py.auxfuncs.islong_longfunction(rout)
numpy.f2py.auxfuncs.ismodule(rout)
numpy.f2py.auxfuncs.ismoduleroutine(rout)
numpy.f2py.auxfuncs.ismutable(var)
numpy.f2py.auxfuncs.isoptional(var)
numpy.f2py.auxfuncs.isprivate(var)
numpy.f2py.auxfuncs.isreal(var)
numpy.f2py.auxfuncs.isrequired(var)
numpy.f2py.auxfuncs.isroutine(rout)
numpy.f2py.auxfuncs.isscalar(var)
numpy.f2py.auxfuncs.issigned_array(var)
numpy.f2py.auxfuncs.issigned_chararray(var)
numpy.f2py.auxfuncs.issigned_long_longarray(var)
numpy.f2py.auxfuncs.issigned_shortarray(var)
numpy.f2py.auxfuncs.isstring(var)
numpy.f2py.auxfuncs.isstringarray(var)
numpy.f2py.auxfuncs.isstringfunction(rout)
numpy.f2py.auxfuncs.issubroutine(rout)
numpy.f2py.auxfuncs.issubroutine_wrap(rout)
numpy.f2py.auxfuncs.isthreadsafe(rout)
numpy.f2py.auxfuncs.istrue(var)
numpy.f2py.auxfuncs.isunsigned(var)
numpy.f2py.auxfuncs.isunsigned_char(var)
numpy.f2py.auxfuncs.isunsigned_chararray(var)
numpy.f2py.auxfuncs.isunsigned_long_long(var)
numpy.f2py.auxfuncs.isunsigned_long_longarray(var)
numpy.f2py.auxfuncs.isunsigned_short(var)
numpy.f2py.auxfuncs.isunsigned_shortarray(var)
numpy.f2py.auxfuncs.isunsignedarray(var)
numpy.f2py.auxfuncs.l_and(*f)
numpy.f2py.auxfuncs.l_not(f)
numpy.f2py.auxfuncs.l_or(*f)
numpy.f2py.auxfuncs.outmess(t)
numpy.f2py.auxfuncs.replace(str,d,defaultsep='')
numpy.f2py.auxfuncs.requiresf90wrapper(rout)
numpy.f2py.auxfuncs.stripcomma(s)
numpy.f2py.auxfuncs.throw_error(self,mess)
numpy.f2py.auxfuncs.throw_error.__init__(self,mess)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/use_rules.py----------------------------------------
A:numpy.f2py.use_rules.ret->applyrules(usemodule_rules, rd)
A:numpy.f2py.use_rules.vrd['texnamename']->vrd['texnamename'].replace(repr(i), nummap[i]).replace(repr(i), nummap[i])
A:numpy.f2py.use_rules.rd->dictappend({}, vrd)
numpy.f2py.use_rules.buildusevar(name,realname,vars,usemodulename)
numpy.f2py.use_rules.buildusevars(m,r)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/capi_maps.py----------------------------------------
A:numpy.f2py.capi_maps.f2cmap_default->copy.deepcopy(f2cmap_all)
A:numpy.f2py.capi_maps.f2cmap_all->copy.deepcopy(f2cmap_default)
A:numpy.f2py.capi_maps.d->eval(f.read(), {}, {})
A:numpy.f2py.capi_maps.typespec->var['typespec'].lower()
A:numpy.f2py.capi_maps.ret['dims']->','.join(dim)
A:numpy.f2py.capi_maps.dim->copy.copy(var['dimension'])
A:numpy.f2py.capi_maps.ret['size']->getstrlength(var)
A:numpy.f2py.capi_maps.ret['rank']->repr(len(dim))
A:numpy.f2py.capi_maps.ctype->getctype(var)
A:numpy.f2py.capi_maps.(init, showinit)->getinit(a, var)
A:numpy.f2py.capi_maps.rank->repr(len(dim))
A:numpy.f2py.capi_maps.(ret['init.r'], ret['init.i'])->markoutercomma(ret['init'][1:-1]).split('@,@')
A:numpy.f2py.capi_maps.v->eval(v, {}, {})
A:numpy.f2py.capi_maps.ret['intent']->'|'.join(intent_flags)
A:numpy.f2py.capi_maps.(ret['init'], ret['showinit'])->getinit(a, var)
A:numpy.f2py.capi_maps.ret['length']->getstrlength(var)
A:numpy.f2py.capi_maps.ret->dictappend(ret, getarrdims(a, var))
A:numpy.f2py.capi_maps.ddim->','.join(map(lambda x, y: '%s|%s' % (x, y), var['dimension'], dim))
A:numpy.f2py.capi_maps.(ret['pydocsign'], ret['pydocsignout'])->getpydocsign(a, var)
A:numpy.f2py.capi_maps.fname->getfortranname(rout)
A:numpy.f2py.capi_maps.ret['ctype']->getctype(rout)
A:numpy.f2py.capi_maps.ret['rlength']->getstrlength(rout['vars'][a])
A:numpy.f2py.capi_maps.ret['begintitle']->gentitle(ret['name'])
A:numpy.f2py.capi_maps.ret['endtitle']->gentitle('end of %s' % ret['name'])
A:numpy.f2py.capi_maps.ret['strlength']->getstrlength(rout)
A:numpy.f2py.capi_maps.ret['maxnofargs']->repr(nofargs)
A:numpy.f2py.capi_maps.ret['nofoptargs']->repr(nofoptargs)
A:numpy.f2py.capi_maps.ret['arrdocstr']->getarrdocsign(a, var)
numpy.f2py.capi_maps.cb_routsign2map(rout,um)
numpy.f2py.capi_maps.cb_sign2map(a,var,index=None)
numpy.f2py.capi_maps.common_sign2map(a,var)
numpy.f2py.capi_maps.getarrdims(a,var,verbose=0)
numpy.f2py.capi_maps.getarrdocsign(a,var)
numpy.f2py.capi_maps.getctype(var)
numpy.f2py.capi_maps.getinit(a,var)
numpy.f2py.capi_maps.getpydocsign(a,var)
numpy.f2py.capi_maps.getstrlength(var)
numpy.f2py.capi_maps.load_f2cmap_file(f2cmap_file)
numpy.f2py.capi_maps.modsign2map(m)
numpy.f2py.capi_maps.routsign2map(rout)
numpy.f2py.capi_maps.sign2map(a,var)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/setup.py----------------------------------------
A:numpy.f2py.setup.config->config.todict().todict()
numpy.f2py.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/__main__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/common_rules.py----------------------------------------
A:numpy.f2py.common_rules.lower_name->name.lower()
A:numpy.f2py.common_rules.ct->capi_maps.getctype(vars[n])
A:numpy.f2py.common_rules.dm->capi_maps.getarrdims(n, vars[n])
A:numpy.f2py.common_rules.dms->dm['dims'].strip()
A:numpy.f2py.common_rules.inames1->rmbadname(inames)
A:numpy.f2py.common_rules.inames1_tps->','.join(['char *' + s for s in inames1])
A:numpy.f2py.common_rules.tname->name.replace('_', '\\_')
A:numpy.f2py.common_rules.note->'\n'.join(note)
numpy.f2py.common_rules.buildhooks(m)
numpy.f2py.common_rules.findcommonblocks(block,top=1)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/crackfortran.py----------------------------------------
A:numpy.f2py.crackfortran.i->m.group('after').strip().find('::')
A:numpy.f2py.crackfortran.line->determineexprtype_re_5.match(expr).group('after').strip()
A:numpy.f2py.crackfortran.includeline->re.compile('\\s*include\\s*(\\\'|")(?P<name>[^\\\'"]*)(\\\'|")', re.I)
A:numpy.f2py.crackfortran.cont1->re.compile('(?P<line>.*)&\\s*\\Z')
A:numpy.f2py.crackfortran.cont2->re.compile('(\\s*&|)(?P<line>.*)')
A:numpy.f2py.crackfortran.mline_mark->re.compile(".*?'''")
A:numpy.f2py.crackfortran.fin->fileinput.FileInput(ffile)
A:numpy.f2py.crackfortran.l->str(eval(l, {}, params))
A:numpy.f2py.crackfortran.currentfilename->fileinput.FileInput(ffile).filename()
A:numpy.f2py.crackfortran.(l, rl)->split_by_unquoted(l, '!')
A:numpy.f2py.crackfortran.(l, _)->split_by_unquoted(l + 4 * ' ' + rl[5:], '!')
A:numpy.f2py.crackfortran.r->eval(e, g, l)
A:numpy.f2py.crackfortran.finalline->m.group('after').strip().lower()
A:numpy.f2py.crackfortran.lc->fileinput.FileInput(ffile).readline()
A:numpy.f2py.crackfortran.m->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr)
A:numpy.f2py.crackfortran.fn->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('name')
A:numpy.f2py.crackfortran.fn1->os.path.join(inc_dir, fn)
A:numpy.f2py.crackfortran.typespattern4implicit->re.compile(beforethisafter % ('', fortrantypes + '|static|automatic|undefined', fortrantypes + '|static|automatic|undefined', '.*'), re.I)
A:numpy.f2py.crackfortran.d->str(params[d])
A:numpy.f2py.crackfortran.n->rmbadname1(m.group('name').strip())
A:numpy.f2py.crackfortran.crackline_re_1->re.compile('\\s*(?P<result>\\b[a-z]+\\w*\\b)\\s*=.*', re.I)
A:numpy.f2py.crackfortran.(_, has_semicolon)->split_by_unquoted(line, ';')
A:numpy.f2py.crackfortran.(line, semicolon_line)->split_by_unquoted(semicolon_line[1:], ';')
A:numpy.f2py.crackfortran.m1->re.compile('(?P<before>.*?)\\b' + p + '\\b(?P<after>.*)', re.I).match(ee)
A:numpy.f2py.crackfortran.m2->re.match('\\A\\s*(?P<local>\\b\\w+\\b)\\s*=\\s*>\\s*(?P<use>\\b\\w+\\b)\\s*\\Z', l, re.I)
A:numpy.f2py.crackfortran.a->expr2name(a, block, argsl)
A:numpy.f2py.crackfortran.(before, after)->split_by_unquoted(after[1:], comma + '()')
A:numpy.f2py.crackfortran.decl->setcharselector(decl, decl2[k], force)
A:numpy.f2py.crackfortran.selectpattern->re.compile('\\s*(?P<this>(@\\(@.*?@\\)@|\\*[\\d*]+|\\*\\s*@\\(@.*?@\\)@|))(?P<after>.*)\\Z', re.I)
A:numpy.f2py.crackfortran.nameargspattern->re.compile('\\s*(?P<name>\\b[\\w$]+\\b)\\s*(@\\(@\\s*(?P<args>[\\w\\s,]*)\\s*@\\)@|)\\s*((result(\\s*@\\(@\\s*(?P<result>\\b[\\w$]+\\b)\\s*@\\)@|))|(bind\\s*@\\(@\\s*(?P<bind>.*)\\s*@\\)@))*\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.callnameargspattern->re.compile('\\s*(?P<name>\\b[\\w$]+\\b)\\s*@\\(@\\s*(?P<args>.*)\\s*@\\)@\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.real16pattern->re.compile('([-+]?(?:\\d+(?:\\.\\d*)?|\\d*\\.\\d+))[dD]((?:[-+]?\\d+)?)')
A:numpy.f2py.crackfortran.real8pattern->re.compile('([-+]?((?:\\d+(?:\\.\\d*)?|\\d*\\.\\d+))[eE]((?:[-+]?\\d+)?)|(\\d+\\.\\d*))')
A:numpy.f2py.crackfortran._intentcallbackpattern->re.compile('intent\\s*\\(.*?\\bcallback\\b', re.I)
A:numpy.f2py.crackfortran.block->analyzecommon(block)
A:numpy.f2py.crackfortran.(name, args, result, bind)->_resolvenameargspattern(m.group('after'))
A:numpy.f2py.crackfortran.args->rmbadname([x.strip() for x in markoutercomma(args).split('@,@')])
A:numpy.f2py.crackfortran.groupcache[groupcounter]['prefix']->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('before')
A:numpy.f2py.crackfortran.groupcache[groupcounter]['name']->rmbadname1(name)
A:numpy.f2py.crackfortran.groupcache[groupcounter]['vars']->copy.deepcopy(groupcache[groupcounter - 2]['vars'])
A:numpy.f2py.crackfortran.groupcache[groupcounter]['vars'][name]->appenddecl(groupcache[groupcounter]['vars'][name], groupcache[groupcounter]['vars'][result])
A:numpy.f2py.crackfortran.t->determineexprtype(m.group('name'), vars, rules)
A:numpy.f2py.crackfortran.(typespec, selector, attr, edecl)->cracktypespec0(m.group('this'), m.group('after'))
A:numpy.f2py.crackfortran.last_name->updatevars(typespec, selector, attr, edecl)
A:numpy.f2py.crackfortran.ll->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('after').strip()
A:numpy.f2py.crackfortran.pl->ll[:i].strip()
A:numpy.f2py.crackfortran.ch->markoutercomma(pl).split('@,@')
A:numpy.f2py.crackfortran.k->rmbadname1(k)
A:numpy.f2py.crackfortran.params->get_parameters(vars, get_useparameters(block))
A:numpy.f2py.crackfortran.tt->list(v)
A:numpy.f2py.crackfortran.tt[m.start():m.end()]->list(v[m.start():m.end()].lower().replace('d', 'e'))
A:numpy.f2py.crackfortran.initexpr->initexpr[1:].lower().replace('d', 'e').replace(',', '+1j*(')
A:numpy.f2py.crackfortran.v->eval(v)
A:numpy.f2py.crackfortran.edecl[k]['=']->repr(v)
A:numpy.f2py.crackfortran.(kindselect, charselect, typename)->cracktypespec(typespec, selector)
A:numpy.f2py.crackfortran.begcendc->eval(e, g, l).strip()
A:numpy.f2py.crackfortran.dl->markoutercomma(d, ':').split('@:@')
A:numpy.f2py.crackfortran.llen->len(l[1])
A:numpy.f2py.crackfortran.bn->bn.strip().strip()
A:numpy.f2py.crackfortran.mm->re.compile('(?P<before>.*?)\\b' + p + '\\b(?P<after>.*)', re.I).match(ee).groupdict()
A:numpy.f2py.crackfortran.name->re.compile('(?P<before>.*?)\\b' + p + '\\b(?P<after>.*)', re.I).match(ee).group('name')
A:numpy.f2py.crackfortran.rl[m2.group('local').strip()]->re.match('\\A\\s*(?P<local>\\b\\w+\\b)\\s*=\\s*>\\s*(?P<use>\\b\\w+\\b)\\s*\\Z', l, re.I).group('use').strip()
A:numpy.f2py.crackfortran.d[m.group('this')]->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('after')
A:numpy.f2py.crackfortran.typespec->typespec.strip().lower().strip().lower()
A:numpy.f2py.crackfortran.d[k]->unmarkouterparen(d[k])
A:numpy.f2py.crackfortran.attr->ll[:i].strip()
A:numpy.f2py.crackfortran.namepattern->re.compile('\\s*(?P<name>\\b\\w+\\b)\\s*(?P<after>.*)\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.kindselector->re.compile('\\s*(\\(\\s*(kind\\s*=)?\\s*(?P<kind>.*)\\s*\\)|\\*\\s*(?P<kind2>.*?))\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.charselector->re.compile('\\s*(\\((?P<lenkind>.*)\\)|\\*\\s*(?P<charlen>.*))\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.lenkindpattern->re.compile('\\s*(kind\\s*=\\s*(?P<kind>.*?)\\s*(@,@\\s*len\\s*=\\s*(?P<len>.*)|)|(len\\s*=\\s*|)(?P<len2>.*?)\\s*(@,@\\s*(kind\\s*=\\s*|)(?P<kind2>.*)|))\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.lenarraypattern->re.compile('\\s*(@\\(@\\s*(?!/)\\s*(?P<array>.*?)\\s*@\\)@\\s*\\*\\s*(?P<len>.*?)|(\\*\\s*(?P<len2>.*?)|)\\s*(@\\(@\\s*(?!/)\\s*(?P<array2>.*?)\\s*@\\)@|))\\s*(=\\s*(?P<init>.*?)|(@\\(@|)/\\s*(?P<init2>.*?)\\s*/(@\\)@|)|)\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.expr->expr.strip().strip()
A:numpy.f2py.crackfortran.c->c.lower().lower()
A:numpy.f2py.crackfortran.s->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('start').lower()
A:numpy.f2py.crackfortran.ename->rmbadname1(m.group('name'))
A:numpy.f2py.crackfortran.edecl->groupcache[groupcounter]['vars'][ename].copy()
A:numpy.f2py.crackfortran.edecl['kindselector']->copy.copy(kindselect)
A:numpy.f2py.crackfortran.edecl['kindselector'][k]->copy.copy(kindselect[k])
A:numpy.f2py.crackfortran.edecl['charselector'][k]->copy.copy(charselect[k])
A:numpy.f2py.crackfortran.edecl['attrspec']->copy.copy(attrspec)
A:numpy.f2py.crackfortran.edecl['typespec']->copy.copy(typespec)
A:numpy.f2py.crackfortran.edecl['charselector']->copy.copy(charselect)
A:numpy.f2py.crackfortran.d1->re.compile('(?P<before>.*?)\\b' + p + '\\b(?P<after>.*)', re.I).match(ee).groupdict()
A:numpy.f2py.crackfortran.d1[k]->unmarkouterparen(d1[k])
A:numpy.f2py.crackfortran.kindselect->kindselect.groupdict().groupdict()
A:numpy.f2py.crackfortran.kindselect[k]->rmbadname1(i)
A:numpy.f2py.crackfortran.charselect->charselect.groupdict().groupdict()
A:numpy.f2py.crackfortran.lenkind->lenkind.groupdict().groupdict()
A:numpy.f2py.crackfortran.charselect[k]->rmbadname1(i)
A:numpy.f2py.crackfortran.typename->typename.group('name').group('name')
A:numpy.f2py.crackfortran.usedict->get_usedict(block)
A:numpy.f2py.crackfortran.usename->usename.lower().lower()
A:numpy.f2py.crackfortran.param_map->get_useparameters(block)
A:numpy.f2py.crackfortran.g->postcrack(g, tab=tab + '\t')
A:numpy.f2py.crackfortran.block['vars']->analyzevars(block)
A:numpy.f2py.crackfortran.block['sortvars']->sortvarnames(block['vars'])
A:numpy.f2py.crackfortran.block['body']->analyzebody(block, args, tab=tab)
A:numpy.f2py.crackfortran.mvars->copy.copy(block['vars'])
A:numpy.f2py.crackfortran.edef->copy.copy(bb)
A:numpy.f2py.crackfortran.b['saved_interface']->crack2fortrangen(b, '\n' + ' ' * 6, as_interface=True)
A:numpy.f2py.crackfortran.b->myeval(ee, {}, {})
A:numpy.f2py.crackfortran.getlincoef_re_1->re.compile('\\A\\b\\w+\\b\\Z', re.I)
A:numpy.f2py.crackfortran.len_e->len(e)
A:numpy.f2py.crackfortran.re_1->re.compile('(?P<before>.*?)\\b' + p + '\\b(?P<after>.*)', re.I)
A:numpy.f2py.crackfortran.c2->str(d2[2])
A:numpy.f2py.crackfortran.c1->str(d1[2])
A:numpy.f2py.crackfortran.word_pattern->re.compile('\\b[a-z][\\w$]*\\b', re.I)
A:numpy.f2py.crackfortran.words->vars[name].get('depend', [])
A:numpy.f2py.crackfortran.names->list(vars.keys())
A:numpy.f2py.crackfortran.depend_dict->_calc_depend_dict(vars)
A:numpy.f2py.crackfortran.machine->platform.machine().lower()
A:numpy.f2py.crackfortran.g_params->copy.copy(global_params)
A:numpy.f2py.crackfortran.kind_re->re.compile('\\bkind\\s*\\(\\s*(?P<value>.*)\\s*\\)', re.I)
A:numpy.f2py.crackfortran.selected_int_kind_re->re.compile('\\bselected_int_kind\\s*\\(\\s*(?P<value>.*)\\s*\\)', re.I)
A:numpy.f2py.crackfortran.selected_kind_re->re.compile('\\bselected_(int|real)_kind\\s*\\(\\s*(?P<value>.*)\\s*\\)', re.I)
A:numpy.f2py.crackfortran.orig_v_len->len(v)
A:numpy.f2py.crackfortran.v_->eval(v).split('_')
A:numpy.f2py.crackfortran.params[n]->chr(params[n])
A:numpy.f2py.crackfortran.nl->rmbadname1(m.group('name').strip()).lower()
A:numpy.f2py.crackfortran.value->str(eval(value, {}, params))
A:numpy.f2py.crackfortran.(implicitrules, attrrules)->buildimplicitrules(block)
A:numpy.f2py.crackfortran.vars->vars2fortran(block, block['vars'], argsl, tab + tabchar, as_interface=as_interface)
A:numpy.f2py.crackfortran.vars[n]->setattrspec(vars[n], 'recursive')
A:numpy.f2py.crackfortran.ln0->n[0].lower()
A:numpy.f2py.crackfortran.tmp->c.lower().lower().replace(' ', '')
A:numpy.f2py.crackfortran.note->note.replace('\\n ', '\n').replace('\\n ', '\n')
A:numpy.f2py.crackfortran.(d, v, di)->getarrlen(dl, list(block['vars'].keys()))
A:numpy.f2py.crackfortran.ni->len(vars[n]['dimension'])
A:numpy.f2py.crackfortran.length->_eval_length(vars[n]['charselector']['len'], params)
A:numpy.f2py.crackfortran.vars[n]['=']->_eval_scalar(vars[n]['='], params)
A:numpy.f2py.crackfortran.pr1->pr1.replace('recursive', '').replace('pure', '')
A:numpy.f2py.crackfortran.pr->pr1.replace('recursive', '').replace('pure', '').replace('recursive', '')
A:numpy.f2py.crackfortran.kindselect['kind']->eval(kindselect['kind'], {}, params)
A:numpy.f2py.crackfortran.neededvars->copy.copy(block['args'])
A:numpy.f2py.crackfortran.analyzeargs_re_1->re.compile('\\A[a-z]+[\\w$]*\\Z', re.I)
A:numpy.f2py.crackfortran.at->determineexprtype(a, block['vars'], implicitrules)
A:numpy.f2py.crackfortran.block['vars'][a]->setattrspec(block['vars'][a], 'external')
A:numpy.f2py.crackfortran.determineexprtype_re_1->re.compile('\\A\\(.+?,.+?\\)\\Z', re.I)
A:numpy.f2py.crackfortran.determineexprtype_re_2->re.compile('\\A[+-]?\\d+(_(?P<name>\\w+)|)\\Z', re.I)
A:numpy.f2py.crackfortran.determineexprtype_re_3->re.compile('\\A[+-]?[\\d.]+[-\\d+de.]*(_(?P<name>\\w+)|)\\Z', re.I)
A:numpy.f2py.crackfortran.determineexprtype_re_4->re.compile('\\A\\(.*\\)\\Z', re.I)
A:numpy.f2py.crackfortran.determineexprtype_re_5->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I)
A:numpy.f2py.crackfortran.rn->re.compile('\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I).match(expr).group('name')
A:numpy.f2py.crackfortran.use->use2fortran(block['use'], tab + tabchar)
A:numpy.f2py.crackfortran.common->common2fortran(block['common'], tab + tabchar)
A:numpy.f2py.crackfortran.body->crack2fortrangen(block['body'], tab + tabchar, as_interface=as_interface)
A:numpy.f2py.crackfortran.lst->true_intent_list(vars[a])
A:numpy.f2py.crackfortran.postlist->crackfortran(files)
A:numpy.f2py.crackfortran.pyf->crack2fortran(postlist)
numpy.f2py.crackfortran._calc_depend_dict(vars)
numpy.f2py.crackfortran._ensure_exprdict(r)
numpy.f2py.crackfortran._eval_length(length,params)
numpy.f2py.crackfortran._eval_scalar(value,params)
numpy.f2py.crackfortran._get_depend_dict(name,vars,deps)
numpy.f2py.crackfortran._is_intent_callback(vdecl)
numpy.f2py.crackfortran._kind_func(string)
numpy.f2py.crackfortran._resolvenameargspattern(line)
numpy.f2py.crackfortran._selected_int_kind_func(r)
numpy.f2py.crackfortran._selected_real_kind_func(p,r=0,radix=0)
numpy.f2py.crackfortran._simplifyargs(argsline)
numpy.f2py.crackfortran.analyzeargs(block)
numpy.f2py.crackfortran.analyzebody(block,args,tab='')
numpy.f2py.crackfortran.analyzecommon(block)
numpy.f2py.crackfortran.analyzeline(m,case,line)
numpy.f2py.crackfortran.analyzevars(block)
numpy.f2py.crackfortran.appenddecl(decl,decl2,force=1)
numpy.f2py.crackfortran.appendmultiline(group,context_name,ml)
numpy.f2py.crackfortran.buildimplicitrules(block)
numpy.f2py.crackfortran.common2fortran(common,tab='')
numpy.f2py.crackfortran.crack2fortran(block)
numpy.f2py.crackfortran.crack2fortrangen(block,tab='\n',as_interface=False)
numpy.f2py.crackfortran.crackfortran(files)
numpy.f2py.crackfortran.crackline(line,reset=0)
numpy.f2py.crackfortran.cracktypespec(typespec,selector)
numpy.f2py.crackfortran.cracktypespec0(typespec,ll)
numpy.f2py.crackfortran.determineexprtype(expr,vars,rules={})
numpy.f2py.crackfortran.expr2name(a,block,args=[])
numpy.f2py.crackfortran.get_parameters(vars,global_params={})
numpy.f2py.crackfortran.get_sorted_names(vars)
numpy.f2py.crackfortran.get_usedict(block)
numpy.f2py.crackfortran.get_useparameters(block,param_map=None)
numpy.f2py.crackfortran.getarrlen(dl,args,star='*')
numpy.f2py.crackfortran.getblockname(block,unknown='unknown')
numpy.f2py.crackfortran.getextension(name)
numpy.f2py.crackfortran.getlincoef(e,xset)
numpy.f2py.crackfortran.is_free_format(file)
numpy.f2py.crackfortran.markinnerspaces(line)
numpy.f2py.crackfortran.markoutercomma(line,comma=',')
numpy.f2py.crackfortran.markouterparen(line)
numpy.f2py.crackfortran.myeval(e,g=None,l=None)
numpy.f2py.crackfortran.outmess(line,flag=1)
numpy.f2py.crackfortran.postcrack(block,args=None,tab='')
numpy.f2py.crackfortran.postcrack2(block,tab='',param_map=None)
numpy.f2py.crackfortran.readfortrancode(ffile,dowithline=show,istop=1)
numpy.f2py.crackfortran.removespaces(expr)
numpy.f2py.crackfortran.reset_global_f2py_vars()
numpy.f2py.crackfortran.rmbadname(names)
numpy.f2py.crackfortran.rmbadname1(name)
numpy.f2py.crackfortran.setattrspec(decl,attr,force=0)
numpy.f2py.crackfortran.setcharselector(decl,sel,force=0)
numpy.f2py.crackfortran.setkindselector(decl,sel,force=0)
numpy.f2py.crackfortran.setmesstext(block)
numpy.f2py.crackfortran.sortvarnames(vars)
numpy.f2py.crackfortran.split_by_unquoted(line,characters)
numpy.f2py.crackfortran.true_intent_list(var)
numpy.f2py.crackfortran.undo_rmbadname(names)
numpy.f2py.crackfortran.undo_rmbadname1(name)
numpy.f2py.crackfortran.unmarkouterparen(line)
numpy.f2py.crackfortran.updatevars(typespec,selector,attrspec,entitydecl)
numpy.f2py.crackfortran.use2fortran(use,tab='')
numpy.f2py.crackfortran.vars2fortran(block,vars,args,tab='',as_interface=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/cfuncs.py----------------------------------------
A:numpy.f2py.cfuncs.t->append_needs(nn, flag)
A:numpy.f2py.cfuncs.saveout->copy.copy(outneeds[n])
numpy.f2py.cfuncs.append_needs(need,flag=1)
numpy.f2py.cfuncs.buildcfuncs()
numpy.f2py.cfuncs.get_needs()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/__version__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/f90mod_rules.py----------------------------------------
A:numpy.f2py.f90mod_rules.vrd->capi_maps.modsign2map(m)
A:numpy.f2py.f90mod_rules.note->'\n'.join(note)
A:numpy.f2py.f90mod_rules.ct->capi_maps.getctype(var)
A:numpy.f2py.f90mod_rules.dm->capi_maps.getarrdims(n, var)
A:numpy.f2py.f90mod_rules.dms->range(1, int(dm['rank']) + 1)
A:numpy.f2py.f90mod_rules.(api, wrap)->rules.buildapi(b)
A:numpy.f2py.f90mod_rules.ar->applyrules(api, vrd)
A:numpy.f2py.f90mod_rules.ret->dictappend(ret, ar)
numpy.f2py.f90mod_rules.buildhooks(pymod)
numpy.f2py.f90mod_rules.findf90modules(m)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_block_docstring.py----------------------------------------
numpy.f2py.tests.test_block_docstring.TestBlockDocString(util.F2PyTest)
numpy.f2py.tests.test_block_docstring.TestBlockDocString.test_block_docstring(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/util.py----------------------------------------
A:numpy.f2py.tests.util._module_dir->tempfile.mkdtemp()
A:numpy.f2py.tests.util.d->get_module_dir()
A:numpy.f2py.tests.util.key->repr((a, kw))
A:numpy.f2py.tests.util.memo[key]->func(*a, **kw)
A:numpy.f2py.tests.util.dst->os.path.join(d, os.path.basename(fn))
A:numpy.f2py.tests.util.(base, ext)->os.path.splitext(dst)
A:numpy.f2py.tests.util.module_name->get_temp_module_name()
A:numpy.f2py.tests.util.cwd->os.getcwd()
A:numpy.f2py.tests.util.p->subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
A:numpy.f2py.tests.util.(out, err)->subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()
A:numpy.f2py.tests.util.code->textwrap.dedent("        import os\n        import sys\n        sys.path = %(syspath)s\n\n        def configuration(parent_name='',top_path=None):\n            global config\n            from numpy.distutils.misc_util import Configuration\n            config = Configuration('', parent_name, top_path)\n            return config\n\n        from numpy.distutils.core import setup\n        setup(configuration=configuration)\n\n        config_cmd = config.get_config_cmd()\n        have_c = config_cmd.try_compile('void foo() {}')\n        print('COMPILERS:%%d,%%d,%%d' %% (have_c,\n                                          config.have_f77c(),\n                                          config.have_f90c()))\n        sys.exit(99)\n        ")
A:numpy.f2py.tests.util.tmpdir->tempfile.mkdtemp()
A:numpy.f2py.tests.util.script->os.path.join(d, get_temp_module_name() + '.py')
A:numpy.f2py.tests.util.m->re.search(b'COMPILERS:(\\d+),(\\d+),(\\d+)', out)
A:numpy.f2py.tests.util.config_code->textwrap.dedent(config_code).replace('\n', '\n    ')
A:numpy.f2py.tests.util.self.module->build_module(self.sources, options=self.options, skip=self.skip, only=self.only, module_name=self.module_name)
numpy.f2py.tests.util.F2PyTest
numpy.f2py.tests.util.F2PyTest.setup(self)
numpy.f2py.tests.util._cleanup()
numpy.f2py.tests.util._get_compiler_status()
numpy.f2py.tests.util._memoize(func)
numpy.f2py.tests.util.build_code(source_code,options=[],skip=[],only=[],suffix=None,module_name=None)
numpy.f2py.tests.util.build_module(source_files,options=[],skip=[],only=[],module_name=None)
numpy.f2py.tests.util.build_module_distutils(source_files,config_code,module_name,**kw)
numpy.f2py.tests.util.get_module_dir()
numpy.f2py.tests.util.get_temp_module_name()
numpy.f2py.tests.util.has_c_compiler()
numpy.f2py.tests.util.has_f77_compiler()
numpy.f2py.tests.util.has_f90_compiler()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_quoted_character.py----------------------------------------
numpy.f2py.tests.test_quoted_character.TestQuotedCharacter(util.F2PyTest)
numpy.f2py.tests.test_quoted_character.TestQuotedCharacter.test_quoted_character(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_return_real.py----------------------------------------
A:numpy.f2py.tests.test_return_real.r->t(10 ** 400)
numpy.f2py.tests.test_return_real.TestCReturnReal(TestReturnReal)
numpy.f2py.tests.test_return_real.TestCReturnReal.test_all(self,name)
numpy.f2py.tests.test_return_real.TestF77ReturnReal(TestReturnReal)
numpy.f2py.tests.test_return_real.TestF77ReturnReal.test_all(self,name)
numpy.f2py.tests.test_return_real.TestF90ReturnReal(TestReturnReal)
numpy.f2py.tests.test_return_real.TestF90ReturnReal.test_all(self,name)
numpy.f2py.tests.test_return_real.TestReturnReal(util.F2PyTest)
numpy.f2py.tests.test_return_real.TestReturnReal.check_function(self,t,tname)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_array_from_pyobj.py----------------------------------------
A:numpy.f2py.tests.test_array_from_pyobj.d->os.path.dirname(__file__)
A:numpy.f2py.tests.test_array_from_pyobj.wrap->util.build_module_distutils(src, config_code, 'test_array_from_pyobj_ext')
A:numpy.f2py.tests.test_array_from_pyobj.name->name.lower().lower()
A:numpy.f2py.tests.test_array_from_pyobj.intent->Intent()
A:numpy.f2py.tests.test_array_from_pyobj.obj->numpy.array(self.num23seq, dtype=t.dtype)
A:numpy.f2py.tests.test_array_from_pyobj.self.NAME->name.lower().lower().upper()
A:numpy.f2py.tests.test_array_from_pyobj.self.type_num->getattr(wrap, 'NPY_' + self.NAME)
A:numpy.f2py.tests.test_array_from_pyobj.self.dtype->numpy.dtype(info.type)
A:numpy.f2py.tests.test_array_from_pyobj.self.obj_copy->copy.deepcopy(obj)
A:numpy.f2py.tests.test_array_from_pyobj.self.arr->util.build_module_distutils(src, config_code, 'test_array_from_pyobj_ext').call(typ.type_num, dims, intent.flags, obj)
A:numpy.f2py.tests.test_array_from_pyobj.self.arr_attr->util.build_module_distutils(src, config_code, 'test_array_from_pyobj_ext').array_attrs(self.arr)
A:numpy.f2py.tests.test_array_from_pyobj.self.pyarr->numpy.array(np.array(obj, dtype=typ.dtypechar).reshape(*dims), order=self.intent.is_intent('c') and 'C' or 'F')
A:numpy.f2py.tests.test_array_from_pyobj.self.pyarr_attr->util.build_module_distutils(src, config_code, 'test_array_from_pyobj_ext').array_attrs(self.pyarr)
A:numpy.f2py.tests.test_array_from_pyobj.obj_attr->util.build_module_distutils(src, config_code, 'test_array_from_pyobj_ext').array_attrs(self.obj)
A:numpy.f2py.tests.test_array_from_pyobj.request.cls.type->Type(request.param)
A:numpy.f2py.tests.test_array_from_pyobj.a->self.array(shape, intent.inplace, obj)
A:numpy.f2py.tests.test_array_from_pyobj.seq->getattr(self, 'num' + inp)
numpy.f2py.tests.test_array_from_pyobj.Array(self,typ,dims,intent,obj)
numpy.f2py.tests.test_array_from_pyobj.Array.__init__(self,typ,dims,intent,obj)
numpy.f2py.tests.test_array_from_pyobj.Array.__str__(self)
numpy.f2py.tests.test_array_from_pyobj.Array.arr_equal(self,arr1,arr2)
numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory(self)
numpy.f2py.tests.test_array_from_pyobj.Intent(self,intent_list=[])
numpy.f2py.tests.test_array_from_pyobj.Intent.__getattr__(self,name)
numpy.f2py.tests.test_array_from_pyobj.Intent.__init__(self,intent_list=[])
numpy.f2py.tests.test_array_from_pyobj.Intent.__repr__(self)
numpy.f2py.tests.test_array_from_pyobj.Intent.__str__(self)
numpy.f2py.tests.test_array_from_pyobj.Intent.is_intent(self,*names)
numpy.f2py.tests.test_array_from_pyobj.Intent.is_intent_exact(self,*names)
numpy.f2py.tests.test_array_from_pyobj.TestIntent
numpy.f2py.tests.test_array_from_pyobj.TestIntent.test_in_out(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.setup_type(self,request)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_c_copy_in_from_23casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_c_in_from_23casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_c_in_from_23seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_c_inout_23seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_cache_hidden(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_f_copy_in_from_23casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_f_in_from_23casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_f_inout_23seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_hidden(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_cache_from_2casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_cache_from_2casttype_failure(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_copy_from_2casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_from_23casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_from_2casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_from_2seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_in_nocopy(self,write,order,inp)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_inout_2seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_inplace(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_inplace_from_casttype(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_optional_from_23seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_optional_from_2seq(self)
numpy.f2py.tests.test_array_from_pyobj.TestSharedMemory.test_optional_none(self)
numpy.f2py.tests.test_array_from_pyobj.Type(cls,name)
numpy.f2py.tests.test_array_from_pyobj.Type.__new__(cls,name)
numpy.f2py.tests.test_array_from_pyobj.Type._init(self,name)
numpy.f2py.tests.test_array_from_pyobj.Type.all_types(self)
numpy.f2py.tests.test_array_from_pyobj.Type.cast_types(self)
numpy.f2py.tests.test_array_from_pyobj.Type.equal_types(self)
numpy.f2py.tests.test_array_from_pyobj.Type.larger_types(self)
numpy.f2py.tests.test_array_from_pyobj.Type.smaller_types(self)
numpy.f2py.tests.test_array_from_pyobj.flags2names(flags)
numpy.f2py.tests.test_array_from_pyobj.flags_info(arr)
numpy.f2py.tests.test_array_from_pyobj.setup_module()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_return_integer.py----------------------------------------
numpy.f2py.tests.test_return_integer.TestF77ReturnInteger(TestReturnInteger)
numpy.f2py.tests.test_return_integer.TestF77ReturnInteger.test_all(self,name)
numpy.f2py.tests.test_return_integer.TestF90ReturnInteger(TestReturnInteger)
numpy.f2py.tests.test_return_integer.TestF90ReturnInteger.test_all(self,name)
numpy.f2py.tests.test_return_integer.TestReturnInteger(util.F2PyTest)
numpy.f2py.tests.test_return_integer.TestReturnInteger.check_function(self,t,tname)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_assumed_shape.py----------------------------------------
A:numpy.f2py.tests.test_assumed_shape.r->self.module.mod.fsum([1, 2])
A:numpy.f2py.tests.test_assumed_shape.self.sources->list(self.sources)
A:numpy.f2py.tests.test_assumed_shape.f2cmap_src->self.sources.pop(-1)
A:numpy.f2py.tests.test_assumed_shape.self.f2cmap_file->tempfile.NamedTemporaryFile(delete=False)
numpy.f2py.tests.test_assumed_shape.TestAssumedShapeSumExample(util.F2PyTest)
numpy.f2py.tests.test_assumed_shape.TestAssumedShapeSumExample.test_all(self)
numpy.f2py.tests.test_assumed_shape.TestF2cmapOption(TestAssumedShapeSumExample)
numpy.f2py.tests.test_assumed_shape.TestF2cmapOption.setup(self)
numpy.f2py.tests.test_assumed_shape.TestF2cmapOption.teardown(self)
numpy.f2py.tests.test_assumed_shape._path(*a)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_kind.py----------------------------------------
numpy.f2py.tests.test_kind.TestKind(util.F2PyTest)
numpy.f2py.tests.test_kind.TestKind.test_all(self)
numpy.f2py.tests.test_kind._path(*a)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_module_doc.py----------------------------------------
numpy.f2py.tests.test_module_doc.TestModuleDocString(util.F2PyTest)
numpy.f2py.tests.test_module_doc.TestModuleDocString.test_module_docstring(self)
numpy.f2py.tests.test_module_doc._path(*a)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_mixed.py----------------------------------------
A:numpy.f2py.tests.test_mixed.expected->textwrap.dedent('        a = bar11()\n\n        Wrapper for ``bar11``.\n\n        Returns\n        -------\n        a : int\n        ')
numpy.f2py.tests.test_mixed.TestMixed(util.F2PyTest)
numpy.f2py.tests.test_mixed.TestMixed.test_all(self)
numpy.f2py.tests.test_mixed.TestMixed.test_docstring(self)
numpy.f2py.tests.test_mixed._path(*a)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_parameter.py----------------------------------------
A:numpy.f2py.tests.test_parameter.x->numpy.arange(3, dtype=np.float64)
numpy.f2py.tests.test_parameter.TestParameters(util.F2PyTest)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_both(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_compound_int(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_integer_int(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_integer_long(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_no(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_non_compound_int(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_real_double(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_real_single(self)
numpy.f2py.tests.test_parameter.TestParameters.test_constant_sum(self)
numpy.f2py.tests.test_parameter._path(*a)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_compile_function.py----------------------------------------
A:numpy.f2py.tests.test_compile_function.moddir->util.get_module_dir()
A:numpy.f2py.tests.test_compile_function.modname->util.get_temp_module_name()
A:numpy.f2py.tests.test_compile_function.cwd->os.getcwd()
A:numpy.f2py.tests.test_compile_function.target->os.path.join(moddir, str(uuid.uuid4()) + '.f')
A:numpy.f2py.tests.test_compile_function.ret_val->numpy.f2py.compile(fsource, modulename='test_compile_from_strings', extension='.f90')
A:numpy.f2py.tests.test_compile_function.return_check->import_module(modname)
A:numpy.f2py.tests.test_compile_function.calc_result->import_module(modname).foo()
numpy.f2py.tests.test_compile_function.setup_module()
numpy.f2py.tests.test_compile_function.test_compile_from_strings(tmpdir,fsource)
numpy.f2py.tests.test_compile_function.test_f2py_init_compile(extra_args)
numpy.f2py.tests.test_compile_function.test_f2py_init_compile_bad_cmd()
numpy.f2py.tests.test_compile_function.test_f2py_init_compile_failure()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_abstract_interface.py----------------------------------------
A:numpy.f2py.tests.test_abstract_interface.code->textwrap.dedent('\n        module ops_module\n\n          abstract interface\n            subroutine op(x, y, z)\n              integer, intent(in) :: x, y\n              integer, intent(out) :: z\n            end subroutine\n          end interface\n\n        contains\n\n          subroutine foo(x, y, r1, r2)\n            integer, intent(in) :: x, y\n            integer, intent(out) :: r1, r2\n            procedure (op) add1, add2\n            procedure (op), pointer::p\n            p=>add1\n            call p(x, y, r1)\n            p=>add2\n            call p(x, y, r2)\n          end subroutine\n        end module\n\n        subroutine add1(x, y, z)\n          integer, intent(in) :: x, y\n          integer, intent(out) :: z\n          z = x + y\n        end subroutine\n\n        subroutine add2(x, y, z)\n          integer, intent(in) :: x, y\n          integer, intent(out) :: z\n          z = x + 2 * y\n        end subroutine\n        ')
A:numpy.f2py.tests.test_abstract_interface.mod->numpy.f2py.crackfortran.crackfortran([str(f_path)])
numpy.f2py.tests.test_abstract_interface.TestAbstractInterface(util.F2PyTest)
numpy.f2py.tests.test_abstract_interface.TestAbstractInterface.test_abstract_interface(self)
numpy.f2py.tests.test_abstract_interface.TestAbstractInterface.test_parse_abstract_interface(self,tmp_path)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_crackfortran.py----------------------------------------
A:numpy.f2py.tests.test_crackfortran.k->numpy.array([1, 2, 3], dtype=np.float64)
A:numpy.f2py.tests.test_crackfortran.w->numpy.array([1, 2, 3], dtype=np.float64)
A:numpy.f2py.tests.test_crackfortran.mod->numpy.f2py.crackfortran.crackfortran([str(f_path)])
A:numpy.f2py.tests.test_crackfortran.r->self.module.gh2848(1, 2)
A:numpy.f2py.tests.test_crackfortran.code->textwrap.dedent('\n      subroutine gh2848( &\n        ! first 2 parameters\n        par1, par2,&\n        ! last 2 parameters\n        par3, par4)\n\n        integer, intent(in)  :: par1, par2\n        integer, intent(out) :: par3, par4\n\n        par3 = par1\n        par4 = par2\n\n      end subroutine gh2848\n    ')
numpy.f2py.tests.test_crackfortran.TestCrackFortran(util.F2PyTest)
numpy.f2py.tests.test_crackfortran.TestCrackFortran.test_gh2848(self)
numpy.f2py.tests.test_crackfortran.TestExternal(util.F2PyTest)
numpy.f2py.tests.test_crackfortran.TestExternal.test_external_as_attribute(self)
numpy.f2py.tests.test_crackfortran.TestExternal.test_external_as_statement(self)
numpy.f2py.tests.test_crackfortran.TestNoSpace(util.F2PyTest)
numpy.f2py.tests.test_crackfortran.TestNoSpace.test_module(self)
numpy.f2py.tests.test_crackfortran.TestPublicPrivate
numpy.f2py.tests.test_crackfortran.TestPublicPrivate.test_defaultPrivate(self,tmp_path)
numpy.f2py.tests.test_crackfortran.TestPublicPrivate.test_defaultPublic(self,tmp_path)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_size.py----------------------------------------
A:numpy.f2py.tests.test_size.r->self.module.flatten([[1, 2, 3], [4, 5, 6]])
numpy.f2py.tests.test_size.TestSizeSumExample(util.F2PyTest)
numpy.f2py.tests.test_size.TestSizeSumExample.test_all(self)
numpy.f2py.tests.test_size.TestSizeSumExample.test_flatten(self)
numpy.f2py.tests.test_size.TestSizeSumExample.test_transpose(self)
numpy.f2py.tests.test_size._path(*a)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_string.py----------------------------------------
A:numpy.f2py.tests.test_string.(inp, out)->self.module.char_test.change_strings(strings, strings.shape[1])
A:numpy.f2py.tests.test_string.expected->strings.copy()
numpy.f2py.tests.test_string.TestString(util.F2PyTest)
numpy.f2py.tests.test_string.TestString.test_char(self)
numpy.f2py.tests.test_string._path(*a)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_return_character.py----------------------------------------
A:numpy.f2py.tests.test_return_character.r->t(array(77, 'u1'))
numpy.f2py.tests.test_return_character.TestF77ReturnCharacter(TestReturnCharacter)
numpy.f2py.tests.test_return_character.TestF77ReturnCharacter.test_all(self,name)
numpy.f2py.tests.test_return_character.TestF90ReturnCharacter(TestReturnCharacter)
numpy.f2py.tests.test_return_character.TestF90ReturnCharacter.test_all(self,name)
numpy.f2py.tests.test_return_character.TestReturnCharacter(util.F2PyTest)
numpy.f2py.tests.test_return_character.TestReturnCharacter.check_function(self,t,tname)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_regression.py----------------------------------------
A:numpy.f2py.tests.test_regression.x->numpy.arange(3, dtype=np.float32)
A:numpy.f2py.tests.test_regression.incdir->numpy.f2py.get_include()
A:numpy.f2py.tests.test_regression.fnames_in_dir->os.listdir(incdir)
numpy.f2py.tests.test_regression.TestIntentInOut(util.F2PyTest)
numpy.f2py.tests.test_regression.TestIntentInOut.test_inout(self)
numpy.f2py.tests.test_regression.TestNumpyVersionAttribute(util.F2PyTest)
numpy.f2py.tests.test_regression.TestNumpyVersionAttribute.test_numpy_version_attribute(self)
numpy.f2py.tests.test_regression._path(*a)
numpy.f2py.tests.test_regression.test_include_path()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_semicolon_split.py----------------------------------------
A:numpy.f2py.tests.test_semicolon_split.code->"\npython module {module}\n    usercode '''\nvoid foo(int* x) {{\n}}\n'''\n    interface\n        subroutine foo(x)\n            intent(c) foo\n            integer intent(out) :: x\n            callprotoargument int*\n            callstatement {{ &\n                ; &\n                x = 42; &\n            }}\n        end subroutine foo\n    end interface\nend python module {module}\n    ".format(module=module_name)
numpy.f2py.tests.test_semicolon_split.TestCallstatement(util.F2PyTest)
numpy.f2py.tests.test_semicolon_split.TestCallstatement.test_callstatement(self)
numpy.f2py.tests.test_semicolon_split.TestMultiline(util.F2PyTest)
numpy.f2py.tests.test_semicolon_split.TestMultiline.test_multiline(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_common.py----------------------------------------
numpy.f2py.tests.test_common.TestCommonBlock(util.F2PyTest)
numpy.f2py.tests.test_common.TestCommonBlock.test_common_block(self)
numpy.f2py.tests.test_common._path(*a)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_return_logical.py----------------------------------------
numpy.f2py.tests.test_return_logical.TestF77ReturnLogical(TestReturnLogical)
numpy.f2py.tests.test_return_logical.TestF77ReturnLogical.test_all(self,name)
numpy.f2py.tests.test_return_logical.TestF90ReturnLogical(TestReturnLogical)
numpy.f2py.tests.test_return_logical.TestF90ReturnLogical.test_all(self,name)
numpy.f2py.tests.test_return_logical.TestReturnLogical(util.F2PyTest)
numpy.f2py.tests.test_return_logical.TestReturnLogical.check_function(self,t)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_return_complex.py----------------------------------------
A:numpy.f2py.tests.test_return_complex.r->t(10 ** 400)
numpy.f2py.tests.test_return_complex.TestF77ReturnComplex(TestReturnComplex)
numpy.f2py.tests.test_return_complex.TestF77ReturnComplex.test_all(self,name)
numpy.f2py.tests.test_return_complex.TestF90ReturnComplex(TestReturnComplex)
numpy.f2py.tests.test_return_complex.TestF90ReturnComplex.test_all(self,name)
numpy.f2py.tests.test_return_complex.TestReturnComplex(util.F2PyTest)
numpy.f2py.tests.test_return_complex.TestReturnComplex.check_function(self,t,tname)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/f2py/tests/test_callback.py----------------------------------------
A:numpy.f2py.tests.test_callback.expected->textwrap.dedent('        a = t(fun,[fun_extra_args])\n\n        Wrapper for ``t``.\n\n        Parameters\n        ----------\n        fun : call-back function\n\n        Other Parameters\n        ----------------\n        fun_extra_args : input tuple, optional\n            Default: ()\n\n        Returns\n        -------\n        a : int\n\n        Notes\n        -----\n        Call-back functions::\n\n          def fun(): return a\n          Return objects:\n            a : int\n        ')
A:numpy.f2py.tests.test_callback.t->getattr(self.module, name)
A:numpy.f2py.tests.test_callback.r->self.module.gh18335(foo)
A:numpy.f2py.tests.test_callback.a->A()
A:numpy.f2py.tests.test_callback.f->getattr(self.module, 'string_callback_array')
A:numpy.f2py.tests.test_callback.cu->numpy.zeros((1, 8), 'S1')
A:numpy.f2py.tests.test_callback.res->f(callback, cu, len(cu))
A:numpy.f2py.tests.test_callback.errors->'\n\n'.join(errors)
A:numpy.f2py.tests.test_callback.code->textwrap.dedent('\n        ! When gh18335_workaround is defined as an extension,\n        ! the issue cannot be reproduced.\n        !subroutine gh18335_workaround(f, y)\n        !  implicit none\n        !  external f\n        !  integer(kind=1) :: y(1)\n        !  call f(y)\n        !end subroutine gh18335_workaround\n\n        function gh18335(f) result (r)\n          implicit none\n          external f\n          integer(kind=1) :: y(1), r\n          y(1) = 123\n          call f(y)\n          r = y(1)\n        end function gh18335\n        ')
A:numpy.f2py.tests.test_callback.y->numpy.array([1, 2, 3], dtype=np.int8)
numpy.f2py.tests.test_callback.TestF77Callback(util.F2PyTest)
numpy.f2py.tests.test_callback.TestF77Callback.check_function(self,name)
numpy.f2py.tests.test_callback.TestF77Callback.test_all(self,name)
numpy.f2py.tests.test_callback.TestF77Callback.test_docstring(self)
numpy.f2py.tests.test_callback.TestF77Callback.test_hidden_callback(self)
numpy.f2py.tests.test_callback.TestF77Callback.test_string_callback(self)
numpy.f2py.tests.test_callback.TestF77Callback.test_string_callback_array(self)
numpy.f2py.tests.test_callback.TestF77Callback.test_threadsafety(self)
numpy.f2py.tests.test_callback.TestF77CallbackPythonTLS(TestF77Callback)
numpy.f2py.tests.test_callback.TestF90Callback(util.F2PyTest)
numpy.f2py.tests.test_callback.TestF90Callback.test_gh17797(self)
numpy.f2py.tests.test_callback.TestGH18335(util.F2PyTest)
numpy.f2py.tests.test_callback.TestGH18335.test_gh18335(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/doc/ufuncs.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/doc/__init__.py----------------------------------------
A:numpy.doc.__init__.ref_dir->os.path.join(os.path.dirname(__file__))
A:numpy.doc.__init__.__all__->sorted((f[:-3] for f in os.listdir(ref_dir) if f.endswith('.py') and (not f.startswith('__'))))


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/doc/constants.py----------------------------------------
A:numpy.doc.constants.s->'\n'.join(new_lines)
A:numpy.doc.constants.lines->'\n'.join(new_lines).split('\n')
A:numpy.doc.constants.m->re.match('^(\\s+)[-=]+\\s*$', line)
A:numpy.doc.constants.prev->textwrap.dedent(new_lines.pop())
A:numpy.doc.constants.constants_str->'\n'.join(constants_str)
numpy.doc.constants.add_newdoc(module,name,doc)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/testing/utils.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/testing/__init__.py----------------------------------------
A:numpy.testing.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/testing/__init__.pyi----------------------------------------
numpy.testing.__init__.IgnoreException(Exception)
numpy.testing.__init__.KnownFailureException(Exception)
numpy.testing.__init__._assert_valid_refcount(op)
numpy.testing.__init__._gen_alignment_data(dtype=...,type=...,max_size=...)
numpy.testing.__init__.assert_(val,msg=...)
numpy.testing.__init__.assert_allclose(actual,desired,rtol=...,atol=...,equal_nan=...,err_msg=...,verbose=...)
numpy.testing.__init__.assert_almost_equal(actual,desired,decimal=...,err_msg=...,verbose=...)
numpy.testing.__init__.assert_approx_equal(actual,desired,significant=...,err_msg=...,verbose=...)
numpy.testing.__init__.assert_array_almost_equal(x,y,decimal=...,err_msg=...,verbose=...)
numpy.testing.__init__.assert_array_almost_equal_nulp(x,y,nulp=...)
numpy.testing.__init__.assert_array_compare(comparison,x,y,err_msg=...,verbose=...,header=...,precision=...,equal_nan=...,equal_inf=...)
numpy.testing.__init__.assert_array_equal(x,y,err_msg=...,verbose=...)
numpy.testing.__init__.assert_array_less(x,y,err_msg=...,verbose=...)
numpy.testing.__init__.assert_array_max_ulp(a,b,maxulp=...,dtype=...)
numpy.testing.__init__.assert_equal(actual,desired,err_msg=...,verbose=...)
numpy.testing.__init__.assert_no_gc_cycles(*args,**kwargs)
numpy.testing.__init__.assert_no_warnings(*args,**kwargs)
numpy.testing.__init__.assert_raises(*args,**kwargs)
numpy.testing.__init__.assert_raises_regex(exception_class,expected_regexp,*args,**kwargs)
numpy.testing.__init__.assert_string_equal(actual,desired)
numpy.testing.__init__.assert_warns(warning_class,*args,**kwargs)
numpy.testing.__init__.break_cycles()
numpy.testing.__init__.build_err_msg(arrays,err_msg,header=...,verbose=...,names=...,precision=...)
numpy.testing.__init__.clear_and_catch_warnings(self,record=...,modules=...)
numpy.testing.__init__.clear_and_catch_warnings.__enter__(self)
numpy.testing.__init__.clear_and_catch_warnings.__exit__(self,*exc_info)
numpy.testing.__init__.clear_and_catch_warnings.__init__(self,record=...,modules=...)
numpy.testing.__init__.decorate_methods(cls,decorator,testmatch=...)
numpy.testing.__init__.jiffies(_proc_pid_stat=...,_load_time=...)
numpy.testing.__init__.measure(code_str,times=...,label=...)
numpy.testing.__init__.memusage(processName=...,instance=...)
numpy.testing.__init__.print_assert_equal(test_string,actual,desired)
numpy.testing.__init__.raises(*args)
numpy.testing.__init__.run_module_suite(file_to_run=...,argv=...)
numpy.testing.__init__.rundocs(filename=...,raise_on_error=...)
numpy.testing.__init__.runstring(astr,dict)
numpy.testing.__init__.suppress_warnings(self,forwarding_rule=...)
numpy.testing.__init__.suppress_warnings.__enter__(self)
numpy.testing.__init__.suppress_warnings.__exit__(self,*exc_info)
numpy.testing.__init__.suppress_warnings.__init__(self,forwarding_rule=...)
numpy.testing.__init__.suppress_warnings.filter(self,category=...,message=...,module=...)
numpy.testing.__init__.suppress_warnings.record(self,category=...,message=...,module=...)
numpy.testing.__init__.tempdir(*args,**kwargs)
numpy.testing.__init__.temppath(*args,**kwargs)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/testing/setup.py----------------------------------------
A:numpy.testing.setup.config->Configuration('testing', parent_package, top_path)
numpy.testing.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/testing/print_coercion_tables.py----------------------------------------
A:numpy.testing.print_coercion_tables.dtype->numpy.dtype(x.type)
A:numpy.testing.print_coercion_tables.rowtype->numpy.obj2sctype(row)
A:numpy.testing.print_coercion_tables.coltype->numpy.obj2sctype(col)
A:numpy.testing.print_coercion_tables.rowvalue->rowtype(inputfirstvalue)
A:numpy.testing.print_coercion_tables.colvalue->coltype(inputsecondvalue)
A:numpy.testing.print_coercion_tables.value->numpy.add(rowvalue, colvalue)
A:numpy.testing.print_coercion_tables.cast_info->namedtuple('cast_info', ['can_cast', 'legacy', 'flags'])
A:numpy.testing.print_coercion_tables.no_cast_info->cast_info(' ', ' ', ' ')
A:numpy.testing.print_coercion_tables.casts->get_all_cast_information()
A:numpy.testing.print_coercion_tables.dtypes->sorted(dtypes, key=sorter)
A:numpy.testing.print_coercion_tables.to_dict[cast['to']]->cast_info(can_cast=can_cast, legacy=legacy, flags=flags)
A:numpy.testing.print_coercion_tables.indx->types.index(dtype.char)
A:numpy.testing.print_coercion_tables.row->table.get(from_dt, {})
numpy.testing.print_coercion_tables.GenericObject(self,v)
numpy.testing.print_coercion_tables.GenericObject.__add__(self,other)
numpy.testing.print_coercion_tables.GenericObject.__init__(self,v)
numpy.testing.print_coercion_tables.GenericObject.__radd__(self,other)
numpy.testing.print_coercion_tables.print_cancast_table(ntypes)
numpy.testing.print_coercion_tables.print_coercion_table(ntypes,inputfirstvalue,inputsecondvalue,firstarray,use_promote_types=False)
numpy.testing.print_coercion_tables.print_new_cast_table(*,can_cast=True,legacy=False,flags=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/testing/_private/parameterized.py----------------------------------------
A:numpy.testing._private.parameterized._param->namedtuple('param', 'args kwargs')
A:numpy.testing._private.parameterized.argspec->inspect.getargspec(func)
A:numpy.testing._private.parameterized.result->list(zip(named_args, p.args))
A:numpy.testing._private.parameterized.keywords->dict(sorted([(name, p.kwargs[name]) for name in p.kwargs if name not in seen_arg_names]))
A:numpy.testing._private.parameterized.x_repr->str(x_repr, 'latin1')
A:numpy.testing._private.parameterized.all_args_with_values->parameterized_argument_value_pairs(func, p)
A:numpy.testing._private.parameterized.(first, nl, rest)->func.__doc__.lstrip().partition('\n')
A:numpy.testing._private.parameterized._test_runners->set(['unittest', 'unittest2', 'nose', 'nose2', 'pytest'])
A:numpy.testing._private.parameterized.stack->inspect.stack()
A:numpy.testing._private.parameterized.self.get_input->self.input_as_callable(input)
A:numpy.testing._private.parameterized.p->param.from_decorator(args)
A:numpy.testing._private.parameterized.(unbound_func, nose_tuple)->self.param_as_nose_tuple(test_self, test_func, num, p)
A:numpy.testing._private.parameterized.wrapper.parameterized_input->self.get_input()
A:numpy.testing._private.parameterized.nose_func->MethodType(nose_func, test_self)
A:numpy.testing._private.parameterized.nose_func.__doc__->self.doc_func(func, num, p)
A:numpy.testing._private.parameterized.parent_classes->self._terrible_magic_get_defining_classes()
A:numpy.testing._private.parameterized.(_, _, parents)->code_context.partition('(')
A:numpy.testing._private.parameterized.(parents, _, _)->parents.partition(')')
A:numpy.testing._private.parameterized.input_values->list(input_values)
A:numpy.testing._private.parameterized.parameters->cls.input_as_callable(input)()
A:numpy.testing._private.parameterized.name->name_func(f, num, p)
A:numpy.testing._private.parameterized.frame_locals[name]->cls.param_as_standalone_func(p, f, name)
A:numpy.testing._private.parameterized.frame_locals[name].__doc__->doc_func(f, num, p)
numpy.testing._private.parameterized.default_doc_func(func,num,p)
numpy.testing._private.parameterized.default_name_func(func,num,p)
numpy.testing._private.parameterized.detect_runner()
numpy.testing._private.parameterized.param(cls,*args,**kwargs)
numpy.testing._private.parameterized.param.__new__(cls,*args,**kwargs)
numpy.testing._private.parameterized.param.__repr__(self)
numpy.testing._private.parameterized.param.explicit(cls,args=None,kwargs=None)
numpy.testing._private.parameterized.param.from_decorator(cls,args)
numpy.testing._private.parameterized.parameterized(self,input,doc_func=None)
numpy.testing._private.parameterized.parameterized.__init__(self,input,doc_func=None)
numpy.testing._private.parameterized.parameterized._terrible_magic_get_defining_classes(self)
numpy.testing._private.parameterized.parameterized.assert_not_in_testcase_subclass(self)
numpy.testing._private.parameterized.parameterized.check_input_values(cls,input_values)
numpy.testing._private.parameterized.parameterized.expand(cls,input,name_func=None,doc_func=None,**legacy)
numpy.testing._private.parameterized.parameterized.input_as_callable(cls,input)
numpy.testing._private.parameterized.parameterized.param_as_nose_tuple(self,test_self,func,num,p)
numpy.testing._private.parameterized.parameterized.param_as_standalone_func(cls,p,func,name)
numpy.testing._private.parameterized.parameterized.to_safe_name(cls,s)
numpy.testing._private.parameterized.parameterized_argument_value_pairs(func,p)
numpy.testing._private.parameterized.set_test_runner(name)
numpy.testing._private.parameterized.short_repr(x,n=64)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/testing/_private/utils.py----------------------------------------
A:numpy.testing._private.utils.smsg->msg()
A:numpy.testing._private.utils.st->isinf(x)
A:numpy.testing._private.utils.path->win32pdh.MakeCounterPath((machine, object, instance, None, inum, counter))
A:numpy.testing._private.utils.hq->win32pdh.OpenQuery()
A:numpy.testing._private.utils.hc->win32pdh.AddCounter(hq, path)
A:numpy.testing._private.utils.(type, val)->win32pdh.GetFormattedCounterValue(hc, format)
A:numpy.testing._private.utils.l->sup.record(warning_class)
A:numpy.testing._private.utils.r_func->partial(array_repr, precision=precision)
A:numpy.testing._private.utils.r->'\n'.join(r.splitlines()[:3])
A:numpy.testing._private.utils.msg->check_free_memory(free_bytes)
A:numpy.testing._private.utils.actualr->real(actual)
A:numpy.testing._private.utils.actuali->imag(actual)
A:numpy.testing._private.utils.desiredr->real(desired)
A:numpy.testing._private.utils.desiredi->imag(desired)
A:numpy.testing._private.utils.isdesnat->isnat(desired)
A:numpy.testing._private.utils.isactnat->isnat(actual)
A:numpy.testing._private.utils.isdesnan->gisnan(desired)
A:numpy.testing._private.utils.isactnan->gisnan(actual)
A:numpy.testing._private.utils.array_actual->numpy.asarray(actual)
A:numpy.testing._private.utils.array_desired->numpy.asarray(desired)
A:numpy.testing._private.utils.(actual, desired)->map(float, (actual, desired))
A:numpy.testing._private.utils.scale->numpy.power(10, np.floor(np.log10(scale)))
A:numpy.testing._private.utils.x->numpy.array([x], dtype=t)
A:numpy.testing._private.utils.y->numpy.array([y], dtype=t)
A:numpy.testing._private.utils.x_id->func(x)
A:numpy.testing._private.utils.y_id->func(y)
A:numpy.testing._private.utils.flagged->func_assert_same_pos(x, y, func=isnat, hasval='NaT')
A:numpy.testing._private.utils.val->comparison(x, y)
A:numpy.testing._private.utils.reduced->comparison(x, y).ravel()
A:numpy.testing._private.utils.cond->comparison(x, y).ravel().all()
A:numpy.testing._private.utils.error->abs(x - y)
A:numpy.testing._private.utils.max_abs_error->max(error)
A:numpy.testing._private.utils.nonzero->bool_(y != 0)
A:numpy.testing._private.utils.max_rel_error->max(error[nonzero] / abs(y[nonzero]))
A:numpy.testing._private.utils.efmt->traceback.format_exc()
A:numpy.testing._private.utils.xinfid->gisinf(x)
A:numpy.testing._private.utils.yinfid->gisinf(y)
A:numpy.testing._private.utils.dtype->result_type(y, 1.0)
A:numpy.testing._private.utils.z->z.astype(float_).astype(float_)
A:numpy.testing._private.utils.diff->numpy.asarray(rx - ry, dtype=vdt)
A:numpy.testing._private.utils.d1->numpy.asarray(rx - ry, dtype=vdt).pop(0)
A:numpy.testing._private.utils.d2->numpy.asarray(rx - ry, dtype=vdt).pop(0)
A:numpy.testing._private.utils.d3->numpy.asarray(rx - ry, dtype=vdt).pop(0)
A:numpy.testing._private.utils.f->sys._getframe(1)
A:numpy.testing._private.utils.m->re.compile('^\\s*(\\d+|\\d+\\.\\d+)\\s*({0})\\s*$'.format('|'.join(suffixes.keys())), re.I).match(size_str.lower())
A:numpy.testing._private.utils.tests->doctest.DocTestFinder().find(m)
A:numpy.testing._private.utils.runner->doctest.DocTestRunner(verbose=False)
A:numpy.testing._private.utils.nose->import_nose()
A:numpy.testing._private.utils._d->_Dummy('nop')
A:numpy.testing._private.utils.testmatch->re.compile(testmatch)
A:numpy.testing._private.utils.frame->sys._getframe(1)
A:numpy.testing._private.utils.code->compile(code_str, f'Test name: {label} ', 'exec')
A:numpy.testing._private.utils.elapsed->jiffies()
A:numpy.testing._private.utils.b->numpy.arange(100 * 100).reshape(100, 100)
A:numpy.testing._private.utils.rc->sys.getrefcount(i)
A:numpy.testing._private.utils.d->inp2()
A:numpy.testing._private.utils.ax->numpy.abs(x)
A:numpy.testing._private.utils.ay->numpy.abs(y)
A:numpy.testing._private.utils.max_nulp->numpy.max(nulp_diff(x, y))
A:numpy.testing._private.utils.ret->nulp_diff(a, b, dtype)
A:numpy.testing._private.utils.t->numpy.common_type(x, y)
A:numpy.testing._private.utils.rx->numpy.array([x], dtype=t).view(vdt)
A:numpy.testing._private.utils.ry->integer_repr(y)
A:numpy.testing._private.utils.tmpdir->mkdtemp(*args, **kwargs)
A:numpy.testing._private.utils.(fd, path)->mkstemp(*args, **kwargs)
A:numpy.testing._private.utils.self.modules->set(modules).union(self.class_modules)
A:numpy.testing._private.utils.self._warnreg_copies[mod]->mod_reg.copy()
A:numpy.testing._private.utils.self._tmp_modules->set()
A:numpy.testing._private.utils.self._forwarded->set()
A:numpy.testing._private.utils.gc_debug->gc.get_debug()
A:numpy.testing._private.utils.n_objects_in_cycles->gc.collect()
A:numpy.testing._private.utils.env_value->os.environ.get(env_var)
A:numpy.testing._private.utils.mem_free->_get_mem_available()
A:numpy.testing._private.utils.size_re->re.compile('^\\s*(\\d+|\\d+\\.\\d+)\\s*({0})\\s*$'.format('|'.join(suffixes.keys())), re.I)
A:numpy.testing._private.utils.p->line.split()
A:numpy.testing._private.utils.original_trace->sys.gettrace()
numpy.testing.IgnoreException(Exception)
numpy.testing.KnownFailureException(Exception)
numpy.testing._Dummy(unittest.TestCase)
numpy.testing._Dummy.nop(self)
numpy.testing._assert_no_gc_cycles_context(name=None)
numpy.testing._assert_no_warnings_context(name=None)
numpy.testing._assert_valid_refcount(op)
numpy.testing._assert_warns_context(warning_class,name=None)
numpy.testing._gen_alignment_data(dtype=float32,type='binary',max_size=24)
numpy.testing._get_mem_available()
numpy.testing._integer_repr(x,vdt,comp)
numpy.testing._no_tracing(func)
numpy.testing._parse_size(size_str)
numpy.testing._private.utils.IgnoreException(Exception)
numpy.testing._private.utils.KnownFailureException(Exception)
numpy.testing._private.utils._Dummy(unittest.TestCase)
numpy.testing._private.utils._Dummy.nop(self)
numpy.testing._private.utils._assert_no_gc_cycles_context(name=None)
numpy.testing._private.utils._assert_no_warnings_context(name=None)
numpy.testing._private.utils._assert_valid_refcount(op)
numpy.testing._private.utils._assert_warns_context(warning_class,name=None)
numpy.testing._private.utils._gen_alignment_data(dtype=float32,type='binary',max_size=24)
numpy.testing._private.utils._get_mem_available()
numpy.testing._private.utils._integer_repr(x,vdt,comp)
numpy.testing._private.utils._no_tracing(func)
numpy.testing._private.utils._parse_size(size_str)
numpy.testing._private.utils.assert_(val,msg='')
numpy.testing._private.utils.assert_allclose(actual,desired,rtol=1e-07,atol=0,equal_nan=True,err_msg='',verbose=True)
numpy.testing._private.utils.assert_almost_equal(actual,desired,decimal=7,err_msg='',verbose=True)
numpy.testing._private.utils.assert_approx_equal(actual,desired,significant=7,err_msg='',verbose=True)
numpy.testing._private.utils.assert_array_almost_equal(x,y,decimal=6,err_msg='',verbose=True)
numpy.testing._private.utils.assert_array_almost_equal_nulp(x,y,nulp=1)
numpy.testing._private.utils.assert_array_compare(comparison,x,y,err_msg='',verbose=True,header='',precision=6,equal_nan=True,equal_inf=True)
numpy.testing._private.utils.assert_array_equal(x,y,err_msg='',verbose=True)
numpy.testing._private.utils.assert_array_less(x,y,err_msg='',verbose=True)
numpy.testing._private.utils.assert_array_max_ulp(a,b,maxulp=1,dtype=None)
numpy.testing._private.utils.assert_equal(actual,desired,err_msg='',verbose=True)
numpy.testing._private.utils.assert_no_gc_cycles(*args,**kwargs)
numpy.testing._private.utils.assert_no_warnings(*args,**kwargs)
numpy.testing._private.utils.assert_raises(*args,**kwargs)
numpy.testing._private.utils.assert_raises_regex(exception_class,expected_regexp,*args,**kwargs)
numpy.testing._private.utils.assert_string_equal(actual,desired)
numpy.testing._private.utils.assert_warns(warning_class,*args,**kwargs)
numpy.testing._private.utils.break_cycles()
numpy.testing._private.utils.build_err_msg(arrays,err_msg,header='Itemsarenotequal:',verbose=True,names=('ACTUAL','DESIRED'),precision=8)
numpy.testing._private.utils.check_free_memory(free_bytes)
numpy.testing._private.utils.clear_and_catch_warnings(self,record=False,modules=())
numpy.testing._private.utils.clear_and_catch_warnings.__enter__(self)
numpy.testing._private.utils.clear_and_catch_warnings.__exit__(self,*exc_info)
numpy.testing._private.utils.clear_and_catch_warnings.__init__(self,record=False,modules=())
numpy.testing._private.utils.decorate_methods(cls,decorator,testmatch=None)
numpy.testing._private.utils.gisfinite(x)
numpy.testing._private.utils.gisinf(x)
numpy.testing._private.utils.gisnan(x)
numpy.testing._private.utils.import_nose()
numpy.testing._private.utils.integer_repr(x)
numpy.testing._private.utils.measure(code_str,times=1,label=None)
numpy.testing._private.utils.nulp_diff(x,y,dtype=None)
numpy.testing._private.utils.print_assert_equal(test_string,actual,desired)
numpy.testing._private.utils.raises(*args)
numpy.testing._private.utils.requires_memory(free_bytes)
numpy.testing._private.utils.rundocs(filename=None,raise_on_error=True)
numpy.testing._private.utils.runstring(astr,dict)
numpy.testing._private.utils.suppress_warnings(self,forwarding_rule='always')
numpy.testing._private.utils.suppress_warnings.__enter__(self)
numpy.testing._private.utils.suppress_warnings.__exit__(self,*exc_info)
numpy.testing._private.utils.suppress_warnings.__init__(self,forwarding_rule='always')
numpy.testing._private.utils.suppress_warnings._clear_registries(self)
numpy.testing._private.utils.suppress_warnings._filter(self,category=Warning,message='',module=None,record=False)
numpy.testing._private.utils.suppress_warnings._showwarning(self,message,category,filename,lineno,*args,use_warnmsg=None,**kwargs)
numpy.testing._private.utils.suppress_warnings.filter(self,category=Warning,message='',module=None)
numpy.testing._private.utils.suppress_warnings.record(self,category=Warning,message='',module=None)
numpy.testing._private.utils.tempdir(*args,**kwargs)
numpy.testing._private.utils.temppath(*args,**kwargs)
numpy.testing.assert_(val,msg='')
numpy.testing.assert_allclose(actual,desired,rtol=1e-07,atol=0,equal_nan=True,err_msg='',verbose=True)
numpy.testing.assert_almost_equal(actual,desired,decimal=7,err_msg='',verbose=True)
numpy.testing.assert_approx_equal(actual,desired,significant=7,err_msg='',verbose=True)
numpy.testing.assert_array_almost_equal(x,y,decimal=6,err_msg='',verbose=True)
numpy.testing.assert_array_almost_equal_nulp(x,y,nulp=1)
numpy.testing.assert_array_compare(comparison,x,y,err_msg='',verbose=True,header='',precision=6,equal_nan=True,equal_inf=True)
numpy.testing.assert_array_equal(x,y,err_msg='',verbose=True)
numpy.testing.assert_array_less(x,y,err_msg='',verbose=True)
numpy.testing.assert_array_max_ulp(a,b,maxulp=1,dtype=None)
numpy.testing.assert_equal(actual,desired,err_msg='',verbose=True)
numpy.testing.assert_no_gc_cycles(*args,**kwargs)
numpy.testing.assert_no_warnings(*args,**kwargs)
numpy.testing.assert_raises(*args,**kwargs)
numpy.testing.assert_raises_regex(exception_class,expected_regexp,*args,**kwargs)
numpy.testing.assert_string_equal(actual,desired)
numpy.testing.assert_warns(warning_class,*args,**kwargs)
numpy.testing.break_cycles()
numpy.testing.build_err_msg(arrays,err_msg,header='Itemsarenotequal:',verbose=True,names=('ACTUAL','DESIRED'),precision=8)
numpy.testing.check_free_memory(free_bytes)
numpy.testing.clear_and_catch_warnings(self,record=False,modules=())
numpy.testing.clear_and_catch_warnings.__enter__(self)
numpy.testing.clear_and_catch_warnings.__exit__(self,*exc_info)
numpy.testing.decorate_methods(cls,decorator,testmatch=None)
numpy.testing.gisfinite(x)
numpy.testing.gisinf(x)
numpy.testing.gisnan(x)
numpy.testing.import_nose()
numpy.testing.integer_repr(x)
numpy.testing.measure(code_str,times=1,label=None)
numpy.testing.nulp_diff(x,y,dtype=None)
numpy.testing.print_assert_equal(test_string,actual,desired)
numpy.testing.raises(*args)
numpy.testing.requires_memory(free_bytes)
numpy.testing.rundocs(filename=None,raise_on_error=True)
numpy.testing.runstring(astr,dict)
numpy.testing.suppress_warnings(self,forwarding_rule='always')
numpy.testing.suppress_warnings.__enter__(self)
numpy.testing.suppress_warnings.__exit__(self,*exc_info)
numpy.testing.suppress_warnings._clear_registries(self)
numpy.testing.suppress_warnings._filter(self,category=Warning,message='',module=None,record=False)
numpy.testing.suppress_warnings._showwarning(self,message,category,filename,lineno,*args,use_warnmsg=None,**kwargs)
numpy.testing.suppress_warnings.filter(self,category=Warning,message='',module=None)
numpy.testing.suppress_warnings.record(self,category=Warning,message='',module=None)
numpy.testing.tempdir(*args,**kwargs)
numpy.testing.temppath(*args,**kwargs)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/testing/_private/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/testing/_private/noseclasses.py----------------------------------------
A:numpy.testing._private.noseclasses.val->getattr(obj, valname)
A:numpy.testing._private.noseclasses.ret->doctest.OutputChecker.check_output(self, want, got, optionflags)
A:numpy.testing._private.noseclasses.got->got.replace("'<i%d'" % sz, 'int').replace("'<i%d'" % sz, 'int')
A:numpy.testing._private.noseclasses.want->want.replace("'<i%d'" % sz, 'int').replace("'<i%d'" % sz, 'int')
A:numpy.testing._private.noseclasses.print_state->numpy.get_printoptions()
A:numpy.testing._private.noseclasses.self.finder->self.test_finder_class()
A:numpy.testing._private.noseclasses.self.parser->doctest.DocTestParser()
A:numpy.testing._private.noseclasses.pkg_name->get_package_name(os.path.dirname(test.filename))
A:numpy.testing._private.noseclasses.p->get_package_name(os.path.dirname(test.filename)).split('.')
A:numpy.testing._private.noseclasses.test.globs[p2]->__import__(pkg_name, test.globs, {}, [p2])
A:numpy.testing._private.noseclasses.tests->self.finder.find(module)
A:numpy.testing._private.noseclasses.module_file->src(module.__file__)
A:numpy.testing._private.noseclasses.bn->os.path.basename(file)
A:numpy.testing._private.noseclasses.knownfail->ErrorClass(KnownFailureException, label='KNOWNFAIL', isfailure=False)
A:numpy.testing._private.noseclasses.disable->getattr(options, 'noKnownFail', False)
A:numpy.testing._private.noseclasses.old_mode->get_fpu_mode()
A:numpy.testing._private.noseclasses.new_mode->get_fpu_mode()
A:numpy.testing._private.noseclasses.self.testRunner->nose.core.TextTestRunner(stream=self.config.stream, verbosity=self.config.verbosity, config=self.config)
A:numpy.testing._private.noseclasses.plug_runner->self.config.plugins.prepareTestRunner(self.testRunner)
A:numpy.testing._private.noseclasses.self.result->self.testRunner.run(self.test)
A:numpy.testing._private.noseclasses.self.success->self.result.wasSuccessful()
numpy.testing._private.noseclasses.FPUModeCheckPlugin(Plugin)
numpy.testing._private.noseclasses.FPUModeCheckPlugin.prepareTestCase(self,test)
numpy.testing._private.noseclasses.KnownFailurePlugin(ErrorClassPlugin)
numpy.testing._private.noseclasses.KnownFailurePlugin.configure(self,options,conf)
numpy.testing._private.noseclasses.KnownFailurePlugin.options(self,parser,env=os.environ)
numpy.testing._private.noseclasses.NumpyDocTestCase(self,test,optionflags=0,setUp=None,tearDown=None,checker=None,obj=None,result_var='_')
numpy.testing._private.noseclasses.NumpyDocTestCase.__init__(self,test,optionflags=0,setUp=None,tearDown=None,checker=None,obj=None,result_var='_')
numpy.testing._private.noseclasses.NumpyDocTestFinder(doctest.DocTestFinder)
numpy.testing._private.noseclasses.NumpyDocTestFinder._find(self,tests,obj,name,module,source_lines,globs,seen)
numpy.testing._private.noseclasses.NumpyDocTestFinder._from_module(self,module,object)
numpy.testing._private.noseclasses.NumpyDoctest(npd.Doctest)
numpy.testing._private.noseclasses.NumpyDoctest.afterContext(self)
numpy.testing._private.noseclasses.NumpyDoctest.configure(self,options,config)
numpy.testing._private.noseclasses.NumpyDoctest.loadTestsFromModule(self,module)
numpy.testing._private.noseclasses.NumpyDoctest.options(self,parser,env=os.environ)
numpy.testing._private.noseclasses.NumpyDoctest.set_test_context(self,test)
numpy.testing._private.noseclasses.NumpyDoctest.wantFile(self,file)
numpy.testing._private.noseclasses.NumpyOutputChecker(doctest.OutputChecker)
numpy.testing._private.noseclasses.NumpyOutputChecker.check_output(self,want,got,optionflags)
numpy.testing._private.noseclasses.NumpyTestProgram(nose.core.TestProgram)
numpy.testing._private.noseclasses.NumpyTestProgram.runTests(self)
numpy.testing._private.noseclasses.Unplugger(self,to_unplug='doctest')
numpy.testing._private.noseclasses.Unplugger.__init__(self,to_unplug='doctest')
numpy.testing._private.noseclasses.Unplugger.configure(self,options,config)
numpy.testing._private.noseclasses.Unplugger.options(self,parser,env)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/testing/_private/decorators.py----------------------------------------
A:numpy.testing._private.decorators.cond->conditional()
A:numpy.testing._private.decorators._needs_refcount->skipif(not HAS_REFCOUNT, 'python has no sys.getrefcount')
numpy.testing._private.decorators.deprecated(conditional=True)
numpy.testing._private.decorators.knownfailureif(fail_condition,msg=None)
numpy.testing._private.decorators.parametrize(vars,input)
numpy.testing._private.decorators.setastest(tf=True)
numpy.testing._private.decorators.skipif(skip_condition,msg=None)
numpy.testing._private.decorators.slow(t)
numpy.testing.dec.deprecated(conditional=True)
numpy.testing.dec.knownfailureif(fail_condition,msg=None)
numpy.testing.dec.parametrize(vars,input)
numpy.testing.dec.setastest(tf=True)
numpy.testing.dec.skipif(skip_condition,msg=None)
numpy.testing.dec.slow(t)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/testing/_private/nosetester.py----------------------------------------
A:numpy.testing._private.nosetester.(filepath, p2)->os.path.split(filepath)
A:numpy.testing._private.nosetester.f->sys._getframe(1 + depth)
A:numpy.testing._private.nosetester.file_to_run->sys._getframe(1 + depth).f_locals.get('__file__', None)
A:numpy.testing._private.nosetester.nose->import_nose()
A:numpy.testing._private.nosetester.package_path->str(package)
A:numpy.testing._private.nosetester.package_name->get_package_name(package_path)
A:numpy.testing._private.nosetester.npdir->os.path.dirname(numpy.__file__)
A:numpy.testing._private.nosetester.spdir->os.path.dirname(scipy.__file__)
A:numpy.testing._private.nosetester.pyversion->sys.version.replace('\n', '')
A:numpy.testing._private.nosetester.argv->self._test_argv(label, verbose, extra_argv)
A:numpy.testing._private.nosetester.entrypoint_manager->EntryPointPluginManager()
A:numpy.testing._private.nosetester.plug->self._get_custom_doctester()
A:numpy.testing._private.nosetester.verbose->min(verbose, 3)
A:numpy.testing._private.nosetester.(argv, plugins)->self.prepare_test_args(label, verbose, extra_argv, doctests, coverage, timer)
A:numpy.testing._private.nosetester._warn_opts->dict(develop=(Warning,), release=())
A:numpy.testing._private.nosetester.t->NumpyTestProgram(argv=argv, exit=False, plugins=plugins)
numpy.Tester(self,package=None,raise_warnings='release',depth=0,check_fpu_mode=False)
numpy.Tester._get_custom_doctester(self)
numpy.Tester._show_system_info(self)
numpy.Tester._test_argv(self,label,verbose,extra_argv)
numpy.Tester.bench(self,label='fast',verbose=1,extra_argv=None)
numpy.Tester.prepare_test_args(self,label='fast',verbose=1,extra_argv=None,doctests=False,coverage=False,timer=False)
numpy.Tester.test(self,label='fast',verbose=1,extra_argv=None,doctests=False,coverage=False,raise_warnings=None,timer=False)
numpy.testing._private.nosetester.NoseTester(self,package=None,raise_warnings='release',depth=0,check_fpu_mode=False)
numpy.testing._private.nosetester.NoseTester.__init__(self,package=None,raise_warnings='release',depth=0,check_fpu_mode=False)
numpy.testing._private.nosetester.NoseTester._get_custom_doctester(self)
numpy.testing._private.nosetester.NoseTester._show_system_info(self)
numpy.testing._private.nosetester.NoseTester._test_argv(self,label,verbose,extra_argv)
numpy.testing._private.nosetester.NoseTester.bench(self,label='fast',verbose=1,extra_argv=None)
numpy.testing._private.nosetester.NoseTester.prepare_test_args(self,label='fast',verbose=1,extra_argv=None,doctests=False,coverage=False,timer=False)
numpy.testing._private.nosetester.NoseTester.test(self,label='fast',verbose=1,extra_argv=None,doctests=False,coverage=False,raise_warnings=None,timer=False)
numpy.testing._private.nosetester._numpy_tester()
numpy.testing._private.nosetester.get_package_name(filepath)
numpy.testing._private.nosetester.run_module_suite(file_to_run=None,argv=None)
numpy.testing.run_module_suite(file_to_run=None,argv=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/testing/tests/test_utils.py----------------------------------------
A:numpy.testing.tests.test_utils.a->numpy.array([[1, 2, 3, 'NaT']], dtype='m8[ns]')
A:numpy.testing.tests.test_utils.b->numpy.array([0, 2])
A:numpy.testing.tests.test_utils.c->numpy.empty(2, [('floupipi', float), ('floupa', float)])
A:numpy.testing.tests.test_utils.x->numpy.ones(10).astype(np.float64)
A:numpy.testing.tests.test_utils.y->numpy.array([1.0, 2.0, np.nan])
A:numpy.testing.tests.test_utils.c['floupipi']->a['floupi'].copy()
A:numpy.testing.tests.test_utils.c['floupa']->a['floupa'].copy()
A:numpy.testing.tests.test_utils.l->suppress_warnings().record(FutureWarning, message='elementwise == ')
A:numpy.testing.tests.test_utils.nadt_no_unit->numpy.datetime64('NaT')
A:numpy.testing.tests.test_utils.nadt_s->numpy.datetime64('NaT', 's')
A:numpy.testing.tests.test_utils.nadt_d->numpy.datetime64('NaT', 'ns')
A:numpy.testing.tests.test_utils.natd_no_unit->numpy.timedelta64('NaT')
A:numpy.testing.tests.test_utils.natd_s->numpy.timedelta64('NaT', 's')
A:numpy.testing.tests.test_utils.natd_d->numpy.timedelta64('NaT', 'ns')
A:numpy.testing.tests.test_utils.anan->numpy.array(np.nan)
A:numpy.testing.tests.test_utils.aone->numpy.array(1)
A:numpy.testing.tests.test_utils.ainf->numpy.array(np.inf)
A:numpy.testing.tests.test_utils.z->numpy.array([complex(1, 2), complex(np.nan, 1)])
A:numpy.testing.tests.test_utils.msgs->str(exc_info.value).split('\n')
A:numpy.testing.tests.test_utils.msg->str(exc_info.value)
A:numpy.testing.tests.test_utils.offset->numpy.uint16(255)
A:numpy.testing.tests.test_utils.nan1_i64->numpy.array(np.nan, dtype=np.float64).view(np.uint64)
A:numpy.testing.tests.test_utils.nan1_f64->numpy.array(np.nan, dtype=np.float64).view(np.uint64).view(np.float64)
A:numpy.testing.tests.test_utils.nan2_f64->nan2_i64.view(np.float64)
A:numpy.testing.tests.test_utils.nan1_i32->numpy.array(np.nan, dtype=np.float32).view(np.uint32)
A:numpy.testing.tests.test_utils.nan1_f32->numpy.array(np.nan, dtype=np.float32).view(np.uint32).view(np.float32)
A:numpy.testing.tests.test_utils.nan2_f32->nan2_i32.view(np.float32)
A:numpy.testing.tests.test_utils.nan1_i16->numpy.array(np.nan, dtype=np.float16).view(np.uint16)
A:numpy.testing.tests.test_utils.nan1_f16->numpy.array(np.nan, dtype=np.float16).view(np.uint16).view(np.float16)
A:numpy.testing.tests.test_utils.nan2_f16->nan2_i16.view(np.float16)
A:numpy.testing.tests.test_utils.inf->numpy.array([np.inf]).astype(dt)
A:numpy.testing.tests.test_utils.big->numpy.array([np.finfo(dt).max])
A:numpy.testing.tests.test_utils.nan->numpy.array([np.nan]).astype(dt)
A:numpy.testing.tests.test_utils.tiny->numpy.array([np.finfo(dt).tiny])
A:numpy.testing.tests.test_utils.zero->numpy.array([np.PZERO]).astype(dt)
A:numpy.testing.tests.test_utils.nzero->numpy.array([np.NZERO]).astype(dt)
A:numpy.testing.tests.test_utils.num_warns->len(mod_warns)
A:numpy.testing.tests.test_utils.mod_inst->mod()
A:numpy.testing.tests.test_utils.my_mod->_get_fresh_mod()
A:numpy.testing.tests.test_utils.sup->suppress_warnings()
A:numpy.testing.tests.test_utils.log1->suppress_warnings().record()
A:numpy.testing.tests.test_utils.log2->suppress_warnings().record(message='Some other warning 2')
A:numpy.testing.tests.test_utils.fpath->os.path.join(tdir, 'tmp')
A:numpy.testing.tests.test_utils.w->weakref.ref(ReferenceCycleInDel())
numpy.testing.tests.test_utils.TestAlmostEqual(_GenericTest)
numpy.testing.tests.test_utils.TestAlmostEqual.setup(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_closeness(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_complex(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_complex_item(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_error_message(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_error_message_2(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_inf_item(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_nan_item(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_simple_item(self)
numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool(self)
numpy.testing.tests.test_utils.TestApproxEqual
numpy.testing.tests.test_utils.TestApproxEqual.setup(self)
numpy.testing.tests.test_utils.TestApproxEqual.test_nan_array(self)
numpy.testing.tests.test_utils.TestApproxEqual.test_nan_items(self)
numpy.testing.tests.test_utils.TestApproxEqual.test_simple_0d_arrays(self)
numpy.testing.tests.test_utils.TestApproxEqual.test_simple_items(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual(_GenericTest)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.setup(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_closeness(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_inf(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_nan(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_simple(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex128_fail(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex128_pass(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex64_fail(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex64_pass(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float16_fail(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float16_ignore_nan(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float16_pass(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float32_fail(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float32_ignore_nan(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float32_pass(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float64_fail(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float64_ignore_nan(self)
numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float64_pass(self)
numpy.testing.tests.test_utils.TestArrayAssertLess
numpy.testing.tests.test_utils.TestArrayAssertLess.setup(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_inf_compare(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_inf_compare_array(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_nan_noncompare(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_nan_noncompare_array(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_rank2(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_rank3(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_simple_arrays(self)
numpy.testing.tests.test_utils.TestArrayAssertLess.test_simple_items(self)
numpy.testing.tests.test_utils.TestArrayEqual(_GenericTest)
numpy.testing.tests.test_utils.TestArrayEqual.setup(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_0_ndim_array(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank1(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank3(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_masked_nan_inf(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_nan_array(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_recarrays(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_string_arrays(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_subclass_that_does_not_implement_npall(self)
numpy.testing.tests.test_utils.TestArrayEqual.test_subclass_that_overrides_eq(self)
numpy.testing.tests.test_utils.TestAssertAllclose
numpy.testing.tests.test_utils.TestAssertAllclose.test_equal_nan(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_equal_nan_default(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_min_int(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_not_equal_nan(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_report_fail_percentage(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_report_max_relative_error(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_simple(self)
numpy.testing.tests.test_utils.TestAssertAllclose.test_timedelta(self)
numpy.testing.tests.test_utils.TestAssertNoGcCycles
numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_asserts(self)
numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails(self)
numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_passes(self)
numpy.testing.tests.test_utils.TestBuildErrorMessage
numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_custom_names(self)
numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_custom_precision(self)
numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_defaults(self)
numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_no_verbose(self)
numpy.testing.tests.test_utils.TestEqual(TestArrayEqual)
numpy.testing.tests.test_utils.TestEqual.setup(self)
numpy.testing.tests.test_utils.TestEqual.test_complex(self)
numpy.testing.tests.test_utils.TestEqual.test_complex_item(self)
numpy.testing.tests.test_utils.TestEqual.test_datetime(self)
numpy.testing.tests.test_utils.TestEqual.test_inf_items(self)
numpy.testing.tests.test_utils.TestEqual.test_nan_items(self)
numpy.testing.tests.test_utils.TestEqual.test_nat_items(self)
numpy.testing.tests.test_utils.TestEqual.test_negative_zero(self)
numpy.testing.tests.test_utils.TestEqual.test_non_numeric(self)
numpy.testing.tests.test_utils.TestEqual.test_object(self)
numpy.testing.tests.test_utils.TestRaises
numpy.testing.tests.test_utils.TestRaises.does_not_raise_exception(self)
numpy.testing.tests.test_utils.TestRaises.raises_exception(self,e)
numpy.testing.tests.test_utils.TestRaises.setup(self)
numpy.testing.tests.test_utils.TestRaises.test_catch_no_raise(self)
numpy.testing.tests.test_utils.TestRaises.test_correct_catch(self)
numpy.testing.tests.test_utils.TestRaises.test_wrong_exception(self)
numpy.testing.tests.test_utils.TestStringEqual
numpy.testing.tests.test_utils.TestStringEqual.test_regex(self)
numpy.testing.tests.test_utils.TestStringEqual.test_simple(self)
numpy.testing.tests.test_utils.TestULP
numpy.testing.tests.test_utils.TestULP.test_double(self)
numpy.testing.tests.test_utils.TestULP.test_equal(self)
numpy.testing.tests.test_utils.TestULP.test_inf(self)
numpy.testing.tests.test_utils.TestULP.test_nan(self)
numpy.testing.tests.test_utils.TestULP.test_single(self)
numpy.testing.tests.test_utils.TestWarns
numpy.testing.tests.test_utils.TestWarns.test_context_manager(self)
numpy.testing.tests.test_utils.TestWarns.test_warn(self)
numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning(self)
numpy.testing.tests.test_utils._GenericTest
numpy.testing.tests.test_utils._GenericTest._test_equal(self,a,b)
numpy.testing.tests.test_utils._GenericTest._test_not_equal(self,a,b)
numpy.testing.tests.test_utils._GenericTest.test_array_diffshape(self)
numpy.testing.tests.test_utils._GenericTest.test_array_likes(self)
numpy.testing.tests.test_utils._GenericTest.test_array_rank1_eq(self)
numpy.testing.tests.test_utils._GenericTest.test_array_rank1_noteq(self)
numpy.testing.tests.test_utils._GenericTest.test_array_rank2_eq(self)
numpy.testing.tests.test_utils._GenericTest.test_objarray(self)
numpy.testing.tests.test_utils._get_fresh_mod()
numpy.testing.tests.test_utils.assert_warn_len_equal(mod,n_in_context,py34=None,py37=None)
numpy.testing.tests.test_utils.my_cacw(clear_and_catch_warnings)
numpy.testing.tests.test_utils.test_clear_and_catch_warnings()
numpy.testing.tests.test_utils.test_clear_and_catch_warnings_inherit()
numpy.testing.tests.test_utils.test_suppress_warnings_decorate_no_record()
numpy.testing.tests.test_utils.test_suppress_warnings_forwarding()
numpy.testing.tests.test_utils.test_suppress_warnings_module()
numpy.testing.tests.test_utils.test_suppress_warnings_record()
numpy.testing.tests.test_utils.test_suppress_warnings_type()
numpy.testing.tests.test_utils.test_tempdir()
numpy.testing.tests.test_utils.test_temppath()
numpy.testing.tests.test_utils.test_warn_len_equal_call_scenarios()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/testing/tests/test_doctesting.py----------------------------------------
numpy.testing.tests.test_doctesting.check_empty_output()
numpy.testing.tests.test_doctesting.check_implicit_np()
numpy.testing.tests.test_doctesting.check_random_directive()
numpy.testing.tests.test_doctesting.check_skip()
numpy.testing.tests.test_doctesting.check_whitespace_enabled()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/testing/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/polynomial.py----------------------------------------
A:numpy.polynomial.polynomial.polydomain->numpy.array([-1, 1])
A:numpy.polynomial.polynomial.polyzero->numpy.array([0])
A:numpy.polynomial.polynomial.polyone->numpy.array([1])
A:numpy.polynomial.polynomial.polyx->numpy.array([0, 1])
A:numpy.polynomial.polynomial.[c]->pu.as_series([c])
A:numpy.polynomial.polynomial.prd->numpy.empty(len(c) + 1, dtype=c.dtype)
A:numpy.polynomial.polynomial.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.polynomial.ret->numpy.convolve(c1, c2)
A:numpy.polynomial.polynomial.lc1->len(c1)
A:numpy.polynomial.polynomial.lc2->len(c2)
A:numpy.polynomial.polynomial.c->c.reshape(c.shape + (1,) * x.ndim).reshape(c.shape + (1,) * x.ndim)
A:numpy.polynomial.polynomial.cnt->pu._deprecate_as_int(m, 'the order of integration')
A:numpy.polynomial.polynomial.iaxis->normalize_axis_index(iaxis, c.ndim)
A:numpy.polynomial.polynomial.n->len(c)
A:numpy.polynomial.polynomial.der->numpy.empty((n,) + c.shape[1:], dtype=cdt)
A:numpy.polynomial.polynomial.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=cdt)
A:numpy.polynomial.polynomial.x->numpy.asarray(x)
A:numpy.polynomial.polynomial.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.polynomial.ideg->pu._deprecate_as_int(deg, 'deg')
A:numpy.polynomial.polynomial.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.polynomial.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.polynomial._add->staticmethod(polyadd)
A:numpy.polynomial.polynomial._sub->staticmethod(polysub)
A:numpy.polynomial.polynomial._mul->staticmethod(polymul)
A:numpy.polynomial.polynomial._div->staticmethod(polydiv)
A:numpy.polynomial.polynomial._pow->staticmethod(polypow)
A:numpy.polynomial.polynomial._val->staticmethod(polyval)
A:numpy.polynomial.polynomial._int->staticmethod(polyint)
A:numpy.polynomial.polynomial._der->staticmethod(polyder)
A:numpy.polynomial.polynomial._fit->staticmethod(polyfit)
A:numpy.polynomial.polynomial._line->staticmethod(polyline)
A:numpy.polynomial.polynomial._roots->staticmethod(polyroots)
A:numpy.polynomial.polynomial._fromroots->staticmethod(polyfromroots)
A:numpy.polynomial.polynomial.domain->numpy.array(polydomain)
A:numpy.polynomial.polynomial.window->numpy.array(polydomain)
numpy.polynomial.Polynomial(ABCPolyBase)
numpy.polynomial.Polynomial._repr_latex_term(i,arg_str,needs_parens)
numpy.polynomial.Polynomial._str_term_ascii(i,arg_str)
numpy.polynomial.Polynomial._str_term_unicode(cls,i,arg_str)
numpy.polynomial.polynomial.Polynomial(ABCPolyBase)
numpy.polynomial.polynomial.Polynomial._repr_latex_term(i,arg_str,needs_parens)
numpy.polynomial.polynomial.Polynomial._str_term_ascii(i,arg_str)
numpy.polynomial.polynomial.Polynomial._str_term_unicode(cls,i,arg_str)
numpy.polynomial.polynomial.polyadd(c1,c2)
numpy.polynomial.polynomial.polycompanion(c)
numpy.polynomial.polynomial.polyder(c,m=1,scl=1,axis=0)
numpy.polynomial.polynomial.polydiv(c1,c2)
numpy.polynomial.polynomial.polyfit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.polynomial.polyfromroots(roots)
numpy.polynomial.polynomial.polygrid2d(x,y,c)
numpy.polynomial.polynomial.polygrid3d(x,y,z,c)
numpy.polynomial.polynomial.polyint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.polynomial.polyline(off,scl)
numpy.polynomial.polynomial.polymul(c1,c2)
numpy.polynomial.polynomial.polymulx(c)
numpy.polynomial.polynomial.polypow(c,pow,maxpower=None)
numpy.polynomial.polynomial.polyroots(c)
numpy.polynomial.polynomial.polysub(c1,c2)
numpy.polynomial.polynomial.polyval(x,c,tensor=True)
numpy.polynomial.polynomial.polyval2d(x,y,c)
numpy.polynomial.polynomial.polyval3d(x,y,z,c)
numpy.polynomial.polynomial.polyvalfromroots(x,r,tensor=True)
numpy.polynomial.polynomial.polyvander(x,deg)
numpy.polynomial.polynomial.polyvander2d(x,y,deg)
numpy.polynomial.polynomial.polyvander3d(x,y,z,deg)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/polynomial.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/hermite_e.py----------------------------------------
A:numpy.polynomial.hermite_e.[pol]->pu.as_series([pol])
A:numpy.polynomial.hermite_e.res->hermeadd(hermemulx(res), pol[i])
A:numpy.polynomial.hermite_e.[c]->pu.as_series([c])
A:numpy.polynomial.hermite_e.n->len(c)
A:numpy.polynomial.hermite_e.c0->hermesub(c[-i] * xs, c1 * (nd - 1))
A:numpy.polynomial.hermite_e.c1->hermeadd(tmp, hermemulx(c1))
A:numpy.polynomial.hermite_e.hermedomain->numpy.array([-1, 1])
A:numpy.polynomial.hermite_e.hermezero->numpy.array([0])
A:numpy.polynomial.hermite_e.hermeone->numpy.array([1])
A:numpy.polynomial.hermite_e.hermex->numpy.array([0, 1])
A:numpy.polynomial.hermite_e.prd->numpy.empty(len(c) + 1, dtype=c.dtype)
A:numpy.polynomial.hermite_e.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.hermite_e.nd->float(n)
A:numpy.polynomial.hermite_e.c->numpy.array([0] * deg + [1])
A:numpy.polynomial.hermite_e.cnt->pu._deprecate_as_int(m, 'the order of integration')
A:numpy.polynomial.hermite_e.iaxis->normalize_axis_index(iaxis, c.ndim)
A:numpy.polynomial.hermite_e.der->numpy.empty((n,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.hermite_e.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.hermite_e.x->numpy.linalg.eigvalsh(m)
A:numpy.polynomial.hermite_e.ideg->pu._deprecate_as_int(deg, 'deg')
A:numpy.polynomial.hermite_e.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.hermite_e.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.hermite_e.scl->numpy.hstack((1.0, 1.0 / np.sqrt(np.arange(n - 1, 0, -1))))
A:numpy.polynomial.hermite_e.top[...]->numpy.sqrt(np.arange(1, n))
A:numpy.polynomial.hermite_e.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.hermite_e.m->hermecompanion(c)
A:numpy.polynomial.hermite_e.dy->_normed_hermite_e_n(x, ideg)
A:numpy.polynomial.hermite_e.fm->_normed_hermite_e_n(x, ideg - 1)
A:numpy.polynomial.hermite_e.w->numpy.exp(-0.5 * x ** 2)
A:numpy.polynomial.hermite_e._add->staticmethod(hermeadd)
A:numpy.polynomial.hermite_e._sub->staticmethod(hermesub)
A:numpy.polynomial.hermite_e._mul->staticmethod(hermemul)
A:numpy.polynomial.hermite_e._div->staticmethod(hermediv)
A:numpy.polynomial.hermite_e._pow->staticmethod(hermepow)
A:numpy.polynomial.hermite_e._val->staticmethod(hermeval)
A:numpy.polynomial.hermite_e._int->staticmethod(hermeint)
A:numpy.polynomial.hermite_e._der->staticmethod(hermeder)
A:numpy.polynomial.hermite_e._fit->staticmethod(hermefit)
A:numpy.polynomial.hermite_e._line->staticmethod(hermeline)
A:numpy.polynomial.hermite_e._roots->staticmethod(hermeroots)
A:numpy.polynomial.hermite_e._fromroots->staticmethod(hermefromroots)
A:numpy.polynomial.hermite_e.domain->numpy.array(hermedomain)
A:numpy.polynomial.hermite_e.window->numpy.array(hermedomain)
numpy.polynomial.HermiteE(ABCPolyBase)
numpy.polynomial.hermite_e.HermiteE(ABCPolyBase)
numpy.polynomial.hermite_e._normed_hermite_e_n(x,n)
numpy.polynomial.hermite_e.herme2poly(c)
numpy.polynomial.hermite_e.hermeadd(c1,c2)
numpy.polynomial.hermite_e.hermecompanion(c)
numpy.polynomial.hermite_e.hermeder(c,m=1,scl=1,axis=0)
numpy.polynomial.hermite_e.hermediv(c1,c2)
numpy.polynomial.hermite_e.hermefit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.hermite_e.hermefromroots(roots)
numpy.polynomial.hermite_e.hermegauss(deg)
numpy.polynomial.hermite_e.hermegrid2d(x,y,c)
numpy.polynomial.hermite_e.hermegrid3d(x,y,z,c)
numpy.polynomial.hermite_e.hermeint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.hermite_e.hermeline(off,scl)
numpy.polynomial.hermite_e.hermemul(c1,c2)
numpy.polynomial.hermite_e.hermemulx(c)
numpy.polynomial.hermite_e.hermepow(c,pow,maxpower=16)
numpy.polynomial.hermite_e.hermeroots(c)
numpy.polynomial.hermite_e.hermesub(c1,c2)
numpy.polynomial.hermite_e.hermeval(x,c,tensor=True)
numpy.polynomial.hermite_e.hermeval2d(x,y,c)
numpy.polynomial.hermite_e.hermeval3d(x,y,z,c)
numpy.polynomial.hermite_e.hermevander(x,deg)
numpy.polynomial.hermite_e.hermevander2d(x,y,deg)
numpy.polynomial.hermite_e.hermevander3d(x,y,z,deg)
numpy.polynomial.hermite_e.hermeweight(x)
numpy.polynomial.hermite_e.poly2herme(pol)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/hermite_e.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/chebyshev.py----------------------------------------
A:numpy.polynomial.chebyshev.zs->_cseries_to_zseries(c)
A:numpy.polynomial.chebyshev.c->numpy.dot(m.T, yfunc)
A:numpy.polynomial.chebyshev.z1->_cseries_to_zseries(c1)
A:numpy.polynomial.chebyshev.z2->_cseries_to_zseries(c2)
A:numpy.polynomial.chebyshev.lc1->len(c1)
A:numpy.polynomial.chebyshev.lc2->len(c2)
A:numpy.polynomial.chebyshev.quo->pu.trimseq(_zseries_to_cseries(quo))
A:numpy.polynomial.chebyshev.rem->pu.trimseq(_zseries_to_cseries(rem))
A:numpy.polynomial.chebyshev.ns->numpy.array([-1, 0, 1], dtype=zs.dtype)
A:numpy.polynomial.chebyshev.(d, r)->_zseries_div(zs, ns)
A:numpy.polynomial.chebyshev.[pol]->pu.as_series([pol])
A:numpy.polynomial.chebyshev.res->chebadd(chebmulx(res), pol[i])
A:numpy.polynomial.chebyshev.[c]->pu.as_series([c])
A:numpy.polynomial.chebyshev.n->len(c)
A:numpy.polynomial.chebyshev.c0->polysub(c[i - 2], c1)
A:numpy.polynomial.chebyshev.c1->polyadd(tmp, polymulx(c1) * 2)
A:numpy.polynomial.chebyshev.chebdomain->numpy.array([-1, 1])
A:numpy.polynomial.chebyshev.chebzero->numpy.array([0])
A:numpy.polynomial.chebyshev.chebone->numpy.array([1])
A:numpy.polynomial.chebyshev.chebx->numpy.array([0, 1])
A:numpy.polynomial.chebyshev.prd->numpy.convolve(prd, zs)
A:numpy.polynomial.chebyshev.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.chebyshev.ret->_zseries_to_cseries(prd)
A:numpy.polynomial.chebyshev.(quo, rem)->_zseries_div(z1, z2)
A:numpy.polynomial.chebyshev.power->int(pow)
A:numpy.polynomial.chebyshev.cnt->pu._deprecate_as_int(m, 'the order of integration')
A:numpy.polynomial.chebyshev.iaxis->normalize_axis_index(iaxis, c.ndim)
A:numpy.polynomial.chebyshev.der->numpy.empty((n,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.chebyshev.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.chebyshev.x->numpy.linspace(-np.pi, 0, _npts)
A:numpy.polynomial.chebyshev.ideg->pu._deprecate_as_int(deg, 'deg')
A:numpy.polynomial.chebyshev.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.chebyshev.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.chebyshev.scl->numpy.array([1.0] + [np.sqrt(0.5)] * (n - 1))
A:numpy.polynomial.chebyshev.top[0]->numpy.sqrt(0.5)
A:numpy.polynomial.chebyshev.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.chebyshev.deg->numpy.asarray(deg)
A:numpy.polynomial.chebyshev.xcheb->chebpts1(order)
A:numpy.polynomial.chebyshev.yfunc->func(xcheb, *args)
A:numpy.polynomial.chebyshev.m->chebvander(xcheb, deg)
A:numpy.polynomial.chebyshev._npts->int(npts)
A:numpy.polynomial.chebyshev._add->staticmethod(chebadd)
A:numpy.polynomial.chebyshev._sub->staticmethod(chebsub)
A:numpy.polynomial.chebyshev._mul->staticmethod(chebmul)
A:numpy.polynomial.chebyshev._div->staticmethod(chebdiv)
A:numpy.polynomial.chebyshev._pow->staticmethod(chebpow)
A:numpy.polynomial.chebyshev._val->staticmethod(chebval)
A:numpy.polynomial.chebyshev._int->staticmethod(chebint)
A:numpy.polynomial.chebyshev._der->staticmethod(chebder)
A:numpy.polynomial.chebyshev._fit->staticmethod(chebfit)
A:numpy.polynomial.chebyshev._line->staticmethod(chebline)
A:numpy.polynomial.chebyshev._roots->staticmethod(chebroots)
A:numpy.polynomial.chebyshev._fromroots->staticmethod(chebfromroots)
A:numpy.polynomial.chebyshev.coef->chebinterpolate(xfunc, deg)
A:numpy.polynomial.chebyshev.domain->numpy.array(chebdomain)
A:numpy.polynomial.chebyshev.window->numpy.array(chebdomain)
numpy.polynomial.Chebyshev(ABCPolyBase)
numpy.polynomial.Chebyshev.interpolate(cls,func,deg,domain=None,args=())
numpy.polynomial.chebyshev.Chebyshev(ABCPolyBase)
numpy.polynomial.chebyshev.Chebyshev.interpolate(cls,func,deg,domain=None,args=())
numpy.polynomial.chebyshev._cseries_to_zseries(c)
numpy.polynomial.chebyshev._zseries_der(zs)
numpy.polynomial.chebyshev._zseries_div(z1,z2)
numpy.polynomial.chebyshev._zseries_int(zs)
numpy.polynomial.chebyshev._zseries_mul(z1,z2)
numpy.polynomial.chebyshev._zseries_to_cseries(zs)
numpy.polynomial.chebyshev.cheb2poly(c)
numpy.polynomial.chebyshev.chebadd(c1,c2)
numpy.polynomial.chebyshev.chebcompanion(c)
numpy.polynomial.chebyshev.chebder(c,m=1,scl=1,axis=0)
numpy.polynomial.chebyshev.chebdiv(c1,c2)
numpy.polynomial.chebyshev.chebfit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.chebyshev.chebfromroots(roots)
numpy.polynomial.chebyshev.chebgauss(deg)
numpy.polynomial.chebyshev.chebgrid2d(x,y,c)
numpy.polynomial.chebyshev.chebgrid3d(x,y,z,c)
numpy.polynomial.chebyshev.chebint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.chebyshev.chebinterpolate(func,deg,args=())
numpy.polynomial.chebyshev.chebline(off,scl)
numpy.polynomial.chebyshev.chebmul(c1,c2)
numpy.polynomial.chebyshev.chebmulx(c)
numpy.polynomial.chebyshev.chebpow(c,pow,maxpower=16)
numpy.polynomial.chebyshev.chebpts1(npts)
numpy.polynomial.chebyshev.chebpts2(npts)
numpy.polynomial.chebyshev.chebroots(c)
numpy.polynomial.chebyshev.chebsub(c1,c2)
numpy.polynomial.chebyshev.chebval(x,c,tensor=True)
numpy.polynomial.chebyshev.chebval2d(x,y,c)
numpy.polynomial.chebyshev.chebval3d(x,y,z,c)
numpy.polynomial.chebyshev.chebvander(x,deg)
numpy.polynomial.chebyshev.chebvander2d(x,y,deg)
numpy.polynomial.chebyshev.chebvander3d(x,y,z,deg)
numpy.polynomial.chebyshev.chebweight(x)
numpy.polynomial.chebyshev.poly2cheb(pol)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/chebyshev.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/hermite.py----------------------------------------
A:numpy.polynomial.hermite.[pol]->pu.as_series([pol])
A:numpy.polynomial.hermite.res->hermadd(hermmulx(res), pol[i])
A:numpy.polynomial.hermite.[c]->pu.as_series([c])
A:numpy.polynomial.hermite.n->len(c)
A:numpy.polynomial.hermite.c0->hermsub(c[-i] * xs, c1 * (2 * (nd - 1)))
A:numpy.polynomial.hermite.c1->hermadd(tmp, hermmulx(c1) * 2)
A:numpy.polynomial.hermite.hermdomain->numpy.array([-1, 1])
A:numpy.polynomial.hermite.hermzero->numpy.array([0])
A:numpy.polynomial.hermite.hermone->numpy.array([1])
A:numpy.polynomial.hermite.hermx->numpy.array([0, 1 / 2])
A:numpy.polynomial.hermite.prd->numpy.empty(len(c) + 1, dtype=c.dtype)
A:numpy.polynomial.hermite.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.hermite.nd->float(n)
A:numpy.polynomial.hermite.c->numpy.array([0] * deg + [1], dtype=np.float64)
A:numpy.polynomial.hermite.cnt->pu._deprecate_as_int(m, 'the order of integration')
A:numpy.polynomial.hermite.iaxis->normalize_axis_index(iaxis, c.ndim)
A:numpy.polynomial.hermite.der->numpy.empty((n,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.hermite.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.hermite.x->numpy.linalg.eigvalsh(m)
A:numpy.polynomial.hermite.ideg->pu._deprecate_as_int(deg, 'deg')
A:numpy.polynomial.hermite.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.hermite.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.hermite.scl->numpy.hstack((1.0, 1.0 / np.sqrt(2.0 * np.arange(n - 1, 0, -1))))
A:numpy.polynomial.hermite.top[...]->numpy.sqrt(0.5 * np.arange(1, n))
A:numpy.polynomial.hermite.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.hermite.m->hermcompanion(c)
A:numpy.polynomial.hermite.dy->_normed_hermite_n(x, ideg)
A:numpy.polynomial.hermite.fm->_normed_hermite_n(x, ideg - 1)
A:numpy.polynomial.hermite.w->numpy.exp(-x ** 2)
A:numpy.polynomial.hermite._add->staticmethod(hermadd)
A:numpy.polynomial.hermite._sub->staticmethod(hermsub)
A:numpy.polynomial.hermite._mul->staticmethod(hermmul)
A:numpy.polynomial.hermite._div->staticmethod(hermdiv)
A:numpy.polynomial.hermite._pow->staticmethod(hermpow)
A:numpy.polynomial.hermite._val->staticmethod(hermval)
A:numpy.polynomial.hermite._int->staticmethod(hermint)
A:numpy.polynomial.hermite._der->staticmethod(hermder)
A:numpy.polynomial.hermite._fit->staticmethod(hermfit)
A:numpy.polynomial.hermite._line->staticmethod(hermline)
A:numpy.polynomial.hermite._roots->staticmethod(hermroots)
A:numpy.polynomial.hermite._fromroots->staticmethod(hermfromroots)
A:numpy.polynomial.hermite.domain->numpy.array(hermdomain)
A:numpy.polynomial.hermite.window->numpy.array(hermdomain)
numpy.polynomial.Hermite(ABCPolyBase)
numpy.polynomial.hermite.Hermite(ABCPolyBase)
numpy.polynomial.hermite._normed_hermite_n(x,n)
numpy.polynomial.hermite.herm2poly(c)
numpy.polynomial.hermite.hermadd(c1,c2)
numpy.polynomial.hermite.hermcompanion(c)
numpy.polynomial.hermite.hermder(c,m=1,scl=1,axis=0)
numpy.polynomial.hermite.hermdiv(c1,c2)
numpy.polynomial.hermite.hermfit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.hermite.hermfromroots(roots)
numpy.polynomial.hermite.hermgauss(deg)
numpy.polynomial.hermite.hermgrid2d(x,y,c)
numpy.polynomial.hermite.hermgrid3d(x,y,z,c)
numpy.polynomial.hermite.hermint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.hermite.hermline(off,scl)
numpy.polynomial.hermite.hermmul(c1,c2)
numpy.polynomial.hermite.hermmulx(c)
numpy.polynomial.hermite.hermpow(c,pow,maxpower=16)
numpy.polynomial.hermite.hermroots(c)
numpy.polynomial.hermite.hermsub(c1,c2)
numpy.polynomial.hermite.hermval(x,c,tensor=True)
numpy.polynomial.hermite.hermval2d(x,y,c)
numpy.polynomial.hermite.hermval3d(x,y,z,c)
numpy.polynomial.hermite.hermvander(x,deg)
numpy.polynomial.hermite.hermvander2d(x,y,deg)
numpy.polynomial.hermite.hermvander3d(x,y,z,deg)
numpy.polynomial.hermite.hermweight(x)
numpy.polynomial.hermite.poly2herm(pol)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/hermite.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/_polybase.py----------------------------------------
A:numpy.polynomial._polybase._superscript_mapping->str.maketrans({'0': '⁰', '1': '¹', '2': '²', '3': '³', '4': '⁴', '5': '⁵', '6': '⁶', '7': '⁷', '8': '⁸', '9': '⁹'})
A:numpy.polynomial._polybase._subscript_mapping->str.maketrans({'0': '₀', '1': '₁', '2': '₂', '3': '₃', '4': '₄', '5': '₅', '6': '₆', '7': '₇', '8': '₈', '9': '₉'})
A:numpy.polynomial._polybase.[coef]->pu.as_series([coef], trim=False)
A:numpy.polynomial._polybase.[domain]->pu.as_series([domain], trim=False)
A:numpy.polynomial._polybase.[window]->pu.as_series([window], trim=False)
A:numpy.polynomial._polybase.linewidth->numpy.get_printoptions().get('linewidth', 75)
A:numpy.polynomial._polybase.power->str(i + 1)
A:numpy.polynomial._polybase.next_term->next_term.replace(' ', '\n', 1).replace(' ', '\n', 1)
A:numpy.polynomial._polybase.(off, scale)->self.mapparms()
A:numpy.polynomial._polybase.term_str->self._repr_latex_term(i, term, needs_parens)
A:numpy.polynomial._polybase.part->mute(part)
A:numpy.polynomial._polybase.body->''.join(parts)
A:numpy.polynomial._polybase.ret->self.__dict__.copy()
A:numpy.polynomial._polybase.ret['coef']->self.coef.copy()
A:numpy.polynomial._polybase.ret['domain']->self.domain.copy()
A:numpy.polynomial._polybase.ret['window']->self.window.copy()
A:numpy.polynomial._polybase.(off, scl)->pu.mapparms(window, domain)
A:numpy.polynomial._polybase.othercoef->self._get_coefficients(other)
A:numpy.polynomial._polybase.coef->cls._line(off, scl)
A:numpy.polynomial._polybase.res->cls._fit(xnew, y, deg, w=w, rcond=rcond, full=full)
A:numpy.polynomial._polybase.(quo, rem)->self._div(other, self.coef)
A:numpy.polynomial._polybase.quo->self.__class__(quo, self.domain, self.window)
A:numpy.polynomial._polybase.rem->self.__class__(rem, self.domain, self.window)
A:numpy.polynomial._polybase.isize->int(size)
A:numpy.polynomial._polybase.roots->self._roots(self.coef)
A:numpy.polynomial._polybase.x->numpy.linspace(domain[0], domain[1], n)
A:numpy.polynomial._polybase.y->self(x)
A:numpy.polynomial._polybase.domain->pu.getdomain(roots)
A:numpy.polynomial._polybase.xnew->pu.mapdomain(x, domain, window)
A:numpy.polynomial._polybase.[roots]->pu.as_series([roots], trim=False)
A:numpy.polynomial._polybase.deg->len(roots)
A:numpy.polynomial._polybase.ideg->int(deg)
numpy.polynomial.ABCPolyBase(self,coef,domain=None,window=None)
numpy.polynomial.ABCPolyBase.__add__(self,other)
numpy.polynomial.ABCPolyBase.__divmod__(self,other)
numpy.polynomial.ABCPolyBase.__eq__(self,other)
numpy.polynomial.ABCPolyBase.__floordiv__(self,other)
numpy.polynomial.ABCPolyBase.__format__(self,fmt_str)
numpy.polynomial.ABCPolyBase.__getstate__(self)
numpy.polynomial.ABCPolyBase.__iter__(self)
numpy.polynomial.ABCPolyBase.__len__(self)
numpy.polynomial.ABCPolyBase.__mod__(self,other)
numpy.polynomial.ABCPolyBase.__mul__(self,other)
numpy.polynomial.ABCPolyBase.__ne__(self,other)
numpy.polynomial.ABCPolyBase.__neg__(self)
numpy.polynomial.ABCPolyBase.__pos__(self)
numpy.polynomial.ABCPolyBase.__pow__(self,other)
numpy.polynomial.ABCPolyBase.__radd__(self,other)
numpy.polynomial.ABCPolyBase.__rdiv__(self,other)
numpy.polynomial.ABCPolyBase.__rdivmod__(self,other)
numpy.polynomial.ABCPolyBase.__repr__(self)
numpy.polynomial.ABCPolyBase.__rfloordiv__(self,other)
numpy.polynomial.ABCPolyBase.__rmod__(self,other)
numpy.polynomial.ABCPolyBase.__rmul__(self,other)
numpy.polynomial.ABCPolyBase.__rsub__(self,other)
numpy.polynomial.ABCPolyBase.__rtruediv__(self,other)
numpy.polynomial.ABCPolyBase.__setstate__(self,dict)
numpy.polynomial.ABCPolyBase.__str__(self)
numpy.polynomial.ABCPolyBase.__sub__(self,other)
numpy.polynomial.ABCPolyBase.__truediv__(self,other)
numpy.polynomial.ABCPolyBase._add(c1,c2)
numpy.polynomial.ABCPolyBase._der(c,m,scl)
numpy.polynomial.ABCPolyBase._div(c1,c2)
numpy.polynomial.ABCPolyBase._fit(x,y,deg,rcond,full)
numpy.polynomial.ABCPolyBase._fromroots(r)
numpy.polynomial.ABCPolyBase._generate_string(self,term_method)
numpy.polynomial.ABCPolyBase._get_coefficients(self,other)
numpy.polynomial.ABCPolyBase._int(c,m,k,lbnd,scl)
numpy.polynomial.ABCPolyBase._line(off,scl)
numpy.polynomial.ABCPolyBase._mul(c1,c2)
numpy.polynomial.ABCPolyBase._pow(c,pow,maxpower=None)
numpy.polynomial.ABCPolyBase._repr_latex_(self)
numpy.polynomial.ABCPolyBase._repr_latex_scalar(x)
numpy.polynomial.ABCPolyBase._repr_latex_term(cls,i,arg_str,needs_parens)
numpy.polynomial.ABCPolyBase._roots(c)
numpy.polynomial.ABCPolyBase._str_term_ascii(cls,i,arg_str)
numpy.polynomial.ABCPolyBase._str_term_unicode(cls,i,arg_str)
numpy.polynomial.ABCPolyBase._sub(c1,c2)
numpy.polynomial.ABCPolyBase._val(x,c)
numpy.polynomial.ABCPolyBase.basis(cls,deg,domain=None,window=None)
numpy.polynomial.ABCPolyBase.basis_name(self)
numpy.polynomial.ABCPolyBase.cast(cls,series,domain=None,window=None)
numpy.polynomial.ABCPolyBase.convert(self,domain=None,kind=None,window=None)
numpy.polynomial.ABCPolyBase.copy(self)
numpy.polynomial.ABCPolyBase.cutdeg(self,deg)
numpy.polynomial.ABCPolyBase.degree(self)
numpy.polynomial.ABCPolyBase.deriv(self,m=1)
numpy.polynomial.ABCPolyBase.domain(self)
numpy.polynomial.ABCPolyBase.fit(cls,x,y,deg,domain=None,rcond=None,full=False,w=None,window=None)
numpy.polynomial.ABCPolyBase.fromroots(cls,roots,domain=[],window=None)
numpy.polynomial.ABCPolyBase.has_samecoef(self,other)
numpy.polynomial.ABCPolyBase.has_samedomain(self,other)
numpy.polynomial.ABCPolyBase.has_sametype(self,other)
numpy.polynomial.ABCPolyBase.has_samewindow(self,other)
numpy.polynomial.ABCPolyBase.identity(cls,domain=None,window=None)
numpy.polynomial.ABCPolyBase.integ(self,m=1,k=[],lbnd=None)
numpy.polynomial.ABCPolyBase.linspace(self,n=100,domain=None)
numpy.polynomial.ABCPolyBase.mapparms(self)
numpy.polynomial.ABCPolyBase.roots(self)
numpy.polynomial.ABCPolyBase.trim(self,tol=0)
numpy.polynomial.ABCPolyBase.truncate(self,size)
numpy.polynomial.ABCPolyBase.window(self)
numpy.polynomial._polybase.ABCPolyBase(self,coef,domain=None,window=None)
numpy.polynomial._polybase.ABCPolyBase.__add__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__divmod__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__eq__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__floordiv__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__format__(self,fmt_str)
numpy.polynomial._polybase.ABCPolyBase.__getstate__(self)
numpy.polynomial._polybase.ABCPolyBase.__init__(self,coef,domain=None,window=None)
numpy.polynomial._polybase.ABCPolyBase.__iter__(self)
numpy.polynomial._polybase.ABCPolyBase.__len__(self)
numpy.polynomial._polybase.ABCPolyBase.__mod__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__mul__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__ne__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__neg__(self)
numpy.polynomial._polybase.ABCPolyBase.__pos__(self)
numpy.polynomial._polybase.ABCPolyBase.__pow__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__radd__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__rdiv__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__rdivmod__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__repr__(self)
numpy.polynomial._polybase.ABCPolyBase.__rfloordiv__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__rmod__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__rmul__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__rsub__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__rtruediv__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__setstate__(self,dict)
numpy.polynomial._polybase.ABCPolyBase.__str__(self)
numpy.polynomial._polybase.ABCPolyBase.__sub__(self,other)
numpy.polynomial._polybase.ABCPolyBase.__truediv__(self,other)
numpy.polynomial._polybase.ABCPolyBase._add(c1,c2)
numpy.polynomial._polybase.ABCPolyBase._der(c,m,scl)
numpy.polynomial._polybase.ABCPolyBase._div(c1,c2)
numpy.polynomial._polybase.ABCPolyBase._fit(x,y,deg,rcond,full)
numpy.polynomial._polybase.ABCPolyBase._fromroots(r)
numpy.polynomial._polybase.ABCPolyBase._generate_string(self,term_method)
numpy.polynomial._polybase.ABCPolyBase._get_coefficients(self,other)
numpy.polynomial._polybase.ABCPolyBase._int(c,m,k,lbnd,scl)
numpy.polynomial._polybase.ABCPolyBase._line(off,scl)
numpy.polynomial._polybase.ABCPolyBase._mul(c1,c2)
numpy.polynomial._polybase.ABCPolyBase._pow(c,pow,maxpower=None)
numpy.polynomial._polybase.ABCPolyBase._repr_latex_(self)
numpy.polynomial._polybase.ABCPolyBase._repr_latex_scalar(x)
numpy.polynomial._polybase.ABCPolyBase._repr_latex_term(cls,i,arg_str,needs_parens)
numpy.polynomial._polybase.ABCPolyBase._roots(c)
numpy.polynomial._polybase.ABCPolyBase._str_term_ascii(cls,i,arg_str)
numpy.polynomial._polybase.ABCPolyBase._str_term_unicode(cls,i,arg_str)
numpy.polynomial._polybase.ABCPolyBase._sub(c1,c2)
numpy.polynomial._polybase.ABCPolyBase._val(x,c)
numpy.polynomial._polybase.ABCPolyBase.basis(cls,deg,domain=None,window=None)
numpy.polynomial._polybase.ABCPolyBase.basis_name(self)
numpy.polynomial._polybase.ABCPolyBase.cast(cls,series,domain=None,window=None)
numpy.polynomial._polybase.ABCPolyBase.convert(self,domain=None,kind=None,window=None)
numpy.polynomial._polybase.ABCPolyBase.copy(self)
numpy.polynomial._polybase.ABCPolyBase.cutdeg(self,deg)
numpy.polynomial._polybase.ABCPolyBase.degree(self)
numpy.polynomial._polybase.ABCPolyBase.deriv(self,m=1)
numpy.polynomial._polybase.ABCPolyBase.domain(self)
numpy.polynomial._polybase.ABCPolyBase.fit(cls,x,y,deg,domain=None,rcond=None,full=False,w=None,window=None)
numpy.polynomial._polybase.ABCPolyBase.fromroots(cls,roots,domain=[],window=None)
numpy.polynomial._polybase.ABCPolyBase.has_samecoef(self,other)
numpy.polynomial._polybase.ABCPolyBase.has_samedomain(self,other)
numpy.polynomial._polybase.ABCPolyBase.has_sametype(self,other)
numpy.polynomial._polybase.ABCPolyBase.has_samewindow(self,other)
numpy.polynomial._polybase.ABCPolyBase.identity(cls,domain=None,window=None)
numpy.polynomial._polybase.ABCPolyBase.integ(self,m=1,k=[],lbnd=None)
numpy.polynomial._polybase.ABCPolyBase.linspace(self,n=100,domain=None)
numpy.polynomial._polybase.ABCPolyBase.mapparms(self)
numpy.polynomial._polybase.ABCPolyBase.roots(self)
numpy.polynomial._polybase.ABCPolyBase.trim(self,tol=0)
numpy.polynomial._polybase.ABCPolyBase.truncate(self,size)
numpy.polynomial._polybase.ABCPolyBase.window(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/_polybase.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/__init__.py----------------------------------------
A:numpy.polynomial.__init__.test->PytestTester(__name__)
numpy.polynomial.__init__.set_default_printstyle(style)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/__init__.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/legendre.py----------------------------------------
A:numpy.polynomial.legendre.[pol]->pu.as_series([pol])
A:numpy.polynomial.legendre.res->legadd(legmulx(res), pol[i])
A:numpy.polynomial.legendre.[c]->pu.as_series([c])
A:numpy.polynomial.legendre.n->len(c)
A:numpy.polynomial.legendre.c0->legsub(c[-i] * xs, c1 * (nd - 1) / nd)
A:numpy.polynomial.legendre.c1->legadd(tmp, legmulx(c1) * (2 * nd - 1) / nd)
A:numpy.polynomial.legendre.legdomain->numpy.array([-1, 1])
A:numpy.polynomial.legendre.legzero->numpy.array([0])
A:numpy.polynomial.legendre.legone->numpy.array([1])
A:numpy.polynomial.legendre.legx->numpy.array([0, 1])
A:numpy.polynomial.legendre.prd->numpy.empty(len(c) + 1, dtype=c.dtype)
A:numpy.polynomial.legendre.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.legendre.nd->len(c)
A:numpy.polynomial.legendre.c->numpy.array([0] * deg + [1])
A:numpy.polynomial.legendre.cnt->pu._deprecate_as_int(m, 'the order of integration')
A:numpy.polynomial.legendre.iaxis->normalize_axis_index(iaxis, c.ndim)
A:numpy.polynomial.legendre.der->numpy.empty((n,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.legendre.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.legendre.x->numpy.linalg.eigvalsh(m)
A:numpy.polynomial.legendre.ideg->pu._deprecate_as_int(deg, 'deg')
A:numpy.polynomial.legendre.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.legendre.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.legendre.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.legendre.m->legcompanion(c)
A:numpy.polynomial.legendre.dy->legval(x, c)
A:numpy.polynomial.legendre.df->legval(x, legder(c))
A:numpy.polynomial.legendre.fm->legval(x, c[1:])
A:numpy.polynomial.legendre._add->staticmethod(legadd)
A:numpy.polynomial.legendre._sub->staticmethod(legsub)
A:numpy.polynomial.legendre._mul->staticmethod(legmul)
A:numpy.polynomial.legendre._div->staticmethod(legdiv)
A:numpy.polynomial.legendre._pow->staticmethod(legpow)
A:numpy.polynomial.legendre._val->staticmethod(legval)
A:numpy.polynomial.legendre._int->staticmethod(legint)
A:numpy.polynomial.legendre._der->staticmethod(legder)
A:numpy.polynomial.legendre._fit->staticmethod(legfit)
A:numpy.polynomial.legendre._line->staticmethod(legline)
A:numpy.polynomial.legendre._roots->staticmethod(legroots)
A:numpy.polynomial.legendre._fromroots->staticmethod(legfromroots)
A:numpy.polynomial.legendre.domain->numpy.array(legdomain)
A:numpy.polynomial.legendre.window->numpy.array(legdomain)
numpy.polynomial.Legendre(ABCPolyBase)
numpy.polynomial.legendre.Legendre(ABCPolyBase)
numpy.polynomial.legendre.leg2poly(c)
numpy.polynomial.legendre.legadd(c1,c2)
numpy.polynomial.legendre.legcompanion(c)
numpy.polynomial.legendre.legder(c,m=1,scl=1,axis=0)
numpy.polynomial.legendre.legdiv(c1,c2)
numpy.polynomial.legendre.legfit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.legendre.legfromroots(roots)
numpy.polynomial.legendre.leggauss(deg)
numpy.polynomial.legendre.leggrid2d(x,y,c)
numpy.polynomial.legendre.leggrid3d(x,y,z,c)
numpy.polynomial.legendre.legint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.legendre.legline(off,scl)
numpy.polynomial.legendre.legmul(c1,c2)
numpy.polynomial.legendre.legmulx(c)
numpy.polynomial.legendre.legpow(c,pow,maxpower=16)
numpy.polynomial.legendre.legroots(c)
numpy.polynomial.legendre.legsub(c1,c2)
numpy.polynomial.legendre.legval(x,c,tensor=True)
numpy.polynomial.legendre.legval2d(x,y,c)
numpy.polynomial.legendre.legval3d(x,y,z,c)
numpy.polynomial.legendre.legvander(x,deg)
numpy.polynomial.legendre.legvander2d(x,y,deg)
numpy.polynomial.legendre.legvander3d(x,y,z,deg)
numpy.polynomial.legendre.legweight(x)
numpy.polynomial.legendre.poly2leg(pol)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/legendre.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/laguerre.py----------------------------------------
A:numpy.polynomial.laguerre.[pol]->pu.as_series([pol])
A:numpy.polynomial.laguerre.res->lagadd(lagmulx(res), p)
A:numpy.polynomial.laguerre.[c]->pu.as_series([c])
A:numpy.polynomial.laguerre.n->len(c)
A:numpy.polynomial.laguerre.c0->lagsub(c[-i] * xs, c1 * (nd - 1) / nd)
A:numpy.polynomial.laguerre.c1->lagadd(tmp, lagsub((2 * nd - 1) * c1, lagmulx(c1)) / nd)
A:numpy.polynomial.laguerre.lagdomain->numpy.array([0, 1])
A:numpy.polynomial.laguerre.lagzero->numpy.array([0])
A:numpy.polynomial.laguerre.lagone->numpy.array([1])
A:numpy.polynomial.laguerre.lagx->numpy.array([1, -1])
A:numpy.polynomial.laguerre.prd->numpy.empty(len(c) + 1, dtype=c.dtype)
A:numpy.polynomial.laguerre.[c1, c2]->pu.as_series([c1, c2])
A:numpy.polynomial.laguerre.nd->len(c)
A:numpy.polynomial.laguerre.c->numpy.array([0] * deg + [1])
A:numpy.polynomial.laguerre.cnt->pu._deprecate_as_int(m, 'the order of integration')
A:numpy.polynomial.laguerre.iaxis->normalize_axis_index(iaxis, c.ndim)
A:numpy.polynomial.laguerre.der->numpy.empty((n,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.laguerre.tmp->numpy.empty((n + 1,) + c.shape[1:], dtype=c.dtype)
A:numpy.polynomial.laguerre.x->numpy.linalg.eigvalsh(m)
A:numpy.polynomial.laguerre.ideg->pu._deprecate_as_int(deg, 'deg')
A:numpy.polynomial.laguerre.v->numpy.empty(dims, dtype=dtyp)
A:numpy.polynomial.laguerre.mat->numpy.zeros((n, n), dtype=c.dtype)
A:numpy.polynomial.laguerre.r->numpy.linalg.eigvals(m)
A:numpy.polynomial.laguerre.m->lagcompanion(c)
A:numpy.polynomial.laguerre.dy->lagval(x, c)
A:numpy.polynomial.laguerre.df->lagval(x, lagder(c))
A:numpy.polynomial.laguerre.fm->lagval(x, c[1:])
A:numpy.polynomial.laguerre.w->numpy.exp(-x)
A:numpy.polynomial.laguerre._add->staticmethod(lagadd)
A:numpy.polynomial.laguerre._sub->staticmethod(lagsub)
A:numpy.polynomial.laguerre._mul->staticmethod(lagmul)
A:numpy.polynomial.laguerre._div->staticmethod(lagdiv)
A:numpy.polynomial.laguerre._pow->staticmethod(lagpow)
A:numpy.polynomial.laguerre._val->staticmethod(lagval)
A:numpy.polynomial.laguerre._int->staticmethod(lagint)
A:numpy.polynomial.laguerre._der->staticmethod(lagder)
A:numpy.polynomial.laguerre._fit->staticmethod(lagfit)
A:numpy.polynomial.laguerre._line->staticmethod(lagline)
A:numpy.polynomial.laguerre._roots->staticmethod(lagroots)
A:numpy.polynomial.laguerre._fromroots->staticmethod(lagfromroots)
A:numpy.polynomial.laguerre.domain->numpy.array(lagdomain)
A:numpy.polynomial.laguerre.window->numpy.array(lagdomain)
numpy.polynomial.Laguerre(ABCPolyBase)
numpy.polynomial.laguerre.Laguerre(ABCPolyBase)
numpy.polynomial.laguerre.lag2poly(c)
numpy.polynomial.laguerre.lagadd(c1,c2)
numpy.polynomial.laguerre.lagcompanion(c)
numpy.polynomial.laguerre.lagder(c,m=1,scl=1,axis=0)
numpy.polynomial.laguerre.lagdiv(c1,c2)
numpy.polynomial.laguerre.lagfit(x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.laguerre.lagfromroots(roots)
numpy.polynomial.laguerre.laggauss(deg)
numpy.polynomial.laguerre.laggrid2d(x,y,c)
numpy.polynomial.laguerre.laggrid3d(x,y,z,c)
numpy.polynomial.laguerre.lagint(c,m=1,k=[],lbnd=0,scl=1,axis=0)
numpy.polynomial.laguerre.lagline(off,scl)
numpy.polynomial.laguerre.lagmul(c1,c2)
numpy.polynomial.laguerre.lagmulx(c)
numpy.polynomial.laguerre.lagpow(c,pow,maxpower=16)
numpy.polynomial.laguerre.lagroots(c)
numpy.polynomial.laguerre.lagsub(c1,c2)
numpy.polynomial.laguerre.lagval(x,c,tensor=True)
numpy.polynomial.laguerre.lagval2d(x,y,c)
numpy.polynomial.laguerre.lagval3d(x,y,z,c)
numpy.polynomial.laguerre.lagvander(x,deg)
numpy.polynomial.laguerre.lagvander2d(x,y,deg)
numpy.polynomial.laguerre.lagvander3d(x,y,z,deg)
numpy.polynomial.laguerre.lagweight(x)
numpy.polynomial.laguerre.poly2lag(pol)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/laguerre.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/polyutils.py----------------------------------------
A:numpy.polynomial.polyutils.tmp->numpy.empty(len(a), dtype=np.dtype(object))
A:numpy.polynomial.polyutils.dtype->numpy.common_type(*arrays)
A:numpy.polynomial.polyutils.[c]->as_series([c])
A:numpy.polynomial.polyutils.[ind]->numpy.nonzero(np.abs(c) > tol)
A:numpy.polynomial.polyutils.[x]->as_series([x], trim=False)
A:numpy.polynomial.polyutils.x->numpy.asanyarray(x)
A:numpy.polynomial.polyutils.(off, scl)->mapparms(old, new)
A:numpy.polynomial.polyutils.sl[i]->slice(None)
A:numpy.polynomial.polyutils.n_dims->len(vander_fs)
A:numpy.polynomial.polyutils.points->tuple(np.array(tuple(points), copy=False) + 0.0)
A:numpy.polynomial.polyutils.v->_vander_nd(vander_fs, points, degrees)
A:numpy.polynomial.polyutils.[roots]->as_series([roots], trim=False)
A:numpy.polynomial.polyutils.n->len(p)
A:numpy.polynomial.polyutils.(m, r)->divmod(n, 2)
A:numpy.polynomial.polyutils.tmp[0]->mul_f(tmp[0], p[-1])
A:numpy.polynomial.polyutils.it->iter(args)
A:numpy.polynomial.polyutils.x0->next(it)
A:numpy.polynomial.polyutils.c->val_f(xi, c)
A:numpy.polynomial.polyutils.[c1, c2]->as_series([c1, c2])
A:numpy.polynomial.polyutils.lc1->len(c1)
A:numpy.polynomial.polyutils.lc2->len(c2)
A:numpy.polynomial.polyutils.quo->numpy.empty(lc1 - lc2 + 1, dtype=c1.dtype)
A:numpy.polynomial.polyutils.p->mul_f([0] * i + [1], c2)
A:numpy.polynomial.polyutils.deg->numpy.sort(deg)
A:numpy.polynomial.polyutils.van->vander_f(x, lmax)
A:numpy.polynomial.polyutils.order->len(deg)
A:numpy.polynomial.polyutils.scl->numpy.sqrt(np.square(lhs).sum(1))
A:numpy.polynomial.polyutils.(c, resids, rank, s)->numpy.linalg.lstsq(lhs.T / scl, rhs.T, rcond)
A:numpy.polynomial.polyutils.cc->numpy.zeros(lmax + 1, dtype=c.dtype)
A:numpy.polynomial.polyutils.power->int(pow)
A:numpy.polynomial.polyutils.prd->mul_f(prd, c)
A:numpy.polynomial.polyutils.ix->int(x)
numpy.polynomial.polyutils.RankWarning(UserWarning)
numpy.polynomial.polyutils._add(c1,c2)
numpy.polynomial.polyutils._deprecate_as_int(x,desc)
numpy.polynomial.polyutils._div(mul_f,c1,c2)
numpy.polynomial.polyutils._fit(vander_f,x,y,deg,rcond=None,full=False,w=None)
numpy.polynomial.polyutils._fromroots(line_f,mul_f,roots)
numpy.polynomial.polyutils._gridnd(val_f,c,*args)
numpy.polynomial.polyutils._nth_slice(i,ndim)
numpy.polynomial.polyutils._pow(mul_f,c,pow,maxpower)
numpy.polynomial.polyutils._sub(c1,c2)
numpy.polynomial.polyutils._valnd(val_f,c,*args)
numpy.polynomial.polyutils._vander_nd(vander_fs,points,degrees)
numpy.polynomial.polyutils._vander_nd_flat(vander_fs,points,degrees)
numpy.polynomial.polyutils.as_series(alist,trim=True)
numpy.polynomial.polyutils.getdomain(x)
numpy.polynomial.polyutils.mapdomain(x,old,new)
numpy.polynomial.polyutils.mapparms(old,new)
numpy.polynomial.polyutils.trimcoef(c,tol=0)
numpy.polynomial.polyutils.trimseq(seq)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/polyutils.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/setup.py----------------------------------------
A:numpy.polynomial.setup.config->Configuration('polynomial', parent_package, top_path)
numpy.polynomial.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/tests/test_hermite_e.py----------------------------------------
A:numpy.polynomial.tests.test_hermite_e.He0->numpy.array([1])
A:numpy.polynomial.tests.test_hermite_e.He1->numpy.array([0, 1])
A:numpy.polynomial.tests.test_hermite_e.He2->numpy.array([-1, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He3->numpy.array([0, -3, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He4->numpy.array([3, 0, -6, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He5->numpy.array([0, 15, 0, -10, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He6->numpy.array([-15, 0, 45, 0, -15, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He7->numpy.array([0, -105, 0, 105, 0, -21, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He8->numpy.array([105, 0, -420, 0, 210, 0, -28, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.He9->numpy.array([0, 945, 0, -1260, 0, 378, 0, -36, 0, 1])
A:numpy.polynomial.tests.test_hermite_e.x->numpy.linspace(-5, 5, 11)
A:numpy.polynomial.tests.test_hermite_e.tgt->numpy.exp(-0.5 * x ** 2)
A:numpy.polynomial.tests.test_hermite_e.res->numpy.polynomial.hermite_e.hermeweight(x)
A:numpy.polynomial.tests.test_hermite_e.val1->numpy.polynomial.hermite_e.hermeval(self.x, pol1)
A:numpy.polynomial.tests.test_hermite_e.val2->numpy.polynomial.hermite_e.hermeval(self.x, pol2)
A:numpy.polynomial.tests.test_hermite_e.pol3->numpy.polynomial.hermite_e.hermemul(pol1, pol2)
A:numpy.polynomial.tests.test_hermite_e.val3->numpy.polynomial.hermite_e.hermeval(self.x, pol3)
A:numpy.polynomial.tests.test_hermite_e.(quo, rem)->numpy.polynomial.hermite_e.hermediv(tgt, ci)
A:numpy.polynomial.tests.test_hermite_e.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_hermite_e.c1d->numpy.array([4.0, 2.0, 3.0])
A:numpy.polynomial.tests.test_hermite_e.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_hermite_e.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_hermite_e.y->f2(x)
A:numpy.polynomial.tests.test_hermite_e.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_hermite_e.hermepol->numpy.polynomial.hermite_e.poly2herme(pol)
A:numpy.polynomial.tests.test_hermite_e.hermeint->numpy.polynomial.hermite_e.hermeint(hermepol, m=1, k=[i], scl=2)
A:numpy.polynomial.tests.test_hermite_e.v->numpy.polynomial.hermite_e.hermevander(x, 99)
A:numpy.polynomial.tests.test_hermite_e.van->numpy.polynomial.hermite_e.hermevander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_hermite_e.coef3->numpy.polynomial.hermite_e.hermefit(x, y, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_hermite_e.coef4->numpy.polynomial.hermite_e.hermefit(x, y, [2, 3, 4, 1, 0])
A:numpy.polynomial.tests.test_hermite_e.coef2d->numpy.polynomial.hermite_e.hermefit(x, np.array([y, y]).T, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_hermite_e.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_hermite_e.yw->f2(x).copy()
A:numpy.polynomial.tests.test_hermite_e.wcoef3->numpy.polynomial.hermite_e.hermefit(x, yw, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_hermite_e.wcoef2d->numpy.polynomial.hermite_e.hermefit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_hermite_e.coef1->numpy.polynomial.hermite_e.hermefit(x, y, 4)
A:numpy.polynomial.tests.test_hermite_e.coef2->numpy.polynomial.hermite_e.hermefit(x, y, [0, 2, 4])
A:numpy.polynomial.tests.test_hermite_e.(x, w)->numpy.polynomial.hermite_e.hermegauss(100)
A:numpy.polynomial.tests.test_hermite_e.vv->numpy.dot(v.T * w, v)
A:numpy.polynomial.tests.test_hermite_e.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
A:numpy.polynomial.tests.test_hermite_e.pol->numpy.polynomial.hermite_e.hermefromroots(roots)
numpy.polynomial.tests.test_hermite_e.TestArithmetic
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermeadd(self)
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermediv(self)
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermemul(self)
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermemulx(self)
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermepow(self)
numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermesub(self)
numpy.polynomial.tests.test_hermite_e.TestCompanion
numpy.polynomial.tests.test_hermite_e.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_hermite_e.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_hermite_e.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_hermite_e.TestConstants
numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermedomain(self)
numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermeone(self)
numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermex(self)
numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermezero(self)
numpy.polynomial.tests.test_hermite_e.TestDerivative
numpy.polynomial.tests.test_hermite_e.TestDerivative.test_hermeder(self)
numpy.polynomial.tests.test_hermite_e.TestDerivative.test_hermeder_axis(self)
numpy.polynomial.tests.test_hermite_e.TestEvaluation
numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermegrid2d(self)
numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermegrid3d(self)
numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermeval(self)
numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermeval2d(self)
numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermeval3d(self)
numpy.polynomial.tests.test_hermite_e.TestFitting
numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit(self)
numpy.polynomial.tests.test_hermite_e.TestGauss
numpy.polynomial.tests.test_hermite_e.TestGauss.test_100(self)
numpy.polynomial.tests.test_hermite_e.TestIntegral
numpy.polynomial.tests.test_hermite_e.TestIntegral.test_hermeint(self)
numpy.polynomial.tests.test_hermite_e.TestIntegral.test_hermeint_axis(self)
numpy.polynomial.tests.test_hermite_e.TestMisc
numpy.polynomial.tests.test_hermite_e.TestMisc.test_herme2poly(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermefromroots(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermeline(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermeroots(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermetrim(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_poly2herme(self)
numpy.polynomial.tests.test_hermite_e.TestMisc.test_weight(self)
numpy.polynomial.tests.test_hermite_e.TestVander
numpy.polynomial.tests.test_hermite_e.TestVander.test_hermevander(self)
numpy.polynomial.tests.test_hermite_e.TestVander.test_hermevander2d(self)
numpy.polynomial.tests.test_hermite_e.TestVander.test_hermevander3d(self)
numpy.polynomial.tests.test_hermite_e.trim(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/tests/test_legendre.py----------------------------------------
A:numpy.polynomial.tests.test_legendre.L0->numpy.array([1])
A:numpy.polynomial.tests.test_legendre.L1->numpy.array([0, 1])
A:numpy.polynomial.tests.test_legendre.x->numpy.linspace(-1, 1, 11)
A:numpy.polynomial.tests.test_legendre.tgt->numpy.linspace(-1, 1, i)
A:numpy.polynomial.tests.test_legendre.res->numpy.polynomial.legendre.legweight(x)
A:numpy.polynomial.tests.test_legendre.val1->numpy.polynomial.legendre.legval(self.x, pol1)
A:numpy.polynomial.tests.test_legendre.val2->numpy.polynomial.legendre.legval(self.x, pol2)
A:numpy.polynomial.tests.test_legendre.pol3->numpy.polynomial.legendre.legmul(pol1, pol2)
A:numpy.polynomial.tests.test_legendre.val3->numpy.polynomial.legendre.legval(self.x, pol3)
A:numpy.polynomial.tests.test_legendre.(quo, rem)->numpy.polynomial.legendre.legdiv(tgt, ci)
A:numpy.polynomial.tests.test_legendre.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_legendre.c1d->numpy.array([2.0, 2.0, 2.0])
A:numpy.polynomial.tests.test_legendre.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_legendre.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_legendre.y->f2(x)
A:numpy.polynomial.tests.test_legendre.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_legendre.legpol->numpy.polynomial.legendre.poly2leg(pol)
A:numpy.polynomial.tests.test_legendre.legint->numpy.polynomial.legendre.legint(legpol, m=1, k=[i], scl=2)
A:numpy.polynomial.tests.test_legendre.v->numpy.polynomial.legendre.legvander(x, 99)
A:numpy.polynomial.tests.test_legendre.van->numpy.polynomial.legendre.legvander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_legendre.coef3->numpy.polynomial.legendre.legfit(x, y, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_legendre.coef4->numpy.polynomial.legendre.legfit(x, y, [2, 3, 4, 1, 0])
A:numpy.polynomial.tests.test_legendre.coef2d->numpy.polynomial.legendre.legfit(x, np.array([y, y]).T, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_legendre.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_legendre.yw->f2(x).copy()
A:numpy.polynomial.tests.test_legendre.wcoef3->numpy.polynomial.legendre.legfit(x, yw, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_legendre.wcoef2d->numpy.polynomial.legendre.legfit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_legendre.coef1->numpy.polynomial.legendre.legfit(x, y, 4)
A:numpy.polynomial.tests.test_legendre.coef2->numpy.polynomial.legendre.legfit(x, y, [0, 2, 4])
A:numpy.polynomial.tests.test_legendre.(x, w)->numpy.polynomial.legendre.leggauss(100)
A:numpy.polynomial.tests.test_legendre.vv->numpy.dot(v.T * w, v)
A:numpy.polynomial.tests.test_legendre.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
A:numpy.polynomial.tests.test_legendre.pol->numpy.polynomial.legendre.legfromroots(roots)
numpy.polynomial.tests.test_legendre.TestArithmetic
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legadd(self)
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legdiv(self)
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legmul(self)
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legmulx(self)
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legpow(self)
numpy.polynomial.tests.test_legendre.TestArithmetic.test_legsub(self)
numpy.polynomial.tests.test_legendre.TestCompanion
numpy.polynomial.tests.test_legendre.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_legendre.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_legendre.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_legendre.TestConstants
numpy.polynomial.tests.test_legendre.TestConstants.test_legdomain(self)
numpy.polynomial.tests.test_legendre.TestConstants.test_legone(self)
numpy.polynomial.tests.test_legendre.TestConstants.test_legx(self)
numpy.polynomial.tests.test_legendre.TestConstants.test_legzero(self)
numpy.polynomial.tests.test_legendre.TestDerivative
numpy.polynomial.tests.test_legendre.TestDerivative.test_legder(self)
numpy.polynomial.tests.test_legendre.TestDerivative.test_legder_axis(self)
numpy.polynomial.tests.test_legendre.TestDerivative.test_legder_orderhigherthancoeff(self)
numpy.polynomial.tests.test_legendre.TestEvaluation
numpy.polynomial.tests.test_legendre.TestEvaluation.test_leggrid2d(self)
numpy.polynomial.tests.test_legendre.TestEvaluation.test_leggrid3d(self)
numpy.polynomial.tests.test_legendre.TestEvaluation.test_legval(self)
numpy.polynomial.tests.test_legendre.TestEvaluation.test_legval2d(self)
numpy.polynomial.tests.test_legendre.TestEvaluation.test_legval3d(self)
numpy.polynomial.tests.test_legendre.TestFitting
numpy.polynomial.tests.test_legendre.TestFitting.test_legfit(self)
numpy.polynomial.tests.test_legendre.TestGauss
numpy.polynomial.tests.test_legendre.TestGauss.test_100(self)
numpy.polynomial.tests.test_legendre.TestIntegral
numpy.polynomial.tests.test_legendre.TestIntegral.test_legint(self)
numpy.polynomial.tests.test_legendre.TestIntegral.test_legint_axis(self)
numpy.polynomial.tests.test_legendre.TestIntegral.test_legint_zerointord(self)
numpy.polynomial.tests.test_legendre.TestMisc
numpy.polynomial.tests.test_legendre.TestMisc.test_leg2poly(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_legfromroots(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_legline(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_legline_zeroscl(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_legroots(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_legtrim(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_poly2leg(self)
numpy.polynomial.tests.test_legendre.TestMisc.test_weight(self)
numpy.polynomial.tests.test_legendre.TestVander
numpy.polynomial.tests.test_legendre.TestVander.test_legvander(self)
numpy.polynomial.tests.test_legendre.TestVander.test_legvander2d(self)
numpy.polynomial.tests.test_legendre.TestVander.test_legvander3d(self)
numpy.polynomial.tests.test_legendre.TestVander.test_legvander_negdeg(self)
numpy.polynomial.tests.test_legendre.trim(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/tests/test_polynomial.py----------------------------------------
A:numpy.polynomial.tests.test_polynomial.tgt->numpy.linspace(-1, 1, i)
A:numpy.polynomial.tests.test_polynomial.res->numpy.polynomial.polynomial.polyroots(poly.polyfromroots(tgt))
A:numpy.polynomial.tests.test_polynomial.(quo, rem)->numpy.polynomial.polynomial.polydiv(tgt, ci)
A:numpy.polynomial.tests.test_polynomial.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_polynomial.c1d->numpy.array([1.0, 2.0, 3.0])
A:numpy.polynomial.tests.test_polynomial.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_polynomial.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_polynomial.y->f2(x)
A:numpy.polynomial.tests.test_polynomial.x->numpy.linspace(-1, 1)
A:numpy.polynomial.tests.test_polynomial.mx->numpy.ma.array([1, 2, 3], mask=mask)
A:numpy.polynomial.tests.test_polynomial.cx->numpy.array([1, 2, 3]).view(C)
A:numpy.polynomial.tests.test_polynomial.r->numpy.random.randint(-5, 5, size=rshape)
A:numpy.polynomial.tests.test_polynomial.tgt[ii]->numpy.polynomial.polynomial.polyvalfromroots(x[ii], r[:, ii])
A:numpy.polynomial.tests.test_polynomial.tgt[ii, jj, :]->numpy.polynomial.polynomial.polyvalfromroots(x[jj], r[:, ii])
A:numpy.polynomial.tests.test_polynomial.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_polynomial.v->numpy.polynomial.polynomial.polyvander(x, 3)
A:numpy.polynomial.tests.test_polynomial.van->numpy.polynomial.polynomial.polyvander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_polynomial.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
A:numpy.polynomial.tests.test_polynomial.coef3->numpy.polynomial.polynomial.polyfit(x, y, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_polynomial.coef4->numpy.polynomial.polynomial.polyfit(x, y, [0, 1, 2, 3, 4])
A:numpy.polynomial.tests.test_polynomial.coef2d->numpy.polynomial.polynomial.polyfit(x, np.array([y, y]).T, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_polynomial.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_polynomial.yw->f2(x).copy()
A:numpy.polynomial.tests.test_polynomial.wcoef3->numpy.polynomial.polynomial.polyfit(x, yw, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_polynomial.wcoef2d->numpy.polynomial.polynomial.polyfit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_polynomial.coef1->numpy.polynomial.polynomial.polyfit(x, y, 4)
A:numpy.polynomial.tests.test_polynomial.coef2->numpy.polynomial.polynomial.polyfit(x, y, [0, 2, 4])
numpy.polynomial.tests.test_polynomial.TestArithmetic
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polyadd(self)
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polydiv(self)
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polymul(self)
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polymulx(self)
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polypow(self)
numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polysub(self)
numpy.polynomial.tests.test_polynomial.TestCompanion
numpy.polynomial.tests.test_polynomial.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_polynomial.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_polynomial.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_polynomial.TestConstants
numpy.polynomial.tests.test_polynomial.TestConstants.test_polydomain(self)
numpy.polynomial.tests.test_polynomial.TestConstants.test_polyone(self)
numpy.polynomial.tests.test_polynomial.TestConstants.test_polyx(self)
numpy.polynomial.tests.test_polynomial.TestConstants.test_polyzero(self)
numpy.polynomial.tests.test_polynomial.TestDerivative
numpy.polynomial.tests.test_polynomial.TestDerivative.test_polyder(self)
numpy.polynomial.tests.test_polynomial.TestDerivative.test_polyder_axis(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polygrid2d(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polygrid3d(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyval(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyval2d(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyval3d(self)
numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyvalfromroots(self)
numpy.polynomial.tests.test_polynomial.TestIntegral
numpy.polynomial.tests.test_polynomial.TestIntegral.test_polyint(self)
numpy.polynomial.tests.test_polynomial.TestIntegral.test_polyint_axis(self)
numpy.polynomial.tests.test_polynomial.TestMisc
numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit(self)
numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfromroots(self)
numpy.polynomial.tests.test_polynomial.TestMisc.test_polyline(self)
numpy.polynomial.tests.test_polynomial.TestMisc.test_polyline_zero(self)
numpy.polynomial.tests.test_polynomial.TestMisc.test_polyroots(self)
numpy.polynomial.tests.test_polynomial.TestMisc.test_polytrim(self)
numpy.polynomial.tests.test_polynomial.TestVander
numpy.polynomial.tests.test_polynomial.TestVander.test_polyvander(self)
numpy.polynomial.tests.test_polynomial.TestVander.test_polyvander2d(self)
numpy.polynomial.tests.test_polynomial.TestVander.test_polyvander3d(self)
numpy.polynomial.tests.test_polynomial.TestVander.test_polyvandernegdeg(self)
numpy.polynomial.tests.test_polynomial.trim(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/tests/test_printing.py----------------------------------------
A:numpy.polynomial.tests.test_printing.res->repr(poly.Laguerre([0, 1]))
A:numpy.polynomial.tests.test_printing.p->numpy.polynomial.HermiteE([1, 2, 3])
A:numpy.polynomial.tests.test_printing.c->numpy.polynomial.Chebyshev([1, 2, 3])
A:numpy.polynomial.tests.test_printing.p1->numpy.polynomial.Polynomial(coefs)
A:numpy.polynomial.tests.test_printing.p2->numpy.polynomial.Polynomial(array(coefs, dtype=object))
numpy.polynomial.tests.test_printing.TestFormat
numpy.polynomial.tests.test_printing.TestFormat.test_bad_formatstr(self)
numpy.polynomial.tests.test_printing.TestFormat.test_empty_formatstr(self)
numpy.polynomial.tests.test_printing.TestFormat.test_format_ascii(self)
numpy.polynomial.tests.test_printing.TestFormat.test_format_unicode(self)
numpy.polynomial.tests.test_printing.TestLatexRepr
numpy.polynomial.tests.test_printing.TestLatexRepr.as_latex(self,obj)
numpy.polynomial.tests.test_printing.TestLatexRepr.test_basis_func(self)
numpy.polynomial.tests.test_printing.TestLatexRepr.test_multichar_basis_func(self)
numpy.polynomial.tests.test_printing.TestLatexRepr.test_simple_polynomial(self)
numpy.polynomial.tests.test_printing.TestLinebreaking
numpy.polynomial.tests.test_printing.TestLinebreaking.test_first_linebreak_multiline_on_linewidth(self)
numpy.polynomial.tests.test_printing.TestLinebreaking.test_first_linebreak_multiline_one_less_than_linewidth(self)
numpy.polynomial.tests.test_printing.TestLinebreaking.test_linewidth_printoption(self,lw,tgt)
numpy.polynomial.tests.test_printing.TestLinebreaking.test_num_chars_is_linewidth(self)
numpy.polynomial.tests.test_printing.TestLinebreaking.test_single_line_one_less(self)
numpy.polynomial.tests.test_printing.TestLinebreaking.use_ascii(self)
numpy.polynomial.tests.test_printing.TestRepr
numpy.polynomial.tests.test_printing.TestRepr.test_chebyshev_str(self)
numpy.polynomial.tests.test_printing.TestRepr.test_hermiteE_repr(self)
numpy.polynomial.tests.test_printing.TestRepr.test_hermite_repr(self)
numpy.polynomial.tests.test_printing.TestRepr.test_laguerre_repr(self)
numpy.polynomial.tests.test_printing.TestRepr.test_legendre_repr(self)
numpy.polynomial.tests.test_printing.TestRepr.test_polynomial_str(self)
numpy.polynomial.tests.test_printing.TestStrAscii
numpy.polynomial.tests.test_printing.TestStrAscii.test_chebyshev_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrAscii.test_hermiteE_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrAscii.test_hermite_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrAscii.test_laguerre_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrAscii.test_legendre_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrAscii.test_polynomial_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrAscii.use_ascii(self)
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts.test_chebyshev_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts.test_hermiteE_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts.test_hermite_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts.test_laguerre_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts.test_legendre_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts.test_polynomial_str(self,inp,tgt)
numpy.polynomial.tests.test_printing.TestStrUnicodeSuperSubscripts.use_unicode(self)
numpy.polynomial.tests.test_printing.test_complex_coefficients()
numpy.polynomial.tests.test_printing.test_nonnumeric_object_coefficients(coefs,tgt)
numpy.polynomial.tests.test_printing.test_numeric_object_coefficients(coefs,tgt)
numpy.polynomial.tests.test_printing.test_set_default_printoptions()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/tests/test_chebyshev.py----------------------------------------
A:numpy.polynomial.tests.test_chebyshev.inp->numpy.array([0.5] * i + [2] + [0.5] * i, np.double)
A:numpy.polynomial.tests.test_chebyshev.tgt->numpy.linspace(-1, 1, i)
A:numpy.polynomial.tests.test_chebyshev.res->numpy.polynomial.chebyshev.chebweight(x)
A:numpy.polynomial.tests.test_chebyshev.(quo, rem)->numpy.polynomial.chebyshev.chebdiv(tgt, ci)
A:numpy.polynomial.tests.test_chebyshev.c->numpy.polynomial.chebyshev.chebinterpolate(powx, deg, (p,))
A:numpy.polynomial.tests.test_chebyshev.c1d->numpy.array([2.5, 2.0, 1.5])
A:numpy.polynomial.tests.test_chebyshev.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_chebyshev.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_chebyshev.y->f2(x)
A:numpy.polynomial.tests.test_chebyshev.x->numpy.linspace(-1, 1, 10)
A:numpy.polynomial.tests.test_chebyshev.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_chebyshev.chebpol->numpy.polynomial.chebyshev.poly2cheb(pol)
A:numpy.polynomial.tests.test_chebyshev.chebint->numpy.polynomial.chebyshev.chebint(chebpol, m=1, k=[i], scl=2)
A:numpy.polynomial.tests.test_chebyshev.v->numpy.polynomial.chebyshev.chebvander(x, 99)
A:numpy.polynomial.tests.test_chebyshev.van->numpy.polynomial.chebyshev.chebvander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_chebyshev.coef3->numpy.polynomial.chebyshev.chebfit(x, y, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_chebyshev.coef4->numpy.polynomial.chebyshev.chebfit(x, y, [2, 3, 4, 1, 0])
A:numpy.polynomial.tests.test_chebyshev.coef2d->numpy.polynomial.chebyshev.chebfit(x, np.array([y, y]).T, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_chebyshev.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_chebyshev.yw->f2(x).copy()
A:numpy.polynomial.tests.test_chebyshev.wcoef3->numpy.polynomial.chebyshev.chebfit(x, yw, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_chebyshev.wcoef2d->numpy.polynomial.chebyshev.chebfit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_chebyshev.coef1->numpy.polynomial.chebyshev.chebfit(x, y, 4)
A:numpy.polynomial.tests.test_chebyshev.coef2->numpy.polynomial.chebyshev.chebfit(x, y, [0, 2, 4])
A:numpy.polynomial.tests.test_chebyshev.(x, w)->numpy.polynomial.chebyshev.chebgauss(100)
A:numpy.polynomial.tests.test_chebyshev.vv->numpy.dot(v.T * w, v)
A:numpy.polynomial.tests.test_chebyshev.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
numpy.polynomial.tests.test_chebyshev.TestArithmetic
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebadd(self)
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebdiv(self)
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebmul(self)
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebmulx(self)
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebpow(self)
numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebsub(self)
numpy.polynomial.tests.test_chebyshev.TestCompanion
numpy.polynomial.tests.test_chebyshev.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_chebyshev.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_chebyshev.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_chebyshev.TestConstants
numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebdomain(self)
numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebone(self)
numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebx(self)
numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebzero(self)
numpy.polynomial.tests.test_chebyshev.TestDerivative
numpy.polynomial.tests.test_chebyshev.TestDerivative.test_chebder(self)
numpy.polynomial.tests.test_chebyshev.TestDerivative.test_chebder_axis(self)
numpy.polynomial.tests.test_chebyshev.TestEvaluation
numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebgrid2d(self)
numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebgrid3d(self)
numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebval(self)
numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebval2d(self)
numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebval3d(self)
numpy.polynomial.tests.test_chebyshev.TestFitting
numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit(self)
numpy.polynomial.tests.test_chebyshev.TestGauss
numpy.polynomial.tests.test_chebyshev.TestGauss.test_100(self)
numpy.polynomial.tests.test_chebyshev.TestIntegral
numpy.polynomial.tests.test_chebyshev.TestIntegral.test_chebint(self)
numpy.polynomial.tests.test_chebyshev.TestIntegral.test_chebint_axis(self)
numpy.polynomial.tests.test_chebyshev.TestInterpolate
numpy.polynomial.tests.test_chebyshev.TestInterpolate.f(self,x)
numpy.polynomial.tests.test_chebyshev.TestInterpolate.test_approximation(self)
numpy.polynomial.tests.test_chebyshev.TestInterpolate.test_dimensions(self)
numpy.polynomial.tests.test_chebyshev.TestInterpolate.test_raises(self)
numpy.polynomial.tests.test_chebyshev.TestMisc
numpy.polynomial.tests.test_chebyshev.TestMisc.test_cheb2poly(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebfromroots(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebline(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebpts1(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebpts2(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebroots(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebtrim(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_poly2cheb(self)
numpy.polynomial.tests.test_chebyshev.TestMisc.test_weight(self)
numpy.polynomial.tests.test_chebyshev.TestPrivate
numpy.polynomial.tests.test_chebyshev.TestPrivate.test__cseries_to_zseries(self)
numpy.polynomial.tests.test_chebyshev.TestPrivate.test__zseries_to_cseries(self)
numpy.polynomial.tests.test_chebyshev.TestVander
numpy.polynomial.tests.test_chebyshev.TestVander.test_chebvander(self)
numpy.polynomial.tests.test_chebyshev.TestVander.test_chebvander2d(self)
numpy.polynomial.tests.test_chebyshev.TestVander.test_chebvander3d(self)
numpy.polynomial.tests.test_chebyshev.trim(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/tests/test_hermite.py----------------------------------------
A:numpy.polynomial.tests.test_hermite.H0->numpy.array([1])
A:numpy.polynomial.tests.test_hermite.H1->numpy.array([0, 2])
A:numpy.polynomial.tests.test_hermite.H2->numpy.array([-2, 0, 4])
A:numpy.polynomial.tests.test_hermite.H3->numpy.array([0, -12, 0, 8])
A:numpy.polynomial.tests.test_hermite.H4->numpy.array([12, 0, -48, 0, 16])
A:numpy.polynomial.tests.test_hermite.H5->numpy.array([0, 120, 0, -160, 0, 32])
A:numpy.polynomial.tests.test_hermite.H6->numpy.array([-120, 0, 720, 0, -480, 0, 64])
A:numpy.polynomial.tests.test_hermite.H7->numpy.array([0, -1680, 0, 3360, 0, -1344, 0, 128])
A:numpy.polynomial.tests.test_hermite.H8->numpy.array([1680, 0, -13440, 0, 13440, 0, -3584, 0, 256])
A:numpy.polynomial.tests.test_hermite.H9->numpy.array([0, 30240, 0, -80640, 0, 48384, 0, -9216, 0, 512])
A:numpy.polynomial.tests.test_hermite.x->numpy.linspace(-5, 5, 11)
A:numpy.polynomial.tests.test_hermite.tgt->numpy.exp(-x ** 2)
A:numpy.polynomial.tests.test_hermite.res->numpy.polynomial.hermite.hermweight(x)
A:numpy.polynomial.tests.test_hermite.val1->numpy.polynomial.hermite.hermval(self.x, pol1)
A:numpy.polynomial.tests.test_hermite.val2->numpy.polynomial.hermite.hermval(self.x, pol2)
A:numpy.polynomial.tests.test_hermite.pol3->numpy.polynomial.hermite.hermmul(pol1, pol2)
A:numpy.polynomial.tests.test_hermite.val3->numpy.polynomial.hermite.hermval(self.x, pol3)
A:numpy.polynomial.tests.test_hermite.(quo, rem)->numpy.polynomial.hermite.hermdiv(tgt, ci)
A:numpy.polynomial.tests.test_hermite.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_hermite.c1d->numpy.array([2.5, 1.0, 0.75])
A:numpy.polynomial.tests.test_hermite.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_hermite.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_hermite.y->f2(x)
A:numpy.polynomial.tests.test_hermite.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_hermite.hermpol->numpy.polynomial.hermite.poly2herm(pol)
A:numpy.polynomial.tests.test_hermite.hermint->numpy.polynomial.hermite.hermint(hermpol, m=1, k=[i], scl=2)
A:numpy.polynomial.tests.test_hermite.v->numpy.polynomial.hermite.hermvander(x, 99)
A:numpy.polynomial.tests.test_hermite.van->numpy.polynomial.hermite.hermvander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_hermite.coef3->numpy.polynomial.hermite.hermfit(x, y, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_hermite.coef4->numpy.polynomial.hermite.hermfit(x, y, [2, 3, 4, 1, 0])
A:numpy.polynomial.tests.test_hermite.coef2d->numpy.polynomial.hermite.hermfit(x, np.array([y, y]).T, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_hermite.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_hermite.yw->f2(x).copy()
A:numpy.polynomial.tests.test_hermite.wcoef3->numpy.polynomial.hermite.hermfit(x, yw, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_hermite.wcoef2d->numpy.polynomial.hermite.hermfit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_hermite.coef1->numpy.polynomial.hermite.hermfit(x, y, 4)
A:numpy.polynomial.tests.test_hermite.coef2->numpy.polynomial.hermite.hermfit(x, y, [0, 2, 4])
A:numpy.polynomial.tests.test_hermite.(x, w)->numpy.polynomial.hermite.hermgauss(100)
A:numpy.polynomial.tests.test_hermite.vv->numpy.dot(v.T * w, v)
A:numpy.polynomial.tests.test_hermite.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
A:numpy.polynomial.tests.test_hermite.pol->numpy.polynomial.hermite.hermfromroots(roots)
numpy.polynomial.tests.test_hermite.TestArithmetic
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermadd(self)
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermdiv(self)
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermmul(self)
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermmulx(self)
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermpow(self)
numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermsub(self)
numpy.polynomial.tests.test_hermite.TestCompanion
numpy.polynomial.tests.test_hermite.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_hermite.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_hermite.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_hermite.TestConstants
numpy.polynomial.tests.test_hermite.TestConstants.test_hermdomain(self)
numpy.polynomial.tests.test_hermite.TestConstants.test_hermone(self)
numpy.polynomial.tests.test_hermite.TestConstants.test_hermx(self)
numpy.polynomial.tests.test_hermite.TestConstants.test_hermzero(self)
numpy.polynomial.tests.test_hermite.TestDerivative
numpy.polynomial.tests.test_hermite.TestDerivative.test_hermder(self)
numpy.polynomial.tests.test_hermite.TestDerivative.test_hermder_axis(self)
numpy.polynomial.tests.test_hermite.TestEvaluation
numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermgrid2d(self)
numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermgrid3d(self)
numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermval(self)
numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermval2d(self)
numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermval3d(self)
numpy.polynomial.tests.test_hermite.TestFitting
numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit(self)
numpy.polynomial.tests.test_hermite.TestGauss
numpy.polynomial.tests.test_hermite.TestGauss.test_100(self)
numpy.polynomial.tests.test_hermite.TestIntegral
numpy.polynomial.tests.test_hermite.TestIntegral.test_hermint(self)
numpy.polynomial.tests.test_hermite.TestIntegral.test_hermint_axis(self)
numpy.polynomial.tests.test_hermite.TestMisc
numpy.polynomial.tests.test_hermite.TestMisc.test_herm2poly(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_hermfromroots(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_hermline(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_hermroots(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_hermtrim(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_poly2herm(self)
numpy.polynomial.tests.test_hermite.TestMisc.test_weight(self)
numpy.polynomial.tests.test_hermite.TestVander
numpy.polynomial.tests.test_hermite.TestVander.test_hermvander(self)
numpy.polynomial.tests.test_hermite.TestVander.test_hermvander2d(self)
numpy.polynomial.tests.test_hermite.TestVander.test_hermvander3d(self)
numpy.polynomial.tests.test_hermite.trim(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/tests/test_laguerre.py----------------------------------------
A:numpy.polynomial.tests.test_laguerre.x->numpy.linspace(0, 10, 11)
A:numpy.polynomial.tests.test_laguerre.tgt->numpy.exp(-x)
A:numpy.polynomial.tests.test_laguerre.res->numpy.polynomial.laguerre.lagweight(x)
A:numpy.polynomial.tests.test_laguerre.val1->numpy.polynomial.laguerre.lagval(self.x, pol1)
A:numpy.polynomial.tests.test_laguerre.val2->numpy.polynomial.laguerre.lagval(self.x, pol2)
A:numpy.polynomial.tests.test_laguerre.pol3->numpy.polynomial.laguerre.lagmul(pol1, pol2)
A:numpy.polynomial.tests.test_laguerre.val3->numpy.polynomial.laguerre.lagval(self.x, pol3)
A:numpy.polynomial.tests.test_laguerre.(quo, rem)->numpy.polynomial.laguerre.lagdiv(tgt, ci)
A:numpy.polynomial.tests.test_laguerre.c->numpy.random.random((2, 3, 4))
A:numpy.polynomial.tests.test_laguerre.c1d->numpy.array([9.0, -14.0, 6.0])
A:numpy.polynomial.tests.test_laguerre.c2d->numpy.random.random((3, 4))
A:numpy.polynomial.tests.test_laguerre.c3d->numpy.einsum('i,j,k->ijk', c1d, c1d, c1d)
A:numpy.polynomial.tests.test_laguerre.y->f(x)
A:numpy.polynomial.tests.test_laguerre.z->numpy.ones((2, 3))
A:numpy.polynomial.tests.test_laguerre.lagpol->numpy.polynomial.laguerre.poly2lag(pol)
A:numpy.polynomial.tests.test_laguerre.lagint->numpy.polynomial.laguerre.lagint(lagpol, m=1, k=[i], scl=2)
A:numpy.polynomial.tests.test_laguerre.v->numpy.polynomial.laguerre.lagvander(x, 99)
A:numpy.polynomial.tests.test_laguerre.van->numpy.polynomial.laguerre.lagvander3d([x1], [x2], [x3], [1, 2, 3])
A:numpy.polynomial.tests.test_laguerre.coef3->numpy.polynomial.laguerre.lagfit(x, y, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_laguerre.coef4->numpy.polynomial.laguerre.lagfit(x, y, [0, 1, 2, 3, 4])
A:numpy.polynomial.tests.test_laguerre.coef2d->numpy.polynomial.laguerre.lagfit(x, np.array([y, y]).T, [0, 1, 2, 3])
A:numpy.polynomial.tests.test_laguerre.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_laguerre.yw->f(x).copy()
A:numpy.polynomial.tests.test_laguerre.wcoef3->numpy.polynomial.laguerre.lagfit(x, yw, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_laguerre.wcoef2d->numpy.polynomial.laguerre.lagfit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
A:numpy.polynomial.tests.test_laguerre.(x, w)->numpy.polynomial.laguerre.laggauss(100)
A:numpy.polynomial.tests.test_laguerre.vv->numpy.dot(v.T * w, v)
A:numpy.polynomial.tests.test_laguerre.roots->numpy.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
A:numpy.polynomial.tests.test_laguerre.pol->numpy.polynomial.laguerre.lagfromroots(roots)
numpy.polynomial.tests.test_laguerre.TestArithmetic
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagadd(self)
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagdiv(self)
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagmul(self)
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagmulx(self)
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagpow(self)
numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagsub(self)
numpy.polynomial.tests.test_laguerre.TestCompanion
numpy.polynomial.tests.test_laguerre.TestCompanion.test_dimensions(self)
numpy.polynomial.tests.test_laguerre.TestCompanion.test_linear_root(self)
numpy.polynomial.tests.test_laguerre.TestCompanion.test_raises(self)
numpy.polynomial.tests.test_laguerre.TestConstants
numpy.polynomial.tests.test_laguerre.TestConstants.test_lagdomain(self)
numpy.polynomial.tests.test_laguerre.TestConstants.test_lagone(self)
numpy.polynomial.tests.test_laguerre.TestConstants.test_lagx(self)
numpy.polynomial.tests.test_laguerre.TestConstants.test_lagzero(self)
numpy.polynomial.tests.test_laguerre.TestDerivative
numpy.polynomial.tests.test_laguerre.TestDerivative.test_lagder(self)
numpy.polynomial.tests.test_laguerre.TestDerivative.test_lagder_axis(self)
numpy.polynomial.tests.test_laguerre.TestEvaluation
numpy.polynomial.tests.test_laguerre.TestEvaluation.test_laggrid2d(self)
numpy.polynomial.tests.test_laguerre.TestEvaluation.test_laggrid3d(self)
numpy.polynomial.tests.test_laguerre.TestEvaluation.test_lagval(self)
numpy.polynomial.tests.test_laguerre.TestEvaluation.test_lagval2d(self)
numpy.polynomial.tests.test_laguerre.TestEvaluation.test_lagval3d(self)
numpy.polynomial.tests.test_laguerre.TestFitting
numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit(self)
numpy.polynomial.tests.test_laguerre.TestGauss
numpy.polynomial.tests.test_laguerre.TestGauss.test_100(self)
numpy.polynomial.tests.test_laguerre.TestIntegral
numpy.polynomial.tests.test_laguerre.TestIntegral.test_lagint(self)
numpy.polynomial.tests.test_laguerre.TestIntegral.test_lagint_axis(self)
numpy.polynomial.tests.test_laguerre.TestMisc
numpy.polynomial.tests.test_laguerre.TestMisc.test_lag2poly(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_lagfromroots(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_lagline(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_lagroots(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_lagtrim(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_poly2lag(self)
numpy.polynomial.tests.test_laguerre.TestMisc.test_weight(self)
numpy.polynomial.tests.test_laguerre.TestVander
numpy.polynomial.tests.test_laguerre.TestVander.test_lagvander(self)
numpy.polynomial.tests.test_laguerre.TestVander.test_lagvander2d(self)
numpy.polynomial.tests.test_laguerre.TestVander.test_lagvander3d(self)
numpy.polynomial.tests.test_laguerre.trim(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/tests/test_polyutils.py----------------------------------------
A:numpy.polynomial.tests.test_polyutils.res->numpy.polynomial.polyutils.mapparms(dom1, dom2)
A:numpy.polynomial.tests.test_polyutils.ci->numpy.ones(1, types[i])
A:numpy.polynomial.tests.test_polyutils.cj->numpy.ones(1, types[j])
A:numpy.polynomial.tests.test_polyutils.[resi, resj]->numpy.polynomial.polyutils.as_series([ci, cj])
A:numpy.polynomial.tests.test_polyutils.tgt->numpy.array([dom2, dom2])
A:numpy.polynomial.tests.test_polyutils.x->numpy.array([dom1, dom1]).view(MyNDArray)
numpy.polynomial.tests.test_polyutils.TestDomain
numpy.polynomial.tests.test_polyutils.TestDomain.test_getdomain(self)
numpy.polynomial.tests.test_polyutils.TestDomain.test_mapdomain(self)
numpy.polynomial.tests.test_polyutils.TestDomain.test_mapparms(self)
numpy.polynomial.tests.test_polyutils.TestMisc
numpy.polynomial.tests.test_polyutils.TestMisc.test_as_series(self)
numpy.polynomial.tests.test_polyutils.TestMisc.test_div_zerodiv(self)
numpy.polynomial.tests.test_polyutils.TestMisc.test_pow_too_large(self)
numpy.polynomial.tests.test_polyutils.TestMisc.test_trimcoef(self)
numpy.polynomial.tests.test_polyutils.TestMisc.test_trimseq(self)
numpy.polynomial.tests.test_polyutils.TestMisc.test_vander_nd_exception(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/polynomial/tests/test_classes.py----------------------------------------
A:numpy.polynomial.tests.test_classes.classids->tuple((cls.__name__ for cls in classes))
A:numpy.polynomial.tests.test_classes.x->numpy.linspace(0, 2, 10)
A:numpy.polynomial.tests.test_classes.coef->random((3,))
A:numpy.polynomial.tests.test_classes.p1->Poly([1, 2, 3])
A:numpy.polynomial.tests.test_classes.p2->Poly([1, 2, 3]).integ(2, k=[1, 2])
A:numpy.polynomial.tests.test_classes.p->numpy.polynomial.Chebyshev.interpolate(powx, deg, domain=[0, 2], args=(t,))
A:numpy.polynomial.tests.test_classes.r->random((5,))
A:numpy.polynomial.tests.test_classes.y->f(x)
A:numpy.polynomial.tests.test_classes.w->numpy.zeros_like(x)
A:numpy.polynomial.tests.test_classes.p3->Poly([1, 2, 3]).integ(1, k=[1])
A:numpy.polynomial.tests.test_classes.p4->Poly([1, 2, 3], domain=[0, 1], window=[1, 2])
A:numpy.polynomial.tests.test_classes.c1->list(random((4,)) + 0.5)
A:numpy.polynomial.tests.test_classes.c2->list(random((3,)) + 0.5)
A:numpy.polynomial.tests.test_classes.c3->list(random((2,)) + 0.5)
A:numpy.polynomial.tests.test_classes.c4->list(p4.coef)
A:numpy.polynomial.tests.test_classes.s->stype(5, 0)
A:numpy.polynomial.tests.test_classes.(quo, rem)->divmod(2, p2)
A:numpy.polynomial.tests.test_classes.tgt->Poly([1])
A:numpy.polynomial.tests.test_classes.res->p(x)
A:numpy.polynomial.tests.test_classes.p0->Poly.cast(P([1 * 2, 2 * 3, 3 * 4]), domain=d)
A:numpy.polynomial.tests.test_classes.xtgt->numpy.linspace(0, 2, 20)
A:numpy.polynomial.tests.test_classes.ytgt->p(xtgt)
A:numpy.polynomial.tests.test_classes.(xres, yres)->numpy.polynomial.Chebyshev.interpolate(powx, deg, domain=[0, 2], args=(t,)).linspace(20, domain=[0, 2])
A:numpy.polynomial.tests.test_classes.tst->Poly([1, 2, 3])
numpy.polynomial.tests.test_classes.Poly(request)
numpy.polynomial.tests.test_classes.TestInterpolate
numpy.polynomial.tests.test_classes.TestInterpolate.f(self,x)
numpy.polynomial.tests.test_classes.TestInterpolate.test_approximation(self)
numpy.polynomial.tests.test_classes.TestInterpolate.test_dimensions(self)
numpy.polynomial.tests.test_classes.TestInterpolate.test_raises(self)
numpy.polynomial.tests.test_classes.assert_poly_almost_equal(p1,p2,msg='')
numpy.polynomial.tests.test_classes.test_add(Poly)
numpy.polynomial.tests.test_classes.test_bad_conditioned_fit(Poly)
numpy.polynomial.tests.test_classes.test_basis(Poly)
numpy.polynomial.tests.test_classes.test_call(Poly)
numpy.polynomial.tests.test_classes.test_cast(Poly1,Poly2)
numpy.polynomial.tests.test_classes.test_conversion(Poly1,Poly2)
numpy.polynomial.tests.test_classes.test_copy(Poly)
numpy.polynomial.tests.test_classes.test_cutdeg(Poly)
numpy.polynomial.tests.test_classes.test_degree(Poly)
numpy.polynomial.tests.test_classes.test_deriv(Poly)
numpy.polynomial.tests.test_classes.test_divmod(Poly)
numpy.polynomial.tests.test_classes.test_equal(Poly)
numpy.polynomial.tests.test_classes.test_fit(Poly)
numpy.polynomial.tests.test_classes.test_floordiv(Poly)
numpy.polynomial.tests.test_classes.test_fromroots(Poly)
numpy.polynomial.tests.test_classes.test_identity(Poly)
numpy.polynomial.tests.test_classes.test_integ(Poly)
numpy.polynomial.tests.test_classes.test_linspace(Poly)
numpy.polynomial.tests.test_classes.test_mapparms(Poly)
numpy.polynomial.tests.test_classes.test_mod(Poly)
numpy.polynomial.tests.test_classes.test_mul(Poly)
numpy.polynomial.tests.test_classes.test_not_equal(Poly)
numpy.polynomial.tests.test_classes.test_pow(Poly)
numpy.polynomial.tests.test_classes.test_roots(Poly)
numpy.polynomial.tests.test_classes.test_sub(Poly)
numpy.polynomial.tests.test_classes.test_trim(Poly)
numpy.polynomial.tests.test_classes.test_truediv(Poly)
numpy.polynomial.tests.test_classes.test_truncate(Poly)
numpy.polynomial.tests.test_classes.test_ufunc_override(Poly)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/extras.py----------------------------------------
A:numpy.ma.extras.m->mask_or(m, getmask(w))
A:numpy.ma.extras.a->asarray(a)
A:numpy.ma.extras.a._mask->numpy.ones(a.shape, dtype=make_mask_descr(a.dtype))
A:numpy.ma.extras.self.__doc__->self.getdoc()
A:numpy.ma.extras.npfunc->getattr(np, self.__name__, None)
A:numpy.ma.extras.doc->ma.doc_note(doc, 'The function is applied to both the _data and the _mask, if any.')
A:numpy.ma.extras.func->getattr(np, self.__name__)
A:numpy.ma.extras._d->func(np.asarray(x), **params)
A:numpy.ma.extras._m->func(getmaskarray(x), **params)
A:numpy.ma.extras.args->list(args)
A:numpy.ma.extras.atleast_1d->_fromnxfunction_allargs('atleast_1d')
A:numpy.ma.extras.atleast_2d->_fromnxfunction_allargs('atleast_2d')
A:numpy.ma.extras.atleast_3d->_fromnxfunction_allargs('atleast_3d')
A:numpy.ma.extras.vstackrow_stack->_fromnxfunction_seq('vstack')
A:numpy.ma.extras.hstack->_fromnxfunction_seq('hstack')
A:numpy.ma.extras.column_stack->_fromnxfunction_seq('column_stack')
A:numpy.ma.extras.dstack->_fromnxfunction_seq('dstack')
A:numpy.ma.extras.stack->_fromnxfunction_seq('stack')
A:numpy.ma.extras.hsplit->_fromnxfunction_single('hsplit')
A:numpy.ma.extras.diagflat->_fromnxfunction_single('diagflat')
A:numpy.ma.extras.arr->array(arr, copy=False, subok=True)
A:numpy.ma.extras.axis->normalize_axis_tuple(axis, x.ndim)
A:numpy.ma.extras.i->numpy.zeros(nd, 'O')
A:numpy.ma.extras.indlist->list(range(nd))
A:numpy.ma.extras.i[axis]->slice(None, None)
A:numpy.ma.extras.outshape->flatten_inplace(outshape)
A:numpy.ma.extras.res->ma.expand_dims(res, axis)
A:numpy.ma.extras.asscalar->numpy.isscalar(res)
A:numpy.ma.extras.outarr->zeros(outshape, object)
A:numpy.ma.extras.Ntot->numpy.product(outshape)
A:numpy.ma.extras.j->numpy.zeros(nd, 'O').copy()
A:numpy.ma.extras.max_dtypes->numpy.dtype(np.asarray(dtypes).max())
A:numpy.ma.extras.result->(dot(x, x.T.conj(), strict=False) / fact).squeeze()
A:numpy.ma.extras.result.fill_value->ma.default_fill_value(result)
A:numpy.ma.extras.val->asarray(a)
A:numpy.ma.extras.avg->asarray(a).mean(axis)
A:numpy.ma.extras.scl->numpy.broadcast_to(scl, avg.shape).copy()
A:numpy.ma.extras.wgt->wgt.swapaxes(-1, axis).swapaxes(-1, axis)
A:numpy.ma.extras.result_dtype->numpy.result_type(a.dtype, wgt.dtype)
A:numpy.ma.extras.(r, k)->_ureduce(a, func=_median, axis=axis, out=out, overwrite_input=overwrite_input)
A:numpy.ma.extras.asorted->sort(a, axis=axis, fill_value=fill_value)
A:numpy.ma.extras.indexer[axis]->slice(0, 0)
A:numpy.ma.extras.indexer->tuple(indexer)
A:numpy.ma.extras.counts->count(asorted, axis=axis, keepdims=True)
A:numpy.ma.extras.(idx, odd)->divmod(count(asorted), 2)
A:numpy.ma.extras.s->numpy.ma.mean(low_high, axis=axis, out=out)
A:numpy.ma.extras.l->numpy.where(odd, h, h - 1)
A:numpy.ma.extras.lh->numpy.concatenate([l, h], axis=axis)
A:numpy.ma.extras.low_high->numpy.take_along_axis(asorted, lh, axis=axis)
A:numpy.ma.extras.s.data[rep]->numpy.ma.minimum_fill_value(asorted)
A:numpy.ma.extras.x->asarray(x)
A:numpy.ma.extras.axes->tuple(list(range(ax)) + list(range(ax + 1, x.ndim)))
A:numpy.ma.extras.ed->hstack(arrays)
A:numpy.ma.extras.output->output.view(MaskedArray).view(MaskedArray)
A:numpy.ma.extras.output[0]->output[0].view(MaskedArray).view(MaskedArray)
A:numpy.ma.extras.aux->ma.concatenate((ar1, ar2))
A:numpy.ma.extras.ar1->unique(ar1)
A:numpy.ma.extras.ar2->unique(ar2)
A:numpy.ma.extras.auxf->ma.concatenate((ar1, ar2)).filled()
A:numpy.ma.extras.flag->ma.concatenate((bool_ar, [invert]))
A:numpy.ma.extras.(ar1, rev_idx)->unique(ar1, return_inverse=True)
A:numpy.ma.extras.ar->ma.concatenate((ar1, ar2))
A:numpy.ma.extras.order->ma.concatenate((ar1, ar2)).argsort(kind='mergesort')
A:numpy.ma.extras.element->ma.asarray(element)
A:numpy.ma.extras.xmask->ma.getmaskarray(x)
A:numpy.ma.extras.rowvar->int(bool(rowvar))
A:numpy.ma.extras.xnotmask->numpy.logical_not(np.concatenate((xmask, ymask), axis)).astype(int)
A:numpy.ma.extras.y->asarray(y)
A:numpy.ma.extras.ymask->ma.getmaskarray(y)
A:numpy.ma.extras.common_mask->numpy.logical_or(xmask, ymask)
A:numpy.ma.extras.(x, xnotmask, rowvar)->_covhelper(x, y, rowvar, allow_masked)
A:numpy.ma.extras.c->(dot(x, x.T.conj(), strict=False) / fact).squeeze()
A:numpy.ma.extras.diag->ma.diagonal(c)
A:numpy.ma.extras._denom->diagflat(diag)
A:numpy.ma.extras._x->mask_cols(vstack((x[:, i], x[:, j]))).var(axis=1)
A:numpy.ma.extras._denom[i, j]_denom[j, i]->ma.sqrt(ma.multiply.reduce(_x))
A:numpy.ma.extras.concatenate->staticmethod(concatenate)
A:numpy.ma.extras.data->super().makemat(arr.data, copy=False)
A:numpy.ma.extras.mr_->mr_class()
A:numpy.ma.extras.unmasked->numpy.flatnonzero(~m)
A:numpy.ma.extras.idx->(mask[1:] ^ mask[:-1]).nonzero()
A:numpy.ma.extras.n->len(list(g))
A:numpy.ma.extras.idx[axis]->slice(None, None)
A:numpy.ma.extras.mask->ma.getmask(a)
A:numpy.ma.extras._vander->numpy.vander(x, n)
A:numpy.ma.extras.vander.__doc__->ma.doc_note(np.vander.__doc__, vander.__doc__)
A:numpy.ma.extras.my->getmask(mask_rows(y))
A:numpy.ma.extras.w->asarray(w)
A:numpy.ma.extras.polyfit.__doc__->ma.doc_note(np.polyfit.__doc__, polyfit.__doc__)
numpy.ma.MAxisConcatenator(AxisConcatenator)
numpy.ma.MAxisConcatenator.__getitem__(self,key)
numpy.ma.MAxisConcatenator.makemat(cls,arr)
numpy.ma._covhelper(x,y=None,rowvar=True,allow_masked=True)
numpy.ma._ezclump(mask)
numpy.ma._fromnxfunction(self,funcname)
numpy.ma._fromnxfunction.getdoc(self)
numpy.ma._fromnxfunction_allargs(self,*args,**params)
numpy.ma._fromnxfunction_args(self,*args,**params)
numpy.ma._fromnxfunction_seq(self,x,*args,**params)
numpy.ma._fromnxfunction_single(self,x,*args,**params)
numpy.ma._median(a,axis=None,out=None,overwrite_input=False)
numpy.ma.apply_along_axis(func1d,axis,arr,*args,**kwargs)
numpy.ma.apply_over_axes(func,a,axes)
numpy.ma.average(a,axis=None,weights=None,returned=False)
numpy.ma.clump_masked(a)
numpy.ma.clump_unmasked(a)
numpy.ma.compress_cols(a)
numpy.ma.compress_nd(x,axis=None)
numpy.ma.compress_rowcols(x,axis=None)
numpy.ma.compress_rows(a)
numpy.ma.corrcoef(x,y=None,rowvar=True,bias=np._NoValue,allow_masked=True,ddof=np._NoValue)
numpy.ma.count_masked(arr,axis=None)
numpy.ma.cov(x,y=None,rowvar=True,bias=False,allow_masked=True,ddof=None)
numpy.ma.ediff1d(arr,to_end=None,to_begin=None)
numpy.ma.extras.MAxisConcatenator(AxisConcatenator)
numpy.ma.extras.MAxisConcatenator.__getitem__(self,key)
numpy.ma.extras.MAxisConcatenator.makemat(cls,arr)
numpy.ma.extras._covhelper(x,y=None,rowvar=True,allow_masked=True)
numpy.ma.extras._ezclump(mask)
numpy.ma.extras._fromnxfunction(self,funcname)
numpy.ma.extras._fromnxfunction.__init__(self,funcname)
numpy.ma.extras._fromnxfunction.getdoc(self)
numpy.ma.extras._fromnxfunction_allargs(self,*args,**params)
numpy.ma.extras._fromnxfunction_allargs.__call__(self,*args,**params)
numpy.ma.extras._fromnxfunction_args(self,*args,**params)
numpy.ma.extras._fromnxfunction_args.__call__(self,*args,**params)
numpy.ma.extras._fromnxfunction_seq(self,x,*args,**params)
numpy.ma.extras._fromnxfunction_seq.__call__(self,x,*args,**params)
numpy.ma.extras._fromnxfunction_single(self,x,*args,**params)
numpy.ma.extras._fromnxfunction_single.__call__(self,x,*args,**params)
numpy.ma.extras._median(a,axis=None,out=None,overwrite_input=False)
numpy.ma.extras.apply_along_axis(func1d,axis,arr,*args,**kwargs)
numpy.ma.extras.apply_over_axes(func,a,axes)
numpy.ma.extras.average(a,axis=None,weights=None,returned=False)
numpy.ma.extras.clump_masked(a)
numpy.ma.extras.clump_unmasked(a)
numpy.ma.extras.compress_cols(a)
numpy.ma.extras.compress_nd(x,axis=None)
numpy.ma.extras.compress_rowcols(x,axis=None)
numpy.ma.extras.compress_rows(a)
numpy.ma.extras.corrcoef(x,y=None,rowvar=True,bias=np._NoValue,allow_masked=True,ddof=np._NoValue)
numpy.ma.extras.count_masked(arr,axis=None)
numpy.ma.extras.cov(x,y=None,rowvar=True,bias=False,allow_masked=True,ddof=None)
numpy.ma.extras.ediff1d(arr,to_end=None,to_begin=None)
numpy.ma.extras.flatnotmasked_contiguous(a)
numpy.ma.extras.flatnotmasked_edges(a)
numpy.ma.extras.flatten_inplace(seq)
numpy.ma.extras.in1d(ar1,ar2,assume_unique=False,invert=False)
numpy.ma.extras.intersect1d(ar1,ar2,assume_unique=False)
numpy.ma.extras.isin(element,test_elements,assume_unique=False,invert=False)
numpy.ma.extras.issequence(seq)
numpy.ma.extras.mask_cols(a,axis=np._NoValue)
numpy.ma.extras.mask_rows(a,axis=np._NoValue)
numpy.ma.extras.masked_all(shape,dtype=float)
numpy.ma.extras.masked_all_like(arr)
numpy.ma.extras.median(a,axis=None,out=None,overwrite_input=False,keepdims=False)
numpy.ma.extras.mr_class(self)
numpy.ma.extras.mr_class.__init__(self)
numpy.ma.extras.notmasked_contiguous(a,axis=None)
numpy.ma.extras.notmasked_edges(a,axis=None)
numpy.ma.extras.polyfit(x,y,deg,rcond=None,full=False,w=None,cov=False)
numpy.ma.extras.setdiff1d(ar1,ar2,assume_unique=False)
numpy.ma.extras.setxor1d(ar1,ar2,assume_unique=False)
numpy.ma.extras.union1d(ar1,ar2)
numpy.ma.extras.unique(ar1,return_index=False,return_inverse=False)
numpy.ma.extras.vander(x,n=None)
numpy.ma.flatnotmasked_contiguous(a)
numpy.ma.flatnotmasked_edges(a)
numpy.ma.flatten_inplace(seq)
numpy.ma.in1d(ar1,ar2,assume_unique=False,invert=False)
numpy.ma.intersect1d(ar1,ar2,assume_unique=False)
numpy.ma.isin(element,test_elements,assume_unique=False,invert=False)
numpy.ma.issequence(seq)
numpy.ma.mask_cols(a,axis=np._NoValue)
numpy.ma.mask_rows(a,axis=np._NoValue)
numpy.ma.masked_all(shape,dtype=float)
numpy.ma.masked_all_like(arr)
numpy.ma.median(a,axis=None,out=None,overwrite_input=False,keepdims=False)
numpy.ma.mr_class(self)
numpy.ma.notmasked_contiguous(a,axis=None)
numpy.ma.notmasked_edges(a,axis=None)
numpy.ma.polyfit(x,y,deg,rcond=None,full=False,w=None,cov=False)
numpy.ma.setdiff1d(ar1,ar2,assume_unique=False)
numpy.ma.setxor1d(ar1,ar2,assume_unique=False)
numpy.ma.union1d(ar1,ar2)
numpy.ma.unique(ar1,return_index=False,return_inverse=False)
numpy.ma.vander(x,n=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/extras.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/__init__.py----------------------------------------
A:numpy.ma.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/__init__.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/core.py----------------------------------------
A:numpy.ma.core.nomask->MaskType(0)
A:numpy.ma.core.notesplit->re.split('\\n\\s*?Notes\\n\\s*?-----', inspect.cleandoc(initialdoc))
A:numpy.ma.core.sig->get_object_signature(self._func)
A:numpy.ma.core.default_filler['M8[' + v + ']']->numpy.datetime64('NaT', v)
A:numpy.ma.core.default_filler['m8[' + v + ']']->numpy.timedelta64('NaT', v)
A:numpy.ma.core.vals->tuple((_recursive_fill_value(dtype[name], f) for name in dtype.names))
A:numpy.ma.core.subval->_recursive_fill_value(subtype, f)
A:numpy.ma.core.dtype->numpy.result_type(y, 1.0)
A:numpy.ma.core.fillvalue->numpy.resize(fillvalue, len(dt.names))
A:numpy.ma.core.ndtype->numpy.dtype(ndtype)
A:numpy.ma.core.fill_value->maximum_fill_value(self)
A:numpy.ma.core.result->self._func.__call__(*args, **params).view(MaskedArray)
A:numpy.ma.core.t1->get_fill_value(a)
A:numpy.ma.core.t2->get_fill_value(b)
A:numpy.ma.core.rcls->get_masked_subclass(*arrays)
A:numpy.ma.core.data->f(filled(a, 0), filled(v, 0), mode=mode)
A:numpy.ma.core.a->mask_rowcols(a, 0)
A:numpy.ma.core.invalid->numpy.logical_not(np.isfinite(result.view(ndarray)))
A:numpy.ma.core.d->filled(less_equal(absolute(x - y), atol + rtol * absolute(y)), masked_equal)
A:numpy.ma.core.m->mask_or(getmask(x), getmask(y))
A:numpy.ma.core.masked_result->self._func.__call__(*args, **params).view(MaskedArray).view(get_masked_subclass(a, b))
A:numpy.ma.core.tclass->get_masked_subclass(target)
A:numpy.ma.core.t->self.f.reduce(target, **kwargs)
A:numpy.ma.core.tr->self.f.reduce(t, axis, dtype=dtype or t.dtype)
A:numpy.ma.core.mr->numpy.core.umath.logical_and.reduce(m, axis)
A:numpy.ma.core.masked_tr->self.f.reduce(t, axis, dtype=dtype or t.dtype).view(tclass)
A:numpy.ma.core.ma->getmaskarray(a)
A:numpy.ma.core.mb->getmaskarray(b)
A:numpy.ma.core.masked_d->filled(less_equal(absolute(x - y), atol + rtol * absolute(y)), masked_equal).view(get_masked_subclass(a, b))
A:numpy.ma.core.domain->ufunc_domain.get(func, None)
A:numpy.ma.core.masked_da->numpy.core.umath.multiply(m, da)
A:numpy.ma.core.exp->_MaskedUnaryOperation(umath.exp)
A:numpy.ma.core.conjugate->_MaskedUnaryOperation(umath.conjugate)
A:numpy.ma.core.sin->_MaskedUnaryOperation(umath.sin)
A:numpy.ma.core.cos->_MaskedUnaryOperation(umath.cos)
A:numpy.ma.core.arctan->_MaskedUnaryOperation(umath.arctan)
A:numpy.ma.core.arcsinh->_MaskedUnaryOperation(umath.arcsinh)
A:numpy.ma.core.sinh->_MaskedUnaryOperation(umath.sinh)
A:numpy.ma.core.cosh->_MaskedUnaryOperation(umath.cosh)
A:numpy.ma.core.tanh->_MaskedUnaryOperation(umath.tanh)
A:numpy.ma.core.absabsolute->_MaskedUnaryOperation(umath.absolute)
A:numpy.ma.core.angle->_MaskedUnaryOperation(angle)
A:numpy.ma.core.fabs->_MaskedUnaryOperation(umath.fabs)
A:numpy.ma.core.negative->_MaskedUnaryOperation(umath.negative)
A:numpy.ma.core.floor->_MaskedUnaryOperation(umath.floor)
A:numpy.ma.core.ceil->_MaskedUnaryOperation(umath.ceil)
A:numpy.ma.core.around->_MaskedUnaryOperation(np.round_)
A:numpy.ma.core.logical_not->_MaskedUnaryOperation(umath.logical_not)
A:numpy.ma.core.sqrt->_MaskedUnaryOperation(umath.sqrt, 0.0, _DomainGreaterEqual(0.0))
A:numpy.ma.core.log->_MaskedUnaryOperation(umath.log, 1.0, _DomainGreater(0.0))
A:numpy.ma.core.log2->_MaskedUnaryOperation(umath.log2, 1.0, _DomainGreater(0.0))
A:numpy.ma.core.log10->_MaskedUnaryOperation(umath.log10, 1.0, _DomainGreater(0.0))
A:numpy.ma.core.tan->_MaskedUnaryOperation(umath.tan, 0.0, _DomainTan(1e-35))
A:numpy.ma.core.arcsin->_MaskedUnaryOperation(umath.arcsin, 0.0, _DomainCheckInterval(-1.0, 1.0))
A:numpy.ma.core.arccos->_MaskedUnaryOperation(umath.arccos, 0.0, _DomainCheckInterval(-1.0, 1.0))
A:numpy.ma.core.arccosh->_MaskedUnaryOperation(umath.arccosh, 1.0, _DomainGreaterEqual(1.0))
A:numpy.ma.core.arctanh->_MaskedUnaryOperation(umath.arctanh, 0.0, _DomainCheckInterval(-1.0 + 1e-15, 1.0 - 1e-15))
A:numpy.ma.core.add->_MaskedBinaryOperation(umath.add)
A:numpy.ma.core.subtract->_MaskedBinaryOperation(umath.subtract)
A:numpy.ma.core.multiply->_MaskedBinaryOperation(umath.multiply, 1, 1)
A:numpy.ma.core.arctan2->_MaskedBinaryOperation(umath.arctan2, 0.0, 1.0)
A:numpy.ma.core.equal->_MaskedBinaryOperation(umath.equal)
A:numpy.ma.core.not_equal->_MaskedBinaryOperation(umath.not_equal)
A:numpy.ma.core.less_equal->_MaskedBinaryOperation(umath.less_equal)
A:numpy.ma.core.greater_equal->_MaskedBinaryOperation(umath.greater_equal)
A:numpy.ma.core.less->_MaskedBinaryOperation(umath.less)
A:numpy.ma.core.greater->_MaskedBinaryOperation(umath.greater)
A:numpy.ma.core.logical_and->_MaskedBinaryOperation(umath.logical_and)
A:numpy.ma.core.logical_or->_MaskedBinaryOperation(umath.logical_or)
A:numpy.ma.core.logical_xor->_MaskedBinaryOperation(umath.logical_xor)
A:numpy.ma.core.bitwise_and->_MaskedBinaryOperation(umath.bitwise_and)
A:numpy.ma.core.bitwise_or->_MaskedBinaryOperation(umath.bitwise_or)
A:numpy.ma.core.bitwise_xor->_MaskedBinaryOperation(umath.bitwise_xor)
A:numpy.ma.core.hypot->_MaskedBinaryOperation(umath.hypot)
A:numpy.ma.core.divide->_DomainedBinaryOperation(umath.divide, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.true_divide->_DomainedBinaryOperation(umath.true_divide, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.floor_divide->_DomainedBinaryOperation(umath.floor_divide, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.remainder->_DomainedBinaryOperation(umath.remainder, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.fmod->_DomainedBinaryOperation(umath.fmod, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.mod->_DomainedBinaryOperation(umath.mod, _DomainSafeDivide(), 0, 1)
A:numpy.ma.core.new_dtype->numpy.dtype(tuple(descr))
A:numpy.ma.core.descr->list(dtype.subdtype)
A:numpy.ma.core.descr[0]->_recurse(dtype.subdtype[0], primitive_dtype)
A:numpy.ma.core.primitive_dtype->numpy.dtype(primitive_dtype)
A:numpy.ma.core.mask->_shrink_mask(mask)
A:numpy.ma.core.newmask->_check_mask_axis(_mask, axis, **kwargs)
A:numpy.ma.core.flattened->_flatsequence(_flatmask(mask))
A:numpy.ma.core.cond->mask_or(cond, a._mask)
A:numpy.ma.core.cls->type(self)
A:numpy.ma.core.result.mask->_shrink_mask(cond)
A:numpy.ma.core.a._mask->mask_rowcols(a, 0)._mask.copy()
A:numpy.ma.core.output->numpy.diag(v, k).view(MaskedArray)
A:numpy.ma.core.xf->filled(x)
A:numpy.ma.core.condition->numpy.asarray(condition)
A:numpy.ma.core.xnew->filled(x, value)
A:numpy.ma.core.ret->masked_array(xnew, mask=mask, copy=copy, fill_value=value)
A:numpy.ma.core.masked_print_option->_MaskedPrintOption('--')
A:numpy.ma.core._legacy_print_templates->dict(long_std=textwrap.dedent('        masked_%(name)s(data =\n         %(data)s,\n        %(nlen)s        mask =\n         %(mask)s,\n        %(nlen)s  fill_value = %(fill)s)\n        '), long_flx=textwrap.dedent('        masked_%(name)s(data =\n         %(data)s,\n        %(nlen)s        mask =\n         %(mask)s,\n        %(nlen)s  fill_value = %(fill)s,\n        %(nlen)s       dtype = %(dtype)s)\n        '), short_std=textwrap.dedent('        masked_%(name)s(data = %(data)s,\n        %(nlen)s        mask = %(mask)s,\n        %(nlen)s  fill_value = %(fill)s)\n        '), short_flx=textwrap.dedent('        masked_%(name)s(data = %(data)s,\n        %(nlen)s        mask = %(mask)s,\n        %(nlen)s  fill_value = %(fill)s,\n        %(nlen)s       dtype = %(dtype)s)\n        '))
A:numpy.ma.core.out->_data.view(self).take(indices, axis=axis, mode=mode)[...].view(cls)
A:numpy.ma.core.out._mask->numpy.empty(d.shape, MaskType)
A:numpy.ma.core.newshape->list(out.shape)
A:numpy.ma.core.out.shape->tuple(flatten_sequence(newshape))
A:numpy.ma.core.result._mask->numpy.logical_or(m, invalid)
A:numpy.ma.core._mask->numpy.ndarray.__new__(ndarray, baseshape, make_mask_descr(basetype))
A:numpy.ma.core.self.dataiter[index]->getdata(value)
A:numpy.ma.core.self.maskiter[index]->getmaskarray(value)
A:numpy.ma.core._data->_data.view(self).view(self)
A:numpy.ma.core._baseclass->type(obj)
A:numpy.ma.core.mdtype->make_mask_descr(dtype)
A:numpy.ma.core._data._mask->numpy.void(mask)
A:numpy.ma.core._data._fill_value->_check_fill_value(fill_value, _data.dtype)
A:numpy.ma.core._data._hardmask->getattr(data, '_hardmask', False)
A:numpy.ma.core._dict->dict(_fill_value=getattr(obj, '_fill_value', None), _hardmask=getattr(obj, '_hardmask', False), _sharedmask=getattr(obj, '_sharedmask', False), _isfield=getattr(obj, '_isfield', False), _baseclass=getattr(obj, '_baseclass', _baseclass), _optinfo=_optinfo, _basedict=_optinfo)
A:numpy.ma.core._mask_dtype->make_mask_descr(self.dtype)
A:numpy.ma.core.self._fill_value->_check_fill_value(None, self.dtype)
A:numpy.ma.core.output._mask->numpy.diag(v._mask, k)
A:numpy.ma.core.scalar_expected->_is_scalar(getmaskarray(self)[indx])
A:numpy.ma.core.dout->dout.view(type(self)).view(type(self))
A:numpy.ma.core.dout._fill_value->dout.view(type(self)).view(type(self))._fill_value.flat[0:1].squeeze(axis=0)
A:numpy.ma.core.dout._mask->reshape(mout, dout.shape)
A:numpy.ma.core.self._mask_mask->make_mask_none(self.shape, self.dtype)
A:numpy.ma.core._mask[indx]->tuple([True] * len(_dtype.names))
A:numpy.ma.core._maskself._mask->make_mask_none(self.shape, _dtype)
A:numpy.ma.core.dval->getattr(value, '_data', value)
A:numpy.ma.core.mval->tuple([False] * len(_dtype.names))
A:numpy.ma.core.mindx->mask_or(_mask[indx], mval, copy=True)
A:numpy.ma.core.self._mask->mask_or(self._mask, new_mask)
A:numpy.ma.core.current_maskself._mask->make_mask_none(self.shape, idtype)
A:numpy.ma.core.y->masked_array(y, dtype=dtype, copy=False)
A:numpy.ma.core.target->target.filled(self.fill_value_func(target)).view(type(target)).filled(self.fill_value_func(target)).view(type(target))
A:numpy.ma.core._new->_data.view(self).view(self).compress(condition, axis=axis, out=out).view(type(self))
A:numpy.ma.core._new._mask->numpy.ndarray.__new__(ndarray, baseshape, make_mask_descr(basetype)).compress(condition, axis=axis)
A:numpy.ma.core.arr->numpy.split(mask, (ind, -ind), axis=axis)
A:numpy.ma.core.rdtype->_replace_dtype_fields(self._data.dtype, 'O')
A:numpy.ma.core.res->data_arr.astype(rdtype)
A:numpy.ma.core.parameters->dict(name=name, nlen=' ' * len(name), data=str(self), mask=str(self._mask), fill=str(self.fill_value), dtype=str(self.dtype))
A:numpy.ma.core.is_structured->bool(self.dtype.names)
A:numpy.ma.core.key->'{}_{}'.format('long' if is_long else 'short', 'flx' if is_structured else 'std')
A:numpy.ma.core.is_one_row->builtins.all((dim == 1 for dim in self.shape[:-1]))
A:numpy.ma.core.n->builtins.max(min_indent, len(prefix + keys[0]) - len(k))
A:numpy.ma.core.reprs['data']->numpy.array2string(self._insert_masked_print(), separator=', ', prefix=indents['data'] + 'data=', suffix=',')
A:numpy.ma.core.reprs['mask']->numpy.array2string(self._mask, separator=', ', prefix=indents['mask'] + 'mask=', suffix=',')
A:numpy.ma.core.reprs['fill_value']->repr(self.fill_value)
A:numpy.ma.core.reprs['dtype']->numpy.core.arrayprint.dtype_short_repr(self.dtype)
A:numpy.ma.core.array_ufunc->getattr(other, '__array_ufunc__', False)
A:numpy.ma.core.other_priority->getattr(other, '__array_priority__', -1000000)
A:numpy.ma.core.omask->getmask(other)
A:numpy.ma.core.odata->getdata(other)
A:numpy.ma.core.sbroadcast->numpy.broadcast_to(self, broadcast_shape, subok=True)
A:numpy.ma.core.sdata->numpy.broadcast_to(self, broadcast_shape, subok=True).filled(odata)
A:numpy.ma.core.check->check.view(type(self)).view(type(self))
A:numpy.ma.core.fill->_check_fill_value(None, np.bool_)
A:numpy.ma.core.other_data->getdata(other)
A:numpy.ma.core.dom_mask->_DomainSafeDivide().__call__(self._data, other_data)
A:numpy.ma.core.other_mask->getmask(other)
A:numpy.ma.core.new_mask->mask_or(other_mask, invalid)
A:numpy.ma.core.axes->normalize_axis_tuple(axis, self.ndim)
A:numpy.ma.core.out_dims->list(self.shape)
A:numpy.ma.core.r->filled(less_equal(absolute(x - y), atol + rtol * absolute(y)), masked_equal).view(get_masked_subclass(a, b))
A:numpy.ma.core.r._mask->numpy.ndarray.ravel(self._mask, order=order).reshape(r.shape)
A:numpy.ma.core.indices->indices.filled(0).filled(0)
A:numpy.ma.core.values->narray(values, copy=False, subok=True)
A:numpy.ma.core.D->self.diagonal(offset=offset, axis1=axis1, axis2=axis2)
A:numpy.ma.core.rndim->getattr(result, 'ndim', 0)
A:numpy.ma.core.outmask->numpy.ndarray.__new__(ndarray, baseshape, make_mask_descr(basetype)).take(indices, axis=axis, mode=mode)
A:numpy.ma.core.outmaskout._mask->make_mask_none(out.shape)
A:numpy.ma.core.dsum->self.sum(axis=axis, dtype=dtype, **kwargs)
A:numpy.ma.core.cnt->self.count(axis=axis, **kwargs)
A:numpy.ma.core.outmask.flat->getmask(result)
A:numpy.ma.core.dvar->sqrt(dvar)
A:numpy.ma.core.dvar._mask->mask_or(self._mask.all(axis, **kwargs), cnt <= 0)
A:numpy.ma.core.axis->_deprecate_argsort_axis(a)
A:numpy.ma.core.filled->self.filled(fill_value)
A:numpy.ma.core.sidx->self.argsort(axis=axis, kind=kind, order=order, fill_value=fill_value, endwith=endwith)
A:numpy.ma.core.self[...]->numpy.take_along_axis(self, sidx, axis=axis)
A:numpy.ma.core.out.flat->self.max(axis=axis, out=out, fill_value=fill_value, keepdims=keepdims)
A:numpy.ma.core.min_value->self.min(axis=axis, fill_value=fill_value, keepdims=keepdims)
A:numpy.ma.core.maskindices->getmask(indices)
A:numpy.ma.core.copy->_frommethod('copy')
A:numpy.ma.core.diagonal->_frommethod('diagonal')
A:numpy.ma.core.flatten->_arraymethod('flatten')
A:numpy.ma.core.repeat->_frommethod('repeat')
A:numpy.ma.core.squeeze->_arraymethod('squeeze')
A:numpy.ma.core.swapaxes->_frommethod('swapaxes')
A:numpy.ma.core.T->property(fget=lambda self: self.transpose())
A:numpy.ma.core.transpose->_arraymethod('transpose')
A:numpy.ma.core.record->numpy.ndarray(shape=self.shape, dtype=[('_data', ddtype), ('_mask', mdtype)])
A:numpy.ma.core.copied->MaskedArray.__new__(type(self), self, copy=True)
A:numpy.ma.core.copied.__dict__[k]->deepcopy(v, memo)
A:numpy.ma.core.self._mask[indx]->getattr(value, '_mask', False)
A:numpy.ma.core.cls.__singleton->MaskedArray(data, mask=mask).view(cls)
A:numpy.ma.core.maskedmasked_singleton->MaskedConstant()
A:numpy.ma.core.kwargs->dict()
A:numpy.ma.core.self.__doc__->self.getdoc()
A:numpy.ma.core.args->list(args)
A:numpy.ma.core.marr->asanyarray(a)
A:numpy.ma.core.method->getattr(np, method_name)
A:numpy.ma.core.all->_frommethod('all')
A:numpy.ma.core.anomaliesanom->_frommethod('anom')
A:numpy.ma.core.any->_frommethod('any')
A:numpy.ma.core.compress->_frommethod('compress', reversed=True)
A:numpy.ma.core.cumprod->_frommethod('cumprod')
A:numpy.ma.core.cumsum->_frommethod('cumsum')
A:numpy.ma.core.harden_mask->_frommethod('harden_mask')
A:numpy.ma.core.ids->_frommethod('ids')
A:numpy.ma.core.maximum->_extrema_operation(umath.maximum, greater, maximum_fill_value)
A:numpy.ma.core.mean->_frommethod('mean')
A:numpy.ma.core.minimum->_extrema_operation(umath.minimum, less, minimum_fill_value)
A:numpy.ma.core.nonzero->_frommethod('nonzero')
A:numpy.ma.core.prod->_frommethod('prod')
A:numpy.ma.core.product->_frommethod('prod')
A:numpy.ma.core.ravel->_frommethod('ravel')
A:numpy.ma.core.shrink_mask->_frommethod('shrink_mask')
A:numpy.ma.core.soften_mask->_frommethod('soften_mask')
A:numpy.ma.core.std->_frommethod('std')
A:numpy.ma.core.sum->_frommethod('sum')
A:numpy.ma.core.trace->_frommethod('trace')
A:numpy.ma.core.var->_frommethod('var')
A:numpy.ma.core.count->_frommethod('count')
A:numpy.ma.core.fa->filled(a, 0).ravel()
A:numpy.ma.core.fb->filled(b, 0).ravel()
A:numpy.ma.core.basetype->type(a)
A:numpy.ma.core.argmin->_frommethod('argmin')
A:numpy.ma.core.argmax->_frommethod('argmax')
A:numpy.ma.core.dm->array(d, mask=m, copy=False)
A:numpy.ma.core.data._mask->_shrink_mask(dm)
A:numpy.ma.core.valmask->getmaskarray(values)
A:numpy.ma.core._tmp->narray(a, copy=False).reshape(new_shape, order=order)
A:numpy.ma.core.missing->(x is _NoValue, y is _NoValue).count(True)
A:numpy.ma.core.cf->filled(condition, False)
A:numpy.ma.core.xd->numpy.zeros((), dtype=yd.dtype)
A:numpy.ma.core.yd->numpy.zeros((), dtype=xd.dtype)
A:numpy.ma.core.cm->getmaskarray(condition)
A:numpy.ma.core.xm->numpy.ones((), dtype=ym.dtype)
A:numpy.ma.core.ym->numpy.ones((), dtype=xm.dtype)
A:numpy.ma.core.c->filled(indices, 0)
A:numpy.ma.core.outputmask->make_mask(mask_or(outputmask, getmask(indices)), copy=False, shrink=True)
A:numpy.ma.core.maskedval->mask_or(getmask(x), getmask(y)).nonzero()
A:numpy.ma.core.b->mask_rowcols(b, 1)
A:numpy.ma.core.inner.__doc__->doc_note(np.inner.__doc__, 'Masked values are replaced by 0.')
A:numpy.ma.core.outer.__doc__->doc_note(np.outer.__doc__, 'Masked values are replaced by 0.')
A:numpy.ma.core.x->masked_array(a, copy=False)
A:numpy.ma.core.xinf->numpy.isinf(masked_array(x, copy=False, mask=m)).filled(False)
A:numpy.ma.core.self._func->getattr(np, funcname)
A:numpy.ma.core.doc->getattr(self._func, '__doc__', None)
A:numpy.ma.core.common_params->set(params).intersection(_extras)
A:numpy.ma.core._extras[p]->params.pop(p)
A:numpy.ma.core.result.fill_value->_extras.get('fill_value', None)
A:numpy.ma.core.result._hardmask->bool(_extras.get('hard_mask', False))
A:numpy.ma.core.arange->_convert2ma('arange', params=dict(fill_value=None, hardmask=False))
A:numpy.ma.core.empty->_convert2ma('empty', params=dict(fill_value=None, hardmask=False))
A:numpy.ma.core.empty_like->_convert2ma('empty_like')
A:numpy.ma.core.frombuffer->_convert2ma('frombuffer')
A:numpy.ma.core.fromfunction->_convert2ma('fromfunction')
A:numpy.ma.core.identity->_convert2ma('identity', params=dict(fill_value=None, hardmask=False))
A:numpy.ma.core.ones->_convert2ma('ones', params=dict(fill_value=None, hardmask=False))
A:numpy.ma.core.zeros->_convert2ma('zeros', params=dict(fill_value=None, hardmask=False))
numpy.ma.MAError(Exception)
numpy.ma.MaskError(MAError)
numpy.ma.MaskedArray(cls,data=None,mask=nomask,dtype=None,copy=False,subok=True,ndmin=0,fill_value=None,keep_mask=True,hard_mask=None,shrink=True,order=None)
numpy.ma.MaskedArray.__add__(self,other)
numpy.ma.MaskedArray.__array_finalize__(self,obj)
numpy.ma.MaskedArray.__array_wrap__(self,obj,context=None)
numpy.ma.MaskedArray.__deepcopy__(self,memo=None)
numpy.ma.MaskedArray.__div__(self,other)
numpy.ma.MaskedArray.__eq__(self,other)
numpy.ma.MaskedArray.__float__(self)
numpy.ma.MaskedArray.__floordiv__(self,other)
numpy.ma.MaskedArray.__getitem__(self,indx)
numpy.ma.MaskedArray.__getstate__(self)
numpy.ma.MaskedArray.__iadd__(self,other)
numpy.ma.MaskedArray.__idiv__(self,other)
numpy.ma.MaskedArray.__ifloordiv__(self,other)
numpy.ma.MaskedArray.__imul__(self,other)
numpy.ma.MaskedArray.__int__(self)
numpy.ma.MaskedArray.__ipow__(self,other)
numpy.ma.MaskedArray.__isub__(self,other)
numpy.ma.MaskedArray.__itruediv__(self,other)
numpy.ma.MaskedArray.__mul__(self,other)
numpy.ma.MaskedArray.__ne__(self,other)
numpy.ma.MaskedArray.__pow__(self,other)
numpy.ma.MaskedArray.__radd__(self,other)
numpy.ma.MaskedArray.__reduce__(self)
numpy.ma.MaskedArray.__repr__(self)
numpy.ma.MaskedArray.__rfloordiv__(self,other)
numpy.ma.MaskedArray.__rmul__(self,other)
numpy.ma.MaskedArray.__rpow__(self,other)
numpy.ma.MaskedArray.__rsub__(self,other)
numpy.ma.MaskedArray.__rtruediv__(self,other)
numpy.ma.MaskedArray.__setitem__(self,indx,value)
numpy.ma.MaskedArray.__setmask__(self,mask,copy=False)
numpy.ma.MaskedArray.__setstate__(self,state)
numpy.ma.MaskedArray.__str__(self)
numpy.ma.MaskedArray.__sub__(self,other)
numpy.ma.MaskedArray.__truediv__(self,other)
numpy.ma.MaskedArray._comparison(self,other,compare)
numpy.ma.MaskedArray._delegate_binop(self,other)
numpy.ma.MaskedArray._get_data(self)
numpy.ma.MaskedArray._insert_masked_print(self)
numpy.ma.MaskedArray._update_from(self,obj)
numpy.ma.MaskedArray.all(self,axis=None,out=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.anom(self,axis=None,dtype=None)
numpy.ma.MaskedArray.any(self,axis=None,out=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.argmax(self,axis=None,fill_value=None,out=None)
numpy.ma.MaskedArray.argmin(self,axis=None,fill_value=None,out=None)
numpy.ma.MaskedArray.argpartition(self,*args,**kwargs)
numpy.ma.MaskedArray.argsort(self,axis=np._NoValue,kind=None,order=None,endwith=True,fill_value=None)
numpy.ma.MaskedArray.baseclass(self)
numpy.ma.MaskedArray.compress(self,condition,axis=None,out=None)
numpy.ma.MaskedArray.compressed(self)
numpy.ma.MaskedArray.count(self,axis=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.cumprod(self,axis=None,dtype=None,out=None)
numpy.ma.MaskedArray.cumsum(self,axis=None,dtype=None,out=None)
numpy.ma.MaskedArray.dot(self,b,out=None,strict=False)
numpy.ma.MaskedArray.dtype(self)
numpy.ma.MaskedArray.dtype(self,dtype)
numpy.ma.MaskedArray.fill_value(self)
numpy.ma.MaskedArray.fill_value(self,value=None)
numpy.ma.MaskedArray.filled(self,fill_value=None)
numpy.ma.MaskedArray.flat(self)
numpy.ma.MaskedArray.flat(self,value)
numpy.ma.MaskedArray.harden_mask(self)
numpy.ma.MaskedArray.hardmask(self)
numpy.ma.MaskedArray.ids(self)
numpy.ma.MaskedArray.imag(self)
numpy.ma.MaskedArray.iscontiguous(self)
numpy.ma.MaskedArray.mask(self)
numpy.ma.MaskedArray.mask(self,value)
numpy.ma.MaskedArray.max(self,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.mean(self,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.min(self,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.mini(self,axis=None)
numpy.ma.MaskedArray.nonzero(self)
numpy.ma.MaskedArray.partition(self,*args,**kwargs)
numpy.ma.MaskedArray.prod(self,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.ptp(self,axis=None,out=None,fill_value=None,keepdims=False)
numpy.ma.MaskedArray.put(self,indices,values,mode='raise')
numpy.ma.MaskedArray.ravel(self,order='C')
numpy.ma.MaskedArray.real(self)
numpy.ma.MaskedArray.recordmask(self)
numpy.ma.MaskedArray.recordmask(self,mask)
numpy.ma.MaskedArray.reshape(self,*s,**kwargs)
numpy.ma.MaskedArray.resize(self,newshape,refcheck=True,order=False)
numpy.ma.MaskedArray.round(self,decimals=0,out=None)
numpy.ma.MaskedArray.shape(self)
numpy.ma.MaskedArray.shape(self,shape)
numpy.ma.MaskedArray.sharedmask(self)
numpy.ma.MaskedArray.shrink_mask(self)
numpy.ma.MaskedArray.soften_mask(self)
numpy.ma.MaskedArray.sort(self,axis=-1,kind=None,order=None,endwith=True,fill_value=None)
numpy.ma.MaskedArray.std(self,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue)
numpy.ma.MaskedArray.sum(self,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.ma.MaskedArray.take(self,indices,axis=None,out=None,mode='raise')
numpy.ma.MaskedArray.tobytes(self,fill_value=None,order='C')
numpy.ma.MaskedArray.tofile(self,fid,sep='',format='%s')
numpy.ma.MaskedArray.toflex(self)
numpy.ma.MaskedArray.tolist(self,fill_value=None)
numpy.ma.MaskedArray.tostring(self,fill_value=None,order='C')
numpy.ma.MaskedArray.trace(self,offset=0,axis1=0,axis2=1,dtype=None,out=None)
numpy.ma.MaskedArray.unshare_mask(self)
numpy.ma.MaskedArray.var(self,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue)
numpy.ma.MaskedArray.view(self,dtype=None,type=None,fill_value=None)
numpy.ma.MaskedArrayFutureWarning(FutureWarning)
numpy.ma.MaskedConstant(cls)
numpy.ma.MaskedConstant.__array_finalize__(self,obj)
numpy.ma.MaskedConstant.__array_prepare__(self,obj,context=None)
numpy.ma.MaskedConstant.__array_wrap__(self,obj,context=None)
numpy.ma.MaskedConstant.__copy__(self)
numpy.ma.MaskedConstant.__deepcopy__(self,memo)
numpy.ma.MaskedConstant.__format__(self,format_spec)
numpy.ma.MaskedConstant.__has_singleton(cls)
numpy.ma.MaskedConstant.__iop__(self,other)
numpy.ma.MaskedConstant.__reduce__(self)
numpy.ma.MaskedConstant.__repr__(self)
numpy.ma.MaskedConstant.__setattr__(self,attr,value)
numpy.ma.MaskedConstant.__str__(self)
numpy.ma.MaskedConstant.copy(self,*args,**kwargs)
numpy.ma.MaskedIterator(self,ma)
numpy.ma.MaskedIterator.__getitem__(self,indx)
numpy.ma.MaskedIterator.__iter__(self)
numpy.ma.MaskedIterator.__next__(self)
numpy.ma.MaskedIterator.__setitem__(self,index,value)
numpy.ma._DomainCheckInterval(self,a,b)
numpy.ma._DomainGreater(self,critical_value)
numpy.ma._DomainGreaterEqual(self,critical_value)
numpy.ma._DomainSafeDivide(self,tolerance=None)
numpy.ma._DomainTan(self,eps)
numpy.ma._DomainedBinaryOperation(self,dbfunc,domain,fillx=0,filly=0)
numpy.ma._MaskedBinaryOperation(self,mbfunc,fillx=0,filly=0)
numpy.ma._MaskedBinaryOperation.accumulate(self,target,axis=0)
numpy.ma._MaskedBinaryOperation.outer(self,a,b)
numpy.ma._MaskedBinaryOperation.reduce(self,target,axis=0,dtype=None)
numpy.ma._MaskedPrintOption(self,display)
numpy.ma._MaskedPrintOption.__str__(self)
numpy.ma._MaskedPrintOption.display(self)
numpy.ma._MaskedPrintOption.enable(self,shrink=1)
numpy.ma._MaskedPrintOption.enabled(self)
numpy.ma._MaskedPrintOption.set_display(self,s)
numpy.ma._MaskedUFunc(self,ufunc)
numpy.ma._MaskedUFunc.__str__(self)
numpy.ma._MaskedUnaryOperation(self,mufunc,fill=0,domain=None)
numpy.ma._arraymethod(funcname,onmask=True)
numpy.ma._check_fill_value(fill_value,ndtype)
numpy.ma._check_mask_axis(mask,axis,keepdims=np._NoValue)
numpy.ma._convert2ma(self,funcname,params=None)
numpy.ma._convert2ma.getdoc(self)
numpy.ma._convolve_or_correlate(f,a,v,mode,propagate_mask)
numpy.ma._deprecate_argsort_axis(arr)
numpy.ma._extrema_operation(self,ufunc,compare,fill_value)
numpy.ma._extrema_operation.outer(self,a,b)
numpy.ma._extrema_operation.reduce(self,target,axis=np._NoValue)
numpy.ma._extremum_fill_value(obj,extremum,extremum_name)
numpy.ma._frommethod(self,methodname,reversed=False)
numpy.ma._frommethod.getdoc(self)
numpy.ma._get_dtype_of(obj)
numpy.ma._mareconstruct(subtype,baseclass,baseshape,basetype)
numpy.ma._pickle_warn(method)
numpy.ma._recursive_fill_value(dtype,f)
numpy.ma._recursive_filled(a,mask,fill_value)
numpy.ma._recursive_printoption(result,mask,printopt)
numpy.ma._recursive_set_fill_value(fillvalue,dt)
numpy.ma._replace_dtype_fields(dtype,primitive_dtype)
numpy.ma._replace_dtype_fields_recursive(dtype,primitive_dtype)
numpy.ma._shrink_mask(m)
numpy.ma.allclose(a,b,masked_equal=True,rtol=1e-05,atol=1e-08)
numpy.ma.allequal(a,b,fill_value=True)
numpy.ma.append(a,b,axis=None)
numpy.ma.argsort(a,axis=np._NoValue,kind=None,order=None,endwith=True,fill_value=None)
numpy.ma.array(data,dtype=None,copy=False,order=None,mask=nomask,fill_value=None,keep_mask=True,hard_mask=False,shrink=True,subok=True,ndmin=0)
numpy.ma.asanyarray(a,dtype=None)
numpy.ma.asarray(a,dtype=None,order=None)
numpy.ma.choose(indices,choices,out=None,mode='raise')
numpy.ma.common_fill_value(a,b)
numpy.ma.compressed(x)
numpy.ma.concatenate(arrays,axis=0)
numpy.ma.convolve(a,v,mode='full',propagate_mask=True)
numpy.ma.core.MAError(Exception)
numpy.ma.core.MaskError(MAError)
numpy.ma.core.MaskedArray(cls,data=None,mask=nomask,dtype=None,copy=False,subok=True,ndmin=0,fill_value=None,keep_mask=True,hard_mask=None,shrink=True,order=None)
numpy.ma.core.MaskedArray.__add__(self,other)
numpy.ma.core.MaskedArray.__array_finalize__(self,obj)
numpy.ma.core.MaskedArray.__array_wrap__(self,obj,context=None)
numpy.ma.core.MaskedArray.__deepcopy__(self,memo=None)
numpy.ma.core.MaskedArray.__div__(self,other)
numpy.ma.core.MaskedArray.__eq__(self,other)
numpy.ma.core.MaskedArray.__float__(self)
numpy.ma.core.MaskedArray.__floordiv__(self,other)
numpy.ma.core.MaskedArray.__getitem__(self,indx)
numpy.ma.core.MaskedArray.__getstate__(self)
numpy.ma.core.MaskedArray.__iadd__(self,other)
numpy.ma.core.MaskedArray.__idiv__(self,other)
numpy.ma.core.MaskedArray.__ifloordiv__(self,other)
numpy.ma.core.MaskedArray.__imul__(self,other)
numpy.ma.core.MaskedArray.__int__(self)
numpy.ma.core.MaskedArray.__ipow__(self,other)
numpy.ma.core.MaskedArray.__isub__(self,other)
numpy.ma.core.MaskedArray.__itruediv__(self,other)
numpy.ma.core.MaskedArray.__mul__(self,other)
numpy.ma.core.MaskedArray.__ne__(self,other)
numpy.ma.core.MaskedArray.__new__(cls,data=None,mask=nomask,dtype=None,copy=False,subok=True,ndmin=0,fill_value=None,keep_mask=True,hard_mask=None,shrink=True,order=None)
numpy.ma.core.MaskedArray.__pow__(self,other)
numpy.ma.core.MaskedArray.__radd__(self,other)
numpy.ma.core.MaskedArray.__reduce__(self)
numpy.ma.core.MaskedArray.__repr__(self)
numpy.ma.core.MaskedArray.__rfloordiv__(self,other)
numpy.ma.core.MaskedArray.__rmul__(self,other)
numpy.ma.core.MaskedArray.__rpow__(self,other)
numpy.ma.core.MaskedArray.__rsub__(self,other)
numpy.ma.core.MaskedArray.__rtruediv__(self,other)
numpy.ma.core.MaskedArray.__setitem__(self,indx,value)
numpy.ma.core.MaskedArray.__setmask__(self,mask,copy=False)
numpy.ma.core.MaskedArray.__setstate__(self,state)
numpy.ma.core.MaskedArray.__str__(self)
numpy.ma.core.MaskedArray.__sub__(self,other)
numpy.ma.core.MaskedArray.__truediv__(self,other)
numpy.ma.core.MaskedArray._comparison(self,other,compare)
numpy.ma.core.MaskedArray._delegate_binop(self,other)
numpy.ma.core.MaskedArray._get_data(self)
numpy.ma.core.MaskedArray._insert_masked_print(self)
numpy.ma.core.MaskedArray._update_from(self,obj)
numpy.ma.core.MaskedArray.all(self,axis=None,out=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.anom(self,axis=None,dtype=None)
numpy.ma.core.MaskedArray.any(self,axis=None,out=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.argmax(self,axis=None,fill_value=None,out=None)
numpy.ma.core.MaskedArray.argmin(self,axis=None,fill_value=None,out=None)
numpy.ma.core.MaskedArray.argpartition(self,*args,**kwargs)
numpy.ma.core.MaskedArray.argsort(self,axis=np._NoValue,kind=None,order=None,endwith=True,fill_value=None)
numpy.ma.core.MaskedArray.baseclass(self)
numpy.ma.core.MaskedArray.compress(self,condition,axis=None,out=None)
numpy.ma.core.MaskedArray.compressed(self)
numpy.ma.core.MaskedArray.count(self,axis=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.cumprod(self,axis=None,dtype=None,out=None)
numpy.ma.core.MaskedArray.cumsum(self,axis=None,dtype=None,out=None)
numpy.ma.core.MaskedArray.dot(self,b,out=None,strict=False)
numpy.ma.core.MaskedArray.dtype(self)
numpy.ma.core.MaskedArray.dtype(self,dtype)
numpy.ma.core.MaskedArray.fill_value(self)
numpy.ma.core.MaskedArray.fill_value(self,value=None)
numpy.ma.core.MaskedArray.filled(self,fill_value=None)
numpy.ma.core.MaskedArray.flat(self)
numpy.ma.core.MaskedArray.flat(self,value)
numpy.ma.core.MaskedArray.harden_mask(self)
numpy.ma.core.MaskedArray.hardmask(self)
numpy.ma.core.MaskedArray.ids(self)
numpy.ma.core.MaskedArray.imag(self)
numpy.ma.core.MaskedArray.iscontiguous(self)
numpy.ma.core.MaskedArray.mask(self)
numpy.ma.core.MaskedArray.mask(self,value)
numpy.ma.core.MaskedArray.max(self,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.mean(self,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.min(self,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.mini(self,axis=None)
numpy.ma.core.MaskedArray.nonzero(self)
numpy.ma.core.MaskedArray.partition(self,*args,**kwargs)
numpy.ma.core.MaskedArray.prod(self,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.ptp(self,axis=None,out=None,fill_value=None,keepdims=False)
numpy.ma.core.MaskedArray.put(self,indices,values,mode='raise')
numpy.ma.core.MaskedArray.ravel(self,order='C')
numpy.ma.core.MaskedArray.real(self)
numpy.ma.core.MaskedArray.recordmask(self)
numpy.ma.core.MaskedArray.recordmask(self,mask)
numpy.ma.core.MaskedArray.reshape(self,*s,**kwargs)
numpy.ma.core.MaskedArray.resize(self,newshape,refcheck=True,order=False)
numpy.ma.core.MaskedArray.round(self,decimals=0,out=None)
numpy.ma.core.MaskedArray.shape(self)
numpy.ma.core.MaskedArray.shape(self,shape)
numpy.ma.core.MaskedArray.sharedmask(self)
numpy.ma.core.MaskedArray.shrink_mask(self)
numpy.ma.core.MaskedArray.soften_mask(self)
numpy.ma.core.MaskedArray.sort(self,axis=-1,kind=None,order=None,endwith=True,fill_value=None)
numpy.ma.core.MaskedArray.std(self,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.sum(self,axis=None,dtype=None,out=None,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.take(self,indices,axis=None,out=None,mode='raise')
numpy.ma.core.MaskedArray.tobytes(self,fill_value=None,order='C')
numpy.ma.core.MaskedArray.tofile(self,fid,sep='',format='%s')
numpy.ma.core.MaskedArray.toflex(self)
numpy.ma.core.MaskedArray.tolist(self,fill_value=None)
numpy.ma.core.MaskedArray.tostring(self,fill_value=None,order='C')
numpy.ma.core.MaskedArray.trace(self,offset=0,axis1=0,axis2=1,dtype=None,out=None)
numpy.ma.core.MaskedArray.unshare_mask(self)
numpy.ma.core.MaskedArray.var(self,axis=None,dtype=None,out=None,ddof=0,keepdims=np._NoValue)
numpy.ma.core.MaskedArray.view(self,dtype=None,type=None,fill_value=None)
numpy.ma.core.MaskedArrayFutureWarning(FutureWarning)
numpy.ma.core.MaskedConstant(cls)
numpy.ma.core.MaskedConstant.__array_finalize__(self,obj)
numpy.ma.core.MaskedConstant.__array_prepare__(self,obj,context=None)
numpy.ma.core.MaskedConstant.__array_wrap__(self,obj,context=None)
numpy.ma.core.MaskedConstant.__copy__(self)
numpy.ma.core.MaskedConstant.__deepcopy__(self,memo)
numpy.ma.core.MaskedConstant.__format__(self,format_spec)
numpy.ma.core.MaskedConstant.__has_singleton(cls)
numpy.ma.core.MaskedConstant.__iop__(self,other)
numpy.ma.core.MaskedConstant.__new__(cls)
numpy.ma.core.MaskedConstant.__reduce__(self)
numpy.ma.core.MaskedConstant.__repr__(self)
numpy.ma.core.MaskedConstant.__setattr__(self,attr,value)
numpy.ma.core.MaskedConstant.__str__(self)
numpy.ma.core.MaskedConstant.copy(self,*args,**kwargs)
numpy.ma.core.MaskedIterator(self,ma)
numpy.ma.core.MaskedIterator.__getitem__(self,indx)
numpy.ma.core.MaskedIterator.__init__(self,ma)
numpy.ma.core.MaskedIterator.__iter__(self)
numpy.ma.core.MaskedIterator.__next__(self)
numpy.ma.core.MaskedIterator.__setitem__(self,index,value)
numpy.ma.core._DomainCheckInterval(self,a,b)
numpy.ma.core._DomainCheckInterval.__init__(self,a,b)
numpy.ma.core._DomainGreater(self,critical_value)
numpy.ma.core._DomainGreater.__init__(self,critical_value)
numpy.ma.core._DomainGreaterEqual(self,critical_value)
numpy.ma.core._DomainGreaterEqual.__init__(self,critical_value)
numpy.ma.core._DomainSafeDivide(self,tolerance=None)
numpy.ma.core._DomainSafeDivide.__init__(self,tolerance=None)
numpy.ma.core._DomainTan(self,eps)
numpy.ma.core._DomainTan.__init__(self,eps)
numpy.ma.core._DomainedBinaryOperation(self,dbfunc,domain,fillx=0,filly=0)
numpy.ma.core._DomainedBinaryOperation.__init__(self,dbfunc,domain,fillx=0,filly=0)
numpy.ma.core._MaskedBinaryOperation(self,mbfunc,fillx=0,filly=0)
numpy.ma.core._MaskedBinaryOperation.__init__(self,mbfunc,fillx=0,filly=0)
numpy.ma.core._MaskedBinaryOperation.accumulate(self,target,axis=0)
numpy.ma.core._MaskedBinaryOperation.outer(self,a,b)
numpy.ma.core._MaskedBinaryOperation.reduce(self,target,axis=0,dtype=None)
numpy.ma.core._MaskedPrintOption(self,display)
numpy.ma.core._MaskedPrintOption.__init__(self,display)
numpy.ma.core._MaskedPrintOption.__str__(self)
numpy.ma.core._MaskedPrintOption.display(self)
numpy.ma.core._MaskedPrintOption.enable(self,shrink=1)
numpy.ma.core._MaskedPrintOption.enabled(self)
numpy.ma.core._MaskedPrintOption.set_display(self,s)
numpy.ma.core._MaskedUFunc(self,ufunc)
numpy.ma.core._MaskedUFunc.__init__(self,ufunc)
numpy.ma.core._MaskedUFunc.__str__(self)
numpy.ma.core._MaskedUnaryOperation(self,mufunc,fill=0,domain=None)
numpy.ma.core._MaskedUnaryOperation.__init__(self,mufunc,fill=0,domain=None)
numpy.ma.core._arraymethod(funcname,onmask=True)
numpy.ma.core._check_fill_value(fill_value,ndtype)
numpy.ma.core._check_mask_axis(mask,axis,keepdims=np._NoValue)
numpy.ma.core._convert2ma(self,funcname,params=None)
numpy.ma.core._convert2ma.__init__(self,funcname,params=None)
numpy.ma.core._convert2ma.getdoc(self)
numpy.ma.core._convolve_or_correlate(f,a,v,mode,propagate_mask)
numpy.ma.core._deprecate_argsort_axis(arr)
numpy.ma.core._extrema_operation(self,ufunc,compare,fill_value)
numpy.ma.core._extrema_operation.__init__(self,ufunc,compare,fill_value)
numpy.ma.core._extrema_operation.outer(self,a,b)
numpy.ma.core._extrema_operation.reduce(self,target,axis=np._NoValue)
numpy.ma.core._extremum_fill_value(obj,extremum,extremum_name)
numpy.ma.core._frommethod(self,methodname,reversed=False)
numpy.ma.core._frommethod.__init__(self,methodname,reversed=False)
numpy.ma.core._frommethod.getdoc(self)
numpy.ma.core._get_dtype_of(obj)
numpy.ma.core._mareconstruct(subtype,baseclass,baseshape,basetype)
numpy.ma.core._pickle_warn(method)
numpy.ma.core._recursive_fill_value(dtype,f)
numpy.ma.core._recursive_filled(a,mask,fill_value)
numpy.ma.core._recursive_printoption(result,mask,printopt)
numpy.ma.core._recursive_set_fill_value(fillvalue,dt)
numpy.ma.core._replace_dtype_fields(dtype,primitive_dtype)
numpy.ma.core._replace_dtype_fields_recursive(dtype,primitive_dtype)
numpy.ma.core._shrink_mask(m)
numpy.ma.core.allclose(a,b,masked_equal=True,rtol=1e-05,atol=1e-08)
numpy.ma.core.allequal(a,b,fill_value=True)
numpy.ma.core.append(a,b,axis=None)
numpy.ma.core.argsort(a,axis=np._NoValue,kind=None,order=None,endwith=True,fill_value=None)
numpy.ma.core.array(data,dtype=None,copy=False,order=None,mask=nomask,fill_value=None,keep_mask=True,hard_mask=False,shrink=True,subok=True,ndmin=0)
numpy.ma.core.asanyarray(a,dtype=None)
numpy.ma.core.asarray(a,dtype=None,order=None)
numpy.ma.core.choose(indices,choices,out=None,mode='raise')
numpy.ma.core.common_fill_value(a,b)
numpy.ma.core.compressed(x)
numpy.ma.core.concatenate(arrays,axis=0)
numpy.ma.core.convolve(a,v,mode='full',propagate_mask=True)
numpy.ma.core.correlate(a,v,mode='valid',propagate_mask=True)
numpy.ma.core.default_fill_value(obj)
numpy.ma.core.diag(v,k=0)
numpy.ma.core.doc_note(initialdoc,note)
numpy.ma.core.dot(a,b,strict=False,out=None)
numpy.ma.core.filled(a,fill_value=None)
numpy.ma.core.fix_invalid(a,mask=nomask,copy=True,fill_value=None)
numpy.ma.core.flatten_mask(mask)
numpy.ma.core.flatten_structured_array(a)
numpy.ma.core.fromfile(file,dtype=float,count=-1,sep='')
numpy.ma.core.fromflex(fxarray)
numpy.ma.core.get_fill_value(a)
numpy.ma.core.get_masked_subclass(*arrays)
numpy.ma.core.get_object_signature(obj)
numpy.ma.core.getdata(a,subok=True)
numpy.ma.core.getmask(a)
numpy.ma.core.getmaskarray(arr)
numpy.ma.core.inner(a,b)
numpy.ma.core.isMaskedArray(x)
numpy.ma.core.is_mask(m)
numpy.ma.core.is_masked(x)
numpy.ma.core.is_string_or_list_of_strings(val)
numpy.ma.core.left_shift(a,n)
numpy.ma.core.make_mask(m,copy=False,shrink=True,dtype=MaskType)
numpy.ma.core.make_mask_descr(ndtype)
numpy.ma.core.make_mask_none(newshape,dtype=None)
numpy.ma.core.mask_or(m1,m2,copy=False,shrink=True)
numpy.ma.core.mask_rowcols(a,axis=None)
numpy.ma.core.masked_equal(x,value,copy=True)
numpy.ma.core.masked_greater(x,value,copy=True)
numpy.ma.core.masked_greater_equal(x,value,copy=True)
numpy.ma.core.masked_inside(x,v1,v2,copy=True)
numpy.ma.core.masked_invalid(a,copy=True)
numpy.ma.core.masked_less(x,value,copy=True)
numpy.ma.core.masked_less_equal(x,value,copy=True)
numpy.ma.core.masked_not_equal(x,value,copy=True)
numpy.ma.core.masked_object(x,value,copy=True,shrink=True)
numpy.ma.core.masked_outside(x,v1,v2,copy=True)
numpy.ma.core.masked_values(x,value,rtol=1e-05,atol=1e-08,copy=True,shrink=True)
numpy.ma.core.masked_where(condition,a,copy=True)
numpy.ma.core.max(obj,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.core.maximum_fill_value(obj)
numpy.ma.core.min(obj,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.core.minimum_fill_value(obj)
numpy.ma.core.mvoid(self,data,mask=nomask,dtype=None,fill_value=None,hardmask=False,copy=False,subok=True)
numpy.ma.core.mvoid.__getitem__(self,indx)
numpy.ma.core.mvoid.__iter__(self)
numpy.ma.core.mvoid.__len__(self)
numpy.ma.core.mvoid.__new__(self,data,mask=nomask,dtype=None,fill_value=None,hardmask=False,copy=False,subok=True)
numpy.ma.core.mvoid.__setitem__(self,indx,value)
numpy.ma.core.mvoid.__str__(self)
numpy.ma.core.mvoid._data(self)
numpy.ma.core.mvoid.filled(self,fill_value=None)
numpy.ma.core.mvoid.tolist(self)
numpy.ma.core.ndim(obj)
numpy.ma.core.outer(a,b)
numpy.ma.core.power(a,b,third=None)
numpy.ma.core.ptp(obj,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.core.put(a,indices,values,mode='raise')
numpy.ma.core.putmask(a,mask,values)
numpy.ma.core.reshape(a,new_shape,order='C')
numpy.ma.core.resize(x,new_shape)
numpy.ma.core.right_shift(a,n)
numpy.ma.core.round_(a,decimals=0,out=None)
numpy.ma.core.set_fill_value(a,fill_value)
numpy.ma.core.shape(obj)
numpy.ma.core.size(obj,axis=None)
numpy.ma.core.sort(a,axis=-1,kind=None,order=None,endwith=True,fill_value=None)
numpy.ma.core.take(a,indices,axis=None,out=None,mode='raise')
numpy.ma.core.transpose(a,axes=None)
numpy.ma.core.where(condition,x=_NoValue,y=_NoValue)
numpy.ma.correlate(a,v,mode='valid',propagate_mask=True)
numpy.ma.default_fill_value(obj)
numpy.ma.diag(v,k=0)
numpy.ma.doc_note(initialdoc,note)
numpy.ma.dot(a,b,strict=False,out=None)
numpy.ma.filled(a,fill_value=None)
numpy.ma.fix_invalid(a,mask=nomask,copy=True,fill_value=None)
numpy.ma.flatten_mask(mask)
numpy.ma.flatten_structured_array(a)
numpy.ma.fromfile(file,dtype=float,count=-1,sep='')
numpy.ma.fromflex(fxarray)
numpy.ma.get_fill_value(a)
numpy.ma.get_masked_subclass(*arrays)
numpy.ma.get_object_signature(obj)
numpy.ma.getdata(a,subok=True)
numpy.ma.getmask(a)
numpy.ma.getmaskarray(arr)
numpy.ma.inner(a,b)
numpy.ma.isMaskedArray(x)
numpy.ma.is_mask(m)
numpy.ma.is_masked(x)
numpy.ma.is_string_or_list_of_strings(val)
numpy.ma.left_shift(a,n)
numpy.ma.make_mask(m,copy=False,shrink=True,dtype=MaskType)
numpy.ma.make_mask_descr(ndtype)
numpy.ma.make_mask_none(newshape,dtype=None)
numpy.ma.mask_or(m1,m2,copy=False,shrink=True)
numpy.ma.mask_rowcols(a,axis=None)
numpy.ma.masked_equal(x,value,copy=True)
numpy.ma.masked_greater(x,value,copy=True)
numpy.ma.masked_greater_equal(x,value,copy=True)
numpy.ma.masked_inside(x,v1,v2,copy=True)
numpy.ma.masked_invalid(a,copy=True)
numpy.ma.masked_less(x,value,copy=True)
numpy.ma.masked_less_equal(x,value,copy=True)
numpy.ma.masked_not_equal(x,value,copy=True)
numpy.ma.masked_object(x,value,copy=True,shrink=True)
numpy.ma.masked_outside(x,v1,v2,copy=True)
numpy.ma.masked_values(x,value,rtol=1e-05,atol=1e-08,copy=True,shrink=True)
numpy.ma.masked_where(condition,a,copy=True)
numpy.ma.max(obj,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.maximum_fill_value(obj)
numpy.ma.min(obj,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.minimum_fill_value(obj)
numpy.ma.mvoid(self,data,mask=nomask,dtype=None,fill_value=None,hardmask=False,copy=False,subok=True)
numpy.ma.mvoid.__getitem__(self,indx)
numpy.ma.mvoid.__iter__(self)
numpy.ma.mvoid.__len__(self)
numpy.ma.mvoid.__setitem__(self,indx,value)
numpy.ma.mvoid.__str__(self)
numpy.ma.mvoid._data(self)
numpy.ma.mvoid.filled(self,fill_value=None)
numpy.ma.mvoid.tolist(self)
numpy.ma.ndim(obj)
numpy.ma.outer(a,b)
numpy.ma.power(a,b,third=None)
numpy.ma.ptp(obj,axis=None,out=None,fill_value=None,keepdims=np._NoValue)
numpy.ma.put(a,indices,values,mode='raise')
numpy.ma.putmask(a,mask,values)
numpy.ma.reshape(a,new_shape,order='C')
numpy.ma.resize(x,new_shape)
numpy.ma.right_shift(a,n)
numpy.ma.round_(a,decimals=0,out=None)
numpy.ma.set_fill_value(a,fill_value)
numpy.ma.shape(obj)
numpy.ma.size(obj,axis=None)
numpy.ma.sort(a,axis=-1,kind=None,order=None,endwith=True,fill_value=None)
numpy.ma.take(a,indices,axis=None,out=None,mode='raise')
numpy.ma.transpose(a,axes=None)
numpy.ma.where(condition,x=_NoValue,y=_NoValue)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/core.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/testutils.py----------------------------------------
A:numpy.ma.testutils.m->mask_or(getmask(x), getmask(y))
A:numpy.ma.testutils.d1->filled(a)
A:numpy.ma.testutils.d2->filled(b)
A:numpy.ma.testutils.x->masked_array(x, copy=False, mask=m, keep_mask=False, subok=False)
A:numpy.ma.testutils.y->masked_array(y, copy=False, mask=m, keep_mask=False, subok=False)
A:numpy.ma.testutils.d->numpy.less_equal(umath.absolute(x - y), atol + rtol * umath.absolute(y))
A:numpy.ma.testutils.msg->build_err_msg([x, y], err_msg=err_msg, verbose=verbose, header=header, names=('x', 'y'))
A:numpy.ma.testutils.actual->numpy.asanyarray(actual)
A:numpy.ma.testutils.desired->numpy.asanyarray(desired)
numpy.ma.testutils._assert_equal_on_sequences(actual,desired,err_msg='')
numpy.ma.testutils.almost(a,b,decimal=6,fill_value=True)
numpy.ma.testutils.approx(a,b,fill_value=True,rtol=1e-05,atol=1e-08)
numpy.ma.testutils.assert_almost_equal(actual,desired,decimal=7,err_msg='',verbose=True)
numpy.ma.testutils.assert_array_almost_equal(x,y,decimal=6,err_msg='',verbose=True)
numpy.ma.testutils.assert_array_approx_equal(x,y,decimal=6,err_msg='',verbose=True)
numpy.ma.testutils.assert_array_compare(comparison,x,y,err_msg='',verbose=True,header='',fill_value=True)
numpy.ma.testutils.assert_array_equal(x,y,err_msg='',verbose=True)
numpy.ma.testutils.assert_array_less(x,y,err_msg='',verbose=True)
numpy.ma.testutils.assert_equal(actual,desired,err_msg='')
numpy.ma.testutils.assert_equal_records(a,b)
numpy.ma.testutils.assert_mask_equal(m1,m2,err_msg='')
numpy.ma.testutils.fail_if_array_equal(x,y,err_msg='',verbose=True)
numpy.ma.testutils.fail_if_equal(actual,desired,err_msg='')


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/timer_comparison.py----------------------------------------
A:numpy.ma.timer_comparison.xf->numpy.where(m1, 1e+20, x)
A:numpy.ma.timer_comparison.yf->self.filled(y)
A:numpy.ma.timer_comparison.m->self.make_mask(n)
A:numpy.ma.timer_comparison.x->x.reshape(2, 3, 4).reshape(2, 3, 4)
A:numpy.ma.timer_comparison.y->self.array([self.arange(6), 2.0 * self.arange(6)])
A:numpy.ma.timer_comparison.msg->build_err_msg([x, y], err_msg, header=header, names=('x', 'y'))
A:numpy.ma.timer_comparison.val->self.masked_array(val, mask=m)
A:numpy.ma.timer_comparison.reduced->reduced.tolist().tolist()
A:numpy.ma.timer_comparison.cond->reduced.tolist().tolist().all()
A:numpy.ma.timer_comparison.xm->self.arange(10, dtype=float_)
A:numpy.ma.timer_comparison.ym->self.masked_array(y, mask=m2)
A:numpy.ma.timer_comparison.x1->self.array([1, 'hello', 2, 3], object)
A:numpy.ma.timer_comparison.x2->numpy.array([1, 'hello', 2, 3], object)
A:numpy.ma.timer_comparison.x3->self.array(x1, mask=[0, 1, 0, 1])
A:numpy.ma.timer_comparison.x4->self.arange(4)
A:numpy.ma.timer_comparison.x3[:]->self.masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.timer_comparison.x4[:]->self.masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.timer_comparison.m2->self.make_mask(m)
A:numpy.ma.timer_comparison.m3->self.make_mask(m, copy=1)
A:numpy.ma.timer_comparison.y4->self.resize(x4, (8,))
A:numpy.ma.timer_comparison.y5->self.repeat(x4, (2, 2, 2, 2), axis=0)
A:numpy.ma.timer_comparison.y6->self.repeat(x4, 2, axis=0)
A:numpy.ma.timer_comparison.y7->self.arange(4).repeat((2, 2, 2, 2), axis=0)
A:numpy.ma.timer_comparison.y8->self.arange(4).repeat(2, 0)
A:numpy.ma.timer_comparison.t->self.take(y, [0, 3, 4])
A:numpy.ma.timer_comparison.a->self.arange(10, dtype=float_)
A:numpy.ma.timer_comparison.uf->getattr(fromnumeric, f)
A:numpy.ma.timer_comparison.mf->getattr(self.module, f)
A:numpy.ma.timer_comparison.ur->uf(*args)
A:numpy.ma.timer_comparison.mr->mf(*args)
A:numpy.ma.timer_comparison.ott->ott.reshape(2, 2).reshape(2, 2)
A:numpy.ma.timer_comparison.(result, wts)->self.average(ott, axis=0, returned=1)
A:numpy.ma.timer_comparison.m1->self.zeros(6)
A:numpy.ma.timer_comparison.m4->self.ones(6)
A:numpy.ma.timer_comparison.z->self.masked_array(y, m3)
A:numpy.ma.timer_comparison.cur->numpy.sort(cur)
numpy.ma.timer_comparison.ModuleTester(self,module)
numpy.ma.timer_comparison.ModuleTester.__init__(self,module)
numpy.ma.timer_comparison.ModuleTester.assert_array_compare(self,comparison,x,y,err_msg='',header='',fill_value=True)
numpy.ma.timer_comparison.ModuleTester.assert_array_equal(self,x,y,err_msg='')
numpy.ma.timer_comparison.ModuleTester.test_0(self)
numpy.ma.timer_comparison.ModuleTester.test_1(self)
numpy.ma.timer_comparison.ModuleTester.test_2(self)
numpy.ma.timer_comparison.ModuleTester.test_3(self)
numpy.ma.timer_comparison.ModuleTester.test_4(self)
numpy.ma.timer_comparison.ModuleTester.test_5(self)
numpy.ma.timer_comparison.ModuleTester.test_6(self)
numpy.ma.timer_comparison.ModuleTester.test_7(self)
numpy.ma.timer_comparison.ModuleTester.test_99(self)
numpy.ma.timer_comparison.ModuleTester.test_A(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/mrecords.py----------------------------------------
A:numpy.ma.mrecords.ndescr->len(descr)
A:numpy.ma.mrecords.new_names->names.split(',')
A:numpy.ma.mrecords.nnames->len(new_names)
A:numpy.ma.mrecords.fdmask->numpy.empty(self.shape, dtype=mdescr)
A:numpy.ma.mrecords.fdmask.flat->tuple([False] * len(mdescr))
A:numpy.ma.mrecords.self->numpy.recarray.__new__(cls, shape, dtype=dtype, buf=buf, offset=offset, strides=strides, formats=formats, names=names, titles=titles, byteorder=byteorder, aligned=aligned)
A:numpy.ma.mrecords.mdtype->dtype([(k, bool_) for (k, _) in self.dtype.descr])
A:numpy.ma.mrecords.self._mask->tuple([False] * len(mdtype))
A:numpy.ma.mrecords.mask->numpy.array(mask, copy=False)
A:numpy.ma.mrecords._mask->getattr(reclist, '_mask', None)
A:numpy.ma.mrecords.objmask->getattr(obj, '_mask', nomask)
A:numpy.ma.mrecords._dtype->numpy.ndarray.__getattribute__(self, 'dtype')
A:numpy.ma.mrecords.mdescr->numpy.ma.make_mask_descr(_dtype)
A:numpy.ma.mrecords._localdict->object.__getattribute__(self, '__dict__')
A:numpy.ma.mrecords._data->numpy.ndarray.__new__(baseclass, baseshape, basetype).view(subtype)
A:numpy.ma.mrecords.obj->numpy.array(_data[indx], copy=False).view(mrecarray)
A:numpy.ma.mrecords.tp_len->len(_mask.dtype)
A:numpy.ma.mrecords.hasmasked->getattr(reclist, '_mask', None).view((bool, (tp_len,) if tp_len else ())).any()
A:numpy.ma.mrecords._fill_value->object.__getattribute__(self, '__dict__').get('_fill_value', None)
A:numpy.ma.mrecords.ret->object.__setattr__(self, attr, val)
A:numpy.ma.mrecords.dval->filled(val)
A:numpy.ma.mrecords.mval->getmaskarray(val)
A:numpy.ma.mrecords.obj._mask->numpy.array(_mask[indx], copy=False).view(recarray)
A:numpy.ma.mrecords.self._mask[indx]->numpy.ma.getmaskarray(value)
A:numpy.ma.mrecords.output->numpy.ndarray.view(self, dtype, type)
A:numpy.ma.mrecords.dtype->numpy.dtype(dtype)
A:numpy.ma.mrecords.output._mask->numpy.recarray.__new__(cls, shape, dtype=dtype, buf=buf, offset=offset, strides=strides, formats=formats, names=names, titles=titles, byteorder=byteorder, aligned=aligned)._mask.view(mdtype, ndarray)
A:numpy.ma.mrecords.copied->numpy.recarray.__new__(cls, shape, dtype=dtype, buf=buf, offset=offset, strides=strides, formats=formats, names=names, titles=titles, byteorder=byteorder, aligned=aligned)._data.copy().view(type(self))
A:numpy.ma.mrecords.copied._mask->numpy.recarray.__new__(cls, shape, dtype=dtype, buf=buf, offset=offset, strides=strides, formats=formats, names=names, titles=titles, byteorder=byteorder, aligned=aligned)._mask.copy()
A:numpy.ma.mrecords.result->narray(self.filled().tolist(), dtype=object)
A:numpy.ma.mrecords._array->recfromarrays(datalist, dtype=dtype, shape=shape, formats=formats, names=names, titles=titles, aligned=aligned, byteorder=byteorder).view(mrecarray)
A:numpy.ma.mrecords._array._mask.flat->list(zip(*masklist))
A:numpy.ma.mrecords.reclist->reclist.tolist().tolist()
A:numpy.ma.mrecords.mrec->recfromrecords(reclist, dtype=dtype, shape=shape, formats=formats, names=names, titles=titles, aligned=aligned, byteorder=byteorder).view(mrecarray)
A:numpy.ma.mrecords.maskrecordlength->len(mask.dtype)
A:numpy.ma.mrecords.arr->numpy.asarray(arr)
A:numpy.ma.mrecords.f->open(fname)
A:numpy.ma.mrecords.ftext->openfile(fname)
A:numpy.ma.mrecords.line->openfile(fname).readline()
A:numpy.ma.mrecords.firstline->line[:line.find(commentchar)].strip()
A:numpy.ma.mrecords._varnames->line[:line.find(commentchar)].strip().split(delimitor)
A:numpy.ma.mrecords._variables->masked_array([line.strip().split(delimitor) for line in ftext if line[0] != commentchar and len(line) > 1])
A:numpy.ma.mrecords.vartypes->_guessvartypes(_variables[0])
A:numpy.ma.mrecords.newfield->numpy.ma.array(newfield)
A:numpy.ma.mrecords.newdtype->numpy.dtype(_data.dtype.descr + [(newfieldname, newfield.dtype)])
A:numpy.ma.mrecords.newdata->newdata.view(MaskedRecords).view(MaskedRecords)
A:numpy.ma.mrecords.newmdtype->numpy.dtype([(n, bool_) for n in newdtype.names])
A:numpy.ma.mrecords.newmask->recarray(_data.shape, newmdtype)
numpy.ma.mrecords.MaskedRecords(cls,shape,dtype=None,buf=None,offset=0,strides=None,formats=None,names=None,titles=None,byteorder=None,aligned=False,mask=nomask,hard_mask=False,fill_value=None,keep_mask=True,copy=False,**options)
numpy.ma.mrecords.MaskedRecords.__array_finalize__(self,obj)
numpy.ma.mrecords.MaskedRecords.__getattribute__(self,attr)
numpy.ma.mrecords.MaskedRecords.__getitem__(self,indx)
numpy.ma.mrecords.MaskedRecords.__getstate__(self)
numpy.ma.mrecords.MaskedRecords.__len__(self)
numpy.ma.mrecords.MaskedRecords.__new__(cls,shape,dtype=None,buf=None,offset=0,strides=None,formats=None,names=None,titles=None,byteorder=None,aligned=False,mask=nomask,hard_mask=False,fill_value=None,keep_mask=True,copy=False,**options)
numpy.ma.mrecords.MaskedRecords.__reduce__(self)
numpy.ma.mrecords.MaskedRecords.__repr__(self)
numpy.ma.mrecords.MaskedRecords.__setattr__(self,attr,val)
numpy.ma.mrecords.MaskedRecords.__setitem__(self,indx,value)
numpy.ma.mrecords.MaskedRecords.__setstate__(self,state)
numpy.ma.mrecords.MaskedRecords.__str__(self)
numpy.ma.mrecords.MaskedRecords._data(self)
numpy.ma.mrecords.MaskedRecords._fieldmask(self)
numpy.ma.mrecords.MaskedRecords.copy(self)
numpy.ma.mrecords.MaskedRecords.harden_mask(self)
numpy.ma.mrecords.MaskedRecords.soften_mask(self)
numpy.ma.mrecords.MaskedRecords.tolist(self,fill_value=None)
numpy.ma.mrecords.MaskedRecords.view(self,dtype=None,type=None)
numpy.ma.mrecords._checknames(descr,names=None)
numpy.ma.mrecords._get_fieldmask(self)
numpy.ma.mrecords._guessvartypes(arr)
numpy.ma.mrecords._mrreconstruct(subtype,baseclass,baseshape,basetype)
numpy.ma.mrecords.addfield(mrecord,newfield,newfieldname=None)
numpy.ma.mrecords.fromarrays(arraylist,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None,fill_value=None)
numpy.ma.mrecords.fromrecords(reclist,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None,fill_value=None,mask=nomask)
numpy.ma.mrecords.fromtextfile(fname,delimitor=None,commentchar='#',missingchar='',varnames=None,vartypes=None)
numpy.ma.mrecords.openfile(fname)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/mrecords.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/setup.py----------------------------------------
A:numpy.ma.setup.config->configuration(top_path='').todict()
numpy.ma.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/bench.py----------------------------------------
A:numpy.ma.bench.xs->numpy.random.uniform(-1, 1, 6).reshape(2, 3)
A:numpy.ma.bench.ys->numpy.random.uniform(-1, 1, 6).reshape(2, 3)
A:numpy.ma.bench.nmxs->numpy.ma.array(xs, mask=m1)
A:numpy.ma.bench.nmys->numpy.ma.array(ys, mask=m2)
A:numpy.ma.bench.nmzs->numpy.ma.array(zs, mask=m1)
A:numpy.ma.bench.xl->numpy.random.uniform(-1, 1, 100 * 100).reshape(100, 100)
A:numpy.ma.bench.yl->numpy.random.uniform(-1, 1, 100 * 100).reshape(100, 100)
A:numpy.ma.bench.nmxl->numpy.ma.array(xl, mask=maskx)
A:numpy.ma.bench.nmyl->numpy.ma.array(yl, mask=masky)
A:numpy.ma.bench.nmzl->numpy.ma.array(zl, mask=maskx)
A:numpy.ma.bench.Timer->timeit.Timer(stmt=s, setup=setup)
A:numpy.ma.bench.order->min(-int(numpy.floor(numpy.log10(best)) // 3), 3)
numpy.ma.bench.compare_functions_1v(func,nloop=500,xs=xs,nmxs=nmxs,xl=xl,nmxl=nmxl)
numpy.ma.bench.compare_functions_2v(func,nloop=500,test=True,xs=xs,nmxs=nmxs,ys=ys,nmys=nmys,xl=xl,nmxl=nmxl,yl=yl,nmyl=nmyl)
numpy.ma.bench.compare_methods(methodname,args,vars='x',nloop=500,test=True,xs=xs,nmxs=nmxs,xl=xl,nmxl=nmxl)
numpy.ma.bench.timer(s,v='',nloop=500,nrep=3)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/tests/test_extras.py----------------------------------------
A:numpy.ma.tests.test_extras.test->setdiff1d(a, b)
A:numpy.ma.tests.test_extras.control->array([1, 2, 3, 4, 5, 7, -1], mask=[0, 0, 0, 0, 0, 0, 1])
A:numpy.ma.tests.test_extras.dt->numpy.dtype([('a', 'f'), ('b', [('ba', 'f'), ('bb', 'f')])])
A:numpy.ma.tests.test_extras.my_dtype->numpy.dtype([('b', (object, (1,)))])
A:numpy.ma.tests.test_extras.masked_arr->numpy.ma.masked_equal(data, 0)
A:numpy.ma.tests.test_extras.base->array([(0, 0), (0, 0)], mask=[(1, 1), (1, 1)], dtype=dt)
A:numpy.ma.tests.test_extras.k->numpy.arange(i, dtype=int)
A:numpy.ma.tests.test_extras.ja->numpy.full(i, j, dtype=int)
A:numpy.ma.tests.test_extras.a->masked_array([0, 1, 2], mask=True)
A:numpy.ma.tests.test_extras.a.mask->numpy.zeros(10, dtype=bool)
A:numpy.ma.tests.test_extras.ott->ott.reshape(2, 2).reshape(2, 2)
A:numpy.ma.tests.test_extras.(result, wts)->average(ott, axis=0, returned=True)
A:numpy.ma.tests.test_extras.x->array([[0, 1, 2], [3, 4, 5]], mask=[[0, 0, 0], [0, 0, 1]])
A:numpy.ma.tests.test_extras.y->array([0, 1, 2, 3, 4], mask=[0, 0, 0, 0, 1])
A:numpy.ma.tests.test_extras.m1->numpy.random.randint(0, 2, shp).astype(bool)
A:numpy.ma.tests.test_extras.m4->ones(6)
A:numpy.ma.tests.test_extras.z->union1d(x, y)
A:numpy.ma.tests.test_extras.(r1, w1)->average([[a, b], [b, a]], axis=1, returned=True)
A:numpy.ma.tests.test_extras.(r2, w2)->average(ones((2, 2, 3)), weights=ones((2, 2, 3)), returned=True)
A:numpy.ma.tests.test_extras.a2d->array([[1, 2], [0, 4]], float)
A:numpy.ma.tests.test_extras.a2dm->masked_array(a2d, [[False, False], [True, False]])
A:numpy.ma.tests.test_extras.a2da->average(a2d, axis=0)
A:numpy.ma.tests.test_extras.a2dma->average(a2dm, axis=1)
A:numpy.ma.tests.test_extras.mask->numpy.zeros([2, 3, 4])
A:numpy.ma.tests.test_extras.av->average(a)
A:numpy.ma.tests.test_extras.expected->numpy.corrcoef(x)
A:numpy.ma.tests.test_extras.av0->average(a, axis=0)
A:numpy.ma.tests.test_extras.av1->average(a, axis=1)
A:numpy.ma.tests.test_extras.wts->numpy.array([[0.5, 1.0, 2.0, 1.0, 0.5], [1.0, 1.0, 1.0, 1.0, 1.0]])
A:numpy.ma.tests.test_extras.wav->average(a, weights=wts)
A:numpy.ma.tests.test_extras.wav0->average(a, weights=wts, axis=0)
A:numpy.ma.tests.test_extras.wav1->average(a, weights=wts, axis=1)
A:numpy.ma.tests.test_extras.weights_unmasked->masked_array([5, 28, 31], mask=False)
A:numpy.ma.tests.test_extras.weights_masked->masked_array([5, 28, 31], mask=[1, 0, 0])
A:numpy.ma.tests.test_extras.avg_unmasked->average(a, axis=0, weights=weights_unmasked, returned=False)
A:numpy.ma.tests.test_extras.expected_unmasked->numpy.array([6.0, 5.21875, 6.21875])
A:numpy.ma.tests.test_extras.avg_masked->average(a, axis=0, weights=weights_masked, returned=False)
A:numpy.ma.tests.test_extras.expected_masked->numpy.array([6.0, 5.576271186440678, 6.576271186440678])
A:numpy.ma.tests.test_extras.b->masked_array([9, 8, 7], mask=False)
A:numpy.ma.tests.test_extras.d->vstack([a, b])
A:numpy.ma.tests.test_extras.a_1->numpy.random.rand(5, 5)
A:numpy.ma.tests.test_extras.a_2->numpy.random.rand(5, 5)
A:numpy.ma.tests.test_extras.m_1->numpy.round_(np.random.rand(5, 5), 0)
A:numpy.ma.tests.test_extras.m_2->numpy.round_(np.random.rand(5, 5), 0)
A:numpy.ma.tests.test_extras.b_1->masked_array(a_1, mask=m_1)
A:numpy.ma.tests.test_extras.b_2->masked_array(a_2, mask=m_2)
A:numpy.ma.tests.test_extras.data->masked_array([1, 1, 1], mask=True)
A:numpy.ma.tests.test_extras.tmp->notmasked_contiguous(a, 1)
A:numpy.ma.tests.test_extras.m->numpy.zeros((3, 4, 5)).astype(bool)
A:numpy.ma.tests.test_extras.a2->masked_array(d2, mask=m2)
A:numpy.ma.tests.test_extras.a3->compress_nd(x, (1, -1))
A:numpy.ma.tests.test_extras.a4->compress_nd(x, (-2, -1))
A:numpy.ma.tests.test_extras.res->dot(a, a, out=out)
A:numpy.ma.tests.test_extras.n->numpy.arange(1, 7)
A:numpy.ma.tests.test_extras.c->stack([a1, a2], axis=-1)
A:numpy.ma.tests.test_extras.out->masked_array(np.ones(10))
A:numpy.ma.tests.test_extras.xa->apply_along_axis(myfunc, 2, a, offset=1)
A:numpy.ma.tests.test_extras.ctrl->numpy.array([[[28], [44], [60]]])
A:numpy.ma.tests.test_extras.r->numpy.ma.median(dm, axis=-1)
A:numpy.ma.tests.test_extras.ma_x->numpy.ma.median(x, axis=-1, overwrite_input=True)
A:numpy.ma.tests.test_extras.args->itertools.product([-(ndmin + 1), ndmin], [False, True])
A:numpy.ma.tests.test_extras.idx->numpy.arange(len(x))
A:numpy.ma.tests.test_extras.e->masked_array([0.0] * 3 + [13.5, 17.5, 21.5, 25.5] + [0.0] * 3, mask=[True] * 3 + [False] * 4 + [True] * 3)
A:numpy.ma.tests.test_extras.dm->numpy.ma.array([[1, np.nan, 3], [1, 2, 3]])
A:numpy.ma.tests.test_extras.o->numpy.ma.masked_array(np.arange(7.0))
A:numpy.ma.tests.test_extras.aorig->masked_array([0, 1, 2], mask=True).copy()
A:numpy.ma.tests.test_extras.self.data->array(np.random.rand(12))
A:numpy.ma.tests.test_extras.nx->array([[0, 1, 2], [3, 4, 5]], mask=[[0, 0, 0], [0, 0, 1]]).compressed()
A:numpy.ma.tests.test_extras.valid->numpy.logical_not(getmaskarray(x)).astype(int)
A:numpy.ma.tests.test_extras.frac->numpy.dot(valid.T, valid)
A:numpy.ma.tests.test_extras.xf->(x - x.mean(0)).filled(0)
A:numpy.ma.tests.test_extras.self.data2->array(np.random.rand(12))
A:numpy.ma.tests.test_extras.expected2->numpy.corrcoef(x, y)
A:numpy.ma.tests.test_extras.(C, R, K, S, D)->polyfit(x, y, 3, full=True)
A:numpy.ma.tests.test_extras.(c, r, k, s, d)->numpy.polyfit(x[1:-1], y[1:-1, :], 3, full=True)
A:numpy.ma.tests.test_extras.wo->w.copy()
A:numpy.ma.tests.test_extras.ec->zeros((2, 3, 4), dtype=bool)
A:numpy.ma.tests.test_extras.ez->array([0, 1, 2, 3, 4, 5], mask=[0, 0, 0, 0, 0, 1])
A:numpy.ma.tests.test_extras.d1->numpy.random.randint(0, 10, shp)
A:numpy.ma.tests.test_extras.d2->numpy.random.randint(0, 10, shp)
A:numpy.ma.tests.test_extras.m2->numpy.random.randint(0, 2, shp).astype(bool)
A:numpy.ma.tests.test_extras.a1->masked_array(d1, mask=m1)
numpy.ma.tests.test_TestApplyAlongAxis
numpy.ma.tests.test_TestApplyAlongAxis.test_3d(self)
numpy.ma.tests.test_TestApplyAlongAxis.test_3d_kwargs(self)
numpy.ma.tests.test_TestApplyOverAxes
numpy.ma.tests.test_TestApplyOverAxes.test_basic(self)
numpy.ma.tests.test_TestArraySetOps
numpy.ma.tests.test_TestArraySetOps.test_ediff1d(self)
numpy.ma.tests.test_TestArraySetOps.test_ediff1d_ndarray(self)
numpy.ma.tests.test_TestArraySetOps.test_ediff1d_tobegin(self)
numpy.ma.tests.test_TestArraySetOps.test_ediff1d_tobegin_toend(self)
numpy.ma.tests.test_TestArraySetOps.test_ediff1d_toend(self)
numpy.ma.tests.test_TestArraySetOps.test_in1d(self)
numpy.ma.tests.test_TestArraySetOps.test_in1d_invert(self)
numpy.ma.tests.test_TestArraySetOps.test_intersect1d(self)
numpy.ma.tests.test_TestArraySetOps.test_isin(self)
numpy.ma.tests.test_TestArraySetOps.test_setdiff1d(self)
numpy.ma.tests.test_TestArraySetOps.test_setdiff1d_char_array(self)
numpy.ma.tests.test_TestArraySetOps.test_setxor1d(self)
numpy.ma.tests.test_TestArraySetOps.test_union1d(self)
numpy.ma.tests.test_TestArraySetOps.test_unique_allmasked(self)
numpy.ma.tests.test_TestArraySetOps.test_unique_onlist(self)
numpy.ma.tests.test_TestArraySetOps.test_unique_onmaskedarray(self)
numpy.ma.tests.test_TestAverage
numpy.ma.tests.test_TestAverage.test_complex(self)
numpy.ma.tests.test_TestAverage.test_masked_weights(self)
numpy.ma.tests.test_TestAverage.test_onintegers_with_mask(self)
numpy.ma.tests.test_TestAverage.test_testAverage1(self)
numpy.ma.tests.test_TestAverage.test_testAverage2(self)
numpy.ma.tests.test_TestAverage.test_testAverage3(self)
numpy.ma.tests.test_TestCompressFunctions
numpy.ma.tests.test_TestCompressFunctions.test_compress_nd(self)
numpy.ma.tests.test_TestCompressFunctions.test_compress_rowcols(self)
numpy.ma.tests.test_TestCompressFunctions.test_dot(self)
numpy.ma.tests.test_TestCompressFunctions.test_dot_out(self)
numpy.ma.tests.test_TestCompressFunctions.test_dot_returns_maskedarray(self)
numpy.ma.tests.test_TestCompressFunctions.test_mask_row_cols_axis_deprecation(self,axis,func,rowcols_axis)
numpy.ma.tests.test_TestCompressFunctions.test_mask_rowcols(self)
numpy.ma.tests.test_TestConcatenator
numpy.ma.tests.test_TestConcatenator.test_1d(self)
numpy.ma.tests.test_TestConcatenator.test_2d(self)
numpy.ma.tests.test_TestConcatenator.test_masked_constant(self)
numpy.ma.tests.test_TestCorrcoef
numpy.ma.tests.test_TestCorrcoef.setup(self)
numpy.ma.tests.test_TestCorrcoef.test_1d_with_missing(self)
numpy.ma.tests.test_TestCorrcoef.test_1d_without_missing(self)
numpy.ma.tests.test_TestCorrcoef.test_2d_with_missing(self)
numpy.ma.tests.test_TestCorrcoef.test_2d_without_missing(self)
numpy.ma.tests.test_TestCorrcoef.test_bias(self)
numpy.ma.tests.test_TestCorrcoef.test_ddof(self)
numpy.ma.tests.test_TestCov
numpy.ma.tests.test_TestCov.setup(self)
numpy.ma.tests.test_TestCov.test_1d_with_missing(self)
numpy.ma.tests.test_TestCov.test_1d_without_missing(self)
numpy.ma.tests.test_TestCov.test_2d_with_missing(self)
numpy.ma.tests.test_TestCov.test_2d_without_missing(self)
numpy.ma.tests.test_TestGeneric
numpy.ma.tests.test_TestGeneric.check_clump(self,f)
numpy.ma.tests.test_TestGeneric.test_clump_masked(self)
numpy.ma.tests.test_TestGeneric.test_clump_unmasked(self)
numpy.ma.tests.test_TestGeneric.test_flatnotmasked_contiguous(self)
numpy.ma.tests.test_TestGeneric.test_masked_all(self)
numpy.ma.tests.test_TestGeneric.test_masked_all_like(self)
numpy.ma.tests.test_TestGeneric.test_masked_all_with_object(self)
numpy.ma.tests.test_TestGeneric.test_masked_all_with_object_nested(self)
numpy.ma.tests.test_TestMedian
numpy.ma.tests.test_TestMedian.test_1d_shape_consistency(self)
numpy.ma.tests.test_TestMedian.test_2d(self)
numpy.ma.tests.test_TestMedian.test_2d_waxis(self)
numpy.ma.tests.test_TestMedian.test_3d(self)
numpy.ma.tests.test_TestMedian.test_ambigous_fill(self)
numpy.ma.tests.test_TestMedian.test_axis_argument_errors(self)
numpy.ma.tests.test_TestMedian.test_docstring_examples(self)
numpy.ma.tests.test_TestMedian.test_empty(self)
numpy.ma.tests.test_TestMedian.test_inf(self)
numpy.ma.tests.test_TestMedian.test_masked_0d(self)
numpy.ma.tests.test_TestMedian.test_masked_1d(self)
numpy.ma.tests.test_TestMedian.test_nan(self)
numpy.ma.tests.test_TestMedian.test_nan_behavior(self)
numpy.ma.tests.test_TestMedian.test_neg_axis(self)
numpy.ma.tests.test_TestMedian.test_non_masked(self)
numpy.ma.tests.test_TestMedian.test_object(self)
numpy.ma.tests.test_TestMedian.test_out(self)
numpy.ma.tests.test_TestMedian.test_out_1d(self)
numpy.ma.tests.test_TestMedian.test_out_nan(self)
numpy.ma.tests.test_TestMedian.test_pytype(self)
numpy.ma.tests.test_TestMedian.test_single_non_masked_value_on_axis(self)
numpy.ma.tests.test_TestMedian.test_special(self)
numpy.ma.tests.test_TestNotMasked
numpy.ma.tests.test_TestNotMasked.test_contiguous(self)
numpy.ma.tests.test_TestNotMasked.test_edges(self)
numpy.ma.tests.test_TestPolynomial
numpy.ma.tests.test_TestPolynomial.test_polyfit(self)
numpy.ma.tests.test_TestPolynomial.test_polyfit_with_masked_NaNs(self)
numpy.ma.tests.test_TestShapeBase
numpy.ma.tests.test_TestShapeBase.test_atleast_2d(self)
numpy.ma.tests.test_TestShapeBase.test_shape_scalar(self)
numpy.ma.tests.test_TestStack
numpy.ma.tests.test_TestStack.test_stack_1d(self)
numpy.ma.tests.test_TestStack.test_stack_masks(self)
numpy.ma.tests.test_TestStack.test_stack_nd(self)
numpy.ma.tests.test_extras.TestApplyAlongAxis
numpy.ma.tests.test_extras.TestApplyAlongAxis.test_3d(self)
numpy.ma.tests.test_extras.TestApplyAlongAxis.test_3d_kwargs(self)
numpy.ma.tests.test_extras.TestApplyOverAxes
numpy.ma.tests.test_extras.TestApplyOverAxes.test_basic(self)
numpy.ma.tests.test_extras.TestArraySetOps
numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_ndarray(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_tobegin(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_tobegin_toend(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_toend(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_in1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_in1d_invert(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_intersect1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_isin(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_setdiff1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_setdiff1d_char_array(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_setxor1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_union1d(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_unique_allmasked(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_unique_onlist(self)
numpy.ma.tests.test_extras.TestArraySetOps.test_unique_onmaskedarray(self)
numpy.ma.tests.test_extras.TestAverage
numpy.ma.tests.test_extras.TestAverage.test_complex(self)
numpy.ma.tests.test_extras.TestAverage.test_masked_weights(self)
numpy.ma.tests.test_extras.TestAverage.test_onintegers_with_mask(self)
numpy.ma.tests.test_extras.TestAverage.test_testAverage1(self)
numpy.ma.tests.test_extras.TestAverage.test_testAverage2(self)
numpy.ma.tests.test_extras.TestAverage.test_testAverage3(self)
numpy.ma.tests.test_extras.TestCompressFunctions
numpy.ma.tests.test_extras.TestCompressFunctions.test_compress_nd(self)
numpy.ma.tests.test_extras.TestCompressFunctions.test_compress_rowcols(self)
numpy.ma.tests.test_extras.TestCompressFunctions.test_dot(self)
numpy.ma.tests.test_extras.TestCompressFunctions.test_dot_out(self)
numpy.ma.tests.test_extras.TestCompressFunctions.test_dot_returns_maskedarray(self)
numpy.ma.tests.test_extras.TestCompressFunctions.test_mask_row_cols_axis_deprecation(self,axis,func,rowcols_axis)
numpy.ma.tests.test_extras.TestCompressFunctions.test_mask_rowcols(self)
numpy.ma.tests.test_extras.TestConcatenator
numpy.ma.tests.test_extras.TestConcatenator.test_1d(self)
numpy.ma.tests.test_extras.TestConcatenator.test_2d(self)
numpy.ma.tests.test_extras.TestConcatenator.test_masked_constant(self)
numpy.ma.tests.test_extras.TestCorrcoef
numpy.ma.tests.test_extras.TestCorrcoef.setup(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_1d_with_missing(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_1d_without_missing(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_2d_with_missing(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_2d_without_missing(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_bias(self)
numpy.ma.tests.test_extras.TestCorrcoef.test_ddof(self)
numpy.ma.tests.test_extras.TestCov
numpy.ma.tests.test_extras.TestCov.setup(self)
numpy.ma.tests.test_extras.TestCov.test_1d_with_missing(self)
numpy.ma.tests.test_extras.TestCov.test_1d_without_missing(self)
numpy.ma.tests.test_extras.TestCov.test_2d_with_missing(self)
numpy.ma.tests.test_extras.TestCov.test_2d_without_missing(self)
numpy.ma.tests.test_extras.TestGeneric
numpy.ma.tests.test_extras.TestGeneric.check_clump(self,f)
numpy.ma.tests.test_extras.TestGeneric.test_clump_masked(self)
numpy.ma.tests.test_extras.TestGeneric.test_clump_unmasked(self)
numpy.ma.tests.test_extras.TestGeneric.test_flatnotmasked_contiguous(self)
numpy.ma.tests.test_extras.TestGeneric.test_masked_all(self)
numpy.ma.tests.test_extras.TestGeneric.test_masked_all_like(self)
numpy.ma.tests.test_extras.TestGeneric.test_masked_all_with_object(self)
numpy.ma.tests.test_extras.TestGeneric.test_masked_all_with_object_nested(self)
numpy.ma.tests.test_extras.TestMedian
numpy.ma.tests.test_extras.TestMedian.test_1d_shape_consistency(self)
numpy.ma.tests.test_extras.TestMedian.test_2d(self)
numpy.ma.tests.test_extras.TestMedian.test_2d_waxis(self)
numpy.ma.tests.test_extras.TestMedian.test_3d(self)
numpy.ma.tests.test_extras.TestMedian.test_ambigous_fill(self)
numpy.ma.tests.test_extras.TestMedian.test_axis_argument_errors(self)
numpy.ma.tests.test_extras.TestMedian.test_docstring_examples(self)
numpy.ma.tests.test_extras.TestMedian.test_empty(self)
numpy.ma.tests.test_extras.TestMedian.test_inf(self)
numpy.ma.tests.test_extras.TestMedian.test_masked_0d(self)
numpy.ma.tests.test_extras.TestMedian.test_masked_1d(self)
numpy.ma.tests.test_extras.TestMedian.test_nan(self)
numpy.ma.tests.test_extras.TestMedian.test_nan_behavior(self)
numpy.ma.tests.test_extras.TestMedian.test_neg_axis(self)
numpy.ma.tests.test_extras.TestMedian.test_non_masked(self)
numpy.ma.tests.test_extras.TestMedian.test_object(self)
numpy.ma.tests.test_extras.TestMedian.test_out(self)
numpy.ma.tests.test_extras.TestMedian.test_out_1d(self)
numpy.ma.tests.test_extras.TestMedian.test_out_nan(self)
numpy.ma.tests.test_extras.TestMedian.test_pytype(self)
numpy.ma.tests.test_extras.TestMedian.test_single_non_masked_value_on_axis(self)
numpy.ma.tests.test_extras.TestMedian.test_special(self)
numpy.ma.tests.test_extras.TestNotMasked
numpy.ma.tests.test_extras.TestNotMasked.test_contiguous(self)
numpy.ma.tests.test_extras.TestNotMasked.test_edges(self)
numpy.ma.tests.test_extras.TestPolynomial
numpy.ma.tests.test_extras.TestPolynomial.test_polyfit(self)
numpy.ma.tests.test_extras.TestPolynomial.test_polyfit_with_masked_NaNs(self)
numpy.ma.tests.test_extras.TestShapeBase
numpy.ma.tests.test_extras.TestShapeBase.test_atleast_2d(self)
numpy.ma.tests.test_extras.TestShapeBase.test_shape_scalar(self)
numpy.ma.tests.test_extras.TestStack
numpy.ma.tests.test_extras.TestStack.test_stack_1d(self)
numpy.ma.tests.test_extras.TestStack.test_stack_masks(self)
numpy.ma.tests.test_extras.TestStack.test_stack_nd(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/tests/test_subclassing.py----------------------------------------
A:numpy.ma.tests.test_subclassing.x->numpy.arange(5)
A:numpy.ma.tests.test_subclassing.x.info->info.copy()
A:numpy.ma.tests.test_subclassing.self.info->getattr(obj, 'info', {}).copy()
A:numpy.ma.tests.test_subclassing.result->super().__iadd__(other)
A:numpy.ma.tests.test_subclassing.obj->super().__array_wrap__(obj, context)
A:numpy.ma.tests.test_subclassing.subarr->SubArray(data, info)
A:numpy.ma.tests.test_subclassing._data->numpy.ma.core.MaskedArray.__new__(cls, data=subarr, mask=mask)
A:numpy.ma.tests.test_subclassing._view->self.view(MaskedArray)
A:numpy.ma.tests.test_subclassing.out->out.view(type(self._original)).view(type(self._original))
A:numpy.ma.tests.test_subclassing.self._dataiter[index]->self._original._validate_input(value)
A:numpy.ma.tests.test_subclassing.value->value.__array__().view(ComplicatedSubArray).__array__().view(ComplicatedSubArray)
A:numpy.ma.tests.test_subclassing.y->self.ravel()
A:numpy.ma.tests.test_subclassing.mx->masked_array(x, mask=[True, False, True, False, False])
A:numpy.ma.tests.test_subclassing.xsub->SubArray(x)
A:numpy.ma.tests.test_subclassing.xmsub->masked_array(xsub, mask=m)
A:numpy.ma.tests.test_subclassing.xmx->masked_array(mx.data.__array__(), mask=mx.mask)
A:numpy.ma.tests.test_subclassing.my->masked_array(subarray(x))
A:numpy.ma.tests.test_subclassing.ym->msubarray(x)
A:numpy.ma.tests.test_subclassing.mxsub->masked_array(xsub, mask=[True, False, True, False, False])
A:numpy.ma.tests.test_subclassing.xcsub->ComplicatedSubArray(x)
A:numpy.ma.tests.test_subclassing.mxcsub->masked_array(xcsub, mask=[True, False, True, False, False])
A:numpy.ma.tests.test_subclassing.mxcsub_nomask->masked_array(xcsub)
A:numpy.ma.tests.test_subclassing.arr1->SubMaskedArray('test', data=[1, 2, 3, 4, 5, 6])
A:numpy.ma.tests.test_subclassing.arr2->SubMaskedArray(data=[0, 1, 2, 3, 4, 5])
A:numpy.ma.tests.test_subclassing.diff1->numpy.subtract(arr1, arr2)
numpy.ma.tests.test_subclassing.CSAIterator(self,a)
numpy.ma.tests.test_subclassing.CSAIterator.__getitem__(self,indx)
numpy.ma.tests.test_subclassing.CSAIterator.__init__(self,a)
numpy.ma.tests.test_subclassing.CSAIterator.__iter__(self)
numpy.ma.tests.test_subclassing.CSAIterator.__next__(self)
numpy.ma.tests.test_subclassing.CSAIterator.__setitem__(self,index,value)
numpy.ma.tests.test_subclassing.ComplicatedSubArray(SubArray)
numpy.ma.tests.test_subclassing.ComplicatedSubArray.__array_wrap__(self,obj,context=None)
numpy.ma.tests.test_subclassing.ComplicatedSubArray.__getitem__(self,item)
numpy.ma.tests.test_subclassing.ComplicatedSubArray.__repr__(self)
numpy.ma.tests.test_subclassing.ComplicatedSubArray.__setitem__(self,item,value)
numpy.ma.tests.test_subclassing.ComplicatedSubArray.__str__(self)
numpy.ma.tests.test_subclassing.ComplicatedSubArray._validate_input(self,value)
numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat(self)
numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat(self,value)
numpy.ma.tests.test_subclassing.MSubArray(cls,data,info={},mask=nomask)
numpy.ma.tests.test_subclassing.MSubArray.__new__(cls,data,info={},mask=nomask)
numpy.ma.tests.test_subclassing.MSubArray._series(self)
numpy.ma.tests.test_subclassing.SubArray(cls,arr,info={})
numpy.ma.tests.test_subclassing.SubArray.__add__(self,other)
numpy.ma.tests.test_subclassing.SubArray.__array_finalize__(self,obj)
numpy.ma.tests.test_subclassing.SubArray.__iadd__(self,other)
numpy.ma.tests.test_subclassing.SubArray.__new__(cls,arr,info={})
numpy.ma.tests.test_subclassing.SubMaskedArray(cls,info=None,**kwargs)
numpy.ma.tests.test_subclassing.SubMaskedArray.__new__(cls,info=None,**kwargs)
numpy.ma.tests.test_subclassing.TestSubclassing
numpy.ma.tests.test_subclassing.TestSubclassing.setup(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_attributepropagation(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_data_subclassing(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_masked_binary_operations(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_masked_binary_operations2(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_masked_unary_operations(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_maskedarray_subclassing(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_pure_subclass_info_preservation(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_items(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_nomask_items(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_repr(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_str(self)
numpy.ma.tests.test_subclassing.TestSubclassing.test_subclasspreservation(self)
numpy.ma.tests.test_subclassing.assert_startswith(a,b)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/tests/test_mrecords.py----------------------------------------
A:numpy.ma.tests.test_mrecords.base->self.base.copy()
A:numpy.ma.tests.test_mrecords.mbase->self.base.copy().view(mrecarray)
A:numpy.ma.tests.test_mrecords.data->numpy.ma.array([('a', 1), ('b', 2), ('c', 3)], dtype=ndtype)
A:numpy.ma.tests.test_mrecords.rdata->numpy.ma.array([('a', 1), ('b', 2), ('c', 3)], dtype=ndtype).view(MaskedRecords)
A:numpy.ma.tests.test_mrecords.val->numpy.ma.array([10, 20, 30], mask=[1, 0, 0])
A:numpy.ma.tests.test_mrecords.nmask->numpy.array([(0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 0, 1), (0, 0, 0)], dtype=[('a', bool), ('b', bool), ('c', bool)])
A:numpy.ma.tests.test_mrecords.mrec->addfield(mrec, ma.array(d, mask=m))
A:numpy.ma.tests.test_mrecords._->numpy.compat.pickle.dumps(mrec, protocol=proto)
A:numpy.ma.tests.test_mrecords.mrec_->numpy.compat.pickle.loads(_)
A:numpy.ma.tests.test_mrecords._a->numpy.ma.array([1, 2, 3], mask=[0, 0, 1], dtype=int)
A:numpy.ma.tests.test_mrecords._b->numpy.ma.array([1.1, 2.2, 3.3], mask=[0, 0, 1], dtype=float)
A:numpy.ma.tests.test_mrecords._c->numpy.ma.array(['one', 'two', 'three'], mask=[0, 0, 1], dtype='|S8')
A:numpy.ma.tests.test_mrecords.mrecfilled->addfield(mrec, ma.array(d, mask=m)).filled()
A:numpy.ma.tests.test_mrecords.x->mrecarray(1, formats=float, names='base')
A:numpy.ma.tests.test_mrecords.easy->mrecarray(1, dtype=[('i', int), ('s', '|S8'), ('f', float)])
A:numpy.ma.tests.test_mrecords.solo->mrecarray(1, dtype=[('f0', '<f8', (2, 2))])
A:numpy.ma.tests.test_mrecords.mult->mrecarray(2, dtype='i4, (2,3)float, float')
A:numpy.ma.tests.test_mrecords.arr->numpy.array(list(zip(a, b)), dtype=ndtype)
A:numpy.ma.tests.test_mrecords.test->addfield(mrec, ma.array(d, mask=m)).view(alttype)
A:numpy.ma.tests.test_mrecords.nrec->recfromarrays((_a._data, _b._data, _c._data), dtype=ddtype)
A:numpy.ma.tests.test_mrecords._x->numpy.ma.array([1, 1.1, 'one'], mask=[1, 0, 0], dtype=object)
A:numpy.ma.tests.test_mrecords.pa->recfromrecords(palist, names='c1, c2, c3, c4')
A:numpy.ma.tests.test_mrecords.mpa->fromrecords(palist, names='c1, c2, c3, c4')
A:numpy.ma.tests.test_mrecords._mrec->fromrecords(nrec.tolist(), dtype=ddtype, mask=mrec._mask.tolist())
A:numpy.ma.tests.test_mrecords.mrectxt->fromtextfile(path, delimitor=',', varnames='ABCDEFG')
A:numpy.ma.tests.test_mrecords.y->numpy.ma.masked_array([(1, '2'), (3, '4')], mask=[(0, 0), (0, 1)], dtype=[('a', int), ('b', object)])
numpy.ma.tests.test_mrecords.TestMRecords
numpy.ma.tests.test_mrecords.TestMRecords.test_byview(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_exotic_formats(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_filled(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_get(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_hardmask(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_pickling(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_elements(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_fields(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_fields_mask(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_mask(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_mask_fromarray(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_set_mask_fromfields(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_setslices_hardmask(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_tolist(self)
numpy.ma.tests.test_mrecords.TestMRecords.test_withnames(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport
numpy.ma.tests.test_mrecords.TestMRecordsImport.test_addfield(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromarrays(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromrecords(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromrecords_wmask(self)
numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromtextfile(self)
numpy.ma.tests.test_mrecords.TestView
numpy.ma.tests.test_mrecords.TestView.setup(self)
numpy.ma.tests.test_mrecords.TestView.test_view_by_itself(self)
numpy.ma.tests.test_mrecords.TestView.test_view_flexible_type(self)
numpy.ma.tests.test_mrecords.TestView.test_view_simple_dtype(self)
numpy.ma.tests.test_mrecords.test_record_array_with_object_field()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/tests/test_deprecations.py----------------------------------------
A:numpy.ma.tests.test_deprecations.arr_0d->numpy.array(1).view(cls)
A:numpy.ma.tests.test_deprecations.arr_1d->numpy.array([1, 2, 3]).view(cls)
A:numpy.ma.tests.test_deprecations.arr_2d->numpy.array([[1, 2], [3, 4]]).view(cls)
A:numpy.ma.tests.test_deprecations.result->ma_max(data1d)
A:numpy.ma.tests.test_deprecations.data1d->numpy.ma.arange(6)
A:numpy.ma.tests.test_deprecations.data2d->numpy.ma.arange(6).reshape(2, 3)
numpy.ma.tests.test_deprecations.TestArgsort
numpy.ma.tests.test_deprecations.TestArgsort._test_base(self,argsort,cls)
numpy.ma.tests.test_deprecations.TestArgsort.test_function_maskedarray(self)
numpy.ma.tests.test_deprecations.TestArgsort.test_function_ndarray(self)
numpy.ma.tests.test_deprecations.TestArgsort.test_method(self)
numpy.ma.tests.test_deprecations.TestMinimumMaximum
numpy.ma.tests.test_deprecations.TestMinimumMaximum.test_axis_default(self)
numpy.ma.tests.test_deprecations.TestMinimumMaximum.test_maximum(self)
numpy.ma.tests.test_deprecations.TestMinimumMaximum.test_minimum(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/tests/test_regression.py----------------------------------------
A:numpy.ma.tests.test_regression.x->numpy.ma.masked_equal([1, 2, 3, 4, 5], 4)
A:numpy.ma.tests.test_regression.a->numpy.ma.MaskedArray([1.0, 2.0], mask=[False, False])
A:numpy.ma.tests.test_regression.b->numpy.tile(a, (2, 1))
A:numpy.ma.tests.test_regression.c->masked_where(b, a)
A:numpy.ma.tests.test_regression.mout->numpy.ma.array(-1, dtype=float)
A:numpy.ma.tests.test_regression.y->numpy.array([2, 2.5, 3.1, 3, 5])
A:numpy.ma.tests.test_regression.r0->numpy.ma.corrcoef(x, y, ddof=0)
A:numpy.ma.tests.test_regression.r1->numpy.ma.corrcoef(x, y, ddof=1)
A:numpy.ma.tests.test_regression.ma->numpy.ma.arange(4).reshape((2, 2))
numpy.ma.tests.test_regression.TestRegression
numpy.ma.tests.test_regression.TestRegression.test_atleast_2d(self)
numpy.ma.tests.test_regression.TestRegression.test_ddof_corrcoef(self)
numpy.ma.tests.test_regression.TestRegression.test_empty_list_on_structured(self)
numpy.ma.tests.test_regression.TestRegression.test_mask_not_backmangled(self)
numpy.ma.tests.test_regression.TestRegression.test_masked_array(self)
numpy.ma.tests.test_regression.TestRegression.test_masked_array_create(self)
numpy.ma.tests.test_regression.TestRegression.test_masked_array_multiply(self)
numpy.ma.tests.test_regression.TestRegression.test_masked_array_repeat(self)
numpy.ma.tests.test_regression.TestRegression.test_masked_array_repr_unicode(self)
numpy.ma.tests.test_regression.TestRegression.test_masked_array_tobytes_fortran(self)
numpy.ma.tests.test_regression.TestRegression.test_mem_masked_where(self)
numpy.ma.tests.test_regression.TestRegression.test_set_fill_value_unicode_py3(self)
numpy.ma.tests.test_regression.TestRegression.test_var_sets_maskedarray_scalar(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/tests/test_core.py----------------------------------------
A:numpy.ma.tests.test_core.suppress_copy_mask_on_assignment->suppress_warnings()
A:numpy.ma.tests.test_core.x->numpy.empty(4, dt)
A:numpy.ma.tests.test_core.y->numpy.add(x, 1.0, out=x)
A:numpy.ma.tests.test_core.xm->masked_array(x, mask=m1)
A:numpy.ma.tests.test_core.ym->masked_array(y, mask=m2)
A:numpy.ma.tests.test_core.z->where(c, 1, masked)
A:numpy.ma.tests.test_core.zm->where(cm, x, y)
A:numpy.ma.tests.test_core.xf->xf.reshape(s).reshape(s)
A:numpy.ma.tests.test_core.a->array([1, 2, 3], mask=[1, 0, 0])
A:numpy.ma.tests.test_core.b->numpy.ma.array(1, mask=a.mask)
A:numpy.ma.tests.test_core.xmym->concatenate((xm, ym), 1)
A:numpy.ma.tests.test_core.data->numpy.array(iterator)
A:numpy.ma.tests.test_core.test->array([1, 2, 3], mask=[1, 0, 0]).view((float, 2), np.recarray)
A:numpy.ma.tests.test_core.xx->numpy.empty(4, dt).copy()
A:numpy.ma.tests.test_core.dma_1->MaskedArray(data)
A:numpy.ma.tests.test_core.dma_2->MaskedArray(dma_1)
A:numpy.ma.tests.test_core.dma_3->MaskedArray(dma_1, mask=[1, 0, 0, 0] * 6)
A:numpy.ma.tests.test_core.masked_str->numpy.ma.masked_array(['a', 'b'], mask=[True, False])
A:numpy.ma.tests.test_core.normal_int->numpy.arange(2)
A:numpy.ma.tests.test_core.res->numpy.ma.masked_values([1, 2, 3, 4], 5, shrink=False)
A:numpy.ma.tests.test_core.masked_obj->numpy.ma.masked_array([NotBool(), 'b'], mask=[True, False])
A:numpy.ma.tests.test_core.xmm->asarray(xm)
A:numpy.ma.tests.test_core.new_m->asarray(m, order='C')
A:numpy.ma.tests.test_core.data_fixed->fix_invalid(data)
A:numpy.ma.tests.test_core.dt->numpy.dtype([])
A:numpy.ma.tests.test_core.x1->numpy.arange(5)
A:numpy.ma.tests.test_core.x2->numpy.array([1, 'hello', 2, 3], object)
A:numpy.ma.tests.test_core.x3->array(x1, mask=[0, 1, 0, 1])
A:numpy.ma.tests.test_core.x4->arange(4)
A:numpy.ma.tests.test_core.x3[:]->masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.tests.test_core.x4[:]->masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.tests.test_core.m->numpy.ma.array(np.ma.masked)
A:numpy.ma.tests.test_core.m2->numpy.array([1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1])
A:numpy.ma.tests.test_core.m3->make_mask(m, copy=True)
A:numpy.ma.tests.test_core.y1->array(x1, mask=m)
A:numpy.ma.tests.test_core.y1a->array(y1)
A:numpy.ma.tests.test_core.y2->array(x1, mask=m3)
A:numpy.ma.tests.test_core.y2a->array(x1, mask=m, copy=1)
A:numpy.ma.tests.test_core.y3->array(x1 * 1.0, mask=m)
A:numpy.ma.tests.test_core.y4->resize(x4, (8,))
A:numpy.ma.tests.test_core.y5->repeat(x4, (2, 2, 2, 2), axis=0)
A:numpy.ma.tests.test_core.y6->repeat(x4, 2, axis=0)
A:numpy.ma.tests.test_core.y7->arange(4).repeat((2, 2, 2, 2), axis=0)
A:numpy.ma.tests.test_core.y8->arange(4).repeat(2, 0)
A:numpy.ma.tests.test_core.y9->arange(4).copy()
A:numpy.ma.tests.test_core.xc->numpy.empty(4, dt).copy()
A:numpy.ma.tests.test_core.copied->deepcopy(a)
A:numpy.ma.tests.test_core.with_format_string->format(masked, ' >5')
A:numpy.ma.tests.test_core.oldopts->numpy.get_printoptions()
A:numpy.ma.tests.test_core.utype->type(u)
A:numpy.ma.tests.test_core.arr_nomask->numpy.ma.array(u)
A:numpy.ma.tests.test_core.arr_masked->numpy.ma.array(u, mask=True)
A:numpy.ma.tests.test_core.a_pickled->numpy.compat.pickle.loads(pickle.dumps(a, protocol=proto))
A:numpy.ma.tests.test_core.mc_pickled->numpy.compat.pickle.loads(pickle.dumps(mc, protocol=proto))
A:numpy.ma.tests.test_core.c->numpy.reshape(a, (2, 5))
A:numpy.ma.tests.test_core.atest->ones((10, 10, 10), dtype=float)
A:numpy.ma.tests.test_core.btest->zeros(atest.shape, MaskType)
A:numpy.ma.tests.test_core.flexi->array([(1, 1, 1)], dtype=[('i', int), ('s', '|S8'), ('f', float)])
A:numpy.ma.tests.test_core.control->numpy.array([(True, True), (True, True)], dtype=mdtype)
A:numpy.ma.tests.test_core.Z->numpy.ma.zeros(2, numpy.dtype([('A', '(2,2)i1,(2,2)i1', (2, 2))]))
A:numpy.ma.tests.test_core.fancydtype->numpy.dtype([('x', int), ('y', [('t', int), ('s', float)])])
A:numpy.ma.tests.test_core.t_2d0->masked_array(data=(0, [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], 0.0), mask=(False, [[True, False, True], [False, False, True]], False), dtype='int, (2,3)float, float')
A:numpy.ma.tests.test_core.f->default_fill_value(dt)
A:numpy.ma.tests.test_core.A->masked_array(data=[([0, 1],)], mask=[([True, False],)], dtype=[('A', '>i2', (2,))])
A:numpy.ma.tests.test_core.mx->numpy.ma.array(x, mask=x)
A:numpy.ma.tests.test_core.t_ma->masked_array(data=[([1, 2, 3],)], mask=[([False, True, False],)], fill_value=([999999, 999999, 999999],), dtype=[('a', '<i4', (3,))])
A:numpy.ma.tests.test_core.t_2d->masked_array(data=[([[1, 2], [3, 4]], 1)], mask=[([[False, True], [True, False]], False)], dtype=[('a', '<i4', (2, 2)), ('b', float)])
A:numpy.ma.tests.test_core.t_0d->masked_array(data=[(1, 2)], mask=[(True, False)], dtype=[('a', '<i4'), ('b', '<i4')])
A:numpy.ma.tests.test_core.t_ne->masked_array(data=[(1, (1, 1))], mask=[(True, (True, False))], dtype=[('a', '<i4'), ('b', 'i4,i4')])
A:numpy.ma.tests.test_core.mx1->masked_array([1.0], mask=[True])
A:numpy.ma.tests.test_core.mx2->masked_array([1.0, 2.0])
A:numpy.ma.tests.test_core.self.err_status->numpy.geterr()
A:numpy.ma.tests.test_core.a2d->array([[1, 2], [0, 4]])
A:numpy.ma.tests.test_core.a2dm->masked_array(a2d, [[0, 0], [1, 0]])
A:numpy.ma.tests.test_core.na->numpy.array([1])
A:numpy.ma.tests.test_core.ma->numpy.ma.MaskedArray([(1.0, 1), (2.0, 2)], dtype=ndtype)
A:numpy.ma.tests.test_core.ott->array([0.0, 1.0, 2.0, 3.0])
A:numpy.ma.tests.test_core.xr->numpy.ravel(x)
A:numpy.ma.tests.test_core.xmr->ravel(xm)
A:numpy.ma.tests.test_core.aminimum->numpy.ma.core.minimum.outer(a, a)
A:numpy.ma.tests.test_core.amaximum->numpy.ma.core.maximum.outer(a, a)
A:numpy.ma.tests.test_core.mask->numpy.array(data, dtype=mdtype)
A:numpy.ma.tests.test_core.npfunc->getattr(np, funcname)
A:numpy.ma.tests.test_core.mafunc->getattr(numpy.ma.core, funcname)
A:numpy.ma.tests.test_core.nout->numpy.array(-1, dtype=float)
A:numpy.ma.tests.test_core.result->numpy.ma.append(a[np.newaxis, :], b, axis=0)
A:numpy.ma.tests.test_core.t->array(list(zip([1, 2, 3], [4, 5, 6])), dtype=ndtype)
A:numpy.ma.tests.test_core.xmmeth->getattr(xm, funcname)
A:numpy.ma.tests.test_core.output->array(-9999.0, mask=[False])
A:numpy.ma.tests.test_core.ma1->array([1, 1], mask=[0, 1]).view(MaskedArray)
A:numpy.ma.tests.test_core.r1->empty_like(r)
A:numpy.ma.tests.test_core.ma2->numpy.array([1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1]).view(MaskedArray)
A:numpy.ma.tests.test_core.r2->numpy.array([1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1]).view(MaskedArray).view('2i4')
A:numpy.ma.tests.test_core.eq_expected->(r1 == r2).all()
A:numpy.ma.tests.test_core.ne_expected->(r1 != r2).any()
A:numpy.ma.tests.test_core.m1->array([1, 1], mask=[0, 1])
A:numpy.ma.tests.test_core.d->numpy.arange(24.0).reshape((2, 3, 4))
A:numpy.ma.tests.test_core.xh->array(d + 1, mask=m, hard_mask=True, copy=True)
A:numpy.ma.tests.test_core.xs->array(d, mask=m, hard_mask=False, copy=True)
A:numpy.ma.tests.test_core.xh[:]->arange(5)
A:numpy.ma.tests.test_core.m.dtype->numpy.dtype('f4,i4')
A:numpy.ma.tests.test_core.fval->_check_fill_value(-999999999, ndtype)
A:numpy.ma.tests.test_core.fill_val->numpy.ndarray(shape=(1,), dtype=object)
A:numpy.ma.tests.test_core.f1->default_fill_value(fields)
A:numpy.ma.tests.test_core.f2->default_fill_value(fields.dtype)
A:numpy.ma.tests.test_core.f3->default_fill_value(np.array(1.0).dtype)
A:numpy.ma.tests.test_core.fields->array([(1, 1, 1)], dtype=[('i', int), ('s', '|S8'), ('f', float)])
A:numpy.ma.tests.test_core.expected->array([11, 22, 33], mask=[1, 0, 0])
A:numpy.ma.tests.test_core.ndtype->numpy.dtype([('a', float), ('b', int)])
A:numpy.ma.tests.test_core.M->masked_array(control)
A:numpy.ma.tests.test_core.uf->getattr(fromnumeric, f)
A:numpy.ma.tests.test_core.mf->getattr(numpy.ma.core, f)
A:numpy.ma.tests.test_core.ur->uf(*args)
A:numpy.ma.tests.test_core.mr->mf(*args)
A:numpy.ma.tests.test_core.amask->numpy.array([(0, (1, 0)), (0, (1, 0))], dtype=dtype)
A:numpy.ma.tests.test_core.me->MyClass()
A:numpy.ma.tests.test_core.me_too->MyClass2()
A:numpy.ma.tests.test_core.xx_r->array([1, 2 ** 2, 3], mask=[0, 0, 1], dtype=t)
A:numpy.ma.tests.test_core.X->numpy.empty(4, dt).reshape(6, 6)
A:numpy.ma.tests.test_core.XX->numpy.empty(4, dt).reshape(3, 2, 2, 3)
A:numpy.ma.tests.test_core.mX->array(data=X, mask=m.reshape(X.shape))
A:numpy.ma.tests.test_core.mXX->array(data=XX, mask=m.reshape(XX.shape))
A:numpy.ma.tests.test_core.m2x->array(data=x, mask=m2)
A:numpy.ma.tests.test_core.m2X->array(data=X, mask=m2.reshape(X.shape))
A:numpy.ma.tests.test_core.m2XX->array(data=XX, mask=m2.reshape(XX.shape))
A:numpy.ma.tests.test_core.store->empty(4, dtype=int).view(ndarray)
A:numpy.ma.tests.test_core.full->array([1, 2, 3], mask=True)
A:numpy.ma.tests.test_core.clipped->numpy.ma.array(x, mask=x).clip(2, 8)
A:numpy.ma.tests.test_core.mxx->numpy.ma.array(x, mask=x).copy()
A:numpy.ma.tests.test_core.values->array([10, 20, 30, 40, 50, 60], mask=[1, 1, 1, 0, 0, 0])
A:numpy.ma.tests.test_core.aravel->array([1, 2, 3], mask=[1, 0, 0]).ravel()
A:numpy.ma.tests.test_core.ar->array([1, 2, 3], mask=[1, 0, 0]).ravel()
A:numpy.ma.tests.test_core.sortedx->sort(x, **kwargs)
A:numpy.ma.tests.test_core.computed->argsort(x, kind='stable')
A:numpy.ma.tests.test_core.am->numpy.ma.masked_where(a['A'] < 5, a)
A:numpy.ma.tests.test_core.an->array([1, 2, 3], mask=[1, 0, 0]).filled(99)
A:numpy.ma.tests.test_core.mask_last->array(data=[(1, 1), (1, 2), (2, 1), (2, 2), (3, 3), (3, 2), (1, 0)], mask=[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 1), (1, 0)], dtype=[('A', int), ('B', int)])
A:numpy.ma.tests.test_core.mask_first->array(data=[(1, 0), (1, 1), (1, 2), (2, 1), (2, 2), (3, 2), (3, 3)], mask=[(1, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 1), (0, 0)], dtype=[('A', int), ('B', int)])
A:numpy.ma.tests.test_core.arr->numpy.ma.array([None, None])
A:numpy.ma.tests.test_core.arr_sq->numpy.ma.array([None, None]).squeeze()
A:numpy.ma.tests.test_core.m_arr->numpy.ma.masked_array(arr, False)
A:numpy.ma.tests.test_core.m_arr_sq->numpy.ma.masked_array(arr, False).squeeze()
A:numpy.ma.tests.test_core.mXswapped->array(data=X, mask=m.reshape(X.shape)).swapaxes(0, 1)
A:numpy.ma.tests.test_core.mXXswapped->array(data=XX, mask=m.reshape(XX.shape)).swapaxes(0, 2)
A:numpy.ma.tests.test_core.mindices->array(indices, mask=indices >= len(a))
A:numpy.ma.tests.test_core.ctrl->array([[2 ** 2, 4 ** 4, 3 ** 3], [2 ** 2, 4 ** 4, 3 ** 3]], mask=[[0, 1, 0], [0, 1, 0]])
A:numpy.ma.tests.test_core.xlist->numpy.empty(4, dt).tolist()
A:numpy.ma.tests.test_core.record->numpy.array(iterator).toflex()
A:numpy.ma.tests.test_core.marray->masked_array([[1, 2, 3, 4, 5]], mask=[0, 0, 1, 0, 0])
A:numpy.ma.tests.test_core.xd->numpy.empty(4, dt).diagonal()
A:numpy.ma.tests.test_core.mXcp->array(data=X, mask=m.reshape(X.shape)).cumprod(1)
A:numpy.ma.tests.test_core.rows->numpy.zeros(n, float)
A:numpy.ma.tests.test_core.cols->numpy.zeros(m, float)
A:numpy.ma.tests.test_core.cols[k]->mX[:, k].compressed().ptp()
A:numpy.ma.tests.test_core.rows[k]->mX[k].compressed().ptp()
A:numpy.ma.tests.test_core.mXdiag->array(data=X, mask=m.reshape(X.shape)).diagonal()
A:numpy.ma.tests.test_core.fx->numpy.ma.array(x, mask=x).filled(0)
A:numpy.ma.tests.test_core.r->numpy.ma.array(1, mask=a.mask).copy()
A:numpy.ma.tests.test_core.fX->array(data=X, mask=m.reshape(X.shape)).filled(0)
A:numpy.ma.tests.test_core.mYY->array(data=XX, mask=m.reshape(XX.shape)).swapaxes(-1, -2)
A:numpy.ma.tests.test_core.foo->array(np.arange(16).reshape((4, 4)), dtype='f8')
A:numpy.ma.tests.test_core.bar->empty(4, dtype='f4')
A:numpy.ma.tests.test_core.mout->array(-1, dtype=float)
A:numpy.ma.tests.test_core.method->getattr(x, methodname)
A:numpy.ma.tests.test_core.out->array([0, 0, 0], mask=[0, 0, 1])
A:numpy.ma.tests.test_core.ctest->masked_where(btest, atest)
A:numpy.ma.tests.test_core.a2->numpy.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])
A:numpy.ma.tests.test_core.a2m->array(a2, mask=[[1, 0, 0], [0, 0, 1]])
A:numpy.ma.tests.test_core.b1->numpy.array([2, 4, 3])
A:numpy.ma.tests.test_core.b2->numpy.array([b1, b1])
A:numpy.ma.tests.test_core.b2m->array(b2, mask=[[0, 1, 0], [0, 1, 0]])
A:numpy.ma.tests.test_core.tmp->masked_array(x, mask=m1)._mask.copy()
A:numpy.ma.tests.test_core.ixm->masked_array(x, mask=m1).astype(int)
A:numpy.ma.tests.test_core.cm->numpy.reshape(a, (2, 5)).filled(1)
A:numpy.ma.tests.test_core.core->numpy.where([0, 1, 1], x, y)
A:numpy.ma.tests.test_core.chosen->choose(indices_, choices, mode='wrap', out=store)
A:numpy.ma.tests.test_core.indices_->array([2, 3, 1, 0], mask=[1, 0, 0, 1])
A:numpy.ma.tests.test_core.choices->array(choices, mask=[[0, 0, 0, 1], [1, 1, 0, 1], [1, 0, 0, 0], [0, 0, 0, 0]])
A:numpy.ma.tests.test_core.base_type->numpy.dtype([('a', int, 3)])
A:numpy.ma.tests.test_core.base_mtype->make_mask_descr(base_type)
A:numpy.ma.tests.test_core.sub_type->numpy.dtype([('a', int), ('b', base_mtype)])
A:numpy.ma.tests.test_core.test2->make_mask(mask, dtype=mask.dtype)
A:numpy.ma.tests.test_core.other->numpy.array([(0, 1), (0, 1), (0, 1), (0, 1)], dtype=othertype)
A:numpy.ma.tests.test_core.bmask->numpy.array([(1, (0, 1)), (0, (0, 0))], dtype=dtype)
A:numpy.ma.tests.test_core.cntrl->numpy.array([(1, (1, 1)), (0, (1, 0))], dtype=dtype)
A:numpy.ma.tests.test_core.cond->numpy.array([True, False, True, True])
A:numpy.ma.tests.test_core.marr->numpy.ma.array(arr)
A:numpy.ma.tests.test_core.base->array(list(zip(ilist, flist, slist)), mask=mask, dtype=ddtype)
A:numpy.ma.tests.test_core.self.data->dict(base=base, mask=mask, ddtype=ddtype, mdtype=mdtype)
A:numpy.ma.tests.test_core.iterator->list(zip(np.arange(10), np.random.rand(10)))
A:numpy.ma.tests.test_core.controlmask->numpy.array([1] + 19 * [0], dtype=bool)
A:numpy.ma.tests.test_core.a.mask->numpy.array(list(zip([0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0])), dtype=[('a', bool), ('b', bool)])
A:numpy.ma.tests.test_core.mdtype->numpy.dtype([('a', bool), ('b', bool)])
A:numpy.ma.tests.test_core.mask_0d->numpy.ma.masked_array(1, mask=True)
A:numpy.ma.tests.test_core.a0->numpy.eye(2).astype(dt)
A:numpy.ma.tests.test_core.a1->numpy.eye(3).astype(dt)
A:numpy.ma.tests.test_core.numpy_f->numpy.__getattribute__(f)
A:numpy.ma.tests.test_core.ma_f->numpy.ma.__getattribute__(f)
A:numpy.ma.tests.test_core.vector->numpy.array([1, 2, 3])
A:numpy.ma.tests.test_core.masked2->numpy.ma.MaskedArray.__new__(np.ma.core.MaskedConstant)
A:numpy.ma.tests.test_core.view->numpy.ma.masked.view(np.ma.MaskedArray)
A:numpy.ma.tests.test_core.a_i->numpy.zeros((), int)
A:numpy.ma.tests.test_core.a_f->numpy.zeros((), float)
A:numpy.ma.tests.test_core.a_u->numpy.zeros((), 'U10')
A:numpy.ma.tests.test_core.a_b->numpy.zeros((), 'S10')
A:numpy.ma.tests.test_core._->numpy.ma.masked_where(a == 3, a, copy=False)
A:numpy.ma.tests.test_core.out_pos->array([0, 0, 0], mask=[0, 0, 1]).copy()
A:numpy.ma.tests.test_core.res_pos->numpy.add(a, b, out_pos)
A:numpy.ma.tests.test_core.out_kw->array([0, 0, 0], mask=[0, 0, 1]).copy()
A:numpy.ma.tests.test_core.res_kw->numpy.add(a, b, out=out_kw)
A:numpy.ma.tests.test_core.out_tup->array([0, 0, 0], mask=[0, 0, 1]).copy()
A:numpy.ma.tests.test_core.res_tup->numpy.add(a, b, out=(out_tup,))
A:numpy.ma.tests.test_core.x_a->numpy.empty(4, dt).astype(descr)
A:numpy.ma.tests.test_core.x_f->numpy.empty(4, dt).astype(x.dtype, order='F')
A:numpy.ma.tests.test_core.x_a2->numpy.array(x, dtype=descr, subok=True)
A:numpy.ma.tests.test_core.x_f2->numpy.array(x, dtype=x.dtype, order='F', subok=True)
A:numpy.ma.tests.test_core.src->numpy.ma.array(ones(3, dt1), fill_value=1)
A:numpy.ma.tests.test_core.dst->numpy.ma.array(ones(3, dt1), fill_value=1).astype(dt2)
numpy.ma.tests.test_TestFillingValues
numpy.ma.tests.test_TestFillingValues.test_check_on_fields(self)
numpy.ma.tests.test_TestFillingValues.test_check_on_scalar(self)
numpy.ma.tests.test_TestFillingValues.test_default_fill_value(self)
numpy.ma.tests.test_TestFillingValues.test_default_fill_value_structured(self)
numpy.ma.tests.test_TestFillingValues.test_default_fill_value_void(self)
numpy.ma.tests.test_TestFillingValues.test_extremum_fill_value(self)
numpy.ma.tests.test_TestFillingValues.test_extremum_fill_value_subdtype(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_as_arguments(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_bytes_or_str(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_conversion(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_datetime_timedelta(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_exotic_dtype(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_implicit_structured_array(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_in_view(self)
numpy.ma.tests.test_TestFillingValues.test_fillvalue_individual_fields(self)
numpy.ma.tests.test_TestFillingValues.test_shape_argument(self)
numpy.ma.tests.test_TestFillingValues.test_subarray_fillvalue(self)
numpy.ma.tests.test_TestMaskedArray
numpy.ma.tests.test_TestMaskedArray.setup(self)
numpy.ma.tests.test_TestMaskedArray.test_0d_unicode(self)
numpy.ma.tests.test_TestMaskedArray.test_asarray(self)
numpy.ma.tests.test_TestMaskedArray.test_asarray_default_order(self)
numpy.ma.tests.test_TestMaskedArray.test_asarray_enforce_order(self)
numpy.ma.tests.test_TestMaskedArray.test_basic0d(self)
numpy.ma.tests.test_TestMaskedArray.test_basic1d(self)
numpy.ma.tests.test_TestMaskedArray.test_basic2d(self)
numpy.ma.tests.test_TestMaskedArray.test_basicattributes(self)
numpy.ma.tests.test_TestMaskedArray.test_concatenate_alongaxis(self)
numpy.ma.tests.test_TestMaskedArray.test_concatenate_basic(self)
numpy.ma.tests.test_TestMaskedArray.test_concatenate_flexible(self)
numpy.ma.tests.test_TestMaskedArray.test_copy(self)
numpy.ma.tests.test_TestMaskedArray.test_copy_0d(self)
numpy.ma.tests.test_TestMaskedArray.test_copy_immutable(self)
numpy.ma.tests.test_TestMaskedArray.test_copy_on_python_builtins(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_from_ndarray_with_padding(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_maskcreation(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_ndmin(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_ndmin_from_maskedarray(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_with_list_of_maskedarrays(self)
numpy.ma.tests.test_TestMaskedArray.test_creation_with_list_of_maskedarrays_no_bool_cast(self)
numpy.ma.tests.test_TestMaskedArray.test_deepcopy(self)
numpy.ma.tests.test_TestMaskedArray.test_fancy_printoptions(self)
numpy.ma.tests.test_TestMaskedArray.test_filled_with_f_order(self)
numpy.ma.tests.test_TestMaskedArray.test_filled_with_flexible_dtype(self)
numpy.ma.tests.test_TestMaskedArray.test_filled_with_mvoid(self)
numpy.ma.tests.test_TestMaskedArray.test_filled_with_nested_dtype(self)
numpy.ma.tests.test_TestMaskedArray.test_filled_with_object_dtype(self)
numpy.ma.tests.test_TestMaskedArray.test_fix_invalid(self)
numpy.ma.tests.test_TestMaskedArray.test_flatten_structured_array(self)
numpy.ma.tests.test_TestMaskedArray.test_format(self)
numpy.ma.tests.test_TestMaskedArray.test_indexing(self)
numpy.ma.tests.test_TestMaskedArray.test_masked_singleton_array_creation_warns(self)
numpy.ma.tests.test_TestMaskedArray.test_maskedelement(self)
numpy.ma.tests.test_TestMaskedArray.test_mvoid_getitem(self)
numpy.ma.tests.test_TestMaskedArray.test_mvoid_iter(self)
numpy.ma.tests.test_TestMaskedArray.test_mvoid_multidim_print(self)
numpy.ma.tests.test_TestMaskedArray.test_mvoid_print(self)
numpy.ma.tests.test_TestMaskedArray.test_object_with_array(self)
numpy.ma.tests.test_TestMaskedArray.test_oddfeatures_1(self)
numpy.ma.tests.test_TestMaskedArray.test_oddfeatures_2(self)
numpy.ma.tests.test_TestMaskedArray.test_oddfeatures_3(self)
numpy.ma.tests.test_TestMaskedArray.test_optinfo_forward_propagation(self)
numpy.ma.tests.test_TestMaskedArray.test_optinfo_propagation(self)
numpy.ma.tests.test_TestMaskedArray.test_pickling(self)
numpy.ma.tests.test_TestMaskedArray.test_pickling_keepalignment(self)
numpy.ma.tests.test_TestMaskedArray.test_pickling_maskedconstant(self)
numpy.ma.tests.test_TestMaskedArray.test_pickling_subbaseclass(self)
numpy.ma.tests.test_TestMaskedArray.test_pickling_wstructured(self)
numpy.ma.tests.test_TestMaskedArray.test_set_element_as_object(self)
numpy.ma.tests.test_TestMaskedArray.test_single_element_subscript(self)
numpy.ma.tests.test_TestMaskedArray.test_str_repr(self)
numpy.ma.tests.test_TestMaskedArray.test_str_repr_legacy(self)
numpy.ma.tests.test_TestMaskedArray.test_topython(self)
numpy.ma.tests.test_TestMaskedArray.test_unknown_keyword_parameter(self)
numpy.ma.tests.test_TestMaskedArray.test_void0d(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic
numpy.ma.tests.test_TestMaskedArrayArithmetic.setup(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.teardown(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_TakeTransposeInnerOuter(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_addsumprod(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton_on_1d_singleton(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_basic_arithmetic(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_basic_ufuncs(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_binops_d2D(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_count_func(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_count_on_python_builtins(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_divide_on_different_shapes(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_domained_binops_d2D(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_different_dimensions(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_for_numeric(self,dt1,dt2,fill)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_for_strings(self,dt,fill)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_ne_structured_extra(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_on_structured(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_with_None(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_eq_with_scalar(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_imag_real(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_limits_arithmetic(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_masked_singleton_arithmetic(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_masked_singleton_equality(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_methods_with_output(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minimummaximum_func(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minmax_dtypes(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minmax_func(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minmax_funcs_with_output(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minmax_methods(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_minmax_reduce(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_mixed_arithmetic(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_mod(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_ne_for_numeric(self,dt1,dt2,fill)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_ne_for_strings(self,dt,fill)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_ne_on_structured(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_noshink_on_creation(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_noshrinking(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_numpyarithmetics(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_scalar_arithmetic(self)
numpy.ma.tests.test_TestMaskedArrayArithmetic.test_ufunc_nomask(self)
numpy.ma.tests.test_TestMaskedArrayAttributes
numpy.ma.tests.test_TestMaskedArrayAttributes.test_assign_dtype(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_flat(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_hardmask(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_hardmask_again(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_hardmask_oncemore_yay(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_keepmask(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_shrink_mask(self)
numpy.ma.tests.test_TestMaskedArrayAttributes.test_smallmask(self)
numpy.ma.tests.test_TestMaskedArrayFunctions
numpy.ma.tests.test_TestMaskedArrayFunctions.setup(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_choose(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_choose_with_out(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_compress(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_compressed(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_convolve(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_flatten_mask(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_identity(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_make_mask(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_make_mask_descr(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_mask_or(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_equal_fill_value(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_equal_wlist(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_otherfunctions(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_bool(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_condition(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_mismatch(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_oddities(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_shape_constraint(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_masked_where_structured(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_on_ndarray(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_power(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_power_with_broadcasting(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_reshape(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_round(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_round_with_output(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_round_with_scalar(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_broadcast(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_object(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_structured(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_structured_masked(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_type(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_with_masked_choice(self)
numpy.ma.tests.test_TestMaskedArrayFunctions.test_where_with_masked_condition(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.setup(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_add(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_add_arrays(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_div(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_mul(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_mul_arrays(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_pow(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_sub(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_datafriendly_sub_arrays(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_addition_array(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_addition_array_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_addition_scalar(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_addition_scalar_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_division_array_float(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_division_array_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_division_misc(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_division_scalar_float(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_division_scalar_int(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_division_scalar_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_floor_division_array_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_floor_division_scalar_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_array(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_array_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_scalar(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_scalar_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_pow_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_array(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_array_type(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_scalar(self)
numpy.ma.tests.test_TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_scalar_type(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods
numpy.ma.tests.test_TestMaskedArrayMathMethods.setup(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_add_object(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_axis_methods_nomask(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_cumsumprod(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_cumsumprod_with_output(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_diag(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_dot(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_dot_shape_mismatch(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_meananom_object(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_prod_object(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_ptp(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_sum_object(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_trace(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_varmean_nomask(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_varstd(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_varstd_ddof(self)
numpy.ma.tests.test_TestMaskedArrayMathMethods.test_varstd_specialcases(self)
numpy.ma.tests.test_TestMaskedArrayMathMethodsComplex
numpy.ma.tests.test_TestMaskedArrayMathMethodsComplex.setup(self)
numpy.ma.tests.test_TestMaskedArrayMathMethodsComplex.test_varstd(self)
numpy.ma.tests.test_TestMaskedArrayMethods
numpy.ma.tests.test_TestMaskedArrayMethods.setup(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_allany(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_allany_oddities(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_allclose(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_allclose_timedelta(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_argmax_argmin(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_argsort(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_argsort_matches_sort(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_arraymethod(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_arraymethod_0d(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_clip(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_clip_out(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_compress(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_compressed(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_diagonal_view(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_empty(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_fromflex(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_generic_methods(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_put(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_put_hardmask(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_put_nomask(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_putmask(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_ravel(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_reshape(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_sort(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_sort_2d(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_sort_flexible(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_squeeze(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_stable_sort(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_swapaxes(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_take(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_take_masked_indices(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_toflex(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_tolist(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_tolist_specialcase(self)
numpy.ma.tests.test_TestMaskedArrayMethods.test_transpose_view(self)
numpy.ma.tests.test_TestMaskedConstant
numpy.ma.tests.test_TestMaskedConstant._do_add_test(self,add)
numpy.ma.tests.test_TestMaskedConstant.test__copy(self)
numpy.ma.tests.test_TestMaskedConstant.test_attributes_readonly(self)
numpy.ma.tests.test_TestMaskedConstant.test_coercion_bytes(self)
numpy.ma.tests.test_TestMaskedConstant.test_coercion_float(self)
numpy.ma.tests.test_TestMaskedConstant.test_coercion_int(self)
numpy.ma.tests.test_TestMaskedConstant.test_coercion_unicode(self)
numpy.ma.tests.test_TestMaskedConstant.test_copy(self)
numpy.ma.tests.test_TestMaskedConstant.test_ctor(self)
numpy.ma.tests.test_TestMaskedConstant.test_deepcopy(self)
numpy.ma.tests.test_TestMaskedConstant.test_immutable(self)
numpy.ma.tests.test_TestMaskedConstant.test_operator(self)
numpy.ma.tests.test_TestMaskedConstant.test_pickle(self)
numpy.ma.tests.test_TestMaskedConstant.test_repr(self)
numpy.ma.tests.test_TestMaskedConstant.test_subclass(self)
numpy.ma.tests.test_TestMaskedConstant.test_ufunc(self)
numpy.ma.tests.test_TestMaskedFields
numpy.ma.tests.test_TestMaskedFields.setup(self)
numpy.ma.tests.test_TestMaskedFields.test_element_len(self)
numpy.ma.tests.test_TestMaskedFields.test_getitem(self)
numpy.ma.tests.test_TestMaskedFields.test_getmaskarray(self)
numpy.ma.tests.test_TestMaskedFields.test_mask_element(self)
numpy.ma.tests.test_TestMaskedFields.test_set_record_element(self)
numpy.ma.tests.test_TestMaskedFields.test_set_record_slice(self)
numpy.ma.tests.test_TestMaskedFields.test_set_records_masks(self)
numpy.ma.tests.test_TestMaskedFields.test_setitem(self)
numpy.ma.tests.test_TestMaskedFields.test_setitem_scalar(self)
numpy.ma.tests.test_TestMaskedFields.test_view(self)
numpy.ma.tests.test_TestMaskedObjectArray
numpy.ma.tests.test_TestMaskedObjectArray.test_getitem(self)
numpy.ma.tests.test_TestMaskedObjectArray.test_nested_ma(self)
numpy.ma.tests.test_TestMaskedView
numpy.ma.tests.test_TestMaskedView.setup(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_dtype_and_type(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_flexible_dtype(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_nothing(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_simple_dtype(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_subdtype(self)
numpy.ma.tests.test_TestMaskedView.test_view_to_type(self)
numpy.ma.tests.test_TestMaskedWhereAliases
numpy.ma.tests.test_TestMaskedWhereAliases.test_masked_values(self)
numpy.ma.tests.test_TestOptionalArgs
numpy.ma.tests.test_TestOptionalArgs.test_count(self)
numpy.ma.tests.test_TestOptionalArgs.test_ndarrayfuncs(self)
numpy.ma.tests.test_TestUfuncs
numpy.ma.tests.test_TestUfuncs.setup(self)
numpy.ma.tests.test_TestUfuncs.teardown(self)
numpy.ma.tests.test_TestUfuncs.test_minmax(self)
numpy.ma.tests.test_TestUfuncs.test_ndarray_mask(self)
numpy.ma.tests.test_TestUfuncs.test_no_masked_nan_warnings(self)
numpy.ma.tests.test_TestUfuncs.test_reduce(self)
numpy.ma.tests.test_TestUfuncs.test_testUfuncRegression(self)
numpy.ma.tests.test_TestUfuncs.test_treatment_of_NotImplemented(self)
numpy.ma.tests.test_core.TestFillingValues
numpy.ma.tests.test_core.TestFillingValues.test_check_on_fields(self)
numpy.ma.tests.test_core.TestFillingValues.test_check_on_scalar(self)
numpy.ma.tests.test_core.TestFillingValues.test_default_fill_value(self)
numpy.ma.tests.test_core.TestFillingValues.test_default_fill_value_structured(self)
numpy.ma.tests.test_core.TestFillingValues.test_default_fill_value_void(self)
numpy.ma.tests.test_core.TestFillingValues.test_extremum_fill_value(self)
numpy.ma.tests.test_core.TestFillingValues.test_extremum_fill_value_subdtype(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_as_arguments(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_bytes_or_str(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_conversion(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_datetime_timedelta(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_exotic_dtype(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_implicit_structured_array(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_in_view(self)
numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_individual_fields(self)
numpy.ma.tests.test_core.TestFillingValues.test_shape_argument(self)
numpy.ma.tests.test_core.TestFillingValues.test_subarray_fillvalue(self)
numpy.ma.tests.test_core.TestMaskedArray
numpy.ma.tests.test_core.TestMaskedArray.setup(self)
numpy.ma.tests.test_core.TestMaskedArray.test_0d_unicode(self)
numpy.ma.tests.test_core.TestMaskedArray.test_asarray(self)
numpy.ma.tests.test_core.TestMaskedArray.test_asarray_default_order(self)
numpy.ma.tests.test_core.TestMaskedArray.test_asarray_enforce_order(self)
numpy.ma.tests.test_core.TestMaskedArray.test_basic0d(self)
numpy.ma.tests.test_core.TestMaskedArray.test_basic1d(self)
numpy.ma.tests.test_core.TestMaskedArray.test_basic2d(self)
numpy.ma.tests.test_core.TestMaskedArray.test_basicattributes(self)
numpy.ma.tests.test_core.TestMaskedArray.test_concatenate_alongaxis(self)
numpy.ma.tests.test_core.TestMaskedArray.test_concatenate_basic(self)
numpy.ma.tests.test_core.TestMaskedArray.test_concatenate_flexible(self)
numpy.ma.tests.test_core.TestMaskedArray.test_copy(self)
numpy.ma.tests.test_core.TestMaskedArray.test_copy_0d(self)
numpy.ma.tests.test_core.TestMaskedArray.test_copy_immutable(self)
numpy.ma.tests.test_core.TestMaskedArray.test_copy_on_python_builtins(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_from_ndarray_with_padding(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_maskcreation(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_ndmin(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_ndmin_from_maskedarray(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_with_list_of_maskedarrays(self)
numpy.ma.tests.test_core.TestMaskedArray.test_creation_with_list_of_maskedarrays_no_bool_cast(self)
numpy.ma.tests.test_core.TestMaskedArray.test_deepcopy(self)
numpy.ma.tests.test_core.TestMaskedArray.test_fancy_printoptions(self)
numpy.ma.tests.test_core.TestMaskedArray.test_filled_with_f_order(self)
numpy.ma.tests.test_core.TestMaskedArray.test_filled_with_flexible_dtype(self)
numpy.ma.tests.test_core.TestMaskedArray.test_filled_with_mvoid(self)
numpy.ma.tests.test_core.TestMaskedArray.test_filled_with_nested_dtype(self)
numpy.ma.tests.test_core.TestMaskedArray.test_filled_with_object_dtype(self)
numpy.ma.tests.test_core.TestMaskedArray.test_fix_invalid(self)
numpy.ma.tests.test_core.TestMaskedArray.test_flatten_structured_array(self)
numpy.ma.tests.test_core.TestMaskedArray.test_format(self)
numpy.ma.tests.test_core.TestMaskedArray.test_indexing(self)
numpy.ma.tests.test_core.TestMaskedArray.test_masked_singleton_array_creation_warns(self)
numpy.ma.tests.test_core.TestMaskedArray.test_maskedelement(self)
numpy.ma.tests.test_core.TestMaskedArray.test_mvoid_getitem(self)
numpy.ma.tests.test_core.TestMaskedArray.test_mvoid_iter(self)
numpy.ma.tests.test_core.TestMaskedArray.test_mvoid_multidim_print(self)
numpy.ma.tests.test_core.TestMaskedArray.test_mvoid_print(self)
numpy.ma.tests.test_core.TestMaskedArray.test_object_with_array(self)
numpy.ma.tests.test_core.TestMaskedArray.test_oddfeatures_1(self)
numpy.ma.tests.test_core.TestMaskedArray.test_oddfeatures_2(self)
numpy.ma.tests.test_core.TestMaskedArray.test_oddfeatures_3(self)
numpy.ma.tests.test_core.TestMaskedArray.test_optinfo_forward_propagation(self)
numpy.ma.tests.test_core.TestMaskedArray.test_optinfo_propagation(self)
numpy.ma.tests.test_core.TestMaskedArray.test_pickling(self)
numpy.ma.tests.test_core.TestMaskedArray.test_pickling_keepalignment(self)
numpy.ma.tests.test_core.TestMaskedArray.test_pickling_maskedconstant(self)
numpy.ma.tests.test_core.TestMaskedArray.test_pickling_subbaseclass(self)
numpy.ma.tests.test_core.TestMaskedArray.test_pickling_wstructured(self)
numpy.ma.tests.test_core.TestMaskedArray.test_set_element_as_object(self)
numpy.ma.tests.test_core.TestMaskedArray.test_single_element_subscript(self)
numpy.ma.tests.test_core.TestMaskedArray.test_str_repr(self)
numpy.ma.tests.test_core.TestMaskedArray.test_str_repr_legacy(self)
numpy.ma.tests.test_core.TestMaskedArray.test_topython(self)
numpy.ma.tests.test_core.TestMaskedArray.test_unknown_keyword_parameter(self)
numpy.ma.tests.test_core.TestMaskedArray.test_void0d(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.setup(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.teardown(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_TakeTransposeInnerOuter(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_addsumprod(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton_on_1d_singleton(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_basic_arithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_basic_ufuncs(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_binops_d2D(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_count_func(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_count_on_python_builtins(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_divide_on_different_shapes(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_domained_binops_d2D(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_different_dimensions(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_for_numeric(self,dt1,dt2,fill)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_for_strings(self,dt,fill)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_ne_structured_extra(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_on_structured(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_with_None(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_with_scalar(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_imag_real(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_limits_arithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_masked_singleton_arithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_masked_singleton_equality(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_methods_with_output(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minimummaximum_func(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_dtypes(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_func(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_funcs_with_output(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_methods(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_reduce(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_mixed_arithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_mod(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_ne_for_numeric(self,dt1,dt2,fill)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_ne_for_strings(self,dt,fill)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_ne_on_structured(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_noshink_on_creation(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_noshrinking(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_numpyarithmetics(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_scalar_arithmetic(self)
numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_ufunc_nomask(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_assign_dtype(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_flat(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_hardmask(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_hardmask_again(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_hardmask_oncemore_yay(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_keepmask(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_shrink_mask(self)
numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_smallmask(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions
numpy.ma.tests.test_core.TestMaskedArrayFunctions.setup(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_choose(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_choose_with_out(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compress(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_convolve(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_flatten_mask(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_identity(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_make_mask(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_make_mask_descr(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_mask_or(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_equal_fill_value(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_equal_wlist(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_otherfunctions(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_bool(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_condition(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_mismatch(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_oddities(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_shape_constraint(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_structured(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_on_ndarray(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_power(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_power_with_broadcasting(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_reshape(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_round(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_round_with_output(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_round_with_scalar(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_broadcast(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_object(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_structured(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_structured_masked(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_type(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_with_masked_choice(self)
numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_with_masked_condition(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.setup(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_add(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_add_arrays(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_div(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_mul(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_mul_arrays(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_pow(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_sub(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_sub_arrays(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_addition_array(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_addition_array_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_addition_scalar(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_addition_scalar_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_array_float(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_array_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_misc(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_scalar_float(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_scalar_int(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_scalar_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_floor_division_array_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_floor_division_scalar_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_array(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_array_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_scalar(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_scalar_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_pow_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_array(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_array_type(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_scalar(self)
numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_scalar_type(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.setup(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_add_object(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_axis_methods_nomask(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_cumsumprod(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_cumsumprod_with_output(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_diag(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_dot(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_dot_shape_mismatch(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_meananom_object(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_prod_object(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_ptp(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_sum_object(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_trace(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_varmean_nomask(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_varstd(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_varstd_ddof(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_varstd_specialcases(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethodsComplex
numpy.ma.tests.test_core.TestMaskedArrayMathMethodsComplex.setup(self)
numpy.ma.tests.test_core.TestMaskedArrayMathMethodsComplex.test_varstd(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods
numpy.ma.tests.test_core.TestMaskedArrayMethods.setup(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_allany(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_allany_oddities(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_allclose(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_allclose_timedelta(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_argmax_argmin(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_argsort(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_argsort_matches_sort(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_arraymethod(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_arraymethod_0d(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_clip(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_clip_out(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_compress(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_compressed(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_diagonal_view(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_empty(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_fromflex(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_generic_methods(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_put(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_put_hardmask(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_put_nomask(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_putmask(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_ravel(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_reshape(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_sort(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_sort_2d(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_sort_flexible(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_squeeze(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_stable_sort(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_swapaxes(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_take(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_take_masked_indices(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_toflex(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_tolist(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_tolist_specialcase(self)
numpy.ma.tests.test_core.TestMaskedArrayMethods.test_transpose_view(self)
numpy.ma.tests.test_core.TestMaskedConstant
numpy.ma.tests.test_core.TestMaskedConstant._do_add_test(self,add)
numpy.ma.tests.test_core.TestMaskedConstant.test__copy(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_attributes_readonly(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_coercion_bytes(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_coercion_float(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_coercion_int(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_coercion_unicode(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_copy(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_ctor(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_deepcopy(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_immutable(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_operator(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_pickle(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_repr(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_subclass(self)
numpy.ma.tests.test_core.TestMaskedConstant.test_ufunc(self)
numpy.ma.tests.test_core.TestMaskedFields
numpy.ma.tests.test_core.TestMaskedFields.setup(self)
numpy.ma.tests.test_core.TestMaskedFields.test_element_len(self)
numpy.ma.tests.test_core.TestMaskedFields.test_getitem(self)
numpy.ma.tests.test_core.TestMaskedFields.test_getmaskarray(self)
numpy.ma.tests.test_core.TestMaskedFields.test_mask_element(self)
numpy.ma.tests.test_core.TestMaskedFields.test_set_record_element(self)
numpy.ma.tests.test_core.TestMaskedFields.test_set_record_slice(self)
numpy.ma.tests.test_core.TestMaskedFields.test_set_records_masks(self)
numpy.ma.tests.test_core.TestMaskedFields.test_setitem(self)
numpy.ma.tests.test_core.TestMaskedFields.test_setitem_scalar(self)
numpy.ma.tests.test_core.TestMaskedFields.test_view(self)
numpy.ma.tests.test_core.TestMaskedObjectArray
numpy.ma.tests.test_core.TestMaskedObjectArray.test_getitem(self)
numpy.ma.tests.test_core.TestMaskedObjectArray.test_nested_ma(self)
numpy.ma.tests.test_core.TestMaskedView
numpy.ma.tests.test_core.TestMaskedView.setup(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_dtype_and_type(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_flexible_dtype(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_nothing(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_simple_dtype(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_subdtype(self)
numpy.ma.tests.test_core.TestMaskedView.test_view_to_type(self)
numpy.ma.tests.test_core.TestMaskedWhereAliases
numpy.ma.tests.test_core.TestMaskedWhereAliases.test_masked_values(self)
numpy.ma.tests.test_core.TestOptionalArgs
numpy.ma.tests.test_core.TestOptionalArgs.test_count(self)
numpy.ma.tests.test_core.TestOptionalArgs.test_ndarrayfuncs(self)
numpy.ma.tests.test_core.TestUfuncs
numpy.ma.tests.test_core.TestUfuncs.setup(self)
numpy.ma.tests.test_core.TestUfuncs.teardown(self)
numpy.ma.tests.test_core.TestUfuncs.test_minmax(self)
numpy.ma.tests.test_core.TestUfuncs.test_ndarray_mask(self)
numpy.ma.tests.test_core.TestUfuncs.test_no_masked_nan_warnings(self)
numpy.ma.tests.test_core.TestUfuncs.test_reduce(self)
numpy.ma.tests.test_core.TestUfuncs.test_testUfuncRegression(self)
numpy.ma.tests.test_core.TestUfuncs.test_treatment_of_NotImplemented(self)
numpy.ma.tests.test_core.test_append_masked_array()
numpy.ma.tests.test_core.test_append_masked_array_along_axis()
numpy.ma.tests.test_core.test_astype_basic(dt1,dt2)
numpy.ma.tests.test_core.test_astype_mask_ordering()
numpy.ma.tests.test_core.test_default_fill_value_complex()
numpy.ma.tests.test_core.test_doc_note()
numpy.ma.tests.test_core.test_fieldless_void()
numpy.ma.tests.test_core.test_mask_shape_assignment_does_not_break_masked()
numpy.ma.tests.test_core.test_masked_array()
numpy.ma.tests.test_core.test_masked_array_no_copy()
numpy.ma.tests.test_core.test_ufunc_with_out_varied()
numpy.ma.tests.test_core.test_ufunc_with_output()
numpy.ma.tests.test_test_append_masked_array()
numpy.ma.tests.test_test_append_masked_array_along_axis()
numpy.ma.tests.test_test_astype_basic(dt1,dt2)
numpy.ma.tests.test_test_astype_mask_ordering()
numpy.ma.tests.test_test_default_fill_value_complex()
numpy.ma.tests.test_test_doc_note()
numpy.ma.tests.test_test_fieldless_void()
numpy.ma.tests.test_test_mask_shape_assignment_does_not_break_masked()
numpy.ma.tests.test_test_masked_array()
numpy.ma.tests.test_test_masked_array_no_copy()
numpy.ma.tests.test_test_ufunc_with_out_varied()
numpy.ma.tests.test_test_ufunc_with_output()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/ma/tests/test_old_ma.py----------------------------------------
A:numpy.ma.tests.test_old_ma.result->allclose(v, w)
A:numpy.ma.tests.test_old_ma.x->numpy.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928, 8.43, 7.78, 9.865, 5.878, 8.979, 4.732, 3.012, 6.022, 5.095, 3.116, 5.238, 3.957, 6.04, 9.63, 7.712, 3.382, 4.489, 6.479, 7.189, 9.645, 5.395, 4.961, 9.894, 2.893, 7.357, 9.828, 6.272, 3.758, 6.693, 0.993])
A:numpy.ma.tests.test_old_ma.y->array([arange(6), 2.0 * arange(6)])
A:numpy.ma.tests.test_old_ma.xm->array(0, mask=1)
A:numpy.ma.tests.test_old_ma.ym->ym.reshape(s).reshape(s)
A:numpy.ma.tests.test_old_ma.z->masked_array(y, m3)
A:numpy.ma.tests.test_old_ma.zm->where(cm, x, y)
A:numpy.ma.tests.test_old_ma.xf->xf.reshape(s).reshape(s)
A:numpy.ma.tests.test_old_ma.a2d->array([[1, 2], [0, 4]], float)
A:numpy.ma.tests.test_old_ma.a2dm->masked_array(a2d, [[0, 0], [1, 0]])
A:numpy.ma.tests.test_old_ma.na->numpy.array([1])
A:numpy.ma.tests.test_old_ma.ma->array([1])
A:numpy.ma.tests.test_old_ma.ott->ott.reshape(2, 2).reshape(2, 2)
A:numpy.ma.tests.test_old_ma.xr->numpy.ravel(x)
A:numpy.ma.tests.test_old_ma.xmr->ravel(xm)
A:numpy.ma.tests.test_old_ma.x1->numpy.arange(5)
A:numpy.ma.tests.test_old_ma.x2->numpy.array([1, 'hello', 2, 3], object)
A:numpy.ma.tests.test_old_ma.x3->array(x1, mask=[0, 1, 0, 1])
A:numpy.ma.tests.test_old_ma.x4->arange(4)
A:numpy.ma.tests.test_old_ma.x3[:]->masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.tests.test_old_ma.x4[:]->masked_array([1, 2, 3, 4], [0, 1, 1, 0])
A:numpy.ma.tests.test_old_ma.m->numpy.array([0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0])
A:numpy.ma.tests.test_old_ma.m2->numpy.array([0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0]).copy()
A:numpy.ma.tests.test_old_ma.m3->make_mask(m, copy=True)
A:numpy.ma.tests.test_old_ma.y1->array(x1, mask=m)
A:numpy.ma.tests.test_old_ma.y1a->array(y1, copy=0)
A:numpy.ma.tests.test_old_ma.y2->array(x1, mask=m3, copy=0)
A:numpy.ma.tests.test_old_ma.y2a->array(x1, mask=m, copy=1)
A:numpy.ma.tests.test_old_ma.y3->array(x1 * 1.0, mask=m)
A:numpy.ma.tests.test_old_ma.y4->resize(x4, (8,))
A:numpy.ma.tests.test_old_ma.y5->repeat(x4, (2, 2, 2, 2), axis=0)
A:numpy.ma.tests.test_old_ma.y6->repeat(x4, 2, axis=0)
A:numpy.ma.tests.test_old_ma.d->arange(5)
A:numpy.ma.tests.test_old_ma.c->array([1, 1, 1, 0, 0, 0], mask=[1, 0, 0, 0, 0, 0])
A:numpy.ma.tests.test_old_ma.atest->ones((10, 10, 10), dtype=np.float32)
A:numpy.ma.tests.test_old_ma.btest->zeros(atest.shape, MaskType)
A:numpy.ma.tests.test_old_ma.ctest->masked_where(btest, atest)
A:numpy.ma.tests.test_old_ma.cm->array([1, 1, 1, 0, 0, 0], mask=[1, 0, 0, 0, 0, 0]).filled(1)
A:numpy.ma.tests.test_old_ma.t->take(y, [0, 3, 4])
A:numpy.ma.tests.test_old_ma.s->numpy.compat.pickle.dumps(x, protocol=proto)
A:numpy.ma.tests.test_old_ma.xx->arange(6)
A:numpy.ma.tests.test_old_ma.(result, wts)->average(ott, axis=0, returned=True)
A:numpy.ma.tests.test_old_ma.m1->zeros(6)
A:numpy.ma.tests.test_old_ma.m4->ones(6)
A:numpy.ma.tests.test_old_ma.a->arange(1, 13).reshape(3, 4)
A:numpy.ma.tests.test_old_ma.(r1, w1)->average([[a, b], [b, a]], axis=1, returned=True)
A:numpy.ma.tests.test_old_ma.(r2, w2)->average(ones((2, 2, 3)), weights=ones((2, 2, 3)), returned=True)
A:numpy.ma.tests.test_old_ma.a2da->average(a2d, axis=0)
A:numpy.ma.tests.test_old_ma.a2dma->average(a2dm, axis=1)
A:numpy.ma.tests.test_old_ma.b->array([1, 3, 2], mask=[1, 0, 1])
A:numpy.ma.tests.test_old_ma.uf->getattr(fromnumeric, f)
A:numpy.ma.tests.test_old_ma.mf->getattr(np.ma, f)
A:numpy.ma.tests.test_old_ma.ur->uf(*args)
A:numpy.ma.tests.test_old_ma.mr->mf(*args)
A:numpy.ma.tests.test_old_ma.amask->masked_where(a < 5, a)
A:numpy.ma.tests.test_old_ma.X->numpy.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928, 8.43, 7.78, 9.865, 5.878, 8.979, 4.732, 3.012, 6.022, 5.095, 3.116, 5.238, 3.957, 6.04, 9.63, 7.712, 3.382, 4.489, 6.479, 7.189, 9.645, 5.395, 4.961, 9.894, 2.893, 7.357, 9.828, 6.272, 3.758, 6.693, 0.993]).reshape(6, 6)
A:numpy.ma.tests.test_old_ma.XX->numpy.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928, 8.43, 7.78, 9.865, 5.878, 8.979, 4.732, 3.012, 6.022, 5.095, 3.116, 5.238, 3.957, 6.04, 9.63, 7.712, 3.382, 4.489, 6.479, 7.189, 9.645, 5.395, 4.961, 9.894, 2.893, 7.357, 9.828, 6.272, 3.758, 6.693, 0.993]).reshape(3, 2, 2, 3)
A:numpy.ma.tests.test_old_ma.mx->array(data=x, mask=m)
A:numpy.ma.tests.test_old_ma.mX->array(data=X, mask=m.reshape(X.shape))
A:numpy.ma.tests.test_old_ma.mXX->array(data=XX, mask=m.reshape(XX.shape))
A:numpy.ma.tests.test_old_ma.mXdiag->array(data=X, mask=m.reshape(X.shape)).diagonal()
A:numpy.ma.tests.test_old_ma.clipped->array(data=x, mask=m).clip(2, 8)
A:numpy.ma.tests.test_old_ma.rows->numpy.zeros(n, np.float_)
A:numpy.ma.tests.test_old_ma.cols->numpy.zeros(m, np.float_)
A:numpy.ma.tests.test_old_ma.cols[k]->mX[:, k].compressed().ptp()
A:numpy.ma.tests.test_old_ma.rows[k]->mX[k].compressed().ptp()
A:numpy.ma.tests.test_old_ma.mXswapped->array(data=X, mask=m.reshape(X.shape)).swapaxes(0, 1)
A:numpy.ma.tests.test_old_ma.mXXswapped->array(data=XX, mask=m.reshape(XX.shape)).swapaxes(0, 2)
A:numpy.ma.tests.test_old_ma.mXcp->array(data=X, mask=m.reshape(X.shape)).cumsum(1)
numpy.ma.tests.test_old_ma.TestArrayMethods
numpy.ma.tests.test_old_ma.TestArrayMethods.setup(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_clip(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_cumprod(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_cumsum(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_ptp(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_swapaxes(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_trace(self)
numpy.ma.tests.test_old_ma.TestArrayMethods.test_varstd(self)
numpy.ma.tests.test_old_ma.TestMa
numpy.ma.tests.test_old_ma.TestMa.setup(self)
numpy.ma.tests.test_old_ma.TestMa.test_testAPI(self)
numpy.ma.tests.test_old_ma.TestMa.test_testAddSumProd(self)
numpy.ma.tests.test_old_ma.TestMa.test_testArithmetic(self)
numpy.ma.tests.test_old_ma.TestMa.test_testArrayAttributes(self)
numpy.ma.tests.test_old_ma.TestMa.test_testArrayMethods(self)
numpy.ma.tests.test_old_ma.TestMa.test_testAverage1(self)
numpy.ma.tests.test_old_ma.TestMa.test_testAverage2(self)
numpy.ma.tests.test_old_ma.TestMa.test_testBasic1d(self)
numpy.ma.tests.test_old_ma.TestMa.test_testBasic2d(self)
numpy.ma.tests.test_old_ma.TestMa.test_testCI(self)
numpy.ma.tests.test_old_ma.TestMa.test_testCopySize(self)
numpy.ma.tests.test_old_ma.TestMa.test_testInplace(self)
numpy.ma.tests.test_old_ma.TestMa.test_testMaPut(self)
numpy.ma.tests.test_old_ma.TestMa.test_testMasked(self)
numpy.ma.tests.test_old_ma.TestMa.test_testMinMax(self)
numpy.ma.tests.test_old_ma.TestMa.test_testMinMax2(self)
numpy.ma.tests.test_old_ma.TestMa.test_testMixedArithmetic(self)
numpy.ma.tests.test_old_ma.TestMa.test_testOddFeatures(self)
numpy.ma.tests.test_old_ma.TestMa.test_testPickle(self)
numpy.ma.tests.test_old_ma.TestMa.test_testPut(self)
numpy.ma.tests.test_old_ma.TestMa.test_testPut2(self)
numpy.ma.tests.test_old_ma.TestMa.test_testScalarArithmetic(self)
numpy.ma.tests.test_old_ma.TestMa.test_testSingleElementSubscript(self)
numpy.ma.tests.test_old_ma.TestMa.test_testTakeTransposeInnerOuter(self)
numpy.ma.tests.test_old_ma.TestMa.test_testToPython(self)
numpy.ma.tests.test_old_ma.TestMa.test_testUfuncs1(self)
numpy.ma.tests.test_old_ma.TestMa.test_xtestCount(self)
numpy.ma.tests.test_old_ma.TestUfuncs
numpy.ma.tests.test_old_ma.TestUfuncs.setup(self)
numpy.ma.tests.test_old_ma.TestUfuncs.test_minmax(self)
numpy.ma.tests.test_old_ma.TestUfuncs.test_nonzero(self)
numpy.ma.tests.test_old_ma.TestUfuncs.test_reduce(self)
numpy.ma.tests.test_old_ma.TestUfuncs.test_testUfuncRegression(self)
numpy.ma.tests.test_old_ma.eq(v,w,msg='')
numpy.ma.tests.test_old_ma.eqmask(m1,m2)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/_mt19937.pyi----------------------------------------
numpy.random.MT19937(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...)
numpy.random.MT19937._legacy_seeding(self,seed:_ArrayLikeInt_co)->None
numpy.random.MT19937.jumped(self,jumps:int=...)->MT19937
numpy.random.MT19937.state(self)->_MT19937State
numpy.random.MT19937.state(self,value:_MT19937State)->None
numpy.random._mt19937.MT19937(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...)
numpy.random._mt19937.MT19937.__init__(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...)
numpy.random._mt19937.MT19937._legacy_seeding(self,seed:_ArrayLikeInt_co)->None
numpy.random._mt19937.MT19937.jumped(self,jumps:int=...)->MT19937
numpy.random._mt19937.MT19937.state(self)->_MT19937State
numpy.random._mt19937.MT19937.state(self,value:_MT19937State)->None
numpy.random._mt19937._MT19937Internal(TypedDict)
numpy.random._mt19937._MT19937State(TypedDict)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/_generator.pyi----------------------------------------
numpy.random.Generator(self,bit_generator:BitGenerator)
numpy.random.Generator.__getstate__(self)->Dict[str, Any]
numpy.random.Generator.__reduce__(self)->Tuple[Callable[[str], Generator], Tuple[str], Dict[str, Any]]
numpy.random.Generator.__repr__(self)->str
numpy.random.Generator.__setstate__(self,state:Dict[str,Any])->None
numpy.random.Generator.__str__(self)->str
numpy.random.Generator.beta(self,a:_ArrayLikeFloat_co,b:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.beta(self,a:float,b:float,size:None=...)->float
numpy.random.Generator.binomial(self,n:_ArrayLikeInt_co,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random.Generator.binomial(self,n:int,p:float,size:None=...)->int
numpy.random.Generator.bit_generator(self)->BitGenerator
numpy.random.Generator.bytes(self,length:int)->bytes
numpy.random.Generator.chisquare(self,df:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.chisquare(self,df:float,size:None=...)->float
numpy.random.Generator.choice(self,a:ArrayLike,size:None=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...,axis:int=...,shuffle:bool=...)->Any
numpy.random.Generator.choice(self,a:ArrayLike,size:_ShapeLike=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...,axis:int=...,shuffle:bool=...)->ndarray[Any, Any]
numpy.random.Generator.choice(self,a:int,size:None=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...,axis:int=...,shuffle:bool=...)->int
numpy.random.Generator.choice(self,a:int,size:_ShapeLike=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...,axis:int=...,shuffle:bool=...)->ndarray[Any, dtype[int64]]
numpy.random.Generator.dirichlet(self,alpha:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.exponential(self,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.exponential(self,scale:float=...,size:None=...)->float
numpy.random.Generator.f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.f(self,dfnum:float,dfden:float,size:None=...)->float
numpy.random.Generator.gamma(self,shape:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.gamma(self,shape:float,scale:float=...,size:None=...)->float
numpy.random.Generator.geometric(self,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random.Generator.geometric(self,p:float,size:None=...)->int
numpy.random.Generator.gumbel(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.gumbel(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.Generator.hypergeometric(self,ngood:_ArrayLikeInt_co,nbad:_ArrayLikeInt_co,nsample:_ArrayLikeInt_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random.Generator.hypergeometric(self,ngood:int,nbad:int,nsample:int,size:None=...)->int
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Optional[Union[dtype[int64],Type[int64],_Int64Codes,_SupportsDType[dtype[int64]]]]=...,endpoint:bool=...)->ndarray[Any, dtype[int64]]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int16],Type[int16],_Int16Codes,_SupportsDType[dtype[int16]]]=...,endpoint:bool=...)->ndarray[Any, dtype[int16]]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int32],Type[int32],_Int32Codes,_SupportsDType[dtype[int32]]]=...,endpoint:bool=...)->ndarray[Any, dtype[Union[int32]]]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int8],Type[int8],_Int8Codes,_SupportsDType[dtype[int8]]]=...,endpoint:bool=...)->ndarray[Any, dtype[int8]]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int_],Type[int],Type[int_],_IntCodes,_SupportsDType[dtype[int_]]]=...,endpoint:bool=...)->ndarray[Any, dtype[int_]]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint16],Type[uint16],_UInt16Codes,_SupportsDType[dtype[uint16]]]=...,endpoint:bool=...)->ndarray[Any, dtype[Union[uint16]]]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint32],Type[uint32],_UInt32Codes,_SupportsDType[dtype[uint32]]]=...,endpoint:bool=...)->ndarray[Any, dtype[uint32]]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint64],Type[uint64],_UInt64Codes,_SupportsDType[dtype[uint64]]]=...,endpoint:bool=...)->ndarray[Any, dtype[uint64]]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint8],Type[uint8],_UInt8Codes,_SupportsDType[dtype[uint8]]]=...,endpoint:bool=...)->ndarray[Any, dtype[uint8]]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint],Type[uint],_UIntCodes,_SupportsDType[dtype[uint]]]=...,endpoint:bool=...)->ndarray[Any, dtype[uint]]
numpy.random.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:_DTypeLikeBool=...,endpoint:bool=...)->ndarray[Any, dtype[bool_]]
numpy.random.Generator.integers(self,low:int,high:Optional[int]=...)->int
numpy.random.Generator.integers(self,low:int,high:Optional[int]=...,size:None=...,dtype:Union[_DTypeLikeInt,_DTypeLikeUInt]=...,endpoint:bool=...)->int
numpy.random.Generator.integers(self,low:int,high:Optional[int]=...,size:None=...,dtype:_DTypeLikeBool=...,endpoint:bool=...)->bool
numpy.random.Generator.laplace(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.laplace(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.Generator.logistic(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.logistic(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.Generator.lognormal(self,mean:_ArrayLikeFloat_co=...,sigma:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.lognormal(self,mean:float=...,sigma:float=...,size:None=...)->float
numpy.random.Generator.logseries(self,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random.Generator.logseries(self,p:float,size:None=...)->int
numpy.random.Generator.multinomial(self,n:_ArrayLikeInt_co,pvals:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random.Generator.multivariate_hypergeometric(self,colors:_ArrayLikeInt_co,nsample:int,size:Optional[_ShapeLike]=...,method:Literal['marginals','count']=...)->ndarray[Any, dtype[int64]]
numpy.random.Generator.multivariate_normal(self,mean:_ArrayLikeFloat_co,cov:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...,check_valid:Literal['warn','raise','ignore']=...,tol:float=...,*,method:Literal['svd','eigh','cholesky']=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.negative_binomial(self,n:_ArrayLikeFloat_co,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random.Generator.negative_binomial(self,n:float,p:float,size:None=...)->int
numpy.random.Generator.noncentral_chisquare(self,df:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.noncentral_chisquare(self,df:float,nonc:float,size:None=...)->float
numpy.random.Generator.noncentral_f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.noncentral_f(self,dfnum:float,dfden:float,nonc:float,size:None=...)->float
numpy.random.Generator.normal(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.normal(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.Generator.pareto(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.pareto(self,a:float,size:None=...)->float
numpy.random.Generator.permutation(self,x:ArrayLike,axis:int=...)->ndarray[Any, Any]
numpy.random.Generator.permutation(self,x:int,axis:int=...)->ndarray[Any, dtype[int64]]
numpy.random.Generator.permuted(self,x:ArrayLike,*,axis:Optional[int]=...,out:Optional[ndarray[Any,Any]]=...)->ndarray[Any, Any]
numpy.random.Generator.poisson(self,lam:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random.Generator.poisson(self,lam:float=...,size:None=...)->int
numpy.random.Generator.power(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.power(self,a:float,size:None=...)->float
numpy.random.Generator.random(self,*,out:ndarray[Any,dtype[float64]]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.random(self,size:None=...,dtype:Union[_DTypeLikeFloat32,_DTypeLikeFloat64]=...,out:None=...)->float
numpy.random.Generator.random(self,size:_ShapeLike=...,*,out:Optional[ndarray[Any,dtype[float64]]]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.random(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat32=...,out:Optional[ndarray[Any,dtype[float32]]]=...)->ndarray[Any, dtype[float32]]
numpy.random.Generator.random(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat64=...,out:Optional[ndarray[Any,dtype[float64]]]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.rayleigh(self,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.rayleigh(self,scale:float=...,size:None=...)->float
numpy.random.Generator.shuffle(self,x:ArrayLike,axis:int=...)->None
numpy.random.Generator.standard_cauchy(self,size:None=...)->float
numpy.random.Generator.standard_cauchy(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.standard_exponential(self,*,out:ndarray[Any,dtype[float64]]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.standard_exponential(self,size:None=...,dtype:Union[_DTypeLikeFloat32,_DTypeLikeFloat64]=...,method:Literal['zig','inv']=...,out:None=...)->float
numpy.random.Generator.standard_exponential(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.standard_exponential(self,size:_ShapeLike=...,*,method:Literal['zig','inv']=...,out:Optional[ndarray[Any,dtype[float64]]]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.standard_exponential(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat32=...,method:Literal['zig','inv']=...,out:Optional[ndarray[Any,dtype[float32]]]=...)->ndarray[Any, dtype[float32]]
numpy.random.Generator.standard_exponential(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat64=...,method:Literal['zig','inv']=...,out:Optional[ndarray[Any,dtype[float64]]]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,*,out:ndarray[Any,dtype[float64]]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...,dtype:_DTypeLikeFloat32=...,out:Optional[ndarray[Any,dtype[float32]]]=...)->ndarray[Any, dtype[float32]]
numpy.random.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...,dtype:_DTypeLikeFloat64=...,out:Optional[ndarray[Any,dtype[float64]]]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.standard_gamma(self,shape:float,size:None=...,dtype:Union[_DTypeLikeFloat32,_DTypeLikeFloat64]=...,out:None=...)->float
numpy.random.Generator.standard_normal(self,*,out:ndarray[Any,dtype[float64]]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.standard_normal(self,size:None=...,dtype:Union[_DTypeLikeFloat32,_DTypeLikeFloat64]=...,out:None=...)->float
numpy.random.Generator.standard_normal(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.standard_normal(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat32=...,out:Optional[ndarray[Any,dtype[float32]]]=...)->ndarray[Any, dtype[float32]]
numpy.random.Generator.standard_normal(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat64=...,out:Optional[ndarray[Any,dtype[float64]]]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.standard_t(self,df:_ArrayLikeFloat_co,size:None=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.standard_t(self,df:_ArrayLikeFloat_co,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.standard_t(self,df:float,size:None=...)->float
numpy.random.Generator.triangular(self,left:_ArrayLikeFloat_co,mode:_ArrayLikeFloat_co,right:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.triangular(self,left:float,mode:float,right:float,size:None=...)->float
numpy.random.Generator.uniform(self,low:_ArrayLikeFloat_co=...,high:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.uniform(self,low:float=...,high:float=...,size:None=...)->float
numpy.random.Generator.vonmises(self,mu:_ArrayLikeFloat_co,kappa:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.vonmises(self,mu:float,kappa:float,size:None=...)->float
numpy.random.Generator.wald(self,mean:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.wald(self,mean:float,scale:float,size:None=...)->float
numpy.random.Generator.weibull(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.Generator.weibull(self,a:float,size:None=...)->float
numpy.random.Generator.zipf(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random.Generator.zipf(self,a:float,size:None=...)->int
numpy.random._generator.Generator(self,bit_generator:BitGenerator)
numpy.random._generator.Generator.__getstate__(self)->Dict[str, Any]
numpy.random._generator.Generator.__init__(self,bit_generator:BitGenerator)
numpy.random._generator.Generator.__reduce__(self)->Tuple[Callable[[str], Generator], Tuple[str], Dict[str, Any]]
numpy.random._generator.Generator.__repr__(self)->str
numpy.random._generator.Generator.__setstate__(self,state:Dict[str,Any])->None
numpy.random._generator.Generator.__str__(self)->str
numpy.random._generator.Generator.beta(self,a:_ArrayLikeFloat_co,b:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.beta(self,a:float,b:float,size:None=...)->float
numpy.random._generator.Generator.binomial(self,n:_ArrayLikeInt_co,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random._generator.Generator.binomial(self,n:int,p:float,size:None=...)->int
numpy.random._generator.Generator.bit_generator(self)->BitGenerator
numpy.random._generator.Generator.bytes(self,length:int)->bytes
numpy.random._generator.Generator.chisquare(self,df:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.chisquare(self,df:float,size:None=...)->float
numpy.random._generator.Generator.choice(self,a:ArrayLike,size:None=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...,axis:int=...,shuffle:bool=...)->Any
numpy.random._generator.Generator.choice(self,a:ArrayLike,size:_ShapeLike=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...,axis:int=...,shuffle:bool=...)->ndarray[Any, Any]
numpy.random._generator.Generator.choice(self,a:int,size:None=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...,axis:int=...,shuffle:bool=...)->int
numpy.random._generator.Generator.choice(self,a:int,size:_ShapeLike=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...,axis:int=...,shuffle:bool=...)->ndarray[Any, dtype[int64]]
numpy.random._generator.Generator.dirichlet(self,alpha:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.exponential(self,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.exponential(self,scale:float=...,size:None=...)->float
numpy.random._generator.Generator.f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.f(self,dfnum:float,dfden:float,size:None=...)->float
numpy.random._generator.Generator.gamma(self,shape:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.gamma(self,shape:float,scale:float=...,size:None=...)->float
numpy.random._generator.Generator.geometric(self,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random._generator.Generator.geometric(self,p:float,size:None=...)->int
numpy.random._generator.Generator.gumbel(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.gumbel(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random._generator.Generator.hypergeometric(self,ngood:_ArrayLikeInt_co,nbad:_ArrayLikeInt_co,nsample:_ArrayLikeInt_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random._generator.Generator.hypergeometric(self,ngood:int,nbad:int,nsample:int,size:None=...)->int
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Optional[Union[dtype[int64],Type[int64],_Int64Codes,_SupportsDType[dtype[int64]]]]=...,endpoint:bool=...)->ndarray[Any, dtype[int64]]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int16],Type[int16],_Int16Codes,_SupportsDType[dtype[int16]]]=...,endpoint:bool=...)->ndarray[Any, dtype[int16]]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int32],Type[int32],_Int32Codes,_SupportsDType[dtype[int32]]]=...,endpoint:bool=...)->ndarray[Any, dtype[Union[int32]]]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int8],Type[int8],_Int8Codes,_SupportsDType[dtype[int8]]]=...,endpoint:bool=...)->ndarray[Any, dtype[int8]]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int_],Type[int],Type[int_],_IntCodes,_SupportsDType[dtype[int_]]]=...,endpoint:bool=...)->ndarray[Any, dtype[int_]]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint16],Type[uint16],_UInt16Codes,_SupportsDType[dtype[uint16]]]=...,endpoint:bool=...)->ndarray[Any, dtype[Union[uint16]]]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint32],Type[uint32],_UInt32Codes,_SupportsDType[dtype[uint32]]]=...,endpoint:bool=...)->ndarray[Any, dtype[uint32]]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint64],Type[uint64],_UInt64Codes,_SupportsDType[dtype[uint64]]]=...,endpoint:bool=...)->ndarray[Any, dtype[uint64]]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint8],Type[uint8],_UInt8Codes,_SupportsDType[dtype[uint8]]]=...,endpoint:bool=...)->ndarray[Any, dtype[uint8]]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint],Type[uint],_UIntCodes,_SupportsDType[dtype[uint]]]=...,endpoint:bool=...)->ndarray[Any, dtype[uint]]
numpy.random._generator.Generator.integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:_DTypeLikeBool=...,endpoint:bool=...)->ndarray[Any, dtype[bool_]]
numpy.random._generator.Generator.integers(self,low:int,high:Optional[int]=...)->int
numpy.random._generator.Generator.integers(self,low:int,high:Optional[int]=...,size:None=...,dtype:Union[_DTypeLikeInt,_DTypeLikeUInt]=...,endpoint:bool=...)->int
numpy.random._generator.Generator.integers(self,low:int,high:Optional[int]=...,size:None=...,dtype:_DTypeLikeBool=...,endpoint:bool=...)->bool
numpy.random._generator.Generator.laplace(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.laplace(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random._generator.Generator.logistic(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.logistic(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random._generator.Generator.lognormal(self,mean:_ArrayLikeFloat_co=...,sigma:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.lognormal(self,mean:float=...,sigma:float=...,size:None=...)->float
numpy.random._generator.Generator.logseries(self,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random._generator.Generator.logseries(self,p:float,size:None=...)->int
numpy.random._generator.Generator.multinomial(self,n:_ArrayLikeInt_co,pvals:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random._generator.Generator.multivariate_hypergeometric(self,colors:_ArrayLikeInt_co,nsample:int,size:Optional[_ShapeLike]=...,method:Literal['marginals','count']=...)->ndarray[Any, dtype[int64]]
numpy.random._generator.Generator.multivariate_normal(self,mean:_ArrayLikeFloat_co,cov:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...,check_valid:Literal['warn','raise','ignore']=...,tol:float=...,*,method:Literal['svd','eigh','cholesky']=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.negative_binomial(self,n:_ArrayLikeFloat_co,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random._generator.Generator.negative_binomial(self,n:float,p:float,size:None=...)->int
numpy.random._generator.Generator.noncentral_chisquare(self,df:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.noncentral_chisquare(self,df:float,nonc:float,size:None=...)->float
numpy.random._generator.Generator.noncentral_f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.noncentral_f(self,dfnum:float,dfden:float,nonc:float,size:None=...)->float
numpy.random._generator.Generator.normal(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.normal(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random._generator.Generator.pareto(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.pareto(self,a:float,size:None=...)->float
numpy.random._generator.Generator.permutation(self,x:ArrayLike,axis:int=...)->ndarray[Any, Any]
numpy.random._generator.Generator.permutation(self,x:int,axis:int=...)->ndarray[Any, dtype[int64]]
numpy.random._generator.Generator.permuted(self,x:ArrayLike,*,axis:Optional[int]=...,out:Optional[ndarray[Any,Any]]=...)->ndarray[Any, Any]
numpy.random._generator.Generator.poisson(self,lam:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random._generator.Generator.poisson(self,lam:float=...,size:None=...)->int
numpy.random._generator.Generator.power(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.power(self,a:float,size:None=...)->float
numpy.random._generator.Generator.random(self,*,out:ndarray[Any,dtype[float64]]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.random(self,size:None=...,dtype:Union[_DTypeLikeFloat32,_DTypeLikeFloat64]=...,out:None=...)->float
numpy.random._generator.Generator.random(self,size:_ShapeLike=...,*,out:Optional[ndarray[Any,dtype[float64]]]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.random(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat32=...,out:Optional[ndarray[Any,dtype[float32]]]=...)->ndarray[Any, dtype[float32]]
numpy.random._generator.Generator.random(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat64=...,out:Optional[ndarray[Any,dtype[float64]]]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.rayleigh(self,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.rayleigh(self,scale:float=...,size:None=...)->float
numpy.random._generator.Generator.shuffle(self,x:ArrayLike,axis:int=...)->None
numpy.random._generator.Generator.standard_cauchy(self,size:None=...)->float
numpy.random._generator.Generator.standard_cauchy(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.standard_exponential(self,*,out:ndarray[Any,dtype[float64]]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.standard_exponential(self,size:None=...,dtype:Union[_DTypeLikeFloat32,_DTypeLikeFloat64]=...,method:Literal['zig','inv']=...,out:None=...)->float
numpy.random._generator.Generator.standard_exponential(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.standard_exponential(self,size:_ShapeLike=...,*,method:Literal['zig','inv']=...,out:Optional[ndarray[Any,dtype[float64]]]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.standard_exponential(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat32=...,method:Literal['zig','inv']=...,out:Optional[ndarray[Any,dtype[float32]]]=...)->ndarray[Any, dtype[float32]]
numpy.random._generator.Generator.standard_exponential(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat64=...,method:Literal['zig','inv']=...,out:Optional[ndarray[Any,dtype[float64]]]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,*,out:ndarray[Any,dtype[float64]]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...,dtype:_DTypeLikeFloat32=...,out:Optional[ndarray[Any,dtype[float32]]]=...)->ndarray[Any, dtype[float32]]
numpy.random._generator.Generator.standard_gamma(self,shape:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...,dtype:_DTypeLikeFloat64=...,out:Optional[ndarray[Any,dtype[float64]]]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.standard_gamma(self,shape:float,size:None=...,dtype:Union[_DTypeLikeFloat32,_DTypeLikeFloat64]=...,out:None=...)->float
numpy.random._generator.Generator.standard_normal(self,*,out:ndarray[Any,dtype[float64]]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.standard_normal(self,size:None=...,dtype:Union[_DTypeLikeFloat32,_DTypeLikeFloat64]=...,out:None=...)->float
numpy.random._generator.Generator.standard_normal(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.standard_normal(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat32=...,out:Optional[ndarray[Any,dtype[float32]]]=...)->ndarray[Any, dtype[float32]]
numpy.random._generator.Generator.standard_normal(self,size:_ShapeLike=...,dtype:_DTypeLikeFloat64=...,out:Optional[ndarray[Any,dtype[float64]]]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.standard_t(self,df:_ArrayLikeFloat_co,size:None=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.standard_t(self,df:_ArrayLikeFloat_co,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.standard_t(self,df:float,size:None=...)->float
numpy.random._generator.Generator.triangular(self,left:_ArrayLikeFloat_co,mode:_ArrayLikeFloat_co,right:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.triangular(self,left:float,mode:float,right:float,size:None=...)->float
numpy.random._generator.Generator.uniform(self,low:_ArrayLikeFloat_co=...,high:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.uniform(self,low:float=...,high:float=...,size:None=...)->float
numpy.random._generator.Generator.vonmises(self,mu:_ArrayLikeFloat_co,kappa:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.vonmises(self,mu:float,kappa:float,size:None=...)->float
numpy.random._generator.Generator.wald(self,mean:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.wald(self,mean:float,scale:float,size:None=...)->float
numpy.random._generator.Generator.weibull(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random._generator.Generator.weibull(self,a:float,size:None=...)->float
numpy.random._generator.Generator.zipf(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int64]]
numpy.random._generator.Generator.zipf(self,a:float,size:None=...)->int
numpy.random._generator.default_rng(seed:Union[None,_ArrayLikeInt_co,SeedSequence,BitGenerator,Generator]=...)->Generator
numpy.random.default_rng(seed:Union[None,_ArrayLikeInt_co,SeedSequence,BitGenerator,Generator]=...)->Generator


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/_pcg64.pyi----------------------------------------
numpy.random.PCG64(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...)
numpy.random.PCG64.advance(self,delta:int)->PCG64
numpy.random.PCG64.jumped(self,jumps:int=...)->PCG64
numpy.random.PCG64.state(self)->_PCG64State
numpy.random.PCG64.state(self,value:_PCG64State)->None
numpy.random.PCG64DXSM(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...)
numpy.random.PCG64DXSM.advance(self,delta:int)->PCG64DXSM
numpy.random.PCG64DXSM.jumped(self,jumps:int=...)->PCG64DXSM
numpy.random.PCG64DXSM.state(self)->_PCG64State
numpy.random.PCG64DXSM.state(self,value:_PCG64State)->None
numpy.random._pcg64.PCG64(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...)
numpy.random._pcg64.PCG64.__init__(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...)
numpy.random._pcg64.PCG64.advance(self,delta:int)->PCG64
numpy.random._pcg64.PCG64.jumped(self,jumps:int=...)->PCG64
numpy.random._pcg64.PCG64.state(self)->_PCG64State
numpy.random._pcg64.PCG64.state(self,value:_PCG64State)->None
numpy.random._pcg64.PCG64DXSM(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...)
numpy.random._pcg64.PCG64DXSM.__init__(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...)
numpy.random._pcg64.PCG64DXSM.advance(self,delta:int)->PCG64DXSM
numpy.random._pcg64.PCG64DXSM.jumped(self,jumps:int=...)->PCG64DXSM
numpy.random._pcg64.PCG64DXSM.state(self)->_PCG64State
numpy.random._pcg64.PCG64DXSM.state(self,value:_PCG64State)->None
numpy.random._pcg64._PCG64Internal(TypedDict)
numpy.random._pcg64._PCG64State(TypedDict)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/_philox.pyi----------------------------------------
numpy.random.Philox(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...,counter:Union[None,_ArrayLikeInt_co]=...,key:Union[None,_ArrayLikeInt_co]=...)
numpy.random.Philox.advance(self,delta:int)->Philox
numpy.random.Philox.jumped(self,jumps:int=...)->Philox
numpy.random.Philox.state(self)->_PhiloxState
numpy.random.Philox.state(self,value:_PhiloxState)->None
numpy.random._philox.Philox(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...,counter:Union[None,_ArrayLikeInt_co]=...,key:Union[None,_ArrayLikeInt_co]=...)
numpy.random._philox.Philox.__init__(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...,counter:Union[None,_ArrayLikeInt_co]=...,key:Union[None,_ArrayLikeInt_co]=...)
numpy.random._philox.Philox.advance(self,delta:int)->Philox
numpy.random._philox.Philox.jumped(self,jumps:int=...)->Philox
numpy.random._philox.Philox.state(self)->_PhiloxState
numpy.random._philox.Philox.state(self,value:_PhiloxState)->None
numpy.random._philox._PhiloxInternal(TypedDict)
numpy.random._philox._PhiloxState(TypedDict)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/__init__.py----------------------------------------
A:numpy.random.__init__.test->PytestTester(__name__)
numpy.random.__init__.__RandomState_ctor()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/__init__.pyi----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/mtrand.pyi----------------------------------------
numpy.random.RandomState(self,seed:Union[None,_ArrayLikeInt_co,BitGenerator]=...)
numpy.random.RandomState.__getstate__(self)->Dict[str, Any]
numpy.random.RandomState.__reduce__(self)->Tuple[Callable[[str], RandomState], Tuple[str], Dict[str, Any]]
numpy.random.RandomState.__repr__(self)->str
numpy.random.RandomState.__setstate__(self,state:Dict[str,Any])->None
numpy.random.RandomState.__str__(self)->str
numpy.random.RandomState.beta(self,a:_ArrayLikeFloat_co,b:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.beta(self,a:float,b:float,size:None=...)->float
numpy.random.RandomState.binomial(self,n:_ArrayLikeInt_co,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.RandomState.binomial(self,n:int,p:float,size:None=...)->int
numpy.random.RandomState.bytes(self,length:int)->bytes
numpy.random.RandomState.chisquare(self,df:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.chisquare(self,df:float,size:None=...)->float
numpy.random.RandomState.choice(self,a:ArrayLike,size:None=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...)->Any
numpy.random.RandomState.choice(self,a:ArrayLike,size:_ShapeLike=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...)->ndarray[Any, Any]
numpy.random.RandomState.choice(self,a:int,size:None=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...)->int
numpy.random.RandomState.choice(self,a:int,size:_ShapeLike=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...)->ndarray[Any, dtype[int_]]
numpy.random.RandomState.dirichlet(self,alpha:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.exponential(self,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.exponential(self,scale:float=...,size:None=...)->float
numpy.random.RandomState.f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.f(self,dfnum:float,dfden:float,size:None=...)->float
numpy.random.RandomState.gamma(self,shape:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.gamma(self,shape:float,scale:float=...,size:None=...)->float
numpy.random.RandomState.geometric(self,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.RandomState.geometric(self,p:float,size:None=...)->int
numpy.random.RandomState.get_state(self,legacy:Literal[False]=...)->Dict[str, Any]
numpy.random.RandomState.get_state(self,legacy:Literal[True]=...)->Union[Dict[str, Any], Tuple[str, ndarray[Any, dtype[uint32]], int, int, float]]
numpy.random.RandomState.gumbel(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.gumbel(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.RandomState.hypergeometric(self,ngood:_ArrayLikeInt_co,nbad:_ArrayLikeInt_co,nsample:_ArrayLikeInt_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.RandomState.hypergeometric(self,ngood:int,nbad:int,nsample:int,size:None=...)->int
numpy.random.RandomState.laplace(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.laplace(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.RandomState.logistic(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.logistic(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.RandomState.lognormal(self,mean:_ArrayLikeFloat_co=...,sigma:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.lognormal(self,mean:float=...,sigma:float=...,size:None=...)->float
numpy.random.RandomState.logseries(self,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.RandomState.logseries(self,p:float,size:None=...)->int
numpy.random.RandomState.multinomial(self,n:_ArrayLikeInt_co,pvals:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.RandomState.multivariate_normal(self,mean:_ArrayLikeFloat_co,cov:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...,check_valid:Literal['warn','raise','ignore']=...,tol:float=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.negative_binomial(self,n:_ArrayLikeFloat_co,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.RandomState.negative_binomial(self,n:float,p:float,size:None=...)->int
numpy.random.RandomState.noncentral_chisquare(self,df:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.noncentral_chisquare(self,df:float,nonc:float,size:None=...)->float
numpy.random.RandomState.noncentral_f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.noncentral_f(self,dfnum:float,dfden:float,nonc:float,size:None=...)->float
numpy.random.RandomState.normal(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.normal(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.RandomState.pareto(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.pareto(self,a:float,size:None=...)->float
numpy.random.RandomState.permutation(self,x:ArrayLike)->ndarray[Any, Any]
numpy.random.RandomState.permutation(self,x:int)->ndarray[Any, dtype[int_]]
numpy.random.RandomState.poisson(self,lam:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.RandomState.poisson(self,lam:float=...,size:None=...)->int
numpy.random.RandomState.power(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.power(self,a:float,size:None=...)->float
numpy.random.RandomState.rand(self)->float
numpy.random.RandomState.rand(self,*args:int)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Optional[Union[dtype[int64],Type[int64],_Int64Codes,_SupportsDType[dtype[int64]]]]=...)->ndarray[Any, dtype[int64]]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int16],Type[int16],_Int16Codes,_SupportsDType[dtype[int16]]]=...)->ndarray[Any, dtype[int16]]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int32],Type[int32],_Int32Codes,_SupportsDType[dtype[int32]]]=...)->ndarray[Any, dtype[Union[int32]]]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int8],Type[int8],_Int8Codes,_SupportsDType[dtype[int8]]]=...)->ndarray[Any, dtype[int8]]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int_],Type[int],Type[int_],_IntCodes,_SupportsDType[dtype[int_]]]=...)->ndarray[Any, dtype[int_]]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint16],Type[uint16],_UInt16Codes,_SupportsDType[dtype[uint16]]]=...)->ndarray[Any, dtype[Union[uint16]]]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint32],Type[uint32],_UInt32Codes,_SupportsDType[dtype[uint32]]]=...)->ndarray[Any, dtype[uint32]]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint64],Type[uint64],_UInt64Codes,_SupportsDType[dtype[uint64]]]=...)->ndarray[Any, dtype[uint64]]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint8],Type[uint8],_UInt8Codes,_SupportsDType[dtype[uint8]]]=...)->ndarray[Any, dtype[uint8]]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint],Type[uint],_UIntCodes,_SupportsDType[dtype[uint]]]=...)->ndarray[Any, dtype[uint]]
numpy.random.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:_DTypeLikeBool=...)->ndarray[Any, dtype[bool_]]
numpy.random.RandomState.randint(self,low:int,high:Optional[int]=...)->int
numpy.random.RandomState.randint(self,low:int,high:Optional[int]=...,size:None=...,dtype:Union[_DTypeLikeInt,_DTypeLikeUInt]=...)->int
numpy.random.RandomState.randint(self,low:int,high:Optional[int]=...,size:None=...,dtype:_DTypeLikeBool=...)->bool
numpy.random.RandomState.randn(self)->float
numpy.random.RandomState.randn(self,*args:int)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.random(self,size:None=...)->float
numpy.random.RandomState.random(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.random_integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.RandomState.random_integers(self,low:int,high:Optional[int]=...,size:None=...)->int
numpy.random.RandomState.random_sample(self,size:None=...)->float
numpy.random.RandomState.random_sample(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.rayleigh(self,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.rayleigh(self,scale:float=...,size:None=...)->float
numpy.random.RandomState.seed(self,seed:Optional[_ArrayLikeFloat_co]=...)->None
numpy.random.RandomState.set_state(self,state:Union[Dict[str,Any],Tuple[str,ndarray[Any,dtype[uint32]],int,int,float]])->None
numpy.random.RandomState.shuffle(self,x:ArrayLike)->None
numpy.random.RandomState.standard_cauchy(self,size:None=...)->float
numpy.random.RandomState.standard_cauchy(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.standard_exponential(self,size:None=...)->float
numpy.random.RandomState.standard_exponential(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.standard_gamma(self,shape:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.standard_gamma(self,shape:float,size:None=...)->float
numpy.random.RandomState.standard_normal(self,size:None=...)->float
numpy.random.RandomState.standard_normal(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.standard_t(self,df:_ArrayLikeFloat_co,size:None=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.standard_t(self,df:_ArrayLikeFloat_co,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.standard_t(self,df:float,size:None=...)->float
numpy.random.RandomState.tomaxint(self,size:None=...)->int
numpy.random.RandomState.tomaxint(self,size:_ShapeLike=...)->ndarray[Any, dtype[int_]]
numpy.random.RandomState.triangular(self,left:_ArrayLikeFloat_co,mode:_ArrayLikeFloat_co,right:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.triangular(self,left:float,mode:float,right:float,size:None=...)->float
numpy.random.RandomState.uniform(self,low:_ArrayLikeFloat_co=...,high:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.uniform(self,low:float=...,high:float=...,size:None=...)->float
numpy.random.RandomState.vonmises(self,mu:_ArrayLikeFloat_co,kappa:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.vonmises(self,mu:float,kappa:float,size:None=...)->float
numpy.random.RandomState.wald(self,mean:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.wald(self,mean:float,scale:float,size:None=...)->float
numpy.random.RandomState.weibull(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.RandomState.weibull(self,a:float,size:None=...)->float
numpy.random.RandomState.zipf(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.RandomState.zipf(self,a:float,size:None=...)->int
numpy.random.mtrand.RandomState(self,seed:Union[None,_ArrayLikeInt_co,BitGenerator]=...)
numpy.random.mtrand.RandomState.__getstate__(self)->Dict[str, Any]
numpy.random.mtrand.RandomState.__init__(self,seed:Union[None,_ArrayLikeInt_co,BitGenerator]=...)
numpy.random.mtrand.RandomState.__reduce__(self)->Tuple[Callable[[str], RandomState], Tuple[str], Dict[str, Any]]
numpy.random.mtrand.RandomState.__repr__(self)->str
numpy.random.mtrand.RandomState.__setstate__(self,state:Dict[str,Any])->None
numpy.random.mtrand.RandomState.__str__(self)->str
numpy.random.mtrand.RandomState.beta(self,a:_ArrayLikeFloat_co,b:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.beta(self,a:float,b:float,size:None=...)->float
numpy.random.mtrand.RandomState.binomial(self,n:_ArrayLikeInt_co,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.mtrand.RandomState.binomial(self,n:int,p:float,size:None=...)->int
numpy.random.mtrand.RandomState.bytes(self,length:int)->bytes
numpy.random.mtrand.RandomState.chisquare(self,df:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.chisquare(self,df:float,size:None=...)->float
numpy.random.mtrand.RandomState.choice(self,a:ArrayLike,size:None=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...)->Any
numpy.random.mtrand.RandomState.choice(self,a:ArrayLike,size:_ShapeLike=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...)->ndarray[Any, Any]
numpy.random.mtrand.RandomState.choice(self,a:int,size:None=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...)->int
numpy.random.mtrand.RandomState.choice(self,a:int,size:_ShapeLike=...,replace:bool=...,p:Optional[_ArrayLikeFloat_co]=...)->ndarray[Any, dtype[int_]]
numpy.random.mtrand.RandomState.dirichlet(self,alpha:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.exponential(self,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.exponential(self,scale:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.f(self,dfnum:float,dfden:float,size:None=...)->float
numpy.random.mtrand.RandomState.gamma(self,shape:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.gamma(self,shape:float,scale:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.geometric(self,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.mtrand.RandomState.geometric(self,p:float,size:None=...)->int
numpy.random.mtrand.RandomState.get_state(self,legacy:Literal[False]=...)->Dict[str, Any]
numpy.random.mtrand.RandomState.get_state(self,legacy:Literal[True]=...)->Union[Dict[str, Any], Tuple[str, ndarray[Any, dtype[uint32]], int, int, float]]
numpy.random.mtrand.RandomState.gumbel(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.gumbel(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.hypergeometric(self,ngood:_ArrayLikeInt_co,nbad:_ArrayLikeInt_co,nsample:_ArrayLikeInt_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.mtrand.RandomState.hypergeometric(self,ngood:int,nbad:int,nsample:int,size:None=...)->int
numpy.random.mtrand.RandomState.laplace(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.laplace(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.logistic(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.logistic(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.lognormal(self,mean:_ArrayLikeFloat_co=...,sigma:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.lognormal(self,mean:float=...,sigma:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.logseries(self,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.mtrand.RandomState.logseries(self,p:float,size:None=...)->int
numpy.random.mtrand.RandomState.multinomial(self,n:_ArrayLikeInt_co,pvals:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.mtrand.RandomState.multivariate_normal(self,mean:_ArrayLikeFloat_co,cov:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...,check_valid:Literal['warn','raise','ignore']=...,tol:float=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.negative_binomial(self,n:_ArrayLikeFloat_co,p:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.mtrand.RandomState.negative_binomial(self,n:float,p:float,size:None=...)->int
numpy.random.mtrand.RandomState.noncentral_chisquare(self,df:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.noncentral_chisquare(self,df:float,nonc:float,size:None=...)->float
numpy.random.mtrand.RandomState.noncentral_f(self,dfnum:_ArrayLikeFloat_co,dfden:_ArrayLikeFloat_co,nonc:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.noncentral_f(self,dfnum:float,dfden:float,nonc:float,size:None=...)->float
numpy.random.mtrand.RandomState.normal(self,loc:_ArrayLikeFloat_co=...,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.normal(self,loc:float=...,scale:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.pareto(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.pareto(self,a:float,size:None=...)->float
numpy.random.mtrand.RandomState.permutation(self,x:ArrayLike)->ndarray[Any, Any]
numpy.random.mtrand.RandomState.permutation(self,x:int)->ndarray[Any, dtype[int_]]
numpy.random.mtrand.RandomState.poisson(self,lam:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.mtrand.RandomState.poisson(self,lam:float=...,size:None=...)->int
numpy.random.mtrand.RandomState.power(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.power(self,a:float,size:None=...)->float
numpy.random.mtrand.RandomState.rand(self)->float
numpy.random.mtrand.RandomState.rand(self,*args:int)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Optional[Union[dtype[int64],Type[int64],_Int64Codes,_SupportsDType[dtype[int64]]]]=...)->ndarray[Any, dtype[int64]]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int16],Type[int16],_Int16Codes,_SupportsDType[dtype[int16]]]=...)->ndarray[Any, dtype[int16]]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int32],Type[int32],_Int32Codes,_SupportsDType[dtype[int32]]]=...)->ndarray[Any, dtype[Union[int32]]]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int8],Type[int8],_Int8Codes,_SupportsDType[dtype[int8]]]=...)->ndarray[Any, dtype[int8]]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[int_],Type[int],Type[int_],_IntCodes,_SupportsDType[dtype[int_]]]=...)->ndarray[Any, dtype[int_]]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint16],Type[uint16],_UInt16Codes,_SupportsDType[dtype[uint16]]]=...)->ndarray[Any, dtype[Union[uint16]]]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint32],Type[uint32],_UInt32Codes,_SupportsDType[dtype[uint32]]]=...)->ndarray[Any, dtype[uint32]]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint64],Type[uint64],_UInt64Codes,_SupportsDType[dtype[uint64]]]=...)->ndarray[Any, dtype[uint64]]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint8],Type[uint8],_UInt8Codes,_SupportsDType[dtype[uint8]]]=...)->ndarray[Any, dtype[uint8]]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:Union[dtype[uint],Type[uint],_UIntCodes,_SupportsDType[dtype[uint]]]=...)->ndarray[Any, dtype[uint]]
numpy.random.mtrand.RandomState.randint(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...,dtype:_DTypeLikeBool=...)->ndarray[Any, dtype[bool_]]
numpy.random.mtrand.RandomState.randint(self,low:int,high:Optional[int]=...)->int
numpy.random.mtrand.RandomState.randint(self,low:int,high:Optional[int]=...,size:None=...,dtype:Union[_DTypeLikeInt,_DTypeLikeUInt]=...)->int
numpy.random.mtrand.RandomState.randint(self,low:int,high:Optional[int]=...,size:None=...,dtype:_DTypeLikeBool=...)->bool
numpy.random.mtrand.RandomState.randn(self)->float
numpy.random.mtrand.RandomState.randn(self,*args:int)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.random(self,size:None=...)->float
numpy.random.mtrand.RandomState.random(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.random_integers(self,low:_ArrayLikeInt_co,high:Optional[_ArrayLikeInt_co]=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.mtrand.RandomState.random_integers(self,low:int,high:Optional[int]=...,size:None=...)->int
numpy.random.mtrand.RandomState.random_sample(self,size:None=...)->float
numpy.random.mtrand.RandomState.random_sample(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.rayleigh(self,scale:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.rayleigh(self,scale:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.seed(self,seed:Optional[_ArrayLikeFloat_co]=...)->None
numpy.random.mtrand.RandomState.set_state(self,state:Union[Dict[str,Any],Tuple[str,ndarray[Any,dtype[uint32]],int,int,float]])->None
numpy.random.mtrand.RandomState.shuffle(self,x:ArrayLike)->None
numpy.random.mtrand.RandomState.standard_cauchy(self,size:None=...)->float
numpy.random.mtrand.RandomState.standard_cauchy(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.standard_exponential(self,size:None=...)->float
numpy.random.mtrand.RandomState.standard_exponential(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.standard_gamma(self,shape:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.standard_gamma(self,shape:float,size:None=...)->float
numpy.random.mtrand.RandomState.standard_normal(self,size:None=...)->float
numpy.random.mtrand.RandomState.standard_normal(self,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.standard_t(self,df:_ArrayLikeFloat_co,size:None=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.standard_t(self,df:_ArrayLikeFloat_co,size:_ShapeLike=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.standard_t(self,df:float,size:None=...)->float
numpy.random.mtrand.RandomState.tomaxint(self,size:None=...)->int
numpy.random.mtrand.RandomState.tomaxint(self,size:_ShapeLike=...)->ndarray[Any, dtype[int_]]
numpy.random.mtrand.RandomState.triangular(self,left:_ArrayLikeFloat_co,mode:_ArrayLikeFloat_co,right:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.triangular(self,left:float,mode:float,right:float,size:None=...)->float
numpy.random.mtrand.RandomState.uniform(self,low:_ArrayLikeFloat_co=...,high:_ArrayLikeFloat_co=...,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.uniform(self,low:float=...,high:float=...,size:None=...)->float
numpy.random.mtrand.RandomState.vonmises(self,mu:_ArrayLikeFloat_co,kappa:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.vonmises(self,mu:float,kappa:float,size:None=...)->float
numpy.random.mtrand.RandomState.wald(self,mean:_ArrayLikeFloat_co,scale:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.wald(self,mean:float,scale:float,size:None=...)->float
numpy.random.mtrand.RandomState.weibull(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[float64]]
numpy.random.mtrand.RandomState.weibull(self,a:float,size:None=...)->float
numpy.random.mtrand.RandomState.zipf(self,a:_ArrayLikeFloat_co,size:Optional[_ShapeLike]=...)->ndarray[Any, dtype[int_]]
numpy.random.mtrand.RandomState.zipf(self,a:float,size:None=...)->int


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/bit_generator.pyi----------------------------------------
numpy.random.BitGenerator(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...)
numpy.random.BitGenerator.__getstate__(self)->Dict[str, Any]
numpy.random.BitGenerator.__reduce__(self)->Tuple[Callable[[str], BitGenerator], Tuple[str], Tuple[Dict[str, Any]]]
numpy.random.BitGenerator.__setstate__(self,state:Dict[str,Any])->None
numpy.random.BitGenerator._benchmark(self,cnt:int,method:str=...)->None
numpy.random.BitGenerator.cffi(self)->_Interface
numpy.random.BitGenerator.ctypes(self)->_Interface
numpy.random.BitGenerator.random_raw(self,size:None=...,output:Literal[True]=...)->int
numpy.random.BitGenerator.random_raw(self,size:Optional[_ShapeLike]=...,output:Literal[False]=...)->None
numpy.random.BitGenerator.random_raw(self,size:_ShapeLike=...,output:Literal[True]=...)->ndarray[Any, dtype[uint64]]
numpy.random.BitGenerator.state(self)->Mapping[str, Any]
numpy.random.BitGenerator.state(self,value:Mapping[str,Any])->None
numpy.random.SeedSequence(self,entropy:Union[None,int,Sequence[int],_ArrayLikeInt_co]=...,*,spawn_key:Sequence[int]=...,pool_size:int=...,n_children_spawned:int=...)
numpy.random.SeedSequence.__repr__(self)->str
numpy.random.SeedSequence.generate_state(self,n_words:int,dtype:Union[_DTypeLikeUint32,_DTypeLikeUint64]=...)->ndarray[Any, dtype[Union[uint32, uint64]]]
numpy.random.SeedSequence.spawn(self,n_children:int)->List[SeedSequence]
numpy.random.SeedSequence.state(self)->_SeedSeqState
numpy.random.bit_generator.BitGenerator(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...)
numpy.random.bit_generator.BitGenerator.__getstate__(self)->Dict[str, Any]
numpy.random.bit_generator.BitGenerator.__init__(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...)
numpy.random.bit_generator.BitGenerator.__reduce__(self)->Tuple[Callable[[str], BitGenerator], Tuple[str], Tuple[Dict[str, Any]]]
numpy.random.bit_generator.BitGenerator.__setstate__(self,state:Dict[str,Any])->None
numpy.random.bit_generator.BitGenerator._benchmark(self,cnt:int,method:str=...)->None
numpy.random.bit_generator.BitGenerator.cffi(self)->_Interface
numpy.random.bit_generator.BitGenerator.ctypes(self)->_Interface
numpy.random.bit_generator.BitGenerator.random_raw(self,size:None=...,output:Literal[True]=...)->int
numpy.random.bit_generator.BitGenerator.random_raw(self,size:Optional[_ShapeLike]=...,output:Literal[False]=...)->None
numpy.random.bit_generator.BitGenerator.random_raw(self,size:_ShapeLike=...,output:Literal[True]=...)->ndarray[Any, dtype[uint64]]
numpy.random.bit_generator.BitGenerator.state(self)->Mapping[str, Any]
numpy.random.bit_generator.BitGenerator.state(self,value:Mapping[str,Any])->None
numpy.random.bit_generator.ISeedSequence(abc.ABC)
numpy.random.bit_generator.ISeedSequence.generate_state(self,n_words:int,dtype:Union[_DTypeLikeUint32,_DTypeLikeUint64]=...)->ndarray[Any, dtype[Union[uint32, uint64]]]
numpy.random.bit_generator.ISpawnableSeedSequence(ISeedSequence)
numpy.random.bit_generator.ISpawnableSeedSequence.spawn(self:_T,n_children:int)->List[_T]
numpy.random.bit_generator.SeedSequence(self,entropy:Union[None,int,Sequence[int],_ArrayLikeInt_co]=...,*,spawn_key:Sequence[int]=...,pool_size:int=...,n_children_spawned:int=...)
numpy.random.bit_generator.SeedSequence.__init__(self,entropy:Union[None,int,Sequence[int],_ArrayLikeInt_co]=...,*,spawn_key:Sequence[int]=...,pool_size:int=...,n_children_spawned:int=...)
numpy.random.bit_generator.SeedSequence.__repr__(self)->str
numpy.random.bit_generator.SeedSequence.generate_state(self,n_words:int,dtype:Union[_DTypeLikeUint32,_DTypeLikeUint64]=...)->ndarray[Any, dtype[Union[uint32, uint64]]]
numpy.random.bit_generator.SeedSequence.spawn(self,n_children:int)->List[SeedSequence]
numpy.random.bit_generator.SeedSequence.state(self)->_SeedSeqState
numpy.random.bit_generator.SeedlessSeedSequence(ISpawnableSeedSequence)
numpy.random.bit_generator.SeedlessSeedSequence.generate_state(self,n_words:int,dtype:Union[_DTypeLikeUint32,_DTypeLikeUint64]=...)->ndarray[Any, dtype[Union[uint32, uint64]]]
numpy.random.bit_generator.SeedlessSeedSequence.spawn(self:_T,n_children:int)->List[_T]
numpy.random.bit_generator._Interface(NamedTuple)
numpy.random.bit_generator._SeedSeqState(TypedDict)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/_sfc64.pyi----------------------------------------
numpy.random.SFC64(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...)
numpy.random.SFC64.state(self)->_SFC64State
numpy.random.SFC64.state(self,value:_SFC64State)->None
numpy.random._sfc64.SFC64(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...)
numpy.random._sfc64.SFC64.__init__(self,seed:Union[None,_ArrayLikeInt_co,SeedSequence]=...)
numpy.random._sfc64.SFC64.state(self)->_SFC64State
numpy.random._sfc64.SFC64.state(self,value:_SFC64State)->None
numpy.random._sfc64._SFC64Internal(TypedDict)
numpy.random._sfc64._SFC64State(TypedDict)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/_pickle.py----------------------------------------
numpy.random._pickle.__bit_generator_ctor(bit_generator_name='MT19937')
numpy.random._pickle.__generator_ctor(bit_generator_name='MT19937')
numpy.random._pickle.__randomstate_ctor(bit_generator_name='MT19937')


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/setup.py----------------------------------------
A:numpy.random.setup.config->Configuration('random', parent_package, top_path)
A:numpy.random.setup.config_cmd->Configuration('random', parent_package, top_path).get_config_cmd()
A:numpy.random.setup.libs->get_mathlibs()
numpy.random.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/tests/test_randomstate_regression.py----------------------------------------
A:numpy.random.tests.test_randomstate_regression.r->numpy.random.vonmises(mu, 1, 50)
A:numpy.random.tests.test_randomstate_regression.rvsn->numpy.random.logseries(0.8, size=N)
A:numpy.random.tests.test_randomstate_regression.shuffled->list(t)
A:numpy.random.tests.test_randomstate_regression.expected->numpy.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 4, 2, 3, 3, 1, 5, 3, 1, 3]])
A:numpy.random.tests.test_randomstate_regression.m->M()
A:numpy.random.tests.test_randomstate_regression.res->numpy.array([0, 8, 7, 2, 1, 9, 4, 7, 0, 3])
A:numpy.random.tests.test_randomstate_regression.x->numpy.random.beta(0.0001, 0.0001, size=100)
A:numpy.random.tests.test_randomstate_regression.c->numpy.random.choice(10, replace=False, size=2)
A:numpy.random.tests.test_randomstate_regression.a->numpy.arange(5)
A:numpy.random.tests.test_randomstate_regression.orig->numpy.arange(3).view(N)
A:numpy.random.tests.test_randomstate_regression.perm->numpy.random.permutation(m)
A:numpy.random.tests.test_randomstate_regression.rs1->numpy.random.RandomState(123456789)
A:numpy.random.tests.test_randomstate_regression.rs2->numpy.random.RandomState(seed=123456789)
A:numpy.random.tests.test_randomstate_regression.actual->numpy.random.randint(2 ** 32, size=10)
numpy.random.tests.test_randomstate_regression.TestRegression
numpy.random.tests.test_randomstate_regression.TestRegression.test_VonMises_range(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_beta_small_parameters(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_call_within_randomstate(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_choice_retun_dtype(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_choice_sum_of_probs_tolerance(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_hypergeometric_range(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_logseries_convergence(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_multivariate_normal_size_types(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_n_zero_stream(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_named_argument_initialization(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_p_zero_stream(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_permutation_subclass(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_randint_117(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_shuffle_mixed_dimension(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_shuffle_of_array_of_different_length_strings(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_shuffle_of_array_of_objects(self)
numpy.random.tests.test_randomstate_regression.TestRegression.test_warns_byteorder(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/tests/test_random.py----------------------------------------
A:numpy.random.tests.test_random.s->tuple()
A:numpy.random.tests.test_random.zeros->numpy.zeros(2, dtype='int')
A:numpy.random.tests.test_random.x->numpy.random.randint(-5, -1, 5)
A:numpy.random.tests.test_random.self.prng->numpy.random.RandomState(self.seed)
A:numpy.random.tests.test_random.self.state->self.prng.get_state()
A:numpy.random.tests.test_random.old->self.prng.standard_normal(size=3)
A:numpy.random.tests.test_random.new->self.prng.standard_normal(size=3)
A:numpy.random.tests.test_random.state->self.prng.get_state()
A:numpy.random.tests.test_random.x1->self.prng.standard_normal(size=16)
A:numpy.random.tests.test_random.x2->self.prng.standard_normal(size=16)
A:numpy.random.tests.test_random.x3->self.prng.standard_normal(size=16)
A:numpy.random.tests.test_random.vals->self.rfunc(0, 2, size=2 ** 16, dtype=np.bool_)
A:numpy.random.tests.test_random.val->self.rfunc(0, 2, size=1000, dtype=bool).view(np.int8)
A:numpy.random.tests.test_random.res->hashlib.sha256(val).hexdigest()
A:numpy.random.tests.test_random.lbnd->numpy.int64(np.iinfo(np.int64).max)
A:numpy.random.tests.test_random.ubnd->numpy.uint64(np.iinfo(np.int64).max + 1)
A:numpy.random.tests.test_random.actual->logseries(p * 3)
A:numpy.random.tests.test_random.sample->self.rfunc(lbnd, ubnd, dtype=dt)
A:numpy.random.tests.test_random.desired->numpy.array([1, 1, 1])
A:numpy.random.tests.test_random.w->sup.record(RuntimeWarning)
A:numpy.random.tests.test_random.a->numpy.ma.masked_values(np.reshape(range(20), (5, 4)) % 3 - 1, -1)
A:numpy.random.tests.test_random.arr->arr.view(MyArr).view(MyArr)
A:numpy.random.tests.test_random.alist->conv([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])
A:numpy.random.tests.test_random.b->numpy.ma.masked_values(np.arange(20) % 3 - 1, -1)
A:numpy.random.tests.test_random.a_orig->numpy.ma.masked_values(np.reshape(range(20), (5, 4)) % 3 - 1, -1).copy()
A:numpy.random.tests.test_random.b_orig->numpy.ma.masked_values(np.arange(20) % 3 - 1, -1).copy()
A:numpy.random.tests.test_random.rng->numpy.random.default_rng(self.seed)
A:numpy.random.tests.test_random.alpha->numpy.array([0.54, -1e-16])
A:numpy.random.tests.test_random.p->numpy.array([51.72840233779265, 39.74494232180944])
A:numpy.random.tests.test_random.cov->numpy.array([[1, 0.1], [0.1, 1]], dtype=np.float32)
A:numpy.random.tests.test_random.throwing_float->numpy.array(1.0).view(ThrowingFloat)
A:numpy.random.tests.test_random.throwing_int->numpy.array(1).view(ThrowingInteger)
A:numpy.random.tests.test_random.r->numpy.random.vonmises(mu=0.0, kappa=1.1e-08, size=10 ** 6)
A:numpy.random.tests.test_random.self.seeds->range(4)
A:numpy.random.tests.test_random.out1->numpy.empty((len(self.seeds),) + sz)
A:numpy.random.tests.test_random.out2->numpy.empty((len(self.seeds),) + sz)
A:numpy.random.tests.test_random.out[...]->self.prng.get_state().multinomial(10, [1 / 6.0] * 6, size=10000)
A:numpy.random.tests.test_random.self.argOne->numpy.array([2])
A:numpy.random.tests.test_random.self.argTwo->numpy.array([3])
A:numpy.random.tests.test_random.self.argThree->numpy.array([4])
A:numpy.random.tests.test_random.out->func(self.argOne, self.argTwo[0], self.argThree)
A:numpy.random.tests.test_random.argTwo->numpy.array([0.5])
numpy.random.tests.test_random.TestBinomial
numpy.random.tests.test_random.TestBinomial.test_n_zero(self)
numpy.random.tests.test_random.TestBinomial.test_p_is_nan(self)
numpy.random.tests.test_random.TestBroadcast
numpy.random.tests.test_random.TestBroadcast.setSeed(self)
numpy.random.tests.test_random.TestBroadcast.setup(self)
numpy.random.tests.test_random.TestBroadcast.test_beta(self)
numpy.random.tests.test_random.TestBroadcast.test_binomial(self)
numpy.random.tests.test_random.TestBroadcast.test_chisquare(self)
numpy.random.tests.test_random.TestBroadcast.test_exponential(self)
numpy.random.tests.test_random.TestBroadcast.test_f(self)
numpy.random.tests.test_random.TestBroadcast.test_gamma(self)
numpy.random.tests.test_random.TestBroadcast.test_geometric(self)
numpy.random.tests.test_random.TestBroadcast.test_gumbel(self)
numpy.random.tests.test_random.TestBroadcast.test_hypergeometric(self)
numpy.random.tests.test_random.TestBroadcast.test_laplace(self)
numpy.random.tests.test_random.TestBroadcast.test_logistic(self)
numpy.random.tests.test_random.TestBroadcast.test_lognormal(self)
numpy.random.tests.test_random.TestBroadcast.test_logseries(self)
numpy.random.tests.test_random.TestBroadcast.test_negative_binomial(self)
numpy.random.tests.test_random.TestBroadcast.test_noncentral_chisquare(self)
numpy.random.tests.test_random.TestBroadcast.test_noncentral_f(self)
numpy.random.tests.test_random.TestBroadcast.test_noncentral_f_small_df(self)
numpy.random.tests.test_random.TestBroadcast.test_normal(self)
numpy.random.tests.test_random.TestBroadcast.test_pareto(self)
numpy.random.tests.test_random.TestBroadcast.test_poisson(self)
numpy.random.tests.test_random.TestBroadcast.test_power(self)
numpy.random.tests.test_random.TestBroadcast.test_rayleigh(self)
numpy.random.tests.test_random.TestBroadcast.test_standard_gamma(self)
numpy.random.tests.test_random.TestBroadcast.test_standard_t(self)
numpy.random.tests.test_random.TestBroadcast.test_triangular(self)
numpy.random.tests.test_random.TestBroadcast.test_uniform(self)
numpy.random.tests.test_random.TestBroadcast.test_vonmises(self)
numpy.random.tests.test_random.TestBroadcast.test_wald(self)
numpy.random.tests.test_random.TestBroadcast.test_weibull(self)
numpy.random.tests.test_random.TestBroadcast.test_zipf(self)
numpy.random.tests.test_random.TestMultinomial
numpy.random.tests.test_random.TestMultinomial.test_basic(self)
numpy.random.tests.test_random.TestMultinomial.test_int_negative_interval(self)
numpy.random.tests.test_random.TestMultinomial.test_multidimensional_pvals(self)
numpy.random.tests.test_random.TestMultinomial.test_size(self)
numpy.random.tests.test_random.TestMultinomial.test_zero_probability(self)
numpy.random.tests.test_random.TestRandint
numpy.random.tests.test_random.TestRandint.test_bounds_checking(self)
numpy.random.tests.test_random.TestRandint.test_full_range(self)
numpy.random.tests.test_random.TestRandint.test_in_bounds_fuzz(self)
numpy.random.tests.test_random.TestRandint.test_int64_uint64_corner_case(self)
numpy.random.tests.test_random.TestRandint.test_repeatability(self)
numpy.random.tests.test_random.TestRandint.test_respect_dtype_singleton(self)
numpy.random.tests.test_random.TestRandint.test_rng_zero_and_extremes(self)
numpy.random.tests.test_random.TestRandint.test_unsupported_type(self)
numpy.random.tests.test_random.TestRandomDist
numpy.random.tests.test_random.TestRandomDist.setup(self)
numpy.random.tests.test_random.TestRandomDist.test_beta(self)
numpy.random.tests.test_random.TestRandomDist.test_binomial(self)
numpy.random.tests.test_random.TestRandomDist.test_bytes(self)
numpy.random.tests.test_random.TestRandomDist.test_chisquare(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_exceptions(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_nan_probabilities(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_noninteger(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_nonuniform_noreplace(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_nonuniform_replace(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_return_shape(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_uniform_noreplace(self)
numpy.random.tests.test_random.TestRandomDist.test_choice_uniform_replace(self)
numpy.random.tests.test_random.TestRandomDist.test_dirichlet(self)
numpy.random.tests.test_random.TestRandomDist.test_dirichlet_bad_alpha(self)
numpy.random.tests.test_random.TestRandomDist.test_dirichlet_size(self)
numpy.random.tests.test_random.TestRandomDist.test_exponential(self)
numpy.random.tests.test_random.TestRandomDist.test_exponential_0(self)
numpy.random.tests.test_random.TestRandomDist.test_f(self)
numpy.random.tests.test_random.TestRandomDist.test_gamma(self)
numpy.random.tests.test_random.TestRandomDist.test_gamma_0(self)
numpy.random.tests.test_random.TestRandomDist.test_geometric(self)
numpy.random.tests.test_random.TestRandomDist.test_gumbel(self)
numpy.random.tests.test_random.TestRandomDist.test_gumbel_0(self)
numpy.random.tests.test_random.TestRandomDist.test_hypergeometric(self)
numpy.random.tests.test_random.TestRandomDist.test_laplace(self)
numpy.random.tests.test_random.TestRandomDist.test_laplace_0(self)
numpy.random.tests.test_random.TestRandomDist.test_logistic(self)
numpy.random.tests.test_random.TestRandomDist.test_lognormal(self)
numpy.random.tests.test_random.TestRandomDist.test_lognormal_0(self)
numpy.random.tests.test_random.TestRandomDist.test_logseries(self)
numpy.random.tests.test_random.TestRandomDist.test_multinomial(self)
numpy.random.tests.test_random.TestRandomDist.test_multivariate_normal(self)
numpy.random.tests.test_random.TestRandomDist.test_negative_binomial(self)
numpy.random.tests.test_random.TestRandomDist.test_noncentral_chisquare(self)
numpy.random.tests.test_random.TestRandomDist.test_noncentral_f(self)
numpy.random.tests.test_random.TestRandomDist.test_normal(self)
numpy.random.tests.test_random.TestRandomDist.test_normal_0(self)
numpy.random.tests.test_random.TestRandomDist.test_pareto(self)
numpy.random.tests.test_random.TestRandomDist.test_poisson(self)
numpy.random.tests.test_random.TestRandomDist.test_poisson_exceptions(self)
numpy.random.tests.test_random.TestRandomDist.test_power(self)
numpy.random.tests.test_random.TestRandomDist.test_rand(self)
numpy.random.tests.test_random.TestRandomDist.test_randint(self)
numpy.random.tests.test_random.TestRandomDist.test_randn(self)
numpy.random.tests.test_random.TestRandomDist.test_random(self)
numpy.random.tests.test_random.TestRandomDist.test_random_integers(self)
numpy.random.tests.test_random.TestRandomDist.test_random_integers_deprecated(self)
numpy.random.tests.test_random.TestRandomDist.test_random_integers_max_int(self)
numpy.random.tests.test_random.TestRandomDist.test_rayleigh(self)
numpy.random.tests.test_random.TestRandomDist.test_rayleigh_0(self)
numpy.random.tests.test_random.TestRandomDist.test_scalar_exception_propagation(self)
numpy.random.tests.test_random.TestRandomDist.test_shuffle(self)
numpy.random.tests.test_random.TestRandomDist.test_shuffle_masked(self)
numpy.random.tests.test_random.TestRandomDist.test_shuffle_memoryview(self)
numpy.random.tests.test_random.TestRandomDist.test_shuffle_no_object_unpacking(self,random,use_array_like)
numpy.random.tests.test_random.TestRandomDist.test_shuffle_untyped_warning(self,random)
numpy.random.tests.test_random.TestRandomDist.test_standard_cauchy(self)
numpy.random.tests.test_random.TestRandomDist.test_standard_exponential(self)
numpy.random.tests.test_random.TestRandomDist.test_standard_gamma(self)
numpy.random.tests.test_random.TestRandomDist.test_standard_gamma_0(self)
numpy.random.tests.test_random.TestRandomDist.test_standard_normal(self)
numpy.random.tests.test_random.TestRandomDist.test_standard_t(self)
numpy.random.tests.test_random.TestRandomDist.test_triangular(self)
numpy.random.tests.test_random.TestRandomDist.test_uniform(self)
numpy.random.tests.test_random.TestRandomDist.test_uniform_range_bounds(self)
numpy.random.tests.test_random.TestRandomDist.test_vonmises(self)
numpy.random.tests.test_random.TestRandomDist.test_vonmises_small(self)
numpy.random.tests.test_random.TestRandomDist.test_wald(self)
numpy.random.tests.test_random.TestRandomDist.test_weibull(self)
numpy.random.tests.test_random.TestRandomDist.test_weibull_0(self)
numpy.random.tests.test_random.TestRandomDist.test_zipf(self)
numpy.random.tests.test_random.TestSeed
numpy.random.tests.test_random.TestSeed.test_array(self)
numpy.random.tests.test_random.TestSeed.test_invalid_array(self)
numpy.random.tests.test_random.TestSeed.test_invalid_array_shape(self)
numpy.random.tests.test_random.TestSeed.test_invalid_scalar(self)
numpy.random.tests.test_random.TestSeed.test_scalar(self)
numpy.random.tests.test_random.TestSetState
numpy.random.tests.test_random.TestSetState.setup(self)
numpy.random.tests.test_random.TestSetState.test_backwards_compatibility(self)
numpy.random.tests.test_random.TestSetState.test_basic(self)
numpy.random.tests.test_random.TestSetState.test_gaussian_reset(self)
numpy.random.tests.test_random.TestSetState.test_gaussian_reset_in_media_res(self)
numpy.random.tests.test_random.TestSetState.test_negative_binomial(self)
numpy.random.tests.test_random.TestSingleEltArrayInput
numpy.random.tests.test_random.TestSingleEltArrayInput.setup(self)
numpy.random.tests.test_random.TestSingleEltArrayInput.test_one_arg_funcs(self)
numpy.random.tests.test_random.TestSingleEltArrayInput.test_three_arg_funcs(self)
numpy.random.tests.test_random.TestSingleEltArrayInput.test_two_arg_funcs(self)
numpy.random.tests.test_random.TestThread
numpy.random.tests.test_random.TestThread.check_function(self,function,sz)
numpy.random.tests.test_random.TestThread.setup(self)
numpy.random.tests.test_random.TestThread.test_exp(self)
numpy.random.tests.test_random.TestThread.test_multinomial(self)
numpy.random.tests.test_random.TestThread.test_normal(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/tests/test_seed_sequence.py----------------------------------------
A:numpy.random.tests.test_seed_sequence.expected->numpy.array(expected, dtype=np.uint32)
A:numpy.random.tests.test_seed_sequence.ss->SeedSequence(seed)
A:numpy.random.tests.test_seed_sequence.state->SeedSequence(seed).generate_state(len(expected))
A:numpy.random.tests.test_seed_sequence.state64->SeedSequence(seed).generate_state(len(expected64), dtype=np.uint64)
A:numpy.random.tests.test_seed_sequence.ss0->SeedSequence(42)
A:numpy.random.tests.test_seed_sequence.ss1->SeedSequence(42 << 32)
A:numpy.random.tests.test_seed_sequence.expected42->numpy.array([3444837047, 2669555309, 2046530742, 3581440988], dtype=np.uint32)
numpy.random.tests.test_seed_sequence.test_reference_data()
numpy.random.tests.test_seed_sequence.test_zero_padding()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/tests/test_generator_mt19937.py----------------------------------------
A:numpy.random.tests.test_generator_mt19937.random->Generator(MT19937(self.seed))
A:numpy.random.tests.test_generator_mt19937.s->Generator(MT19937(self.seed)).multivariate_normal(mean, cov, size=(n_s,), method=method)
A:numpy.random.tests.test_generator_mt19937.zeros->numpy.zeros(2, dtype='int')
A:numpy.random.tests.test_generator_mt19937.x->Generator(MT19937(self.seed)).negative_binomial(1, 0)
A:numpy.random.tests.test_generator_mt19937.p->numpy.array([51.72840233779265, 39.74494232180944])
A:numpy.random.tests.test_generator_mt19937.non_contig->Generator(MT19937(self.seed)).dirichlet(alpha, size=(3, 2))
A:numpy.random.tests.test_generator_mt19937.contig->Generator(MT19937(self.seed)).dirichlet(np.ascontiguousarray(alpha), size=(3, 2))
A:numpy.random.tests.test_generator_mt19937.int64_info->numpy.iinfo(np.int64)
A:numpy.random.tests.test_generator_mt19937.colors->numpy.array([10, 5, 20, 25])
A:numpy.random.tests.test_generator_mt19937.sample->Generator(MT19937(self.seed)).dirichlet(alpha, size=20000000)
A:numpy.random.tests.test_generator_mt19937.expected->numpy.array([[[1.0, 0.0], [1.0, 0.0]], [[1.0, 0.0], [1.0, 0.0]], [[1.0, 0.0], [1.0, 0.0]]])
A:numpy.random.tests.test_generator_mt19937.self.rg->Generator(MT19937(self.seed))
A:numpy.random.tests.test_generator_mt19937.old->self.rg.standard_normal(size=3)
A:numpy.random.tests.test_generator_mt19937.new->self.rg.standard_normal(size=3)
A:numpy.random.tests.test_generator_mt19937.vals->self.rfunc(0, 2 - endpoint, size=2 ** 16, endpoint=endpoint, dtype=bool)
A:numpy.random.tests.test_generator_mt19937.scalar->Generator(MT19937(self.seed)).integers(lbnd, ubnd, size=size, endpoint=endpoint, dtype=dt)
A:numpy.random.tests.test_generator_mt19937.scalar_array->Generator(MT19937(self.seed)).integers([lbnd], [ubnd], size=size, endpoint=endpoint, dtype=dt)
A:numpy.random.tests.test_generator_mt19937.array->Generator(MT19937(self.seed)).integers([lbnd] * size, [ubnd] * size, size=size, endpoint=endpoint, dtype=dt)
A:numpy.random.tests.test_generator_mt19937.val->Generator(MT19937(self.seed)).integers(lbnd, ubnd, size=1000, endpoint=endpoint, dtype=dt)
A:numpy.random.tests.test_generator_mt19937.res->hashlib.sha256(actual.view(np.int8)).hexdigest()
A:numpy.random.tests.test_generator_mt19937.val_bc->Generator(MT19937(self.seed)).integers([lbnd] * 1000, [ubnd] * 1000, endpoint=endpoint, dtype=dt)
A:numpy.random.tests.test_generator_mt19937.desired->numpy.array([[0, 0, 2, 1, 2, 0], [2, 3, 6, 4, 2, 3]], dtype=np.int64)
A:numpy.random.tests.test_generator_mt19937.low_a->numpy.array([[low] * 10])
A:numpy.random.tests.test_generator_mt19937.high_a->numpy.array([high] * 10)
A:numpy.random.tests.test_generator_mt19937.low_o->numpy.array([[low] * 10], dtype=object)
A:numpy.random.tests.test_generator_mt19937.high_o->numpy.array([high] * 10, dtype=object)
A:numpy.random.tests.test_generator_mt19937.lbnd->numpy.int64(np.iinfo(np.int64).max)
A:numpy.random.tests.test_generator_mt19937.ubnd->numpy.uint64(np.iinfo(np.int64).max + 1 - endpoint)
A:numpy.random.tests.test_generator_mt19937.actual->Generator(MT19937(self.seed)).multinomial([5, 20], [1 / 6.0] * 6)
A:numpy.random.tests.test_generator_mt19937.samples->Generator(MT19937(self.seed)).multivariate_normal(mean, cov, size=(3, 2), method=method)
A:numpy.random.tests.test_generator_mt19937.(values, counts)->numpy.unique(samples, return_counts=True)
A:numpy.random.tests.test_generator_mt19937.chi2->((counts - expected) ** 2 / expected).sum()
A:numpy.random.tests.test_generator_mt19937.a->Generator(MT19937(self.seed)).chisquare(5, size=3)
A:numpy.random.tests.test_generator_mt19937.arr->numpy.arange(9).reshape((3, 3))
A:numpy.random.tests.test_generator_mt19937.alist->conv([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])
A:numpy.random.tests.test_generator_mt19937.y1->numpy.arange(20).reshape(2, 10)
A:numpy.random.tests.test_generator_mt19937.y2->numpy.arange(20).reshape(2, 10).copy()
A:numpy.random.tests.test_generator_mt19937.b->Generator(MT19937(self.seed)).chisquare(5, size=(4, 3))
A:numpy.random.tests.test_generator_mt19937.a_orig->Generator(MT19937(self.seed)).chisquare(5, size=3).copy()
A:numpy.random.tests.test_generator_mt19937.b_orig->Generator(MT19937(self.seed)).chisquare(5, size=(4, 3)).copy()
A:numpy.random.tests.test_generator_mt19937.y->Generator(MT19937(self.seed)).permuted([])
A:numpy.random.tests.test_generator_mt19937.x0->numpy.arange(22).reshape(2, 11)
A:numpy.random.tests.test_generator_mt19937.x1->numpy.arange(22).reshape(2, 11).copy()
A:numpy.random.tests.test_generator_mt19937.out->numpy.empty((2, 3), dtype=dtype, order=order)
A:numpy.random.tests.test_generator_mt19937.alpha->numpy.array([0.02, 0.04, 0.03])
A:numpy.random.tests.test_generator_mt19937.bad_alpha->numpy.array([0.54, -1e-16])
A:numpy.random.tests.test_generator_mt19937.sample_mean->Generator(MT19937(self.seed)).dirichlet(alpha, size=20000000).mean(axis=0)
A:numpy.random.tests.test_generator_mt19937.cov->numpy.array([[2, 1], [1, 2]])
A:numpy.random.tests.test_generator_mt19937.w->sup.record(RuntimeWarning)
A:numpy.random.tests.test_generator_mt19937.mu->numpy.ones(3)
A:numpy.random.tests.test_generator_mt19937.mean->numpy.array([1, 2])
A:numpy.random.tests.test_generator_mt19937.result->func([[2145.12], [2145.12]], [2145.12, 2145.12])
A:numpy.random.tests.test_generator_mt19937.throwing_float->numpy.array(1.0).view(ThrowingFloat)
A:numpy.random.tests.test_generator_mt19937.throwing_int->numpy.array(1).view(ThrowingInteger)
A:numpy.random.tests.test_generator_mt19937.r->Generator(MT19937(self.seed)).vonmises(mu, kappa, 50)
A:numpy.random.tests.test_generator_mt19937.rs->RandomState(random.bit_generator)
A:numpy.random.tests.test_generator_mt19937.random_state_vals->RandomState(random.bit_generator).vonmises(0, kappa, size=10)
A:numpy.random.tests.test_generator_mt19937.gen_vals->Generator(MT19937(self.seed)).vonmises(0, kappa, size=10)
A:numpy.random.tests.test_generator_mt19937.self.seeds->range(4)
A:numpy.random.tests.test_generator_mt19937.out1->numpy.empty((len(self.seeds),) + sz)
A:numpy.random.tests.test_generator_mt19937.out2->numpy.empty((len(self.seeds),) + sz)
A:numpy.random.tests.test_generator_mt19937.out[...]->state.multinomial(10, [1 / 6.0] * 6, size=10000)
A:numpy.random.tests.test_generator_mt19937.self.argOne->numpy.array([2])
A:numpy.random.tests.test_generator_mt19937.self.argTwo->numpy.array([3])
A:numpy.random.tests.test_generator_mt19937.self.argThree->numpy.array([4])
A:numpy.random.tests.test_generator_mt19937.argTwo->numpy.array([0.5])
A:numpy.random.tests.test_generator_mt19937.high->numpy.array([1])
A:numpy.random.tests.test_generator_mt19937.low->numpy.array([0])
A:numpy.random.tests.test_generator_mt19937.mt19937->MT19937(seed)
A:numpy.random.tests.test_generator_mt19937.key->key.byteswap().byteswap()
A:numpy.random.tests.test_generator_mt19937.sha256->hashlib.sha256(key)
A:numpy.random.tests.test_generator_mt19937.jumped->MT19937(seed).jumped()
A:numpy.random.tests.test_generator_mt19937.sigma->numpy.ones(3)
A:numpy.random.tests.test_generator_mt19937.shape->numpy.ones((4, 3))
A:numpy.random.tests.test_generator_mt19937.c->Generator(MT19937(self.seed)).chisquare(5, size=(5, 4, 3))
A:numpy.random.tests.test_generator_mt19937.gen->Generator(MT19937(0))
A:numpy.random.tests.test_generator_mt19937.variates->dist(out=out, dtype=dtype, size=out.shape)
numpy.random.tests.test_generator_mt19937.TestBinomial
numpy.random.tests.test_generator_mt19937.TestBinomial.test_n_zero(self)
numpy.random.tests.test_generator_mt19937.TestBinomial.test_p_is_nan(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast
numpy.random.tests.test_generator_mt19937.TestBroadcast.setup(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_beta(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_binomial(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_chisquare(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_exponential(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_f(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_gamma(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_geometric(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_gumbel(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_hypergeometric(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_laplace(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_logistic(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_lognormal(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_logseries(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_multinomial(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_negative_binomial(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_noncentral_chisquare(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_noncentral_f(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_noncentral_f_small_df(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_normal(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_pareto(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_poisson(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_power(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_rayleigh(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_standard_gamma(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_standard_t(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_triangular(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_uniform(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_vonmises(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_wald(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_weibull(self)
numpy.random.tests.test_generator_mt19937.TestBroadcast.test_zipf(self)
numpy.random.tests.test_generator_mt19937.TestIntegers
numpy.random.tests.test_generator_mt19937.TestIntegers.test_bounds_checking(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_bounds_checking_array(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_error_byteorder(self)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_full_range(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_full_range_array(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_in_bounds_fuzz(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_int64_uint64_broadcast_exceptions(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_int64_uint64_corner_case(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_integers_small_dtype_chisquared(self,sample_size,high,dtype,chi2max)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_repeatability(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_repeatability_32bit_boundary(self,bound,expected)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_repeatability_32bit_boundary_broadcasting(self)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_repeatability_broadcasting(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_respect_dtype_array(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_respect_dtype_singleton(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_rng_zero_and_extremes(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_rng_zero_and_extremes_array(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_scalar_array_equiv(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_unsupported_type(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestIntegers.test_zero_size(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestMultinomial
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_basic(self)
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_int_negative_interval(self)
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_invalid_n(self)
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_invalid_prob(self)
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_multidimensional_pvals(self)
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_multinomial_pvals_float32(self)
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_p_non_contiguous(self)
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_size(self)
numpy.random.tests.test_generator_mt19937.TestMultinomial.test_zero_probability(self)
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric.setup(self)
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric.test_argument_validation(self)
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric.test_edge_cases(self,method)
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric.test_repeatability1(self)
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric.test_repeatability2(self)
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric.test_repeatability3(self)
numpy.random.tests.test_generator_mt19937.TestMultivariateHypergeometric.test_typical_cases(self,nsample,method,size)
numpy.random.tests.test_generator_mt19937.TestRandomDist
numpy.random.tests.test_generator_mt19937.TestRandomDist.setup(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_beta(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_binomial(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_bytes(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_chisquare(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_exceptions(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_large_sample(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_multidimensional_custom_axis(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_multidimensional_default_axis(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_nan_probabilities(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_noninteger(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_nonuniform_noreplace(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_nonuniform_replace(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_p_non_contiguous(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_return_shape(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_return_type(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_uniform_noreplace(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_choice_uniform_replace(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_dirichlet(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_dirichlet_alpha_non_contiguous(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_dirichlet_bad_alpha(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_dirichlet_moderately_small_alpha(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_dirichlet_size(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_dirichlet_small_alpha(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_exponential(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_exponential_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_f(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_gamma(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_gamma_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_geometric(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_geometric_exceptions(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_gumbel(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_gumbel_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_hypergeometric(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_integers(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_integers_closed(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_integers_masked(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_integers_max_int(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_laplace(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_laplace_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_logistic(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_lognormal(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_lognormal_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_logseries(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_logseries_exceptions(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_multinomial(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_multivariate_normal(self,method)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_multivariate_normal_basic_stats(self,method)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_negative_binomial(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_negative_binomial_exceptions(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_negative_binomial_p0_exception(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_noncentral_chisquare(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_noncentral_f(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_noncentral_f_nan(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_normal(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_normal_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_out_size_mismatch(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_pareto(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permutation(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permutation_custom_axis(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permutation_exceptions(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permuted(self,dtype,axis,expected)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permuted_empty(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permuted_out_with_wrong_shape(self,outshape)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permuted_out_with_wrong_type(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_permuted_with_strides(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_poisson(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_poisson_exceptions(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_power(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_random(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_random_float(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_random_float_scalar(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_random_unsupported_type(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_rayleigh(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_rayleigh_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_scalar_exception_propagation(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_shuffle(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_shuffle_axis_nonsquare(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_shuffle_custom_axis(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_shuffle_custom_axis_empty(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_shuffle_exceptions(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_shuffle_masked(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_cauchy(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_expoential_type_error(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_exponential(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_gamma(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_gamma_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_gamma_float(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_gamma_unknown_type(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_gammma_float_out(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_gammma_scalar_float(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_normal(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_normal_unsupported_type(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_standard_t(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_triangular(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_uniform(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_uniform_neg_range(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_uniform_range_bounds(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_uniform_zero_range(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_vonmises(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_vonmises_large_kappa(self,kappa)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_vonmises_large_kappa_range(self,mu,kappa)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_vonmises_nan(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_vonmises_small(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_wald(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_weibull(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_weibull_0(self)
numpy.random.tests.test_generator_mt19937.TestRandomDist.test_zipf(self)
numpy.random.tests.test_generator_mt19937.TestSeed
numpy.random.tests.test_generator_mt19937.TestSeed.test_array(self)
numpy.random.tests.test_generator_mt19937.TestSeed.test_invalid_array(self)
numpy.random.tests.test_generator_mt19937.TestSeed.test_invalid_scalar(self)
numpy.random.tests.test_generator_mt19937.TestSeed.test_noninstantized_bitgen(self)
numpy.random.tests.test_generator_mt19937.TestSeed.test_scalar(self)
numpy.random.tests.test_generator_mt19937.TestSeed.test_seedsequence(self)
numpy.random.tests.test_generator_mt19937.TestSetState
numpy.random.tests.test_generator_mt19937.TestSetState.setup(self)
numpy.random.tests.test_generator_mt19937.TestSetState.test_gaussian_reset(self)
numpy.random.tests.test_generator_mt19937.TestSetState.test_gaussian_reset_in_media_res(self)
numpy.random.tests.test_generator_mt19937.TestSetState.test_negative_binomial(self)
numpy.random.tests.test_generator_mt19937.TestSingleEltArrayInput
numpy.random.tests.test_generator_mt19937.TestSingleEltArrayInput.setup(self)
numpy.random.tests.test_generator_mt19937.TestSingleEltArrayInput.test_integers(self,endpoint)
numpy.random.tests.test_generator_mt19937.TestSingleEltArrayInput.test_one_arg_funcs(self)
numpy.random.tests.test_generator_mt19937.TestSingleEltArrayInput.test_three_arg_funcs(self)
numpy.random.tests.test_generator_mt19937.TestSingleEltArrayInput.test_two_arg_funcs(self)
numpy.random.tests.test_generator_mt19937.TestThread
numpy.random.tests.test_generator_mt19937.TestThread.check_function(self,function,sz)
numpy.random.tests.test_generator_mt19937.TestThread.setup(self)
numpy.random.tests.test_generator_mt19937.TestThread.test_exp(self)
numpy.random.tests.test_generator_mt19937.TestThread.test_multinomial(self)
numpy.random.tests.test_generator_mt19937.TestThread.test_normal(self)
numpy.random.tests.test_generator_mt19937.endpoint(request)
numpy.random.tests.test_generator_mt19937.test_broadcast_size_error()
numpy.random.tests.test_generator_mt19937.test_broadcast_size_scalar()
numpy.random.tests.test_generator_mt19937.test_c_contig_req_out(dtype)
numpy.random.tests.test_generator_mt19937.test_contig_req_out(dist,order,dtype)
numpy.random.tests.test_generator_mt19937.test_jumped(config)
numpy.random.tests.test_generator_mt19937.test_ragged_shuffle()
numpy.random.tests.test_generator_mt19937.test_single_arg_integer_exception(high,endpoint)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/tests/test_regression.py----------------------------------------
A:numpy.random.tests.test_regression.r->numpy.random.mtrand.vonmises(mu, 1, 50)
A:numpy.random.tests.test_regression.rvsn->numpy.random.logseries(0.8, size=N)
A:numpy.random.tests.test_regression.shuffled->list(t)
A:numpy.random.tests.test_regression.expected->numpy.array([t[0], t[3], t[1], t[2]], dtype=object)
A:numpy.random.tests.test_regression.m->M()
A:numpy.random.tests.test_regression.res->numpy.array([0, 8, 7, 2, 1, 9, 4, 7, 0, 3])
A:numpy.random.tests.test_regression.x->numpy.random.beta(0.0001, 0.0001, size=100)
A:numpy.random.tests.test_regression.c->numpy.random.choice(a, p=probs)
A:numpy.random.tests.test_regression.a->numpy.arange(5)
A:numpy.random.tests.test_regression.orig->numpy.arange(3).view(N)
A:numpy.random.tests.test_regression.perm->numpy.random.permutation(m)
numpy.random.tests.test_regression.TestRegression
numpy.random.tests.test_regression.TestRegression.test_VonMises_range(self)
numpy.random.tests.test_regression.TestRegression.test_beta_small_parameters(self)
numpy.random.tests.test_regression.TestRegression.test_call_within_randomstate(self)
numpy.random.tests.test_regression.TestRegression.test_choice_sum_of_probs_tolerance(self)
numpy.random.tests.test_regression.TestRegression.test_hypergeometric_range(self)
numpy.random.tests.test_regression.TestRegression.test_logseries_convergence(self)
numpy.random.tests.test_regression.TestRegression.test_multivariate_normal_size_types(self)
numpy.random.tests.test_regression.TestRegression.test_permutation_subclass(self)
numpy.random.tests.test_regression.TestRegression.test_shuffle_mixed_dimension(self)
numpy.random.tests.test_regression.TestRegression.test_shuffle_of_array_of_different_length_strings(self)
numpy.random.tests.test_regression.TestRegression.test_shuffle_of_array_of_objects(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/tests/test_generator_mt19937_regressions.py----------------------------------------
A:numpy.random.tests.test_generator_mt19937_regressions.mt19937->Generator(MT19937(1))
A:numpy.random.tests.test_generator_mt19937_regressions.r->Generator(MT19937(1)).vonmises(mu, 1, 50)
A:numpy.random.tests.test_generator_mt19937_regressions.rvsn->Generator(MT19937(1)).logseries(0.8, size=N)
A:numpy.random.tests.test_generator_mt19937_regressions.shuffled->numpy.array(t, dtype=object)
A:numpy.random.tests.test_generator_mt19937_regressions.expected->numpy.array([0.0], dtype=np.float32)
A:numpy.random.tests.test_generator_mt19937_regressions.res->numpy.array([1, 8, 0, 1, 5, 3, 3, 8, 1, 4])
A:numpy.random.tests.test_generator_mt19937_regressions.m->M()
A:numpy.random.tests.test_generator_mt19937_regressions.x->Generator(MT19937(1)).beta(0.0001, 0.0001, size=100)
A:numpy.random.tests.test_generator_mt19937_regressions.c->Generator(MT19937(1)).choice(a, p=probs)
A:numpy.random.tests.test_generator_mt19937_regressions.a->numpy.arange(5)
A:numpy.random.tests.test_generator_mt19937_regressions.orig->numpy.arange(3).view(N)
A:numpy.random.tests.test_generator_mt19937_regressions.perm->Generator(MT19937(1)).permutation(m)
A:numpy.random.tests.test_generator_mt19937_regressions.actual->Generator(MT19937(1)).standard_gamma([0.0], dtype='float')
numpy.random.tests.test_generator_mt19937_regressions.TestRegression
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_beta_small_parameters(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_call_within_randomstate(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_choice_sum_of_probs_tolerance(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_gamma_0(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_hypergeometric_range(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_logseries_convergence(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_multivariate_normal_size_types(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_permutation_subclass(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_shuffle_mixed_dimension(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_shuffle_of_array_of_different_length_strings(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_shuffle_of_array_of_objects(self)
numpy.random.tests.test_generator_mt19937_regressions.TestRegression.test_vonmises_range(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/tests/test_randomstate.py----------------------------------------
A:numpy.random.tests.test_randomstate.s->tuple()
A:numpy.random.tests.test_randomstate.rs->numpy.random.RandomState(self.seed)
A:numpy.random.tests.test_randomstate.zeros->numpy.zeros(2, dtype='int')
A:numpy.random.tests.test_randomstate.x->numpy.array(3)
A:numpy.random.tests.test_randomstate.p->numpy.array([51.72840233779265, 39.74494232180944])
A:numpy.random.tests.test_randomstate.non_contig->numpy.random.dirichlet(alpha, size=(3, 2))
A:numpy.random.tests.test_randomstate.contig->numpy.random.dirichlet(np.ascontiguousarray(alpha), size=(3, 2))
A:numpy.random.tests.test_randomstate.self.random_state->numpy.random.RandomState(self.seed)
A:numpy.random.tests.test_randomstate.self.state->self.random_state.get_state()
A:numpy.random.tests.test_randomstate.old->self.random_state.standard_normal(size=3)
A:numpy.random.tests.test_randomstate.new->self.random_state.standard_normal(size=3)
A:numpy.random.tests.test_randomstate.state->self.random_state.get_state(legacy=False)
A:numpy.random.tests.test_randomstate.x1->self.random_state.standard_normal(size=16)
A:numpy.random.tests.test_randomstate.x2->self.random_state.standard_normal(size=16)
A:numpy.random.tests.test_randomstate.x3->self.random_state.standard_normal(size=16)
A:numpy.random.tests.test_randomstate.w->sup.record(RuntimeWarning)
A:numpy.random.tests.test_randomstate.pickled->self.random_state.get_state(legacy=False)
A:numpy.random.tests.test_randomstate.rs_unpick->pickle.loads(pickle.dumps(self.random_state))
A:numpy.random.tests.test_randomstate.unpickled->pickle.loads(pickle.dumps(self.random_state)).get_state(legacy=False)
A:numpy.random.tests.test_randomstate.attr_state->self.random_state.__getstate__()
A:numpy.random.tests.test_randomstate.vals->self.rfunc(0, 2, size=2 ** 16, dtype=np.bool_)
A:numpy.random.tests.test_randomstate.val->val.byteswap().byteswap()
A:numpy.random.tests.test_randomstate.res->hashlib.sha256(val.view(np.int8)).hexdigest()
A:numpy.random.tests.test_randomstate.desired->numpy.array([1, 1, 1])
A:numpy.random.tests.test_randomstate.lbnd->numpy.int64(np.iinfo(np.int64).max)
A:numpy.random.tests.test_randomstate.ubnd->numpy.uint64(np.iinfo(np.int64).max + 1)
A:numpy.random.tests.test_randomstate.actual->f(*args, size=2)
A:numpy.random.tests.test_randomstate.sample->self.rfunc(lbnd, ubnd, dtype=dt)
A:numpy.random.tests.test_randomstate.a->numpy.array([51.72840233779265, -1.0, 39.74494232180944])
A:numpy.random.tests.test_randomstate.arr->numpy.empty(1, dtype=object)
A:numpy.random.tests.test_randomstate.alist->conv([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])
A:numpy.random.tests.test_randomstate.b->numpy.ma.masked_values(np.arange(20) % 3 - 1, -1)
A:numpy.random.tests.test_randomstate.a_orig->numpy.array([51.72840233779265, -1.0, 39.74494232180944]).copy()
A:numpy.random.tests.test_randomstate.b_orig->numpy.ma.masked_values(np.arange(20) % 3 - 1, -1).copy()
A:numpy.random.tests.test_randomstate.alpha->numpy.array([0.54, -1e-16])
A:numpy.random.tests.test_randomstate.bad_alpha->numpy.array([0.54, -1e-16])
A:numpy.random.tests.test_randomstate.cov->numpy.eye(2)
A:numpy.random.tests.test_randomstate.mu->numpy.zeros(2)
A:numpy.random.tests.test_randomstate.throwing_float->numpy.array(1.0).view(ThrowingFloat)
A:numpy.random.tests.test_randomstate.throwing_int->numpy.array(1).view(ThrowingInteger)
A:numpy.random.tests.test_randomstate.r->numpy.random.vonmises(mu=0.0, kappa=np.nan)
A:numpy.random.tests.test_randomstate.self.seeds->range(4)
A:numpy.random.tests.test_randomstate.out1->numpy.empty((len(self.seeds),) + sz)
A:numpy.random.tests.test_randomstate.out2->numpy.empty((len(self.seeds),) + sz)
A:numpy.random.tests.test_randomstate.out[...]->self.random_state.get_state(legacy=False).multinomial(10, [1 / 6.0] * 6, size=10000)
A:numpy.random.tests.test_randomstate.self.argOne->numpy.array([2])
A:numpy.random.tests.test_randomstate.self.argTwo->numpy.array([3])
A:numpy.random.tests.test_randomstate.self.argThree->numpy.array([4])
A:numpy.random.tests.test_randomstate.out->func(self.argOne, self.argTwo[0], self.argThree)
A:numpy.random.tests.test_randomstate.argTwo->numpy.array([0.5])
A:numpy.random.tests.test_randomstate.f->getattr(random, fname)
numpy.random.tests.test_randomstate.TestBinomial
numpy.random.tests.test_randomstate.TestBinomial.test_n_zero(self)
numpy.random.tests.test_randomstate.TestBinomial.test_p_is_nan(self)
numpy.random.tests.test_randomstate.TestBroadcast
numpy.random.tests.test_randomstate.TestBroadcast.set_seed(self)
numpy.random.tests.test_randomstate.TestBroadcast.setup(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_beta(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_binomial(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_chisquare(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_exponential(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_f(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_gamma(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_geometric(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_gumbel(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_hypergeometric(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_laplace(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_logistic(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_lognormal(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_logseries(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_negative_binomial(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_noncentral_chisquare(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_noncentral_f(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_noncentral_f_small_df(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_normal(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_pareto(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_poisson(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_power(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_rayleigh(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_standard_gamma(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_standard_t(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_triangular(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_uniform(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_vonmises(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_wald(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_weibull(self)
numpy.random.tests.test_randomstate.TestBroadcast.test_zipf(self)
numpy.random.tests.test_randomstate.TestMultinomial
numpy.random.tests.test_randomstate.TestMultinomial.test_basic(self)
numpy.random.tests.test_randomstate.TestMultinomial.test_int_negative_interval(self)
numpy.random.tests.test_randomstate.TestMultinomial.test_invalid_n(self)
numpy.random.tests.test_randomstate.TestMultinomial.test_invalid_prob(self)
numpy.random.tests.test_randomstate.TestMultinomial.test_multinomial_pvals_float32(self)
numpy.random.tests.test_randomstate.TestMultinomial.test_p_non_contiguous(self)
numpy.random.tests.test_randomstate.TestMultinomial.test_size(self)
numpy.random.tests.test_randomstate.TestMultinomial.test_zero_probability(self)
numpy.random.tests.test_randomstate.TestRandint
numpy.random.tests.test_randomstate.TestRandint.test_bounds_checking(self)
numpy.random.tests.test_randomstate.TestRandint.test_full_range(self)
numpy.random.tests.test_randomstate.TestRandint.test_in_bounds_fuzz(self)
numpy.random.tests.test_randomstate.TestRandint.test_int64_uint64_corner_case(self)
numpy.random.tests.test_randomstate.TestRandint.test_repeatability(self)
numpy.random.tests.test_randomstate.TestRandint.test_repeatability_32bit_boundary_broadcasting(self)
numpy.random.tests.test_randomstate.TestRandint.test_respect_dtype_singleton(self)
numpy.random.tests.test_randomstate.TestRandint.test_rng_zero_and_extremes(self)
numpy.random.tests.test_randomstate.TestRandint.test_unsupported_type(self)
numpy.random.tests.test_randomstate.TestRandomDist
numpy.random.tests.test_randomstate.TestRandomDist.setup(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_beta(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_binomial(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_bytes(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_chisquare(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_exceptions(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_nan_probabilities(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_noninteger(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_nonuniform_noreplace(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_nonuniform_replace(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_p_non_contiguous(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_return_shape(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_uniform_noreplace(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_choice_uniform_replace(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_dirichlet(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_dirichlet_alpha_non_contiguous(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_dirichlet_bad_alpha(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_dirichlet_size(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_exponential(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_exponential_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_f(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_gamma(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_gamma_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_geometric(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_geometric_exceptions(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_gumbel(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_gumbel_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_hypergeometric(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_laplace(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_laplace_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_logistic(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_lognormal(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_lognormal_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_logseries(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_logseries_exceptions(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_multinomial(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_multivariate_normal(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_negative_binomial(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_negative_binomial_exceptions(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_noncentral_chisquare(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_noncentral_f(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_noncentral_f_nan(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_normal(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_normal_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_pareto(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_permutation(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_poisson(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_poisson_exceptions(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_power(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_rand(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_rand_singleton(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_randint(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_randn(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_randn_singleton(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_random_integers(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_random_integers_deprecated(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_random_integers_max_int(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_random_sample(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_rayleigh(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_rayleigh_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_scalar_exception_propagation(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_shuffle(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_shuffle_masked(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_standard_cauchy(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_standard_exponential(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_standard_gamma(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_standard_gamma_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_standard_normal(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_standard_t(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_tomaxint(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_triangular(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_uniform(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_uniform_range_bounds(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_vonmises(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_vonmises_large(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_vonmises_nan(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_vonmises_small(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_wald(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_weibull(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_weibull_0(self)
numpy.random.tests.test_randomstate.TestRandomDist.test_zipf(self)
numpy.random.tests.test_randomstate.TestSeed
numpy.random.tests.test_randomstate.TestSeed.test_array(self)
numpy.random.tests.test_randomstate.TestSeed.test_cannot_seed(self)
numpy.random.tests.test_randomstate.TestSeed.test_invalid_array(self)
numpy.random.tests.test_randomstate.TestSeed.test_invalid_array_shape(self)
numpy.random.tests.test_randomstate.TestSeed.test_invalid_initialization(self)
numpy.random.tests.test_randomstate.TestSeed.test_invalid_scalar(self)
numpy.random.tests.test_randomstate.TestSeed.test_scalar(self)
numpy.random.tests.test_randomstate.TestSetState
numpy.random.tests.test_randomstate.TestSetState.setup(self)
numpy.random.tests.test_randomstate.TestSetState.test_backwards_compatibility(self)
numpy.random.tests.test_randomstate.TestSetState.test_basic(self)
numpy.random.tests.test_randomstate.TestSetState.test_gaussian_reset(self)
numpy.random.tests.test_randomstate.TestSetState.test_gaussian_reset_in_media_res(self)
numpy.random.tests.test_randomstate.TestSetState.test_get_state_warning(self)
numpy.random.tests.test_randomstate.TestSetState.test_invalid_legacy_state_setting(self)
numpy.random.tests.test_randomstate.TestSetState.test_negative_binomial(self)
numpy.random.tests.test_randomstate.TestSetState.test_pickle(self)
numpy.random.tests.test_randomstate.TestSetState.test_repr(self)
numpy.random.tests.test_randomstate.TestSetState.test_state_setting(self)
numpy.random.tests.test_randomstate.TestSingleEltArrayInput
numpy.random.tests.test_randomstate.TestSingleEltArrayInput.setup(self)
numpy.random.tests.test_randomstate.TestSingleEltArrayInput.test_one_arg_funcs(self)
numpy.random.tests.test_randomstate.TestSingleEltArrayInput.test_three_arg_funcs(self)
numpy.random.tests.test_randomstate.TestSingleEltArrayInput.test_two_arg_funcs(self)
numpy.random.tests.test_randomstate.TestThread
numpy.random.tests.test_randomstate.TestThread.check_function(self,function,sz)
numpy.random.tests.test_randomstate.TestThread.setup(self)
numpy.random.tests.test_randomstate.TestThread.test_exp(self)
numpy.random.tests.test_randomstate.TestThread.test_multinomial(self)
numpy.random.tests.test_randomstate.TestThread.test_normal(self)
numpy.random.tests.test_randomstate.assert_mt19937_state_equal(a,b)
numpy.random.tests.test_randomstate.int_func(request)
numpy.random.tests.test_randomstate.test_broadcast_size_error()
numpy.random.tests.test_randomstate.test_integer_dtype(int_func)
numpy.random.tests.test_randomstate.test_integer_repeat(int_func)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/tests/test_smoke.py----------------------------------------
A:numpy.random.tests.test_smoke.val->f(size=(5, 5))
A:numpy.random.tests.test_smoke.b->self.rg.integers([upper] * 10, dtype=dtype)
A:numpy.random.tests.test_smoke.c->self.rg.integers(lower, upper, size=10, dtype=dtype)
A:numpy.random.tests.test_smoke.d->self.rg.integers(np.array([lower] * 10), np.array([upper], dtype=object), size=10, dtype=dtype)
A:numpy.random.tests.test_smoke.e->self.rg.integers(np.array([lower] * 10), np.array([upper] * 10), size=10, dtype=dtype)
A:numpy.random.tests.test_smoke.g->numpy.arange(2.0, 12.0).reshape((1, 10, 1))
A:numpy.random.tests.test_smoke.cls.rg->numpy.random.default_rng(*cls.seed)
A:numpy.random.tests.test_smoke.cls.vec_1d->numpy.arange(2.0, 102.0)
A:numpy.random.tests.test_smoke.cls.mat->numpy.arange(2.0, 102.0, 0.01).reshape((100, 100))
A:numpy.random.tests.test_smoke.rg->Generator(self.bit_generator())
A:numpy.random.tests.test_smoke.bit_gen2->self.rg.bit_generator.jumped()
A:numpy.random.tests.test_smoke.bit_gen3->self.rg.bit_generator.jumped()
A:numpy.random.tests.test_smoke.r->self.rg.uniform(-1.0, np.array([0.0] * 10), size=10)
A:numpy.random.tests.test_smoke.randoms->self.rg.standard_exponential(10, dtype='float32', method='inv')
A:numpy.random.tests.test_smoke.int_1->self.rg.integers(2 ** 31)
A:numpy.random.tests.test_smoke.int_2->self.rg.integers(2 ** 31)
A:numpy.random.tests.test_smoke.rg2->Generator(self.bit_generator())
A:numpy.random.tests.test_smoke.n1->Generator(self.bit_generator()).random(size=10, dtype='float32')
A:numpy.random.tests.test_smoke.n2->Generator(self.bit_generator()).random(size=10, dtype='float32')
A:numpy.random.tests.test_smoke.original->numpy.arange(200, 0, -1)
A:numpy.random.tests.test_smoke.permuted->self.rg.permutation(original)
A:numpy.random.tests.test_smoke.vals->self.rg.multinomial(100, [1.0 / 3, 2.0 / 3], size=10)
A:numpy.random.tests.test_smoke.x->self.rg.multivariate_normal(mean, cov, 5000)
A:numpy.random.tests.test_smoke.x_zig->self.rg.multivariate_normal(mean, cov, 5000)
A:numpy.random.tests.test_smoke.x_inv->self.rg.multivariate_normal(mean, cov, 5000)
A:numpy.random.tests.test_smoke.s->self.rg.dirichlet((10, 5, 3), 20)
A:numpy.random.tests.test_smoke.pick->pickle.dumps(self.rg)
A:numpy.random.tests.test_smoke.unpick->pickle.loads(pick)
A:numpy.random.tests.test_smoke.seed->numpy.arange(1500, dtype=dtype)
A:numpy.random.tests.test_smoke.bg->self.bit_generator(seed[0])
A:numpy.random.tests.test_smoke.r1->Generator(self.bit_generator()).standard_normal(11, dtype=np.float32)
A:numpy.random.tests.test_smoke.r2->Generator(self.bit_generator()).standard_normal(11, dtype=np.float32)
A:numpy.random.tests.test_smoke.existing->numpy.zeros(size, dtype=np.float64)
A:numpy.random.tests.test_smoke.direct->Generator(self.bit_generator()).standard_gamma(mu, size=size, dtype=np.float32)
A:numpy.random.tests.test_smoke.sized->numpy.empty(size)
A:numpy.random.tests.test_smoke.info->numpy.iinfo(dtype)
A:numpy.random.tests.test_smoke.a->self.rg.integers(0, upper, size=10, dtype=dtype)
A:numpy.random.tests.test_smoke.high->numpy.array([1])
A:numpy.random.tests.test_smoke.low->numpy.array([0])
A:numpy.random.tests.test_smoke.out->self.rg.integers(low, high[0], dtype=dtype)
A:numpy.random.tests.test_smoke.nprg->numpy.random.RandomState()
A:numpy.random.tests.test_smoke.state->numpy.random.RandomState().get_state()
numpy.random.tests.test_smoke.RNG
numpy.random.tests.test_smoke.RNG._extra_setup(cls)
numpy.random.tests.test_smoke.RNG._reset_state(self)
numpy.random.tests.test_smoke.RNG.setup_class(cls)
numpy.random.tests.test_smoke.RNG.test_advance(self)
numpy.random.tests.test_smoke.RNG.test_beta(self)
numpy.random.tests.test_smoke.RNG.test_binomial(self)
numpy.random.tests.test_smoke.RNG.test_bytes(self)
numpy.random.tests.test_smoke.RNG.test_chisquare(self)
numpy.random.tests.test_smoke.RNG.test_dirichlet(self)
numpy.random.tests.test_smoke.RNG.test_entropy_init(self)
numpy.random.tests.test_smoke.RNG.test_exponential(self)
numpy.random.tests.test_smoke.RNG.test_f(self)
numpy.random.tests.test_smoke.RNG.test_gamma(self)
numpy.random.tests.test_smoke.RNG.test_gamma_floats(self)
numpy.random.tests.test_smoke.RNG.test_geometric(self)
numpy.random.tests.test_smoke.RNG.test_gumbel(self)
numpy.random.tests.test_smoke.RNG.test_hypergeometric(self)
numpy.random.tests.test_smoke.RNG.test_init(self)
numpy.random.tests.test_smoke.RNG.test_integers(self)
numpy.random.tests.test_smoke.RNG.test_integers_broadcast(self,dtype)
numpy.random.tests.test_smoke.RNG.test_integers_broadcast_errors(self,dtype)
numpy.random.tests.test_smoke.RNG.test_integers_numpy(self,dtype)
numpy.random.tests.test_smoke.RNG.test_jump(self)
numpy.random.tests.test_smoke.RNG.test_laplace(self)
numpy.random.tests.test_smoke.RNG.test_logitic(self)
numpy.random.tests.test_smoke.RNG.test_logseries(self)
numpy.random.tests.test_smoke.RNG.test_multinomial(self)
numpy.random.tests.test_smoke.RNG.test_multivariate_normal(self)
numpy.random.tests.test_smoke.RNG.test_negative_binomial(self)
numpy.random.tests.test_smoke.RNG.test_noncentral_chisquare(self)
numpy.random.tests.test_smoke.RNG.test_noncentral_f(self)
numpy.random.tests.test_smoke.RNG.test_normal(self)
numpy.random.tests.test_smoke.RNG.test_normal_floats(self)
numpy.random.tests.test_smoke.RNG.test_normal_zig_floats(self)
numpy.random.tests.test_smoke.RNG.test_output_fill(self)
numpy.random.tests.test_smoke.RNG.test_output_fill_error(self)
numpy.random.tests.test_smoke.RNG.test_output_filling_exponential(self)
numpy.random.tests.test_smoke.RNG.test_output_filling_gamma(self)
numpy.random.tests.test_smoke.RNG.test_output_filling_gamma_broadcast(self)
numpy.random.tests.test_smoke.RNG.test_output_filling_uniform(self)
numpy.random.tests.test_smoke.RNG.test_pareto(self)
numpy.random.tests.test_smoke.RNG.test_permutation(self)
numpy.random.tests.test_smoke.RNG.test_pickle(self)
numpy.random.tests.test_smoke.RNG.test_poisson(self)
numpy.random.tests.test_smoke.RNG.test_power(self)
numpy.random.tests.test_smoke.RNG.test_random(self)
numpy.random.tests.test_smoke.RNG.test_rayleigh(self)
numpy.random.tests.test_smoke.RNG.test_reset_state(self)
numpy.random.tests.test_smoke.RNG.test_reset_state_float(self)
numpy.random.tests.test_smoke.RNG.test_reset_state_gauss(self)
numpy.random.tests.test_smoke.RNG.test_reset_state_uint32(self)
numpy.random.tests.test_smoke.RNG.test_seed(self)
numpy.random.tests.test_smoke.RNG.test_seed_array(self)
numpy.random.tests.test_smoke.RNG.test_shuffle(self)
numpy.random.tests.test_smoke.RNG.test_standard_cauchy(self)
numpy.random.tests.test_smoke.RNG.test_standard_exponential(self)
numpy.random.tests.test_smoke.RNG.test_standard_exponential_float(self)
numpy.random.tests.test_smoke.RNG.test_standard_exponential_float_log(self)
numpy.random.tests.test_smoke.RNG.test_standard_gamma(self)
numpy.random.tests.test_smoke.RNG.test_standard_normal(self)
numpy.random.tests.test_smoke.RNG.test_standard_normal_zig(self)
numpy.random.tests.test_smoke.RNG.test_standard_t(self)
numpy.random.tests.test_smoke.RNG.test_triangular(self)
numpy.random.tests.test_smoke.RNG.test_uniform(self)
numpy.random.tests.test_smoke.RNG.test_uniform_array(self)
numpy.random.tests.test_smoke.RNG.test_uniform_float(self)
numpy.random.tests.test_smoke.RNG.test_vonmises(self)
numpy.random.tests.test_smoke.RNG.test_wald(self)
numpy.random.tests.test_smoke.RNG.test_weibull(self)
numpy.random.tests.test_smoke.RNG.test_zipf(self)
numpy.random.tests.test_smoke.TestDefaultRNG(RNG)
numpy.random.tests.test_smoke.TestDefaultRNG.setup_class(cls)
numpy.random.tests.test_smoke.TestDefaultRNG.test_default_is_pcg64(self)
numpy.random.tests.test_smoke.TestDefaultRNG.test_seed(self)
numpy.random.tests.test_smoke.TestMT19937(RNG)
numpy.random.tests.test_smoke.TestMT19937.setup_class(cls)
numpy.random.tests.test_smoke.TestMT19937.test_numpy_state(self)
numpy.random.tests.test_smoke.TestPCG64(RNG)
numpy.random.tests.test_smoke.TestPCG64.setup_class(cls)
numpy.random.tests.test_smoke.TestPCG64DXSM(RNG)
numpy.random.tests.test_smoke.TestPCG64DXSM.setup_class(cls)
numpy.random.tests.test_smoke.TestPhilox(RNG)
numpy.random.tests.test_smoke.TestPhilox.setup_class(cls)
numpy.random.tests.test_smoke.TestSFC64(RNG)
numpy.random.tests.test_smoke.TestSFC64.setup_class(cls)
numpy.random.tests.test_smoke.comp_state(state1,state2)
numpy.random.tests.test_smoke.dtype(request)
numpy.random.tests.test_smoke.params_0(f)
numpy.random.tests.test_smoke.params_1(f,bounded=False)
numpy.random.tests.test_smoke.warmup(rg,n=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/tests/test_direct.py----------------------------------------
A:numpy.random.tests.test_direct.pwd->os.path.dirname(os.path.abspath(__file__))
A:numpy.random.tests.test_direct.x->numpy.uint32(x & np.uint64(4294967295))
A:numpy.random.tests.test_direct.upper->numpy.array(x >> np.uint64(32), dtype=np.uint32)
A:numpy.random.tests.test_direct.lower->numpy.array(x & lower, dtype=np.uint32)
A:numpy.random.tests.test_direct.joined->numpy.column_stack([lower, upper]).ravel()
A:numpy.random.tests.test_direct.out->numpy.empty(len(x) // 2)
A:numpy.random.tests.test_direct.doubles->uniform_from_dsfmt(x)
A:numpy.random.tests.test_direct.f->numpy.sqrt(-2.0 * np.log(r2) / r2)
A:numpy.random.tests.test_direct.s1->SeedSequence(range(10), spawn_key=(1, 2), pool_size=6)
A:numpy.random.tests.test_direct.s2->SeedSequence(**s1.state)
A:numpy.random.tests.test_direct.dummy->SeedlessSeedSequence()
A:numpy.random.tests.test_direct.seed->seed.split(',').split(',')
A:numpy.random.tests.test_direct.bit_generator->self.bit_generator(*self.data1['seed'])
A:numpy.random.tests.test_direct.uints->self.bit_generator(*self.data1['seed']).random_raw(1000, output=False)
A:numpy.random.tests.test_direct.rs->Generator(self.bit_generator(*self.data1['seed']))
A:numpy.random.tests.test_direct.gauss->Generator(self.bit_generator(*self.data1['seed'])).standard_normal(25)
A:numpy.random.tests.test_direct.vals->uniform32_from_uint(self.data2['data'], self.bits)
A:numpy.random.tests.test_direct.uniforms->Generator(self.bit_generator(*self.data1['seed'])).random(len(vals), dtype=np.float32)
A:numpy.random.tests.test_direct.bitgen_pkl->pickle.dumps(bit_generator)
A:numpy.random.tests.test_direct.reloaded->pickle.loads(bitgen_pkl)
A:numpy.random.tests.test_direct.ss->SeedSequence(100)
A:numpy.random.tests.test_direct.aa->pickle.loads(pickle.dumps(ss))
A:numpy.random.tests.test_direct.alt_state->self.bit_generator(*self.data1['seed']).__getstate__()
A:numpy.random.tests.test_direct.cls.data1->cls._read_csv(join(pwd, './data/sfc64-testset-1.csv'))
A:numpy.random.tests.test_direct.cls.data2->cls._read_csv(join(pwd, './data/sfc64-testset-2.csv'))
A:numpy.random.tests.test_direct.keyed->self.bit_generator(counter=state['state']['counter'], key=state['state']['key'])
A:numpy.random.tests.test_direct.val_neg->Generator(self.bit_generator(*self.data1['seed'])).integers(10)
A:numpy.random.tests.test_direct.val_pos->Generator(self.bit_generator(*self.data1['seed'])).integers(10)
A:numpy.random.tests.test_direct.val_big->Generator(self.bit_generator(*self.data1['seed'])).integers(10)
A:numpy.random.tests.test_direct.desired->Generator(self.bit_generator(*self.data1['seed'])).integers(2 ** 16)
A:numpy.random.tests.test_direct.actual->Generator(self.bit_generator(*self.data1['seed'])).integers(2 ** 16)
A:numpy.random.tests.test_direct.rg->default_rng(bg)
A:numpy.random.tests.test_direct.bg->Philox()
A:numpy.random.tests.test_direct.rg2->default_rng(rg)
numpy.random.tests.test_direct.Base
numpy.random.tests.test_direct.Base._read_csv(cls,filename)
numpy.random.tests.test_direct.Base.setup_class(cls)
numpy.random.tests.test_direct.Base.test_benchmark(self)
numpy.random.tests.test_direct.Base.test_cffi(self)
numpy.random.tests.test_direct.Base.test_ctypes(self)
numpy.random.tests.test_direct.Base.test_gauss_inv(self)
numpy.random.tests.test_direct.Base.test_getstate(self)
numpy.random.tests.test_direct.Base.test_invalid_init_type(self)
numpy.random.tests.test_direct.Base.test_invalid_init_values(self)
numpy.random.tests.test_direct.Base.test_invalid_state_type(self)
numpy.random.tests.test_direct.Base.test_invalid_state_value(self)
numpy.random.tests.test_direct.Base.test_pickle(self)
numpy.random.tests.test_direct.Base.test_random_raw(self)
numpy.random.tests.test_direct.Base.test_raw(self)
numpy.random.tests.test_direct.Base.test_repr(self)
numpy.random.tests.test_direct.Base.test_str(self)
numpy.random.tests.test_direct.Base.test_uniform_double(self)
numpy.random.tests.test_direct.Base.test_uniform_float(self)
numpy.random.tests.test_direct.TestDefaultRNG
numpy.random.tests.test_direct.TestDefaultRNG.test_passthrough(self)
numpy.random.tests.test_direct.TestDefaultRNG.test_seed(self)
numpy.random.tests.test_direct.TestMT19937(Base)
numpy.random.tests.test_direct.TestMT19937.setup_class(cls)
numpy.random.tests.test_direct.TestMT19937.test_seed_float_array(self)
numpy.random.tests.test_direct.TestMT19937.test_state_tuple(self)
numpy.random.tests.test_direct.TestPCG64(Base)
numpy.random.tests.test_direct.TestPCG64.setup_class(cls)
numpy.random.tests.test_direct.TestPCG64.test_advance_symmetry(self)
numpy.random.tests.test_direct.TestPCG64DXSM(Base)
numpy.random.tests.test_direct.TestPCG64DXSM.setup_class(cls)
numpy.random.tests.test_direct.TestPCG64DXSM.test_advance_symmetry(self)
numpy.random.tests.test_direct.TestPhilox(Base)
numpy.random.tests.test_direct.TestPhilox.setup_class(cls)
numpy.random.tests.test_direct.TestPhilox.test_set_key(self)
numpy.random.tests.test_direct.TestSFC64(Base)
numpy.random.tests.test_direct.TestSFC64.setup_class(cls)
numpy.random.tests.test_direct.assert_state_equal(actual,target)
numpy.random.tests.test_direct.gauss_from_uint(x,n,bits)
numpy.random.tests.test_direct.test_seedsequence()
numpy.random.tests.test_direct.uniform32_from_uint(x,bits)
numpy.random.tests.test_direct.uniform32_from_uint32(x)
numpy.random.tests.test_direct.uniform32_from_uint53(x)
numpy.random.tests.test_direct.uniform32_from_uint64(x)
numpy.random.tests.test_direct.uniform_from_dsfmt(x)
numpy.random.tests.test_direct.uniform_from_uint(x,bits)
numpy.random.tests.test_direct.uniform_from_uint32(x)
numpy.random.tests.test_direct.uniform_from_uint64(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/tests/test_extending.py----------------------------------------
A:numpy.random.tests.test_extending.required_version->LooseVersion('0.29.21')
A:numpy.random.tests.test_extending.srcdir->os.path.join(os.path.dirname(__file__), '..')
A:numpy.random.tests.test_extending.so1->line.strip()
A:numpy.random.tests.test_extending.so2->line.strip()
A:numpy.random.tests.test_extending.extending->ExtensionFileLoader('extending', so1).load_module()
A:numpy.random.tests.test_extending.extending_distributions->ExtensionFileLoader('extending_distributions', so2).load_module()
A:numpy.random.tests.test_extending.values->ExtensionFileLoader('extending_distributions', so2).load_module().uniforms_ex(PCG64(0), 10, 'd')
numpy.random.tests.test_extending.test_cffi()
numpy.random.tests.test_extending.test_cython(tmp_path)
numpy.random.tests.test_extending.test_numba()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/tests/data/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/_examples/cffi/parse.py----------------------------------------
A:numpy.random._examples.cffi.parse.line->line.replace('RAND_INT_TYPE', 'int64_t').replace('RAND_INT_TYPE', 'int64_t')
numpy.random._examples.cffi.parse.parse_distributions_h(ffi,inc_dir)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/_examples/cffi/extending.py----------------------------------------
A:numpy.random._examples.cffi.extending.ffi->cffi.FFI()
A:numpy.random._examples.cffi.extending.inc_dir->os.path.join(np.get_include(), 'numpy')
A:numpy.random._examples.cffi.extending.lib->cffi.FFI().dlopen(np.random._generator.__file__)
A:numpy.random._examples.cffi.extending.bit_gen->numpy.random.PCG64()
A:numpy.random._examples.cffi.extending.rng->numpy.random.Generator(bit_gen)
A:numpy.random._examples.cffi.extending.vals_cffi->cffi.FFI().new('double[%d]' % n)
A:numpy.random._examples.cffi.extending.vals->numpy.random.Generator(bit_gen).standard_normal(n)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/_examples/numba/extending_distributions.py----------------------------------------
A:numpy.random._examples.numba.extending_distributions.ffi->FFI()
A:numpy.random._examples.numba.extending_distributions.lib->FFI().dlopen('./libdistributions.so')
A:numpy.random._examples.numba.extending_distributions.x->PCG64()
A:numpy.random._examples.numba.extending_distributions.out->numpy.empty(n)
A:numpy.random._examples.numba.extending_distributions.out[i]->random_standard_normal(bit_generator)
A:numpy.random._examples.numba.extending_distributions.normalsj->numba.jit(normals, nopython=True)
A:numpy.random._examples.numba.extending_distributions.bit_generator_address->int(ffi.cast('uintptr_t', bit_generator))
A:numpy.random._examples.numba.extending_distributions.norm->normalsj(1000, bit_generator_address)
numpy.random._examples.numba.extending_distributions.normals(n,bit_generator)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/_examples/numba/extending.py----------------------------------------
A:numpy.random._examples.numba.extending.bit_gen->PCG64()
A:numpy.random._examples.numba.extending.out->numpy.empty(n, dtype=np.uint32)
A:numpy.random._examples.numba.extending.f->numpy.sqrt(-2.0 * np.log(r2) / r2)
A:numpy.random._examples.numba.extending.normalsj->numba.jit(normals, nopython=True)
A:numpy.random._examples.numba.extending.rg->numpy.random.Generator(PCG64())
A:numpy.random._examples.numba.extending.r1->numbacall()
A:numpy.random._examples.numba.extending.r2->numpycall()
A:numpy.random._examples.numba.extending.t1->timeit(numbacall, number=1000)
A:numpy.random._examples.numba.extending.t2->timeit(numpycall, number=1000)
A:numpy.random._examples.numba.extending.out[i]->bounded_uint(lb, ub, state)
numpy.random._examples.numba.extending.bounded_uint(lb,ub,state)
numpy.random._examples.numba.extending.bounded_uints(lb,ub,n,state)
numpy.random._examples.numba.extending.normals(n,state)
numpy.random._examples.numba.extending.numbacall()
numpy.random._examples.numba.extending.numpycall()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/random/_examples/cython/setup.py----------------------------------------
A:numpy.random._examples.cython.setup.path->dirname(__file__)
A:numpy.random._examples.cython.setup.src_dir->join(dirname(path), '..', 'src')
A:numpy.random._examples.cython.setup.inc_path->numpy.get_include()
A:numpy.random._examples.cython.setup.extending->Extension('extending', sources=[join('.', 'extending.pyx')], include_dirs=[np.get_include(), join(path, '..', '..')], define_macros=defs)
A:numpy.random._examples.cython.setup.distributions->Extension('extending_distributions', sources=[join('.', 'extending_distributions.pyx')], include_dirs=[inc_path], library_dirs=lib_path, libraries=['npyrandom', 'npymath'], define_macros=defs)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/_callable.py----------------------------------------
A:numpy.typing._callable._T1->TypeVar('_T1')
A:numpy.typing._callable._T2->TypeVar('_T2')
A:numpy.typing._callable._NBit1->TypeVar('_NBit1', bound=NBitBase)
A:numpy.typing._callable._NBit2->TypeVar('_NBit2', bound=NBitBase)
A:numpy.typing._callable._IntType->TypeVar('_IntType', bound=integer)
A:numpy.typing._callable._FloatType->TypeVar('_FloatType', bound=floating)
A:numpy.typing._callable._NumberType->TypeVar('_NumberType', bound=number)
A:numpy.typing._callable._NumberType_co->TypeVar('_NumberType_co', covariant=True, bound=number)
A:numpy.typing._callable._GenericType_co->TypeVar('_GenericType_co', covariant=True, bound=generic)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/_scalars.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/_shape.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/_extended_precision.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/_nbit.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/_add_docstring.py----------------------------------------
A:numpy.typing._add_docstring.s->'\n'.join(new_lines)
A:numpy.typing._add_docstring.lines->'\n'.join(new_lines).split('\n')
A:numpy.typing._add_docstring.m->re.match('^(\\s+)[-=]+\\s*$', line)
A:numpy.typing._add_docstring.prev->textwrap.dedent(new_lines.pop())
A:numpy.typing._add_docstring._docstrings->_parse_docstrings()
numpy.typing._add_docstring._parse_docstrings()->str
numpy.typing._add_docstring.add_newdoc(name:str,value:str,doc:str)->None


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/mypy_plugin.py----------------------------------------
A:numpy.typing.mypy_plugin.imports->ImportFrom('numpy.typing._extended_precision', 0, names=[(v, v) for v in _EXTENDED_PRECISION_LIST])
A:numpy.typing.mypy_plugin.i->_index(lst, 'numpy.typing._extended_precision')
numpy.typing.mypy_plugin._get_extended_precision_list()->t.List[str]
numpy.typing.mypy_plugin._get_precision_dict()->t.Dict[str, str]
numpy.typing.mypy_plugin._hook(ctx:AnalyzeTypeContext)->Type


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/_array_like.py----------------------------------------
A:numpy.typing._array_like._T->TypeVar('_T')
A:numpy.typing._array_like._ScalarType->TypeVar('_ScalarType', bound=generic)
A:numpy.typing._array_like._DType->TypeVar('_DType', bound='dtype[Any]')
A:numpy.typing._array_like._DType_co->TypeVar('_DType_co', covariant=True, bound='dtype[Any]')


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/_dtype_like.py----------------------------------------
A:numpy.typing._dtype_like._DType_co->TypeVar('_DType_co', covariant=True, bound=np.dtype)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/_generic_alias.py----------------------------------------
A:numpy.typing._generic_alias._T->TypeVar('_T', bound='_GenericAlias')
A:numpy.typing._generic_alias.value->_reconstruct_alias(i, parameters)
A:numpy.typing._generic_alias.prm_tup->tuple((next(parameters) for _ in i.__parameters__))
A:numpy.typing._generic_alias.cls->type(self)
A:numpy.typing._generic_alias.self._parameters->tuple(_parse_parameters(args))
A:numpy.typing._generic_alias.dir_origin->set(dir(self.__origin__))
A:numpy.typing._generic_alias.args->', '.join((_to_str(i) for i in self.__args__))
A:numpy.typing._generic_alias.origin->_to_str(self.__origin__)
A:numpy.typing._generic_alias.key_iter->iter(key_tup)
A:numpy.typing._generic_alias.ScalarType->TypeVar('ScalarType', bound=np.generic, covariant=True)
A:numpy.typing._generic_alias._DType->_GenericAlias(np.dtype, (ScalarType,))
A:numpy.typing._generic_alias.NDArray->_GenericAlias(np.ndarray, (Any, _DType))
numpy.typing._GenericAlias(self,origin:type,args:Any)
numpy.typing._GenericAlias.__args__(self)->Tuple[Any, ...]
numpy.typing._GenericAlias.__dir__(self)->List[str]
numpy.typing._GenericAlias.__eq__(self,value:object)->bool
numpy.typing._GenericAlias.__getattribute__(self,name:str)->Any
numpy.typing._GenericAlias.__getitem__(self:_T,key:Any)->_T
numpy.typing._GenericAlias.__hash__(self)->int
numpy.typing._GenericAlias.__instancecheck__(self,obj:object)->NoReturn
numpy.typing._GenericAlias.__mro_entries__(self,bases:Iterable[object])->Tuple[type]
numpy.typing._GenericAlias.__origin__(self)->type
numpy.typing._GenericAlias.__parameters__(self)->Tuple[TypeVar, ...]
numpy.typing._GenericAlias.__reduce__(self:_T)->Tuple[Type[_T], Tuple[type, Tuple[Any, ...]]]
numpy.typing._GenericAlias.__repr__(self)->str
numpy.typing._GenericAlias.__subclasscheck__(self,cls:type)->NoReturn
numpy.typing._generic_alias._GenericAlias(self,origin:type,args:Any)
numpy.typing._generic_alias._GenericAlias.__args__(self)->Tuple[Any, ...]
numpy.typing._generic_alias._GenericAlias.__dir__(self)->List[str]
numpy.typing._generic_alias._GenericAlias.__eq__(self,value:object)->bool
numpy.typing._generic_alias._GenericAlias.__getattribute__(self,name:str)->Any
numpy.typing._generic_alias._GenericAlias.__getitem__(self:_T,key:Any)->_T
numpy.typing._generic_alias._GenericAlias.__hash__(self)->int
numpy.typing._generic_alias._GenericAlias.__init__(self,origin:type,args:Any)
numpy.typing._generic_alias._GenericAlias.__instancecheck__(self,obj:object)->NoReturn
numpy.typing._generic_alias._GenericAlias.__mro_entries__(self,bases:Iterable[object])->Tuple[type]
numpy.typing._generic_alias._GenericAlias.__origin__(self)->type
numpy.typing._generic_alias._GenericAlias.__parameters__(self)->Tuple[TypeVar, ...]
numpy.typing._generic_alias._GenericAlias.__reduce__(self:_T)->Tuple[Type[_T], Tuple[type, Tuple[Any, ...]]]
numpy.typing._generic_alias._GenericAlias.__repr__(self)->str
numpy.typing._generic_alias._GenericAlias.__subclasscheck__(self,cls:type)->NoReturn
numpy.typing._generic_alias._parse_parameters(args:Iterable[Any])->Generator[TypeVar, None, None]
numpy.typing._generic_alias._reconstruct_alias(alias:_T,parameters:Iterator[TypeVar])->_T
numpy.typing._generic_alias._to_str(obj:object)->str


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/setup.py----------------------------------------
A:numpy.typing.setup.config->Configuration('typing', parent_package, top_path)
numpy.typing.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/__init__.py----------------------------------------
A:numpy.typing.__init__.test->PytestTester(__name__)
numpy.typing.__init__.NBitBase
numpy.typing.__init__.NBitBase.__init_subclass__(cls)->None
numpy.typing.__init__._128Bit(_256Bit)
numpy.typing.__init__._16Bit(_32Bit)
numpy.typing.__init__._256Bit(NBitBase)
numpy.typing.__init__._32Bit(_64Bit)
numpy.typing.__init__._64Bit(_80Bit)
numpy.typing.__init__._80Bit(_96Bit)
numpy.typing.__init__._8Bit(_16Bit)
numpy.typing.__init__._96Bit(_128Bit)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/_ufunc.pyi----------------------------------------
numpy.typing._GUFunc_Nin2_Nout1(self,__x1:ArrayLike,__x2:ArrayLike,out:Union[NDArray[Any],Tuple[NDArray[Any]]],*,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_3Tuple[Optional[str]]]=...,extobj:List[Any]=...,axes:List[_2Tuple[SupportsIndex]]=...)
numpy.typing._GUFunc_Nin2_Nout1.__name__(self)->_NameType
numpy.typing._GUFunc_Nin2_Nout1.accumulate(self)->None
numpy.typing._GUFunc_Nin2_Nout1.at(self)->None
numpy.typing._GUFunc_Nin2_Nout1.identity(self)->_IDType
numpy.typing._GUFunc_Nin2_Nout1.nargs(self)->Literal[3]
numpy.typing._GUFunc_Nin2_Nout1.nin(self)->Literal[2]
numpy.typing._GUFunc_Nin2_Nout1.nout(self)->Literal[1]
numpy.typing._GUFunc_Nin2_Nout1.ntypes(self)->_NTypes
numpy.typing._GUFunc_Nin2_Nout1.outer(self)->None
numpy.typing._GUFunc_Nin2_Nout1.reduce(self)->None
numpy.typing._GUFunc_Nin2_Nout1.reduceat(self)->None
numpy.typing._GUFunc_Nin2_Nout1.signature(self)->Literal['(n?,k),(k,m?)->(n?,m?)']
numpy.typing._UFunc_Nin1_Nout1(self,__x1:ArrayLike,out:Union[None,NDArray[Any],Tuple[NDArray[Any]]]=...,*,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_2Tuple[Optional[str]]]=...,extobj:List[Any]=...)
numpy.typing._UFunc_Nin1_Nout1.__name__(self)->_NameType
numpy.typing._UFunc_Nin1_Nout1.accumulate(self)->None
numpy.typing._UFunc_Nin1_Nout1.at(self,__a:NDArray[Any],__indices:_ArrayLikeInt_co)->None
numpy.typing._UFunc_Nin1_Nout1.identity(self)->_IDType
numpy.typing._UFunc_Nin1_Nout1.nargs(self)->Literal[2]
numpy.typing._UFunc_Nin1_Nout1.nin(self)->Literal[1]
numpy.typing._UFunc_Nin1_Nout1.nout(self)->Literal[1]
numpy.typing._UFunc_Nin1_Nout1.ntypes(self)->_NTypes
numpy.typing._UFunc_Nin1_Nout1.outer(self)->None
numpy.typing._UFunc_Nin1_Nout1.reduce(self)->None
numpy.typing._UFunc_Nin1_Nout1.reduceat(self)->None
numpy.typing._UFunc_Nin1_Nout1.signature(self)->None
numpy.typing._UFunc_Nin1_Nout2(self,__x1:ArrayLike,__out1:Optional[NDArray[Any]]=...,__out2:Optional[NDArray[Any]]=...,*,out:_2Tuple[NDArray[Any]]=...,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_3Tuple[Optional[str]]]=...,extobj:List[Any]=...)
numpy.typing._UFunc_Nin1_Nout2.__name__(self)->_NameType
numpy.typing._UFunc_Nin1_Nout2.accumulate(self)->None
numpy.typing._UFunc_Nin1_Nout2.at(self)->None
numpy.typing._UFunc_Nin1_Nout2.identity(self)->_IDType
numpy.typing._UFunc_Nin1_Nout2.nargs(self)->Literal[3]
numpy.typing._UFunc_Nin1_Nout2.nin(self)->Literal[1]
numpy.typing._UFunc_Nin1_Nout2.nout(self)->Literal[2]
numpy.typing._UFunc_Nin1_Nout2.ntypes(self)->_NTypes
numpy.typing._UFunc_Nin1_Nout2.outer(self)->None
numpy.typing._UFunc_Nin1_Nout2.reduce(self)->None
numpy.typing._UFunc_Nin1_Nout2.reduceat(self)->None
numpy.typing._UFunc_Nin1_Nout2.signature(self)->None
numpy.typing._UFunc_Nin2_Nout1(self,__x1:ArrayLike,__x2:ArrayLike,out:Union[None,NDArray[Any],Tuple[NDArray[Any]]]=...,*,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_3Tuple[Optional[str]]]=...,extobj:List[Any]=...)
numpy.typing._UFunc_Nin2_Nout1.__name__(self)->_NameType
numpy.typing._UFunc_Nin2_Nout1.accumulate(self,array:ArrayLike,axis:SupportsIndex=...,dtype:DTypeLike=...,out:Optional[NDArray[Any]]=...)->NDArray[Any]
numpy.typing._UFunc_Nin2_Nout1.at(self,__a:NDArray[Any],__indices:_ArrayLikeInt_co,__b:ArrayLike)->None
numpy.typing._UFunc_Nin2_Nout1.identity(self)->_IDType
numpy.typing._UFunc_Nin2_Nout1.nargs(self)->Literal[3]
numpy.typing._UFunc_Nin2_Nout1.nin(self)->Literal[2]
numpy.typing._UFunc_Nin2_Nout1.nout(self)->Literal[1]
numpy.typing._UFunc_Nin2_Nout1.ntypes(self)->_NTypes
numpy.typing._UFunc_Nin2_Nout1.outer(self,__A:ArrayLike,__B:ArrayLike,*,out:Union[None,NDArray[Any],Tuple[NDArray[Any]]]=...,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_3Tuple[Optional[str]]]=...,extobj:List[Any]=...)->NDArray[Any]
numpy.typing._UFunc_Nin2_Nout1.outer(self,__A:_ScalarLike_co,__B:_ScalarLike_co,*,out:None=...,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_3Tuple[Optional[str]]]=...,extobj:List[Any]=...)->Any
numpy.typing._UFunc_Nin2_Nout1.reduce(self,array:ArrayLike,axis:Optional[_ShapeLike]=...,dtype:DTypeLike=...,out:Optional[NDArray[Any]]=...,keepdims:bool=...,initial:Any=...,where:_ArrayLikeBool_co=...)->Any
numpy.typing._UFunc_Nin2_Nout1.reduceat(self,array:ArrayLike,indices:_ArrayLikeInt_co,axis:SupportsIndex=...,dtype:DTypeLike=...,out:Optional[NDArray[Any]]=...)->NDArray[Any]
numpy.typing._UFunc_Nin2_Nout1.signature(self)->None
numpy.typing._UFunc_Nin2_Nout2(self,__x1:ArrayLike,__x2:ArrayLike,__out1:Optional[NDArray[Any]]=...,__out2:Optional[NDArray[Any]]=...,*,out:_2Tuple[NDArray[Any]]=...,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_4Tuple[Optional[str]]]=...,extobj:List[Any]=...)
numpy.typing._UFunc_Nin2_Nout2.__name__(self)->_NameType
numpy.typing._UFunc_Nin2_Nout2.accumulate(self)->None
numpy.typing._UFunc_Nin2_Nout2.at(self)->None
numpy.typing._UFunc_Nin2_Nout2.identity(self)->_IDType
numpy.typing._UFunc_Nin2_Nout2.nargs(self)->Literal[4]
numpy.typing._UFunc_Nin2_Nout2.nin(self)->Literal[2]
numpy.typing._UFunc_Nin2_Nout2.nout(self)->Literal[2]
numpy.typing._UFunc_Nin2_Nout2.ntypes(self)->_NTypes
numpy.typing._UFunc_Nin2_Nout2.outer(self)->None
numpy.typing._UFunc_Nin2_Nout2.reduce(self)->None
numpy.typing._UFunc_Nin2_Nout2.reduceat(self)->None
numpy.typing._UFunc_Nin2_Nout2.signature(self)->None
numpy.typing._ufunc._GUFunc_Nin2_Nout1(self,__x1:ArrayLike,__x2:ArrayLike,out:Union[NDArray[Any],Tuple[NDArray[Any]]],*,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_3Tuple[Optional[str]]]=...,extobj:List[Any]=...,axes:List[_2Tuple[SupportsIndex]]=...)
numpy.typing._ufunc._GUFunc_Nin2_Nout1.__call__(self,__x1:ArrayLike,__x2:ArrayLike,out:Union[NDArray[Any],Tuple[NDArray[Any]]],*,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_3Tuple[Optional[str]]]=...,extobj:List[Any]=...,axes:List[_2Tuple[SupportsIndex]]=...)
numpy.typing._ufunc._GUFunc_Nin2_Nout1.__name__(self)->_NameType
numpy.typing._ufunc._GUFunc_Nin2_Nout1.accumulate(self)->None
numpy.typing._ufunc._GUFunc_Nin2_Nout1.at(self)->None
numpy.typing._ufunc._GUFunc_Nin2_Nout1.identity(self)->_IDType
numpy.typing._ufunc._GUFunc_Nin2_Nout1.nargs(self)->Literal[3]
numpy.typing._ufunc._GUFunc_Nin2_Nout1.nin(self)->Literal[2]
numpy.typing._ufunc._GUFunc_Nin2_Nout1.nout(self)->Literal[1]
numpy.typing._ufunc._GUFunc_Nin2_Nout1.ntypes(self)->_NTypes
numpy.typing._ufunc._GUFunc_Nin2_Nout1.outer(self)->None
numpy.typing._ufunc._GUFunc_Nin2_Nout1.reduce(self)->None
numpy.typing._ufunc._GUFunc_Nin2_Nout1.reduceat(self)->None
numpy.typing._ufunc._GUFunc_Nin2_Nout1.signature(self)->Literal['(n?,k),(k,m?)->(n?,m?)']
numpy.typing._ufunc._UFunc_Nin1_Nout1(self,__x1:ArrayLike,out:Union[None,NDArray[Any],Tuple[NDArray[Any]]]=...,*,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_2Tuple[Optional[str]]]=...,extobj:List[Any]=...)
numpy.typing._ufunc._UFunc_Nin1_Nout1.__call__(self,__x1:ArrayLike,out:Union[None,NDArray[Any],Tuple[NDArray[Any]]]=...,*,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_2Tuple[Optional[str]]]=...,extobj:List[Any]=...)
numpy.typing._ufunc._UFunc_Nin1_Nout1.__name__(self)->_NameType
numpy.typing._ufunc._UFunc_Nin1_Nout1.accumulate(self)->None
numpy.typing._ufunc._UFunc_Nin1_Nout1.at(self,__a:NDArray[Any],__indices:_ArrayLikeInt_co)->None
numpy.typing._ufunc._UFunc_Nin1_Nout1.identity(self)->_IDType
numpy.typing._ufunc._UFunc_Nin1_Nout1.nargs(self)->Literal[2]
numpy.typing._ufunc._UFunc_Nin1_Nout1.nin(self)->Literal[1]
numpy.typing._ufunc._UFunc_Nin1_Nout1.nout(self)->Literal[1]
numpy.typing._ufunc._UFunc_Nin1_Nout1.ntypes(self)->_NTypes
numpy.typing._ufunc._UFunc_Nin1_Nout1.outer(self)->None
numpy.typing._ufunc._UFunc_Nin1_Nout1.reduce(self)->None
numpy.typing._ufunc._UFunc_Nin1_Nout1.reduceat(self)->None
numpy.typing._ufunc._UFunc_Nin1_Nout1.signature(self)->None
numpy.typing._ufunc._UFunc_Nin1_Nout2(self,__x1:ArrayLike,__out1:Optional[NDArray[Any]]=...,__out2:Optional[NDArray[Any]]=...,*,out:_2Tuple[NDArray[Any]]=...,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_3Tuple[Optional[str]]]=...,extobj:List[Any]=...)
numpy.typing._ufunc._UFunc_Nin1_Nout2.__call__(self,__x1:ArrayLike,__out1:Optional[NDArray[Any]]=...,__out2:Optional[NDArray[Any]]=...,*,out:_2Tuple[NDArray[Any]]=...,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_3Tuple[Optional[str]]]=...,extobj:List[Any]=...)
numpy.typing._ufunc._UFunc_Nin1_Nout2.__name__(self)->_NameType
numpy.typing._ufunc._UFunc_Nin1_Nout2.accumulate(self)->None
numpy.typing._ufunc._UFunc_Nin1_Nout2.at(self)->None
numpy.typing._ufunc._UFunc_Nin1_Nout2.identity(self)->_IDType
numpy.typing._ufunc._UFunc_Nin1_Nout2.nargs(self)->Literal[3]
numpy.typing._ufunc._UFunc_Nin1_Nout2.nin(self)->Literal[1]
numpy.typing._ufunc._UFunc_Nin1_Nout2.nout(self)->Literal[2]
numpy.typing._ufunc._UFunc_Nin1_Nout2.ntypes(self)->_NTypes
numpy.typing._ufunc._UFunc_Nin1_Nout2.outer(self)->None
numpy.typing._ufunc._UFunc_Nin1_Nout2.reduce(self)->None
numpy.typing._ufunc._UFunc_Nin1_Nout2.reduceat(self)->None
numpy.typing._ufunc._UFunc_Nin1_Nout2.signature(self)->None
numpy.typing._ufunc._UFunc_Nin2_Nout1(self,__x1:ArrayLike,__x2:ArrayLike,out:Union[None,NDArray[Any],Tuple[NDArray[Any]]]=...,*,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_3Tuple[Optional[str]]]=...,extobj:List[Any]=...)
numpy.typing._ufunc._UFunc_Nin2_Nout1.__call__(self,__x1:ArrayLike,__x2:ArrayLike,out:Union[None,NDArray[Any],Tuple[NDArray[Any]]]=...,*,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_3Tuple[Optional[str]]]=...,extobj:List[Any]=...)
numpy.typing._ufunc._UFunc_Nin2_Nout1.__name__(self)->_NameType
numpy.typing._ufunc._UFunc_Nin2_Nout1.accumulate(self,array:ArrayLike,axis:SupportsIndex=...,dtype:DTypeLike=...,out:Optional[NDArray[Any]]=...)->NDArray[Any]
numpy.typing._ufunc._UFunc_Nin2_Nout1.at(self,__a:NDArray[Any],__indices:_ArrayLikeInt_co,__b:ArrayLike)->None
numpy.typing._ufunc._UFunc_Nin2_Nout1.identity(self)->_IDType
numpy.typing._ufunc._UFunc_Nin2_Nout1.nargs(self)->Literal[3]
numpy.typing._ufunc._UFunc_Nin2_Nout1.nin(self)->Literal[2]
numpy.typing._ufunc._UFunc_Nin2_Nout1.nout(self)->Literal[1]
numpy.typing._ufunc._UFunc_Nin2_Nout1.ntypes(self)->_NTypes
numpy.typing._ufunc._UFunc_Nin2_Nout1.outer(self,__A:ArrayLike,__B:ArrayLike,*,out:Union[None,NDArray[Any],Tuple[NDArray[Any]]]=...,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_3Tuple[Optional[str]]]=...,extobj:List[Any]=...)->NDArray[Any]
numpy.typing._ufunc._UFunc_Nin2_Nout1.outer(self,__A:_ScalarLike_co,__B:_ScalarLike_co,*,out:None=...,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_3Tuple[Optional[str]]]=...,extobj:List[Any]=...)->Any
numpy.typing._ufunc._UFunc_Nin2_Nout1.reduce(self,array:ArrayLike,axis:Optional[_ShapeLike]=...,dtype:DTypeLike=...,out:Optional[NDArray[Any]]=...,keepdims:bool=...,initial:Any=...,where:_ArrayLikeBool_co=...)->Any
numpy.typing._ufunc._UFunc_Nin2_Nout1.reduceat(self,array:ArrayLike,indices:_ArrayLikeInt_co,axis:SupportsIndex=...,dtype:DTypeLike=...,out:Optional[NDArray[Any]]=...)->NDArray[Any]
numpy.typing._ufunc._UFunc_Nin2_Nout1.signature(self)->None
numpy.typing._ufunc._UFunc_Nin2_Nout2(self,__x1:ArrayLike,__x2:ArrayLike,__out1:Optional[NDArray[Any]]=...,__out2:Optional[NDArray[Any]]=...,*,out:_2Tuple[NDArray[Any]]=...,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_4Tuple[Optional[str]]]=...,extobj:List[Any]=...)
numpy.typing._ufunc._UFunc_Nin2_Nout2.__call__(self,__x1:ArrayLike,__x2:ArrayLike,__out1:Optional[NDArray[Any]]=...,__out2:Optional[NDArray[Any]]=...,*,out:_2Tuple[NDArray[Any]]=...,where:Optional[_ArrayLikeBool_co]=...,casting:_Casting=...,order:_OrderKACF=...,dtype:DTypeLike=...,subok:bool=...,signature:Union[str,_4Tuple[Optional[str]]]=...,extobj:List[Any]=...)
numpy.typing._ufunc._UFunc_Nin2_Nout2.__name__(self)->_NameType
numpy.typing._ufunc._UFunc_Nin2_Nout2.accumulate(self)->None
numpy.typing._ufunc._UFunc_Nin2_Nout2.at(self)->None
numpy.typing._ufunc._UFunc_Nin2_Nout2.identity(self)->_IDType
numpy.typing._ufunc._UFunc_Nin2_Nout2.nargs(self)->Literal[4]
numpy.typing._ufunc._UFunc_Nin2_Nout2.nin(self)->Literal[2]
numpy.typing._ufunc._UFunc_Nin2_Nout2.nout(self)->Literal[2]
numpy.typing._ufunc._UFunc_Nin2_Nout2.ntypes(self)->_NTypes
numpy.typing._ufunc._UFunc_Nin2_Nout2.outer(self)->None
numpy.typing._ufunc._UFunc_Nin2_Nout2.reduce(self)->None
numpy.typing._ufunc._UFunc_Nin2_Nout2.reduceat(self)->None
numpy.typing._ufunc._UFunc_Nin2_Nout2.signature(self)->None


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/_char_codes.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/test_typing.py----------------------------------------
A:numpy.typing.tests.test_typing.DATA_DIR->os.path.join(os.path.dirname(__file__), 'data')
A:numpy.typing.tests.test_typing.PASS_DIR->os.path.join(DATA_DIR, 'pass')
A:numpy.typing.tests.test_typing.FAIL_DIR->os.path.join(DATA_DIR, 'fail')
A:numpy.typing.tests.test_typing.REVEAL_DIR->os.path.join(DATA_DIR, 'reveal')
A:numpy.typing.tests.test_typing.MISC_DIR->os.path.join(DATA_DIR, 'misc')
A:numpy.typing.tests.test_typing.MYPY_INI->os.path.join(DATA_DIR, 'mypy.ini')
A:numpy.typing.tests.test_typing.CACHE_DIR->os.path.join(DATA_DIR, '.mypy_cache')
A:numpy.typing.tests.test_typing.(drive, tail)->os.path.splitdrive(key)
A:numpy.typing.tests.test_typing.(_, tail)->os.path.splitdrive(msg)
A:numpy.typing.tests.test_typing.(stdout, stderr, exit_code)->mypy.api.run(['--config-file', MYPY_INI, '--cache-dir', CACHE_DIR, directory])
A:numpy.typing.tests.test_typing.stdout->stdout.replace('*', '').replace('*', '')
A:numpy.typing.tests.test_typing.iterator->itertools.groupby(stdout.split('\n'), key=_key_func)
A:numpy.typing.tests.test_typing.fullpath->os.path.join(root, fname)
A:numpy.typing.tests.test_typing.relpath->os.path.relpath(fullpath, start=directory)
A:numpy.typing.tests.test_typing.lines->_parse_reveals(fin)
A:numpy.typing.tests.test_typing.errors->defaultdict(lambda : '')
A:numpy.typing.tests.test_typing.error_line->_strip_filename(error_line)
A:numpy.typing.tests.test_typing.match->re.match('(?P<lineno>\\d+): note: .+$', error_line)
A:numpy.typing.tests.test_typing.lineno->int(_lineno)
A:numpy.typing.tests.test_typing.marker->target_line.split('# E:')[-1].strip()
A:numpy.typing.tests.test_typing.expected_error->defaultdict(lambda : '').get(lineno)
A:numpy.typing.tests.test_typing.string->file.read().replace('*', '')
A:numpy.typing.tests.test_typing.comments->'/n'.join(comments_array)
A:numpy.typing.tests.test_typing.key_set->set(re.findall('\\{(.*?)\\}', comments))
A:numpy.typing.tests.test_typing.fmt_str->'/n'.join(comments_array).format(**kwargs)
A:numpy.typing.tests.test_typing.(path_without_extension, _)->os.path.splitext(path)
A:numpy.typing.tests.test_typing.spec->importlib.util.spec_from_file_location(f'{dirname}.{filename}', path)
A:numpy.typing.tests.test_typing.test_module->importlib.util.module_from_spec(spec)
A:numpy.typing.tests.test_typing.path->os.path.join(MISC_DIR, 'extended_precision.py')
A:numpy.typing.tests.test_typing.(*_, _lineno, msg_typ, msg)->_msg.split(':')
A:numpy.typing.tests.test_typing.msg->_strip_filename(msg)
A:numpy.typing.tests.test_typing.msg_typ->msg_typ.strip().strip()
numpy.typing.tests.test_typing._construct_format_dict()
numpy.typing.tests.test_typing._key_func(key:str)->str
numpy.typing.tests.test_typing._parse_reveals(file:IO[str])->List[str]
numpy.typing.tests.test_typing._strip_filename(msg:str)->str
numpy.typing.tests.test_typing._test_fail(path:str,error:str,expected_error:Optional[str],lineno:int)->None
numpy.typing.tests.test_typing._test_reveal(path:str,reveal:str,expected_reveal:str,lineno:int)->None
numpy.typing.tests.test_typing.get_test_cases(directory)
numpy.typing.tests.test_typing.run_mypy()->None
numpy.typing.tests.test_typing.test_code_runs(path)
numpy.typing.tests.test_typing.test_extended_precision()->None
numpy.typing.tests.test_typing.test_fail(path)
numpy.typing.tests.test_typing.test_reveal(path)
numpy.typing.tests.test_typing.test_success(path)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/test_runtime.py----------------------------------------
A:numpy.typing.tests.test_runtime.NDArrayTup->TypeTup(npt.NDArray, (), None)
A:numpy.typing.tests.test_runtime.out->get_type_hints(func)
A:numpy.typing.tests.test_runtime.keys->TYPES.keys()
A:numpy.typing.tests.test_runtime.ref->set(npt.__all__)
numpy.typing.tests.test_runtime.TypeTup(NamedTuple)
numpy.typing.tests.test_runtime.test_get_args(name:type,tup:TypeTup)->None
numpy.typing.tests.test_runtime.test_get_origin(name:type,tup:TypeTup)->None
numpy.typing.tests.test_runtime.test_get_type_hints(name:type,tup:TypeTup)->None
numpy.typing.tests.test_runtime.test_get_type_hints_str(name:type,tup:TypeTup)->None
numpy.typing.tests.test_runtime.test_keys()->None


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/test_isfile.py----------------------------------------
numpy.typing.tests.test_isfile.TestIsFile
numpy.typing.tests.test_isfile.TestIsFile.test_isfile(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/test_generic_alias.py----------------------------------------
A:numpy.typing.tests.test_generic_alias.ScalarType->TypeVar('ScalarType', bound=np.generic, covariant=True)
A:numpy.typing.tests.test_generic_alias.T1->TypeVar('T1')
A:numpy.typing.tests.test_generic_alias.T2->TypeVar('T2')
A:numpy.typing.tests.test_generic_alias.DType->_GenericAlias(np.dtype, (ScalarType,))
A:numpy.typing.tests.test_generic_alias.NDArray->_GenericAlias(np.ndarray, (Any, DType))
A:numpy.typing.tests.test_generic_alias.DType_ref->types.GenericAlias(np.dtype, (ScalarType,))
A:numpy.typing.tests.test_generic_alias.NDArray_ref->types.GenericAlias(np.ndarray, (Any, DType_ref))
A:numpy.typing.tests.test_generic_alias.GETATTR_NAMES->sorted(set(dir(np.ndarray)) - _GenericAlias._ATTR_EXCEPTIONS)
A:numpy.typing.tests.test_generic_alias.BUFFER->numpy.array([1], dtype=np.int64)
A:numpy.typing.tests.test_generic_alias.value->getattr(NDArray, name)
A:numpy.typing.tests.test_generic_alias.value_ref->weakref.ref(NDArray_ref)()
A:numpy.typing.tests.test_generic_alias.value_ref1->getattr(np.ndarray, name)
A:numpy.typing.tests.test_generic_alias.value_ref2->getattr(NDArray_ref, name)
numpy.typing.tests.test_generic_alias.TestGenericAlias
numpy.typing.tests.test_generic_alias.TestGenericAlias.test_getattr(self,name:str)->None
numpy.typing.tests.test_generic_alias.TestGenericAlias.test_pass(self,name:str,func:FuncType)->None
numpy.typing.tests.test_generic_alias.TestGenericAlias.test_raise(self,name:str,exc_type:Type[BaseException],func:FuncType)->None
numpy.typing.tests.test_generic_alias.TestGenericAlias.test_weakref(self)->None
numpy.typing.tests.test_generic_alias._get_subclass_mro(base:type)->Tuple[type, ...]


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/misc/extended_precision.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/datasource.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/index_tricks.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/ndarray_misc.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/ufunc_config.py----------------------------------------
numpy.typing.tests.data.fail.ufunc_config.Write1
numpy.typing.tests.data.fail.ufunc_config.Write1.write1(self,a:str)->None
numpy.typing.tests.data.fail.ufunc_config.Write2
numpy.typing.tests.data.fail.ufunc_config.Write2.write(self,a:str,b:str)->None
numpy.typing.tests.data.fail.ufunc_config.Write3
numpy.typing.tests.data.fail.ufunc_config.Write3.write(self,*,a:str)->None
numpy.typing.tests.data.fail.ufunc_config.func1(a:str,b:int,c:float)->None
numpy.typing.tests.data.fail.ufunc_config.func2(a:str,*,b:int)->None


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/array_like.py----------------------------------------
A:numpy.typing.tests.data.fail.array_like.scalar->numpy.int64(1)
A:numpy.typing.tests.data.fail.array_like.array->numpy.array([1])
numpy.typing.tests.data.fail.array_like.A


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/scalars.py----------------------------------------
numpy.typing.tests.data.fail.scalars.A
numpy.typing.tests.data.fail.scalars.A.__float__(self)
numpy.typing.tests.data.fail.scalars.func(a:np.float32)->None


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/comparisons.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/warnings_and_errors.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/flatiter.py----------------------------------------
numpy.typing.tests.data.fail.flatiter.Index
numpy.typing.tests.data.fail.flatiter.Index.__index__(self)->int


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/arrayprint.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/fromnumeric.py----------------------------------------
A:numpy.typing.tests.data.fail.fromnumeric.A->numpy.array(True, ndmin=2, dtype=bool)
A:numpy.typing.tests.data.fail.fromnumeric.a->numpy.bool_(True)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/ufunclike.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/einsumfunc.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/arithmetic.py----------------------------------------
A:numpy.typing.tests.data.fail.arithmetic.b_->numpy.bool_()
A:numpy.typing.tests.data.fail.arithmetic.dt->numpy.datetime64(0, 'D')
A:numpy.typing.tests.data.fail.arithmetic.td->numpy.timedelta64(0, 'D')


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/array_constructors.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/lib_utils.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/modules.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/ufuncs.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/lib_version.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/ndarray.py----------------------------------------
A:numpy.typing.tests.data.fail.ndarray.float_array->numpy.array([1.0])


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/dtype.py----------------------------------------
A:numpy.typing.tests.data.fail.dtype.not_dtype->numpy.dtype(float)
numpy.typing.tests.data.fail.dtype.Test1
numpy.typing.tests.data.fail.dtype.Test2


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/random.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/numerictypes.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/constants.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/arrayterator.py----------------------------------------
A:numpy.typing.tests.data.fail.arrayterator.ar_iter->numpy.lib.Arrayterator(AR_i8)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/fail/bitwise_ops.py----------------------------------------
A:numpy.typing.tests.data.fail.bitwise_ops.i8->numpy.int64()
A:numpy.typing.tests.data.fail.bitwise_ops.i4->numpy.int32()
A:numpy.typing.tests.data.fail.bitwise_ops.u8->numpy.uint64()
A:numpy.typing.tests.data.fail.bitwise_ops.b_->numpy.bool_()
A:numpy.typing.tests.data.fail.bitwise_ops.i->int()
A:numpy.typing.tests.data.fail.bitwise_ops.f8->numpy.float64()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/index_tricks.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/ndarray_misc.py----------------------------------------
A:numpy.typing.tests.data.pass.ndarray_misc.i4->numpy.int32(1)
A:numpy.typing.tests.data.pass.ndarray_misc.B0->numpy.empty((), dtype=np.int32).view(SubClass)
A:numpy.typing.tests.data.pass.ndarray_misc.B1->numpy.empty((1,), dtype=np.int32).view(SubClass)
A:numpy.typing.tests.data.pass.ndarray_misc.B2->numpy.empty((1, 1), dtype=np.int32).view(SubClass)
A:numpy.typing.tests.data.pass.ndarray_misc.D->numpy.empty(3).view(SubClass)
A:numpy.typing.tests.data.pass.ndarray_misc._choices->numpy.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]], dtype=np.int32)
A:numpy.typing.tests.data.pass.ndarray_misc.void->cast(np.void, np.array(1, dtype=[('f', np.float64)]).take(0))
numpy.typing.tests.data.pass.ndarray_misc.SubClass(np.ndarray)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/ndarray_conversion.py----------------------------------------
A:numpy.typing.tests.data.pass.ndarray_conversion.nd->numpy.array([[1, 2], [3, 4]])
A:numpy.typing.tests.data.pass.ndarray_conversion.scalar_array->numpy.array(1)
A:numpy.typing.tests.data.pass.ndarray_conversion.complex_array->numpy.array([[1 + 1j, 0], [0, 1 - 1j]], dtype=np.complex128)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/ufunc_config.py----------------------------------------
A:numpy.typing.tests.data.pass.ufunc_config._err_default->numpy.geterr()
A:numpy.typing.tests.data.pass.ufunc_config._bufsize_default->numpy.getbufsize()
A:numpy.typing.tests.data.pass.ufunc_config._errcall_default->numpy.geterrcall()
numpy.typing.tests.data.pass.ufunc_config.Write1
numpy.typing.tests.data.pass.ufunc_config.Write1.write(self,a:str)->None
numpy.typing.tests.data.pass.ufunc_config.Write2
numpy.typing.tests.data.pass.ufunc_config.Write2.write(self,a:str,b:int=...)->None
numpy.typing.tests.data.pass.ufunc_config.Write3
numpy.typing.tests.data.pass.ufunc_config.Write3.write(self,a:str)->int
numpy.typing.tests.data.pass.ufunc_config.func1(a:str,b:int)->None
numpy.typing.tests.data.pass.ufunc_config.func2(a:str,b:int,c:float=...)->None
numpy.typing.tests.data.pass.ufunc_config.func3(a:str,b:int)->int


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/ndarray_shape_manipulation.py----------------------------------------
A:numpy.typing.tests.data.pass.ndarray_shape_manipulation.nd1->numpy.array([[1, 2], [3, 4]])
A:numpy.typing.tests.data.pass.ndarray_shape_manipulation.nd2->numpy.array([[1, 2], [3, 4]])
A:numpy.typing.tests.data.pass.ndarray_shape_manipulation.nd3->numpy.array([[1, 2]])
A:numpy.typing.tests.data.pass.ndarray_shape_manipulation.nd4->numpy.array([[[1, 2]]])


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/numeric.py----------------------------------------
A:numpy.typing.tests.data.pass.numeric.i8->numpy.int64(1)
A:numpy.typing.tests.data.pass.numeric.A->numpy.arange(27).reshape(3, 3, 3)
A:numpy.typing.tests.data.pass.numeric.C->numpy.empty((27, 27)).view(SubClass)
numpy.typing.tests.data.pass.numeric.SubClass(np.ndarray)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/array_like.py----------------------------------------
numpy.typing.tests.data.pass.array_like.A
numpy.typing.tests.data.pass.array_like.A.__array__(self,dtype:Optional[np.dtype]=None)->np.ndarray


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/scalars.py----------------------------------------
A:numpy.typing.tests.data.pass.scalars.b->numpy.bool_()
A:numpy.typing.tests.data.pass.scalars.u8->numpy.uint64()
A:numpy.typing.tests.data.pass.scalars.i8->numpy.int64()
A:numpy.typing.tests.data.pass.scalars.f8->numpy.float64()
A:numpy.typing.tests.data.pass.scalars.c16->numpy.complex128()
A:numpy.typing.tests.data.pass.scalars.U->numpy.str_('1')
A:numpy.typing.tests.data.pass.scalars.S->numpy.bytes_('1')
A:numpy.typing.tests.data.pass.scalars.b_->numpy.bool_()
A:numpy.typing.tests.data.pass.scalars.td->numpy.timedelta64()
A:numpy.typing.tests.data.pass.scalars.AR->numpy.array(1, dtype=np.float64)
numpy.typing.tests.data.pass.scalars.A
numpy.typing.tests.data.pass.scalars.A.__float__(self)->float
numpy.typing.tests.data.pass.scalars.B
numpy.typing.tests.data.pass.scalars.B.__int__(self)->int
numpy.typing.tests.data.pass.scalars.C
numpy.typing.tests.data.pass.scalars.C.__complex__(self)->complex
numpy.typing.tests.data.pass.scalars.D
numpy.typing.tests.data.pass.scalars.D.__index__(self)->int


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/comparisons.py----------------------------------------
A:numpy.typing.tests.data.pass.comparisons.c16->numpy.complex128()
A:numpy.typing.tests.data.pass.comparisons.f8->numpy.float64()
A:numpy.typing.tests.data.pass.comparisons.i8->numpy.int64()
A:numpy.typing.tests.data.pass.comparisons.u8->numpy.uint64()
A:numpy.typing.tests.data.pass.comparisons.c8->numpy.complex64()
A:numpy.typing.tests.data.pass.comparisons.f4->numpy.float32()
A:numpy.typing.tests.data.pass.comparisons.i4->numpy.int32()
A:numpy.typing.tests.data.pass.comparisons.u4->numpy.uint32()
A:numpy.typing.tests.data.pass.comparisons.dt->numpy.datetime64(0, 'D')
A:numpy.typing.tests.data.pass.comparisons.td->numpy.timedelta64(0, 'D')
A:numpy.typing.tests.data.pass.comparisons.b_->numpy.bool_()
A:numpy.typing.tests.data.pass.comparisons.b->bool()
A:numpy.typing.tests.data.pass.comparisons.c->complex()
A:numpy.typing.tests.data.pass.comparisons.f->float()
A:numpy.typing.tests.data.pass.comparisons.i->int()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/warnings_and_errors.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/simple_py3.py----------------------------------------
A:numpy.typing.tests.data.pass.simple_py3.array->numpy.array([1, 2])


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/flatiter.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/arrayprint.py----------------------------------------
A:numpy.typing.tests.data.pass.arrayprint.AR->numpy.arange(10)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/fromnumeric.py----------------------------------------
A:numpy.typing.tests.data.pass.fromnumeric.A->numpy.array(True, ndmin=2, dtype=bool)
A:numpy.typing.tests.data.pass.fromnumeric.B->numpy.array(1.0, ndmin=2, dtype=np.float32)
A:numpy.typing.tests.data.pass.fromnumeric.a->numpy.bool_(True)
A:numpy.typing.tests.data.pass.fromnumeric.b->numpy.float32(1.0)
A:numpy.typing.tests.data.pass.fromnumeric.d->numpy.array(1.0, dtype=np.float32)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/ufunclike.py----------------------------------------
A:numpy.typing.tests.data.pass.ufunclike.ret->numpy.empty((), dtype=object)
numpy.typing.tests.data.pass.ufunclike.Object
numpy.typing.tests.data.pass.ufunclike.Object.__array__(self)->np.ndarray[Any, np.dtype[np.object_]]
numpy.typing.tests.data.pass.ufunclike.Object.__ceil__(self)->Object
numpy.typing.tests.data.pass.ufunclike.Object.__floor__(self)->Object
numpy.typing.tests.data.pass.ufunclike.Object.__ge__(self,value:object)->bool


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/einsumfunc.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/multiarray.py----------------------------------------
A:numpy.typing.tests.data.pass.multiarray.b_f8->numpy.broadcast(AR_f8)
A:numpy.typing.tests.data.pass.multiarray.b_i8_f8_f8->numpy.broadcast(AR_i8, AR_f8, AR_f8)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/arithmetic.py----------------------------------------
A:numpy.typing.tests.data.pass.arithmetic.c16->numpy.complex128(1)
A:numpy.typing.tests.data.pass.arithmetic.f8->numpy.float64(1)
A:numpy.typing.tests.data.pass.arithmetic.i8->numpy.int64(1)
A:numpy.typing.tests.data.pass.arithmetic.u8->numpy.uint64(1)
A:numpy.typing.tests.data.pass.arithmetic.c8->numpy.complex64(1)
A:numpy.typing.tests.data.pass.arithmetic.f4->numpy.float32(1)
A:numpy.typing.tests.data.pass.arithmetic.i4->numpy.int32(1)
A:numpy.typing.tests.data.pass.arithmetic.u4->numpy.uint32(1)
A:numpy.typing.tests.data.pass.arithmetic.dt->numpy.datetime64(1, 'D')
A:numpy.typing.tests.data.pass.arithmetic.td->numpy.timedelta64(1, 'D')
A:numpy.typing.tests.data.pass.arithmetic.b_->numpy.bool_(1)
A:numpy.typing.tests.data.pass.arithmetic.b->bool(1)
A:numpy.typing.tests.data.pass.arithmetic.c->complex(1)
A:numpy.typing.tests.data.pass.arithmetic.f->float(1)
A:numpy.typing.tests.data.pass.arithmetic.i->int(1)
A:numpy.typing.tests.data.pass.arithmetic.ret->numpy.empty((), dtype=object)
numpy.typing.tests.data.pass.arithmetic.Object
numpy.typing.tests.data.pass.arithmetic.Object.__array__(self)->np.ndarray[Any, np.dtype[np.object_]]
numpy.typing.tests.data.pass.arithmetic.Object.__floordiv__(self,value:Any)->Object
numpy.typing.tests.data.pass.arithmetic.Object.__mul__(self,value:Any)->Object
numpy.typing.tests.data.pass.arithmetic.Object.__pow__(self,value:Any)->Object
numpy.typing.tests.data.pass.arithmetic.Object.__rfloordiv__(self,value:Any)->Object
numpy.typing.tests.data.pass.arithmetic.Object.__rmul__(self,value:Any)->Object
numpy.typing.tests.data.pass.arithmetic.Object.__rpow__(self,value:Any)->Object
numpy.typing.tests.data.pass.arithmetic.Object.__rsub__(self,value:Any)->Object
numpy.typing.tests.data.pass.arithmetic.Object.__sub__(self,value:Any)->Object


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/array_constructors.py----------------------------------------
A:numpy.typing.tests.data.pass.array_constructors.i8->numpy.int64(1)
A:numpy.typing.tests.data.pass.array_constructors.A->numpy.array([1])
A:numpy.typing.tests.data.pass.array_constructors.B->numpy.array([1]).view(SubClass).copy()
A:numpy.typing.tests.data.pass.array_constructors.B_stack->numpy.array([[1], [1]]).view(SubClass)
numpy.typing.tests.data.pass.array_constructors.Index
numpy.typing.tests.data.pass.array_constructors.Index.__index__(self)->int
numpy.typing.tests.data.pass.array_constructors.SubClass(np.ndarray)
numpy.typing.tests.data.pass.array_constructors.func(i:int,j:int,**kwargs:Any)->SubClass


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/lib_utils.py----------------------------------------
A:numpy.typing.tests.data.pass.lib_utils.FILE->StringIO()
numpy.typing.tests.data.pass.lib_utils.func(a:int)->bool


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/modules.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/ufuncs.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/lib_version.py----------------------------------------
A:numpy.typing.tests.data.pass.lib_version.version->NumpyVersion('1.8.0')


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/dtype.py----------------------------------------
A:numpy.typing.tests.data.pass.dtype.dtype_obj->numpy.dtype(np.str_)
A:numpy.typing.tests.data.pass.dtype.void_dtype_obj->numpy.dtype([('f0', np.float64), ('f1', np.float32)])
A:numpy.typing.tests.data.pass.dtype.dtype->numpy.dtype(float)
numpy.typing.tests.data.pass.dtype.Test


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/literal.py----------------------------------------
A:numpy.typing.tests.data.pass.literal.AR->numpy.array(0)
A:numpy.typing.tests.data.pass.literal.KACF->frozenset({None, 'K', 'A', 'C', 'F'})
A:numpy.typing.tests.data.pass.literal.ACF->frozenset({None, 'A', 'C', 'F'})
A:numpy.typing.tests.data.pass.literal.CF->frozenset({None, 'C', 'F'})


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/random.py----------------------------------------
A:numpy.typing.tests.data.pass.random.def_gen_state->def_gen.__getstate__()
A:numpy.typing.tests.data.pass.random.random_st_state->random_st.__getstate__()
A:numpy.typing.tests.data.pass.random.random_st_get_state->random_st.get_state()
A:numpy.typing.tests.data.pass.random.random_st_get_state_legacy->random_st.get_state(legacy=True)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/numerictypes.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/simple.py----------------------------------------
A:numpy.typing.tests.data.pass.simple.array->numpy.array([1, 2])
A:numpy.typing.tests.data.pass.simple.array_2d->numpy.ones((3, 3))
A:numpy.typing.tests.data.pass.simple.array_scalar->numpy.array(1)
A:numpy.typing.tests.data.pass.simple.nonzero_array->numpy.array([1, 2])
A:numpy.typing.tests.data.pass.simple.float_array->numpy.array([1.0, 2.0])
numpy.typing.tests.data.pass.simple.iterable_func(x)
numpy.typing.tests.data.pass.simple.ndarray_func(x)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/arrayterator.py----------------------------------------
A:numpy.typing.tests.data.pass.arrayterator.ar_iter->numpy.lib.Arrayterator(AR_i8)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/mod.py----------------------------------------
A:numpy.typing.tests.data.pass.mod.f8->numpy.float64(1)
A:numpy.typing.tests.data.pass.mod.i8->numpy.int64(1)
A:numpy.typing.tests.data.pass.mod.u8->numpy.uint64(1)
A:numpy.typing.tests.data.pass.mod.f4->numpy.float32(1)
A:numpy.typing.tests.data.pass.mod.i4->numpy.int32(1)
A:numpy.typing.tests.data.pass.mod.u4->numpy.uint32(1)
A:numpy.typing.tests.data.pass.mod.td->numpy.timedelta64(1, 'D')
A:numpy.typing.tests.data.pass.mod.b_->numpy.bool_(1)
A:numpy.typing.tests.data.pass.mod.b->bool(1)
A:numpy.typing.tests.data.pass.mod.f->float(1)
A:numpy.typing.tests.data.pass.mod.i->int(1)
A:numpy.typing.tests.data.pass.mod.AR->numpy.array([1], dtype=np.bool_)
A:numpy.typing.tests.data.pass.mod.AR2->numpy.array([1], dtype=np.timedelta64)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/pass/bitwise_ops.py----------------------------------------
A:numpy.typing.tests.data.pass.bitwise_ops.i8->numpy.int64(1)
A:numpy.typing.tests.data.pass.bitwise_ops.u8->numpy.uint64(1)
A:numpy.typing.tests.data.pass.bitwise_ops.i4->numpy.int32(1)
A:numpy.typing.tests.data.pass.bitwise_ops.u4->numpy.uint32(1)
A:numpy.typing.tests.data.pass.bitwise_ops.b_->numpy.bool_(1)
A:numpy.typing.tests.data.pass.bitwise_ops.b->bool(1)
A:numpy.typing.tests.data.pass.bitwise_ops.i->int(1)
A:numpy.typing.tests.data.pass.bitwise_ops.AR->numpy.array([0, 1, 2], dtype=np.int32)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/datasource.py----------------------------------------
A:numpy.typing.tests.data.reveal.datasource.d1->numpy.DataSource(path1)
A:numpy.typing.tests.data.reveal.datasource.d2->numpy.DataSource(path2)
A:numpy.typing.tests.data.reveal.datasource.d3->numpy.DataSource(None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/index_tricks.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/ndarray_misc.py----------------------------------------
numpy.typing.tests.data.reveal.ndarray_misc.SubClass(np.ndarray)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/ndarray_conversion.py----------------------------------------
A:numpy.typing.tests.data.reveal.ndarray_conversion.nd->numpy.array([[1, 2], [3, 4]])
numpy.typing.tests.data.reveal.ndarray_conversion.SubArray(np.ndarray)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/ufunc_config.py----------------------------------------
numpy.typing.tests.data.reveal.ufunc_config.Write
numpy.typing.tests.data.reveal.ufunc_config.Write.write(self,value:str)->None
numpy.typing.tests.data.reveal.ufunc_config.func(a:str,b:int)->None


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/ndarray_shape_manipulation.py----------------------------------------
A:numpy.typing.tests.data.reveal.ndarray_shape_manipulation.nd->numpy.array([[1, 2], [3, 4]])


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/numeric.py----------------------------------------
numpy.typing.tests.data.reveal.numeric.SubClass(np.ndarray)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/scalars.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/comparisons.py----------------------------------------
A:numpy.typing.tests.data.reveal.comparisons.c16->numpy.complex128()
A:numpy.typing.tests.data.reveal.comparisons.f8->numpy.float64()
A:numpy.typing.tests.data.reveal.comparisons.i8->numpy.int64()
A:numpy.typing.tests.data.reveal.comparisons.u8->numpy.uint64()
A:numpy.typing.tests.data.reveal.comparisons.c8->numpy.complex64()
A:numpy.typing.tests.data.reveal.comparisons.f4->numpy.float32()
A:numpy.typing.tests.data.reveal.comparisons.i4->numpy.int32()
A:numpy.typing.tests.data.reveal.comparisons.u4->numpy.uint32()
A:numpy.typing.tests.data.reveal.comparisons.dt->numpy.datetime64(0, 'D')
A:numpy.typing.tests.data.reveal.comparisons.td->numpy.timedelta64(0, 'D')
A:numpy.typing.tests.data.reveal.comparisons.b_->numpy.bool_()
A:numpy.typing.tests.data.reveal.comparisons.b->bool()
A:numpy.typing.tests.data.reveal.comparisons.c->complex()
A:numpy.typing.tests.data.reveal.comparisons.f->float()
A:numpy.typing.tests.data.reveal.comparisons.i->int()
A:numpy.typing.tests.data.reveal.comparisons.AR->numpy.array([0], dtype=np.int64)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/warnings_and_errors.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/nbit_base_example.py----------------------------------------
A:numpy.typing.tests.data.reveal.nbit_base_example.T1->TypeVar('T1', bound=npt.NBitBase)
A:numpy.typing.tests.data.reveal.nbit_base_example.T2->TypeVar('T2', bound=npt.NBitBase)
numpy.typing.tests.data.reveal.nbit_base_example.add(a:np.floating[T1],b:np.integer[T2])->np.floating[Union[T1, T2]]


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/flatiter.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/arrayprint.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/fromnumeric.py----------------------------------------
A:numpy.typing.tests.data.reveal.fromnumeric.A->numpy.array(True, ndmin=2, dtype=bool)
A:numpy.typing.tests.data.reveal.fromnumeric.B->numpy.array(1.0, ndmin=2, dtype=np.float32)
A:numpy.typing.tests.data.reveal.fromnumeric.a->numpy.bool_(True)
A:numpy.typing.tests.data.reveal.fromnumeric.b->numpy.float32(1.0)
A:numpy.typing.tests.data.reveal.fromnumeric.d->numpy.array(1.0, dtype=np.float32)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/ufunclike.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/einsumfunc.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/multiarray.py----------------------------------------
A:numpy.typing.tests.data.reveal.multiarray.b_f8->numpy.broadcast(AR_f8)
A:numpy.typing.tests.data.reveal.multiarray.b_i8_f8_f8->numpy.broadcast(AR_i8, AR_f8, AR_f8)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/arithmetic.py----------------------------------------
A:numpy.typing.tests.data.reveal.arithmetic.c16->numpy.complex128()
A:numpy.typing.tests.data.reveal.arithmetic.f8->numpy.float64()
A:numpy.typing.tests.data.reveal.arithmetic.i8->numpy.int64()
A:numpy.typing.tests.data.reveal.arithmetic.u8->numpy.uint64()
A:numpy.typing.tests.data.reveal.arithmetic.c8->numpy.complex64()
A:numpy.typing.tests.data.reveal.arithmetic.f4->numpy.float32()
A:numpy.typing.tests.data.reveal.arithmetic.i4->numpy.int32()
A:numpy.typing.tests.data.reveal.arithmetic.u4->numpy.uint32()
A:numpy.typing.tests.data.reveal.arithmetic.dt->numpy.datetime64(0, 'D')
A:numpy.typing.tests.data.reveal.arithmetic.td->numpy.timedelta64(0, 'D')
A:numpy.typing.tests.data.reveal.arithmetic.b_->numpy.bool_()
A:numpy.typing.tests.data.reveal.arithmetic.b->bool()
A:numpy.typing.tests.data.reveal.arithmetic.c->complex()
A:numpy.typing.tests.data.reveal.arithmetic.f->float()
A:numpy.typing.tests.data.reveal.arithmetic.i->int()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/array_constructors.py----------------------------------------
numpy.typing.tests.data.reveal.array_constructors.SubClass(np.ndarray)
numpy.typing.tests.data.reveal.array_constructors.func(i:int,j:int,**kwargs:Any)->SubClass


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/lib_utils.py----------------------------------------
numpy.typing.tests.data.reveal.lib_utils.func(a:int)->bool


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/modules.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/ufuncs.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/lib_version.py----------------------------------------
A:numpy.typing.tests.data.reveal.lib_version.version->NumpyVersion('1.8.0')


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/dtype.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/random.py----------------------------------------
A:numpy.typing.tests.data.reveal.random.def_rng->numpy.random.default_rng()
A:numpy.typing.tests.data.reveal.random.seed_seq->numpy.random.SeedSequence()
A:numpy.typing.tests.data.reveal.random.mt19937->numpy.random.MT19937()
A:numpy.typing.tests.data.reveal.random.pcg64->numpy.random.PCG64()
A:numpy.typing.tests.data.reveal.random.sfc64->numpy.random.SFC64()
A:numpy.typing.tests.data.reveal.random.philox->numpy.random.Philox()
A:numpy.typing.tests.data.reveal.random.seedless_seq->numpy.random.bit_generator.SeedlessSeedSequence()
A:numpy.typing.tests.data.reveal.random.mt19937_jumped->numpy.random.MT19937().jumped()
A:numpy.typing.tests.data.reveal.random.mt19937_jumped3->numpy.random.MT19937().jumped(3)
A:numpy.typing.tests.data.reveal.random.mt19937_raw->numpy.random.MT19937().random_raw()
A:numpy.typing.tests.data.reveal.random.mt19937_raw_arr->numpy.random.MT19937().random_raw(5)
A:numpy.typing.tests.data.reveal.random.pcg64_jumped->numpy.random.PCG64().jumped()
A:numpy.typing.tests.data.reveal.random.pcg64_jumped3->numpy.random.PCG64().jumped(3)
A:numpy.typing.tests.data.reveal.random.pcg64_adv->numpy.random.PCG64().advance(3)
A:numpy.typing.tests.data.reveal.random.pcg64_raw->numpy.random.PCG64().random_raw()
A:numpy.typing.tests.data.reveal.random.pcg64_raw_arr->numpy.random.PCG64().random_raw(5)
A:numpy.typing.tests.data.reveal.random.philox_jumped->numpy.random.Philox().jumped()
A:numpy.typing.tests.data.reveal.random.philox_jumped3->numpy.random.Philox().jumped(3)
A:numpy.typing.tests.data.reveal.random.philox_adv->numpy.random.Philox().advance(3)
A:numpy.typing.tests.data.reveal.random.philox_raw->numpy.random.Philox().random_raw()
A:numpy.typing.tests.data.reveal.random.philox_raw_arr->numpy.random.Philox().random_raw(5)
A:numpy.typing.tests.data.reveal.random.sfc64_raw->numpy.random.SFC64().random_raw()
A:numpy.typing.tests.data.reveal.random.sfc64_raw_arr->numpy.random.SFC64().random_raw(5)
A:numpy.typing.tests.data.reveal.random.def_gen_state->def_gen.__getstate__()
A:numpy.typing.tests.data.reveal.random.random_st_state->random_st.__getstate__()
A:numpy.typing.tests.data.reveal.random.random_st_get_state->random_st.get_state()
A:numpy.typing.tests.data.reveal.random.random_st_get_state_legacy->random_st.get_state(legacy=True)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/numerictypes.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/constants.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/arrayterator.py----------------------------------------
A:numpy.typing.tests.data.reveal.arrayterator.ar_iter->numpy.lib.Arrayterator(AR_i8)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/mod.py----------------------------------------
A:numpy.typing.tests.data.reveal.mod.f8->numpy.float64()
A:numpy.typing.tests.data.reveal.mod.i8->numpy.int64()
A:numpy.typing.tests.data.reveal.mod.u8->numpy.uint64()
A:numpy.typing.tests.data.reveal.mod.f4->numpy.float32()
A:numpy.typing.tests.data.reveal.mod.i4->numpy.int32()
A:numpy.typing.tests.data.reveal.mod.u4->numpy.uint32()
A:numpy.typing.tests.data.reveal.mod.td->numpy.timedelta64(0, 'D')
A:numpy.typing.tests.data.reveal.mod.b_->numpy.bool_()
A:numpy.typing.tests.data.reveal.mod.b->bool()
A:numpy.typing.tests.data.reveal.mod.f->float()
A:numpy.typing.tests.data.reveal.mod.i->int()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/typing/tests/data/reveal/bitwise_ops.py----------------------------------------
A:numpy.typing.tests.data.reveal.bitwise_ops.i8->numpy.int64(1)
A:numpy.typing.tests.data.reveal.bitwise_ops.u8->numpy.uint64(1)
A:numpy.typing.tests.data.reveal.bitwise_ops.i4->numpy.int32(1)
A:numpy.typing.tests.data.reveal.bitwise_ops.u4->numpy.uint32(1)
A:numpy.typing.tests.data.reveal.bitwise_ops.b_->numpy.bool_(1)
A:numpy.typing.tests.data.reveal.bitwise_ops.b->bool(1)
A:numpy.typing.tests.data.reveal.bitwise_ops.i->int(1)
A:numpy.typing.tests.data.reveal.bitwise_ops.AR->numpy.array([0, 1, 2], dtype=np.int32)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/linalg/linalg.py----------------------------------------
A:numpy.linalg.linalg.array_function_dispatch->functools.partial(overrides.array_function_dispatch, module='numpy.linalg')
A:numpy.linalg.linalg.errobj->geterrobj()
A:numpy.linalg.linalg._linalg_error_extobj->_determine_error_states()
A:numpy.linalg.linalg.extobj->get_linalg_error_extobj(_raise_linalgerror_lstsq)
A:numpy.linalg.linalg.new->asarray(a)
A:numpy.linalg.linalg.wrap->getattr(a, '__array_prepare__', new.__array_wrap__)
A:numpy.linalg.linalg.rt->_realType(a.dtype.type, default=None)
A:numpy.linalg.linalg.a->asarray(a)
A:numpy.linalg.linalg.(a, wrap)->_makearray(a)
A:numpy.linalg.linalg.b->zeros(b.shape[:-2] + (m, n_rhs + 1), dtype=b.dtype)
A:numpy.linalg.linalg.allaxes->list(range(0, an))
A:numpy.linalg.linalg.res->matmul(transpose(vt), multiply(s[..., newaxis], transpose(u)))
A:numpy.linalg.linalg.(a, _)->_makearray(a)
A:numpy.linalg.linalg.(b, wrap)->_makearray(b)
A:numpy.linalg.linalg.(t, result_t)->_commonType(a, b)
A:numpy.linalg.linalg.r->r.astype(result_t, copy=False).astype(result_t, copy=False)
A:numpy.linalg.linalg.ia->inv(a)
A:numpy.linalg.linalg.ainv->numpy.linalg._umath_linalg.inv(a, signature=signature, extobj=extobj)
A:numpy.linalg.linalg.n->len(arrays)
A:numpy.linalg.linalg.a[...]->eye(a.shape[-2], dtype=a.dtype)
A:numpy.linalg.linalg.(n, bit)->divmod(n, 2)
A:numpy.linalg.linalg.msg->''.join(("The 'full' option is deprecated in favor of 'reduced'.\n", 'For backward compatibility let mode default.'))
A:numpy.linalg.linalg.mn->min(m, n)
A:numpy.linalg.linalg.tau->zeros((mn,), t)
A:numpy.linalg.linalg.work->zeros((lwork,), t)
A:numpy.linalg.linalg.results->lapack_routine(m, mc, mn, q, max(1, m), tau, work, lwork, 0)
A:numpy.linalg.linalg.lwork->max(1, n, int(abs(work[0])))
A:numpy.linalg.linalg.q->_fastCopyAndTranspose(result_t, q[:mc])
A:numpy.linalg.linalg.w->w.astype(_realType(result_t), copy=False).astype(_realType(result_t), copy=False)
A:numpy.linalg.linalg.result_t->_complexType(result_t)
A:numpy.linalg.linalg.UPLO->UPLO.upper().upper()
A:numpy.linalg.linalg.(w, vt)->gufunc(a, signature=signature, extobj=extobj)
A:numpy.linalg.linalg.vt->transpose(u * sgn[..., None, :]).conjugate()
A:numpy.linalg.linalg.(s, u)->eigh(a)
A:numpy.linalg.linalg.sgn->numpy.take_along_axis(sgn, sidx, axis=-1)
A:numpy.linalg.linalg.s->empty((n, n), dtype=intp)
A:numpy.linalg.linalg.u->u.astype(result_t, copy=False).astype(result_t, copy=False)
A:numpy.linalg.linalg.(u, s, vh)->gufunc(a, signature=signature, extobj=extobj)
A:numpy.linalg.linalg.vh->vh.astype(result_t, copy=False).astype(result_t, copy=False)
A:numpy.linalg.linalg.x->x.ravel(order='K').ravel(order='K')
A:numpy.linalg.linalg.invx->numpy.linalg._umath_linalg.inv(x, signature=signature)
A:numpy.linalg.linalg.nan_mask->isnan(r)
A:numpy.linalg.linalg.M->asarray(M)
A:numpy.linalg.linalg.S->svd(M, compute_uv=False, hermitian=hermitian)
A:numpy.linalg.linalg.rcond->asarray(rcond)
A:numpy.linalg.linalg.(u, s, vt)->svd(a, full_matrices=False, hermitian=hermitian)
A:numpy.linalg.linalg.real_t->_linalgRealType(t)
A:numpy.linalg.linalg.(sign, logdet)->numpy.linalg._umath_linalg.slogdet(a, signature=signature)
A:numpy.linalg.linalg.sign->numpy.core.sign.astype(result_t, copy=False).astype(result_t, copy=False)
A:numpy.linalg.linalg.logdet->logdet.astype(real_t, copy=False).astype(real_t, copy=False)
A:numpy.linalg.linalg.result_real_t->_realType(result_t)
A:numpy.linalg.linalg.(x, resids, rank, s)->gufunc(a, b, rcond, signature=signature, extobj=extobj)
A:numpy.linalg.linalg.resids->resids.astype(result_real_t, copy=False).astype(result_real_t, copy=False)
A:numpy.linalg.linalg.y->moveaxis(x, (row_axis, col_axis), (-2, -1))
A:numpy.linalg.linalg.result->_multi_dot(arrays, order, 0, n - 1, out=out)
A:numpy.linalg.linalg.sqnorm->dot(x, x)
A:numpy.linalg.linalg.ret->ret.reshape(ret_shape).reshape(ret_shape)
A:numpy.linalg.linalg.axis->int(axis)
A:numpy.linalg.linalg.absx->abs(x)
A:numpy.linalg.linalg.row_axis->normalize_axis_index(row_axis, nd)
A:numpy.linalg.linalg.col_axis->normalize_axis_index(col_axis, nd)
A:numpy.linalg.linalg.ret_shape->list(x.shape)
A:numpy.linalg.linalg.arrays[0]->atleast_2d(arrays[0])
A:numpy.linalg.linalg.order->_multi_dot_matrix_chain_order(arrays)
A:numpy.linalg.linalg.m->zeros((n, n), dtype=double)
numpy.LinAlgError(Exception)
numpy._assert_2d(*arrays)
numpy._assert_finite(*arrays)
numpy._assert_stacked_2d(*arrays)
numpy._assert_stacked_square(*arrays)
numpy._commonType(*arrays)
numpy._complexType(t,default=cdouble)
numpy._cond_dispatcher(x,p=None)
numpy._convertarray(a)
numpy._determine_error_states()
numpy._eigvalsh_dispatcher(a,UPLO=None)
numpy._fastCopyAndTranspose(type,*arrays)
numpy._is_empty_2d(arr)
numpy._linalgRealType(t)
numpy._lstsq_dispatcher(a,b,rcond=None)
numpy._makearray(a)
numpy._matrix_power_dispatcher(a,n)
numpy._matrix_rank_dispatcher(M,tol=None,hermitian=None)
numpy._multi_dot(arrays,order,i,j,out=None)
numpy._multi_dot_matrix_chain_order(arrays,return_costs=False)
numpy._multi_dot_three(A,B,C,out=None)
numpy._multi_svd_norm(x,row_axis,col_axis,op)
numpy._multidot_dispatcher(arrays,*,out=None)
numpy._norm_dispatcher(x,ord=None,axis=None,keepdims=None)
numpy._pinv_dispatcher(a,rcond=None,hermitian=None)
numpy._qr_dispatcher(a,mode=None)
numpy._raise_linalgerror_eigenvalues_nonconvergence(err,flag)
numpy._raise_linalgerror_lstsq(err,flag)
numpy._raise_linalgerror_nonposdef(err,flag)
numpy._raise_linalgerror_singular(err,flag)
numpy._raise_linalgerror_svd_nonconvergence(err,flag)
numpy._realType(t,default=double)
numpy._solve_dispatcher(a,b)
numpy._svd_dispatcher(a,full_matrices=None,compute_uv=None,hermitian=None)
numpy._tensorinv_dispatcher(a,ind=None)
numpy._tensorsolve_dispatcher(a,b,axes=None)
numpy._to_native_byte_order(*arrays)
numpy._unary_dispatcher(a)
numpy.cholesky(a)
numpy.cond(x,p=None)
numpy.det(a)
numpy.eig(a)
numpy.eigh(a,UPLO='L')
numpy.eigvals(a)
numpy.eigvalsh(a,UPLO='L')
numpy.get_linalg_error_extobj(callback)
numpy.inv(a)
numpy.isComplexType(t)
numpy.linalg.linalg.LinAlgError(Exception)
numpy.linalg.linalg._assert_2d(*arrays)
numpy.linalg.linalg._assert_finite(*arrays)
numpy.linalg.linalg._assert_stacked_2d(*arrays)
numpy.linalg.linalg._assert_stacked_square(*arrays)
numpy.linalg.linalg._commonType(*arrays)
numpy.linalg.linalg._complexType(t,default=cdouble)
numpy.linalg.linalg._cond_dispatcher(x,p=None)
numpy.linalg.linalg._convertarray(a)
numpy.linalg.linalg._determine_error_states()
numpy.linalg.linalg._eigvalsh_dispatcher(a,UPLO=None)
numpy.linalg.linalg._fastCopyAndTranspose(type,*arrays)
numpy.linalg.linalg._is_empty_2d(arr)
numpy.linalg.linalg._linalgRealType(t)
numpy.linalg.linalg._lstsq_dispatcher(a,b,rcond=None)
numpy.linalg.linalg._makearray(a)
numpy.linalg.linalg._matrix_power_dispatcher(a,n)
numpy.linalg.linalg._matrix_rank_dispatcher(M,tol=None,hermitian=None)
numpy.linalg.linalg._multi_dot(arrays,order,i,j,out=None)
numpy.linalg.linalg._multi_dot_matrix_chain_order(arrays,return_costs=False)
numpy.linalg.linalg._multi_dot_three(A,B,C,out=None)
numpy.linalg.linalg._multi_svd_norm(x,row_axis,col_axis,op)
numpy.linalg.linalg._multidot_dispatcher(arrays,*,out=None)
numpy.linalg.linalg._norm_dispatcher(x,ord=None,axis=None,keepdims=None)
numpy.linalg.linalg._pinv_dispatcher(a,rcond=None,hermitian=None)
numpy.linalg.linalg._qr_dispatcher(a,mode=None)
numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence(err,flag)
numpy.linalg.linalg._raise_linalgerror_lstsq(err,flag)
numpy.linalg.linalg._raise_linalgerror_nonposdef(err,flag)
numpy.linalg.linalg._raise_linalgerror_singular(err,flag)
numpy.linalg.linalg._raise_linalgerror_svd_nonconvergence(err,flag)
numpy.linalg.linalg._realType(t,default=double)
numpy.linalg.linalg._solve_dispatcher(a,b)
numpy.linalg.linalg._svd_dispatcher(a,full_matrices=None,compute_uv=None,hermitian=None)
numpy.linalg.linalg._tensorinv_dispatcher(a,ind=None)
numpy.linalg.linalg._tensorsolve_dispatcher(a,b,axes=None)
numpy.linalg.linalg._to_native_byte_order(*arrays)
numpy.linalg.linalg._unary_dispatcher(a)
numpy.linalg.linalg.cholesky(a)
numpy.linalg.linalg.cond(x,p=None)
numpy.linalg.linalg.det(a)
numpy.linalg.linalg.eig(a)
numpy.linalg.linalg.eigh(a,UPLO='L')
numpy.linalg.linalg.eigvals(a)
numpy.linalg.linalg.eigvalsh(a,UPLO='L')
numpy.linalg.linalg.get_linalg_error_extobj(callback)
numpy.linalg.linalg.inv(a)
numpy.linalg.linalg.isComplexType(t)
numpy.linalg.linalg.lstsq(a,b,rcond='warn')
numpy.linalg.linalg.matrix_power(a,n)
numpy.linalg.linalg.matrix_rank(M,tol=None,hermitian=False)
numpy.linalg.linalg.multi_dot(arrays,*,out=None)
numpy.linalg.linalg.norm(x,ord=None,axis=None,keepdims=False)
numpy.linalg.linalg.pinv(a,rcond=1e-15,hermitian=False)
numpy.linalg.linalg.qr(a,mode='reduced')
numpy.linalg.linalg.slogdet(a)
numpy.linalg.linalg.solve(a,b)
numpy.linalg.linalg.svd(a,full_matrices=True,compute_uv=True,hermitian=False)
numpy.linalg.linalg.tensorinv(a,ind=2)
numpy.linalg.linalg.tensorsolve(a,b,axes=None)
numpy.linalg.linalg.transpose(a)
numpy.lstsq(a,b,rcond='warn')
numpy.matrix_power(a,n)
numpy.matrix_rank(M,tol=None,hermitian=False)
numpy.multi_dot(arrays,*,out=None)
numpy.norm(x,ord=None,axis=None,keepdims=False)
numpy.pinv(a,rcond=1e-15,hermitian=False)
numpy.qr(a,mode='reduced')
numpy.slogdet(a)
numpy.solve(a,b)
numpy.svd(a,full_matrices=True,compute_uv=True,hermitian=False)
numpy.tensorinv(a,ind=2)
numpy.tensorsolve(a,b,axes=None)
numpy.transpose(a)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/linalg/__init__.py----------------------------------------
A:numpy.linalg.__init__.__all__->linalg.__all__.copy()
A:numpy.linalg.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/linalg/__init__.pyi----------------------------------------
numpy.__init__.LinAlgError(Exception)
numpy.__init__.cholesky(a)
numpy.__init__.cond(x,p=...)
numpy.__init__.det(a)
numpy.__init__.eig(a)
numpy.__init__.eigh(a,UPLO=...)
numpy.__init__.eigvals(a)
numpy.__init__.eigvalsh(a,UPLO=...)
numpy.__init__.inv(a)
numpy.__init__.lstsq(a,b,rcond=...)
numpy.__init__.matrix_power(a,n)
numpy.__init__.matrix_rank(M,tol=...,hermitian=...)
numpy.__init__.multi_dot(arrays,*,out=...)
numpy.__init__.norm(x,ord=...,axis=...,keepdims=...)
numpy.__init__.pinv(a,rcond=...,hermitian=...)
numpy.__init__.qr(a,mode=...)
numpy.__init__.slogdet(a)
numpy.__init__.solve(a,b)
numpy.__init__.svd(a,full_matrices=...,compute_uv=...,hermitian=...)
numpy.__init__.tensorinv(a,ind=...)
numpy.__init__.tensorsolve(a,b,axes=...)
numpy.linalg.__init__.LinAlgError(Exception)
numpy.linalg.__init__.cholesky(a)
numpy.linalg.__init__.cond(x,p=...)
numpy.linalg.__init__.det(a)
numpy.linalg.__init__.eig(a)
numpy.linalg.__init__.eigh(a,UPLO=...)
numpy.linalg.__init__.eigvals(a)
numpy.linalg.__init__.eigvalsh(a,UPLO=...)
numpy.linalg.__init__.inv(a)
numpy.linalg.__init__.lstsq(a,b,rcond=...)
numpy.linalg.__init__.matrix_power(a,n)
numpy.linalg.__init__.matrix_rank(M,tol=...,hermitian=...)
numpy.linalg.__init__.multi_dot(arrays,*,out=...)
numpy.linalg.__init__.norm(x,ord=...,axis=...,keepdims=...)
numpy.linalg.__init__.pinv(a,rcond=...,hermitian=...)
numpy.linalg.__init__.qr(a,mode=...)
numpy.linalg.__init__.slogdet(a)
numpy.linalg.__init__.solve(a,b)
numpy.linalg.__init__.svd(a,full_matrices=...,compute_uv=...,hermitian=...)
numpy.linalg.__init__.tensorinv(a,ind=...)
numpy.linalg.__init__.tensorsolve(a,b,axes=...)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/linalg/setup.py----------------------------------------
A:numpy.linalg.setup.config->Configuration('linalg', parent_package, top_path)
A:numpy.linalg.setup.all_sources->Configuration('linalg', parent_package, top_path).paths(lapack_lite_src)
A:numpy.linalg.setup.lapack_info->numpy_linalg_lapack_lite().get_info(2)
numpy.linalg.setup.configuration(parent_package='',top_path=None)
numpy.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/linalg/tests/test_build.py----------------------------------------
A:numpy.linalg.tests.test_build.p->Popen(self.cmd + [lfile], stdout=PIPE, stderr=PIPE)
A:numpy.linalg.tests.test_build.(stdout, stderr)->Popen(self.cmd + [lfile], stdout=PIPE, stderr=PIPE).communicate()
A:numpy.linalg.tests.test_build.stdout->self.get_dependencies(lfile)
A:numpy.linalg.tests.test_build.rdeps->dict([(dep, re.compile(dep)) for dep in deps])
A:numpy.linalg.tests.test_build.f->FindDependenciesLdd()
A:numpy.linalg.tests.test_build.deps->FindDependenciesLdd().grep_dependencies(lapack_lite.__file__, [b'libg2c', b'libgfortran'])
numpy.linalg.tests.test_build.FindDependenciesLdd(self)
numpy.linalg.tests.test_build.FindDependenciesLdd.__init__(self)
numpy.linalg.tests.test_build.FindDependenciesLdd.get_dependencies(self,lfile)
numpy.linalg.tests.test_build.FindDependenciesLdd.grep_dependencies(self,lfile,deps)
numpy.linalg.tests.test_build.TestF77Mismatch
numpy.linalg.tests.test_build.TestF77Mismatch.test_lapack(self)
numpy.tests.test_build.FindDependenciesLdd(self)
numpy.tests.test_build.FindDependenciesLdd.get_dependencies(self,lfile)
numpy.tests.test_build.FindDependenciesLdd.grep_dependencies(self,lfile,deps)
numpy.tests.test_build.TestF77Mismatch
numpy.tests.test_build.TestF77Mismatch.test_lapack(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/linalg/tests/test_linalg.py----------------------------------------
A:numpy.linalg.tests.test_linalg.self.tags->frozenset(tags)
A:numpy.linalg.tests.test_linalg.a->numpy.zeros([1, 1], dtype=dtype)
A:numpy.linalg.tests.test_linalg.b->numpy.ones([1, 1], dtype=np.float32)
A:numpy.linalg.tests.test_linalg.new_case->LinalgCase(case.name + '_' + a_label + '_' + b_label, a, b, tags=case.tags | {'strided'})
A:numpy.linalg.tests.test_linalg.slices->tuple([slice(None, None, repeat) for repeat in repeats])
A:numpy.linalg.tests.test_linalg.xi->numpy.lib.stride_tricks.as_strided(x, strides=s)
A:numpy.linalg.tests.test_linalg.s->numpy.atleast_1d(s)
A:numpy.linalg.tests.test_linalg.r->numpy.empty(a.shape, dtype=a.dtype)
A:numpy.linalg.tests.test_linalg.r[c]->dot(a[c], b[c])
A:numpy.linalg.tests.test_linalg.r[...]->identity(a.shape[-2])
A:numpy.linalg.tests.test_linalg.x->numpy.array([-2 ** 31], dtype=np.int32)
A:numpy.linalg.tests.test_linalg.result->numpy.linalg.solve(a[:, 0:0, 0:0], b[:, 0:0, 0:0])
A:numpy.linalg.tests.test_linalg.a_inv->numpy.linalg.inv(a)
A:numpy.linalg.tests.test_linalg.res->routine(arr)
A:numpy.linalg.tests.test_linalg.ev->numpy.linalg.eigvalsh(a, 'L')
A:numpy.linalg.tests.test_linalg.(evalues, evectors)->numpy.linalg.eig(a)
A:numpy.linalg.tests.test_linalg.(w, v)->numpy.linalg.eigh(Kup, UPLO='u')
A:numpy.linalg.tests.test_linalg.(res, res_v)->numpy.linalg.eigh(a)
A:numpy.linalg.tests.test_linalg.(u, s, vh)->numpy.linalg.svd(x, compute_uv=True, hermitian=self.hermitian)
A:numpy.linalg.tests.test_linalg.(u, s, vt)->numpy.linalg.svd(a, False)
A:numpy.linalg.tests.test_linalg.axes->list(range(mat.ndim))
A:numpy.linalg.tests.test_linalg.c->numpy.dot(b, a)
A:numpy.linalg.tests.test_linalg.cinv->numpy.linalg.inv(c)
A:numpy.linalg.tests.test_linalg.A->numpy.random.random((6, 2))
A:numpy.linalg.tests.test_linalg.a_ginv->numpy.linalg.pinv(a, hermitian=True)
A:numpy.linalg.tests.test_linalg.d->d.astype(np.complex64).astype(np.complex64)
A:numpy.linalg.tests.test_linalg.(s, ld)->numpy.linalg.slogdet(a)
A:numpy.linalg.tests.test_linalg.ad->asarray(a).astype(cdouble)
A:numpy.linalg.tests.test_linalg.ld->numpy.atleast_1d(ld)
A:numpy.linalg.tests.test_linalg.(ph, s)->numpy.linalg.slogdet(x)
A:numpy.linalg.tests.test_linalg.arr->numpy.array([[1, -2], [2, 5]], dtype='float16')
A:numpy.linalg.tests.test_linalg.(x, residuals, rank, sv)->numpy.linalg.lstsq(a, b, rcond=-1)
A:numpy.linalg.tests.test_linalg.expect_resids->numpy.array([]).view(type(x))
A:numpy.linalg.tests.test_linalg.w->numpy.linalg.eigvalsh(Kup, UPLO='u')
A:numpy.linalg.tests.test_linalg.(x, residuals, rank, s)->numpy.linalg.lstsq(a, b, rcond=None)
A:numpy.linalg.tests.test_linalg.y->numpy.array([-1, 0.2, 0.9, 2.1, 3.3])
A:numpy.linalg.tests.test_linalg.rshft_0->numpy.eye(4)
A:numpy.linalg.tests.test_linalg.noninv->array([[1, 0], [0, 0]])
A:numpy.linalg.tests.test_linalg.stacked->numpy.block([[[rshft_0]]] * 2)
A:numpy.linalg.tests.test_linalg.rshft->self.rshft_1.astype(dt)
A:numpy.linalg.tests.test_linalg.mz->matrix_power(mat, 2)
A:numpy.linalg.tests.test_linalg.invmat->matrix_power(mat, -1)
A:numpy.linalg.tests.test_linalg.mat->self.noninv.astype(dt)
A:numpy.linalg.tests.test_linalg.ev2->numpy.linalg.eigvalsh(a, 'U')
A:numpy.linalg.tests.test_linalg.Klo->numpy.array([[0, 0], [1, 0]], dtype=np.double)
A:numpy.linalg.tests.test_linalg.Kup->numpy.array([[0, 1], [0, 0]], dtype=np.double)
A:numpy.linalg.tests.test_linalg.tgt->numpy.array([-1, 1], dtype=np.double)
A:numpy.linalg.tests.test_linalg.rtol->get_rtol(np.double)
A:numpy.linalg.tests.test_linalg.(ev, evc)->numpy.linalg.eigh(a)
A:numpy.linalg.tests.test_linalg.(ev2, evc2)->numpy.linalg.eigh(a, 'U')
A:numpy.linalg.tests.test_linalg.at->numpy.zeros([1, 1], dtype=dtype).astype(each_inexact_types)
A:numpy.linalg.tests.test_linalg.an->norm(at, 'nuc')
A:numpy.linalg.tests.test_linalg.B->numpy.random.random((2, 6))
A:numpy.linalg.tests.test_linalg.n->norm(B, ord=order, axis=axis)
A:numpy.linalg.tests.test_linalg.expected->norm(A, ord=order, axis=k)
A:numpy.linalg.tests.test_linalg.found->norm(A, ord=order, axis=k, keepdims=True)
A:numpy.linalg.tests.test_linalg.expected_shape->tuple(expected_shape)
A:numpy.linalg.tests.test_linalg.I->numpy.eye(4)
A:numpy.linalg.tests.test_linalg.ms->numpy.array([I, np.eye(4), np.zeros((4, 4))])
A:numpy.linalg.tests.test_linalg.rng->numpy.random.RandomState(20120714)
A:numpy.linalg.tests.test_linalg.X->numpy.random.RandomState(20120714).normal(size=(40, 10))
A:numpy.linalg.tests.test_linalg.a_type->type(a)
A:numpy.linalg.tests.test_linalg.k->min(m, n)
A:numpy.linalg.tests.test_linalg.(q, r)->numpy.linalg.qr(a, mode='complete')
A:numpy.linalg.tests.test_linalg.(q1, r1)->numpy.linalg.qr(a, mode='reduced')
A:numpy.linalg.tests.test_linalg.r2->numpy.linalg.qr(a, mode='r')
A:numpy.linalg.tests.test_linalg.(h, tau)->numpy.linalg.qr(a.T, mode='raw')
A:numpy.linalg.tests.test_linalg.m1->numpy.zeros([1, 1], dtype=dtype).astype(dt)
A:numpy.linalg.tests.test_linalg.m2->numpy.ones([1, 1], dtype=np.float32).astype(dt)
A:numpy.linalg.tests.test_linalg.t->list(range(len(shape)))
A:numpy.linalg.tests.test_linalg.n_arr->numpy.array([[1, -2], [2, 5]], dtype='float16').newbyteorder(native)
A:numpy.linalg.tests.test_linalg.sw_arr->numpy.array([[1, -2], [2, 5]], dtype='float16').newbyteorder('S').byteswap()
A:numpy.linalg.tests.test_linalg.invertible->numpy.array([[1, 2], [3, 4]])
A:numpy.linalg.tests.test_linalg.non_invertible->numpy.array([[1, 1], [1, 1]])
A:numpy.linalg.tests.test_linalg.pid->os.fork()
A:numpy.linalg.tests.test_linalg.(pid, status)->os.wait()
A:numpy.linalg.tests.test_linalg.template->textwrap.dedent('\n    import sys\n    {before}\n    try:\n        import {bad_lib}\n    except ImportError:\n        sys.exit(0)\n    {after}\n    x = np.ones(2, dtype=np.float32)\n    sys.exit(0 if np.allclose(x.dot(x), 2.0) else 1)\n    ')
A:numpy.linalg.tests.test_linalg.code->textwrap.dedent('\n    import sys\n    {before}\n    try:\n        import {bad_lib}\n    except ImportError:\n        sys.exit(0)\n    {after}\n    x = np.ones(2, dtype=np.float32)\n    sys.exit(0 if np.allclose(x.dot(x), 2.0) else 1)\n    ').format(after='import numpy as np', before='', bad_lib=bad_lib)
A:numpy.linalg.tests.test_linalg.C->numpy.random.random((6, 2))
A:numpy.linalg.tests.test_linalg.D->numpy.random.random((2, 1))
A:numpy.linalg.tests.test_linalg.A1d->numpy.random.random(2)
A:numpy.linalg.tests.test_linalg.D1d->numpy.random.random(2)
A:numpy.linalg.tests.test_linalg.out->numpy.zeros((6, 1))
A:numpy.linalg.tests.test_linalg.ret->multi_dot([A, B, C, D], out=out)
A:numpy.linalg.tests.test_linalg.m_expected->numpy.array([[0.0, 15750.0, 7875.0, 9375.0, 11875.0, 15125.0], [0.0, 0.0, 2625.0, 4375.0, 7125.0, 10500.0], [0.0, 0.0, 0.0, 750.0, 2500.0, 5375.0], [0.0, 0.0, 0.0, 0.0, 1000.0, 3500.0], [0.0, 0.0, 0.0, 0.0, 0.0, 5000.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])
A:numpy.linalg.tests.test_linalg.s_expected->numpy.array([[0, 1, 1, 3, 3, 3], [0, 0, 2, 3, 3, 3], [0, 0, 0, 3, 3, 3], [0, 0, 0, 0, 4, 5], [0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0]], dtype=int)
A:numpy.linalg.tests.test_linalg.(s, m)->_multi_dot_matrix_chain_order(arrays, return_costs=True)
A:numpy.linalg.tests.test_linalg.ainv->numpy.linalg.tensorinv(a, ind=1)
A:numpy.linalg.tests.test_linalg.work->numpy.zeros([1], dtype=dtype)
A:numpy.linalg.tests.test_linalg.tau->numpy.zeros([1], dtype=dtype)
A:numpy.linalg.tests.test_linalg.results->lapack_routine(m, n, a, lda, tau, work, -1, 0)
A:numpy.linalg.tests.test_linalg.lwork->int(work.item())
numpy.linalg.tests.test_linalg.CondCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.test_linalg.CondCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.DetCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.test_linalg.DetCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.EigCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.test_linalg.EigCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.EigvalsCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.test_linalg.EigvalsCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase(LinalgTestCase)
numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase.test_generalized_empty_herm_cases(self)
numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase.test_generalized_herm_cases(self)
numpy.linalg.tests.test_linalg.HermitianTestCase(LinalgTestCase)
numpy.linalg.tests.test_linalg.HermitianTestCase.test_empty_herm_cases(self)
numpy.linalg.tests.test_linalg.HermitianTestCase.test_herm_cases(self)
numpy.linalg.tests.test_linalg.InvCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.test_linalg.InvCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.LinalgCase(self,name,a,b,tags=set())
numpy.linalg.tests.test_linalg.LinalgCase.__init__(self,name,a,b,tags=set())
numpy.linalg.tests.test_linalg.LinalgCase.__repr__(self)
numpy.linalg.tests.test_linalg.LinalgCase.check(self,do)
numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase(LinalgTestCase)
numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase.test_generalized_empty_nonsq_cases(self)
numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase.test_generalized_nonsq_cases(self)
numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase(LinalgTestCase)
numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase.test_generalized_empty_sq_cases(self)
numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase.test_generalized_sq_cases(self)
numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase(LinalgTestCase)
numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase.test_empty_nonsq_cases(self)
numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase.test_nonsq_cases(self)
numpy.linalg.tests.test_linalg.LinalgSquareTestCase(LinalgTestCase)
numpy.linalg.tests.test_linalg.LinalgSquareTestCase.test_empty_sq_cases(self)
numpy.linalg.tests.test_linalg.LinalgSquareTestCase.test_sq_cases(self)
numpy.linalg.tests.test_linalg.LinalgTestCase
numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases(self,require=set(),exclude=set())
numpy.linalg.tests.test_linalg.LstsqCases(LinalgSquareTestCase,LinalgNonsquareTestCase)
numpy.linalg.tests.test_linalg.LstsqCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.PinvCases(LinalgSquareTestCase,LinalgNonsquareTestCase,LinalgGeneralizedSquareTestCase,LinalgGeneralizedNonsquareTestCase)
numpy.linalg.tests.test_linalg.PinvCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.PinvHermitianCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.linalg.tests.test_linalg.PinvHermitianCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.SVDBaseTests
numpy.linalg.tests.test_linalg.SVDBaseTests.test_types(self,dtype)
numpy.linalg.tests.test_linalg.SVDCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.test_linalg.SVDCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.SVDHermitianCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.linalg.tests.test_linalg.SVDHermitianCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.SolveCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.linalg.tests.test_linalg.SolveCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.TestCholesky
numpy.linalg.tests.test_linalg.TestCholesky.test_0_size(self)
numpy.linalg.tests.test_linalg.TestCholesky.test_basic_property(self)
numpy.linalg.tests.test_linalg.TestCond(CondCases)
numpy.linalg.tests.test_linalg.TestCond.test_basic_nonsvd(self)
numpy.linalg.tests.test_linalg.TestCond.test_nan(self)
numpy.linalg.tests.test_linalg.TestCond.test_singular(self)
numpy.linalg.tests.test_linalg.TestCond.test_stacked_singular(self)
numpy.linalg.tests.test_linalg.TestDet(DetCases)
numpy.linalg.tests.test_linalg.TestDet.test_0_size(self)
numpy.linalg.tests.test_linalg.TestDet.test_types(self,dtype)
numpy.linalg.tests.test_linalg.TestDet.test_zero(self)
numpy.linalg.tests.test_linalg.TestEig(EigCases)
numpy.linalg.tests.test_linalg.TestEig.test_0_size(self)
numpy.linalg.tests.test_linalg.TestEig.test_types(self,dtype)
numpy.linalg.tests.test_linalg.TestEigh
numpy.linalg.tests.test_linalg.TestEigh.test_0_size(self)
numpy.linalg.tests.test_linalg.TestEigh.test_UPLO(self)
numpy.linalg.tests.test_linalg.TestEigh.test_invalid(self)
numpy.linalg.tests.test_linalg.TestEigh.test_types(self,dtype)
numpy.linalg.tests.test_linalg.TestEighCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.linalg.tests.test_linalg.TestEighCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.TestEigvals(EigvalsCases)
numpy.linalg.tests.test_linalg.TestEigvals.test_0_size(self)
numpy.linalg.tests.test_linalg.TestEigvals.test_types(self,dtype)
numpy.linalg.tests.test_linalg.TestEigvalsh
numpy.linalg.tests.test_linalg.TestEigvalsh.test_0_size(self)
numpy.linalg.tests.test_linalg.TestEigvalsh.test_UPLO(self)
numpy.linalg.tests.test_linalg.TestEigvalsh.test_invalid(self)
numpy.linalg.tests.test_linalg.TestEigvalsh.test_types(self,dtype)
numpy.linalg.tests.test_linalg.TestEigvalshCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.linalg.tests.test_linalg.TestEigvalshCases.do(self,a,b,tags)
numpy.linalg.tests.test_linalg.TestInv(InvCases)
numpy.linalg.tests.test_linalg.TestInv.test_0_size(self)
numpy.linalg.tests.test_linalg.TestInv.test_types(self,dtype)
numpy.linalg.tests.test_linalg.TestLstsq(LstsqCases)
numpy.linalg.tests.test_linalg.TestLstsq.test_empty_a_b(self,m,n,n_rhs)
numpy.linalg.tests.test_linalg.TestLstsq.test_future_rcond(self)
numpy.linalg.tests.test_linalg.TestLstsq.test_incompatible_dims(self)
numpy.linalg.tests.test_linalg.TestMatrixPower
numpy.linalg.tests.test_linalg.TestMatrixPower.test_exceptions_bad_power(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_exceptions_non_square(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_exceptions_not_invertible(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_large_power(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_minus_one(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_one(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_two(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixPower.test_power_is_zero(self,dt)
numpy.linalg.tests.test_linalg.TestMatrixRank
numpy.linalg.tests.test_linalg.TestMatrixRank.test_matrix_rank(self)
numpy.linalg.tests.test_linalg.TestMatrixRank.test_symmetric_rank(self)
numpy.linalg.tests.test_linalg.TestMultiDot
numpy.linalg.tests.test_linalg.TestMultiDot.test_basic_function_with_dynamic_programing_optimization(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_basic_function_with_three_arguments(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_basic_function_with_two_arguments(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_dynamic_programing_optimization_and_out(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_dynamic_programming_logic(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_three_arguments_and_out(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_too_few_input_arrays(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_two_arguments_and_out(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_vector_as_first_and_last_argument(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_vector_as_first_argument(self)
numpy.linalg.tests.test_linalg.TestMultiDot.test_vector_as_last_argument(self)
numpy.linalg.tests.test_linalg.TestNormDouble(_TestNorm,_TestNormDoubleBase)
numpy.linalg.tests.test_linalg.TestNormInt64(_TestNorm,_TestNormInt64Base)
numpy.linalg.tests.test_linalg.TestNormSingle(_TestNorm,_TestNormSingleBase)
numpy.linalg.tests.test_linalg.TestNorm_NonSystematic
numpy.linalg.tests.test_linalg.TestNorm_NonSystematic.test_complex_high_ord(self)
numpy.linalg.tests.test_linalg.TestNorm_NonSystematic.test_intmin(self)
numpy.linalg.tests.test_linalg.TestNorm_NonSystematic.test_longdouble_norm(self)
numpy.linalg.tests.test_linalg.TestPinv(PinvCases)
numpy.linalg.tests.test_linalg.TestPinvHermitian(PinvHermitianCases)
numpy.linalg.tests.test_linalg.TestQR
numpy.linalg.tests.test_linalg.TestQR.check_qr(self,a)
numpy.linalg.tests.test_linalg.TestQR.test_mode_all_but_economic(self)
numpy.linalg.tests.test_linalg.TestQR.test_mode_raw(self)
numpy.linalg.tests.test_linalg.TestQR.test_qr_empty(self,m,n)
numpy.linalg.tests.test_linalg.TestSVD(SVDCases,SVDBaseTests)
numpy.linalg.tests.test_linalg.TestSVD.test_empty_identity(self)
numpy.linalg.tests.test_linalg.TestSVDHermitian(SVDHermitianCases,SVDBaseTests)
numpy.linalg.tests.test_linalg.TestSolve(SolveCases)
numpy.linalg.tests.test_linalg.TestSolve.test_0_size(self)
numpy.linalg.tests.test_linalg.TestSolve.test_0_size_k(self)
numpy.linalg.tests.test_linalg.TestSolve.test_types(self,dtype)
numpy.linalg.tests.test_linalg.TestTensorinv
numpy.linalg.tests.test_linalg.TestTensorinv.test_non_square_handling(self,arr,ind)
numpy.linalg.tests.test_linalg.TestTensorinv.test_tensorinv_ind_limit(self,ind)
numpy.linalg.tests.test_linalg.TestTensorinv.test_tensorinv_result(self)
numpy.linalg.tests.test_linalg.TestTensorinv.test_tensorinv_shape(self,shape,ind)
numpy.linalg.tests.test_linalg._TestNorm(_TestNorm2D,_TestNormGeneral)
numpy.linalg.tests.test_linalg._TestNorm2D(_TestNormBase)
numpy.linalg.tests.test_linalg._TestNorm2D.test_bad_args(self)
numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_2x2(self)
numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_3x3(self)
numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_empty(self)
numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_return_type(self)
numpy.linalg.tests.test_linalg._TestNormBase
numpy.linalg.tests.test_linalg._TestNormDoubleBase(_TestNormBase)
numpy.linalg.tests.test_linalg._TestNormGeneral(_TestNormBase)
numpy.linalg.tests.test_linalg._TestNormGeneral.test_axis(self)
numpy.linalg.tests.test_linalg._TestNormGeneral.test_empty(self)
numpy.linalg.tests.test_linalg._TestNormGeneral.test_keepdims(self)
numpy.linalg.tests.test_linalg._TestNormGeneral.test_vector(self)
numpy.linalg.tests.test_linalg._TestNormGeneral.test_vector_return_type(self)
numpy.linalg.tests.test_linalg._TestNormInt64Base(_TestNormBase)
numpy.linalg.tests.test_linalg._TestNormSingleBase(_TestNormBase)
numpy.linalg.tests.test_linalg._make_generalized_cases()
numpy.linalg.tests.test_linalg._make_strided_cases()
numpy.linalg.tests.test_linalg._stride_comb_iter(x)
numpy.linalg.tests.test_linalg.apply_tag(tag,cases)
numpy.linalg.tests.test_linalg.assert_almost_equal(a,b,single_decimal=6,double_decimal=12,**kw)
numpy.linalg.tests.test_linalg.consistent_subclass(out,in_)
numpy.linalg.tests.test_linalg.dot_generalized(a,b)
numpy.linalg.tests.test_linalg.get_complex_dtype(dtype)
numpy.linalg.tests.test_linalg.get_real_dtype(dtype)
numpy.linalg.tests.test_linalg.get_rtol(dtype)
numpy.linalg.tests.test_linalg.identity_like_generalized(a)
numpy.linalg.tests.test_linalg.test_blas64_dot()
numpy.linalg.tests.test_linalg.test_blas64_geqrf_lwork_smoketest()
numpy.linalg.tests.test_linalg.test_byteorder_check()
numpy.linalg.tests.test_linalg.test_generalized_raise_multiloop()
numpy.linalg.tests.test_linalg.test_reduced_rank()
numpy.linalg.tests.test_linalg.test_sdot_bug_8577()
numpy.linalg.tests.test_linalg.test_unsupported_commontype()
numpy.linalg.tests.test_linalg.test_xerbla_override()
numpy.tests.test_CondCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.tests.test_CondCases.do(self,a,b,tags)
numpy.tests.test_DetCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.tests.test_DetCases.do(self,a,b,tags)
numpy.tests.test_EigCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.tests.test_EigCases.do(self,a,b,tags)
numpy.tests.test_EigvalsCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.tests.test_EigvalsCases.do(self,a,b,tags)
numpy.tests.test_HermitianGeneralizedTestCase(LinalgTestCase)
numpy.tests.test_HermitianGeneralizedTestCase.test_generalized_empty_herm_cases(self)
numpy.tests.test_HermitianGeneralizedTestCase.test_generalized_herm_cases(self)
numpy.tests.test_HermitianTestCase(LinalgTestCase)
numpy.tests.test_HermitianTestCase.test_empty_herm_cases(self)
numpy.tests.test_HermitianTestCase.test_herm_cases(self)
numpy.tests.test_InvCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.tests.test_InvCases.do(self,a,b,tags)
numpy.tests.test_LinalgCase(self,name,a,b,tags=set())
numpy.tests.test_LinalgCase.__repr__(self)
numpy.tests.test_LinalgCase.check(self,do)
numpy.tests.test_LinalgGeneralizedNonsquareTestCase(LinalgTestCase)
numpy.tests.test_LinalgGeneralizedNonsquareTestCase.test_generalized_empty_nonsq_cases(self)
numpy.tests.test_LinalgGeneralizedNonsquareTestCase.test_generalized_nonsq_cases(self)
numpy.tests.test_LinalgGeneralizedSquareTestCase(LinalgTestCase)
numpy.tests.test_LinalgGeneralizedSquareTestCase.test_generalized_empty_sq_cases(self)
numpy.tests.test_LinalgGeneralizedSquareTestCase.test_generalized_sq_cases(self)
numpy.tests.test_LinalgNonsquareTestCase(LinalgTestCase)
numpy.tests.test_LinalgNonsquareTestCase.test_empty_nonsq_cases(self)
numpy.tests.test_LinalgNonsquareTestCase.test_nonsq_cases(self)
numpy.tests.test_LinalgSquareTestCase(LinalgTestCase)
numpy.tests.test_LinalgSquareTestCase.test_empty_sq_cases(self)
numpy.tests.test_LinalgSquareTestCase.test_sq_cases(self)
numpy.tests.test_LinalgTestCase
numpy.tests.test_LinalgTestCase.check_cases(self,require=set(),exclude=set())
numpy.tests.test_LstsqCases(LinalgSquareTestCase,LinalgNonsquareTestCase)
numpy.tests.test_LstsqCases.do(self,a,b,tags)
numpy.tests.test_PinvCases(LinalgSquareTestCase,LinalgNonsquareTestCase,LinalgGeneralizedSquareTestCase,LinalgGeneralizedNonsquareTestCase)
numpy.tests.test_PinvCases.do(self,a,b,tags)
numpy.tests.test_PinvHermitianCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.tests.test_PinvHermitianCases.do(self,a,b,tags)
numpy.tests.test_SVDBaseTests
numpy.tests.test_SVDBaseTests.test_types(self,dtype)
numpy.tests.test_SVDCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.tests.test_SVDCases.do(self,a,b,tags)
numpy.tests.test_SVDHermitianCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.tests.test_SVDHermitianCases.do(self,a,b,tags)
numpy.tests.test_SolveCases(LinalgSquareTestCase,LinalgGeneralizedSquareTestCase)
numpy.tests.test_SolveCases.do(self,a,b,tags)
numpy.tests.test_TestCholesky
numpy.tests.test_TestCholesky.test_0_size(self)
numpy.tests.test_TestCholesky.test_basic_property(self)
numpy.tests.test_TestCond(CondCases)
numpy.tests.test_TestCond.test_basic_nonsvd(self)
numpy.tests.test_TestCond.test_nan(self)
numpy.tests.test_TestCond.test_singular(self)
numpy.tests.test_TestCond.test_stacked_singular(self)
numpy.tests.test_TestDet(DetCases)
numpy.tests.test_TestDet.test_0_size(self)
numpy.tests.test_TestDet.test_types(self,dtype)
numpy.tests.test_TestDet.test_zero(self)
numpy.tests.test_TestEig(EigCases)
numpy.tests.test_TestEig.test_0_size(self)
numpy.tests.test_TestEig.test_types(self,dtype)
numpy.tests.test_TestEigh
numpy.tests.test_TestEigh.test_0_size(self)
numpy.tests.test_TestEigh.test_UPLO(self)
numpy.tests.test_TestEigh.test_invalid(self)
numpy.tests.test_TestEigh.test_types(self,dtype)
numpy.tests.test_TestEighCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.tests.test_TestEighCases.do(self,a,b,tags)
numpy.tests.test_TestEigvals(EigvalsCases)
numpy.tests.test_TestEigvals.test_0_size(self)
numpy.tests.test_TestEigvals.test_types(self,dtype)
numpy.tests.test_TestEigvalsh
numpy.tests.test_TestEigvalsh.test_0_size(self)
numpy.tests.test_TestEigvalsh.test_UPLO(self)
numpy.tests.test_TestEigvalsh.test_invalid(self)
numpy.tests.test_TestEigvalsh.test_types(self,dtype)
numpy.tests.test_TestEigvalshCases(HermitianTestCase,HermitianGeneralizedTestCase)
numpy.tests.test_TestEigvalshCases.do(self,a,b,tags)
numpy.tests.test_TestInv(InvCases)
numpy.tests.test_TestInv.test_0_size(self)
numpy.tests.test_TestInv.test_types(self,dtype)
numpy.tests.test_TestLstsq(LstsqCases)
numpy.tests.test_TestLstsq.test_empty_a_b(self,m,n,n_rhs)
numpy.tests.test_TestLstsq.test_future_rcond(self)
numpy.tests.test_TestLstsq.test_incompatible_dims(self)
numpy.tests.test_TestMatrixPower
numpy.tests.test_TestMatrixPower.test_exceptions_bad_power(self,dt)
numpy.tests.test_TestMatrixPower.test_exceptions_non_square(self,dt)
numpy.tests.test_TestMatrixPower.test_exceptions_not_invertible(self,dt)
numpy.tests.test_TestMatrixPower.test_large_power(self,dt)
numpy.tests.test_TestMatrixPower.test_power_is_minus_one(self,dt)
numpy.tests.test_TestMatrixPower.test_power_is_one(self,dt)
numpy.tests.test_TestMatrixPower.test_power_is_two(self,dt)
numpy.tests.test_TestMatrixPower.test_power_is_zero(self,dt)
numpy.tests.test_TestMatrixRank
numpy.tests.test_TestMatrixRank.test_matrix_rank(self)
numpy.tests.test_TestMatrixRank.test_symmetric_rank(self)
numpy.tests.test_TestMultiDot
numpy.tests.test_TestMultiDot.test_basic_function_with_dynamic_programing_optimization(self)
numpy.tests.test_TestMultiDot.test_basic_function_with_three_arguments(self)
numpy.tests.test_TestMultiDot.test_basic_function_with_two_arguments(self)
numpy.tests.test_TestMultiDot.test_dynamic_programing_optimization_and_out(self)
numpy.tests.test_TestMultiDot.test_dynamic_programming_logic(self)
numpy.tests.test_TestMultiDot.test_three_arguments_and_out(self)
numpy.tests.test_TestMultiDot.test_too_few_input_arrays(self)
numpy.tests.test_TestMultiDot.test_two_arguments_and_out(self)
numpy.tests.test_TestMultiDot.test_vector_as_first_and_last_argument(self)
numpy.tests.test_TestMultiDot.test_vector_as_first_argument(self)
numpy.tests.test_TestMultiDot.test_vector_as_last_argument(self)
numpy.tests.test_TestNormDouble(_TestNorm,_TestNormDoubleBase)
numpy.tests.test_TestNormInt64(_TestNorm,_TestNormInt64Base)
numpy.tests.test_TestNormSingle(_TestNorm,_TestNormSingleBase)
numpy.tests.test_TestNorm_NonSystematic
numpy.tests.test_TestNorm_NonSystematic.test_complex_high_ord(self)
numpy.tests.test_TestNorm_NonSystematic.test_intmin(self)
numpy.tests.test_TestNorm_NonSystematic.test_longdouble_norm(self)
numpy.tests.test_TestPinv(PinvCases)
numpy.tests.test_TestPinvHermitian(PinvHermitianCases)
numpy.tests.test_TestQR
numpy.tests.test_TestQR.check_qr(self,a)
numpy.tests.test_TestQR.test_mode_all_but_economic(self)
numpy.tests.test_TestQR.test_mode_raw(self)
numpy.tests.test_TestQR.test_qr_empty(self,m,n)
numpy.tests.test_TestSVD(SVDCases,SVDBaseTests)
numpy.tests.test_TestSVD.test_empty_identity(self)
numpy.tests.test_TestSVDHermitian(SVDHermitianCases,SVDBaseTests)
numpy.tests.test_TestSolve(SolveCases)
numpy.tests.test_TestSolve.test_0_size(self)
numpy.tests.test_TestSolve.test_0_size_k(self)
numpy.tests.test_TestSolve.test_types(self,dtype)
numpy.tests.test_TestTensorinv
numpy.tests.test_TestTensorinv.test_non_square_handling(self,arr,ind)
numpy.tests.test_TestTensorinv.test_tensorinv_ind_limit(self,ind)
numpy.tests.test_TestTensorinv.test_tensorinv_result(self)
numpy.tests.test_TestTensorinv.test_tensorinv_shape(self,shape,ind)
numpy.tests.test__TestNorm(_TestNorm2D,_TestNormGeneral)
numpy.tests.test__TestNorm2D(_TestNormBase)
numpy.tests.test__TestNorm2D.test_bad_args(self)
numpy.tests.test__TestNorm2D.test_matrix_2x2(self)
numpy.tests.test__TestNorm2D.test_matrix_3x3(self)
numpy.tests.test__TestNorm2D.test_matrix_empty(self)
numpy.tests.test__TestNorm2D.test_matrix_return_type(self)
numpy.tests.test__TestNormBase
numpy.tests.test__TestNormDoubleBase(_TestNormBase)
numpy.tests.test__TestNormGeneral(_TestNormBase)
numpy.tests.test__TestNormGeneral.test_axis(self)
numpy.tests.test__TestNormGeneral.test_empty(self)
numpy.tests.test__TestNormGeneral.test_keepdims(self)
numpy.tests.test__TestNormGeneral.test_vector(self)
numpy.tests.test__TestNormGeneral.test_vector_return_type(self)
numpy.tests.test__TestNormInt64Base(_TestNormBase)
numpy.tests.test__TestNormSingleBase(_TestNormBase)
numpy.tests.test__make_generalized_cases()
numpy.tests.test__make_strided_cases()
numpy.tests.test__stride_comb_iter(x)
numpy.tests.test_apply_tag(tag,cases)
numpy.tests.test_assert_almost_equal(a,b,single_decimal=6,double_decimal=12,**kw)
numpy.tests.test_consistent_subclass(out,in_)
numpy.tests.test_dot_generalized(a,b)
numpy.tests.test_get_complex_dtype(dtype)
numpy.tests.test_get_real_dtype(dtype)
numpy.tests.test_get_rtol(dtype)
numpy.tests.test_identity_like_generalized(a)
numpy.tests.test_test_blas64_dot()
numpy.tests.test_test_blas64_geqrf_lwork_smoketest()
numpy.tests.test_test_byteorder_check()
numpy.tests.test_test_generalized_raise_multiloop()
numpy.tests.test_test_reduced_rank()
numpy.tests.test_test_sdot_bug_8577()
numpy.tests.test_test_unsupported_commontype()
numpy.tests.test_test_xerbla_override()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/linalg/tests/test_deprecations.py----------------------------------------
A:numpy.linalg.tests.test_deprecations.a->numpy.eye(2)
numpy.linalg.tests.test_deprecations.test_qr_mode_full_future_warning()
numpy.tests.test_deprecations.test_qr_mode_full_future_warning()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/linalg/tests/test_regression.py----------------------------------------
A:numpy.linalg.tests.test_regression.rva->array([103.221168 + 0j, -19.1843603 + 0j, -0.604004526 + 15.84422474j, -0.604004526 - 15.84422474j, -11.3692929 + 0j, -0.657612485 + 10.41755503j, -0.657612485 - 10.41755503j, 18.2126812 + 0j, 10.6011014 + 0j, 7.80732773 + 0j, -0.765390898 + 0j, 1.51971555e-15 + 0j, -1.51308713e-15 + 0j])
A:numpy.linalg.tests.test_regression.a->numpy.ones(shape, dtype=t)
A:numpy.linalg.tests.test_regression.(va, ve)->numpy.linalg.eig(a)
A:numpy.linalg.tests.test_regression.cov->array([[77.70273908, 3.51489954, 15.64602427], [3.51489954, 88.97013878, -1.07431931], [15.64602427, -1.07431931, 98.18223512]])
A:numpy.linalg.tests.test_regression.(vals, vecs)->numpy.linalg.eigh(cov)
A:numpy.linalg.tests.test_regression.(u, s, vh)->numpy.linalg.svd(a)
A:numpy.linalg.tests.test_regression.b->G.dot(u)
A:numpy.linalg.tests.test_regression.ap->numpy.linalg.cholesky(a)
A:numpy.linalg.tests.test_regression.bp->numpy.linalg.cholesky(b)
A:numpy.linalg.tests.test_regression.x->numpy.eye(1000, 66)
A:numpy.linalg.tests.test_regression.w->numpy.linalg.svd(a, compute_uv=False)
A:numpy.linalg.tests.test_regression.c->numpy.count_nonzero(np.absolute(w) > 0.5)
A:numpy.linalg.tests.test_regression.testvector->numpy.array([np.array([0, 1]), 0, 0], dtype=object)
A:numpy.linalg.tests.test_regression.norm->numpy.linalg.norm(testmatrix, ord='fro')
A:numpy.linalg.tests.test_regression.testmatrix->numpy.array([[np.array([0, 1]), 0, 0], [0, 0, 0]], dtype=object)
A:numpy.linalg.tests.test_regression.(u_lstsq, res, rank, sv)->numpy.linalg.lstsq(G, b, rcond=None)
numpy.linalg.tests.test_regression.TestRegression
numpy.linalg.tests.test_regression.TestRegression.test_eig_build(self)
numpy.linalg.tests.test_regression.TestRegression.test_eigh_build(self)
numpy.linalg.tests.test_regression.TestRegression.test_lapack_endian(self)
numpy.linalg.tests.test_regression.TestRegression.test_large_svd_32bit(self)
numpy.linalg.tests.test_regression.TestRegression.test_lstsq_complex_larger_rhs(self)
numpy.linalg.tests.test_regression.TestRegression.test_norm_object_array(self)
numpy.linalg.tests.test_regression.TestRegression.test_norm_vector_badarg(self)
numpy.linalg.tests.test_regression.TestRegression.test_svd_build(self)
numpy.linalg.tests.test_regression.TestRegression.test_svd_no_uv(self)
numpy.tests.test_regression.TestRegression
numpy.tests.test_regression.TestRegression.test_eig_build(self)
numpy.tests.test_regression.TestRegression.test_eigh_build(self)
numpy.tests.test_regression.TestRegression.test_lapack_endian(self)
numpy.tests.test_regression.TestRegression.test_large_svd_32bit(self)
numpy.tests.test_regression.TestRegression.test_lstsq_complex_larger_rhs(self)
numpy.tests.test_regression.TestRegression.test_norm_object_array(self)
numpy.tests.test_regression.TestRegression.test_norm_vector_badarg(self)
numpy.tests.test_regression.TestRegression.test_svd_build(self)
numpy.tests.test_regression.TestRegression.test_svd_no_uv(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/linalg/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/npy_pkg_config.py----------------------------------------
A:numpy.distutils.npy_pkg_config._VAR->re.compile('\\$\\{([a-zA-Z0-9_-]+)\\}')
A:numpy.distutils.npy_pkg_config.flags->(' ' + line).split(' -')
A:numpy.distutils.npy_pkg_config.val->self.vars.interpolate(self._sections[section]['libs'])
A:numpy.distutils.npy_pkg_config.self._raw_data->dict([(k, v) for (k, v) in d.items()])
A:numpy.distutils.npy_pkg_config.self._re[name]->re.compile('\\$\\{%s\\}' % name)
A:numpy.distutils.npy_pkg_config.value->re.search('([\\S]+)=([\\S]+)', options.define_variable).group(2)
A:numpy.distutils.npy_pkg_config.nvalue->_interpolate(value)
A:numpy.distutils.npy_pkg_config.d->os.environ.get('NPY_PKG_CONFIG_PATH')
A:numpy.distutils.npy_pkg_config.config->RawConfigParser()
A:numpy.distutils.npy_pkg_config.n->RawConfigParser().read(filenames)
A:numpy.distutils.npy_pkg_config.meta->parse_meta(config)
A:numpy.distutils.npy_pkg_config.vars[name]->_escape_backslash(value)
A:numpy.distutils.npy_pkg_config.requires[s]->RawConfigParser().get(s, 'requires')
A:numpy.distutils.npy_pkg_config.(meta, vars, sections, reqs)->_read_config(filenames)
A:numpy.distutils.npy_pkg_config.(nmeta, nvars, nsections, nreqs)->_read_config(pkg_to_filename(rvalue))
A:numpy.distutils.npy_pkg_config.vars['pkgdir']->_escape_backslash(os.path.dirname(mod.__file__))
A:numpy.distutils.npy_pkg_config.v->_read_config_imp(pkg_to_filename(pkgname), dirs)
A:numpy.distutils.npy_pkg_config.parser->OptionParser()
A:numpy.distutils.npy_pkg_config.(options, args)->OptionParser().parse_args(sys.argv)
A:numpy.distutils.npy_pkg_config.files->glob.glob('*.ini')
A:numpy.distutils.npy_pkg_config.info->read_config(pkg_name, ['numpy/core/lib/npy-pkg-config', '.'])
A:numpy.distutils.npy_pkg_config.m->re.search('([\\S]+)=([\\S]+)', options.define_variable)
A:numpy.distutils.npy_pkg_config.name->re.search('([\\S]+)=([\\S]+)', options.define_variable).group(1)
numpy.distutils.FormatError(self,msg)
numpy.distutils.FormatError.__str__(self)
numpy.distutils.LibraryInfo(self,name,description,version,sections,vars,requires=None)
numpy.distutils.LibraryInfo.__str__(self)
numpy.distutils.LibraryInfo.cflags(self,section='default')
numpy.distutils.LibraryInfo.libs(self,section='default')
numpy.distutils.LibraryInfo.sections(self)
numpy.distutils.PkgNotFound(self,msg)
numpy.distutils.PkgNotFound.__str__(self)
numpy.distutils.VariableSet(self,d)
numpy.distutils.VariableSet.__getitem__(self,name)
numpy.distutils.VariableSet.__setitem__(self,name,value)
numpy.distutils.VariableSet._init_parse(self)
numpy.distutils.VariableSet._init_parse_var(self,name,value)
numpy.distutils.VariableSet.interpolate(self,value)
numpy.distutils.VariableSet.variables(self)
numpy.distutils._escape_backslash(val)
numpy.distutils._read_config_imp(filenames,dirs=None)
numpy.distutils.npy_pkg_config.FormatError(self,msg)
numpy.distutils.npy_pkg_config.FormatError.__init__(self,msg)
numpy.distutils.npy_pkg_config.FormatError.__str__(self)
numpy.distutils.npy_pkg_config.LibraryInfo(self,name,description,version,sections,vars,requires=None)
numpy.distutils.npy_pkg_config.LibraryInfo.__init__(self,name,description,version,sections,vars,requires=None)
numpy.distutils.npy_pkg_config.LibraryInfo.__str__(self)
numpy.distutils.npy_pkg_config.LibraryInfo.cflags(self,section='default')
numpy.distutils.npy_pkg_config.LibraryInfo.libs(self,section='default')
numpy.distutils.npy_pkg_config.LibraryInfo.sections(self)
numpy.distutils.npy_pkg_config.PkgNotFound(self,msg)
numpy.distutils.npy_pkg_config.PkgNotFound.__init__(self,msg)
numpy.distutils.npy_pkg_config.PkgNotFound.__str__(self)
numpy.distutils.npy_pkg_config.VariableSet(self,d)
numpy.distutils.npy_pkg_config.VariableSet.__getitem__(self,name)
numpy.distutils.npy_pkg_config.VariableSet.__init__(self,d)
numpy.distutils.npy_pkg_config.VariableSet.__setitem__(self,name,value)
numpy.distutils.npy_pkg_config.VariableSet._init_parse(self)
numpy.distutils.npy_pkg_config.VariableSet._init_parse_var(self,name,value)
numpy.distutils.npy_pkg_config.VariableSet.interpolate(self,value)
numpy.distutils.npy_pkg_config.VariableSet.variables(self)
numpy.distutils.npy_pkg_config._escape_backslash(val)
numpy.distutils.npy_pkg_config._read_config_imp(filenames,dirs=None)
numpy.distutils.npy_pkg_config.parse_config(filename,dirs=None)
numpy.distutils.npy_pkg_config.parse_flags(line)
numpy.distutils.npy_pkg_config.parse_meta(config)
numpy.distutils.npy_pkg_config.parse_sections(config)
numpy.distutils.npy_pkg_config.parse_variables(config)
numpy.distutils.npy_pkg_config.pkg_to_filename(pkg_name)
numpy.distutils.npy_pkg_config.read_config(pkgname,dirs=None)
numpy.distutils.parse_config(filename,dirs=None)
numpy.distutils.parse_flags(line)
numpy.distutils.parse_meta(config)
numpy.distutils.parse_sections(config)
numpy.distutils.parse_variables(config)
numpy.distutils.pkg_to_filename(pkg_name)
numpy.distutils.read_config(pkgname,dirs=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/msvc9compiler.py----------------------------------------
A:numpy.distutils.msvc9compiler.environ_lib->os.getenv('lib')
A:numpy.distutils.msvc9compiler.environ_include->os.getenv('include')
A:numpy.distutils.msvc9compiler.os.environ['lib']->_merge(environ_lib, os.environ['lib'])
A:numpy.distutils.msvc9compiler.os.environ['include']->_merge(environ_include, os.environ['include'])
numpy.distutils.msvc9compiler.MSVCCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.msvc9compiler.MSVCCompiler.__init__(self,verbose=0,dry_run=0,force=0)
numpy.distutils.msvc9compiler.MSVCCompiler.initialize(self,plat_name=None)
numpy.distutils.msvc9compiler.MSVCCompiler.manifest_setup_ldargs(self,output_filename,build_temp,ld_args)
numpy.distutils.msvc9compiler._merge(old,new)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/__config__.py----------------------------------------
A:numpy.distutils.__config__.extra_dll_dir->os.path.join(os.path.dirname(__file__), '.libs')
A:numpy.distutils.__config__.g->globals()
A:numpy.distutils.__config__.v->str(v)
numpy.distutils.__config__.get_info(name)
numpy.distutils.__config__.show()
numpy.distutils.show_config()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/numpy_distribution.py----------------------------------------
numpy.distutils.numpy_distribution.NumpyDistribution(self,attrs=None)
numpy.distutils.numpy_distribution.NumpyDistribution.__init__(self,attrs=None)
numpy.distutils.numpy_distribution.NumpyDistribution.has_scons_scripts(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/misc_util.py----------------------------------------
A:numpy.distutils.misc_util._tdata->tlocal()
A:numpy.distutils.misc_util.cpu_count->min(cpu_count, 8)
A:numpy.distutils.misc_util.envjobs->int(os.environ.get('NPY_NUM_BUILD_JOBS', cpu_count))
A:numpy.distutils.misc_util.dist->self.get_distribution()
A:numpy.distutils.misc_util.args->list(args)
A:numpy.distutils.misc_util.splitted->m.group('name').split('/')
A:numpy.distutils.misc_util.pd->os.path.realpath(os.path.abspath(parent_path))
A:numpy.distutils.misc_util.apath->os.path.realpath(os.path.abspath(path))
A:numpy.distutils.misc_util.caller_file->eval('__file__', frame.f_globals, frame.f_locals)
A:numpy.distutils.misc_util.d->os.path.dirname(d)
A:numpy.distutils.misc_util.caller_name->eval('__name__', frame.f_globals, frame.f_locals)
A:numpy.distutils.misc_util.joined->joined.replace('/', os.path.sep).replace('/', os.path.sep)
A:numpy.distutils.misc_util.config_file->os.path.join(path, '_numpyconfig.h')
A:numpy.distutils.misc_util.dirs->get_numpy_include_dirs()
A:numpy.distutils.misc_util.fn->njoin(self.local_path, f)
A:numpy.distutils.misc_util.value->line[len(s):].strip()
A:numpy.distutils.misc_util.l->os.path.basename(subpackage_path).split('.')
A:numpy.distutils.misc_util.i->os.path.basename(subpackage_path).split('.').index('..', j)
A:numpy.distutils.misc_util.p->sorted_glob(n)
A:numpy.distutils.misc_util.p2->sorted_glob(njoin(local_path, n))
A:numpy.distutils.misc_util.n2->njoin(local_path, n)
A:numpy.distutils.misc_util._tdata.tempdir->tempfile.mkdtemp()
A:numpy.distutils.misc_util.(fid, name)->tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=_tdata.tempdir, text=text)
A:numpy.distutils.misc_util.fo->os.fdopen(fid, 'w')
A:numpy.distutils.misc_util._colour_codes->dict(black=0, red=1, green=2, yellow=3, blue=4, magenta=5, cyan=6, white=7, default=9)
A:numpy.distutils.misc_util.msc_pos->sys.version.find('MSC v.')
A:numpy.distutils.misc_util.msc_ver->int(sys.version[msc_pos + 6:msc_pos + 10])
A:numpy.distutils.misc_util.ver->msvc_runtime_major()
A:numpy.distutils.misc_util.major->{1300: 70, 1310: 71, 1400: 80, 1500: 90, 1600: 100, 1900: 140}.get(msvc_runtime_version(), None)
A:numpy.distutils.misc_util.m->re.match(b'(?P<revision>\\d+)', output)
A:numpy.distutils.misc_util.name->re.match(b'(?P<revision>\\d+)', output).group('name')
A:numpy.distutils.misc_util.modules->_get_f90_modules(source)
A:numpy.distutils.misc_util.head->sorted_glob(os.path.join(d, '*.h'))
A:numpy.distutils.misc_util.abs_dir->os.path.abspath(directory)
A:numpy.distutils.misc_util.c->Configuration(name, parent_name, local_path)
A:numpy.distutils.misc_util.new_dir->os.sep.join(new_dir)
A:numpy.distutils.misc_util.prune_file_pat->re.compile('(?:[~#]|\\.py[co]|\\.o)$')
A:numpy.distutils.misc_util.dpath->os.path.join(dirpath, d)
A:numpy.distutils.misc_util.rpath->rel_path(path, self.local_path)
A:numpy.distutils.misc_util.sources->lib[1].get('sources', [])
A:numpy.distutils.misc_util.depends->lib[1].get('depends', [])
A:numpy.distutils.misc_util.confvars->distutils.sysconfig.get_config_vars()
A:numpy.distutils.misc_util.so_ext->so_ext.replace('.' + confvars.get('SOABI'), '', 1).replace('.' + confvars.get('SOABI'), '', 1)
A:numpy.distutils.misc_util.self.name->dot_join(parent_name, package_name)
A:numpy.distutils.misc_util.caller_frame->get_frame(caller_level)
A:numpy.distutils.misc_util.self.local_path->get_path_from_frame(caller_frame, top_path)
A:numpy.distutils.misc_util.package_path->njoin(self.local_path, package_path)
A:numpy.distutils.misc_util.self.path_in_package->os.path.join(*self.name.split('.'))
A:numpy.distutils.misc_util.v->copy.copy(attrs.get(n, {}))
A:numpy.distutils.misc_util.self.options->dict(ignore_setup_xxx_py=False, assume_default_configuration=False, delegate_options_to_subpackages=False, quiet=False)
A:numpy.distutils.misc_util.f->get_frame(i)
A:numpy.distutils.misc_util.caller_instance->eval('self', f.f_globals, f.f_locals)
A:numpy.distutils.misc_util.a->getattr(self, k, None)
A:numpy.distutils.misc_util.subpackage_path->njoin([subpackage_path] + l[:-1])
A:numpy.distutils.misc_util.n->dot_join(self.name, name)
A:numpy.distutils.misc_util.setup_module->npy_load_module('_'.join(n.split('.')), setup_py, ('.py', 'U', 1))
A:numpy.distutils.misc_util.config->self._get_configuration_from_setup_py(setup_py, subpackage_name, subpackage_path, parent_name, caller_level=caller_level + 1)
A:numpy.distutils.misc_util.pn->dot_join(*[parent_name] + subpackage_name.split('.')[:-1])
A:numpy.distutils.misc_util.subpackage_name->os.path.basename(subpackage_path)
A:numpy.distutils.misc_util.setup_py->njoin(subpackage_path, 'setup_%s.py' % subpackage_name)
A:numpy.distutils.misc_util.config_list->self.get_subpackage(subpackage_name, subpackage_path, parent_name=parent_name, caller_level=2)
A:numpy.distutils.misc_util.paths->self.paths(filepat, include_non_existing=False)
A:numpy.distutils.misc_util.pattern_list->os.path.dirname(d).split(os.sep)
A:numpy.distutils.misc_util.rl->list(range(len(pattern_list) - 1))
A:numpy.distutils.misc_util.path_list->path.replace('/', os.path.sep).split(os.sep)
A:numpy.distutils.misc_util.target_path->os.path.join(self.path_in_package, d, d1)
A:numpy.distutils.misc_util.data_dict[p]->set()
A:numpy.distutils.misc_util.include_dirs->self.paths(paths)
A:numpy.distutils.misc_util.include_non_existing->kws.get('include_non_existing', True)
A:numpy.distutils.misc_util.new_v->self.paths(v)
A:numpy.distutils.misc_util.ext_args->copy.copy(kw)
A:numpy.distutils.misc_util.ext_args['name']->dot_join(self.name, name)
A:numpy.distutils.misc_util.libraries->copy.copy(kw).get('libraries', [])
A:numpy.distutils.misc_util.(lname, lpath)->libname.split('@', 1)
A:numpy.distutils.misc_util.lpath->os.path.abspath(njoin(self.local_path, lpath))
A:numpy.distutils.misc_util.ext->Extension(**ext_args)
A:numpy.distutils.misc_util.build_info->copy.copy(build_info)
A:numpy.distutils.misc_util.install_dir->os.path.join(self.package_path, install_dir)
A:numpy.distutils.misc_util.template->os.path.join(self.package_path, template)
A:numpy.distutils.misc_util.scripts->self.paths(files)
A:numpy.distutils.misc_util.cmd->self.get_distribution().get_command_obj(cmdname)
A:numpy.distutils.misc_util.old_path->os.environ.get('PATH')
A:numpy.distutils.misc_util.path->path.replace('/', os.path.sep).replace('/', os.path.sep)
A:numpy.distutils.misc_util.config_cmd->self.get_config_cmd()
A:numpy.distutils.misc_util.flag->self.get_config_cmd().try_compile(simple_fortran_subroutine, lang='f90')
A:numpy.distutils.misc_util.output->subprocess.check_output(['hg', 'identify', '--num'], cwd=path)
A:numpy.distutils.misc_util.entries->njoin(path, '.svn', 'entries')
A:numpy.distutils.misc_util.fstr->get_frame(i).read()
A:numpy.distutils.misc_util.branch_fn->njoin(path, '.hg', 'branch')
A:numpy.distutils.misc_util.branch_cache_fn->njoin(path, '.hg', 'branch.cache')
A:numpy.distutils.misc_util.revision0->get_frame(i).read().strip()
A:numpy.distutils.misc_util.revision1->int(revision1)
A:numpy.distutils.misc_util.version->str(revision)
A:numpy.distutils.misc_util.version_module->npy_load_module('_'.join(n.split('.')), fn, info)
A:numpy.distutils.misc_util.revision->self._get_hg_revision(self.local_path)
A:numpy.distutils.misc_util.target->njoin(self.local_path, '__hg_version__.py')
A:numpy.distutils.misc_util.spec->importlib.util.find_spec('numpy')
A:numpy.distutils.misc_util.pkg_info->get_pkg_info(pkgname, dirs)
A:numpy.distutils.misc_util.info->parse_flags(pkg_info.cflags())
A:numpy.distutils.misc_util.prefix->prefix.replace('/', os.path.sep).replace('/', os.path.sep)
A:numpy.distutils.misc_util.(pathdrive, path)->os.path.splitdrive(path)
numpy.distutils.misc_util.Configuration(self,package_name=None,parent_name=None,top_path=None,package_path=None,caller_level=1,setup_name='setup.py',**attrs)
numpy.distutils.misc_util.Configuration.__init__(self,package_name=None,parent_name=None,top_path=None,package_path=None,caller_level=1,setup_name='setup.py',**attrs)
numpy.distutils.misc_util.Configuration.__str__(self)
numpy.distutils.misc_util.Configuration._add_library(self,name,sources,install_dir,build_info)
numpy.distutils.misc_util.Configuration._fix_paths_dict(self,kw)
numpy.distutils.misc_util.Configuration._get_configuration_from_setup_py(self,setup_py,subpackage_name,subpackage_path,parent_name,caller_level=1)
numpy.distutils.misc_util.Configuration._get_hg_revision(self,path)
numpy.distutils.misc_util.Configuration._get_svn_revision(self,path)
numpy.distutils.misc_util.Configuration._optimize_data_files(self)
numpy.distutils.misc_util.Configuration._wildcard_get_subpackage(self,subpackage_name,parent_name,caller_level=1)
numpy.distutils.misc_util.Configuration.add_data_dir(self,data_path)
numpy.distutils.misc_util.Configuration.add_data_files(self,*files)
numpy.distutils.misc_util.Configuration.add_define_macros(self,macros)
numpy.distutils.misc_util.Configuration.add_extension(self,name,sources,**kw)
numpy.distutils.misc_util.Configuration.add_headers(self,*files)
numpy.distutils.misc_util.Configuration.add_include_dirs(self,*paths)
numpy.distutils.misc_util.Configuration.add_installed_library(self,name,sources,install_dir,build_info=None)
numpy.distutils.misc_util.Configuration.add_library(self,name,sources,**build_info)
numpy.distutils.misc_util.Configuration.add_npy_pkg_config(self,template,install_dir,subst_dict=None)
numpy.distutils.misc_util.Configuration.add_scripts(self,*files)
numpy.distutils.misc_util.Configuration.add_subpackage(self,subpackage_name,subpackage_path=None,standalone=False)
numpy.distutils.misc_util.Configuration.append_to(self,extlib)
numpy.distutils.misc_util.Configuration.dict_append(self,**dict)
numpy.distutils.misc_util.Configuration.get_build_temp_dir(self)
numpy.distutils.misc_util.Configuration.get_config_cmd(self)
numpy.distutils.misc_util.Configuration.get_distribution(self)
numpy.distutils.misc_util.Configuration.get_info(self,*names)
numpy.distutils.misc_util.Configuration.get_subpackage(self,subpackage_name,subpackage_path=None,parent_name=None,caller_level=1)
numpy.distutils.misc_util.Configuration.get_version(self,version_file=None,version_variable=None)
numpy.distutils.misc_util.Configuration.have_f77c(self)
numpy.distutils.misc_util.Configuration.have_f90c(self)
numpy.distutils.misc_util.Configuration.info(self,message)
numpy.distutils.misc_util.Configuration.make_config_py(self,name='__config__')
numpy.distutils.misc_util.Configuration.make_hg_version_py(self,delete=True)
numpy.distutils.misc_util.Configuration.make_svn_version_py(self,delete=True)
numpy.distutils.misc_util.Configuration.paths(self,*paths,**kws)
numpy.distutils.misc_util.Configuration.set_options(self,**options)
numpy.distutils.misc_util.Configuration.todict(self)
numpy.distutils.misc_util.Configuration.warn(self,message)
numpy.distutils.misc_util.InstallableLib(self,name,build_info,target_dir)
numpy.distutils.misc_util.InstallableLib.__init__(self,name,build_info,target_dir)
numpy.distutils.misc_util._commandline_dep_string(cc_args,extra_postargs,pp_opts)
numpy.distutils.misc_util._fix_paths(paths,local_path,include_non_existing)
numpy.distutils.misc_util._get_directories(list_of_sources)
numpy.distutils.misc_util._get_f90_modules(source)
numpy.distutils.misc_util._get_headers(directory_list)
numpy.distutils.misc_util.all_strings(lst)
numpy.distutils.misc_util.allpath(name)
numpy.distutils.misc_util.appendpath(prefix,path)
numpy.distutils.misc_util.as_list(seq)
numpy.distutils.misc_util.blue_text(s)
numpy.distutils.misc_util.clean_up_temporary_directory()
numpy.distutils.misc_util.cyan_text(s)
numpy.distutils.misc_util.cyg2win32(path)
numpy.distutils.misc_util.default_config_dict(name=None,parent_name=None,local_path=None)
numpy.distutils.misc_util.default_text(s)
numpy.distutils.misc_util.dict_append(d,**kws)
numpy.distutils.misc_util.dot_join(*args)
numpy.distutils.misc_util.filter_sources(sources)
numpy.distutils.misc_util.general_source_directories_files(top_path)
numpy.distutils.misc_util.general_source_files(top_path)
numpy.distutils.misc_util.generate_config_py(target)
numpy.distutils.misc_util.get_build_architecture()
numpy.distutils.misc_util.get_cmd(cmdname,_cache={})
numpy.distutils.misc_util.get_data_files(data)
numpy.distutils.misc_util.get_dependencies(sources)
numpy.distutils.misc_util.get_ext_source_files(ext)
numpy.distutils.misc_util.get_frame(level=0)
numpy.distutils.misc_util.get_info(pkgname,dirs=None)
numpy.distutils.misc_util.get_language(sources)
numpy.distutils.misc_util.get_lib_source_files(lib)
numpy.distutils.misc_util.get_mathlibs(path=None)
numpy.distutils.misc_util.get_npy_pkg_dir()
numpy.distutils.misc_util.get_num_build_jobs()
numpy.distutils.misc_util.get_numpy_include_dirs()
numpy.distutils.misc_util.get_path_from_frame(frame,parent_path=None)
numpy.distutils.misc_util.get_pkg_info(pkgname,dirs=None)
numpy.distutils.misc_util.get_script_files(scripts)
numpy.distutils.misc_util.get_shared_lib_extension(is_python_ext=False)
numpy.distutils.misc_util.gpaths(paths,local_path='',include_non_existing=True)
numpy.distutils.misc_util.green_text(s)
numpy.distutils.misc_util.has_cxx_sources(sources)
numpy.distutils.misc_util.has_f_sources(sources)
numpy.distutils.misc_util.is_bootstrapping()
numpy.distutils.misc_util.is_glob_pattern(s)
numpy.distutils.misc_util.is_local_src_dir(directory)
numpy.distutils.misc_util.is_sequence(seq)
numpy.distutils.misc_util.is_string(s)
numpy.distutils.misc_util.make_temp_file(suffix='',prefix='',text=True)
numpy.distutils.misc_util.mingw32()
numpy.distutils.misc_util.minrelpath(path)
numpy.distutils.misc_util.msvc_runtime_library()
numpy.distutils.misc_util.msvc_runtime_major()
numpy.distutils.misc_util.msvc_runtime_version()
numpy.distutils.misc_util.msvc_version(compiler)
numpy.distutils.misc_util.njoin(*path)
numpy.distutils.misc_util.quote_args(args)
numpy.distutils.misc_util.red_text(s)
numpy.distutils.misc_util.rel_path(path,parent_path)
numpy.distutils.misc_util.sorted_glob(fileglob)
numpy.distutils.misc_util.terminal_has_colors()
numpy.distutils.misc_util.yellow_text(s)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/line_endings.py----------------------------------------
A:numpy.distutils.line_endings.data->fp.read()
A:numpy.distutils.line_endings.newdata->re.sub('\n', '\r\n', newdata)
A:numpy.distutils.line_endings.full_path->os.path.join(dir_name, file)
A:numpy.distutils.line_endings.file->dos2unix(full_path)
numpy.distutils.line_endings.dos2unix(file)
numpy.distutils.line_endings.dos2unix_dir(dir_name)
numpy.distutils.line_endings.dos2unix_one_dir(modified_files,dir_name,file_names)
numpy.distutils.line_endings.unix2dos(file)
numpy.distutils.line_endings.unix2dos_dir(dir_name)
numpy.distutils.line_endings.unix2dos_one_dir(modified_files,dir_name,file_names)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/ccompiler.py----------------------------------------
A:numpy.distutils.ccompiler._global_lock->threading.Lock()
A:numpy.distutils.ccompiler._processing_files->set()
A:numpy.distutils.ccompiler.lines->f.readlines()
A:numpy.distutils.ccompiler.cmdline->_commandline_dep_string(cc_args, extra_postargs, pp_opts)
A:numpy.distutils.ccompiler.contents->''.join(lines[:-1])
A:numpy.distutils.ccompiler.display->'\n'.join(display)
A:numpy.distutils.ccompiler.cmd->' '.join(list(cmd))
A:numpy.distutils.ccompiler.(base, ext)->os.path.splitext(os.path.normpath(src_name))
A:numpy.distutils.ccompiler.d->os.path.basename(os.path.abspath(d))
A:numpy.distutils.ccompiler.base->os.path.basename(base)
A:numpy.distutils.ccompiler.obj_name->os.path.join(output_dir, base + self.obj_extension)
A:numpy.distutils.ccompiler.jobs->get_num_build_jobs()
A:numpy.distutils.ccompiler._job_semaphore->threading.Semaphore(jobs)
A:numpy.distutils.ccompiler.fcomp->getattr(self, 'compiler_' + fc)
A:numpy.distutils.ccompiler.(macros, objects, extra_postargs, pp_opts, build)->self._setup_compile(output_dir, macros, include_dirs, sources, depends, extra_postargs)
A:numpy.distutils.ccompiler.cc_args->self._get_cc_args(pp_opts, debug, extra_preargs)
A:numpy.distutils.ccompiler.objects_to_build->list(build.keys())
A:numpy.distutils.ccompiler.obj->cyg2win32(obj)
A:numpy.distutils.ccompiler.src->cyg2win32(src)
A:numpy.distutils.ccompiler.build_items->build.items()
A:numpy.distutils.ccompiler.pool->multiprocessing.pool.ThreadPool(jobs)
A:numpy.distutils.ccompiler.keys->list(compiler.executables.keys())
A:numpy.distutils.ccompiler.v->getattr(compiler, key)
A:numpy.distutils.ccompiler.mx->max(mx, len(key))
A:numpy.distutils.ccompiler.tmpdir->tempfile.mkdtemp()
A:numpy.distutils.ccompiler.fn->os.path.join(tmpdir, 'file.c')
A:numpy.distutils.ccompiler.version_string->version_string.replace('\n', ' ').replace('\n', ' ')
A:numpy.distutils.ccompiler.m->re.match(pat, version_string)
A:numpy.distutils.ccompiler.pos->re.match(pat, version_string).end()
A:numpy.distutils.ccompiler.version->LooseVersion(version)
A:numpy.distutils.ccompiler.output->filepath_from_subprocess_output(output)
A:numpy.distutils.ccompiler.cxx->copy(self)
A:numpy.distutils.ccompiler.compiler->klass(None, dry_run, force)
A:numpy.distutils.ccompiler.msg->str(e)
A:numpy.distutils.ccompiler.r->_distutils_gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
A:numpy.distutils.ccompiler._m->sys.modules.get('distutils.' + _cc + 'compiler')
numpy.distutils.ccompiler.CCompiler_compile(self,sources,output_dir=None,macros=None,include_dirs=None,debug=0,extra_preargs=None,extra_postargs=None,depends=None)
numpy.distutils.ccompiler.CCompiler_customize(self,dist,need_cxx=0)
numpy.distutils.ccompiler.CCompiler_customize_cmd(self,cmd,ignore=())
numpy.distutils.ccompiler.CCompiler_cxx_compiler(self)
numpy.distutils.ccompiler.CCompiler_find_executables(self)
numpy.distutils.ccompiler.CCompiler_get_version(self,force=False,ok_status=[0])
numpy.distutils.ccompiler.CCompiler_object_filenames(self,source_filenames,strip_dir=0,output_dir='')
numpy.distutils.ccompiler.CCompiler_show_customization(self)
numpy.distutils.ccompiler.CCompiler_spawn(self,cmd,display=None)
numpy.distutils.ccompiler._compiler_to_string(compiler)
numpy.distutils.ccompiler._needs_build(obj,cc_args,extra_postargs,pp_opts)
numpy.distutils.ccompiler.gen_lib_options(compiler,library_dirs,runtime_library_dirs,libraries)
numpy.distutils.ccompiler.new_compiler(plat=None,compiler=None,verbose=None,dry_run=0,force=0)
numpy.distutils.ccompiler.replace_method(klass,method_name,func)
numpy.distutils.ccompiler.simple_version_match(pat='[-.\\d]+',ignore='',start='')


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/cpuinfo.py----------------------------------------
A:numpy.distutils.cpuinfo.(status, output)->getstatusoutput(cmd)
A:numpy.distutils.cpuinfo.(ok, output)->getoutput('uname -m')
A:numpy.distutils.cpuinfo.info[key]->output.strip()
A:numpy.distutils.cpuinfo.attr->getattr(self, '_' + name)
A:numpy.distutils.cpuinfo.nbits->re.compile('(\\d+)bit').search(abits).group(1)
A:numpy.distutils.cpuinfo.info[0]['uname_m']->output.strip()
A:numpy.distutils.cpuinfo.fo->open('/proc/cpuinfo')
A:numpy.distutils.cpuinfo.info->command_info(arch='arch', mach='mach', uname_i='uname_i', isainfo_b='isainfo -b', isainfo_n='isainfo -n')
A:numpy.distutils.cpuinfo.info['sysctl_hw']->key_value_from_command('sysctl hw', sep='=')
A:numpy.distutils.cpuinfo.info['uname_X']->key_value_from_command('uname -X', sep='=')
A:numpy.distutils.cpuinfo.m->re.match('\\s*The (?P<p>[\\w\\d]+) processor operates at', line)
A:numpy.distutils.cpuinfo.info['processor']->re.match('\\s*The (?P<p>[\\w\\d]+) processor operates at', line).group('p')
A:numpy.distutils.cpuinfo.prgx->re.compile('family\\s+(?P<FML>\\d+)\\s+model\\s+(?P<MDL>\\d+)\\s+stepping\\s+(?P<STP>\\d+)', re.IGNORECASE)
A:numpy.distutils.cpuinfo.chnd->winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, self.pkey)
A:numpy.distutils.cpuinfo.proc->winreg.EnumKey(chnd, pnum)
A:numpy.distutils.cpuinfo.phnd->winreg.OpenKey(chnd, proc)
A:numpy.distutils.cpuinfo.(name, value, vtpe)->winreg.EnumValue(phnd, pidx)
A:numpy.distutils.cpuinfo.srch->re.compile('family\\s+(?P<FML>\\d+)\\s+model\\s+(?P<MDL>\\d+)\\s+stepping\\s+(?P<STP>\\d+)', re.IGNORECASE).search(value)
A:numpy.distutils.cpuinfo.info[-1]['Family']->int(srch.group('FML'))
A:numpy.distutils.cpuinfo.info[-1]['Model']->int(srch.group('MDL'))
A:numpy.distutils.cpuinfo.info[-1]['Stepping']->int(srch.group('STP'))
A:numpy.distutils.cpuinfo.cpu->cpuinfo()
numpy.distutils.cpuinfo.CPUInfoBase
numpy.distutils.cpuinfo.CPUInfoBase.__get_nbits(self)
numpy.distutils.cpuinfo.CPUInfoBase.__getattr__(self,name)
numpy.distutils.cpuinfo.CPUInfoBase._getNCPUs(self)
numpy.distutils.cpuinfo.CPUInfoBase._is_32bit(self)
numpy.distutils.cpuinfo.CPUInfoBase._is_64bit(self)
numpy.distutils.cpuinfo.CPUInfoBase._try_call(self,func)
numpy.distutils.cpuinfo.DarwinCPUInfo(self)
numpy.distutils.cpuinfo.DarwinCPUInfo.__init__(self)
numpy.distutils.cpuinfo.DarwinCPUInfo.__machine(self,n)
numpy.distutils.cpuinfo.DarwinCPUInfo._getNCPUs(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_Power_Macintosh(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_i386(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc403(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc505(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc601(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc602(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc603(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc603e(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc604(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc604e(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc620(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc630(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc740(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc7400(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc7450(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc750(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc801(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc821(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc823(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc860(self)
numpy.distutils.cpuinfo.DarwinCPUInfo._not_impl(self)
numpy.distutils.cpuinfo.IRIXCPUInfo(self)
numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype(self,n)
numpy.distutils.cpuinfo.IRIXCPUInfo.__init__(self)
numpy.distutils.cpuinfo.IRIXCPUInfo.__machine(self,n)
numpy.distutils.cpuinfo.IRIXCPUInfo._getNCPUs(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP19(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP20(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP21(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP22(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP22_4k(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP22_5k(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP24(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP25(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP26(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP27(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP28(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP30(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP32(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP32_10k(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP32_5k(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r10000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r12000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r2000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r3000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r3900(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4100(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4300(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4400(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4600(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4650(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r5000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r6000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_r8000(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_rorion(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._is_singleCPU(self)
numpy.distutils.cpuinfo.IRIXCPUInfo._not_impl(self)
numpy.distutils.cpuinfo.IRIXCPUInfo.get_ip(self)
numpy.distutils.cpuinfo.LinuxCPUInfo(self)
numpy.distutils.cpuinfo.LinuxCPUInfo.__init__(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._getNCPUs(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_3dnow(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_3dnowext(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_f00f_bug(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_fdiv_bug(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_mmx(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_sse(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_sse2(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_sse3(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._has_ssse3(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AMD(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AMD64(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Alpha(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Athlon64(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonHX(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK6(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK6_2(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK6_3(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK7(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonMP(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Celeron(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Core2(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_EV4(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_EV5(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_EV56(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Hammer(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Intel(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Itanium(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Nocona(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Opteron(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PCA56(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Pentium(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumII(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumIII(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumIV(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumM(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumMMX(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumPro(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_Prescott(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_XEON(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_i486(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_i586(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_i686(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._is_singleCPU(self)
numpy.distutils.cpuinfo.LinuxCPUInfo._not_impl(self)
numpy.distutils.cpuinfo.SunOSCPUInfo(self)
numpy.distutils.cpuinfo.SunOSCPUInfo.__init__(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._getNCPUs(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_SUNW(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_cpusparcv7(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_cpusparcv8(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_cpusparcv9(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_i386(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_sparc(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_sparcstation5(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_sparcv9(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_sun4(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_sunfire(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra1(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra2(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra250(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra30(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra4(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra5(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra5_10(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra60(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra80(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultraenterprice(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultraenterprice10k(self)
numpy.distutils.cpuinfo.SunOSCPUInfo._not_impl(self)
numpy.distutils.cpuinfo.Win32CPUInfo(self)
numpy.distutils.cpuinfo.Win32CPUInfo.__init__(self)
numpy.distutils.cpuinfo.Win32CPUInfo._getNCPUs(self)
numpy.distutils.cpuinfo.Win32CPUInfo._has_3dnow(self)
numpy.distutils.cpuinfo.Win32CPUInfo._has_3dnowext(self)
numpy.distutils.cpuinfo.Win32CPUInfo._has_mmx(self)
numpy.distutils.cpuinfo.Win32CPUInfo._has_sse(self)
numpy.distutils.cpuinfo.Win32CPUInfo._has_sse2(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMD(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMD64(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK5(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK6(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK6_2(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK6_3(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK7(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_Am486(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_Am5x86(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_Core2(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_Intel(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_Pentium(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumII(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumIII(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumIV(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumM(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumMMX(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumPro(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_i386(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_i486(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_i586(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_i686(self)
numpy.distutils.cpuinfo.Win32CPUInfo._is_singleCPU(self)
numpy.distutils.cpuinfo.Win32CPUInfo._not_impl(self)
numpy.distutils.cpuinfo.command_by_line(cmd,successful_status=(0,),stacklevel=1)
numpy.distutils.cpuinfo.command_info(successful_status=(0,),stacklevel=1,**kw)
numpy.distutils.cpuinfo.getoutput(cmd,successful_status=(0,),stacklevel=1)
numpy.distutils.cpuinfo.key_value_from_command(cmd,sep,successful_status=(0,),stacklevel=1)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/log.py----------------------------------------
numpy.distutils.log.Log(old_Log)
numpy.distutils.log.Log._log(self,level,msg,args)
numpy.distutils.log.Log.good(self,msg,*args)
numpy.distutils.log._fix_args(args,flag=1)
numpy.distutils.log.get_threshold()
numpy.distutils.log.set_threshold(level,force=False)
numpy.distutils.log.set_verbosity(v,force=False)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/exec_command.py----------------------------------------
A:numpy.distutils.exec_command.mylocale->locale.getpreferredencoding(False)
A:numpy.distutils.exec_command.output->output.replace('\r\n', '\n').replace('\r\n', '\n')
A:numpy.distutils.exec_command.(fo, name)->make_temp_file()
A:numpy.distutils.exec_command.(fdir, fn)->os.path.split(pythonexe)
A:numpy.distutils.exec_command.fn->os.path.join(path, exe)
A:numpy.distutils.exec_command.pythonexe->os.path.join(fdir, fn)
A:numpy.distutils.exec_command.path->os.environ.get('PATH', os.defpath)
A:numpy.distutils.exec_command.(fn, ext)->os.path.splitext(exe)
A:numpy.distutils.exec_command.f_ext->realpath(f_ext)
A:numpy.distutils.exec_command.execute_in->os.path.abspath(execute_in)
A:numpy.distutils.exec_command.oldcwd->os.path.abspath(os.getcwd())
A:numpy.distutils.exec_command.exec_dir->os.path.dirname(exec_dir)
A:numpy.distutils.exec_command.oldenv->_preserve_environment(list(env.keys()))
A:numpy.distutils.exec_command.st->_exec_command(command, use_shell=use_shell, use_tee=use_tee, **env)
A:numpy.distutils.exec_command.sh->os.environ.get('SHELL', '/bin/sh')
A:numpy.distutils.exec_command.command->' '.join((_quote_arg(arg) for arg in command))
A:numpy.distutils.exec_command.proc->subprocess.Popen(command, shell=use_shell, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=False)
A:numpy.distutils.exec_command.(text, err)->subprocess.Popen(command, shell=use_shell, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=False).communicate()
A:numpy.distutils.exec_command.text->text.replace('\r\n', '\n').replace('\r\n', '\n')
numpy.distutils.exec_command._exec_command(command,use_shell=None,use_tee=None,**env)
numpy.distutils.exec_command._preserve_environment(names)
numpy.distutils.exec_command._quote_arg(arg)
numpy.distutils.exec_command._update_environment(**env)
numpy.distutils.exec_command.exec_command(command,execute_in='',use_shell=None,use_tee=None,_with_python=1,**env)
numpy.distutils.exec_command.filepath_from_subprocess_output(output)
numpy.distutils.exec_command.find_executable(exe,path=None,_cache={})
numpy.distutils.exec_command.forward_bytes_to_stdout(val)
numpy.distutils.exec_command.get_pythonexe()
numpy.distutils.exec_command.temp_file_name()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/mingw32ccompiler.py----------------------------------------
A:numpy.distutils.mingw32ccompiler.msvcr->msvc_runtime_library()
A:numpy.distutils.mingw32ccompiler._START->re.compile('\\[Ordinal/Name Pointer\\] Table')
A:numpy.distutils.mingw32ccompiler._TABLE->re.compile('^\\s+\\[([\\s*[0-9]*)\\] ([a-zA-Z0-9_]*)')
A:numpy.distutils.mingw32ccompiler.out_string->subprocess.check_output(['gcc', '-dumpversion'])
A:numpy.distutils.mingw32ccompiler.result->re.search('(\\d+\\.\\d+)', out_string)
A:numpy.distutils.mingw32ccompiler.self.gcc_version->StrictVersion(result.group(1))
A:numpy.distutils.mingw32ccompiler.msvcr_success->build_msvcr_library()
A:numpy.distutils.mingw32ccompiler.msvcr_dbg_success->build_msvcr_library(debug=True)
A:numpy.distutils.mingw32ccompiler.msvcr_version->msvc_runtime_version()
A:numpy.distutils.mingw32ccompiler.runtime_library->msvc_runtime_library()
A:numpy.distutils.mingw32ccompiler.(base, ext)->os.path.splitext(os.path.normcase(src_name))
A:numpy.distutils.mingw32ccompiler.(drv, base)->os.path.splitdrive(base)
A:numpy.distutils.mingw32ccompiler.base->os.path.basename(config._gen_temp_sourcefile('yo', [], 'c'))
A:numpy.distutils.mingw32ccompiler.(major_version, minor_version)->tuple(sys.version_info[:2])
A:numpy.distutils.mingw32ccompiler.implementation->platform.python_implementation()
A:numpy.distutils.mingw32ccompiler.dll->os.path.join(folder, dllname)
A:numpy.distutils.mingw32ccompiler.st->subprocess.check_output(['objdump.exe', '-p', dll])
A:numpy.distutils.mingw32ccompiler.dump->dump_table(dll)
A:numpy.distutils.mingw32ccompiler.m->re.compile('^\\s+\\[([\\s*[0-9]*)\\] ([a-zA-Z0-9_]*)').match(dump[j].decode())
A:numpy.distutils.mingw32ccompiler.winsxs_path->os.path.join(os.environ.get('WINDIR', 'C:\\WINDOWS'), 'winsxs')
A:numpy.distutils.mingw32ccompiler.filepath->os.path.join(path, dll_name)
A:numpy.distutils.mingw32ccompiler.msvcr_ver->msvc_runtime_major()
A:numpy.distutils.mingw32ccompiler.msvcr_name->msvc_runtime_library()
A:numpy.distutils.mingw32ccompiler.out_file->os.path.join(sys.prefix, 'libs', out_name)
A:numpy.distutils.mingw32ccompiler.dll_file->find_python_dll()
A:numpy.distutils.mingw32ccompiler.def_file->os.path.join(sys.prefix, 'libs', def_name)
A:numpy.distutils.mingw32ccompiler.retcode->subprocess.call(cmd)
A:numpy.distutils.mingw32ccompiler.arch->get_build_architecture()
A:numpy.distutils.mingw32ccompiler.(out_exists, out_file)->_check_for_import_lib()
A:numpy.distutils.mingw32ccompiler.lib_file->os.path.join(sys.prefix, 'libs', lib_name)
A:numpy.distutils.mingw32ccompiler.base_lib->os.path.join(sys.real_prefix, 'libs', lib_name)
A:numpy.distutils.mingw32ccompiler.nm_output->numpy.distutils.lib2def.getnm(lib2def.DEFAULT_NM + [lib_file], shell=False)
A:numpy.distutils.mingw32ccompiler.(dlist, flist)->numpy.distutils.lib2def.parse_nm(nm_output)
A:numpy.distutils.mingw32ccompiler.dll_name->find_python_dll()
A:numpy.distutils.mingw32ccompiler.status->subprocess.check_output(cmd)
A:numpy.distutils.mingw32ccompiler.(major, minor, rest)->msvcrt.CRT_ASSEMBLY_VERSION.split('.', 2)
A:numpy.distutils.mingw32ccompiler.template->textwrap.dedent('        <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">\n          <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">\n            <security>\n              <requestedPrivileges>\n                <requestedExecutionLevel level="asInvoker" uiAccess="false"></requestedExecutionLevel>\n              </requestedPrivileges>\n            </security>\n          </trustInfo>\n          <dependency>\n            <dependentAssembly>\n              <assemblyIdentity type="win32" name="Microsoft.VC%(maj)d%(min)d.CRT" version="%(fullver)s" processorArchitecture="*" publicKeyToken="1fc8b3b9a1e18e3b"></assemblyIdentity>\n            </dependentAssembly>\n          </dependency>\n        </assembly>')
A:numpy.distutils.mingw32ccompiler.maj->msvc_runtime_major()
A:numpy.distutils.mingw32ccompiler.root->configtest_name(config)
A:numpy.distutils.mingw32ccompiler.msver->get_build_msvc_version()
A:numpy.distutils.mingw32ccompiler.ma->int(msver)
A:numpy.distutils.mingw32ccompiler.mi->int((msver - ma) * 10)
A:numpy.distutils.mingw32ccompiler.manxml->msvc_manifest_xml(ma, mi)
A:numpy.distutils.mingw32ccompiler.man->open(manifest_name(config), 'w')
numpy.distutils.mingw32ccompiler.Mingw32CCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__(self,verbose=0,dry_run=0,force=0)
numpy.distutils.mingw32ccompiler.Mingw32CCompiler.link(self,target_desc,objects,output_filename,output_dir,libraries,library_dirs,runtime_library_dirs,export_symbols=None,debug=0,extra_preargs=None,extra_postargs=None,build_temp=None,target_lang=None)
numpy.distutils.mingw32ccompiler.Mingw32CCompiler.object_filenames(self,source_filenames,strip_dir=0,output_dir='')
numpy.distutils.mingw32ccompiler._build_import_library_amd64()
numpy.distutils.mingw32ccompiler._build_import_library_x86()
numpy.distutils.mingw32ccompiler._check_for_import_lib()
numpy.distutils.mingw32ccompiler.build_import_library()
numpy.distutils.mingw32ccompiler.build_msvcr_library(debug=False)
numpy.distutils.mingw32ccompiler.check_embedded_msvcr_match_linked(msver)
numpy.distutils.mingw32ccompiler.configtest_name(config)
numpy.distutils.mingw32ccompiler.dump_table(dll)
numpy.distutils.mingw32ccompiler.find_dll(dll_name)
numpy.distutils.mingw32ccompiler.find_python_dll()
numpy.distutils.mingw32ccompiler.generate_def(dll,dfile)
numpy.distutils.mingw32ccompiler.generate_manifest(config)
numpy.distutils.mingw32ccompiler.get_msvcr_replacement()
numpy.distutils.mingw32ccompiler.manifest_name(config)
numpy.distutils.mingw32ccompiler.manifest_rc(name,type='dll')
numpy.distutils.mingw32ccompiler.msvc_manifest_xml(maj,min)
numpy.distutils.mingw32ccompiler.rc_name(config)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/_shell_utils.py----------------------------------------
A:numpy.distutils._shell_utils.CommandLineToArgvW.restype->ctypes.POINTER(ctypes.c_wchar_p)
A:numpy.distutils._shell_utils.nargs->ctypes.c_int()
A:numpy.distutils._shell_utils.lpargs->CommandLineToArgvW(cmd, ctypes.byref(nargs))
numpy.distutils._shell_utils.CommandLineParser
numpy.distutils._shell_utils.CommandLineParser.join(argv)
numpy.distutils._shell_utils.CommandLineParser.split(cmd)
numpy.distutils._shell_utils.PosixParser
numpy.distutils._shell_utils.PosixParser.join(argv)
numpy.distutils._shell_utils.PosixParser.split(cmd)
numpy.distutils._shell_utils.WindowsParser
numpy.distutils._shell_utils.WindowsParser.join(argv)
numpy.distutils._shell_utils.WindowsParser.split(cmd)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/__init__.py----------------------------------------
A:numpy.distutils.__init__.test->PytestTester(__name__)
A:numpy.distutils.__init__.c->ccompiler.new_compiler(plat=plat, compiler=compiler, verbose=verbose)
numpy.distutils.__init__.customized_ccompiler(plat=None,compiler=None,verbose=1)
numpy.distutils.__init__.customized_fcompiler(plat=None,compiler=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/__init__.pyi----------------------------------------
numpy.distutils.__init__.__getattr__(name:str)->Any


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/core.py----------------------------------------
A:numpy.distutils.core.dist->setup(**new_attr)
A:numpy.distutils.core.cmdclass->numpy_cmdclass.copy()
A:numpy.distutils.core.new_attr->attr.copy()
A:numpy.distutils.core.configuration->attr.copy().pop('configuration')
A:numpy.distutils.core.config->numpy.distutils.command.config.todict().todict()
numpy.distutils._check_append_ext_library(libraries,lib_name,build_info)
numpy.distutils._check_append_library(libraries,item)
numpy.distutils._command_line_ok(_cache=None)
numpy.distutils._dict_append(d,**kws)
numpy.distutils.core._check_append_ext_library(libraries,lib_name,build_info)
numpy.distutils.core._check_append_library(libraries,item)
numpy.distutils.core._command_line_ok(_cache=None)
numpy.distutils.core._dict_append(d,**kws)
numpy.distutils.core.get_distribution(always=False)
numpy.distutils.core.setup(**attr)
numpy.distutils.get_distribution(always=False)
numpy.distutils.setup(**attr)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/conv_template.py----------------------------------------
A:numpy.distutils.conv_template.start->','.join([plainrep.sub(paren_repl, x.strip()) for x in astr.split(',')]).find(loopbeg, ind)
A:numpy.distutils.conv_template.start2->','.join([plainrep.sub(paren_repl, x.strip()) for x in astr.split(',')]).find('\n', start2)
A:numpy.distutils.conv_template.fini1->','.join([plainrep.sub(paren_repl, x.strip()) for x in astr.split(',')]).find(loopend, start2)
A:numpy.distutils.conv_template.fini2->','.join([plainrep.sub(paren_repl, x.strip()) for x in astr.split(',')]).find('\n', fini1)
A:numpy.distutils.conv_template.torep->obj.group(1)
A:numpy.distutils.conv_template.numrep->obj.group(2)
A:numpy.distutils.conv_template.parenrep->re.compile('\\(([^)]*)\\)\\*(\\d+)')
A:numpy.distutils.conv_template.plainrep->re.compile('([^*]+)\\*(\\d+)')
A:numpy.distutils.conv_template.astr->','.join([plainrep.sub(paren_repl, x.strip()) for x in astr.split(',')])
A:numpy.distutils.conv_template.stripast->re.compile('\\n\\s*\\*?')
A:numpy.distutils.conv_template.named_re->re.compile('#\\s*(\\w*)\\s*=([^#]*)#')
A:numpy.distutils.conv_template.exclude_vars_re->re.compile('(\\w*)=(\\w*)')
A:numpy.distutils.conv_template.exclude_re->re.compile(':exclude:')
A:numpy.distutils.conv_template.loophead->re.compile('\\n\\s*\\*?').sub('', loophead)
A:numpy.distutils.conv_template.reps->re.compile('#\\s*(\\w*)\\s*=([^#]*)#').findall(loophead)
A:numpy.distutils.conv_template.vals->parse_values(rep[1])
A:numpy.distutils.conv_template.size->len(vals)
A:numpy.distutils.conv_template.span->obj.span()
A:numpy.distutils.conv_template.endline->re.compile('\\n\\s*\\*?').sub('', loophead).find('\n', span[1])
A:numpy.distutils.conv_template.ex_names->re.compile('(\\w*)=(\\w*)').findall(substr)
A:numpy.distutils.conv_template.replace_re->re.compile('@(\\w+)@')
A:numpy.distutils.conv_template.name->match.group(1)
A:numpy.distutils.conv_template.struct->parse_structure(astr, level)
A:numpy.distutils.conv_template.envlist->parse_loop_header(head)
A:numpy.distutils.conv_template.newcode->parse_string(text, newenv, newlevel, newline)
A:numpy.distutils.conv_template.include_src_re->re.compile('(\\n|\\A)#include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+[.]src)[\'\\"]', re.I)
A:numpy.distutils.conv_template.d->os.path.dirname(source)
A:numpy.distutils.conv_template.m->re.compile('(\\n|\\A)#include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+[.]src)[\'\\"]', re.I).match(line)
A:numpy.distutils.conv_template.fn->os.path.join(d, fn)
A:numpy.distutils.conv_template.lines->resolve_includes(source)
A:numpy.distutils.conv_template.sourcefile->os.path.normcase(source).replace('\\', '\\\\')
A:numpy.distutils.conv_template.code->process_str(''.join(lines))
A:numpy.distutils.conv_template.allkeys->list(adict.keys())
A:numpy.distutils.conv_template.newkey->''.join([x[:n] for x in allkeys])
A:numpy.distutils.conv_template.fid->open(file, 'r')
A:numpy.distutils.conv_template.(base, ext)->os.path.splitext(file)
A:numpy.distutils.conv_template.outfile->open(newname, 'w')
A:numpy.distutils.conv_template.allstr->open(file, 'r').read()
A:numpy.distutils.conv_template.writestr->process_str(allstr)
numpy.distutils.conv_template.main()
numpy.distutils.conv_template.paren_repl(obj)
numpy.distutils.conv_template.parse_loop_header(loophead)
numpy.distutils.conv_template.parse_string(astr,env,level,line)
numpy.distutils.conv_template.parse_structure(astr,level)
numpy.distutils.conv_template.parse_values(astr)
numpy.distutils.conv_template.process_file(source)
numpy.distutils.conv_template.process_str(astr)
numpy.distutils.conv_template.resolve_includes(source)
numpy.distutils.conv_template.unique_key(adict)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/lib2def.py----------------------------------------
A:numpy.distutils.lib2def.FUNC_RE->re.compile('^(.*) in python%s\\.dll' % py_ver, re.MULTILINE)
A:numpy.distutils.lib2def.DATA_RE->re.compile('^_imp__(.*) in python%s\\.dll' % py_ver, re.MULTILINE)
A:numpy.distutils.lib2def.p->subprocess.Popen(nm_cmd, shell=shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
A:numpy.distutils.lib2def.(nm_output, nm_err)->subprocess.Popen(nm_cmd, shell=shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True).communicate()
A:numpy.distutils.lib2def.data->re.compile('^_imp__(.*) in python%s\\.dll' % py_ver, re.MULTILINE).findall(nm_output)
A:numpy.distutils.lib2def.func->re.compile('^(.*) in python%s\\.dll' % py_ver, re.MULTILINE).findall(nm_output)
A:numpy.distutils.lib2def.(libfile, deffile)->parse_cmd()
A:numpy.distutils.lib2def.deffile->open(deffile, 'w')
A:numpy.distutils.lib2def.nm_output->getnm(nm_cmd, shell=False)
A:numpy.distutils.lib2def.(dlist, flist)->parse_nm(nm_output)
numpy.distutils.lib2def.getnm(nm_cmd=['nm','-Cs','python%s.lib'%py_ver],shell=True)
numpy.distutils.lib2def.output_def(dlist,flist,header,file=sys.stdout)
numpy.distutils.lib2def.parse_cmd()
numpy.distutils.lib2def.parse_nm(nm_output)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/system_info.py----------------------------------------
A:numpy.distutils.system_info.global_compiler->_customized_ccompiler()
A:numpy.distutils.system_info.s->textwrap.dedent('            void zungqr_();\n            int main(int argc, const char *argv[])\n            {\n                zungqr_();\n                return 0;\n            }')
A:numpy.distutils.system_info.library_root->os.path.normpath(library_root)
A:numpy.distutils.system_info.vcpkg->shutil.which('vcpkg')
A:numpy.distutils.system_info.vcpkg_dir->os.path.dirname(vcpkg)
A:numpy.distutils.system_info.vcpkg_installed->os.path.join(vcpkg_dir, 'installed')
A:numpy.distutils.system_info.conda->shutil.which('conda')
A:numpy.distutils.system_info.conda_dir->os.path.dirname(conda)
A:numpy.distutils.system_info.default_lib_dirs->libpaths(['/usr/local/lib', '/opt/lib', '/usr/lib', '/opt/local/lib', '/sw/lib'], platform_bits)
A:numpy.distutils.system_info.default_x11_lib_dirs->libpaths(['/usr/X11R6/lib', '/usr/X11/lib', '/usr/lib'], platform_bits)
A:numpy.distutils.system_info.globbed_x11_dir->glob('/usr/lib/*/libX11.so')
A:numpy.distutils.system_info.p->self.combine_paths(d, ['', 'umfpack'], 'umfpack.h')
A:numpy.distutils.system_info.triplet->str(p.communicate()[0].decode().strip())
A:numpy.distutils.system_info.so_ext->get_shared_lib_extension()
A:numpy.distutils.system_info.sysfile->os.path.join(os.path.split(os.path.abspath(f))[0], fname)
A:numpy.distutils.system_info.f->new_fcompiler(c_compiler=c)
A:numpy.distutils.system_info.user_file->os.path.join(f, fname)
A:numpy.distutils.system_info.order_str->os.environ.get(env, None)
A:numpy.distutils.system_info.order_str_l->list(order_str)
A:numpy.distutils.system_info.orders->os.environ.get(env, None).lower().split(',')
A:numpy.distutils.system_info.allow_order->base_order.copy()
A:numpy.distutils.system_info.cl->{'atlas': atlas_info, 'atlas_threads': atlas_threads_info, 'atlas_blas': atlas_blas_info, 'atlas_blas_threads': atlas_blas_threads_info, 'lapack_atlas': lapack_atlas_info, 'lapack_atlas_threads': lapack_atlas_threads_info, 'atlas_3_10': atlas_3_10_info, 'atlas_3_10_threads': atlas_3_10_threads_info, 'atlas_3_10_blas': atlas_3_10_blas_info, 'atlas_3_10_blas_threads': atlas_3_10_blas_threads_info, 'lapack_atlas_3_10': lapack_atlas_3_10_info, 'lapack_atlas_3_10_threads': lapack_atlas_3_10_threads_info, 'flame': flame_info, 'mkl': mkl_info, 'openblas': openblas_info, 'openblas_lapack': openblas_lapack_info, 'openblas_clapack': openblas_clapack_info, 'blis': blis_info, 'lapack_mkl': lapack_mkl_info, 'blas_mkl': blas_mkl_info, 'accelerate': accelerate_info, 'openblas64_': openblas64__info, 'openblas64__lapack': openblas64__lapack_info, 'openblas_ilp64': openblas_ilp64_info, 'openblas_ilp64_lapack': openblas_ilp64_lapack_info, 'x11': x11_info, 'fft_opt': fft_opt_info, 'fftw': fftw_info, 'fftw2': fftw2_info, 'fftw3': fftw3_info, 'dfftw': dfftw_info, 'sfftw': sfftw_info, 'fftw_threads': fftw_threads_info, 'dfftw_threads': dfftw_threads_info, 'sfftw_threads': sfftw_threads_info, 'djbfft': djbfft_info, 'blas': blas_info, 'lapack': lapack_info, 'lapack_src': lapack_src_info, 'blas_src': blas_src_info, 'numpy': numpy_info, 'f2py': f2py_info, 'Numeric': Numeric_info, 'numeric': Numeric_info, 'numarray': numarray_info, 'numerix': numerix_info, 'lapack_opt': lapack_opt_info, 'lapack_ilp64_opt': lapack_ilp64_opt_info, 'lapack_ilp64_plain_opt': lapack_ilp64_plain_opt_info, 'lapack64__opt': lapack64__opt_info, 'blas_opt': blas_opt_info, 'blas_ilp64_opt': blas_ilp64_opt_info, 'blas_ilp64_plain_opt': blas_ilp64_plain_opt_info, 'blas64__opt': blas64__opt_info, 'boost_python': boost_python_info, 'agg2': agg2_info, 'wx': wx_info, 'gdk_pixbuf_xlib_2': gdk_pixbuf_xlib_2_info, 'gdk-pixbuf-xlib-2.0': gdk_pixbuf_xlib_2_info, 'gdk_pixbuf_2': gdk_pixbuf_2_info, 'gdk-pixbuf-2.0': gdk_pixbuf_2_info, 'gdk': gdk_info, 'gdk_2': gdk_2_info, 'gdk-2.0': gdk_2_info, 'gdk_x11_2': gdk_x11_2_info, 'gdk-x11-2.0': gdk_x11_2_info, 'gtkp_x11_2': gtkp_x11_2_info, 'gtk+-x11-2.0': gtkp_x11_2_info, 'gtkp_2': gtkp_2_info, 'gtk+-2.0': gtkp_2_info, 'xft': xft_info, 'freetype2': freetype2_info, 'umfpack': umfpack_info, 'amd': amd_info}.get(name.lower(), system_info)
A:numpy.distutils.system_info.self.cp->ConfigParser(defaults)
A:numpy.distutils.system_info.self.search_static_first->self.cp.getboolean(self.section, 'search_static_first')
A:numpy.distutils.system_info.libs->self.get_libs(opt, ver_param['libs'])
A:numpy.distutils.system_info.dirs->glob(os.path.join(d, 'mkl', '*'))
A:numpy.distutils.system_info.r_dirs->self.get_runtime_lib_dirs()
A:numpy.distutils.system_info.i->self.check_libs(r_dirs, [lib])
A:numpy.distutils.system_info.i['runtime_library_dirs']->self.check_libs(r_dirs, [lib]).pop('library_dirs')
A:numpy.distutils.system_info.lib_info->self.calc_libraries_info()
A:numpy.distutils.system_info.extra_info->self.calc_extra_info()
A:numpy.distutils.system_info.opt->self.get_option_single('umfpack_libs', 'libraries')
A:numpy.distutils.system_info.res->self.saved_results.get(self.__class__.__name__)
A:numpy.distutils.system_info.v->str(v)
A:numpy.distutils.system_info.l->self.check_libs(lib_dirs, umfpack_libs, []).get('define_macros', [])
A:numpy.distutils.system_info.b->os.path.basename(d)
A:numpy.distutils.system_info.ds->os.path.join(d, os.path.basename(py_incl_dir)).split(os.pathsep)
A:numpy.distutils.system_info.d1->os.path.join(d, dd)
A:numpy.distutils.system_info.default_dirs->self.cp.get(self.section, key).split(os.pathsep)
A:numpy.distutils.system_info.path->self.get_paths(self.section, key)
A:numpy.distutils.system_info.c->customized_ccompiler()
A:numpy.distutils.system_info.exts->self.library_extensions()
A:numpy.distutils.system_info.info->self.check_libs(lib_dirs, umfpack_libs, [])
A:numpy.distutils.system_info.found_lib->self._find_lib(lib_dir, lib, exts)
A:numpy.distutils.system_info.(found_dirs, found_libs)->self._find_libs(lib_dirs, libs, exts)
A:numpy.distutils.system_info.(opt_found_dirs, opt_found_libs)->self._find_libs(lib_dirs, opt_libs, exts)
A:numpy.distutils.system_info.djbfft_info->get_info('djbfft')
A:numpy.distutils.system_info.lib_dirs->self.get_lib_dirs()
A:numpy.distutils.system_info.incl_dirs->self.get_include_dirs()
A:numpy.distutils.system_info.pre_dirs->system_info.get_paths(self, section, key)
A:numpy.distutils.system_info.mklroot->self.get_mkl_rootdir()
A:numpy.distutils.system_info.paths->os.environ.get('LD_LIBRARY_PATH', '').split(os.pathsep)
A:numpy.distutils.system_info.d->os.path.join(d, os.path.basename(py_incl_dir))
A:numpy.distutils.system_info.path_atoms->self.get_paths(self.section, key).split(os.sep)
A:numpy.distutils.system_info.mkl_libs->self.get_libs(opt, self._lib_mkl)
A:numpy.distutils.system_info.atlas_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.lapack_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.lapack_atlas->self.check_libs2(d, ['lapack_atlas'], [])
A:numpy.distutils.system_info.atlas->self.check_libs2(lib_dirs, atlas_libs, [])
A:numpy.distutils.system_info.lapack->self.check_libs2(lib_dirs2, lapack_libs, [])
A:numpy.distutils.system_info.include_dirs->self.get_include_dirs()
A:numpy.distutils.system_info.h->os.path.dirname(h)
A:numpy.distutils.system_info.message->textwrap.dedent('\n                *********************************************************************\n                    Could not find lapack library within the ATLAS installation.\n                *********************************************************************\n                ')
A:numpy.distutils.system_info.fn->os.path.join(lapack_dir, prefix + lapack_name + e)
A:numpy.distutils.system_info.(atlas_version, atlas_extra_info)->get_atlas_version(**atlas)
A:numpy.distutils.system_info.src_dirs->self.get_src_dirs()
A:numpy.distutils.system_info.src_dir2->os.path.join(src_dir, '..', 'INSTALL')
A:numpy.distutils.system_info.libraries->self.get_libs('libraries', self._lib_names)
A:numpy.distutils.system_info.library_dirs->config.get('library_dirs', [])
A:numpy.distutils.system_info.(s, o)->customized_ccompiler().get_output(atlas_version_c_text, libraries=libraries + ['gfortran'], library_dirs=library_dirs)
A:numpy.distutils.system_info.m->re.search('ATLAS version (?P<version>\\d+[.]\\d+[.]\\d+)', o)
A:numpy.distutils.system_info.atlas_version->re.search('ATLAS version (?P<version>\\d+[.]\\d+[.]\\d+)', o).group('version')
A:numpy.distutils.system_info.lapack_info->self._get_info_lapack()
A:numpy.distutils.system_info.info_src->get_info('lapack_src')
A:numpy.distutils.system_info.info_blas->self._get_info_blas()
A:numpy.distutils.system_info.info['extra_link_args']->os.environ['NPY_BLAS_LIBS'].split()
A:numpy.distutils.system_info.(lapack_order, unknown_order)->_parse_env_order(self.lapack_order, self.order_env_var_name)
A:numpy.distutils.system_info.macros->dict(info.get('define_macros', []))
A:numpy.distutils.system_info.prefix->dict(info.get('define_macros', [])).get('BLAS_SYMBOL_PREFIX', '')
A:numpy.distutils.system_info.suffix->dict(info.get('define_macros', [])).get('BLAS_SYMBOL_SUFFIX', '')
A:numpy.distutils.system_info.blas->get_info('blas')
A:numpy.distutils.system_info.blas_src->get_info('blas_src')
A:numpy.distutils.system_info.(blas_order, unknown_order)->_parse_env_order(self.blas_order, self.order_env_var_name)
A:numpy.distutils.system_info.blas_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.info['include_dirs']->self.get_include_dirs()
A:numpy.distutils.system_info.cblas_info_obj->cblas_info()
A:numpy.distutils.system_info.cblas_opt->cblas_info().get_option_single('cblas_libs', 'libraries')
A:numpy.distutils.system_info.cblas_libs->cblas_info().get_libs(cblas_opt, None)
A:numpy.distutils.system_info.lib->self.get_cblas_libs(info)
A:numpy.distutils.system_info.tmpdir->tempfile.mkdtemp()
A:numpy.distutils.system_info.src->os.path.join(tmpdir, 'source.c')
A:numpy.distutils.system_info.obj->customized_ccompiler().compile([src], output_dir=tmpdir)
A:numpy.distutils.system_info.openblas_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.fullpath->os.path.join(library_dir, library + '.a')
A:numpy.distutils.system_info.fake_lib_file->os.path.join(tmpdir, basename + '.fobjects')
A:numpy.distutils.system_info.fake_clib_file->os.path.join(tmpdir, basename + '.cobjects')
A:numpy.distutils.system_info.prototypes->'\n'.join(('void %s%s%s();' % (self.symbol_prefix, symbol_name, self.symbol_suffix) for symbol_name in self._require_symbols))
A:numpy.distutils.system_info.calls->'\n'.join(('%s%s%s();' % (self.symbol_prefix, symbol_name, self.symbol_suffix) for symbol_name in self._require_symbols))
A:numpy.distutils.system_info.out->os.path.join(tmpdir, 'a.out')
A:numpy.distutils.system_info.blis_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.extra_args->self.check_libs(lib_dirs, umfpack_libs, []).get('extra_link_args', [])
A:numpy.distutils.system_info.flame_libs->self.get_libs('libraries', self._lib_names)
A:numpy.distutils.system_info.blas_info->get_info('blas_opt')
A:numpy.distutils.system_info.x11_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.module->__import__(self.modulename)
A:numpy.distutils.system_info.py_incl_dir->sysconfig.get_path('include')
A:numpy.distutils.system_info.py_pincl_dir->sysconfig.get_path('platinclude')
A:numpy.distutils.system_info.vrs->getattr(module, v, None)
A:numpy.distutils.system_info.msg1->str(e)
A:numpy.distutils.system_info.msg2->str(e)
A:numpy.distutils.system_info.msg3->str(e)
A:numpy.distutils.system_info.f2py_dir->os.path.join(os.path.dirname(f2py.__file__), 'src')
A:numpy.distutils.system_info.srcs_dir->os.path.join(src_dir, 'libs', 'python', 'src')
A:numpy.distutils.system_info.bpl_srcs->glob(os.path.join(srcs_dir, '*.cpp'))
A:numpy.distutils.system_info.agg2_srcs->glob(os.path.join(src_dir, 'src', '*.cpp'))
A:numpy.distutils.system_info.o->filepath_from_subprocess_output(o)
A:numpy.distutils.system_info.config_exe->find_executable(self.get_config_exe())
A:numpy.distutils.system_info.version->self.get_config_output(config_exe, self.version_flag)
A:numpy.distutils.system_info.release->self.get_config_output(config_exe, '--release')
A:numpy.distutils.system_info.opts->self.get_config_output(config_exe, self.cflags_flag)
A:numpy.distutils.system_info.(n, v)->opt[2:].split('=')
A:numpy.distutils.system_info.amd_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.inc_dir->os.path.dirname(p[0])
A:numpy.distutils.system_info.umfpack_libs->self.get_libs(opt, self._lib_names)
A:numpy.distutils.system_info.result->combine_paths(*combine_paths(args[0], args[1]) + args[2:])
A:numpy.distutils.system_info.parser->optparse.OptionParser('usage: %prog [-v] [info objs]')
A:numpy.distutils.system_info.(opts, args)->parseCmdLine(argv)
A:numpy.distutils.system_info._gdict_->globals().copy()
A:numpy.distutils.system_info.conf->c()
A:numpy.distutils.system_info.r->c().get_info()
numpy.distutils.system_info.AliasedOptionError(DistutilsError)
numpy.distutils.system_info.AtlasNotFoundError(NotFoundError)
numpy.distutils.system_info.BlasILP64NotFoundError(NotFoundError)
numpy.distutils.system_info.BlasNotFoundError(NotFoundError)
numpy.distutils.system_info.BlasOptNotFoundError(NotFoundError)
numpy.distutils.system_info.BlasSrcNotFoundError(BlasNotFoundError)
numpy.distutils.system_info.DJBFFTNotFoundError(NotFoundError)
numpy.distutils.system_info.FFTWNotFoundError(NotFoundError)
numpy.distutils.system_info.FlameNotFoundError(NotFoundError)
numpy.distutils.system_info.LapackILP64NotFoundError(NotFoundError)
numpy.distutils.system_info.LapackNotFoundError(NotFoundError)
numpy.distutils.system_info.LapackSrcNotFoundError(LapackNotFoundError)
numpy.distutils.system_info.NotFoundError(DistutilsError)
numpy.distutils.system_info.NumericNotFoundError(NotFoundError)
numpy.distutils.system_info.Numeric_info(_numpy_info)
numpy.distutils.system_info.UmfpackNotFoundError(NotFoundError)
numpy.distutils.system_info.X11NotFoundError(NotFoundError)
numpy.distutils.system_info._c_string_literal(s)
numpy.distutils.system_info._ilp64_opt_info_mixin
numpy.distutils.system_info._ilp64_opt_info_mixin._check_info(self,info)
numpy.distutils.system_info._numpy_info(self)
numpy.distutils.system_info._numpy_info.__init__(self)
numpy.distutils.system_info._numpy_info.calc_info(self)
numpy.distutils.system_info._parse_env_order(base_order,env)
numpy.distutils.system_info._pkg_config_info(system_info)
numpy.distutils.system_info._pkg_config_info.calc_info(self)
numpy.distutils.system_info._pkg_config_info.get_config_exe(self)
numpy.distutils.system_info._pkg_config_info.get_config_output(self,config_exe,option)
numpy.distutils.system_info.accelerate_info(system_info)
numpy.distutils.system_info.accelerate_info.calc_info(self)
numpy.distutils.system_info.agg2_info(system_info)
numpy.distutils.system_info.agg2_info.calc_info(self)
numpy.distutils.system_info.agg2_info.get_paths(self,section,key)
numpy.distutils.system_info.amd_info(system_info)
numpy.distutils.system_info.amd_info.calc_info(self)
numpy.distutils.system_info.atlas_3_10_blas_info(atlas_3_10_info)
numpy.distutils.system_info.atlas_3_10_blas_info.calc_info(self)
numpy.distutils.system_info.atlas_3_10_blas_threads_info(atlas_3_10_blas_info)
numpy.distutils.system_info.atlas_3_10_info(atlas_info)
numpy.distutils.system_info.atlas_3_10_threads_info(atlas_3_10_info)
numpy.distutils.system_info.atlas_blas_info(atlas_info)
numpy.distutils.system_info.atlas_blas_info.calc_info(self)
numpy.distutils.system_info.atlas_blas_threads_info(atlas_blas_info)
numpy.distutils.system_info.atlas_info(system_info)
numpy.distutils.system_info.atlas_info.calc_info(self)
numpy.distutils.system_info.atlas_info.get_paths(self,section,key)
numpy.distutils.system_info.atlas_threads_info(atlas_info)
numpy.distutils.system_info.blas64__opt_info(blas_ilp64_opt_info)
numpy.distutils.system_info.blas_ilp64_opt_info(blas_opt_info,_ilp64_opt_info_mixin)
numpy.distutils.system_info.blas_ilp64_opt_info._calc_info(self,name)
numpy.distutils.system_info.blas_ilp64_plain_opt_info(blas_ilp64_opt_info)
numpy.distutils.system_info.blas_info(system_info)
numpy.distutils.system_info.blas_info.calc_info(self)
numpy.distutils.system_info.blas_info.get_cblas_libs(self,info)
numpy.distutils.system_info.blas_mkl_info(mkl_info)
numpy.distutils.system_info.blas_opt_info(system_info)
numpy.distutils.system_info.blas_opt_info._calc_info(self,name)
numpy.distutils.system_info.blas_opt_info._calc_info_accelerate(self)
numpy.distutils.system_info.blas_opt_info._calc_info_atlas(self)
numpy.distutils.system_info.blas_opt_info._calc_info_blas(self)
numpy.distutils.system_info.blas_opt_info._calc_info_blis(self)
numpy.distutils.system_info.blas_opt_info._calc_info_from_envvar(self)
numpy.distutils.system_info.blas_opt_info._calc_info_mkl(self)
numpy.distutils.system_info.blas_opt_info._calc_info_openblas(self)
numpy.distutils.system_info.blas_opt_info.calc_info(self)
numpy.distutils.system_info.blas_src_info(system_info)
numpy.distutils.system_info.blas_src_info.calc_info(self)
numpy.distutils.system_info.blas_src_info.get_paths(self,section,key)
numpy.distutils.system_info.blis_info(blas_info)
numpy.distutils.system_info.blis_info.calc_info(self)
numpy.distutils.system_info.boost_python_info(system_info)
numpy.distutils.system_info.boost_python_info.calc_info(self)
numpy.distutils.system_info.boost_python_info.get_paths(self,section,key)
numpy.distutils.system_info.cblas_info(system_info)
numpy.distutils.system_info.combine_paths(*args,**kws)
numpy.distutils.system_info.customized_ccompiler()
numpy.distutils.system_info.dfftw_info(fftw_info)
numpy.distutils.system_info.dfftw_threads_info(fftw_info)
numpy.distutils.system_info.dict_append(d,**kws)
numpy.distutils.system_info.djbfft_info(system_info)
numpy.distutils.system_info.djbfft_info.calc_info(self)
numpy.distutils.system_info.djbfft_info.get_paths(self,section,key)
numpy.distutils.system_info.f2py_info(system_info)
numpy.distutils.system_info.f2py_info.calc_info(self)
numpy.distutils.system_info.fft_opt_info(system_info)
numpy.distutils.system_info.fft_opt_info.calc_info(self)
numpy.distutils.system_info.fftw2_info(fftw_info)
numpy.distutils.system_info.fftw3_info(fftw_info)
numpy.distutils.system_info.fftw_info(system_info)
numpy.distutils.system_info.fftw_info.calc_info(self)
numpy.distutils.system_info.fftw_info.calc_ver_info(self,ver_param)
numpy.distutils.system_info.fftw_threads_info(fftw_info)
numpy.distutils.system_info.flame_info(system_info)
numpy.distutils.system_info.flame_info.calc_info(self)
numpy.distutils.system_info.flame_info.check_embedded_lapack(self,info)
numpy.distutils.system_info.freetype2_info(_pkg_config_info)
numpy.distutils.system_info.gdk_2_info(_pkg_config_info)
numpy.distutils.system_info.gdk_info(_pkg_config_info)
numpy.distutils.system_info.gdk_pixbuf_2_info(_pkg_config_info)
numpy.distutils.system_info.gdk_pixbuf_xlib_2_info(_pkg_config_info)
numpy.distutils.system_info.gdk_x11_2_info(_pkg_config_info)
numpy.distutils.system_info.get_atlas_version(**config)
numpy.distutils.system_info.get_info(name,notfound_action=0)
numpy.distutils.system_info.get_standard_file(fname)
numpy.distutils.system_info.gtkp_2_info(_pkg_config_info)
numpy.distutils.system_info.gtkp_x11_2_info(_pkg_config_info)
numpy.distutils.system_info.lapack64__opt_info(lapack_ilp64_opt_info)
numpy.distutils.system_info.lapack_atlas_3_10_info(atlas_3_10_info)
numpy.distutils.system_info.lapack_atlas_3_10_threads_info(atlas_3_10_threads_info)
numpy.distutils.system_info.lapack_atlas_info(atlas_info)
numpy.distutils.system_info.lapack_atlas_threads_info(atlas_threads_info)
numpy.distutils.system_info.lapack_ilp64_opt_info(lapack_opt_info,_ilp64_opt_info_mixin)
numpy.distutils.system_info.lapack_ilp64_opt_info._calc_info(self,name)
numpy.distutils.system_info.lapack_ilp64_plain_opt_info(lapack_ilp64_opt_info)
numpy.distutils.system_info.lapack_info(system_info)
numpy.distutils.system_info.lapack_info.calc_info(self)
numpy.distutils.system_info.lapack_mkl_info(mkl_info)
numpy.distutils.system_info.lapack_opt_info(system_info)
numpy.distutils.system_info.lapack_opt_info._calc_info(self,name)
numpy.distutils.system_info.lapack_opt_info._calc_info_accelerate(self)
numpy.distutils.system_info.lapack_opt_info._calc_info_atlas(self)
numpy.distutils.system_info.lapack_opt_info._calc_info_flame(self)
numpy.distutils.system_info.lapack_opt_info._calc_info_from_envvar(self)
numpy.distutils.system_info.lapack_opt_info._calc_info_lapack(self)
numpy.distutils.system_info.lapack_opt_info._calc_info_mkl(self)
numpy.distutils.system_info.lapack_opt_info._calc_info_openblas(self)
numpy.distutils.system_info.lapack_opt_info._get_info_blas(self)
numpy.distutils.system_info.lapack_opt_info._get_info_lapack(self)
numpy.distutils.system_info.lapack_opt_info.calc_info(self)
numpy.distutils.system_info.lapack_src_info(system_info)
numpy.distutils.system_info.lapack_src_info.calc_info(self)
numpy.distutils.system_info.lapack_src_info.get_paths(self,section,key)
numpy.distutils.system_info.libpaths(paths,bits)
numpy.distutils.system_info.mkl_info(self)
numpy.distutils.system_info.mkl_info.__init__(self)
numpy.distutils.system_info.mkl_info.calc_info(self)
numpy.distutils.system_info.mkl_info.get_mkl_rootdir(self)
numpy.distutils.system_info.numarray_info(_numpy_info)
numpy.distutils.system_info.numerix_info(system_info)
numpy.distutils.system_info.numerix_info.calc_info(self)
numpy.distutils.system_info.numpy_info(_numpy_info)
numpy.distutils.system_info.openblas64__info(openblas_ilp64_info)
numpy.distutils.system_info.openblas64__lapack_info(openblas_ilp64_lapack_info,openblas64__info)
numpy.distutils.system_info.openblas_clapack_info(openblas_lapack_info)
numpy.distutils.system_info.openblas_ilp64_info(openblas_info)
numpy.distutils.system_info.openblas_ilp64_info._calc_info(self)
numpy.distutils.system_info.openblas_ilp64_lapack_info(openblas_ilp64_info)
numpy.distutils.system_info.openblas_ilp64_lapack_info._calc_info(self)
numpy.distutils.system_info.openblas_info(blas_info)
numpy.distutils.system_info.openblas_info._calc_info(self)
numpy.distutils.system_info.openblas_info.calc_info(self)
numpy.distutils.system_info.openblas_info.check_msvc_gfortran_libs(self,library_dirs,libraries)
numpy.distutils.system_info.openblas_info.check_symbols(self,info)
numpy.distutils.system_info.openblas_info.symbol_prefix(self)
numpy.distutils.system_info.openblas_info.symbol_suffix(self)
numpy.distutils.system_info.openblas_lapack_info(openblas_info)
numpy.distutils.system_info.parseCmdLine(argv=(None,))
numpy.distutils.system_info.sfftw_info(fftw_info)
numpy.distutils.system_info.sfftw_threads_info(fftw_info)
numpy.distutils.system_info.show_all(argv=None)
numpy.distutils.system_info.system_info(self,default_lib_dirs=default_lib_dirs,default_include_dirs=default_include_dirs)
numpy.distutils.system_info.system_info.__init__(self,default_lib_dirs=default_lib_dirs,default_include_dirs=default_include_dirs)
numpy.distutils.system_info.system_info._check_libs(self,lib_dirs,libs,opt_libs,exts)
numpy.distutils.system_info.system_info._find_lib(self,lib_dir,lib,exts)
numpy.distutils.system_info.system_info._find_libs(self,lib_dirs,libs,exts)
numpy.distutils.system_info.system_info.calc_extra_info(self)
numpy.distutils.system_info.system_info.calc_libraries_info(self)
numpy.distutils.system_info.system_info.check_libs(self,lib_dirs,libs,opt_libs=[])
numpy.distutils.system_info.system_info.check_libs2(self,lib_dirs,libs,opt_libs=[])
numpy.distutils.system_info.system_info.combine_paths(self,*args)
numpy.distutils.system_info.system_info.get_include_dirs(self,key='include_dirs')
numpy.distutils.system_info.system_info.get_info(self,notfound_action=0)
numpy.distutils.system_info.system_info.get_lib_dirs(self,key='library_dirs')
numpy.distutils.system_info.system_info.get_libraries(self,key='libraries')
numpy.distutils.system_info.system_info.get_libs(self,key,default)
numpy.distutils.system_info.system_info.get_option_single(self,*options)
numpy.distutils.system_info.system_info.get_paths(self,section,key)
numpy.distutils.system_info.system_info.get_runtime_lib_dirs(self,key='runtime_library_dirs')
numpy.distutils.system_info.system_info.get_src_dirs(self,key='src_dirs')
numpy.distutils.system_info.system_info.has_info(self)
numpy.distutils.system_info.system_info.library_extensions(self)
numpy.distutils.system_info.system_info.parse_config_files(self)
numpy.distutils.system_info.system_info.set_info(self,**info)
numpy.distutils.system_info.umfpack_info(system_info)
numpy.distutils.system_info.umfpack_info.calc_info(self)
numpy.distutils.system_info.wx_info(_pkg_config_info)
numpy.distutils.system_info.x11_info(self)
numpy.distutils.system_info.x11_info.__init__(self)
numpy.distutils.system_info.x11_info.calc_info(self)
numpy.distutils.system_info.xft_info(_pkg_config_info)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/unixccompiler.py----------------------------------------
A:numpy.distutils.unixccompiler.opt->' '.join(os.environ['OPT'].split())
A:numpy.distutils.unixccompiler.gcv_opt->' '.join(get_config_vars('OPT')[0].split())
A:numpy.distutils.unixccompiler.ccomp_s->ccomp_s.replace(gcv_opt, opt).replace(gcv_opt, opt)
A:numpy.distutils.unixccompiler.self.compiler_so->ccomp_s.replace(gcv_opt, opt).replace(gcv_opt, opt).split()
A:numpy.distutils.unixccompiler.llink_s->' '.join(self.linker_so)
A:numpy.distutils.unixccompiler.msg->str(e)
A:numpy.distutils.unixccompiler.(objects, output_dir)->self._fix_object_args(objects, output_dir)
A:numpy.distutils.unixccompiler.output_filename->self.library_filename(output_libname, output_dir=output_dir)
numpy.distutils.unixccompiler.UnixCCompiler__compile(self,obj,src,ext,cc_args,extra_postargs,pp_opts)
numpy.distutils.unixccompiler.UnixCCompiler_create_static_lib(self,objects,output_libname,output_dir=None,debug=0,target_lang=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/from_template.py----------------------------------------
A:numpy.distutils.from_template.routine_start_re->re.compile('(\\n|\\A)((     (\\$|\\*))|)\\s*(subroutine|function)\\b', re.I)
A:numpy.distutils.from_template.routine_end_re->re.compile('\\n\\s*end\\s*(subroutine|function)\\b.*(\\n|\\Z)', re.I)
A:numpy.distutils.from_template.function_start_re->re.compile('\\n     (\\$|\\*)\\s*function\\b', re.I)
A:numpy.distutils.from_template.m->re.compile('(\\n|\\A)\\s*include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+\\.src)[\'\\"]', re.I).match(line)
A:numpy.distutils.from_template.start->re.compile('(\\n|\\A)\\s*include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+\\.src)[\'\\"]', re.I).match(line).start()
A:numpy.distutils.from_template.i->astr.rfind('\n', ind, start)
A:numpy.distutils.from_template.template_re->re.compile('<\\s*(\\w[\\w\\d]*)\\s*>')
A:numpy.distutils.from_template.named_re->re.compile('<\\s*(\\w[\\w\\d]*)\\s*=\\s*(.*?)\\s*>')
A:numpy.distutils.from_template.list_re->re.compile('<\\s*((.*?))\\s*>')
A:numpy.distutils.from_template.reps->re.compile('<\\s*(\\w[\\w\\d]*)\\s*=\\s*(.*?)\\s*>').findall(astr)
A:numpy.distutils.from_template.repl->rep[1].replace('\\,', '@comma@')
A:numpy.distutils.from_template.thelist->find_repl_patterns(substr).get(r, names.get(r, None))
A:numpy.distutils.from_template.names->find_repl_patterns(astr)
A:numpy.distutils.from_template.item_re->re.compile('\\A\\\\(?P<index>\\d+)\\Z')
A:numpy.distutils.from_template.b->astr.split(',')
A:numpy.distutils.from_template.j->int(m.group('index'))
A:numpy.distutils.from_template.allkeys->list(adict.keys())
A:numpy.distutils.from_template.template_name_re->re.compile('\\A\\s*(\\w[\\w\\d]*)\\s*\\Z')
A:numpy.distutils.from_template.substr->re.compile('<\\s*((.*?))\\s*>').sub(listrepl, substr)
A:numpy.distutils.from_template.lnames->find_repl_patterns(substr)
A:numpy.distutils.from_template.name->mobj.group(1)
A:numpy.distutils.from_template.num->len(rule)
A:numpy.distutils.from_template.newstr->newstr.replace('@leftarrow@', '<').replace('@leftarrow@', '<')
A:numpy.distutils.from_template.struct->parse_structure(newstr)
A:numpy.distutils.from_template.(cleanedstr, defs)->find_and_remove_repl_patterns(newstr[oldend:sub[0]])
A:numpy.distutils.from_template.include_src_re->re.compile('(\\n|\\A)\\s*include\\s*[\'\\"](?P<name>[\\w\\d./\\\\]+\\.src)[\'\\"]', re.I)
A:numpy.distutils.from_template.d->os.path.dirname(source)
A:numpy.distutils.from_template.fn->os.path.join(d, fn)
A:numpy.distutils.from_template.lines->resolve_includes(source)
A:numpy.distutils.from_template._special_names->find_repl_patterns('\n<_c=s,d,c,z>\n<_t=real,double precision,complex,double complex>\n<prefix=s,d,c,z>\n<ftype=real,double precision,complex,double complex>\n<ctype=float,double,complex_float,complex_double>\n<ftypereal=real,double precision,\\0,\\1>\n<ctypereal=float,double,\\0,\\1>\n')
A:numpy.distutils.from_template.fid->open(file, 'r')
A:numpy.distutils.from_template.(base, ext)->os.path.splitext(file)
A:numpy.distutils.from_template.outfile->open(newname, 'w')
A:numpy.distutils.from_template.allstr->open(file, 'r').read()
A:numpy.distutils.from_template.writestr->process_str(allstr)
numpy.distutils.from_template.conv(astr)
numpy.distutils.from_template.expand_sub(substr,names)
numpy.distutils.from_template.find_and_remove_repl_patterns(astr)
numpy.distutils.from_template.find_repl_patterns(astr)
numpy.distutils.from_template.main()
numpy.distutils.from_template.parse_structure(astr)
numpy.distutils.from_template.process_file(source)
numpy.distutils.from_template.process_str(allstr)
numpy.distutils.from_template.resolve_includes(source)
numpy.distutils.from_template.unique_key(adict)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/msvccompiler.py----------------------------------------
A:numpy.distutils.msvccompiler.environ_lib->os.getenv('lib', '')
A:numpy.distutils.msvccompiler.environ_include->os.getenv('include', '')
A:numpy.distutils.msvccompiler.os.environ['lib']->_merge(environ_lib, os.environ['lib'])
A:numpy.distutils.msvccompiler.os.environ['include']->_merge(environ_include, os.environ['include'])
numpy.distutils.msvccompiler.MSVCCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.msvccompiler.MSVCCompiler.__init__(self,verbose=0,dry_run=0,force=0)
numpy.distutils.msvccompiler.MSVCCompiler.initialize(self)
numpy.distutils.msvccompiler._merge(old,new)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/setup.py----------------------------------------
A:numpy.distutils.setup.config->Configuration('distutils', parent_package, top_path)
numpy.distutils.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/pathccompiler.py----------------------------------------
numpy.distutils.pathccompiler.PathScaleCCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.pathccompiler.PathScaleCCompiler.__init__(self,verbose=0,dry_run=0,force=0)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/extension.py----------------------------------------
A:numpy.distutils.extension.self.swig_opts->self.swig_opts.split()
numpy.distutils.extension.Extension(self,name,sources,include_dirs=None,define_macros=None,undef_macros=None,library_dirs=None,libraries=None,runtime_library_dirs=None,extra_objects=None,extra_compile_args=None,extra_link_args=None,export_symbols=None,swig_opts=None,depends=None,language=None,f2py_options=None,module_dirs=None,extra_f77_compile_args=None,extra_f90_compile_args=None)
numpy.distutils.extension.Extension.__init__(self,name,sources,include_dirs=None,define_macros=None,undef_macros=None,library_dirs=None,libraries=None,runtime_library_dirs=None,extra_objects=None,extra_compile_args=None,extra_link_args=None,export_symbols=None,swig_opts=None,depends=None,language=None,f2py_options=None,module_dirs=None,extra_f77_compile_args=None,extra_f90_compile_args=None)
numpy.distutils.extension.Extension.has_cxx_sources(self)
numpy.distutils.extension.Extension.has_f2py_sources(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/intelccompiler.py----------------------------------------
A:numpy.distutils.intelccompiler.v->self.get_version()
A:numpy.distutils.intelccompiler.self.cc_exe->'icc -std=c99 -m64 -fPIC -fp-model strict -O3 -fomit-frame-pointer -{}'.format(mpopt)
A:numpy.distutils.intelccompiler.version_match->simple_version_match(start='Intel\\(R\\).*?64,')
A:numpy.distutils.intelccompiler.self.cc->self.find_exe('icl.exe')
A:numpy.distutils.intelccompiler.self.lib->self.find_exe('xilib')
A:numpy.distutils.intelccompiler.self.linker->self.find_exe('xilink')
numpy.distutils.intelccompiler.IntelCCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.intelccompiler.IntelCCompiler.__init__(self,verbose=0,dry_run=0,force=0)
numpy.distutils.intelccompiler.IntelEM64TCCompiler(self,verbose=0,dry_run=0,force=0)
numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__(self,verbose=0,dry_run=0,force=0)
numpy.distutils.intelccompiler.IntelItaniumCCompiler(IntelCCompiler)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/ccompiler_opt.py----------------------------------------
A:numpy.distutils.ccompiler_opt.conf_check_path->os.path.join(os.path.dirname(os.path.realpath(__file__)), 'checks')
A:numpy.distutils.ccompiler_opt.conf_cc_flags->dict(gcc=dict(native='-march=native', opt='-O3', werror='-Werror'), clang=dict(native='-march=native', opt='-O3', werror='-Werror'), icc=dict(native='-xHost', opt='-O3', werror='-Werror'), iccw=dict(native='/QxHost', opt='/O3', werror='/Werror'), msvc=dict(native=None, opt='/O2', werror='/WX'))
A:numpy.distutils.ccompiler_opt.conf_min_features->dict(x86='SSE SSE2', x64='SSE SSE2 SSE3', ppc64='', ppc64le='VSX VSX2', armhf='', aarch64='NEON NEON_FP16 NEON_VFPV4 ASIMD')
A:numpy.distutils.ccompiler_opt.conf_features->dict(SSE=dict(interest=1, headers='xmmintrin.h', implies='SSE2'), SSE2=dict(interest=2, implies='SSE', headers='emmintrin.h'), SSE3=dict(interest=3, implies='SSE2', headers='pmmintrin.h'), SSSE3=dict(interest=4, implies='SSE3', headers='tmmintrin.h'), SSE41=dict(interest=5, implies='SSSE3', headers='smmintrin.h'), POPCNT=dict(interest=6, implies='SSE41', headers='popcntintrin.h'), SSE42=dict(interest=7, implies='POPCNT'), AVX=dict(interest=8, implies='SSE42', headers='immintrin.h', implies_detect=False), XOP=dict(interest=9, implies='AVX', headers='x86intrin.h'), FMA4=dict(interest=10, implies='AVX', headers='x86intrin.h'), F16C=dict(interest=11, implies='AVX'), FMA3=dict(interest=12, implies='F16C'), AVX2=dict(interest=13, implies='F16C'), AVX512F=dict(interest=20, implies='FMA3 AVX2', implies_detect=False, extra_checks='AVX512F_REDUCE'), AVX512CD=dict(interest=21, implies='AVX512F'), AVX512_KNL=dict(interest=40, implies='AVX512CD', group='AVX512ER AVX512PF', detect='AVX512_KNL', implies_detect=False), AVX512_KNM=dict(interest=41, implies='AVX512_KNL', group='AVX5124FMAPS AVX5124VNNIW AVX512VPOPCNTDQ', detect='AVX512_KNM', implies_detect=False), AVX512_SKX=dict(interest=42, implies='AVX512CD', group='AVX512VL AVX512BW AVX512DQ', detect='AVX512_SKX', implies_detect=False, extra_checks='AVX512BW_MASK AVX512DQ_MASK'), AVX512_CLX=dict(interest=43, implies='AVX512_SKX', group='AVX512VNNI', detect='AVX512_CLX'), AVX512_CNL=dict(interest=44, implies='AVX512_SKX', group='AVX512IFMA AVX512VBMI', detect='AVX512_CNL', implies_detect=False), AVX512_ICL=dict(interest=45, implies='AVX512_CLX AVX512_CNL', group='AVX512VBMI2 AVX512BITALG AVX512VPOPCNTDQ', detect='AVX512_ICL', implies_detect=False), VSX=dict(interest=1, headers='altivec.h', extra_checks='VSX_ASM'), VSX2=dict(interest=2, implies='VSX', implies_detect=False), VSX3=dict(interest=3, implies='VSX2', implies_detect=False), NEON=dict(interest=1, headers='arm_neon.h'), NEON_FP16=dict(interest=2, implies='NEON'), NEON_VFPV4=dict(interest=3, implies='NEON_FP16'), ASIMD=dict(interest=4, implies='NEON_FP16 NEON_VFPV4', implies_detect=False), ASIMDHP=dict(interest=5, implies='ASIMD'), ASIMDDP=dict(interest=6, implies='ASIMD'), ASIMDFHM=dict(interest=7, implies='ASIMDHP'))
A:numpy.distutils.ccompiler_opt.partial->dict(VSX=dict(implies='VSX2' if self.cc_on_ppc64le else '', flags='-mvsx'), VSX2=dict(flags='-mcpu=power8', implies_detect=False), VSX3=dict(flags='-mcpu=power9 -mtune=power9', implies_detect=False))
A:numpy.distutils.ccompiler_opt.tmp->tempfile.mkdtemp()
A:numpy.distutils.ccompiler_opt.bk_spawn->getattr(cc, 'spawn', None)
A:numpy.distutils.ccompiler_opt.cc_type->getattr(self._ccompiler, 'compiler_type', '')
A:numpy.distutils.ccompiler_opt.platform->get_platform()
A:numpy.distutils.ccompiler_opt.cc_info->getattr(self._ccompiler, 'compiler', getattr(self._ccompiler, 'compiler_so', ''))
A:numpy.distutils.ccompiler_opt.compiler->str(cc_info)
A:numpy.distutils.ccompiler_opt.extra_args->os.environ.get('CFLAGS', '')
A:numpy.distutils.ccompiler_opt.out->' '.join([to_str(a) for a in (*args,)])
A:numpy.distutils.ccompiler_opt.old_path->os.getenv('path')
A:numpy.distutils.ccompiler_opt._dist_warn_regex->re.compile('.*(warning D9002|invalid argument for option).*')
A:numpy.distutils.ccompiler_opt.o->subprocess.check_output(cmd, stderr=subprocess.STDOUT, universal_newlines=True)
A:numpy.distutils.ccompiler_opt._cache_ignore->re.compile('^(_|conf_)')
A:numpy.distutils.ccompiler_opt.self.cache_private->set()
A:numpy.distutils.ccompiler_opt.self._cache_hash->self.cache_hash(*factors, *self.conf_cache_factors)
A:numpy.distutils.ccompiler_opt.cache_mod->self.dist_load_module('cache', cache_path)
A:numpy.distutils.ccompiler_opt.other_cache->_share_cache.get(self._cache_hash)
A:numpy.distutils.ccompiler_opt.cdict->self.__dict__.copy()
A:numpy.distutils.ccompiler_opt.d->os.path.dirname(self._cache_path)
A:numpy.distutils.ccompiler_opt.repr_dict->pprint.pformat(cdict, compact=True)
A:numpy.distutils.ccompiler_opt.cache_key->str((cb.__name__, *args, *kwargs.keys(), *kwargs.values()))
A:numpy.distutils.ccompiler_opt.ccb->cb(self, *args, **kwargs)
A:numpy.distutils.ccompiler_opt.dist_info->self.dist_info()
A:numpy.distutils.ccompiler_opt.compiler_flags->self.conf_cc_flags.get(self.cc_name)
A:numpy.distutils.ccompiler_opt.flags->' '.join(self.feature_flags(tar))
A:numpy.distutils.ccompiler_opt.test_path->os.path.join(self.conf_check_path, 'extra_%s.c' % chk.lower())
A:numpy.distutils.ccompiler_opt.test->self.dist_test(test_path, force_flags + self.cc_flags['werror'], macros=macros)
A:numpy.distutils.ccompiler_opt._cc_normalize_unix_mrgx->re.compile('^(-mcpu=|-march=|-x[A-Z0-9\\-])')
A:numpy.distutils.ccompiler_opt._cc_normalize_unix_frgx->re.compile('^(?!(-mcpu=|-march=|-x[A-Z0-9\\-]))(?!-m[a-z0-9\\-\\.]*.$)')
A:numpy.distutils.ccompiler_opt._cc_normalize_unix_krgx->re.compile('^(-mfpu|-mtune)')
A:numpy.distutils.ccompiler_opt._cc_normalize_arch_ver->re.compile('[0-9.]')
A:numpy.distutils.ccompiler_opt.tokens->list(filter(None, re.split(self._parse_regex_target, tokens)))
A:numpy.distutils.ccompiler_opt.ver->float('0' + ''.join(re.findall(self._cc_normalize_arch_ver, tokens[0])))
A:numpy.distutils.ccompiler_opt.filterd->list(filter(self._cc_normalize_unix_frgx.search, lower_flags))
A:numpy.distutils.ccompiler_opt.(ver, arch, subflags)->ver_flags(cur_flag)
A:numpy.distutils.ccompiler_opt.(xver, _, xsubflags)->ver_flags(xflag)
A:numpy.distutils.ccompiler_opt.matched->set()
A:numpy.distutils.ccompiler_opt.match->re.match(self._cc_normalize_unix_krgx, f)
A:numpy.distutils.ccompiler_opt._cc_normalize_win_frgx->re.compile('^(?!(/arch\\:|/Qx\\:))')
A:numpy.distutils.ccompiler_opt._cc_normalize_win_mrgx->re.compile('^(/arch|/Qx:)')
A:numpy.distutils.ccompiler_opt.self.feature_supportedpfeatures->self.conf_features_partial()
A:numpy.distutils.ccompiler_opt.disabled->self.feature_supported.get(feature_name).get('disable')
A:numpy.distutils.ccompiler_opt.oval->self.feature_supported.get(feature_name).get(option)
A:numpy.distutils.ccompiler_opt.feature[option]->self.feature_supported.get(feature_name).get(option).split()
A:numpy.distutils.ccompiler_opt.self.feature_min->set()
A:numpy.distutils.ccompiler_opt.min_f->self.conf_min_features.get(self.cc_march, '')
A:numpy.distutils.ccompiler_opt.names->self.feature_sorted(self.feature_implies_c(names))
A:numpy.distutils.ccompiler_opt.supported_names->set()
A:numpy.distutils.ccompiler_opt.rank->max([self.feature_supported[f]['interest'] for f in k])
A:numpy.distutils.ccompiler_opt.implies->' '.join(self.feature_sorted(self.feature_implies(tar)))
A:numpy.distutils.ccompiler_opt.tied->self.feature_sorted(tied + [n])
A:numpy.distutils.ccompiler_opt.tnames->self.feature_sorted(tnames, reverse=True)
A:numpy.distutils.ccompiler_opt.f->os.path.dirname(self._cache_path).get('flags', [])
A:numpy.distutils.ccompiler_opt.force_flags->self.feature_flags(name)
A:numpy.distutils.ccompiler_opt.can->all([self.feature_can_autovec(t) for t in tar])
A:numpy.distutils.ccompiler_opt.extra_checks->os.path.dirname(self._cache_path).get('extra_checks', [])
A:numpy.distutils.ccompiler_opt.is_supported->self.dist_test(test_path, flags + self.cc_flags['werror'])
A:numpy.distutils.ccompiler_opt.feature->self.feature_supported.get(feature_name)
A:numpy.distutils.ccompiler_opt.extra_defs->self.feature_supported.get(feature_name).get('group', [])
A:numpy.distutils.ccompiler_opt.self._parse_policies->dict(KEEP_BASELINE=(None, self._parse_policy_not_keepbase, []), KEEP_SORT=(self._parse_policy_keepsort, self._parse_policy_not_keepsort, []), MAXOPT=(self._parse_policy_maxopt, None, []), WERROR=(self._parse_policy_werror, None, []), AUTOVEC=(self._parse_policy_autovec, None, ['MAXOPT']))
A:numpy.distutils.ccompiler_opt.cpu_baseline->self._parse_arg_features('cpu_baseline', cpu_baseline)
A:numpy.distutils.ccompiler_opt.baseline_names->self.cpu_baseline_names()
A:numpy.distutils.ccompiler_opt.self.parse_baseline_flags->self.feature_flags(baseline_names)
A:numpy.distutils.ccompiler_opt.self.parse_baseline_names->self.feature_sorted(self.feature_implies_c(baseline_names))
A:numpy.distutils.ccompiler_opt.cpu_dispatch_->self._parse_arg_features('cpu_dispatch', cpu_dispatch)
A:numpy.distutils.ccompiler_opt.conflict_baseline->self._parse_arg_features('cpu_dispatch', cpu_dispatch).difference(cpu_dispatch)
A:numpy.distutils.ccompiler_opt.self.parse_dispatch_names->self.feature_sorted(self.feature_names(cpu_dispatch))
A:numpy.distutils.ccompiler_opt.GROUP_NAME->group_name.upper()
A:numpy.distutils.ccompiler_opt.(has_baseline, features, extra_flags)->self._parse_target_tokens(tokens)
A:numpy.distutils.ccompiler_opt.start_pos->line.find(start_with)
A:numpy.distutils.ccompiler_opt.end_pos->line.find(end_with)
A:numpy.distutils.ccompiler_opt._parse_regex_arg->re.compile('\\s|,|([+-])')
A:numpy.distutils.ccompiler_opt.final_features->final_features.difference(features_to).difference(features_to)
A:numpy.distutils.ccompiler_opt.TOK->tok.upper()
A:numpy.distutils.ccompiler_opt.features_to->self.feature_supported.keys()
A:numpy.distutils.ccompiler_opt._parse_regex_target->re.compile('\\s|[*,/]|([()])')
A:numpy.distutils.ccompiler_opt.skipped->set()
A:numpy.distutils.ccompiler_opt.policies->set()
A:numpy.distutils.ccompiler_opt.(has_baseline, final_targets, extra_flags)->func(has_baseline, final_targets, extra_flags)
A:numpy.distutils.ccompiler_opt.multi_target->set()
A:numpy.distutils.ccompiler_opt.targets->tuple(targets)
A:numpy.distutils.ccompiler_opt.final_targets->self.feature_sorted(final_targets, reverse=True)
A:numpy.distutils.ccompiler_opt.(ghas_baseline, gtargets, gextra_flags)->self.parse_target_groups.get(token, (False, None, []))
A:numpy.distutils.ccompiler_opt.is_base->all([f in self.parse_baseline_names for f in tar])
A:numpy.distutils.ccompiler_opt.self.sources_status->getattr(self, 'sources_status', {})
A:numpy.distutils.ccompiler_opt.self.hit_cache->hasattr(self, 'hit_cache')
A:numpy.distutils.ccompiler_opt.baseline_flags->self.cpu_baseline_flags()
A:numpy.distutils.ccompiler_opt.include_dirs->kwargs.setdefault('include_dirs', [])
A:numpy.distutils.ccompiler_opt.output_dir->os.path.join(src_dir, output_dir)
A:numpy.distutils.ccompiler_opt.(has_baseline, targets, extra_flags)->self.parse_targets(src)
A:numpy.distutils.ccompiler_opt.nochange->self._generate_config(output_dir, src, targets, has_baseline)
A:numpy.distutils.ccompiler_opt.tar_src->self._wrap_target(output_dir, src, tar, nochange=nochange)
A:numpy.distutils.ccompiler_opt.dispatch_names->self.cpu_dispatch_names()
A:numpy.distutils.ccompiler_opt.baseline_len->len(baseline_names)
A:numpy.distutils.ccompiler_opt.dispatch_len->len(dispatch_names)
A:numpy.distutils.ccompiler_opt.header_dir->os.path.dirname(header_path)
A:numpy.distutils.ccompiler_opt.baseline_calls->' \\\n'.join(['\t%sWITH_CPU_EXPAND_(MACRO_TO_CALL(%s, __VA_ARGS__))' % (self.conf_c_prefix, f) for f in baseline_names])
A:numpy.distutils.ccompiler_opt.dispatch_calls->' \\\n'.join(dispatch_calls)
A:numpy.distutils.ccompiler_opt.detect->' '.join(self.feature_detect(tar))
A:numpy.distutils.ccompiler_opt.pad->max(max(secs_len), max(cols_len))
A:numpy.distutils.ccompiler_opt.ext_name->'.'.join(target)
A:numpy.distutils.ccompiler_opt.target_name->'__'.join([t for t in tar])
A:numpy.distutils.ccompiler_opt.wrap_path->'{0}.{2}{1}'.format(*os.path.splitext(wrap_path), ext_name.lower())
A:numpy.distutils.ccompiler_opt.features->self.feature_sorted(self.feature_implies_c(target))
A:numpy.distutils.ccompiler_opt.target_defs->'\n'.join(target_defs)
A:numpy.distutils.ccompiler_opt.config_path->os.path.join(output_dir, config_path)
A:numpy.distutils.ccompiler_opt.cache_hash->self.cache_hash(targets, has_baseline)
A:numpy.distutils.ccompiler_opt.last_hash->os.path.dirname(self._cache_path).get('flags', []).readline().split('cache_hash:')
A:numpy.distutils.ccompiler_opt.req_detect->'&&'.join(['CHK(%s)' % f for f in req_detect])
A:numpy.distutils.ccompiler_opt.opt->CCompilerOpt(compiler, **kwargs)
numpy.distutils.ccompiler_opt.CCompilerOpt(self,ccompiler,cpu_baseline='min',cpu_dispatch='max',cache_path=None)
numpy.distutils.ccompiler_opt.CCompilerOpt.__init__(self,ccompiler,cpu_baseline='min',cpu_dispatch='max',cache_path=None)
numpy.distutils.ccompiler_opt.CCompilerOpt._generate_config(self,output_dir,dispatch_src,targets,has_baseline=False)
numpy.distutils.ccompiler_opt.CCompilerOpt._wrap_target(self,output_dir,dispatch_src,target,nochange=False)
numpy.distutils.ccompiler_opt.CCompilerOpt.cpu_baseline_flags(self)
numpy.distutils.ccompiler_opt.CCompilerOpt.cpu_baseline_names(self)
numpy.distutils.ccompiler_opt.CCompilerOpt.cpu_dispatch_names(self)
numpy.distutils.ccompiler_opt.CCompilerOpt.generate_dispatch_header(self,header_path)
numpy.distutils.ccompiler_opt.CCompilerOpt.is_cached(self)
numpy.distutils.ccompiler_opt.CCompilerOpt.report(self,full=False)
numpy.distutils.ccompiler_opt.CCompilerOpt.try_dispatch(self,sources,src_dir=None,ccompiler=None,**kwargs)
numpy.distutils.ccompiler_opt._CCompiler(self)
numpy.distutils.ccompiler_opt._CCompiler.__init__(self)
numpy.distutils.ccompiler_opt._CCompiler._cc_normalize_unix(self,flags)
numpy.distutils.ccompiler_opt._CCompiler._cc_normalize_win(self,flags)
numpy.distutils.ccompiler_opt._CCompiler.cc_normalize_flags(self,flags)
numpy.distutils.ccompiler_opt._CCompiler.cc_test_flags(self,flags)
numpy.distutils.ccompiler_opt._Cache(self,cache_path=None,*factors)
numpy.distutils.ccompiler_opt._Cache.__del__(self)
numpy.distutils.ccompiler_opt._Cache.__init__(self,cache_path=None,*factors)
numpy.distutils.ccompiler_opt._Cache.cache_flush(self)
numpy.distutils.ccompiler_opt._Cache.cache_hash(self,*factors)
numpy.distutils.ccompiler_opt._Cache.me(cb)
numpy.distutils.ccompiler_opt._Config(self)
numpy.distutils.ccompiler_opt._Config.__init__(self)
numpy.distutils.ccompiler_opt._Config.conf_features_partial(self)
numpy.distutils.ccompiler_opt._Distutils(self,ccompiler)
numpy.distutils.ccompiler_opt._Distutils.__init__(self,ccompiler)
numpy.distutils.ccompiler_opt._Distutils._dist_str(*args)
numpy.distutils.ccompiler_opt._Distutils._dist_test_spawn(cmd,display=None)
numpy.distutils.ccompiler_opt._Distutils._dist_test_spawn_paths(self,cmd,display=None)
numpy.distutils.ccompiler_opt._Distutils.dist_compile(self,sources,flags,ccompiler=None,**kwargs)
numpy.distutils.ccompiler_opt._Distutils.dist_error(*args)
numpy.distutils.ccompiler_opt._Distutils.dist_fatal(*args)
numpy.distutils.ccompiler_opt._Distutils.dist_info(self)
numpy.distutils.ccompiler_opt._Distutils.dist_load_module(name,path)
numpy.distutils.ccompiler_opt._Distutils.dist_log(*args,stderr=False)
numpy.distutils.ccompiler_opt._Distutils.dist_test(self,source,flags,macros=[])
numpy.distutils.ccompiler_opt._Feature(self)
numpy.distutils.ccompiler_opt._Feature.__init__(self)
numpy.distutils.ccompiler_opt._Feature.feature_ahead(self,names)
numpy.distutils.ccompiler_opt._Feature.feature_c_preprocessor(self,feature_name,tabs=0)
numpy.distutils.ccompiler_opt._Feature.feature_can_autovec(self,name)
numpy.distutils.ccompiler_opt._Feature.feature_detect(self,names)
numpy.distutils.ccompiler_opt._Feature.feature_extra_checks(self,name)
numpy.distutils.ccompiler_opt._Feature.feature_flags(self,names)
numpy.distutils.ccompiler_opt._Feature.feature_get_til(self,names,keyisfalse)
numpy.distutils.ccompiler_opt._Feature.feature_implies(self,names,keep_origins=False)
numpy.distutils.ccompiler_opt._Feature.feature_implies_c(self,names)
numpy.distutils.ccompiler_opt._Feature.feature_is_exist(self,name)
numpy.distutils.ccompiler_opt._Feature.feature_is_supported(self,name,force_flags=None,macros=[])
numpy.distutils.ccompiler_opt._Feature.feature_names(self,names=None,force_flags=None,macros=[])
numpy.distutils.ccompiler_opt._Feature.feature_sorted(self,names,reverse=False)
numpy.distutils.ccompiler_opt._Feature.feature_test(self,name,force_flags=None,macros=[])
numpy.distutils.ccompiler_opt._Feature.feature_untied(self,names)
numpy.distutils.ccompiler_opt._Parse(self,cpu_baseline,cpu_dispatch)
numpy.distutils.ccompiler_opt._Parse.__init__(self,cpu_baseline,cpu_dispatch)
numpy.distutils.ccompiler_opt._Parse._parse_arg_features(self,arg_name,req_features)
numpy.distutils.ccompiler_opt._Parse._parse_multi_target(self,targets)
numpy.distutils.ccompiler_opt._Parse._parse_policy_autovec(self,has_baseline,final_targets,extra_flags)
numpy.distutils.ccompiler_opt._Parse._parse_policy_keepsort(self,has_baseline,final_targets,extra_flags)
numpy.distutils.ccompiler_opt._Parse._parse_policy_maxopt(self,has_baseline,final_targets,extra_flags)
numpy.distutils.ccompiler_opt._Parse._parse_policy_not_keepbase(self,has_baseline,final_targets,extra_flags)
numpy.distutils.ccompiler_opt._Parse._parse_policy_not_keepsort(self,has_baseline,final_targets,extra_flags)
numpy.distutils.ccompiler_opt._Parse._parse_policy_werror(self,has_baseline,final_targets,extra_flags)
numpy.distutils.ccompiler_opt._Parse._parse_target_tokens(self,tokens)
numpy.distutils.ccompiler_opt._Parse._parse_token_group(self,token,has_baseline,final_targets,extra_flags)
numpy.distutils.ccompiler_opt._Parse._parse_token_policy(self,token)
numpy.distutils.ccompiler_opt._Parse.parse_targets(self,source)
numpy.distutils.ccompiler_opt.new_ccompiler_opt(compiler,dispatch_hpath,**kwargs)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/tests/test_exec_command.py----------------------------------------
A:numpy.distutils.tests.test_exec_command.self.pyexe->get_pythonexe()
A:numpy.distutils.tests.test_exec_command.(s, o)->numpy.distutils.exec_command.exec_command('"%s" -c "f = open(\'%s\', \'r\'); print(f.read()); f.close()"' % (self.pyexe, fn), execute_in=tmpdir, **kws)
A:numpy.distutils.tests.test_exec_command.tmpfile->os.path.join(tmpdir, fn)
numpy.distutils.tests.test_exec_command.TestExecCommand
numpy.distutils.tests.test_exec_command.TestExecCommand.check_basic(self,*kws)
numpy.distutils.tests.test_exec_command.TestExecCommand.check_execute_in(self,**kws)
numpy.distutils.tests.test_exec_command.TestExecCommand.check_nt(self,**kws)
numpy.distutils.tests.test_exec_command.TestExecCommand.check_posix(self,**kws)
numpy.distutils.tests.test_exec_command.TestExecCommand.setup(self)
numpy.distutils.tests.test_exec_command.TestExecCommand.test_basic(self)
numpy.distutils.tests.test_exec_command.emulate_nonposix(self,osname='non-posix')
numpy.distutils.tests.test_exec_command.emulate_nonposix.__enter__(self)
numpy.distutils.tests.test_exec_command.emulate_nonposix.__exit__(self,exc_type,exc_value,traceback)
numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__(self,osname='non-posix')
numpy.distutils.tests.test_exec_command.redirect_stderr(self,stderr=None)
numpy.distutils.tests.test_exec_command.redirect_stderr.__enter__(self)
numpy.distutils.tests.test_exec_command.redirect_stderr.__exit__(self,exc_type,exc_value,traceback)
numpy.distutils.tests.test_exec_command.redirect_stderr.__init__(self,stderr=None)
numpy.distutils.tests.test_exec_command.redirect_stdout(self,stdout=None)
numpy.distutils.tests.test_exec_command.redirect_stdout.__enter__(self)
numpy.distutils.tests.test_exec_command.redirect_stdout.__exit__(self,exc_type,exc_value,traceback)
numpy.distutils.tests.test_exec_command.redirect_stdout.__init__(self,stdout=None)
numpy.distutils.tests.test_exec_command.test_exec_command_stderr()
numpy.distutils.tests.test_exec_command.test_exec_command_stdout()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/tests/test_fcompiler.py----------------------------------------
A:numpy.distutils.tests.test_fcompiler.fc->numpy.distutils.fcompiler.new_fcompiler(compiler='none')
A:numpy.distutils.tests.test_fcompiler.flag_vars->numpy.distutils.fcompiler.new_fcompiler(compiler='none').flag_vars.clone(lambda *args, **kwargs: None)
A:numpy.distutils.tests.test_fcompiler.new_flag->'-dummy-{}-flag'.format(opt)
A:numpy.distutils.tests.test_fcompiler.prev_flags->getattr(flag_vars, opt)
A:numpy.distutils.tests.test_fcompiler.new_flags->getattr(flag_vars, opt)
numpy.distutils.tests.test_fcompiler.test_fcompiler_flags(monkeypatch)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/tests/test_npy_pkg_config.py----------------------------------------
A:numpy.distutils.tests.test_npy_pkg_config.out->read_config(pkg)
A:numpy.distutils.tests.test_npy_pkg_config.d->parse_flags('-L /usr/lib -lfoo -L/usr/lib -lbar')
numpy.distutils.tests.test_TestLibraryInfo
numpy.distutils.tests.test_TestLibraryInfo.test_simple(self)
numpy.distutils.tests.test_TestLibraryInfo.test_simple_variable(self)
numpy.distutils.tests.test_TestParseFlags
numpy.distutils.tests.test_TestParseFlags.test_simple_cflags(self)
numpy.distutils.tests.test_TestParseFlags.test_simple_lflags(self)
numpy.distutils.tests.test_npy_pkg_config.TestLibraryInfo
numpy.distutils.tests.test_npy_pkg_config.TestLibraryInfo.test_simple(self)
numpy.distutils.tests.test_npy_pkg_config.TestLibraryInfo.test_simple_variable(self)
numpy.distutils.tests.test_npy_pkg_config.TestParseFlags
numpy.distutils.tests.test_npy_pkg_config.TestParseFlags.test_simple_cflags(self)
numpy.distutils.tests.test_npy_pkg_config.TestParseFlags.test_simple_lflags(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/tests/test_misc_util.py----------------------------------------
A:numpy.distutils.tests.test_misc_util.local_path->minrelpath(join(dirname(__file__), '..'))
A:numpy.distutils.tests.test_misc_util.ls->gpaths('command/*.py', local_path)
A:numpy.distutils.tests.test_misc_util.f->gpaths('system_info.py', local_path)
A:numpy.distutils.tests.test_misc_util.ext->get_shared_lib_extension(is_python_ext=False)
A:numpy.distutils.tests.test_misc_util.info->get_info('npymath')
numpy.distutils.tests.test_misc_util.TestAppendpath
numpy.distutils.tests.test_misc_util.TestAppendpath.test_1(self)
numpy.distutils.tests.test_misc_util.TestAppendpath.test_2(self)
numpy.distutils.tests.test_misc_util.TestAppendpath.test_3(self)
numpy.distutils.tests.test_misc_util.TestGpaths
numpy.distutils.tests.test_misc_util.TestGpaths.test_gpaths(self)
numpy.distutils.tests.test_misc_util.TestMinrelpath
numpy.distutils.tests.test_misc_util.TestMinrelpath.test_1(self)
numpy.distutils.tests.test_misc_util.TestSharedExtension
numpy.distutils.tests.test_misc_util.TestSharedExtension.test_get_shared_lib_extension(self)
numpy.distutils.tests.test_misc_util.test_installed_npymath_ini()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/tests/test_fcompiler_nagfor.py----------------------------------------
A:numpy.distutils.tests.test_fcompiler_nagfor.fc->numpy.distutils.fcompiler.new_fcompiler(compiler=comp)
A:numpy.distutils.tests.test_fcompiler_nagfor.v->numpy.distutils.fcompiler.new_fcompiler(compiler=comp).version_match(vs)
numpy.distutils.tests.test_fcompiler_nagfor.TestNagFCompilerVersions
numpy.distutils.tests.test_fcompiler_nagfor.TestNagFCompilerVersions.test_version_match(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/tests/test_from_template.py----------------------------------------
A:numpy.distutils.tests.test_from_template.pyf->process_str(pyf_src)
A:numpy.distutils.tests.test_from_template.normalized_pyf->normalize_whitespace(pyf)
A:numpy.distutils.tests.test_from_template.normalized_expected_pyf->normalize_whitespace(expected_pyf)
numpy.distutils.tests.test_from_template.normalize_whitespace(s)
numpy.distutils.tests.test_from_template.test_from_template()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/tests/test_mingw32ccompiler.py----------------------------------------
A:numpy.distutils.tests.test_mingw32ccompiler.out->subprocess.check_output(['nm.exe', '--help'])
A:numpy.distutils.tests.test_mingw32ccompiler.(has_import_lib, fullpath)->numpy.distutils.mingw32ccompiler._check_for_import_lib()
numpy.distutils.tests.test_mingw32ccompiler.test_build_import()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/tests/test_ccompiler_opt_conf.py----------------------------------------
A:numpy.distutils.tests.test_ccompiler_opt_conf.arch_compilers->dict(x86=('gcc', 'clang', 'icc', 'iccw', 'msvc'), x64=('gcc', 'clang', 'icc', 'iccw', 'msvc'), ppc64=('gcc', 'clang'), ppc64le=('gcc', 'clang'), armhf=('gcc', 'clang'), aarch64=('gcc', 'clang'), narch=('gcc',))
A:numpy.distutils.tests.test_ccompiler_opt_conf.conf_partial->FakeCCompilerOpt.conf_features_partial(self)
A:numpy.distutils.tests.test_ccompiler_opt_conf.error_msg->"during validate '{}' within feature '{}', march '{}' and compiler '{}'\n>> ".format(log, feature_name, self.cc_march, self.cc_name)
A:numpy.distutils.tests.test_ccompiler_opt_conf.error_tp->' or '.join(error_tp)
A:numpy.distutils.tests.test_ccompiler_opt_conf.val->val.split().split()
A:numpy.distutils.tests.test_ccompiler_opt_conf.implies->implies.split().split()
A:numpy.distutils.tests.test_ccompiler_opt_conf.impl_dict->search_in.get(f)
A:numpy.distutils.tests.test_ccompiler_opt_conf.group->group.split().split()
A:numpy.distutils.tests.test_ccompiler_opt_conf.extra_checks->extra_checks.split().split()
numpy.distutils.tests.test_ccompiler_opt_conf.FakeCCompilerOpt(self,*args,**kwargs)
numpy.distutils.tests.test_ccompiler_opt_conf.FakeCCompilerOpt.__init__(self,*args,**kwargs)
numpy.distutils.tests.test_ccompiler_opt_conf.FakeCCompilerOpt.dist_compile(self,sources,flags,**kwargs)
numpy.distutils.tests.test_ccompiler_opt_conf.FakeCCompilerOpt.dist_info(self)
numpy.distutils.tests.test_ccompiler_opt_conf.FakeCCompilerOpt.dist_log(*args,stderr=False)
numpy.distutils.tests.test_ccompiler_opt_conf.TestConfFeatures(self,methodName='runTest')
numpy.distutils.tests.test_ccompiler_opt_conf.TestConfFeatures.__init__(self,methodName='runTest')
numpy.distutils.tests.test_ccompiler_opt_conf.TestConfFeatures.setup(self)
numpy.distutils.tests.test_ccompiler_opt_conf.TestConfFeatures.test_features(self)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures(FakeCCompilerOpt)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures.conf_features_partial(self)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures.test_duplicates(self,error_msg,option,val)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures.test_extra_checks(self,error_msg,search_in,feature_name,feature_dict)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures.test_feature(self,log,search_in,feature_name,feature_dict)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures.test_group(self,error_msg,search_in,feature_name,feature_dict)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures.test_implies(self,error_msg,search_in,feature_name,feature_dict)
numpy.distutils.tests.test_ccompiler_opt_conf._TestConfFeatures.test_option_types(self,error_msg,option,val)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/tests/test_fcompiler_intel.py----------------------------------------
A:numpy.distutils.tests.test_fcompiler_intel.fc->numpy.distutils.fcompiler.new_fcompiler(compiler='intelem')
A:numpy.distutils.tests.test_fcompiler_intel.v->numpy.distutils.fcompiler.new_fcompiler(compiler='intelem').version_match(vs)
numpy.distutils.tests.test_fcompiler_intel.TestIntelEM64TFCompilerVersions
numpy.distutils.tests.test_fcompiler_intel.TestIntelEM64TFCompilerVersions.test_64bit_version(self)
numpy.distutils.tests.test_fcompiler_intel.TestIntelFCompilerVersions
numpy.distutils.tests.test_fcompiler_intel.TestIntelFCompilerVersions.test_32bit_version(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/tests/test_ccompiler_opt.py----------------------------------------
A:numpy.distutils.tests.test_ccompiler_opt.tmpdir->tempfile.mkdtemp(*args, **kwargs)
A:numpy.distutils.tests.test_ccompiler_opt.arch_compilers->dict(x86=('gcc', 'clang', 'icc', 'iccw', 'msvc'), x64=('gcc', 'clang', 'icc', 'iccw', 'msvc'), ppc64=('gcc', 'clang'), ppc64le=('gcc', 'clang'), armhf=('gcc', 'clang'), aarch64=('gcc', 'clang'), noarch=('gcc',))
A:numpy.distutils.tests.test_ccompiler_opt.self._opt->self.nopt()
A:numpy.distutils.tests.test_ccompiler_opt.opt->self.nopt(cpu_baseline=baseline, cpu_dispatch=dispatch)
A:numpy.distutils.tests.test_ccompiler_opt.file->os.path.join(tmpdir, 'test_targets.c')
A:numpy.distutils.tests.test_ccompiler_opt.fake_objects->self.nopt(cpu_baseline=baseline, cpu_dispatch=dispatch).try_dispatch([file])
A:numpy.distutils.tests.test_ccompiler_opt.glen->len(gtar)
A:numpy.distutils.tests.test_ccompiler_opt.gtar->('(' + ' '.join(gtar) + ')').upper()
A:numpy.distutils.tests.test_ccompiler_opt.map2origin->dict(x64='x86', ppc64le='ppc64', aarch64='armhf', clang='gcc')
A:numpy.distutils.tests.test_ccompiler_opt.march->self.march()
A:numpy.distutils.tests.test_ccompiler_opt.cc_name->self.cc_name()
A:numpy.distutils.tests.test_ccompiler_opt.map_march->dict(x64='x86', ppc64le='ppc64', aarch64='armhf', clang='gcc').get(march, march)
A:numpy.distutils.tests.test_ccompiler_opt.map_cc->dict(x64='x86', ppc64le='ppc64', aarch64='armhf', clang='gcc').get(cc_name, cc_name)
A:numpy.distutils.tests.test_ccompiler_opt.regex->kwargs.pop(key, None)
A:numpy.distutils.tests.test_ccompiler_opt.match->self.arg_regex(**kwargs)
A:numpy.distutils.tests.test_ccompiler_opt.features->' '.join(opt.cpu_baseline_names())
A:numpy.distutils.tests.test_ccompiler_opt.flags->' '.join(opt.cpu_baseline_flags())
A:numpy.distutils.tests.test_ccompiler_opt.(targets, _)->self.get_targets(targets=targets, groups=groups, **kwargs)
A:numpy.distutils.tests.test_ccompiler_opt.targets->' '.join(targets)
A:numpy.distutils.tests.test_ccompiler_opt.match_dict->self.arg_regex(**kwargs)
A:numpy.distutils.tests.test_ccompiler_opt.(_, tar_flags)->self.get_targets(targets=targets, groups=groups)
numpy.distutils.tests.test_ccompiler_opt.FakeCCompilerOpt(self,trap_files='',trap_flags='',*args,**kwargs)
numpy.distutils.tests.test_ccompiler_opt.FakeCCompilerOpt.__init__(self,trap_files='',trap_flags='',*args,**kwargs)
numpy.distutils.tests.test_ccompiler_opt.FakeCCompilerOpt.__repr__(self)
numpy.distutils.tests.test_ccompiler_opt.FakeCCompilerOpt.dist_compile(self,sources,flags,**kwargs)
numpy.distutils.tests.test_ccompiler_opt.FakeCCompilerOpt.dist_info(self)
numpy.distutils.tests.test_ccompiler_opt.FakeCCompilerOpt.dist_log(*args,stderr=False)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.arg_regex(self,**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.cc_name(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.expect(self,dispatch,baseline='',**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.expect_baseline(self,baseline,dispatch='',**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.expect_flags(self,baseline,dispatch='',**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.expect_target_flags(self,targets,groups={},**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.expect_targets(self,targets,groups={},**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.get_targets(self,targets,groups,**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.march(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.nopt(self,*args,**kwargs)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.opt(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.setup(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_args_empty(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_args_options(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_args_validation(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_flags(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_implies(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_interface(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_skip(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_targets(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_targets_exceptions(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_targets_groups(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_targets_multi(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_targets_policies(self)
numpy.distutils.tests.test_ccompiler_opt._Test_CCompilerOpt.test_targets_syntax(self)
numpy.distutils.tests.test_ccompiler_opt.new_test(arch,cc)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/tests/test_shell_utils.py----------------------------------------
A:numpy.distutils.tests.test_shell_utils.joined->Parser.join(argv)
A:numpy.distutils.tests.test_shell_utils.json_out->runner(joined).decode()
numpy.distutils.tests.test_shell_utils.Parser(request)
numpy.distutils.tests.test_shell_utils.runner(Parser)
numpy.distutils.tests.test_shell_utils.test_join_matches_subprocess(Parser,runner,argv)
numpy.distutils.tests.test_shell_utils.test_roundtrip(Parser,argv)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/tests/test_system_info.py----------------------------------------
A:numpy.distutils.tests.test_system_info.cl->{'temp1': Temp1Info, 'temp2': Temp2Info, 'duplicate_options': DuplicateOptionInfo}.get(name.lower(), _system_info)
A:numpy.distutils.tests.test_system_info.compiler->customized_ccompiler()
A:numpy.distutils.tests.test_system_info.p->Popen(cmd, stdout=PIPE, stderr=PIPE)
A:numpy.distutils.tests.test_system_info.HAVE_COMPILER->have_compiler()
A:numpy.distutils.tests.test_system_info.self.cp->ConfigParser(defaults)
A:numpy.distutils.tests.test_system_info.self._dir1->mkdtemp()
A:numpy.distutils.tests.test_system_info.self._src1->os.path.join(self._dir1, 'foo.c')
A:numpy.distutils.tests.test_system_info.self._lib1->os.path.join(self._dir1, 'libfoo.so')
A:numpy.distutils.tests.test_system_info.self._dir2->mkdtemp()
A:numpy.distutils.tests.test_system_info.self._src2->os.path.join(self._dir2, 'bar.c')
A:numpy.distutils.tests.test_system_info.self._lib2->os.path.join(self._dir2, 'libbar.so')
A:numpy.distutils.tests.test_system_info.site_cfg->simple_site.format(**{'dir1': self._dir1, 'lib1': self._lib1, 'dir2': self._dir2, 'lib2': self._lib2, 'pathsep': os.pathsep, 'lib2_escaped': _shell_utils.NativeParser.join([self._lib2])})
A:numpy.distutils.tests.test_system_info.(fd, self._sitecfg)->mkstemp()
A:numpy.distutils.tests.test_system_info.self.c_default->site_and_parse(get_class('default'), self._sitecfg)
A:numpy.distutils.tests.test_system_info.self.c_temp1->site_and_parse(get_class('temp1'), self._sitecfg)
A:numpy.distutils.tests.test_system_info.self.c_temp2->site_and_parse(get_class('temp2'), self._sitecfg)
A:numpy.distutils.tests.test_system_info.self.c_dup_options->site_and_parse(get_class('duplicate_options'), self._sitecfg)
A:numpy.distutils.tests.test_system_info.extra->tsi.calc_extra_info()
A:numpy.distutils.tests.test_system_info.c->customized_ccompiler()
A:numpy.distutils.tests.test_system_info.previousDir->os.getcwd()
A:numpy.distutils.tests.test_system_info.cfg->os.path.join(self._dir1, 'site.cfg')
A:numpy.distutils.tests.test_system_info.info->mkl_info()
A:numpy.distutils.tests.test_system_info.lib_dirs->mkl_info().cp['ALL']['library_dirs'].split(os.pathsep)
A:numpy.distutils.tests.test_system_info.mkl->fid.read().replace('[ALL]', '[mkl]', 1)
A:numpy.distutils.tests.test_system_info.dflt->fid.read().replace('[mkl]', '[DEFAULT]', 1)
A:numpy.distutils.tests.test_system_info.base_order->list('abcdef')
A:numpy.distutils.tests.test_system_info.(order, unknown)->_parse_env_order(base_order, env)
numpy.distutils.tests.test_system_info.DuplicateOptionInfo(_system_info)
numpy.distutils.tests.test_system_info.Temp1Info(_system_info)
numpy.distutils.tests.test_system_info.Temp2Info(_system_info)
numpy.distutils.tests.test_system_info.TestSystemInfoReading
numpy.distutils.tests.test_system_info.TestSystemInfoReading.setup(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.teardown(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_all(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_compile1(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_compile2(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_duplicate_options(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_overrides(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_temp1(self)
numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_temp2(self)
numpy.distutils.tests.test_system_info._system_info(self,default_lib_dirs=default_lib_dirs,default_include_dirs=default_include_dirs,verbosity=1)
numpy.distutils.tests.test_system_info._system_info.__init__(self,default_lib_dirs=default_lib_dirs,default_include_dirs=default_include_dirs,verbosity=1)
numpy.distutils.tests.test_system_info._system_info._check_libs(self,lib_dirs,libs,opt_libs,exts)
numpy.distutils.tests.test_system_info.get_class(name,notfound_action=1)
numpy.distutils.tests.test_system_info.have_compiler()
numpy.distutils.tests.test_system_info.test_distutils_parse_env_order(monkeypatch)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/tests/test_fcompiler_gnu.py----------------------------------------
A:numpy.distutils.tests.test_fcompiler_gnu.fc->numpy.distutils.fcompiler.new_fcompiler(compiler='gnu95')
A:numpy.distutils.tests.test_fcompiler_gnu.v->numpy.distutils.fcompiler.new_fcompiler(compiler='gnu95').version_match(vs)
numpy.distutils.tests.test_fcompiler_gnu.TestG77Versions
numpy.distutils.tests.test_fcompiler_gnu.TestG77Versions.test_g77_version(self)
numpy.distutils.tests.test_fcompiler_gnu.TestG77Versions.test_not_g77(self)
numpy.distutils.tests.test_fcompiler_gnu.TestGFortranVersions
numpy.distutils.tests.test_fcompiler_gnu.TestGFortranVersions.test_gfortran_version(self)
numpy.distutils.tests.test_fcompiler_gnu.TestGFortranVersions.test_not_gfortran(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/tests/test_build_ext.py----------------------------------------
A:numpy.distutils.tests.test_build_ext.srctree->os.path.join(os.path.dirname(__file__), '..', '..', '..')
A:numpy.distutils.tests.test_build_ext.so->line.strip()
numpy.distutils.tests.test_build_ext.test_multi_fortran_libs_link(tmp_path)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/intel.py----------------------------------------
A:numpy.distutils.fcompiler.intel.f->dummy_fortran_file()
A:numpy.distutils.fcompiler.intel.version_match->simple_version_match(start='Intel\\(R\\).*?64,')
A:numpy.distutils.fcompiler.intel.v->self.get_version()
A:numpy.distutils.fcompiler.intel.opt->numpy.distutils.fcompiler.FCompiler.get_flags_linker_so(self)
A:numpy.distutils.fcompiler.intel.idx->numpy.distutils.fcompiler.FCompiler.get_flags_linker_so(self).index('-shared')
numpy.distutils.fcompiler.intel.BaseIntelFCompiler(FCompiler)
numpy.distutils.fcompiler.intel.BaseIntelFCompiler.runtime_library_dir_option(self,dir)
numpy.distutils.fcompiler.intel.BaseIntelFCompiler.update_executables(self)
numpy.distutils.fcompiler.intel.IntelEM64TFCompiler(IntelFCompiler)
numpy.distutils.fcompiler.intel.IntelEM64VisualFCompiler(IntelVisualFCompiler)
numpy.distutils.fcompiler.intel.IntelEM64VisualFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.intel.IntelFCompiler(BaseIntelFCompiler)
numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags(self)
numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_free(self)
numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.intel.IntelItaniumFCompiler(IntelFCompiler)
numpy.distutils.fcompiler.intel.IntelItaniumVisualFCompiler(IntelVisualFCompiler)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler(BaseIntelFCompiler)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags(self)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_free(self)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.runtime_library_dir_option(self,dir)
numpy.distutils.fcompiler.intel.IntelVisualFCompiler.update_executables(self)
numpy.distutils.fcompiler.intel.intel_version_match(type)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/absoft.py----------------------------------------
A:numpy.distutils.fcompiler.absoft.f->cyg2win32(dummy_fortran_file())
A:numpy.distutils.fcompiler.absoft.opt->numpy.distutils.fcompiler.FCompiler.get_flags_fix(self)
A:numpy.distutils.fcompiler.absoft.d->os.environ.get('ABSOFT')
A:numpy.distutils.fcompiler.absoft.v->self.get_version()
numpy.distutils.fcompiler.absoft.AbsoftFCompiler(FCompiler)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_f77(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_f90(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_fix(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_libraries(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.library_dir_option(self,dir)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.library_option(self,lib)
numpy.distutils.fcompiler.absoft.AbsoftFCompiler.update_executables(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/nag.py----------------------------------------
A:numpy.distutils.fcompiler.nag.m->re.search(self.version_pattern, version_string)
A:numpy.distutils.fcompiler.nag.version->self.get_version()
A:numpy.distutils.fcompiler.nag.compiler->customized_fcompiler(compiler='nagfor')
numpy.distutils.fcompiler.nag.BaseNAGFCompiler(FCompiler)
numpy.distutils.fcompiler.nag.BaseNAGFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.nag.BaseNAGFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.nag.BaseNAGFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.nag.BaseNAGFCompiler.version_match(self,version_string)
numpy.distutils.fcompiler.nag.NAGFCompiler(BaseNAGFCompiler)
numpy.distutils.fcompiler.nag.NAGFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.nag.NAGFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.nag.NAGFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.nag.NAGFORCompiler(BaseNAGFCompiler)
numpy.distutils.fcompiler.nag.NAGFORCompiler.get_flags_debug(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/pathf95.py----------------------------------------
numpy.distutils.fcompiler.pathf95.PathScaleFCompiler(FCompiler)
numpy.distutils.fcompiler.pathf95.PathScaleFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.pathf95.PathScaleFCompiler.get_flags_opt(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/none.py----------------------------------------
numpy.distutils.fcompiler.none.NoneFCompiler(FCompiler)
numpy.distutils.fcompiler.none.NoneFCompiler.find_executables(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/g95.py----------------------------------------
numpy.distutils.fcompiler.g95.G95FCompiler(FCompiler)
numpy.distutils.fcompiler.g95.G95FCompiler.get_flags(self)
numpy.distutils.fcompiler.g95.G95FCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.g95.G95FCompiler.get_flags_opt(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/hpux.py----------------------------------------
numpy.distutils.fcompiler.hpux.HPUXFCompiler(FCompiler)
numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_flags(self)
numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_libraries(self)
numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_version(self,force=0,ok_status=[256,0,1])


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/lahey.py----------------------------------------
A:numpy.distutils.fcompiler.lahey.d->os.environ.get('LAHEY')
numpy.distutils.fcompiler.lahey.LaheyFCompiler(FCompiler)
numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_libraries(self)
numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_library_dirs(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/vast.py----------------------------------------
A:numpy.distutils.fcompiler.vast.(d, b)->os.path.split(f90)
A:numpy.distutils.fcompiler.vast.vf90->os.path.join(d, 'v' + b)
A:numpy.distutils.fcompiler.vast.vast_version->self.get_version()
A:numpy.distutils.fcompiler.vast.gnu->GnuFCompiler()
A:numpy.distutils.fcompiler.vast.self.version->GnuFCompiler().get_version()
A:numpy.distutils.fcompiler.vast.opt->numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.vast.VastFCompiler(GnuFCompiler)
numpy.distutils.fcompiler.vast.VastFCompiler.find_executables(self)
numpy.distutils.fcompiler.vast.VastFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.vast.VastFCompiler.get_version_cmd(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/environment.py----------------------------------------
A:numpy.distutils.fcompiler.environment.v->os.environ.get(envvar, None)
A:numpy.distutils.fcompiler.environment.var->convert(confvar_contents)
A:numpy.distutils.fcompiler.environment.envvar_contents->convert(envvar_contents)
A:numpy.distutils.fcompiler.environment.ec->self.__class__(distutils_section=self._distutils_section, **self._conf_keys)
A:numpy.distutils.fcompiler.environment.self._conf->dist.get_option_dict(self._distutils_section)
numpy.distutils.fcompiler.EnvironmentConfig(self,distutils_section='ALL',**kw)
numpy.distutils.fcompiler.EnvironmentConfig.__getattr__(self,name)
numpy.distutils.fcompiler.EnvironmentConfig._get_var(self,name,conf_desc)
numpy.distutils.fcompiler.EnvironmentConfig.clone(self,hook_handler)
numpy.distutils.fcompiler.EnvironmentConfig.dump_variable(self,name)
numpy.distutils.fcompiler.EnvironmentConfig.dump_variables(self)
numpy.distutils.fcompiler.EnvironmentConfig.get(self,name,default=None)
numpy.distutils.fcompiler.EnvironmentConfig.use_distribution(self,dist)
numpy.distutils.fcompiler.environment.EnvironmentConfig(self,distutils_section='ALL',**kw)
numpy.distutils.fcompiler.environment.EnvironmentConfig.__getattr__(self,name)
numpy.distutils.fcompiler.environment.EnvironmentConfig.__init__(self,distutils_section='ALL',**kw)
numpy.distutils.fcompiler.environment.EnvironmentConfig._get_var(self,name,conf_desc)
numpy.distutils.fcompiler.environment.EnvironmentConfig.clone(self,hook_handler)
numpy.distutils.fcompiler.environment.EnvironmentConfig.dump_variable(self,name)
numpy.distutils.fcompiler.environment.EnvironmentConfig.dump_variables(self)
numpy.distutils.fcompiler.environment.EnvironmentConfig.get(self,name,default=None)
numpy.distutils.fcompiler.environment.EnvironmentConfig.use_distribution(self,dist)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/fujitsu.py----------------------------------------
numpy.distutils.fcompiler.fujitsu.FujitsuFCompiler(FCompiler)
numpy.distutils.fcompiler.fujitsu.FujitsuFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.fujitsu.FujitsuFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.fujitsu.FujitsuFCompiler.get_libraries(self)
numpy.distutils.fcompiler.fujitsu.FujitsuFCompiler.runtime_library_dir_option(self,dir)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/ibm.py----------------------------------------
A:numpy.distutils.fcompiler.ibm.version->self.get_version(ok_status=[0, 40])
A:numpy.distutils.fcompiler.ibm.lslpp->find_executable('lslpp')
A:numpy.distutils.fcompiler.ibm.xlf->find_executable('xlf')
A:numpy.distutils.fcompiler.ibm.o->subprocess.check_output([lslpp, '-Lc', 'xlfcmp'])
A:numpy.distutils.fcompiler.ibm.m->crt1_match(line)
A:numpy.distutils.fcompiler.ibm.l->sorted(os.listdir(xlf_dir))
A:numpy.distutils.fcompiler.ibm.self.versionversion->LooseVersion(l[0])
A:numpy.distutils.fcompiler.ibm.(fo, new_cfg)->make_temp_file(suffix='_xlf.cfg')
numpy.distutils.fcompiler.ibm.IBMFCompiler(FCompiler)
numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags(self)
numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.ibm.IBMFCompiler.get_version(self,*args,**kwds)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/sun.py----------------------------------------
A:numpy.distutils.fcompiler.sun.version_match->simple_version_match(start='f9[05]: (Sun|Forte|WorkShop).*Fortran 95')
numpy.distutils.fcompiler.sun.SunFCompiler(FCompiler)
numpy.distutils.fcompiler.sun.SunFCompiler.get_arch(self)
numpy.distutils.fcompiler.sun.SunFCompiler.get_flags_f77(self)
numpy.distutils.fcompiler.sun.SunFCompiler.get_libraries(self)
numpy.distutils.fcompiler.sun.SunFCompiler.get_opt(self)
numpy.distutils.fcompiler.sun.SunFCompiler.runtime_library_dir_option(self,dir)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/mips.py----------------------------------------
A:numpy.distutils.fcompiler.mips.r->self.get_flags_arch_f77()
numpy.distutils.fcompiler.mips.MIPSFCompiler(FCompiler)
numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags(self)
numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_arch_f77(self)
numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_arch_f90(self)
numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_opt(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/nv.py----------------------------------------
numpy.distutils.fcompiler.nv.NVHPCFCompiler(FCompiler)
numpy.distutils.fcompiler.nv.NVHPCFCompiler.get_flags(self)
numpy.distutils.fcompiler.nv.NVHPCFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.nv.NVHPCFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.nv.NVHPCFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.nv.NVHPCFCompiler.runtime_library_dir_option(self,dir)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/compaq.py----------------------------------------
A:numpy.distutils.fcompiler.compaq.m->MSVCCompiler()
numpy.distutils.fcompiler.compaq.CompaqFCompiler(FCompiler)
numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags(self)
numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.compaq.CompaqFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler(FCompiler)
numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags(self)
numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler.get_flags_opt(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/gnu.py----------------------------------------
A:numpy.distutils.fcompiler.gnu.TARGET_R->re.compile('Target: ([a-zA-Z0-9_\\-]*)')
A:numpy.distutils.fcompiler.gnu.version_string->version_string[version_string.find('\n') + 1:].strip()
A:numpy.distutils.fcompiler.gnu.m->re.compile('Target: ([a-zA-Z0-9_\\-]*)').search(output)
A:numpy.distutils.fcompiler.gnu.v->self.gnu_version_match(version_string)
A:numpy.distutils.fcompiler.gnu.target->self.get_target()
A:numpy.distutils.fcompiler.gnu.os.environ['MACOSX_DEPLOYMENT_TARGET']->str(target)
A:numpy.distutils.fcompiler.gnu.output->filepath_from_subprocess_output(output)
A:numpy.distutils.fcompiler.gnu.libgfortran_dir->os.path.dirname(output)
A:numpy.distutils.fcompiler.gnu.d->os.path.dirname(filename)
A:numpy.distutils.fcompiler.gnu.path->os.path.join(root, 'lib')
A:numpy.distutils.fcompiler.gnu.root->os.path.join(d, *(os.pardir,) * 4)
A:numpy.distutils.fcompiler.gnu.d2->os.path.abspath(os.path.join(root, 'lib'))
A:numpy.distutils.fcompiler.gnu.lib_gfortran_dir->self.get_libgfortran_dir()
A:numpy.distutils.fcompiler.gnu.arch_re->re.compile('-arch\\s+(\\w+)')
A:numpy.distutils.fcompiler.gnu.c_archs->self._c_arch_flags()
A:numpy.distutils.fcompiler.gnu.flags->GnuFCompiler.get_flags_linker_so(self)
A:numpy.distutils.fcompiler.gnu.arch_flags->self._universal_flags(self.linker_so)
A:numpy.distutils.fcompiler.gnu.opt->GnuFCompiler.get_libraries(self)
A:numpy.distutils.fcompiler.gnu.mingwdir->os.path.normpath(path)
A:numpy.distutils.fcompiler.gnu.i->GnuFCompiler.get_libraries(self).index('gcc')
A:numpy.distutils.fcompiler.gnu.h->hashlib.sha1()
A:numpy.distutils.fcompiler.gnu.block->f.read(131072)
A:numpy.distutils.fcompiler.gnu.text->text.decode('ascii').decode('ascii')
A:numpy.distutils.fcompiler.gnu.object_hash->self._hash_files(list(objects) + list(chained_dlls))
A:numpy.distutils.fcompiler.gnu.dll_path->os.path.join(extra_dll_dir, dll_name)
A:numpy.distutils.fcompiler.gnu.def_path->os.path.join(output_dir, def_name)
A:numpy.distutils.fcompiler.gnu.lib_path->os.path.join(output_dir, lib_name)
A:numpy.distutils.fcompiler.gnu.(lib, dll)->self._link_wrapper_lib(plain_objects, output_dir, extra_dll_dir, chained_dlls=chained_dlls, is_archive=False)
A:numpy.distutils.fcompiler.gnu.(fid, filename)->tempfile.mkstemp(suffix='.f')
A:numpy.distutils.fcompiler.gnu.p->Popen(newcmd, stderr=STDOUT, stdout=PIPE, cwd=d)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler(GnuFCompiler)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler._hash_files(self,filenames)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler._link_wrapper_lib(self,objects,output_dir,extra_dll_dir,chained_dlls,is_archive)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler._universal_flags(self,cmd)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.can_ccompiler_link(self,compiler)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_flags(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_libraries(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_target(self)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.version_match(self,version_string)
numpy.distutils.fcompiler.gnu.Gnu95FCompiler.wrap_unlinkable_objects(self,objects,output_dir,extra_dll_dir)
numpy.distutils.fcompiler.gnu.GnuFCompiler(FCompiler)
numpy.distutils.fcompiler.gnu.GnuFCompiler._c_arch_flags(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libgcc_dir(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libgfortran_dir(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libraries(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.gnu.GnuFCompiler.gnu_version_match(self,version_string)
numpy.distutils.fcompiler.gnu.GnuFCompiler.runtime_library_dir_option(self,dir)
numpy.distutils.fcompiler.gnu.GnuFCompiler.version_match(self,version_string)
numpy.distutils.fcompiler.gnu._can_target(cmd,arch)
numpy.distutils.fcompiler.gnu.is_win64()


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/__init__.py----------------------------------------
A:numpy.distutils.fcompiler.__init__.distutils_vars->EnvironmentConfig(distutils_section='config_fc', noopt=(None, None, 'noopt', str2bool, False), noarch=(None, None, 'noarch', str2bool, False), debug=(None, None, 'debug', str2bool, False), verbose=(None, None, 'verbose', str2bool, False))
A:numpy.distutils.fcompiler.__init__.command_vars->EnvironmentConfig(distutils_section='config_fc', compiler_f77=('exe.compiler_f77', 'F77', 'f77exec', None, False), compiler_f90=('exe.compiler_f90', 'F90', 'f90exec', None, False), compiler_fix=('exe.compiler_fix', 'F90', 'f90exec', None, False), version_cmd=('exe.version_cmd', None, None, None, False), linker_so=('exe.linker_so', 'LDSHARED', 'ldshared', None, False), linker_exe=('exe.linker_exe', 'LD', 'ld', None, False), archiver=(None, 'AR', 'ar', None, False), ranlib=(None, 'RANLIB', 'ranlib', None, False))
A:numpy.distutils.fcompiler.__init__.flag_vars->EnvironmentConfig(distutils_section='config_fc', f77=('flags.f77', 'F77FLAGS', 'f77flags', flaglist, True), f90=('flags.f90', 'F90FLAGS', 'f90flags', flaglist, True), free=('flags.free', 'FREEFLAGS', 'freeflags', flaglist, True), fix=('flags.fix', None, None, flaglist, False), opt=('flags.opt', 'FOPT', 'opt', flaglist, True), opt_f77=('flags.opt_f77', None, None, flaglist, False), opt_f90=('flags.opt_f90', None, None, flaglist, False), arch=('flags.arch', 'FARCH', 'arch', flaglist, False), arch_f77=('flags.arch_f77', None, None, flaglist, False), arch_f90=('flags.arch_f90', None, None, flaglist, False), debug=('flags.debug', 'FDEBUG', 'fdebug', flaglist, True), debug_f77=('flags.debug_f77', None, None, flaglist, False), debug_f90=('flags.debug_f90', None, None, flaglist, False), flags=('self.get_flags', 'FFLAGS', 'fflags', flaglist, True), linker_so=('flags.linker_so', 'LDFLAGS', 'ldflags', flaglist, True), linker_exe=('flags.linker_exe', 'LDFLAGS', 'ldflags', flaglist, True), ar=('flags.ar', 'ARFLAGS', 'arflags', flaglist, True))
A:numpy.distutils.fcompiler.__init__.shared_lib_extension->get_shared_lib_extension()
A:numpy.distutils.fcompiler.__init__.self.distutils_vars->self.distutils_vars.clone(self._environment_hook)
A:numpy.distutils.fcompiler.__init__.self.command_vars->self.command_vars.clone(self._environment_hook)
A:numpy.distutils.fcompiler.__init__.self.flag_vars->self.flag_vars.clone(self._environment_hook)
A:numpy.distutils.fcompiler.__init__.self.executables->self.executables.copy()
A:numpy.distutils.fcompiler.__init__.obj->self.__new__(self.__class__)
A:numpy.distutils.fcompiler.__init__.obj.distutils_vars->self.__new__(self.__class__).distutils_vars.clone(obj._environment_hook)
A:numpy.distutils.fcompiler.__init__.obj.command_vars->self.__new__(self.__class__).command_vars.clone(obj._environment_hook)
A:numpy.distutils.fcompiler.__init__.obj.flag_vars->self.__new__(self.__class__).flag_vars.clone(obj._environment_hook)
A:numpy.distutils.fcompiler.__init__.obj.executables->self.__new__(self.__class__).executables.copy()
A:numpy.distutils.fcompiler.__init__.version_cmd->_command_property('version_cmd')
A:numpy.distutils.fcompiler.__init__.compiler_f77->_command_property('compiler_f77')
A:numpy.distutils.fcompiler.__init__.compiler_f90->_command_property('compiler_f90')
A:numpy.distutils.fcompiler.__init__.compiler_fix->_command_property('compiler_fix')
A:numpy.distutils.fcompiler.__init__.linker_so->_command_property('linker_so')
A:numpy.distutils.fcompiler.__init__.linker_exe->_command_property('linker_exe')
A:numpy.distutils.fcompiler.__init__.archiver->_command_property('archiver')
A:numpy.distutils.fcompiler.__init__.ranlib->_command_property('ranlib')
A:numpy.distutils.fcompiler.__init__.value->split_quoted(value)
A:numpy.distutils.fcompiler.__init__.fc_exe->cached_find_executable(exe)
A:numpy.distutils.fcompiler.__init__.cmd->self.executables.get(key, None)
A:numpy.distutils.fcompiler.__init__.exe_from_environ->getattr(self.command_vars, exe_key)
A:numpy.distutils.fcompiler.__init__.seen->set()
A:numpy.distutils.fcompiler.__init__.f90->numpy.distutils._shell_utils.NativeParser.split(f90)
A:numpy.distutils.fcompiler.__init__.f77->numpy.distutils._shell_utils.NativeParser.split(f77)
A:numpy.distutils.fcompiler.__init__.version->numpy.distutils.ccompiler.CCompiler.get_version(self, force=force, ok_status=ok_status)
A:numpy.distutils.fcompiler.__init__.noopt->self.distutils_vars.get('noopt', False)
A:numpy.distutils.fcompiler.__init__.noarch->self.distutils_vars.get('noarch', noopt)
A:numpy.distutils.fcompiler.__init__.debug->self.distutils_vars.get('debug', False)
A:numpy.distutils.fcompiler.__init__.fix->numpy.distutils._shell_utils.NativeParser.split(fix)
A:numpy.distutils.fcompiler.__init__.this_get->getattr(self, 'get_flags_' + tag)
A:numpy.distutils.fcompiler.__init__.python_lib->get_python_lib(standard_lib=1)
A:numpy.distutils.fcompiler.__init__.ld_so_aix->os.path.join(python_lib, 'config', 'ld_so_aix')
A:numpy.distutils.fcompiler.__init__.python_exp->os.path.join(python_lib, 'config', 'python.exp')
A:numpy.distutils.fcompiler.__init__.v->new_fcompiler(compiler=compiler, verbose=dist.verbose).get_version()
A:numpy.distutils.fcompiler.__init__.pretty_printer->FancyGetopt(compilers_ni)
A:numpy.distutils.fcompiler.__init__.src_flags->get_f77flags(src)
A:numpy.distutils.fcompiler.__init__.extra_flags->get_f77flags(src).get(self.compiler_type, [])
A:numpy.distutils.fcompiler.__init__.msg->str(e)
A:numpy.distutils.fcompiler.__init__.(objects, output_dir)->self._fix_object_args(objects, output_dir)
A:numpy.distutils.fcompiler.__init__.(libraries, library_dirs, runtime_library_dirs)->self._fix_lib_args(libraries, library_dirs, runtime_library_dirs)
A:numpy.distutils.fcompiler.__init__.lib_opts->gen_lib_options(self, library_dirs, runtime_library_dirs, libraries)
A:numpy.distutils.fcompiler.__init__.output_filename->os.path.join(output_dir, output_filename)
A:numpy.distutils.fcompiler.__init__.hook->getattr(self, 'get_flags_' + hook_name)
A:numpy.distutils.fcompiler.__init__.pys->os.path.join(os.path.dirname(__file__), '*.py')
A:numpy.distutils.fcompiler.__init__.(module_name, ext)->os.path.splitext(os.path.basename(fname))
A:numpy.distutils.fcompiler.__init__.klass->getattr(module, cname)
A:numpy.distutils.fcompiler.__init__.dist->Distribution()
A:numpy.distutils.fcompiler.__init__.c->new_fcompiler(compiler=compiler, verbose=dist.verbose)
A:numpy.distutils.fcompiler.__init__.matching_compiler_types->available_fcompilers_for_platform(osname, platform)
A:numpy.distutils.fcompiler.__init__.compiler_type->_find_existing_fcompiler(matching_compiler_types, osname=osname, platform=platform, requiref90=requiref90, c_compiler=c_compiler)
A:numpy.distutils.fcompiler.__init__.failed_fcompilers->set()
A:numpy.distutils.fcompiler.__init__.compiler->klass(verbose=verbose, dry_run=dry_run, force=force)
A:numpy.distutils.fcompiler.__init__.dist.script_name->os.path.basename(sys.argv[0])
A:numpy.distutils.fcompiler.__init__.platform_compilers->available_fcompilers_for_platform()
A:numpy.distutils.fcompiler.__init__.compilers_ni->list(set(fcompiler_class.keys()) - set(platform_compilers))
A:numpy.distutils.fcompiler.__init__.(fo, name)->make_temp_file(suffix='.f')
A:numpy.distutils.fcompiler.__init__.line->f.readline()
A:numpy.distutils.fcompiler.__init__._f77flags_re->re.compile('(c|)f77flags\\s*\\(\\s*(?P<fcname>\\w+)\\s*\\)\\s*=\\s*(?P<fflags>.*)', re.I)
A:numpy.distutils.fcompiler.__init__.m->re.compile('(c|)f77flags\\s*\\(\\s*(?P<fcname>\\w+)\\s*\\)\\s*=\\s*(?P<fflags>.*)', re.I).match(line)
A:numpy.distutils.fcompiler.__init__.fcname->re.compile('(c|)f77flags\\s*\\(\\s*(?P<fcname>\\w+)\\s*\\)\\s*=\\s*(?P<fflags>.*)', re.I).match(line).group('fcname').strip()
A:numpy.distutils.fcompiler.__init__.fflags->re.compile('(c|)f77flags\\s*\\(\\s*(?P<fcname>\\w+)\\s*\\)\\s*=\\s*(?P<fflags>.*)', re.I).match(line).group('fflags').strip()
A:numpy.distutils.fcompiler.__init__.flags[fcname]->split_quoted(fflags)
numpy.distutils.fcompiler.__init__.CompilerNotFound(Exception)
numpy.distutils.fcompiler.__init__.FCompiler(self,*args,**kw)
numpy.distutils.fcompiler.__init__.FCompiler.__copy__(self)
numpy.distutils.fcompiler.__init__.FCompiler.__init__(self,*args,**kw)
numpy.distutils.fcompiler.__init__.FCompiler._command_property(key)
numpy.distutils.fcompiler.__init__.FCompiler._compile(self,obj,src,ext,cc_args,extra_postargs,pp_opts)
numpy.distutils.fcompiler.__init__.FCompiler._environment_hook(self,name,hook_name)
numpy.distutils.fcompiler.__init__.FCompiler._get_command_flags(self,key)
numpy.distutils.fcompiler.__init__.FCompiler.can_ccompiler_link(self,ccompiler)
numpy.distutils.fcompiler.__init__.FCompiler.copy(self)
numpy.distutils.fcompiler.__init__.FCompiler.customize(self,dist=None)
numpy.distutils.fcompiler.__init__.FCompiler.dump_properties(self)
numpy.distutils.fcompiler.__init__.FCompiler.find_executables(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_ar(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_f77(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_f90(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_fix(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_free(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_linker_exe(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_linker_so(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_libraries(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.__init__.FCompiler.get_version(self,force=False,ok_status=[0])
numpy.distutils.fcompiler.__init__.FCompiler.library_dir_option(self,dir)
numpy.distutils.fcompiler.__init__.FCompiler.library_option(self,lib)
numpy.distutils.fcompiler.__init__.FCompiler.link(self,target_desc,objects,output_filename,output_dir=None,libraries=None,library_dirs=None,runtime_library_dirs=None,export_symbols=None,debug=0,extra_preargs=None,extra_postargs=None,build_temp=None,target_lang=None)
numpy.distutils.fcompiler.__init__.FCompiler.module_options(self,module_dirs,module_build_dir)
numpy.distutils.fcompiler.__init__.FCompiler.set_command(self,key,value)
numpy.distutils.fcompiler.__init__.FCompiler.set_commands(self,**kw)
numpy.distutils.fcompiler.__init__.FCompiler.set_executable(self,key,value)
numpy.distutils.fcompiler.__init__.FCompiler.update_executables(self)
numpy.distutils.fcompiler.__init__.FCompiler.wrap_unlinkable_objects(self,objects,output_dir,extra_dll_dir)
numpy.distutils.fcompiler.__init__._find_existing_fcompiler(compiler_types,osname=None,platform=None,requiref90=False,c_compiler=None)
numpy.distutils.fcompiler.__init__.available_fcompilers_for_platform(osname=None,platform=None)
numpy.distutils.fcompiler.__init__.dummy_fortran_file()
numpy.distutils.fcompiler.__init__.flaglist(s)
numpy.distutils.fcompiler.__init__.get_default_fcompiler(osname=None,platform=None,requiref90=False,c_compiler=None)
numpy.distutils.fcompiler.__init__.get_f77flags(src)
numpy.distutils.fcompiler.__init__.has_f90_header(src)
numpy.distutils.fcompiler.__init__.is_free_format(file)
numpy.distutils.fcompiler.__init__.is_sequence_of_strings(seq)
numpy.distutils.fcompiler.__init__.load_all_fcompiler_classes()
numpy.distutils.fcompiler.__init__.new_fcompiler(plat=None,compiler=None,verbose=0,dry_run=0,force=0,requiref90=False,c_compiler=None)
numpy.distutils.fcompiler.__init__.show_fcompilers(dist=None)
numpy.distutils.fcompiler.__init__.str2bool(s)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/fcompiler/pg.py----------------------------------------
A:numpy.distutils.fcompiler.pg.opt->numpy.distutils.fcompiler.FCompiler.get_library_dirs(self)
A:numpy.distutils.fcompiler.pg.flang_dir->dirname(self.executables['compiler_f77'][0])
numpy.distutils.fcompiler.pg.PGroupFCompiler(FCompiler)
numpy.distutils.fcompiler.pg.PGroupFCompiler.get_flags(self)
numpy.distutils.fcompiler.pg.PGroupFCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.pg.PGroupFCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.pg.PGroupFCompiler.runtime_library_dir_option(self,dir)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler(FCompiler)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_flags(self)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_flags_arch(self)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_flags_debug(self)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_flags_free(self)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_flags_opt(self)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_libraries(self)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_library_dirs(self)
numpy.distutils.fcompiler.pg.PGroupFlangCompiler.runtime_library_dir_option(self,dir)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/autodist.py----------------------------------------
A:numpy.distutils.command.autodist.body->textwrap.dedent('\n        int\n        main()\n        {\n        #if (! defined __GNUC__) || (__GNUC__ < %(major)d) || \\\n                (__GNUC_MINOR__ < %(minor)d) || \\\n                (__GNUC_PATCHLEVEL__ < %(patchlevel)d)\n        #error gcc >= %(version)s required\n        #endif\n            return 0;\n        }\n        ')
A:numpy.distutils.command.autodist.st->cmd.try_compile(body % {'restrict': kw}, None, None)
A:numpy.distutils.command.autodist.version->'.'.join([str(major), str(minor), str(patchlevel)])
numpy.distutils.command.autodist.check_compiler_gcc(cmd)
numpy.distutils.command.autodist.check_gcc_function_attribute(cmd,attribute,name)
numpy.distutils.command.autodist.check_gcc_function_attribute_with_intrinsics(cmd,attribute,name,code,include)
numpy.distutils.command.autodist.check_gcc_variable_attribute(cmd,attribute)
numpy.distutils.command.autodist.check_gcc_version_at_least(cmd,major,minor=0,patchlevel=0)
numpy.distutils.command.autodist.check_inline(cmd)
numpy.distutils.command.autodist.check_restrict(cmd)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/develop.py----------------------------------------
numpy.distutils.command.develop.develop(old_develop)
numpy.distutils.command.develop.develop.install_for_development(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/build.py----------------------------------------
A:numpy.distutils.command.build.plat_specifier->'.{}-{}.{}'.format(get_platform(), *sys.version_info[:2])
A:numpy.distutils.command.build.self.build_scripts->os.path.join(self.build_base, 'scripts' + plat_specifier)
numpy.distutils.command.build.build(old_build)
numpy.distutils.command.build.build.finalize_options(self)
numpy.distutils.command.build.build.initialize_options(self)
numpy.distutils.command.build.build.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/install_data.py----------------------------------------
numpy.distutils.command.install_data.install_data(old_install_data)
numpy.distutils.command.install_data.install_data.finalize_options(self)
numpy.distutils.command.install_data.install_data.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/egg_info.py----------------------------------------
A:numpy.distutils.command.egg_info.msg->textwrap.dedent('\n                `build_src` is being run, this may lead to missing\n                files in your sdist!  You want to use distutils.sdist\n                instead of the setuptools version:\n\n                    from distutils.command.sdist import sdist\n                    cmdclass={\'sdist\': sdist}"\n\n                See numpy\'s setup.py or gh-7131 for details.')
numpy.distutils.command.egg_info.egg_info(_egg_info)
numpy.distutils.command.egg_info.egg_info.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/install.py----------------------------------------
A:numpy.distutils.command.install.caller->sys._getframe(3)
A:numpy.distutils.command.install.caller_module->sys._getframe(3).f_globals.get('__name__', '')
A:numpy.distutils.command.install.r->self.setuptools_run()
A:numpy.distutils.command.install.l->l.rstrip().rstrip()
numpy.distutils.command.install.install(old_install)
numpy.distutils.command.install.install.finalize_options(self)
numpy.distutils.command.install.install.run(self)
numpy.distutils.command.install.install.setuptools_run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/install_clib.py----------------------------------------
A:numpy.distutils.command.install_clib.build_clib_cmd->get_cmd('build_clib')
A:numpy.distutils.command.install_clib.compiler->new_compiler(compiler=None)
A:numpy.distutils.command.install_clib.target_dir->os.path.join(self.install_dir, l.target_dir)
A:numpy.distutils.command.install_clib.name->new_compiler(compiler=None).library_filename(l.name)
A:numpy.distutils.command.install_clib.source->os.path.join(build_dir, name)
numpy.distutils.command.install_cinstall_cfinalize_options(self)
numpy.distutils.command.install_cinstall_cget_outputs(self)
numpy.distutils.command.install_cinstall_cinitialize_options(self)
numpy.distutils.command.install_cinstall_clib(Command)
numpy.distutils.command.install_cinstall_crun(self)
numpy.distutils.command.install_clib.install_clib(Command)
numpy.distutils.command.install_clib.install_clib.finalize_options(self)
numpy.distutils.command.install_clib.install_clib.get_outputs(self)
numpy.distutils.command.install_clib.install_clib.initialize_options(self)
numpy.distutils.command.install_clib.install_clib.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/build_clib.py----------------------------------------
A:numpy.distutils.command.build_clib.self.parallel->int(self.parallel)
A:numpy.distutils.command.build_clib.l->build_info.get('language', None)
A:numpy.distutils.command.build_clib.self.compiler->new_compiler(compiler=self.compiler, dry_run=self.dry_run, force=self.force)
A:numpy.distutils.command.build_clib.dispatch_hpath->os.path.join(bsrc_dir, dispatch_hpath)
A:numpy.distutils.command.build_clib.opt_cache_path->os.path.abspath(os.path.join(self.build_temp, 'ccompiler_opt_cache_clib.py'))
A:numpy.distutils.command.build_clib.self.compiler_opt->new_ccompiler_opt(compiler=self.compiler, dispatch_hpath=dispatch_hpath, cpu_baseline=self.cpu_baseline, cpu_dispatch=self.cpu_dispatch, cache_path=opt_cache_path)
A:numpy.distutils.command.build_clib.self._f_compiler->new_fcompiler(compiler=self.fcompiler, verbose=self.verbose, dry_run=self.dry_run, force=self.force, requiref90='f90' in languages, c_compiler=self.compiler)
A:numpy.distutils.command.build_clib.libname->self.compiler.library_filename(l.name)
A:numpy.distutils.command.build_clib.source->os.path.join(self.build_clib, libname)
A:numpy.distutils.command.build_clib.target->os.path.join(l.target_dir, libname)
A:numpy.distutils.command.build_clib.sources->list(sources)
A:numpy.distutils.command.build_clib.(c_sources, cxx_sources, f_sources, fmodule_sources)->filter_sources(sources)
A:numpy.distutils.command.build_clib.lib_file->compiler.library_filename(lib_name, output_dir=self.build_clib)
A:numpy.distutils.command.build_clib.config_fc->build_info.get('config_fc', {})
A:numpy.distutils.command.build_clib.fcompiler->new_fcompiler(compiler=fcompiler.compiler_type, verbose=self.verbose, dry_run=self.dry_run, force=self.force, requiref90=requiref90, c_compiler=self.compiler)
A:numpy.distutils.command.build_clib.base_config_fc->dist.get_option_dict('config_fc').copy()
A:numpy.distutils.command.build_clib.macros->build_info.get('macros')
A:numpy.distutils.command.build_clib.include_dirs->build_info.get('include_dirs')
A:numpy.distutils.command.build_clib.module_build_dir->os.path.dirname(lib_file)
A:numpy.distutils.command.build_clib.copt_baseline_flags->self.compiler_opt.cpu_baseline_flags()
A:numpy.distutils.command.build_clib.cxx_compiler->compiler.cxx_compiler()
A:numpy.distutils.command.build_clib.cxx_objects->compiler.cxx_compiler().compile(cxx_sources, output_dir=self.build_temp, macros=macros + copt_macros, include_dirs=include_dirs, debug=self.debug, extra_postargs=extra_postargs + copt_baseline_flags)
A:numpy.distutils.command.build_clib.existing_modules->glob('*.mod')
A:numpy.distutils.command.build_clib.t->os.path.join(module_build_dir, f)
A:numpy.distutils.command.build_clib.listfn->os.path.join(self.build_clib, lib_name + '.cobjects')
A:numpy.distutils.command.build_clib.lib_fname->os.path.join(self.build_clib, lib_name + compiler.static_lib_extension)
A:numpy.distutils.command.build_clib.clib_libraries->build_info.get('libraries', [])
numpy.distutils.command.build_cbuild_cbuild_a_library(self,build_info,lib_name,libraries)
numpy.distutils.command.build_cbuild_cbuild_libraries(self,libraries)
numpy.distutils.command.build_cbuild_cfinalize_options(self)
numpy.distutils.command.build_cbuild_cget_source_files(self)
numpy.distutils.command.build_cbuild_chave_cxx_sources(self)
numpy.distutils.command.build_cbuild_chave_f_sources(self)
numpy.distutils.command.build_cbuild_cinitialize_options(self)
numpy.distutils.command.build_cbuild_clib(old_build_clib)
numpy.distutils.command.build_cbuild_crun(self)
numpy.distutils.command.build_clib.build_clib(old_build_clib)
numpy.distutils.command.build_clib.build_clib.build_a_library(self,build_info,lib_name,libraries)
numpy.distutils.command.build_clib.build_clib.build_libraries(self,libraries)
numpy.distutils.command.build_clib.build_clib.finalize_options(self)
numpy.distutils.command.build_clib.build_clib.get_source_files(self)
numpy.distutils.command.build_clib.build_clib.have_cxx_sources(self)
numpy.distutils.command.build_clib.build_clib.have_f_sources(self)
numpy.distutils.command.build_clib.build_clib.initialize_options(self)
numpy.distutils.command.build_clib.build_clib.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/config_compiler.py----------------------------------------
A:numpy.distutils.command.config_compiler.build_clib->self.get_finalized_command('build_clib')
A:numpy.distutils.command.config_compiler.build_ext->self.get_finalized_command('build_ext')
A:numpy.distutils.command.config_compiler.config->self.get_finalized_command('config')
A:numpy.distutils.command.config_compiler.build->self.get_finalized_command('build')
A:numpy.distutils.command.config_compiler.v->getattr(c, a)
numpy.distutils.command.config_compiler.config_cc(Command)
numpy.distutils.command.config_compiler.config_cc.finalize_options(self)
numpy.distutils.command.config_compiler.config_cc.initialize_options(self)
numpy.distutils.command.config_compiler.config_cc.run(self)
numpy.distutils.command.config_compiler.config_fc(Command)
numpy.distutils.command.config_compiler.config_fc.finalize_options(self)
numpy.distutils.command.config_compiler.config_fc.initialize_options(self)
numpy.distutils.command.config_compiler.config_fc.run(self)
numpy.distutils.command.config_compiler.show_fortran_compilers(_cache=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/bdist_rpm.py----------------------------------------
A:numpy.distutils.command.bdist_rpm.spec_file->distutils.command.bdist_rpm.bdist_rpm._make_spec_file(self)
A:numpy.distutils.command.bdist_rpm.setup_py->os.path.basename(sys.argv[0])
A:numpy.distutils.command.bdist_rpm.line->line.replace('setup.py', setup_py).replace('setup.py', setup_py)
numpy.distutils.command.bdist_rpm.bdist_rpm(old_bdist_rpm)
numpy.distutils.command.bdist_rpm.bdist_rpm._make_spec_file(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/build_ext.py----------------------------------------
A:numpy.distutils.command.build_ext.self.parallel->int(self.parallel)
A:numpy.distutils.command.build_ext.self.include_dirs->self.include_dirs.split(os.pathsep)
A:numpy.distutils.command.build_ext.build_clib->self.get_finalized_command('build_clib')
A:numpy.distutils.command.build_ext.self.compiler->new_compiler(compiler=compiler_type, verbose=self.verbose, dry_run=self.dry_run, force=self.force)
A:numpy.distutils.command.build_ext.dispatch_hpath->os.path.join(bsrc_dir, dispatch_hpath)
A:numpy.distutils.command.build_ext.opt_cache_path->os.path.abspath(os.path.join(self.build_temp, 'ccompiler_opt_cache_ext.py'))
A:numpy.distutils.command.build_ext.self.compiler_opt->new_ccompiler_opt(compiler=self.compiler, dispatch_hpath=dispatch_hpath, cpu_baseline=self.cpu_baseline, cpu_dispatch=self.cpu_dispatch, cache_path=opt_cache_path)
A:numpy.distutils.command.build_ext.self.extra_dll_dir->os.path.join(self.build_temp, '.libs')
A:numpy.distutils.command.build_ext.all_languages->set()
A:numpy.distutils.command.build_ext.ext_languages->set()
A:numpy.distutils.command.build_ext.self._cxx_compiler->compiler.cxx_compiler()
A:numpy.distutils.command.build_ext.self._f77_compiler->new_fcompiler(compiler=self.fcompiler, verbose=self.verbose, dry_run=self.dry_run, force=self.force, requiref90=False, c_compiler=self.compiler)
A:numpy.distutils.command.build_ext.self._f90_compiler->new_fcompiler(compiler=self.fcompiler, verbose=self.verbose, dry_run=self.dry_run, force=self.force, requiref90=True, c_compiler=self.compiler)
A:numpy.distutils.command.build_ext.shared_lib_dir->os.path.join(self.build_lib, shared_lib_dir)
A:numpy.distutils.command.build_ext.runtime_lib->os.path.join(self.extra_dll_dir, fn)
A:numpy.distutils.command.build_ext.sources->list(sources)
A:numpy.distutils.command.build_ext.fullname->self.get_ext_fullname(ext.name)
A:numpy.distutils.command.build_ext.modpath->self.get_ext_fullname(ext.name).split('.')
A:numpy.distutils.command.build_ext.package->'.'.join(modpath[0:-1])
A:numpy.distutils.command.build_ext.build_py->self.get_finalized_command('build_py')
A:numpy.distutils.command.build_ext.package_dir->self.get_finalized_command('build_py').get_package_dir(package)
A:numpy.distutils.command.build_ext.ext_filename->os.path.join(self.build_lib, self.get_ext_filename(fullname))
A:numpy.distutils.command.build_ext.(c_sources, cxx_sources, f_sources, fmodule_sources)->filter_sources(ext.sources)
A:numpy.distutils.command.build_ext.copt_baseline_flags->self.compiler_opt.cpu_baseline_flags()
A:numpy.distutils.command.build_ext.module_build_dir->os.path.join(self.build_temp, os.path.dirname(self.get_ext_filename(fullname)))
A:numpy.distutils.command.build_ext.existing_modules->glob('*.mod')
A:numpy.distutils.command.build_ext.t->os.path.join(module_build_dir, f)
A:numpy.distutils.command.build_ext.(objects, libraries)->self._process_unlinkable_fobjects(objects, libraries, fcompiler, library_dirs, unlinkable_fobjects)
A:numpy.distutils.command.build_ext.objects->list(objects)
A:numpy.distutils.command.build_ext.libraries->list(libraries)
A:numpy.distutils.command.build_ext.unlinkable_fobjects->list(unlinkable_fobjects)
A:numpy.distutils.command.build_ext.fake_lib->os.path.join(libdir, lib + '.fobjects')
A:numpy.distutils.command.build_ext.c_lib->os.path.join(libdir, lib + '.cobjects')
A:numpy.distutils.command.build_ext.wrapped->fcompiler.wrap_unlinkable_objects(fobjects, output_dir=self.build_temp, extra_dll_dir=self.extra_dll_dir)
A:numpy.distutils.command.build_ext.libfile->os.path.join(libdir, 'lib%s.a' % libname)
A:numpy.distutils.command.build_ext.libfile2->os.path.join(self.build_temp, libname + '.lib')
A:numpy.distutils.command.build_ext.dir->filepath_from_subprocess_output(dir)
A:numpy.distutils.command.build_ext.p->combine_paths(f_lib_dirs, 'lib' + lib + '.a')
A:numpy.distutils.command.build_ext.dst_name->os.path.join(self.build_temp, lib + '.lib')
numpy.distutils.command.build_ext.build_ext(old_build_ext)
numpy.distutils.command.build_ext.build_ext._add_dummy_mingwex_sym(self,c_sources)
numpy.distutils.command.build_ext.build_ext._libs_with_msvc_and_fortran(self,fcompiler,c_libraries,c_library_dirs)
numpy.distutils.command.build_ext.build_ext._process_unlinkable_fobjects(self,objects,libraries,fcompiler,library_dirs,unlinkable_fobjects)
numpy.distutils.command.build_ext.build_ext.build_extension(self,ext)
numpy.distutils.command.build_ext.build_ext.finalize_options(self)
numpy.distutils.command.build_ext.build_ext.get_outputs(self)
numpy.distutils.command.build_ext.build_ext.get_source_files(self)
numpy.distutils.command.build_ext.build_ext.initialize_options(self)
numpy.distutils.command.build_ext.build_ext.run(self)
numpy.distutils.command.build_ext.build_ext.swig_sources(self,sources,extensions=None)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/config.py----------------------------------------
A:numpy.distutils.command.config.self.fcompiler->new_fcompiler(compiler=self.fcompiler, dry_run=self.dry_run, force=1, c_compiler=self.compiler)
A:numpy.distutils.command.config.ret->mth(*(self,) + args)
A:numpy.distutils.command.config.(src, obj)->self._wrap_method(old_config._compile, lang, (body, headers, include_dirs, lang))
A:numpy.distutils.command.config.d->filepath_from_subprocess_output(d)
A:numpy.distutils.command.config.libfile->os.path.join(libdir, 'lib%s.a' % libname)
A:numpy.distutils.command.config.libfile2->os.path.join(libdir, '%s.lib' % libname)
A:numpy.distutils.command.config.body->textwrap.dedent('\n            typedef %(type)s npy_check_sizeof_type;\n            int main (void)\n            {\n                static int test_array [1 - 2 * !(((long) (sizeof (npy_check_sizeof_type))) <= %(size)s)];\n                test_array [0] = 0\n\n                ;\n                return 0;\n            }\n            ')
A:numpy.distutils.command.config.grabber->GrabStdout()
A:numpy.distutils.command.config.(src, obj, exe)->self._link(body, headers, include_dirs, libraries, library_dirs, lang)
A:numpy.distutils.command.config.exe->os.path.join('.', exe)
A:numpy.distutils.command.config.output->filepath_from_subprocess_output(output)
A:numpy.distutils.command.config.exitcode->os.WEXITSTATUS(exitstatus)
A:numpy.distutils.command.config.sig->os.WTERMSIG(exitstatus)
numpy.distutils.command.config.GrabStdout(self)
numpy.distutils.command.config.GrabStdout.__init__(self)
numpy.distutils.command.config.GrabStdout.flush(self)
numpy.distutils.command.config.GrabStdout.restore(self)
numpy.distutils.command.config.GrabStdout.write(self,data)
numpy.distutils.command.config.config(old_config)
numpy.distutils.command.config.config._check_compiler(self)
numpy.distutils.command.config.config._compile(self,body,headers,include_dirs,lang)
numpy.distutils.command.config.config._link(self,body,headers,include_dirs,libraries,library_dirs,lang)
numpy.distutils.command.config.config._wrap_method(self,mth,lang,args)
numpy.distutils.command.config.config.check_compiler_gcc(self)
numpy.distutils.command.config.config.check_decl(self,symbol,headers=None,include_dirs=None)
numpy.distutils.command.config.config.check_func(self,func,headers=None,include_dirs=None,libraries=None,library_dirs=None,decl=False,call=False,call_args=None)
numpy.distutils.command.config.config.check_funcs_once(self,funcs,headers=None,include_dirs=None,libraries=None,library_dirs=None,decl=False,call=False,call_args=None)
numpy.distutils.command.config.config.check_gcc_function_attribute(self,attribute,name)
numpy.distutils.command.config.config.check_gcc_function_attribute_with_intrinsics(self,attribute,name,code,include)
numpy.distutils.command.config.config.check_gcc_variable_attribute(self,attribute)
numpy.distutils.command.config.config.check_gcc_version_at_least(self,major,minor=0,patchlevel=0)
numpy.distutils.command.config.config.check_header(self,header,include_dirs=None,library_dirs=None,lang='c')
numpy.distutils.command.config.config.check_inline(self)
numpy.distutils.command.config.config.check_macro_true(self,symbol,headers=None,include_dirs=None)
numpy.distutils.command.config.config.check_restrict(self)
numpy.distutils.command.config.config.check_type(self,type_name,headers=None,include_dirs=None,library_dirs=None)
numpy.distutils.command.config.config.check_type_size(self,type_name,headers=None,include_dirs=None,library_dirs=None,expected=None)
numpy.distutils.command.config.config.get_output(self,body,headers=None,include_dirs=None,libraries=None,library_dirs=None,lang='c',use_tee=None)
numpy.distutils.command.config.config.initialize_options(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/build_src.py----------------------------------------
A:numpy.distutils.command.build_src.var->re.compile('@([a-zA-Z_]+)@')
A:numpy.distutils.command.build_src.m->_f2py_module_name_match(line)
A:numpy.distutils.command.build_src.plat_specifier->'.{}-{}.{}'.format(get_platform(), *sys.version_info[:2])
A:numpy.distutils.command.build_src.self.build_src->os.path.join(self.build_base, 'src' + plat_specifier)
A:numpy.distutils.command.build_src.self.f2py_opts->shlex.split(self.f2py_opts)
A:numpy.distutils.command.build_src.self.swig_opts->shlex.split(self.swig_opts)
A:numpy.distutils.command.build_src.build_ext->self.get_finalized_command('build_ext')
A:numpy.distutils.command.build_src.v->getattr(build_ext, c, None)
A:numpy.distutils.command.build_src.build_dir->os.path.join(self.build_src, target_dir)
A:numpy.distutils.command.build_src.s->f()
A:numpy.distutils.command.build_src.filenames->get_data_files((d, files))
A:numpy.distutils.command.build_src.template_dir->os.path.dirname(template)
A:numpy.distutils.command.build_src.generated_dir->os.path.join(self.build_src, template_dir, install_dir)
A:numpy.distutils.command.build_src.generated->os.path.basename(os.path.splitext(template)[0])
A:numpy.distutils.command.build_src.generated_path->os.path.join(generated_dir, generated)
A:numpy.distutils.command.build_src.full_install_dir->os.path.join(template_dir, install_dir)
A:numpy.distutils.command.build_src.install_cmd->copy.copy(get_cmd('install'))
A:numpy.distutils.command.build_src.prefix->os.path.join(os.path.abspath(top_prefix), pkg_path)
A:numpy.distutils.command.build_src.(install_dir, generated)->self._build_npy_pkg_config(info, d)
A:numpy.distutils.command.build_src.target->os.path.join(target_dir, '%s_wrap%s' % (name, ext))
A:numpy.distutils.command.build_src.source->func(extension, build_dir)
A:numpy.distutils.command.build_src.sources->self.pyrex_sources(sources, ext)
A:numpy.distutils.command.build_src.(sources, h_files)->self.filter_h_files(sources)
A:numpy.distutils.command.build_src.fullname->self.get_ext_fullname(ext.name)
A:numpy.distutils.command.build_src.modpath->self.get_ext_fullname(ext.name).split('.')
A:numpy.distutils.command.build_src.package->'.'.join(modpath[0:-1])
A:numpy.distutils.command.build_src.self.ext_target_dir->self.get_package_dir(package)
A:numpy.distutils.command.build_src.(sources, py_files)->self.filter_py_files(sources)
A:numpy.distutils.command.build_src.old_level->numpy.distutils.log.set_threshold(new_level)
A:numpy.distutils.command.build_src.(base, ext)->os.path.splitext(source)
A:numpy.distutils.command.build_src.depends->extension[1].get('depends')
A:numpy.distutils.command.build_src.include_dirs->extension[1].get('include_dirs')
A:numpy.distutils.command.build_src.target_dir->os.path.dirname(base)
A:numpy.distutils.command.build_src.target_file->_find_swig_target(target_dir, name)
A:numpy.distutils.command.build_src.outstr->process_c_file(source)
A:numpy.distutils.command.build_src.d->os.path.dirname(numpy.f2py.__file__)
A:numpy.distutils.command.build_src.name->_f2py_module_name_match(line).group('name')
A:numpy.distutils.command.build_src.target_c->os.path.join(build_dir, 'fortranobject.c')
A:numpy.distutils.command.build_src.target_h->os.path.join(build_dir, 'fortranobject.h')
A:numpy.distutils.command.build_src.source_c->os.path.join(d, 'src', 'fortranobject.c')
A:numpy.distutils.command.build_src.source_h->os.path.join(d, 'src', 'fortranobject.h')
A:numpy.distutils.command.build_src.filename->os.path.join(target_dir, ext_name + name_ext)
A:numpy.distutils.command.build_src.typ->get_swig_target(source)
A:numpy.distutils.command.build_src.typ2->get_swig_target(source)
A:numpy.distutils.command.build_src.line->f.readline()
numpy.distutils.command.build_src._find_swig_target(target_dir,name)
numpy.distutils.command.build_src.build_src(build_ext.build_ext)
numpy.distutils.command.build_src.build_src._build_npy_pkg_config(self,info,gd)
numpy.distutils.command.build_src.build_src.build_data_files_sources(self)
numpy.distutils.command.build_src.build_src.build_extension_sources(self,ext)
numpy.distutils.command.build_src.build_src.build_library_sources(self,lib_name,build_info)
numpy.distutils.command.build_src.build_src.build_npy_pkg_config(self)
numpy.distutils.command.build_src.build_src.build_py_modules_sources(self)
numpy.distutils.command.build_src.build_src.build_sources(self)
numpy.distutils.command.build_src.build_src.f2py_sources(self,sources,extension)
numpy.distutils.command.build_src.build_src.filter_files(self,sources,exts=[])
numpy.distutils.command.build_src.build_src.filter_h_files(self,sources)
numpy.distutils.command.build_src.build_src.filter_py_files(self,sources)
numpy.distutils.command.build_src.build_src.finalize_options(self)
numpy.distutils.command.build_src.build_src.generate_a_pyrex_source(self,base,ext_name,source,extension)
numpy.distutils.command.build_src.build_src.generate_sources(self,sources,extension)
numpy.distutils.command.build_src.build_src.initialize_options(self)
numpy.distutils.command.build_src.build_src.pyrex_sources(self,sources,extension)
numpy.distutils.command.build_src.build_src.run(self)
numpy.distutils.command.build_src.build_src.swig_sources(self,sources,extension)
numpy.distutils.command.build_src.build_src.template_sources(self,sources,extension)
numpy.distutils.command.build_src.get_f2py_modulename(source)
numpy.distutils.command.build_src.get_swig_modulename(source)
numpy.distutils.command.build_src.get_swig_target(source)
numpy.distutils.command.build_src.subst_vars(target,source,d)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/build_scripts.py----------------------------------------
A:numpy.distutils.command.build_scripts.script->func(build_dir)
A:numpy.distutils.command.build_scripts.self.scripts->self.generate_scripts(self.scripts)
numpy.distutils.command.build_scripts.build_scripts(old_build_scripts)
numpy.distutils.command.build_scripts.build_scripts.generate_scripts(self,scripts)
numpy.distutils.command.build_scripts.build_scripts.get_source_files(self)
numpy.distutils.command.build_scripts.build_scripts.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/build_py.py----------------------------------------
A:numpy.distutils.command.build_py.build_src->self.get_finalized_command('build_src')
A:numpy.distutils.command.build_py.self.packages->list(build_src.py_modules_dict.keys())
A:numpy.distutils.command.build_py.modules->distutils.command.build_py.build_py.find_modules(self)
numpy.distutils.command.build_py.build_py(old_build_py)
numpy.distutils.command.build_py.build_py.find_modules(self)
numpy.distutils.command.build_py.build_py.find_package_modules(self,package,package_dir)
numpy.distutils.command.build_py.build_py.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/install_headers.py----------------------------------------
A:numpy.distutils.command.install_headers.prefix->os.path.dirname(self.install_dir)
A:numpy.distutils.command.install_headers.d->os.path.join(*[prefix] + header[0].split('.'))
A:numpy.distutils.command.install_headers.(out, _)->self.copy_file(header, d)
numpy.distutils.command.install_headers.install_headers(old_install_headers)
numpy.distutils.command.install_headers.install_headers.run(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/sdist.py----------------------------------------
numpy.distutils.command.sdist.sdist(old_sdist)
numpy.distutils.command.sdist.sdist.add_defaults(self)


----------------------------------------/home/zhang/Packages/numpy/numpy1.21.1/distutils/command/__init__.py----------------------------------------
A:numpy.distutils.command.__init__.a->np.NA(2)
numpy.distutils.command.__init__.test_na_writable_attributes_deletion()

