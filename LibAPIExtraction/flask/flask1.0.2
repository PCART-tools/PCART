
----------------------------------------/home/zhang/Packages/flask/flask1.0.2/sessions.py----------------------------------------
A:flask.sessions.self['_permanent']->bool(value)
A:flask.sessions.rv->rv.rsplit(':', 1)[0].lstrip('.').rsplit(':', 1)[0].lstrip('.')
A:flask.sessions.ip->is_ip(rv)
A:flask.sessions.session_json_serializer->TaggedJSONSerializer()
A:flask.sessions.digest_method->staticmethod(hashlib.sha1)
A:flask.sessions.signer_kwargs->dict(key_derivation=self.key_derivation, digest_method=self.digest_method)
A:flask.sessions.s->self.get_signing_serializer(app)
A:flask.sessions.val->self.get_signing_serializer(app).dumps(dict(session))
A:flask.sessions.max_age->total_seconds(app.permanent_session_lifetime)
A:flask.sessions.data->self.get_signing_serializer(app).loads(val, max_age=max_age)
A:flask.sessions.domain->self.get_cookie_domain(app)
A:flask.sessions.path->self.get_cookie_path(app)
A:flask.sessions.httponly->self.get_cookie_httponly(app)
A:flask.sessions.secure->self.get_cookie_secure(app)
A:flask.sessions.samesite->self.get_cookie_samesite(app)
A:flask.sessions.expires->self.get_expiration_time(app, session)
flask.Session(self,initial=None)
flask.Session.__getitem__(self,key)
flask.Session.get(self,key,default=None)
flask.Session.setdefault(self,key,default=None)
flask.SessionInterface(SessionInterface)
flask.SessionInterface.get_signing_serializer(self,app)
flask.SessionInterface.open_session(self,app,request)
flask.SessionInterface.save_session(self,app,session,response)
flask.sessions.NullSession(SecureCookieSession)
flask.sessions.NullSession._fail(self,*args,**kwargs)
flask.sessions.SecureCookieSession(self,initial=None)
flask.sessions.SecureCookieSession.__getitem__(self,key)
flask.sessions.SecureCookieSession.__init__(self,initial=None)
flask.sessions.SecureCookieSession.get(self,key,default=None)
flask.sessions.SecureCookieSession.setdefault(self,key,default=None)
flask.sessions.SecureCookieSessionInterface(SessionInterface)
flask.sessions.SecureCookieSessionInterface.get_signing_serializer(self,app)
flask.sessions.SecureCookieSessionInterface.open_session(self,app,request)
flask.sessions.SecureCookieSessionInterface.save_session(self,app,session,response)
flask.sessions.SessionInterface(object)
flask.sessions.SessionInterface.get_cookie_domain(self,app)
flask.sessions.SessionInterface.get_cookie_httponly(self,app)
flask.sessions.SessionInterface.get_cookie_path(self,app)
flask.sessions.SessionInterface.get_cookie_samesite(self,app)
flask.sessions.SessionInterface.get_cookie_secure(self,app)
flask.sessions.SessionInterface.get_expiration_time(self,app,session)
flask.sessions.SessionInterface.is_null_session(self,obj)
flask.sessions.SessionInterface.make_null_session(self,app)
flask.sessions.SessionInterface.open_session(self,app,request)
flask.sessions.SessionInterface.save_session(self,app,session,response)
flask.sessions.SessionInterface.should_set_cookie(self,app,session)
flask.sessions.SessionMixin(MutableMapping)
flask.sessions.SessionMixin.permanent(self)
flask.sessions.SessionMixin.permanent(self,value)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/globals.py----------------------------------------
A:flask.globals._request_ctx_stack->LocalStack()
A:flask.globals._app_ctx_stack->LocalStack()
A:flask.globals.current_app->LocalProxy(_find_app)
A:flask.globals.request->LocalProxy(partial(_lookup_req_object, 'request'))
A:flask.globals.session->LocalProxy(partial(_lookup_req_object, 'session'))
A:flask.globals.g->LocalProxy(partial(_lookup_app_object, 'g'))
flask.globals._find_app()
flask.globals._lookup_app_object(name)
flask.globals._lookup_req_object(name)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/dataclasses.py----------------------------------------
A:flask.dataclasses._HAS_DEFAULT_FACTORY->_HAS_DEFAULT_FACTORY_CLASS()
A:flask.dataclasses.MISSING->_MISSING_TYPE()
A:flask.dataclasses._EMPTY_METADATA->types.MappingProxyType({})
A:flask.dataclasses._FIELD->_FIELD_BASE('_FIELD')
A:flask.dataclasses._FIELD_CLASSVAR->_FIELD_BASE('_FIELD_CLASSVAR')
A:flask.dataclasses._FIELD_INITVAR->_FIELD_BASE('_FIELD_INITVAR')
A:flask.dataclasses._MODULE_IDENTIFIER_RE->re.compile('^(?:\\s*(\\w+)\\s*\\.)?\\s*(\\w+)')
A:flask.dataclasses.func->getattr(type(self.default), '__set_name__', None)
A:flask.dataclasses.args->','.join(args)
A:flask.dataclasses.body->'\n'.join((f' {b}' for b in body))
A:flask.dataclasses.line->_field_init(f, frozen, globals, self_name)
A:flask.dataclasses.params_str->','.join((f.name for f in fields if f._field_type is _FIELD_INITVAR))
A:flask.dataclasses.self_tuple->_tuple_str('self', flds)
A:flask.dataclasses.match->re.compile('^(?:\\s*(\\w+)\\s*\\.)?\\s*(\\w+)').match(annotation)
A:flask.dataclasses.module_name->re.compile('^(?:\\s*(\\w+)\\s*\\.)?\\s*(\\w+)').match(annotation).group(1)
A:flask.dataclasses.module->sys.modules.get(cls.__module__)
A:flask.dataclasses.default->getattr(cls, a_name, MISSING)
A:flask.dataclasses.f->field(default=default)
A:flask.dataclasses.typing->sys.modules.get('typing')
A:flask.dataclasses.base_fields->getattr(b, _FIELDS, None)
A:flask.dataclasses.cls_annotations->types.new_class(cls_name, bases, {}, lambda ns: ns.update(namespace)).__dict__.get('__annotations__', {})
A:flask.dataclasses.class_hash->types.new_class(cls_name, bases, {}, lambda ns: ns.update(namespace)).__dict__.get('__hash__', MISSING)
A:flask.dataclasses.has_post_init->hasattr(cls, _POST_INIT_NAME)
A:flask.dataclasses.other_tuple->_tuple_str('other', flds)
A:flask.dataclasses.cls.__hash__->hash_action(cls, field_list)
A:flask.dataclasses.fields->getattr(class_or_instance, _FIELDS)
A:flask.dataclasses.value->_astuple_inner(getattr(obj, f.name), tuple_factory)
A:flask.dataclasses.namespace->namespace.copy().copy()
A:flask.dataclasses.seen->set()
A:flask.dataclasses.cls->types.new_class(cls_name, bases, {}, lambda ns: ns.update(namespace))
A:flask.dataclasses.changes[f.name]->getattr(obj, f.name)
flask.dataclasses.Field(self,default,default_factory,init,repr,hash,compare,metadata)
flask.dataclasses.Field.__init__(self,default,default_factory,init,repr,hash,compare,metadata)
flask.dataclasses.Field.__repr__(self)
flask.dataclasses.Field.__set_name__(self,owner,name)
flask.dataclasses.FrozenInstanceError(AttributeError)
flask.dataclasses.InitVar(metaclass=_InitVarMeta)
flask.dataclasses._DataclassParams(self,init,repr,eq,order,unsafe_hash,frozen)
flask.dataclasses._DataclassParams.__init__(self,init,repr,eq,order,unsafe_hash,frozen)
flask.dataclasses._DataclassParams.__repr__(self)
flask.dataclasses._FIELD_BASE(self,name)
flask.dataclasses._FIELD_BASE.__init__(self,name)
flask.dataclasses._FIELD_BASE.__repr__(self)
flask.dataclasses._HAS_DEFAULT_FACTORY_CLASS
flask.dataclasses._HAS_DEFAULT_FACTORY_CLASS.__repr__(self)
flask.dataclasses._InitVarMeta(type)
flask.dataclasses._InitVarMeta.__getitem__(self,params)
flask.dataclasses._MISSING_TYPE
flask.dataclasses._asdict_inner(obj,dict_factory)
flask.dataclasses._astuple_inner(obj,tuple_factory)
flask.dataclasses._cmp_fn(name,op,self_tuple,other_tuple)
flask.dataclasses._create_fn(name,args,body,*,globals=None,locals=None,return_type=MISSING)
flask.dataclasses._field_assign(frozen,name,value,self_name)
flask.dataclasses._field_init(f,frozen,globals,self_name)
flask.dataclasses._frozen_get_del_attr(cls,fields)
flask.dataclasses._get_field(cls,a_name,a_type)
flask.dataclasses._hash_add(cls,fields)
flask.dataclasses._hash_exception(cls,fields)
flask.dataclasses._hash_fn(fields)
flask.dataclasses._hash_set_none(cls,fields)
flask.dataclasses._init_fn(fields,frozen,has_post_init,self_name)
flask.dataclasses._init_param(f)
flask.dataclasses._is_classvar(a_type,typing)
flask.dataclasses._is_dataclass_instance(obj)
flask.dataclasses._is_initvar(a_type,dataclasses)
flask.dataclasses._is_type(annotation,cls,a_module,a_type,is_type_predicate)
flask.dataclasses._process_class(cls,init,repr,eq,order,unsafe_hash,frozen)
flask.dataclasses._repr_fn(fields)
flask.dataclasses._set_new_attribute(cls,name,value)
flask.dataclasses._tuple_str(obj_name,fields)
flask.dataclasses.asdict(obj,*,dict_factory=dict)
flask.dataclasses.astuple(obj,*,tuple_factory=tuple)
flask.dataclasses.dataclass(_cls=None,*,init=True,repr=True,eq=True,order=False,unsafe_hash=False,frozen=False)
flask.dataclasses.field(*,default=MISSING,default_factory=MISSING,init=True,repr=True,hash=None,compare=True,metadata=None)
flask.dataclasses.fields(class_or_instance)
flask.dataclasses.is_dataclass(obj)
flask.dataclasses.make_dataclass(cls_name,fields,*,bases=(),namespace=None,init=True,repr=True,eq=True,order=False,unsafe_hash=False,frozen=False)
flask.dataclasses.replace(obj,**changes)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/ctx.py----------------------------------------
A:flask.ctx._sentinel->object()
A:flask.ctx.reqctx->top.copy()
A:flask.ctx.self.url_adapter->app.create_url_adapter(self.request)
A:flask.ctx.self.g->app.app_ctx_globals_class()
A:flask.ctx.rv->globals._request_ctx_stack.pop()
A:flask.ctx.request->app.request_class(environ)
A:flask.ctx.g->property(_get_g, _set_g)
A:flask.ctx.(url_rule, self.request.view_args)->self.url_adapter.match(return_rule=True)
A:flask.ctx.app_ctx->self._implicit_app_ctx_stack.pop()
A:flask.ctx.self.session->session_interface.make_null_session(self.app)
A:flask.ctx.request_close->getattr(self.request, 'close', None)
flask.after_this_request(f)
flask.copy_current_request_context(f)
flask.ctx.AppContext(self,app)
flask.ctx.AppContext.__enter__(self)
flask.ctx.AppContext.__exit__(self,exc_type,exc_value,tb)
flask.ctx.AppContext.__init__(self,app)
flask.ctx.AppContext.pop(self,exc=_sentinel)
flask.ctx.AppContext.push(self)
flask.ctx.RequestContext(self,app,environ,request=None)
flask.ctx.RequestContext.__enter__(self)
flask.ctx.RequestContext.__exit__(self,exc_type,exc_value,tb)
flask.ctx.RequestContext.__init__(self,app,environ,request=None)
flask.ctx.RequestContext.__repr__(self)
flask.ctx.RequestContext._get_g(self)
flask.ctx.RequestContext._set_g(self,value)
flask.ctx.RequestContext.auto_pop(self,exc)
flask.ctx.RequestContext.copy(self)
flask.ctx.RequestContext.match_request(self)
flask.ctx.RequestContext.pop(self,exc=_sentinel)
flask.ctx.RequestContext.push(self)
flask.ctx._AppCtxGlobals(object)
flask.ctx._AppCtxGlobals.__contains__(self,item)
flask.ctx._AppCtxGlobals.__iter__(self)
flask.ctx._AppCtxGlobals.__repr__(self)
flask.ctx._AppCtxGlobals.get(self,name,default=None)
flask.ctx._AppCtxGlobals.pop(self,name,default=_sentinel)
flask.ctx._AppCtxGlobals.setdefault(self,name,default=None)
flask.ctx.after_this_request(f)
flask.ctx.copy_current_request_context(f)
flask.ctx.has_app_context()
flask.ctx.has_request_context()
flask.has_app_context()
flask.has_request_context()


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/testing.py----------------------------------------
A:flask.testing.http_host->'{0}.{1}'.format(subdomain, http_host)
A:flask.testing.url->url_parse(path)
A:flask.testing.base_url->'{scheme}://{netloc}/{path}'.format(scheme=url.scheme or url_scheme, netloc=url.netloc or http_host, path=app_root.lstrip('/'))
A:flask.testing.kwargs['data']->json_dumps(kwargs.pop('json'))
A:flask.testing.environ_overrides->kwargs.setdefault('environ_overrides', {})
A:flask.testing.sess->session_interface.open_session(app, c.request)
A:flask.testing.resp->app.response_class()
A:flask.testing.headers->app.response_class().get_wsgi_headers(c.request.environ)
A:flask.testing.as_tuple->kwargs.pop('as_tuple', False)
A:flask.testing.buffered->kwargs.pop('buffered', False)
A:flask.testing.follow_redirects->kwargs.pop('follow_redirects', False)
A:flask.testing.environ->make_test_environ_builder(self.application, *args, **kwargs).get_environ()
A:flask.testing.builder->make_test_environ_builder(self.application, *args, **kwargs)
A:flask.testing.kwargs['obj']->ScriptInfo(create_app=lambda : self.app)
flask.testing.FlaskCliRunner(self,app,**kwargs)
flask.testing.FlaskCliRunner.__init__(self,app,**kwargs)
flask.testing.FlaskCliRunner.invoke(self,cli=None,args=None,**kwargs)
flask.testing.FlaskClient(self,*args,**kwargs)
flask.testing.FlaskClient.__enter__(self)
flask.testing.FlaskClient.__exit__(self,exc_type,exc_value,tb)
flask.testing.FlaskClient.__init__(self,*args,**kwargs)
flask.testing.FlaskClient.open(self,*args,**kwargs)
flask.testing.FlaskClient.session_transaction(self,*args,**kwargs)
flask.testing.make_test_environ_builder(app,path='/',base_url=None,subdomain=None,url_scheme=None,*args,**kwargs)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/logging.py----------------------------------------
A:flask.logging.level->logging.getLogger('flask.app').getEffectiveLevel()
A:flask.logging.default_handler->logging.StreamHandler(wsgi_errors_stream)
A:flask.logging.logger->logging.getLogger('flask.app')
flask.logging.create_logger(app)
flask.logging.has_level_handler(logger)
flask.logging.wsgi_errors_stream()


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/debughelpers.py----------------------------------------
A:flask.debughelpers.form_matches->request.form.getlist(key)
A:flask.debughelpers.self.msg->''.join(buf)
A:flask.debughelpers.src_info->repr(srcobj)
flask.debughelpers.DebugFilesKeyError(self,request,key)
flask.debughelpers.DebugFilesKeyError.__init__(self,request,key)
flask.debughelpers.DebugFilesKeyError.__str__(self)
flask.debughelpers.FormDataRoutingRedirect(self,request)
flask.debughelpers.FormDataRoutingRedirect.__init__(self,request)
flask.debughelpers.UnexpectedUnicodeError(AssertionError,UnicodeError)
flask.debughelpers._dump_loader_info(loader)
flask.debughelpers.attach_enctype_error_multidict(request)
flask.debughelpers.explain_ignored_app_run()
flask.debughelpers.explain_template_loading_attempts(app,template,attempts)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/app.py----------------------------------------
A:flask.app._sentinel->object()
A:flask.app.testing->ConfigAttribute('TESTING')
A:flask.app.secret_key->ConfigAttribute('SECRET_KEY')
A:flask.app.session_cookie_name->ConfigAttribute('SESSION_COOKIE_NAME')
A:flask.app.permanent_session_lifetime->ConfigAttribute('PERMANENT_SESSION_LIFETIME', get_converter=_make_timedelta)
A:flask.app.send_file_max_age_default->ConfigAttribute('SEND_FILE_MAX_AGE_DEFAULT', get_converter=_make_timedelta)
A:flask.app.use_x_sendfile->ConfigAttribute('USE_X_SENDFILE')
A:flask.app.jinja_options->ImmutableDict(extensions=['jinja2.ext.autoescape', 'jinja2.ext.with_'])
A:flask.app.default_config->ImmutableDict({'ENV': None, 'DEBUG': None, 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': None, 'PERMANENT_SESSION_LIFETIME': timedelta(days=31), 'USE_X_SENDFILE': False, 'SERVER_NAME': None, 'APPLICATION_ROOT': '/', 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'SESSION_COOKIE_SAMESITE': None, 'SESSION_REFRESH_EACH_REQUEST': True, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': timedelta(hours=12), 'TRAP_BAD_REQUEST_ERRORS': None, 'TRAP_HTTP_EXCEPTIONS': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'JSONIFY_PRETTYPRINT_REGULAR': False, 'JSONIFY_MIMETYPE': 'application/json', 'TEMPLATES_AUTO_RELOAD': None, 'MAX_COOKIE_SIZE': 4093})
A:flask.app.session_interface->SecureCookieSessionInterface()
A:flask.app.instance_path->self.auto_find_instance_path()
A:flask.app.self.config->self.make_config(instance_relative_config)
A:flask.app.self.url_map->Map()
A:flask.app.self._before_request_lock->Lock()
A:flask.app.self.cli->cli.AppGroup(self.name)
A:flask.app.fn->getattr(sys.modules['__main__'], '__file__', None)
A:flask.app.defaults->dict(self.default_config)
A:flask.app.defaults['ENV']->get_env()
A:flask.app.defaults['DEBUG']->get_debug_flag()
A:flask.app.(prefix, package_path)->find_package(self.import_name)
A:flask.app.templates_auto_reload->property(_get_templates_auto_reload, _set_templates_auto_reload)
A:flask.app.options->dict(self.jinja_options)
A:flask.app.rv->func()
A:flask.app.funcs->chain(funcs, reversed(self.teardown_request_funcs[bp]))
A:flask.app.orig_ctx->context.copy()
A:flask.app.env->ConfigAttribute('ENV')
A:flask.app.debug->property(_get_debug, _set_debug)
A:flask.app.self.env->get_env()
A:flask.app.self.debug->bool(debug)
A:flask.app.server_name->self.config.get('SERVER_NAME')
A:flask.app.(sn_host, _, sn_port)->self.config.get('SERVER_NAME').partition(':')
A:flask.app.port->int(port or sn_port or _port)
A:flask.app.endpoint->dict(self.jinja_options).pop('endpoint', None)
A:flask.app.methods->adapter.allowed_methods()
A:flask.app.required_methods->set(getattr(view_func, 'required_methods', ()))
A:flask.app.provide_automatic_options->getattr(view_func, 'provide_automatic_options', None)
A:flask.app.rule->self.url_rule_class(rule, methods=methods, **options)
A:flask.app.old_func->self.view_functions.get(endpoint)
A:flask.app.(exc_class, code)->self._get_exc_class_and_code(type(e))
A:flask.app.handlers->self.error_handler_spec.setdefault(key, {}).setdefault(code, {})
A:flask.app.handler_map->self.error_handler_spec.setdefault(name, {}).get(c)
A:flask.app.handler->self._find_error_handler(InternalServerError())
A:flask.app.(exc_type, exc_value, tb)->sys.exc_info()
A:flask.app.e.description->"KeyError: '{0}'".format(*e.args)
A:flask.app.response->self.handle_exception(e)
A:flask.app.len_rv->len(rv)
A:flask.app.new_error->TypeError('{e}\nThe view function did not return a valid response. The return type must be a string, tuple, Response instance, or WSGI callable, but it was a {rv.__class__.__name__}.'.format(e=e, rv=rv))
A:flask.app.builder->make_test_environ_builder(self, *args, **kwargs)
A:flask.app.ctx->self.request_context(environ)
flask.Flask(self,import_name,static_url_path=None,static_folder='static',static_host=None,host_matching=False,subdomain_matching=False,template_folder='templates',instance_path=None,instance_relative_config=False,root_path=None)
flask.Flask.__repr__(self)
flask.Flask._find_error_handler(self,e)
flask.Flask._get_debug(self)
flask.Flask._get_exc_class_and_code(exc_class_or_code)
flask.Flask._get_templates_auto_reload(self)
flask.Flask._register_error_handler(self,key,code_or_exception,f)
flask.Flask._set_debug(self,value)
flask.Flask._set_templates_auto_reload(self,value)
flask.Flask.add_template_filter(self,f,name=None)
flask.Flask.add_template_global(self,f,name=None)
flask.Flask.add_template_test(self,f,name=None)
flask.Flask.add_url_rule(self,rule,endpoint=None,view_func=None,provide_automatic_options=None,**options)
flask.Flask.after_request(self,f)
flask.Flask.app_context(self)
flask.Flask.auto_find_instance_path(self)
flask.Flask.before_first_request(self,f)
flask.Flask.before_request(self,f)
flask.Flask.context_processor(self,f)
flask.Flask.create_global_jinja_loader(self)
flask.Flask.create_jinja_environment(self)
flask.Flask.create_url_adapter(self,request)
flask.Flask.dispatch_request(self)
flask.Flask.do_teardown_appcontext(self,exc=_sentinel)
flask.Flask.do_teardown_request(self,exc=_sentinel)
flask.Flask.endpoint(self,endpoint)
flask.Flask.errorhandler(self,code_or_exception)
flask.Flask.finalize_request(self,rv,from_error_handler=False)
flask.Flask.full_dispatch_request(self)
flask.Flask.got_first_request(self)
flask.Flask.handle_exception(self,e)
flask.Flask.handle_http_exception(self,e)
flask.Flask.handle_url_build_error(self,error,endpoint,values)
flask.Flask.handle_user_exception(self,e)
flask.Flask.inject_url_defaults(self,endpoint,values)
flask.Flask.iter_blueprints(self)
flask.Flask.jinja_env(self)
flask.Flask.log_exception(self,exc_info)
flask.Flask.logger(self)
flask.Flask.make_config(self,instance_relative=False)
flask.Flask.make_default_options_response(self)
flask.Flask.make_null_session(self)
flask.Flask.make_response(self,rv)
flask.Flask.make_shell_context(self)
flask.Flask.name(self)
flask.Flask.open_instance_resource(self,resource,mode='rb')
flask.Flask.open_session(self,request)
flask.Flask.preprocess_request(self)
flask.Flask.preserve_context_on_exception(self)
flask.Flask.process_response(self,response)
flask.Flask.propagate_exceptions(self)
flask.Flask.raise_routing_exception(self,request)
flask.Flask.register_blueprint(self,blueprint,**options)
flask.Flask.register_error_handler(self,code_or_exception,f)
flask.Flask.request_context(self,environ)
flask.Flask.route(self,rule,**options)
flask.Flask.run(self,host=None,port=None,debug=None,load_dotenv=True,**options)
flask.Flask.save_session(self,session,response)
flask.Flask.select_jinja_autoescape(self,filename)
flask.Flask.shell_context_processor(self,f)
flask.Flask.should_ignore_error(self,error)
flask.Flask.teardown_appcontext(self,f)
flask.Flask.teardown_request(self,f)
flask.Flask.template_filter(self,name=None)
flask.Flask.template_global(self,name=None)
flask.Flask.template_test(self,name=None)
flask.Flask.test_cli_runner(self,**kwargs)
flask.Flask.test_client(self,use_cookies=True,**kwargs)
flask.Flask.test_request_context(self,*args,**kwargs)
flask.Flask.trap_http_exception(self,e)
flask.Flask.try_trigger_before_first_request_functions(self)
flask.Flask.update_template_context(self,context)
flask.Flask.url_defaults(self,f)
flask.Flask.url_value_preprocessor(self,f)
flask.Flask.wsgi_app(self,environ,start_response)
flask.app.Flask(self,import_name,static_url_path=None,static_folder='static',static_host=None,host_matching=False,subdomain_matching=False,template_folder='templates',instance_path=None,instance_relative_config=False,root_path=None)
flask.app.Flask.__init__(self,import_name,static_url_path=None,static_folder='static',static_host=None,host_matching=False,subdomain_matching=False,template_folder='templates',instance_path=None,instance_relative_config=False,root_path=None)
flask.app.Flask.__repr__(self)
flask.app.Flask._find_error_handler(self,e)
flask.app.Flask._get_debug(self)
flask.app.Flask._get_exc_class_and_code(exc_class_or_code)
flask.app.Flask._get_templates_auto_reload(self)
flask.app.Flask._register_error_handler(self,key,code_or_exception,f)
flask.app.Flask._set_debug(self,value)
flask.app.Flask._set_templates_auto_reload(self,value)
flask.app.Flask.add_template_filter(self,f,name=None)
flask.app.Flask.add_template_global(self,f,name=None)
flask.app.Flask.add_template_test(self,f,name=None)
flask.app.Flask.add_url_rule(self,rule,endpoint=None,view_func=None,provide_automatic_options=None,**options)
flask.app.Flask.after_request(self,f)
flask.app.Flask.app_context(self)
flask.app.Flask.auto_find_instance_path(self)
flask.app.Flask.before_first_request(self,f)
flask.app.Flask.before_request(self,f)
flask.app.Flask.context_processor(self,f)
flask.app.Flask.create_global_jinja_loader(self)
flask.app.Flask.create_jinja_environment(self)
flask.app.Flask.create_url_adapter(self,request)
flask.app.Flask.dispatch_request(self)
flask.app.Flask.do_teardown_appcontext(self,exc=_sentinel)
flask.app.Flask.do_teardown_request(self,exc=_sentinel)
flask.app.Flask.endpoint(self,endpoint)
flask.app.Flask.errorhandler(self,code_or_exception)
flask.app.Flask.finalize_request(self,rv,from_error_handler=False)
flask.app.Flask.full_dispatch_request(self)
flask.app.Flask.got_first_request(self)
flask.app.Flask.handle_exception(self,e)
flask.app.Flask.handle_http_exception(self,e)
flask.app.Flask.handle_url_build_error(self,error,endpoint,values)
flask.app.Flask.handle_user_exception(self,e)
flask.app.Flask.inject_url_defaults(self,endpoint,values)
flask.app.Flask.iter_blueprints(self)
flask.app.Flask.jinja_env(self)
flask.app.Flask.log_exception(self,exc_info)
flask.app.Flask.logger(self)
flask.app.Flask.make_config(self,instance_relative=False)
flask.app.Flask.make_default_options_response(self)
flask.app.Flask.make_null_session(self)
flask.app.Flask.make_response(self,rv)
flask.app.Flask.make_shell_context(self)
flask.app.Flask.name(self)
flask.app.Flask.open_instance_resource(self,resource,mode='rb')
flask.app.Flask.open_session(self,request)
flask.app.Flask.preprocess_request(self)
flask.app.Flask.preserve_context_on_exception(self)
flask.app.Flask.process_response(self,response)
flask.app.Flask.propagate_exceptions(self)
flask.app.Flask.raise_routing_exception(self,request)
flask.app.Flask.register_blueprint(self,blueprint,**options)
flask.app.Flask.register_error_handler(self,code_or_exception,f)
flask.app.Flask.request_context(self,environ)
flask.app.Flask.route(self,rule,**options)
flask.app.Flask.run(self,host=None,port=None,debug=None,load_dotenv=True,**options)
flask.app.Flask.save_session(self,session,response)
flask.app.Flask.select_jinja_autoescape(self,filename)
flask.app.Flask.shell_context_processor(self,f)
flask.app.Flask.should_ignore_error(self,error)
flask.app.Flask.teardown_appcontext(self,f)
flask.app.Flask.teardown_request(self,f)
flask.app.Flask.template_filter(self,name=None)
flask.app.Flask.template_global(self,name=None)
flask.app.Flask.template_test(self,name=None)
flask.app.Flask.test_cli_runner(self,**kwargs)
flask.app.Flask.test_client(self,use_cookies=True,**kwargs)
flask.app.Flask.test_request_context(self,*args,**kwargs)
flask.app.Flask.trap_http_exception(self,e)
flask.app.Flask.try_trigger_before_first_request_functions(self)
flask.app.Flask.update_template_context(self,context)
flask.app.Flask.url_defaults(self,f)
flask.app.Flask.url_value_preprocessor(self,f)
flask.app.Flask.wsgi_app(self,environ,start_response)
flask.app._make_timedelta(value)
flask.app.setupmethod(f)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/signals.py----------------------------------------
A:flask.signals._signals->Namespace()
A:flask.signals.template_rendered->Namespace().signal('template-rendered')
A:flask.signals.before_render_template->Namespace().signal('before-render-template')
A:flask.signals.request_started->Namespace().signal('request-started')
A:flask.signals.request_finished->Namespace().signal('request-finished')
A:flask.signals.request_tearing_down->Namespace().signal('request-tearing-down')
A:flask.signals.got_request_exception->Namespace().signal('got-request-exception')
A:flask.signals.appcontext_tearing_down->Namespace().signal('appcontext-tearing-down')
A:flask.signals.appcontext_pushed->Namespace().signal('appcontext-pushed')
A:flask.signals.appcontext_popped->Namespace().signal('appcontext-popped')
A:flask.signals.message_flashed->Namespace().signal('message-flashed')


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/config.py----------------------------------------
A:flask.config.rv->os.environ.get(variable_name)
A:flask.config.filename->os.path.join(self.root_path, filename)
A:flask.config.d->types.ModuleType('config')
A:flask.config.obj->json.loads(json_file.read())
A:flask.config.self[key]->getattr(obj, key)
A:flask.config.key->key.lower().lower()
flask.Config(self,root_path,defaults=None)
flask.Config.__repr__(self)
flask.Config.from_envvar(self,variable_name,silent=False)
flask.Config.from_json(self,filename,silent=False)
flask.Config.from_mapping(self,*mapping,**kwargs)
flask.Config.from_object(self,obj)
flask.Config.from_pyfile(self,filename,silent=False)
flask.Config.get_namespace(self,namespace,lowercase=True,trim_namespace=True)
flask.ConfigAttribute(self,name,get_converter=None)
flask.ConfigAttribute.__get__(self,obj,type=None)
flask.ConfigAttribute.__set__(self,obj,value)
flask.config.Config(self,root_path,defaults=None)
flask.config.Config.__init__(self,root_path,defaults=None)
flask.config.Config.__repr__(self)
flask.config.Config.from_envvar(self,variable_name,silent=False)
flask.config.Config.from_json(self,filename,silent=False)
flask.config.Config.from_mapping(self,*mapping,**kwargs)
flask.config.Config.from_object(self,obj)
flask.config.Config.from_pyfile(self,filename,silent=False)
flask.config.Config.get_namespace(self,namespace,lowercase=True,trim_namespace=True)
flask.config.ConfigAttribute(self,name,get_converter=None)
flask.config.ConfigAttribute.__get__(self,obj,type=None)
flask.config.ConfigAttribute.__init__(self,name,get_converter=None)
flask.config.ConfigAttribute.__set__(self,obj,value)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/cli.py----------------------------------------
A:flask.cli.app->DispatchingApp(info.load_app, use_eager_loading=eager_loading)
A:flask.cli.app_factory->getattr(module, attr_name, None)
A:flask.cli.args_spec->getargspec(app_factory)
A:flask.cli.match->re.match('^ *([^ ()]+) *(?:\\((.*?) *,? *\\))? *$', app_name)
A:flask.cli.(name, args)->re.match('^ *([^ ()]+) *(?:\\((.*?) *,? *\\))? *$', app_name).groups()
A:flask.cli.attr->getattr(module, name)
A:flask.cli.args->ast.literal_eval('({args},)'.format(args=args))
A:flask.cli.path->dotenv.find_dotenv(name, usecwd=True)
A:flask.cli.(path, name)->os.path.split(path)
A:flask.cli.version_option->click.Option(['--version'], help='Show the flask version', expose_value=False, callback=get_version, is_flag=True, is_eager=True)
A:flask.cli.self._lock->Lock()
A:flask.cli.self._bg_loading_exc_info->sys.exc_info()
A:flask.cli.t->Thread(target=_load_app, args=())
A:flask.cli.self._apprv->self.loader()
A:flask.cli.rv->set(click.Group.list_commands(self, ctx))
A:flask.cli.import_name->prepare_import(path)
A:flask.cli.debug->get_debug_flag()
A:flask.cli.pass_script_info->click.make_pass_decorator(ScriptInfo, ensure=True)
A:flask.cli.wrap_for_ctx->kwargs.pop('with_appcontext', True)
A:flask.cli.f->with_appcontext(f)
A:flask.cli.params->list(extra.pop('params', None) or ())
A:flask.cli.info->ctx.ensure_object(ScriptInfo)
A:flask.cli.obj->import_string(value, silent=True)
A:flask.cli.new_dir->os.path.dirname(path)
A:flask.cli.message->' * Serving Flask app "{0}"'.format(app_import_path)
A:flask.cli.self.path_type->click.Path(exists=True, dir_okay=False, resolve_path=True)
A:flask.cli.value->click.STRING(value, param, ctx).lower()
A:flask.cli.cert->ctx.params.get('cert')
A:flask.cli.is_context->isinstance(cert, ssl.SSLContext)
A:flask.cli.startup->os.environ.get('PYTHONSTARTUP')
A:flask.cli.rules->sorted(rules, key=lambda rule: sorted(rule.methods))
A:flask.cli.ignored_methods->set(() if all_methods else ('HEAD', 'OPTIONS'))
A:flask.cli.row->'{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}'.format(*widths)
A:flask.cli.cli->FlaskGroup(help="A general utility script for Flask applications.\n\nProvides commands from Flask, extensions, and the application. Loads the\napplication defined in the FLASK_APP environment variable, or from a wsgi.py\nfile. Setting the FLASK_ENV environment variable to 'development' will enable\ndebug mode.\n\n\x08\n  {prefix}{cmd} FLASK_APP=hello.py\n  {prefix}{cmd} FLASK_ENV=development\n  {prefix}flask run\n".format(cmd='export' if os.name == 'posix' else 'set', prefix='$ ' if os.name == 'posix' else '> '))
flask.cli.AppGroup(click.Group)
flask.cli.AppGroup.command(self,*args,**kwargs)
flask.cli.AppGroup.group(self,*args,**kwargs)
flask.cli.CertParamType(self)
flask.cli.CertParamType.__init__(self)
flask.cli.CertParamType.convert(self,value,param,ctx)
flask.cli.DispatchingApp(self,loader,use_eager_loading=False)
flask.cli.DispatchingApp.__init__(self,loader,use_eager_loading=False)
flask.cli.DispatchingApp._flush_bg_loading_exception(self)
flask.cli.DispatchingApp._load_in_background(self)
flask.cli.DispatchingApp._load_unlocked(self)
flask.cli.FlaskGroup(self,add_default_commands=True,create_app=None,add_version_option=True,load_dotenv=True,**extra)
flask.cli.FlaskGroup.__init__(self,add_default_commands=True,create_app=None,add_version_option=True,load_dotenv=True,**extra)
flask.cli.FlaskGroup._load_plugin_commands(self)
flask.cli.FlaskGroup.get_command(self,ctx,name)
flask.cli.FlaskGroup.list_commands(self,ctx)
flask.cli.FlaskGroup.main(self,*args,**kwargs)
flask.cli.NoAppException(click.UsageError)
flask.cli.ScriptInfo(self,app_import_path=None,create_app=None)
flask.cli.ScriptInfo.__init__(self,app_import_path=None,create_app=None)
flask.cli.ScriptInfo.load_app(self)
flask.cli._called_with_wrong_args(factory)
flask.cli._path_is_ancestor(path,other)
flask.cli._validate_key(ctx,param,value)
flask.cli.call_factory(script_info,app_factory,arguments=())
flask.cli.find_app_by_string(script_info,module,app_name)
flask.cli.find_best_app(script_info,module)
flask.cli.get_version(ctx,param,value)
flask.cli.load_dotenv(path=None)
flask.cli.locate_app(script_info,module_name,app_name,raise_if_not_found=True)
flask.cli.main(as_module=False)
flask.cli.prepare_import(path)
flask.cli.routes_command(sort,all_methods)
flask.cli.run_command(info,host,port,reload,debugger,eager_loading,with_threads,cert)
flask.cli.shell_command()
flask.cli.show_server_banner(env,debug,app_import_path,eager_loading)
flask.cli.with_appcontext(f)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/views.py----------------------------------------
A:flask.views.http_method_funcs->frozenset(['get', 'post', 'head', 'options', 'delete', 'put', 'trace', 'patch'])
A:flask.views.self->decorator(view).view_class(*class_args, **class_kwargs)
A:flask.views.view->decorator(view)
A:flask.views.methods->set()
A:flask.views.meth->getattr(self, 'get', None)
flask.views.MethodView(with_metaclass(MethodViewType,View))
flask.views.MethodView.dispatch_request(self,*args,**kwargs)
flask.views.MethodViewType(cls,name,bases,d)
flask.views.MethodViewType.__init__(cls,name,bases,d)
flask.views.View(object)
flask.views.View.as_view(cls,name,*class_args,**class_kwargs)
flask.views.View.dispatch_request(self)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/_compat.py----------------------------------------
flask._compat.with_metaclass(meta,*bases)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/typing_extensions.py----------------------------------------
A:flask.typing_extensions.dict_copy->dict(dct)
A:flask.typing_extensions._marker->object()
A:flask.typing_extensions.elen->len(cls.__parameters__)
A:flask.typing_extensions.alen->len(parameters)
A:flask.typing_extensions.num_tv_tuples->sum((isinstance(p, TypeVarTuple) for p in parameters))
A:flask.typing_extensions.NoReturn->_NoReturn(_root=True)
A:flask.typing_extensions.T->typing.TypeVar('T')
A:flask.typing_extensions.KT->typing.TypeVar('KT')
A:flask.typing_extensions.VT->typing.TypeVar('VT')
A:flask.typing_extensions.T_co->typing.TypeVar('T_co', covariant=True)
A:flask.typing_extensions.T_contra->typing.TypeVar('T_contra', contravariant=True)
A:flask.typing_extensions.item->typing._type_check(parameters, f'{self._name} accepts only single type')
A:flask.typing_extensions.Final->_Final(_root=True)
A:flask.typing_extensions.cls->type(self)
A:flask.typing_extensions.new_tp->typing._eval_type(self.__type__, globalns, localns)
A:flask.typing_extensions.r->super().__repr__()
A:flask.typing_extensions.Literal->_Literal(_root=True)
A:flask.typing_extensions.res->super()._subs_tree(tvars=tvars, args=args)
A:flask.typing_extensions.OrderedDict->typing._alias(collections.OrderedDict, (KT, VT))
A:flask.typing_extensions.attrs->set()
A:flask.typing_extensions.annotations->getattr(base, '__annotations__', {})
A:flask.typing_extensions.params->tuple((_type_check(p, msg) for p in params))
A:flask.typing_extensions.tvars->_type_vars(params)
A:flask.typing_extensions.tvarset->set(tvars)
A:flask.typing_extensions.gvarset->set(gvars)
A:flask.typing_extensions.s_vars->', '.join((str(t) for t in tvars if t not in gvarset))
A:flask.typing_extensions.s_args->', '.join((str(g) for g in gvars))
A:flask.typing_extensions.cls.__parameters__->tuple(tvars)
A:flask.typing_extensions.cls._is_protocol->any((b is Protocol or (isinstance(b, _ProtocolMeta) and b.__origin__ is Protocol) for b in cls.__bases__))
A:flask.typing_extensions.bases->tuple((b for b in bases if b is not typing.Generic))
A:flask.typing_extensions.self->super(GenericMeta, cls).__new__(cls, name, bases, namespace, _root=True)
A:flask.typing_extensions.self.__next_in_mro__->_next_in_mro(self)
A:flask.typing_extensions.typename->kwargs.pop('_typename')
A:flask.typing_extensions.fields->kwargs.pop('_fields')
A:flask.typing_extensions.ns['__module__']->sys._getframe(1).f_globals.get('__name__', '__main__')
A:flask.typing_extensions.tp_dict->super().__new__(cls, name, (dict,), ns)
A:flask.typing_extensions.own_annotations->ns.get('__annotations__', {})
A:flask.typing_extensions.required_keys->set()
A:flask.typing_extensions.optional_keys->set()
A:flask.typing_extensions.annotation_origin->get_origin(annotation_type)
A:flask.typing_extensions.annotation_args->get_args(annotation_type)
A:flask.typing_extensions.own_annotation_keys->set(own_annotations.keys())
A:flask.typing_extensions.tp_dict.__required_keys__->frozenset(required_keys)
A:flask.typing_extensions.tp_dict.__optional_keys__->frozenset(optional_keys)
A:flask.typing_extensions.TypedDict->_TypedDictMeta('TypedDict', (dict,), {})
A:flask.typing_extensions.stripped_args->tuple((_strip_extras(a) for a in t.__args__))
A:flask.typing_extensions.hint->typing.get_type_hints(obj, globalns=globalns, localns=localns)
A:flask.typing_extensions.origin->typing._type_check(params[0], msg)
A:flask.typing_extensions.metadata->tuple(params[1:])
A:flask.typing_extensions.tp_repr->origin[0]._tree_repr(origin)
A:flask.typing_extensions.metadata_reprs->', '.join((repr(arg) for arg in metadata))
A:flask.typing_extensions.tree->super(GenericMeta, cls).__new__(cls, name, bases, namespace, _root=True)._subs_tree()
A:flask.typing_extensions.tp->typing._type_check(params[0], msg)
A:flask.typing_extensions.cons->super(GenericMeta, cls).__new__(cls, name, bases, namespace, _root=True)._get_cons()
A:flask.typing_extensions.result->cons(*args, **kwargs)
A:flask.typing_extensions.TypeAlias->_TypeAliasBase(_root=True)
A:flask.typing_extensions.self.__covariant__->bool(covariant)
A:flask.typing_extensions.self.__contravariant__->bool(contravariant)
A:flask.typing_extensions.self.__bound__->typing._type_check(bound, 'Bound must be a type.')
A:flask.typing_extensions.def_mod->sys._getframe(1).f_globals.get('__name__', '__main__')
A:flask.typing_extensions.parameters->tuple((typing._type_check(p, msg) for p in parameters))
A:flask.typing_extensions.Concatenate->_ConcatenateAliasBase(_root=True)
A:flask.typing_extensions.TypeGuard->_TypeGuard(_root=True)
A:flask.typing_extensions.LiteralString->_LiteralString(_root=True)
A:flask.typing_extensions.Self->_Self(_root=True)
A:flask.typing_extensions.Never->_Never(_root=True)
A:flask.typing_extensions.Required->_Required(_root=True)
A:flask.typing_extensions.NotRequired->_NotRequired(_root=True)
A:flask.typing_extensions.Unpack->_Unpack(_root=True)
flask.typing_extensions.IntVar(name)
flask.typing_extensions.TypeVarTuple(self,name)
flask.typing_extensions.TypeVarTuple.__eq__(self,other)
flask.typing_extensions.TypeVarTuple.__hash__(self)
flask.typing_extensions.TypeVarTuple.__init__(self,name)
flask.typing_extensions.TypeVarTuple.__init_subclass__(self,*args,**kwds)
flask.typing_extensions.TypeVarTuple.__iter__(self)
flask.typing_extensions.TypeVarTuple.__reduce__(self)
flask.typing_extensions.TypeVarTuple.__repr__(self)
flask.typing_extensions._ExtensionsGenericMeta(GenericMeta)
flask.typing_extensions._ExtensionsGenericMeta.__subclasscheck__(self,subclass)
flask.typing_extensions._check_generic(cls,parameters,elen=_marker)
flask.typing_extensions._collect_type_vars(types,typevar_types=None)
flask.typing_extensions._concatenate_getitem(self,parameters)
flask.typing_extensions._get_protocol_attrs(cls)
flask.typing_extensions._gorg(cls)
flask.typing_extensions._is_callable_members_only(cls)
flask.typing_extensions._no_slots_copy(dct)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/templating.py----------------------------------------
A:flask.templating.options['loader']->app.create_global_jinja_loader()
A:flask.templating.rv->template.render(context)
A:flask.templating.result->set()
flask.render_template(template_name_or_list,**context)
flask.render_template_string(source,**context)
flask.templating.DispatchingJinjaLoader(self,app)
flask.templating.DispatchingJinjaLoader.__init__(self,app)
flask.templating.DispatchingJinjaLoader._get_source_explained(self,environment,template)
flask.templating.DispatchingJinjaLoader._get_source_fast(self,environment,template)
flask.templating.DispatchingJinjaLoader._iter_loaders(self,template)
flask.templating.DispatchingJinjaLoader.get_source(self,environment,template)
flask.templating.DispatchingJinjaLoader.list_templates(self)
flask.templating.Environment(self,app,**options)
flask.templating.Environment.__init__(self,app,**options)
flask.templating._default_template_ctx_processor()
flask.templating._render(template,context,app)
flask.templating.render_template(template_name_or_list,**context)
flask.templating.render_template_string(source,**context)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/blueprints.py----------------------------------------
A:flask.blueprints.subdomain->self.options.get('subdomain')
A:flask.blueprints.url_prefix->self.options.get('url_prefix')
A:flask.blueprints.self.url_defaults->dict(self.blueprint.url_values_defaults)
A:flask.blueprints.rule->'/'.join((self.url_prefix.rstrip('/'), rule.lstrip('/')))
A:flask.blueprints.endpoint->options.pop('endpoint', f.__name__)
A:flask.blueprints.defaults->dict(defaults, **options.pop('defaults'))
A:flask.blueprints.state->self.make_setup_state(app, options, first_registration)
flask.Blueprint(self,name,import_name,static_folder=None,static_url_path=None,template_folder=None,url_prefix=None,subdomain=None,url_defaults=None,root_path=None)
flask.Blueprint.add_app_template_filter(self,f,name=None)
flask.Blueprint.add_app_template_global(self,f,name=None)
flask.Blueprint.add_app_template_test(self,f,name=None)
flask.Blueprint.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.Blueprint.after_app_request(self,f)
flask.Blueprint.after_request(self,f)
flask.Blueprint.app_context_processor(self,f)
flask.Blueprint.app_errorhandler(self,code)
flask.Blueprint.app_template_filter(self,name=None)
flask.Blueprint.app_template_global(self,name=None)
flask.Blueprint.app_template_test(self,name=None)
flask.Blueprint.app_url_defaults(self,f)
flask.Blueprint.app_url_value_preprocessor(self,f)
flask.Blueprint.before_app_first_request(self,f)
flask.Blueprint.before_app_request(self,f)
flask.Blueprint.before_request(self,f)
flask.Blueprint.context_processor(self,f)
flask.Blueprint.endpoint(self,endpoint)
flask.Blueprint.errorhandler(self,code_or_exception)
flask.Blueprint.make_setup_state(self,app,options,first_registration=False)
flask.Blueprint.record(self,func)
flask.Blueprint.record_once(self,func)
flask.Blueprint.register(self,app,options,first_registration=False)
flask.Blueprint.register_error_handler(self,code_or_exception,f)
flask.Blueprint.route(self,rule,**options)
flask.Blueprint.teardown_app_request(self,f)
flask.Blueprint.teardown_request(self,f)
flask.Blueprint.url_defaults(self,f)
flask.Blueprint.url_value_preprocessor(self,f)
flask.BlueprintSetupState(self,blueprint,app,options,first_registration)
flask.BlueprintSetupState.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.blueprints.Blueprint(self,name,import_name,static_folder=None,static_url_path=None,template_folder=None,url_prefix=None,subdomain=None,url_defaults=None,root_path=None)
flask.blueprints.Blueprint.__init__(self,name,import_name,static_folder=None,static_url_path=None,template_folder=None,url_prefix=None,subdomain=None,url_defaults=None,root_path=None)
flask.blueprints.Blueprint.add_app_template_filter(self,f,name=None)
flask.blueprints.Blueprint.add_app_template_global(self,f,name=None)
flask.blueprints.Blueprint.add_app_template_test(self,f,name=None)
flask.blueprints.Blueprint.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.blueprints.Blueprint.after_app_request(self,f)
flask.blueprints.Blueprint.after_request(self,f)
flask.blueprints.Blueprint.app_context_processor(self,f)
flask.blueprints.Blueprint.app_errorhandler(self,code)
flask.blueprints.Blueprint.app_template_filter(self,name=None)
flask.blueprints.Blueprint.app_template_global(self,name=None)
flask.blueprints.Blueprint.app_template_test(self,name=None)
flask.blueprints.Blueprint.app_url_defaults(self,f)
flask.blueprints.Blueprint.app_url_value_preprocessor(self,f)
flask.blueprints.Blueprint.before_app_first_request(self,f)
flask.blueprints.Blueprint.before_app_request(self,f)
flask.blueprints.Blueprint.before_request(self,f)
flask.blueprints.Blueprint.context_processor(self,f)
flask.blueprints.Blueprint.endpoint(self,endpoint)
flask.blueprints.Blueprint.errorhandler(self,code_or_exception)
flask.blueprints.Blueprint.make_setup_state(self,app,options,first_registration=False)
flask.blueprints.Blueprint.record(self,func)
flask.blueprints.Blueprint.record_once(self,func)
flask.blueprints.Blueprint.register(self,app,options,first_registration=False)
flask.blueprints.Blueprint.register_error_handler(self,code_or_exception,f)
flask.blueprints.Blueprint.route(self,rule,**options)
flask.blueprints.Blueprint.teardown_app_request(self,f)
flask.blueprints.Blueprint.teardown_request(self,f)
flask.blueprints.Blueprint.url_defaults(self,f)
flask.blueprints.Blueprint.url_value_preprocessor(self,f)
flask.blueprints.BlueprintSetupState(self,blueprint,app,options,first_registration)
flask.blueprints.BlueprintSetupState.__init__(self,blueprint,app,options,first_registration)
flask.blueprints.BlueprintSetupState.add_url_rule(self,rule,endpoint=None,view_func=None,**options)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/wrappers.py----------------------------------------
A:flask.wrappers.data->self._get_data_for_json(cache=cache)
A:flask.wrappers.rv->self.on_json_loading_failed(e)
flask.wrappers.JSONMixin(object)
flask.wrappers.JSONMixin._get_data_for_json(self,cache)
flask.wrappers.JSONMixin.get_json(self,force=False,silent=False,cache=True)
flask.wrappers.JSONMixin.is_json(self)
flask.wrappers.JSONMixin.json(self)
flask.wrappers.JSONMixin.on_json_loading_failed(self,e)
flask.wrappers.Request(RequestBase,JSONMixin)
flask.wrappers.Request._load_form_data(self)
flask.wrappers.Request.blueprint(self)
flask.wrappers.Request.endpoint(self)
flask.wrappers.Request.max_content_length(self)
flask.wrappers.Response(ResponseBase,JSONMixin)
flask.wrappers.Response._get_data_for_json(self,cache)
flask.wrappers.Response.max_cookie_size(self)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/__main__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/helpers.py----------------------------------------
A:flask.helpers._missing->object()
A:flask.helpers._os_alt_seps->list((sep for sep in [os.path.sep, os.path.altsep] if sep not in (None, '/')))
A:flask.helpers.val->os.environ.get('FLASK_SKIP_DOTENV')
A:flask.helpers.gen->generator_or_function(*args, **kwargs)
A:flask.helpers.wrapped_g->generator()
A:flask.helpers.external->values.pop('_external', True)
A:flask.helpers.anchor->values.pop('_anchor', None)
A:flask.helpers.method->values.pop('_method', None)
A:flask.helpers.scheme->values.pop('_scheme', None)
A:flask.helpers.rv->rv.make_conditional(request, accept_ranges=True, complete_length=fsize).make_conditional(request, accept_ranges=True, complete_length=fsize)
A:flask.helpers.flashes->list(filter(lambda f: f[0] in category_filter, flashes))
A:flask.helpers.filename->pkgutil.get_loader(root_mod_name).get_filename(root_mod_name)
A:flask.helpers.attachment_filename->attachment_filename.encode('latin-1').encode('latin-1')
A:flask.helpers.headers->Headers()
A:flask.helpers.fsize->os.path.getsize(filename)
A:flask.helpers.file->open(filename, 'rb')
A:flask.helpers.mtime->os.path.getmtime(filename)
A:flask.helpers.data->wrap_file(request.environ, file)
A:flask.helpers.cache_timeout->self.get_send_file_max_age(filename)
A:flask.helpers.rv.expires->int(time() + cache_timeout)
A:flask.helpers.mod->sys.modules.get(import_name)
A:flask.helpers.loader->pkgutil.get_loader(root_mod_name)
A:flask.helpers.filepath->getattr(mod, '__file__', None)
A:flask.helpers.package_path->os.path.dirname(package_path)
A:flask.helpers.(site_parent, site_folder)->os.path.split(package_path)
A:flask.helpers.py_prefix->os.path.abspath(sys.prefix)
A:flask.helpers.(parent, folder)->os.path.split(site_parent)
A:flask.helpers.base_dir->os.path.dirname(parent)
A:flask.helpers.self.lock->RLock()
A:flask.helpers.value->self.func(obj)
A:flask.helpers.root_path->get_root_path(self.import_name)
A:flask.helpers.static_folder->property(_get_static_folder, _set_static_folder, doc='The absolute path to the configured static folder.')
A:flask.helpers.static_url_path->property(_get_static_url_path, _set_static_url_path, doc='The URL prefix that the static route will be registered for.')
flask.flash(message,category='message')
flask.get_flashed_messages(with_categories=False,category_filter=[])
flask.get_template_attribute(template_name,attribute)
flask.helpers._PackageBoundObject(self,import_name,template_folder=None,root_path=None)
flask.helpers._PackageBoundObject.__init__(self,import_name,template_folder=None,root_path=None)
flask.helpers._PackageBoundObject._get_static_folder(self)
flask.helpers._PackageBoundObject._get_static_url_path(self)
flask.helpers._PackageBoundObject._set_static_folder(self,value)
flask.helpers._PackageBoundObject._set_static_url_path(self,value)
flask.helpers._PackageBoundObject.get_send_file_max_age(self,filename)
flask.helpers._PackageBoundObject.has_static_folder(self)
flask.helpers._PackageBoundObject.jinja_loader(self)
flask.helpers._PackageBoundObject.open_resource(self,resource,mode='rb')
flask.helpers._PackageBoundObject.send_static_file(self,filename)
flask.helpers._endpoint_from_view_func(view_func)
flask.helpers._matching_loader_thinks_module_is_package(loader,mod_name)
flask.helpers.find_package(import_name)
flask.helpers.flash(message,category='message')
flask.helpers.get_debug_flag()
flask.helpers.get_env()
flask.helpers.get_flashed_messages(with_categories=False,category_filter=[])
flask.helpers.get_load_dotenv(default=True)
flask.helpers.get_root_path(import_name)
flask.helpers.get_template_attribute(template_name,attribute)
flask.helpers.is_ip(value)
flask.helpers.locked_cached_property(self,func,name=None,doc=None)
flask.helpers.locked_cached_property.__get__(self,obj,type=None)
flask.helpers.locked_cached_property.__init__(self,func,name=None,doc=None)
flask.helpers.make_response(*args)
flask.helpers.safe_join(directory,*pathnames)
flask.helpers.send_file(filename_or_fp,mimetype=None,as_attachment=False,attachment_filename=None,add_etags=True,cache_timeout=None,conditional=False,last_modified=None)
flask.helpers.send_from_directory(directory,filename,**options)
flask.helpers.stream_with_context(generator_or_function)
flask.helpers.total_seconds(td)
flask.helpers.url_for(endpoint,**values)
flask.make_response(*args)
flask.safe_join(directory,*pathnames)
flask.send_file(filename_or_fp,mimetype=None,as_attachment=False,attachment_filename=None,add_etags=True,cache_timeout=None,conditional=False,last_modified=None)
flask.send_from_directory(directory,filename,**options)
flask.stream_with_context(generator_or_function)
flask.url_for(endpoint,**values)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/zipp.py----------------------------------------
A:flask.zipp.path->path.rstrip(posixpath.sep).rstrip(posixpath.sep)
A:flask.zipp.(path, tail)->posixpath.split(path)
A:flask.zipp.parents->itertools.chain.from_iterable(map(_parents, names))
A:flask.zipp.names->self._name_set()
A:flask.zipp.self.__names->super(FastLookup, self).namelist()
A:flask.zipp.self.__lookup->super(FastLookup, self)._name_set()
A:flask.zipp.self.root->FastLookup.make(root)
A:flask.zipp.stream->self.root.open(self.at, zip_mode, pwd=pwd)
A:flask.zipp.subs->map(self._next, self.root.namelist())
A:flask.zipp.next->posixpath.join(self.at, *map(_pathlib_compat, other))
A:flask.zipp.parent_at->posixpath.dirname(self.at.rstrip('/'))
flask.zipp.CompleteDirs(zipfile.ZipFile)
flask.zipp.CompleteDirs._implied_dirs(names)
flask.zipp.CompleteDirs._name_set(self)
flask.zipp.CompleteDirs.make(cls,source)
flask.zipp.CompleteDirs.namelist(self)
flask.zipp.CompleteDirs.resolve_dir(self,name)
flask.zipp.FastLookup(CompleteDirs)
flask.zipp.FastLookup._name_set(self)
flask.zipp.FastLookup.namelist(self)
flask.zipp.Path(self,root,at='')
flask.zipp.Path.__init__(self,root,at='')
flask.zipp.Path.__repr__(self)
flask.zipp.Path.__str__(self)
flask.zipp.Path._is_child(self,path)
flask.zipp.Path._next(self,at)
flask.zipp.Path.exists(self)
flask.zipp.Path.filename(self)
flask.zipp.Path.is_dir(self)
flask.zipp.Path.is_file(self)
flask.zipp.Path.iterdir(self)
flask.zipp.Path.joinpath(self,*other)
flask.zipp.Path.name(self)
flask.zipp.Path.open(self,mode='r',*args,pwd=None,**kwargs)
flask.zipp.Path.parent(self)
flask.zipp.Path.read_bytes(self)
flask.zipp.Path.read_text(self,*args,**kwargs)
flask.zipp.Path.stem(self)
flask.zipp.Path.suffix(self)
flask.zipp.Path.suffixes(self)
flask.zipp._ancestry(path)
flask.zipp._difference(minuend,subtrahend)
flask.zipp._parents(path)
flask.zipp._pathlib_compat(path)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/_winconsole.py----------------------------------------
A:flask.click._winconsole.c_ssize_p->POINTER(c_ssize_t)
A:flask.click._winconsole.GetCommandLineW->WINFUNCTYPE(LPWSTR)(('GetCommandLineW', windll.kernel32))
A:flask.click._winconsole.CommandLineToArgvW->WINFUNCTYPE(POINTER(LPWSTR), LPCWSTR, POINTER(c_int))(('CommandLineToArgvW', windll.shell32))
A:flask.click._winconsole.LocalFree->WINFUNCTYPE(c_void_p, c_void_p)(('LocalFree', windll.kernel32))
A:flask.click._winconsole.STDIN_HANDLE->GetStdHandle(-10)
A:flask.click._winconsole.STDOUT_HANDLE->GetStdHandle(-11)
A:flask.click._winconsole.STDERR_HANDLE->GetStdHandle(-12)
A:flask.click._winconsole.buf->get_buffer(b)
A:flask.click._winconsole.bytes_to_be_read->len(b)
A:flask.click._winconsole.buffer->get_buffer(b, writable=True)
A:flask.click._winconsole.code_units_read->c_ulong()
A:flask.click._winconsole.rv->ReadConsoleW(HANDLE(self.handle), buffer, code_units_to_be_read, byref(code_units_read), None)
A:flask.click._winconsole.bytes_to_be_written->len(b)
A:flask.click._winconsole.code_units_written->c_ulong()
A:flask.click._winconsole.text_stream->_NonClosingTextIOWrapper(io.BufferedWriter(_WindowsConsoleWriter(STDERR_HANDLE)), 'utf-16-le', 'strict', line_buffering=True)
A:flask.click._winconsole.fileno->f.fileno()
A:flask.click._winconsole.handle->msvcrt.get_osfhandle(fileno)
A:flask.click._winconsole.func->_stream_factories.get(f.fileno())
A:flask.click._winconsole.b->getattr(f, 'buffer', None)
flask.click._winconsole.ConsoleStream(self,text_stream:t.TextIO,byte_stream:t.BinaryIO)
flask.click._winconsole.ConsoleStream.__getattr__(self,name:str)->t.Any
flask.click._winconsole.ConsoleStream.__init__(self,text_stream:t.TextIO,byte_stream:t.BinaryIO)
flask.click._winconsole.ConsoleStream.__repr__(self)
flask.click._winconsole.ConsoleStream.isatty(self)->bool
flask.click._winconsole.ConsoleStream.name(self)->str
flask.click._winconsole.ConsoleStream.write(self,x:t.AnyStr)->int
flask.click._winconsole.ConsoleStream.writelines(self,lines:t.Iterable[t.AnyStr])->None
flask.click._winconsole._WindowsConsoleRawIOBase(self,handle)
flask.click._winconsole._WindowsConsoleRawIOBase.__init__(self,handle)
flask.click._winconsole._WindowsConsoleRawIOBase.isatty(self)
flask.click._winconsole._WindowsConsoleReader(_WindowsConsoleRawIOBase)
flask.click._winconsole._WindowsConsoleReader.readable(self)
flask.click._winconsole._WindowsConsoleReader.readinto(self,b)
flask.click._winconsole._WindowsConsoleWriter(_WindowsConsoleRawIOBase)
flask.click._winconsole._WindowsConsoleWriter._get_error_message(errno)
flask.click._winconsole._WindowsConsoleWriter.writable(self)
flask.click._winconsole._WindowsConsoleWriter.write(self,b)
flask.click._winconsole._get_text_stderr(buffer_stream:t.BinaryIO)->t.TextIO
flask.click._winconsole._get_text_stdin(buffer_stream:t.BinaryIO)->t.TextIO
flask.click._winconsole._get_text_stdout(buffer_stream:t.BinaryIO)->t.TextIO
flask.click._winconsole._get_windows_console_stream(f:t.TextIO,encoding:t.Optional[str],errors:t.Optional[str])->t.Optional[t.TextIO]
flask.click._winconsole._is_console(f:t.TextIO)->bool


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/types.py----------------------------------------
A:flask.click.types.info_dict->super().to_info_dict()
A:flask.click.types.value->value.strip().strip()
A:flask.click.types.enc->_get_argv_encoding()
A:flask.click.types.fs_enc->get_filesystem_encoding()
A:flask.click.types.choices_str->', '.join(map(repr, self.choices))
A:flask.click.types.normed_value->normed_value.casefold().casefold()
A:flask.click.types.str_choices->map(str, self.choices)
A:flask.click.types.incomplete->incomplete.lower().lower()
A:flask.click.types.converted->self._try_to_convert_date(value, format)
A:flask.click.types.formats_str->', '.join(map(repr, self.formats))
A:flask.click.types.rv->os.fsdecode(pathlib.Path(rv).resolve())
A:flask.click.types.norm->value.strip().strip().strip().lower()
A:flask.click.types.lazy->self.resolve_lazy_flag(value)
A:flask.click.types.(f, should_close)->open_stream(value, self.mode, self.encoding, self.errors, atomic=self.atomic)
A:flask.click.types.self.name->_('path')
A:flask.click.types.st->os.stat(rv)
A:flask.click.types.len_type->len(self.types)
A:flask.click.types.len_value->len(value)
A:flask.click.types.ty->type(default)
A:flask.click.types.UNPROCESSED->UnprocessedParamType()
A:flask.click.types.STRING->StringParamType()
A:flask.click.types.INT->IntParamType()
A:flask.click.types.FLOAT->FloatParamType()
A:flask.click.types.BOOL->BoolParamType()
A:flask.click.types.UUID->UUIDParameterType()
flask.click.Choice(self,choices:t.Sequence[str],case_sensitive:bool=True)
flask.click.Choice.__repr__(self)->str
flask.click.Choice.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.Choice.get_metavar(self,param:'Parameter')->str
flask.click.Choice.get_missing_message(self,param:'Parameter')->str
flask.click.Choice.shell_complete(self,ctx:'Context',param:'Parameter',incomplete:str)->t.List['CompletionItem']
flask.click.Choice.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.DateTime(self,formats:t.Optional[t.Sequence[str]]=None)
flask.click.DateTime.__repr__(self)->str
flask.click.DateTime._try_to_convert_date(self,value:t.Any,format:str)->t.Optional[datetime]
flask.click.DateTime.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.DateTime.get_metavar(self,param:'Parameter')->str
flask.click.DateTime.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.File(self,mode:str='r',encoding:t.Optional[str]=None,errors:t.Optional[str]='strict',lazy:t.Optional[bool]=None,atomic:bool=False)
flask.click.File.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.File.resolve_lazy_flag(self,value:t.Any)->bool
flask.click.File.shell_complete(self,ctx:'Context',param:'Parameter',incomplete:str)->t.List['CompletionItem']
flask.click.File.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.FloatRange(self,min:t.Optional[float]=None,max:t.Optional[float]=None,min_open:bool=False,max_open:bool=False,clamp:bool=False)
flask.click.FloatRange._clamp(self,bound:float,dir:'te.Literal[1,-1]',open:bool)->float
flask.click.IntRange(_NumberRangeBase,IntParamType)
flask.click.IntRange._clamp(self,bound:int,dir:'te.Literal[1,-1]',open:bool)->int
flask.click.ParamType(self,value:t.Any,param:t.Optional['Parameter']=None,ctx:t.Optional['Context']=None)
flask.click.ParamType.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.ParamType.fail(self,message:str,param:t.Optional['Parameter']=None,ctx:t.Optional['Context']=None)->'t.NoReturn'
flask.click.ParamType.get_metavar(self,param:'Parameter')->t.Optional[str]
flask.click.ParamType.get_missing_message(self,param:'Parameter')->t.Optional[str]
flask.click.ParamType.shell_complete(self,ctx:'Context',param:'Parameter',incomplete:str)->t.List['CompletionItem']
flask.click.ParamType.split_envvar_value(self,rv:str)->t.Sequence[str]
flask.click.ParamType.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.Path(self,exists:bool=False,file_okay:bool=True,dir_okay:bool=True,writable:bool=False,readable:bool=True,resolve_path:bool=False,allow_dash:bool=False,path_type:t.Optional[t.Type]=None)
flask.click.Path.coerce_path_result(self,rv:t.Any)->t.Any
flask.click.Path.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.Path.shell_complete(self,ctx:'Context',param:'Parameter',incomplete:str)->t.List['CompletionItem']
flask.click.Path.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.Tuple(self,types:t.Sequence[t.Union[t.Type,ParamType]])
flask.click.Tuple.arity(self)->int
flask.click.Tuple.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.Tuple.name(self)->str
flask.click.Tuple.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.UUIDParameterType(ParamType)
flask.click.UUIDParameterType.__repr__(self)->str
flask.click.UUIDParameterType.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.types.BoolParamType(ParamType)
flask.click.types.BoolParamType.__repr__(self)->str
flask.click.types.BoolParamType.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.types.Choice(self,choices:t.Sequence[str],case_sensitive:bool=True)
flask.click.types.Choice.__init__(self,choices:t.Sequence[str],case_sensitive:bool=True)
flask.click.types.Choice.__repr__(self)->str
flask.click.types.Choice.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.types.Choice.get_metavar(self,param:'Parameter')->str
flask.click.types.Choice.get_missing_message(self,param:'Parameter')->str
flask.click.types.Choice.shell_complete(self,ctx:'Context',param:'Parameter',incomplete:str)->t.List['CompletionItem']
flask.click.types.Choice.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.types.CompositeParamType(ParamType)
flask.click.types.CompositeParamType.arity(self)->int
flask.click.types.DateTime(self,formats:t.Optional[t.Sequence[str]]=None)
flask.click.types.DateTime.__init__(self,formats:t.Optional[t.Sequence[str]]=None)
flask.click.types.DateTime.__repr__(self)->str
flask.click.types.DateTime._try_to_convert_date(self,value:t.Any,format:str)->t.Optional[datetime]
flask.click.types.DateTime.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.types.DateTime.get_metavar(self,param:'Parameter')->str
flask.click.types.DateTime.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.types.File(self,mode:str='r',encoding:t.Optional[str]=None,errors:t.Optional[str]='strict',lazy:t.Optional[bool]=None,atomic:bool=False)
flask.click.types.File.__init__(self,mode:str='r',encoding:t.Optional[str]=None,errors:t.Optional[str]='strict',lazy:t.Optional[bool]=None,atomic:bool=False)
flask.click.types.File.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.types.File.resolve_lazy_flag(self,value:t.Any)->bool
flask.click.types.File.shell_complete(self,ctx:'Context',param:'Parameter',incomplete:str)->t.List['CompletionItem']
flask.click.types.File.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.types.FloatParamType(_NumberParamTypeBase)
flask.click.types.FloatParamType.__repr__(self)->str
flask.click.types.FloatRange(self,min:t.Optional[float]=None,max:t.Optional[float]=None,min_open:bool=False,max_open:bool=False,clamp:bool=False)
flask.click.types.FloatRange.__init__(self,min:t.Optional[float]=None,max:t.Optional[float]=None,min_open:bool=False,max_open:bool=False,clamp:bool=False)
flask.click.types.FloatRange._clamp(self,bound:float,dir:'te.Literal[1,-1]',open:bool)->float
flask.click.types.FuncParamType(self,func:t.Callable[[t.Any],t.Any])
flask.click.types.FuncParamType.__init__(self,func:t.Callable[[t.Any],t.Any])
flask.click.types.FuncParamType.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.types.FuncParamType.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.types.IntParamType(_NumberParamTypeBase)
flask.click.types.IntParamType.__repr__(self)->str
flask.click.types.IntRange(_NumberRangeBase,IntParamType)
flask.click.types.IntRange._clamp(self,bound:int,dir:'te.Literal[1,-1]',open:bool)->int
flask.click.types.ParamType(self,value:t.Any,param:t.Optional['Parameter']=None,ctx:t.Optional['Context']=None)
flask.click.types.ParamType.__call__(self,value:t.Any,param:t.Optional['Parameter']=None,ctx:t.Optional['Context']=None)
flask.click.types.ParamType.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.types.ParamType.fail(self,message:str,param:t.Optional['Parameter']=None,ctx:t.Optional['Context']=None)->'t.NoReturn'
flask.click.types.ParamType.get_metavar(self,param:'Parameter')->t.Optional[str]
flask.click.types.ParamType.get_missing_message(self,param:'Parameter')->t.Optional[str]
flask.click.types.ParamType.shell_complete(self,ctx:'Context',param:'Parameter',incomplete:str)->t.List['CompletionItem']
flask.click.types.ParamType.split_envvar_value(self,rv:str)->t.Sequence[str]
flask.click.types.ParamType.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.types.Path(self,exists:bool=False,file_okay:bool=True,dir_okay:bool=True,writable:bool=False,readable:bool=True,resolve_path:bool=False,allow_dash:bool=False,path_type:t.Optional[t.Type]=None)
flask.click.types.Path.__init__(self,exists:bool=False,file_okay:bool=True,dir_okay:bool=True,writable:bool=False,readable:bool=True,resolve_path:bool=False,allow_dash:bool=False,path_type:t.Optional[t.Type]=None)
flask.click.types.Path.coerce_path_result(self,rv:t.Any)->t.Any
flask.click.types.Path.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.types.Path.shell_complete(self,ctx:'Context',param:'Parameter',incomplete:str)->t.List['CompletionItem']
flask.click.types.Path.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.types.StringParamType(ParamType)
flask.click.types.StringParamType.__repr__(self)->str
flask.click.types.StringParamType.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.types.Tuple(self,types:t.Sequence[t.Union[t.Type,ParamType]])
flask.click.types.Tuple.__init__(self,types:t.Sequence[t.Union[t.Type,ParamType]])
flask.click.types.Tuple.arity(self)->int
flask.click.types.Tuple.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.types.Tuple.name(self)->str
flask.click.types.Tuple.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.types.UUIDParameterType(ParamType)
flask.click.types.UUIDParameterType.__repr__(self)->str
flask.click.types.UUIDParameterType.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.types.UnprocessedParamType(ParamType)
flask.click.types.UnprocessedParamType.__repr__(self)->str
flask.click.types.UnprocessedParamType.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.types._NumberParamTypeBase(ParamType)
flask.click.types._NumberParamTypeBase.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.types._NumberRangeBase(self,min:t.Optional[float]=None,max:t.Optional[float]=None,min_open:bool=False,max_open:bool=False,clamp:bool=False)
flask.click.types._NumberRangeBase.__init__(self,min:t.Optional[float]=None,max:t.Optional[float]=None,min_open:bool=False,max_open:bool=False,clamp:bool=False)
flask.click.types._NumberRangeBase.__repr__(self)->str
flask.click.types._NumberRangeBase._clamp(self,bound:float,dir:'te.Literal[1,-1]',open:bool)->float
flask.click.types._NumberRangeBase._describe_range(self)->str
flask.click.types._NumberRangeBase.convert(self,value:t.Any,param:t.Optional['Parameter'],ctx:t.Optional['Context'])->t.Any
flask.click.types._NumberRangeBase.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.types.convert_type(ty:t.Optional[t.Any],default:t.Optional[t.Any]=None)->ParamType


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/globals.py----------------------------------------
A:flask.click.globals._local->local()
A:flask.click.globals.ctx->get_current_context(silent=True)
flask.click.get_current_context(silent:bool=False)->t.Optional['Context']
flask.click.globals.get_current_context(silent:bool=False)->t.Optional['Context']
flask.click.globals.pop_context()->None
flask.click.globals.push_context(ctx:'Context')->None
flask.click.globals.resolve_color_default(color:t.Optional[bool]=None)->t.Optional[bool]


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/testing.py----------------------------------------
A:flask.click.testing.rv->dict(self.env)
A:flask.click.testing.input->input.encode(charset).encode(charset)
A:flask.click.testing.bytes_input->make_input_stream(input, self.charset)
A:flask.click.testing.env->self.make_env(env)
A:flask.click.testing.bytes_output->io.BytesIO()
A:flask.click.testing.bytes_inputecho_input->typing.cast(t.BinaryIO, EchoingStdin(bytes_input, bytes_output))
A:flask.click.testing.sys.stdintext_input->_NamedTextIOWrapper(bytes_input, encoding=self.charset, name='<stdin>', mode='r')
A:flask.click.testing.sys.stdout->_NamedTextIOWrapper(bytes_output, encoding=self.charset, name='<stdout>', mode='w')
A:flask.click.testing.bytes_error->io.BytesIO()
A:flask.click.testing.sys.stderr->_NamedTextIOWrapper(bytes_error, encoding=self.charset, name='<stderr>', mode='w', errors='backslashreplace')
A:flask.click.testing.val->text_input.readline().rstrip('\r\n')
A:flask.click.testing.char->sys.stdin.read(1)
A:flask.click.testing.old_env[key]->os.environ.get(key)
A:flask.click.testing.args->shlex.split(args)
A:flask.click.testing.prog_name->self.get_default_prog_name(cli)
A:flask.click.testing.return_value->cli.main(args=args or (), prog_name=prog_name, **extra)
A:flask.click.testing.exc_info->sys.exc_info()
A:flask.click.testing.e_code->typing.cast(t.Optional[t.Union[int, t.Any]], e.code)
A:flask.click.testing.stdout->outstreams[0].getvalue()
A:flask.click.testing.stderr->outstreams[1].getvalue()
A:flask.click.testing.cwd->os.getcwd()
A:flask.click.testing.dt->tempfile.mkdtemp(dir=temp_dir)
flask.click.testing.CliRunner(self,charset:str='utf-8',env:t.Optional[t.Mapping[str,t.Optional[str]]]=None,echo_stdin:bool=False,mix_stderr:bool=True)
flask.click.testing.CliRunner.__init__(self,charset:str='utf-8',env:t.Optional[t.Mapping[str,t.Optional[str]]]=None,echo_stdin:bool=False,mix_stderr:bool=True)
flask.click.testing.CliRunner.get_default_prog_name(self,cli:'BaseCommand')->str
flask.click.testing.CliRunner.invoke(self,cli:'BaseCommand',args:t.Optional[t.Union[str,t.Sequence[str]]]=None,input:t.Optional[t.Union[str,bytes,t.IO]]=None,env:t.Optional[t.Mapping[str,t.Optional[str]]]=None,catch_exceptions:bool=True,color:bool=False,**extra:t.Any)->Result
flask.click.testing.CliRunner.isolated_filesystem(self,temp_dir:t.Optional[t.Union[str,os.PathLike]]=None)->t.Iterator[str]
flask.click.testing.CliRunner.isolation(self,input:t.Optional[t.Union[str,bytes,t.IO]]=None,env:t.Optional[t.Mapping[str,t.Optional[str]]]=None,color:bool=False)->t.Iterator[t.Tuple[io.BytesIO, t.Optional[io.BytesIO]]]
flask.click.testing.CliRunner.make_env(self,overrides:t.Optional[t.Mapping[str,t.Optional[str]]]=None)->t.Mapping[str, t.Optional[str]]
flask.click.testing.EchoingStdin(self,input:t.BinaryIO,output:t.BinaryIO)
flask.click.testing.EchoingStdin.__getattr__(self,x:str)->t.Any
flask.click.testing.EchoingStdin.__init__(self,input:t.BinaryIO,output:t.BinaryIO)
flask.click.testing.EchoingStdin.__iter__(self)->t.Iterator[bytes]
flask.click.testing.EchoingStdin.__repr__(self)->str
flask.click.testing.EchoingStdin._echo(self,rv:bytes)->bytes
flask.click.testing.EchoingStdin.read(self,n:int=-1)->bytes
flask.click.testing.EchoingStdin.read1(self,n:int=-1)->bytes
flask.click.testing.EchoingStdin.readline(self,n:int=-1)->bytes
flask.click.testing.EchoingStdin.readlines(self)->t.List[bytes]
flask.click.testing.Result(self,runner:'CliRunner',stdout_bytes:bytes,stderr_bytes:t.Optional[bytes],return_value:t.Any,exit_code:int,exception:t.Optional[BaseException],exc_info:t.Optional[t.Tuple[t.Type[BaseException],BaseException,TracebackType]]=None)
flask.click.testing.Result.__init__(self,runner:'CliRunner',stdout_bytes:bytes,stderr_bytes:t.Optional[bytes],return_value:t.Any,exit_code:int,exception:t.Optional[BaseException],exc_info:t.Optional[t.Tuple[t.Type[BaseException],BaseException,TracebackType]]=None)
flask.click.testing.Result.__repr__(self)->str
flask.click.testing.Result.output(self)->str
flask.click.testing.Result.stderr(self)->str
flask.click.testing.Result.stdout(self)->str
flask.click.testing._NamedTextIOWrapper(self,buffer:t.BinaryIO,name:str,mode:str,**kwargs:t.Any)
flask.click.testing._NamedTextIOWrapper.__init__(self,buffer:t.BinaryIO,name:str,mode:str,**kwargs:t.Any)
flask.click.testing._NamedTextIOWrapper.mode(self)->str
flask.click.testing._NamedTextIOWrapper.name(self)->str
flask.click.testing._pause_echo(stream:t.Optional[EchoingStdin])->t.Iterator[None]
flask.click.testing.make_input_stream(input:t.Optional[t.Union[str,bytes,t.IO]],charset:str)->t.BinaryIO


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/utils.py----------------------------------------
A:flask.click.utils.F->typing.TypeVar('F', bound=t.Callable[..., t.Any])
A:flask.click.utils.paragraph_end->help.find('\n\n')
A:flask.click.utils.words->help.split()
A:flask.click.utils.(self._f, self.should_close)->open_stream(filename, mode, encoding, errors)
A:flask.click.utils.(rv, self.should_close)->open_stream(self.name, self.mode, self.encoding, self.errors, atomic=self.atomic)
A:flask.click.utils.file->auto_wrap_for_ansi(file)
A:flask.click.utils.binary_file->_find_binary_writer(file)
A:flask.click.utils.color->resolve_color_default(color)
A:flask.click.utils.out->strip_ansi(out)
A:flask.click.utils.opener->_compat.text_streams.get(name)
A:flask.click.utils.(f, should_close)->open_stream(filename, mode, encoding, errors, atomic=atomic)
A:flask.click.utils.f->typing.cast(t.IO, KeepOpenFile(f))
A:flask.click.utils.filename->os.path.basename(filename)
A:flask.click.utils.folder->os.path.expanduser('~')
A:flask.click.utils.py_module->typing.cast(str, _main.__package__)
A:flask.click.utils.arg->os.path.expandvars(arg)
A:flask.click.utils.matches->glob(arg, recursive=glob_recursive)
flask.click.echo(message:t.Optional[t.Any]=None,file:t.Optional[t.IO[t.Any]]=None,nl:bool=True,err:bool=False,color:t.Optional[bool]=None)->None
flask.click.format_filename(filename:t.Union[str,bytes,os.PathLike],shorten:bool=False)->str
flask.click.get_app_dir(app_name:str,roaming:bool=True,force_posix:bool=False)->str
flask.click.get_binary_stream(name:"te.Literal['stdin','stdout','stderr']")->t.BinaryIO
flask.click.get_os_args()->t.Sequence[str]
flask.click.get_text_stream(name:"te.Literal['stdin','stdout','stderr']",encoding:t.Optional[str]=None,errors:t.Optional[str]='strict')->t.TextIO
flask.click.open_file(filename:str,mode:str='r',encoding:t.Optional[str]=None,errors:t.Optional[str]='strict',lazy:bool=False,atomic:bool=False)->t.IO
flask.click.utils.KeepOpenFile(self,file:t.IO)
flask.click.utils.KeepOpenFile.__enter__(self)->'KeepOpenFile'
flask.click.utils.KeepOpenFile.__exit__(self,exc_type,exc_value,tb)
flask.click.utils.KeepOpenFile.__getattr__(self,name:str)->t.Any
flask.click.utils.KeepOpenFile.__init__(self,file:t.IO)
flask.click.utils.KeepOpenFile.__iter__(self)->t.Iterator[t.AnyStr]
flask.click.utils.KeepOpenFile.__repr__(self)->str
flask.click.utils.LazyFile(self,filename:str,mode:str='r',encoding:t.Optional[str]=None,errors:t.Optional[str]='strict',atomic:bool=False)
flask.click.utils.LazyFile.__enter__(self)->'LazyFile'
flask.click.utils.LazyFile.__exit__(self,exc_type,exc_value,tb)
flask.click.utils.LazyFile.__getattr__(self,name:str)->t.Any
flask.click.utils.LazyFile.__init__(self,filename:str,mode:str='r',encoding:t.Optional[str]=None,errors:t.Optional[str]='strict',atomic:bool=False)
flask.click.utils.LazyFile.__iter__(self)->t.Iterator[t.AnyStr]
flask.click.utils.LazyFile.__repr__(self)->str
flask.click.utils.LazyFile.close(self)->None
flask.click.utils.LazyFile.close_intelligently(self)->None
flask.click.utils.LazyFile.open(self)->t.IO
flask.click.utils.PacifyFlushWrapper(self,wrapped:t.IO)
flask.click.utils.PacifyFlushWrapper.__getattr__(self,attr:str)->t.Any
flask.click.utils.PacifyFlushWrapper.__init__(self,wrapped:t.IO)
flask.click.utils.PacifyFlushWrapper.flush(self)->None
flask.click.utils._detect_program_name(path:t.Optional[str]=None,_main:ModuleType=sys.modules['__main__'])->str
flask.click.utils._expand_args(args:t.Iterable[str],*,user:bool=True,env:bool=True,glob_recursive:bool=True)->t.List[str]
flask.click.utils._posixify(name:str)->str
flask.click.utils.echo(message:t.Optional[t.Any]=None,file:t.Optional[t.IO[t.Any]]=None,nl:bool=True,err:bool=False,color:t.Optional[bool]=None)->None
flask.click.utils.format_filename(filename:t.Union[str,bytes,os.PathLike],shorten:bool=False)->str
flask.click.utils.get_app_dir(app_name:str,roaming:bool=True,force_posix:bool=False)->str
flask.click.utils.get_binary_stream(name:"te.Literal['stdin','stdout','stderr']")->t.BinaryIO
flask.click.utils.get_os_args()->t.Sequence[str]
flask.click.utils.get_text_stream(name:"te.Literal['stdin','stdout','stderr']",encoding:t.Optional[str]=None,errors:t.Optional[str]='strict')->t.TextIO
flask.click.utils.make_default_short_help(help:str,max_length:int=45)->str
flask.click.utils.make_str(value:t.Any)->str
flask.click.utils.open_file(filename:str,mode:str='r',encoding:t.Optional[str]=None,errors:t.Optional[str]='strict',lazy:bool=False,atomic:bool=False)->t.IO
flask.click.utils.safecall(func:F)->F


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/_termui_impl.py----------------------------------------
A:flask.click._termui_impl.V->int(self.eta).TypeVar('V')
A:flask.click._termui_impl.file->_default_text_stdout()
A:flask.click._termui_impl.length->length_hint(iterable, -1)
A:flask.click._termui_impl.iterable->int(self.eta).cast(t.Iterable[V], range(length))
A:flask.click._termui_impl.self.iter->iter(iterable)
A:flask.click._termui_impl.self.startself.last_eta->time.time()
A:flask.click._termui_impl.t->int(self.eta)
A:flask.click._termui_impl.pos->str(self.pos)
A:flask.click._termui_impl.bar_length->int(self.pct * self.width)
A:flask.click._termui_impl.chars->list(self.empty_char * (self.width or 1))
A:flask.click._termui_impl.bar->''.join(chars)
A:flask.click._termui_impl.item_info->self.item_show_func(self.current_item)
A:flask.click._termui_impl.clutter_length->term_len(self.format_progress_line())
A:flask.click._termui_impl.new_width->max(0, shutil.get_terminal_size().columns - clutter_length)
A:flask.click._termui_impl.line->''.join(buf)
A:flask.click._termui_impl.line_len->term_len(line)
A:flask.click._termui_impl.self.last_eta->time.time()
A:flask.click._termui_impl.stdout->_default_text_stdout()
A:flask.click._termui_impl.pager_cmd->(os.environ.get('PAGER', None) or '').strip()
A:flask.click._termui_impl.(fd, filename)->tempfile.mkstemp()
A:flask.click._termui_impl.env->dict(os.environ)
A:flask.click._termui_impl.cmd_detail->cmd.rsplit('/', 1)[-1].split()
A:flask.click._termui_impl.c->subprocess.Popen(['xdg-open', url])
A:flask.click._termui_impl.stdin->int(self.eta).cast(t.BinaryIO, c.stdin)
A:flask.click._termui_impl.encoding->get_best_encoding(sys.stdout)
A:flask.click._termui_impl.text->strip_ansi(text)
A:flask.click._termui_impl.rv->func()
A:flask.click._termui_impl.editor->self.get_editor()
A:flask.click._termui_impl.environ->os.environ.copy()
A:flask.click._termui_impl.exit_code->subprocess.Popen(['xdg-open', url]).wait()
A:flask.click._termui_impl.data->strip_ansi(text).encode('utf-8')
A:flask.click._termui_impl.(fd, name)->tempfile.mkstemp(prefix='editor-', suffix=self.extension)
A:flask.click._termui_impl.timestamp->os.path.getmtime(name)
A:flask.click._termui_impl.url->_unquote_file(url)
A:flask.click._termui_impl.null->open('/dev/null', 'w')
A:flask.click._termui_impl.f->open('/dev/tty')
A:flask.click._termui_impl.fd->sys.stdin.fileno()
A:flask.click._termui_impl.old_settings->termios.tcgetattr(fd)
A:flask.click._termui_impl.ch->os.read(fd, 32).decode(get_best_encoding(sys.stdin), 'replace')
flask.click._termui_impl.Editor(self,editor:t.Optional[str]=None,env:t.Optional[t.Mapping[str,str]]=None,require_save:bool=True,extension:str='.txt')
flask.click._termui_impl.Editor.__init__(self,editor:t.Optional[str]=None,env:t.Optional[t.Mapping[str,str]]=None,require_save:bool=True,extension:str='.txt')
flask.click._termui_impl.Editor.edit(self,text:t.Optional[t.AnyStr])->t.Optional[t.AnyStr]
flask.click._termui_impl.Editor.edit_file(self,filename:str)->None
flask.click._termui_impl.Editor.get_editor(self)->str
flask.click._termui_impl.ProgressBar(self,iterable:t.Optional[t.Iterable[V]],length:t.Optional[int]=None,fill_char:str='#',empty_char:str='',bar_template:str='%(bar)s',info_sep:str='',show_eta:bool=True,show_percent:t.Optional[bool]=None,show_pos:bool=False,item_show_func:t.Optional[t.Callable[[t.Optional[V]],t.Optional[str]]]=None,label:t.Optional[str]=None,file:t.Optional[t.TextIO]=None,color:t.Optional[bool]=None,update_min_steps:int=1,width:int=30)
flask.click._termui_impl.ProgressBar.__enter__(self)->'ProgressBar'
flask.click._termui_impl.ProgressBar.__exit__(self,exc_type,exc_value,tb)
flask.click._termui_impl.ProgressBar.__init__(self,iterable:t.Optional[t.Iterable[V]],length:t.Optional[int]=None,fill_char:str='#',empty_char:str='',bar_template:str='%(bar)s',info_sep:str='',show_eta:bool=True,show_percent:t.Optional[bool]=None,show_pos:bool=False,item_show_func:t.Optional[t.Callable[[t.Optional[V]],t.Optional[str]]]=None,label:t.Optional[str]=None,file:t.Optional[t.TextIO]=None,color:t.Optional[bool]=None,update_min_steps:int=1,width:int=30)
flask.click._termui_impl.ProgressBar.__iter__(self)->t.Iterator[V]
flask.click._termui_impl.ProgressBar.__next__(self)->V
flask.click._termui_impl.ProgressBar.eta(self)->float
flask.click._termui_impl.ProgressBar.finish(self)->None
flask.click._termui_impl.ProgressBar.format_bar(self)->str
flask.click._termui_impl.ProgressBar.format_eta(self)->str
flask.click._termui_impl.ProgressBar.format_pct(self)->str
flask.click._termui_impl.ProgressBar.format_pos(self)->str
flask.click._termui_impl.ProgressBar.format_progress_line(self)->str
flask.click._termui_impl.ProgressBar.generator(self)->t.Iterator[V]
flask.click._termui_impl.ProgressBar.make_step(self,n_steps:int)->None
flask.click._termui_impl.ProgressBar.pct(self)->float
flask.click._termui_impl.ProgressBar.render_finish(self)->None
flask.click._termui_impl.ProgressBar.render_progress(self)->None
flask.click._termui_impl.ProgressBar.time_per_iteration(self)->float
flask.click._termui_impl.ProgressBar.update(self,n_steps:int,current_item:t.Optional[V]=None)->None
flask.click._termui_impl._nullpager(stream:t.TextIO,generator:t.Iterable[str],color:t.Optional[bool])->None
flask.click._termui_impl._pipepager(generator:t.Iterable[str],cmd:str,color:t.Optional[bool])->None
flask.click._termui_impl._tempfilepager(generator:t.Iterable[str],cmd:str,color:t.Optional[bool])->None
flask.click._termui_impl._translate_ch_to_exc(ch:str)->t.Optional[BaseException]
flask.click._termui_impl.open_url(url:str,wait:bool=False,locate:bool=False)->int
flask.click._termui_impl.pager(generator:t.Iterable[str],color:t.Optional[bool]=None)->None


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/parser.py----------------------------------------
A:flask.click.parser.V->typing.TypeVar('V')
A:flask.click.parser._flag_needs_value->object()
A:flask.click.parser.args->deque(args)
A:flask.click.parser.nargs_spec->deque(nargs_spec)
A:flask.click.parser.nargs->_fetch(nargs_spec)
A:flask.click.parser.spos->len(rv)
A:flask.click.parser.rv[spos]->tuple(args)
A:flask.click.parser.rv[spos + 1:]->reversed(rv[spos + 1:])
A:flask.click.parser.(prefix, opt)->split_opt(opt)
A:flask.click.parser.lex->shlex.shlex(string, posix=True)
A:flask.click.parser.self.prefixes->set()
A:flask.click.parser.(prefix, value)->split_opt(opt)
A:flask.click.parser.holes->sum((1 for x in value if x is None))
A:flask.click.parser.option->self._short_opt.get(opt)
A:flask.click.parser.state->ParsingState(args)
A:flask.click.parser.(pargs, args)->_unpack_args(state.largs + state.rargs, [x.nargs for x in self._args])
A:flask.click.parser.arg->ParsingState(args).rargs.pop(0)
A:flask.click.parser.arglen->len(arg)
A:flask.click.parser.possibilities->get_close_matches(opt, self._long_opt)
A:flask.click.parser.value->tuple(state.rargs[:nargs])
A:flask.click.parser.opt->normalize_opt(f'{prefix}{ch}', self.ctx)
A:flask.click.parser.(long_opt, explicit_value)->ParsingState(args).rargs.pop(0).split('=', 1)
A:flask.click.parser.norm_long_opt->normalize_opt(long_opt, self.ctx)
flask.click.OptionParser(self,ctx:t.Optional['Context']=None)
flask.click.OptionParser._get_value_from_state(self,option_name:str,option:Option,state:ParsingState)->t.Any
flask.click.OptionParser._match_long_opt(self,opt:str,explicit_value:t.Optional[str],state:ParsingState)->None
flask.click.OptionParser._match_short_opt(self,arg:str,state:ParsingState)->None
flask.click.OptionParser._process_args_for_args(self,state:ParsingState)->None
flask.click.OptionParser._process_args_for_options(self,state:ParsingState)->None
flask.click.OptionParser._process_opts(self,arg:str,state:ParsingState)->None
flask.click.OptionParser.add_argument(self,obj:'CoreArgument',dest:t.Optional[str],nargs:int=1)->None
flask.click.OptionParser.add_option(self,obj:'CoreOption',opts:t.Sequence[str],dest:t.Optional[str],action:t.Optional[str]=None,nargs:int=1,const:t.Optional[t.Any]=None)->None
flask.click.OptionParser.parse_args(self,args:t.List[str])->t.Tuple[t.Dict[str, t.Any], t.List[str], t.List['CoreParameter']]
flask.click.parser.Argument(self,obj:'CoreArgument',dest:t.Optional[str],nargs:int=1)
flask.click.parser.Argument.__init__(self,obj:'CoreArgument',dest:t.Optional[str],nargs:int=1)
flask.click.parser.Argument.process(self,value:t.Union[t.Optional[str],t.Sequence[t.Optional[str]]],state:'ParsingState')->None
flask.click.parser.Option(self,obj:'CoreOption',opts:t.Sequence[str],dest:t.Optional[str],action:t.Optional[str]=None,nargs:int=1,const:t.Optional[t.Any]=None)
flask.click.parser.Option.__init__(self,obj:'CoreOption',opts:t.Sequence[str],dest:t.Optional[str],action:t.Optional[str]=None,nargs:int=1,const:t.Optional[t.Any]=None)
flask.click.parser.Option.process(self,value:str,state:'ParsingState')->None
flask.click.parser.Option.takes_value(self)->bool
flask.click.parser.OptionParser(self,ctx:t.Optional['Context']=None)
flask.click.parser.OptionParser.__init__(self,ctx:t.Optional['Context']=None)
flask.click.parser.OptionParser._get_value_from_state(self,option_name:str,option:Option,state:ParsingState)->t.Any
flask.click.parser.OptionParser._match_long_opt(self,opt:str,explicit_value:t.Optional[str],state:ParsingState)->None
flask.click.parser.OptionParser._match_short_opt(self,arg:str,state:ParsingState)->None
flask.click.parser.OptionParser._process_args_for_args(self,state:ParsingState)->None
flask.click.parser.OptionParser._process_args_for_options(self,state:ParsingState)->None
flask.click.parser.OptionParser._process_opts(self,arg:str,state:ParsingState)->None
flask.click.parser.OptionParser.add_argument(self,obj:'CoreArgument',dest:t.Optional[str],nargs:int=1)->None
flask.click.parser.OptionParser.add_option(self,obj:'CoreOption',opts:t.Sequence[str],dest:t.Optional[str],action:t.Optional[str]=None,nargs:int=1,const:t.Optional[t.Any]=None)->None
flask.click.parser.OptionParser.parse_args(self,args:t.List[str])->t.Tuple[t.Dict[str, t.Any], t.List[str], t.List['CoreParameter']]
flask.click.parser.ParsingState(self,rargs:t.List[str])
flask.click.parser.ParsingState.__init__(self,rargs:t.List[str])
flask.click.parser._unpack_args(args:t.Sequence[str],nargs_spec:t.Sequence[int])->t.Tuple[t.Sequence[t.Union[str, t.Sequence[t.Optional[str]], None]], t.List[str]]
flask.click.parser.normalize_opt(opt:str,ctx:t.Optional['Context'])->str
flask.click.parser.split_arg_string(string:str)->t.List[str]
flask.click.parser.split_opt(opt:str)->t.Tuple[str, str]


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/core.py----------------------------------------
A:flask.click.core.F->typing.TypeVar('F', bound=t.Callable[..., t.Any])
A:flask.click.core.V->typing.TypeVar('V')
A:flask.click.core.multi->typing.cast(MultiCommand, ctx.command)
A:flask.click.core.command->self.get_command(ctx, name)
A:flask.click.core.idx->float('inf')
A:flask.click.core.COMMANDLINE->enum.auto()
A:flask.click.core.ENVIRONMENT->enum.auto()
A:flask.click.core.DEFAULT->enum.auto()
A:flask.click.core.DEFAULT_MAP->enum.auto()
A:flask.click.core.PROMPT->enum.auto()
A:flask.click.core.default_map->parent.default_map.get(info_name)
A:flask.click.core.auto_envvar_prefix->auto_envvar_prefix.replace('-', '_').replace('-', '_')
A:flask.click.core.self._exit_stack->ExitStack()
A:flask.click.core.rv->batch(rv, self.nargs)
A:flask.click.core.self.objrv->object_type()
A:flask.click.core.value->self.prompt_for_value(ctx)
A:flask.click.core.ctx->self.context_class(self, info_name=info_name, parent=parent, **extra)
A:flask.click.core.kwargs[param.name]->param.type_cast_value(ctx, param.get_default(ctx))
A:flask.click.core.args->list(args)
A:flask.click.core.prog_name->_detect_program_name()
A:flask.click.core.sys.stdout->typing.cast(t.TextIO, PacifyFlushWrapper(sys.stdout))
A:flask.click.core.sys.stderr->typing.cast(t.TextIO, PacifyFlushWrapper(sys.stderr))
A:flask.click.core.complete_var->f'_{prog_name}_COMPLETE'.replace('-', '_').upper()
A:flask.click.core.instruction->os.environ.get(complete_var)
A:flask.click.core.info_dict->super().to_info_dict()
A:flask.click.core.formatter->self.context_class(self, info_name=info_name, parent=parent, **extra).make_formatter()
A:flask.click.core.help_option->self.get_help_option(ctx)
A:flask.click.core.pieces->self.collect_usage_pieces(ctx)
A:flask.click.core.all_names->set(ctx.help_option_names)
A:flask.click.core.help_options->self.get_help_option_names(ctx)
A:flask.click.core.parser->self.make_parser(ctx)
A:flask.click.core.text->_('(Deprecated) {text}').format(text=text)
A:flask.click.core.(opts, args, param_order)->self.make_parser(ctx).parse_args(args=args)
A:flask.click.core.(value, args)->param.handle_parse_result(ctx, opts, args)
A:flask.click.core.message->_('DeprecationWarning: The command {name!r} is deprecated.').format(name=self.name)
A:flask.click.core.sub_ctx->group(*args, **kwargs)(f).make_context(cmd_name, args, parent=ctx, allow_extra_args=True, allow_interspersed_args=False)
A:flask.click.core.commands[name]->self.get_command(ctx, name).to_info_dict(sub_ctx)
A:flask.click.core.inner->old_callback(__value, *args, **kwargs)
A:flask.click.core.self._result_callbackrv->update_wrapper(t.cast(F, function), f)
A:flask.click.core.cmd->group(*args, **kwargs)(f)
A:flask.click.core.help->group(*args, **kwargs)(f).get_short_help_str(limit)
A:flask.click.core.rest->super().parse_args(ctx, args)
A:flask.click.core.(cmd_name, cmd, args)->self.resolve_command(ctx, args)
A:flask.click.core.cmd_name->self.context_class(self, info_name=info_name, parent=parent, **extra).token_normalize_func(cmd_name)
A:flask.click.core.kwargs['cls']->type(self)
A:flask.click.core.(self.name, self.opts, self.secondary_opts)->self._parse_decls(param_decls or (), expose_value)
A:flask.click.core.self.type->types.IntRange(min=0)
A:flask.click.core.c->CompletionItem(c)
A:flask.click.core.check_default->next(_check_iter(check_default), None)
A:flask.click.core.metavar->self.type.name.upper()
A:flask.click.core.(value, source)->super().consume_value(ctx, opts)
A:flask.click.core.results->self._custom_shell_complete(ctx, self, incomplete)
A:flask.click.core.is_flag->bool(self.secondary_opts)
A:flask.click.core.(first, second)->decl.split(split_char, 1)
A:flask.click.core.first->first.rstrip().rstrip()
A:flask.click.core.second->second.lstrip().lstrip()
A:flask.click.core.name->name.replace('-', '_').lower().replace('-', '_').lower()
A:flask.click.core.(rv, any_slashes)->join_options(opts)
A:flask.click.core.default_value->self.get_default(ctx, call=False)
A:flask.click.core.show_default_is_str->isinstance(self.show_default, str)
A:flask.click.core.default_string->str(default_value)
A:flask.click.core.range_str->self.type._describe_range()
A:flask.click.core.extra_str->'; '.join(extra)
A:flask.click.core.default->self.get_default(ctx)
A:flask.click.core.var->self.name.upper()
flask.click.Argument(self,param_decls:t.Sequence[str],required:t.Optional[bool]=None,**attrs:t.Any)
flask.click.Argument._parse_decls(self,decls:t.Sequence[str],expose_value:bool)->t.Tuple[t.Optional[str], t.List[str], t.List[str]]
flask.click.Argument.add_to_parser(self,parser:OptionParser,ctx:Context)->None
flask.click.Argument.get_error_hint(self,ctx:Context)->str
flask.click.Argument.get_usage_pieces(self,ctx:Context)->t.List[str]
flask.click.Argument.human_readable_name(self)->str
flask.click.Argument.make_metavar(self)->str
flask.click.BaseCommand(self,name:t.Optional[str],context_settings:t.Optional[t.Dict[str,t.Any]]=None)
flask.click.BaseCommand.__repr__(self)->str
flask.click.BaseCommand._main_shell_completion(self,ctx_args:t.Dict[str,t.Any],prog_name:str,complete_var:t.Optional[str]=None)->None
flask.click.BaseCommand.get_help(self,ctx:Context)->str
flask.click.BaseCommand.get_usage(self,ctx:Context)->str
flask.click.BaseCommand.invoke(self,ctx:Context)->t.Any
flask.click.BaseCommand.main(self,args:t.Optional[t.Sequence[str]]=None,prog_name:t.Optional[str]=None,complete_var:t.Optional[str]=None,standalone_mode:bool=True,windows_expand_args:bool=True,**extra:t.Any)->t.Any
flask.click.BaseCommand.make_context(self,info_name:t.Optional[str],args:t.List[str],parent:t.Optional[Context]=None,**extra:t.Any)->Context
flask.click.BaseCommand.parse_args(self,ctx:Context,args:t.List[str])->t.List[str]
flask.click.BaseCommand.shell_complete(self,ctx:Context,incomplete:str)->t.List['CompletionItem']
flask.click.BaseCommand.to_info_dict(self,ctx:Context)->t.Dict[str, t.Any]
flask.click.Command(self,name:t.Optional[str],context_settings:t.Optional[t.Dict[str,t.Any]]=None,callback:t.Optional[t.Callable[...,t.Any]]=None,params:t.Optional[t.List['Parameter']]=None,help:t.Optional[str]=None,epilog:t.Optional[str]=None,short_help:t.Optional[str]=None,options_metavar:t.Optional[str]='[OPTIONS]',add_help_option:bool=True,no_args_is_help:bool=False,hidden:bool=False,deprecated:bool=False)
flask.click.Command.collect_usage_pieces(self,ctx:Context)->t.List[str]
flask.click.Command.format_epilog(self,ctx:Context,formatter:HelpFormatter)->None
flask.click.Command.format_help(self,ctx:Context,formatter:HelpFormatter)->None
flask.click.Command.format_help_text(self,ctx:Context,formatter:HelpFormatter)->None
flask.click.Command.format_options(self,ctx:Context,formatter:HelpFormatter)->None
flask.click.Command.format_usage(self,ctx:Context,formatter:HelpFormatter)->None
flask.click.Command.get_help(self,ctx:Context)->str
flask.click.Command.get_help_option(self,ctx:Context)->t.Optional['Option']
flask.click.Command.get_help_option_names(self,ctx:Context)->t.List[str]
flask.click.Command.get_params(self,ctx:Context)->t.List['Parameter']
flask.click.Command.get_short_help_str(self,limit:int=45)->str
flask.click.Command.get_usage(self,ctx:Context)->str
flask.click.Command.invoke(self,ctx:Context)->t.Any
flask.click.Command.make_parser(self,ctx:Context)->OptionParser
flask.click.Command.parse_args(self,ctx:Context,args:t.List[str])->t.List[str]
flask.click.Command.shell_complete(self,ctx:Context,incomplete:str)->t.List['CompletionItem']
flask.click.Command.to_info_dict(self,ctx:Context)->t.Dict[str, t.Any]
flask.click.CommandCollection(self,name:t.Optional[str]=None,sources:t.Optional[t.List[MultiCommand]]=None,**attrs:t.Any)
flask.click.CommandCollection.add_source(self,multi_cmd:MultiCommand)->None
flask.click.CommandCollection.get_command(self,ctx:Context,cmd_name:str)->t.Optional[Command]
flask.click.CommandCollection.list_commands(self,ctx:Context)->t.List[str]
flask.click.Context(self,command:'Command',parent:t.Optional['Context']=None,info_name:t.Optional[str]=None,obj:t.Optional[t.Any]=None,auto_envvar_prefix:t.Optional[str]=None,default_map:t.Optional[t.Dict[str,t.Any]]=None,terminal_width:t.Optional[int]=None,max_content_width:t.Optional[int]=None,resilient_parsing:bool=False,allow_extra_args:t.Optional[bool]=None,allow_interspersed_args:t.Optional[bool]=None,ignore_unknown_options:t.Optional[bool]=None,help_option_names:t.Optional[t.List[str]]=None,token_normalize_func:t.Optional[t.Callable[[str],str]]=None,color:t.Optional[bool]=None,show_default:t.Optional[bool]=None)
flask.click.Context.__enter__(self)->'Context'
flask.click.Context.__exit__(self,exc_type,exc_value,tb)
flask.click.Context._make_sub_context(self,command:'Command')->'Context'
flask.click.Context.abort(self)->'te.NoReturn'
flask.click.Context.call_on_close(self,f:t.Callable[...,t.Any])->t.Callable[..., t.Any]
flask.click.Context.close(self)->None
flask.click.Context.command_path(self)->str
flask.click.Context.ensure_object(self,object_type:t.Type[V])->V
flask.click.Context.exit(self,code:int=0)->'te.NoReturn'
flask.click.Context.fail(self,message:str)->'te.NoReturn'
flask.click.Context.find_object(self,object_type:t.Type[V])->t.Optional[V]
flask.click.Context.find_root(self)->'Context'
flask.click.Context.forward(__self,__cmd:'Command',*args:t.Any,**kwargs:t.Any)->t.Any
flask.click.Context.get_help(self)->str
flask.click.Context.get_parameter_source(self,name:str)->t.Optional[ParameterSource]
flask.click.Context.get_usage(self)->str
flask.click.Context.invoke(__self,__callback:t.Union['Command',t.Callable[...,t.Any]],*args:t.Any,**kwargs:t.Any)->t.Any
flask.click.Context.lookup_default(self,name:str,call:bool=True)->t.Optional[t.Any]
flask.click.Context.make_formatter(self)->HelpFormatter
flask.click.Context.meta(self)->t.Dict[str, t.Any]
flask.click.Context.scope(self,cleanup:bool=True)->t.Iterator['Context']
flask.click.Context.set_parameter_source(self,name:str,source:ParameterSource)->None
flask.click.Context.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.Context.with_resource(self,context_manager:t.ContextManager[V])->V
flask.click.Group(self,name:t.Optional[str]=None,commands:t.Optional[t.Union[t.Dict[str,Command],t.Sequence[Command]]]=None,**attrs:t.Any)
flask.click.Group.add_command(self,cmd:Command,name:t.Optional[str]=None)->None
flask.click.Group.command(self,*args:t.Any,**kwargs:t.Any)->t.Callable[[t.Callable[..., t.Any]], Command]
flask.click.Group.get_command(self,ctx:Context,cmd_name:str)->t.Optional[Command]
flask.click.Group.group(self,*args:t.Any,**kwargs:t.Any)->t.Callable[[t.Callable[..., t.Any]], 'Group']
flask.click.Group.list_commands(self,ctx:Context)->t.List[str]
flask.click.MultiCommand(self,name:t.Optional[str]=None,invoke_without_command:bool=False,no_args_is_help:t.Optional[bool]=None,subcommand_metavar:t.Optional[str]=None,chain:bool=False,result_callback:t.Optional[t.Callable[...,t.Any]]=None,**attrs:t.Any)
flask.click.MultiCommand.collect_usage_pieces(self,ctx:Context)->t.List[str]
flask.click.MultiCommand.format_commands(self,ctx:Context,formatter:HelpFormatter)->None
flask.click.MultiCommand.format_options(self,ctx:Context,formatter:HelpFormatter)->None
flask.click.MultiCommand.get_command(self,ctx:Context,cmd_name:str)->t.Optional[Command]
flask.click.MultiCommand.invoke(self,ctx:Context)->t.Any
flask.click.MultiCommand.list_commands(self,ctx:Context)->t.List[str]
flask.click.MultiCommand.parse_args(self,ctx:Context,args:t.List[str])->t.List[str]
flask.click.MultiCommand.resolve_command(self,ctx:Context,args:t.List[str])->t.Tuple[t.Optional[str], t.Optional[Command], t.List[str]]
flask.click.MultiCommand.result_callback(self,replace:bool=False)->t.Callable[[F], F]
flask.click.MultiCommand.resultcallback(self,replace:bool=False)->t.Callable[[F], F]
flask.click.MultiCommand.shell_complete(self,ctx:Context,incomplete:str)->t.List['CompletionItem']
flask.click.MultiCommand.to_info_dict(self,ctx:Context)->t.Dict[str, t.Any]
flask.click.Option(self,param_decls:t.Optional[t.Sequence[str]]=None,show_default:t.Union[bool,str]=False,prompt:t.Union[bool,str]=False,confirmation_prompt:t.Union[bool,str]=False,prompt_required:bool=True,hide_input:bool=False,is_flag:t.Optional[bool]=None,flag_value:t.Optional[t.Any]=None,multiple:bool=False,count:bool=False,allow_from_autoenv:bool=True,type:t.Optional[t.Union[types.ParamType,t.Any]]=None,help:t.Optional[str]=None,hidden:bool=False,show_choices:bool=True,show_envvar:bool=False,**attrs:t.Any)
flask.click.Option._parse_decls(self,decls:t.Sequence[str],expose_value:bool)->t.Tuple[t.Optional[str], t.List[str], t.List[str]]
flask.click.Option.add_to_parser(self,parser:OptionParser,ctx:Context)->None
flask.click.Option.consume_value(self,ctx:Context,opts:t.Mapping[str,'Parameter'])->t.Tuple[t.Any, ParameterSource]
flask.click.Option.get_default(self,ctx:Context,call:bool=True)->t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]]
flask.click.Option.get_help_record(self,ctx:Context)->t.Optional[t.Tuple[str, str]]
flask.click.Option.prompt_for_value(self,ctx:Context)->t.Any
flask.click.Option.resolve_envvar_value(self,ctx:Context)->t.Optional[str]
flask.click.Option.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.Option.value_from_envvar(self,ctx:Context)->t.Optional[t.Any]
flask.click.Parameter(self,param_decls:t.Optional[t.Sequence[str]]=None,type:t.Optional[t.Union[types.ParamType,t.Any]]=None,required:bool=False,default:t.Optional[t.Union[t.Any,t.Callable[[],t.Any]]]=None,callback:t.Optional[t.Callable[[Context,'Parameter',t.Any],t.Any]]=None,nargs:t.Optional[int]=None,multiple:bool=False,metavar:t.Optional[str]=None,expose_value:bool=True,is_eager:bool=False,envvar:t.Optional[t.Union[str,t.Sequence[str]]]=None,shell_complete:t.Optional[t.Callable[[Context,'Parameter',str],t.Union[t.List['CompletionItem'],t.List[str]]]]=None,autocompletion:t.Optional[t.Callable[[Context,t.List[str],str],t.List[t.Union[t.Tuple[str,str],str]]]]=None)
flask.click.Parameter.__repr__(self)->str
flask.click.Parameter._parse_decls(self,decls:t.Sequence[str],expose_value:bool)->t.Tuple[t.Optional[str], t.List[str], t.List[str]]
flask.click.Parameter.add_to_parser(self,parser:OptionParser,ctx:Context)->None
flask.click.Parameter.consume_value(self,ctx:Context,opts:t.Mapping[str,t.Any])->t.Tuple[t.Any, ParameterSource]
flask.click.Parameter.get_default(self,ctx:Context,call:bool=True)->t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]]
flask.click.Parameter.get_error_hint(self,ctx:Context)->str
flask.click.Parameter.get_help_record(self,ctx:Context)->t.Optional[t.Tuple[str, str]]
flask.click.Parameter.get_usage_pieces(self,ctx:Context)->t.List[str]
flask.click.Parameter.handle_parse_result(self,ctx:Context,opts:t.Mapping[str,t.Any],args:t.List[str])->t.Tuple[t.Any, t.List[str]]
flask.click.Parameter.human_readable_name(self)->str
flask.click.Parameter.make_metavar(self)->str
flask.click.Parameter.process_value(self,ctx:Context,value:t.Any)->t.Any
flask.click.Parameter.resolve_envvar_value(self,ctx:Context)->t.Optional[str]
flask.click.Parameter.shell_complete(self,ctx:Context,incomplete:str)->t.List['CompletionItem']
flask.click.Parameter.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.Parameter.type_cast_value(self,ctx:Context,value:t.Any)->t.Any
flask.click.Parameter.value_from_envvar(self,ctx:Context)->t.Optional[t.Any]
flask.click.Parameter.value_is_missing(self,value:t.Any)->bool
flask.click.ParameterSource(enum.Enum)
flask.click.core.Argument(self,param_decls:t.Sequence[str],required:t.Optional[bool]=None,**attrs:t.Any)
flask.click.core.Argument.__init__(self,param_decls:t.Sequence[str],required:t.Optional[bool]=None,**attrs:t.Any)
flask.click.core.Argument._parse_decls(self,decls:t.Sequence[str],expose_value:bool)->t.Tuple[t.Optional[str], t.List[str], t.List[str]]
flask.click.core.Argument.add_to_parser(self,parser:OptionParser,ctx:Context)->None
flask.click.core.Argument.get_error_hint(self,ctx:Context)->str
flask.click.core.Argument.get_usage_pieces(self,ctx:Context)->t.List[str]
flask.click.core.Argument.human_readable_name(self)->str
flask.click.core.Argument.make_metavar(self)->str
flask.click.core.BaseCommand(self,name:t.Optional[str],context_settings:t.Optional[t.Dict[str,t.Any]]=None)
flask.click.core.BaseCommand.__init__(self,name:t.Optional[str],context_settings:t.Optional[t.Dict[str,t.Any]]=None)
flask.click.core.BaseCommand.__repr__(self)->str
flask.click.core.BaseCommand._main_shell_completion(self,ctx_args:t.Dict[str,t.Any],prog_name:str,complete_var:t.Optional[str]=None)->None
flask.click.core.BaseCommand.get_help(self,ctx:Context)->str
flask.click.core.BaseCommand.get_usage(self,ctx:Context)->str
flask.click.core.BaseCommand.invoke(self,ctx:Context)->t.Any
flask.click.core.BaseCommand.main(self,args:t.Optional[t.Sequence[str]]=None,prog_name:t.Optional[str]=None,complete_var:t.Optional[str]=None,standalone_mode:bool=True,windows_expand_args:bool=True,**extra:t.Any)->t.Any
flask.click.core.BaseCommand.make_context(self,info_name:t.Optional[str],args:t.List[str],parent:t.Optional[Context]=None,**extra:t.Any)->Context
flask.click.core.BaseCommand.parse_args(self,ctx:Context,args:t.List[str])->t.List[str]
flask.click.core.BaseCommand.shell_complete(self,ctx:Context,incomplete:str)->t.List['CompletionItem']
flask.click.core.BaseCommand.to_info_dict(self,ctx:Context)->t.Dict[str, t.Any]
flask.click.core.Command(self,name:t.Optional[str],context_settings:t.Optional[t.Dict[str,t.Any]]=None,callback:t.Optional[t.Callable[...,t.Any]]=None,params:t.Optional[t.List['Parameter']]=None,help:t.Optional[str]=None,epilog:t.Optional[str]=None,short_help:t.Optional[str]=None,options_metavar:t.Optional[str]='[OPTIONS]',add_help_option:bool=True,no_args_is_help:bool=False,hidden:bool=False,deprecated:bool=False)
flask.click.core.Command.__init__(self,name:t.Optional[str],context_settings:t.Optional[t.Dict[str,t.Any]]=None,callback:t.Optional[t.Callable[...,t.Any]]=None,params:t.Optional[t.List['Parameter']]=None,help:t.Optional[str]=None,epilog:t.Optional[str]=None,short_help:t.Optional[str]=None,options_metavar:t.Optional[str]='[OPTIONS]',add_help_option:bool=True,no_args_is_help:bool=False,hidden:bool=False,deprecated:bool=False)
flask.click.core.Command.collect_usage_pieces(self,ctx:Context)->t.List[str]
flask.click.core.Command.format_epilog(self,ctx:Context,formatter:HelpFormatter)->None
flask.click.core.Command.format_help(self,ctx:Context,formatter:HelpFormatter)->None
flask.click.core.Command.format_help_text(self,ctx:Context,formatter:HelpFormatter)->None
flask.click.core.Command.format_options(self,ctx:Context,formatter:HelpFormatter)->None
flask.click.core.Command.format_usage(self,ctx:Context,formatter:HelpFormatter)->None
flask.click.core.Command.get_help(self,ctx:Context)->str
flask.click.core.Command.get_help_option(self,ctx:Context)->t.Optional['Option']
flask.click.core.Command.get_help_option_names(self,ctx:Context)->t.List[str]
flask.click.core.Command.get_params(self,ctx:Context)->t.List['Parameter']
flask.click.core.Command.get_short_help_str(self,limit:int=45)->str
flask.click.core.Command.get_usage(self,ctx:Context)->str
flask.click.core.Command.invoke(self,ctx:Context)->t.Any
flask.click.core.Command.make_parser(self,ctx:Context)->OptionParser
flask.click.core.Command.parse_args(self,ctx:Context,args:t.List[str])->t.List[str]
flask.click.core.Command.shell_complete(self,ctx:Context,incomplete:str)->t.List['CompletionItem']
flask.click.core.Command.to_info_dict(self,ctx:Context)->t.Dict[str, t.Any]
flask.click.core.CommandCollection(self,name:t.Optional[str]=None,sources:t.Optional[t.List[MultiCommand]]=None,**attrs:t.Any)
flask.click.core.CommandCollection.__init__(self,name:t.Optional[str]=None,sources:t.Optional[t.List[MultiCommand]]=None,**attrs:t.Any)
flask.click.core.CommandCollection.add_source(self,multi_cmd:MultiCommand)->None
flask.click.core.CommandCollection.get_command(self,ctx:Context,cmd_name:str)->t.Optional[Command]
flask.click.core.CommandCollection.list_commands(self,ctx:Context)->t.List[str]
flask.click.core.Context(self,command:'Command',parent:t.Optional['Context']=None,info_name:t.Optional[str]=None,obj:t.Optional[t.Any]=None,auto_envvar_prefix:t.Optional[str]=None,default_map:t.Optional[t.Dict[str,t.Any]]=None,terminal_width:t.Optional[int]=None,max_content_width:t.Optional[int]=None,resilient_parsing:bool=False,allow_extra_args:t.Optional[bool]=None,allow_interspersed_args:t.Optional[bool]=None,ignore_unknown_options:t.Optional[bool]=None,help_option_names:t.Optional[t.List[str]]=None,token_normalize_func:t.Optional[t.Callable[[str],str]]=None,color:t.Optional[bool]=None,show_default:t.Optional[bool]=None)
flask.click.core.Context.__enter__(self)->'Context'
flask.click.core.Context.__exit__(self,exc_type,exc_value,tb)
flask.click.core.Context.__init__(self,command:'Command',parent:t.Optional['Context']=None,info_name:t.Optional[str]=None,obj:t.Optional[t.Any]=None,auto_envvar_prefix:t.Optional[str]=None,default_map:t.Optional[t.Dict[str,t.Any]]=None,terminal_width:t.Optional[int]=None,max_content_width:t.Optional[int]=None,resilient_parsing:bool=False,allow_extra_args:t.Optional[bool]=None,allow_interspersed_args:t.Optional[bool]=None,ignore_unknown_options:t.Optional[bool]=None,help_option_names:t.Optional[t.List[str]]=None,token_normalize_func:t.Optional[t.Callable[[str],str]]=None,color:t.Optional[bool]=None,show_default:t.Optional[bool]=None)
flask.click.core.Context._make_sub_context(self,command:'Command')->'Context'
flask.click.core.Context.abort(self)->'te.NoReturn'
flask.click.core.Context.call_on_close(self,f:t.Callable[...,t.Any])->t.Callable[..., t.Any]
flask.click.core.Context.close(self)->None
flask.click.core.Context.command_path(self)->str
flask.click.core.Context.ensure_object(self,object_type:t.Type[V])->V
flask.click.core.Context.exit(self,code:int=0)->'te.NoReturn'
flask.click.core.Context.fail(self,message:str)->'te.NoReturn'
flask.click.core.Context.find_object(self,object_type:t.Type[V])->t.Optional[V]
flask.click.core.Context.find_root(self)->'Context'
flask.click.core.Context.forward(__self,__cmd:'Command',*args:t.Any,**kwargs:t.Any)->t.Any
flask.click.core.Context.get_help(self)->str
flask.click.core.Context.get_parameter_source(self,name:str)->t.Optional[ParameterSource]
flask.click.core.Context.get_usage(self)->str
flask.click.core.Context.invoke(__self,__callback:t.Union['Command',t.Callable[...,t.Any]],*args:t.Any,**kwargs:t.Any)->t.Any
flask.click.core.Context.lookup_default(self,name:str,call:bool=True)->t.Optional[t.Any]
flask.click.core.Context.make_formatter(self)->HelpFormatter
flask.click.core.Context.meta(self)->t.Dict[str, t.Any]
flask.click.core.Context.scope(self,cleanup:bool=True)->t.Iterator['Context']
flask.click.core.Context.set_parameter_source(self,name:str,source:ParameterSource)->None
flask.click.core.Context.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.core.Context.with_resource(self,context_manager:t.ContextManager[V])->V
flask.click.core.Group(self,name:t.Optional[str]=None,commands:t.Optional[t.Union[t.Dict[str,Command],t.Sequence[Command]]]=None,**attrs:t.Any)
flask.click.core.Group.__init__(self,name:t.Optional[str]=None,commands:t.Optional[t.Union[t.Dict[str,Command],t.Sequence[Command]]]=None,**attrs:t.Any)
flask.click.core.Group.add_command(self,cmd:Command,name:t.Optional[str]=None)->None
flask.click.core.Group.command(self,*args:t.Any,**kwargs:t.Any)->t.Callable[[t.Callable[..., t.Any]], Command]
flask.click.core.Group.get_command(self,ctx:Context,cmd_name:str)->t.Optional[Command]
flask.click.core.Group.group(self,*args:t.Any,**kwargs:t.Any)->t.Callable[[t.Callable[..., t.Any]], 'Group']
flask.click.core.Group.list_commands(self,ctx:Context)->t.List[str]
flask.click.core.MultiCommand(self,name:t.Optional[str]=None,invoke_without_command:bool=False,no_args_is_help:t.Optional[bool]=None,subcommand_metavar:t.Optional[str]=None,chain:bool=False,result_callback:t.Optional[t.Callable[...,t.Any]]=None,**attrs:t.Any)
flask.click.core.MultiCommand.__init__(self,name:t.Optional[str]=None,invoke_without_command:bool=False,no_args_is_help:t.Optional[bool]=None,subcommand_metavar:t.Optional[str]=None,chain:bool=False,result_callback:t.Optional[t.Callable[...,t.Any]]=None,**attrs:t.Any)
flask.click.core.MultiCommand.collect_usage_pieces(self,ctx:Context)->t.List[str]
flask.click.core.MultiCommand.format_commands(self,ctx:Context,formatter:HelpFormatter)->None
flask.click.core.MultiCommand.format_options(self,ctx:Context,formatter:HelpFormatter)->None
flask.click.core.MultiCommand.get_command(self,ctx:Context,cmd_name:str)->t.Optional[Command]
flask.click.core.MultiCommand.invoke(self,ctx:Context)->t.Any
flask.click.core.MultiCommand.list_commands(self,ctx:Context)->t.List[str]
flask.click.core.MultiCommand.parse_args(self,ctx:Context,args:t.List[str])->t.List[str]
flask.click.core.MultiCommand.resolve_command(self,ctx:Context,args:t.List[str])->t.Tuple[t.Optional[str], t.Optional[Command], t.List[str]]
flask.click.core.MultiCommand.result_callback(self,replace:bool=False)->t.Callable[[F], F]
flask.click.core.MultiCommand.resultcallback(self,replace:bool=False)->t.Callable[[F], F]
flask.click.core.MultiCommand.shell_complete(self,ctx:Context,incomplete:str)->t.List['CompletionItem']
flask.click.core.MultiCommand.to_info_dict(self,ctx:Context)->t.Dict[str, t.Any]
flask.click.core.Option(self,param_decls:t.Optional[t.Sequence[str]]=None,show_default:t.Union[bool,str]=False,prompt:t.Union[bool,str]=False,confirmation_prompt:t.Union[bool,str]=False,prompt_required:bool=True,hide_input:bool=False,is_flag:t.Optional[bool]=None,flag_value:t.Optional[t.Any]=None,multiple:bool=False,count:bool=False,allow_from_autoenv:bool=True,type:t.Optional[t.Union[types.ParamType,t.Any]]=None,help:t.Optional[str]=None,hidden:bool=False,show_choices:bool=True,show_envvar:bool=False,**attrs:t.Any)
flask.click.core.Option.__init__(self,param_decls:t.Optional[t.Sequence[str]]=None,show_default:t.Union[bool,str]=False,prompt:t.Union[bool,str]=False,confirmation_prompt:t.Union[bool,str]=False,prompt_required:bool=True,hide_input:bool=False,is_flag:t.Optional[bool]=None,flag_value:t.Optional[t.Any]=None,multiple:bool=False,count:bool=False,allow_from_autoenv:bool=True,type:t.Optional[t.Union[types.ParamType,t.Any]]=None,help:t.Optional[str]=None,hidden:bool=False,show_choices:bool=True,show_envvar:bool=False,**attrs:t.Any)
flask.click.core.Option._parse_decls(self,decls:t.Sequence[str],expose_value:bool)->t.Tuple[t.Optional[str], t.List[str], t.List[str]]
flask.click.core.Option.add_to_parser(self,parser:OptionParser,ctx:Context)->None
flask.click.core.Option.consume_value(self,ctx:Context,opts:t.Mapping[str,'Parameter'])->t.Tuple[t.Any, ParameterSource]
flask.click.core.Option.get_default(self,ctx:Context,call:bool=True)->t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]]
flask.click.core.Option.get_help_record(self,ctx:Context)->t.Optional[t.Tuple[str, str]]
flask.click.core.Option.prompt_for_value(self,ctx:Context)->t.Any
flask.click.core.Option.resolve_envvar_value(self,ctx:Context)->t.Optional[str]
flask.click.core.Option.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.core.Option.value_from_envvar(self,ctx:Context)->t.Optional[t.Any]
flask.click.core.Parameter(self,param_decls:t.Optional[t.Sequence[str]]=None,type:t.Optional[t.Union[types.ParamType,t.Any]]=None,required:bool=False,default:t.Optional[t.Union[t.Any,t.Callable[[],t.Any]]]=None,callback:t.Optional[t.Callable[[Context,'Parameter',t.Any],t.Any]]=None,nargs:t.Optional[int]=None,multiple:bool=False,metavar:t.Optional[str]=None,expose_value:bool=True,is_eager:bool=False,envvar:t.Optional[t.Union[str,t.Sequence[str]]]=None,shell_complete:t.Optional[t.Callable[[Context,'Parameter',str],t.Union[t.List['CompletionItem'],t.List[str]]]]=None,autocompletion:t.Optional[t.Callable[[Context,t.List[str],str],t.List[t.Union[t.Tuple[str,str],str]]]]=None)
flask.click.core.Parameter.__init__(self,param_decls:t.Optional[t.Sequence[str]]=None,type:t.Optional[t.Union[types.ParamType,t.Any]]=None,required:bool=False,default:t.Optional[t.Union[t.Any,t.Callable[[],t.Any]]]=None,callback:t.Optional[t.Callable[[Context,'Parameter',t.Any],t.Any]]=None,nargs:t.Optional[int]=None,multiple:bool=False,metavar:t.Optional[str]=None,expose_value:bool=True,is_eager:bool=False,envvar:t.Optional[t.Union[str,t.Sequence[str]]]=None,shell_complete:t.Optional[t.Callable[[Context,'Parameter',str],t.Union[t.List['CompletionItem'],t.List[str]]]]=None,autocompletion:t.Optional[t.Callable[[Context,t.List[str],str],t.List[t.Union[t.Tuple[str,str],str]]]]=None)
flask.click.core.Parameter.__repr__(self)->str
flask.click.core.Parameter._parse_decls(self,decls:t.Sequence[str],expose_value:bool)->t.Tuple[t.Optional[str], t.List[str], t.List[str]]
flask.click.core.Parameter.add_to_parser(self,parser:OptionParser,ctx:Context)->None
flask.click.core.Parameter.consume_value(self,ctx:Context,opts:t.Mapping[str,t.Any])->t.Tuple[t.Any, ParameterSource]
flask.click.core.Parameter.get_default(self,ctx:Context,call:bool=True)->t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]]
flask.click.core.Parameter.get_error_hint(self,ctx:Context)->str
flask.click.core.Parameter.get_help_record(self,ctx:Context)->t.Optional[t.Tuple[str, str]]
flask.click.core.Parameter.get_usage_pieces(self,ctx:Context)->t.List[str]
flask.click.core.Parameter.handle_parse_result(self,ctx:Context,opts:t.Mapping[str,t.Any],args:t.List[str])->t.Tuple[t.Any, t.List[str]]
flask.click.core.Parameter.human_readable_name(self)->str
flask.click.core.Parameter.make_metavar(self)->str
flask.click.core.Parameter.process_value(self,ctx:Context,value:t.Any)->t.Any
flask.click.core.Parameter.resolve_envvar_value(self,ctx:Context)->t.Optional[str]
flask.click.core.Parameter.shell_complete(self,ctx:Context,incomplete:str)->t.List['CompletionItem']
flask.click.core.Parameter.to_info_dict(self)->t.Dict[str, t.Any]
flask.click.core.Parameter.type_cast_value(self,ctx:Context,value:t.Any)->t.Any
flask.click.core.Parameter.value_from_envvar(self,ctx:Context)->t.Optional[t.Any]
flask.click.core.Parameter.value_is_missing(self,value:t.Any)->bool
flask.click.core.ParameterSource(enum.Enum)
flask.click.core._check_iter(value:t.Any)->t.Iterator[t.Any]
flask.click.core._check_multicommand(base_command:'MultiCommand',cmd_name:str,cmd:'Command',register:bool=False)->None
flask.click.core._complete_visible_commands(ctx:'Context',incomplete:str)->t.Iterator[t.Tuple[str, 'Command']]
flask.click.core.augment_usage_errors(ctx:'Context',param:t.Optional['Parameter']=None)->t.Iterator[None]
flask.click.core.batch(iterable:t.Iterable[V],batch_size:int)->t.List[t.Tuple[V, ...]]
flask.click.core.iter_params_for_processing(invocation_order:t.Sequence['Parameter'],declaration_order:t.Sequence['Parameter'])->t.List['Parameter']


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/_unicodefun.py----------------------------------------
A:flask.click._unicodefun.good_locales->set()
A:flask.click._unicodefun.locale->line.strip()
flask.click._unicodefun._verify_python_env()->None


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/_compat.py----------------------------------------
A:flask.click._compat.CYGWIN->sys.platform.startswith('cygwin')
A:flask.click._compat._ansi_re->re.compile('\\033\\[[;?0-9]*[a-zA-Z]')
A:flask.click._compat.encoding->get_best_encoding(stream)
A:flask.click._compat.self._streamstream->typing.cast(t.BinaryIO, _FixupStream(stream, force_readable, force_writable))
A:flask.click._compat.f->_wrap_io_open(fd, mode, encoding, errors)
A:flask.click._compat.x->getattr(self._stream, 'seekable', None)
A:flask.click._compat.buf->getattr(stream, 'buffer', None)
A:flask.click._compat.stream_value->getattr(stream, attr, None)
A:flask.click._compat.binary_reader->typing.cast(t.BinaryIO, text_stream)
A:flask.click._compat.text_stream->typing.cast(t.TextIO, text_stream)
A:flask.click._compat.possible_binary_reader->find_binary(text_stream)
A:flask.click._compat.reader->_find_binary_reader(sys.stdin)
A:flask.click._compat.writer->_find_binary_writer(sys.stderr)
A:flask.click._compat.rv->wrapper_func()
A:flask.click._compat.tmp_filename->os.path.join(os.path.dirname(filename), f'.__atomic-write{random.randrange(1 << 32):08x}')
A:flask.click._compat.fd->os.open(tmp_filename, flags, 438 if perm is None else perm)
A:flask.click._compat.af->_AtomicFile(f, tmp_filename, os.path.realpath(filename))
A:flask.click._compat.cached->_ansi_stream_wrappers.get(stream)
A:flask.click._compat.strip->should_strip_ansi(stream, color)
A:flask.click._compat.ansi_wrapper->colorama.AnsiToWin32(stream, strip=strip)
A:flask.click._compat.stream->src_func()
A:flask.click._compat._default_text_stdin->_make_cached_stream_func(lambda : sys.stdin, get_text_stdin)
A:flask.click._compat._default_text_stdout->_make_cached_stream_func(lambda : sys.stdout, get_text_stdout)
A:flask.click._compat._default_text_stderr->_make_cached_stream_func(lambda : sys.stderr, get_text_stderr)
flask.click._compat._AtomicFile(self,f:t.IO,tmp_filename:str,real_filename:str)
flask.click._compat._AtomicFile.__enter__(self)->'_AtomicFile'
flask.click._compat._AtomicFile.__exit__(self,exc_type,exc_value,tb)
flask.click._compat._AtomicFile.__getattr__(self,name:str)->t.Any
flask.click._compat._AtomicFile.__init__(self,f:t.IO,tmp_filename:str,real_filename:str)
flask.click._compat._AtomicFile.__repr__(self)->str
flask.click._compat._AtomicFile.close(self,delete:bool=False)->None
flask.click._compat._AtomicFile.name(self)->str
flask.click._compat._FixupStream(self,stream:t.BinaryIO,force_readable:bool=False,force_writable:bool=False)
flask.click._compat._FixupStream.__getattr__(self,name:str)->t.Any
flask.click._compat._FixupStream.__init__(self,stream:t.BinaryIO,force_readable:bool=False,force_writable:bool=False)
flask.click._compat._FixupStream.read1(self,size:int)->bytes
flask.click._compat._FixupStream.readable(self)->bool
flask.click._compat._FixupStream.seekable(self)->bool
flask.click._compat._FixupStream.writable(self)->bool
flask.click._compat._NonClosingTextIOWrapper(self,stream:t.BinaryIO,encoding:t.Optional[str],errors:t.Optional[str],force_readable:bool=False,force_writable:bool=False,**extra:t.Any)
flask.click._compat._NonClosingTextIOWrapper.__del__(self)->None
flask.click._compat._NonClosingTextIOWrapper.__init__(self,stream:t.BinaryIO,encoding:t.Optional[str],errors:t.Optional[str],force_readable:bool=False,force_writable:bool=False,**extra:t.Any)
flask.click._compat._NonClosingTextIOWrapper.isatty(self)->bool
flask.click._compat._find_binary_reader(stream:t.IO)->t.Optional[t.BinaryIO]
flask.click._compat._find_binary_writer(stream:t.IO)->t.Optional[t.BinaryIO]
flask.click._compat._force_correct_text_reader(text_reader:t.IO,encoding:t.Optional[str],errors:t.Optional[str],force_readable:bool=False)->t.TextIO
flask.click._compat._force_correct_text_stream(text_stream:t.IO,encoding:t.Optional[str],errors:t.Optional[str],is_binary:t.Callable[[t.IO,bool],bool],find_binary:t.Callable[[t.IO],t.Optional[t.BinaryIO]],force_readable:bool=False,force_writable:bool=False)->t.TextIO
flask.click._compat._force_correct_text_writer(text_writer:t.IO,encoding:t.Optional[str],errors:t.Optional[str],force_writable:bool=False)->t.TextIO
flask.click._compat._is_binary_reader(stream:t.IO,default:bool=False)->bool
flask.click._compat._is_binary_writer(stream:t.IO,default:bool=False)->bool
flask.click._compat._is_compat_stream_attr(stream:t.TextIO,attr:str,value:t.Optional[str])->bool
flask.click._compat._is_compatible_text_stream(stream:t.TextIO,encoding:t.Optional[str],errors:t.Optional[str])->bool
flask.click._compat._is_jupyter_kernel_output(stream:t.IO)->bool
flask.click._compat._make_cached_stream_func(src_func:t.Callable[[],t.TextIO],wrapper_func:t.Callable[[],t.TextIO])->t.Callable[[], t.TextIO]
flask.click._compat._make_text_stream(stream:t.BinaryIO,encoding:t.Optional[str],errors:t.Optional[str],force_readable:bool=False,force_writable:bool=False)->t.TextIO
flask.click._compat._stream_is_misconfigured(stream:t.TextIO)->bool
flask.click._compat._wrap_io_open(file:t.Union[str,os.PathLike,int],mode:str,encoding:t.Optional[str],errors:t.Optional[str])->t.IO
flask.click._compat.get_best_encoding(stream:t.IO)->str
flask.click._compat.get_binary_stderr()->t.BinaryIO
flask.click._compat.get_binary_stdin()->t.BinaryIO
flask.click._compat.get_binary_stdout()->t.BinaryIO
flask.click._compat.get_filesystem_encoding()->str
flask.click._compat.get_text_stderr(encoding:t.Optional[str]=None,errors:t.Optional[str]=None)->t.TextIO
flask.click._compat.get_text_stdin(encoding:t.Optional[str]=None,errors:t.Optional[str]=None)->t.TextIO
flask.click._compat.get_text_stdout(encoding:t.Optional[str]=None,errors:t.Optional[str]=None)->t.TextIO
flask.click._compat.is_ascii_encoding(encoding:str)->bool
flask.click._compat.isatty(stream:t.IO)->bool
flask.click._compat.open_stream(filename:str,mode:str='r',encoding:t.Optional[str]=None,errors:t.Optional[str]='strict',atomic:bool=False)->t.Tuple[t.IO, bool]
flask.click._compat.should_strip_ansi(stream:t.Optional[t.IO]=None,color:t.Optional[bool]=None)->bool
flask.click._compat.strip_ansi(value:str)->str
flask.click._compat.term_len(x:str)->int


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/shell_completion.py----------------------------------------
A:flask.click.shell_completion.(shell, _, instruction)->instruction.partition('_')
A:flask.click.shell_completion.comp_cls->get_completion_class(shell)
A:flask.click.shell_completion.comp->comp_cls(cli, ctx_args, prog_name, complete_var)
A:flask.click.shell_completion.safe_name->re.sub('\\W*', '', self.prog_name.replace('-', '_'), re.ASCII)
A:flask.click.shell_completion.ctx->cmd.make_context(name, args, parent=ctx, resilient_parsing=True)
A:flask.click.shell_completion.(obj, incomplete)->_resolve_incomplete(ctx, args, incomplete)
A:flask.click.shell_completion.(args, incomplete)->self.get_completion_args()
A:flask.click.shell_completion.completions->self.get_completions(args, incomplete)
A:flask.click.shell_completion.output->subprocess.run(['bash', '-c', 'echo ${BASH_VERSION}'], stdout=subprocess.PIPE)
A:flask.click.shell_completion.match->re.search('^(\\d+)\\.(\\d+)\\.\\d+', output.stdout.decode())
A:flask.click.shell_completion.(major, minor)->re.search('^(\\d+)\\.(\\d+)\\.\\d+', output.stdout.decode()).groups()
A:flask.click.shell_completion.cwords->split_arg_string(os.environ['COMP_WORDS'])
A:flask.click.shell_completion.cword->int(os.environ['COMP_CWORD'])
A:flask.click.shell_completion.(name, cmd, args)->command.resolve_command(ctx, args)
A:flask.click.shell_completion.sub_ctx->cmd.make_context(name, args, parent=ctx, allow_extra_args=True, allow_interspersed_args=False, resilient_parsing=True)
A:flask.click.shell_completion.(name, _, incomplete)->incomplete.partition('=')
A:flask.click.shell_completion.params->cmd.make_context(name, args, parent=ctx, resilient_parsing=True).command.get_params(ctx)
flask.click.shell_completion.BashComplete(ShellComplete)
flask.click.shell_completion.BashComplete._check_version(self)->None
flask.click.shell_completion.BashComplete.format_completion(self,item:CompletionItem)->str
flask.click.shell_completion.BashComplete.get_completion_args(self)->t.Tuple[t.List[str], str]
flask.click.shell_completion.BashComplete.source(self)->str
flask.click.shell_completion.CompletionItem(self,value:t.Any,type:str='plain',help:t.Optional[str]=None,**kwargs:t.Any)
flask.click.shell_completion.CompletionItem.__getattr__(self,name:str)->t.Any
flask.click.shell_completion.CompletionItem.__init__(self,value:t.Any,type:str='plain',help:t.Optional[str]=None,**kwargs:t.Any)
flask.click.shell_completion.FishComplete(ShellComplete)
flask.click.shell_completion.FishComplete.format_completion(self,item:CompletionItem)->str
flask.click.shell_completion.FishComplete.get_completion_args(self)->t.Tuple[t.List[str], str]
flask.click.shell_completion.ShellComplete(self,cli:BaseCommand,ctx_args:t.Dict[str,t.Any],prog_name:str,complete_var:str)
flask.click.shell_completion.ShellComplete.__init__(self,cli:BaseCommand,ctx_args:t.Dict[str,t.Any],prog_name:str,complete_var:str)
flask.click.shell_completion.ShellComplete.complete(self)->str
flask.click.shell_completion.ShellComplete.format_completion(self,item:CompletionItem)->str
flask.click.shell_completion.ShellComplete.func_name(self)->str
flask.click.shell_completion.ShellComplete.get_completion_args(self)->t.Tuple[t.List[str], str]
flask.click.shell_completion.ShellComplete.get_completions(self,args:t.List[str],incomplete:str)->t.List[CompletionItem]
flask.click.shell_completion.ShellComplete.source(self)->str
flask.click.shell_completion.ShellComplete.source_vars(self)->t.Dict[str, t.Any]
flask.click.shell_completion.ZshComplete(ShellComplete)
flask.click.shell_completion.ZshComplete.format_completion(self,item:CompletionItem)->str
flask.click.shell_completion.ZshComplete.get_completion_args(self)->t.Tuple[t.List[str], str]
flask.click.shell_completion._is_incomplete_argument(ctx:Context,param:Parameter)->bool
flask.click.shell_completion._is_incomplete_option(args:t.List[str],param:Parameter)->bool
flask.click.shell_completion._resolve_context(cli:BaseCommand,ctx_args:t.Dict[str,t.Any],prog_name:str,args:t.List[str])->Context
flask.click.shell_completion._resolve_incomplete(ctx:Context,args:t.List[str],incomplete:str)->t.Tuple[t.Union[BaseCommand, Parameter], str]
flask.click.shell_completion._start_of_option(value:str)->bool
flask.click.shell_completion.add_completion_class(cls:t.Type[ShellComplete],name:t.Optional[str]=None)->None
flask.click.shell_completion.get_completion_class(shell:str)->t.Optional[t.Type[ShellComplete]]
flask.click.shell_completion.shell_complete(cli:BaseCommand,ctx_args:t.Dict[str,t.Any],prog_name:str,complete_var:str,instruction:str)->int


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/formatting.py----------------------------------------
A:flask.click.formatting.widths[idx]->max(widths.get(idx, 0), term_len(col))
A:flask.click.formatting.text->text.expandtabs().expandtabs()
A:flask.click.formatting.wrapper->TextWrapper(width, initial_indent=initial_indent, subsequent_indent=subsequent_indent, replace_whitespace=False)
A:flask.click.formatting.orig_len->term_len(line)
A:flask.click.formatting.line->line.lstrip().lstrip()
A:flask.click.formatting.width->max(min(shutil.get_terminal_size().columns, max_width) - 2, 50)
A:flask.click.formatting.rows->list(rows)
A:flask.click.formatting.widths->measure_table(rows)
A:flask.click.formatting.text_width->max(self.width - first_col - 2, 10)
A:flask.click.formatting.wrapped_text->wrap_text(second, text_width, preserve_paragraphs=True)
A:flask.click.formatting.lines->wrap_text(second, text_width, preserve_paragraphs=True).splitlines()
flask.click.HelpFormatter(self,indent_increment:int=2,width:t.Optional[int]=None,max_width:t.Optional[int]=None)
flask.click.HelpFormatter.dedent(self)->None
flask.click.HelpFormatter.getvalue(self)->str
flask.click.HelpFormatter.indent(self)->None
flask.click.HelpFormatter.indentation(self)->t.Iterator[None]
flask.click.HelpFormatter.section(self,name:str)->t.Iterator[None]
flask.click.HelpFormatter.write(self,string:str)->None
flask.click.HelpFormatter.write_dl(self,rows:t.Sequence[t.Tuple[str,str]],col_max:int=30,col_spacing:int=2)->None
flask.click.HelpFormatter.write_heading(self,heading:str)->None
flask.click.HelpFormatter.write_paragraph(self)->None
flask.click.HelpFormatter.write_text(self,text:str)->None
flask.click.HelpFormatter.write_usage(self,prog:str,args:str='',prefix:t.Optional[str]=None)->None
flask.click.formatting.HelpFormatter(self,indent_increment:int=2,width:t.Optional[int]=None,max_width:t.Optional[int]=None)
flask.click.formatting.HelpFormatter.__init__(self,indent_increment:int=2,width:t.Optional[int]=None,max_width:t.Optional[int]=None)
flask.click.formatting.HelpFormatter.dedent(self)->None
flask.click.formatting.HelpFormatter.getvalue(self)->str
flask.click.formatting.HelpFormatter.indent(self)->None
flask.click.formatting.HelpFormatter.indentation(self)->t.Iterator[None]
flask.click.formatting.HelpFormatter.section(self,name:str)->t.Iterator[None]
flask.click.formatting.HelpFormatter.write(self,string:str)->None
flask.click.formatting.HelpFormatter.write_dl(self,rows:t.Sequence[t.Tuple[str,str]],col_max:int=30,col_spacing:int=2)->None
flask.click.formatting.HelpFormatter.write_heading(self,heading:str)->None
flask.click.formatting.HelpFormatter.write_paragraph(self)->None
flask.click.formatting.HelpFormatter.write_text(self,text:str)->None
flask.click.formatting.HelpFormatter.write_usage(self,prog:str,args:str='',prefix:t.Optional[str]=None)->None
flask.click.formatting.iter_rows(rows:t.Iterable[t.Tuple[str,str]],col_count:int)->t.Iterator[t.Tuple[str, ...]]
flask.click.formatting.join_options(options:t.Sequence[str])->t.Tuple[str, bool]
flask.click.formatting.measure_table(rows:t.Iterable[t.Tuple[str,str]])->t.Tuple[int, ...]
flask.click.formatting.wrap_text(text:str,width:int=78,initial_indent:str='',subsequent_indent:str='',preserve_paragraphs:bool=False)->str
flask.click.wrap_text(text:str,width:int=78,initial_indent:str='',subsequent_indent:str='',preserve_paragraphs:bool=False)->str


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/exceptions.py----------------------------------------
A:flask.click.exceptions.file->get_text_stderr()
A:flask.click.exceptions.hint->_('unknown error')
A:flask.click.exceptions.param_hint->_join_param_hints(param_hint)
A:flask.click.exceptions.msg_extra->self.param.type.get_missing_message(self.param)
A:flask.click.exceptions.missing->_('Missing {param_type}').format(param_type=param_type)
A:flask.click.exceptions.message->_('No such option: {name}').format(name=option_name)
A:flask.click.exceptions.possibility_str->', '.join(sorted(self.possibilities))
A:flask.click.exceptions.suggest->ngettext('Did you mean {possibility}?', '(Possible options: {possibilities})', len(self.possibilities)).format(possibility=possibility_str, possibilities=possibility_str)
A:flask.click.exceptions.self.ui_filename->os.fsdecode(filename)
flask.click.Abort(RuntimeError)
flask.click.BadArgumentUsage(UsageError)
flask.click.BadOptionUsage(self,option_name:str,message:str,ctx:t.Optional['Context']=None)
flask.click.BadParameter(self,message:str,ctx:t.Optional['Context']=None,param:t.Optional['Parameter']=None,param_hint:t.Optional[str]=None)
flask.click.BadParameter.format_message(self)->str
flask.click.ClickException(self,message:str)
flask.click.ClickException.__str__(self)->str
flask.click.ClickException.format_message(self)->str
flask.click.ClickException.show(self,file:t.Optional[t.IO]=None)->None
flask.click.FileError(self,filename:str,hint:t.Optional[str]=None)
flask.click.FileError.format_message(self)->str
flask.click.MissingParameter(self,message:t.Optional[str]=None,ctx:t.Optional['Context']=None,param:t.Optional['Parameter']=None,param_hint:t.Optional[str]=None,param_type:t.Optional[str]=None)
flask.click.MissingParameter.__str__(self)->str
flask.click.MissingParameter.format_message(self)->str
flask.click.NoSuchOption(self,option_name:str,message:t.Optional[str]=None,possibilities:t.Optional[t.Sequence[str]]=None,ctx:t.Optional['Context']=None)
flask.click.NoSuchOption.format_message(self)->str
flask.click.UsageError(self,message:str,ctx:t.Optional['Context']=None)
flask.click.UsageError.show(self,file:t.Optional[t.IO]=None)->None
flask.click.exceptions.Abort(RuntimeError)
flask.click.exceptions.BadArgumentUsage(UsageError)
flask.click.exceptions.BadOptionUsage(self,option_name:str,message:str,ctx:t.Optional['Context']=None)
flask.click.exceptions.BadOptionUsage.__init__(self,option_name:str,message:str,ctx:t.Optional['Context']=None)
flask.click.exceptions.BadParameter(self,message:str,ctx:t.Optional['Context']=None,param:t.Optional['Parameter']=None,param_hint:t.Optional[str]=None)
flask.click.exceptions.BadParameter.__init__(self,message:str,ctx:t.Optional['Context']=None,param:t.Optional['Parameter']=None,param_hint:t.Optional[str]=None)
flask.click.exceptions.BadParameter.format_message(self)->str
flask.click.exceptions.ClickException(self,message:str)
flask.click.exceptions.ClickException.__init__(self,message:str)
flask.click.exceptions.ClickException.__str__(self)->str
flask.click.exceptions.ClickException.format_message(self)->str
flask.click.exceptions.ClickException.show(self,file:t.Optional[t.IO]=None)->None
flask.click.exceptions.Exit(self,code:int=0)
flask.click.exceptions.Exit.__init__(self,code:int=0)
flask.click.exceptions.FileError(self,filename:str,hint:t.Optional[str]=None)
flask.click.exceptions.FileError.__init__(self,filename:str,hint:t.Optional[str]=None)
flask.click.exceptions.FileError.format_message(self)->str
flask.click.exceptions.MissingParameter(self,message:t.Optional[str]=None,ctx:t.Optional['Context']=None,param:t.Optional['Parameter']=None,param_hint:t.Optional[str]=None,param_type:t.Optional[str]=None)
flask.click.exceptions.MissingParameter.__init__(self,message:t.Optional[str]=None,ctx:t.Optional['Context']=None,param:t.Optional['Parameter']=None,param_hint:t.Optional[str]=None,param_type:t.Optional[str]=None)
flask.click.exceptions.MissingParameter.__str__(self)->str
flask.click.exceptions.MissingParameter.format_message(self)->str
flask.click.exceptions.NoSuchOption(self,option_name:str,message:t.Optional[str]=None,possibilities:t.Optional[t.Sequence[str]]=None,ctx:t.Optional['Context']=None)
flask.click.exceptions.NoSuchOption.__init__(self,option_name:str,message:t.Optional[str]=None,possibilities:t.Optional[t.Sequence[str]]=None,ctx:t.Optional['Context']=None)
flask.click.exceptions.NoSuchOption.format_message(self)->str
flask.click.exceptions.UsageError(self,message:str,ctx:t.Optional['Context']=None)
flask.click.exceptions.UsageError.__init__(self,message:str,ctx:t.Optional['Context']=None)
flask.click.exceptions.UsageError.show(self,file:t.Optional[t.IO]=None)->None
flask.click.exceptions._join_param_hints(param_hint:t.Optional[t.Union[t.Sequence[str],str]])->t.Optional[str]


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/_textwrap.py----------------------------------------
A:flask.click._textwrap.space_left->max(width - cur_len, 1)
flask.click._textwrap.TextWrapper(textwrap.TextWrapper)
flask.click._textwrap.TextWrapper._handle_long_word(self,reversed_chunks:t.List[str],cur_line:t.List[str],cur_len:int,width:int)->None
flask.click._textwrap.TextWrapper.extra_indent(self,indent:str)->t.Iterator[None]
flask.click._textwrap.TextWrapper.indent_only(self,text:str)->str


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/decorators.py----------------------------------------
A:flask.click.decorators.F->typing.TypeVar('F', bound=t.Callable[..., t.Any])
A:flask.click.decorators.FC->typing.TypeVar('FC', bound=t.Union[t.Callable[..., t.Any], Command])
A:flask.click.decorators.ctx->get_current_context()
A:flask.click.decorators.obj->get_current_context().find_object(object_type)
A:flask.click.decorators.help->inspect.cleandoc(help)
A:flask.click.decorators.cmd->_make_command(f, name, attrs, cls)
A:flask.click.decorators.ArgumentClass->attrs.pop('cls', Argument)
A:flask.click.decorators.option_attrs->attrs.copy()
A:flask.click.decorators.option_attrs['help']->inspect.cleandoc(option_attrs['help'])
A:flask.click.decorators.OptionClass->attrs.copy().pop('cls', Option)
A:flask.click.decorators.message->_('%(prog)s, version %(version)s')
A:flask.click.decorators.frame->inspect.currentframe()
A:flask.click.decorators.package_name->f_globals.get('__package__')
A:flask.click.decorators.version->importlib_metadata.version(package_name)
flask.click.argument(*param_decls:str,**attrs:t.Any)->t.Callable[[FC], FC]
flask.click.command(name:t.Optional[str]=None,cls:t.Optional[t.Type[Command]]=None,**attrs:t.Any)->t.Callable[[F], Command]
flask.click.confirmation_option(*param_decls:str,**kwargs:t.Any)->t.Callable[[FC], FC]
flask.click.decorators._make_command(f:F,name:t.Optional[str],attrs:t.MutableMapping[str,t.Any],cls:t.Type[Command])->Command
flask.click.decorators._param_memo(f:FC,param:Parameter)->None
flask.click.decorators.argument(*param_decls:str,**attrs:t.Any)->t.Callable[[FC], FC]
flask.click.decorators.command(name:t.Optional[str]=None,cls:t.Optional[t.Type[Command]]=None,**attrs:t.Any)->t.Callable[[F], Command]
flask.click.decorators.confirmation_option(*param_decls:str,**kwargs:t.Any)->t.Callable[[FC], FC]
flask.click.decorators.group(name:t.Optional[str]=None,**attrs:t.Any)->t.Callable[[F], Group]
flask.click.decorators.help_option(*param_decls:str,**kwargs:t.Any)->t.Callable[[FC], FC]
flask.click.decorators.make_pass_decorator(object_type:t.Type,ensure:bool=False)->'t.Callable[[F], F]'
flask.click.decorators.option(*param_decls:str,**attrs:t.Any)->t.Callable[[FC], FC]
flask.click.decorators.pass_context(f:F)->F
flask.click.decorators.pass_meta_key(key:str,*,doc_description:t.Optional[str]=None)->'t.Callable[[F], F]'
flask.click.decorators.pass_obj(f:F)->F
flask.click.decorators.password_option(*param_decls:str,**kwargs:t.Any)->t.Callable[[FC], FC]
flask.click.decorators.version_option(version:t.Optional[str]=None,*param_decls:str,package_name:t.Optional[str]=None,prog_name:t.Optional[str]=None,message:t.Optional[str]=None,**kwargs:t.Any)->t.Callable[[FC], FC]
flask.click.group(name:t.Optional[str]=None,**attrs:t.Any)->t.Callable[[F], Group]
flask.click.help_option(*param_decls:str,**kwargs:t.Any)->t.Callable[[FC], FC]
flask.click.make_pass_decorator(object_type:t.Type,ensure:bool=False)->'t.Callable[[F], F]'
flask.click.option(*param_decls:str,**attrs:t.Any)->t.Callable[[FC], FC]
flask.click.pass_context(f:F)->F
flask.click.pass_obj(f:F)->F
flask.click.password_option(*param_decls:str,**kwargs:t.Any)->t.Callable[[FC], FC]
flask.click.version_option(version:t.Optional[str]=None,*param_decls:str,package_name:t.Optional[str]=None,prog_name:t.Optional[str]=None,message:t.Optional[str]=None,**kwargs:t.Any)->t.Callable[[FC], FC]


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/click/termui.py----------------------------------------
A:flask.click.termui.V->typing.TypeVar('V')
A:flask.click.termui.value_proc->convert_type(type, default)
A:flask.click.termui.prompt->_build_prompt(text, prompt_suffix, show_default, 'y/n' if default is None else 'Y/n' if default else 'y/N')
A:flask.click.termui.confirmation_prompt->_build_prompt(confirmation_prompt, prompt_suffix)
A:flask.click.termui.value->visible_prompt_func(' ').lower().strip()
A:flask.click.termui.result->value_proc(value)
A:flask.click.termui.value2->prompt_func(confirmation_prompt)
A:flask.click.termui.color->resolve_color_default(color)
A:flask.click.termui.i->iter(t.cast(t.Iterable[str], text_or_generator))
A:flask.click.termui.text->str(text)
A:flask.click.termui.message->style(message, **styles)
A:flask.click.termui.ed->Editor(editor=editor, env=env, require_save=require_save, extension=extension)
A:flask.click.termui.info->_('Press any key to continue...')
flask.click.clear()->None
flask.click.confirm(text:str,default:t.Optional[bool]=False,abort:bool=False,prompt_suffix:str=':',show_default:bool=True,err:bool=False)->bool
flask.click.echo_via_pager(text_or_generator:t.Union[t.Iterable[str],t.Callable[[],t.Iterable[str]],str],color:t.Optional[bool]=None)->None
flask.click.edit(text:t.Optional[t.AnyStr]=None,editor:t.Optional[str]=None,env:t.Optional[t.Mapping[str,str]]=None,require_save:bool=True,extension:str='.txt',filename:t.Optional[str]=None)->t.Optional[t.AnyStr]
flask.click.get_terminal_size()->os.terminal_size
flask.click.getchar(echo:bool=False)->str
flask.click.launch(url:str,wait:bool=False,locate:bool=False)->int
flask.click.pause(info:t.Optional[str]=None,err:bool=False)->None
flask.click.progressbar(iterable:t.Optional[t.Iterable[V]]=None,length:t.Optional[int]=None,label:t.Optional[str]=None,show_eta:bool=True,show_percent:t.Optional[bool]=None,show_pos:bool=False,item_show_func:t.Optional[t.Callable[[t.Optional[V]],t.Optional[str]]]=None,fill_char:str='#',empty_char:str='-',bar_template:str='%(label)s[%(bar)s]%(info)s',info_sep:str='',width:int=36,file:t.Optional[t.TextIO]=None,color:t.Optional[bool]=None,update_min_steps:int=1)->'ProgressBar[V]'
flask.click.prompt(text:str,default:t.Optional[t.Any]=None,hide_input:bool=False,confirmation_prompt:t.Union[bool,str]=False,type:t.Optional[t.Union[ParamType,t.Any]]=None,value_proc:t.Optional[t.Callable[[str],t.Any]]=None,prompt_suffix:str=':',show_default:bool=True,err:bool=False,show_choices:bool=True)->t.Any
flask.click.secho(message:t.Optional[t.Any]=None,file:t.Optional[t.IO[t.AnyStr]]=None,nl:bool=True,err:bool=False,color:t.Optional[bool]=None,**styles:t.Any)->None
flask.click.style(text:t.Any,fg:t.Optional[t.Union[int,t.Tuple[int,int,int],str]]=None,bg:t.Optional[t.Union[int,t.Tuple[int,int,int],str]]=None,bold:t.Optional[bool]=None,dim:t.Optional[bool]=None,underline:t.Optional[bool]=None,overline:t.Optional[bool]=None,italic:t.Optional[bool]=None,blink:t.Optional[bool]=None,reverse:t.Optional[bool]=None,strikethrough:t.Optional[bool]=None,reset:bool=True)->str
flask.click.termui._build_prompt(text:str,suffix:str,show_default:bool=False,default:t.Optional[t.Any]=None,show_choices:bool=True,type:t.Optional[ParamType]=None)->str
flask.click.termui._format_default(default:t.Any)->t.Any
flask.click.termui._interpret_color(color:t.Union[int,t.Tuple[int,int,int],str],offset:int=0)->str
flask.click.termui.clear()->None
flask.click.termui.confirm(text:str,default:t.Optional[bool]=False,abort:bool=False,prompt_suffix:str=':',show_default:bool=True,err:bool=False)->bool
flask.click.termui.echo_via_pager(text_or_generator:t.Union[t.Iterable[str],t.Callable[[],t.Iterable[str]],str],color:t.Optional[bool]=None)->None
flask.click.termui.edit(text:t.Optional[t.AnyStr]=None,editor:t.Optional[str]=None,env:t.Optional[t.Mapping[str,str]]=None,require_save:bool=True,extension:str='.txt',filename:t.Optional[str]=None)->t.Optional[t.AnyStr]
flask.click.termui.get_terminal_size()->os.terminal_size
flask.click.termui.getchar(echo:bool=False)->str
flask.click.termui.hidden_prompt_func(prompt:str)->str
flask.click.termui.launch(url:str,wait:bool=False,locate:bool=False)->int
flask.click.termui.pause(info:t.Optional[str]=None,err:bool=False)->None
flask.click.termui.progressbar(iterable:t.Optional[t.Iterable[V]]=None,length:t.Optional[int]=None,label:t.Optional[str]=None,show_eta:bool=True,show_percent:t.Optional[bool]=None,show_pos:bool=False,item_show_func:t.Optional[t.Callable[[t.Optional[V]],t.Optional[str]]]=None,fill_char:str='#',empty_char:str='-',bar_template:str='%(label)s[%(bar)s]%(info)s',info_sep:str='',width:int=36,file:t.Optional[t.TextIO]=None,color:t.Optional[bool]=None,update_min_steps:int=1)->'ProgressBar[V]'
flask.click.termui.prompt(text:str,default:t.Optional[t.Any]=None,hide_input:bool=False,confirmation_prompt:t.Union[bool,str]=False,type:t.Optional[t.Union[ParamType,t.Any]]=None,value_proc:t.Optional[t.Callable[[str],t.Any]]=None,prompt_suffix:str=':',show_default:bool=True,err:bool=False,show_choices:bool=True)->t.Any
flask.click.termui.raw_terminal()->t.ContextManager[int]
flask.click.termui.secho(message:t.Optional[t.Any]=None,file:t.Optional[t.IO[t.AnyStr]]=None,nl:bool=True,err:bool=False,color:t.Optional[bool]=None,**styles:t.Any)->None
flask.click.termui.style(text:t.Any,fg:t.Optional[t.Union[int,t.Tuple[int,int,int],str]]=None,bg:t.Optional[t.Union[int,t.Tuple[int,int,int],str]]=None,bold:t.Optional[bool]=None,dim:t.Optional[bool]=None,underline:t.Optional[bool]=None,overline:t.Optional[bool]=None,italic:t.Optional[bool]=None,blink:t.Optional[bool]=None,reverse:t.Optional[bool]=None,strikethrough:t.Optional[bool]=None,reset:bool=True)->str
flask.click.termui.unstyle(text:str)->str
flask.click.unstyle(text:str)->str


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/json/tag.py----------------------------------------
A:flask.json.tag.key->next(iter(value))
A:flask.json.tag.tag->tag_class(self)
flask._json.tag.JSONTag(self,serializer)
flask._json.tag.JSONTag.check(self,value)
flask._json.tag.JSONTag.tag(self,value)
flask._json.tag.JSONTag.to__json(self,value)
flask._json.tag.JSONTag.to_python(self,value)
flask._json.tag.PassDict(JSONTag)
flask._json.tag.PassDict.check(self,value)
flask._json.tag.PassDict.to__json(self,value)
flask._json.tag.PassList(JSONTag)
flask._json.tag.PassList.check(self,value)
flask._json.tag.PassList.to__json(self,value)
flask._json.tag.TagBytes(JSONTag)
flask._json.tag.TagBytes.check(self,value)
flask._json.tag.TagBytes.to__json(self,value)
flask._json.tag.TagBytes.to_python(self,value)
flask._json.tag.TagDateTime(JSONTag)
flask._json.tag.TagDateTime.check(self,value)
flask._json.tag.TagDateTime.to__json(self,value)
flask._json.tag.TagDateTime.to_python(self,value)
flask._json.tag.TagDict(JSONTag)
flask._json.tag.TagDict.check(self,value)
flask._json.tag.TagDict.to__json(self,value)
flask._json.tag.TagDict.to_python(self,value)
flask._json.tag.TagMarkup(JSONTag)
flask._json.tag.TagMarkup.check(self,value)
flask._json.tag.TagMarkup.to__json(self,value)
flask._json.tag.TagMarkup.to_python(self,value)
flask._json.tag.TagTuple(JSONTag)
flask._json.tag.TagTuple.check(self,value)
flask._json.tag.TagTuple.to__json(self,value)
flask._json.tag.TagTuple.to_python(self,value)
flask._json.tag.TagUUID(JSONTag)
flask._json.tag.TagUUID.check(self,value)
flask._json.tag.TagUUID.to__json(self,value)
flask._json.tag.TagUUID.to_python(self,value)
flask._json.tag.TaggedJSONSerializer(self)
flask._json.tag.TaggedJSONSerializer.dumps(self,value)
flask._json.tag.TaggedJSONSerializer.loads(self,value)
flask._json.tag.TaggedJSONSerializer.register(self,tag_class,force=False,index=None)
flask._json.tag.TaggedJSONSerializer.tag(self,value)
flask._json.tag.TaggedJSONSerializer.untag(self,value)
flask.json.tag.JSONTag(self,serializer)
flask.json.tag.JSONTag.__init__(self,serializer)
flask.json.tag.JSONTag.check(self,value)
flask.json.tag.JSONTag.tag(self,value)
flask.json.tag.JSONTag.to_json(self,value)
flask.json.tag.JSONTag.to_python(self,value)
flask.json.tag.PassDict(JSONTag)
flask.json.tag.PassDict.check(self,value)
flask.json.tag.PassDict.to_json(self,value)
flask.json.tag.PassList(JSONTag)
flask.json.tag.PassList.check(self,value)
flask.json.tag.PassList.to_json(self,value)
flask.json.tag.TagBytes(JSONTag)
flask.json.tag.TagBytes.check(self,value)
flask.json.tag.TagBytes.to_json(self,value)
flask.json.tag.TagBytes.to_python(self,value)
flask.json.tag.TagDateTime(JSONTag)
flask.json.tag.TagDateTime.check(self,value)
flask.json.tag.TagDateTime.to_json(self,value)
flask.json.tag.TagDateTime.to_python(self,value)
flask.json.tag.TagDict(JSONTag)
flask.json.tag.TagDict.check(self,value)
flask.json.tag.TagDict.to_json(self,value)
flask.json.tag.TagDict.to_python(self,value)
flask.json.tag.TagMarkup(JSONTag)
flask.json.tag.TagMarkup.check(self,value)
flask.json.tag.TagMarkup.to_json(self,value)
flask.json.tag.TagMarkup.to_python(self,value)
flask.json.tag.TagTuple(JSONTag)
flask.json.tag.TagTuple.check(self,value)
flask.json.tag.TagTuple.to_json(self,value)
flask.json.tag.TagTuple.to_python(self,value)
flask.json.tag.TagUUID(JSONTag)
flask.json.tag.TagUUID.check(self,value)
flask.json.tag.TagUUID.to_json(self,value)
flask.json.tag.TagUUID.to_python(self,value)
flask.json.tag.TaggedJSONSerializer(self)
flask.json.tag.TaggedJSONSerializer.__init__(self)
flask.json.tag.TaggedJSONSerializer.dumps(self,value)
flask.json.tag.TaggedJSONSerializer.loads(self,value)
flask.json.tag.TaggedJSONSerializer.register(self,tag_class,force=False,index=None)
flask.json.tag.TaggedJSONSerializer.tag(self,value)
flask.json.tag.TaggedJSONSerializer.untag(self,value)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/json/__init__.py----------------------------------------
A:flask.json.__init__.fp->_wrap_reader_for_text(fp, kwargs.pop('encoding', None) or 'utf-8')
A:flask.json.__init__.encoding->detect_encoding(s)
A:flask.json.__init__.rv->rv.replace('\\/', '/').replace('\\/', '/')
A:flask.json.__init__.s->s.decode(encoding).decode(encoding)
flask._json.__init__.JSONDecoder(_json.JSONDecoder)
flask._json.__init__.JSONEncoder(_json.JSONEncoder)
flask._json.__init__.JSONEncoder.default(self,o)
flask._json.__init__._dump_arg_defaults(kwargs)
flask._json.__init__._jsonify(*args,**kwargs)
flask._json.__init__._load_arg_defaults(kwargs)
flask._json.__init__._wrap_reader_for_text(fp,encoding)
flask._json.__init__._wrap_writer_for_text(fp,encoding)
flask._json.__init__.detect_encoding(data)
flask._json.__init__.dump(obj,fp,**kwargs)
flask._json.__init__.dumps(obj,**kwargs)
flask._json.__init__.htmlsafe_dump(obj,fp,**kwargs)
flask._json.__init__.htmlsafe_dumps(obj,**kwargs)
flask._json.__init__.load(fp,**kwargs)
flask._json.__init__.loads(s,**kwargs)
flask._json.__init__.to_json_filter(obj,**kwargs)
flask.json.__init__.JSONDecoder(_json.JSONDecoder)
flask.json.__init__.JSONEncoder(_json.JSONEncoder)
flask.json.__init__.JSONEncoder.default(self,o)
flask.json.__init__._dump_arg_defaults(kwargs)
flask.json.__init__._load_arg_defaults(kwargs)
flask.json.__init__._wrap_reader_for_text(fp,encoding)
flask.json.__init__._wrap_writer_for_text(fp,encoding)
flask.json.__init__.detect_encoding(data)
flask.json.__init__.dump(obj,fp,**kwargs)
flask.json.__init__.dumps(obj,**kwargs)
flask.json.__init__.htmlsafe_dump(obj,fp,**kwargs)
flask.json.__init__.htmlsafe_dumps(obj,**kwargs)
flask.json.__init__.jsonify(*args,**kwargs)
flask.json.__init__.load(fp,**kwargs)
flask.json.__init__.loads(s,**kwargs)
flask.json.__init__.tojson_filter(obj,**kwargs)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/test.py----------------------------------------
A:flask.werkzeug.test.length->stream.tell()
A:flask.werkzeug.test.new_stream->typing.cast(t.IO[bytes], TemporaryFile('wb+'))
A:flask.werkzeug.test.encoder->MultipartEncoder(boundary.encode())
A:flask.werkzeug.test.reader->getattr(value, 'read', None)
A:flask.werkzeug.test.filename->getattr(value, 'filename', getattr(value, 'name', None))
A:flask.werkzeug.test.content_type->getattr(value, 'content_type', None)
A:flask.werkzeug.test.headers->self.headers.copy()
A:flask.werkzeug.test.chunk->reader(16384)
A:flask.werkzeug.test.value->str(value)
A:flask.werkzeug.test.(stream, length, boundary)->stream_encode_multipart(values, use_tempfile=False, boundary=boundary, charset=charset)
A:flask.werkzeug.test.name->name.lower().lower()
A:flask.werkzeug.test.self.headers->_TestCookieHeaders(headers)
A:flask.werkzeug.test.environ['HTTP_COOKIE']->'; '.join(cvals)
A:flask.werkzeug.test._TAnyMultiDict->typing.TypeVar('_TAnyMultiDict', bound=MultiDict)
A:flask.werkzeug.test.json_dumps->staticmethod(json.dumps)
A:flask.werkzeug.test.path_s->_make_encode_wrapper(path)
A:flask.werkzeug.test.request_uri->url_parse(path)
A:flask.werkzeug.test.self.path->iri_to_uri(request_uri.path)
A:flask.werkzeug.test.base_url->url_fix(iri_to_uri(base_url, charset), charset)
A:flask.werkzeug.test.query_string->MultiDict(query_string)
A:flask.werkzeug.test.auth->Authorization('basic', {'username': auth[0], 'password': auth[1]})
A:flask.werkzeug.test.data->data.encode(self.charset).encode(self.charset)
A:flask.werkzeug.test.self.input_stream->BytesIO(data)
A:flask.werkzeug.test.self.content_length->len(data)
A:flask.werkzeug.test.(scheme, netloc, script_root, qs, anchor)->url_parse(value)
A:flask.werkzeug.test.self.script_root->script_root.rstrip('/')
A:flask.werkzeug.test.ct->self.headers.get('Content-Type')
A:flask.werkzeug.test.self.content_type->get_content_type(value, self.charset)
A:flask.werkzeug.test.self.headers['Content-Type']->dump_options_header(self.mimetype, d)
A:flask.werkzeug.test.self.headers['Content-Length']->str(value)
A:flask.werkzeug.test.rv->run_wsgi_app(self.application, environ, buffered=buffered)
A:flask.werkzeug.test.self._args->MultiDict()
A:flask.werkzeug.test.pieces->self.host.split(':', 1)
A:flask.werkzeug.test.files->self.files.values()
A:flask.werkzeug.test.start_pos->BytesIO().tell()
A:flask.werkzeug.test.end_pos->BytesIO().tell()
A:flask.werkzeug.test.(input_stream, content_length, boundary)->stream_encode_multipart(CombinedMultiDict([self.form, self.files]), charset=self.charset)
A:flask.werkzeug.test.form_encoded->url_encode(self.form, charset=self.charset).encode('ascii')
A:flask.werkzeug.test.content_length->len(form_encoded)
A:flask.werkzeug.test.input_stream->BytesIO()
A:flask.werkzeug.test.raw_uri->_wsgi_encoding_dance(self.request_uri, self.charset)
A:flask.werkzeug.test.result['CONTENT_LENGTH']->str(content_length)
A:flask.werkzeug.test.combined_headers->defaultdict(list)
A:flask.werkzeug.test.result[key]->', '.join(values)
A:flask.werkzeug.test.response_wrapper->type('WrapperTestResponse', (TestResponse, response_wrapper), {})
A:flask.werkzeug.test.self.response_wrapper->typing.cast(t.Type['TestResponse'], response_wrapper)
A:flask.werkzeug.test.header->dump_cookie(key, value, max_age, expires, path, domain, secure, httponly, charset, samesite=samesite)
A:flask.werkzeug.test.environ->_get_environ(environ).copy()
A:flask.werkzeug.test.(scheme, netloc, path, qs, anchor)->url_parse(response.location)
A:flask.werkzeug.test.builder->EnvironBuilder(*args, **kwargs)
A:flask.werkzeug.test.to_name_parts->netloc.split(':', 1)[0].split('.')
A:flask.werkzeug.test.from_name_parts->EnvironBuilder(*args, **kwargs).server_name.split('.')
A:flask.werkzeug.test.path_parts->path.split('/')
A:flask.werkzeug.test.root_parts->EnvironBuilder(*args, **kwargs).script_root.split('/')
A:flask.werkzeug.test.request->EnvironBuilder(*args, **kwargs).get_request()
A:flask.werkzeug.test.response->self.resolve_redirect(response, buffered=buffered)
A:flask.werkzeug.test.redirects->set()
A:flask.werkzeug.test.response.history->tuple(history)
A:flask.werkzeug.test.app_rv->app(environ, start_response)
A:flask.werkzeug.test.close_func->getattr(app_rv, 'close', None)
A:flask.werkzeug.test.app_iter->ClosingIterator(app_iter, close_func)
flask.werkzeug.Client(self,application:'WSGIApplication',response_wrapper:t.Optional[t.Type['Response']]=None,use_cookies:bool=True,allow_subdomain_redirects:bool=False)
flask.werkzeug.Client.__repr__(self)->str
flask.werkzeug.Client.delete(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.Client.delete_cookie(self,server_name:str,key:str,path:str='/',domain:t.Optional[str]=None,secure:bool=False,httponly:bool=False,samesite:t.Optional[str]=None)->None
flask.werkzeug.Client.get(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.Client.head(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.Client.open(self,*args:t.Any,as_tuple:bool=False,buffered:bool=False,follow_redirects:bool=False,**kwargs:t.Any)->'TestResponse'
flask.werkzeug.Client.options(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.Client.patch(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.Client.post(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.Client.put(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.Client.resolve_redirect(self,response:'TestResponse',buffered:bool=False)->'TestResponse'
flask.werkzeug.Client.run_wsgi_app(self,environ:'WSGIEnvironment',buffered:bool=False)->t.Tuple[t.Iterable[bytes], str, Headers]
flask.werkzeug.Client.set_cookie(self,server_name:str,key:str,value:str='',max_age:t.Optional[t.Union[timedelta,int]]=None,expires:t.Optional[t.Union[str,datetime,int,float]]=None,path:str='/',domain:t.Optional[str]=None,secure:bool=False,httponly:bool=False,samesite:t.Optional[str]=None,charset:str='utf-8')->None
flask.werkzeug.Client.trace(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.ClientRedirectError(Exception)
flask.werkzeug.test.Client(self,application:'WSGIApplication',response_wrapper:t.Optional[t.Type['Response']]=None,use_cookies:bool=True,allow_subdomain_redirects:bool=False)
flask.werkzeug.test.Client.__init__(self,application:'WSGIApplication',response_wrapper:t.Optional[t.Type['Response']]=None,use_cookies:bool=True,allow_subdomain_redirects:bool=False)
flask.werkzeug.test.Client.__repr__(self)->str
flask.werkzeug.test.Client.delete(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.test.Client.delete_cookie(self,server_name:str,key:str,path:str='/',domain:t.Optional[str]=None,secure:bool=False,httponly:bool=False,samesite:t.Optional[str]=None)->None
flask.werkzeug.test.Client.get(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.test.Client.head(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.test.Client.open(self,*args:t.Any,as_tuple:bool=False,buffered:bool=False,follow_redirects:bool=False,**kwargs:t.Any)->'TestResponse'
flask.werkzeug.test.Client.options(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.test.Client.patch(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.test.Client.post(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.test.Client.put(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.test.Client.resolve_redirect(self,response:'TestResponse',buffered:bool=False)->'TestResponse'
flask.werkzeug.test.Client.run_wsgi_app(self,environ:'WSGIEnvironment',buffered:bool=False)->t.Tuple[t.Iterable[bytes], str, Headers]
flask.werkzeug.test.Client.set_cookie(self,server_name:str,key:str,value:str='',max_age:t.Optional[t.Union[timedelta,int]]=None,expires:t.Optional[t.Union[str,datetime,int,float]]=None,path:str='/',domain:t.Optional[str]=None,secure:bool=False,httponly:bool=False,samesite:t.Optional[str]=None,charset:str='utf-8')->None
flask.werkzeug.test.Client.trace(self,*args:t.Any,**kw:t.Any)->'TestResponse'
flask.werkzeug.test.ClientRedirectError(Exception)
flask.werkzeug.test.EnvironBuilder(self,path:str='/',base_url:t.Optional[str]=None,query_string:t.Optional[t.Union[t.Mapping[str,str],str]]=None,method:str='GET',input_stream:t.Optional[t.IO[bytes]]=None,content_type:t.Optional[str]=None,content_length:t.Optional[int]=None,errors_stream:t.Optional[t.IO[str]]=None,multithread:bool=False,multiprocess:bool=False,run_once:bool=False,headers:t.Optional[t.Union[Headers,t.Iterable[t.Tuple[str,str]]]]=None,data:t.Optional[t.Union[t.IO[bytes],str,bytes,t.Mapping[str,t.Any]]]=None,environ_base:t.Optional[t.Mapping[str,t.Any]]=None,environ_overrides:t.Optional[t.Mapping[str,t.Any]]=None,charset:str='utf-8',mimetype:t.Optional[str]=None,json:t.Optional[t.Mapping[str,t.Any]]=None,auth:t.Optional[t.Union[Authorization,t.Tuple[str,str]]]=None)
flask.werkzeug.test.EnvironBuilder.__del__(self)->None
flask.werkzeug.test.EnvironBuilder.__init__(self,path:str='/',base_url:t.Optional[str]=None,query_string:t.Optional[t.Union[t.Mapping[str,str],str]]=None,method:str='GET',input_stream:t.Optional[t.IO[bytes]]=None,content_type:t.Optional[str]=None,content_length:t.Optional[int]=None,errors_stream:t.Optional[t.IO[str]]=None,multithread:bool=False,multiprocess:bool=False,run_once:bool=False,headers:t.Optional[t.Union[Headers,t.Iterable[t.Tuple[str,str]]]]=None,data:t.Optional[t.Union[t.IO[bytes],str,bytes,t.Mapping[str,t.Any]]]=None,environ_base:t.Optional[t.Mapping[str,t.Any]]=None,environ_overrides:t.Optional[t.Mapping[str,t.Any]]=None,charset:str='utf-8',mimetype:t.Optional[str]=None,json:t.Optional[t.Mapping[str,t.Any]]=None,auth:t.Optional[t.Union[Authorization,t.Tuple[str,str]]]=None)
flask.werkzeug.test.EnvironBuilder._add_file_from_data(self,key:str,value:t.Union[t.IO[bytes],t.Tuple[t.IO[bytes],str],t.Tuple[t.IO[bytes],str,str]])->None
flask.werkzeug.test.EnvironBuilder._get_form(self,name:str,storage:t.Type[_TAnyMultiDict])->_TAnyMultiDict
flask.werkzeug.test.EnvironBuilder._make_base_url(scheme:str,host:str,script_root:str)->str
flask.werkzeug.test.EnvironBuilder._set_form(self,name:str,value:MultiDict)->None
flask.werkzeug.test.EnvironBuilder.args(self)->MultiDict
flask.werkzeug.test.EnvironBuilder.args(self,value:t.Optional[MultiDict])->None
flask.werkzeug.test.EnvironBuilder.base_url(self)->str
flask.werkzeug.test.EnvironBuilder.base_url(self,value:t.Optional[str])->None
flask.werkzeug.test.EnvironBuilder.close(self)->None
flask.werkzeug.test.EnvironBuilder.content_length(self)->t.Optional[int]
flask.werkzeug.test.EnvironBuilder.content_length(self,value:t.Optional[int])->None
flask.werkzeug.test.EnvironBuilder.content_type(self)->t.Optional[str]
flask.werkzeug.test.EnvironBuilder.content_type(self,value:t.Optional[str])->None
flask.werkzeug.test.EnvironBuilder.files(self)->FileMultiDict
flask.werkzeug.test.EnvironBuilder.files(self,value:FileMultiDict)->None
flask.werkzeug.test.EnvironBuilder.form(self)->MultiDict
flask.werkzeug.test.EnvironBuilder.form(self,value:MultiDict)->None
flask.werkzeug.test.EnvironBuilder.from_environ(cls,environ:'WSGIEnvironment',**kwargs:t.Any)->'EnvironBuilder'
flask.werkzeug.test.EnvironBuilder.get_environ(self)->'WSGIEnvironment'
flask.werkzeug.test.EnvironBuilder.get_request(self,cls:t.Optional[t.Type[Request]]=None)->Request
flask.werkzeug.test.EnvironBuilder.input_stream(self)->t.Optional[t.IO[bytes]]
flask.werkzeug.test.EnvironBuilder.input_stream(self,value:t.Optional[t.IO[bytes]])->None
flask.werkzeug.test.EnvironBuilder.mimetype(self)->t.Optional[str]
flask.werkzeug.test.EnvironBuilder.mimetype(self,value:str)->None
flask.werkzeug.test.EnvironBuilder.mimetype_params(self)->t.Mapping[str, str]
flask.werkzeug.test.EnvironBuilder.query_string(self)->str
flask.werkzeug.test.EnvironBuilder.query_string(self,value:t.Optional[str])->None
flask.werkzeug.test.EnvironBuilder.server_name(self)->str
flask.werkzeug.test.EnvironBuilder.server_port(self)->int
flask.werkzeug.test.TestResponse(self,response:t.Iterable[bytes],status:str,headers:Headers,request:Request,history:t.Tuple['TestResponse']=(),**kwargs:t.Any)
flask.werkzeug.test.TestResponse.__getitem__(self,item:int)->t.Any
flask.werkzeug.test.TestResponse.__init__(self,response:t.Iterable[bytes],status:str,headers:Headers,request:Request,history:t.Tuple['TestResponse']=(),**kwargs:t.Any)
flask.werkzeug.test.TestResponse.__iter__(self)->t.Iterator
flask.werkzeug.test._TestCookieHeaders(self,headers:t.Union[Headers,t.List[t.Tuple[str,str]]])
flask.werkzeug.test._TestCookieHeaders.__init__(self,headers:t.Union[Headers,t.List[t.Tuple[str,str]]])
flask.werkzeug.test._TestCookieHeaders.get_all(self,name:str,default:t.Optional[t.Iterable[str]]=None)->t.Iterable[str]
flask.werkzeug.test._TestCookieHeaders.getheaders(self,name:str)->t.Iterable[str]
flask.werkzeug.test._TestCookieJar(CookieJar)
flask.werkzeug.test._TestCookieJar.extract_wsgi(self,environ:'WSGIEnvironment',headers:t.Union[Headers,t.List[t.Tuple[str,str]]])->None
flask.werkzeug.test._TestCookieJar.inject_wsgi(self,environ:'WSGIEnvironment')->None
flask.werkzeug.test._TestCookieResponse(self,headers:t.Union[Headers,t.List[t.Tuple[str,str]]])
flask.werkzeug.test._TestCookieResponse.__init__(self,headers:t.Union[Headers,t.List[t.Tuple[str,str]]])
flask.werkzeug.test._TestCookieResponse.info(self)->_TestCookieHeaders
flask.werkzeug.test._iter_data(data:t.Mapping[str,t.Any])->t.Iterator[t.Tuple[str, t.Any]]
flask.werkzeug.test.create_environ(*args:t.Any,**kwargs:t.Any)->'WSGIEnvironment'
flask.werkzeug.test.encode_multipart(values:t.Mapping[str,t.Any],boundary:t.Optional[str]=None,charset:str='utf-8')->t.Tuple[str, bytes]
flask.werkzeug.test.run_wsgi_app(app:'WSGIApplication',environ:'WSGIEnvironment',buffered:bool=False)->t.Tuple[t.Iterable[bytes], str, Headers]
flask.werkzeug.test.stream_encode_multipart(data:t.Mapping[str,t.Any],use_tempfile:bool=True,threshold:int=1024*500,boundary:t.Optional[str]=None,charset:str='utf-8')->t.Tuple[t.IO[bytes], int, str]


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/local.py----------------------------------------
A:flask.werkzeug.local.F->typing.TypeVar('F', bound=t.Callable[..., t.Any])
A:flask.werkzeug.local.greenlet_patched->getattr(greenlet, 'GREENLET_USE_CONTEXT_VARS', False)
A:flask.werkzeug.local.values->self._storage.get({}).copy()
A:flask.werkzeug.local.self._local->Local()
A:flask.werkzeug.local.rv->getattr(self._local, 'stack', []).copy()
A:flask.werkzeug.local.stack->getattr(self._local, 'stack', None)
A:flask.werkzeug.local.self.locals->list(locals)
A:flask.werkzeug.local.obj->instance._get_current_object()
A:flask.werkzeug.local.fallback->self.fallback.__get__(instance, owner)
A:flask.werkzeug.local.__doc__->_ProxyLookup(class_value=__doc__, fallback=lambda self: type(self).__doc__, is_attr=True)
A:flask.werkzeug.local.__repr__->_ProxyLookup(repr, fallback=lambda self: f'<{type(self).__name__} unbound>')
A:flask.werkzeug.local.__str__->_ProxyLookup(str)
A:flask.werkzeug.local.__bytes__->_ProxyLookup(bytes)
A:flask.werkzeug.local.__format__->_ProxyLookup()
A:flask.werkzeug.local.__lt__->_ProxyLookup(operator.lt)
A:flask.werkzeug.local.__le__->_ProxyLookup(operator.le)
A:flask.werkzeug.local.__eq__->_ProxyLookup(operator.eq)
A:flask.werkzeug.local.__ne__->_ProxyLookup(operator.ne)
A:flask.werkzeug.local.__gt__->_ProxyLookup(operator.gt)
A:flask.werkzeug.local.__ge__->_ProxyLookup(operator.ge)
A:flask.werkzeug.local.__hash__->_ProxyLookup(hash)
A:flask.werkzeug.local.__bool__->_ProxyLookup(bool, fallback=lambda self: False)
A:flask.werkzeug.local.__getattr__->_ProxyLookup(getattr)
A:flask.werkzeug.local.__setattr__->_ProxyLookup(setattr)
A:flask.werkzeug.local.__delattr__->_ProxyLookup(delattr)
A:flask.werkzeug.local.__dir__->_ProxyLookup(dir, fallback=lambda self: [])
A:flask.werkzeug.local.__class__->_ProxyLookup(fallback=lambda self: type(self), is_attr=True)
A:flask.werkzeug.local.__instancecheck__->_ProxyLookup(lambda self, other: isinstance(other, self))
A:flask.werkzeug.local.__subclasscheck__->_ProxyLookup(lambda self, other: issubclass(other, self))
A:flask.werkzeug.local.__call__->_ProxyLookup(lambda self, *args, **kwargs: self(*args, **kwargs))
A:flask.werkzeug.local.__len__->_ProxyLookup(len)
A:flask.werkzeug.local.__length_hint__->_ProxyLookup(operator.length_hint)
A:flask.werkzeug.local.__getitem__->_ProxyLookup(operator.getitem)
A:flask.werkzeug.local.__setitem__->_ProxyLookup(operator.setitem)
A:flask.werkzeug.local.__delitem__->_ProxyLookup(operator.delitem)
A:flask.werkzeug.local.__iter__->_ProxyLookup(iter)
A:flask.werkzeug.local.__next__->_ProxyLookup(next)
A:flask.werkzeug.local.__reversed__->_ProxyLookup(reversed)
A:flask.werkzeug.local.__contains__->_ProxyLookup(operator.contains)
A:flask.werkzeug.local.__add__->_ProxyLookup(operator.add)
A:flask.werkzeug.local.__sub__->_ProxyLookup(operator.sub)
A:flask.werkzeug.local.__mul__->_ProxyLookup(operator.mul)
A:flask.werkzeug.local.__matmul__->_ProxyLookup(operator.matmul)
A:flask.werkzeug.local.__truediv__->_ProxyLookup(operator.truediv)
A:flask.werkzeug.local.__floordiv__->_ProxyLookup(operator.floordiv)
A:flask.werkzeug.local.__mod__->_ProxyLookup(operator.mod)
A:flask.werkzeug.local.__divmod__->_ProxyLookup(divmod)
A:flask.werkzeug.local.__pow__->_ProxyLookup(pow)
A:flask.werkzeug.local.__lshift__->_ProxyLookup(operator.lshift)
A:flask.werkzeug.local.__rshift__->_ProxyLookup(operator.rshift)
A:flask.werkzeug.local.__and__->_ProxyLookup(operator.and_)
A:flask.werkzeug.local.__xor__->_ProxyLookup(operator.xor)
A:flask.werkzeug.local.__or__->_ProxyLookup(operator.or_)
A:flask.werkzeug.local.__radd__->_ProxyLookup(_l_to_r_op(operator.add))
A:flask.werkzeug.local.__rsub__->_ProxyLookup(_l_to_r_op(operator.sub))
A:flask.werkzeug.local.__rmul__->_ProxyLookup(_l_to_r_op(operator.mul))
A:flask.werkzeug.local.__rmatmul__->_ProxyLookup(_l_to_r_op(operator.matmul))
A:flask.werkzeug.local.__rtruediv__->_ProxyLookup(_l_to_r_op(operator.truediv))
A:flask.werkzeug.local.__rfloordiv__->_ProxyLookup(_l_to_r_op(operator.floordiv))
A:flask.werkzeug.local.__rmod__->_ProxyLookup(_l_to_r_op(operator.mod))
A:flask.werkzeug.local.__rdivmod__->_ProxyLookup(_l_to_r_op(divmod))
A:flask.werkzeug.local.__rpow__->_ProxyLookup(_l_to_r_op(pow))
A:flask.werkzeug.local.__rlshift__->_ProxyLookup(_l_to_r_op(operator.lshift))
A:flask.werkzeug.local.__rrshift__->_ProxyLookup(_l_to_r_op(operator.rshift))
A:flask.werkzeug.local.__rand__->_ProxyLookup(_l_to_r_op(operator.and_))
A:flask.werkzeug.local.__rxor__->_ProxyLookup(_l_to_r_op(operator.xor))
A:flask.werkzeug.local.__ror__->_ProxyLookup(_l_to_r_op(operator.or_))
A:flask.werkzeug.local.__iadd__->_ProxyIOp(operator.iadd)
A:flask.werkzeug.local.__isub__->_ProxyIOp(operator.isub)
A:flask.werkzeug.local.__imul__->_ProxyIOp(operator.imul)
A:flask.werkzeug.local.__imatmul__->_ProxyIOp(operator.imatmul)
A:flask.werkzeug.local.__itruediv__->_ProxyIOp(operator.itruediv)
A:flask.werkzeug.local.__ifloordiv__->_ProxyIOp(operator.ifloordiv)
A:flask.werkzeug.local.__imod__->_ProxyIOp(operator.imod)
A:flask.werkzeug.local.__ipow__->_ProxyIOp(operator.ipow)
A:flask.werkzeug.local.__ilshift__->_ProxyIOp(operator.ilshift)
A:flask.werkzeug.local.__irshift__->_ProxyIOp(operator.irshift)
A:flask.werkzeug.local.__iand__->_ProxyIOp(operator.iand)
A:flask.werkzeug.local.__ixor__->_ProxyIOp(operator.ixor)
A:flask.werkzeug.local.__ior__->_ProxyIOp(operator.ior)
A:flask.werkzeug.local.__neg__->_ProxyLookup(operator.neg)
A:flask.werkzeug.local.__pos__->_ProxyLookup(operator.pos)
A:flask.werkzeug.local.__abs__->_ProxyLookup(abs)
A:flask.werkzeug.local.__invert__->_ProxyLookup(operator.invert)
A:flask.werkzeug.local.__complex__->_ProxyLookup(complex)
A:flask.werkzeug.local.__int__->_ProxyLookup(int)
A:flask.werkzeug.local.__float__->_ProxyLookup(float)
A:flask.werkzeug.local.__index__->_ProxyLookup(operator.index)
A:flask.werkzeug.local.__round__->_ProxyLookup(round)
A:flask.werkzeug.local.__trunc__->_ProxyLookup(math.trunc)
A:flask.werkzeug.local.__floor__->_ProxyLookup(math.floor)
A:flask.werkzeug.local.__ceil__->_ProxyLookup(math.ceil)
A:flask.werkzeug.local.__enter__->_ProxyLookup()
A:flask.werkzeug.local.__exit__->_ProxyLookup()
A:flask.werkzeug.local.__await__->_ProxyLookup()
A:flask.werkzeug.local.__aiter__->_ProxyLookup()
A:flask.werkzeug.local.__anext__->_ProxyLookup()
A:flask.werkzeug.local.__aenter__->_ProxyLookup()
A:flask.werkzeug.local.__aexit__->_ProxyLookup()
A:flask.werkzeug.local.__copy__->_ProxyLookup(copy.copy)
A:flask.werkzeug.local.__deepcopy__->_ProxyLookup(copy.deepcopy)
flask.werkzeug.local.Local(self)
flask.werkzeug.local.Local.__delattr__(self,name:str)->None
flask.werkzeug.local.Local.__getattr__(self,name:str)->t.Any
flask.werkzeug.local.Local.__ident_func__(self)->t.Callable[[], int]
flask.werkzeug.local.Local.__ident_func__(self,func:t.Callable[[],int])->None
flask.werkzeug.local.Local.__init__(self)
flask.werkzeug.local.Local.__iter__(self)->t.Iterator[t.Tuple[int, t.Any]]
flask.werkzeug.local.Local.__release_local__(self)->None
flask.werkzeug.local.Local.__setattr__(self,name:str,value:t.Any)->None
flask.werkzeug.local.Local.__storage__(self)->t.Dict[str, t.Any]
flask.werkzeug.local.LocalManager(self,locals:t.Optional[t.Iterable[t.Union[Local,LocalStack]]]=None,ident_func:None=None)
flask.werkzeug.local.LocalManager.__init__(self,locals:t.Optional[t.Iterable[t.Union[Local,LocalStack]]]=None,ident_func:None=None)
flask.werkzeug.local.LocalManager.__repr__(self)->str
flask.werkzeug.local.LocalManager.cleanup(self)->None
flask.werkzeug.local.LocalManager.get_ident(self)->int
flask.werkzeug.local.LocalManager.ident_func(self)->t.Callable[[], int]
flask.werkzeug.local.LocalManager.ident_func(self,func:t.Callable[[],int])->None
flask.werkzeug.local.LocalManager.make_middleware(self,app:'WSGIApplication')->'WSGIApplication'
flask.werkzeug.local.LocalManager.middleware(self,func:'WSGIApplication')->'WSGIApplication'
flask.werkzeug.local.LocalProxy(self,local:t.Union['Local',t.Callable[[],t.Any]],name:t.Optional[str]=None)
flask.werkzeug.local.LocalProxy.__init__(self,local:t.Union['Local',t.Callable[[],t.Any]],name:t.Optional[str]=None)
flask.werkzeug.local.LocalProxy._get_current_object(self)->t.Any
flask.werkzeug.local.LocalStack(self)
flask.werkzeug.local.LocalStack.__ident_func__(self)->t.Callable[[], int]
flask.werkzeug.local.LocalStack.__ident_func__(self,value:t.Callable[[],int])->None
flask.werkzeug.local.LocalStack.__init__(self)
flask.werkzeug.local.LocalStack.__release_local__(self)->None
flask.werkzeug.local.LocalStack.pop(self)->t.Any
flask.werkzeug.local.LocalStack.push(self,obj:t.Any)->t.List[t.Any]
flask.werkzeug.local.LocalStack.top(self)->t.Any
flask.werkzeug.local._CannotUseContextVar(Exception)
flask.werkzeug.local._ProxyIOp(self,f:t.Optional[t.Callable]=None,fallback:t.Optional[t.Callable]=None)
flask.werkzeug.local._ProxyIOp.__init__(self,f:t.Optional[t.Callable]=None,fallback:t.Optional[t.Callable]=None)
flask.werkzeug.local._ProxyLookup(self,f:t.Optional[t.Callable]=None,fallback:t.Optional[t.Callable]=None,class_value:t.Optional[t.Any]=None,is_attr:bool=False)
flask.werkzeug.local._ProxyLookup.__get__(self,instance:'LocalProxy',owner:t.Optional[type]=None)->t.Any
flask.werkzeug.local._ProxyLookup.__init__(self,f:t.Optional[t.Callable]=None,fallback:t.Optional[t.Callable]=None,class_value:t.Optional[t.Any]=None,is_attr:bool=False)
flask.werkzeug.local._ProxyLookup.__repr__(self)->str
flask.werkzeug.local._ProxyLookup.__set_name__(self,owner:'LocalProxy',name:str)->None
flask.werkzeug.local._l_to_r_op(op:F)->F
flask.werkzeug.local.get_ident()->int
flask.werkzeug.local.release_local(local:t.Union['Local','LocalStack'])->None


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/testapp.py----------------------------------------
A:flask.werkzeug.testapp.logo->Response(base64.b64decode('\nR0lGODlhoACgAOMIAAEDACwpAEpCAGdgAJaKAM28AOnVAP3rAP/////////\n//////////////////////yH5BAEKAAgALAAAAACgAKAAAAT+EMlJq704680R+F0ojmRpnuj0rWnrv\nnB8rbRs33gu0bzu/0AObxgsGn3D5HHJbCUFyqZ0ukkSDlAidctNFg7gbI9LZlrBaHGtzAae0eloe25\n7w9EDOX2fst/xenyCIn5/gFqDiVVDV4aGeYiKkhSFjnCQY5OTlZaXgZp8nJ2ekaB0SQOjqphrpnOiq\nncEn65UsLGytLVmQ6m4sQazpbtLqL/HwpnER8bHyLrLOc3Oz8PRONPU1crXN9na263dMt/g4SzjMeX\nm5yDpLqgG7OzJ4u8lT/P69ej3JPn69kHzN2OIAHkB9RUYSFCFQYQJFTIkCDBiwoXWGnowaLEjRm7+G\np9A7Hhx4rUkAUaSLJlxHMqVMD/aSycSZkyTplCqtGnRAM5NQ1Ly5OmzZc6gO4d6DGAUKA+hSocWYAo\nSlM6oUWX2O/o0KdaVU5vuSQLAa0ADwQgMEMB2AIECZhVSnTno6spgbtXmHcBUrQACcc2FrTrWS8wAf\n78cMFBgwIBgbN+qvTt3ayikRBk7BoyGAGABAdYyfdzRQGV3l4coxrqQ84GpUBmrdR3xNIDUPAKDBSA\nADIGDhhqTZIWaDcrVX8EsbNzbkvCOxG8bN5w8ly9H8jyTJHC6DFndQydbguh2e/ctZJFXRxMAqqPVA\ntQH5E64SPr1f0zz7sQYjAHg0In+JQ11+N2B0XXBeeYZgBZFx4tqBToiTCPv0YBgQv8JqA6BEf6RhXx\nw1ENhRBnWV8ctEX4Ul2zc3aVGcQNC2KElyTDYyYUWvShdjDyMOGMuFjqnII45aogPhz/CodUHFwaDx\nlTgsaOjNyhGWJQd+lFoAGk8ObghI0kawg+EV5blH3dr+digkYuAGSaQZFHFz2P/cTaLmhF52QeSb45\nJwxd+uSVGHlqOZpOeJpCFZ5J+rkAkFjQ0N1tah7JJSZUFNsrkeJUJMIBi8jyaEKIhKPomnC91Uo+NB\nyyaJ5umnnpInIFh4t6ZSpGaAVmizqjpByDegYl8tPE0phCYrhcMWSv+uAqHfgH88ak5UXZmlKLVJhd\ndj78s1Fxnzo6yUCrV6rrDOkluG+QzCAUTbCwf9SrmMLzK6p+OPHx7DF+bsfMRq7Ec61Av9i6GLw23r\nidnZ+/OO0a99pbIrJkproCQMA17OPG6suq3cca5ruDfXCCDoS7BEdvmJn5otdqscn+uogRHHXs8cbh\nEIfYaDY1AkrC0cqwcZpnM6ludx72x0p7Fo/hZAcpJDjax0UdHavMKAbiKltMWCF3xxh9k25N/Viud8\nba78iCvUkt+V6BpwMlErmcgc502x+u1nSxJSJP9Mi52awD1V4yB/QHONsnU3L+A/zR4VL/indx/y64\ngqcj+qgTeweM86f0Qy1QVbvmWH1D9h+alqg254QD8HJXHvjQaGOqEqC22M54PcftZVKVSQG9jhkv7C\nJyTyDoAJfPdu8v7DRZAxsP/ky9MJ3OL36DJfCFPASC3/aXlfLOOON9vGZZHydGf8LnxYJuuVIbl83y\nAz5n/RPz07E+9+zw2A2ahz4HxHo9Kt79HTMx1Q7ma7zAzHgHqYH0SoZWyTuOLMiHwSfZDAQTn0ajk9\nYQqodnUYjByQZhZak9Wu4gYQsMyEpIOAOQKze8CmEF45KuAHTvIDOfHJNipwoHMuGHBnJElUoDmAyX\nc2Qm/R8Ah/iILCCJOEokGowdhDYc/yoL+vpRGwyVSCWFYZNljkhEirGXsalWcAgOdeAdoXcktF2udb\nqbUhjWyMQxYO01o6KYKOr6iK3fE4MaS+DsvBsGOBaMb0Y6IxADaJhFICaOLmiWTlDAnY1KzDG4ambL\ncWBA8mUzjJsN2KjSaSXGqMCVXYpYkj33mcIApyhQf6YqgeNAmNvuC0t4CsDbSshZJkCS1eNisKqlyG\ncF8G2JeiDX6tO6Mv0SmjCa3MFb0bJaGPMU0X7c8XcpvMaOQmCajwSeY9G0WqbBmKv34DsMIEztU6Y2\nKiDlFdt6jnCSqx7Dmt6XnqSKaFFHNO5+FmODxMCWBEaco77lNDGXBM0ECYB/+s7nKFdwSF5hgXumQe\nEZ7amRg39RHy3zIjyRCykQh8Zo2iviRKyTDn/zx6EefptJj2Cw+Ep2FSc01U5ry4KLPYsTyWnVGnvb\nUpyGlhjBUljyjHhWpf8OFaXwhp9O4T1gU9UeyPPa8A2l0p1kNqPXEVRm1AOs1oAGZU596t6SOR2mcB\nOco1srWtkaVrMUzIErrKri85keKqRQYX9VX0/eAUK1hrSu6HMEX3Qh2sCh0q0D2CtnUqS4hj62sE/z\naDs2Sg7MBS6xnQeooc2R2tC9YrKpEi9pLXfYXp20tDCpSP8rKlrD4axprb9u1Df5hSbz9QU0cRpfgn\nkiIzwKucd0wsEHlLpe5yHXuc6FrNelOl7pY2+11kTWx7VpRu97dXA3DO1vbkhcb4zyvERYajQgAADs\n='), mimetype='image/png')
A:flask.werkzeug.testapp.prefix->os.path.expanduser('~')
A:flask.werkzeug.testapp.cwd->os.path.abspath(os.getcwd())
A:flask.werkzeug.testapp.path->os.path.join(cwd, item or os.path.curdir)
A:flask.werkzeug.testapp.eggs->sorted(pkg_resources.working_set, key=lambda x: x.project_name.lower())
A:flask.werkzeug.testapp.sorted_environ->sorted(req.environ.items(), key=lambda x: repr(x[0]).lower())
A:flask.werkzeug.testapp.value->''.join(wrap(escape(repr(value))))
A:flask.werkzeug.testapp.req->Request(environ, populate_request=False)
A:flask.werkzeug.testapp.response->Response(render_testapp(req), mimetype='text/html')
flask.werkzeug.testapp.iter_sys_path()->t.Iterator[t.Tuple[str, bool, bool]]
flask.werkzeug.testapp.render_testapp(req:Request)->bytes
flask.werkzeug.testapp.test_app(environ:'WSGIEnvironment',start_response:'StartResponse')->t.Iterable[bytes]


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/utils.py----------------------------------------
A:flask.werkzeug.utils._T->typing.TypeVar('_T')
A:flask.werkzeug.utils._entity_re->re.compile('&([^;]+);')
A:flask.werkzeug.utils._filename_ascii_strip_re->re.compile('[^A-Za-z0-9_.-]')
A:flask.werkzeug.utils.value->self.fget(obj)
A:flask.werkzeug.utils._entities->html.entities.name2codepoint.copy()
A:flask.werkzeug.utils.children_as_string->HTMLBuilder('html').escape(children_as_string)
A:flask.werkzeug.utils.html->HTMLBuilder('html')
A:flask.werkzeug.utils.xhtml->HTMLBuilder('xhtml')
A:flask.werkzeug.utils.filename->str(_filename_ascii_strip_re.sub('', '_'.join(filename.split()))).strip('._')
A:flask.werkzeug.utils.s->str(s)
A:flask.werkzeug.utils.display_location->HTMLBuilder('html').escape(location)
A:flask.werkzeug.utils.location->iri_to_uri(location, safe_conversion=True)
A:flask.werkzeug.utils.response->Response(f'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>Redirecting...</title>\n<h1>Redirecting...</h1>\n<p>You should be redirected automatically to target URL: <a href="{html.escape(location)}">{display_location}</a>. If not click the link.', code, mimetype='text/html')
A:flask.werkzeug.utils.query_string->environ.get('QUERY_STRING')
A:flask.werkzeug.utils.headers->Headers()
A:flask.werkzeug.utils.path_or_file->typing.cast(t.Union[os.PathLike, str], path_or_file)
A:flask.werkzeug.utils.path->getattr(module, '__path__', None)
A:flask.werkzeug.utils.stat->os.stat(path)
A:flask.werkzeug.utils.download_name->os.path.basename(path)
A:flask.werkzeug.utils.(mimetype, encoding)->mimetypes.guess_type(download_name)
A:flask.werkzeug.utils.simple->simple.encode('ascii', 'ignore').decode('ascii').encode('ascii', 'ignore').decode('ascii')
A:flask.werkzeug.utils.quoted->url_quote(download_name, safe='')
A:flask.werkzeug.utils.file->open(path, 'rb')
A:flask.werkzeug.utils.data->wrap_file(environ, file)
A:flask.werkzeug.utils.rv->rv.make_conditional(environ, accept_ranges=True, complete_length=size).make_conditional(environ, accept_ranges=True, complete_length=size)
A:flask.werkzeug.utils.max_age->max_age(path)
A:flask.werkzeug.utils.rv.expires->int(time() + max_age)
A:flask.werkzeug.utils.import_name->import_name.replace(':', '.').replace(':', '.')
A:flask.werkzeug.utils.(module_name, obj_name)->import_name.replace(':', '.').replace(':', '.').rsplit('.', 1)
A:flask.werkzeug.utils.module->import_string(import_path)
A:flask.werkzeug.utils.parser->_parse_signature(func)
A:flask.werkzeug.utils.(args, kwargs, missing, extra, extra_positional, arg_spec, vararg_var, kwarg_var)->_parse_signature(func)(args, kwargs)
A:flask.werkzeug.utils.values[vararg_var]->tuple(extra_positional)
A:flask.werkzeug.utils.self.missing->set(missing or ())
A:flask.werkzeug.utils.imported->import_string(name, silent=True)
A:flask.werkzeug.utils.track_str->'\n'.join(track)
flask.redirect(location:str,code:int=302,Response:t.Optional[t.Type['Response']]=None)->'Response'
flask.werkzeug.utils.ArgumentValidationError(self,missing=None,extra=None,extra_positional=None)
flask.werkzeug.utils.ArgumentValidationError.__init__(self,missing=None,extra=None,extra_positional=None)
flask.werkzeug.utils.HTMLBuilder(self,dialect)
flask.werkzeug.utils.HTMLBuilder.__getattr__(self,tag)
flask.werkzeug.utils.HTMLBuilder.__init__(self,dialect)
flask.werkzeug.utils.HTMLBuilder.__repr__(self)->str
flask.werkzeug.utils.ImportStringError(self,import_name:str,exception:BaseException)
flask.werkzeug.utils.ImportStringError.__init__(self,import_name:str,exception:BaseException)
flask.werkzeug.utils.ImportStringError.__repr__(self)->str
flask.werkzeug.utils.append_slash_redirect(environ:'WSGIEnvironment',code:int=301)->'Response'
flask.werkzeug.utils.bind_arguments(func,args,kwargs)
flask.werkzeug.utils.cached_property(self,fget:t.Callable[[t.Any],_T],name:t.Optional[str]=None,doc:t.Optional[str]=None)
flask.werkzeug.utils.cached_property.__delete__(self,obj:object)->None
flask.werkzeug.utils.cached_property.__get__(self,obj:object,type:type=None)->_T
flask.werkzeug.utils.cached_property.__init__(self,fget:t.Callable[[t.Any],_T],name:t.Optional[str]=None,doc:t.Optional[str]=None)
flask.werkzeug.utils.cached_property.__set__(self,obj:object,value:_T)->None
flask.werkzeug.utils.detect_utf_encoding(data:bytes)->str
flask.werkzeug.utils.environ_property(_DictAccessorProperty[_TAccessorValue])
flask.werkzeug.utils.environ_property.lookup(self,obj:'Request')->'WSGIEnvironment'
flask.werkzeug.utils.escape(s:t.Any)->str
flask.werkzeug.utils.find_modules(import_path:str,include_packages:bool=False,recursive:bool=False)->t.Iterator[str]
flask.werkzeug.utils.format_string(string:str,context:t.Mapping[str,t.Any])->str
flask.werkzeug.utils.get_content_type(mimetype:str,charset:str)->str
flask.werkzeug.utils.header_property(_DictAccessorProperty[_TAccessorValue])
flask.werkzeug.utils.header_property.lookup(self,obj:t.Union['Request','Response'])->Headers
flask.werkzeug.utils.import_string(import_name:str,silent:bool=False)->t.Any
flask.werkzeug.utils.invalidate_cached_property(obj:object,name:str)->None
flask.werkzeug.utils.redirect(location:str,code:int=302,Response:t.Optional[t.Type['Response']]=None)->'Response'
flask.werkzeug.utils.secure_filename(filename:str)->str
flask.werkzeug.utils.send_file(path_or_file:t.Union[os.PathLike,str,t.IO[bytes]],environ:'WSGIEnvironment',mimetype:t.Optional[str]=None,as_attachment:bool=False,download_name:t.Optional[str]=None,conditional:bool=True,etag:t.Union[bool,str]=True,last_modified:t.Optional[t.Union[datetime,int,float]]=None,max_age:t.Optional[t.Union[int,t.Callable[[t.Optional[str]],t.Optional[int]]]]=None,use_x_sendfile:bool=False,response_class:t.Optional[t.Type['Response']]=None,_root_path:t.Optional[t.Union[os.PathLike,str]]=None)->'Response'
flask.werkzeug.utils.send_from_directory(directory:t.Union[os.PathLike,str],path:t.Union[os.PathLike,str],environ:'WSGIEnvironment',**kwargs:t.Any)->'Response'
flask.werkzeug.utils.unescape(s:str)->str
flask.werkzeug.utils.validate_arguments(func,args,kwargs,drop_extra=True)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/serving.py----------------------------------------
A:flask.werkzeug.serving.ssl->_SslDummy()
A:flask.werkzeug.serving.can_fork->hasattr(os, 'fork')
A:flask.werkzeug.serving.line->self._rfile.readline().decode('latin1')
A:flask.werkzeug.serving._len->int(line.strip(), 16)
A:flask.werkzeug.serving.self._len->self.read_chunk_len()
A:flask.werkzeug.serving.n->min(len(buf), self._len)
A:flask.werkzeug.serving.buf[read:]->self._rfile.read(len(buf) - read)
A:flask.werkzeug.serving.read->len(buf)
A:flask.werkzeug.serving.buf[read:read + n]->self._rfile.read(n)
A:flask.werkzeug.serving.terminator->self._rfile.readline()
A:flask.werkzeug.serving.request_url->url_parse(self.path)
A:flask.werkzeug.serving.path_info->url_unquote(path_info)
A:flask.werkzeug.serving.key->key.lower().lower()
A:flask.werkzeug.serving.value->value.replace('\r\n', '').replace('\r\n', '')
A:flask.werkzeug.serving.environ['wsgi.input']->DechunkedInput(environ['wsgi.input'])
A:flask.werkzeug.serving.peer_cert->self.connection.getpeercert(binary_form=True)
A:flask.werkzeug.serving.environ['SSL_CLIENT_CERT']->_SslDummy().DER_cert_to_PEM_cert(peer_cert)
A:flask.werkzeug.serving.self.environenviron->self.make_environ()
A:flask.werkzeug.serving.(code_str, msg)->status_sent.split(None, 1)
A:flask.werkzeug.serving.code->str(code)
A:flask.werkzeug.serving.header_keys->set()
A:flask.werkzeug.serving.application_iter->app(environ, start_response)
A:flask.werkzeug.serving.traceback->get_current_traceback(ignore_system_exceptions=True)
A:flask.werkzeug.serving.sig->getattr(signal, 'SIGKILL', signal.SIGTERM)
A:flask.werkzeug.serving.self.raw_requestline->self.rfile.readline()
A:flask.werkzeug.serving.path->uri_to_iri(self.path)
A:flask.werkzeug.serving.msg->_ansi_style(msg, 'bold', 'magenta')
A:flask.werkzeug.serving.backend->default_backend()
A:flask.werkzeug.serving.pkey->cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key(public_exponent=65537, key_size=2048, backend=backend)
A:flask.werkzeug.serving.subject->cryptography.x509.Name([x509.NameAttribute(NameOID.ORGANIZATION_NAME, 'Dummy Certificate'), x509.NameAttribute(NameOID.COMMON_NAME, cn)])
A:flask.werkzeug.serving.cert->cryptography.x509.CertificateBuilder().subject_name(subject).issuer_name(subject).public_key(pkey.public_key()).serial_number(x509.random_serial_number()).not_valid_before(dt.now(timezone.utc)).not_valid_after(dt.now(timezone.utc) + timedelta(days=365)).add_extension(x509.ExtendedKeyUsage([x509.OID_SERVER_AUTH]), critical=False).add_extension(x509.SubjectAlternativeName([x509.DNSName(cn)]), critical=False).sign(pkey, hashes.SHA256(), backend)
A:flask.werkzeug.serving.(cert, pkey)->generate_adhoc_ssl_pair()
A:flask.werkzeug.serving.(cert_handle, cert_file)->tempfile.mkstemp()
A:flask.werkzeug.serving.(pkey_handle, pkey_file)->tempfile.mkstemp()
A:flask.werkzeug.serving.ctx->_SslDummy().SSLContext(protocol)
A:flask.werkzeug.serving.error->typing.cast(Exception, sys.exc_info()[1])
A:flask.werkzeug.serving.res->socket.getaddrinfo(host, port, family, socket.SOCK_STREAM, socket.IPPROTO_TCP)
A:flask.werkzeug.serving.self.address_family->select_address_family(host, port)
A:flask.werkzeug.serving.real_sock->socket.fromfd(fd, self.address_family, socket.SOCK_STREAM)
A:flask.werkzeug.serving.server_address->typing.cast(str, server_address)
A:flask.werkzeug.serving.self.server_address->self.socket.getsockname()
A:flask.werkzeug.serving.ssl_context->generate_adhoc_ssl_context()
A:flask.werkzeug.serving.self.socket->generate_adhoc_ssl_context().wrap_socket(self.socket, server_side=True)
A:flask.werkzeug.serving.application->SharedDataMiddleware(application, static_files)
A:flask.werkzeug.serving.display_hostname->get_interface_ip(socket.AF_INET6)
A:flask.werkzeug.serving.srv->make_server(hostname, port, application, threaded, processes, request_handler, passthrough_errors, ssl_context, fd=fd)
A:flask.werkzeug.serving.address_family->select_address_family(hostname, port)
A:flask.werkzeug.serving.s->socket.socket(address_family, socket.SOCK_STREAM)
A:flask.werkzeug.serving.os.environ['WERKZEUG_SERVER_FD']->str(s.fileno())
A:flask.werkzeug.serving.parser->argparse.ArgumentParser(description='Run the given WSGI application with the development server.', allow_abbrev=False)
A:flask.werkzeug.serving.args->argparse.ArgumentParser(description='Run the given WSGI application with the development server.', allow_abbrev=False).parse_args()
A:flask.werkzeug.serving.(hostname, _, port)->argparse.ArgumentParser(description='Run the given WSGI application with the development server.', allow_abbrev=False).parse_args().address.partition(':')
flask.werkzeug.run_simple(hostname:str,port:int,application:'WSGIApplication',use_reloader:bool=False,use_debugger:bool=False,use_evalex:bool=True,extra_files:t.Optional[t.Iterable[str]]=None,exclude_patterns:t.Optional[t.Iterable[str]]=None,reloader_interval:int=1,reloader_type:str='auto',threaded:bool=False,processes:int=1,request_handler:t.Optional[t.Type[WSGIRequestHandler]]=None,static_files:t.Optional[t.Dict[str,t.Union[str,t.Tuple[str,str]]]]=None,passthrough_errors:bool=False,ssl_context:t.Optional[_TSSLContextArg]=None)->None
flask.werkzeug.serving.BaseWSGIServer(self,host:str,port:int,app:'WSGIApplication',handler:t.Optional[t.Type[WSGIRequestHandler]]=None,passthrough_errors:bool=False,ssl_context:t.Optional[_TSSLContextArg]=None,fd:t.Optional[int]=None)
flask.werkzeug.serving.BaseWSGIServer.__init__(self,host:str,port:int,app:'WSGIApplication',handler:t.Optional[t.Type[WSGIRequestHandler]]=None,passthrough_errors:bool=False,ssl_context:t.Optional[_TSSLContextArg]=None,fd:t.Optional[int]=None)
flask.werkzeug.serving.BaseWSGIServer.handle_error(self,request:t.Any,client_address:t.Union[t.Tuple[str,int],str])->None
flask.werkzeug.serving.BaseWSGIServer.log(self,type:str,message:str,*args:t.Any)->None
flask.werkzeug.serving.BaseWSGIServer.serve_forever(self,poll_interval:float=0.5)->None
flask.werkzeug.serving.DechunkedInput(self,rfile:t.IO[bytes])
flask.werkzeug.serving.DechunkedInput.__init__(self,rfile:t.IO[bytes])
flask.werkzeug.serving.DechunkedInput.read_chunk_len(self)->int
flask.werkzeug.serving.DechunkedInput.readable(self)->bool
flask.werkzeug.serving.DechunkedInput.readinto(self,buf:bytearray)->int
flask.werkzeug.serving.ForkingWSGIServer(self,host:str,port:int,app:'WSGIApplication',processes:int=40,handler:t.Optional[t.Type[WSGIRequestHandler]]=None,passthrough_errors:bool=False,ssl_context:t.Optional[_TSSLContextArg]=None,fd:t.Optional[int]=None)
flask.werkzeug.serving.ForkingWSGIServer.__init__(self,host:str,port:int,app:'WSGIApplication',processes:int=40,handler:t.Optional[t.Type[WSGIRequestHandler]]=None,passthrough_errors:bool=False,ssl_context:t.Optional[_TSSLContextArg]=None,fd:t.Optional[int]=None)
flask.werkzeug.serving.ThreadedWSGIServer(socketserver.ThreadingMixIn,BaseWSGIServer)
flask.werkzeug.serving.WSGIRequestHandler(BaseHTTPRequestHandler)
flask.werkzeug.serving.WSGIRequestHandler.address_string(self)->str
flask.werkzeug.serving.WSGIRequestHandler.connection_dropped(self,error:BaseException,environ:t.Optional['WSGIEnvironment']=None)->None
flask.werkzeug.serving.WSGIRequestHandler.handle(self)->None
flask.werkzeug.serving.WSGIRequestHandler.handle_one_request(self)->None
flask.werkzeug.serving.WSGIRequestHandler.initiate_shutdown(self)->None
flask.werkzeug.serving.WSGIRequestHandler.log(self,type:str,message:str,*args:t.Any)->None
flask.werkzeug.serving.WSGIRequestHandler.log_error(self,format:str,*args:t.Any)->None
flask.werkzeug.serving.WSGIRequestHandler.log_message(self,format:str,*args:t.Any)->None
flask.werkzeug.serving.WSGIRequestHandler.log_request(self,code:t.Union[int,str]='-',size:t.Union[int,str]='-')->None
flask.werkzeug.serving.WSGIRequestHandler.make_environ(self)->'WSGIEnvironment'
flask.werkzeug.serving.WSGIRequestHandler.port_integer(self)->int
flask.werkzeug.serving.WSGIRequestHandler.run_wsgi(self)->None
flask.werkzeug.serving.WSGIRequestHandler.send_response(self,code:int,message:t.Optional[str]=None)->None
flask.werkzeug.serving.WSGIRequestHandler.server_version(self)->str
flask.werkzeug.serving.WSGIRequestHandler.version_string(self)->str
flask.werkzeug.serving._ansi_style(value:str,*styles:str)->str
flask.werkzeug.serving.generate_adhoc_ssl_context()->'ssl.SSLContext'
flask.werkzeug.serving.generate_adhoc_ssl_pair(cn:t.Optional[str]=None)->t.Tuple['Certificate', 'RSAPrivateKeyWithSerialization']
flask.werkzeug.serving.get_interface_ip(family:socket.AddressFamily)->str
flask.werkzeug.serving.get_sockaddr(host:str,port:int,family:socket.AddressFamily)->t.Union[t.Tuple[str, int], str]
flask.werkzeug.serving.is_running_from_reloader()->bool
flask.werkzeug.serving.is_ssl_error(error:t.Optional[Exception]=None)->bool
flask.werkzeug.serving.load_ssl_context(cert_file:str,pkey_file:t.Optional[str]=None,protocol:t.Optional[int]=None)->'ssl.SSLContext'
flask.werkzeug.serving.main()->None
flask.werkzeug.serving.make_server(host:str,port:int,app:'WSGIApplication',threaded:bool=False,processes:int=1,request_handler:t.Optional[t.Type[WSGIRequestHandler]]=None,passthrough_errors:bool=False,ssl_context:t.Optional[_TSSLContextArg]=None,fd:t.Optional[int]=None)->BaseWSGIServer
flask.werkzeug.serving.make_ssl_devcert(base_path:str,host:t.Optional[str]=None,cn:t.Optional[str]=None)->t.Tuple[str, str]
flask.werkzeug.serving.run_simple(hostname:str,port:int,application:'WSGIApplication',use_reloader:bool=False,use_debugger:bool=False,use_evalex:bool=True,extra_files:t.Optional[t.Iterable[str]]=None,exclude_patterns:t.Optional[t.Iterable[str]]=None,reloader_interval:int=1,reloader_type:str='auto',threaded:bool=False,processes:int=1,request_handler:t.Optional[t.Type[WSGIRequestHandler]]=None,static_files:t.Optional[t.Dict[str,t.Union[str,t.Tuple[str,str]]]]=None,passthrough_errors:bool=False,ssl_context:t.Optional[_TSSLContextArg]=None)->None
flask.werkzeug.serving.run_with_reloader(*args:t.Any,**kwargs:t.Any)->None
flask.werkzeug.serving.select_address_family(host:str,port:int)->socket.AddressFamily


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/formparser.py----------------------------------------
A:flask.werkzeug.formparser.F->typing.TypeVar('F', bound=t.Callable[..., t.Any])
A:flask.werkzeug.formparser.bts->stream.read(64 * 1024)
A:flask.werkzeug.formparser.exhaust->getattr(stream, 'exhaust', None)
A:flask.werkzeug.formparser.chunk->stream.read(1024 * 64)
A:flask.werkzeug.formparser.content_type->parser.next_event().headers.get('content-type')
A:flask.werkzeug.formparser.content_length->int(event.headers['content-length'])
A:flask.werkzeug.formparser.(mimetype, options)->parse_options_header(content_type)
A:flask.werkzeug.formparser.parse_func->self.get_parse_func(mimetype, options)
A:flask.werkzeug.formparser.parser->MultipartDecoder(boundary, self.max_form_memory_size)
A:flask.werkzeug.formparser.boundary->options.get('boundary', '').encode('ascii')
A:flask.werkzeug.formparser.(form, files)->MultipartDecoder(boundary, self.max_form_memory_size).parse(stream, boundary, content_length)
A:flask.werkzeug.formparser.form->url_decode_stream(stream, self.charset, errors=self.errors, cls=self.cls)
A:flask.werkzeug.formparser.line->_to_str(b_line)
A:flask.werkzeug.formparser.(line, line_terminated)->_line_parse(line)
A:flask.werkzeug.formparser.parts->_to_str(b_line).split(':', 1)
A:flask.werkzeug.formparser.(mimetype, ct_params)->parse_options_header(content_type)
A:flask.werkzeug.formparser.container->typing.cast(t.IO[bytes], container)
A:flask.werkzeug.formparser.iterator->chain(_make_chunk_iter(stream, limit=content_length, buffer_size=self.buffer_size), [None])
A:flask.werkzeug.formparser.event->MultipartDecoder(boundary, self.max_form_memory_size).next_event()
A:flask.werkzeug.formparser.value->b''.join(container).decode(self.get_part_charset(current_part.headers), self.errors)
flask.werkzeug.formparser.FormDataParser(self,stream_factory:t.Optional['TStreamFactory']=None,charset:str='utf-8',errors:str='replace',max_form_memory_size:t.Optional[int]=None,max_content_length:t.Optional[int]=None,cls:t.Optional[t.Type[MultiDict]]=None,silent:bool=True)
flask.werkzeug.formparser.FormDataParser.__init__(self,stream_factory:t.Optional['TStreamFactory']=None,charset:str='utf-8',errors:str='replace',max_form_memory_size:t.Optional[int]=None,max_content_length:t.Optional[int]=None,cls:t.Optional[t.Type[MultiDict]]=None,silent:bool=True)
flask.werkzeug.formparser.FormDataParser._parse_multipart(self,stream:t.IO[bytes],mimetype:str,content_length:t.Optional[int],options:t.Dict[str,str])->'t_parse_result'
flask.werkzeug.formparser.FormDataParser._parse_urlencoded(self,stream:t.IO[bytes],mimetype:str,content_length:t.Optional[int],options:t.Dict[str,str])->'t_parse_result'
flask.werkzeug.formparser.FormDataParser.get_parse_func(self,mimetype:str,options:t.Dict[str,str])->t.Optional[t.Callable[['FormDataParser', t.IO[bytes], str, t.Optional[int], t.Dict[str, str]], 't_parse_result']]
flask.werkzeug.formparser.FormDataParser.parse(self,stream:t.IO[bytes],mimetype:str,content_length:t.Optional[int],options:t.Optional[t.Dict[str,str]]=None)->'t_parse_result'
flask.werkzeug.formparser.FormDataParser.parse_from_environ(self,environ:'WSGIEnvironment')->'t_parse_result'
flask.werkzeug.formparser.MultiPartParser(self,stream_factory:t.Optional['TStreamFactory']=None,charset:str='utf-8',errors:str='replace',max_form_memory_size:t.Optional[int]=None,cls:t.Optional[t.Type[MultiDict]]=None,buffer_size:int=64*1024)
flask.werkzeug.formparser.MultiPartParser.__init__(self,stream_factory:t.Optional['TStreamFactory']=None,charset:str='utf-8',errors:str='replace',max_form_memory_size:t.Optional[int]=None,cls:t.Optional[t.Type[MultiDict]]=None,buffer_size:int=64*1024)
flask.werkzeug.formparser.MultiPartParser.fail(self,message:str)->'te.NoReturn'
flask.werkzeug.formparser.MultiPartParser.get_part_charset(self,headers:Headers)->str
flask.werkzeug.formparser.MultiPartParser.parse(self,stream:t.IO[bytes],boundary:bytes,content_length:t.Optional[int])->t.Tuple[MultiDict, MultiDict]
flask.werkzeug.formparser.MultiPartParser.start_file_streaming(self,event:File,total_content_length:t.Optional[int])->t.IO[bytes]
flask.werkzeug.formparser._exhaust(stream:t.IO[bytes])->None
flask.werkzeug.formparser._line_parse(line:str)->t.Tuple[str, bool]
flask.werkzeug.formparser.default_stream_factory(total_content_length:t.Optional[int],content_type:t.Optional[str],filename:t.Optional[str],content_length:t.Optional[int]=None)->t.IO[bytes]
flask.werkzeug.formparser.exhaust_stream(f:F)->F
flask.werkzeug.formparser.parse_form_data(environ:'WSGIEnvironment',stream_factory:t.Optional['TStreamFactory']=None,charset:str='utf-8',errors:str='replace',max_form_memory_size:t.Optional[int]=None,max_content_length:t.Optional[int]=None,cls:t.Optional[t.Type[MultiDict]]=None,silent:bool=True)->'t_parse_result'
flask.werkzeug.formparser.parse_multipart_headers(iterable:t.Iterable[bytes])->Headers


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/filesystem.py----------------------------------------
A:flask.werkzeug.filesystem.rv->sys.getfilesystemencoding()
flask.werkzeug.filesystem.BrokenFilesystemWarning(RuntimeWarning,UnicodeWarning)
flask.werkzeug.filesystem._is_ascii_encoding(encoding:t.Optional[str])->bool
flask.werkzeug.filesystem.get_filesystem_encoding()->str


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/_internal.py----------------------------------------
A:flask.werkzeug._internal._signature_cache->WeakKeyDictionary()
A:flask.werkzeug._internal._epoch_ord->date(1970, 1, 1).toordinal()
A:flask.werkzeug._internal._legal_cookie_chars->frozenset((c.encode('ascii') for c in f"{string.ascii_letters}{string.digits}/=!#$%&'*+-.^_`|~:"))
A:flask.werkzeug._internal._cookie_quoting_map[_i.to_bytes(1, sys.byteorder)]->f'\\{_i:03o}'.encode('latin1')
A:flask.werkzeug._internal._octal_re->re.compile(b'\\\\[0-3][0-7][0-7]')
A:flask.werkzeug._internal._quote_re->re.compile(b'[\\\\].')
A:flask.werkzeug._internal._cookie_re->re.compile(b'\n    (?P<key>[^=;]+)\n    (?:\\s*=\\s*\n        (?P<val>\n            "(?:[^\\\\"]|\\\\.)*" |\n             (?:.*?)\n        )\n    )?\n    \\s*;\n', flags=re.VERBOSE)
A:flask.werkzeug._internal._missing->_Missing()
A:flask.werkzeug._internal._default_encoding->sys.getdefaultencoding()
A:flask.werkzeug._internal.env->getattr(obj, 'environ', obj)
A:flask.werkzeug._internal.level->logger.getEffectiveLevel()
A:flask.werkzeug._internal.stream->colorama.AnsiToWin32(sys.stderr)
A:flask.werkzeug._internal._logger->logging.getLogger('werkzeug')
A:flask.werkzeug._internal.parse->WeakKeyDictionary().get(func)
A:flask.werkzeug._internal.tup->inspect.getfullargspec(func)
A:flask.werkzeug._internal.arg_count->len(positional)
A:flask.werkzeug._internal.arguments->tuple(arguments)
A:flask.werkzeug._internal.extra[name]->kwargs.pop(name)
A:flask.werkzeug._internal._TAccessorValue->typing.TypeVar('_TAccessorValue')
A:flask.werkzeug._internal.storage->self.lookup(instance)
A:flask.werkzeug._internal.self.lookup(instance)[self.name]->self.dump_func(value)
A:flask.werkzeug._internal.buf->bytearray()
A:flask.werkzeug._internal.char->_lookup(char, char)
A:flask.werkzeug._internal.n->len(b)
A:flask.werkzeug._internal.rv->bytearray()
A:flask.werkzeug._internal.o_match->re.compile(b'\\\\[0-3][0-7][0-7]').search(b, i)
A:flask.werkzeug._internal.q_match->re.compile(b'[\\\\].').search(b, i)
A:flask.werkzeug._internal.j->re.compile(b'\\\\[0-3][0-7][0-7]').search(b, i).start(0)
A:flask.werkzeug._internal.k->re.compile(b'[\\\\].').search(b, i).start(0)
A:flask.werkzeug._internal.match->re.compile(b'\n    (?P<key>[^=;]+)\n    (?:\\s*=\\s*\n        (?P<val>\n            "(?:[^\\\\"]|\\\\.)*" |\n             (?:.*?)\n        )\n    )?\n    \\s*;\n', flags=re.VERBOSE).search(b + b';', i)
A:flask.werkzeug._internal.key->re.compile(b'\n    (?P<key>[^=;]+)\n    (?:\\s*=\\s*\n        (?P<val>\n            "(?:[^\\\\"]|\\\\.)*" |\n             (?:.*?)\n        )\n    )?\n    \\s*;\n', flags=re.VERBOSE).search(b + b';', i).group('key').strip()
A:flask.werkzeug._internal.i->re.compile(b'\n    (?P<key>[^=;]+)\n    (?:\\s*=\\s*\n        (?P<val>\n            "(?:[^\\\\"]|\\\\.)*" |\n             (?:.*?)\n        )\n    )?\n    \\s*;\n', flags=re.VERBOSE).search(b + b';', i).end(0)
A:flask.werkzeug._internal.domain->_encode_idna(domain)
A:flask.werkzeug._internal.gyver->'\n'.join([x + (77 - len(x)) * ' ' for x in bzzzzzzz(b'\neJyFlzuOJDkMRP06xRjymKgDJCDQStBYT8BCgK4gTwfQ2fcFs2a2FzvZk+hvlcRvRJD148efHt9m\n9Xz94dRY5hGt1nrYcXx7us9qlcP9HHNh28rz8dZj+q4rynVFFPdlY4zH873NKCexrDM6zxxRymzz\n4QIxzK4bth1PV7+uHn6WXZ5C4ka/+prFzx3zWLMHAVZb8RRUxtFXI5DTQ2n3Hi2sNI+HK43AOWSY\njmEzE4naFp58PdzhPMdslLVWHTGUVpSxImw+pS/D+JhzLfdS1j7PzUMxij+mc2U0I9zcbZ/HcZxc\nq1QjvvcThMYFnp93agEx392ZdLJWXbi/Ca4Oivl4h/Y1ErEqP+lrg7Xa4qnUKu5UE9UUA4xeqLJ5\njWlPKJvR2yhRI7xFPdzPuc6adXu6ovwXwRPXXnZHxlPtkSkqWHilsOrGrvcVWXgGP3daXomCj317\n8P2UOw/NnA0OOikZyFf3zZ76eN9QXNwYdD8f8/LdBRFg0BO3bB+Pe/+G8er8tDJv83XTkj7WeMBJ\nv/rnAfdO51d6sFglfi8U7zbnr0u9tyJHhFZNXYfH8Iafv2Oa+DT6l8u9UYlajV/hcEgk1x8E8L/r\nXJXl2SK+GJCxtnyhVKv6GFCEB1OO3f9YWAIEbwcRWv/6RPpsEzOkXURMN37J0PoCSYeBnJQd9Giu\nLxYQJNlYPSo/iTQwgaihbART7Fcyem2tTSCcwNCs85MOOpJtXhXDe0E7zgZJkcxWTar/zEjdIVCk\niXy87FW6j5aGZhttDBoAZ3vnmlkx4q4mMmCdLtnHkBXFMCReqthSGkQ+MDXLLCpXwBs0t+sIhsDI\ntjBB8MwqYQpLygZ56rRHHpw+OAVyGgaGRHWy2QfXez+ZQQTTBkmRXdV/A9LwH6XGZpEAZU8rs4pE\n1R4FQ3Uwt8RKEtRc0/CrANUoes3EzM6WYcFyskGZ6UTHJWenBDS7h163Eo2bpzqxNE9aVgEM2CqI\nGAJe9Yra4P5qKmta27VjzYdR04Vc7KHeY4vs61C0nbywFmcSXYjzBHdiEjraS7PGG2jHHTpJUMxN\nJlxr3pUuFvlBWLJGE3GcA1/1xxLcHmlO+LAXbhrXah1tD6Ze+uqFGdZa5FM+3eHcKNaEarutAQ0A\nQMAZHV+ve6LxAwWnXbbSXEG2DmCX5ijeLCKj5lhVFBrMm+ryOttCAeFpUdZyQLAQkA06RLs56rzG\n8MID55vqr/g64Qr/wqwlE0TVxgoiZhHrbY2h1iuuyUVg1nlkpDrQ7Vm1xIkI5XRKLedN9EjzVchu\njQhXcVkjVdgP2O99QShpdvXWoSwkp5uMwyjt3jiWCqWGSiaaPAzohjPanXVLbM3x0dNskJsaCEyz\nDTKIs+7WKJD4ZcJGfMhLFBf6hlbnNkLEePF8Cx2o2kwmYF4+MzAxa6i+6xIQkswOqGO+3x9NaZX8\nMrZRaFZpLeVTYI9F/djY6DDVVs340nZGmwrDqTCiiqD5luj3OzwpmQCiQhdRYowUYEA3i1WWGwL4\nGCtSoO4XbIPFeKGU13XPkDf5IdimLpAvi2kVDVQbzOOa4KAXMFlpi/hV8F6IDe0Y2reg3PuNKT3i\nRYhZqtkQZqSB2Qm0SGtjAw7RDwaM1roESC8HWiPxkoOy0lLTRFG39kvbLZbU9gFKFRvixDZBJmpi\nXyq3RE5lW00EJjaqwp/v3EByMSpVZYsEIJ4APaHmVtpGSieV5CALOtNUAzTBiw81GLgC0quyzf6c\nNlWknzJeCsJ5fup2R4d8CYGN77mu5vnO1UqbfElZ9E6cR6zbHjgsr9ly18fXjZoPeDjPuzlWbFwS\npdvPkhntFvkc13qb9094LL5NrA3NIq3r9eNnop9DizWOqCEbyRBFJTHn6Tt3CG1o8a4HevYh0XiJ\nsR0AVVHuGuMOIfbuQ/OKBkGRC6NJ4u7sbPX8bG/n5sNIOQ6/Y/BX3IwRlTSabtZpYLB85lYtkkgm\np1qXK3Du2mnr5INXmT/78KI12n11EFBkJHHp0wJyLe9MvPNUGYsf+170maayRoy2lURGHAIapSpQ\nkrEDuNoJCHNlZYhKpvw4mspVWxqo415n8cD62N9+EfHrAvqQnINStetek7RY2Urv8nxsnGaZfRr/\nnhXbJ6m/yl1LzYqscDZA9QHLNbdaSTTr+kFg3bC0iYbX/eQy0Bv3h4B50/SGYzKAXkCeOLI3bcAt\nmj2Z/FM1vQWgDynsRwNvrWnJHlespkrp8+vO1jNaibm+PhqXPPv30YwDZ6jApe3wUjFQobghvW9p\n7f2zLkGNv8b191cD/3vs9Q833z8t').splitlines()])
flask.werkzeug._internal._ColorStreamHandler(self)
flask.werkzeug._internal._ColorStreamHandler.__init__(self)
flask.werkzeug._internal._DictAccessorProperty(self,name:str,default:t.Optional[_TAccessorValue]=None,load_func:t.Optional[t.Callable[[str],_TAccessorValue]]=None,dump_func:t.Optional[t.Callable[[_TAccessorValue],str]]=None,read_only:t.Optional[bool]=None,doc:t.Optional[str]=None)
flask.werkzeug._internal._DictAccessorProperty.__delete__(self,instance:t.Any)->None
flask.werkzeug._internal._DictAccessorProperty.__get__(self,instance:t.Optional[t.Any],owner:type)->t.Union[_TAccessorValue, '_DictAccessorProperty[_TAccessorValue]']
flask.werkzeug._internal._DictAccessorProperty.__init__(self,name:str,default:t.Optional[_TAccessorValue]=None,load_func:t.Optional[t.Callable[[str],_TAccessorValue]]=None,dump_func:t.Optional[t.Callable[[_TAccessorValue],str]]=None,read_only:t.Optional[bool]=None,doc:t.Optional[str]=None)
flask.werkzeug._internal._DictAccessorProperty.__repr__(self)->str
flask.werkzeug._internal._DictAccessorProperty.__set__(self,instance:t.Any,value:_TAccessorValue)->None
flask.werkzeug._internal._DictAccessorProperty.lookup(self,instance:t.Any)->t.MutableMapping[str, t.Any]
flask.werkzeug._internal._Missing
flask.werkzeug._internal._Missing.__reduce__(self)->str
flask.werkzeug._internal._Missing.__repr__(self)->str
flask.werkzeug._internal._check_str_tuple(value:t.Tuple[t.AnyStr,...])->None
flask.werkzeug._internal._cookie_parse_impl(b:bytes)->t.Iterator[t.Tuple[bytes, bytes]]
flask.werkzeug._internal._cookie_quote(b:bytes)->bytes
flask.werkzeug._internal._cookie_unquote(b:bytes)->bytes
flask.werkzeug._internal._decode_idna(domain:t.Union[str,bytes])->str
flask.werkzeug._internal._dt_as_utc(dt:t.Optional[datetime])->t.Optional[datetime]
flask.werkzeug._internal._easteregg(app:t.Optional['WSGIApplication']=None)->'WSGIApplication'
flask.werkzeug._internal._encode_idna(domain:str)->bytes
flask.werkzeug._internal._get_environ(obj:t.Union['WSGIEnvironment','Request'])->'WSGIEnvironment'
flask.werkzeug._internal._has_level_handler(logger:logging.Logger)->bool
flask.werkzeug._internal._log(type:str,message:str,*args:t.Any,**kwargs:t.Any)->None
flask.werkzeug._internal._make_cookie_domain(domain:t.Optional[str])->t.Optional[bytes]
flask.werkzeug._internal._make_encode_wrapper(reference:t.AnyStr)->t.Callable[[str], t.AnyStr]
flask.werkzeug._internal._parse_signature(func)
flask.werkzeug._internal._to_bytes(x:t.Union[str,bytes],charset:str=_default_encoding,errors:str='strict')->bytes
flask.werkzeug._internal._to_str(x:t.Optional[t.Any],charset:t.Optional[str]=_default_encoding,errors:str='strict',allow_none_charset:bool=False)->t.Optional[t.Union[str, bytes]]
flask.werkzeug._internal._wsgi_decoding_dance(s:str,charset:str='utf-8',errors:str='replace')->str
flask.werkzeug._internal._wsgi_encoding_dance(s:str,charset:str='utf-8',errors:str='replace')->str


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/wsgi.py----------------------------------------
A:flask.werkzeug.wsgi.parts['root_path']->environ.get('SCRIPT_NAME', '')
A:flask.werkzeug.wsgi.parts['path']->environ.get('PATH_INFO', '')
A:flask.werkzeug.wsgi.parts['query_string']->environ.get('QUERY_STRING', '').encode('latin1')
A:flask.werkzeug.wsgi.name->environ.get('SERVER_NAME')
A:flask.werkzeug.wsgi.content_length->get_content_length(environ)
A:flask.werkzeug.wsgi.stream->typing.cast(t.IO[bytes], LimitedStream(stream, limit))
A:flask.werkzeug.wsgi.qs->environ.get('QUERY_STRING', '').encode('latin1')
A:flask.werkzeug.wsgi.path->uri_to_iri(path_or_url, charset, errors)
A:flask.werkzeug.wsgi.script_name->environ.get('SCRIPT_NAME', '')
A:flask.werkzeug.wsgi.rv->_join(new_buf)
A:flask.werkzeug.wsgi.(segment, path)->uri_to_iri(path_or_url, charset, errors).split('/', 1)
A:flask.werkzeug.wsgi.segments->environ.get('PATH_INFO', '').lstrip('/').split('/', 1)
A:flask.werkzeug.wsgi.parts->netloc.split('@', 1)[-1].split(':', 1)
A:flask.werkzeug.wsgi.environ_or_baseurl->get_current_url(environ_or_baseurl, root_only=True)
A:flask.werkzeug.wsgi.base_iri->uri_to_iri(environ_or_baseurl, charset, errors)
A:flask.werkzeug.wsgi.base_netloc->_normalize_netloc(base_scheme, base_netloc)
A:flask.werkzeug.wsgi.cur_netloc->_normalize_netloc(cur_scheme, cur_netloc)
A:flask.werkzeug.wsgi.base_path->base_path.rstrip('/').rstrip('/')
A:flask.werkzeug.wsgi.iterator->iter(iterable)
A:flask.werkzeug.wsgi.self._next->typing.cast(t.Callable[[], bytes], partial(next, iterator))
A:flask.werkzeug.wsgi.callbacks->list(callbacks)
A:flask.werkzeug.wsgi.iterable_close->getattr(iterable, 'close', None)
A:flask.werkzeug.wsgi.data->self.file.read(self.buffer_size)
A:flask.werkzeug.wsgi.self.iterable->iter(iterable)
A:flask.werkzeug.wsgi.chunk->min(to_read, chunk)
A:flask.werkzeug.wsgi.self.read_length->self.iterable.tell()
A:flask.werkzeug.wsgi.(chunk, contextual_read_length)->self._first_iteration()
A:flask.werkzeug.wsgi.item->_read(buffer_size)
A:flask.werkzeug.wsgi._iter->typing.cast(t.Iterator[bytes], chain((first_item,), _iter))
A:flask.werkzeug.wsgi.first_item->next(_iter, b'')
A:flask.werkzeug.wsgi.s->_make_encode_wrapper(first_item)
A:flask.werkzeug.wsgi.empty->typing.cast(bytes, s(''))
A:flask.werkzeug.wsgi.cr->typing.cast(bytes, s('\r'))
A:flask.werkzeug.wsgi.lf->typing.cast(bytes, s('\n'))
A:flask.werkzeug.wsgi.crlf->typing.cast(bytes, s('\r\n'))
A:flask.werkzeug.wsgi.new_data->next(_iter, b'')
A:flask.werkzeug.wsgi.separator->_to_bytes(separator)
A:flask.werkzeug.wsgi.chunks->_split(new_data)
A:flask.werkzeug.wsgi.buf_size->len(rv)
A:flask.werkzeug.wsgi.to_read->min(self.limit - self._pos, size)
A:flask.werkzeug.wsgi.read->self._read(to_read)
A:flask.werkzeug.wsgi.size->min(size, self.limit - self._pos)
A:flask.werkzeug.wsgi.line->self.readline()
A:flask.werkzeug.wsgi.end->min(self.limit, last_pos + size)
flask.werkzeug.wsgi.ClosingIterator(self,iterable:t.Iterable[bytes],callbacks:t.Optional[t.Union[t.Callable[[],None],t.Iterable[t.Callable[[],None]]]]=None)
flask.werkzeug.wsgi.ClosingIterator.__init__(self,iterable:t.Iterable[bytes],callbacks:t.Optional[t.Union[t.Callable[[],None],t.Iterable[t.Callable[[],None]]]]=None)
flask.werkzeug.wsgi.ClosingIterator.__iter__(self)->'ClosingIterator'
flask.werkzeug.wsgi.ClosingIterator.__next__(self)->bytes
flask.werkzeug.wsgi.ClosingIterator.close(self)->None
flask.werkzeug.wsgi.FileWrapper(self,file:t.IO[bytes],buffer_size:int=8192)
flask.werkzeug.wsgi.FileWrapper.__init__(self,file:t.IO[bytes],buffer_size:int=8192)
flask.werkzeug.wsgi.FileWrapper.__iter__(self)->'FileWrapper'
flask.werkzeug.wsgi.FileWrapper.__next__(self)->bytes
flask.werkzeug.wsgi.FileWrapper.close(self)->None
flask.werkzeug.wsgi.FileWrapper.seek(self,*args:t.Any)->None
flask.werkzeug.wsgi.FileWrapper.seekable(self)->bool
flask.werkzeug.wsgi.FileWrapper.tell(self)->t.Optional[int]
flask.werkzeug.wsgi.LimitedStream(self,stream:t.IO[bytes],limit:int)
flask.werkzeug.wsgi.LimitedStream.__init__(self,stream:t.IO[bytes],limit:int)
flask.werkzeug.wsgi.LimitedStream.__iter__(self)->'LimitedStream'
flask.werkzeug.wsgi.LimitedStream.__next__(self)->bytes
flask.werkzeug.wsgi.LimitedStream.exhaust(self,chunk_size:int=1024*64)->None
flask.werkzeug.wsgi.LimitedStream.is_exhausted(self)->bool
flask.werkzeug.wsgi.LimitedStream.on_disconnect(self)->bytes
flask.werkzeug.wsgi.LimitedStream.on_exhausted(self)->bytes
flask.werkzeug.wsgi.LimitedStream.read(self,size:t.Optional[int]=None)->bytes
flask.werkzeug.wsgi.LimitedStream.readable(self)->bool
flask.werkzeug.wsgi.LimitedStream.readline(self,size:t.Optional[int]=None)->bytes
flask.werkzeug.wsgi.LimitedStream.readlines(self,size:t.Optional[int]=None)->t.List[bytes]
flask.werkzeug.wsgi.LimitedStream.tell(self)->int
flask.werkzeug.wsgi._RangeWrapper(self,iterable:t.Union[t.Iterable[bytes],t.IO[bytes]],start_byte:int=0,byte_range:t.Optional[int]=None)
flask.werkzeug.wsgi._RangeWrapper.__init__(self,iterable:t.Union[t.Iterable[bytes],t.IO[bytes]],start_byte:int=0,byte_range:t.Optional[int]=None)
flask.werkzeug.wsgi._RangeWrapper.__iter__(self)->'_RangeWrapper'
flask.werkzeug.wsgi._RangeWrapper.__next__(self)->bytes
flask.werkzeug.wsgi._RangeWrapper._first_iteration(self)->t.Tuple[t.Optional[bytes], int]
flask.werkzeug.wsgi._RangeWrapper._next(self)->bytes
flask.werkzeug.wsgi._RangeWrapper._next_chunk(self)->bytes
flask.werkzeug.wsgi._RangeWrapper.close(self)->None
flask.werkzeug.wsgi._get_server(environ:'WSGIEnvironment')->t.Optional[t.Tuple[str, t.Optional[int]]]
flask.werkzeug.wsgi._make_chunk_iter(stream:t.Union[t.Iterable[bytes],t.IO[bytes]],limit:t.Optional[int],buffer_size:int)->t.Iterator[bytes]
flask.werkzeug.wsgi.extract_path_info(environ_or_baseurl:t.Union[str,'WSGIEnvironment'],path_or_url:t.Union[str,_URLTuple],charset:str='utf-8',errors:str='werkzeug.url_quote',collapse_http_schemes:bool=True)->t.Optional[str]
flask.werkzeug.wsgi.get_content_length(environ:'WSGIEnvironment')->t.Optional[int]
flask.werkzeug.wsgi.get_current_url(environ:'WSGIEnvironment',root_only:bool=False,strip_querystring:bool=False,host_only:bool=False,trusted_hosts:t.Optional[t.Iterable[str]]=None)->str
flask.werkzeug.wsgi.get_host(environ:'WSGIEnvironment',trusted_hosts:t.Optional[t.Iterable[str]]=None)->str
flask.werkzeug.wsgi.get_input_stream(environ:'WSGIEnvironment',safe_fallback:bool=True)->t.IO[bytes]
flask.werkzeug.wsgi.get_path_info(environ:'WSGIEnvironment',charset:str='utf-8',errors:str='replace')->str
flask.werkzeug.wsgi.get_query_string(environ:'WSGIEnvironment')->str
flask.werkzeug.wsgi.get_script_name(environ:'WSGIEnvironment',charset:str='utf-8',errors:str='replace')->str
flask.werkzeug.wsgi.make_chunk_iter(stream:t.Union[t.Iterable[bytes],t.IO[bytes]],separator:bytes,limit:t.Optional[int]=None,buffer_size:int=10*1024,cap_at_buffer:bool=False)->t.Iterator[bytes]
flask.werkzeug.wsgi.make_line_iter(stream:t.Union[t.Iterable[bytes],t.IO[bytes]],limit:t.Optional[int]=None,buffer_size:int=10*1024,cap_at_buffer:bool=False)->t.Iterator[bytes]
flask.werkzeug.wsgi.peek_path_info(environ:'WSGIEnvironment',charset:str='utf-8',errors:str='replace')->t.Optional[str]
flask.werkzeug.wsgi.pop_path_info(environ:'WSGIEnvironment',charset:str='utf-8',errors:str='replace')->t.Optional[str]
flask.werkzeug.wsgi.responder(f:t.Callable[...,'WSGIApplication'])->'WSGIApplication'
flask.werkzeug.wsgi.wrap_file(environ:'WSGIEnvironment',file:t.IO[bytes],buffer_size:int=8192)->t.Iterable[bytes]


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/user_agent.py----------------------------------------
flask.werkzeug.user_agent.UserAgent(self,string:str)
flask.werkzeug.user_agent.UserAgent.__bool__(self)->bool
flask.werkzeug.user_agent.UserAgent.__init__(self,string:str)
flask.werkzeug.user_agent.UserAgent.__repr__(self)->str
flask.werkzeug.user_agent.UserAgent.__str__(self)->str
flask.werkzeug.user_agent.UserAgent.to_header(self)->str


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/useragents.py----------------------------------------
A:flask.werkzeug.useragents._language_re->re.compile('(?:;\\s*|\\s+)(\\b\\w{2}\\b(?:-\\b\\w{2}\\b)?)\\s*;|(?:\\(|\\[|;)\\s*(\\b\\w{2}\\b(?:-\\b\\w{2}\\b)?)\\s*(?:\\]|\\)|;)')
A:flask.werkzeug.useragents.match->self._language_re.search(user_agent)
A:flask.werkzeug.useragents.last_closing_paren->user_agent.rindex(')')
A:flask.werkzeug.useragents.version->self._language_re.search(user_agent).group(1)
A:flask.werkzeug.useragents._parser->_UserAgentParser()
A:flask.werkzeug.useragents.info->self._parser(string)
A:flask.werkzeug.useragents.string->environ_or_string.get('HTTP_USER_AGENT', '')
flask.werkzeug.useragents.UserAgent(self,environ_or_string:'t.Union[str,WSGIEnvironment]')
flask.werkzeug.useragents.UserAgent.__init__(self,environ_or_string:'t.Union[str,WSGIEnvironment]')
flask.werkzeug.useragents.UserAgentParser(self)
flask.werkzeug.useragents.UserAgentParser.__init__(self)
flask.werkzeug.useragents._UserAgent(self,string:str)
flask.werkzeug.useragents._UserAgent.__init__(self,string:str)
flask.werkzeug.useragents._UserAgent.browser(self)->t.Optional[str]
flask.werkzeug.useragents._UserAgent.language(self)->t.Optional[str]
flask.werkzeug.useragents._UserAgent.platform(self)->t.Optional[str]
flask.werkzeug.useragents._UserAgent.version(self)->t.Optional[str]
flask.werkzeug.useragents._UserAgentParser(self)
flask.werkzeug.useragents._UserAgentParser.__init__(self)
flask.werkzeug.useragents._deprecated_property(self,fget:t.Callable[['_UserAgent'],t.Any])
flask.werkzeug.useragents._deprecated_property.__get__(self,*args:t.Any,**kwargs:t.Any)->t.Any
flask.werkzeug.useragents._deprecated_property.__init__(self,fget:t.Callable[['_UserAgent'],t.Any])


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/datastructures.py----------------------------------------
A:flask.werkzeug.datastructures.rvself._hash_cache->hash(frozenset(self._iter_hashitems()))
A:flask.werkzeug.datastructures.instance->super().__new__(cls)
A:flask.werkzeug.datastructures.rv->set(self._strong)
A:flask.werkzeug.datastructures.__setitem__->_calls_update('__setitem__')
A:flask.werkzeug.datastructures.__delitem__->_calls_update('__delitem__')
A:flask.werkzeug.datastructures.clear->_calls_update('clear')
A:flask.werkzeug.datastructures.popitem->_calls_update('popitem')
A:flask.werkzeug.datastructures.update->_calls_update('update')
A:flask.werkzeug.datastructures.value->base64.b64encode(f'{self.username}:{self.password}'.encode()).decode('utf8')
A:flask.werkzeug.datastructures.lst->dict.pop(self, key)
A:flask.werkzeug.datastructures.default_list->dict.__getitem__(self, key)
A:flask.werkzeug.datastructures.item->dict.popitem(self)
A:flask.werkzeug.datastructures.iter1->iter(self.items(multi=True))
A:flask.werkzeug.datastructures.iter2->iter(other.items(multi=True))
A:flask.werkzeug.datastructures.(k2, v2)->next(iter2)
A:flask.werkzeug.datastructures.returned_keys->set()
A:flask.werkzeug.datastructures.buckets->dict.pop(self, key)
A:flask.werkzeug.datastructures.(key, buckets)->dict.popitem(self)
A:flask.werkzeug.datastructures.ikey->_unicodify_header_value(_key).lower()
A:flask.werkzeug.datastructures.v->type(v)
A:flask.werkzeug.datastructures.key->header.lower().lower()
A:flask.werkzeug.datastructures._value->_unicodify_header_value(_value)
A:flask.werkzeug.datastructures._key->_unicodify_header_value(_key)
A:flask.werkzeug.datastructures.listiter->iter(self._list)
A:flask.werkzeug.datastructures.values_iter->iter(values)
A:flask.werkzeug.datastructures.found->set()
A:flask.werkzeug.datastructures.file->open(file, 'rb')
A:flask.werkzeug.datastructures.values->sorted(values, key=lambda x: (self._specificity(x[0]), x[1]), reverse=True)
A:flask.werkzeug.datastructures.pairs_str->', '.join((f'({x!r}, {y})' for (x, y) in self))
A:flask.werkzeug.datastructures.match->self._best_single_match(server_item)
A:flask.werkzeug.datastructures.specificity->self._specificity(client_item)
A:flask.werkzeug.datastructures._mime_split_re->re.compile('/|(?:\\s*;\\s*)')
A:flask.werkzeug.datastructures.normalized_value->_normalize_mime(value)
A:flask.werkzeug.datastructures.value_params->sorted(normalized_value[2:])
A:flask.werkzeug.datastructures.normalized_item->_normalize_mime(item)
A:flask.werkzeug.datastructures.item_params->sorted(normalized_item[2:])
A:flask.werkzeug.datastructures._locale_delim_re->re.compile('[_-]')
A:flask.werkzeug.datastructures.result->super().best_match(fallback_matches)
A:flask.werkzeug.datastructures.fallback->Accept([(_locale_delim_re.split(item[0], 1)[0], item[1]) for item in self])
A:flask.werkzeug.datastructures.no_cache->cache_control_property('no-cache', '*', None)
A:flask.werkzeug.datastructures.no_store->cache_control_property('no-store', None, bool)
A:flask.werkzeug.datastructures.max_age->cache_control_property('max-age', -1, int)
A:flask.werkzeug.datastructures.no_transform->cache_control_property('no-transform', None, None)
A:flask.werkzeug.datastructures.kv_str->' '.join((f'{k}={v!r}' for (k, v) in sorted(self.items())))
A:flask.werkzeug.datastructures.cache_property->staticmethod(cache_control_property)
A:flask.werkzeug.datastructures.max_stale->cache_control_property('max-stale', '*', int)
A:flask.werkzeug.datastructures.min_fresh->cache_control_property('min-fresh', '*', int)
A:flask.werkzeug.datastructures.only_if_cached->cache_control_property('only-if-cached', None, bool)
A:flask.werkzeug.datastructures.public->cache_control_property('public', None, bool)
A:flask.werkzeug.datastructures.private->cache_control_property('private', '*', None)
A:flask.werkzeug.datastructures.must_revalidate->cache_control_property('must-revalidate', None, bool)
A:flask.werkzeug.datastructures.proxy_revalidate->cache_control_property('proxy-revalidate', None, bool)
A:flask.werkzeug.datastructures.s_maxage->cache_control_property('s-maxage', None, None)
A:flask.werkzeug.datastructures.immutable->cache_control_property('immutable', None, bool)
A:flask.werkzeug.datastructures.base_uri->csp_property('base-uri')
A:flask.werkzeug.datastructures.child_src->csp_property('child-src')
A:flask.werkzeug.datastructures.connect_src->csp_property('connect-src')
A:flask.werkzeug.datastructures.default_src->csp_property('default-src')
A:flask.werkzeug.datastructures.font_src->csp_property('font-src')
A:flask.werkzeug.datastructures.form_action->csp_property('form-action')
A:flask.werkzeug.datastructures.frame_ancestors->csp_property('frame-ancestors')
A:flask.werkzeug.datastructures.frame_src->csp_property('frame-src')
A:flask.werkzeug.datastructures.img_src->csp_property('img-src')
A:flask.werkzeug.datastructures.manifest_src->csp_property('manifest-src')
A:flask.werkzeug.datastructures.media_src->csp_property('media-src')
A:flask.werkzeug.datastructures.navigate_to->csp_property('navigate-to')
A:flask.werkzeug.datastructures.object_src->csp_property('object-src')
A:flask.werkzeug.datastructures.prefetch_src->csp_property('prefetch-src')
A:flask.werkzeug.datastructures.plugin_types->csp_property('plugin-types')
A:flask.werkzeug.datastructures.report_to->csp_property('report-to')
A:flask.werkzeug.datastructures.report_uri->csp_property('report-uri')
A:flask.werkzeug.datastructures.sandbox->csp_property('sandbox')
A:flask.werkzeug.datastructures.script_src->csp_property('script-src')
A:flask.werkzeug.datastructures.script_src_attr->csp_property('script-src-attr')
A:flask.werkzeug.datastructures.script_src_elem->csp_property('script-src-elem')
A:flask.werkzeug.datastructures.style_src->csp_property('style-src')
A:flask.werkzeug.datastructures.style_src_attr->csp_property('style-src-attr')
A:flask.werkzeug.datastructures.style_src_elem->csp_property('style-src-elem')
A:flask.werkzeug.datastructures.worker_src->csp_property('worker-src')
A:flask.werkzeug.datastructures.self._headers->list(headers or ())
A:flask.werkzeug.datastructures.header->header.lower().lower()
A:flask.werkzeug.datastructures.self._strong->frozenset()
A:flask.werkzeug.datastructures.self._weak->frozenset(weak_etags or ())
A:flask.werkzeug.datastructures.(etag, weak)->http.unquote_etag(etag)
A:flask.werkzeug.datastructures.etag->http.generate_etag(data)
A:flask.werkzeug.datastructures.rng->self.range_for_length(length)
A:flask.werkzeug.datastructures.range->self.range_for_length(length)
A:flask.werkzeug.datastructures.units->_callback_property('_units')
A:flask.werkzeug.datastructures.start->_callback_property('_start')
A:flask.werkzeug.datastructures.stop->_callback_property('_stop')
A:flask.werkzeug.datastructures.length->_callback_property('_length')
A:flask.werkzeug.datastructures.self[name]->header_set.to_header()
A:flask.werkzeug.datastructures._require_quoting->frozenset(['domain', 'nonce', 'opaque', 'realm', 'qop'])
A:flask.werkzeug.datastructures.d->dict(self)
A:flask.werkzeug.datastructures.kv_string->', '.join([f'{k}={v}' for (k, v) in kv_items])
A:flask.werkzeug.datastructures.type->auth_property('__auth_type__', doc='The type of the auth mechanism. HTTP currently specifies\n        ``Basic`` and ``Digest``.')
A:flask.werkzeug.datastructures.realm->auth_property('realm', doc='A string to be displayed to users so they know which\n        username and password to use. This string should contain at\n        least the name of the host performing the authentication and\n        might additionally indicate the collection of users who might\n        have access.')
A:flask.werkzeug.datastructures.domain->_set_property('domain', doc='A list of URIs that define the protection space. If a URI\n        is an absolute path, it is relative to the canonical root URL of\n        the server being accessed.')
A:flask.werkzeug.datastructures.nonce->auth_property('nonce', doc='\n        A server-specified data string which should be uniquely generated\n        each time a 401 response is made. It is recommended that this\n        string be base64 or hexadecimal data.')
A:flask.werkzeug.datastructures.opaque->auth_property('opaque', doc='A string of data, specified by the server, which should\n        be returned by the client unchanged in the Authorization header\n        of subsequent requests with URIs in the same protection space.\n        It is recommended that this string be base64 or hexadecimal\n        data.')
A:flask.werkzeug.datastructures.algorithm->auth_property('algorithm', doc='A string indicating a pair of algorithms used to produce\n        the digest and a checksum. If this is not present it is assumed\n        to be "MD5". If the algorithm is not understood, the challenge\n        should be ignored (and a different one used, if there is more\n        than one).')
A:flask.werkzeug.datastructures.qop->_set_property('qop', doc='A set of quality-of-privacy directives such as auth and\n        auth-int.')
A:flask.werkzeug.datastructures.val->self.get('stale')
A:flask.werkzeug.datastructures.auth_property->staticmethod(auth_property)
A:flask.werkzeug.datastructures.filename->filename.decode(get_filesystem_encoding(), 'replace').decode(get_filesystem_encoding(), 'replace')
A:flask.werkzeug.datastructures.s->_make_encode_wrapper(filename)
A:flask.werkzeug.datastructures.headers->Headers()
A:flask.werkzeug.datastructures.headers['Content-Length']->str(content_length)
A:flask.werkzeug.datastructures.self._parsed_content_type->http.parse_options_header(self.content_type)
A:flask.werkzeug.datastructures.dst->open(dst, 'wb')
flask.werkzeug.datastructures.Accept(self,values=())
flask.werkzeug.datastructures.Accept.__contains__(self,value)
flask.werkzeug.datastructures.Accept.__getitem__(self,key)
flask.werkzeug.datastructures.Accept.__init__(self,values=())
flask.werkzeug.datastructures.Accept.__repr__(self)
flask.werkzeug.datastructures.Accept.__str__(self)
flask.werkzeug.datastructures.Accept._best_single_match(self,match)
flask.werkzeug.datastructures.Accept._specificity(self,value)
flask.werkzeug.datastructures.Accept._value_matches(self,value,item)
flask.werkzeug.datastructures.Accept.best(self)
flask.werkzeug.datastructures.Accept.best_match(self,matches,default=None)
flask.werkzeug.datastructures.Accept.find(self,key)
flask.werkzeug.datastructures.Accept.index(self,key)
flask.werkzeug.datastructures.Accept.quality(self,key)
flask.werkzeug.datastructures.Accept.to_header(self)
flask.werkzeug.datastructures.Accept.values(self)
flask.werkzeug.datastructures.Authorization(self,auth_type,data=None)
flask.werkzeug.datastructures.Authorization.__init__(self,auth_type,data=None)
flask.werkzeug.datastructures.Authorization.cnonce(self)
flask.werkzeug.datastructures.Authorization.nc(self)
flask.werkzeug.datastructures.Authorization.nonce(self)
flask.werkzeug.datastructures.Authorization.opaque(self)
flask.werkzeug.datastructures.Authorization.password(self)
flask.werkzeug.datastructures.Authorization.qop(self)
flask.werkzeug.datastructures.Authorization.realm(self)
flask.werkzeug.datastructures.Authorization.response(self)
flask.werkzeug.datastructures.Authorization.to_header(self)
flask.werkzeug.datastructures.Authorization.uri(self)
flask.werkzeug.datastructures.Authorization.username(self)
flask.werkzeug.datastructures.CallbackDict(self,initial=None,on_update=None)
flask.werkzeug.datastructures.CallbackDict.__init__(self,initial=None,on_update=None)
flask.werkzeug.datastructures.CallbackDict.__repr__(self)
flask.werkzeug.datastructures.CharsetAccept(Accept)
flask.werkzeug.datastructures.CharsetAccept._value_matches(self,value,item)
flask.werkzeug.datastructures.CombinedMultiDict(self,dicts=None)
flask.werkzeug.datastructures.CombinedMultiDict.__contains__(self,key)
flask.werkzeug.datastructures.CombinedMultiDict.__getitem__(self,key)
flask.werkzeug.datastructures.CombinedMultiDict.__init__(self,dicts=None)
flask.werkzeug.datastructures.CombinedMultiDict.__iter__(self)
flask.werkzeug.datastructures.CombinedMultiDict.__len__(self)
flask.werkzeug.datastructures.CombinedMultiDict.__reduce_ex__(self,protocol)
flask.werkzeug.datastructures.CombinedMultiDict.__repr__(self)
flask.werkzeug.datastructures.CombinedMultiDict._keys_impl(self)
flask.werkzeug.datastructures.CombinedMultiDict.copy(self)
flask.werkzeug.datastructures.CombinedMultiDict.fromkeys(cls,keys,value=None)
flask.werkzeug.datastructures.CombinedMultiDict.get(self,key,default=None,type=None)
flask.werkzeug.datastructures.CombinedMultiDict.getlist(self,key,type=None)
flask.werkzeug.datastructures.CombinedMultiDict.has_key(self,key)
flask.werkzeug.datastructures.CombinedMultiDict.items(self,multi=False)
flask.werkzeug.datastructures.CombinedMultiDict.keys(self)
flask.werkzeug.datastructures.CombinedMultiDict.lists(self)
flask.werkzeug.datastructures.CombinedMultiDict.listvalues(self)
flask.werkzeug.datastructures.CombinedMultiDict.to_dict(self,flat=True)
flask.werkzeug.datastructures.CombinedMultiDict.values(self)
flask.werkzeug.datastructures.ContentRange(self,units,start,stop,length=None,on_update=None)
flask.werkzeug.datastructures.ContentRange.__bool__(self)
flask.werkzeug.datastructures.ContentRange.__init__(self,units,start,stop,length=None,on_update=None)
flask.werkzeug.datastructures.ContentRange.__repr__(self)
flask.werkzeug.datastructures.ContentRange.__str__(self)
flask.werkzeug.datastructures.ContentRange.set(self,start,stop,length=None,units='bytes')
flask.werkzeug.datastructures.ContentRange.to_header(self)
flask.werkzeug.datastructures.ContentRange.unset(self)
flask.werkzeug.datastructures.ContentSecurityPolicy(self,values=(),on_update=None)
flask.werkzeug.datastructures.ContentSecurityPolicy.__init__(self,values=(),on_update=None)
flask.werkzeug.datastructures.ContentSecurityPolicy.__repr__(self)
flask.werkzeug.datastructures.ContentSecurityPolicy.__str__(self)
flask.werkzeug.datastructures.ContentSecurityPolicy._del_value(self,key)
flask.werkzeug.datastructures.ContentSecurityPolicy._get_value(self,key)
flask.werkzeug.datastructures.ContentSecurityPolicy._set_value(self,key,value)
flask.werkzeug.datastructures.ContentSecurityPolicy.to_header(self)
flask.werkzeug.datastructures.ETags(self,strong_etags=None,weak_etags=None,star_tag=False)
flask.werkzeug.datastructures.ETags.__bool__(self)
flask.werkzeug.datastructures.ETags.__contains__(self,etag)
flask.werkzeug.datastructures.ETags.__init__(self,strong_etags=None,weak_etags=None,star_tag=False)
flask.werkzeug.datastructures.ETags.__iter__(self)
flask.werkzeug.datastructures.ETags.__len__(self)
flask.werkzeug.datastructures.ETags.__repr__(self)
flask.werkzeug.datastructures.ETags.__str__(self)
flask.werkzeug.datastructures.ETags.as_set(self,include_weak=False)
flask.werkzeug.datastructures.ETags.contains(self,etag)
flask.werkzeug.datastructures.ETags.contains_raw(self,etag)
flask.werkzeug.datastructures.ETags.contains_weak(self,etag)
flask.werkzeug.datastructures.ETags.is_strong(self,etag)
flask.werkzeug.datastructures.ETags.is_weak(self,etag)
flask.werkzeug.datastructures.ETags.to_header(self)
flask.werkzeug.datastructures.EnvironHeaders(self,environ)
flask.werkzeug.datastructures.EnvironHeaders.__eq__(self,other)
flask.werkzeug.datastructures.EnvironHeaders.__getitem__(self,key,_get_mode=False)
flask.werkzeug.datastructures.EnvironHeaders.__init__(self,environ)
flask.werkzeug.datastructures.EnvironHeaders.__iter__(self)
flask.werkzeug.datastructures.EnvironHeaders.__len__(self)
flask.werkzeug.datastructures.EnvironHeaders.copy(self)
flask.werkzeug.datastructures.FileMultiDict(MultiDict)
flask.werkzeug.datastructures.FileMultiDict.add_file(self,name,file,filename=None,content_type=None)
flask.werkzeug.datastructures.FileStorage(self,stream=None,filename=None,name=None,content_type=None,content_length=None,headers=None)
flask.werkzeug.datastructures.FileStorage.__bool__(self)
flask.werkzeug.datastructures.FileStorage.__getattr__(self,name)
flask.werkzeug.datastructures.FileStorage.__init__(self,stream=None,filename=None,name=None,content_type=None,content_length=None,headers=None)
flask.werkzeug.datastructures.FileStorage.__iter__(self)
flask.werkzeug.datastructures.FileStorage.__repr__(self)
flask.werkzeug.datastructures.FileStorage._parse_content_type(self)
flask.werkzeug.datastructures.FileStorage.close(self)
flask.werkzeug.datastructures.FileStorage.content_length(self)
flask.werkzeug.datastructures.FileStorage.content_type(self)
flask.werkzeug.datastructures.FileStorage.mimetype(self)
flask.werkzeug.datastructures.FileStorage.mimetype_params(self)
flask.werkzeug.datastructures.FileStorage.save(self,dst,buffer_size=16384)
flask.werkzeug.datastructures.HeaderSet(self,headers=None,on_update=None)
flask.werkzeug.datastructures.HeaderSet.__bool__(self)
flask.werkzeug.datastructures.HeaderSet.__contains__(self,header)
flask.werkzeug.datastructures.HeaderSet.__delitem__(self,idx)
flask.werkzeug.datastructures.HeaderSet.__getitem__(self,idx)
flask.werkzeug.datastructures.HeaderSet.__init__(self,headers=None,on_update=None)
flask.werkzeug.datastructures.HeaderSet.__iter__(self)
flask.werkzeug.datastructures.HeaderSet.__len__(self)
flask.werkzeug.datastructures.HeaderSet.__repr__(self)
flask.werkzeug.datastructures.HeaderSet.__setitem__(self,idx,value)
flask.werkzeug.datastructures.HeaderSet.__str__(self)
flask.werkzeug.datastructures.HeaderSet.add(self,header)
flask.werkzeug.datastructures.HeaderSet.as_set(self,preserve_casing=False)
flask.werkzeug.datastructures.HeaderSet.clear(self)
flask.werkzeug.datastructures.HeaderSet.discard(self,header)
flask.werkzeug.datastructures.HeaderSet.find(self,header)
flask.werkzeug.datastructures.HeaderSet.index(self,header)
flask.werkzeug.datastructures.HeaderSet.remove(self,header)
flask.werkzeug.datastructures.HeaderSet.to_header(self)
flask.werkzeug.datastructures.HeaderSet.update(self,iterable)
flask.werkzeug.datastructures.Headers(self,defaults=None)
flask.werkzeug.datastructures.Headers.__contains__(self,key)
flask.werkzeug.datastructures.Headers.__copy__(self)
flask.werkzeug.datastructures.Headers.__delitem__(self,key,_index_operation=True)
flask.werkzeug.datastructures.Headers.__eq__(self,other)
flask.werkzeug.datastructures.Headers.__getitem__(self,key,_get_mode=False)
flask.werkzeug.datastructures.Headers.__init__(self,defaults=None)
flask.werkzeug.datastructures.Headers.__iter__(self)
flask.werkzeug.datastructures.Headers.__len__(self)
flask.werkzeug.datastructures.Headers.__repr__(self)
flask.werkzeug.datastructures.Headers.__setitem__(self,key,value)
flask.werkzeug.datastructures.Headers.__str__(self)
flask.werkzeug.datastructures.Headers._validate_value(self,value)
flask.werkzeug.datastructures.Headers.add(self,_key,_value,**kw)
flask.werkzeug.datastructures.Headers.add_header(self,_key,_value,**_kw)
flask.werkzeug.datastructures.Headers.clear(self)
flask.werkzeug.datastructures.Headers.copy(self)
flask.werkzeug.datastructures.Headers.extend(self,*args,**kwargs)
flask.werkzeug.datastructures.Headers.get(self,key,default=None,type=None,as_bytes=False)
flask.werkzeug.datastructures.Headers.get_all(self,name)
flask.werkzeug.datastructures.Headers.getlist(self,key,type=None,as_bytes=False)
flask.werkzeug.datastructures.Headers.has_key(self,key)
flask.werkzeug.datastructures.Headers.items(self,lower=False)
flask.werkzeug.datastructures.Headers.keys(self,lower=False)
flask.werkzeug.datastructures.Headers.pop(self,key=None,default=_missing)
flask.werkzeug.datastructures.Headers.popitem(self)
flask.werkzeug.datastructures.Headers.remove(self,key)
flask.werkzeug.datastructures.Headers.set(self,_key,_value,**kw)
flask.werkzeug.datastructures.Headers.setdefault(self,key,default)
flask.werkzeug.datastructures.Headers.setlist(self,key,values)
flask.werkzeug.datastructures.Headers.setlistdefault(self,key,default)
flask.werkzeug.datastructures.Headers.to_wsgi_list(self)
flask.werkzeug.datastructures.Headers.update(self,*args,**kwargs)
flask.werkzeug.datastructures.Headers.values(self)
flask.werkzeug.datastructures.IfRange(self,etag=None,date=None)
flask.werkzeug.datastructures.IfRange.__init__(self,etag=None,date=None)
flask.werkzeug.datastructures.IfRange.__repr__(self)
flask.werkzeug.datastructures.IfRange.__str__(self)
flask.werkzeug.datastructures.IfRange.to_header(self)
flask.werkzeug.datastructures.ImmutableDict(ImmutableDictMixin,dict)
flask.werkzeug.datastructures.ImmutableDict.__copy__(self)
flask.werkzeug.datastructures.ImmutableDict.__repr__(self)
flask.werkzeug.datastructures.ImmutableDict.copy(self)
flask.werkzeug.datastructures.ImmutableDictMixin
flask.werkzeug.datastructures.ImmutableDictMixin.__delitem__(self,key)
flask.werkzeug.datastructures.ImmutableDictMixin.__hash__(self)
flask.werkzeug.datastructures.ImmutableDictMixin.__reduce_ex__(self,protocol)
flask.werkzeug.datastructures.ImmutableDictMixin.__setitem__(self,key,value)
flask.werkzeug.datastructures.ImmutableDictMixin._iter_hashitems(self)
flask.werkzeug.datastructures.ImmutableDictMixin.clear(self)
flask.werkzeug.datastructures.ImmutableDictMixin.fromkeys(cls,keys,value=None)
flask.werkzeug.datastructures.ImmutableDictMixin.pop(self,key,default=None)
flask.werkzeug.datastructures.ImmutableDictMixin.popitem(self)
flask.werkzeug.datastructures.ImmutableDictMixin.setdefault(self,key,default=None)
flask.werkzeug.datastructures.ImmutableDictMixin.update(self,*args,**kwargs)
flask.werkzeug.datastructures.ImmutableHeadersMixin
flask.werkzeug.datastructures.ImmutableHeadersMixin.__delitem__(self,key,**kwargs)
flask.werkzeug.datastructures.ImmutableHeadersMixin.__setitem__(self,key,value)
flask.werkzeug.datastructures.ImmutableHeadersMixin.add(self,_key,_value,**kw)
flask.werkzeug.datastructures.ImmutableHeadersMixin.add_header(self,_key,_value,**_kw)
flask.werkzeug.datastructures.ImmutableHeadersMixin.extend(self,*args,**kwargs)
flask.werkzeug.datastructures.ImmutableHeadersMixin.insert(self,pos,value)
flask.werkzeug.datastructures.ImmutableHeadersMixin.pop(self,key=None,default=_missing)
flask.werkzeug.datastructures.ImmutableHeadersMixin.popitem(self)
flask.werkzeug.datastructures.ImmutableHeadersMixin.remove(self,key)
flask.werkzeug.datastructures.ImmutableHeadersMixin.set(self,_key,_value,**kw)
flask.werkzeug.datastructures.ImmutableHeadersMixin.setdefault(self,key,default)
flask.werkzeug.datastructures.ImmutableHeadersMixin.setlist(self,key,values)
flask.werkzeug.datastructures.ImmutableHeadersMixin.setlistdefault(self,key,default)
flask.werkzeug.datastructures.ImmutableHeadersMixin.update(self,*args,**kwargs)
flask.werkzeug.datastructures.ImmutableList(ImmutableListMixin,list)
flask.werkzeug.datastructures.ImmutableList.__repr__(self)
flask.werkzeug.datastructures.ImmutableListMixin
flask.werkzeug.datastructures.ImmutableListMixin.__delitem__(self,key)
flask.werkzeug.datastructures.ImmutableListMixin.__hash__(self)
flask.werkzeug.datastructures.ImmutableListMixin.__iadd__(self,other)
flask.werkzeug.datastructures.ImmutableListMixin.__imul__(self,other)
flask.werkzeug.datastructures.ImmutableListMixin.__reduce_ex__(self,protocol)
flask.werkzeug.datastructures.ImmutableListMixin.__setitem__(self,key,value)
flask.werkzeug.datastructures.ImmutableListMixin.append(self,item)
flask.werkzeug.datastructures.ImmutableListMixin.extend(self,iterable)
flask.werkzeug.datastructures.ImmutableListMixin.insert(self,pos,value)
flask.werkzeug.datastructures.ImmutableListMixin.pop(self,index=-1)
flask.werkzeug.datastructures.ImmutableListMixin.remove(self,item)
flask.werkzeug.datastructures.ImmutableListMixin.reverse(self)
flask.werkzeug.datastructures.ImmutableListMixin.sort(self,key=None,reverse=False)
flask.werkzeug.datastructures.ImmutableMultiDict(ImmutableMultiDictMixin,MultiDict)
flask.werkzeug.datastructures.ImmutableMultiDict.__copy__(self)
flask.werkzeug.datastructures.ImmutableMultiDict.copy(self)
flask.werkzeug.datastructures.ImmutableMultiDictMixin(ImmutableDictMixin)
flask.werkzeug.datastructures.ImmutableMultiDictMixin.__reduce_ex__(self,protocol)
flask.werkzeug.datastructures.ImmutableMultiDictMixin._iter_hashitems(self)
flask.werkzeug.datastructures.ImmutableMultiDictMixin.add(self,key,value)
flask.werkzeug.datastructures.ImmutableMultiDictMixin.popitemlist(self)
flask.werkzeug.datastructures.ImmutableMultiDictMixin.poplist(self,key)
flask.werkzeug.datastructures.ImmutableMultiDictMixin.setlist(self,key,new_list)
flask.werkzeug.datastructures.ImmutableMultiDictMixin.setlistdefault(self,key,default_list=None)
flask.werkzeug.datastructures.ImmutableOrderedMultiDict(ImmutableMultiDictMixin,OrderedMultiDict)
flask.werkzeug.datastructures.ImmutableOrderedMultiDict.__copy__(self)
flask.werkzeug.datastructures.ImmutableOrderedMultiDict._iter_hashitems(self)
flask.werkzeug.datastructures.ImmutableOrderedMultiDict.copy(self)
flask.werkzeug.datastructures.ImmutableTypeConversionDict(ImmutableDictMixin,TypeConversionDict)
flask.werkzeug.datastructures.ImmutableTypeConversionDict.__copy__(self)
flask.werkzeug.datastructures.ImmutableTypeConversionDict.copy(self)
flask.werkzeug.datastructures.LanguageAccept(Accept)
flask.werkzeug.datastructures.LanguageAccept._value_matches(self,value,item)
flask.werkzeug.datastructures.LanguageAccept.best_match(self,matches,default=None)
flask.werkzeug.datastructures.MIMEAccept(Accept)
flask.werkzeug.datastructures.MIMEAccept._specificity(self,value)
flask.werkzeug.datastructures.MIMEAccept._value_matches(self,value,item)
flask.werkzeug.datastructures.MIMEAccept.accept_html(self)
flask.werkzeug.datastructures.MIMEAccept.accept_json(self)
flask.werkzeug.datastructures.MIMEAccept.accept_xhtml(self)
flask.werkzeug.datastructures.MultiDict(self,mapping=None)
flask.werkzeug.datastructures.MultiDict.__copy__(self)
flask.werkzeug.datastructures.MultiDict.__deepcopy__(self,memo)
flask.werkzeug.datastructures.MultiDict.__getitem__(self,key)
flask.werkzeug.datastructures.MultiDict.__getstate__(self)
flask.werkzeug.datastructures.MultiDict.__init__(self,mapping=None)
flask.werkzeug.datastructures.MultiDict.__iter__(self)
flask.werkzeug.datastructures.MultiDict.__repr__(self)
flask.werkzeug.datastructures.MultiDict.__setitem__(self,key,value)
flask.werkzeug.datastructures.MultiDict.__setstate__(self,value)
flask.werkzeug.datastructures.MultiDict.add(self,key,value)
flask.werkzeug.datastructures.MultiDict.copy(self)
flask.werkzeug.datastructures.MultiDict.deepcopy(self,memo=None)
flask.werkzeug.datastructures.MultiDict.getlist(self,key,type=None)
flask.werkzeug.datastructures.MultiDict.items(self,multi=False)
flask.werkzeug.datastructures.MultiDict.lists(self)
flask.werkzeug.datastructures.MultiDict.listvalues(self)
flask.werkzeug.datastructures.MultiDict.pop(self,key,default=_missing)
flask.werkzeug.datastructures.MultiDict.popitem(self)
flask.werkzeug.datastructures.MultiDict.popitemlist(self)
flask.werkzeug.datastructures.MultiDict.poplist(self,key)
flask.werkzeug.datastructures.MultiDict.setdefault(self,key,default=None)
flask.werkzeug.datastructures.MultiDict.setlist(self,key,new_list)
flask.werkzeug.datastructures.MultiDict.setlistdefault(self,key,default_list=None)
flask.werkzeug.datastructures.MultiDict.to_dict(self,flat=True)
flask.werkzeug.datastructures.MultiDict.update(self,mapping)
flask.werkzeug.datastructures.MultiDict.values(self)
flask.werkzeug.datastructures.OrderedMultiDict(self,mapping=None)
flask.werkzeug.datastructures.OrderedMultiDict.__delitem__(self,key)
flask.werkzeug.datastructures.OrderedMultiDict.__eq__(self,other)
flask.werkzeug.datastructures.OrderedMultiDict.__getitem__(self,key)
flask.werkzeug.datastructures.OrderedMultiDict.__getstate__(self)
flask.werkzeug.datastructures.OrderedMultiDict.__init__(self,mapping=None)
flask.werkzeug.datastructures.OrderedMultiDict.__iter__(self)
flask.werkzeug.datastructures.OrderedMultiDict.__reduce_ex__(self,protocol)
flask.werkzeug.datastructures.OrderedMultiDict.__setitem__(self,key,value)
flask.werkzeug.datastructures.OrderedMultiDict.__setstate__(self,values)
flask.werkzeug.datastructures.OrderedMultiDict.add(self,key,value)
flask.werkzeug.datastructures.OrderedMultiDict.getlist(self,key,type=None)
flask.werkzeug.datastructures.OrderedMultiDict.items(self,multi=False)
flask.werkzeug.datastructures.OrderedMultiDict.keys(self)
flask.werkzeug.datastructures.OrderedMultiDict.lists(self)
flask.werkzeug.datastructures.OrderedMultiDict.listvalues(self)
flask.werkzeug.datastructures.OrderedMultiDict.pop(self,key,default=_missing)
flask.werkzeug.datastructures.OrderedMultiDict.popitem(self)
flask.werkzeug.datastructures.OrderedMultiDict.popitemlist(self)
flask.werkzeug.datastructures.OrderedMultiDict.poplist(self,key)
flask.werkzeug.datastructures.OrderedMultiDict.setlist(self,key,new_list)
flask.werkzeug.datastructures.OrderedMultiDict.setlistdefault(self,key,default_list=None)
flask.werkzeug.datastructures.OrderedMultiDict.update(self,mapping)
flask.werkzeug.datastructures.OrderedMultiDict.values(self)
flask.werkzeug.datastructures.Range(self,units,ranges)
flask.werkzeug.datastructures.Range.__init__(self,units,ranges)
flask.werkzeug.datastructures.Range.__repr__(self)
flask.werkzeug.datastructures.Range.__str__(self)
flask.werkzeug.datastructures.Range.make_content_range(self,length)
flask.werkzeug.datastructures.Range.range_for_length(self,length)
flask.werkzeug.datastructures.Range.to_content_range_header(self,length)
flask.werkzeug.datastructures.Range.to_header(self)
flask.werkzeug.datastructures.RequestCacheControl(ImmutableDictMixin,_CacheControl)
flask.werkzeug.datastructures.ResponseCacheControl(_CacheControl)
flask.werkzeug.datastructures.TypeConversionDict(dict)
flask.werkzeug.datastructures.TypeConversionDict.get(self,key,default=None,type=None)
flask.werkzeug.datastructures.UpdateDictMixin(dict)
flask.werkzeug.datastructures.UpdateDictMixin.pop(self,key,default=_missing)
flask.werkzeug.datastructures.UpdateDictMixin.setdefault(self,key,default=None)
flask.werkzeug.datastructures.WWWAuthenticate(self,auth_type=None,values=None,on_update=None)
flask.werkzeug.datastructures.WWWAuthenticate.__init__(self,auth_type=None,values=None,on_update=None)
flask.werkzeug.datastructures.WWWAuthenticate.__repr__(self)
flask.werkzeug.datastructures.WWWAuthenticate.__str__(self)
flask.werkzeug.datastructures.WWWAuthenticate.set_basic(self,realm='authenticationrequired')
flask.werkzeug.datastructures.WWWAuthenticate.set_digest(self,realm,nonce,qop=('auth',),opaque=None,algorithm=None,stale=False)
flask.werkzeug.datastructures.WWWAuthenticate.stale(self)
flask.werkzeug.datastructures.WWWAuthenticate.stale(self,value)
flask.werkzeug.datastructures.WWWAuthenticate.to_header(self)
flask.werkzeug.datastructures._CacheControl(self,values=(),on_update=None)
flask.werkzeug.datastructures._CacheControl.__init__(self,values=(),on_update=None)
flask.werkzeug.datastructures._CacheControl.__repr__(self)
flask.werkzeug.datastructures._CacheControl.__str__(self)
flask.werkzeug.datastructures._CacheControl._del_cache_value(self,key)
flask.werkzeug.datastructures._CacheControl._get_cache_value(self,key,empty,type)
flask.werkzeug.datastructures._CacheControl._set_cache_value(self,key,value,type)
flask.werkzeug.datastructures._CacheControl.to_header(self)
flask.werkzeug.datastructures._callback_property(name)
flask.werkzeug.datastructures._calls_update(name)
flask.werkzeug.datastructures._normalize_lang(value)
flask.werkzeug.datastructures._normalize_mime(value)
flask.werkzeug.datastructures._omd_bucket(self,omd,key,value)
flask.werkzeug.datastructures._omd_bucket.__init__(self,omd,key,value)
flask.werkzeug.datastructures._omd_bucket.unlink(self,omd)
flask.werkzeug.datastructures._options_header_vkw(value,kw)
flask.werkzeug.datastructures._set_property(name,doc=None)
flask.werkzeug.datastructures._unicodify_header_value(value)
flask.werkzeug.datastructures.auth_property(name,doc=None)
flask.werkzeug.datastructures.cache_control_property(key,empty,type)
flask.werkzeug.datastructures.cache_property(key,empty,type)
flask.werkzeug.datastructures.csp_property(key)
flask.werkzeug.datastructures.is_immutable(self)
flask.werkzeug.datastructures.iter_multi_items(mapping)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/datastructures.pyi----------------------------------------
flask.werkzeug.datastructures.ContentRange.length(self)->Optional[int]
flask.werkzeug.datastructures.ContentRange.length(self,value:Optional[int])->None
flask.werkzeug.datastructures.ContentRange.start(self)->Optional[int]
flask.werkzeug.datastructures.ContentRange.start(self,value:Optional[int])->None
flask.werkzeug.datastructures.ContentRange.stop(self)->Optional[int]
flask.werkzeug.datastructures.ContentRange.stop(self,value:Optional[int])->None
flask.werkzeug.datastructures.ContentRange.units(self)->Optional[str]
flask.werkzeug.datastructures.ContentRange.units(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.base_uri(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.base_uri(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.base_uri(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.child_src(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.child_src(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.child_src(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.connect_src(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.connect_src(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.connect_src(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.default_src(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.default_src(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.default_src(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.font_src(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.font_src(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.font_src(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.form_action(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.form_action(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.form_action(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.frame_ancestors(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.frame_ancestors(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.frame_ancestors(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.frame_src(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.frame_src(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.frame_src(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.img_src(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.img_src(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.img_src(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.manifest_src(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.manifest_src(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.manifest_src(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.media_src(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.media_src(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.media_src(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.navigate_to(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.navigate_to(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.navigate_to(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.object_src(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.object_src(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.object_src(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.plugin_types(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.plugin_types(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.plugin_types(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.prefetch_src(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.prefetch_src(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.prefetch_src(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.report_to(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.report_to(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.report_to(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.report_uri(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.report_uri(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.report_uri(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.sandbox(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.sandbox(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.sandbox(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.script_src(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.script_src(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.script_src(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.script_src_attr(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.script_src_attr(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.script_src_attr(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.script_src_elem(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.script_src_elem(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.script_src_elem(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.style_src(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.style_src(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.style_src(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.style_src_attr(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.style_src_attr(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.style_src_attr(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.style_src_elem(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.style_src_elem(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.style_src_elem(self,value:Optional[str])->None
flask.werkzeug.datastructures.ContentSecurityPolicy.worker_src(self)->None
flask.werkzeug.datastructures.ContentSecurityPolicy.worker_src(self)->Optional[str]
flask.werkzeug.datastructures.ContentSecurityPolicy.worker_src(self,value:Optional[str])->None
flask.werkzeug.datastructures.RequestCacheControl.max_stale(self)->None
flask.werkzeug.datastructures.RequestCacheControl.max_stale(self)->Optional[int]
flask.werkzeug.datastructures.RequestCacheControl.max_stale(self,value:Optional[int])->None
flask.werkzeug.datastructures.RequestCacheControl.min_fresh(self)->None
flask.werkzeug.datastructures.RequestCacheControl.min_fresh(self)->Optional[int]
flask.werkzeug.datastructures.RequestCacheControl.min_fresh(self,value:Optional[int])->None
flask.werkzeug.datastructures.RequestCacheControl.only_if_cached(self)->None
flask.werkzeug.datastructures.RequestCacheControl.only_if_cached(self)->Optional[bool]
flask.werkzeug.datastructures.RequestCacheControl.only_if_cached(self,value:Optional[bool])->None
flask.werkzeug.datastructures.ResponseCacheControl.immutable(self)->None
flask.werkzeug.datastructures.ResponseCacheControl.immutable(self)->Optional[bool]
flask.werkzeug.datastructures.ResponseCacheControl.immutable(self,value:Optional[bool])->None
flask.werkzeug.datastructures.ResponseCacheControl.must_revalidate(self)->None
flask.werkzeug.datastructures.ResponseCacheControl.must_revalidate(self)->Optional[bool]
flask.werkzeug.datastructures.ResponseCacheControl.must_revalidate(self,value:Optional[bool])->None
flask.werkzeug.datastructures.ResponseCacheControl.private(self)->None
flask.werkzeug.datastructures.ResponseCacheControl.private(self)->Optional[bool]
flask.werkzeug.datastructures.ResponseCacheControl.private(self,value:Optional[bool])->None
flask.werkzeug.datastructures.ResponseCacheControl.proxy_revalidate(self)->None
flask.werkzeug.datastructures.ResponseCacheControl.proxy_revalidate(self)->Optional[bool]
flask.werkzeug.datastructures.ResponseCacheControl.proxy_revalidate(self,value:Optional[bool])->None
flask.werkzeug.datastructures.ResponseCacheControl.public(self)->None
flask.werkzeug.datastructures.ResponseCacheControl.public(self)->Optional[bool]
flask.werkzeug.datastructures.ResponseCacheControl.public(self,value:Optional[bool])->None
flask.werkzeug.datastructures.ResponseCacheControl.s_maxage(self)->None
flask.werkzeug.datastructures.ResponseCacheControl.s_maxage(self)->Optional[int]
flask.werkzeug.datastructures.ResponseCacheControl.s_maxage(self,value:Optional[int])->None
flask.werkzeug.datastructures.UpdateDictMixin.__delitem__(self,key:K)->None
flask.werkzeug.datastructures.UpdateDictMixin.__setitem__(self,key:K,value:V)->None
flask.werkzeug.datastructures.UpdateDictMixin.clear(self)->None
flask.werkzeug.datastructures.UpdateDictMixin.popitem(self)->Tuple[K, V]
flask.werkzeug.datastructures.UpdateDictMixin.update(self,*args:Union[Mapping[K,V],Iterable[Tuple[K,V]]],**kwargs:V)->None
flask.werkzeug.datastructures.WWWAuthenticate.algorithm(self)->Optional[str]
flask.werkzeug.datastructures.WWWAuthenticate.algorithm(self,value:Optional[str])->None
flask.werkzeug.datastructures.WWWAuthenticate.auth_property(name:str,doc:Optional[str]=None)->property
flask.werkzeug.datastructures.WWWAuthenticate.domain(self)->HeaderSet
flask.werkzeug.datastructures.WWWAuthenticate.nonce(self)->Optional[str]
flask.werkzeug.datastructures.WWWAuthenticate.nonce(self,value:Optional[str])->None
flask.werkzeug.datastructures.WWWAuthenticate.opaque(self)->Optional[str]
flask.werkzeug.datastructures.WWWAuthenticate.opaque(self,value:Optional[str])->None
flask.werkzeug.datastructures.WWWAuthenticate.qop(self)->HeaderSet
flask.werkzeug.datastructures.WWWAuthenticate.realm(self)->Optional[str]
flask.werkzeug.datastructures.WWWAuthenticate.realm(self,value:Optional[str])->None
flask.werkzeug.datastructures.WWWAuthenticate.type(self)->Optional[str]
flask.werkzeug.datastructures.WWWAuthenticate.type(self,value:Optional[str])->None
flask.werkzeug.datastructures._CacheControl.cache_property(key:str,empty:_OptCPT,type:Type[_CPT])->property
flask.werkzeug.datastructures._CacheControl.max_age(self)->None
flask.werkzeug.datastructures._CacheControl.max_age(self)->Optional[int]
flask.werkzeug.datastructures._CacheControl.max_age(self,value:Optional[int])->None
flask.werkzeug.datastructures._CacheControl.no_cache(self)->None
flask.werkzeug.datastructures._CacheControl.no_cache(self)->Optional[bool]
flask.werkzeug.datastructures._CacheControl.no_cache(self,value:Optional[bool])->None
flask.werkzeug.datastructures._CacheControl.no_store(self)->None
flask.werkzeug.datastructures._CacheControl.no_store(self)->Optional[bool]
flask.werkzeug.datastructures._CacheControl.no_store(self,value:Optional[bool])->None
flask.werkzeug.datastructures._CacheControl.no_transform(self)->None
flask.werkzeug.datastructures._CacheControl.no_transform(self)->Optional[bool]
flask.werkzeug.datastructures._CacheControl.no_transform(self,value:Optional[bool])->None


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/routing.py----------------------------------------
A:flask.werkzeug.routing._rule_re->re.compile('\n    (?P<static>[^<]*)                           # static rule data\n    <\n    (?:\n        (?P<converter>[a-zA-Z_][a-zA-Z0-9_]*)   # converter name\n        (?:\\((?P<args>.*?)\\))?                  # converter arguments\n        \\:                                      # variable delimiter\n    )?\n    (?P<variable>[a-zA-Z_][a-zA-Z0-9_]*)        # variable name\n    >\n    ', re.VERBOSE)
A:flask.werkzeug.routing._simple_rule_re->re.compile('<([^>]+)>')
A:flask.werkzeug.routing._converter_args_re->re.compile('\n    ((?P<name>\\w+)\\s*=\\s*)?\n    (?P<value>\n        True|False|\n        \\d+.\\d+|\n        \\d+.|\n        \\d+|\n        [\\w\\d_.]+|\n        [urUR]?(?P<stringval>"[^"]*?"|\'[^\']*\')\n    )\\s*,\n    ', re.VERBOSE)
A:flask.werkzeug.routing.value->value.zfill(self.fixed_digits).zfill(self.fixed_digits)
A:flask.werkzeug.routing.name->item.group('name')
A:flask.werkzeug.routing.end->len(rule)
A:flask.werkzeug.routing.used_names->set()
A:flask.werkzeug.routing.m->self._regex.search(path)
A:flask.werkzeug.routing.data->self._converters[data].to_url(defaults[data])
A:flask.werkzeug.routing.pos->self._regex.search(path).end()
A:flask.werkzeug.routing.rule->rule.empty().empty()
A:flask.werkzeug.routing.self.path->posixpath.join(self.script_name.strip('/'), path_info.lstrip('/')).rstrip('/')
A:flask.werkzeug.routing.self.rules->list(rules)
A:flask.werkzeug.routing.subdomain->_to_str(subdomain, 'ascii')
A:flask.werkzeug.routing.new_endpoint->Template(new_endpoint).substitute(self.context)
A:flask.werkzeug.routing._IF_KWARGS_URL_ENCODE_AST->_prefix_names(_IF_KWARGS_URL_ENCODE_CODE)
A:flask.werkzeug.routing.self.arguments->set()
A:flask.werkzeug.routing.defaults->dict(self.defaults)
A:flask.werkzeug.routing.part->match.group(0)
A:flask.werkzeug.routing.(c_args, c_kwargs)->parse_converter_args(arguments)
A:flask.werkzeug.routing.convobj->self.get_converter(variable, converter, c_args, c_kwargs)
A:flask.werkzeug.routing.self._build->self._compile_builder(False).__get__(self, None)
A:flask.werkzeug.routing.self._build_unknown->self._compile_builder(True).__get__(self, None)
A:flask.werkzeug.routing.self._regex->re.compile(regex)
A:flask.werkzeug.routing.groups->self._regex.search(path).groupdict()
A:flask.werkzeug.routing.new_path->'|'.join(self.build(result, False))
A:flask.werkzeug.routing.path->posixpath.join(self.script_name.strip('/'), path_info.lstrip('/'))
A:flask.werkzeug.routing.ret->_prefix_names(_CALL_CONVERTER_CODE_FMT.format(elem=elem))
A:flask.werkzeug.routing.ret[-1]->ast.Str(ret[-1].s + p.s)
A:flask.werkzeug.routing.dom_parts->_parts(dom_ops)
A:flask.werkzeug.routing.url_parts->_parts(url_ops)
A:flask.werkzeug.routing.func_ast.args.kwarg->ast.arg('.kwargs', None)
A:flask.werkzeug.routing.module->ast.parse('')
A:flask.werkzeug.routing.code->compile(module, '<werkzeug routing>', 'exec')
A:flask.werkzeug.routing.parts->''.join(parts).lstrip('|')
A:flask.werkzeug.routing.maxlength_value->str(int(maxlength))
A:flask.werkzeug.routing.default_converters->ImmutableDict(DEFAULT_CONVERTERS)
A:flask.werkzeug.routing.self._remap_lock->self.lock_class()
A:flask.werkzeug.routing.self.converters->self.default_converters.copy()
A:flask.werkzeug.routing.arguments->set(arguments)
A:flask.werkzeug.routing.server_name->server_name.lower().lower()
A:flask.werkzeug.routing.env->_get_environ(environ)
A:flask.werkzeug.routing.wsgi_server_name->get_host(env).lower()
A:flask.werkzeug.routing.upgrade->any((v.strip() == 'upgrade' for v in env.get('HTTP_CONNECTION', '').lower().split(',')))
A:flask.werkzeug.routing.cur_server_name->get_host(env).lower().split('.')
A:flask.werkzeug.routing.real_server_name->server_name.lower().lower().split('.')
A:flask.werkzeug.routing.val->_get_environ(environ).get(name)
A:flask.werkzeug.routing.script_name->_to_str(script_name)
A:flask.werkzeug.routing.path_info->_to_str(path_info, self.map.charset)
A:flask.werkzeug.routing.query_args->_get_wsgi_string('QUERY_STRING')
A:flask.werkzeug.routing.rules->self.iter_rules()
A:flask.werkzeug.routing.self.server_name->_to_str(server_name)
A:flask.werkzeug.routing.self.subdomain->_to_str(subdomain)
A:flask.werkzeug.routing.self.url_scheme->_to_str(url_scheme)
A:flask.werkzeug.routing.self.path_info->_to_str(path_info)
A:flask.werkzeug.routing.self.default_method->_to_str(default_method)
A:flask.werkzeug.routing.(endpoint, args)->self.match(path_info, method)
A:flask.werkzeug.routing.method->(method or self.default_method).upper()
A:flask.werkzeug.routing.have_match_for->set()
A:flask.werkzeug.routing.rv->self._partial_build(endpoint, values, method, append_unknown)
A:flask.werkzeug.routing.redirect_url->rule.empty().empty().redirect_to(self, **rv)
A:flask.werkzeug.routing.(domain_part, path)->r.build(values)
A:flask.werkzeug.routing.host->self.get_host(domain_part)
A:flask.werkzeug.routing.url->self.build(endpoint, values, method, append_unknown=False, force_external=True)
A:flask.werkzeug.routing.build_rv->rule.empty().empty().build(values, append_unknown)
A:flask.werkzeug.routing.always_list->isinstance(values, MultiDict)
flask.werkzeug.routing.AnyConverter(self,map:'Map',*items:str)
flask.werkzeug.routing.AnyConverter.__init__(self,map:'Map',*items:str)
flask.werkzeug.routing.BaseConverter(self,map:'Map',*args:t.Any,**kwargs:t.Any)
flask.werkzeug.routing.BaseConverter.__init__(self,map:'Map',*args:t.Any,**kwargs:t.Any)
flask.werkzeug.routing.BaseConverter.to_python(self,value:str)->t.Any
flask.werkzeug.routing.BaseConverter.to_url(self,value:t.Any)->str
flask.werkzeug.routing.BuildError(self,endpoint:str,values:t.Mapping[str,t.Any],method:t.Optional[str],adapter:t.Optional['MapAdapter']=None)
flask.werkzeug.routing.BuildError.__init__(self,endpoint:str,values:t.Mapping[str,t.Any],method:t.Optional[str],adapter:t.Optional['MapAdapter']=None)
flask.werkzeug.routing.BuildError.__str__(self)->str
flask.werkzeug.routing.BuildError.closest_rule(self,adapter:t.Optional['MapAdapter'])->t.Optional['Rule']
flask.werkzeug.routing.BuildError.suggested(self)->t.Optional['Rule']
flask.werkzeug.routing.EndpointPrefix(self,prefix:str,rules:t.Iterable[RuleFactory])
flask.werkzeug.routing.EndpointPrefix.__init__(self,prefix:str,rules:t.Iterable[RuleFactory])
flask.werkzeug.routing.EndpointPrefix.get_rules(self,map:'Map')->t.Iterator['Rule']
flask.werkzeug.routing.FloatConverter(self,map:'Map',min:t.Optional[float]=None,max:t.Optional[float]=None,signed:bool=False)
flask.werkzeug.routing.FloatConverter.__init__(self,map:'Map',min:t.Optional[float]=None,max:t.Optional[float]=None,signed:bool=False)
flask.werkzeug.routing.IntegerConverter(NumberConverter)
flask.werkzeug.routing.Map(self,rules:t.Optional[t.Iterable[RuleFactory]]=None,default_subdomain:str='',charset:str='utf-8',strict_slashes:bool=True,merge_slashes:bool=True,redirect_defaults:bool=True,converters:t.Optional[t.Mapping[str,t.Type[BaseConverter]]]=None,sort_parameters:bool=False,sort_key:t.Optional[t.Callable[[t.Any],t.Any]]=None,encoding_errors:str='replace',host_matching:bool=False)
flask.werkzeug.routing.Map.__init__(self,rules:t.Optional[t.Iterable[RuleFactory]]=None,default_subdomain:str='',charset:str='utf-8',strict_slashes:bool=True,merge_slashes:bool=True,redirect_defaults:bool=True,converters:t.Optional[t.Mapping[str,t.Type[BaseConverter]]]=None,sort_parameters:bool=False,sort_key:t.Optional[t.Callable[[t.Any],t.Any]]=None,encoding_errors:str='replace',host_matching:bool=False)
flask.werkzeug.routing.Map.__repr__(self)->str
flask.werkzeug.routing.Map.add(self,rulefactory:RuleFactory)->None
flask.werkzeug.routing.Map.bind(self,server_name:str,script_name:t.Optional[str]=None,subdomain:t.Optional[str]=None,url_scheme:str='http',default_method:str='GET',path_info:t.Optional[str]=None,query_args:t.Optional[t.Union[t.Mapping[str,t.Any],str]]=None)->'MapAdapter'
flask.werkzeug.routing.Map.bind_to_environ(self,environ:t.Union['WSGIEnvironment','Request'],server_name:t.Optional[str]=None,subdomain:t.Optional[str]=None)->'MapAdapter'
flask.werkzeug.routing.Map.is_endpoint_expecting(self,endpoint:str,*arguments:str)->bool
flask.werkzeug.routing.Map.iter_rules(self,endpoint:t.Optional[str]=None)->t.Iterator[Rule]
flask.werkzeug.routing.Map.update(self)->None
flask.werkzeug.routing.MapAdapter(self,map:Map,server_name:str,script_name:str,subdomain:t.Optional[str],url_scheme:str,path_info:str,default_method:str,query_args:t.Optional[t.Union[t.Mapping[str,t.Any],str]]=None)
flask.werkzeug.routing.MapAdapter.__init__(self,map:Map,server_name:str,script_name:str,subdomain:t.Optional[str],url_scheme:str,path_info:str,default_method:str,query_args:t.Optional[t.Union[t.Mapping[str,t.Any],str]]=None)
flask.werkzeug.routing.MapAdapter._partial_build(self,endpoint:str,values:t.Mapping[str,t.Any],method:t.Optional[str],append_unknown:bool)->t.Optional[t.Tuple[str, str, bool]]
flask.werkzeug.routing.MapAdapter.allowed_methods(self,path_info:t.Optional[str]=None)->t.Iterable[str]
flask.werkzeug.routing.MapAdapter.build(self,endpoint:str,values:t.Optional[t.Mapping[str,t.Any]]=None,method:t.Optional[str]=None,force_external:bool=False,append_unknown:bool=True,url_scheme:t.Optional[str]=None)->str
flask.werkzeug.routing.MapAdapter.dispatch(self,view_func:t.Callable[[str,t.Mapping[str,t.Any]],'WSGIApplication'],path_info:t.Optional[str]=None,method:t.Optional[str]=None,catch_http_exceptions:bool=False)->'WSGIApplication'
flask.werkzeug.routing.MapAdapter.encode_query_args(self,query_args:t.Union[t.Mapping[str,t.Any],str])->str
flask.werkzeug.routing.MapAdapter.get_default_redirect(self,rule:Rule,method:str,values:t.MutableMapping[str,t.Any],query_args:t.Union[t.Mapping[str,t.Any],str])->t.Optional[str]
flask.werkzeug.routing.MapAdapter.get_host(self,domain_part:t.Optional[str])->str
flask.werkzeug.routing.MapAdapter.make_alias_redirect_url(self,path:str,endpoint:str,values:t.Mapping[str,t.Any],method:str,query_args:t.Union[t.Mapping[str,t.Any],str])->str
flask.werkzeug.routing.MapAdapter.make_redirect_url(self,path_info:str,query_args:t.Optional[t.Union[t.Mapping[str,t.Any],str]]=None,domain_part:t.Optional[str]=None)->str
flask.werkzeug.routing.MapAdapter.match(self,path_info:t.Optional[str]=None,method:t.Optional[str]=None,return_rule:bool=False,query_args:t.Optional[t.Union[t.Mapping[str,t.Any],str]]=None,websocket:t.Optional[bool]=None)->t.Tuple[t.Union[str, Rule], t.Mapping[str, t.Any]]
flask.werkzeug.routing.MapAdapter.test(self,path_info:t.Optional[str]=None,method:t.Optional[str]=None)->bool
flask.werkzeug.routing.NumberConverter(self,map:'Map',fixed_digits:int=0,min:t.Optional[int]=None,max:t.Optional[int]=None,signed:bool=False)
flask.werkzeug.routing.NumberConverter.__init__(self,map:'Map',fixed_digits:int=0,min:t.Optional[int]=None,max:t.Optional[int]=None,signed:bool=False)
flask.werkzeug.routing.NumberConverter.signed_regex(self)->str
flask.werkzeug.routing.NumberConverter.to_python(self,value:str)->t.Any
flask.werkzeug.routing.NumberConverter.to_url(self,value:t.Any)->str
flask.werkzeug.routing.PathConverter(BaseConverter)
flask.werkzeug.routing.RequestAliasRedirect(self,matched_values:t.Mapping[str,t.Any])
flask.werkzeug.routing.RequestAliasRedirect.__init__(self,matched_values:t.Mapping[str,t.Any])
flask.werkzeug.routing.RequestPath(self,path_info:str)
flask.werkzeug.routing.RequestPath.__init__(self,path_info:str)
flask.werkzeug.routing.RequestRedirect(self,new_url:str)
flask.werkzeug.routing.RequestRedirect.__init__(self,new_url:str)
flask.werkzeug.routing.RequestRedirect.get_response(self,environ:t.Optional[t.Union['WSGIEnvironment','Request']]=None,scope:t.Optional[dict]=None)->'Response'
flask.werkzeug.routing.RoutingException(Exception)
flask.werkzeug.routing.Rule(self,string:str,defaults:t.Optional[t.Mapping[str,t.Any]]=None,subdomain:t.Optional[str]=None,methods:t.Optional[t.Iterable[str]]=None,build_only:bool=False,endpoint:t.Optional[str]=None,strict_slashes:t.Optional[bool]=None,merge_slashes:t.Optional[bool]=None,redirect_to:t.Optional[t.Union[str,t.Callable[...,str]]]=None,alias:bool=False,host:t.Optional[str]=None,websocket:bool=False)
flask.werkzeug.routing.Rule.__eq__(self,other:object)->bool
flask.werkzeug.routing.Rule.__init__(self,string:str,defaults:t.Optional[t.Mapping[str,t.Any]]=None,subdomain:t.Optional[str]=None,methods:t.Optional[t.Iterable[str]]=None,build_only:bool=False,endpoint:t.Optional[str]=None,strict_slashes:t.Optional[bool]=None,merge_slashes:t.Optional[bool]=None,redirect_to:t.Optional[t.Union[str,t.Callable[...,str]]]=None,alias:bool=False,host:t.Optional[str]=None,websocket:bool=False)
flask.werkzeug.routing.Rule.__repr__(self)->str
flask.werkzeug.routing.Rule.__str__(self)->str
flask.werkzeug.routing.Rule._compile_builder(self,append_unknown:bool=True)->t.Callable[..., t.Tuple[str, str]]
flask.werkzeug.routing.Rule._encode_query_vars(self,query_vars:t.Mapping[str,t.Any])->str
flask.werkzeug.routing.Rule._get_func_code(code:CodeType,name:str)->t.Callable[..., t.Tuple[str, str]]
flask.werkzeug.routing.Rule.bind(self,map:'Map',rebind:bool=False)->None
flask.werkzeug.routing.Rule.build(self,values:t.Mapping[str,t.Any],append_unknown:bool=True)->t.Optional[t.Tuple[str, str]]
flask.werkzeug.routing.Rule.build_compare_key(self)->t.Tuple[int, int, int]
flask.werkzeug.routing.Rule.compile(self)->None
flask.werkzeug.routing.Rule.empty(self)->'Rule'
flask.werkzeug.routing.Rule.get_converter(self,variable_name:str,converter_name:str,args:t.Tuple,kwargs:t.Mapping[str,t.Any])->'BaseConverter'
flask.werkzeug.routing.Rule.get_empty_kwargs(self)->t.Mapping[str, t.Any]
flask.werkzeug.routing.Rule.get_rules(self,map:'Map')->t.Iterator['Rule']
flask.werkzeug.routing.Rule.match(self,path:str,method:t.Optional[str]=None)->t.Optional[t.MutableMapping[str, t.Any]]
flask.werkzeug.routing.Rule.match_compare_key(self)->t.Tuple[bool, int, t.Iterable[t.Tuple[int, int]], int, t.Iterable[int]]
flask.werkzeug.routing.Rule.provides_defaults_for(self,rule:'Rule')->bool
flask.werkzeug.routing.Rule.refresh(self)->None
flask.werkzeug.routing.Rule.suitable_for(self,values:t.Mapping[str,t.Any],method:t.Optional[str]=None)->bool
flask.werkzeug.routing.RuleFactory
flask.werkzeug.routing.RuleFactory.get_rules(self,map:'Map')->t.Iterable['Rule']
flask.werkzeug.routing.RuleTemplate(self,rules:t.Iterable['Rule'])
flask.werkzeug.routing.RuleTemplate.__init__(self,rules:t.Iterable['Rule'])
flask.werkzeug.routing.RuleTemplateFactory(self,rules:t.Iterable[RuleFactory],context:t.Dict[str,t.Any])
flask.werkzeug.routing.RuleTemplateFactory.__init__(self,rules:t.Iterable[RuleFactory],context:t.Dict[str,t.Any])
flask.werkzeug.routing.RuleTemplateFactory.get_rules(self,map:'Map')->t.Iterator['Rule']
flask.werkzeug.routing.Subdomain(self,subdomain:str,rules:t.Iterable[RuleFactory])
flask.werkzeug.routing.Subdomain.__init__(self,subdomain:str,rules:t.Iterable[RuleFactory])
flask.werkzeug.routing.Subdomain.get_rules(self,map:'Map')->t.Iterator['Rule']
flask.werkzeug.routing.Submount(self,path:str,rules:t.Iterable[RuleFactory])
flask.werkzeug.routing.Submount.__init__(self,path:str,rules:t.Iterable[RuleFactory])
flask.werkzeug.routing.Submount.get_rules(self,map:'Map')->t.Iterator['Rule']
flask.werkzeug.routing.UUIDConverter(BaseConverter)
flask.werkzeug.routing.UUIDConverter.to_python(self,value:str)->uuid.UUID
flask.werkzeug.routing.UUIDConverter.to_url(self,value:uuid.UUID)->str
flask.werkzeug.routing.UnicodeConverter(self,map:'Map',minlength:int=1,maxlength:t.Optional[int]=None,length:t.Optional[int]=None)
flask.werkzeug.routing.UnicodeConverter.__init__(self,map:'Map',minlength:int=1,maxlength:t.Optional[int]=None,length:t.Optional[int]=None)
flask.werkzeug.routing.ValidationError(ValueError)
flask.werkzeug.routing.WebsocketMismatch(BadRequest)
flask.werkzeug.routing._prefix_names(src:str)->ast.stmt
flask.werkzeug.routing._pythonize(value:str)->t.Union[None, bool, int, float, str]
flask.werkzeug.routing.parse_converter_args(argstr:str)->t.Tuple[t.Tuple, t.Dict[str, t.Any]]
flask.werkzeug.routing.parse_rule(rule:str)->t.Iterator[t.Tuple[t.Optional[str], t.Optional[str], str]]


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/_reloader.py----------------------------------------
A:flask.werkzeug._reloader._ignore_prefixes->tuple(prefix)
A:flask.werkzeug._reloader.name->os.path.dirname(name)
A:flask.werkzeug._reloader.paths->set()
A:flask.werkzeug._reloader.path->os.path.abspath(path)
A:flask.werkzeug._reloader.dirs->set()
A:flask.werkzeug._reloader.node->node.setdefault(chunk, {}).setdefault(chunk, {})
A:flask.werkzeug._reloader.rv->set()
A:flask.werkzeug._reloader.py_script->os.path.abspath(py_script)
A:flask.werkzeug._reloader.py_module->threading.Thread(target=main_func, args=()).cast(str, __main__.__package__)
A:flask.werkzeug._reloader.args->_get_args_for_reloading()
A:flask.werkzeug._reloader.new_environ->os.environ.copy()
A:flask.werkzeug._reloader.exit_code->subprocess.call(args, env=new_environ, close_fds=False)
A:flask.werkzeug._reloader.filename->os.path.abspath(filename)
A:flask.werkzeug._reloader.old_time->self.mtimes.get(name)
A:flask.werkzeug._reloader.reloader_name->watchdog.observers.Observer.__name__.lower()
A:flask.werkzeug._reloader.self.observer->Observer()
A:flask.werkzeug._reloader.self.event_handler->EventHandler(patterns=['*.py', '*.pyc', '*.zip', *extra_patterns], ignore_patterns=['*/__pycache__/*', '*/.git/*', '*/.hg/*', *self.exclude_patterns])
A:flask.werkzeug._reloader.to_delete->set(self.watches)
A:flask.werkzeug._reloader.self.watches[path]->self.observer.schedule(self.event_handler, path, recursive=True)
A:flask.werkzeug._reloader.watch->self.watches.pop(path, None)
A:flask.werkzeug._reloader.attributes->termios.tcgetattr(sys.stdin)
A:flask.werkzeug._reloader.reloader->reloader_loops[reloader_type](extra_files=extra_files, exclude_patterns=exclude_patterns, interval=interval)
A:flask.werkzeug._reloader.t->threading.Thread(target=main_func, args=())
flask.werkzeug._reloader.ReloaderLoop(self,extra_files:t.Optional[t.Iterable[str]]=None,exclude_patterns:t.Optional[t.Iterable[str]]=None,interval:t.Union[int,float]=1)
flask.werkzeug._reloader.ReloaderLoop.__enter__(self)->'ReloaderLoop'
flask.werkzeug._reloader.ReloaderLoop.__exit__(self,exc_type,exc_val,exc_tb)
flask.werkzeug._reloader.ReloaderLoop.__init__(self,extra_files:t.Optional[t.Iterable[str]]=None,exclude_patterns:t.Optional[t.Iterable[str]]=None,interval:t.Union[int,float]=1)
flask.werkzeug._reloader.ReloaderLoop.log_reload(self,filename:str)->None
flask.werkzeug._reloader.ReloaderLoop.restart_with_reloader(self)->int
flask.werkzeug._reloader.ReloaderLoop.run(self)->None
flask.werkzeug._reloader.ReloaderLoop.run_step(self)->None
flask.werkzeug._reloader.ReloaderLoop.trigger_reload(self,filename:str)->None
flask.werkzeug._reloader.StatReloaderLoop(ReloaderLoop)
flask.werkzeug._reloader.StatReloaderLoop.__enter__(self)->ReloaderLoop
flask.werkzeug._reloader.StatReloaderLoop.run_step(self)->None
flask.werkzeug._reloader.WatchdogReloaderLoop(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug._reloader.WatchdogReloaderLoop.__enter__(self)->ReloaderLoop
flask.werkzeug._reloader.WatchdogReloaderLoop.__exit__(self,exc_type,exc_val,exc_tb)
flask.werkzeug._reloader.WatchdogReloaderLoop.__init__(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug._reloader.WatchdogReloaderLoop.run(self)->None
flask.werkzeug._reloader.WatchdogReloaderLoop.run_step(self)->None
flask.werkzeug._reloader.WatchdogReloaderLoop.trigger_reload(self,filename:str)->None
flask.werkzeug._reloader._find_common_roots(paths:t.Iterable[str])->t.Iterable[str]
flask.werkzeug._reloader._find_stat_paths(extra_files:t.Set[str],exclude_patterns:t.Set[str])->t.Iterable[str]
flask.werkzeug._reloader._find_watchdog_paths(extra_files:t.Set[str],exclude_patterns:t.Set[str])->t.Iterable[str]
flask.werkzeug._reloader._get_args_for_reloading()->t.List[str]
flask.werkzeug._reloader._iter_module_paths()->t.Iterator[str]
flask.werkzeug._reloader._remove_by_pattern(paths:t.Set[str],exclude_patterns:t.Set[str])->None
flask.werkzeug._reloader.ensure_echo_on()->None
flask.werkzeug._reloader.run_with_reloader(main_func:t.Callable[[],None],extra_files:t.Optional[t.Iterable[str]]=None,exclude_patterns:t.Optional[t.Iterable[str]]=None,interval:t.Union[int,float]=1,reloader_type:str='auto')->None


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/http.py----------------------------------------
A:flask.werkzeug.http._accept_re->re.compile('\n    (                       # media-range capturing-parenthesis\n      [^\\s;,]+              # type/subtype\n      (?:[ \\t]*;[ \\t]*      # ";"\n        (?:                 # parameter non-capturing-parenthesis\n          [^\\s;,q][^\\s;,]*  # token that doesn\'t start with "q"\n        |                   # or\n          q[^\\s;,=][^\\s;,]* # token that is more than just "q"\n        )\n      )*                    # zero or more parameters\n    )                       # end of media-range\n    (?:[ \\t]*;[ \\t]*q=      # weight is a "q" parameter\n      (\\d*(?:\\.\\d+)?)       # qvalue capturing-parentheses\n      [^,]*                 # "extension" accept params: who cares?\n    )?                      # accept params are optional\n    ', re.VERBOSE)
A:flask.werkzeug.http._token_chars->frozenset("!#$%&'*+-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ^_`abcdefghijklmnopqrstuvwxyz|~")
A:flask.werkzeug.http._etag_re->re.compile('([Ww]/)?(?:"(.*?)"|(.*?))(?:\\s*,\\s*|$)')
A:flask.werkzeug.http._option_header_piece_re->re.compile('\n    ;\\s*,?\\s*  # newlines were replaced with commas\n    (?P<key>\n        "[^"\\\\]*(?:\\\\.[^"\\\\]*)*"  # quoted string\n    |\n        [^\\s;,=*]+  # token\n    )\n    (?:\\*(?P<count>\\d+))?  # *1, optional continuation index\n    \\s*\n    (?:  # optionally followed by =value\n        (?:  # equals sign, possibly with encoding\n            \\*\\s*=\\s*  # * indicates extended notation\n            (?:  # optional encoding\n                (?P<encoding>[^\\s]+?)\n                \'(?P<language>[^\\s]*?)\'\n            )?\n        |\n            =\\s*  # basic notation\n        )\n        (?P<value>\n            "[^"\\\\]*(?:\\\\.[^"\\\\]*)*"  # quoted string\n        |\n            [^;,]+  # token\n        )?\n    )?\n    \\s*\n    ', flags=re.VERBOSE)
A:flask.werkzeug.http._option_header_start_mime_type->re.compile(',\\s*([^;,\\s]+)([;,]\\s*.+)?')
A:flask.werkzeug.http._entity_headers->frozenset(['allow', 'content-encoding', 'content-language', 'content-length', 'content-location', 'content-md5', 'content-range', 'content-type', 'expires', 'last-modified'])
A:flask.werkzeug.http._hop_by_hop_headers->frozenset(['connection', 'keep-alive', 'proxy-authenticate', 'proxy-authorization', 'te', 'trailer', 'transfer-encoding', 'upgrade'])
A:flask.werkzeug.http.value->_to_bytes(value, charset)
A:flask.werkzeug.http.item->item.strip().strip()
A:flask.werkzeug.http.result->cls()
A:flask.werkzeug.http.(name, value)->item.strip().strip().split('=', 1)
A:flask.werkzeug.http.match->re.compile('([Ww]/)?(?:"(.*?)"|(.*?))(?:\\s*,\\s*|$)').match(value, pos)
A:flask.werkzeug.http.rest->re.compile('([Ww]/)?(?:"(.*?)"|(.*?))(?:\\s*,\\s*|$)').match(value, pos).group(2)
A:flask.werkzeug.http.optmatch->re.compile('\n    ;\\s*,?\\s*  # newlines were replaced with commas\n    (?P<key>\n        "[^"\\\\]*(?:\\\\.[^"\\\\]*)*"  # quoted string\n    |\n        [^\\s;,=*]+  # token\n    )\n    (?:\\*(?P<count>\\d+))?  # *1, optional continuation index\n    \\s*\n    (?:  # optionally followed by =value\n        (?:  # equals sign, possibly with encoding\n            \\*\\s*=\\s*  # * indicates extended notation\n            (?:  # optional encoding\n                (?P<encoding>[^\\s]+?)\n                \'(?P<language>[^\\s]*?)\'\n            )?\n        |\n            =\\s*  # basic notation\n        )\n        (?P<value>\n            "[^"\\\\]*(?:\\\\.[^"\\\\]*)*"  # quoted string\n        |\n            [^;,]+  # token\n        )?\n    )?\n    \\s*\n    ', flags=re.VERBOSE).match(rest)
A:flask.werkzeug.http.(option, count, encoding, language, option_value)->re.compile('\n    ;\\s*,?\\s*  # newlines were replaced with commas\n    (?P<key>\n        "[^"\\\\]*(?:\\\\.[^"\\\\]*)*"  # quoted string\n    |\n        [^\\s;,=*]+  # token\n    )\n    (?:\\*(?P<count>\\d+))?  # *1, optional continuation index\n    \\s*\n    (?:  # optionally followed by =value\n        (?:  # equals sign, possibly with encoding\n            \\*\\s*=\\s*  # * indicates extended notation\n            (?:  # optional encoding\n                (?P<encoding>[^\\s]+?)\n                \'(?P<language>[^\\s]*?)\'\n            )?\n        |\n            =\\s*  # basic notation\n        )\n        (?P<value>\n            "[^"\\\\]*(?:\\\\.[^"\\\\]*)*"  # quoted string\n        |\n            [^;,]+  # token\n        )?\n    )?\n    \\s*\n    ', flags=re.VERBOSE).match(rest).groups()
A:flask.werkzeug.http.option->unquote_header_value(option)
A:flask.werkzeug.http.option_value->_unquote(option_value).decode(encoding)
A:flask.werkzeug.http._TAnyAccept->typing.TypeVar('_TAnyAccept', bound='ds.Accept')
A:flask.werkzeug.http.cls->typing.cast(t.Type[_TAnyCSP], ds.ContentSecurityPolicy)
A:flask.werkzeug.http.quality_match->re.compile('([Ww]/)?(?:"(.*?)"|(.*?))(?:\\s*,\\s*|$)').match(value, pos).group(2)
A:flask.werkzeug.http.quality->max(min(float(quality_match), 1), 0)
A:flask.werkzeug.http._TAnyCC->typing.TypeVar('_TAnyCC', bound='ds._CacheControl')
A:flask.werkzeug.http._TAnyCSP->typing.TypeVar('_TAnyCSP', bound='ds.ContentSecurityPolicy')
A:flask.werkzeug.http.policy->policy.strip().strip()
A:flask.werkzeug.http.(directive, value)->policy.strip().strip().strip().split(' ', 1)
A:flask.werkzeug.http.(auth_type, auth_info)->_to_bytes(value, charset).split(None, 1)
A:flask.werkzeug.http.auth_type->auth_type.lower().lower()
A:flask.werkzeug.http.(username, password)->base64.b64decode(auth_info).split(b':', 1)
A:flask.werkzeug.http.auth_map->parse_dict_header(auth_info)
A:flask.werkzeug.http.date->parse_date(value)
A:flask.werkzeug.http.(units, rng)->_to_bytes(value, charset).split('=', 1)
A:flask.werkzeug.http.units->units.strip().lower().strip().lower()
A:flask.werkzeug.http.begin->int(begin_str)
A:flask.werkzeug.http.(begin_str, end_str)->item.strip().strip().split('-', 1)
A:flask.werkzeug.http.begin_str->begin_str.strip().strip()
A:flask.werkzeug.http.end_str->end_str.strip().strip()
A:flask.werkzeug.http.(units, rangedef)->(value or '').strip().split(None, 1)
A:flask.werkzeug.http.(rng, length_str)->rangedef.split('/', 1)
A:flask.werkzeug.http.length->int(length_str)
A:flask.werkzeug.http.(start_str, stop_str)->rng.split('-', 1)
A:flask.werkzeug.http.start->int(start_str)
A:flask.werkzeug.http.etag->typing.cast(str, etag)
A:flask.werkzeug.http.end->len(value)
A:flask.werkzeug.http.(is_weak, quoted, raw)->re.compile('([Ww]/)?(?:"(.*?)"|(.*?))(?:\\s*,\\s*|$)').match(value, pos).groups()
A:flask.werkzeug.http.pos->re.compile('([Ww]/)?(?:"(.*?)"|(.*?))(?:\\s*,\\s*|$)').match(value, pos).end()
A:flask.werkzeug.http.dt->email.utils.parsedate_to_datetime(value)
A:flask.werkzeug.http.timestamp->mktime(timestamp)
A:flask.werkzeug.http.seconds->int(value)
A:flask.werkzeug.http.age->int(age)
A:flask.werkzeug.http.last_modified->_dt_as_utc(last_modified.replace(microsecond=0))
A:flask.werkzeug.http.if_range->parse_if_range_header(environ.get('HTTP_IF_RANGE'))
A:flask.werkzeug.http.modified_since->parse_date(environ.get('HTTP_IF_MODIFIED_SINCE'))
A:flask.werkzeug.http.(etag, _)->unquote_etag(etag)
A:flask.werkzeug.http.unmodified->parse_etags(environ.get('HTTP_IF_NONE_MATCH')).contains_weak(etag)
A:flask.werkzeug.http.if_none_match->parse_etags(environ.get('HTTP_IF_NONE_MATCH'))
A:flask.werkzeug.http.if_match->parse_etags(environ.get('HTTP_IF_MATCH'))
A:flask.werkzeug.http.header->header.encode('latin1', 'replace').encode('latin1', 'replace')
A:flask.werkzeug.http.key_str->_to_str(key, charset, errors, allow_none_charset=True)
A:flask.werkzeug.http.val_str->_to_str(val, charset, errors, allow_none_charset=True)
A:flask.werkzeug.http.key->_to_bytes(key, charset)
A:flask.werkzeug.http.path->iri_to_uri(path, charset)
A:flask.werkzeug.http.domain->_make_cookie_domain(domain)
A:flask.werkzeug.http.max_age->int(max_age.total_seconds())
A:flask.werkzeug.http.expires->http_date(datetime.now(tz=timezone.utc).timestamp() + max_age)
A:flask.werkzeug.http.samesite->samesite.title().title()
A:flask.werkzeug.http.tmp->bytearray(k)
A:flask.werkzeug.http.v->_cookie_quote(v)
A:flask.werkzeug.http.rv->rv.decode('latin1').decode('latin1')
A:flask.werkzeug.http.cookie_size->len(rv)
A:flask.werkzeug.http.value_size->len(value)
flask.werkzeug.http.COEP(Enum)
flask.werkzeug.http.COOP(Enum)
flask.werkzeug.http.cookie_date(expires:t.Optional[t.Union[datetime,date,int,float,struct_time]]=None)->str
flask.werkzeug.http.dump_age(age:t.Optional[t.Union[timedelta,int]]=None)->t.Optional[str]
flask.werkzeug.http.dump_cookie(key:str,value:t.Union[bytes,str]='',max_age:t.Optional[t.Union[timedelta,int]]=None,expires:t.Optional[t.Union[str,datetime,int,float]]=None,path:t.Optional[str]='/',domain:t.Optional[str]=None,secure:bool=False,httponly:bool=False,charset:str='utf-8',sync_expires:bool=True,max_size:int=4093,samesite:t.Optional[str]=None)->str
flask.werkzeug.http.dump_csp_header(header:'ds.ContentSecurityPolicy')->str
flask.werkzeug.http.dump_header(iterable:t.Union[t.Dict[str,t.Union[str,int]],t.Iterable[str]],allow_token:bool=True)->str
flask.werkzeug.http.dump_options_header(header:t.Optional[str],options:t.Mapping[str,t.Optional[t.Union[str,int]]])->str
flask.werkzeug.http.generate_etag(data:bytes)->str
flask.werkzeug.http.http_date(timestamp:t.Optional[t.Union[datetime,date,int,float,struct_time]]=None)->str
flask.werkzeug.http.is_byte_range_valid(start:t.Optional[int],stop:t.Optional[int],length:t.Optional[int])->bool
flask.werkzeug.http.is_entity_header(header:str)->bool
flask.werkzeug.http.is_hop_by_hop_header(header:str)->bool
flask.werkzeug.http.is_resource_modified(environ:'WSGIEnvironment',etag:t.Optional[str]=None,data:t.Optional[bytes]=None,last_modified:t.Optional[t.Union[datetime,str]]=None,ignore_if_range:bool=True)->bool
flask.werkzeug.http.parse_accept_header(value:t.Optional[str],cls:t.Optional[t.Type[_TAnyAccept]]=None)->_TAnyAccept
flask.werkzeug.http.parse_age(value:t.Optional[str]=None)->t.Optional[timedelta]
flask.werkzeug.http.parse_authorization_header(value:t.Optional[str])->t.Optional['ds.Authorization']
flask.werkzeug.http.parse_cache_control_header(value:t.Optional[str],on_update:_t_cc_update=None,cls:t.Optional[t.Type[_TAnyCC]]=None)->_TAnyCC
flask.werkzeug.http.parse_content_range_header(value:t.Optional[str],on_update:t.Optional[t.Callable[['ds.ContentRange'],None]]=None)->t.Optional['ds.ContentRange']
flask.werkzeug.http.parse_cookie(header:t.Union['WSGIEnvironment',str,bytes,None],charset:str='utf-8',errors:str='replace',cls:t.Optional[t.Type['ds.MultiDict']]=None)->'ds.MultiDict[str, str]'
flask.werkzeug.http.parse_csp_header(value:t.Optional[str],on_update:_t_csp_update=None,cls:t.Optional[t.Type[_TAnyCSP]]=None)->_TAnyCSP
flask.werkzeug.http.parse_date(value:t.Optional[str])->t.Optional[datetime]
flask.werkzeug.http.parse_dict_header(value:str,cls:t.Type[dict]=dict)->t.Dict[str, str]
flask.werkzeug.http.parse_etags(value:t.Optional[str])->'ds.ETags'
flask.werkzeug.http.parse_if_range_header(value:t.Optional[str])->'ds.IfRange'
flask.werkzeug.http.parse_list_header(value:str)->t.List[str]
flask.werkzeug.http.parse_options_header(value:t.Optional[str],multiple:bool=False)->t.Union[t.Tuple[str, t.Dict[str, str]], t.Tuple[t.Any, ...]]
flask.werkzeug.http.parse_range_header(value:t.Optional[str],make_inclusive:bool=True)->t.Optional['ds.Range']
flask.werkzeug.http.parse_set_header(value:t.Optional[str],on_update:t.Optional[t.Callable[['ds.HeaderSet'],None]]=None)->'ds.HeaderSet'
flask.werkzeug.http.parse_www_authenticate_header(value:t.Optional[str],on_update:t.Optional[t.Callable[['ds.WWWAuthenticate'],None]]=None)->'ds.WWWAuthenticate'
flask.werkzeug.http.quote_etag(etag:str,weak:bool=False)->str
flask.werkzeug.http.quote_header_value(value:t.Union[str,int],extra_chars:str='',allow_token:bool=True)->str
flask.werkzeug.http.remove_entity_headers(headers:t.Union['ds.Headers',t.List[t.Tuple[str,str]]],allowed:t.Iterable[str]=('expires','content-location'))->None
flask.werkzeug.http.remove_hop_by_hop_headers(headers:t.Union['ds.Headers',t.List[t.Tuple[str,str]]])->None
flask.werkzeug.http.unquote_etag(etag:t.Optional[str])->t.Union[t.Tuple[str, bool], t.Tuple[None, None]]
flask.werkzeug.http.unquote_header_value(value:str,is_filename:bool=False)->str


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/exceptions.py----------------------------------------
A:flask.werkzeug.exceptions.description->escape(description).replace('\n', '<br>')
A:flask.werkzeug.exceptions.environ->_get_environ(environ)
A:flask.werkzeug.exceptions.headers->super().get_headers(environ, scope)
A:flask.werkzeug.exceptions.response->typing.cast('WSGIResponse', self.get_response(environ))
A:flask.werkzeug.exceptions.value->str(self.retry_after)
A:flask.werkzeug.exceptions.is_http_exception->issubclass(obj, HTTPException)
A:flask.werkzeug.exceptions.old_obj->default_exceptions.get(obj.code, None)
A:flask.werkzeug.exceptions.self.mapping->dict(mapping)
flask.abort(status:t.Union[int,'Response'],*args:t.Any,**kwargs:t.Any)->'te.NoReturn'
flask.werkzeug.exceptions.Aborter(self,mapping:t.Optional[t.Dict[int,t.Type[HTTPException]]]=None,extra:t.Optional[t.Dict[int,t.Type[HTTPException]]]=None)
flask.werkzeug.exceptions.Aborter.__init__(self,mapping:t.Optional[t.Dict[int,t.Type[HTTPException]]]=None,extra:t.Optional[t.Dict[int,t.Type[HTTPException]]]=None)
flask.werkzeug.exceptions.BadGateway(HTTPException)
flask.werkzeug.exceptions.BadHost(BadRequest)
flask.werkzeug.exceptions.BadRequest(HTTPException)
flask.werkzeug.exceptions.BadRequestKeyError(self,arg:t.Optional[str]=None,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.exceptions.BadRequestKeyError.__init__(self,arg:t.Optional[str]=None,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.exceptions.BadRequestKeyError.description(self)->str
flask.werkzeug.exceptions.BadRequestKeyError.description(self,value:str)->None
flask.werkzeug.exceptions.ClientDisconnected(BadRequest)
flask.werkzeug.exceptions.Conflict(HTTPException)
flask.werkzeug.exceptions.ExpectationFailed(HTTPException)
flask.werkzeug.exceptions.FailedDependency(HTTPException)
flask.werkzeug.exceptions.Forbidden(HTTPException)
flask.werkzeug.exceptions.GatewayTimeout(HTTPException)
flask.werkzeug.exceptions.Gone(HTTPException)
flask.werkzeug.exceptions.HTTPException(self,description:t.Optional[str]=None,response:t.Optional['Response']=None)
flask.werkzeug.exceptions.HTTPException.__init__(self,description:t.Optional[str]=None,response:t.Optional['Response']=None)
flask.werkzeug.exceptions.HTTPException.__repr__(self)->str
flask.werkzeug.exceptions.HTTPException.__str__(self)->str
flask.werkzeug.exceptions.HTTPException.get_body(self,environ:t.Optional['WSGIEnvironment']=None,scope:t.Optional[dict]=None)->str
flask.werkzeug.exceptions.HTTPException.get_description(self,environ:t.Optional['WSGIEnvironment']=None,scope:t.Optional[dict]=None)->str
flask.werkzeug.exceptions.HTTPException.get_headers(self,environ:t.Optional['WSGIEnvironment']=None,scope:t.Optional[dict]=None)->t.List[t.Tuple[str, str]]
flask.werkzeug.exceptions.HTTPException.get_response(self,environ:t.Optional[t.Union['WSGIEnvironment','WSGIRequest']]=None,scope:t.Optional[dict]=None)->'Response'
flask.werkzeug.exceptions.HTTPException.name(self)->str
flask.werkzeug.exceptions.HTTPException.wrap(cls,exception:t.Type[BaseException],name:t.Optional[str]=None)->t.Type['HTTPException']
flask.werkzeug.exceptions.HTTPVersionNotSupported(HTTPException)
flask.werkzeug.exceptions.ImATeapot(HTTPException)
flask.werkzeug.exceptions.InternalServerError(self,description:t.Optional[str]=None,response:t.Optional['Response']=None,original_exception:t.Optional[BaseException]=None)
flask.werkzeug.exceptions.InternalServerError.__init__(self,description:t.Optional[str]=None,response:t.Optional['Response']=None,original_exception:t.Optional[BaseException]=None)
flask.werkzeug.exceptions.LengthRequired(HTTPException)
flask.werkzeug.exceptions.Locked(HTTPException)
flask.werkzeug.exceptions.MethodNotAllowed(self,valid_methods:t.Optional[t.Iterable[str]]=None,description:t.Optional[str]=None,response:t.Optional['Response']=None)
flask.werkzeug.exceptions.MethodNotAllowed.__init__(self,valid_methods:t.Optional[t.Iterable[str]]=None,description:t.Optional[str]=None,response:t.Optional['Response']=None)
flask.werkzeug.exceptions.MethodNotAllowed.get_headers(self,environ:t.Optional['WSGIEnvironment']=None,scope:t.Optional[dict]=None)->t.List[t.Tuple[str, str]]
flask.werkzeug.exceptions.NotAcceptable(HTTPException)
flask.werkzeug.exceptions.NotFound(HTTPException)
flask.werkzeug.exceptions.NotImplemented(HTTPException)
flask.werkzeug.exceptions.PreconditionFailed(HTTPException)
flask.werkzeug.exceptions.PreconditionRequired(HTTPException)
flask.werkzeug.exceptions.RequestEntityTooLarge(HTTPException)
flask.werkzeug.exceptions.RequestHeaderFieldsTooLarge(HTTPException)
flask.werkzeug.exceptions.RequestTimeout(HTTPException)
flask.werkzeug.exceptions.RequestURITooLarge(HTTPException)
flask.werkzeug.exceptions.RequestedRangeNotSatisfiable(self,length:t.Optional[int]=None,units:str='bytes',description:t.Optional[str]=None,response:t.Optional['Response']=None)
flask.werkzeug.exceptions.RequestedRangeNotSatisfiable.__init__(self,length:t.Optional[int]=None,units:str='bytes',description:t.Optional[str]=None,response:t.Optional['Response']=None)
flask.werkzeug.exceptions.RequestedRangeNotSatisfiable.get_headers(self,environ:t.Optional['WSGIEnvironment']=None,scope:t.Optional[dict]=None)->t.List[t.Tuple[str, str]]
flask.werkzeug.exceptions.SecurityError(BadRequest)
flask.werkzeug.exceptions.ServiceUnavailable(_RetryAfter)
flask.werkzeug.exceptions.TooManyRequests(_RetryAfter)
flask.werkzeug.exceptions.Unauthorized(self,description:t.Optional[str]=None,response:t.Optional['Response']=None,www_authenticate:t.Optional[t.Union['WWWAuthenticate',t.Iterable['WWWAuthenticate']]]=None)
flask.werkzeug.exceptions.Unauthorized.__init__(self,description:t.Optional[str]=None,response:t.Optional['Response']=None,www_authenticate:t.Optional[t.Union['WWWAuthenticate',t.Iterable['WWWAuthenticate']]]=None)
flask.werkzeug.exceptions.Unauthorized.get_headers(self,environ:t.Optional['WSGIEnvironment']=None,scope:t.Optional[dict]=None)->t.List[t.Tuple[str, str]]
flask.werkzeug.exceptions.UnavailableForLegalReasons(HTTPException)
flask.werkzeug.exceptions.UnprocessableEntity(HTTPException)
flask.werkzeug.exceptions.UnsupportedMediaType(HTTPException)
flask.werkzeug.exceptions._RetryAfter(self,description:t.Optional[str]=None,response:t.Optional['Response']=None,retry_after:t.Optional[t.Union[datetime,int]]=None)
flask.werkzeug.exceptions._RetryAfter.__init__(self,description:t.Optional[str]=None,response:t.Optional['Response']=None,retry_after:t.Optional[t.Union[datetime,int]]=None)
flask.werkzeug.exceptions._RetryAfter.get_headers(self,environ:t.Optional['WSGIEnvironment']=None,scope:t.Optional[dict]=None)->t.List[t.Tuple[str, str]]
flask.werkzeug.exceptions._find_exceptions()->None
flask.werkzeug.exceptions.abort(status:t.Union[int,'Response'],*args:t.Any,**kwargs:t.Any)->'te.NoReturn'


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/urls.py----------------------------------------
A:flask.werkzeug.urls._scheme_re->re.compile('^[a-zA-Z0-9+-.]+$')
A:flask.werkzeug.urls._always_safe->frozenset(bytearray(b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~'))
A:flask.werkzeug.urls.rv->url_join(rv, f'./{path}')
A:flask.werkzeug.urls.auth->':'.join(filter(None, [_url_unquote_legacy(self.raw_username or '', '/:%@'), _url_unquote_legacy(self.raw_password or '', '/:%@')]))
A:flask.werkzeug.urls.path->'/'.join([_to_str(url_quote(x, self.charset), 'ascii') for x in path if x is not None]).lstrip('/')
A:flask.werkzeug.urls.parts->'/'.join([_to_str(url_quote(x, self.charset), 'ascii') for x in path if x is not None]).lstrip('/').lstrip('\\').split('\\', 1)
A:flask.werkzeug.urls.(auth, _, netloc)->self.netloc.partition(self._at)
A:flask.werkzeug.urls.(username, _, password)->':'.join(filter(None, [_url_unquote_legacy(self.raw_username or '', '/:%@'), _url_unquote_legacy(self.raw_password or '', '/:%@')])).partition(self._colon)
A:flask.werkzeug.urls.(host, _, port)->url_join(rv, f'./{path}').partition(self._colon)
A:flask.werkzeug.urls.idx->url_join(rv, f'./{path}').find(self._rbracket)
A:flask.werkzeug.urls.string->string.encode(charset, errors).encode(charset, errors)
A:flask.werkzeug.urls.unsafe->unsafe.encode(charset, errors).encode(charset, errors)
A:flask.werkzeug.urls.groups->iter(string.split(b'%'))
A:flask.werkzeug.urls.result->bytearray(next(groups, b''))
A:flask.werkzeug.urls.iterable->sorted(iterable, key=key)
A:flask.werkzeug.urls.key_bytes->str(key_str).encode(charset)
A:flask.werkzeug.urls.value_bytes->str(value_str).encode(charset)
A:flask.werkzeug.urls.s->_make_encode_wrapper(base)
A:flask.werkzeug.urls.is_text_based->isinstance(url, str)
A:flask.werkzeug.urls.scheme->s('')
A:flask.werkzeug.urls.netlocqueryfragment->s('')
A:flask.werkzeug.urls.i->url_unparse(url).find(s(':'))
A:flask.werkzeug.urls.delim->min(delim, wdelim)
A:flask.werkzeug.urls.wdelim->url_unparse(url).find(c, 2)
A:flask.werkzeug.urls.(url, fragment)->url_unparse(url).split(s('#'), 1)
A:flask.werkzeug.urls.(url, query)->url_unparse(url).split(s('?'), 1)
A:flask.werkzeug.urls.safe->safe.encode(charset, errors).encode(charset, errors)
A:flask.werkzeug.urls._fast_url_quote->_make_fast_url_quote()
A:flask.werkzeug.urls._fast_quote_plus->_make_fast_url_quote(safe=' ', unsafe='+')
A:flask.werkzeug.urls.url->url_unparse(url)
A:flask.werkzeug.urls.qs->url_quote_plus(url.query, charset, safe=":&%=+$!*'(),")
A:flask.werkzeug.urls.anchor->url_quote_plus(url.fragment, charset, safe=":&%=+$!*'(),")
A:flask.werkzeug.urls._to_iri_unsafe->''.join([chr(c) for c in range(128) if c not in _always_safe])
A:flask.werkzeug.urls.out->_fast_url_quote(e.object[e.start:e.end])
A:flask.werkzeug.urls.uri->url_parse(_to_str(uri, charset))
A:flask.werkzeug.urls.query->url_quote(iri.query, charset, errors, _to_uri_safe)
A:flask.werkzeug.urls.fragment->url_quote(iri.fragment, charset, errors, _to_uri_safe)
A:flask.werkzeug.urls.iri->url_parse(_to_str(iri, charset, errors))
A:flask.werkzeug.urls.native_iri->_to_str(iri)
A:flask.werkzeug.urls.ascii_iri->_to_str(iri).encode('ascii')
A:flask.werkzeug.urls.separator->_to_str(separator, 'ascii')
A:flask.werkzeug.urls.pair_iter->make_chunk_iter(stream, separator, limit)
A:flask.werkzeug.urls.decoder->_url_decode_impl(pair_iter, charset, include_empty, errors)
A:flask.werkzeug.urls.equal->s('=')
A:flask.werkzeug.urls.(key, value)->pair.split(equal, 1)
A:flask.werkzeug.urls.value->s('')
A:flask.werkzeug.urls.gen->_url_encode_impl(obj, charset, sort, key)
A:flask.werkzeug.urls.base->url_unparse(base)
A:flask.werkzeug.urls.(bscheme, bnetloc, bpath, bquery, bfragment)->url_parse(base, allow_fragments=allow_fragments)
A:flask.werkzeug.urls.(scheme, netloc, path, query, fragment)->url_parse(url, bscheme, allow_fragments)
A:flask.werkzeug.urls.segments->bpath.split(s('/'))
A:flask.werkzeug.urls.segments[-1]->s('')
flask.werkzeug.urls.BaseURL(_URLTuple)
flask.werkzeug.urls.BaseURL.__str__(self)->str
flask.werkzeug.urls.BaseURL._split_auth(self)->t.Tuple[t.Optional[str], t.Optional[str]]
flask.werkzeug.urls.BaseURL._split_host(self)->t.Tuple[t.Optional[str], t.Optional[str]]
flask.werkzeug.urls.BaseURL._split_netloc(self)->t.Tuple[t.Optional[str], str]
flask.werkzeug.urls.BaseURL.ascii_host(self)->t.Optional[str]
flask.werkzeug.urls.BaseURL.auth(self)->t.Optional[str]
flask.werkzeug.urls.BaseURL.decode_netloc(self)->str
flask.werkzeug.urls.BaseURL.decode_query(self,*args:t.Any,**kwargs:t.Any)->'ds.MultiDict[str, str]'
flask.werkzeug.urls.BaseURL.encode_netloc(self)->str
flask.werkzeug.urls.BaseURL.get_file_location(self,pathformat:t.Optional[str]=None)->t.Tuple[t.Optional[str], t.Optional[str]]
flask.werkzeug.urls.BaseURL.host(self)->t.Optional[str]
flask.werkzeug.urls.BaseURL.join(self,*args:t.Any,**kwargs:t.Any)->'BaseURL'
flask.werkzeug.urls.BaseURL.password(self)->t.Optional[str]
flask.werkzeug.urls.BaseURL.port(self)->t.Optional[int]
flask.werkzeug.urls.BaseURL.raw_password(self)->t.Optional[str]
flask.werkzeug.urls.BaseURL.raw_username(self)->t.Optional[str]
flask.werkzeug.urls.BaseURL.replace(self,**kwargs:t.Any)->'BaseURL'
flask.werkzeug.urls.BaseURL.to_iri_tuple(self)->'BaseURL'
flask.werkzeug.urls.BaseURL.to_uri_tuple(self)->'BaseURL'
flask.werkzeug.urls.BaseURL.to_url(self)->str
flask.werkzeug.urls.BaseURL.username(self)->t.Optional[str]
flask.werkzeug.urls.BytesURL(BaseURL)
flask.werkzeug.urls.BytesURL.__str__(self)->str
flask.werkzeug.urls.BytesURL.decode(self,charset:str='utf-8',errors:str='replace')->'URL'
flask.werkzeug.urls.BytesURL.encode_netloc(self)->bytes
flask.werkzeug.urls.Href(self,base='./',charset='utf-8',sort=False,key=None)
flask.werkzeug.urls.Href.__getattr__(self,name)
flask.werkzeug.urls.Href.__init__(self,base='./',charset='utf-8',sort=False,key=None)
flask.werkzeug.urls.URL(BaseURL)
flask.werkzeug.urls.URL.encode(self,charset:str='utf-8',errors:str='replace')->'BytesURL'
flask.werkzeug.urls._URLTuple(t.NamedTuple)
flask.werkzeug.urls._codec_error_url_quote(e:UnicodeError)->t.Tuple[str, int]
flask.werkzeug.urls._fast_url_quote_plus(string:bytes)->str
flask.werkzeug.urls._make_fast_url_quote(charset:str='utf-8',errors:str='strict',safe:t.Union[str,bytes]='/:',unsafe:t.Union[str,bytes]='')->t.Callable[[bytes], str]
flask.werkzeug.urls._unquote_to_bytes(string:t.Union[str,bytes],unsafe:t.Union[str,bytes]='')->bytes
flask.werkzeug.urls._url_decode_impl(pair_iter:t.Iterable[t.AnyStr],charset:str,include_empty:bool,errors:str)->t.Iterator[t.Tuple[str, str]]
flask.werkzeug.urls._url_encode_impl(obj:t.Union[t.Mapping[str,str],t.Iterable[t.Tuple[str,str]]],charset:str,sort:bool,key:t.Optional[t.Callable[[t.Tuple[str,str]],t.Any]])->t.Iterator[str]
flask.werkzeug.urls._url_unquote_legacy(value:str,unsafe:str='')->str
flask.werkzeug.urls.iri_to_uri(iri:t.Union[str,t.Tuple[str,str,str,str,str]],charset:str='utf-8',errors:str='strict',safe_conversion:bool=False)->str
flask.werkzeug.urls.uri_to_iri(uri:t.Union[str,t.Tuple[str,str,str,str,str]],charset:str='utf-8',errors:str='werkzeug.url_quote')->str
flask.werkzeug.urls.url_decode(s:t.AnyStr,charset:str='utf-8',decode_keys:None=None,include_empty:bool=True,errors:str='replace',separator:str='&',cls:t.Optional[t.Type['ds.MultiDict']]=None)->'ds.MultiDict[str, str]'
flask.werkzeug.urls.url_decode_stream(stream:t.IO[bytes],charset:str='utf-8',decode_keys:None=None,include_empty:bool=True,errors:str='replace',separator:bytes=b'&',cls:t.Optional[t.Type['ds.MultiDict']]=None,limit:t.Optional[int]=None,return_iterator:bool=False)->'ds.MultiDict[str, str]'
flask.werkzeug.urls.url_encode(obj:t.Union[t.Mapping[str,str],t.Iterable[t.Tuple[str,str]]],charset:str='utf-8',encode_keys:None=None,sort:bool=False,key:t.Optional[t.Callable[[t.Tuple[str,str]],t.Any]]=None,separator:str='&')->str
flask.werkzeug.urls.url_encode_stream(obj:t.Union[t.Mapping[str,str],t.Iterable[t.Tuple[str,str]]],stream:t.Optional[t.IO[str]]=None,charset:str='utf-8',encode_keys:None=None,sort:bool=False,key:t.Optional[t.Callable[[t.Tuple[str,str]],t.Any]]=None,separator:str='&')->None
flask.werkzeug.urls.url_fix(s:str,charset:str='utf-8')->str
flask.werkzeug.urls.url_join(base:t.Union[str,t.Tuple[str,str,str,str,str]],url:t.Union[str,t.Tuple[str,str,str,str,str]],allow_fragments:bool=True)->str
flask.werkzeug.urls.url_parse(url:str,scheme:t.Optional[str]=None,allow_fragments:bool=True)->BaseURL
flask.werkzeug.urls.url_quote(string:t.Union[str,bytes],charset:str='utf-8',errors:str='strict',safe:t.Union[str,bytes]='/:',unsafe:t.Union[str,bytes]='')->str
flask.werkzeug.urls.url_quote_plus(string:str,charset:str='utf-8',errors:str='strict',safe:str='')->str
flask.werkzeug.urls.url_unparse(components:t.Tuple[str,str,str,str,str])->str
flask.werkzeug.urls.url_unquote(s:t.Union[str,bytes],charset:str='utf-8',errors:str='replace',unsafe:str='')->str
flask.werkzeug.urls.url_unquote_plus(s:t.Union[str,bytes],charset:str='utf-8',errors:str='replace')->str


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/security.py----------------------------------------
A:flask.werkzeug.security.data->data.encode('utf8').encode('utf8')
A:flask.werkzeug.security.salt->salt.encode('utf-8').encode('utf-8')
A:flask.werkzeug.security.a->a.encode('utf-8').encode('utf-8')
A:flask.werkzeug.security.b->b.encode('utf-8').encode('utf-8')
A:flask.werkzeug.security.password->password.encode('utf-8').encode('utf-8')
A:flask.werkzeug.security.args->method[7:].split(':')
A:flask.werkzeug.security.method->method[7:].split(':').pop(0)
A:flask.werkzeug.security.(h, actual_method)->_hash_internal(method, salt, password)
A:flask.werkzeug.security.(method, salt, hashval)->pwhash.split('$', 2)
A:flask.werkzeug.security.filename->posixpath.normpath(filename)
flask.werkzeug.security._hash_internal(method:str,salt:str,password:str)->t.Tuple[str, str]
flask.werkzeug.security.check_password_hash(pwhash:str,password:str)->bool
flask.werkzeug.security.gen_salt(length:int)->str
flask.werkzeug.security.generate_password_hash(password:str,method:str='pbkdf2:sha256',salt_length:int=16)->str
flask.werkzeug.security.pbkdf2_bin(data:t.Union[str,bytes],salt:t.Union[str,bytes],iterations:int=DEFAULT_PBKDF2_ITERATIONS,keylen:t.Optional[int]=None,hashfunc:t.Optional[t.Union[str,t.Callable]]=None)->bytes
flask.werkzeug.security.pbkdf2_hex(data:t.Union[str,bytes],salt:t.Union[str,bytes],iterations:int=DEFAULT_PBKDF2_ITERATIONS,keylen:t.Optional[int]=None,hashfunc:t.Optional[t.Union[str,t.Callable]]=None)->str
flask.werkzeug.security.safe_join(directory:str,*pathnames:str)->t.Optional[str]
flask.werkzeug.security.safe_str_cmp(a:str,b:str)->bool


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/sansio/multipart.py----------------------------------------
A:flask.werkzeug.sansio.multipart.NEED_DATA->NeedData()
A:flask.werkzeug.sansio.multipart.PREAMBLE->auto()
A:flask.werkzeug.sansio.multipart.PART->auto()
A:flask.werkzeug.sansio.multipart.DATA->auto()
A:flask.werkzeug.sansio.multipart.EPILOGUE->auto()
A:flask.werkzeug.sansio.multipart.COMPLETE->auto()
A:flask.werkzeug.sansio.multipart.BLANK_LINE_RE->re.compile(b'(?:\r\n\r\n|\r\r|\n\n)', re.MULTILINE)
A:flask.werkzeug.sansio.multipart.LINE_BREAK_RE->re.compile(LINE_BREAK, re.MULTILINE)
A:flask.werkzeug.sansio.multipart.HEADER_CONTINUATION_RE->re.compile(b'%s[ \t]' % LINE_BREAK, re.MULTILINE)
A:flask.werkzeug.sansio.multipart.self.buffer->bytearray()
A:flask.werkzeug.sansio.multipart.self.preamble_re->re.compile(b'%s?--%s(--[^\\S\\n\\r]*%s?|[^\\S\\n\\r]*%s)' % (LINE_BREAK, re.escape(boundary), LINE_BREAK, LINE_BREAK), re.MULTILINE)
A:flask.werkzeug.sansio.multipart.self.boundary_re->re.compile(b'%s--%s(--[^\\S\\n\\r]*%s?|[^\\S\\n\\r]*%s)' % (LINE_BREAK, re.escape(boundary), LINE_BREAK, LINE_BREAK), re.MULTILINE)
A:flask.werkzeug.sansio.multipart.last_nl->len(self.buffer)
A:flask.werkzeug.sansio.multipart.last_cr->len(self.buffer)
A:flask.werkzeug.sansio.multipart.match->self.boundary_re.search(self.buffer)
A:flask.werkzeug.sansio.multipart.data->re.compile(b'%s[ \t]' % LINE_BREAK, re.MULTILINE).sub(b' ', data)
A:flask.werkzeug.sansio.multipart.event->Epilogue(data=bytes(self.buffer))
A:flask.werkzeug.sansio.multipart.headers->self._parse_headers(self.buffer[:match.start()])
A:flask.werkzeug.sansio.multipart.(disposition, extra)->parse_options_header(headers['content-disposition'])
A:flask.werkzeug.sansio.multipart.name->cast(str, extra.get('name'))
A:flask.werkzeug.sansio.multipart.filename->extra.get('filename')
A:flask.werkzeug.sansio.multipart.data_lengthdel_index->self.last_newline()
A:flask.werkzeug.sansio.multipart.data_length->self.boundary_re.search(self.buffer).start()
A:flask.werkzeug.sansio.multipart.del_index->self.boundary_re.search(self.buffer).end()
A:flask.werkzeug.sansio.multipart.(name, value)->_to_str(line).strip().split(':', 1)
flask.werkzeug.sansio.multipart.Data(Event)
flask.werkzeug.sansio.multipart.Epilogue(Event)
flask.werkzeug.sansio.multipart.Event
flask.werkzeug.sansio.multipart.Field(Event)
flask.werkzeug.sansio.multipart.File(Event)
flask.werkzeug.sansio.multipart.MultipartDecoder(self,boundary:bytes,max_form_memory_size:Optional[int]=None)
flask.werkzeug.sansio.multipart.MultipartDecoder.__init__(self,boundary:bytes,max_form_memory_size:Optional[int]=None)
flask.werkzeug.sansio.multipart.MultipartDecoder._parse_headers(self,data:bytes)->Headers
flask.werkzeug.sansio.multipart.MultipartDecoder.last_newline(self)->int
flask.werkzeug.sansio.multipart.MultipartDecoder.next_event(self)->Event
flask.werkzeug.sansio.multipart.MultipartDecoder.receive_data(self,data:Optional[bytes])->None
flask.werkzeug.sansio.multipart.MultipartEncoder(self,boundary:bytes)
flask.werkzeug.sansio.multipart.MultipartEncoder.__init__(self,boundary:bytes)
flask.werkzeug.sansio.multipart.MultipartEncoder.send_event(self,event:Event)->bytes
flask.werkzeug.sansio.multipart.NeedData(Event)
flask.werkzeug.sansio.multipart.Preamble(Event)
flask.werkzeug.sansio.multipart.State(Enum)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/sansio/utils.py----------------------------------------
A:flask.werkzeug.sansio.utils.hostname_bytes->_normalize(hostname)
A:flask.werkzeug.sansio.utils.ref_bytes->_normalize(ref)
flask.werkzeug.sansio.utils.get_current_url(scheme:str,host:str,root_path:t.Optional[str]=None,path:t.Optional[str]=None,query_string:t.Optional[bytes]=None)->str
flask.werkzeug.sansio.utils.get_host(scheme:str,host_header:t.Optional[str],server:t.Optional[t.Tuple[str,t.Optional[int]]]=None,trusted_hosts:t.Optional[t.Iterable[str]]=None)->str
flask.werkzeug.sansio.utils.host_is_trusted(hostname:str,trusted_list:t.Iterable[str])->bool


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/sansio/request.py----------------------------------------
A:flask.werkzeug.sansio.request.self.method->method.upper()
A:flask.werkzeug.sansio.request.self.root_path->root_path.rstrip('/')
A:flask.werkzeug.sansio.request.wsgi_combined_cookie->';'.join(self.headers.getlist('Cookie'))
A:flask.werkzeug.sansio.request.content_type->header_property[str]('Content-Type', doc='The Content-Type entity-header field indicates the media\n        type of the entity-body sent to the recipient or, in the case of\n        the HEAD method, the media type that would have been sent had\n        the request been a GET.', read_only=True)
A:flask.werkzeug.sansio.request.content_length->self.headers.get('Content-Length')
A:flask.werkzeug.sansio.request.content_encoding->header_property[str]('Content-Encoding', doc='The Content-Encoding entity-header field is used as a\n        modifier to the media-type. When present, its value indicates\n        what additional content codings have been applied to the\n        entity-body, and thus what decoding mechanisms must be applied\n        in order to obtain the media-type referenced by the Content-Type\n        header field.\n\n        .. versionadded:: 0.9', read_only=True)
A:flask.werkzeug.sansio.request.content_md5->header_property[str]('Content-MD5', doc='The Content-MD5 entity-header field, as defined in\n        RFC 1864, is an MD5 digest of the entity-body for the purpose of\n        providing an end-to-end message integrity check (MIC) of the\n        entity-body. (Note: a MIC is good for detecting accidental\n        modification of the entity-body in transit, but is not proof\n        against malicious attacks.)\n\n        .. versionadded:: 0.9', read_only=True)
A:flask.werkzeug.sansio.request.referrer->header_property[str]('Referer', doc='The Referer[sic] request-header field allows the client\n        to specify, for the server\'s benefit, the address (URI) of the\n        resource from which the Request-URI was obtained (the\n        "referrer", although the header field is misspelled).', read_only=True)
A:flask.werkzeug.sansio.request.date->header_property('Date', None, parse_date, doc='The Date general-header field represents the date and\n        time at which the message was originated, having the same\n        semantics as orig-date in RFC 822.\n\n        .. versionchanged:: 2.0\n            The datetime object is timezone-aware.\n        ', read_only=True)
A:flask.werkzeug.sansio.request.max_forwards->header_property('Max-Forwards', None, int, doc='The Max-Forwards request-header field provides a\n        mechanism with the TRACE and OPTIONS methods to limit the number\n        of proxies or gateways that can forward the request to the next\n        inbound server.', read_only=True)
A:flask.werkzeug.sansio.request.self._parsed_content_type->parse_options_header(self.headers.get('Content-Type', ''))
A:flask.werkzeug.sansio.request.cache_control->self.headers.get('Cache-Control')
A:flask.werkzeug.sansio.request.origin->header_property[str]('Origin', doc='The host that the request originated from. Set :attr:`~CORSResponseMixin.access_control_allow_origin` on the response to indicate which origins are allowed.', read_only=True)
A:flask.werkzeug.sansio.request.access_control_request_headers->header_property('Access-Control-Request-Headers', load_func=parse_set_header, doc='Sent with a preflight request to indicate which headers will be sent with the cross origin request. Set :attr:`~CORSResponseMixin.access_control_allow_headers` on the response to indicate which headers are allowed.', read_only=True)
A:flask.werkzeug.sansio.request.access_control_request_method->header_property[str]('Access-Control-Request-Method', doc='Sent with a preflight request to indicate which method will be used for the cross origin request. Set :attr:`~CORSResponseMixin.access_control_allow_methods` on the response to indicate which methods are allowed.', read_only=True)
flask.werkzeug.sansio.request.Request(self,method:str,scheme:str,server:t.Optional[t.Tuple[str,t.Optional[int]]],root_path:str,path:str,query_string:bytes,headers:Headers,remote_addr:t.Optional[str])
flask.werkzeug.sansio.request.Request.__init__(self,method:str,scheme:str,server:t.Optional[t.Tuple[str,t.Optional[int]]],root_path:str,path:str,query_string:bytes,headers:Headers,remote_addr:t.Optional[str])
flask.werkzeug.sansio.request.Request.__repr__(self)->str
flask.werkzeug.sansio.request.Request._parse_content_type(self)->None
flask.werkzeug.sansio.request.Request.accept_charsets(self)->CharsetAccept
flask.werkzeug.sansio.request.Request.accept_encodings(self)->Accept
flask.werkzeug.sansio.request.Request.accept_languages(self)->LanguageAccept
flask.werkzeug.sansio.request.Request.accept_mimetypes(self)->MIMEAccept
flask.werkzeug.sansio.request.Request.access_route(self)->t.List[str]
flask.werkzeug.sansio.request.Request.args(self)->'MultiDict[str, str]'
flask.werkzeug.sansio.request.Request.authorization(self)->t.Optional[Authorization]
flask.werkzeug.sansio.request.Request.base_url(self)->str
flask.werkzeug.sansio.request.Request.cache_control(self)->RequestCacheControl
flask.werkzeug.sansio.request.Request.content_length(self)->t.Optional[int]
flask.werkzeug.sansio.request.Request.cookies(self)->'ImmutableMultiDict[str, str]'
flask.werkzeug.sansio.request.Request.full_path(self)->str
flask.werkzeug.sansio.request.Request.host(self)->str
flask.werkzeug.sansio.request.Request.host_url(self)->str
flask.werkzeug.sansio.request.Request.if_match(self)->ETags
flask.werkzeug.sansio.request.Request.if_modified_since(self)->t.Optional[datetime]
flask.werkzeug.sansio.request.Request.if_none_match(self)->ETags
flask.werkzeug.sansio.request.Request.if_range(self)->IfRange
flask.werkzeug.sansio.request.Request.if_unmodified_since(self)->t.Optional[datetime]
flask.werkzeug.sansio.request.Request.is_json(self)->bool
flask.werkzeug.sansio.request.Request.is_secure(self)->bool
flask.werkzeug.sansio.request.Request.mimetype(self)->str
flask.werkzeug.sansio.request.Request.mimetype_params(self)->t.Dict[str, str]
flask.werkzeug.sansio.request.Request.pragma(self)->HeaderSet
flask.werkzeug.sansio.request.Request.range(self)->t.Optional[Range]
flask.werkzeug.sansio.request.Request.root_url(self)->str
flask.werkzeug.sansio.request.Request.url(self)->str
flask.werkzeug.sansio.request.Request.url_charset(self)->str
flask.werkzeug.sansio.request.Request.user_agent(self)->UserAgent


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/sansio/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/sansio/response.py----------------------------------------
A:flask.werkzeug.sansio.response.self.headers[name]->dump_header(value)
A:flask.werkzeug.sansio.response.self.headers->Headers(headers)
A:flask.werkzeug.sansio.response.mimetype->get_content_type(mimetype, self.charset)
A:flask.werkzeug.sansio.response.(self._status, self._status_code)->self._clean_status(value)
A:flask.werkzeug.sansio.response.value->str(value)
A:flask.werkzeug.sansio.response.status->_to_str(value, self.charset)
A:flask.werkzeug.sansio.response.split_status->_to_str(value, self.charset).split(None, 1)
A:flask.werkzeug.sansio.response.status_code->int(split_status[0])
A:flask.werkzeug.sansio.response.ct->self.headers.get('content-type')
A:flask.werkzeug.sansio.response.self.headers['Content-Type']->dump_options_header(self.mimetype, d)
A:flask.werkzeug.sansio.response.location->header_property[str]('Location', doc='The Location response-header field is used to redirect\n        the recipient to a location other than the Request-URI for\n        completion of the request or identification of a new\n        resource.')
A:flask.werkzeug.sansio.response.age->header_property('Age', None, parse_age, dump_age, doc="The Age response-header field conveys the sender's\n        estimate of the amount of time since the response (or its\n        revalidation) was generated at the origin server.\n\n        Age values are non-negative decimal integers, representing time\n        in seconds.")
A:flask.werkzeug.sansio.response.content_type->header_property[str]('Content-Type', doc='The Content-Type entity-header field indicates the media\n        type of the entity-body sent to the recipient or, in the case of\n        the HEAD method, the media type that would have been sent had\n        the request been a GET.')
A:flask.werkzeug.sansio.response.content_length->header_property('Content-Length', None, int, str, doc='The Content-Length entity-header field indicates the size\n        of the entity-body, in decimal number of OCTETs, sent to the\n        recipient or, in the case of the HEAD method, the size of the\n        entity-body that would have been sent had the request been a\n        GET.')
A:flask.werkzeug.sansio.response.content_location->header_property[str]('Content-Location', doc="The Content-Location entity-header field MAY be used to\n        supply the resource location for the entity enclosed in the\n        message when that entity is accessible from a location separate\n        from the requested resource's URI.")
A:flask.werkzeug.sansio.response.content_encoding->header_property[str]('Content-Encoding', doc='The Content-Encoding entity-header field is used as a\n        modifier to the media-type. When present, its value indicates\n        what additional content codings have been applied to the\n        entity-body, and thus what decoding mechanisms must be applied\n        in order to obtain the media-type referenced by the Content-Type\n        header field.')
A:flask.werkzeug.sansio.response.content_md5->header_property[str]('Content-MD5', doc='The Content-MD5 entity-header field, as defined in\n        RFC 1864, is an MD5 digest of the entity-body for the purpose of\n        providing an end-to-end message integrity check (MIC) of the\n        entity-body. (Note: a MIC is good for detecting accidental\n        modification of the entity-body in transit, but is not proof\n        against malicious attacks.)')
A:flask.werkzeug.sansio.response.date->header_property('Date', None, parse_date, http_date, doc='The Date general-header field represents the date and\n        time at which the message was originated, having the same\n        semantics as orig-date in RFC 822.\n\n        .. versionchanged:: 2.0\n            The datetime object is timezone-aware.\n        ')
A:flask.werkzeug.sansio.response.expires->header_property('Expires', None, parse_date, http_date, doc='The Expires entity-header field gives the date/time after\n        which the response is considered stale. A stale cache entry may\n        not normally be returned by a cache.\n\n        .. versionchanged:: 2.0\n            The datetime object is timezone-aware.\n        ')
A:flask.werkzeug.sansio.response.last_modified->header_property('Last-Modified', None, parse_date, http_date, doc='The Last-Modified entity-header field indicates the date\n        and time at which the origin server believes the variant was\n        last modified.\n\n        .. versionchanged:: 2.0\n            The datetime object is timezone-aware.\n        ')
A:flask.werkzeug.sansio.response.vary->_set_property('Vary', doc='The Vary field value indicates the set of request-header\n        fields that fully determines, while the response is fresh,\n        whether a cache is permitted to use the response to reply to a\n        subsequent request without revalidation.')
A:flask.werkzeug.sansio.response.content_language->_set_property('Content-Language', doc='The Content-Language entity-header field describes the\n        natural language(s) of the intended audience for the enclosed\n        entity. Note that this might not be equivalent to all the\n        languages used within the entity-body.')
A:flask.werkzeug.sansio.response.allow->_set_property('Allow', doc='The Allow entity-header field lists the set of methods\n        supported by the resource identified by the Request-URI. The\n        purpose of this field is strictly to inform the recipient of\n        valid methods associated with the resource. An Allow header\n        field MUST be present in a 405 (Method Not Allowed)\n        response.')
A:flask.werkzeug.sansio.response.self.headers['Cache-Control']->cache_control.to_header()
A:flask.werkzeug.sansio.response.self.headers['ETag']->quote_etag(etag, weak)
A:flask.werkzeug.sansio.response.accept_ranges->header_property[str]('Accept-Ranges', doc="The `Accept-Ranges` header. Even though the name would\n        indicate that multiple values are supported, it must be one\n        string token only.\n\n        The values ``'bytes'`` and ``'none'`` are common.\n\n        .. versionadded:: 0.7")
A:flask.werkzeug.sansio.response.self.headers['Content-Range']->str(value).to_header()
A:flask.werkzeug.sansio.response.rv->ContentSecurityPolicy(None, on_update=on_update)
A:flask.werkzeug.sansio.response.self.headers['WWW-Authenticate']->www_auth.to_header()
A:flask.werkzeug.sansio.response.header->self.headers.get('www-authenticate')
A:flask.werkzeug.sansio.response.self.headers['Content-Security-Policy']->str(value).to_header()
A:flask.werkzeug.sansio.response.self.headers['Content-Security-policy-report-only']->str(value).to_header()
A:flask.werkzeug.sansio.response.access_control_allow_headers->header_property('Access-Control-Allow-Headers', load_func=parse_set_header, dump_func=dump_header, doc='Which headers can be sent with the cross origin request.')
A:flask.werkzeug.sansio.response.access_control_allow_methods->header_property('Access-Control-Allow-Methods', load_func=parse_set_header, dump_func=dump_header, doc='Which methods can be used for the cross origin request.')
A:flask.werkzeug.sansio.response.access_control_allow_origin->header_property[str]('Access-Control-Allow-Origin', doc="The origin or '*' for any origin that may make cross origin requests.")
A:flask.werkzeug.sansio.response.access_control_expose_headers->header_property('Access-Control-Expose-Headers', load_func=parse_set_header, dump_func=dump_header, doc='Which headers can be shared by the browser to JavaScript code.')
A:flask.werkzeug.sansio.response.access_control_max_age->header_property('Access-Control-Max-Age', load_func=int, dump_func=str, doc='The maximum age in seconds the access control settings can be cached for.')
A:flask.werkzeug.sansio.response.cross_origin_opener_policy->header_property[COOP]('Cross-Origin-Opener-Policy', load_func=lambda value: COOP(value), dump_func=lambda value: value.value, default=COOP.UNSAFE_NONE, doc='Allows control over sharing of browsing context group with cross-origin\n        documents. Values must be a member of the :class:`werkzeug.http.COOP` enum.')
A:flask.werkzeug.sansio.response.cross_origin_embedder_policy->header_property[COEP]('Cross-Origin-Embedder-Policy', load_func=lambda value: COEP(value), dump_func=lambda value: value.value, default=COEP.UNSAFE_NONE, doc='Prevents a document from loading any cross-origin resources that do not\n        explicitly grant the document permission. Values must be a member of the\n        :class:`werkzeug.http.COEP` enum.')
flask.werkzeug.sansio.response.Response(self,status:t.Optional[t.Union[int,str,HTTPStatus]]=None,headers:t.Optional[t.Union[t.Mapping[str,t.Union[str,int,t.Iterable[t.Union[str,int]]]],t.Iterable[t.Tuple[str,t.Union[str,int]]]]]=None,mimetype:t.Optional[str]=None,content_type:t.Optional[str]=None)
flask.werkzeug.sansio.response.Response.__init__(self,status:t.Optional[t.Union[int,str,HTTPStatus]]=None,headers:t.Optional[t.Union[t.Mapping[str,t.Union[str,int,t.Iterable[t.Union[str,int]]]],t.Iterable[t.Tuple[str,t.Union[str,int]]]]]=None,mimetype:t.Optional[str]=None,content_type:t.Optional[str]=None)
flask.werkzeug.sansio.response.Response.__repr__(self)->str
flask.werkzeug.sansio.response.Response._clean_status(self,value:t.Union[str,int,HTTPStatus])->t.Tuple[str, int]
flask.werkzeug.sansio.response.Response.access_control_allow_credentials(self)->bool
flask.werkzeug.sansio.response.Response.access_control_allow_credentials(self,value:t.Optional[bool])->None
flask.werkzeug.sansio.response.Response.cache_control(self)->ResponseCacheControl
flask.werkzeug.sansio.response.Response.content_range(self)->ContentRange
flask.werkzeug.sansio.response.Response.content_range(self,value:t.Optional[t.Union[ContentRange,str]])->None
flask.werkzeug.sansio.response.Response.content_security_policy(self)->ContentSecurityPolicy
flask.werkzeug.sansio.response.Response.content_security_policy(self,value:t.Optional[t.Union[ContentSecurityPolicy,str]])->None
flask.werkzeug.sansio.response.Response.content_security_policy_report_only(self)->ContentSecurityPolicy
flask.werkzeug.sansio.response.Response.content_security_policy_report_only(self,value:t.Optional[t.Union[ContentSecurityPolicy,str]])->None
flask.werkzeug.sansio.response.Response.delete_cookie(self,key:str,path:str='/',domain:t.Optional[str]=None,secure:bool=False,httponly:bool=False,samesite:t.Optional[str]=None)->None
flask.werkzeug.sansio.response.Response.get_etag(self)->t.Union[t.Tuple[str, bool], t.Tuple[None, None]]
flask.werkzeug.sansio.response.Response.is_json(self)->bool
flask.werkzeug.sansio.response.Response.mimetype(self)->t.Optional[str]
flask.werkzeug.sansio.response.Response.mimetype(self,value:str)->None
flask.werkzeug.sansio.response.Response.mimetype_params(self)->t.Dict[str, str]
flask.werkzeug.sansio.response.Response.retry_after(self)->t.Optional[datetime]
flask.werkzeug.sansio.response.Response.retry_after(self,value:t.Optional[t.Union[datetime,int,str]])->None
flask.werkzeug.sansio.response.Response.set_cookie(self,key:str,value:str='',max_age:t.Optional[t.Union[timedelta,int]]=None,expires:t.Optional[t.Union[str,datetime,int,float]]=None,path:t.Optional[str]='/',domain:t.Optional[str]=None,secure:bool=False,httponly:bool=False,samesite:t.Optional[str]=None)->None
flask.werkzeug.sansio.response.Response.set_etag(self,etag:str,weak:bool=False)->None
flask.werkzeug.sansio.response.Response.status(self)->str
flask.werkzeug.sansio.response.Response.status(self,value:t.Union[str,int,HTTPStatus])->None
flask.werkzeug.sansio.response.Response.status_code(self)->int
flask.werkzeug.sansio.response.Response.status_code(self,code:int)->None
flask.werkzeug.sansio.response.Response.www_authenticate(self)->WWWAuthenticate
flask.werkzeug.sansio.response._set_property(name:str,doc:t.Optional[str]=None)->property


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/middleware/lint.py----------------------------------------
A:flask.werkzeug.middleware.lint.rv->self._next()
A:flask.werkzeug.middleware.lint.bytes_sent->sum(self.chunks)
A:flask.werkzeug.middleware.lint.content_length->Headers(headers).get('content-length', type=int)
A:flask.werkzeug.middleware.lint.key->key.lower().lower()
A:flask.werkzeug.middleware.lint.script_name->environ.get('SCRIPT_NAME', '')
A:flask.werkzeug.middleware.lint.path_info->environ.get('PATH_INFO', '')
A:flask.werkzeug.middleware.lint.status_code->int(status_code_str)
A:flask.werkzeug.middleware.lint.headers->Headers(headers)
A:flask.werkzeug.middleware.lint.etag->Headers(headers).get('etag')
A:flask.werkzeug.middleware.lint.location->Headers(headers).get('location')
A:flask.werkzeug.middleware.lint.environ['wsgi.input']->InputStream(environ['wsgi.input'])
A:flask.werkzeug.middleware.lint.environ['wsgi.errors']->ErrorStream(environ['wsgi.errors'])
A:flask.werkzeug.middleware.lint.headers_set[:]->self.check_start_response(status, headers, exc_info)
A:flask.werkzeug.middleware.lint.app_iter->self.app(environ, t.cast('StartResponse', checking_start_response))
flask.werkzeug.middleware.lint.ErrorStream(self,stream:t.IO[str])
flask.werkzeug.middleware.lint.ErrorStream.__init__(self,stream:t.IO[str])
flask.werkzeug.middleware.lint.ErrorStream.close(self)->None
flask.werkzeug.middleware.lint.ErrorStream.flush(self)->None
flask.werkzeug.middleware.lint.ErrorStream.write(self,s:str)->None
flask.werkzeug.middleware.lint.ErrorStream.writelines(self,seq:t.Iterable[str])->None
flask.werkzeug.middleware.lint.GuardedIterator(self,iterator:t.Iterable[bytes],headers_set:t.Tuple[int,Headers],chunks:t.List[int])
flask.werkzeug.middleware.lint.GuardedIterator.__del__(self)->None
flask.werkzeug.middleware.lint.GuardedIterator.__init__(self,iterator:t.Iterable[bytes],headers_set:t.Tuple[int,Headers],chunks:t.List[int])
flask.werkzeug.middleware.lint.GuardedIterator.__iter__(self)->'GuardedIterator'
flask.werkzeug.middleware.lint.GuardedIterator.__next__(self)->bytes
flask.werkzeug.middleware.lint.GuardedIterator.close(self)->None
flask.werkzeug.middleware.lint.GuardedWrite(self,write:t.Callable[[bytes],None],chunks:t.List[int])
flask.werkzeug.middleware.lint.GuardedWrite.__init__(self,write:t.Callable[[bytes],None],chunks:t.List[int])
flask.werkzeug.middleware.lint.HTTPWarning(Warning)
flask.werkzeug.middleware.lint.InputStream(self,stream:t.IO[bytes])
flask.werkzeug.middleware.lint.InputStream.__init__(self,stream:t.IO[bytes])
flask.werkzeug.middleware.lint.InputStream.__iter__(self)->t.Iterator[bytes]
flask.werkzeug.middleware.lint.InputStream.close(self)->None
flask.werkzeug.middleware.lint.InputStream.read(self,*args:t.Any)->bytes
flask.werkzeug.middleware.lint.InputStream.readline(self,*args:t.Any)->bytes
flask.werkzeug.middleware.lint.LintMiddleware(self,app:'WSGIApplication')
flask.werkzeug.middleware.lint.LintMiddleware.__init__(self,app:'WSGIApplication')
flask.werkzeug.middleware.lint.LintMiddleware.check_environ(self,environ:'WSGIEnvironment')->None
flask.werkzeug.middleware.lint.LintMiddleware.check_headers(self,headers:Headers)->None
flask.werkzeug.middleware.lint.LintMiddleware.check_iterator(self,app_iter:t.Iterable[bytes])->None
flask.werkzeug.middleware.lint.LintMiddleware.check_start_response(self,status:str,headers:t.List[t.Tuple[str,str]],exc_info:t.Optional[t.Tuple[t.Type[BaseException],BaseException,TracebackType]])->t.Tuple[int, Headers]
flask.werkzeug.middleware.lint.WSGIWarning(Warning)
flask.werkzeug.middleware.lint.check_type(context:str,obj:object,need:t.Type=str)->None


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/middleware/http_proxy.py----------------------------------------
A:flask.werkzeug.middleware.http_proxy.target->url_parse(opts['target'])
A:flask.werkzeug.middleware.http_proxy.host->typing.cast(str, target.ascii_host)
A:flask.werkzeug.middleware.http_proxy.headers->list(EnvironHeaders(environ).items())
A:flask.werkzeug.middleware.http_proxy.remote_path->remote_path[len(prefix):].lstrip('/')
A:flask.werkzeug.middleware.http_proxy.content_length->environ.get('CONTENT_LENGTH')
A:flask.werkzeug.middleware.http_proxy.con->http.client.HTTPSConnection(host, target.port or 443, timeout=self.timeout, context=opts['ssl_context'])
A:flask.werkzeug.middleware.http_proxy.remote_url->url_quote(remote_path)
A:flask.werkzeug.middleware.http_proxy.stream->get_input_stream(environ)
A:flask.werkzeug.middleware.http_proxy.data->con.getresponse().read(self.chunk_size)
A:flask.werkzeug.middleware.http_proxy.resp->http.client.HTTPSConnection(host, target.port or 443, timeout=self.timeout, context=opts['ssl_context']).getresponse()
A:flask.werkzeug.middleware.http_proxy.app->self.proxy_to(opts, path, prefix)
flask.werkzeug.middleware.http_proxy.ProxyMiddleware(self,app:'WSGIApplication',targets:t.Mapping[str,t.Dict[str,t.Any]],chunk_size:int=2<<13,timeout:int=10)
flask.werkzeug.middleware.http_proxy.ProxyMiddleware.__init__(self,app:'WSGIApplication',targets:t.Mapping[str,t.Dict[str,t.Any]],chunk_size:int=2<<13,timeout:int=10)
flask.werkzeug.middleware.http_proxy.ProxyMiddleware.proxy_to(self,opts:t.Dict[str,t.Any],path:str,prefix:str)->'WSGIApplication'


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/middleware/profiler.py----------------------------------------
A:flask.werkzeug.middleware.profiler.app_iter->self._app(environ, t.cast('StartResponse', catching_start_response))
A:flask.werkzeug.middleware.profiler.profile->Profile()
A:flask.werkzeug.middleware.profiler.start->time.time()
A:flask.werkzeug.middleware.profiler.body->b''.join(response_body)
A:flask.werkzeug.middleware.profiler.filename->os.path.join(self._profile_dir, filename)
A:flask.werkzeug.middleware.profiler.stats->Stats(profile, stream=self._stream)
A:flask.werkzeug.middleware.profiler.path_info->environ.get('PATH_INFO', '')
flask.werkzeug.middleware.profiler.ProfilerMiddleware(self,app:'WSGIApplication',stream:t.IO[str]=sys.stdout,sort_by:t.Iterable[str]=('time','calls'),restrictions:t.Iterable[t.Union[str,int,float]]=(),profile_dir:t.Optional[str]=None,filename_format:str='{method}.{path}.{elapsed:.0f}ms.{time:.0f}.prof')
flask.werkzeug.middleware.profiler.ProfilerMiddleware.__init__(self,app:'WSGIApplication',stream:t.IO[str]=sys.stdout,sort_by:t.Iterable[str]=('time','calls'),restrictions:t.Iterable[t.Union[str,int,float]]=(),profile_dir:t.Optional[str]=None,filename_format:str='{method}.{path}.{elapsed:.0f}ms.{time:.0f}.prof')


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/middleware/proxy_fix.py----------------------------------------
A:flask.werkzeug.middleware.proxy_fix.values->parse_list_header(value)
A:flask.werkzeug.middleware.proxy_fix.orig_remote_addr->environ_get('REMOTE_ADDR')
A:flask.werkzeug.middleware.proxy_fix.orig_wsgi_url_scheme->environ_get('wsgi.url_scheme')
A:flask.werkzeug.middleware.proxy_fix.orig_http_host->environ_get('HTTP_HOST')
A:flask.werkzeug.middleware.proxy_fix.x_for->self._get_real_value(self.x_for, environ_get('HTTP_X_FORWARDED_FOR'))
A:flask.werkzeug.middleware.proxy_fix.x_proto->self._get_real_value(self.x_proto, environ_get('HTTP_X_FORWARDED_PROTO'))
A:flask.werkzeug.middleware.proxy_fix.x_host->self._get_real_value(self.x_host, environ_get('HTTP_X_FORWARDED_HOST'))
A:flask.werkzeug.middleware.proxy_fix.(environ['SERVER_NAME'], environ['SERVER_PORT'])->self._get_real_value(self.x_host, environ_get('HTTP_X_FORWARDED_HOST')).rsplit(':', 1)
A:flask.werkzeug.middleware.proxy_fix.x_port->self._get_real_value(self.x_port, environ_get('HTTP_X_FORWARDED_PORT'))
A:flask.werkzeug.middleware.proxy_fix.host->environ.get('HTTP_HOST')
A:flask.werkzeug.middleware.proxy_fix.x_prefix->self._get_real_value(self.x_prefix, environ_get('HTTP_X_FORWARDED_PREFIX'))
flask.werkzeug.middleware.proxy_fix.ProxyFix(self,app:'WSGIApplication',x_for:int=1,x_proto:int=1,x_host:int=0,x_port:int=0,x_prefix:int=0)
flask.werkzeug.middleware.proxy_fix.ProxyFix.__init__(self,app:'WSGIApplication',x_for:int=1,x_proto:int=1,x_host:int=0,x_port:int=0,x_prefix:int=0)
flask.werkzeug.middleware.proxy_fix.ProxyFix._get_real_value(self,trusted:int,value:t.Optional[str])->t.Optional[str]


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/middleware/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/middleware/shared_data.py----------------------------------------
A:flask.werkzeug.middleware.shared_data.exports->exports.items().items()
A:flask.werkzeug.middleware.shared_data.loader->self.get_directory_loader(value)
A:flask.werkzeug.middleware.shared_data.load_time->datetime.datetime.now(timezone.utc)
A:flask.werkzeug.middleware.shared_data.provider->pkgutil.get_loader(package)
A:flask.werkzeug.middleware.shared_data.reader->pkgutil.get_loader(package).get_resource_reader(package)
A:flask.werkzeug.middleware.shared_data.path->get_path_info(environ)
A:flask.werkzeug.middleware.shared_data.basename->posixpath.basename(path)
A:flask.werkzeug.middleware.shared_data.resource->pkgutil.get_loader(package).get_resource_reader(package).open_resource(path)
A:flask.werkzeug.middleware.shared_data.package_filename->pkgutil.get_loader(package).get_filename(package)
A:flask.werkzeug.middleware.shared_data.is_filesystem->os.path.exists(package_filename)
A:flask.werkzeug.middleware.shared_data.root->os.path.join(os.path.dirname(package_filename), package_path)
A:flask.werkzeug.middleware.shared_data.data->pkgutil.get_loader(package).get_data(path)
A:flask.werkzeug.middleware.shared_data.real_filename->real_filename.encode(get_filesystem_encoding()).encode(get_filesystem_encoding())
A:flask.werkzeug.middleware.shared_data.timestamp->mtime.timestamp()
A:flask.werkzeug.middleware.shared_data.(real_filename, file_loader)->loader(path[len(search_path):])
A:flask.werkzeug.middleware.shared_data.guessed_type->mimetypes.guess_type(real_filename)
A:flask.werkzeug.middleware.shared_data.mime_type->get_content_type(guessed_type[0] or self.fallback_mimetype, 'utf-8')
A:flask.werkzeug.middleware.shared_data.(f, mtime, file_size)->file_loader()
A:flask.werkzeug.middleware.shared_data.etag->self.generate_etag(mtime, file_size, real_filename)
flask.werkzeug.middleware.shared_data.SharedDataMiddleware(self,app:'WSGIApplication',exports:t.Union[t.Dict[str,t.Union[str,t.Tuple[str,str]]],t.Iterable[t.Tuple[str,t.Union[str,t.Tuple[str,str]]]]],disallow:None=None,cache:bool=True,cache_timeout:int=60*60*12,fallback_mimetype:str='application/octet-stream')
flask.werkzeug.middleware.shared_data.SharedDataMiddleware.__init__(self,app:'WSGIApplication',exports:t.Union[t.Dict[str,t.Union[str,t.Tuple[str,str]]],t.Iterable[t.Tuple[str,t.Union[str,t.Tuple[str,str]]]]],disallow:None=None,cache:bool=True,cache_timeout:int=60*60*12,fallback_mimetype:str='application/octet-stream')
flask.werkzeug.middleware.shared_data.SharedDataMiddleware._opener(self,filename:str)->_TOpener
flask.werkzeug.middleware.shared_data.SharedDataMiddleware.generate_etag(self,mtime:datetime,file_size:int,real_filename:str)->str
flask.werkzeug.middleware.shared_data.SharedDataMiddleware.get_directory_loader(self,directory:str)->_TLoader
flask.werkzeug.middleware.shared_data.SharedDataMiddleware.get_file_loader(self,filename:str)->_TLoader
flask.werkzeug.middleware.shared_data.SharedDataMiddleware.get_package_loader(self,package:str,package_path:str)->_TLoader
flask.werkzeug.middleware.shared_data.SharedDataMiddleware.is_allowed(self,filename:str)->bool


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/middleware/dispatcher.py----------------------------------------
A:flask.werkzeug.middleware.dispatcher.script->environ.get('PATH_INFO', '')
A:flask.werkzeug.middleware.dispatcher.(script, last_item)->environ.get('PATH_INFO', '').rsplit('/', 1)
A:flask.werkzeug.middleware.dispatcher.app->self.mounts.get(script, self.app)
A:flask.werkzeug.middleware.dispatcher.original_script_name->environ.get('SCRIPT_NAME', '')
flask.werkzeug.middleware.dispatcher.DispatcherMiddleware(self,app:'WSGIApplication',mounts:t.Optional[t.Dict[str,'WSGIApplication']]=None)
flask.werkzeug.middleware.dispatcher.DispatcherMiddleware.__init__(self,app:'WSGIApplication',mounts:t.Optional[t.Dict[str,'WSGIApplication']]=None)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/debug/tbtools.py----------------------------------------
A:flask.werkzeug.debug.tbtools._coding_re->re.compile(b'coding[:=]\\s*([-\\w.]+)')
A:flask.werkzeug.debug.tbtools._line_re->re.compile(b'^(.*?)$', re.MULTILINE)
A:flask.werkzeug.debug.tbtools._funcdef_re->re.compile('^(\\s*def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
A:flask.werkzeug.debug.tbtools.info->_to_str(info, 'utf-8', 'replace')
A:flask.werkzeug.debug.tbtools.tb->Traceback(exc_type, exc_value, tb)
A:flask.werkzeug.debug.tbtools.memo->set()
A:flask.werkzeug.debug.tbtools.exc_type->type(exc_value)
A:flask.werkzeug.debug.tbtools.library_frames->sum((frame.is_library for frame in self.frames))
A:flask.werkzeug.debug.tbtools.exc->escape(self.exception)
A:flask.werkzeug.debug.tbtools.buf->traceback.format_exception_only(self.exc_type, self.exc_value)
A:flask.werkzeug.debug.tbtools.rv->''.join(buf).strip()
A:flask.werkzeug.debug.tbtools.fn->os.path.realpath(fn)
A:flask.werkzeug.debug.tbtools.self.filename->_to_str(fn, get_filesystem_encoding())
A:flask.werkzeug.debug.tbtools.self.module->self.globals.get('__name__', self.locals.get('__name__'))
A:flask.werkzeug.debug.tbtools.self.loader->self.globals.get('__loader__', self.locals.get('__loader__'))
A:flask.werkzeug.debug.tbtools.self.hide->self.locals.get('__traceback_hide__', False)
A:flask.werkzeug.debug.tbtools.(before, current, after)->self.get_context_lines()
A:flask.werkzeug.debug.tbtools.line->line.expandtabs().rstrip().expandtabs().rstrip()
A:flask.werkzeug.debug.tbtools.stripped_line->line.expandtabs().rstrip().expandtabs().rstrip().strip()
A:flask.werkzeug.debug.tbtools.offset->len(inspect.getblock([f'{x.code}\n' for x in lines[lineno:]]))
A:flask.werkzeug.debug.tbtools.code->compile(code, '<interactive>', mode)
A:flask.werkzeug.debug.tbtools.source->f.read()
A:flask.werkzeug.debug.tbtools.coding_match->re.compile(b'coding[:=]\\s*([-\\w.]+)').search(match.group())
A:flask.werkzeug.debug.tbtools.charset->_to_str(charset)
flask.werkzeug.debug.Frame(self,exc_type:t.Type[BaseException],exc_value:BaseException,tb:TracebackType)
flask.werkzeug.debug.Frame.console(self)->Console
flask.werkzeug.debug.Frame.current_line(self)->str
flask.werkzeug.debug.Frame.eval(self,code:t.Union[str,CodeType],mode:str='single')->t.Any
flask.werkzeug.debug.Frame.get_annotated_lines(self)->t.List[Line]
flask.werkzeug.debug.Frame.get_context_lines(self,context:int=5)->t.Tuple[t.List[str], str, t.List[str]]
flask.werkzeug.debug.Frame.id(self)->int
flask.werkzeug.debug.Frame.is_library(self)->bool
flask.werkzeug.debug.Frame.render(self,mark_lib:bool=True)->str
flask.werkzeug.debug.Frame.render_line_context(self)->str
flask.werkzeug.debug.Frame.render_text(self)->str
flask.werkzeug.debug.Frame.sourcelines(self)->t.List[str]
flask.werkzeug.debug.Traceback(self,exc_type:t.Type[BaseException],exc_value:BaseException,tb:TracebackType)
flask.werkzeug.debug.Traceback.exception(self)->str
flask.werkzeug.debug.Traceback.filter_hidden_frames(self)->None
flask.werkzeug.debug.Traceback.id(self)->int
flask.werkzeug.debug.Traceback.is_syntax_error(self)->bool
flask.werkzeug.debug.Traceback.log(self,logfile:t.Optional[t.IO[str]]=None)->None
flask.werkzeug.debug.Traceback.plaintext(self)->str
flask.werkzeug.debug.Traceback.render_full(self,evalex:bool=False,secret:t.Optional[str]=None,evalex_trusted:bool=True)->str
flask.werkzeug.debug.Traceback.render_summary(self,include_title:bool=True)->str
flask.werkzeug.debug.get_current_traceback(ignore_system_exceptions:bool=False,show_hidden_frames:bool=False,skip:int=0)->'Traceback'
flask.werkzeug.debug.render_console_html(secret:str,evalex_trusted:bool=True)->str
flask.werkzeug.debug.tbtools.Frame(self,exc_type:t.Type[BaseException],exc_value:BaseException,tb:TracebackType)
flask.werkzeug.debug.tbtools.Frame.__init__(self,exc_type:t.Type[BaseException],exc_value:BaseException,tb:TracebackType)
flask.werkzeug.debug.tbtools.Frame.console(self)->Console
flask.werkzeug.debug.tbtools.Frame.current_line(self)->str
flask.werkzeug.debug.tbtools.Frame.eval(self,code:t.Union[str,CodeType],mode:str='single')->t.Any
flask.werkzeug.debug.tbtools.Frame.get_annotated_lines(self)->t.List[Line]
flask.werkzeug.debug.tbtools.Frame.get_context_lines(self,context:int=5)->t.Tuple[t.List[str], str, t.List[str]]
flask.werkzeug.debug.tbtools.Frame.id(self)->int
flask.werkzeug.debug.tbtools.Frame.is_library(self)->bool
flask.werkzeug.debug.tbtools.Frame.render(self,mark_lib:bool=True)->str
flask.werkzeug.debug.tbtools.Frame.render_line_context(self)->str
flask.werkzeug.debug.tbtools.Frame.render_text(self)->str
flask.werkzeug.debug.tbtools.Frame.sourcelines(self)->t.List[str]
flask.werkzeug.debug.tbtools.Group(self,exc_type:t.Type[BaseException],exc_value:BaseException,tb:TracebackType)
flask.werkzeug.debug.tbtools.Group.__init__(self,exc_type:t.Type[BaseException],exc_value:BaseException,tb:TracebackType)
flask.werkzeug.debug.tbtools.Group.exception(self)->str
flask.werkzeug.debug.tbtools.Group.filter_hidden_frames(self)->None
flask.werkzeug.debug.tbtools.Group.render(self,mark_lib:bool=True)->str
flask.werkzeug.debug.tbtools.Group.render_text(self)->str
flask.werkzeug.debug.tbtools.Line(self,lineno:int,code:str)
flask.werkzeug.debug.tbtools.Line.__init__(self,lineno:int,code:str)
flask.werkzeug.debug.tbtools.Line.classes(self)->t.List[str]
flask.werkzeug.debug.tbtools.Line.render(self)->str
flask.werkzeug.debug.tbtools.Traceback(self,exc_type:t.Type[BaseException],exc_value:BaseException,tb:TracebackType)
flask.werkzeug.debug.tbtools.Traceback.__init__(self,exc_type:t.Type[BaseException],exc_value:BaseException,tb:TracebackType)
flask.werkzeug.debug.tbtools.Traceback.exception(self)->str
flask.werkzeug.debug.tbtools.Traceback.filter_hidden_frames(self)->None
flask.werkzeug.debug.tbtools.Traceback.id(self)->int
flask.werkzeug.debug.tbtools.Traceback.is_syntax_error(self)->bool
flask.werkzeug.debug.tbtools.Traceback.log(self,logfile:t.Optional[t.IO[str]]=None)->None
flask.werkzeug.debug.tbtools.Traceback.plaintext(self)->str
flask.werkzeug.debug.tbtools.Traceback.render_full(self,evalex:bool=False,secret:t.Optional[str]=None,evalex_trusted:bool=True)->str
flask.werkzeug.debug.tbtools.Traceback.render_summary(self,include_title:bool=True)->str
flask.werkzeug.debug.tbtools.get_current_traceback(ignore_system_exceptions:bool=False,show_hidden_frames:bool=False,skip:int=0)->'Traceback'
flask.werkzeug.debug.tbtools.render_console_html(secret:str,evalex_trusted:bool=True)->str


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/debug/console.py----------------------------------------
A:flask.werkzeug.debug.console._local->Local()
A:flask.werkzeug.debug.console.val->''.join(self._buffer)
A:flask.werkzeug.debug.console.x->x.decode('utf-8', 'replace').decode('utf-8', 'replace')
A:flask.werkzeug.debug.console.sys.stdout->typing.cast(t.TextIO, ThreadedStream())
A:flask.werkzeug.debug.console._local.stream->HTMLStringO()
A:flask.werkzeug.debug.console.self.loader->_ConsoleLoader()
A:flask.werkzeug.debug.console.code->original_compile(source, filename, symbol)
A:flask.werkzeug.debug.console.source_to_eval->''.join(self.buffer + [source])
A:flask.werkzeug.debug.console.output->ThreadedStream.fetch()
A:flask.werkzeug.debug.console.tb->get_current_traceback(skip=4)
A:flask.werkzeug.debug.console.self._ipy->_InteractiveConsole(globals, locals)
flask.werkzeug.debug.Console(self,globals:t.Optional[t.Dict[str,t.Any]]=None,locals:t.Optional[t.Dict[str,t.Any]]=None)
flask.werkzeug.debug.Console.eval(self,code:str)->str
flask.werkzeug.debug.console.Console(self,globals:t.Optional[t.Dict[str,t.Any]]=None,locals:t.Optional[t.Dict[str,t.Any]]=None)
flask.werkzeug.debug.console.Console.__init__(self,globals:t.Optional[t.Dict[str,t.Any]]=None,locals:t.Optional[t.Dict[str,t.Any]]=None)
flask.werkzeug.debug.console.Console.eval(self,code:str)->str
flask.werkzeug.debug.console.HTMLStringO(self)
flask.werkzeug.debug.console.HTMLStringO.__init__(self)
flask.werkzeug.debug.console.HTMLStringO._write(self,x:str)->None
flask.werkzeug.debug.console.HTMLStringO.close(self)->None
flask.werkzeug.debug.console.HTMLStringO.flush(self)->None
flask.werkzeug.debug.console.HTMLStringO.isatty(self)->bool
flask.werkzeug.debug.console.HTMLStringO.readline(self)->str
flask.werkzeug.debug.console.HTMLStringO.reset(self)->str
flask.werkzeug.debug.console.HTMLStringO.seek(self,n:int,mode:int=0)->None
flask.werkzeug.debug.console.HTMLStringO.write(self,x:str)->None
flask.werkzeug.debug.console.HTMLStringO.writelines(self,x:t.Iterable[str])->None
flask.werkzeug.debug.console.ThreadedStream
flask.werkzeug.debug.console.ThreadedStream.__dir__(self)->t.List[str]
flask.werkzeug.debug.console.ThreadedStream.__getattribute__(self,name:str)->t.Any
flask.werkzeug.debug.console.ThreadedStream.__repr__(self)->str
flask.werkzeug.debug.console.ThreadedStream.__setattr__(self,name:str,value:t.Any)->None
flask.werkzeug.debug.console.ThreadedStream.displayhook(obj:object)->None
flask.werkzeug.debug.console.ThreadedStream.fetch()->str
flask.werkzeug.debug.console.ThreadedStream.push()->None
flask.werkzeug.debug.console._ConsoleLoader(self)
flask.werkzeug.debug.console._ConsoleLoader.__init__(self)
flask.werkzeug.debug.console._ConsoleLoader.get_source_by_code(self,code:CodeType)->t.Optional[str]
flask.werkzeug.debug.console._ConsoleLoader.register(self,code:CodeType,source:str)->None
flask.werkzeug.debug.console._InteractiveConsole(self,globals:t.Dict[str,t.Any],locals:t.Dict[str,t.Any])
flask.werkzeug.debug.console._InteractiveConsole.__init__(self,globals:t.Dict[str,t.Any],locals:t.Dict[str,t.Any])
flask.werkzeug.debug.console._InteractiveConsole.runcode(self,code:CodeType)->None
flask.werkzeug.debug.console._InteractiveConsole.runsource(self,source:str,**kwargs:t.Any)->str
flask.werkzeug.debug.console._InteractiveConsole.showsyntaxerror(self,filename:t.Optional[str]=None)->None
flask.werkzeug.debug.console._InteractiveConsole.showtraceback(self)->None
flask.werkzeug.debug.console._InteractiveConsole.write(self,data:str)->None


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/debug/__init__.py----------------------------------------
A:flask.werkzeug.debug.__init__.value->f.readline().strip()
A:flask.werkzeug.debug.__init__.match->re.search(b'"serial-number" = <([^>]+)', dump)
A:flask.werkzeug.debug.__init__.(guid, guid_type)->winreg.QueryValueEx(rk, 'MachineGuid')
A:flask.werkzeug.debug.__init__._machine_id->_generate()
A:flask.werkzeug.debug.__init__.self.console->Console(namespace)
A:flask.werkzeug.debug.__init__.pin->typing.cast(str, self.pin)
A:flask.werkzeug.debug.__init__.modname->getattr(app, '__module__', t.cast(object, app).__class__.__module__)
A:flask.werkzeug.debug.__init__.username->getpass.getuser()
A:flask.werkzeug.debug.__init__.mod->sys.modules.get(modname)
A:flask.werkzeug.debug.__init__.h->hashlib.sha1()
A:flask.werkzeug.debug.__init__.bit->bit.encode('utf-8').encode('utf-8')
A:flask.werkzeug.debug.__init__.rv->Response(json.dumps({'auth': auth, 'exhausted': exhausted}), mimetype='application/json')
A:flask.werkzeug.debug.__init__.self.secret->gen_salt(20)
A:flask.werkzeug.debug.__init__.pin_cookie->get_pin_and_cookie_name(self.app)
A:flask.werkzeug.debug.__init__.app_iter->self.app(environ, start_response)
A:flask.werkzeug.debug.__init__.traceback->get_current_traceback(skip=1, show_hidden_frames=self.show_hidden_frames, ignore_system_exceptions=True)
A:flask.werkzeug.debug.__init__.is_trusted->bool(self.check_pin_trust(request.environ))
A:flask.werkzeug.debug.__init__.ns->dict(self.console_init_func())
A:flask.werkzeug.debug.__init__.self.frames[0]->_ConsoleFrame(ns)
A:flask.werkzeug.debug.__init__.filename->join('shared', basename(filename))
A:flask.werkzeug.debug.__init__.data->pkgutil.get_data(__package__, filename)
A:flask.werkzeug.debug.__init__.val->parse_cookie(environ).get(self.pin_cookie_name)
A:flask.werkzeug.debug.__init__.(ts, pin_hash)->parse_cookie(environ).get(self.pin_cookie_name).split('|', 1)
A:flask.werkzeug.debug.__init__.trust->self.check_pin_trust(request.environ)
A:flask.werkzeug.debug.__init__.request->Request(environ)
A:flask.werkzeug.debug.__init__.cmd->Request(environ).args.get('cmd')
A:flask.werkzeug.debug.__init__.arg->Request(environ).args.get('f')
A:flask.werkzeug.debug.__init__.secret->Request(environ).args.get('s')
A:flask.werkzeug.debug.__init__.frame->self.frames.get(request.args.get('frm', type=int))
A:flask.werkzeug.debug.__init__.response->self.display_console(request)
flask.werkzeug.debug.__init__.DebuggedApplication(self,app:'WSGIApplication',evalex:bool=False,request_key:str='werkzeug.request',console_path:str='/console',console_init_func:t.Optional[t.Callable[[],t.Dict[str,t.Any]]]=None,show_hidden_frames:bool=False,pin_security:bool=True,pin_logging:bool=True)
flask.werkzeug.debug.__init__.DebuggedApplication.__init__(self,app:'WSGIApplication',evalex:bool=False,request_key:str='werkzeug.request',console_path:str='/console',console_init_func:t.Optional[t.Callable[[],t.Dict[str,t.Any]]]=None,show_hidden_frames:bool=False,pin_security:bool=True,pin_logging:bool=True)
flask.werkzeug.debug.__init__.DebuggedApplication._fail_pin_auth(self)->None
flask.werkzeug.debug.__init__.DebuggedApplication.check_pin_trust(self,environ:'WSGIEnvironment')->t.Optional[bool]
flask.werkzeug.debug.__init__.DebuggedApplication.debug_application(self,environ:'WSGIEnvironment',start_response:'StartResponse')->t.Iterator[bytes]
flask.werkzeug.debug.__init__.DebuggedApplication.display_console(self,request:Request)->Response
flask.werkzeug.debug.__init__.DebuggedApplication.execute_command(self,request:Request,command:str,frame:t.Union[Frame,_ConsoleFrame])->Response
flask.werkzeug.debug.__init__.DebuggedApplication.get_resource(self,request:Request,filename:str)->Response
flask.werkzeug.debug.__init__.DebuggedApplication.log_pin_request(self)->Response
flask.werkzeug.debug.__init__.DebuggedApplication.pin(self)->t.Optional[str]
flask.werkzeug.debug.__init__.DebuggedApplication.pin(self,value:str)->None
flask.werkzeug.debug.__init__.DebuggedApplication.pin_auth(self,request:Request)->Response
flask.werkzeug.debug.__init__.DebuggedApplication.pin_cookie_name(self)->str
flask.werkzeug.debug.__init__._ConsoleFrame(self,namespace:t.Dict[str,t.Any])
flask.werkzeug.debug.__init__._ConsoleFrame.__init__(self,namespace:t.Dict[str,t.Any])
flask.werkzeug.debug.__init__.get_machine_id()->t.Optional[t.Union[str, bytes]]
flask.werkzeug.debug.__init__.get_pin_and_cookie_name(app:'WSGIApplication')->t.Union[t.Tuple[str, str], t.Tuple[None, None]]
flask.werkzeug.debug.__init__.hash_pin(pin:str)->str


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/debug/repr.py----------------------------------------
A:flask.werkzeug.debug.repr.missing->object()
A:flask.werkzeug.debug.repr._paragraph_re->re.compile('(?:\\r\\n|\\r|\\n){2,}')
A:flask.werkzeug.debug.repr.RegexType->type(_paragraph_re)
A:flask.werkzeug.debug.repr.gen->DebugReprGenerator()
A:flask.werkzeug.debug.repr.rv->rv.decode('utf-8', 'ignore').decode('utf-8', 'ignore')
A:flask.werkzeug.debug.repr.paragraphs->re.compile('(?:\\r\\n|\\r|\\n){2,}').split(rv)
A:flask.werkzeug.debug.repr.text->'\n\n'.join(paragraphs[1:])
A:flask.werkzeug.debug.repr.helper->_Helper()
A:flask.werkzeug.debug.repr.list_repr->_sequence_repr_maker('[', ']', list)
A:flask.werkzeug.debug.repr.tuple_repr->_sequence_repr_maker('(', ')', tuple)
A:flask.werkzeug.debug.repr.set_repr->_sequence_repr_maker('set([', '])', set)
A:flask.werkzeug.debug.repr.frozenset_repr->_sequence_repr_maker('frozenset([', '])', frozenset)
A:flask.werkzeug.debug.repr.deque_repr->_sequence_repr_maker('<span class="module">collections.</span>deque([', '])', deque)
A:flask.werkzeug.debug.repr.pattern->codecs.decode(pattern, 'unicode-escape', 'ignore')
A:flask.werkzeug.debug.repr.r->repr(obj)
A:flask.werkzeug.debug.repr.out->''.join(buf)
A:flask.werkzeug.debug.repr.info->''.join(format_exception_only(*sys.exc_info()[:2]))
A:flask.werkzeug.debug.repr.repr->self.repr(obj)
flask.werkzeug.debug.repr.DebugReprGenerator(self)
flask.werkzeug.debug.repr.DebugReprGenerator.__init__(self)
flask.werkzeug.debug.repr.DebugReprGenerator.dict_repr(self,d:t.Union[t.Dict[int,None],t.Dict[str,int],t.Dict[t.Union[str,int],int]],recursive:bool,limit:int=5)->str
flask.werkzeug.debug.repr.DebugReprGenerator.dispatch_repr(self,obj:t.Any,recursive:bool)->str
flask.werkzeug.debug.repr.DebugReprGenerator.dump_locals(self,d:t.Dict[str,t.Any])->str
flask.werkzeug.debug.repr.DebugReprGenerator.dump_object(self,obj:object)->str
flask.werkzeug.debug.repr.DebugReprGenerator.fallback_repr(self)->str
flask.werkzeug.debug.repr.DebugReprGenerator.object_repr(self,obj:t.Optional[t.Union[t.Type[dict],t.Callable,t.Type[list]]])->str
flask.werkzeug.debug.repr.DebugReprGenerator.regex_repr(self,obj:t.Pattern)->str
flask.werkzeug.debug.repr.DebugReprGenerator.render_object_dump(self,items:t.List[t.Tuple[str,str]],title:str,repr:t.Optional[str]=None)->str
flask.werkzeug.debug.repr.DebugReprGenerator.repr(self,obj:object)->str
flask.werkzeug.debug.repr.DebugReprGenerator.string_repr(self,obj:t.Union[str,bytes],limit:int=70)->str
flask.werkzeug.debug.repr._Helper(self,topic:t.Optional[t.Any]=None)
flask.werkzeug.debug.repr._Helper.__call__(self,topic:t.Optional[t.Any]=None)
flask.werkzeug.debug.repr._Helper.__repr__(self)->str
flask.werkzeug.debug.repr._add_subclass_info(inner:str,obj:object,base:t.Union[t.Type,t.Tuple[t.Type,...]])->str
flask.werkzeug.debug.repr._sequence_repr_maker(left:str,right:str,base:t.Type,limit:int=8)->t.Callable[['DebugReprGenerator', t.Iterable, bool], str]
flask.werkzeug.debug.repr.debug_repr(obj:object)->str
flask.werkzeug.debug.repr.dump(obj:object=missing)->None


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/wrappers/accept.py----------------------------------------
flask.werkzeug.wrappers.AcceptMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.accept.AcceptMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.accept.AcceptMixin.__init__(self,*args:t.Any,**kwargs:t.Any)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/wrappers/etag.py----------------------------------------
flask.werkzeug.wrappers.ETagRequestMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.ETagResponseMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.etag.ETagRequestMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.etag.ETagRequestMixin.__init__(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.etag.ETagResponseMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.etag.ETagResponseMixin.__init__(self,*args:t.Any,**kwargs:t.Any)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/wrappers/cors.py----------------------------------------
flask.werkzeug.wrappers.cors.CORSRequestMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.cors.CORSRequestMixin.__init__(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.cors.CORSResponseMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.cors.CORSResponseMixin.__init__(self,*args:t.Any,**kwargs:t.Any)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/wrappers/user_agent.py----------------------------------------
flask.werkzeug.wrappers.UserAgentMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.user_agent.UserAgentMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.user_agent.UserAgentMixin.__init__(self,*args:t.Any,**kwargs:t.Any)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/wrappers/base_response.py----------------------------------------
flask.werkzeug.wrappers.BaseResponse(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.base_response.BaseResponse(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.base_response.BaseResponse.__init__(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.base_response._FakeSubclassCheck(type)
flask.werkzeug.wrappers.base_response._FakeSubclassCheck.__instancecheck__(cls,instance:t.Any)->bool
flask.werkzeug.wrappers.base_response._FakeSubclassCheck.__subclasscheck__(cls,subclass:t.Type)->bool


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/wrappers/json.py----------------------------------------
flask.werkzeug.wrappers.json.JSONMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.json.JSONMixin.__init__(self,*args:t.Any,**kwargs:t.Any)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/wrappers/request.py----------------------------------------
A:flask.werkzeug.wrappers.request.charset->kwargs.pop('charset', cls.charset)
A:flask.werkzeug.wrappers.request.builder->EnvironBuilder(*args, **kwargs)
A:flask.werkzeug.wrappers.request.request->cls(args[-2])
A:flask.werkzeug.wrappers.request.resp->e.get_response(args[-2])
A:flask.werkzeug.wrappers.request.parser->self.make_form_data_parser()
A:flask.werkzeug.wrappers.request.data->self.get_data(cache=cache)
A:flask.werkzeug.wrappers.request.cached_data->getattr(self, '_cached_data', None)
A:flask.werkzeug.wrappers.request.files->self.__dict__.get('files')
A:flask.werkzeug.wrappers.request.input_stream->environ_property[t.IO[bytes]]('wsgi.input', doc="The WSGI input stream.\n\n        In general it's a bad idea to use this one because you can\n        easily read past the boundary.  Use the :attr:`stream`\n        instead.")
A:flask.werkzeug.wrappers.request.rv->self.on_json_loading_failed(e)
A:flask.werkzeug.wrappers.request.d->MultiDict(d)
A:flask.werkzeug.wrappers.request.remote_user->environ_property[str]('REMOTE_USER', doc='If the server supports user authentication, and the\n        script is protected, this attribute contains the username the\n        user has authenticated as.')
A:flask.werkzeug.wrappers.request.is_multithread->environ_property[bool]('wsgi.multithread', doc='boolean that is `True` if the application is served by a\n        multithreaded WSGI server.')
A:flask.werkzeug.wrappers.request.is_multiprocess->environ_property[bool]('wsgi.multiprocess', doc='boolean that is `True` if the application is served by a\n        WSGI server that spawns multiple processes.')
A:flask.werkzeug.wrappers.request.is_run_once->environ_property[bool]('wsgi.run_once', doc="boolean that is `True` if the application will be\n        executed only once in a process lifetime.  This is the case for\n        CGI for example, but it's not guaranteed that the execution only\n        happens one time.")
flask.werkzeug.Request(self,environ:'WSGIEnvironment',populate_request:bool=True,shallow:bool=False)
flask.werkzeug.Request.__enter__(self)->'Request'
flask.werkzeug.Request.__exit__(self,exc_type,exc_value,tb)->None
flask.werkzeug.Request._get_file_stream(self,total_content_length:t.Optional[int],content_type:t.Optional[str],filename:t.Optional[str]=None,content_length:t.Optional[int]=None)->t.IO[bytes]
flask.werkzeug.Request._get_stream_for_parsing(self)->t.IO[bytes]
flask.werkzeug.Request._load_form_data(self)->None
flask.werkzeug.Request.application(cls,f:t.Callable[['Request'],'WSGIApplication'])->'WSGIApplication'
flask.werkzeug.Request.close(self)->None
flask.werkzeug.Request.data(self)->bytes
flask.werkzeug.Request.files(self)->'ImmutableMultiDict[str, FileStorage]'
flask.werkzeug.Request.form(self)->'ImmutableMultiDict[str, str]'
flask.werkzeug.Request.from_values(cls,*args:t.Any,**kwargs:t.Any)->'Request'
flask.werkzeug.Request.get_data(self,cache:bool=True,as_text:bool=False,parse_form_data:bool=False)->t.Union[bytes, str]
flask.werkzeug.Request.get_json(self,force:bool=False,silent:bool=False,cache:bool=True)->t.Optional[t.Any]
flask.werkzeug.Request.json(self)->t.Optional[t.Any]
flask.werkzeug.Request.make_form_data_parser(self)->FormDataParser
flask.werkzeug.Request.on_json_loading_failed(self,e:ValueError)->t.Any
flask.werkzeug.Request.script_root(self)->str
flask.werkzeug.Request.stream(self)->t.IO[bytes]
flask.werkzeug.Request.url_root(self)->str
flask.werkzeug.Request.values(self)->'CombinedMultiDict[str, str]'
flask.werkzeug.Request.want_form_data_parsed(self)->bool
flask.werkzeug.wrappers.PlainRequest(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.StreamOnlyMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.request.PlainRequest(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.request.PlainRequest.__init__(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.request.Request(self,environ:'WSGIEnvironment',populate_request:bool=True,shallow:bool=False)
flask.werkzeug.wrappers.request.Request.__enter__(self)->'Request'
flask.werkzeug.wrappers.request.Request.__exit__(self,exc_type,exc_value,tb)->None
flask.werkzeug.wrappers.request.Request.__init__(self,environ:'WSGIEnvironment',populate_request:bool=True,shallow:bool=False)
flask.werkzeug.wrappers.request.Request._get_file_stream(self,total_content_length:t.Optional[int],content_type:t.Optional[str],filename:t.Optional[str]=None,content_length:t.Optional[int]=None)->t.IO[bytes]
flask.werkzeug.wrappers.request.Request._get_stream_for_parsing(self)->t.IO[bytes]
flask.werkzeug.wrappers.request.Request._load_form_data(self)->None
flask.werkzeug.wrappers.request.Request.application(cls,f:t.Callable[['Request'],'WSGIApplication'])->'WSGIApplication'
flask.werkzeug.wrappers.request.Request.close(self)->None
flask.werkzeug.wrappers.request.Request.data(self)->bytes
flask.werkzeug.wrappers.request.Request.files(self)->'ImmutableMultiDict[str, FileStorage]'
flask.werkzeug.wrappers.request.Request.form(self)->'ImmutableMultiDict[str, str]'
flask.werkzeug.wrappers.request.Request.from_values(cls,*args:t.Any,**kwargs:t.Any)->'Request'
flask.werkzeug.wrappers.request.Request.get_data(self,cache:bool=True,as_text:bool=False,parse_form_data:bool=False)->t.Union[bytes, str]
flask.werkzeug.wrappers.request.Request.get_json(self,force:bool=False,silent:bool=False,cache:bool=True)->t.Optional[t.Any]
flask.werkzeug.wrappers.request.Request.json(self)->t.Optional[t.Any]
flask.werkzeug.wrappers.request.Request.make_form_data_parser(self)->FormDataParser
flask.werkzeug.wrappers.request.Request.on_json_loading_failed(self,e:ValueError)->t.Any
flask.werkzeug.wrappers.request.Request.script_root(self)->str
flask.werkzeug.wrappers.request.Request.stream(self)->t.IO[bytes]
flask.werkzeug.wrappers.request.Request.url_root(self)->str
flask.werkzeug.wrappers.request.Request.values(self)->'CombinedMultiDict[str, str]'
flask.werkzeug.wrappers.request.Request.want_form_data_parsed(self)->bool
flask.werkzeug.wrappers.request.StreamOnlyMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.request.StreamOnlyMixin.__init__(self,*args:t.Any,**kwargs:t.Any)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/wrappers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/wrappers/auth.py----------------------------------------
flask.werkzeug.wrappers.AuthorizationMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.WWWAuthenticateMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.auth.AuthorizationMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.auth.AuthorizationMixin.__init__(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.auth.WWWAuthenticateMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.auth.WWWAuthenticateMixin.__init__(self,*args:t.Any,**kwargs:t.Any)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/wrappers/base_request.py----------------------------------------
flask.werkzeug.wrappers.BaseRequest(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.base_request.BaseRequest(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.base_request.BaseRequest.__init__(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.base_request._FakeSubclassCheck(type)
flask.werkzeug.wrappers.base_request._FakeSubclassCheck.__instancecheck__(cls,instance:t.Any)->bool
flask.werkzeug.wrappers.base_request._FakeSubclassCheck.__subclasscheck__(cls,subclass:t.Type)->bool


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/wrappers/common_descriptors.py----------------------------------------
flask.werkzeug.wrappers.CommonRequestDescriptorsMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.CommonResponseDescriptorsMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.common_descriptors.CommonRequestDescriptorsMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.common_descriptors.CommonRequestDescriptorsMixin.__init__(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.common_descriptors.CommonResponseDescriptorsMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.common_descriptors.CommonResponseDescriptorsMixin.__init__(self,*args:t.Any,**kwargs:t.Any)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/werkzeug/wrappers/response.py----------------------------------------
A:flask.werkzeug.wrappers.response.response->Response(*run_wsgi_app(response, environ))
A:flask.werkzeug.wrappers.response.rv->b''.join(self.iter_encoded())
A:flask.werkzeug.wrappers.response.value->bytes(value)
A:flask.werkzeug.wrappers.response.self.headers['Content-Length']->str(sum(map(len, self.response)))
A:flask.werkzeug.wrappers.response.data->self.get_data()
A:flask.werkzeug.wrappers.response.self.response->_RangeWrapper(self.response, start, length)
A:flask.werkzeug.wrappers.response.close->getattr(self.response, 'close', None)
A:flask.werkzeug.wrappers.response.headers->self.get_wsgi_headers(environ)
A:flask.werkzeug.wrappers.response.ikey->key.lower()
A:flask.werkzeug.wrappers.response.location->url_join(current_url, location)
A:flask.werkzeug.wrappers.response.current_url->iri_to_uri(current_url)
A:flask.werkzeug.wrappers.response.headers['Content-Location']->iri_to_uri(content_location)
A:flask.werkzeug.wrappers.response.content_length->sum((len(_to_bytes(x, 'ascii')) for x in self.response))
A:flask.werkzeug.wrappers.response.headers['Content-Length']->str(content_length)
A:flask.werkzeug.wrappers.response.iterable->self.iter_encoded()
A:flask.werkzeug.wrappers.response.app_iter->self.get_app_iter(environ)
A:flask.werkzeug.wrappers.response.(app_iter, status, headers)->self.get_wsgi_response(environ)
A:flask.werkzeug.wrappers.response.parsed_range->parse_range_header(environ.get('HTTP_RANGE'))
A:flask.werkzeug.wrappers.response.range_tuple->parse_range_header(environ.get('HTTP_RANGE')).range_for_length(complete_length)
A:flask.werkzeug.wrappers.response.content_range_header->parse_range_header(environ.get('HTTP_RANGE')).to_content_range_header(complete_length)
A:flask.werkzeug.wrappers.response.environ->_get_environ(request_or_environ)
A:flask.werkzeug.wrappers.response.self.headers['Date']->http_date()
A:flask.werkzeug.wrappers.response.accept_ranges->_clean_accept_ranges(accept_ranges)
A:flask.werkzeug.wrappers.response.is206->self._process_range_request(environ, complete_length, accept_ranges)
A:flask.werkzeug.wrappers.response.length->self.calculate_content_length()
flask.werkzeug.Response(self,response:t.Optional[t.Union[t.Iterable[bytes],bytes,t.Iterable[str],str]]=None,status:t.Optional[t.Union[int,str,HTTPStatus]]=None,headers:t.Optional[t.Union[t.Mapping[str,t.Union[str,int,t.Iterable[t.Union[str,int]]]],t.Iterable[t.Tuple[str,t.Union[str,int]]]]]=None,mimetype:t.Optional[str]=None,content_type:t.Optional[str]=None,direct_passthrough:bool=False)
flask.werkzeug.Response.__enter__(self)->'Response'
flask.werkzeug.Response.__exit__(self,exc_type,exc_value,tb)
flask.werkzeug.Response.__repr__(self)->str
flask.werkzeug.Response._ensure_sequence(self,mutable:bool=False)->None
flask.werkzeug.Response._is_range_request_processable(self,environ:'WSGIEnvironment')->bool
flask.werkzeug.Response._process_range_request(self,environ:'WSGIEnvironment',complete_length:t.Optional[int]=None,accept_ranges:t.Optional[t.Union[bool,str]]=None)->bool
flask.werkzeug.Response._wrap_range_response(self,start:int,length:int)->None
flask.werkzeug.Response.add_etag(self,overwrite:bool=False,weak:bool=False)->None
flask.werkzeug.Response.calculate_content_length(self)->t.Optional[int]
flask.werkzeug.Response.call_on_close(self,func:t.Callable[[],t.Any])->t.Callable[[], t.Any]
flask.werkzeug.Response.close(self)->None
flask.werkzeug.Response.force_type(cls,response:'Response',environ:t.Optional['WSGIEnvironment']=None)->'Response'
flask.werkzeug.Response.freeze(self,no_etag:None=None)->None
flask.werkzeug.Response.from_app(cls,app:'WSGIApplication',environ:'WSGIEnvironment',buffered:bool=False)->'Response'
flask.werkzeug.Response.get_app_iter(self,environ:'WSGIEnvironment')->t.Iterable[bytes]
flask.werkzeug.Response.get_data(self,as_text:bool=False)->t.Union[bytes, str]
flask.werkzeug.Response.get_json(self,force:bool=False,silent:bool=False)->t.Optional[t.Any]
flask.werkzeug.Response.get_wsgi_headers(self,environ:'WSGIEnvironment')->Headers
flask.werkzeug.Response.get_wsgi_response(self,environ:'WSGIEnvironment')->t.Tuple[t.Iterable[bytes], str, t.List[t.Tuple[str, str]]]
flask.werkzeug.Response.is_sequence(self)->bool
flask.werkzeug.Response.is_streamed(self)->bool
flask.werkzeug.Response.iter_encoded(self)->t.Iterator[bytes]
flask.werkzeug.Response.json(self)->t.Optional[t.Any]
flask.werkzeug.Response.make_conditional(self,request_or_environ:t.Union['WSGIEnvironment','Request'],accept_ranges:t.Union[bool,str]=False,complete_length:t.Optional[int]=None)->'Response'
flask.werkzeug.Response.make_sequence(self)->None
flask.werkzeug.Response.set_data(self,value:t.Union[bytes,str])->None
flask.werkzeug.Response.stream(self)->'ResponseStream'
flask.werkzeug.ResponseStream(self,response:Response)
flask.werkzeug.ResponseStream.close(self)->None
flask.werkzeug.ResponseStream.encoding(self)->str
flask.werkzeug.ResponseStream.flush(self)->None
flask.werkzeug.ResponseStream.isatty(self)->bool
flask.werkzeug.ResponseStream.tell(self)->int
flask.werkzeug.ResponseStream.write(self,value:bytes)->int
flask.werkzeug.ResponseStream.writelines(self,seq:t.Iterable[bytes])->None
flask.werkzeug.ResponseStreamMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.response.Response(self,response:t.Optional[t.Union[t.Iterable[bytes],bytes,t.Iterable[str],str]]=None,status:t.Optional[t.Union[int,str,HTTPStatus]]=None,headers:t.Optional[t.Union[t.Mapping[str,t.Union[str,int,t.Iterable[t.Union[str,int]]]],t.Iterable[t.Tuple[str,t.Union[str,int]]]]]=None,mimetype:t.Optional[str]=None,content_type:t.Optional[str]=None,direct_passthrough:bool=False)
flask.werkzeug.wrappers.response.Response.__enter__(self)->'Response'
flask.werkzeug.wrappers.response.Response.__exit__(self,exc_type,exc_value,tb)
flask.werkzeug.wrappers.response.Response.__init__(self,response:t.Optional[t.Union[t.Iterable[bytes],bytes,t.Iterable[str],str]]=None,status:t.Optional[t.Union[int,str,HTTPStatus]]=None,headers:t.Optional[t.Union[t.Mapping[str,t.Union[str,int,t.Iterable[t.Union[str,int]]]],t.Iterable[t.Tuple[str,t.Union[str,int]]]]]=None,mimetype:t.Optional[str]=None,content_type:t.Optional[str]=None,direct_passthrough:bool=False)
flask.werkzeug.wrappers.response.Response.__repr__(self)->str
flask.werkzeug.wrappers.response.Response._ensure_sequence(self,mutable:bool=False)->None
flask.werkzeug.wrappers.response.Response._is_range_request_processable(self,environ:'WSGIEnvironment')->bool
flask.werkzeug.wrappers.response.Response._process_range_request(self,environ:'WSGIEnvironment',complete_length:t.Optional[int]=None,accept_ranges:t.Optional[t.Union[bool,str]]=None)->bool
flask.werkzeug.wrappers.response.Response._wrap_range_response(self,start:int,length:int)->None
flask.werkzeug.wrappers.response.Response.add_etag(self,overwrite:bool=False,weak:bool=False)->None
flask.werkzeug.wrappers.response.Response.calculate_content_length(self)->t.Optional[int]
flask.werkzeug.wrappers.response.Response.call_on_close(self,func:t.Callable[[],t.Any])->t.Callable[[], t.Any]
flask.werkzeug.wrappers.response.Response.close(self)->None
flask.werkzeug.wrappers.response.Response.force_type(cls,response:'Response',environ:t.Optional['WSGIEnvironment']=None)->'Response'
flask.werkzeug.wrappers.response.Response.freeze(self,no_etag:None=None)->None
flask.werkzeug.wrappers.response.Response.from_app(cls,app:'WSGIApplication',environ:'WSGIEnvironment',buffered:bool=False)->'Response'
flask.werkzeug.wrappers.response.Response.get_app_iter(self,environ:'WSGIEnvironment')->t.Iterable[bytes]
flask.werkzeug.wrappers.response.Response.get_data(self,as_text:bool=False)->t.Union[bytes, str]
flask.werkzeug.wrappers.response.Response.get_json(self,force:bool=False,silent:bool=False)->t.Optional[t.Any]
flask.werkzeug.wrappers.response.Response.get_wsgi_headers(self,environ:'WSGIEnvironment')->Headers
flask.werkzeug.wrappers.response.Response.get_wsgi_response(self,environ:'WSGIEnvironment')->t.Tuple[t.Iterable[bytes], str, t.List[t.Tuple[str, str]]]
flask.werkzeug.wrappers.response.Response.is_sequence(self)->bool
flask.werkzeug.wrappers.response.Response.is_streamed(self)->bool
flask.werkzeug.wrappers.response.Response.iter_encoded(self)->t.Iterator[bytes]
flask.werkzeug.wrappers.response.Response.json(self)->t.Optional[t.Any]
flask.werkzeug.wrappers.response.Response.make_conditional(self,request_or_environ:t.Union['WSGIEnvironment','Request'],accept_ranges:t.Union[bool,str]=False,complete_length:t.Optional[int]=None)->'Response'
flask.werkzeug.wrappers.response.Response.make_sequence(self)->None
flask.werkzeug.wrappers.response.Response.set_data(self,value:t.Union[bytes,str])->None
flask.werkzeug.wrappers.response.Response.stream(self)->'ResponseStream'
flask.werkzeug.wrappers.response.ResponseStream(self,response:Response)
flask.werkzeug.wrappers.response.ResponseStream.__init__(self,response:Response)
flask.werkzeug.wrappers.response.ResponseStream.close(self)->None
flask.werkzeug.wrappers.response.ResponseStream.encoding(self)->str
flask.werkzeug.wrappers.response.ResponseStream.flush(self)->None
flask.werkzeug.wrappers.response.ResponseStream.isatty(self)->bool
flask.werkzeug.wrappers.response.ResponseStream.tell(self)->int
flask.werkzeug.wrappers.response.ResponseStream.write(self,value:bytes)->int
flask.werkzeug.wrappers.response.ResponseStream.writelines(self,seq:t.Iterable[bytes])->None
flask.werkzeug.wrappers.response.ResponseStreamMixin(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.response.ResponseStreamMixin.__init__(self,*args:t.Any,**kwargs:t.Any)
flask.werkzeug.wrappers.response._clean_accept_ranges(accept_ranges:t.Union[bool,str])->str
flask.werkzeug.wrappers.response._iter_encoded(iterable:t.Iterable[t.Union[str,bytes]],charset:str)->t.Iterator[bytes]
flask.werkzeug.wrappers.response._warn_if_string(iterable:t.Iterable)->None


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/importlib_metadata/_text.py----------------------------------------
A:flask.importlib_metadata._text.pattern->re.compile(re.escape(splitter), re.I)
flask.importlib_metadata._text.FoldedCase(str)
flask.importlib_metadata._text.FoldedCase.__contains__(self,other)
flask.importlib_metadata._text.FoldedCase.__eq__(self,other)
flask.importlib_metadata._text.FoldedCase.__gt__(self,other)
flask.importlib_metadata._text.FoldedCase.__hash__(self)
flask.importlib_metadata._text.FoldedCase.__lt__(self,other)
flask.importlib_metadata._text.FoldedCase.__ne__(self,other)
flask.importlib_metadata._text.FoldedCase.in_(self,other)
flask.importlib_metadata._text.FoldedCase.index(self,sub)
flask.importlib_metadata._text.FoldedCase.lower(self)
flask.importlib_metadata._text.FoldedCase.split(self,splitter='',maxsplit=0)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/importlib_metadata/_functools.py----------------------------------------
A:flask.importlib_metadata._functools.bound_method->types.MethodType(method, self)
A:flask.importlib_metadata._functools.cached_method->cache_wrapper(bound_method)
flask.importlib_metadata._functools.method_cache(method,cache_wrapper=None)
flask.importlib_metadata._functools.pass_none(func)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/importlib_metadata/_meta.py----------------------------------------
A:flask.importlib_metadata._meta._T->TypeVar('_T')
flask.importlib_metadata._meta.PackageMetadata(Protocol)
flask.importlib_metadata._meta.PackageMetadata.__contains__(self,item:str)->bool
flask.importlib_metadata._meta.PackageMetadata.__getitem__(self,key:str)->str
flask.importlib_metadata._meta.PackageMetadata.__iter__(self)->Iterator[str]
flask.importlib_metadata._meta.PackageMetadata.__len__(self)->int
flask.importlib_metadata._meta.PackageMetadata.get_all(self,name:str,failobj:_T=...)->Union[List[Any], _T]
flask.importlib_metadata._meta.PackageMetadata.json(self)->Dict[str, Union[str, List[str]]]
flask.importlib_metadata._meta.SimplePath(Protocol)
flask.importlib_metadata._meta.SimplePath.__truediv__(self)->'SimplePath'
flask.importlib_metadata._meta.SimplePath.joinpath(self)->'SimplePath'
flask.importlib_metadata._meta.SimplePath.parent(self)->'SimplePath'
flask.importlib_metadata._meta.SimplePath.read_text(self)->str


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/importlib_metadata/_compat.py----------------------------------------
flask.importlib_metadata._compat.NullFinder
flask.importlib_metadata._compat.NullFinder.find_spec(*args,**kwargs)
flask.importlib_metadata._compat.disable_stdlib_finder()
flask.importlib_metadata._compat.install(cls)
flask.importlib_metadata._compat.pypy_partial(val)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/importlib_metadata/_collections.py----------------------------------------
flask.importlib_metadata._collections.FreezableDefaultDict(collections.defaultdict)
flask.importlib_metadata._collections.FreezableDefaultDict.__missing__(self,key)
flask.importlib_metadata._collections.FreezableDefaultDict.freeze(self)
flask.importlib_metadata._collections.Pair(collections.namedtuple('Pair','namevalue'))
flask.importlib_metadata._collections.Pair.parse(cls,text)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/importlib_metadata/__init__.py----------------------------------------
A:flask.importlib_metadata.__init__._sample->textwrap.dedent('\n        [sec1]\n        # comments ignored\n        a = 1\n        b = 2\n\n        [sec2]\n        a = 2\n        ').lstrip()
A:flask.importlib_metadata.__init__.lines->filter(filter_, map(str.strip, text.splitlines()))
A:flask.importlib_metadata.__init__.name->value.strip('[]')
A:flask.importlib_metadata.__init__._warn->functools.partial(warnings.warn, 'SelectableGroups dict interface is deprecated. Use select.', DeprecationWarning, stacklevel=pypy_partial(2))
A:flask.importlib_metadata.__init__.pattern->re.compile('(?P<module>[\\w.]+)\\s*(:\\s*(?P<attr>[\\w.]+))?\\s*(?P<extras>\\[.*\\])?\\s*$')
A:flask.importlib_metadata.__init__.match->self.pattern.match(self.value)
A:flask.importlib_metadata.__init__.module->import_module(match.group('module'))
A:flask.importlib_metadata.__init__.attrs->filter(None, (match.group('attr') or '').split('.'))
A:flask.importlib_metadata.__init__.locals()[method_name]->_wrap_deprecated_method(method_name)
A:flask.importlib_metadata.__init__.other->tuple(other)
A:flask.importlib_metadata.__init__.by_group->operator.attrgetter('group')
A:flask.importlib_metadata.__init__.ordered->sorted(eps, key=by_group)
A:flask.importlib_metadata.__init__.grouped->itertools.groupby(ordered, by_group)
A:flask.importlib_metadata.__init__.groups->super(Deprecated, self).values()
A:flask.importlib_metadata.__init__.(self.mode, _, self.value)->spec.partition('=')
A:flask.importlib_metadata.__init__.dists->resolver(DistributionFinder.Context(name=name))
A:flask.importlib_metadata.__init__.dist->next(iter(dists), None)
A:flask.importlib_metadata.__init__.context->kwargs.pop('context', None)
A:flask.importlib_metadata.__init__.system->pep517.build.compat_system(root)
A:flask.importlib_metadata.__init__.builder->functools.partial(meta.build, source_dir=root, system=system)
A:flask.importlib_metadata.__init__.result->PackagePath(name)
A:flask.importlib_metadata.__init__.text->self.read_text('SOURCES.txt')
A:flask.importlib_metadata.__init__.source->self.read_text('requires.txt')
A:flask.importlib_metadata.__init__.(extra, sep, markers)->section.partition(':')
A:flask.importlib_metadata.__init__.conditions->list(filter(None, [markers, make_condition(extra)]))
A:flask.importlib_metadata.__init__.space->url_req_space(section.value)
A:flask.importlib_metadata.__init__.self.root->str(root)
A:flask.importlib_metadata.__init__.zip_path->zipp.Path(self.root)
A:flask.importlib_metadata.__init__.names->zipp.Path(self.root).root.namelist()
A:flask.importlib_metadata.__init__.base->os.path.basename(path.root).lower()
A:flask.importlib_metadata.__init__.base_is_egg->os.path.basename(path.root).lower().endswith('.egg')
A:flask.importlib_metadata.__init__.self.infos->FreezableDefaultDict(list)
A:flask.importlib_metadata.__init__.self.eggs->FreezableDefaultDict(list)
A:flask.importlib_metadata.__init__.low->child.lower()
A:flask.importlib_metadata.__init__.normalized->Prepared.normalize(name)
A:flask.importlib_metadata.__init__.legacy_normalized->Prepared.legacy_normalize(name)
A:flask.importlib_metadata.__init__.self.normalized->self.normalize(name)
A:flask.importlib_metadata.__init__.self.legacy_normalized->self.legacy_normalize(name)
A:flask.importlib_metadata.__init__.found->self._search_paths(context.name, context.path)
A:flask.importlib_metadata.__init__.prepared->Prepared(name)
A:flask.importlib_metadata.__init__.stem->os.path.basename(str(self._path))
A:flask.importlib_metadata.__init__.(name, ext)->os.path.splitext(stem)
A:flask.importlib_metadata.__init__.(name, sep, rest)->os.path.basename(str(self._path)).partition('-')
A:flask.importlib_metadata.__init__.norm_name->operator.attrgetter('_normalized_name')
A:flask.importlib_metadata.__init__.unique->functools.partial(unique_everseen, key=norm_name)
A:flask.importlib_metadata.__init__.eps->itertools.chain.from_iterable((dist.entry_points for dist in unique(distributions())))
A:flask.importlib_metadata.__init__.pkg_to_dist->collections.defaultdict(list)
flask.importlib_metadata.__init__.Deprecated
flask.importlib_metadata.__init__.Deprecated.__contains__(self,*args)
flask.importlib_metadata.__init__.Deprecated.__getitem__(self,name)
flask.importlib_metadata.__init__.Deprecated.__iter__(self)
flask.importlib_metadata.__init__.Deprecated.get(self,name,default=None)
flask.importlib_metadata.__init__.Deprecated.keys(self)
flask.importlib_metadata.__init__.Deprecated.values(self)
flask.importlib_metadata.__init__.DeprecatedList(list)
flask.importlib_metadata.__init__.DeprecatedList.__add__(self,other)
flask.importlib_metadata.__init__.DeprecatedList.__eq__(self,other)
flask.importlib_metadata.__init__.DeprecatedList._wrap_deprecated_method(method_name:str)
flask.importlib_metadata.__init__.DeprecatedTuple
flask.importlib_metadata.__init__.DeprecatedTuple.__getitem__(self,item)
flask.importlib_metadata.__init__.Distribution
flask.importlib_metadata.__init__.Distribution._convert_egg_info_reqs_to_simple_reqs(sections)
flask.importlib_metadata.__init__.Distribution._deps_from_requires_text(cls,source)
flask.importlib_metadata.__init__.Distribution._discover_resolvers()
flask.importlib_metadata.__init__.Distribution._local(cls,root='.')
flask.importlib_metadata.__init__.Distribution._normalized_name(self)
flask.importlib_metadata.__init__.Distribution._read_dist_info_reqs(self)
flask.importlib_metadata.__init__.Distribution._read_egg_info_reqs(self)
flask.importlib_metadata.__init__.Distribution._read_files_distinfo(self)
flask.importlib_metadata.__init__.Distribution._read_files_egginfo(self)
flask.importlib_metadata.__init__.Distribution.at(path)
flask.importlib_metadata.__init__.Distribution.discover(cls,**kwargs)
flask.importlib_metadata.__init__.Distribution.entry_points(self)
flask.importlib_metadata.__init__.Distribution.files(self)
flask.importlib_metadata.__init__.Distribution.from_name(cls,name)
flask.importlib_metadata.__init__.Distribution.locate_file(self,path)
flask.importlib_metadata.__init__.Distribution.metadata(self)->_meta.PackageMetadata
flask.importlib_metadata.__init__.Distribution.name(self)
flask.importlib_metadata.__init__.Distribution.read_text(self,filename)
flask.importlib_metadata.__init__.Distribution.requires(self)
flask.importlib_metadata.__init__.Distribution.version(self)
flask.importlib_metadata.__init__.DistributionFinder(MetaPathFinder)
flask.importlib_metadata.__init__.DistributionFinder.Context(self,**kwargs)
flask.importlib_metadata.__init__.DistributionFinder.Context.__init__(self,**kwargs)
flask.importlib_metadata.__init__.DistributionFinder.Context.path(self)
flask.importlib_metadata.__init__.DistributionFinder.find_distributions(self,context=Context())
flask.importlib_metadata.__init__.EntryPoint(self,name,value,group)
flask.importlib_metadata.__init__.EntryPoint.__eq__(self,other)
flask.importlib_metadata.__init__.EntryPoint.__hash__(self)
flask.importlib_metadata.__init__.EntryPoint.__init__(self,name,value,group)
flask.importlib_metadata.__init__.EntryPoint.__iter__(self)
flask.importlib_metadata.__init__.EntryPoint.__lt__(self,other)
flask.importlib_metadata.__init__.EntryPoint.__repr__(self)
flask.importlib_metadata.__init__.EntryPoint.__setattr__(self,name,value)
flask.importlib_metadata.__init__.EntryPoint._for(self,dist)
flask.importlib_metadata.__init__.EntryPoint._key(self)
flask.importlib_metadata.__init__.EntryPoint.attr(self)
flask.importlib_metadata.__init__.EntryPoint.extras(self)
flask.importlib_metadata.__init__.EntryPoint.load(self)
flask.importlib_metadata.__init__.EntryPoint.matches(self,**params)
flask.importlib_metadata.__init__.EntryPoint.module(self)
flask.importlib_metadata.__init__.EntryPoints(DeprecatedList)
flask.importlib_metadata.__init__.EntryPoints.__getitem__(self,name)
flask.importlib_metadata.__init__.EntryPoints._from_text(text)
flask.importlib_metadata.__init__.EntryPoints._from_text_for(cls,text,dist)
flask.importlib_metadata.__init__.EntryPoints.groups(self)
flask.importlib_metadata.__init__.EntryPoints.names(self)
flask.importlib_metadata.__init__.EntryPoints.select(self,**params)
flask.importlib_metadata.__init__.FastPath(self,root)
flask.importlib_metadata.__init__.FastPath.__init__(self,root)
flask.importlib_metadata.__init__.FastPath.children(self)
flask.importlib_metadata.__init__.FastPath.joinpath(self,child)
flask.importlib_metadata.__init__.FastPath.lookup(self,mtime)
flask.importlib_metadata.__init__.FastPath.mtime(self)
flask.importlib_metadata.__init__.FastPath.search(self,name)
flask.importlib_metadata.__init__.FastPath.zip_children(self)
flask.importlib_metadata.__init__.FileHash(self,spec)
flask.importlib_metadata.__init__.FileHash.__init__(self,spec)
flask.importlib_metadata.__init__.FileHash.__repr__(self)
flask.importlib_metadata.__init__.Lookup(self,path:FastPath)
flask.importlib_metadata.__init__.Lookup.__init__(self,path:FastPath)
flask.importlib_metadata.__init__.Lookup.search(self,prepared)
flask.importlib_metadata.__init__.MetadataPathFinder(NullFinder,DistributionFinder)
flask.importlib_metadata.__init__.MetadataPathFinder._search_paths(cls,name,paths)
flask.importlib_metadata.__init__.MetadataPathFinder.find_distributions(self,context=DistributionFinder.Context())
flask.importlib_metadata.__init__.MetadataPathFinder.invalidate_caches(cls)
flask.importlib_metadata.__init__.PackageNotFoundError(ModuleNotFoundError)
flask.importlib_metadata.__init__.PackageNotFoundError.__str__(self)
flask.importlib_metadata.__init__.PackageNotFoundError.name(self)
flask.importlib_metadata.__init__.PackagePath(pathlib.PurePosixPath)
flask.importlib_metadata.__init__.PackagePath.locate(self)
flask.importlib_metadata.__init__.PackagePath.read_binary(self)
flask.importlib_metadata.__init__.PackagePath.read_text(self,encoding='utf-8')
flask.importlib_metadata.__init__.PathDistribution(self,path:SimplePath)
flask.importlib_metadata.__init__.PathDistribution.__init__(self,path:SimplePath)
flask.importlib_metadata.__init__.PathDistribution._name_from_stem(self,stem)
flask.importlib_metadata.__init__.PathDistribution._normalized_name(self)
flask.importlib_metadata.__init__.PathDistribution.locate_file(self,path)
flask.importlib_metadata.__init__.PathDistribution.read_text(self,filename)
flask.importlib_metadata.__init__.Prepared(self,name)
flask.importlib_metadata.__init__.Prepared.__bool__(self)
flask.importlib_metadata.__init__.Prepared.__init__(self,name)
flask.importlib_metadata.__init__.Prepared.legacy_normalize(name)
flask.importlib_metadata.__init__.Prepared.normalize(name)
flask.importlib_metadata.__init__.Sectioned
flask.importlib_metadata.__init__.Sectioned.read(text,filter_=None)
flask.importlib_metadata.__init__.Sectioned.section_pairs(cls,text)
flask.importlib_metadata.__init__.Sectioned.valid(line)
flask.importlib_metadata.__init__.SelectableGroups(Deprecated,dict)
flask.importlib_metadata.__init__.SelectableGroups._all(self)
flask.importlib_metadata.__init__.SelectableGroups.groups(self)
flask.importlib_metadata.__init__.SelectableGroups.load(cls,eps)
flask.importlib_metadata.__init__.SelectableGroups.names(self)
flask.importlib_metadata.__init__.SelectableGroups.select(self,**params)
flask.importlib_metadata.__init__._top_level_declared(dist)
flask.importlib_metadata.__init__._top_level_inferred(dist)
flask.importlib_metadata.__init__.distribution(distribution_name)
flask.importlib_metadata.__init__.distributions(**kwargs)
flask.importlib_metadata.__init__.entry_points(**params)->Union[EntryPoints, SelectableGroups]
flask.importlib_metadata.__init__.files(distribution_name)
flask.importlib_metadata.__init__.metadata(distribution_name)->_meta.PackageMetadata
flask.importlib_metadata.__init__.packages_distributions()->Mapping[str, List[str]]
flask.importlib_metadata.__init__.requires(distribution_name)
flask.importlib_metadata.__init__.version(distribution_name)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/importlib_metadata/_itertools.py----------------------------------------
A:flask.importlib_metadata._itertools.seen->set()
A:flask.importlib_metadata._itertools.k->key(element)
flask.importlib_metadata._itertools.always_iterable(obj,base_type=(str,bytes))
flask.importlib_metadata._itertools.unique_everseen(iterable,key=None)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/importlib_metadata/_adapters.py----------------------------------------
A:flask.importlib_metadata._adapters.multiple_use_keys->set(map(FoldedCase, ['Classifier', 'Obsoletes-Dist', 'Platform', 'Project-URL', 'Provides-Dist', 'Provides-Extra', 'Requires-Dist', 'Requires-External', 'Supported-Platform', 'Dynamic']))
A:flask.importlib_metadata._adapters.res->super().__new__(cls)
A:flask.importlib_metadata._adapters.self._headers->self._repair_headers()
A:flask.importlib_metadata._adapters.value->re.split('\\s+', value)
A:flask.importlib_metadata._adapters.tk->key.lower().replace('-', '_')
flask.importlib_metadata._adapters.Message(self,*args,**kwargs)
flask.importlib_metadata._adapters.Message.__init__(self,*args,**kwargs)
flask.importlib_metadata._adapters.Message.__iter__(self)
flask.importlib_metadata._adapters.Message._repair_headers(self)
flask.importlib_metadata._adapters.Message.json(self)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/nativetypes.py----------------------------------------
A:flask.jinja2.nativetypes.head->list(islice(values, 2))
A:flask.jinja2.nativetypes.raw->''.join([str(v) for v in chain(head, values)])
A:flask.jinja2.nativetypes.const->node.as_const(frame.eval_ctx)
A:flask.jinja2.nativetypes.ctx->self.new_context(dict(*args, **kwargs))
flask.jinja2.nativetypes.NativeCodeGenerator(CodeGenerator)
flask.jinja2.nativetypes.NativeCodeGenerator._default_finalize(value:t.Any)->t.Any
flask.jinja2.nativetypes.NativeCodeGenerator._output_child_post(self,node:nodes.Expr,frame:Frame,finalize:CodeGenerator._FinalizeInfo)->None
flask.jinja2.nativetypes.NativeCodeGenerator._output_child_pre(self,node:nodes.Expr,frame:Frame,finalize:CodeGenerator._FinalizeInfo)->None
flask.jinja2.nativetypes.NativeCodeGenerator._output_child_to_const(self,node:nodes.Expr,frame:Frame,finalize:CodeGenerator._FinalizeInfo)->t.Any
flask.jinja2.nativetypes.NativeCodeGenerator._output_const_repr(self,group:t.Iterable[t.Any])->str
flask.jinja2.nativetypes.NativeEnvironment(Environment)
flask.jinja2.nativetypes.NativeTemplate(Template)
flask.jinja2.nativetypes.NativeTemplate.render(self,*args:t.Any,**kwargs:t.Any)->t.Any
flask.jinja2.nativetypes.native_concat(values:t.Iterable[t.Any])->t.Optional[t.Any]


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/tests.py----------------------------------------
flask.jinja2.tests.test_boolean(value:t.Any)->bool
flask.jinja2.tests.test_defined(value:t.Any)->bool
flask.jinja2.tests.test_divisibleby(value:int,num:int)->bool
flask.jinja2.tests.test_escaped(value:t.Any)->bool
flask.jinja2.tests.test_even(value:int)->bool
flask.jinja2.tests.test_false(value:t.Any)->bool
flask.jinja2.tests.test_filter(env:'Environment',value:str)->bool
flask.jinja2.tests.test_float(value:t.Any)->bool
flask.jinja2.tests.test_in(value:t.Any,seq:t.Container)->bool
flask.jinja2.tests.test_integer(value:t.Any)->bool
flask.jinja2.tests.test_iterable(value:t.Any)->bool
flask.jinja2.tests.test_lower(value:str)->bool
flask.jinja2.tests.test_mapping(value:t.Any)->bool
flask.jinja2.tests.test_none(value:t.Any)->bool
flask.jinja2.tests.test_number(value:t.Any)->bool
flask.jinja2.tests.test_odd(value:int)->bool
flask.jinja2.tests.test_sameas(value:t.Any,other:t.Any)->bool
flask.jinja2.tests.test_sequence(value:t.Any)->bool
flask.jinja2.tests.test_string(value:t.Any)->bool
flask.jinja2.tests.test_test(env:'Environment',value:str)->bool
flask.jinja2.tests.test_true(value:t.Any)->bool
flask.jinja2.tests.test_undefined(value:t.Any)->bool
flask.jinja2.tests.test_upper(value:str)->bool


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/loaders.py----------------------------------------
A:flask.jinja2.loaders.(source, filename, uptodate)->self.get_source(environment, name)
A:flask.jinja2.loaders.bucket->bcc.get_bucket(environment, name, filename, source)
A:flask.jinja2.loaders.code->environment.compile(source, name, filename)
A:flask.jinja2.loaders.pieces->split_template_path(template)
A:flask.jinja2.loaders.filename->os.path.join(searchpath, *pieces)
A:flask.jinja2.loaders.f->open_if_exists(filename)
A:flask.jinja2.loaders.contents->open_if_exists(filename).read().decode(self.encoding)
A:flask.jinja2.loaders.mtime->os.path.getmtime(p)
A:flask.jinja2.loaders.found->set()
A:flask.jinja2.loaders.walk_dir->os.walk(searchpath, followlinks=self.followlinks)
A:flask.jinja2.loaders.template->os.path.join(dirpath, filename)[len(searchpath):].strip(os.path.sep).replace(os.path.sep, '/')
A:flask.jinja2.loaders.package_path->os.path.normpath(package_path).rstrip(os.path.sep)
A:flask.jinja2.loaders.spec->importlib.util.find_spec(package_name)
A:flask.jinja2.loaders.pkgdir->next(iter(spec.submodule_search_locations))
A:flask.jinja2.loaders.template_root->os.path.join(pkgdir, package_path)
A:flask.jinja2.loaders.root->os.path.join(root, package_path)
A:flask.jinja2.loaders.p->os.path.join(self._template_root, *split_template_path(template))
A:flask.jinja2.loaders.source->self._loader.get_data(p)
A:flask.jinja2.loaders.offset->len(prefix)
A:flask.jinja2.loaders.dirpath->dirpath[offset:].lstrip(os.path.sep)
A:flask.jinja2.loaders.rv->self.load_func(template)
A:flask.jinja2.loaders.(prefix, name)->os.path.join(dirpath, filename)[len(searchpath):].strip(os.path.sep).replace(os.path.sep, '/').split(self.delimiter, 1)
A:flask.jinja2.loaders.(loader, name)->self.get_loader(template)
A:flask.jinja2.loaders.(loader, local_name)->self.get_loader(name)
A:flask.jinja2.loaders.mod->__import__(module, None, None, ['root'])
A:flask.jinja2.loaders.sys.modules[package_name]->weakref.proxy(mod, lambda x: sys.modules.pop(package_name, None))
A:flask.jinja2.loaders.key->self.get_template_key(name)
flask.jinja2.BaseLoader
flask.jinja2.BaseLoader.get_source(self,environment:'Environment',template:str)->t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]
flask.jinja2.BaseLoader.list_templates(self)->t.List[str]
flask.jinja2.BaseLoader.load(self,environment:'Environment',name:str,globals:t.Optional[t.MutableMapping[str,t.Any]]=None)->'Template'
flask.jinja2.ChoiceLoader(self,loaders:t.Sequence[BaseLoader])
flask.jinja2.ChoiceLoader.get_source(self,environment:'Environment',template:str)->t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]
flask.jinja2.ChoiceLoader.list_templates(self)->t.List[str]
flask.jinja2.ChoiceLoader.load(self,environment:'Environment',name:str,globals:t.Optional[t.MutableMapping[str,t.Any]]=None)->'Template'
flask.jinja2.DictLoader(self,mapping:t.Mapping[str,str])
flask.jinja2.DictLoader.get_source(self,environment:'Environment',template:str)->t.Tuple[str, None, t.Callable[[], bool]]
flask.jinja2.DictLoader.list_templates(self)->t.List[str]
flask.jinja2.FileSystemLoader(self,searchpath:t.Union[str,os.PathLike,t.Sequence[t.Union[str,os.PathLike]]],encoding:str='utf-8',followlinks:bool=False)
flask.jinja2.FileSystemLoader.get_source(self,environment:'Environment',template:str)->t.Tuple[str, str, t.Callable[[], bool]]
flask.jinja2.FileSystemLoader.list_templates(self)->t.List[str]
flask.jinja2.FunctionLoader(self,load_func:t.Callable[[str],t.Optional[t.Union[str,t.Tuple[str,t.Optional[str],t.Optional[t.Callable[[],bool]]]]]])
flask.jinja2.FunctionLoader.get_source(self,environment:'Environment',template:str)->t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]
flask.jinja2.ModuleLoader(self,path:t.Union[str,os.PathLike,t.Sequence[t.Union[str,os.PathLike]]])
flask.jinja2.ModuleLoader.get_module_filename(name:str)->str
flask.jinja2.ModuleLoader.get_template_key(name:str)->str
flask.jinja2.ModuleLoader.load(self,environment:'Environment',name:str,globals:t.Optional[t.MutableMapping[str,t.Any]]=None)->'Template'
flask.jinja2.PackageLoader(self,package_name:str,package_path:'str'='templates',encoding:str='utf-8')
flask.jinja2.PackageLoader.get_source(self,environment:'Environment',template:str)->t.Tuple[str, str, t.Optional[t.Callable[[], bool]]]
flask.jinja2.PackageLoader.list_templates(self)->t.List[str]
flask.jinja2.PrefixLoader(self,mapping:t.Mapping[str,BaseLoader],delimiter:str='/')
flask.jinja2.PrefixLoader.get_loader(self,template:str)->t.Tuple[BaseLoader, str]
flask.jinja2.PrefixLoader.get_source(self,environment:'Environment',template:str)->t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]
flask.jinja2.PrefixLoader.list_templates(self)->t.List[str]
flask.jinja2.PrefixLoader.load(self,environment:'Environment',name:str,globals:t.Optional[t.MutableMapping[str,t.Any]]=None)->'Template'
flask.jinja2.loaders.BaseLoader
flask.jinja2.loaders.BaseLoader.get_source(self,environment:'Environment',template:str)->t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]
flask.jinja2.loaders.BaseLoader.list_templates(self)->t.List[str]
flask.jinja2.loaders.BaseLoader.load(self,environment:'Environment',name:str,globals:t.Optional[t.MutableMapping[str,t.Any]]=None)->'Template'
flask.jinja2.loaders.ChoiceLoader(self,loaders:t.Sequence[BaseLoader])
flask.jinja2.loaders.ChoiceLoader.__init__(self,loaders:t.Sequence[BaseLoader])
flask.jinja2.loaders.ChoiceLoader.get_source(self,environment:'Environment',template:str)->t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]
flask.jinja2.loaders.ChoiceLoader.list_templates(self)->t.List[str]
flask.jinja2.loaders.ChoiceLoader.load(self,environment:'Environment',name:str,globals:t.Optional[t.MutableMapping[str,t.Any]]=None)->'Template'
flask.jinja2.loaders.DictLoader(self,mapping:t.Mapping[str,str])
flask.jinja2.loaders.DictLoader.__init__(self,mapping:t.Mapping[str,str])
flask.jinja2.loaders.DictLoader.get_source(self,environment:'Environment',template:str)->t.Tuple[str, None, t.Callable[[], bool]]
flask.jinja2.loaders.DictLoader.list_templates(self)->t.List[str]
flask.jinja2.loaders.FileSystemLoader(self,searchpath:t.Union[str,os.PathLike,t.Sequence[t.Union[str,os.PathLike]]],encoding:str='utf-8',followlinks:bool=False)
flask.jinja2.loaders.FileSystemLoader.__init__(self,searchpath:t.Union[str,os.PathLike,t.Sequence[t.Union[str,os.PathLike]]],encoding:str='utf-8',followlinks:bool=False)
flask.jinja2.loaders.FileSystemLoader.get_source(self,environment:'Environment',template:str)->t.Tuple[str, str, t.Callable[[], bool]]
flask.jinja2.loaders.FileSystemLoader.list_templates(self)->t.List[str]
flask.jinja2.loaders.FunctionLoader(self,load_func:t.Callable[[str],t.Optional[t.Union[str,t.Tuple[str,t.Optional[str],t.Optional[t.Callable[[],bool]]]]]])
flask.jinja2.loaders.FunctionLoader.__init__(self,load_func:t.Callable[[str],t.Optional[t.Union[str,t.Tuple[str,t.Optional[str],t.Optional[t.Callable[[],bool]]]]]])
flask.jinja2.loaders.FunctionLoader.get_source(self,environment:'Environment',template:str)->t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]
flask.jinja2.loaders.ModuleLoader(self,path:t.Union[str,os.PathLike,t.Sequence[t.Union[str,os.PathLike]]])
flask.jinja2.loaders.ModuleLoader.__init__(self,path:t.Union[str,os.PathLike,t.Sequence[t.Union[str,os.PathLike]]])
flask.jinja2.loaders.ModuleLoader.get_module_filename(name:str)->str
flask.jinja2.loaders.ModuleLoader.get_template_key(name:str)->str
flask.jinja2.loaders.ModuleLoader.load(self,environment:'Environment',name:str,globals:t.Optional[t.MutableMapping[str,t.Any]]=None)->'Template'
flask.jinja2.loaders.PackageLoader(self,package_name:str,package_path:'str'='templates',encoding:str='utf-8')
flask.jinja2.loaders.PackageLoader.__init__(self,package_name:str,package_path:'str'='templates',encoding:str='utf-8')
flask.jinja2.loaders.PackageLoader.get_source(self,environment:'Environment',template:str)->t.Tuple[str, str, t.Optional[t.Callable[[], bool]]]
flask.jinja2.loaders.PackageLoader.list_templates(self)->t.List[str]
flask.jinja2.loaders.PrefixLoader(self,mapping:t.Mapping[str,BaseLoader],delimiter:str='/')
flask.jinja2.loaders.PrefixLoader.__init__(self,mapping:t.Mapping[str,BaseLoader],delimiter:str='/')
flask.jinja2.loaders.PrefixLoader.get_loader(self,template:str)->t.Tuple[BaseLoader, str]
flask.jinja2.loaders.PrefixLoader.get_source(self,environment:'Environment',template:str)->t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]
flask.jinja2.loaders.PrefixLoader.list_templates(self)->t.List[str]
flask.jinja2.loaders.PrefixLoader.load(self,environment:'Environment',name:str,globals:t.Optional[t.MutableMapping[str,t.Any]]=None)->'Template'
flask.jinja2.loaders._TemplateModule(ModuleType)
flask.jinja2.loaders.split_template_path(template:str)->t.List[str]


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/sandbox.py----------------------------------------
A:flask.jinja2.sandbox.F->typing.TypeVar('F', bound=t.Callable[..., t.Any])
A:flask.jinja2.sandbox.rng->range(*args)
A:flask.jinja2.sandbox.self.binop_table->self.default_binop_table.copy()
A:flask.jinja2.sandbox.self.unop_table->self.default_unop_table.copy()
A:flask.jinja2.sandbox.attr->str(argument)
A:flask.jinja2.sandbox.value->getattr(obj, attribute)
A:flask.jinja2.sandbox.formatter->SandboxedFormatter(self)
A:flask.jinja2.sandbox.rv->SandboxedFormatter(self).vformat(s, args, kwargs)
A:flask.jinja2.sandbox.fmt->inspect_format_method(__obj)
A:flask.jinja2.sandbox.(first, rest)->formatter_field_name_split(field_name)
A:flask.jinja2.sandbox.obj->self._env.getitem(obj, i)
flask.jinja2.sandbox.ImmutableSandboxedEnvironment(SandboxedEnvironment)
flask.jinja2.sandbox.ImmutableSandboxedEnvironment.is_safe_attribute(self,obj:t.Any,attr:str,value:t.Any)->bool
flask.jinja2.sandbox.SandboxedEnvironment(self,*args:t.Any,**kwargs:t.Any)
flask.jinja2.sandbox.SandboxedEnvironment.__init__(self,*args:t.Any,**kwargs:t.Any)
flask.jinja2.sandbox.SandboxedEnvironment.call(__self,__context:Context,__obj:t.Any,*args:t.Any,**kwargs:t.Any)->t.Any
flask.jinja2.sandbox.SandboxedEnvironment.call_binop(self,context:Context,operator:str,left:t.Any,right:t.Any)->t.Any
flask.jinja2.sandbox.SandboxedEnvironment.call_unop(self,context:Context,operator:str,arg:t.Any)->t.Any
flask.jinja2.sandbox.SandboxedEnvironment.format_string(self,s:str,args:t.Tuple[t.Any,...],kwargs:t.Dict[str,t.Any],format_func:t.Optional[t.Callable]=None)->str
flask.jinja2.sandbox.SandboxedEnvironment.getattr(self,obj:t.Any,attribute:str)->t.Union[t.Any, Undefined]
flask.jinja2.sandbox.SandboxedEnvironment.getitem(self,obj:t.Any,argument:t.Union[str,t.Any])->t.Union[t.Any, Undefined]
flask.jinja2.sandbox.SandboxedEnvironment.is_safe_attribute(self,obj:t.Any,attr:str,value:t.Any)->bool
flask.jinja2.sandbox.SandboxedEnvironment.is_safe_callable(self,obj:t.Any)->bool
flask.jinja2.sandbox.SandboxedEnvironment.unsafe_undefined(self,obj:t.Any,attribute:str)->Undefined
flask.jinja2.sandbox.SandboxedEscapeFormatter(SandboxedFormatter,EscapeFormatter)
flask.jinja2.sandbox.SandboxedFormatter(self,env:Environment,**kwargs:t.Any)
flask.jinja2.sandbox.SandboxedFormatter.__init__(self,env:Environment,**kwargs:t.Any)
flask.jinja2.sandbox.SandboxedFormatter.get_field(self,field_name:str,args:t.Sequence[t.Any],kwargs:t.Mapping[str,t.Any])->t.Tuple[t.Any, str]
flask.jinja2.sandbox.inspect_format_method(callable:t.Callable)->t.Optional[str]
flask.jinja2.sandbox.is_internal_attribute(obj:t.Any,attr:str)->bool
flask.jinja2.sandbox.modifies_known_mutable(obj:t.Any,attr:str)->bool
flask.jinja2.sandbox.safe_range(*args:int)->range
flask.jinja2.sandbox.unsafe(f:F)->F


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/lexer.py----------------------------------------
A:flask.jinja2.lexer.whitespace_re->re.compile('\\s+')
A:flask.jinja2.lexer.newline_re->re.compile('(\\r\\n|\\r|\\n)')
A:flask.jinja2.lexer.string_re->re.compile('(\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\'|"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)")', re.S)
A:flask.jinja2.lexer.integer_re->re.compile('\n    (\n        0b(_?[0-1])+ # binary\n    |\n        0o(_?[0-7])+ # octal\n    |\n        0x(_?[\\da-f])+ # hex\n    |\n        [1-9](_?\\d)* # decimal\n    |\n        0(_?0)* # decimal zero\n    )\n    ', re.IGNORECASE | re.VERBOSE)
A:flask.jinja2.lexer.float_re->re.compile("\n    (?<!\\.)  # doesn't start with a .\n    (\\d+_)*\\d+  # digits, possibly _ separated\n    (\n        (\\.(\\d+_)*\\d+)?  # optional fractional part\n        e[+\\-]?(\\d+_)*\\d+  # exponent part\n    |\n        \\.(\\d+_)*\\d+  # required fractional part\n    )\n    ", re.IGNORECASE | re.VERBOSE)
A:flask.jinja2.lexer.TOKEN_ADD->intern('add')
A:flask.jinja2.lexer.TOKEN_ASSIGN->intern('assign')
A:flask.jinja2.lexer.TOKEN_COLON->intern('colon')
A:flask.jinja2.lexer.TOKEN_COMMA->intern('comma')
A:flask.jinja2.lexer.TOKEN_DIV->intern('div')
A:flask.jinja2.lexer.TOKEN_DOT->intern('dot')
A:flask.jinja2.lexer.TOKEN_EQ->intern('eq')
A:flask.jinja2.lexer.TOKEN_FLOORDIV->intern('floordiv')
A:flask.jinja2.lexer.TOKEN_GT->intern('gt')
A:flask.jinja2.lexer.TOKEN_GTEQ->intern('gteq')
A:flask.jinja2.lexer.TOKEN_LBRACE->intern('lbrace')
A:flask.jinja2.lexer.TOKEN_LBRACKET->intern('lbracket')
A:flask.jinja2.lexer.TOKEN_LPAREN->intern('lparen')
A:flask.jinja2.lexer.TOKEN_LT->intern('lt')
A:flask.jinja2.lexer.TOKEN_LTEQ->intern('lteq')
A:flask.jinja2.lexer.TOKEN_MOD->intern('mod')
A:flask.jinja2.lexer.TOKEN_MUL->intern('mul')
A:flask.jinja2.lexer.TOKEN_NE->intern('ne')
A:flask.jinja2.lexer.TOKEN_PIPE->intern('pipe')
A:flask.jinja2.lexer.TOKEN_POW->intern('pow')
A:flask.jinja2.lexer.TOKEN_RBRACE->intern('rbrace')
A:flask.jinja2.lexer.TOKEN_RBRACKET->intern('rbracket')
A:flask.jinja2.lexer.TOKEN_RPAREN->intern('rparen')
A:flask.jinja2.lexer.TOKEN_SEMICOLON->intern('semicolon')
A:flask.jinja2.lexer.TOKEN_SUB->intern('sub')
A:flask.jinja2.lexer.TOKEN_TILDE->intern('tilde')
A:flask.jinja2.lexer.TOKEN_WHITESPACE->intern('whitespace')
A:flask.jinja2.lexer.TOKEN_FLOAT->intern('float')
A:flask.jinja2.lexer.TOKEN_INTEGER->intern('integer')
A:flask.jinja2.lexer.TOKEN_NAME->intern('name')
A:flask.jinja2.lexer.TOKEN_STRING->intern('string')
A:flask.jinja2.lexer.TOKEN_OPERATOR->intern('operator')
A:flask.jinja2.lexer.TOKEN_BLOCK_BEGIN->intern('block_begin')
A:flask.jinja2.lexer.TOKEN_BLOCK_END->intern('block_end')
A:flask.jinja2.lexer.TOKEN_VARIABLE_BEGIN->intern('variable_begin')
A:flask.jinja2.lexer.TOKEN_VARIABLE_END->intern('variable_end')
A:flask.jinja2.lexer.TOKEN_RAW_BEGIN->intern('raw_begin')
A:flask.jinja2.lexer.TOKEN_RAW_END->intern('raw_end')
A:flask.jinja2.lexer.TOKEN_COMMENT_BEGIN->intern('comment_begin')
A:flask.jinja2.lexer.TOKEN_COMMENT_END->intern('comment_end')
A:flask.jinja2.lexer.TOKEN_COMMENT->intern('comment')
A:flask.jinja2.lexer.TOKEN_LINESTATEMENT_BEGIN->intern('linestatement_begin')
A:flask.jinja2.lexer.TOKEN_LINESTATEMENT_END->intern('linestatement_end')
A:flask.jinja2.lexer.TOKEN_LINECOMMENT_BEGIN->intern('linecomment_begin')
A:flask.jinja2.lexer.TOKEN_LINECOMMENT_END->intern('linecomment_end')
A:flask.jinja2.lexer.TOKEN_LINECOMMENT->intern('linecomment')
A:flask.jinja2.lexer.TOKEN_DATA->intern('data')
A:flask.jinja2.lexer.TOKEN_INITIAL->intern('initial')
A:flask.jinja2.lexer.TOKEN_EOF->intern('eof')
A:flask.jinja2.lexer.operator_re->re.compile(f"({'|'.join((re.escape(x) for x in sorted(operators, key=lambda x: -len(x))))})")
A:flask.jinja2.lexer.ignored_tokens->frozenset([TOKEN_COMMENT_BEGIN, TOKEN_COMMENT, TOKEN_COMMENT_END, TOKEN_WHITESPACE, TOKEN_LINECOMMENT_BEGIN, TOKEN_LINECOMMENT_END, TOKEN_LINECOMMENT])
A:flask.jinja2.lexer.ignore_if_empty->frozenset([TOKEN_WHITESPACE, TOKEN_DATA, TOKEN_COMMENT, TOKEN_LINECOMMENT])
A:flask.jinja2.lexer.(type, value)->describe_token_expr(expr).split(':', 1)
A:flask.jinja2.lexer.self._iter->iter(())
A:flask.jinja2.lexer.self.current->Token(self.current.lineno, TOKEN_EOF, '')
A:flask.jinja2.lexer.old_token->next(self)
A:flask.jinja2.lexer.expr->describe_token_expr(expr)
A:flask.jinja2.lexer.lexer->_lexer_cache.get(key)
A:flask.jinja2.lexer._lexer_cache[key]lexer->Lexer(environment)
A:flask.jinja2.lexer.root_tag_rules->compile_rules(environment)
A:flask.jinja2.lexer.block_start_re->e(environment.block_start_string)
A:flask.jinja2.lexer.block_end_re->e(environment.block_end_string)
A:flask.jinja2.lexer.comment_end_re->e(environment.comment_end_string)
A:flask.jinja2.lexer.variable_end_re->e(environment.variable_end_string)
A:flask.jinja2.lexer.root_parts_re->'|'.join([root_raw_re] + [f'(?P<{n}>{r}(\\-|\\+|))' for (n, r) in root_tag_rules])
A:flask.jinja2.lexer.stream->self.tokeniter(source, name, filename, state)
A:flask.jinja2.lexer.value->literal_eval(value_str.replace('_', ''))
A:flask.jinja2.lexer.msg->str(e).split(':')[-1].strip()
A:flask.jinja2.lexer.source->'\n'.join(lines)
A:flask.jinja2.lexer.source_length->len(source)
A:flask.jinja2.lexer.m->regex.match(source, pos)
A:flask.jinja2.lexer.groups->regex.match(source, pos).groups()
A:flask.jinja2.lexer.strip_sign->next((g for g in groups[2::2] if g is not None))
A:flask.jinja2.lexer.stripped->text.rstrip()
A:flask.jinja2.lexer.newlines_stripped->text[len(stripped):].count('\n')
A:flask.jinja2.lexer.data->regex.match(source, pos).group()
A:flask.jinja2.lexer.expected_op->balancing_stack.pop()
A:flask.jinja2.lexer.pos2->regex.match(source, pos).end()
flask.jinja2.lexer.Failure(self,message:str,cls:t.Type[TemplateSyntaxError]=TemplateSyntaxError)
flask.jinja2.lexer.Failure.__init__(self,message:str,cls:t.Type[TemplateSyntaxError]=TemplateSyntaxError)
flask.jinja2.lexer.Lexer(self,environment:'Environment')
flask.jinja2.lexer.Lexer.__init__(self,environment:'Environment')
flask.jinja2.lexer.Lexer._normalize_newlines(self,value:str)->str
flask.jinja2.lexer.Lexer.tokeniter(self,source:str,name:t.Optional[str],filename:t.Optional[str]=None,state:t.Optional[str]=None)->t.Iterator[t.Tuple[int, str, str]]
flask.jinja2.lexer.Lexer.tokenize(self,source:str,name:t.Optional[str]=None,filename:t.Optional[str]=None,state:t.Optional[str]=None)->TokenStream
flask.jinja2.lexer.Lexer.wrap(self,stream:t.Iterable[t.Tuple[int,str,str]],name:t.Optional[str]=None,filename:t.Optional[str]=None)->t.Iterator[Token]
flask.jinja2.lexer.OptionalLStrip(cls,*members,**kwargs)
flask.jinja2.lexer.OptionalLStrip.__new__(cls,*members,**kwargs)
flask.jinja2.lexer.Token(t.NamedTuple)
flask.jinja2.lexer.Token.__str__(self)->str
flask.jinja2.lexer.Token.test(self,expr:str)->bool
flask.jinja2.lexer.Token.test_any(self,*iterable:str)->bool
flask.jinja2.lexer.TokenStream(self,generator:t.Iterable[Token],name:t.Optional[str],filename:t.Optional[str])
flask.jinja2.lexer.TokenStream.__bool__(self)->bool
flask.jinja2.lexer.TokenStream.__init__(self,generator:t.Iterable[Token],name:t.Optional[str],filename:t.Optional[str])
flask.jinja2.lexer.TokenStream.__iter__(self)->TokenStreamIterator
flask.jinja2.lexer.TokenStream.__next__(self)->Token
flask.jinja2.lexer.TokenStream.close(self)->None
flask.jinja2.lexer.TokenStream.eos(self)->bool
flask.jinja2.lexer.TokenStream.expect(self,expr:str)->Token
flask.jinja2.lexer.TokenStream.look(self)->Token
flask.jinja2.lexer.TokenStream.next_if(self,expr:str)->t.Optional[Token]
flask.jinja2.lexer.TokenStream.push(self,token:Token)->None
flask.jinja2.lexer.TokenStream.skip(self,n:int=1)->None
flask.jinja2.lexer.TokenStream.skip_if(self,expr:str)->bool
flask.jinja2.lexer.TokenStreamIterator(self,stream:'TokenStream')
flask.jinja2.lexer.TokenStreamIterator.__init__(self,stream:'TokenStream')
flask.jinja2.lexer.TokenStreamIterator.__iter__(self)->'TokenStreamIterator'
flask.jinja2.lexer.TokenStreamIterator.__next__(self)->Token
flask.jinja2.lexer._Rule(t.NamedTuple)
flask.jinja2.lexer._describe_token_type(token_type:str)->str
flask.jinja2.lexer.compile_rules(environment:'Environment')->t.List[t.Tuple[str, str]]
flask.jinja2.lexer.count_newlines(value:str)->int
flask.jinja2.lexer.describe_token(token:'Token')->str
flask.jinja2.lexer.describe_token_expr(expr:str)->str
flask.jinja2.lexer.get_lexer(environment:'Environment')->'Lexer'


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/async_utils.py----------------------------------------
A:flask.jinja2.async_utils.V->typing.TypeVar('V')
A:flask.jinja2.async_utils.pass_arg->utils._PassArg.from_obj(normal_func)
A:flask.jinja2.async_utils.b->is_async(args)
A:flask.jinja2.async_utils.wrapper->pass_eval_context(wrapper)
flask.jinja2.async_utils.async_variant(normal_func)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/_identifier.py----------------------------------------
A:flask.jinja2._identifier.pattern->re.compile('[\\w·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-ٰٟۖ-ۜ۟-۪ۤۧۨ-ܑۭܰ-݊ަ-ް߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣔ-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣঁ-ঃ়া-ৄেৈো-্ৗৢৣਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑੰੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣஂா-ூெ-ைொ-்ௗఀ-ఃా-ౄె-ైొ-్ౕౖౢౣಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣංඃ්ා-ුූෘ-ෟෲෳัิ-ฺ็-๎ັິ-ູົຼ່-ໍ༹༘༙༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏႚ-ႝ፝-፟ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝᠋-᠍ᢅᢆᢩᤠ-ᤫᤰ-᤻ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼᪰-᪽ᬀ-ᬄ᬴-᭄᭫-᭳ᮀ-ᮂᮡ-ᮭ᯦-᯳ᰤ-᰷᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰℘℮⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣠-꣱ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀ꧥꨩ-ꨶꩃꩌꩍꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭ﬞ︀-️︠-︯︳︴﹍-﹏＿𐇽𐋠𐍶-𐍺𐨁-𐨃𐨅𐨆𐨌-𐨏𐨸-𐨿𐨺𐫦𐫥𑀀-𑀂𑀸-𑁆𑁿-𑂂𑂰-𑂺𑄀-𑄂𑄧-𑅳𑄴𑆀-𑆂𑆳-𑇊𑇀-𑇌𑈬-𑈷𑈾𑋟-𑋪𑌀-𑌃𑌼𑌾-𑍄𑍇𑍈𑍋-𑍍𑍗𑍢𑍣𑍦-𑍬𑍰-𑍴𑐵-𑑆𑒰-𑓃𑖯-𑖵𑖸-𑗀𑗜𑗝𑘰-𑙀𑚫-𑚷𑜝-𑜫𑰯-𑰶𑰸-𑰿𑲒-𑲧𑲩-𑲶𖫰-𖫴𖬰-𖬶𖽑-𖽾𖾏-𖾒𛲝𛲞𝅥-𝅩𝅭-𝅲𝅻-𝆂𝆅-𝆋𝆪-𝆭𝉂-𝉄𝨀-𝨶𝨻-𝩬𝩵𝪄𝪛-𝪟𝪡-𝪯𞀀-𞀆𞀈-𞀘𞀛-𞀡𞀣𞀤𞀦-𞣐𞀪-𞣖𞥄-𞥊󠄀-󠇯]+')


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/utils.py----------------------------------------
A:flask.jinja2.utils.F->typing.TypeVar('F', bound=t.Callable[..., t.Any])
A:flask.jinja2.utils.context->enum.auto()
A:flask.jinja2.utils.eval_context->enum.auto()
A:flask.jinja2.utils.environment->enum.auto()
A:flask.jinja2.utils.squashed->prefix.replace('_', '')
A:flask.jinja2.utils.(module, obj)->import_name.split(':', 1)
A:flask.jinja2.utils.(module, _, obj)->import_name.rpartition('.')
A:flask.jinja2.utils.cls->type(obj)
A:flask.jinja2.utils._http_re->re.compile('\n    ^\n    (\n        (https?://|www\\.)  # scheme or www\n        (([\\w%-]+\\.)+)?  # subdomain\n        (\n            [a-z]{2,63}  # basic tld\n        |\n            xn--[\\w%]{2,59}  # idna tld\n        )\n    |\n        ([\\w%-]{2,63}\\.)+  # basic domain\n        (com|net|int|edu|gov|org|info|mil)  # basic tld\n    |\n        (https?://)  # scheme\n        (\n            (([\\d]{1,3})(\\.[\\d]{1,3}){3})  # IPv4\n        |\n            (\\[([\\da-f]{0,4}:){2}([\\da-f]{0,4}:?){1,6}])  # IPv6\n        )\n    )\n    (?::[\\d]{1,5})?  # port\n    (?:[/?#]\\S*)?  # path, query, and fragment\n    $\n    ', re.IGNORECASE | re.VERBOSE)
A:flask.jinja2.utils._email_re->re.compile('^\\S+@\\w[\\w.-]*\\.\\w+$')
A:flask.jinja2.utils.words->constants.LOREM_IPSUM_WORDS.split()
A:flask.jinja2.utils.match->re.search('([)>.,\\n]|&gt;)+$', middle)
A:flask.jinja2.utils.head->re.search('([)>.,\\n]|&gt;)+$', middle).group()
A:flask.jinja2.utils.tail->re.search('([)>.,\\n]|&gt;)+$', middle).group()
A:flask.jinja2.utils.start_count->middle.count(start_char)
A:flask.jinja2.utils.word->word.capitalize().capitalize()
A:flask.jinja2.utils.p_str->' '.join(p)
A:flask.jinja2.utils.obj->obj.encode(charset).encode(charset)
A:flask.jinja2.utils.rv->self.__class__(self.capacity)
A:flask.jinja2.utils.self._wlock->Lock()
A:flask.jinja2.utils.enabled_patterns->tuple((f".{x.lstrip('.').lower()}" for x in enabled_extensions))
A:flask.jinja2.utils.disabled_patterns->tuple((f".{x.lstrip('.').lower()}" for x in disabled_extensions))
A:flask.jinja2.utils.template_name->template_name.lower().lower()
A:flask.jinja2.utils.self.__attrs->dict(*args, **kwargs)
flask.jinja2.Markup(cls,base='',encoding=None,errors='strict')
flask.jinja2.clear_caches()->None
flask.jinja2.contextfunction(f:F)->F
flask.jinja2.environmentfunction(f:F)->F
flask.jinja2.escape(s:t.Any)->str
flask.jinja2.evalcontextfunction(f:F)->F
flask.jinja2.is_undefined(obj:t.Any)->bool
flask.jinja2.pass_context(f:F)->F
flask.jinja2.pass_environment(f:F)->F
flask.jinja2.pass_eval_context(f:F)->F
flask.jinja2.select_autoescape(enabled_extensions:t.Collection[str]=('html','htm','xml'),disabled_extensions:t.Collection[str]=(),default_for_string:bool=True,default:bool=False)->t.Callable[[t.Optional[str]], bool]
flask.jinja2.utils.Cycler(self,*items:t.Any)
flask.jinja2.utils.Cycler.__init__(self,*items:t.Any)
flask.jinja2.utils.Cycler.current(self)->t.Any
flask.jinja2.utils.Cycler.next(self)->t.Any
flask.jinja2.utils.Cycler.reset(self)->None
flask.jinja2.utils.Joiner(self,sep:str=',')
flask.jinja2.utils.Joiner.__init__(self,sep:str=',')
flask.jinja2.utils.LRUCache(self,capacity:int)
flask.jinja2.utils.LRUCache.__contains__(self,key:t.Any)->bool
flask.jinja2.utils.LRUCache.__delitem__(self,key:t.Any)->None
flask.jinja2.utils.LRUCache.__getitem__(self,key:t.Any)->t.Any
flask.jinja2.utils.LRUCache.__getnewargs__(self)->t.Tuple
flask.jinja2.utils.LRUCache.__getstate__(self)->t.Mapping[str, t.Any]
flask.jinja2.utils.LRUCache.__init__(self,capacity:int)
flask.jinja2.utils.LRUCache.__iter__(self)->t.Iterator[t.Any]
flask.jinja2.utils.LRUCache.__len__(self)->int
flask.jinja2.utils.LRUCache.__repr__(self)->str
flask.jinja2.utils.LRUCache.__reversed__(self)->t.Iterator[t.Any]
flask.jinja2.utils.LRUCache.__setitem__(self,key:t.Any,value:t.Any)->None
flask.jinja2.utils.LRUCache.__setstate__(self,d:t.Mapping[str,t.Any])->None
flask.jinja2.utils.LRUCache._postinit(self)->None
flask.jinja2.utils.LRUCache.clear(self)->None
flask.jinja2.utils.LRUCache.copy(self)->'LRUCache'
flask.jinja2.utils.LRUCache.get(self,key:t.Any,default:t.Any=None)->t.Any
flask.jinja2.utils.LRUCache.items(self)->t.Iterable[t.Tuple[t.Any, t.Any]]
flask.jinja2.utils.LRUCache.keys(self)->t.Iterable[t.Any]
flask.jinja2.utils.LRUCache.setdefault(self,key:t.Any,default:t.Any=None)->t.Any
flask.jinja2.utils.LRUCache.values(self)->t.Iterable[t.Any]
flask.jinja2.utils.Markup(cls,base='',encoding=None,errors='strict')
flask.jinja2.utils.Markup.__new__(cls,base='',encoding=None,errors='strict')
flask.jinja2.utils.Namespace(*args:t.Any,**kwargs:t.Any)
flask.jinja2.utils.Namespace.__getattribute__(self,name:str)->t.Any
flask.jinja2.utils.Namespace.__init__(*args:t.Any,**kwargs:t.Any)
flask.jinja2.utils.Namespace.__repr__(self)->str
flask.jinja2.utils.Namespace.__setitem__(self,name:str,value:t.Any)->None
flask.jinja2.utils._PassArg(enum.Enum)
flask.jinja2.utils._PassArg.from_obj(cls,obj:F)->t.Optional['_PassArg']
flask.jinja2.utils.clear_caches()->None
flask.jinja2.utils.consume(iterable:t.Iterable[t.Any])->None
flask.jinja2.utils.contextfunction(f:F)->F
flask.jinja2.utils.environmentfunction(f:F)->F
flask.jinja2.utils.escape(s:t.Any)->str
flask.jinja2.utils.evalcontextfunction(f:F)->F
flask.jinja2.utils.generate_lorem_ipsum(n:int=5,html:bool=True,min:int=20,max:int=100)->str
flask.jinja2.utils.htmlsafe_json_dumps(obj:t.Any,dumps:t.Optional[t.Callable[...,str]]=None,**kwargs:t.Any)->markupsafe.Markup
flask.jinja2.utils.import_string(import_name:str,silent:bool=False)->t.Any
flask.jinja2.utils.internalcode(f:F)->F
flask.jinja2.utils.is_undefined(obj:t.Any)->bool
flask.jinja2.utils.object_type_repr(obj:t.Any)->str
flask.jinja2.utils.open_if_exists(filename:str,mode:str='rb')->t.Optional[t.IO]
flask.jinja2.utils.pass_context(f:F)->F
flask.jinja2.utils.pass_environment(f:F)->F
flask.jinja2.utils.pass_eval_context(f:F)->F
flask.jinja2.utils.pformat(obj:t.Any)->str
flask.jinja2.utils.select_autoescape(enabled_extensions:t.Collection[str]=('html','htm','xml'),disabled_extensions:t.Collection[str]=(),default_for_string:bool=True,default:bool=False)->t.Callable[[t.Optional[str]], bool]
flask.jinja2.utils.unicode_urlencode(obj:t.Any,charset:str='utf-8',for_qs:bool=False)->str
flask.jinja2.utils.url_quote(obj:t.Any,charset:str='utf-8',for_qs:bool=False)->str
flask.jinja2.utils.urlize(text:str,trim_url_limit:t.Optional[int]=None,rel:t.Optional[str]=None,target:t.Optional[str]=None,extra_schemes:t.Optional[t.Iterable[str]]=None)->str


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/parser.py----------------------------------------
A:flask.jinja2.parser._ImportInclude->typing.TypeVar('_ImportInclude', nodes.Import, nodes.Include)
A:flask.jinja2.parser._MacroCall->typing.TypeVar('_MacroCall', nodes.Macro, nodes.CallBlock)
A:flask.jinja2.parser._statement_keywords->frozenset(['for', 'if', 'block', 'extends', 'print', 'macro', 'include', 'from', 'import', 'set', 'with', 'autoescape'])
A:flask.jinja2.parser._compare_operators->frozenset(['eq', 'ne', 'lt', 'lteq', 'gt', 'gteq'])
A:flask.jinja2.parser.self.stream->environment._tokenize(source, name, filename, state)
A:flask.jinja2.parser.stack->list(self._end_token_stack)
A:flask.jinja2.parser.rv->self.parse_statement()
A:flask.jinja2.parser.f->getattr(self, f'parse_{self.stream.current.value}')
A:flask.jinja2.parser.ext->self.extensions.get(token.value)
A:flask.jinja2.parser.result->nodes.Template(self.subparse(), lineno=1)
A:flask.jinja2.parser.target->self.parse_primary()
A:flask.jinja2.parser.expr->self.parse_math1()
A:flask.jinja2.parser.filter_node->self.parse_filter(None)
A:flask.jinja2.parser.body->self.parse_statements(('name:endfor', 'name:else'))
A:flask.jinja2.parser.iter->self.parse_tuple(with_condexpr=False, extra_end_rules=('name:recursive',))
A:flask.jinja2.parser.test->self.parse_expression()
A:flask.jinja2.parser.recursive->self.stream.skip_if('name:recursive')
A:flask.jinja2.parser.else_->self.parse_statements(('name:endfor',), drop_needle=True)
A:flask.jinja2.parser.noderesult->nodes.If(lineno=self.stream.expect('name:if').lineno)
A:flask.jinja2.parser.node.test->self.parse_tuple(with_condexpr=False)
A:flask.jinja2.parser.node.body->self.parse_statements(('name:endmacro',), drop_needle=True)
A:flask.jinja2.parser.token->next(self.stream)
A:flask.jinja2.parser.node->nodes.Not(node, lineno=token.lineno)
A:flask.jinja2.parser.result.else_->self.parse_statements(('name:endif',), drop_needle=True)
A:flask.jinja2.parser.node.scoped->self.stream.skip_if('name:scoped')
A:flask.jinja2.parser.node.required->self.stream.skip_if('name:required')
A:flask.jinja2.parser.node.template->self.parse_expression()
A:flask.jinja2.parser.alias->self.parse_assign_target(name_only=True)
A:flask.jinja2.parser.arg->nodes.Tuple(args, 'load', lineno=token.lineno)
A:flask.jinja2.parser.call_node->self.parse_expression()
A:flask.jinja2.parser.node.filter->self.parse_filter(None, start_inline=True)
A:flask.jinja2.parser.attr->self.stream.expect('name')
A:flask.jinja2.parser.expr1->nodes.CondExpr(expr2, expr1, expr3, lineno=lineno)
A:flask.jinja2.parser.expr2->self.parse_or()
A:flask.jinja2.parser.expr3->self.parse_condexpr()
A:flask.jinja2.parser.left->nodes.Pow(left, right, lineno=lineno)
A:flask.jinja2.parser.right->self.parse_unary()
A:flask.jinja2.parser.key->self.parse_expression()
A:flask.jinja2.parser.value->self.parse_expression()
A:flask.jinja2.parser.dyn_args->self.parse_expression()
A:flask.jinja2.parser.dyn_kwargs->self.parse_expression()
A:flask.jinja2.parser.(args, kwargs, dyn_args, dyn_kwargs)->self.parse_call_args()
A:flask.jinja2.parser.arg_node->self.parse_postfix(arg_node)
flask.jinja2.parser.Parser(self,environment:'Environment',source:str,name:t.Optional[str]=None,filename:t.Optional[str]=None,state:t.Optional[str]=None)
flask.jinja2.parser.Parser.__init__(self,environment:'Environment',source:str,name:t.Optional[str]=None,filename:t.Optional[str]=None,state:t.Optional[str]=None)
flask.jinja2.parser.Parser._fail_ut_eof(self,name:t.Optional[str],end_token_stack:t.List[t.Tuple[str,...]],lineno:t.Optional[int])->'te.NoReturn'
flask.jinja2.parser.Parser.fail(self,msg:str,lineno:t.Optional[int]=None,exc:t.Type[TemplateSyntaxError]=TemplateSyntaxError)->'te.NoReturn'
flask.jinja2.parser.Parser.fail_eof(self,end_tokens:t.Optional[t.Tuple[str,...]]=None,lineno:t.Optional[int]=None)->'te.NoReturn'
flask.jinja2.parser.Parser.fail_unknown_tag(self,name:str,lineno:t.Optional[int]=None)->'te.NoReturn'
flask.jinja2.parser.Parser.free_identifier(self,lineno:t.Optional[int]=None)->nodes.InternalName
flask.jinja2.parser.Parser.is_tuple_end(self,extra_end_rules:t.Optional[t.Tuple[str,...]]=None)->bool
flask.jinja2.parser.Parser.parse(self)->nodes.Template
flask.jinja2.parser.Parser.parse_and(self)->nodes.Expr
flask.jinja2.parser.Parser.parse_assign_target(self,with_tuple:bool=True,name_only:bool=False,extra_end_rules:t.Optional[t.Tuple[str,...]]=None,with_namespace:bool=False)->t.Union[nodes.NSRef, nodes.Name, nodes.Tuple]
flask.jinja2.parser.Parser.parse_autoescape(self)->nodes.Scope
flask.jinja2.parser.Parser.parse_block(self)->nodes.Block
flask.jinja2.parser.Parser.parse_call(self,node:nodes.Expr)->nodes.Call
flask.jinja2.parser.Parser.parse_call_args(self)->t.Tuple
flask.jinja2.parser.Parser.parse_call_block(self)->nodes.CallBlock
flask.jinja2.parser.Parser.parse_compare(self)->nodes.Expr
flask.jinja2.parser.Parser.parse_concat(self)->nodes.Expr
flask.jinja2.parser.Parser.parse_condexpr(self)->nodes.Expr
flask.jinja2.parser.Parser.parse_dict(self)->nodes.Dict
flask.jinja2.parser.Parser.parse_expression(self,with_condexpr:bool=True)->nodes.Expr
flask.jinja2.parser.Parser.parse_extends(self)->nodes.Extends
flask.jinja2.parser.Parser.parse_filter(self,node:t.Optional[nodes.Expr],start_inline:bool=False)->t.Optional[nodes.Expr]
flask.jinja2.parser.Parser.parse_filter_block(self)->nodes.FilterBlock
flask.jinja2.parser.Parser.parse_filter_expr(self,node:nodes.Expr)->nodes.Expr
flask.jinja2.parser.Parser.parse_for(self)->nodes.For
flask.jinja2.parser.Parser.parse_from(self)->nodes.FromImport
flask.jinja2.parser.Parser.parse_if(self)->nodes.If
flask.jinja2.parser.Parser.parse_import(self)->nodes.Import
flask.jinja2.parser.Parser.parse_import_context(self,node:_ImportInclude,default:bool)->_ImportInclude
flask.jinja2.parser.Parser.parse_include(self)->nodes.Include
flask.jinja2.parser.Parser.parse_list(self)->nodes.List
flask.jinja2.parser.Parser.parse_macro(self)->nodes.Macro
flask.jinja2.parser.Parser.parse_math1(self)->nodes.Expr
flask.jinja2.parser.Parser.parse_math2(self)->nodes.Expr
flask.jinja2.parser.Parser.parse_not(self)->nodes.Expr
flask.jinja2.parser.Parser.parse_or(self)->nodes.Expr
flask.jinja2.parser.Parser.parse_postfix(self,node:nodes.Expr)->nodes.Expr
flask.jinja2.parser.Parser.parse_pow(self)->nodes.Expr
flask.jinja2.parser.Parser.parse_primary(self)->nodes.Expr
flask.jinja2.parser.Parser.parse_print(self)->nodes.Output
flask.jinja2.parser.Parser.parse_set(self)->t.Union[nodes.Assign, nodes.AssignBlock]
flask.jinja2.parser.Parser.parse_signature(self,node:_MacroCall)->None
flask.jinja2.parser.Parser.parse_statement(self)->t.Union[nodes.Node, t.List[nodes.Node]]
flask.jinja2.parser.Parser.parse_statements(self,end_tokens:t.Tuple[str,...],drop_needle:bool=False)->t.List[nodes.Node]
flask.jinja2.parser.Parser.parse_subscribed(self)->nodes.Expr
flask.jinja2.parser.Parser.parse_subscript(self,node:nodes.Expr)->t.Union[nodes.Getattr, nodes.Getitem]
flask.jinja2.parser.Parser.parse_test(self,node:nodes.Expr)->nodes.Expr
flask.jinja2.parser.Parser.parse_tuple(self,simplified:bool=False,with_condexpr:bool=True,extra_end_rules:t.Optional[t.Tuple[str,...]]=None,explicit_parentheses:bool=False)->t.Union[nodes.Tuple, nodes.Expr]
flask.jinja2.parser.Parser.parse_unary(self,with_filter:bool=True)->nodes.Expr
flask.jinja2.parser.Parser.parse_with(self)->nodes.With
flask.jinja2.parser.Parser.subparse(self,end_tokens:t.Optional[t.Tuple[str,...]]=None)->t.List[nodes.Node]


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/defaults.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/nodes.py----------------------------------------
A:flask.jinja2.nodes._NodeBound->typing.TypeVar('_NodeBound', bound='Node')
A:flask.jinja2.nodes.d[attr]->tuple(storage)
A:flask.jinja2.nodes.self.autoescape->environment.autoescape(template_name)
A:flask.jinja2.nodes.todo->deque([self])
A:flask.jinja2.nodes.node->deque([self]).popleft()
A:flask.jinja2.nodes.args_str->', '.join((f'{a}={getattr(self, a, None)!r}' for a in self.fields))
A:flask.jinja2.nodes.value->getattr(node, field)
A:flask.jinja2.nodes.eval_ctx->get_eval_context(self, eval_ctx)
A:flask.jinja2.nodes.kwargs->dict((x.as_const(eval_ctx) for x in node.kwargs))
A:flask.jinja2.nodes.func->env_map.get(self.name)
A:flask.jinja2.nodes.pass_arg->utils._PassArg.from_obj(func)
A:flask.jinja2.nodes.(args, kwargs)->args_as_const(self, eval_ctx)
A:flask.jinja2.nodes.resultvalue->self.expr.as_const(eval_ctx)
A:flask.jinja2.nodes.new_value->op.expr.as_const(eval_ctx)
A:flask.jinja2.nodes.result->_cmpop_to_func[op.op](value, new_value)
A:flask.jinja2.nodes.expr->self.expr.as_const(eval_ctx)
A:flask.jinja2.nodes.NodeType.__new__->staticmethod(_failing_new)
flask.jinja2.nodes.Add(BinExpr)
flask.jinja2.nodes.And(BinExpr)
flask.jinja2.nodes.And.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.nodes.Assign(Stmt)
flask.jinja2.nodes.AssignBlock(Stmt)
flask.jinja2.nodes.BinExpr(Expr)
flask.jinja2.nodes.BinExpr.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.nodes.Block(Stmt)
flask.jinja2.nodes.Break(Stmt)
flask.jinja2.nodes.Call(Expr)
flask.jinja2.nodes.CallBlock(Stmt)
flask.jinja2.nodes.Compare(Expr)
flask.jinja2.nodes.Compare.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.nodes.Concat(Expr)
flask.jinja2.nodes.Concat.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->str
flask.jinja2.nodes.CondExpr(Expr)
flask.jinja2.nodes.CondExpr.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.nodes.Const(Literal)
flask.jinja2.nodes.Const.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.nodes.Const.from_untrusted(cls,value:t.Any,lineno:t.Optional[int]=None,environment:'t.Optional[Environment]'=None)->'Const'
flask.jinja2.nodes.ContextReference(Expr)
flask.jinja2.nodes.Continue(Stmt)
flask.jinja2.nodes.DerivedContextReference(Expr)
flask.jinja2.nodes.Dict(Literal)
flask.jinja2.nodes.Dict.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Dict[t.Any, t.Any]
flask.jinja2.nodes.Div(BinExpr)
flask.jinja2.nodes.EnvironmentAttribute(Expr)
flask.jinja2.nodes.EvalContext(self,environment:'Environment',template_name:t.Optional[str]=None)
flask.jinja2.nodes.EvalContext.__init__(self,environment:'Environment',template_name:t.Optional[str]=None)
flask.jinja2.nodes.EvalContext.revert(self,old:t.Mapping[str,t.Any])->None
flask.jinja2.nodes.EvalContext.save(self)->t.Mapping[str, t.Any]
flask.jinja2.nodes.EvalContextModifier(Stmt)
flask.jinja2.nodes.Expr(Node)
flask.jinja2.nodes.Expr.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.nodes.Expr.can_assign(self)->bool
flask.jinja2.nodes.ExprStmt(Stmt)
flask.jinja2.nodes.Extends(Stmt)
flask.jinja2.nodes.ExtensionAttribute(Expr)
flask.jinja2.nodes.Filter(_FilterTestCommon)
flask.jinja2.nodes.Filter.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.nodes.FilterBlock(Stmt)
flask.jinja2.nodes.FloorDiv(BinExpr)
flask.jinja2.nodes.For(Stmt)
flask.jinja2.nodes.FromImport(Stmt)
flask.jinja2.nodes.Getattr(Expr)
flask.jinja2.nodes.Getattr.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.nodes.Getitem(Expr)
flask.jinja2.nodes.Getitem.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.nodes.Helper(Node)
flask.jinja2.nodes.If(Stmt)
flask.jinja2.nodes.Import(Stmt)
flask.jinja2.nodes.ImportedName(Expr)
flask.jinja2.nodes.Impossible(Exception)
flask.jinja2.nodes.Include(Stmt)
flask.jinja2.nodes.InternalName(self)
flask.jinja2.nodes.InternalName.__init__(self)
flask.jinja2.nodes.Keyword(Helper)
flask.jinja2.nodes.Keyword.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Tuple[str, t.Any]
flask.jinja2.nodes.List(Literal)
flask.jinja2.nodes.List.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.List[t.Any]
flask.jinja2.nodes.Literal(Expr)
flask.jinja2.nodes.Macro(Stmt)
flask.jinja2.nodes.MarkSafe(Expr)
flask.jinja2.nodes.MarkSafe.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->Markup
flask.jinja2.nodes.MarkSafeIfAutoescape(Expr)
flask.jinja2.nodes.MarkSafeIfAutoescape.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Union[Markup, t.Any]
flask.jinja2.nodes.Mod(BinExpr)
flask.jinja2.nodes.Mul(BinExpr)
flask.jinja2.nodes.NSRef(Expr)
flask.jinja2.nodes.NSRef.can_assign(self)->bool
flask.jinja2.nodes.Name(Expr)
flask.jinja2.nodes.Name.can_assign(self)->bool
flask.jinja2.nodes.Neg(UnaryExpr)
flask.jinja2.nodes.Node(self,*fields:t.Any,**attributes:t.Any)
flask.jinja2.nodes.Node.__eq__(self,other:t.Any)->bool
flask.jinja2.nodes.Node.__init__(self,*fields:t.Any,**attributes:t.Any)
flask.jinja2.nodes.Node.__repr__(self)->str
flask.jinja2.nodes.Node.dump(self)->str
flask.jinja2.nodes.Node.find(self,node_type:t.Type[_NodeBound])->t.Optional[_NodeBound]
flask.jinja2.nodes.Node.find_all(self,node_type:t.Union[t.Type[_NodeBound],t.Tuple[t.Type[_NodeBound],...]])->t.Iterator[_NodeBound]
flask.jinja2.nodes.Node.iter_child_nodes(self,exclude:t.Optional[t.Container[str]]=None,only:t.Optional[t.Container[str]]=None)->t.Iterator['Node']
flask.jinja2.nodes.Node.iter_fields(self,exclude:t.Optional[t.Container[str]]=None,only:t.Optional[t.Container[str]]=None)->t.Iterator[t.Tuple[str, t.Any]]
flask.jinja2.nodes.Node.set_ctx(self,ctx:str)->'Node'
flask.jinja2.nodes.Node.set_environment(self,environment:'Environment')->'Node'
flask.jinja2.nodes.Node.set_lineno(self,lineno:int,override:bool=False)->'Node'
flask.jinja2.nodes.NodeType(mcs,name,bases,d)
flask.jinja2.nodes.NodeType.__new__(mcs,name,bases,d)
flask.jinja2.nodes.Not(UnaryExpr)
flask.jinja2.nodes.Operand(Helper)
flask.jinja2.nodes.Or(BinExpr)
flask.jinja2.nodes.Or.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.nodes.Output(Stmt)
flask.jinja2.nodes.OverlayScope(Stmt)
flask.jinja2.nodes.Pair(Helper)
flask.jinja2.nodes.Pair.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Tuple[t.Any, t.Any]
flask.jinja2.nodes.Pos(UnaryExpr)
flask.jinja2.nodes.Pow(BinExpr)
flask.jinja2.nodes.Scope(Stmt)
flask.jinja2.nodes.ScopedEvalContextModifier(EvalContextModifier)
flask.jinja2.nodes.Slice(Expr)
flask.jinja2.nodes.Slice.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->slice
flask.jinja2.nodes.Stmt(Node)
flask.jinja2.nodes.Sub(BinExpr)
flask.jinja2.nodes.Template(Node)
flask.jinja2.nodes.TemplateData(Literal)
flask.jinja2.nodes.TemplateData.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->str
flask.jinja2.nodes.Test(_FilterTestCommon)
flask.jinja2.nodes.Tuple(Literal)
flask.jinja2.nodes.Tuple.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Tuple[t.Any, ...]
flask.jinja2.nodes.Tuple.can_assign(self)->bool
flask.jinja2.nodes.UnaryExpr(Expr)
flask.jinja2.nodes.UnaryExpr.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.nodes.With(Stmt)
flask.jinja2.nodes._FilterTestCommon(Expr)
flask.jinja2.nodes._FilterTestCommon.as_const(self,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.nodes._failing_new(*args:t.Any,**kwargs:t.Any)->'te.NoReturn'
flask.jinja2.nodes.args_as_const(node:t.Union['_FilterTestCommon','Call'],eval_ctx:t.Optional[EvalContext])->t.Tuple[t.List[t.Any], t.Dict[t.Any, t.Any]]
flask.jinja2.nodes.get_eval_context(node:'Node',ctx:t.Optional[EvalContext])->EvalContext


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/visitor.py----------------------------------------
A:flask.jinja2.visitor.f->self.get_visitor(node)
A:flask.jinja2.visitor.value->self.visit(value, *args, **kwargs)
A:flask.jinja2.visitor.new_node->self.visit(old_value, *args, **kwargs)
A:flask.jinja2.visitor.rv->self.visit(node, *args, **kwargs)
flask.jinja2.visitor.NodeTransformer(NodeVisitor)
flask.jinja2.visitor.NodeTransformer.generic_visit(self,node:Node,*args:t.Any,**kwargs:t.Any)->Node
flask.jinja2.visitor.NodeTransformer.visit_list(self,node:Node,*args:t.Any,**kwargs:t.Any)->t.List[Node]
flask.jinja2.visitor.NodeVisitor
flask.jinja2.visitor.NodeVisitor.generic_visit(self,node:Node,*args:t.Any,**kwargs:t.Any)->t.Any
flask.jinja2.visitor.NodeVisitor.get_visitor(self,node:Node)->'t.Optional[VisitCallable]'
flask.jinja2.visitor.NodeVisitor.visit(self,node:Node,*args:t.Any,**kwargs:t.Any)->t.Any


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/debug.py----------------------------------------
A:flask.jinja2.debug.(_, exc_value, tb)->sys.exc_info()
A:flask.jinja2.debug.exc_value->typing.cast(BaseException, exc_value)
A:flask.jinja2.debug.tb->fake_traceback(exc_value, None, exc_value.filename or '<unknown>', exc_value.lineno)
A:flask.jinja2.debug.template->fake_traceback(exc_value, None, exc_value.filename or '<unknown>', exc_value.lineno).tb_frame.f_globals.get('__jinja_template__')
A:flask.jinja2.debug.lineno->fake_traceback(exc_value, None, exc_value.filename or '<unknown>', exc_value.lineno).tb_frame.f_globals.get('__jinja_template__').get_corresponding_lineno(tb.tb_lineno)
A:flask.jinja2.debug.fake_tb->fake_traceback(exc_value, tb, template.filename, lineno)
A:flask.jinja2.debug.tb_next->tb_set_next(tb, tb_next)
A:flask.jinja2.debug.locals->get_template_locals(tb.tb_frame.f_locals)
A:flask.jinja2.debug.code->CodeType(code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize, code.co_flags, code.co_code, code.co_consts, code.co_names, code.co_varnames, code.co_filename, location, code.co_firstlineno, code.co_lnotab, code.co_freevars, code.co_cellvars)
A:flask.jinja2.debug.(_, depth_str, name)->name.split('_', 2)
A:flask.jinja2.debug.depth->int(depth_str)
A:flask.jinja2.debug.c_tb->_CTraceback.from_address(id(tb))
A:flask.jinja2.debug.c_tb_next->ctypes.py_object(tb_next)
A:flask.jinja2.debug.c_tb.tb_next->ctypes.py_object()
flask.jinja2.debug.fake_traceback(exc_value:BaseException,tb:t.Optional[TracebackType],filename:str,lineno:int)->TracebackType
flask.jinja2.debug.get_template_locals(real_locals:t.Mapping[str,t.Any])->t.Dict[str, t.Any]
flask.jinja2.debug.rewrite_traceback_stack(source:t.Optional[str]=None)->BaseException


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/ext.py----------------------------------------
A:flask.jinja2.ext._ws_re->re.compile('\\s*\\n\\s*')
A:flask.jinja2.ext.rv->Markup(rv)
A:flask.jinja2.ext.gettext->nodes.Name('gettext', 'load')
A:flask.jinja2.ext.ngettext->nodes.Name('ngettext', 'load')
A:flask.jinja2.ext.pgettext->_make_new_pgettext(pgettext)
A:flask.jinja2.ext.npgettext->_make_new_npgettext(npgettext)
A:flask.jinja2.ext.translations->nodes.Name('gettext', 'load').NullTranslations()
A:flask.jinja2.ext.source->fileobj.read().decode(options.get('encoding', 'utf-8'))
A:flask.jinja2.ext.token->next(parser.stream)
A:flask.jinja2.ext.variables[token.value]var->nodes.Name(token.value, 'load')
A:flask.jinja2.ext.plural_expr->nodes.Name(singular_names[0], 'load')
A:flask.jinja2.ext.plural_expr_assignment->nodes.Assign(nodes.Name('_trans', 'store'), var)
A:flask.jinja2.ext.referenced->set()
A:flask.jinja2.ext.(singular_names, singular)->self._parse_block(parser, True)
A:flask.jinja2.ext.(plural_names, plural)->self._parse_block(parser, False)
A:flask.jinja2.ext.variables[name]->nodes.Name(name, 'load')
A:flask.jinja2.ext.singular->singular.replace('%%', '%').replace('%%', '%')
A:flask.jinja2.ext.plural->plural.replace('%%', '%').replace('%%', '%')
A:flask.jinja2.ext.node->Environment(options.get('block_start_string', defaults.BLOCK_START_STRING), options.get('block_end_string', defaults.BLOCK_END_STRING), options.get('variable_start_string', defaults.VARIABLE_START_STRING), options.get('variable_end_string', defaults.VARIABLE_END_STRING), options.get('comment_start_string', defaults.COMMENT_START_STRING), options.get('comment_end_string', defaults.COMMENT_END_STRING), options.get('line_statement_prefix') or defaults.LINE_STATEMENT_PREFIX, options.get('line_comment_prefix') or defaults.LINE_COMMENT_PREFIX, getbool(options, 'trim_blocks', defaults.TRIM_BLOCKS), getbool(options, 'lstrip_blocks', defaults.LSTRIP_BLOCKS), defaults.NEWLINE_SEQUENCE, getbool(options, 'keep_trailing_newline', defaults.KEEP_TRAILING_NEWLINE), tuple(extensions), cache_size=0, auto_reload=False).parse(source)
A:flask.jinja2.ext.node.node->parser.parse_tuple()
A:flask.jinja2.ext.context->nodes.ContextReference()
A:flask.jinja2.ext.result->self.call_method('_render', [context], lineno=lineno)
A:flask.jinja2.ext.out->tuple(strings)
A:flask.jinja2.ext.(prefix, comment)->token_value.split(None, 1)
A:flask.jinja2.ext.extension_name->extension_name.strip().strip()
A:flask.jinja2.ext.silent->getbool(options, 'silent', True)
A:flask.jinja2.ext.environment->Environment(options.get('block_start_string', defaults.BLOCK_START_STRING), options.get('block_end_string', defaults.BLOCK_END_STRING), options.get('variable_start_string', defaults.VARIABLE_START_STRING), options.get('variable_end_string', defaults.VARIABLE_END_STRING), options.get('comment_start_string', defaults.COMMENT_START_STRING), options.get('comment_end_string', defaults.COMMENT_END_STRING), options.get('line_statement_prefix') or defaults.LINE_STATEMENT_PREFIX, options.get('line_comment_prefix') or defaults.LINE_COMMENT_PREFIX, getbool(options, 'trim_blocks', defaults.TRIM_BLOCKS), getbool(options, 'lstrip_blocks', defaults.LSTRIP_BLOCKS), defaults.NEWLINE_SEQUENCE, getbool(options, 'keep_trailing_newline', defaults.KEEP_TRAILING_NEWLINE), tuple(extensions), cache_size=0, auto_reload=False)
A:flask.jinja2.ext.tokens->list(environment.lex(environment.preprocess(source)))
A:flask.jinja2.ext.finder->_CommentFinder(tokens, comment_tags)
flask.jinja2.ext.AutoEscapeExtension(self,environment:Environment)
flask.jinja2.ext.AutoEscapeExtension.__init__(self,environment:Environment)
flask.jinja2.ext.DebugExtension(Extension)
flask.jinja2.ext.DebugExtension._render(self,context:Context)->str
flask.jinja2.ext.DebugExtension.parse(self,parser:'Parser')->nodes.Output
flask.jinja2.ext.ExprStmtExtension(Extension)
flask.jinja2.ext.ExprStmtExtension.parse(self,parser:'Parser')->nodes.ExprStmt
flask.jinja2.ext.Extension(self,environment:Environment)
flask.jinja2.ext.Extension.__init__(self,environment:Environment)
flask.jinja2.ext.Extension.__init_subclass__(cls)->None
flask.jinja2.ext.Extension.attr(self,name:str,lineno:t.Optional[int]=None)->nodes.ExtensionAttribute
flask.jinja2.ext.Extension.bind(self,environment:Environment)->'Extension'
flask.jinja2.ext.Extension.call_method(self,name:str,args:t.Optional[t.List[nodes.Expr]]=None,kwargs:t.Optional[t.List[nodes.Keyword]]=None,dyn_args:t.Optional[nodes.Expr]=None,dyn_kwargs:t.Optional[nodes.Expr]=None,lineno:t.Optional[int]=None)->nodes.Call
flask.jinja2.ext.Extension.filter_stream(self,stream:'TokenStream')->t.Union['TokenStream', t.Iterable['Token']]
flask.jinja2.ext.Extension.parse(self,parser:'Parser')->t.Union[nodes.Node, t.List[nodes.Node]]
flask.jinja2.ext.Extension.preprocess(self,source:str,name:t.Optional[str],filename:t.Optional[str]=None)->str
flask.jinja2.ext.InternationalizationExtension(self,environment:Environment)
flask.jinja2.ext.InternationalizationExtension.__init__(self,environment:Environment)
flask.jinja2.ext.InternationalizationExtension._extract(self,source:t.Union[str,nodes.Template],gettext_functions:t.Sequence[str]=GETTEXT_FUNCTIONS)->t.Iterator[t.Tuple[int, str, t.Union[t.Optional[str], t.Tuple[t.Optional[str], ...]]]]
flask.jinja2.ext.InternationalizationExtension._install(self,translations:'_SupportedTranslations',newstyle:t.Optional[bool]=None)->None
flask.jinja2.ext.InternationalizationExtension._install_callables(self,gettext:t.Callable[[str],str],ngettext:t.Callable[[str,str,int],str],newstyle:t.Optional[bool]=None,pgettext:t.Optional[t.Callable[[str,str],str]]=None,npgettext:t.Optional[t.Callable[[str,str,str,int],str]]=None)->None
flask.jinja2.ext.InternationalizationExtension._install_null(self,newstyle:t.Optional[bool]=None)->None
flask.jinja2.ext.InternationalizationExtension._make_node(self,singular:str,plural:t.Optional[str],variables:t.Dict[str,nodes.Expr],plural_expr:t.Optional[nodes.Expr],vars_referenced:bool,num_called_num:bool)->nodes.Output
flask.jinja2.ext.InternationalizationExtension._parse_block(self,parser:'Parser',allow_pluralize:bool)->t.Tuple[t.List[str], str]
flask.jinja2.ext.InternationalizationExtension._trim_whitespace(self,string:str,_ws_re:t.Pattern[str]=_ws_re)->str
flask.jinja2.ext.InternationalizationExtension._uninstall(self,translations:'_SupportedTranslations')->None
flask.jinja2.ext.InternationalizationExtension.parse(self,parser:'Parser')->t.Union[nodes.Node, t.List[nodes.Node]]
flask.jinja2.ext.LoopControlExtension(Extension)
flask.jinja2.ext.LoopControlExtension.parse(self,parser:'Parser')->t.Union[nodes.Break, nodes.Continue]
flask.jinja2.ext.WithExtension(self,environment:Environment)
flask.jinja2.ext.WithExtension.__init__(self,environment:Environment)
flask.jinja2.ext._CommentFinder(self,tokens:t.Sequence[t.Tuple[int,str,str]],comment_tags:t.Sequence[str])
flask.jinja2.ext._CommentFinder.__init__(self,tokens:t.Sequence[t.Tuple[int,str,str]],comment_tags:t.Sequence[str])
flask.jinja2.ext._CommentFinder.find_backwards(self,offset:int)->t.List[str]
flask.jinja2.ext._CommentFinder.find_comments(self,lineno:int)->t.List[str]
flask.jinja2.ext._gettext_alias(__context:Context,*args:t.Any,**kwargs:t.Any)->t.Union[t.Any, Undefined]
flask.jinja2.ext._make_new_gettext(func:t.Callable[[str],str])->t.Callable[..., str]
flask.jinja2.ext._make_new_ngettext(func:t.Callable[[str,str,int],str])->t.Callable[..., str]
flask.jinja2.ext._make_new_npgettext(func:t.Callable[[str,str,str,int],str])->t.Callable[..., str]
flask.jinja2.ext._make_new_pgettext(func:t.Callable[[str,str],str])->t.Callable[..., str]
flask.jinja2.ext.babel_extract(fileobj:t.BinaryIO,keywords:t.Sequence[str],comment_tags:t.Sequence[str],options:t.Dict[str,t.Any])->t.Iterator[t.Tuple[int, str, t.Union[t.Optional[str], t.Tuple[t.Optional[str], ...]], t.List[str]]]
flask.jinja2.ext.extract_from_ast(ast:nodes.Template,gettext_functions:t.Sequence[str]=GETTEXT_FUNCTIONS,babel_style:bool=True)->t.Iterator[t.Tuple[int, str, t.Union[t.Optional[str], t.Tuple[t.Optional[str], ...]]]]


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/compiler.py----------------------------------------
A:flask.jinja2.compiler.F->typing.TypeVar('F', bound=t.Callable[..., t.Any])
A:flask.jinja2.compiler.new_node->self.optimizer.visit(node, frame.eval_ctx)
A:flask.jinja2.compiler.generator->environment.code_generator_class(environment, name, filename, stream, defer_init, optimized)
A:flask.jinja2.compiler.visitor->DependencyFinderVisitor()
A:flask.jinja2.compiler.self.symbols->Symbols(parent.symbols, level=level)
A:flask.jinja2.compiler.rv->self.copy()
A:flask.jinja2.compiler.rv.symbols->self.symbols.copy()
A:flask.jinja2.compiler.self.names->set(names)
A:flask.jinja2.compiler.stream->StringIO()
A:flask.jinja2.compiler.self.optimizer->Optimizer(environment)
A:flask.jinja2.compiler.frame.buffer->self.temporary_identifier()
A:flask.jinja2.compiler.self._new_lines->max(self._new_lines, 1 + extra)
A:flask.jinja2.compiler.kwarg_workaround->any((is_python_keyword(t.cast(str, k)) for k in chain((x.key for x in node.kwargs), extra_kwargs or ())))
A:flask.jinja2.compiler.id_map[name]->self.temporary_identifier()
A:flask.jinja2.compiler.frame->frame.soft().soft()
A:flask.jinja2.compiler.macro_ref->MacroRef(node)
A:flask.jinja2.compiler.skip_special_params->set()
A:flask.jinja2.compiler.undeclared->find_undeclared(block.body, ('self', 'super'))
A:flask.jinja2.compiler.ref->frame.soft().soft().symbols.ref(node.name)
A:flask.jinja2.compiler.arg_tuple->', '.join((repr(x.name) for x in macro_ref.node.args))
A:flask.jinja2.compiler.name->next(iter(vars))
A:flask.jinja2.compiler.items_kv->', '.join((f'{name!r}: {target}' for (name, target) in frame.symbols.dump_stores().items()))
A:flask.jinja2.compiler.vars->self._assign_stack.pop()
A:flask.jinja2.compiler.names_str->', '.join(map(repr, discarded_names))
A:flask.jinja2.compiler.eval_ctx->EvalContext(self.environment, self.name)
A:flask.jinja2.compiler.exported_names->sorted(exported)
A:flask.jinja2.compiler.self.import_aliases[imp]alias->self.temporary_identifier()
A:flask.jinja2.compiler.(module, obj)->imp.rsplit('.', 1)
A:flask.jinja2.compiler.block_frame->frame.soft().soft().inner()
A:flask.jinja2.compiler.blocks_kv_str->', '.join((f'{x!r}: block_{x}' for x in self.blocks))
A:flask.jinja2.compiler.debug_kv_str->'&'.join((f'{k}={v}' for (k, v) in self.debug_info))
A:flask.jinja2.compiler.context->self.get_context_ref()
A:flask.jinja2.compiler.names_kv->', '.join((f'{name!r}: {frame.symbols.ref(name)}' for name in var_names))
A:flask.jinja2.compiler.loop_frame->frame.soft().soft().inner()
A:flask.jinja2.compiler.test_frame->frame.soft().soft().inner()
A:flask.jinja2.compiler.else_frame->frame.soft().soft().inner()
A:flask.jinja2.compiler.loop_ref->frame.soft().soft().inner().symbols.declare_parameter('loop')
A:flask.jinja2.compiler.loop_filter_func->self.temporary_identifier()
A:flask.jinja2.compiler.iteration_indicator->self.temporary_identifier()
A:flask.jinja2.compiler.if_frame->frame.soft().soft().soft()
A:flask.jinja2.compiler.(macro_frame, macro_ref)->self.macro_body(node, frame)
A:flask.jinja2.compiler.(call_frame, macro_ref)->self.macro_body(node, frame)
A:flask.jinja2.compiler.filter_frame->frame.soft().soft().inner()
A:flask.jinja2.compiler.with_frame->frame.soft().soft().inner()
A:flask.jinja2.compiler.pass_arg->{_PassArg.context: 'context', _PassArg.eval_context: 'context.eval_ctx', _PassArg.environment: 'environment'}.get(_PassArg.from_obj(func))
A:flask.jinja2.compiler.self._finalize->self._FinalizeInfo(finalize, src)
A:flask.jinja2.compiler.const->self._output_child_to_const(child, frame, finalize)
A:flask.jinja2.compiler.finalize->self._make_finalize()
A:flask.jinja2.compiler.val->keyword.value.as_const(frame.eval_ctx)
A:flask.jinja2.compiler.load->frame.soft().soft().symbols.find_load(ref)
A:flask.jinja2.compiler.visit_Add->_make_binop('+')
A:flask.jinja2.compiler.visit_Sub->_make_binop('-')
A:flask.jinja2.compiler.visit_Mul->_make_binop('*')
A:flask.jinja2.compiler.visit_Div->_make_binop('/')
A:flask.jinja2.compiler.visit_FloorDiv->_make_binop('//')
A:flask.jinja2.compiler.visit_Pow->_make_binop('**')
A:flask.jinja2.compiler.visit_Mod->_make_binop('%')
A:flask.jinja2.compiler.visit_And->_make_binop('and')
A:flask.jinja2.compiler.visit_Or->_make_binop('or')
A:flask.jinja2.compiler.visit_Pos->_make_unop('+')
A:flask.jinja2.compiler.visit_Neg->_make_unop('-')
A:flask.jinja2.compiler.visit_Not->_make_unop('not ')
A:flask.jinja2.compiler.func->self.environment.tests.get(node.name)
A:flask.jinja2.compiler.extra_kwargs->dict(loop_kwargs, **block_kwargs)
A:flask.jinja2.compiler.scope_frame->frame.soft().soft().inner(isolated=True)
A:flask.jinja2.compiler.ctx->self.temporary_identifier()
A:flask.jinja2.compiler.old_ctx_name->self.temporary_identifier()
A:flask.jinja2.compiler.saved_ctx->frame.soft().soft().eval_ctx.save()
flask.jinja2.compiler.CodeGenerator(self,environment:'Environment',name:t.Optional[str],filename:t.Optional[str],stream:t.Optional[t.TextIO]=None,defer_init:bool=False,optimized:bool=True)
flask.jinja2.compiler.CodeGenerator._FinalizeInfo(t.NamedTuple)
flask.jinja2.compiler.CodeGenerator.__init__(self,environment:'Environment',name:t.Optional[str],filename:t.Optional[str],stream:t.Optional[t.TextIO]=None,defer_init:bool=False,optimized:bool=True)
flask.jinja2.compiler.CodeGenerator._default_finalize(value:t.Any)->t.Any
flask.jinja2.compiler.CodeGenerator._filter_test_common(self,node:t.Union[nodes.Filter,nodes.Test],frame:Frame,is_filter:bool)->t.Iterator[None]
flask.jinja2.compiler.CodeGenerator._import_common(self,node:t.Union[nodes.Import,nodes.FromImport],frame:Frame)->None
flask.jinja2.compiler.CodeGenerator._make_finalize(self)->_FinalizeInfo
flask.jinja2.compiler.CodeGenerator._output_child_post(self,node:nodes.Expr,frame:Frame,finalize:_FinalizeInfo)->None
flask.jinja2.compiler.CodeGenerator._output_child_pre(self,node:nodes.Expr,frame:Frame,finalize:_FinalizeInfo)->None
flask.jinja2.compiler.CodeGenerator._output_child_to_const(self,node:nodes.Expr,frame:Frame,finalize:_FinalizeInfo)->str
flask.jinja2.compiler.CodeGenerator._output_const_repr(self,group:t.Iterable[t.Any])->str
flask.jinja2.compiler.CodeGenerator.blockvisit(self,nodes:t.Iterable[nodes.Node],frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.buffer(self,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.choose_async(self,async_value:str='async',sync_value:str='')->str
flask.jinja2.compiler.CodeGenerator.derive_context(self,frame:Frame)->str
flask.jinja2.compiler.CodeGenerator.dump_local_context(self,frame:Frame)->str
flask.jinja2.compiler.CodeGenerator.end_write(self,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.enter_frame(self,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.fail(self,msg:str,lineno:int)->'te.NoReturn'
flask.jinja2.compiler.CodeGenerator.func(self,name:str)->str
flask.jinja2.compiler.CodeGenerator.get_context_ref(self)->str
flask.jinja2.compiler.CodeGenerator.get_resolve_func(self)->str
flask.jinja2.compiler.CodeGenerator.indent(self)->None
flask.jinja2.compiler.CodeGenerator.leave_frame(self,frame:Frame,with_python_scope:bool=False)->None
flask.jinja2.compiler.CodeGenerator.macro_body(self,node:t.Union[nodes.Macro,nodes.CallBlock],frame:Frame)->t.Tuple[Frame, MacroRef]
flask.jinja2.compiler.CodeGenerator.macro_def(self,macro_ref:MacroRef,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.mark_parameter_stored(self,target:str)->None
flask.jinja2.compiler.CodeGenerator.newline(self,node:t.Optional[nodes.Node]=None,extra:int=0)->None
flask.jinja2.compiler.CodeGenerator.optimized(self)->bool
flask.jinja2.compiler.CodeGenerator.outdent(self,step:int=1)->None
flask.jinja2.compiler.CodeGenerator.parameter_is_undeclared(self,target:str)->bool
flask.jinja2.compiler.CodeGenerator.pop_assign_tracking(self,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.pop_context_reference(self)->None
flask.jinja2.compiler.CodeGenerator.pop_parameter_definitions(self)->None
flask.jinja2.compiler.CodeGenerator.position(self,node:nodes.Node)->str
flask.jinja2.compiler.CodeGenerator.pull_dependencies(self,nodes:t.Iterable[nodes.Node])->None
flask.jinja2.compiler.CodeGenerator.push_assign_tracking(self)->None
flask.jinja2.compiler.CodeGenerator.push_context_reference(self,target:str)->None
flask.jinja2.compiler.CodeGenerator.push_parameter_definitions(self,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.return_buffer_contents(self,frame:Frame,force_unescaped:bool=False)->None
flask.jinja2.compiler.CodeGenerator.signature(self,node:t.Union[nodes.Call,nodes.Filter,nodes.Test],frame:Frame,extra_kwargs:t.Optional[t.Mapping[str,t.Any]]=None)->None
flask.jinja2.compiler.CodeGenerator.simple_write(self,s:str,frame:Frame,node:t.Optional[nodes.Node]=None)->None
flask.jinja2.compiler.CodeGenerator.start_write(self,frame:Frame,node:t.Optional[nodes.Node]=None)->None
flask.jinja2.compiler.CodeGenerator.temporary_identifier(self)->str
flask.jinja2.compiler.CodeGenerator.visit_Assign(self,node:nodes.Assign,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_AssignBlock(self,node:nodes.AssignBlock,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Block(self,node:nodes.Block,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Break(self,node:nodes.Break,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Call(self,node:nodes.Call,frame:Frame,forward_caller:bool=False)->None
flask.jinja2.compiler.CodeGenerator.visit_CallBlock(self,node:nodes.CallBlock,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Compare(self,node:nodes.Compare,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Concat(self,node:nodes.Concat,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_CondExpr(self,node:nodes.CondExpr,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Const(self,node:nodes.Const,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_ContextReference(self,node:nodes.ContextReference,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Continue(self,node:nodes.Continue,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_DerivedContextReference(self,node:nodes.DerivedContextReference,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Dict(self,node:nodes.Dict,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_EnvironmentAttribute(self,node:nodes.EnvironmentAttribute,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_EvalContextModifier(self,node:nodes.EvalContextModifier,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_ExprStmt(self,node:nodes.ExprStmt,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Extends(self,node:nodes.Extends,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_ExtensionAttribute(self,node:nodes.ExtensionAttribute,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Filter(self,node:nodes.Filter,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_FilterBlock(self,node:nodes.FilterBlock,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_For(self,node:nodes.For,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_FromImport(self,node:nodes.FromImport,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Getattr(self,node:nodes.Getattr,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Getitem(self,node:nodes.Getitem,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_If(self,node:nodes.If,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Import(self,node:nodes.Import,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_ImportedName(self,node:nodes.ImportedName,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Include(self,node:nodes.Include,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_InternalName(self,node:nodes.InternalName,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Keyword(self,node:nodes.Keyword,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_List(self,node:nodes.List,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Macro(self,node:nodes.Macro,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_MarkSafe(self,node:nodes.MarkSafe,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_MarkSafeIfAutoescape(self,node:nodes.MarkSafeIfAutoescape,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_NSRef(self,node:nodes.NSRef,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Name(self,node:nodes.Name,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Operand(self,node:nodes.Operand,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Output(self,node:nodes.Output,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_OverlayScope(self,node:nodes.OverlayScope,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Scope(self,node:nodes.Scope,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_ScopedEvalContextModifier(self,node:nodes.ScopedEvalContextModifier,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Slice(self,node:nodes.Slice,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Template(self,node:nodes.Template,frame:t.Optional[Frame]=None)->None
flask.jinja2.compiler.CodeGenerator.visit_TemplateData(self,node:nodes.TemplateData,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Test(self,node:nodes.Test,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_Tuple(self,node:nodes.Tuple,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.visit_With(self,node:nodes.With,frame:Frame)->None
flask.jinja2.compiler.CodeGenerator.write(self,x:str)->None
flask.jinja2.compiler.CodeGenerator.write_commons(self)->None
flask.jinja2.compiler.CodeGenerator.writeline(self,x:str,node:t.Optional[nodes.Node]=None,extra:int=0)->None
flask.jinja2.compiler.CompilerExit(Exception)
flask.jinja2.compiler.DependencyFinderVisitor(self)
flask.jinja2.compiler.DependencyFinderVisitor.__init__(self)
flask.jinja2.compiler.DependencyFinderVisitor.visit_Block(self,node:nodes.Block)->None
flask.jinja2.compiler.DependencyFinderVisitor.visit_Filter(self,node:nodes.Filter)->None
flask.jinja2.compiler.DependencyFinderVisitor.visit_Test(self,node:nodes.Test)->None
flask.jinja2.compiler.Frame(self,eval_ctx:EvalContext,parent:t.Optional['Frame']=None,level:t.Optional[int]=None)
flask.jinja2.compiler.Frame.__init__(self,eval_ctx:EvalContext,parent:t.Optional['Frame']=None,level:t.Optional[int]=None)
flask.jinja2.compiler.Frame.copy(self)->'Frame'
flask.jinja2.compiler.Frame.inner(self,isolated:bool=False)->'Frame'
flask.jinja2.compiler.Frame.soft(self)->'Frame'
flask.jinja2.compiler.MacroRef(self,node:t.Union[nodes.Macro,nodes.CallBlock])
flask.jinja2.compiler.MacroRef.__init__(self,node:t.Union[nodes.Macro,nodes.CallBlock])
flask.jinja2.compiler.UndeclaredNameVisitor(self,names:t.Iterable[str])
flask.jinja2.compiler.UndeclaredNameVisitor.__init__(self,names:t.Iterable[str])
flask.jinja2.compiler.UndeclaredNameVisitor.visit_Block(self,node:nodes.Block)->None
flask.jinja2.compiler.UndeclaredNameVisitor.visit_Name(self,node:nodes.Name)->None
flask.jinja2.compiler.VisitorExit(RuntimeError)
flask.jinja2.compiler._make_binop(op:str)->t.Callable[['CodeGenerator', nodes.BinExpr, 'Frame'], None]
flask.jinja2.compiler._make_unop(op:str)->t.Callable[['CodeGenerator', nodes.UnaryExpr, 'Frame'], None]
flask.jinja2.compiler.find_undeclared(nodes:t.Iterable[nodes.Node],names:t.Iterable[str])->t.Set[str]
flask.jinja2.compiler.generate(node:nodes.Template,environment:'Environment',name:t.Optional[str],filename:t.Optional[str],stream:t.Optional[t.TextIO]=None,defer_init:bool=False,optimized:bool=True)->t.Optional[str]
flask.jinja2.compiler.has_safe_repr(value:t.Any)->bool
flask.jinja2.compiler.optimizeconst(f:F)->F


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/environment.py----------------------------------------
A:flask.jinja2.environment._env_bound->typing.TypeVar('_env_bound', bound='Environment')
A:flask.jinja2.environment.env->get_spontaneous_environment(cls.environment_class, block_start_string, block_end_string, variable_start_string, variable_end_string, comment_start_string, comment_end_string, line_statement_prefix, line_comment_prefix, trim_blocks, lstrip_blocks, newline_sequence, keep_trailing_newline, frozenset(extensions), optimized, undefined, finalize, autoescape, None, 0, False, None, enable_async)
A:flask.jinja2.environment.extension->typing.cast(t.Type['Extension'], import_string(extension))
A:flask.jinja2.environment.result[extension.identifier]->extension(environment)
A:flask.jinja2.environment.self.filters->defaults.DEFAULT_FILTERS.copy()
A:flask.jinja2.environment.self.tests->defaults.DEFAULT_TESTS.copy()
A:flask.jinja2.environment.self.globals->defaults.DEFAULT_NAMESPACE.copy()
A:flask.jinja2.environment.self.cache->create_cache(cache_size)
A:flask.jinja2.environment.self.policies->defaults.DEFAULT_POLICIES.copy()
A:flask.jinja2.environment.self.extensions->load_extensions(self, extensions)
A:flask.jinja2.environment.args->dict(locals())
A:flask.jinja2.environment.rv->cls._from_namespace(environment, namespace, globals)
A:flask.jinja2.environment.rv.cache->copy_cache(self.cache)
A:flask.jinja2.environment.rv.extensions[key]->value.bind(rv)
A:flask.jinja2.environment.attr->str(argument)
A:flask.jinja2.environment.func->env_map.get(name)
A:flask.jinja2.environment.pass_arg->utils._PassArg.from_obj(func)
A:flask.jinja2.environment.eval_ctx->EvalContext(self)
A:flask.jinja2.environment.source->self._generate(source, name, filename, defer_init=defer_init)
A:flask.jinja2.environment.stream->TokenStream(stream, name, filename)
A:flask.jinja2.environment.parser->Parser(self, source, state='variable')
A:flask.jinja2.environment.expr->Parser(self, source, state='variable').parse_expression()
A:flask.jinja2.environment.template->self.loader.load(self, name, self.make_globals(globals))
A:flask.jinja2.environment.info->ZipInfo(filename)
A:flask.jinja2.environment.zip_file->ZipFile(target, 'w', dict(deflated=ZIP_DEFLATED, stored=ZIP_STORED)[zip])
A:flask.jinja2.environment.(source, filename, _)->self.loader.get_source(self, name)
A:flask.jinja2.environment.code->self.compile(source, name, filename, True, True)
A:flask.jinja2.environment.filename->loaders.ModuleLoader.get_module_filename(name)
A:flask.jinja2.environment.names->self.loader.list_templates()
A:flask.jinja2.environment.name->repr(self.__name__)
A:flask.jinja2.environment.gs->self.make_globals(globals)
A:flask.jinja2.environment.loop->asyncio.get_event_loop()
A:flask.jinja2.environment.ctx->self.new_context(vars, shared, locals)
A:flask.jinja2.environment.out->asyncio.run(to_list())
A:flask.jinja2.environment.self._module->self.make_module()
A:flask.jinja2.environment.body_stream->list(template.root_render_func(context))
A:flask.jinja2.environment.context->self._template.new_context(dict(*args, **kwargs))
A:flask.jinja2.environment.fp->open(fp, 'wb')
A:flask.jinja2.environment.self._next->partial(next, self._buffered_generator(size))
A:flask.jinja2.environment.c->next(self._gen)
flask.jinja2.Environment(self,block_start_string:str=BLOCK_START_STRING,block_end_string:str=BLOCK_END_STRING,variable_start_string:str=VARIABLE_START_STRING,variable_end_string:str=VARIABLE_END_STRING,comment_start_string:str=COMMENT_START_STRING,comment_end_string:str=COMMENT_END_STRING,line_statement_prefix:t.Optional[str]=LINE_STATEMENT_PREFIX,line_comment_prefix:t.Optional[str]=LINE_COMMENT_PREFIX,trim_blocks:bool=TRIM_BLOCKS,lstrip_blocks:bool=LSTRIP_BLOCKS,newline_sequence:"te.Literal['\\n','\\r\\n','\\r']"=NEWLINE_SEQUENCE,keep_trailing_newline:bool=KEEP_TRAILING_NEWLINE,extensions:t.Sequence[t.Union[str,t.Type['Extension']]]=(),optimized:bool=True,undefined:t.Type[Undefined]=Undefined,finalize:t.Optional[t.Callable[...,t.Any]]=None,autoescape:t.Union[bool,t.Callable[[t.Optional[str]],bool]]=False,loader:t.Optional['BaseLoader']=None,cache_size:int=400,auto_reload:bool=True,bytecode_cache:t.Optional['BytecodeCache']=None,enable_async:bool=False)
flask.jinja2.Environment._compile(self,source:str,filename:str)->CodeType
flask.jinja2.Environment._filter_test_common(self,name:t.Union[str,Undefined],value:t.Any,args:t.Optional[t.Sequence[t.Any]],kwargs:t.Optional[t.Mapping[str,t.Any]],context:t.Optional[Context],eval_ctx:t.Optional[EvalContext],is_filter:bool)->t.Any
flask.jinja2.Environment._generate(self,source:nodes.Template,name:t.Optional[str],filename:t.Optional[str],defer_init:bool=False)->str
flask.jinja2.Environment._load_template(self,name:str,globals:t.Optional[t.Mapping[str,t.Any]])->'Template'
flask.jinja2.Environment._parse(self,source:str,name:t.Optional[str],filename:t.Optional[str])->nodes.Template
flask.jinja2.Environment._tokenize(self,source:str,name:t.Optional[str],filename:t.Optional[str]=None,state:t.Optional[str]=None)->TokenStream
flask.jinja2.Environment.add_extension(self,extension:t.Union[str,t.Type['Extension']])->None
flask.jinja2.Environment.call_filter(self,name:str,value:t.Any,args:t.Optional[t.Sequence[t.Any]]=None,kwargs:t.Optional[t.Mapping[str,t.Any]]=None,context:t.Optional[Context]=None,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.Environment.call_test(self,name:str,value:t.Any,args:t.Optional[t.Sequence[t.Any]]=None,kwargs:t.Optional[t.Mapping[str,t.Any]]=None,context:t.Optional[Context]=None,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.Environment.compile(self,source:t.Union[str,nodes.Template],name:t.Optional[str]=None,filename:t.Optional[str]=None,raw:bool=False,defer_init:bool=False)->t.Union[str, CodeType]
flask.jinja2.Environment.compile_expression(self,source:str,undefined_to_none:bool=True)->'TemplateExpression'
flask.jinja2.Environment.compile_templates(self,target:t.Union[str,os.PathLike],extensions:t.Optional[t.Collection[str]]=None,filter_func:t.Optional[t.Callable[[str],bool]]=None,zip:t.Optional[str]='deflated',log_function:t.Optional[t.Callable[[str],None]]=None,ignore_errors:bool=True)->None
flask.jinja2.Environment.extend(self,**attributes:t.Any)->None
flask.jinja2.Environment.from_string(self,source:t.Union[str,nodes.Template],globals:t.Optional[t.Mapping[str,t.Any]]=None,template_class:t.Optional[t.Type['Template']]=None)->'Template'
flask.jinja2.Environment.get_or_select_template(self,template_name_or_list:t.Union[str,'Template',t.List[t.Union[str,'Template']]],parent:t.Optional[str]=None,globals:t.Optional[t.Mapping[str,t.Any]]=None)->'Template'
flask.jinja2.Environment.get_template(self,name:t.Union[str,'Template'],parent:t.Optional[str]=None,globals:t.Optional[t.Mapping[str,t.Any]]=None)->'Template'
flask.jinja2.Environment.getattr(self,obj:t.Any,attribute:str)->t.Any
flask.jinja2.Environment.getitem(self,obj:t.Any,argument:t.Union[str,t.Any])->t.Union[t.Any, Undefined]
flask.jinja2.Environment.handle_exception(self,source:t.Optional[str]=None)->'te.NoReturn'
flask.jinja2.Environment.iter_extensions(self)->t.Iterator['Extension']
flask.jinja2.Environment.join_path(self,template:str,parent:str)->str
flask.jinja2.Environment.lex(self,source:str,name:t.Optional[str]=None,filename:t.Optional[str]=None)->t.Iterator[t.Tuple[int, str, str]]
flask.jinja2.Environment.lexer(self)->Lexer
flask.jinja2.Environment.list_templates(self,extensions:t.Optional[t.Collection[str]]=None,filter_func:t.Optional[t.Callable[[str],bool]]=None)->t.List[str]
flask.jinja2.Environment.make_globals(self,d:t.Optional[t.Mapping[str,t.Any]])->t.MutableMapping[str, t.Any]
flask.jinja2.Environment.overlay(self,block_start_string:str=missing,block_end_string:str=missing,variable_start_string:str=missing,variable_end_string:str=missing,comment_start_string:str=missing,comment_end_string:str=missing,line_statement_prefix:t.Optional[str]=missing,line_comment_prefix:t.Optional[str]=missing,trim_blocks:bool=missing,lstrip_blocks:bool=missing,extensions:t.Sequence[t.Union[str,t.Type['Extension']]]=missing,optimized:bool=missing,undefined:t.Type[Undefined]=missing,finalize:t.Optional[t.Callable[...,t.Any]]=missing,autoescape:t.Union[bool,t.Callable[[t.Optional[str]],bool]]=missing,loader:t.Optional['BaseLoader']=missing,cache_size:int=missing,auto_reload:bool=missing,bytecode_cache:t.Optional['BytecodeCache']=missing)->'Environment'
flask.jinja2.Environment.parse(self,source:str,name:t.Optional[str]=None,filename:t.Optional[str]=None)->nodes.Template
flask.jinja2.Environment.preprocess(self,source:str,name:t.Optional[str]=None,filename:t.Optional[str]=None)->str
flask.jinja2.Environment.select_template(self,names:t.Iterable[t.Union[str,'Template']],parent:t.Optional[str]=None,globals:t.Optional[t.Mapping[str,t.Any]]=None)->'Template'
flask.jinja2.Template(cls,source:t.Union[str,nodes.Template],block_start_string:str=BLOCK_START_STRING,block_end_string:str=BLOCK_END_STRING,variable_start_string:str=VARIABLE_START_STRING,variable_end_string:str=VARIABLE_END_STRING,comment_start_string:str=COMMENT_START_STRING,comment_end_string:str=COMMENT_END_STRING,line_statement_prefix:t.Optional[str]=LINE_STATEMENT_PREFIX,line_comment_prefix:t.Optional[str]=LINE_COMMENT_PREFIX,trim_blocks:bool=TRIM_BLOCKS,lstrip_blocks:bool=LSTRIP_BLOCKS,newline_sequence:"te.Literal['\\n','\\r\\n','\\r']"=NEWLINE_SEQUENCE,keep_trailing_newline:bool=KEEP_TRAILING_NEWLINE,extensions:t.Sequence[t.Union[str,t.Type['Extension']]]=(),optimized:bool=True,undefined:t.Type[Undefined]=Undefined,finalize:t.Optional[t.Callable[...,t.Any]]=None,autoescape:t.Union[bool,t.Callable[[t.Optional[str]],bool]]=False,enable_async:bool=False)
flask.jinja2.Template.__repr__(self)->str
flask.jinja2.Template._from_namespace(cls,environment:Environment,namespace:t.MutableMapping[str,t.Any],globals:t.MutableMapping[str,t.Any])->'Template'
flask.jinja2.Template._get_default_module(self,ctx:t.Optional[Context]=None)->'TemplateModule'
flask.jinja2.Template.debug_info(self)->t.List[t.Tuple[int, int]]
flask.jinja2.Template.from_code(cls,environment:Environment,code:CodeType,globals:t.MutableMapping[str,t.Any],uptodate:t.Optional[t.Callable[[],bool]]=None)->'Template'
flask.jinja2.Template.from_module_dict(cls,environment:Environment,module_dict:t.MutableMapping[str,t.Any],globals:t.MutableMapping[str,t.Any])->'Template'
flask.jinja2.Template.generate(self,*args:t.Any,**kwargs:t.Any)->t.Iterator[str]
flask.jinja2.Template.get_corresponding_lineno(self,lineno:int)->int
flask.jinja2.Template.is_up_to_date(self)->bool
flask.jinja2.Template.make_module(self,vars:t.Optional[t.Dict[str,t.Any]]=None,shared:bool=False,locals:t.Optional[t.Mapping[str,t.Any]]=None)->'TemplateModule'
flask.jinja2.Template.module(self)->'TemplateModule'
flask.jinja2.Template.new_context(self,vars:t.Optional[t.Dict[str,t.Any]]=None,shared:bool=False,locals:t.Optional[t.Mapping[str,t.Any]]=None)->Context
flask.jinja2.Template.render(self,*args:t.Any,**kwargs:t.Any)->str
flask.jinja2.Template.stream(self,*args:t.Any,**kwargs:t.Any)->'TemplateStream'
flask.jinja2.TemplateExpression(self,template:Template,undefined_to_none:bool)
flask.jinja2.TemplateModule(self,template:Template,context:Context,body_stream:t.Optional[t.Iterable[str]]=None)
flask.jinja2.TemplateModule.__html__(self)->Markup
flask.jinja2.TemplateModule.__repr__(self)->str
flask.jinja2.TemplateModule.__str__(self)->str
flask.jinja2.TemplateStream(self,gen:t.Iterator[str])
flask.jinja2.TemplateStream.__iter__(self)->'TemplateStream'
flask.jinja2.TemplateStream.__next__(self)->str
flask.jinja2.TemplateStream._buffered_generator(self,size:int)->t.Iterator[str]
flask.jinja2.TemplateStream.disable_buffering(self)->None
flask.jinja2.TemplateStream.dump(self,fp:t.Union[str,t.IO],encoding:t.Optional[str]=None,errors:t.Optional[str]='strict')->None
flask.jinja2.TemplateStream.enable_buffering(self,size:int=5)->None
flask.jinja2.environment.Environment(self,block_start_string:str=BLOCK_START_STRING,block_end_string:str=BLOCK_END_STRING,variable_start_string:str=VARIABLE_START_STRING,variable_end_string:str=VARIABLE_END_STRING,comment_start_string:str=COMMENT_START_STRING,comment_end_string:str=COMMENT_END_STRING,line_statement_prefix:t.Optional[str]=LINE_STATEMENT_PREFIX,line_comment_prefix:t.Optional[str]=LINE_COMMENT_PREFIX,trim_blocks:bool=TRIM_BLOCKS,lstrip_blocks:bool=LSTRIP_BLOCKS,newline_sequence:"te.Literal['\\n','\\r\\n','\\r']"=NEWLINE_SEQUENCE,keep_trailing_newline:bool=KEEP_TRAILING_NEWLINE,extensions:t.Sequence[t.Union[str,t.Type['Extension']]]=(),optimized:bool=True,undefined:t.Type[Undefined]=Undefined,finalize:t.Optional[t.Callable[...,t.Any]]=None,autoescape:t.Union[bool,t.Callable[[t.Optional[str]],bool]]=False,loader:t.Optional['BaseLoader']=None,cache_size:int=400,auto_reload:bool=True,bytecode_cache:t.Optional['BytecodeCache']=None,enable_async:bool=False)
flask.jinja2.environment.Environment.__init__(self,block_start_string:str=BLOCK_START_STRING,block_end_string:str=BLOCK_END_STRING,variable_start_string:str=VARIABLE_START_STRING,variable_end_string:str=VARIABLE_END_STRING,comment_start_string:str=COMMENT_START_STRING,comment_end_string:str=COMMENT_END_STRING,line_statement_prefix:t.Optional[str]=LINE_STATEMENT_PREFIX,line_comment_prefix:t.Optional[str]=LINE_COMMENT_PREFIX,trim_blocks:bool=TRIM_BLOCKS,lstrip_blocks:bool=LSTRIP_BLOCKS,newline_sequence:"te.Literal['\\n','\\r\\n','\\r']"=NEWLINE_SEQUENCE,keep_trailing_newline:bool=KEEP_TRAILING_NEWLINE,extensions:t.Sequence[t.Union[str,t.Type['Extension']]]=(),optimized:bool=True,undefined:t.Type[Undefined]=Undefined,finalize:t.Optional[t.Callable[...,t.Any]]=None,autoescape:t.Union[bool,t.Callable[[t.Optional[str]],bool]]=False,loader:t.Optional['BaseLoader']=None,cache_size:int=400,auto_reload:bool=True,bytecode_cache:t.Optional['BytecodeCache']=None,enable_async:bool=False)
flask.jinja2.environment.Environment._compile(self,source:str,filename:str)->CodeType
flask.jinja2.environment.Environment._filter_test_common(self,name:t.Union[str,Undefined],value:t.Any,args:t.Optional[t.Sequence[t.Any]],kwargs:t.Optional[t.Mapping[str,t.Any]],context:t.Optional[Context],eval_ctx:t.Optional[EvalContext],is_filter:bool)->t.Any
flask.jinja2.environment.Environment._generate(self,source:nodes.Template,name:t.Optional[str],filename:t.Optional[str],defer_init:bool=False)->str
flask.jinja2.environment.Environment._load_template(self,name:str,globals:t.Optional[t.Mapping[str,t.Any]])->'Template'
flask.jinja2.environment.Environment._parse(self,source:str,name:t.Optional[str],filename:t.Optional[str])->nodes.Template
flask.jinja2.environment.Environment._tokenize(self,source:str,name:t.Optional[str],filename:t.Optional[str]=None,state:t.Optional[str]=None)->TokenStream
flask.jinja2.environment.Environment.add_extension(self,extension:t.Union[str,t.Type['Extension']])->None
flask.jinja2.environment.Environment.call_filter(self,name:str,value:t.Any,args:t.Optional[t.Sequence[t.Any]]=None,kwargs:t.Optional[t.Mapping[str,t.Any]]=None,context:t.Optional[Context]=None,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.environment.Environment.call_test(self,name:str,value:t.Any,args:t.Optional[t.Sequence[t.Any]]=None,kwargs:t.Optional[t.Mapping[str,t.Any]]=None,context:t.Optional[Context]=None,eval_ctx:t.Optional[EvalContext]=None)->t.Any
flask.jinja2.environment.Environment.compile(self,source:t.Union[str,nodes.Template],name:t.Optional[str]=None,filename:t.Optional[str]=None,raw:bool=False,defer_init:bool=False)->t.Union[str, CodeType]
flask.jinja2.environment.Environment.compile_expression(self,source:str,undefined_to_none:bool=True)->'TemplateExpression'
flask.jinja2.environment.Environment.compile_templates(self,target:t.Union[str,os.PathLike],extensions:t.Optional[t.Collection[str]]=None,filter_func:t.Optional[t.Callable[[str],bool]]=None,zip:t.Optional[str]='deflated',log_function:t.Optional[t.Callable[[str],None]]=None,ignore_errors:bool=True)->None
flask.jinja2.environment.Environment.extend(self,**attributes:t.Any)->None
flask.jinja2.environment.Environment.from_string(self,source:t.Union[str,nodes.Template],globals:t.Optional[t.Mapping[str,t.Any]]=None,template_class:t.Optional[t.Type['Template']]=None)->'Template'
flask.jinja2.environment.Environment.get_or_select_template(self,template_name_or_list:t.Union[str,'Template',t.List[t.Union[str,'Template']]],parent:t.Optional[str]=None,globals:t.Optional[t.Mapping[str,t.Any]]=None)->'Template'
flask.jinja2.environment.Environment.get_template(self,name:t.Union[str,'Template'],parent:t.Optional[str]=None,globals:t.Optional[t.Mapping[str,t.Any]]=None)->'Template'
flask.jinja2.environment.Environment.getattr(self,obj:t.Any,attribute:str)->t.Any
flask.jinja2.environment.Environment.getitem(self,obj:t.Any,argument:t.Union[str,t.Any])->t.Union[t.Any, Undefined]
flask.jinja2.environment.Environment.handle_exception(self,source:t.Optional[str]=None)->'te.NoReturn'
flask.jinja2.environment.Environment.iter_extensions(self)->t.Iterator['Extension']
flask.jinja2.environment.Environment.join_path(self,template:str,parent:str)->str
flask.jinja2.environment.Environment.lex(self,source:str,name:t.Optional[str]=None,filename:t.Optional[str]=None)->t.Iterator[t.Tuple[int, str, str]]
flask.jinja2.environment.Environment.lexer(self)->Lexer
flask.jinja2.environment.Environment.list_templates(self,extensions:t.Optional[t.Collection[str]]=None,filter_func:t.Optional[t.Callable[[str],bool]]=None)->t.List[str]
flask.jinja2.environment.Environment.make_globals(self,d:t.Optional[t.Mapping[str,t.Any]])->t.MutableMapping[str, t.Any]
flask.jinja2.environment.Environment.overlay(self,block_start_string:str=missing,block_end_string:str=missing,variable_start_string:str=missing,variable_end_string:str=missing,comment_start_string:str=missing,comment_end_string:str=missing,line_statement_prefix:t.Optional[str]=missing,line_comment_prefix:t.Optional[str]=missing,trim_blocks:bool=missing,lstrip_blocks:bool=missing,extensions:t.Sequence[t.Union[str,t.Type['Extension']]]=missing,optimized:bool=missing,undefined:t.Type[Undefined]=missing,finalize:t.Optional[t.Callable[...,t.Any]]=missing,autoescape:t.Union[bool,t.Callable[[t.Optional[str]],bool]]=missing,loader:t.Optional['BaseLoader']=missing,cache_size:int=missing,auto_reload:bool=missing,bytecode_cache:t.Optional['BytecodeCache']=missing)->'Environment'
flask.jinja2.environment.Environment.parse(self,source:str,name:t.Optional[str]=None,filename:t.Optional[str]=None)->nodes.Template
flask.jinja2.environment.Environment.preprocess(self,source:str,name:t.Optional[str]=None,filename:t.Optional[str]=None)->str
flask.jinja2.environment.Environment.select_template(self,names:t.Iterable[t.Union[str,'Template']],parent:t.Optional[str]=None,globals:t.Optional[t.Mapping[str,t.Any]]=None)->'Template'
flask.jinja2.environment.Template(cls,source:t.Union[str,nodes.Template],block_start_string:str=BLOCK_START_STRING,block_end_string:str=BLOCK_END_STRING,variable_start_string:str=VARIABLE_START_STRING,variable_end_string:str=VARIABLE_END_STRING,comment_start_string:str=COMMENT_START_STRING,comment_end_string:str=COMMENT_END_STRING,line_statement_prefix:t.Optional[str]=LINE_STATEMENT_PREFIX,line_comment_prefix:t.Optional[str]=LINE_COMMENT_PREFIX,trim_blocks:bool=TRIM_BLOCKS,lstrip_blocks:bool=LSTRIP_BLOCKS,newline_sequence:"te.Literal['\\n','\\r\\n','\\r']"=NEWLINE_SEQUENCE,keep_trailing_newline:bool=KEEP_TRAILING_NEWLINE,extensions:t.Sequence[t.Union[str,t.Type['Extension']]]=(),optimized:bool=True,undefined:t.Type[Undefined]=Undefined,finalize:t.Optional[t.Callable[...,t.Any]]=None,autoescape:t.Union[bool,t.Callable[[t.Optional[str]],bool]]=False,enable_async:bool=False)
flask.jinja2.environment.Template.__new__(cls,source:t.Union[str,nodes.Template],block_start_string:str=BLOCK_START_STRING,block_end_string:str=BLOCK_END_STRING,variable_start_string:str=VARIABLE_START_STRING,variable_end_string:str=VARIABLE_END_STRING,comment_start_string:str=COMMENT_START_STRING,comment_end_string:str=COMMENT_END_STRING,line_statement_prefix:t.Optional[str]=LINE_STATEMENT_PREFIX,line_comment_prefix:t.Optional[str]=LINE_COMMENT_PREFIX,trim_blocks:bool=TRIM_BLOCKS,lstrip_blocks:bool=LSTRIP_BLOCKS,newline_sequence:"te.Literal['\\n','\\r\\n','\\r']"=NEWLINE_SEQUENCE,keep_trailing_newline:bool=KEEP_TRAILING_NEWLINE,extensions:t.Sequence[t.Union[str,t.Type['Extension']]]=(),optimized:bool=True,undefined:t.Type[Undefined]=Undefined,finalize:t.Optional[t.Callable[...,t.Any]]=None,autoescape:t.Union[bool,t.Callable[[t.Optional[str]],bool]]=False,enable_async:bool=False)
flask.jinja2.environment.Template.__repr__(self)->str
flask.jinja2.environment.Template._from_namespace(cls,environment:Environment,namespace:t.MutableMapping[str,t.Any],globals:t.MutableMapping[str,t.Any])->'Template'
flask.jinja2.environment.Template._get_default_module(self,ctx:t.Optional[Context]=None)->'TemplateModule'
flask.jinja2.environment.Template.debug_info(self)->t.List[t.Tuple[int, int]]
flask.jinja2.environment.Template.from_code(cls,environment:Environment,code:CodeType,globals:t.MutableMapping[str,t.Any],uptodate:t.Optional[t.Callable[[],bool]]=None)->'Template'
flask.jinja2.environment.Template.from_module_dict(cls,environment:Environment,module_dict:t.MutableMapping[str,t.Any],globals:t.MutableMapping[str,t.Any])->'Template'
flask.jinja2.environment.Template.generate(self,*args:t.Any,**kwargs:t.Any)->t.Iterator[str]
flask.jinja2.environment.Template.get_corresponding_lineno(self,lineno:int)->int
flask.jinja2.environment.Template.is_up_to_date(self)->bool
flask.jinja2.environment.Template.make_module(self,vars:t.Optional[t.Dict[str,t.Any]]=None,shared:bool=False,locals:t.Optional[t.Mapping[str,t.Any]]=None)->'TemplateModule'
flask.jinja2.environment.Template.module(self)->'TemplateModule'
flask.jinja2.environment.Template.new_context(self,vars:t.Optional[t.Dict[str,t.Any]]=None,shared:bool=False,locals:t.Optional[t.Mapping[str,t.Any]]=None)->Context
flask.jinja2.environment.Template.render(self,*args:t.Any,**kwargs:t.Any)->str
flask.jinja2.environment.Template.stream(self,*args:t.Any,**kwargs:t.Any)->'TemplateStream'
flask.jinja2.environment.TemplateExpression(self,template:Template,undefined_to_none:bool)
flask.jinja2.environment.TemplateExpression.__init__(self,template:Template,undefined_to_none:bool)
flask.jinja2.environment.TemplateModule(self,template:Template,context:Context,body_stream:t.Optional[t.Iterable[str]]=None)
flask.jinja2.environment.TemplateModule.__html__(self)->Markup
flask.jinja2.environment.TemplateModule.__init__(self,template:Template,context:Context,body_stream:t.Optional[t.Iterable[str]]=None)
flask.jinja2.environment.TemplateModule.__repr__(self)->str
flask.jinja2.environment.TemplateModule.__str__(self)->str
flask.jinja2.environment.TemplateStream(self,gen:t.Iterator[str])
flask.jinja2.environment.TemplateStream.__init__(self,gen:t.Iterator[str])
flask.jinja2.environment.TemplateStream.__iter__(self)->'TemplateStream'
flask.jinja2.environment.TemplateStream.__next__(self)->str
flask.jinja2.environment.TemplateStream._buffered_generator(self,size:int)->t.Iterator[str]
flask.jinja2.environment.TemplateStream.disable_buffering(self)->None
flask.jinja2.environment.TemplateStream.dump(self,fp:t.Union[str,t.IO],encoding:t.Optional[str]=None,errors:t.Optional[str]='strict')->None
flask.jinja2.environment.TemplateStream.enable_buffering(self,size:int=5)->None
flask.jinja2.environment._environment_config_check(environment:'Environment')->'Environment'
flask.jinja2.environment.copy_cache(cache:t.Optional[t.MutableMapping])->t.Optional[t.MutableMapping[t.Tuple[weakref.ref, str], 'Template']]
flask.jinja2.environment.create_cache(size:int)->t.Optional[t.MutableMapping[t.Tuple[weakref.ref, str], 'Template']]
flask.jinja2.environment.get_spontaneous_environment(cls:t.Type[_env_bound],*args:t.Any)->_env_bound
flask.jinja2.environment.load_extensions(environment:'Environment',extensions:t.Sequence[t.Union[str,t.Type['Extension']]])->t.Dict[str, 'Extension']


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/optimizer.py----------------------------------------
A:flask.jinja2.optimizer.optimizer->Optimizer(environment)
A:flask.jinja2.optimizer.node->super().generic_visit(node, *args, **kwargs)
flask.jinja2.optimizer.Optimizer(self,environment:'t.Optional[Environment]')
flask.jinja2.optimizer.Optimizer.__init__(self,environment:'t.Optional[Environment]')
flask.jinja2.optimizer.Optimizer.generic_visit(self,node:nodes.Node,*args:t.Any,**kwargs:t.Any)->nodes.Node
flask.jinja2.optimizer.optimize(node:nodes.Node,environment:'Environment')->nodes.Node


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/bccache.py----------------------------------------
A:flask.jinja2.bccache.magic->f.read(len(bc_magic))
A:flask.jinja2.bccache.checksum->self.get_source_checksum(source)
A:flask.jinja2.bccache.self.code->marshal.load(f)
A:flask.jinja2.bccache.out->BytesIO()
A:flask.jinja2.bccache.hash->sha1(name.encode('utf-8'))
A:flask.jinja2.bccache.key->self.get_cache_key(name, filename)
A:flask.jinja2.bccache.bucket->Bucket(environment, key, checksum)
A:flask.jinja2.bccache.directory->self._get_default_cache_dir()
A:flask.jinja2.bccache.tmpdir->tempfile.gettempdir()
A:flask.jinja2.bccache.actual_dir->os.path.join(tmpdir, dirname)
A:flask.jinja2.bccache.actual_dir_stat->os.lstat(actual_dir)
A:flask.jinja2.bccache.filename->self._get_cache_filename(bucket)
A:flask.jinja2.bccache.files->fnmatch.filter(os.listdir(self.directory), self.pattern % ('*',))
A:flask.jinja2.bccache.code->self.client.get(self.prefix + bucket.key)
A:flask.jinja2.bccache.value->Bucket(environment, key, checksum).bytecode_to_string()
flask.jinja2.BytecodeCache
flask.jinja2.BytecodeCache.clear(self)->None
flask.jinja2.BytecodeCache.dump_bytecode(self,bucket:Bucket)->None
flask.jinja2.BytecodeCache.get_bucket(self,environment:'Environment',name:str,filename:t.Optional[str],source:str)->Bucket
flask.jinja2.BytecodeCache.get_cache_key(self,name:str,filename:t.Optional[t.Union[str]]=None)->str
flask.jinja2.BytecodeCache.get_source_checksum(self,source:str)->str
flask.jinja2.BytecodeCache.load_bytecode(self,bucket:Bucket)->None
flask.jinja2.BytecodeCache.set_bucket(self,bucket:Bucket)->None
flask.jinja2.FileSystemBytecodeCache(self,directory:t.Optional[str]=None,pattern:str='__jinja2_%s.cache')
flask.jinja2.FileSystemBytecodeCache._get_cache_filename(self,bucket:Bucket)->str
flask.jinja2.FileSystemBytecodeCache._get_default_cache_dir(self)->str
flask.jinja2.FileSystemBytecodeCache.clear(self)->None
flask.jinja2.FileSystemBytecodeCache.dump_bytecode(self,bucket:Bucket)->None
flask.jinja2.FileSystemBytecodeCache.load_bytecode(self,bucket:Bucket)->None
flask.jinja2.MemcachedBytecodeCache(self,client:'_MemcachedClient',prefix:str='jinja2/bytecode/',timeout:t.Optional[int]=None,ignore_memcache_errors:bool=True)
flask.jinja2.MemcachedBytecodeCache.dump_bytecode(self,bucket:Bucket)->None
flask.jinja2.MemcachedBytecodeCache.load_bytecode(self,bucket:Bucket)->None
flask.jinja2.bccache.Bucket(self,environment:'Environment',key:str,checksum:str)
flask.jinja2.bccache.Bucket.__init__(self,environment:'Environment',key:str,checksum:str)
flask.jinja2.bccache.Bucket.bytecode_from_string(self,string:bytes)->None
flask.jinja2.bccache.Bucket.bytecode_to_string(self)->bytes
flask.jinja2.bccache.Bucket.load_bytecode(self,f:t.BinaryIO)->None
flask.jinja2.bccache.Bucket.reset(self)->None
flask.jinja2.bccache.Bucket.write_bytecode(self,f:t.BinaryIO)->None
flask.jinja2.bccache.BytecodeCache
flask.jinja2.bccache.BytecodeCache.clear(self)->None
flask.jinja2.bccache.BytecodeCache.dump_bytecode(self,bucket:Bucket)->None
flask.jinja2.bccache.BytecodeCache.get_bucket(self,environment:'Environment',name:str,filename:t.Optional[str],source:str)->Bucket
flask.jinja2.bccache.BytecodeCache.get_cache_key(self,name:str,filename:t.Optional[t.Union[str]]=None)->str
flask.jinja2.bccache.BytecodeCache.get_source_checksum(self,source:str)->str
flask.jinja2.bccache.BytecodeCache.load_bytecode(self,bucket:Bucket)->None
flask.jinja2.bccache.BytecodeCache.set_bucket(self,bucket:Bucket)->None
flask.jinja2.bccache.FileSystemBytecodeCache(self,directory:t.Optional[str]=None,pattern:str='__jinja2_%s.cache')
flask.jinja2.bccache.FileSystemBytecodeCache.__init__(self,directory:t.Optional[str]=None,pattern:str='__jinja2_%s.cache')
flask.jinja2.bccache.FileSystemBytecodeCache._get_cache_filename(self,bucket:Bucket)->str
flask.jinja2.bccache.FileSystemBytecodeCache._get_default_cache_dir(self)->str
flask.jinja2.bccache.FileSystemBytecodeCache.clear(self)->None
flask.jinja2.bccache.FileSystemBytecodeCache.dump_bytecode(self,bucket:Bucket)->None
flask.jinja2.bccache.FileSystemBytecodeCache.load_bytecode(self,bucket:Bucket)->None
flask.jinja2.bccache.MemcachedBytecodeCache(self,client:'_MemcachedClient',prefix:str='jinja2/bytecode/',timeout:t.Optional[int]=None,ignore_memcache_errors:bool=True)
flask.jinja2.bccache.MemcachedBytecodeCache.__init__(self,client:'_MemcachedClient',prefix:str='jinja2/bytecode/',timeout:t.Optional[int]=None,ignore_memcache_errors:bool=True)
flask.jinja2.bccache.MemcachedBytecodeCache.dump_bytecode(self,bucket:Bucket)->None
flask.jinja2.bccache.MemcachedBytecodeCache.load_bytecode(self,bucket:Bucket)->None


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/runtime.py----------------------------------------
A:flask.jinja2.runtime.V->typing.TypeVar('V')
A:flask.jinja2.runtime.F->typing.TypeVar('F', bound=t.Callable[..., t.Any])
A:flask.jinja2.runtime.iterator->map(soft_str, seq)
A:flask.jinja2.runtime.parent->dict(parent)
A:flask.jinja2.runtime.self.eval_ctx->EvalContext(self.environment, name)
A:flask.jinja2.runtime.rv->Markup(rv)
A:flask.jinja2.runtime.pass_arg->utils._PassArg.from_obj(__obj)
A:flask.jinja2.runtime.__self->__self.derived(kwargs['_block_vars']).derived(kwargs['_block_vars'])
A:flask.jinja2.runtime.context->new_context(self.environment, self.name, {}, self.get_all(), True, None, locals)
A:flask.jinja2.runtime.keys->_dict_method_all(dict.keys)
A:flask.jinja2.runtime.values->_dict_method_all(dict.values)
A:flask.jinja2.runtime.items->_dict_method_all(dict.items)
A:flask.jinja2.runtime.item->self.resolve_or_missing(key)
A:flask.jinja2.runtime.self._iterator->self._to_iterator(iterable)
A:flask.jinja2.runtime.self._length->len(self._iterable)
A:flask.jinja2.runtime.iterable->list(self._iterator)
A:flask.jinja2.runtime.self._after->next(self._iterator, missing)
A:flask.jinja2.runtime.self._argument_count->len(arguments)
A:flask.jinja2.runtime.default_autoescape->environment.autoescape(None)
A:flask.jinja2.runtime.arguments->list(args[:self._argument_count])
A:flask.jinja2.runtime.off->len(arguments)
A:flask.jinja2.runtime.value->kwargs.pop(name)
A:flask.jinja2.runtime.caller->self._environment.undefined('No caller defined', name='caller')
A:flask.jinja2.runtime.logger->logging.getLogger(__name__)
flask.jinja2.ChainableUndefined(Undefined)
flask.jinja2.ChainableUndefined.__getattr__(self,_:str)->'ChainableUndefined'
flask.jinja2.ChainableUndefined.__html__(self)->str
flask.jinja2.DebugUndefined(Undefined)
flask.jinja2.DebugUndefined.__str__(self)->str
flask.jinja2.StrictUndefined(Undefined)
flask.jinja2.Undefined(self,hint:t.Optional[str]=None,obj:t.Any=missing,name:t.Optional[str]=None,exc:t.Type[TemplateRuntimeError]=UndefinedError)
flask.jinja2.Undefined.__bool__(self)->bool
flask.jinja2.Undefined.__eq__(self,other:t.Any)->bool
flask.jinja2.Undefined.__getattr__(self,name:str)->t.Any
flask.jinja2.Undefined.__hash__(self)->int
flask.jinja2.Undefined.__iter__(self)->t.Iterator[t.Any]
flask.jinja2.Undefined.__len__(self)->int
flask.jinja2.Undefined.__ne__(self,other:t.Any)->bool
flask.jinja2.Undefined.__repr__(self)->str
flask.jinja2.Undefined.__str__(self)->str
flask.jinja2.Undefined._fail_with_undefined_error(self,*args:t.Any,**kwargs:t.Any)->'te.NoReturn'
flask.jinja2.Undefined._undefined_message(self)->str
flask.jinja2.make_logging_undefined(logger:t.Optional['logging.Logger']=None,base:t.Type[Undefined]=Undefined)->t.Type[Undefined]
flask.jinja2.runtime.AsyncLoopContext(LoopContext)
flask.jinja2.runtime.AsyncLoopContext.__aiter__(self)->'AsyncLoopContext'
flask.jinja2.runtime.AsyncLoopContext._to_iterator(iterable:t.Union[t.Iterable[V],t.AsyncIterable[V]])->t.AsyncIterator[V]
flask.jinja2.runtime.BlockReference(self,name:str,context:'Context',stack:t.List[t.Callable[['Context'],t.Iterator[str]]],depth:int)
flask.jinja2.runtime.BlockReference.__init__(self,name:str,context:'Context',stack:t.List[t.Callable[['Context'],t.Iterator[str]]],depth:int)
flask.jinja2.runtime.BlockReference.super(self)->t.Union['BlockReference', 'Undefined']
flask.jinja2.runtime.ChainableUndefined(Undefined)
flask.jinja2.runtime.ChainableUndefined.__getattr__(self,_:str)->'ChainableUndefined'
flask.jinja2.runtime.ChainableUndefined.__html__(self)->str
flask.jinja2.runtime.Context(self,environment:'Environment',parent:t.Dict[str,t.Any],name:t.Optional[str],blocks:t.Dict[str,t.Callable[['Context'],t.Iterator[str]]],globals:t.Optional[t.MutableMapping[str,t.Any]]=None)
flask.jinja2.runtime.Context.__contains__(self,name:str)->bool
flask.jinja2.runtime.Context.__getitem__(self,key:str)->t.Any
flask.jinja2.runtime.Context.__init__(self,environment:'Environment',parent:t.Dict[str,t.Any],name:t.Optional[str],blocks:t.Dict[str,t.Callable[['Context'],t.Iterator[str]]],globals:t.Optional[t.MutableMapping[str,t.Any]]=None)
flask.jinja2.runtime.Context.__init_subclass__(cls)->None
flask.jinja2.runtime.Context.__repr__(self)->str
flask.jinja2.runtime.Context.call(__self,__obj:t.Callable,*args:t.Any,**kwargs:t.Any)->t.Union[t.Any, 'Undefined']
flask.jinja2.runtime.Context.derived(self,locals:t.Optional[t.Dict[str,t.Any]]=None)->'Context'
flask.jinja2.runtime.Context.get(self,key:str,default:t.Any=None)->t.Any
flask.jinja2.runtime.Context.get_all(self)->t.Dict[str, t.Any]
flask.jinja2.runtime.Context.get_exported(self)->t.Dict[str, t.Any]
flask.jinja2.runtime.Context.resolve(self,key:str)->t.Union[t.Any, 'Undefined']
flask.jinja2.runtime.Context.resolve_or_missing(self,key:str)->t.Any
flask.jinja2.runtime.Context.super(self,name:str,current:t.Callable[['Context'],t.Iterator[str]])->t.Union['BlockReference', 'Undefined']
flask.jinja2.runtime.DebugUndefined(Undefined)
flask.jinja2.runtime.DebugUndefined.__str__(self)->str
flask.jinja2.runtime.LoopContext(self,iterable:t.Iterable[V],undefined:t.Type['Undefined'],recurse:t.Optional['LoopRenderFunc']=None,depth0:int=0)
flask.jinja2.runtime.LoopContext.__init__(self,iterable:t.Iterable[V],undefined:t.Type['Undefined'],recurse:t.Optional['LoopRenderFunc']=None,depth0:int=0)
flask.jinja2.runtime.LoopContext.__iter__(self)->'LoopContext'
flask.jinja2.runtime.LoopContext.__len__(self)->int
flask.jinja2.runtime.LoopContext.__next__(self)->t.Tuple[t.Any, 'LoopContext']
flask.jinja2.runtime.LoopContext.__repr__(self)->str
flask.jinja2.runtime.LoopContext._peek_next(self)->t.Any
flask.jinja2.runtime.LoopContext._to_iterator(iterable:t.Iterable[V])->t.Iterator[V]
flask.jinja2.runtime.LoopContext.changed(self,*value:t.Any)->bool
flask.jinja2.runtime.LoopContext.cycle(self,*args:V)->V
flask.jinja2.runtime.LoopContext.depth(self)->int
flask.jinja2.runtime.LoopContext.first(self)->bool
flask.jinja2.runtime.LoopContext.index(self)->int
flask.jinja2.runtime.LoopContext.last(self)->bool
flask.jinja2.runtime.LoopContext.length(self)->int
flask.jinja2.runtime.LoopContext.nextitem(self)->t.Union[t.Any, 'Undefined']
flask.jinja2.runtime.LoopContext.previtem(self)->t.Union[t.Any, 'Undefined']
flask.jinja2.runtime.LoopContext.revindex(self)->int
flask.jinja2.runtime.LoopContext.revindex0(self)->int
flask.jinja2.runtime.Macro(self,environment:'Environment',func:t.Callable[...,str],name:str,arguments:t.List[str],catch_kwargs:bool,catch_varargs:bool,caller:bool,default_autoescape:t.Optional[bool]=None)
flask.jinja2.runtime.Macro.__init__(self,environment:'Environment',func:t.Callable[...,str],name:str,arguments:t.List[str],catch_kwargs:bool,catch_varargs:bool,caller:bool,default_autoescape:t.Optional[bool]=None)
flask.jinja2.runtime.Macro.__repr__(self)->str
flask.jinja2.runtime.Macro._invoke(self,arguments:t.List[t.Any],autoescape:bool)->str
flask.jinja2.runtime.StrictUndefined(Undefined)
flask.jinja2.runtime.TemplateReference(self,context:'Context')
flask.jinja2.runtime.TemplateReference.__getitem__(self,name:str)->t.Any
flask.jinja2.runtime.TemplateReference.__init__(self,context:'Context')
flask.jinja2.runtime.TemplateReference.__repr__(self)->str
flask.jinja2.runtime.Undefined(self,hint:t.Optional[str]=None,obj:t.Any=missing,name:t.Optional[str]=None,exc:t.Type[TemplateRuntimeError]=UndefinedError)
flask.jinja2.runtime.Undefined.__bool__(self)->bool
flask.jinja2.runtime.Undefined.__eq__(self,other:t.Any)->bool
flask.jinja2.runtime.Undefined.__getattr__(self,name:str)->t.Any
flask.jinja2.runtime.Undefined.__hash__(self)->int
flask.jinja2.runtime.Undefined.__init__(self,hint:t.Optional[str]=None,obj:t.Any=missing,name:t.Optional[str]=None,exc:t.Type[TemplateRuntimeError]=UndefinedError)
flask.jinja2.runtime.Undefined.__iter__(self)->t.Iterator[t.Any]
flask.jinja2.runtime.Undefined.__len__(self)->int
flask.jinja2.runtime.Undefined.__ne__(self,other:t.Any)->bool
flask.jinja2.runtime.Undefined.__repr__(self)->str
flask.jinja2.runtime.Undefined.__str__(self)->str
flask.jinja2.runtime.Undefined._fail_with_undefined_error(self,*args:t.Any,**kwargs:t.Any)->'te.NoReturn'
flask.jinja2.runtime.Undefined._undefined_message(self)->str
flask.jinja2.runtime._dict_method_all(dict_method:F)->F
flask.jinja2.runtime.identity(x:V)->V
flask.jinja2.runtime.make_logging_undefined(logger:t.Optional['logging.Logger']=None,base:t.Type[Undefined]=Undefined)->t.Type[Undefined]
flask.jinja2.runtime.markup_join(seq:t.Iterable[t.Any])->str
flask.jinja2.runtime.new_context(environment:'Environment',template_name:t.Optional[str],blocks:t.Dict[str,t.Callable[['Context'],t.Iterator[str]]],vars:t.Optional[t.Dict[str,t.Any]]=None,shared:bool=False,globals:t.Optional[t.MutableMapping[str,t.Any]]=None,locals:t.Optional[t.Mapping[str,t.Any]]=None)->'Context'
flask.jinja2.runtime.str_join(seq:t.Iterable[t.Any])->str
flask.jinja2.runtime.unicode_join(seq:t.Iterable[t.Any])->str


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/meta.py----------------------------------------
A:flask.jinja2.meta.codegen->TrackingCodeGenerator(ast.environment)
flask.jinja2.meta.TrackingCodeGenerator(self,environment:'Environment')
flask.jinja2.meta.TrackingCodeGenerator.__init__(self,environment:'Environment')
flask.jinja2.meta.TrackingCodeGenerator.enter_frame(self,frame:Frame)->None
flask.jinja2.meta.TrackingCodeGenerator.write(self,x:str)->None
flask.jinja2.meta.find_referenced_templates(ast:nodes.Template)->t.Iterator[t.Optional[str]]
flask.jinja2.meta.find_undeclared_variables(ast:nodes.Template)->t.Set[str]


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/exceptions.py----------------------------------------
A:flask.jinja2.exceptions.parts_str->', '.join(map(str, parts))
A:flask.jinja2.exceptions.self.templates->list(names)
flask.jinja2.TemplateAssertionError(TemplateSyntaxError)
flask.jinja2.TemplateError(self,message:t.Optional[str]=None)
flask.jinja2.TemplateError.message(self)->t.Optional[str]
flask.jinja2.TemplateNotFound(self,name:t.Optional[t.Union[str,'Undefined']],message:t.Optional[str]=None)
flask.jinja2.TemplateNotFound.__str__(self)->str
flask.jinja2.TemplateRuntimeError(TemplateError)
flask.jinja2.TemplateSyntaxError(self,message:str,lineno:int,name:t.Optional[str]=None,filename:t.Optional[str]=None)
flask.jinja2.TemplateSyntaxError.__reduce__(self)
flask.jinja2.TemplateSyntaxError.__str__(self)->str
flask.jinja2.TemplatesNotFound(self,names:t.Sequence[t.Union[str,'Undefined']]=(),message:t.Optional[str]=None)
flask.jinja2.UndefinedError(TemplateRuntimeError)
flask.jinja2.exceptions.FilterArgumentError(TemplateRuntimeError)
flask.jinja2.exceptions.SecurityError(TemplateRuntimeError)
flask.jinja2.exceptions.TemplateAssertionError(TemplateSyntaxError)
flask.jinja2.exceptions.TemplateError(self,message:t.Optional[str]=None)
flask.jinja2.exceptions.TemplateError.__init__(self,message:t.Optional[str]=None)
flask.jinja2.exceptions.TemplateError.message(self)->t.Optional[str]
flask.jinja2.exceptions.TemplateNotFound(self,name:t.Optional[t.Union[str,'Undefined']],message:t.Optional[str]=None)
flask.jinja2.exceptions.TemplateNotFound.__init__(self,name:t.Optional[t.Union[str,'Undefined']],message:t.Optional[str]=None)
flask.jinja2.exceptions.TemplateNotFound.__str__(self)->str
flask.jinja2.exceptions.TemplateRuntimeError(TemplateError)
flask.jinja2.exceptions.TemplateSyntaxError(self,message:str,lineno:int,name:t.Optional[str]=None,filename:t.Optional[str]=None)
flask.jinja2.exceptions.TemplateSyntaxError.__init__(self,message:str,lineno:int,name:t.Optional[str]=None,filename:t.Optional[str]=None)
flask.jinja2.exceptions.TemplateSyntaxError.__reduce__(self)
flask.jinja2.exceptions.TemplateSyntaxError.__str__(self)->str
flask.jinja2.exceptions.TemplatesNotFound(self,names:t.Sequence[t.Union[str,'Undefined']]=(),message:t.Optional[str]=None)
flask.jinja2.exceptions.TemplatesNotFound.__init__(self,names:t.Sequence[t.Union[str,'Undefined']]=(),message:t.Optional[str]=None)
flask.jinja2.exceptions.UndefinedError(TemplateRuntimeError)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/constants.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/filters.py----------------------------------------
A:flask.jinja2.filters.F->typing.TypeVar('F', bound=t.Callable[..., t.Any])
A:flask.jinja2.filters.K->typing.TypeVar('K')
A:flask.jinja2.filters.V->typing.TypeVar('V')
A:flask.jinja2.filters.parts->_prepare_attribute_parts(attribute)
A:flask.jinja2.filters.item->postprocess(item)
A:flask.jinja2.filters.item_i->postprocess(item_i)
A:flask.jinja2.filters.value->getattr(obj, name)
A:flask.jinja2.filters.s->soft_str(s)
A:flask.jinja2.filters.rv->list(value)
A:flask.jinja2.filters._word_beginning_split_re->re.compile('([-\\s({\\[<]+)')
A:flask.jinja2.filters.key_func->make_attrgetter(environment, attribute, postprocess=ignore_case if not case_sensitive else None)
A:flask.jinja2.filters.getter->make_attrgetter(environment, attribute, postprocess=ignore_case if not case_sensitive else None)
A:flask.jinja2.filters.seen->set()
A:flask.jinja2.filters.key->getter(item)
A:flask.jinja2.filters.it->iter(value)
A:flask.jinja2.filters.first->next(it)
A:flask.jinja2.filters.value[idx]->str(item)
A:flask.jinja2.filters.d->str(d)
A:flask.jinja2.filters.bytes->float(value)
A:flask.jinja2.filters._uri_scheme_re->re.compile('^([\\w.+-]{2,}:(/){0,2})$')
A:flask.jinja2.filters.rel_parts->set((rel or '').split())
A:flask.jinja2.filters.indention->Markup(indention)
A:flask.jinja2.filters.newline->Markup(newline)
A:flask.jinja2.filters.lines->soft_str(s).splitlines()
A:flask.jinja2.filters._word_re->re.compile('\\w+')
A:flask.jinja2.filters.seq->list(value)
A:flask.jinja2.filters.length->len(seq)
A:flask.jinja2.filters.func->prepare_select_or_reject(context, args, kwargs, modfunc, lookup_attr)
A:flask.jinja2.filters.expr->make_attrgetter(environment, attribute, default=default)
A:flask.jinja2.filters.iterable->map(make_attrgetter(environment, attribute), iterable)
A:flask.jinja2.filters.name->str(name)
A:flask.jinja2.filters.environment->typing.cast('SandboxedEnvironment', environment)
A:flask.jinja2.filters.kwargs->kwargs.copy().copy()
A:flask.jinja2.filters.attribute->kwargs.copy().copy().pop('attribute')
A:flask.jinja2.filters.default->kwargs.copy().copy().pop('default', None)
A:flask.jinja2.filters.transfunc->make_attrgetter(context.environment, attr)
flask.jinja2.contextfilter(f:F)->F
flask.jinja2.environmentfilter(f:F)->F
flask.jinja2.evalcontextfilter(f:F)->F
flask.jinja2.filters._GroupTuple(t.NamedTuple)
flask.jinja2.filters._GroupTuple.__repr__(self)->str
flask.jinja2.filters._GroupTuple.__str__(self)->str
flask.jinja2.filters._min_or_max(environment:'Environment',value:'t.Iterable[V]',func:'t.Callable[...,V]',case_sensitive:bool,attribute:t.Optional[t.Union[str,int]])->'t.Union[V, Undefined]'
flask.jinja2.filters._prepare_attribute_parts(attr:t.Optional[t.Union[str,int]])->t.List[t.Union[str, int]]
flask.jinja2.filters.contextfilter(f:F)->F
flask.jinja2.filters.do_attr(environment:'Environment',obj:t.Any,name:str)->t.Union[Undefined, t.Any]
flask.jinja2.filters.do_batch(value:'t.Iterable[V]',linecount:int,fill_with:'t.Optional[V]'=None)->'t.Iterator[t.List[V]]'
flask.jinja2.filters.do_capitalize(s:str)->str
flask.jinja2.filters.do_center(value:str,width:int=80)->str
flask.jinja2.filters.do_default(value:V,default_value:V='',boolean:bool=False)->V
flask.jinja2.filters.do_dictsort(value:t.Mapping[K,V],case_sensitive:bool=False,by:'te.Literal["key","value"]'='key',reverse:bool=False)->t.List[t.Tuple[K, V]]
flask.jinja2.filters.do_filesizeformat(value:t.Union[str,float,int],binary:bool=False)->str
flask.jinja2.filters.do_float(value:t.Any,default:float=0.0)->float
flask.jinja2.filters.do_forceescape(value:'t.Union[str,HasHTML]')->Markup
flask.jinja2.filters.do_format(value:str,*args:t.Any,**kwargs:t.Any)->str
flask.jinja2.filters.do_indent(s:str,width:t.Union[int,str]=4,first:bool=False,blank:bool=False)->str
flask.jinja2.filters.do_int(value:t.Any,default:int=0,base:int=10)->int
flask.jinja2.filters.do_last(environment:'Environment',seq:'t.Reversible[V]')->'t.Union[V, Undefined]'
flask.jinja2.filters.do_lower(s:str)->str
flask.jinja2.filters.do_mark_safe(value:str)->Markup
flask.jinja2.filters.do_mark_unsafe(value:str)->str
flask.jinja2.filters.do_max(environment:'Environment',value:'t.Iterable[V]',case_sensitive:bool=False,attribute:t.Optional[t.Union[str,int]]=None)->'t.Union[V, Undefined]'
flask.jinja2.filters.do_min(environment:'Environment',value:'t.Iterable[V]',case_sensitive:bool=False,attribute:t.Optional[t.Union[str,int]]=None)->'t.Union[V, Undefined]'
flask.jinja2.filters.do_pprint(value:t.Any)->str
flask.jinja2.filters.do_random(context:'Context',seq:'t.Sequence[V]')->'t.Union[V, Undefined]'
flask.jinja2.filters.do_replace(eval_ctx:'EvalContext',s:str,old:str,new:str,count:t.Optional[int]=None)->str
flask.jinja2.filters.do_reverse(value:t.Union[str,t.Iterable[V]])->t.Union[str, t.Iterable[V]]
flask.jinja2.filters.do_round(value:float,precision:int=0,method:'te.Literal["common","ceil","floor"]'='common')->float
flask.jinja2.filters.do_sort(environment:'Environment',value:'t.Iterable[V]',reverse:bool=False,case_sensitive:bool=False,attribute:t.Optional[t.Union[str,int]]=None)->'t.List[V]'
flask.jinja2.filters.do_striptags(value:'t.Union[str,HasHTML]')->str
flask.jinja2.filters.do_title(s:str)->str
flask.jinja2.filters.do_tojson(eval_ctx:'EvalContext',value:t.Any,indent:t.Optional[int]=None)->Markup
flask.jinja2.filters.do_trim(value:str,chars:t.Optional[str]=None)->str
flask.jinja2.filters.do_truncate(env:'Environment',s:str,length:int=255,killwords:bool=False,end:str='...',leeway:t.Optional[int]=None)->str
flask.jinja2.filters.do_unique(environment:'Environment',value:'t.Iterable[V]',case_sensitive:bool=False,attribute:t.Optional[t.Union[str,int]]=None)->'t.Iterator[V]'
flask.jinja2.filters.do_upper(s:str)->str
flask.jinja2.filters.do_urlencode(value:t.Union[str,t.Mapping[str,t.Any],t.Iterable[t.Tuple[str,t.Any]]])->str
flask.jinja2.filters.do_urlize(eval_ctx:'EvalContext',value:str,trim_url_limit:t.Optional[int]=None,nofollow:bool=False,target:t.Optional[str]=None,rel:t.Optional[str]=None,extra_schemes:t.Optional[t.Iterable[str]]=None)->str
flask.jinja2.filters.do_wordcount(s:str)->int
flask.jinja2.filters.do_wordwrap(environment:'Environment',s:str,width:int=79,break_long_words:bool=True,wrapstring:t.Optional[str]=None,break_on_hyphens:bool=True)->str
flask.jinja2.filters.do_xmlattr(eval_ctx:'EvalContext',d:t.Mapping[str,t.Any],autospace:bool=True)->str
flask.jinja2.filters.environmentfilter(f:F)->F
flask.jinja2.filters.evalcontextfilter(f:F)->F
flask.jinja2.filters.ignore_case(value:V)->V
flask.jinja2.filters.make_attrgetter(environment:'Environment',attribute:t.Optional[t.Union[str,int]],postprocess:t.Optional[t.Callable[[t.Any],t.Any]]=None,default:t.Optional[t.Any]=None)->t.Callable[[t.Any], t.Any]
flask.jinja2.filters.make_multi_attrgetter(environment:'Environment',attribute:t.Optional[t.Union[str,int]],postprocess:t.Optional[t.Callable[[t.Any],t.Any]]=None)->t.Callable[[t.Any], t.List[t.Any]]
flask.jinja2.filters.prepare_map(context:'Context',args:t.Tuple,kwargs:t.Dict[str,t.Any])->t.Callable[[t.Any], t.Any]
flask.jinja2.filters.prepare_select_or_reject(context:'Context',args:t.Tuple,kwargs:t.Dict[str,t.Any],modfunc:t.Callable[[t.Any],t.Any],lookup_attr:bool)->t.Callable[[t.Any], t.Any]
flask.jinja2.filters.select_or_reject(context:'Context',value:'t.Iterable[V]',args:t.Tuple,kwargs:t.Dict[str,t.Any],modfunc:t.Callable[[t.Any],t.Any],lookup_attr:bool)->'t.Iterator[V]'
flask.jinja2.filters.sync_do_first(environment:'Environment',seq:'t.Iterable[V]')->'t.Union[V, Undefined]'
flask.jinja2.filters.sync_do_groupby(environment:'Environment',value:'t.Iterable[V]',attribute:t.Union[str,int],default:t.Optional[t.Any]=None)->'t.List[t.Tuple[t.Any, t.List[V]]]'
flask.jinja2.filters.sync_do_join(eval_ctx:'EvalContext',value:t.Iterable,d:str='',attribute:t.Optional[t.Union[str,int]]=None)->str
flask.jinja2.filters.sync_do_list(value:'t.Iterable[V]')->'t.List[V]'
flask.jinja2.filters.sync_do_map(context:'Context',value:t.Iterable,*args:t.Any,**kwargs:t.Any)->t.Iterable
flask.jinja2.filters.sync_do_reject(context:'Context',value:'t.Iterable[V]',*args:t.Any,**kwargs:t.Any)->'t.Iterator[V]'
flask.jinja2.filters.sync_do_rejectattr(context:'Context',value:'t.Iterable[V]',*args:t.Any,**kwargs:t.Any)->'t.Iterator[V]'
flask.jinja2.filters.sync_do_select(context:'Context',value:'t.Iterable[V]',*args:t.Any,**kwargs:t.Any)->'t.Iterator[V]'
flask.jinja2.filters.sync_do_selectattr(context:'Context',value:'t.Iterable[V]',*args:t.Any,**kwargs:t.Any)->'t.Iterator[V]'
flask.jinja2.filters.sync_do_slice(value:'t.Collection[V]',slices:int,fill_with:'t.Optional[V]'=None)->'t.Iterator[t.List[V]]'
flask.jinja2.filters.sync_do_sum(environment:'Environment',iterable:'t.Iterable[V]',attribute:t.Optional[t.Union[str,int]]=None,start:V=0)->V


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/jinja2/idtracking.py----------------------------------------
A:flask.jinja2.idtracking.sym->Symbols(parent=parent_symbols)
A:flask.jinja2.idtracking.visitor->RootVisitor(self)
A:flask.jinja2.idtracking.rv->set()
A:flask.jinja2.idtracking.rv.refs->self.refs.copy()
A:flask.jinja2.idtracking.rv.loads->self.loads.copy()
A:flask.jinja2.idtracking.rv.stores->self.stores.copy()
A:flask.jinja2.idtracking.outer_ref->self.parent.find_ref(name)
A:flask.jinja2.idtracking.target->self.find_ref(name)
A:flask.jinja2.idtracking.outer_target->self.parent.find_ref(name)
A:flask.jinja2.idtracking.rv[name]->self.find_ref(name)
A:flask.jinja2.idtracking.self.sym_visitor->FrameSymbolVisitor(symbols)
A:flask.jinja2.idtracking.self.symbolsrv->original_symbols.copy()
A:flask.jinja2.idtracking.body_symbols->inner_visit(node.body)
A:flask.jinja2.idtracking.elif_symbols->inner_visit(node.elif_)
A:flask.jinja2.idtracking.else_symbols->inner_visit(node.else_ or ())
flask.jinja2.idtracking.FrameSymbolVisitor(self,symbols:'Symbols')
flask.jinja2.idtracking.FrameSymbolVisitor.__init__(self,symbols:'Symbols')
flask.jinja2.idtracking.FrameSymbolVisitor.visit_Assign(self,node:nodes.Assign,**kwargs:t.Any)->None
flask.jinja2.idtracking.FrameSymbolVisitor.visit_AssignBlock(self,node:nodes.AssignBlock,**kwargs:t.Any)->None
flask.jinja2.idtracking.FrameSymbolVisitor.visit_Block(self,node:nodes.Block,**kwargs:t.Any)->None
flask.jinja2.idtracking.FrameSymbolVisitor.visit_CallBlock(self,node:nodes.CallBlock,**kwargs:t.Any)->None
flask.jinja2.idtracking.FrameSymbolVisitor.visit_FilterBlock(self,node:nodes.FilterBlock,**kwargs:t.Any)->None
flask.jinja2.idtracking.FrameSymbolVisitor.visit_For(self,node:nodes.For,**kwargs:t.Any)->None
flask.jinja2.idtracking.FrameSymbolVisitor.visit_FromImport(self,node:nodes.FromImport,**kwargs:t.Any)->None
flask.jinja2.idtracking.FrameSymbolVisitor.visit_If(self,node:nodes.If,**kwargs:t.Any)->None
flask.jinja2.idtracking.FrameSymbolVisitor.visit_Import(self,node:nodes.Import,**kwargs:t.Any)->None
flask.jinja2.idtracking.FrameSymbolVisitor.visit_Macro(self,node:nodes.Macro,**kwargs:t.Any)->None
flask.jinja2.idtracking.FrameSymbolVisitor.visit_NSRef(self,node:nodes.NSRef,**kwargs:t.Any)->None
flask.jinja2.idtracking.FrameSymbolVisitor.visit_Name(self,node:nodes.Name,store_as_param:bool=False,**kwargs:t.Any)->None
flask.jinja2.idtracking.FrameSymbolVisitor.visit_OverlayScope(self,node:nodes.OverlayScope,**kwargs:t.Any)->None
flask.jinja2.idtracking.FrameSymbolVisitor.visit_Scope(self,node:nodes.Scope,**kwargs:t.Any)->None
flask.jinja2.idtracking.FrameSymbolVisitor.visit_With(self,node:nodes.With,**kwargs:t.Any)->None
flask.jinja2.idtracking.RootVisitor(self,symbols:'Symbols')
flask.jinja2.idtracking.RootVisitor.__init__(self,symbols:'Symbols')
flask.jinja2.idtracking.RootVisitor._simple_visit(self,node:nodes.Node,**kwargs:t.Any)->None
flask.jinja2.idtracking.RootVisitor.generic_visit(self,node:nodes.Node,*args:t.Any,**kwargs:t.Any)->None
flask.jinja2.idtracking.RootVisitor.visit_AssignBlock(self,node:nodes.AssignBlock,**kwargs:t.Any)->None
flask.jinja2.idtracking.RootVisitor.visit_CallBlock(self,node:nodes.CallBlock,**kwargs:t.Any)->None
flask.jinja2.idtracking.RootVisitor.visit_For(self,node:nodes.For,for_branch:str='body',**kwargs:t.Any)->None
flask.jinja2.idtracking.RootVisitor.visit_OverlayScope(self,node:nodes.OverlayScope,**kwargs:t.Any)->None
flask.jinja2.idtracking.RootVisitor.visit_With(self,node:nodes.With,**kwargs:t.Any)->None
flask.jinja2.idtracking.Symbols(self,parent:t.Optional['Symbols']=None,level:t.Optional[int]=None)
flask.jinja2.idtracking.Symbols.__init__(self,parent:t.Optional['Symbols']=None,level:t.Optional[int]=None)
flask.jinja2.idtracking.Symbols._define_ref(self,name:str,load:t.Optional[t.Tuple[str,t.Optional[str]]]=None)->str
flask.jinja2.idtracking.Symbols.analyze_node(self,node:nodes.Node,**kwargs:t.Any)->None
flask.jinja2.idtracking.Symbols.branch_update(self,branch_symbols:t.Sequence['Symbols'])->None
flask.jinja2.idtracking.Symbols.copy(self)->'Symbols'
flask.jinja2.idtracking.Symbols.declare_parameter(self,name:str)->str
flask.jinja2.idtracking.Symbols.dump_param_targets(self)->t.Set[str]
flask.jinja2.idtracking.Symbols.dump_stores(self)->t.Dict[str, str]
flask.jinja2.idtracking.Symbols.find_load(self,target:str)->t.Optional[t.Any]
flask.jinja2.idtracking.Symbols.find_ref(self,name:str)->t.Optional[str]
flask.jinja2.idtracking.Symbols.load(self,name:str)->None
flask.jinja2.idtracking.Symbols.ref(self,name:str)->str
flask.jinja2.idtracking.Symbols.store(self,name:str)->None
flask.jinja2.idtracking.find_symbols(nodes:t.Iterable[nodes.Node],parent_symbols:t.Optional['Symbols']=None)->'Symbols'
flask.jinja2.idtracking.symbols_for_node(node:nodes.Node,parent_symbols:t.Optional['Symbols']=None)->'Symbols'


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/sessions.py----------------------------------------
A:flask.flask.sessions.self['_permanent']->bool(value)
A:flask.flask.sessions.rv->rv.rsplit(':', 1)[0].lstrip('.').rsplit(':', 1)[0].lstrip('.')
A:flask.flask.sessions.ip->is_ip(rv)
A:flask.flask.sessions.session_json_serializer->TaggedJSONSerializer()
A:flask.flask.sessions.digest_method->staticmethod(hashlib.sha1)
A:flask.flask.sessions.signer_kwargs->dict(key_derivation=self.key_derivation, digest_method=self.digest_method)
A:flask.flask.sessions.s->self.get_signing_serializer(app)
A:flask.flask.sessions.val->self.get_signing_serializer(app).dumps(dict(session))
A:flask.flask.sessions.max_age->total_seconds(app.permanent_session_lifetime)
A:flask.flask.sessions.data->self.get_signing_serializer(app).loads(val, max_age=max_age)
A:flask.flask.sessions.domain->self.get_cookie_domain(app)
A:flask.flask.sessions.path->self.get_cookie_path(app)
A:flask.flask.sessions.httponly->self.get_cookie_httponly(app)
A:flask.flask.sessions.secure->self.get_cookie_secure(app)
A:flask.flask.sessions.samesite->self.get_cookie_samesite(app)
A:flask.flask.sessions.expires->self.get_expiration_time(app, session)
flask.flask.Session(self,initial=None)
flask.flask.Session.__getitem__(self,key)
flask.flask.Session.get(self,key,default=None)
flask.flask.Session.setdefault(self,key,default=None)
flask.flask.SessionInterface(SessionInterface)
flask.flask.SessionInterface.get_signing_serializer(self,app)
flask.flask.SessionInterface.open_session(self,app,request)
flask.flask.SessionInterface.save_session(self,app,session,response)
flask.flask.sessions.NullSession(SecureCookieSession)
flask.flask.sessions.NullSession._fail(self,*args,**kwargs)
flask.flask.sessions.SecureCookieSession(self,initial=None)
flask.flask.sessions.SecureCookieSession.__getitem__(self,key)
flask.flask.sessions.SecureCookieSession.__init__(self,initial=None)
flask.flask.sessions.SecureCookieSession.get(self,key,default=None)
flask.flask.sessions.SecureCookieSession.setdefault(self,key,default=None)
flask.flask.sessions.SecureCookieSessionInterface(SessionInterface)
flask.flask.sessions.SecureCookieSessionInterface.get_signing_serializer(self,app)
flask.flask.sessions.SecureCookieSessionInterface.open_session(self,app,request)
flask.flask.sessions.SecureCookieSessionInterface.save_session(self,app,session,response)
flask.flask.sessions.SessionInterface(object)
flask.flask.sessions.SessionInterface.get_cookie_domain(self,app)
flask.flask.sessions.SessionInterface.get_cookie_httponly(self,app)
flask.flask.sessions.SessionInterface.get_cookie_path(self,app)
flask.flask.sessions.SessionInterface.get_cookie_samesite(self,app)
flask.flask.sessions.SessionInterface.get_cookie_secure(self,app)
flask.flask.sessions.SessionInterface.get_expiration_time(self,app,session)
flask.flask.sessions.SessionInterface.is_null_session(self,obj)
flask.flask.sessions.SessionInterface.make_null_session(self,app)
flask.flask.sessions.SessionInterface.open_session(self,app,request)
flask.flask.sessions.SessionInterface.save_session(self,app,session,response)
flask.flask.sessions.SessionInterface.should_set_cookie(self,app,session)
flask.flask.sessions.SessionMixin(MutableMapping)
flask.flask.sessions.SessionMixin.permanent(self)
flask.flask.sessions.SessionMixin.permanent(self,value)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/globals.py----------------------------------------
A:flask.flask.globals._request_ctx_stack->LocalStack()
A:flask.flask.globals._app_ctx_stack->LocalStack()
A:flask.flask.globals.current_app->LocalProxy(_find_app)
A:flask.flask.globals.request->LocalProxy(partial(_lookup_req_object, 'request'))
A:flask.flask.globals.session->LocalProxy(partial(_lookup_req_object, 'session'))
A:flask.flask.globals.g->LocalProxy(partial(_lookup_app_object, 'g'))
flask.flask.globals._find_app()
flask.flask.globals._lookup_app_object(name)
flask.flask.globals._lookup_req_object(name)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/ctx.py----------------------------------------
A:flask.flask.ctx._sentinel->object()
A:flask.flask.ctx.reqctx->top.copy()
A:flask.flask.ctx.self.url_adapter->app.create_url_adapter(self.request)
A:flask.flask.ctx.self.g->app.app_ctx_globals_class()
A:flask.flask.ctx.rv->globals._request_ctx_stack.pop()
A:flask.flask.ctx.request->app.request_class(environ)
A:flask.flask.ctx.g->property(_get_g, _set_g)
A:flask.flask.ctx.(url_rule, self.request.view_args)->self.url_adapter.match(return_rule=True)
A:flask.flask.ctx.app_ctx->self._implicit_app_ctx_stack.pop()
A:flask.flask.ctx.self.session->session_interface.make_null_session(self.app)
A:flask.flask.ctx.request_close->getattr(self.request, 'close', None)
flask.flask.after_this_request(f)
flask.flask.copy_current_request_context(f)
flask.flask.ctx.AppContext(self,app)
flask.flask.ctx.AppContext.__enter__(self)
flask.flask.ctx.AppContext.__exit__(self,exc_type,exc_value,tb)
flask.flask.ctx.AppContext.__init__(self,app)
flask.flask.ctx.AppContext.pop(self,exc=_sentinel)
flask.flask.ctx.AppContext.push(self)
flask.flask.ctx.RequestContext(self,app,environ,request=None)
flask.flask.ctx.RequestContext.__enter__(self)
flask.flask.ctx.RequestContext.__exit__(self,exc_type,exc_value,tb)
flask.flask.ctx.RequestContext.__init__(self,app,environ,request=None)
flask.flask.ctx.RequestContext.__repr__(self)
flask.flask.ctx.RequestContext._get_g(self)
flask.flask.ctx.RequestContext._set_g(self,value)
flask.flask.ctx.RequestContext.auto_pop(self,exc)
flask.flask.ctx.RequestContext.copy(self)
flask.flask.ctx.RequestContext.match_request(self)
flask.flask.ctx.RequestContext.pop(self,exc=_sentinel)
flask.flask.ctx.RequestContext.push(self)
flask.flask.ctx._AppCtxGlobals(object)
flask.flask.ctx._AppCtxGlobals.__contains__(self,item)
flask.flask.ctx._AppCtxGlobals.__iter__(self)
flask.flask.ctx._AppCtxGlobals.__repr__(self)
flask.flask.ctx._AppCtxGlobals.get(self,name,default=None)
flask.flask.ctx._AppCtxGlobals.pop(self,name,default=_sentinel)
flask.flask.ctx._AppCtxGlobals.setdefault(self,name,default=None)
flask.flask.ctx.after_this_request(f)
flask.flask.ctx.copy_current_request_context(f)
flask.flask.ctx.has_app_context()
flask.flask.ctx.has_request_context()
flask.flask.has_app_context()
flask.flask.has_request_context()


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/testing.py----------------------------------------
A:flask.flask.testing.http_host->'{0}.{1}'.format(subdomain, http_host)
A:flask.flask.testing.url->url_parse(path)
A:flask.flask.testing.base_url->'{scheme}://{netloc}/{path}'.format(scheme=url.scheme or url_scheme, netloc=url.netloc or http_host, path=app_root.lstrip('/'))
A:flask.flask.testing.kwargs['data']->json_dumps(kwargs.pop('json'))
A:flask.flask.testing.environ_overrides->kwargs.setdefault('environ_overrides', {})
A:flask.flask.testing.sess->session_interface.open_session(app, c.request)
A:flask.flask.testing.resp->app.response_class()
A:flask.flask.testing.headers->app.response_class().get_wsgi_headers(c.request.environ)
A:flask.flask.testing.as_tuple->kwargs.pop('as_tuple', False)
A:flask.flask.testing.buffered->kwargs.pop('buffered', False)
A:flask.flask.testing.follow_redirects->kwargs.pop('follow_redirects', False)
A:flask.flask.testing.environ->make_test_environ_builder(self.application, *args, **kwargs).get_environ()
A:flask.flask.testing.builder->make_test_environ_builder(self.application, *args, **kwargs)
A:flask.flask.testing.kwargs['obj']->ScriptInfo(create_app=lambda : self.app)
flask.flask.testing.FlaskCliRunner(self,app,**kwargs)
flask.flask.testing.FlaskCliRunner.__init__(self,app,**kwargs)
flask.flask.testing.FlaskCliRunner.invoke(self,cli=None,args=None,**kwargs)
flask.flask.testing.FlaskClient(self,*args,**kwargs)
flask.flask.testing.FlaskClient.__enter__(self)
flask.flask.testing.FlaskClient.__exit__(self,exc_type,exc_value,tb)
flask.flask.testing.FlaskClient.__init__(self,*args,**kwargs)
flask.flask.testing.FlaskClient.open(self,*args,**kwargs)
flask.flask.testing.FlaskClient.session_transaction(self,*args,**kwargs)
flask.flask.testing.make_test_environ_builder(app,path='/',base_url=None,subdomain=None,url_scheme=None,*args,**kwargs)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/logging.py----------------------------------------
A:flask.flask.logging.level->logging.getLogger('flask.app').getEffectiveLevel()
A:flask.flask.logging.default_handler->logging.StreamHandler(wsgi_errors_stream)
A:flask.flask.logging.logger->logging.getLogger('flask.app')
flask.flask.logging.create_logger(app)
flask.flask.logging.has_level_handler(logger)
flask.flask.logging.wsgi_errors_stream()


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/debughelpers.py----------------------------------------
A:flask.flask.debughelpers.form_matches->request.form.getlist(key)
A:flask.flask.debughelpers.self.msg->''.join(buf)
A:flask.flask.debughelpers.src_info->repr(srcobj)
flask.flask.debughelpers.DebugFilesKeyError(self,request,key)
flask.flask.debughelpers.DebugFilesKeyError.__init__(self,request,key)
flask.flask.debughelpers.DebugFilesKeyError.__str__(self)
flask.flask.debughelpers.FormDataRoutingRedirect(self,request)
flask.flask.debughelpers.FormDataRoutingRedirect.__init__(self,request)
flask.flask.debughelpers.UnexpectedUnicodeError(AssertionError,UnicodeError)
flask.flask.debughelpers._dump_loader_info(loader)
flask.flask.debughelpers.attach_enctype_error_multidict(request)
flask.flask.debughelpers.explain_ignored_app_run()
flask.flask.debughelpers.explain_template_loading_attempts(app,template,attempts)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/app.py----------------------------------------
A:flask.flask.app._sentinel->object()
A:flask.flask.app.testing->ConfigAttribute('TESTING')
A:flask.flask.app.secret_key->ConfigAttribute('SECRET_KEY')
A:flask.flask.app.session_cookie_name->ConfigAttribute('SESSION_COOKIE_NAME')
A:flask.flask.app.permanent_session_lifetime->ConfigAttribute('PERMANENT_SESSION_LIFETIME', get_converter=_make_timedelta)
A:flask.flask.app.send_file_max_age_default->ConfigAttribute('SEND_FILE_MAX_AGE_DEFAULT', get_converter=_make_timedelta)
A:flask.flask.app.use_x_sendfile->ConfigAttribute('USE_X_SENDFILE')
A:flask.flask.app.jinja_options->ImmutableDict(extensions=['jinja2.ext.autoescape', 'jinja2.ext.with_'])
A:flask.flask.app.default_config->ImmutableDict({'ENV': None, 'DEBUG': None, 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': None, 'PERMANENT_SESSION_LIFETIME': timedelta(days=31), 'USE_X_SENDFILE': False, 'SERVER_NAME': None, 'APPLICATION_ROOT': '/', 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'SESSION_COOKIE_SAMESITE': None, 'SESSION_REFRESH_EACH_REQUEST': True, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': timedelta(hours=12), 'TRAP_BAD_REQUEST_ERRORS': None, 'TRAP_HTTP_EXCEPTIONS': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'JSONIFY_PRETTYPRINT_REGULAR': False, 'JSONIFY_MIMETYPE': 'application/json', 'TEMPLATES_AUTO_RELOAD': None, 'MAX_COOKIE_SIZE': 4093})
A:flask.flask.app.session_interface->SecureCookieSessionInterface()
A:flask.flask.app.instance_path->self.auto_find_instance_path()
A:flask.flask.app.self.config->self.make_config(instance_relative_config)
A:flask.flask.app.self.url_map->Map()
A:flask.flask.app.self._before_request_lock->Lock()
A:flask.flask.app.self.cli->cli.AppGroup(self.name)
A:flask.flask.app.fn->getattr(sys.modules['__main__'], '__file__', None)
A:flask.flask.app.defaults->dict(self.default_config)
A:flask.flask.app.defaults['ENV']->get_env()
A:flask.flask.app.defaults['DEBUG']->get_debug_flag()
A:flask.flask.app.(prefix, package_path)->find_package(self.import_name)
A:flask.flask.app.templates_auto_reload->property(_get_templates_auto_reload, _set_templates_auto_reload)
A:flask.flask.app.options->dict(self.jinja_options)
A:flask.flask.app.rv->func()
A:flask.flask.app.funcs->chain(funcs, reversed(self.teardown_request_funcs[bp]))
A:flask.flask.app.orig_ctx->context.copy()
A:flask.flask.app.env->ConfigAttribute('ENV')
A:flask.flask.app.debug->property(_get_debug, _set_debug)
A:flask.flask.app.self.env->get_env()
A:flask.flask.app.self.debug->bool(debug)
A:flask.flask.app.server_name->self.config.get('SERVER_NAME')
A:flask.flask.app.(sn_host, _, sn_port)->self.config.get('SERVER_NAME').partition(':')
A:flask.flask.app.port->int(port or sn_port or _port)
A:flask.flask.app.endpoint->dict(self.jinja_options).pop('endpoint', None)
A:flask.flask.app.methods->adapter.allowed_methods()
A:flask.flask.app.required_methods->set(getattr(view_func, 'required_methods', ()))
A:flask.flask.app.provide_automatic_options->getattr(view_func, 'provide_automatic_options', None)
A:flask.flask.app.rule->self.url_rule_class(rule, methods=methods, **options)
A:flask.flask.app.old_func->self.view_functions.get(endpoint)
A:flask.flask.app.(exc_class, code)->self._get_exc_class_and_code(type(e))
A:flask.flask.app.handlers->self.error_handler_spec.setdefault(key, {}).setdefault(code, {})
A:flask.flask.app.handler_map->self.error_handler_spec.setdefault(name, {}).get(c)
A:flask.flask.app.handler->self._find_error_handler(InternalServerError())
A:flask.flask.app.(exc_type, exc_value, tb)->sys.exc_info()
A:flask.flask.app.e.description->"KeyError: '{0}'".format(*e.args)
A:flask.flask.app.response->self.handle_exception(e)
A:flask.flask.app.len_rv->len(rv)
A:flask.flask.app.new_error->TypeError('{e}\nThe view function did not return a valid response. The return type must be a string, tuple, Response instance, or WSGI callable, but it was a {rv.__class__.__name__}.'.format(e=e, rv=rv))
A:flask.flask.app.builder->make_test_environ_builder(self, *args, **kwargs)
A:flask.flask.app.ctx->self.request_context(environ)
flask.flask.Flask(self,import_name,static_url_path=None,static_folder='static',static_host=None,host_matching=False,subdomain_matching=False,template_folder='templates',instance_path=None,instance_relative_config=False,root_path=None)
flask.flask.Flask.__repr__(self)
flask.flask.Flask._find_error_handler(self,e)
flask.flask.Flask._get_debug(self)
flask.flask.Flask._get_exc_class_and_code(exc_class_or_code)
flask.flask.Flask._get_templates_auto_reload(self)
flask.flask.Flask._register_error_handler(self,key,code_or_exception,f)
flask.flask.Flask._set_debug(self,value)
flask.flask.Flask._set_templates_auto_reload(self,value)
flask.flask.Flask.add_template_filter(self,f,name=None)
flask.flask.Flask.add_template_global(self,f,name=None)
flask.flask.Flask.add_template_test(self,f,name=None)
flask.flask.Flask.add_url_rule(self,rule,endpoint=None,view_func=None,provide_automatic_options=None,**options)
flask.flask.Flask.after_request(self,f)
flask.flask.Flask.app_context(self)
flask.flask.Flask.auto_find_instance_path(self)
flask.flask.Flask.before_first_request(self,f)
flask.flask.Flask.before_request(self,f)
flask.flask.Flask.context_processor(self,f)
flask.flask.Flask.create_global_jinja_loader(self)
flask.flask.Flask.create_jinja_environment(self)
flask.flask.Flask.create_url_adapter(self,request)
flask.flask.Flask.dispatch_request(self)
flask.flask.Flask.do_teardown_appcontext(self,exc=_sentinel)
flask.flask.Flask.do_teardown_request(self,exc=_sentinel)
flask.flask.Flask.endpoint(self,endpoint)
flask.flask.Flask.errorhandler(self,code_or_exception)
flask.flask.Flask.finalize_request(self,rv,from_error_handler=False)
flask.flask.Flask.full_dispatch_request(self)
flask.flask.Flask.got_first_request(self)
flask.flask.Flask.handle_exception(self,e)
flask.flask.Flask.handle_http_exception(self,e)
flask.flask.Flask.handle_url_build_error(self,error,endpoint,values)
flask.flask.Flask.handle_user_exception(self,e)
flask.flask.Flask.inject_url_defaults(self,endpoint,values)
flask.flask.Flask.iter_blueprints(self)
flask.flask.Flask.jinja_env(self)
flask.flask.Flask.log_exception(self,exc_info)
flask.flask.Flask.logger(self)
flask.flask.Flask.make_config(self,instance_relative=False)
flask.flask.Flask.make_default_options_response(self)
flask.flask.Flask.make_null_session(self)
flask.flask.Flask.make_response(self,rv)
flask.flask.Flask.make_shell_context(self)
flask.flask.Flask.name(self)
flask.flask.Flask.open_instance_resource(self,resource,mode='rb')
flask.flask.Flask.open_session(self,request)
flask.flask.Flask.preprocess_request(self)
flask.flask.Flask.preserve_context_on_exception(self)
flask.flask.Flask.process_response(self,response)
flask.flask.Flask.propagate_exceptions(self)
flask.flask.Flask.raise_routing_exception(self,request)
flask.flask.Flask.register_blueprint(self,blueprint,**options)
flask.flask.Flask.register_error_handler(self,code_or_exception,f)
flask.flask.Flask.request_context(self,environ)
flask.flask.Flask.route(self,rule,**options)
flask.flask.Flask.run(self,host=None,port=None,debug=None,load_dotenv=True,**options)
flask.flask.Flask.save_session(self,session,response)
flask.flask.Flask.select_jinja_autoescape(self,filename)
flask.flask.Flask.shell_context_processor(self,f)
flask.flask.Flask.should_ignore_error(self,error)
flask.flask.Flask.teardown_appcontext(self,f)
flask.flask.Flask.teardown_request(self,f)
flask.flask.Flask.template_filter(self,name=None)
flask.flask.Flask.template_global(self,name=None)
flask.flask.Flask.template_test(self,name=None)
flask.flask.Flask.test_cli_runner(self,**kwargs)
flask.flask.Flask.test_client(self,use_cookies=True,**kwargs)
flask.flask.Flask.test_request_context(self,*args,**kwargs)
flask.flask.Flask.trap_http_exception(self,e)
flask.flask.Flask.try_trigger_before_first_request_functions(self)
flask.flask.Flask.update_template_context(self,context)
flask.flask.Flask.url_defaults(self,f)
flask.flask.Flask.url_value_preprocessor(self,f)
flask.flask.Flask.wsgi_app(self,environ,start_response)
flask.flask.app.Flask(self,import_name,static_url_path=None,static_folder='static',static_host=None,host_matching=False,subdomain_matching=False,template_folder='templates',instance_path=None,instance_relative_config=False,root_path=None)
flask.flask.app.Flask.__init__(self,import_name,static_url_path=None,static_folder='static',static_host=None,host_matching=False,subdomain_matching=False,template_folder='templates',instance_path=None,instance_relative_config=False,root_path=None)
flask.flask.app.Flask.__repr__(self)
flask.flask.app.Flask._find_error_handler(self,e)
flask.flask.app.Flask._get_debug(self)
flask.flask.app.Flask._get_exc_class_and_code(exc_class_or_code)
flask.flask.app.Flask._get_templates_auto_reload(self)
flask.flask.app.Flask._register_error_handler(self,key,code_or_exception,f)
flask.flask.app.Flask._set_debug(self,value)
flask.flask.app.Flask._set_templates_auto_reload(self,value)
flask.flask.app.Flask.add_template_filter(self,f,name=None)
flask.flask.app.Flask.add_template_global(self,f,name=None)
flask.flask.app.Flask.add_template_test(self,f,name=None)
flask.flask.app.Flask.add_url_rule(self,rule,endpoint=None,view_func=None,provide_automatic_options=None,**options)
flask.flask.app.Flask.after_request(self,f)
flask.flask.app.Flask.app_context(self)
flask.flask.app.Flask.auto_find_instance_path(self)
flask.flask.app.Flask.before_first_request(self,f)
flask.flask.app.Flask.before_request(self,f)
flask.flask.app.Flask.context_processor(self,f)
flask.flask.app.Flask.create_global_jinja_loader(self)
flask.flask.app.Flask.create_jinja_environment(self)
flask.flask.app.Flask.create_url_adapter(self,request)
flask.flask.app.Flask.dispatch_request(self)
flask.flask.app.Flask.do_teardown_appcontext(self,exc=_sentinel)
flask.flask.app.Flask.do_teardown_request(self,exc=_sentinel)
flask.flask.app.Flask.endpoint(self,endpoint)
flask.flask.app.Flask.errorhandler(self,code_or_exception)
flask.flask.app.Flask.finalize_request(self,rv,from_error_handler=False)
flask.flask.app.Flask.full_dispatch_request(self)
flask.flask.app.Flask.got_first_request(self)
flask.flask.app.Flask.handle_exception(self,e)
flask.flask.app.Flask.handle_http_exception(self,e)
flask.flask.app.Flask.handle_url_build_error(self,error,endpoint,values)
flask.flask.app.Flask.handle_user_exception(self,e)
flask.flask.app.Flask.inject_url_defaults(self,endpoint,values)
flask.flask.app.Flask.iter_blueprints(self)
flask.flask.app.Flask.jinja_env(self)
flask.flask.app.Flask.log_exception(self,exc_info)
flask.flask.app.Flask.logger(self)
flask.flask.app.Flask.make_config(self,instance_relative=False)
flask.flask.app.Flask.make_default_options_response(self)
flask.flask.app.Flask.make_null_session(self)
flask.flask.app.Flask.make_response(self,rv)
flask.flask.app.Flask.make_shell_context(self)
flask.flask.app.Flask.name(self)
flask.flask.app.Flask.open_instance_resource(self,resource,mode='rb')
flask.flask.app.Flask.open_session(self,request)
flask.flask.app.Flask.preprocess_request(self)
flask.flask.app.Flask.preserve_context_on_exception(self)
flask.flask.app.Flask.process_response(self,response)
flask.flask.app.Flask.propagate_exceptions(self)
flask.flask.app.Flask.raise_routing_exception(self,request)
flask.flask.app.Flask.register_blueprint(self,blueprint,**options)
flask.flask.app.Flask.register_error_handler(self,code_or_exception,f)
flask.flask.app.Flask.request_context(self,environ)
flask.flask.app.Flask.route(self,rule,**options)
flask.flask.app.Flask.run(self,host=None,port=None,debug=None,load_dotenv=True,**options)
flask.flask.app.Flask.save_session(self,session,response)
flask.flask.app.Flask.select_jinja_autoescape(self,filename)
flask.flask.app.Flask.shell_context_processor(self,f)
flask.flask.app.Flask.should_ignore_error(self,error)
flask.flask.app.Flask.teardown_appcontext(self,f)
flask.flask.app.Flask.teardown_request(self,f)
flask.flask.app.Flask.template_filter(self,name=None)
flask.flask.app.Flask.template_global(self,name=None)
flask.flask.app.Flask.template_test(self,name=None)
flask.flask.app.Flask.test_cli_runner(self,**kwargs)
flask.flask.app.Flask.test_client(self,use_cookies=True,**kwargs)
flask.flask.app.Flask.test_request_context(self,*args,**kwargs)
flask.flask.app.Flask.trap_http_exception(self,e)
flask.flask.app.Flask.try_trigger_before_first_request_functions(self)
flask.flask.app.Flask.update_template_context(self,context)
flask.flask.app.Flask.url_defaults(self,f)
flask.flask.app.Flask.url_value_preprocessor(self,f)
flask.flask.app.Flask.wsgi_app(self,environ,start_response)
flask.flask.app._make_timedelta(value)
flask.flask.app.setupmethod(f)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/signals.py----------------------------------------
A:flask.flask.signals._signals->Namespace()
A:flask.flask.signals.template_rendered->Namespace().signal('template-rendered')
A:flask.flask.signals.before_render_template->Namespace().signal('before-render-template')
A:flask.flask.signals.request_started->Namespace().signal('request-started')
A:flask.flask.signals.request_finished->Namespace().signal('request-finished')
A:flask.flask.signals.request_tearing_down->Namespace().signal('request-tearing-down')
A:flask.flask.signals.got_request_exception->Namespace().signal('got-request-exception')
A:flask.flask.signals.appcontext_tearing_down->Namespace().signal('appcontext-tearing-down')
A:flask.flask.signals.appcontext_pushed->Namespace().signal('appcontext-pushed')
A:flask.flask.signals.appcontext_popped->Namespace().signal('appcontext-popped')
A:flask.flask.signals.message_flashed->Namespace().signal('message-flashed')


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/config.py----------------------------------------
A:flask.flask.config.rv->os.environ.get(variable_name)
A:flask.flask.config.filename->os.path.join(self.root_path, filename)
A:flask.flask.config.d->types.ModuleType('config')
A:flask.flask.config.obj->json.loads(json_file.read())
A:flask.flask.config.self[key]->getattr(obj, key)
A:flask.flask.config.key->key.lower().lower()
flask.flask.Config(self,root_path,defaults=None)
flask.flask.Config.__repr__(self)
flask.flask.Config.from_envvar(self,variable_name,silent=False)
flask.flask.Config.from_json(self,filename,silent=False)
flask.flask.Config.from_mapping(self,*mapping,**kwargs)
flask.flask.Config.from_object(self,obj)
flask.flask.Config.from_pyfile(self,filename,silent=False)
flask.flask.Config.get_namespace(self,namespace,lowercase=True,trim_namespace=True)
flask.flask.ConfigAttribute(self,name,get_converter=None)
flask.flask.ConfigAttribute.__get__(self,obj,type=None)
flask.flask.ConfigAttribute.__set__(self,obj,value)
flask.flask.config.Config(self,root_path,defaults=None)
flask.flask.config.Config.__init__(self,root_path,defaults=None)
flask.flask.config.Config.__repr__(self)
flask.flask.config.Config.from_envvar(self,variable_name,silent=False)
flask.flask.config.Config.from_json(self,filename,silent=False)
flask.flask.config.Config.from_mapping(self,*mapping,**kwargs)
flask.flask.config.Config.from_object(self,obj)
flask.flask.config.Config.from_pyfile(self,filename,silent=False)
flask.flask.config.Config.get_namespace(self,namespace,lowercase=True,trim_namespace=True)
flask.flask.config.ConfigAttribute(self,name,get_converter=None)
flask.flask.config.ConfigAttribute.__get__(self,obj,type=None)
flask.flask.config.ConfigAttribute.__init__(self,name,get_converter=None)
flask.flask.config.ConfigAttribute.__set__(self,obj,value)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/cli.py----------------------------------------
A:flask.flask.cli.app->DispatchingApp(info.load_app, use_eager_loading=eager_loading)
A:flask.flask.cli.app_factory->getattr(module, attr_name, None)
A:flask.flask.cli.args_spec->getargspec(app_factory)
A:flask.flask.cli.match->re.match('^ *([^ ()]+) *(?:\\((.*?) *,? *\\))? *$', app_name)
A:flask.flask.cli.(name, args)->re.match('^ *([^ ()]+) *(?:\\((.*?) *,? *\\))? *$', app_name).groups()
A:flask.flask.cli.attr->getattr(module, name)
A:flask.flask.cli.args->ast.literal_eval('({args},)'.format(args=args))
A:flask.flask.cli.path->dotenv.find_dotenv(name, usecwd=True)
A:flask.flask.cli.(path, name)->os.path.split(path)
A:flask.flask.cli.version_option->click.Option(['--version'], help='Show the flask version', expose_value=False, callback=get_version, is_flag=True, is_eager=True)
A:flask.flask.cli.self._lock->Lock()
A:flask.flask.cli.self._bg_loading_exc_info->sys.exc_info()
A:flask.flask.cli.t->Thread(target=_load_app, args=())
A:flask.flask.cli.self._apprv->self.loader()
A:flask.flask.cli.rv->set(click.Group.list_commands(self, ctx))
A:flask.flask.cli.import_name->prepare_import(path)
A:flask.flask.cli.debug->get_debug_flag()
A:flask.flask.cli.pass_script_info->click.make_pass_decorator(ScriptInfo, ensure=True)
A:flask.flask.cli.wrap_for_ctx->kwargs.pop('with_appcontext', True)
A:flask.flask.cli.f->with_appcontext(f)
A:flask.flask.cli.params->list(extra.pop('params', None) or ())
A:flask.flask.cli.info->ctx.ensure_object(ScriptInfo)
A:flask.flask.cli.obj->import_string(value, silent=True)
A:flask.flask.cli.new_dir->os.path.dirname(path)
A:flask.flask.cli.message->' * Serving Flask app "{0}"'.format(app_import_path)
A:flask.flask.cli.self.path_type->click.Path(exists=True, dir_okay=False, resolve_path=True)
A:flask.flask.cli.value->click.STRING(value, param, ctx).lower()
A:flask.flask.cli.cert->ctx.params.get('cert')
A:flask.flask.cli.is_context->isinstance(cert, ssl.SSLContext)
A:flask.flask.cli.startup->os.environ.get('PYTHONSTARTUP')
A:flask.flask.cli.rules->sorted(rules, key=lambda rule: sorted(rule.methods))
A:flask.flask.cli.ignored_methods->set(() if all_methods else ('HEAD', 'OPTIONS'))
A:flask.flask.cli.row->'{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}'.format(*widths)
A:flask.flask.cli.cli->FlaskGroup(help="A general utility script for Flask applications.\n\nProvides commands from Flask, extensions, and the application. Loads the\napplication defined in the FLASK_APP environment variable, or from a wsgi.py\nfile. Setting the FLASK_ENV environment variable to 'development' will enable\ndebug mode.\n\n\x08\n  {prefix}{cmd} FLASK_APP=hello.py\n  {prefix}{cmd} FLASK_ENV=development\n  {prefix}flask run\n".format(cmd='export' if os.name == 'posix' else 'set', prefix='$ ' if os.name == 'posix' else '> '))
flask.flask.cli.AppGroup(click.Group)
flask.flask.cli.AppGroup.command(self,*args,**kwargs)
flask.flask.cli.AppGroup.group(self,*args,**kwargs)
flask.flask.cli.CertParamType(self)
flask.flask.cli.CertParamType.__init__(self)
flask.flask.cli.CertParamType.convert(self,value,param,ctx)
flask.flask.cli.DispatchingApp(self,loader,use_eager_loading=False)
flask.flask.cli.DispatchingApp.__init__(self,loader,use_eager_loading=False)
flask.flask.cli.DispatchingApp._flush_bg_loading_exception(self)
flask.flask.cli.DispatchingApp._load_in_background(self)
flask.flask.cli.DispatchingApp._load_unlocked(self)
flask.flask.cli.FlaskGroup(self,add_default_commands=True,create_app=None,add_version_option=True,load_dotenv=True,**extra)
flask.flask.cli.FlaskGroup.__init__(self,add_default_commands=True,create_app=None,add_version_option=True,load_dotenv=True,**extra)
flask.flask.cli.FlaskGroup._load_plugin_commands(self)
flask.flask.cli.FlaskGroup.get_command(self,ctx,name)
flask.flask.cli.FlaskGroup.list_commands(self,ctx)
flask.flask.cli.FlaskGroup.main(self,*args,**kwargs)
flask.flask.cli.NoAppException(click.UsageError)
flask.flask.cli.ScriptInfo(self,app_import_path=None,create_app=None)
flask.flask.cli.ScriptInfo.__init__(self,app_import_path=None,create_app=None)
flask.flask.cli.ScriptInfo.load_app(self)
flask.flask.cli._called_with_wrong_args(factory)
flask.flask.cli._path_is_ancestor(path,other)
flask.flask.cli._validate_key(ctx,param,value)
flask.flask.cli.call_factory(script_info,app_factory,arguments=())
flask.flask.cli.find_app_by_string(script_info,module,app_name)
flask.flask.cli.find_best_app(script_info,module)
flask.flask.cli.get_version(ctx,param,value)
flask.flask.cli.load_dotenv(path=None)
flask.flask.cli.locate_app(script_info,module_name,app_name,raise_if_not_found=True)
flask.flask.cli.main(as_module=False)
flask.flask.cli.prepare_import(path)
flask.flask.cli.routes_command(sort,all_methods)
flask.flask.cli.run_command(info,host,port,reload,debugger,eager_loading,with_threads,cert)
flask.flask.cli.shell_command()
flask.flask.cli.show_server_banner(env,debug,app_import_path,eager_loading)
flask.flask.cli.with_appcontext(f)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/views.py----------------------------------------
A:flask.flask.views.http_method_funcs->frozenset(['get', 'post', 'head', 'options', 'delete', 'put', 'trace', 'patch'])
A:flask.flask.views.self->decorator(view).view_class(*class_args, **class_kwargs)
A:flask.flask.views.view->decorator(view)
A:flask.flask.views.methods->set()
A:flask.flask.views.meth->getattr(self, 'get', None)
flask.flask.views.MethodView(with_metaclass(MethodViewType,View))
flask.flask.views.MethodView.dispatch_request(self,*args,**kwargs)
flask.flask.views.MethodViewType(cls,name,bases,d)
flask.flask.views.MethodViewType.__init__(cls,name,bases,d)
flask.flask.views.View(object)
flask.flask.views.View.as_view(cls,name,*class_args,**class_kwargs)
flask.flask.views.View.dispatch_request(self)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/_compat.py----------------------------------------
flask.flask._compat.with_metaclass(meta,*bases)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/templating.py----------------------------------------
A:flask.flask.templating.options['loader']->app.create_global_jinja_loader()
A:flask.flask.templating.rv->template.render(context)
A:flask.flask.templating.result->set()
flask.flask.render_template(template_name_or_list,**context)
flask.flask.render_template_string(source,**context)
flask.flask.templating.DispatchingJinjaLoader(self,app)
flask.flask.templating.DispatchingJinjaLoader.__init__(self,app)
flask.flask.templating.DispatchingJinjaLoader._get_source_explained(self,environment,template)
flask.flask.templating.DispatchingJinjaLoader._get_source_fast(self,environment,template)
flask.flask.templating.DispatchingJinjaLoader._iter_loaders(self,template)
flask.flask.templating.DispatchingJinjaLoader.get_source(self,environment,template)
flask.flask.templating.DispatchingJinjaLoader.list_templates(self)
flask.flask.templating.Environment(self,app,**options)
flask.flask.templating.Environment.__init__(self,app,**options)
flask.flask.templating._default_template_ctx_processor()
flask.flask.templating._render(template,context,app)
flask.flask.templating.render_template(template_name_or_list,**context)
flask.flask.templating.render_template_string(source,**context)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/blueprints.py----------------------------------------
A:flask.flask.blueprints.subdomain->self.options.get('subdomain')
A:flask.flask.blueprints.url_prefix->self.options.get('url_prefix')
A:flask.flask.blueprints.self.url_defaults->dict(self.blueprint.url_values_defaults)
A:flask.flask.blueprints.rule->'/'.join((self.url_prefix.rstrip('/'), rule.lstrip('/')))
A:flask.flask.blueprints.endpoint->options.pop('endpoint', f.__name__)
A:flask.flask.blueprints.defaults->dict(defaults, **options.pop('defaults'))
A:flask.flask.blueprints.state->self.make_setup_state(app, options, first_registration)
flask.flask.Blueprint(self,name,import_name,static_folder=None,static_url_path=None,template_folder=None,url_prefix=None,subdomain=None,url_defaults=None,root_path=None)
flask.flask.Blueprint.add_app_template_filter(self,f,name=None)
flask.flask.Blueprint.add_app_template_global(self,f,name=None)
flask.flask.Blueprint.add_app_template_test(self,f,name=None)
flask.flask.Blueprint.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.flask.Blueprint.after_app_request(self,f)
flask.flask.Blueprint.after_request(self,f)
flask.flask.Blueprint.app_context_processor(self,f)
flask.flask.Blueprint.app_errorhandler(self,code)
flask.flask.Blueprint.app_template_filter(self,name=None)
flask.flask.Blueprint.app_template_global(self,name=None)
flask.flask.Blueprint.app_template_test(self,name=None)
flask.flask.Blueprint.app_url_defaults(self,f)
flask.flask.Blueprint.app_url_value_preprocessor(self,f)
flask.flask.Blueprint.before_app_first_request(self,f)
flask.flask.Blueprint.before_app_request(self,f)
flask.flask.Blueprint.before_request(self,f)
flask.flask.Blueprint.context_processor(self,f)
flask.flask.Blueprint.endpoint(self,endpoint)
flask.flask.Blueprint.errorhandler(self,code_or_exception)
flask.flask.Blueprint.make_setup_state(self,app,options,first_registration=False)
flask.flask.Blueprint.record(self,func)
flask.flask.Blueprint.record_once(self,func)
flask.flask.Blueprint.register(self,app,options,first_registration=False)
flask.flask.Blueprint.register_error_handler(self,code_or_exception,f)
flask.flask.Blueprint.route(self,rule,**options)
flask.flask.Blueprint.teardown_app_request(self,f)
flask.flask.Blueprint.teardown_request(self,f)
flask.flask.Blueprint.url_defaults(self,f)
flask.flask.Blueprint.url_value_preprocessor(self,f)
flask.flask.BlueprintSetupState(self,blueprint,app,options,first_registration)
flask.flask.BlueprintSetupState.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.flask.blueprints.Blueprint(self,name,import_name,static_folder=None,static_url_path=None,template_folder=None,url_prefix=None,subdomain=None,url_defaults=None,root_path=None)
flask.flask.blueprints.Blueprint.__init__(self,name,import_name,static_folder=None,static_url_path=None,template_folder=None,url_prefix=None,subdomain=None,url_defaults=None,root_path=None)
flask.flask.blueprints.Blueprint.add_app_template_filter(self,f,name=None)
flask.flask.blueprints.Blueprint.add_app_template_global(self,f,name=None)
flask.flask.blueprints.Blueprint.add_app_template_test(self,f,name=None)
flask.flask.blueprints.Blueprint.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.flask.blueprints.Blueprint.after_app_request(self,f)
flask.flask.blueprints.Blueprint.after_request(self,f)
flask.flask.blueprints.Blueprint.app_context_processor(self,f)
flask.flask.blueprints.Blueprint.app_errorhandler(self,code)
flask.flask.blueprints.Blueprint.app_template_filter(self,name=None)
flask.flask.blueprints.Blueprint.app_template_global(self,name=None)
flask.flask.blueprints.Blueprint.app_template_test(self,name=None)
flask.flask.blueprints.Blueprint.app_url_defaults(self,f)
flask.flask.blueprints.Blueprint.app_url_value_preprocessor(self,f)
flask.flask.blueprints.Blueprint.before_app_first_request(self,f)
flask.flask.blueprints.Blueprint.before_app_request(self,f)
flask.flask.blueprints.Blueprint.before_request(self,f)
flask.flask.blueprints.Blueprint.context_processor(self,f)
flask.flask.blueprints.Blueprint.endpoint(self,endpoint)
flask.flask.blueprints.Blueprint.errorhandler(self,code_or_exception)
flask.flask.blueprints.Blueprint.make_setup_state(self,app,options,first_registration=False)
flask.flask.blueprints.Blueprint.record(self,func)
flask.flask.blueprints.Blueprint.record_once(self,func)
flask.flask.blueprints.Blueprint.register(self,app,options,first_registration=False)
flask.flask.blueprints.Blueprint.register_error_handler(self,code_or_exception,f)
flask.flask.blueprints.Blueprint.route(self,rule,**options)
flask.flask.blueprints.Blueprint.teardown_app_request(self,f)
flask.flask.blueprints.Blueprint.teardown_request(self,f)
flask.flask.blueprints.Blueprint.url_defaults(self,f)
flask.flask.blueprints.Blueprint.url_value_preprocessor(self,f)
flask.flask.blueprints.BlueprintSetupState(self,blueprint,app,options,first_registration)
flask.flask.blueprints.BlueprintSetupState.__init__(self,blueprint,app,options,first_registration)
flask.flask.blueprints.BlueprintSetupState.add_url_rule(self,rule,endpoint=None,view_func=None,**options)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/wrappers.py----------------------------------------
A:flask.flask.wrappers.data->self._get_data_for_json(cache=cache)
A:flask.flask.wrappers.rv->self.on_json_loading_failed(e)
flask.flask.wrappers.JSONMixin(object)
flask.flask.wrappers.JSONMixin._get_data_for_json(self,cache)
flask.flask.wrappers.JSONMixin.get_json(self,force=False,silent=False,cache=True)
flask.flask.wrappers.JSONMixin.is_json(self)
flask.flask.wrappers.JSONMixin.json(self)
flask.flask.wrappers.JSONMixin.on_json_loading_failed(self,e)
flask.flask.wrappers.Request(RequestBase,JSONMixin)
flask.flask.wrappers.Request._load_form_data(self)
flask.flask.wrappers.Request.blueprint(self)
flask.flask.wrappers.Request.endpoint(self)
flask.flask.wrappers.Request.max_content_length(self)
flask.flask.wrappers.Response(ResponseBase,JSONMixin)
flask.flask.wrappers.Response._get_data_for_json(self,cache)
flask.flask.wrappers.Response.max_cookie_size(self)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/__main__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/helpers.py----------------------------------------
A:flask.flask.helpers._missing->object()
A:flask.flask.helpers._os_alt_seps->list((sep for sep in [os.path.sep, os.path.altsep] if sep not in (None, '/')))
A:flask.flask.helpers.val->os.environ.get('FLASK_SKIP_DOTENV')
A:flask.flask.helpers.gen->generator_or_function(*args, **kwargs)
A:flask.flask.helpers.wrapped_g->generator()
A:flask.flask.helpers.external->values.pop('_external', True)
A:flask.flask.helpers.anchor->values.pop('_anchor', None)
A:flask.flask.helpers.method->values.pop('_method', None)
A:flask.flask.helpers.scheme->values.pop('_scheme', None)
A:flask.flask.helpers.rv->rv.make_conditional(request, accept_ranges=True, complete_length=fsize).make_conditional(request, accept_ranges=True, complete_length=fsize)
A:flask.flask.helpers.flashes->list(filter(lambda f: f[0] in category_filter, flashes))
A:flask.flask.helpers.filename->pkgutil.get_loader(root_mod_name).get_filename(root_mod_name)
A:flask.flask.helpers.attachment_filename->attachment_filename.encode('latin-1').encode('latin-1')
A:flask.flask.helpers.headers->Headers()
A:flask.flask.helpers.fsize->os.path.getsize(filename)
A:flask.flask.helpers.file->open(filename, 'rb')
A:flask.flask.helpers.mtime->os.path.getmtime(filename)
A:flask.flask.helpers.data->wrap_file(request.environ, file)
A:flask.flask.helpers.cache_timeout->self.get_send_file_max_age(filename)
A:flask.flask.helpers.rv.expires->int(time() + cache_timeout)
A:flask.flask.helpers.mod->sys.modules.get(import_name)
A:flask.flask.helpers.loader->pkgutil.get_loader(root_mod_name)
A:flask.flask.helpers.filepath->getattr(mod, '__file__', None)
A:flask.flask.helpers.package_path->os.path.dirname(package_path)
A:flask.flask.helpers.(site_parent, site_folder)->os.path.split(package_path)
A:flask.flask.helpers.py_prefix->os.path.abspath(sys.prefix)
A:flask.flask.helpers.(parent, folder)->os.path.split(site_parent)
A:flask.flask.helpers.base_dir->os.path.dirname(parent)
A:flask.flask.helpers.self.lock->RLock()
A:flask.flask.helpers.value->self.func(obj)
A:flask.flask.helpers.root_path->get_root_path(self.import_name)
A:flask.flask.helpers.static_folder->property(_get_static_folder, _set_static_folder, doc='The absolute path to the configured static folder.')
A:flask.flask.helpers.static_url_path->property(_get_static_url_path, _set_static_url_path, doc='The URL prefix that the static route will be registered for.')
flask.flask.flash(message,category='message')
flask.flask.get_flashed_messages(with_categories=False,category_filter=[])
flask.flask.get_template_attribute(template_name,attribute)
flask.flask.helpers._PackageBoundObject(self,import_name,template_folder=None,root_path=None)
flask.flask.helpers._PackageBoundObject.__init__(self,import_name,template_folder=None,root_path=None)
flask.flask.helpers._PackageBoundObject._get_static_folder(self)
flask.flask.helpers._PackageBoundObject._get_static_url_path(self)
flask.flask.helpers._PackageBoundObject._set_static_folder(self,value)
flask.flask.helpers._PackageBoundObject._set_static_url_path(self,value)
flask.flask.helpers._PackageBoundObject.get_send_file_max_age(self,filename)
flask.flask.helpers._PackageBoundObject.has_static_folder(self)
flask.flask.helpers._PackageBoundObject.jinja_loader(self)
flask.flask.helpers._PackageBoundObject.open_resource(self,resource,mode='rb')
flask.flask.helpers._PackageBoundObject.send_static_file(self,filename)
flask.flask.helpers._endpoint_from_view_func(view_func)
flask.flask.helpers._matching_loader_thinks_module_is_package(loader,mod_name)
flask.flask.helpers.find_package(import_name)
flask.flask.helpers.flash(message,category='message')
flask.flask.helpers.get_debug_flag()
flask.flask.helpers.get_env()
flask.flask.helpers.get_flashed_messages(with_categories=False,category_filter=[])
flask.flask.helpers.get_load_dotenv(default=True)
flask.flask.helpers.get_root_path(import_name)
flask.flask.helpers.get_template_attribute(template_name,attribute)
flask.flask.helpers.is_ip(value)
flask.flask.helpers.locked_cached_property(self,func,name=None,doc=None)
flask.flask.helpers.locked_cached_property.__get__(self,obj,type=None)
flask.flask.helpers.locked_cached_property.__init__(self,func,name=None,doc=None)
flask.flask.helpers.make_response(*args)
flask.flask.helpers.safe_join(directory,*pathnames)
flask.flask.helpers.send_file(filename_or_fp,mimetype=None,as_attachment=False,attachment_filename=None,add_etags=True,cache_timeout=None,conditional=False,last_modified=None)
flask.flask.helpers.send_from_directory(directory,filename,**options)
flask.flask.helpers.stream_with_context(generator_or_function)
flask.flask.helpers.total_seconds(td)
flask.flask.helpers.url_for(endpoint,**values)
flask.flask.make_response(*args)
flask.flask.safe_join(directory,*pathnames)
flask.flask.send_file(filename_or_fp,mimetype=None,as_attachment=False,attachment_filename=None,add_etags=True,cache_timeout=None,conditional=False,last_modified=None)
flask.flask.send_from_directory(directory,filename,**options)
flask.flask.stream_with_context(generator_or_function)
flask.flask.url_for(endpoint,**values)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/json/tag.py----------------------------------------
A:flask.flask.json.tag.key->next(iter(value))
A:flask.flask.json.tag.tag->tag_class(self)
flask.flask._json.tag.JSONTag(self,serializer)
flask.flask._json.tag.JSONTag.check(self,value)
flask.flask._json.tag.JSONTag.tag(self,value)
flask.flask._json.tag.JSONTag.to__json(self,value)
flask.flask._json.tag.JSONTag.to_python(self,value)
flask.flask._json.tag.PassDict(JSONTag)
flask.flask._json.tag.PassDict.check(self,value)
flask.flask._json.tag.PassDict.to__json(self,value)
flask.flask._json.tag.PassList(JSONTag)
flask.flask._json.tag.PassList.check(self,value)
flask.flask._json.tag.PassList.to__json(self,value)
flask.flask._json.tag.TagBytes(JSONTag)
flask.flask._json.tag.TagBytes.check(self,value)
flask.flask._json.tag.TagBytes.to__json(self,value)
flask.flask._json.tag.TagBytes.to_python(self,value)
flask.flask._json.tag.TagDateTime(JSONTag)
flask.flask._json.tag.TagDateTime.check(self,value)
flask.flask._json.tag.TagDateTime.to__json(self,value)
flask.flask._json.tag.TagDateTime.to_python(self,value)
flask.flask._json.tag.TagDict(JSONTag)
flask.flask._json.tag.TagDict.check(self,value)
flask.flask._json.tag.TagDict.to__json(self,value)
flask.flask._json.tag.TagDict.to_python(self,value)
flask.flask._json.tag.TagMarkup(JSONTag)
flask.flask._json.tag.TagMarkup.check(self,value)
flask.flask._json.tag.TagMarkup.to__json(self,value)
flask.flask._json.tag.TagMarkup.to_python(self,value)
flask.flask._json.tag.TagTuple(JSONTag)
flask.flask._json.tag.TagTuple.check(self,value)
flask.flask._json.tag.TagTuple.to__json(self,value)
flask.flask._json.tag.TagTuple.to_python(self,value)
flask.flask._json.tag.TagUUID(JSONTag)
flask.flask._json.tag.TagUUID.check(self,value)
flask.flask._json.tag.TagUUID.to__json(self,value)
flask.flask._json.tag.TagUUID.to_python(self,value)
flask.flask._json.tag.TaggedJSONSerializer(self)
flask.flask._json.tag.TaggedJSONSerializer.dumps(self,value)
flask.flask._json.tag.TaggedJSONSerializer.loads(self,value)
flask.flask._json.tag.TaggedJSONSerializer.register(self,tag_class,force=False,index=None)
flask.flask._json.tag.TaggedJSONSerializer.tag(self,value)
flask.flask._json.tag.TaggedJSONSerializer.untag(self,value)
flask.flask.json.tag.JSONTag(self,serializer)
flask.flask.json.tag.JSONTag.__init__(self,serializer)
flask.flask.json.tag.JSONTag.check(self,value)
flask.flask.json.tag.JSONTag.tag(self,value)
flask.flask.json.tag.JSONTag.to_json(self,value)
flask.flask.json.tag.JSONTag.to_python(self,value)
flask.flask.json.tag.PassDict(JSONTag)
flask.flask.json.tag.PassDict.check(self,value)
flask.flask.json.tag.PassDict.to_json(self,value)
flask.flask.json.tag.PassList(JSONTag)
flask.flask.json.tag.PassList.check(self,value)
flask.flask.json.tag.PassList.to_json(self,value)
flask.flask.json.tag.TagBytes(JSONTag)
flask.flask.json.tag.TagBytes.check(self,value)
flask.flask.json.tag.TagBytes.to_json(self,value)
flask.flask.json.tag.TagBytes.to_python(self,value)
flask.flask.json.tag.TagDateTime(JSONTag)
flask.flask.json.tag.TagDateTime.check(self,value)
flask.flask.json.tag.TagDateTime.to_json(self,value)
flask.flask.json.tag.TagDateTime.to_python(self,value)
flask.flask.json.tag.TagDict(JSONTag)
flask.flask.json.tag.TagDict.check(self,value)
flask.flask.json.tag.TagDict.to_json(self,value)
flask.flask.json.tag.TagDict.to_python(self,value)
flask.flask.json.tag.TagMarkup(JSONTag)
flask.flask.json.tag.TagMarkup.check(self,value)
flask.flask.json.tag.TagMarkup.to_json(self,value)
flask.flask.json.tag.TagMarkup.to_python(self,value)
flask.flask.json.tag.TagTuple(JSONTag)
flask.flask.json.tag.TagTuple.check(self,value)
flask.flask.json.tag.TagTuple.to_json(self,value)
flask.flask.json.tag.TagTuple.to_python(self,value)
flask.flask.json.tag.TagUUID(JSONTag)
flask.flask.json.tag.TagUUID.check(self,value)
flask.flask.json.tag.TagUUID.to_json(self,value)
flask.flask.json.tag.TagUUID.to_python(self,value)
flask.flask.json.tag.TaggedJSONSerializer(self)
flask.flask.json.tag.TaggedJSONSerializer.__init__(self)
flask.flask.json.tag.TaggedJSONSerializer.dumps(self,value)
flask.flask.json.tag.TaggedJSONSerializer.loads(self,value)
flask.flask.json.tag.TaggedJSONSerializer.register(self,tag_class,force=False,index=None)
flask.flask.json.tag.TaggedJSONSerializer.tag(self,value)
flask.flask.json.tag.TaggedJSONSerializer.untag(self,value)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/flask/json/__init__.py----------------------------------------
A:flask.flask.json.__init__.fp->_wrap_reader_for_text(fp, kwargs.pop('encoding', None) or 'utf-8')
A:flask.flask.json.__init__.encoding->detect_encoding(s)
A:flask.flask.json.__init__.rv->rv.replace('\\/', '/').replace('\\/', '/')
A:flask.flask.json.__init__.s->s.decode(encoding).decode(encoding)
flask.flask._json.__init__.JSONDecoder(_json.JSONDecoder)
flask.flask._json.__init__.JSONEncoder(_json.JSONEncoder)
flask.flask._json.__init__.JSONEncoder.default(self,o)
flask.flask._json.__init__._dump_arg_defaults(kwargs)
flask.flask._json.__init__._jsonify(*args,**kwargs)
flask.flask._json.__init__._load_arg_defaults(kwargs)
flask.flask._json.__init__._wrap_reader_for_text(fp,encoding)
flask.flask._json.__init__._wrap_writer_for_text(fp,encoding)
flask.flask._json.__init__.detect_encoding(data)
flask.flask._json.__init__.dump(obj,fp,**kwargs)
flask.flask._json.__init__.dumps(obj,**kwargs)
flask.flask._json.__init__.htmlsafe_dump(obj,fp,**kwargs)
flask.flask._json.__init__.htmlsafe_dumps(obj,**kwargs)
flask.flask._json.__init__.load(fp,**kwargs)
flask.flask._json.__init__.loads(s,**kwargs)
flask.flask._json.__init__.to_json_filter(obj,**kwargs)
flask.flask.json.__init__.JSONDecoder(_json.JSONDecoder)
flask.flask.json.__init__.JSONEncoder(_json.JSONEncoder)
flask.flask.json.__init__.JSONEncoder.default(self,o)
flask.flask.json.__init__._dump_arg_defaults(kwargs)
flask.flask.json.__init__._load_arg_defaults(kwargs)
flask.flask.json.__init__._wrap_reader_for_text(fp,encoding)
flask.flask.json.__init__._wrap_writer_for_text(fp,encoding)
flask.flask.json.__init__.detect_encoding(data)
flask.flask.json.__init__.dump(obj,fp,**kwargs)
flask.flask.json.__init__.dumps(obj,**kwargs)
flask.flask.json.__init__.htmlsafe_dump(obj,fp,**kwargs)
flask.flask.json.__init__.htmlsafe_dumps(obj,**kwargs)
flask.flask.json.__init__.jsonify(*args,**kwargs)
flask.flask.json.__init__.load(fp,**kwargs)
flask.flask.json.__init__.loads(s,**kwargs)
flask.flask.json.__init__.tojson_filter(obj,**kwargs)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/itsdangerous/encoding.py----------------------------------------
A:flask.itsdangerous.encoding.s->s.encode(encoding, errors).encode(encoding, errors)
A:flask.itsdangerous.encoding.string->want_bytes(string, encoding='ascii', errors='ignore')
A:flask.itsdangerous.encoding._base64_alphabet->f'{string.ascii_letters}{string.digits}-_='.encode('ascii')
A:flask.itsdangerous.encoding._int64_struct->struct.Struct('>Q')
A:flask.itsdangerous.encoding._bytes_to_int->typing.cast('_t.Callable[[bytes], _t.Tuple[int]]', _int64_struct.unpack)
flask.itsdangerous.base64_decode(string:_t_str_bytes)->bytes
flask.itsdangerous.base64_encode(string:_t_str_bytes)->bytes
flask.itsdangerous.encoding.base64_decode(string:_t_str_bytes)->bytes
flask.itsdangerous.encoding.base64_encode(string:_t_str_bytes)->bytes
flask.itsdangerous.encoding.bytes_to_int(bytestr:bytes)->int
flask.itsdangerous.encoding.int_to_bytes(num:int)->bytes
flask.itsdangerous.encoding.want_bytes(s:_t_str_bytes,encoding:str='utf-8',errors:str='strict')->bytes
flask.itsdangerous.want_bytes(s:_t_str_bytes,encoding:str='utf-8',errors:str='strict')->bytes


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/itsdangerous/url_safe.py----------------------------------------
A:flask.itsdangerous.url_safe.json->super().dump_payload(obj)
A:flask.itsdangerous.url_safe.compressed->zlib.compress(json)
A:flask.itsdangerous.url_safe.base64d->base64_encode(json)
flask.itsdangerous.URLSafeSerializer(URLSafeSerializerMixin,Serializer)
flask.itsdangerous.URLSafeSerializerMixin(Serializer)
flask.itsdangerous.URLSafeSerializerMixin.dump_payload(self,obj:_t.Any)->bytes
flask.itsdangerous.URLSafeSerializerMixin.load_payload(self,payload:bytes,*args:_t.Any,serializer:_t.Optional[_t.Any]=None,**kwargs:_t.Any)->_t.Any
flask.itsdangerous.URLSafeTimedSerializer(URLSafeSerializerMixin,TimedSerializer)
flask.itsdangerous.url_safe.URLSafeSerializer(URLSafeSerializerMixin,Serializer)
flask.itsdangerous.url_safe.URLSafeSerializerMixin(Serializer)
flask.itsdangerous.url_safe.URLSafeSerializerMixin.dump_payload(self,obj:_t.Any)->bytes
flask.itsdangerous.url_safe.URLSafeSerializerMixin.load_payload(self,payload:bytes,*args:_t.Any,serializer:_t.Optional[_t.Any]=None,**kwargs:_t.Any)->_t.Any
flask.itsdangerous.url_safe.URLSafeTimedSerializer(URLSafeSerializerMixin,TimedSerializer)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/itsdangerous/jws.py----------------------------------------
A:flask.itsdangerous.jws.self.algorithm->self.make_algorithm(algorithm_name)
A:flask.itsdangerous.jws.payload->super().load_payload(json_payload, serializer=serializer)
A:flask.itsdangerous.jws.(base64d_header, base64d_payload)->super().load_payload(json_payload, serializer=serializer).split(b'.', 1)
A:flask.itsdangerous.jws.json_header->base64_decode(base64d_header)
A:flask.itsdangerous.jws.json_payload->base64_decode(base64d_payload)
A:flask.itsdangerous.jws.header->super().make_header(header_fields)
A:flask.itsdangerous.jws.base64d_header->base64_encode(self.serializer.dumps(header, **self.serializer_kwargs))
A:flask.itsdangerous.jws.base64d_payload->base64_encode(self.serializer.dumps(obj, **self.serializer_kwargs))
A:flask.itsdangerous.jws.signer->self.make_signer(salt, self.algorithm)
A:flask.itsdangerous.jws.(payload, header)->super().loads(s, salt, return_header=True)
A:flask.itsdangerous.jws.iat->self.now()
A:flask.itsdangerous.jws.int_date_error->BadHeader('Expiry date is not an IntDate', payload=payload)
A:flask.itsdangerous.jws.header['exp']->int(header['exp'])
A:flask.itsdangerous.jws.rv->super().make_header(header_fields).get('iat')
flask.itsdangerous.JSONWebSignatureSerializer(self,secret_key,salt=None,serializer=None,serializer_kwargs=None,signer=None,signer_kwargs=None,algorithm_name=None)
flask.itsdangerous.JSONWebSignatureSerializer.dump_payload(self,header,obj)
flask.itsdangerous.JSONWebSignatureSerializer.dumps(self,obj,salt=None,header_fields=None)
flask.itsdangerous.JSONWebSignatureSerializer.load_payload(self,payload,serializer=None,return_header=False)
flask.itsdangerous.JSONWebSignatureSerializer.loads(self,s,salt=None,return_header=False)
flask.itsdangerous.JSONWebSignatureSerializer.loads_unsafe(self,s,salt=None,return_header=False)
flask.itsdangerous.JSONWebSignatureSerializer.make_algorithm(self,algorithm_name)
flask.itsdangerous.JSONWebSignatureSerializer.make_header(self,header_fields)
flask.itsdangerous.JSONWebSignatureSerializer.make_signer(self,salt=None,algorithm=None)
flask.itsdangerous.TimedJSONWebSignatureSerializer(self,secret_key,expires_in=None,**kwargs)
flask.itsdangerous.TimedJSONWebSignatureSerializer.get_issue_date(self,header)
flask.itsdangerous.TimedJSONWebSignatureSerializer.loads(self,s,salt=None,return_header=False)
flask.itsdangerous.TimedJSONWebSignatureSerializer.make_header(self,header_fields)
flask.itsdangerous.TimedJSONWebSignatureSerializer.now(self)
flask.itsdangerous.jws.JSONWebSignatureSerializer(self,secret_key,salt=None,serializer=None,serializer_kwargs=None,signer=None,signer_kwargs=None,algorithm_name=None)
flask.itsdangerous.jws.JSONWebSignatureSerializer.__init__(self,secret_key,salt=None,serializer=None,serializer_kwargs=None,signer=None,signer_kwargs=None,algorithm_name=None)
flask.itsdangerous.jws.JSONWebSignatureSerializer.dump_payload(self,header,obj)
flask.itsdangerous.jws.JSONWebSignatureSerializer.dumps(self,obj,salt=None,header_fields=None)
flask.itsdangerous.jws.JSONWebSignatureSerializer.load_payload(self,payload,serializer=None,return_header=False)
flask.itsdangerous.jws.JSONWebSignatureSerializer.loads(self,s,salt=None,return_header=False)
flask.itsdangerous.jws.JSONWebSignatureSerializer.loads_unsafe(self,s,salt=None,return_header=False)
flask.itsdangerous.jws.JSONWebSignatureSerializer.make_algorithm(self,algorithm_name)
flask.itsdangerous.jws.JSONWebSignatureSerializer.make_header(self,header_fields)
flask.itsdangerous.jws.JSONWebSignatureSerializer.make_signer(self,salt=None,algorithm=None)
flask.itsdangerous.jws.TimedJSONWebSignatureSerializer(self,secret_key,expires_in=None,**kwargs)
flask.itsdangerous.jws.TimedJSONWebSignatureSerializer.__init__(self,secret_key,expires_in=None,**kwargs)
flask.itsdangerous.jws.TimedJSONWebSignatureSerializer.get_issue_date(self,header)
flask.itsdangerous.jws.TimedJSONWebSignatureSerializer.loads(self,s,salt=None,return_header=False)
flask.itsdangerous.jws.TimedJSONWebSignatureSerializer.make_header(self,header_fields)
flask.itsdangerous.jws.TimedJSONWebSignatureSerializer.now(self)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/itsdangerous/signer.py----------------------------------------
A:flask.itsdangerous.signer.mac->hmac.new(secret_key, digestmod=self.digest_method)
A:flask.itsdangerous.signer.salt->want_bytes(salt)
A:flask.itsdangerous.signer.algorithm->HMACAlgorithm(self.digest_method)
A:flask.itsdangerous.signer.secret_key->want_bytes(secret_key)
A:flask.itsdangerous.signer.value->want_bytes(value)
A:flask.itsdangerous.signer.key->self.derive_key(secret_key)
A:flask.itsdangerous.signer.sig->base64_decode(sig)
A:flask.itsdangerous.signer.signed_value->want_bytes(signed_value)
A:flask.itsdangerous.signer.(value, sig)->want_bytes(signed_value).rsplit(self.sep, 1)
flask.itsdangerous.HMACAlgorithm(self,digest_method:_t.Any=None)
flask.itsdangerous.HMACAlgorithm.get_signature(self,key:bytes,value:bytes)->bytes
flask.itsdangerous.NoneAlgorithm(SigningAlgorithm)
flask.itsdangerous.NoneAlgorithm.get_signature(self,key:bytes,value:bytes)->bytes
flask.itsdangerous.Signer(self,secret_key:_t_secret_key,salt:_t_opt_str_bytes=b'itsdangerous.Signer',sep:_t_str_bytes=b'.',key_derivation:_t.Optional[str]=None,digest_method:_t.Optional[_t.Any]=None,algorithm:_t.Optional[SigningAlgorithm]=None)
flask.itsdangerous.Signer.derive_key(self,secret_key:_t_opt_str_bytes=None)->bytes
flask.itsdangerous.Signer.get_signature(self,value:_t_str_bytes)->bytes
flask.itsdangerous.Signer.secret_key(self)->bytes
flask.itsdangerous.Signer.sign(self,value:_t_str_bytes)->bytes
flask.itsdangerous.Signer.unsign(self,signed_value:_t_str_bytes)->bytes
flask.itsdangerous.Signer.validate(self,signed_value:_t_str_bytes)->bool
flask.itsdangerous.Signer.verify_signature(self,value:_t_str_bytes,sig:_t_str_bytes)->bool
flask.itsdangerous.signer.HMACAlgorithm(self,digest_method:_t.Any=None)
flask.itsdangerous.signer.HMACAlgorithm.__init__(self,digest_method:_t.Any=None)
flask.itsdangerous.signer.HMACAlgorithm.get_signature(self,key:bytes,value:bytes)->bytes
flask.itsdangerous.signer.NoneAlgorithm(SigningAlgorithm)
flask.itsdangerous.signer.NoneAlgorithm.get_signature(self,key:bytes,value:bytes)->bytes
flask.itsdangerous.signer.Signer(self,secret_key:_t_secret_key,salt:_t_opt_str_bytes=b'itsdangerous.Signer',sep:_t_str_bytes=b'.',key_derivation:_t.Optional[str]=None,digest_method:_t.Optional[_t.Any]=None,algorithm:_t.Optional[SigningAlgorithm]=None)
flask.itsdangerous.signer.Signer.__init__(self,secret_key:_t_secret_key,salt:_t_opt_str_bytes=b'itsdangerous.Signer',sep:_t_str_bytes=b'.',key_derivation:_t.Optional[str]=None,digest_method:_t.Optional[_t.Any]=None,algorithm:_t.Optional[SigningAlgorithm]=None)
flask.itsdangerous.signer.Signer.derive_key(self,secret_key:_t_opt_str_bytes=None)->bytes
flask.itsdangerous.signer.Signer.get_signature(self,value:_t_str_bytes)->bytes
flask.itsdangerous.signer.Signer.secret_key(self)->bytes
flask.itsdangerous.signer.Signer.sign(self,value:_t_str_bytes)->bytes
flask.itsdangerous.signer.Signer.unsign(self,signed_value:_t_str_bytes)->bytes
flask.itsdangerous.signer.Signer.validate(self,signed_value:_t_str_bytes)->bool
flask.itsdangerous.signer.Signer.verify_signature(self,value:_t_str_bytes,sig:_t_str_bytes)->bool
flask.itsdangerous.signer.SigningAlgorithm
flask.itsdangerous.signer.SigningAlgorithm.get_signature(self,key:bytes,value:bytes)->bytes
flask.itsdangerous.signer.SigningAlgorithm.verify_signature(self,key:bytes,value:bytes,sig:bytes)->bool
flask.itsdangerous.signer._make_keys_list(secret_key:_t_secret_key)->_t.List[bytes]


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/itsdangerous/serializer.py----------------------------------------
A:flask.itsdangerous.serializer.salt->want_bytes(salt)
A:flask.itsdangerous.serializer.fallback_signers->list(self.default_fallback_signers or ())
A:flask.itsdangerous.serializer.is_text->is_text_serializer(serializer)
A:flask.itsdangerous.serializer.payload->want_bytes(self.dump_payload(obj))
A:flask.itsdangerous.serializer.rv->self.make_signer(salt).sign(payload)
A:flask.itsdangerous.serializer.s->want_bytes(s)
flask.itsdangerous.Serializer(self,secret_key:_t_secret_key,salt:_t_opt_str_bytes=b'itsdangerous',serializer:_t.Any=None,serializer_kwargs:_t_opt_kwargs=None,signer:_t.Optional[_t_signer]=None,signer_kwargs:_t_opt_kwargs=None,fallback_signers:_t.Optional[_t_fallbacks]=None)
flask.itsdangerous.Serializer._loads_unsafe_impl(self,s:_t_str_bytes,salt:_t_opt_str_bytes,load_kwargs:_t_opt_kwargs=None,load_payload_kwargs:_t_opt_kwargs=None)->_t_load_unsafe
flask.itsdangerous.Serializer.dump(self,obj:_t.Any,f:_t.IO,salt:_t_opt_str_bytes=None)->None
flask.itsdangerous.Serializer.dump_payload(self,obj:_t.Any)->bytes
flask.itsdangerous.Serializer.dumps(self,obj:_t.Any,salt:_t_opt_str_bytes=None)->_t_str_bytes
flask.itsdangerous.Serializer.iter_unsigners(self,salt:_t_opt_str_bytes=None)->_t.Iterator[Signer]
flask.itsdangerous.Serializer.load(self,f:_t.IO,salt:_t_opt_str_bytes=None)->_t.Any
flask.itsdangerous.Serializer.load_payload(self,payload:bytes,serializer:_t.Optional[_t.Any]=None)->_t.Any
flask.itsdangerous.Serializer.load_unsafe(self,f:_t.IO,salt:_t_opt_str_bytes=None)->_t_load_unsafe
flask.itsdangerous.Serializer.loads(self,s:_t_str_bytes,salt:_t_opt_str_bytes=None,**kwargs:_t.Any)->_t.Any
flask.itsdangerous.Serializer.loads_unsafe(self,s:_t_str_bytes,salt:_t_opt_str_bytes=None)->_t_load_unsafe
flask.itsdangerous.Serializer.make_signer(self,salt:_t_opt_str_bytes=None)->Signer
flask.itsdangerous.Serializer.secret_key(self)->bytes
flask.itsdangerous.serializer.Serializer(self,secret_key:_t_secret_key,salt:_t_opt_str_bytes=b'itsdangerous',serializer:_t.Any=None,serializer_kwargs:_t_opt_kwargs=None,signer:_t.Optional[_t_signer]=None,signer_kwargs:_t_opt_kwargs=None,fallback_signers:_t.Optional[_t_fallbacks]=None)
flask.itsdangerous.serializer.Serializer.__init__(self,secret_key:_t_secret_key,salt:_t_opt_str_bytes=b'itsdangerous',serializer:_t.Any=None,serializer_kwargs:_t_opt_kwargs=None,signer:_t.Optional[_t_signer]=None,signer_kwargs:_t_opt_kwargs=None,fallback_signers:_t.Optional[_t_fallbacks]=None)
flask.itsdangerous.serializer.Serializer._loads_unsafe_impl(self,s:_t_str_bytes,salt:_t_opt_str_bytes,load_kwargs:_t_opt_kwargs=None,load_payload_kwargs:_t_opt_kwargs=None)->_t_load_unsafe
flask.itsdangerous.serializer.Serializer.dump(self,obj:_t.Any,f:_t.IO,salt:_t_opt_str_bytes=None)->None
flask.itsdangerous.serializer.Serializer.dump_payload(self,obj:_t.Any)->bytes
flask.itsdangerous.serializer.Serializer.dumps(self,obj:_t.Any,salt:_t_opt_str_bytes=None)->_t_str_bytes
flask.itsdangerous.serializer.Serializer.iter_unsigners(self,salt:_t_opt_str_bytes=None)->_t.Iterator[Signer]
flask.itsdangerous.serializer.Serializer.load(self,f:_t.IO,salt:_t_opt_str_bytes=None)->_t.Any
flask.itsdangerous.serializer.Serializer.load_payload(self,payload:bytes,serializer:_t.Optional[_t.Any]=None)->_t.Any
flask.itsdangerous.serializer.Serializer.load_unsafe(self,f:_t.IO,salt:_t_opt_str_bytes=None)->_t_load_unsafe
flask.itsdangerous.serializer.Serializer.loads(self,s:_t_str_bytes,salt:_t_opt_str_bytes=None,**kwargs:_t.Any)->_t.Any
flask.itsdangerous.serializer.Serializer.loads_unsafe(self,s:_t_str_bytes,salt:_t_opt_str_bytes=None)->_t_load_unsafe
flask.itsdangerous.serializer.Serializer.make_signer(self,salt:_t_opt_str_bytes=None)->Signer
flask.itsdangerous.serializer.Serializer.secret_key(self)->bytes
flask.itsdangerous.serializer.is_text_serializer(serializer:_t.Any)->bool


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/itsdangerous/_json.py----------------------------------------
A:flask.itsdangerous._json.json->DeprecatedJSON('json')
flask.itsdangerous._json.DeprecatedJSON(ModuleType)
flask.itsdangerous._json.DeprecatedJSON.__getattribute__(self,item:str)->_t.Any
flask.itsdangerous._json._CompactJSON
flask.itsdangerous._json._CompactJSON.dumps(obj:_t.Any,**kwargs:_t.Any)->str
flask.itsdangerous._json._CompactJSON.loads(payload:_t.Union[str,bytes])->_t.Any


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/itsdangerous/timed.py----------------------------------------
A:flask.itsdangerous.timed.value->want_bytes(value)
A:flask.itsdangerous.timed.timestamp->base64_encode(int_to_bytes(self.get_timestamp()))
A:flask.itsdangerous.timed.sep->want_bytes(self.sep)
A:flask.itsdangerous.timed.result->super().unsign(signed_value)
A:flask.itsdangerous.timed.(value, ts_bytes)->super().unsign(signed_value).rsplit(sep, 1)
A:flask.itsdangerous.timed.ts_int->bytes_to_int(base64_decode(ts_bytes))
A:flask.itsdangerous.timed.ts_dt->self.timestamp_to_datetime(ts_int)
A:flask.itsdangerous.timed.s->want_bytes(s)
A:flask.itsdangerous.timed.(base64d, timestamp)->signer.unsign(s, max_age=max_age, return_timestamp=True)
A:flask.itsdangerous.timed.payload->self.load_payload(base64d)
flask.itsdangerous.TimedSerializer(Serializer)
flask.itsdangerous.TimedSerializer.iter_unsigners(self,salt:_t_opt_str_bytes=None)->_t.Iterator[TimestampSigner]
flask.itsdangerous.TimedSerializer.loads(self,s:_t_str_bytes,max_age:_t_opt_int=None,return_timestamp:bool=False,salt:_t_opt_str_bytes=None)->_t.Any
flask.itsdangerous.TimedSerializer.loads_unsafe(self,s:_t_str_bytes,max_age:_t_opt_int=None,salt:_t_opt_str_bytes=None)->_t.Tuple[bool, _t.Any]
flask.itsdangerous.TimestampSigner(Signer)
flask.itsdangerous.TimestampSigner.get_timestamp(self)->int
flask.itsdangerous.TimestampSigner.sign(self,value:_t_str_bytes)->bytes
flask.itsdangerous.TimestampSigner.timestamp_to_datetime(self,ts:int)->datetime
flask.itsdangerous.TimestampSigner.unsign(self,signed_value:_t_str_bytes,max_age:_t_opt_int=None,return_timestamp:bool=False)->_t.Union[_t.Tuple[bytes, datetime], bytes]
flask.itsdangerous.TimestampSigner.validate(self,signed_value:_t_str_bytes,max_age:_t_opt_int=None)->bool
flask.itsdangerous.timed.TimedSerializer(Serializer)
flask.itsdangerous.timed.TimedSerializer.iter_unsigners(self,salt:_t_opt_str_bytes=None)->_t.Iterator[TimestampSigner]
flask.itsdangerous.timed.TimedSerializer.loads(self,s:_t_str_bytes,max_age:_t_opt_int=None,return_timestamp:bool=False,salt:_t_opt_str_bytes=None)->_t.Any
flask.itsdangerous.timed.TimedSerializer.loads_unsafe(self,s:_t_str_bytes,max_age:_t_opt_int=None,salt:_t_opt_str_bytes=None)->_t.Tuple[bool, _t.Any]
flask.itsdangerous.timed.TimestampSigner(Signer)
flask.itsdangerous.timed.TimestampSigner.get_timestamp(self)->int
flask.itsdangerous.timed.TimestampSigner.sign(self,value:_t_str_bytes)->bytes
flask.itsdangerous.timed.TimestampSigner.timestamp_to_datetime(self,ts:int)->datetime
flask.itsdangerous.timed.TimestampSigner.unsign(self,signed_value:_t_str_bytes,max_age:_t_opt_int=None,return_timestamp:bool=False)->_t.Union[_t.Tuple[bytes, datetime], bytes]
flask.itsdangerous.timed.TimestampSigner.validate(self,signed_value:_t_str_bytes,max_age:_t_opt_int=None)->bool


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/itsdangerous/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/itsdangerous/exc.py----------------------------------------
flask.itsdangerous.BadData(self,message:str)
flask.itsdangerous.BadData.__str__(self)->str
flask.itsdangerous.BadHeader(self,message:str,payload:_t_opt_any=None,header:_t_opt_any=None,original_error:_t_opt_exc=None)
flask.itsdangerous.BadPayload(self,message:str,original_error:_t_opt_exc=None)
flask.itsdangerous.BadSignature(self,message:str,payload:_t_opt_any=None)
flask.itsdangerous.BadTimeSignature(self,message:str,payload:_t_opt_any=None,date_signed:_t.Optional[datetime]=None)
flask.itsdangerous.SignatureExpired(BadTimeSignature)
flask.itsdangerous.exc.BadData(self,message:str)
flask.itsdangerous.exc.BadData.__init__(self,message:str)
flask.itsdangerous.exc.BadData.__str__(self)->str
flask.itsdangerous.exc.BadHeader(self,message:str,payload:_t_opt_any=None,header:_t_opt_any=None,original_error:_t_opt_exc=None)
flask.itsdangerous.exc.BadHeader.__init__(self,message:str,payload:_t_opt_any=None,header:_t_opt_any=None,original_error:_t_opt_exc=None)
flask.itsdangerous.exc.BadPayload(self,message:str,original_error:_t_opt_exc=None)
flask.itsdangerous.exc.BadPayload.__init__(self,message:str,original_error:_t_opt_exc=None)
flask.itsdangerous.exc.BadSignature(self,message:str,payload:_t_opt_any=None)
flask.itsdangerous.exc.BadSignature.__init__(self,message:str,payload:_t_opt_any=None)
flask.itsdangerous.exc.BadTimeSignature(self,message:str,payload:_t_opt_any=None,date_signed:_t.Optional[datetime]=None)
flask.itsdangerous.exc.BadTimeSignature.__init__(self,message:str,payload:_t_opt_any=None,date_signed:_t.Optional[datetime]=None)
flask.itsdangerous.exc.SignatureExpired(BadTimeSignature)


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/markupsafe/_speedups.pyi----------------------------------------
flask.markupsafe._speedups.escape(s:Any)->Markup
flask.markupsafe._speedups.escape_silent(s:Optional[Any])->Markup
flask.markupsafe._speedups.soft_str(s:Any)->str
flask.markupsafe._speedups.soft_unicode(s:Any)->str
flask.markupsafe.escape(s:Any)->Markup
flask.markupsafe.escape_silent(s:Optional[Any])->Markup
flask.markupsafe.soft_str(s:Any)->str
flask.markupsafe.soft_unicode(s:Any)->str


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/markupsafe/_native.py----------------------------------------
flask.markupsafe._native.escape(s:t.Any)->Markup
flask.markupsafe._native.escape_silent(s:t.Optional[t.Any])->Markup
flask.markupsafe._native.soft_str(s:t.Any)->str
flask.markupsafe._native.soft_unicode(s:t.Any)->str
flask.markupsafe.escape(s:t.Any)->Markup
flask.markupsafe.escape_silent(s:t.Optional[t.Any])->Markup
flask.markupsafe.soft_str(s:t.Any)->str
flask.markupsafe.soft_unicode(s:t.Any)->str


----------------------------------------/home/zhang/Packages/flask/flask1.0.2/markupsafe/__init__.py----------------------------------------
A:flask.markupsafe.__init__._striptags_re->re.compile('(<!--.*?-->|<[^>]*>)')
A:flask.markupsafe.__init__.orig->getattr(str, name)
A:flask.markupsafe.__init__.args->_escape_argspec(list(args), enumerate(args), self.escape)
A:flask.markupsafe.__init__.base->base.__html__().__html__()
A:flask.markupsafe.__init__.arg->_MarkupEscapeHelper(arg, self.escape)
A:flask.markupsafe.__init__.stripped->' '.join(_striptags_re.sub('', self).split())
A:flask.markupsafe.__init__.rv->string.Formatter.format_field(self, value, str(format_spec))
A:flask.markupsafe.__init__.locals()[method]->_simple_escaping_wrapper(method)
A:flask.markupsafe.__init__.(l, s, r)->super().rpartition(self.escape(sep))
A:flask.markupsafe.__init__.formatter->EscapeFormatter(self.escape)
A:flask.markupsafe.__init__._ListOrDict->typing.TypeVar('_ListOrDict', list, dict)
A:flask.markupsafe.__init__.obj[key]->escape(value)
flask.markupsafe.__init__.EscapeFormatter(self,escape:t.Callable[[t.Any],Markup])
flask.markupsafe.__init__.EscapeFormatter.__init__(self,escape:t.Callable[[t.Any],Markup])
flask.markupsafe.__init__.EscapeFormatter.format_field(self,value:t.Any,format_spec:str)->str
flask.markupsafe.__init__.Markup(cls,base:t.Any='',encoding:t.Optional[str]=None,errors:str='strict')
flask.markupsafe.__init__.Markup.__add__(self,other:t.Union[str,'HasHTML'])->'Markup'
flask.markupsafe.__init__.Markup.__html__(self)->'Markup'
flask.markupsafe.__init__.Markup.__html_format__(self,format_spec:str)->'Markup'
flask.markupsafe.__init__.Markup.__mod__(self,arg:t.Any)->'Markup'
flask.markupsafe.__init__.Markup.__mul__(self,num:int)->'Markup'
flask.markupsafe.__init__.Markup.__new__(cls,base:t.Any='',encoding:t.Optional[str]=None,errors:str='strict')
flask.markupsafe.__init__.Markup.__radd__(self,other:t.Union[str,'HasHTML'])->'Markup'
flask.markupsafe.__init__.Markup.__repr__(self)->str
flask.markupsafe.__init__.Markup.escape(cls,s:t.Any)->'Markup'
flask.markupsafe.__init__.Markup.format(self,*args:t.Any,**kwargs:t.Any)->'Markup'
flask.markupsafe.__init__.Markup.join(self,seq:t.Iterable[t.Union[str,'HasHTML']])->'Markup'
flask.markupsafe.__init__.Markup.partition(self,sep:str)->t.Tuple['Markup', 'Markup', 'Markup']
flask.markupsafe.__init__.Markup.rpartition(self,sep:str)->t.Tuple['Markup', 'Markup', 'Markup']
flask.markupsafe.__init__.Markup.rsplit(self,sep:t.Optional[str]=None,maxsplit:int=-1)->t.List['Markup']
flask.markupsafe.__init__.Markup.split(self,sep:t.Optional[str]=None,maxsplit:int=-1)->t.List['Markup']
flask.markupsafe.__init__.Markup.splitlines(self,keepends:bool=False)->t.List['Markup']
flask.markupsafe.__init__.Markup.striptags(self)->str
flask.markupsafe.__init__.Markup.unescape(self)->str
flask.markupsafe.__init__._MarkupEscapeHelper(self,obj:t.Any,escape:t.Callable[[t.Any],Markup])
flask.markupsafe.__init__._MarkupEscapeHelper.__float__(self)->float
flask.markupsafe.__init__._MarkupEscapeHelper.__getitem__(self,item:t.Any)->'_MarkupEscapeHelper'
flask.markupsafe.__init__._MarkupEscapeHelper.__init__(self,obj:t.Any,escape:t.Callable[[t.Any],Markup])
flask.markupsafe.__init__._MarkupEscapeHelper.__int__(self)->int
flask.markupsafe.__init__._MarkupEscapeHelper.__repr__(self)->str
flask.markupsafe.__init__._MarkupEscapeHelper.__str__(self)->str
flask.markupsafe.__init__._escape_argspec(obj:_ListOrDict,iterable:t.Iterable[t.Any],escape:t.Callable[[t.Any],Markup])->_ListOrDict
flask.markupsafe.__init__._simple_escaping_wrapper(name:str)->t.Callable[..., 'Markup']

