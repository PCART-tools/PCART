
----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/__main__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/templating.py----------------------------------------
A:flask.templating.options['loader']->app.create_global_jinja_loader()
A:flask.templating.rv->template.render(context)
A:flask.templating.result->set()
flask.render_template(template_name_or_list,**context)
flask.render_template_string(source,**context)
flask.templating.DispatchingJinjaLoader(self,app)
flask.templating.DispatchingJinjaLoader.__init__(self,app)
flask.templating.DispatchingJinjaLoader._get_source_explained(self,environment,template)
flask.templating.DispatchingJinjaLoader._get_source_fast(self,environment,template)
flask.templating.DispatchingJinjaLoader._iter_loaders(self,template)
flask.templating.DispatchingJinjaLoader.get_source(self,environment,template)
flask.templating.DispatchingJinjaLoader.list_templates(self)
flask.templating.Environment(self,app,**options)
flask.templating.Environment.__init__(self,app,**options)
flask.templating._default_template_ctx_processor()
flask.templating._render(template,context,app)
flask.templating.render_template(template_name_or_list,**context)
flask.templating.render_template_string(source,**context)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/exthook.py----------------------------------------
A:flask.exthook.(exc_type, exc_value, tb)->sys.exc_info()
A:flask.exthook.filename->os.path.abspath(tb.tb_frame.f_code.co_filename)
flask.exthook.ExtDeprecationWarning(DeprecationWarning)
flask.exthook.ExtensionImporter(self,module_choices,wrapper_module)
flask.exthook.ExtensionImporter.__eq__(self,other)
flask.exthook.ExtensionImporter.__init__(self,module_choices,wrapper_module)
flask.exthook.ExtensionImporter.__ne__(self,other)
flask.exthook.ExtensionImporter.find_module(self,fullname,path=None)
flask.exthook.ExtensionImporter.install(self)
flask.exthook.ExtensionImporter.is_important_frame(self,important_module,tb)
flask.exthook.ExtensionImporter.is_important_traceback(self,important_module,tb)
flask.exthook.ExtensionImporter.load_module(self,fullname)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/helpers.py----------------------------------------
A:flask.helpers._missing->object()
A:flask.helpers._os_alt_seps->list((sep for sep in [os.path.sep, os.path.altsep] if sep not in (None, '/')))
A:flask.helpers.val->os.environ.get('FLASK_DEBUG')
A:flask.helpers.gen->generator_or_function(*args, **kwargs)
A:flask.helpers.wrapped_g->generator()
A:flask.helpers.external->values.pop('_external', True)
A:flask.helpers.anchor->values.pop('_anchor', None)
A:flask.helpers.method->values.pop('_method', None)
A:flask.helpers.scheme->values.pop('_scheme', None)
A:flask.helpers.rv->rv.make_conditional(request).make_conditional(request)
A:flask.helpers.flashes->list(filter(lambda f: f[0] in category_filter, flashes))
A:flask.helpers.filename->pkgutil.get_loader(root_mod_name).get_filename(root_mod_name)
A:flask.helpers.attachment_filename->os.path.basename(filename)
A:flask.helpers.headers->Headers()
A:flask.helpers.fsize->os.path.getsize(filename)
A:flask.helpers.file->open(filename, 'rb')
A:flask.helpers.mtime->os.path.getmtime(filename)
A:flask.helpers.data->wrap_file(request.environ, file)
A:flask.helpers.cache_timeout->self.get_send_file_max_age(filename)
A:flask.helpers.rv.expires->int(time() + cache_timeout)
A:flask.helpers.mod->sys.modules.get(import_name)
A:flask.helpers.loader->pkgutil.get_loader(root_mod_name)
A:flask.helpers.filepath->getattr(mod, '__file__', None)
A:flask.helpers.package_path->os.path.dirname(package_path)
A:flask.helpers.(site_parent, site_folder)->os.path.split(package_path)
A:flask.helpers.py_prefix->os.path.abspath(sys.prefix)
A:flask.helpers.(parent, folder)->os.path.split(site_parent)
A:flask.helpers.base_dir->os.path.dirname(parent)
A:flask.helpers.self.lock->RLock()
A:flask.helpers.value->self.func(obj)
A:flask.helpers.root_path->get_root_path(self.import_name)
A:flask.helpers.static_folder->property(_get_static_folder, _set_static_folder, doc='\n    The absolute path to the configured static folder.\n    ')
A:flask.helpers.static_url_path->property(_get_static_url_path, _set_static_url_path)
flask.flash(message,category='message')
flask.get_flashed_messages(with_categories=False,category_filter=[])
flask.get_template_attribute(template_name,attribute)
flask.helpers._PackageBoundObject(self,import_name,template_folder=None,root_path=None)
flask.helpers._PackageBoundObject.__init__(self,import_name,template_folder=None,root_path=None)
flask.helpers._PackageBoundObject._get_static_folder(self)
flask.helpers._PackageBoundObject._get_static_url_path(self)
flask.helpers._PackageBoundObject._set_static_folder(self,value)
flask.helpers._PackageBoundObject._set_static_url_path(self,value)
flask.helpers._PackageBoundObject.get_send_file_max_age(self,filename)
flask.helpers._PackageBoundObject.has_static_folder(self)
flask.helpers._PackageBoundObject.jinja_loader(self)
flask.helpers._PackageBoundObject.open_resource(self,resource,mode='rb')
flask.helpers._PackageBoundObject.send_static_file(self,filename)
flask.helpers._endpoint_from_view_func(view_func)
flask.helpers._matching_loader_thinks_module_is_package(loader,mod_name)
flask.helpers.find_package(import_name)
flask.helpers.flash(message,category='message')
flask.helpers.get_debug_flag(default=None)
flask.helpers.get_flashed_messages(with_categories=False,category_filter=[])
flask.helpers.get_root_path(import_name)
flask.helpers.get_template_attribute(template_name,attribute)
flask.helpers.locked_cached_property(self,func,name=None,doc=None)
flask.helpers.locked_cached_property.__get__(self,obj,type=None)
flask.helpers.locked_cached_property.__init__(self,func,name=None,doc=None)
flask.helpers.make_response(*args)
flask.helpers.safe_join(directory,*pathnames)
flask.helpers.send_file(filename_or_fp,mimetype=None,as_attachment=False,attachment_filename=None,add_etags=True,cache_timeout=None,conditional=False,last_modified=None)
flask.helpers.send_from_directory(directory,filename,**options)
flask.helpers.stream_with_context(generator_or_function)
flask.helpers.total_seconds(td)
flask.helpers.url_for(endpoint,**values)
flask.make_response(*args)
flask.safe_join(directory,*pathnames)
flask.send_file(filename_or_fp,mimetype=None,as_attachment=False,attachment_filename=None,add_etags=True,cache_timeout=None,conditional=False,last_modified=None)
flask.send_from_directory(directory,filename,**options)
flask.stream_with_context(generator_or_function)
flask.url_for(endpoint,**values)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/blueprints.py----------------------------------------
A:flask.blueprints.subdomain->self.options.get('subdomain')
A:flask.blueprints.url_prefix->self.options.get('url_prefix')
A:flask.blueprints.self.url_defaults->dict(self.blueprint.url_values_defaults)
A:flask.blueprints.endpoint->options.pop('endpoint', f.__name__)
A:flask.blueprints.defaults->dict(defaults, **options.pop('defaults'))
A:flask.blueprints.state->self.make_setup_state(app, options, first_registration)
flask.Blueprint(self,name,import_name,static_folder=None,static_url_path=None,template_folder=None,url_prefix=None,subdomain=None,url_defaults=None,root_path=None)
flask.Blueprint.add_app_template_filter(self,f,name=None)
flask.Blueprint.add_app_template_global(self,f,name=None)
flask.Blueprint.add_app_template_test(self,f,name=None)
flask.Blueprint.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.Blueprint.after_app_request(self,f)
flask.Blueprint.after_request(self,f)
flask.Blueprint.app_context_processor(self,f)
flask.Blueprint.app_errorhandler(self,code)
flask.Blueprint.app_template_filter(self,name=None)
flask.Blueprint.app_template_global(self,name=None)
flask.Blueprint.app_template_test(self,name=None)
flask.Blueprint.app_url_defaults(self,f)
flask.Blueprint.app_url_value_preprocessor(self,f)
flask.Blueprint.before_app_first_request(self,f)
flask.Blueprint.before_app_request(self,f)
flask.Blueprint.before_request(self,f)
flask.Blueprint.context_processor(self,f)
flask.Blueprint.endpoint(self,endpoint)
flask.Blueprint.errorhandler(self,code_or_exception)
flask.Blueprint.make_setup_state(self,app,options,first_registration=False)
flask.Blueprint.record(self,func)
flask.Blueprint.record_once(self,func)
flask.Blueprint.register(self,app,options,first_registration=False)
flask.Blueprint.register_error_handler(self,code_or_exception,f)
flask.Blueprint.route(self,rule,**options)
flask.Blueprint.teardown_app_request(self,f)
flask.Blueprint.teardown_request(self,f)
flask.Blueprint.url_defaults(self,f)
flask.Blueprint.url_value_preprocessor(self,f)
flask.BlueprintSetupState(self,blueprint,app,options,first_registration)
flask.BlueprintSetupState.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.blueprints.Blueprint(self,name,import_name,static_folder=None,static_url_path=None,template_folder=None,url_prefix=None,subdomain=None,url_defaults=None,root_path=None)
flask.blueprints.Blueprint.__init__(self,name,import_name,static_folder=None,static_url_path=None,template_folder=None,url_prefix=None,subdomain=None,url_defaults=None,root_path=None)
flask.blueprints.Blueprint.add_app_template_filter(self,f,name=None)
flask.blueprints.Blueprint.add_app_template_global(self,f,name=None)
flask.blueprints.Blueprint.add_app_template_test(self,f,name=None)
flask.blueprints.Blueprint.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.blueprints.Blueprint.after_app_request(self,f)
flask.blueprints.Blueprint.after_request(self,f)
flask.blueprints.Blueprint.app_context_processor(self,f)
flask.blueprints.Blueprint.app_errorhandler(self,code)
flask.blueprints.Blueprint.app_template_filter(self,name=None)
flask.blueprints.Blueprint.app_template_global(self,name=None)
flask.blueprints.Blueprint.app_template_test(self,name=None)
flask.blueprints.Blueprint.app_url_defaults(self,f)
flask.blueprints.Blueprint.app_url_value_preprocessor(self,f)
flask.blueprints.Blueprint.before_app_first_request(self,f)
flask.blueprints.Blueprint.before_app_request(self,f)
flask.blueprints.Blueprint.before_request(self,f)
flask.blueprints.Blueprint.context_processor(self,f)
flask.blueprints.Blueprint.endpoint(self,endpoint)
flask.blueprints.Blueprint.errorhandler(self,code_or_exception)
flask.blueprints.Blueprint.make_setup_state(self,app,options,first_registration=False)
flask.blueprints.Blueprint.record(self,func)
flask.blueprints.Blueprint.record_once(self,func)
flask.blueprints.Blueprint.register(self,app,options,first_registration=False)
flask.blueprints.Blueprint.register_error_handler(self,code_or_exception,f)
flask.blueprints.Blueprint.route(self,rule,**options)
flask.blueprints.Blueprint.teardown_app_request(self,f)
flask.blueprints.Blueprint.teardown_request(self,f)
flask.blueprints.Blueprint.url_defaults(self,f)
flask.blueprints.Blueprint.url_value_preprocessor(self,f)
flask.blueprints.BlueprintSetupState(self,blueprint,app,options,first_registration)
flask.blueprints.BlueprintSetupState.__init__(self,blueprint,app,options,first_registration)
flask.blueprints.BlueprintSetupState.add_url_rule(self,rule,endpoint=None,view_func=None,**options)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/app.py----------------------------------------
A:flask.app._logger_lock->Lock()
A:flask.app._sentinel->object()
A:flask.app.request_globals_class->property(_get_request_globals_class, _set_request_globals_class)
A:flask.app.debug->ConfigAttribute('DEBUG')
A:flask.app.testing->ConfigAttribute('TESTING')
A:flask.app.secret_key->ConfigAttribute('SECRET_KEY')
A:flask.app.session_cookie_name->ConfigAttribute('SESSION_COOKIE_NAME')
A:flask.app.permanent_session_lifetime->ConfigAttribute('PERMANENT_SESSION_LIFETIME', get_converter=_make_timedelta)
A:flask.app.send_file_max_age_default->ConfigAttribute('SEND_FILE_MAX_AGE_DEFAULT', get_converter=_make_timedelta)
A:flask.app.use_x_sendfile->ConfigAttribute('USE_X_SENDFILE')
A:flask.app.logger_name->ConfigAttribute('LOGGER_NAME')
A:flask.app.jinja_options->ImmutableDict(extensions=['jinja2.ext.autoescape', 'jinja2.ext.with_'])
A:flask.app.default_config->ImmutableDict({'DEBUG': get_debug_flag(default=False), 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': None, 'PERMANENT_SESSION_LIFETIME': timedelta(days=31), 'USE_X_SENDFILE': False, 'LOGGER_NAME': None, 'LOGGER_HANDLER_POLICY': 'always', 'SERVER_NAME': None, 'APPLICATION_ROOT': None, 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'SESSION_REFRESH_EACH_REQUEST': True, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': timedelta(hours=12), 'TRAP_BAD_REQUEST_ERRORS': False, 'TRAP_HTTP_EXCEPTIONS': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'JSONIFY_PRETTYPRINT_REGULAR': True, 'JSONIFY_MIMETYPE': 'application/json', 'TEMPLATES_AUTO_RELOAD': None})
A:flask.app.session_interface->SecureCookieSessionInterface()
A:flask.app.instance_path->self.auto_find_instance_path()
A:flask.app.self.config->self.make_config(instance_relative_config)
A:flask.app.self.url_map->Map()
A:flask.app.self._before_request_lock->Lock()
A:flask.app.self.cli->cli.AppGroup(self.name)
A:flask.app.error_handlers->property(_get_error_handlers, _set_error_handlers)
A:flask.app.fn->getattr(sys.modules['__main__'], '__file__', None)
A:flask.app.self._loggerrv->create_logger(self)
A:flask.app.(prefix, package_path)->find_package(self.import_name)
A:flask.app.options->dict(self.jinja_options)
A:flask.app.rv->func()
A:flask.app.funcs->chain(funcs, reversed(self.teardown_request_funcs[bp]))
A:flask.app.orig_ctx->context.copy()
A:flask.app.port->int(server_name.rsplit(':', 1)[1])
A:flask.app.self.debug->bool(debug)
A:flask.app.endpoint->dict(self.jinja_options).pop('endpoint', None)
A:flask.app.methods->adapter.allowed_methods()
A:flask.app.required_methods->set(getattr(view_func, 'required_methods', ()))
A:flask.app.provide_automatic_options->getattr(view_func, 'provide_automatic_options', None)
A:flask.app.rule->self.url_rule_class(rule, methods=methods, **options)
A:flask.app.old_func->self.view_functions.get(endpoint)
A:flask.app.(exc_class, code)->self._get_exc_class_and_code(type(e))
A:flask.app.handlers->self.error_handler_spec.setdefault(key, {}).setdefault(code, {})
A:flask.app.handler->self._find_error_handler(InternalServerError())
A:flask.app.(exc_type, exc_value, tb)->sys.exc_info()
A:flask.app.response->self.handle_exception(e)
A:flask.app.builder->make_test_environ_builder(self, *args, **kwargs)
A:flask.app.ctx->self.request_context(environ)
flask.Flask(self,import_name,static_path=None,static_url_path=None,static_folder='static',template_folder='templates',instance_path=None,instance_relative_config=False,root_path=None)
flask.Flask.__repr__(self)
flask.Flask._find_error_handler(self,e)
flask.Flask._get_error_handlers(self)
flask.Flask._get_exc_class_and_code(exc_class_or_code)
flask.Flask._get_request_globals_class(self)
flask.Flask._register_error_handler(self,key,code_or_exception,f)
flask.Flask._set_error_handlers(self,value)
flask.Flask._set_request_globals_class(self,value)
flask.Flask.add_template_filter(self,f,name=None)
flask.Flask.add_template_global(self,f,name=None)
flask.Flask.add_template_test(self,f,name=None)
flask.Flask.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.Flask.after_request(self,f)
flask.Flask.app_context(self)
flask.Flask.auto_find_instance_path(self)
flask.Flask.before_first_request(self,f)
flask.Flask.before_request(self,f)
flask.Flask.context_processor(self,f)
flask.Flask.create_global_jinja_loader(self)
flask.Flask.create_jinja_environment(self)
flask.Flask.create_url_adapter(self,request)
flask.Flask.dispatch_request(self)
flask.Flask.do_teardown_appcontext(self,exc=_sentinel)
flask.Flask.do_teardown_request(self,exc=_sentinel)
flask.Flask.endpoint(self,endpoint)
flask.Flask.errorhandler(self,code_or_exception)
flask.Flask.finalize_request(self,rv,from_error_handler=False)
flask.Flask.full_dispatch_request(self)
flask.Flask.got_first_request(self)
flask.Flask.handle_exception(self,e)
flask.Flask.handle_http_exception(self,e)
flask.Flask.handle_url_build_error(self,error,endpoint,values)
flask.Flask.handle_user_exception(self,e)
flask.Flask.init_jinja_globals(self)
flask.Flask.inject_url_defaults(self,endpoint,values)
flask.Flask.iter_blueprints(self)
flask.Flask.jinja_env(self)
flask.Flask.log_exception(self,exc_info)
flask.Flask.logger(self)
flask.Flask.make_config(self,instance_relative=False)
flask.Flask.make_default_options_response(self)
flask.Flask.make_null_session(self)
flask.Flask.make_response(self,rv)
flask.Flask.make_shell_context(self)
flask.Flask.name(self)
flask.Flask.open_instance_resource(self,resource,mode='rb')
flask.Flask.open_session(self,request)
flask.Flask.preprocess_request(self)
flask.Flask.preserve_context_on_exception(self)
flask.Flask.process_response(self,response)
flask.Flask.propagate_exceptions(self)
flask.Flask.raise_routing_exception(self,request)
flask.Flask.register_blueprint(self,blueprint,**options)
flask.Flask.register_error_handler(self,code_or_exception,f)
flask.Flask.request_context(self,environ)
flask.Flask.route(self,rule,**options)
flask.Flask.run(self,host=None,port=None,debug=None,**options)
flask.Flask.save_session(self,session,response)
flask.Flask.select_jinja_autoescape(self,filename)
flask.Flask.shell_context_processor(self,f)
flask.Flask.should_ignore_error(self,error)
flask.Flask.teardown_appcontext(self,f)
flask.Flask.teardown_request(self,f)
flask.Flask.template_filter(self,name=None)
flask.Flask.template_global(self,name=None)
flask.Flask.template_test(self,name=None)
flask.Flask.test_client(self,use_cookies=True,**kwargs)
flask.Flask.test_request_context(self,*args,**kwargs)
flask.Flask.trap_http_exception(self,e)
flask.Flask.try_trigger_before_first_request_functions(self)
flask.Flask.update_template_context(self,context)
flask.Flask.url_defaults(self,f)
flask.Flask.url_value_preprocessor(self,f)
flask.Flask.wsgi_app(self,environ,start_response)
flask.app.Flask(self,import_name,static_path=None,static_url_path=None,static_folder='static',template_folder='templates',instance_path=None,instance_relative_config=False,root_path=None)
flask.app.Flask.__init__(self,import_name,static_path=None,static_url_path=None,static_folder='static',template_folder='templates',instance_path=None,instance_relative_config=False,root_path=None)
flask.app.Flask.__repr__(self)
flask.app.Flask._find_error_handler(self,e)
flask.app.Flask._get_error_handlers(self)
flask.app.Flask._get_exc_class_and_code(exc_class_or_code)
flask.app.Flask._get_request_globals_class(self)
flask.app.Flask._register_error_handler(self,key,code_or_exception,f)
flask.app.Flask._set_error_handlers(self,value)
flask.app.Flask._set_request_globals_class(self,value)
flask.app.Flask.add_template_filter(self,f,name=None)
flask.app.Flask.add_template_global(self,f,name=None)
flask.app.Flask.add_template_test(self,f,name=None)
flask.app.Flask.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.app.Flask.after_request(self,f)
flask.app.Flask.app_context(self)
flask.app.Flask.auto_find_instance_path(self)
flask.app.Flask.before_first_request(self,f)
flask.app.Flask.before_request(self,f)
flask.app.Flask.context_processor(self,f)
flask.app.Flask.create_global_jinja_loader(self)
flask.app.Flask.create_jinja_environment(self)
flask.app.Flask.create_url_adapter(self,request)
flask.app.Flask.dispatch_request(self)
flask.app.Flask.do_teardown_appcontext(self,exc=_sentinel)
flask.app.Flask.do_teardown_request(self,exc=_sentinel)
flask.app.Flask.endpoint(self,endpoint)
flask.app.Flask.errorhandler(self,code_or_exception)
flask.app.Flask.finalize_request(self,rv,from_error_handler=False)
flask.app.Flask.full_dispatch_request(self)
flask.app.Flask.got_first_request(self)
flask.app.Flask.handle_exception(self,e)
flask.app.Flask.handle_http_exception(self,e)
flask.app.Flask.handle_url_build_error(self,error,endpoint,values)
flask.app.Flask.handle_user_exception(self,e)
flask.app.Flask.init_jinja_globals(self)
flask.app.Flask.inject_url_defaults(self,endpoint,values)
flask.app.Flask.iter_blueprints(self)
flask.app.Flask.jinja_env(self)
flask.app.Flask.log_exception(self,exc_info)
flask.app.Flask.logger(self)
flask.app.Flask.make_config(self,instance_relative=False)
flask.app.Flask.make_default_options_response(self)
flask.app.Flask.make_null_session(self)
flask.app.Flask.make_response(self,rv)
flask.app.Flask.make_shell_context(self)
flask.app.Flask.name(self)
flask.app.Flask.open_instance_resource(self,resource,mode='rb')
flask.app.Flask.open_session(self,request)
flask.app.Flask.preprocess_request(self)
flask.app.Flask.preserve_context_on_exception(self)
flask.app.Flask.process_response(self,response)
flask.app.Flask.propagate_exceptions(self)
flask.app.Flask.raise_routing_exception(self,request)
flask.app.Flask.register_blueprint(self,blueprint,**options)
flask.app.Flask.register_error_handler(self,code_or_exception,f)
flask.app.Flask.request_context(self,environ)
flask.app.Flask.route(self,rule,**options)
flask.app.Flask.run(self,host=None,port=None,debug=None,**options)
flask.app.Flask.save_session(self,session,response)
flask.app.Flask.select_jinja_autoescape(self,filename)
flask.app.Flask.shell_context_processor(self,f)
flask.app.Flask.should_ignore_error(self,error)
flask.app.Flask.teardown_appcontext(self,f)
flask.app.Flask.teardown_request(self,f)
flask.app.Flask.template_filter(self,name=None)
flask.app.Flask.template_global(self,name=None)
flask.app.Flask.template_test(self,name=None)
flask.app.Flask.test_client(self,use_cookies=True,**kwargs)
flask.app.Flask.test_request_context(self,*args,**kwargs)
flask.app.Flask.trap_http_exception(self,e)
flask.app.Flask.try_trigger_before_first_request_functions(self)
flask.app.Flask.update_template_context(self,context)
flask.app.Flask.url_defaults(self,f)
flask.app.Flask.url_value_preprocessor(self,f)
flask.app.Flask.wsgi_app(self,environ,start_response)
flask.app._make_timedelta(value)
flask.app.setupmethod(f)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/sessions.py----------------------------------------
A:flask.sessions.self['_permanent']->bool(value)
A:flask.sessions.permanent->property(_get_permanent, _set_permanent)
A:flask.sessions.(the_key, the_value)->next(iteritems(obj))
A:flask.sessions.return_function->self.LOADS_MAP.get(the_key)
A:flask.sessions.session_json_serializer->TaggedJSONSerializer()
A:flask.sessions.path->self.get_cookie_path(app)
A:flask.sessions.rv->rv.lstrip('.').lstrip('.')
A:flask.sessions.digest_method->staticmethod(hashlib.sha1)
A:flask.sessions.signer_kwargs->dict(key_derivation=self.key_derivation, digest_method=self.digest_method)
A:flask.sessions.s->self.get_signing_serializer(app)
A:flask.sessions.val->self.get_signing_serializer(app).dumps(dict(session))
A:flask.sessions.max_age->total_seconds(app.permanent_session_lifetime)
A:flask.sessions.data->self.get_signing_serializer(app).loads(val, max_age=max_age)
A:flask.sessions.domain->self.get_cookie_domain(app)
A:flask.sessions.httponly->self.get_cookie_httponly(app)
A:flask.sessions.secure->self.get_cookie_secure(app)
A:flask.sessions.expires->self.get_expiration_time(app, session)
flask.Session(self,initial=None)
flask.SessionInterface(SessionInterface)
flask.SessionInterface.get_signing_serializer(self,app)
flask.SessionInterface.open_session(self,app,request)
flask.SessionInterface.save_session(self,app,session,response)
flask.sessions.NullSession(SecureCookieSession)
flask.sessions.NullSession._fail(self,*args,**kwargs)
flask.sessions.SecureCookieSession(self,initial=None)
flask.sessions.SecureCookieSession.__init__(self,initial=None)
flask.sessions.SecureCookieSessionInterface(SessionInterface)
flask.sessions.SecureCookieSessionInterface.get_signing_serializer(self,app)
flask.sessions.SecureCookieSessionInterface.open_session(self,app,request)
flask.sessions.SecureCookieSessionInterface.save_session(self,app,session,response)
flask.sessions.SessionInterface(object)
flask.sessions.SessionInterface.get_cookie_domain(self,app)
flask.sessions.SessionInterface.get_cookie_httponly(self,app)
flask.sessions.SessionInterface.get_cookie_path(self,app)
flask.sessions.SessionInterface.get_cookie_secure(self,app)
flask.sessions.SessionInterface.get_expiration_time(self,app,session)
flask.sessions.SessionInterface.is_null_session(self,obj)
flask.sessions.SessionInterface.make_null_session(self,app)
flask.sessions.SessionInterface.open_session(self,app,request)
flask.sessions.SessionInterface.save_session(self,app,session,response)
flask.sessions.SessionInterface.should_set_cookie(self,app,session)
flask.sessions.SessionMixin(object)
flask.sessions.SessionMixin._get_permanent(self)
flask.sessions.SessionMixin._set_permanent(self,value)
flask.sessions.TaggedJSONSerializer(object)
flask.sessions.TaggedJSONSerializer.dumps(self,value)
flask.sessions.TaggedJSONSerializer.loads(self,value)
flask.sessions._tag(value)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/ctx.py----------------------------------------
A:flask.ctx._sentinel->object()
A:flask.ctx.reqctx->top.copy()
A:flask.ctx.self.url_adapter->app.create_url_adapter(self.request)
A:flask.ctx.self.g->app.app_ctx_globals_class()
A:flask.ctx.rv->globals._request_ctx_stack.pop()
A:flask.ctx.request->app.request_class(environ)
A:flask.ctx.g->property(_get_g, _set_g)
A:flask.ctx.(url_rule, self.request.view_args)->self.url_adapter.match(return_rule=True)
A:flask.ctx.app_ctx->self._implicit_app_ctx_stack.pop()
A:flask.ctx.self.session->self.app.make_null_session()
A:flask.ctx.request_close->getattr(self.request, 'close', None)
flask.after_this_request(f)
flask.copy_current_request_context(f)
flask.ctx.AppContext(self,app)
flask.ctx.AppContext.__enter__(self)
flask.ctx.AppContext.__exit__(self,exc_type,exc_value,tb)
flask.ctx.AppContext.__init__(self,app)
flask.ctx.AppContext.pop(self,exc=_sentinel)
flask.ctx.AppContext.push(self)
flask.ctx.RequestContext(self,app,environ,request=None)
flask.ctx.RequestContext.__enter__(self)
flask.ctx.RequestContext.__exit__(self,exc_type,exc_value,tb)
flask.ctx.RequestContext.__init__(self,app,environ,request=None)
flask.ctx.RequestContext.__repr__(self)
flask.ctx.RequestContext._get_g(self)
flask.ctx.RequestContext._set_g(self,value)
flask.ctx.RequestContext.auto_pop(self,exc)
flask.ctx.RequestContext.copy(self)
flask.ctx.RequestContext.match_request(self)
flask.ctx.RequestContext.pop(self,exc=_sentinel)
flask.ctx.RequestContext.push(self)
flask.ctx._AppCtxGlobals(object)
flask.ctx._AppCtxGlobals.__contains__(self,item)
flask.ctx._AppCtxGlobals.__iter__(self)
flask.ctx._AppCtxGlobals.__repr__(self)
flask.ctx._AppCtxGlobals.get(self,name,default=None)
flask.ctx._AppCtxGlobals.pop(self,name,default=_sentinel)
flask.ctx._AppCtxGlobals.setdefault(self,name,default=None)
flask.ctx.after_this_request(f)
flask.ctx.copy_current_request_context(f)
flask.ctx.has_app_context()
flask.ctx.has_request_context()
flask.has_app_context()
flask.has_request_context()


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/testing.py----------------------------------------
A:flask.testing.http_host->app.config.get('SERVER_NAME')
A:flask.testing.app_root->app.config.get('APPLICATION_ROOT')
A:flask.testing.url->url_parse(path)
A:flask.testing.environ_overrides->kwargs.setdefault('environ_overrides', {})
A:flask.testing.sess->app.open_session(c.request)
A:flask.testing.resp->app.response_class()
A:flask.testing.headers->app.response_class().get_wsgi_headers(c.request.environ)
A:flask.testing.as_tuple->kwargs.pop('as_tuple', False)
A:flask.testing.buffered->kwargs.pop('buffered', False)
A:flask.testing.follow_redirects->kwargs.pop('follow_redirects', False)
A:flask.testing.builder->make_test_environ_builder(self.application, *args, **kwargs)
flask.testing.FlaskClient(self,*args,**kwargs)
flask.testing.FlaskClient.__enter__(self)
flask.testing.FlaskClient.__exit__(self,exc_type,exc_value,tb)
flask.testing.FlaskClient.__init__(self,*args,**kwargs)
flask.testing.FlaskClient.open(self,*args,**kwargs)
flask.testing.FlaskClient.session_transaction(self,*args,**kwargs)
flask.testing.make_test_environ_builder(app,path='/',base_url=None,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/_compat.py----------------------------------------
flask._compat.with_metaclass(meta,*bases)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/debughelpers.py----------------------------------------
A:flask.debughelpers.form_matches->request.form.getlist(key)
A:flask.debughelpers.self.msg->''.join(buf)
A:flask.debughelpers.src_info->repr(srcobj)
flask.debughelpers.DebugFilesKeyError(self,request,key)
flask.debughelpers.DebugFilesKeyError.__init__(self,request,key)
flask.debughelpers.DebugFilesKeyError.__str__(self)
flask.debughelpers.FormDataRoutingRedirect(self,request)
flask.debughelpers.FormDataRoutingRedirect.__init__(self,request)
flask.debughelpers.UnexpectedUnicodeError(AssertionError,UnicodeError)
flask.debughelpers._dump_loader_info(loader)
flask.debughelpers.attach_enctype_error_multidict(request)
flask.debughelpers.explain_template_loading_attempts(app,template,attempts)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/logging.py----------------------------------------
A:flask.logging.Logger->getLoggerClass()
A:flask.logging.debug_handler->DebugHandler()
A:flask.logging.prod_handler->ProductionHandler(_proxy_stream)
A:flask.logging.logger->getLogger(app.logger_name)
flask.logging._proxy_stream()
flask.logging._should_log_for(app,mode)
flask.logging.create_logger(app)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/config.py----------------------------------------
A:flask.config.rv->os.environ.get(variable_name)
A:flask.config.filename->os.path.join(self.root_path, filename)
A:flask.config.d->types.ModuleType('config')
A:flask.config.obj->json.loads(json_file.read())
A:flask.config.self[key]->getattr(obj, key)
A:flask.config.key->key.lower().lower()
flask.Config(self,root_path,defaults=None)
flask.Config.__repr__(self)
flask.Config.from_envvar(self,variable_name,silent=False)
flask.Config.from_json(self,filename,silent=False)
flask.Config.from_mapping(self,*mapping,**kwargs)
flask.Config.from_object(self,obj)
flask.Config.from_pyfile(self,filename,silent=False)
flask.Config.get_namespace(self,namespace,lowercase=True,trim_namespace=True)
flask.ConfigAttribute(self,name,get_converter=None)
flask.ConfigAttribute.__get__(self,obj,type=None)
flask.ConfigAttribute.__set__(self,obj,value)
flask.config.Config(self,root_path,defaults=None)
flask.config.Config.__init__(self,root_path,defaults=None)
flask.config.Config.__repr__(self)
flask.config.Config.from_envvar(self,variable_name,silent=False)
flask.config.Config.from_json(self,filename,silent=False)
flask.config.Config.from_mapping(self,*mapping,**kwargs)
flask.config.Config.from_object(self,obj)
flask.config.Config.from_pyfile(self,filename,silent=False)
flask.config.Config.get_namespace(self,namespace,lowercase=True,trim_namespace=True)
flask.config.ConfigAttribute(self,name,get_converter=None)
flask.config.ConfigAttribute.__get__(self,obj,type=None)
flask.config.ConfigAttribute.__init__(self,name,get_converter=None)
flask.config.ConfigAttribute.__set__(self,obj,value)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/views.py----------------------------------------
A:flask.views.http_method_funcs->frozenset(['get', 'post', 'head', 'options', 'delete', 'put', 'trace', 'patch'])
A:flask.views.self->decorator(view).view_class(*class_args, **class_kwargs)
A:flask.views.view->decorator(view)
A:flask.views.rv->type.__new__(cls, name, bases, d)
A:flask.views.methods->set(rv.methods or [])
A:flask.views.rv.methods->sorted(methods)
A:flask.views.meth->getattr(self, 'get', None)
flask.views.MethodView(with_metaclass(MethodViewType,View))
flask.views.MethodView.dispatch_request(self,*args,**kwargs)
flask.views.MethodViewType(cls,name,bases,d)
flask.views.MethodViewType.__new__(cls,name,bases,d)
flask.views.View(object)
flask.views.View.as_view(cls,name,*class_args,**class_kwargs)
flask.views.View.dispatch_request(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/json.py----------------------------------------
A:flask.json.fp->_wrap_reader_for_text(fp, kwargs.pop('encoding', None) or 'utf-8')
A:flask.json.encoding->detect_encoding(s)
A:flask.json.rv->rv.replace('\\/', '/').replace('\\/', '/')
A:flask.json.s->s.decode(encoding).decode(encoding)
flask.json.JSONDecoder(_json.JSONDecoder)
flask.json.JSONEncoder(_json.JSONEncoder)
flask.json.JSONEncoder.default(self,o)
flask.json._dump_arg_defaults(kwargs)
flask.json._load_arg_defaults(kwargs)
flask.json._wrap_reader_for_text(fp,encoding)
flask.json._wrap_writer_for_text(fp,encoding)
flask.json.detect_encoding(data)
flask.json.dump(obj,fp,**kwargs)
flask.json.dumps(obj,**kwargs)
flask.json.htmlsafe_dump(obj,fp,**kwargs)
flask.json.htmlsafe_dumps(obj,**kwargs)
flask.json.jsonify(*args,**kwargs)
flask.json.load(fp,**kwargs)
flask.json.loads(s,**kwargs)
flask.json.tojson_filter(obj,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/wrappers.py----------------------------------------
A:flask.wrappers._missing->object()
A:flask.wrappers.getter->getattr(req, 'get_data', None)
A:flask.wrappers.rv->self.on_json_loading_failed(e)
A:flask.wrappers.data->_get_data(self, cache)
flask.wrappers.Request(RequestBase)
flask.wrappers.Request._load_form_data(self)
flask.wrappers.Request.blueprint(self)
flask.wrappers.Request.endpoint(self)
flask.wrappers.Request.get_json(self,force=False,silent=False,cache=True)
flask.wrappers.Request.is_json(self)
flask.wrappers.Request.json(self)
flask.wrappers.Request.max_content_length(self)
flask.wrappers.Request.module(self)
flask.wrappers.Request.on_json_loading_failed(self,e)
flask.wrappers.Response(ResponseBase)
flask.wrappers._get_data(req,cache)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/signals.py----------------------------------------
A:flask.signals._signals->Namespace()
A:flask.signals.template_rendered->Namespace().signal('template-rendered')
A:flask.signals.before_render_template->Namespace().signal('before-render-template')
A:flask.signals.request_started->Namespace().signal('request-started')
A:flask.signals.request_finished->Namespace().signal('request-finished')
A:flask.signals.request_tearing_down->Namespace().signal('request-tearing-down')
A:flask.signals.got_request_exception->Namespace().signal('got-request-exception')
A:flask.signals.appcontext_tearing_down->Namespace().signal('appcontext-tearing-down')
A:flask.signals.appcontext_pushed->Namespace().signal('appcontext-pushed')
A:flask.signals.appcontext_popped->Namespace().signal('appcontext-popped')
A:flask.signals.message_flashed->Namespace().signal('message-flashed')


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/globals.py----------------------------------------
A:flask.globals._request_ctx_stack->LocalStack()
A:flask.globals._app_ctx_stack->LocalStack()
A:flask.globals.current_app->LocalProxy(_find_app)
A:flask.globals.request->LocalProxy(partial(_lookup_req_object, 'request'))
A:flask.globals.session->LocalProxy(partial(_lookup_req_object, 'session'))
A:flask.globals.g->LocalProxy(partial(_lookup_app_object, 'g'))
flask.globals._find_app()
flask.globals._lookup_app_object(name)
flask.globals._lookup_req_object(name)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/cli.py----------------------------------------
A:flask.cli.app->DispatchingApp(info.load_app, use_eager_loading=eager_loading)
A:flask.cli.filename->os.path.realpath(filename)
A:flask.cli.(dirpath, extra)->os.path.split(dirpath)
A:flask.cli.(module, app_obj)->app_id.split(':', 1)
A:flask.cli.version_option->click.Option(['--version'], help='Show the flask version', expose_value=False, callback=get_version, is_flag=True, is_eager=True)
A:flask.cli.self._lock->Lock()
A:flask.cli.self._bg_loading_exc_info->sys.exc_info()
A:flask.cli.t->Thread(target=_load_app, args=())
A:flask.cli.self._apprv->self.loader()
A:flask.cli.rv->set(click.Group.list_commands(self, ctx))
A:flask.cli.app_import_path->find_default_import_path()
A:flask.cli.debug->get_debug_flag()
A:flask.cli.pass_script_info->click.make_pass_decorator(ScriptInfo, ensure=True)
A:flask.cli.wrap_for_ctx->kwargs.pop('with_appcontext', True)
A:flask.cli.f->with_appcontext(f)
A:flask.cli.params->list(extra.pop('params', None) or ())
A:flask.cli.info->ctx.ensure_object(ScriptInfo)
A:flask.cli.obj->ScriptInfo(create_app=self.create_app)
A:flask.cli.reload->bool(debug)
A:flask.cli.debugger->bool(debug)
A:flask.cli.startup->os.environ.get('PYTHONSTARTUP')
A:flask.cli.cli->FlaskGroup(help='This shell command acts as general utility script for Flask applications.\n\nIt loads the application configured (through the FLASK_APP environment\nvariable) and then provides commands either provided by the application or\nFlask itself.\n\nThe most useful commands are the "run" and "shell" command.\n\nExample usage:\n\n\x08\n  %(prefix)s%(cmd)s FLASK_APP=hello.py\n  %(prefix)s%(cmd)s FLASK_DEBUG=1\n  %(prefix)sflask run\n' % {'cmd': os.name == 'posix' and 'export' or 'set', 'prefix': os.name == 'posix' and '$ ' or ''})
flask.cli.AppGroup(click.Group)
flask.cli.AppGroup.command(self,*args,**kwargs)
flask.cli.AppGroup.group(self,*args,**kwargs)
flask.cli.DispatchingApp(self,loader,use_eager_loading=False)
flask.cli.DispatchingApp.__init__(self,loader,use_eager_loading=False)
flask.cli.DispatchingApp._flush_bg_loading_exception(self)
flask.cli.DispatchingApp._load_in_background(self)
flask.cli.DispatchingApp._load_unlocked(self)
flask.cli.FlaskGroup(self,add_default_commands=True,create_app=None,add_version_option=True,**extra)
flask.cli.FlaskGroup.__init__(self,add_default_commands=True,create_app=None,add_version_option=True,**extra)
flask.cli.FlaskGroup._load_plugin_commands(self)
flask.cli.FlaskGroup.get_command(self,ctx,name)
flask.cli.FlaskGroup.list_commands(self,ctx)
flask.cli.FlaskGroup.main(self,*args,**kwargs)
flask.cli.NoAppException(click.UsageError)
flask.cli.ScriptInfo(self,app_import_path=None,create_app=None)
flask.cli.ScriptInfo.__init__(self,app_import_path=None,create_app=None)
flask.cli.ScriptInfo.load_app(self)
flask.cli.find_best_app(module)
flask.cli.find_default_import_path()
flask.cli.get_version(ctx,param,value)
flask.cli.locate_app(app_id)
flask.cli.main(as_module=False)
flask.cli.prepare_exec_for_file(filename)
flask.cli.run_command(info,host,port,reload,debugger,eager_loading,with_threads)
flask.cli.shell_command()
flask.cli.with_appcontext(f)


----------------------------------------/dataset/nuaa/anaconda3/envs/flask0.12.5/lib/python3.9/site-packages/flask/ext/__init__.py----------------------------------------
A:flask.ext.__init__.importer->ExtensionImporter(['flask_%s', 'flaskext.%s'], __name__)
flask.ext.__init__.setup()

