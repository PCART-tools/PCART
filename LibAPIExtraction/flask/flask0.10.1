
----------------------------------------/home/zhang/Packages/flask/flask0.10.1/sessions.py----------------------------------------
A:flask.sessions.self['_permanent']->bool(value)
A:flask.sessions.permanent->property(_get_permanent, _set_permanent)
A:flask.sessions.(the_key, the_value)->next(iteritems(obj))
A:flask.sessions.session_json_serializer->TaggedJSONSerializer()
A:flask.sessions.path->self.get_cookie_path(app)
A:flask.sessions.rv->rv.lstrip('.').lstrip('.')
A:flask.sessions.digest_method->staticmethod(hashlib.sha1)
A:flask.sessions.signer_kwargs->dict(key_derivation=self.key_derivation, digest_method=self.digest_method)
A:flask.sessions.s->self.get_signing_serializer(app)
A:flask.sessions.val->self.get_signing_serializer(app).dumps(dict(session))
A:flask.sessions.max_age->total_seconds(app.permanent_session_lifetime)
A:flask.sessions.data->self.get_signing_serializer(app).loads(val, max_age=max_age)
A:flask.sessions.domain->self.get_cookie_domain(app)
A:flask.sessions.httponly->self.get_cookie_httponly(app)
A:flask.sessions.secure->self.get_cookie_secure(app)
A:flask.sessions.expires->self.get_expiration_time(app, session)
flask.Session(self,initial=None)
flask.SessionInterface(SessionInterface)
flask.SessionInterface.get_signing_serializer(self,app)
flask.SessionInterface.open_session(self,app,request)
flask.SessionInterface.save_session(self,app,session,response)
flask.sessions.NullSession(SecureCookieSession)
flask.sessions.NullSession._fail(self,*args,**kwargs)
flask.sessions.SecureCookieSession(self,initial=None)
flask.sessions.SecureCookieSession.__init__(self,initial=None)
flask.sessions.SecureCookieSessionInterface(SessionInterface)
flask.sessions.SecureCookieSessionInterface.get_signing_serializer(self,app)
flask.sessions.SecureCookieSessionInterface.open_session(self,app,request)
flask.sessions.SecureCookieSessionInterface.save_session(self,app,session,response)
flask.sessions.SessionInterface(object)
flask.sessions.SessionInterface.get_cookie_domain(self,app)
flask.sessions.SessionInterface.get_cookie_httponly(self,app)
flask.sessions.SessionInterface.get_cookie_path(self,app)
flask.sessions.SessionInterface.get_cookie_secure(self,app)
flask.sessions.SessionInterface.get_expiration_time(self,app,session)
flask.sessions.SessionInterface.is_null_session(self,obj)
flask.sessions.SessionInterface.make_null_session(self,app)
flask.sessions.SessionInterface.open_session(self,app,request)
flask.sessions.SessionInterface.save_session(self,app,session,response)
flask.sessions.SessionMixin(object)
flask.sessions.SessionMixin._get_permanent(self)
flask.sessions.SessionMixin._set_permanent(self,value)
flask.sessions.TaggedJSONSerializer(object)
flask.sessions.TaggedJSONSerializer.dumps(self,value)
flask.sessions.TaggedJSONSerializer.loads(self,value)
flask.sessions.total_seconds(td)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/globals.py----------------------------------------
A:flask.globals._request_ctx_stack->LocalStack()
A:flask.globals._app_ctx_stack->LocalStack()
A:flask.globals.current_app->LocalProxy(_find_app)
A:flask.globals.request->LocalProxy(partial(_lookup_req_object, 'request'))
A:flask.globals.session->LocalProxy(partial(_lookup_req_object, 'session'))
A:flask.globals.g->LocalProxy(partial(_lookup_app_object, 'g'))
flask.globals._find_app()
flask.globals._lookup_app_object(name)
flask.globals._lookup_req_object(name)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/ctx.py----------------------------------------
A:flask.ctx.reqctx->top.copy()
A:flask.ctx.self.url_adapter->app.create_url_adapter(self.request)
A:flask.ctx.self.g->app.app_ctx_globals_class()
A:flask.ctx.rv->globals._request_ctx_stack.pop()
A:flask.ctx.request->app.request_class(environ)
A:flask.ctx.bp->app.blueprints.get(blueprint)
A:flask.ctx.g->property(_get_g, _set_g)
A:flask.ctx.(url_rule, self.request.view_args)->self.url_adapter.match(return_rule=True)
A:flask.ctx.app_ctx->self._implicit_app_ctx_stack.pop()
A:flask.ctx.self.session->self.app.make_null_session()
A:flask.ctx.request_close->getattr(self.request, 'close', None)
flask.after_this_request(f)
flask.copy_current_request_context(f)
flask.ctx.AppContext(self,app)
flask.ctx.AppContext.__enter__(self)
flask.ctx.AppContext.__exit__(self,exc_type,exc_value,tb)
flask.ctx.AppContext.__init__(self,app)
flask.ctx.AppContext.pop(self,exc=None)
flask.ctx.AppContext.push(self)
flask.ctx.RequestContext(self,app,environ,request=None)
flask.ctx.RequestContext.__enter__(self)
flask.ctx.RequestContext.__exit__(self,exc_type,exc_value,tb)
flask.ctx.RequestContext.__init__(self,app,environ,request=None)
flask.ctx.RequestContext.__repr__(self)
flask.ctx.RequestContext._get_g(self)
flask.ctx.RequestContext._set_g(self,value)
flask.ctx.RequestContext.auto_pop(self,exc)
flask.ctx.RequestContext.copy(self)
flask.ctx.RequestContext.match_request(self)
flask.ctx.RequestContext.pop(self,exc=None)
flask.ctx.RequestContext.push(self)
flask.ctx._AppCtxGlobals(object)
flask.ctx._AppCtxGlobals.__contains__(self,item)
flask.ctx._AppCtxGlobals.__iter__(self)
flask.ctx._AppCtxGlobals.__repr__(self)
flask.ctx._AppCtxGlobals.get(self,name,default=None)
flask.ctx.after_this_request(f)
flask.ctx.copy_current_request_context(f)
flask.ctx.has_app_context()
flask.ctx.has_request_context()
flask.has_app_context()
flask.has_request_context()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testing.py----------------------------------------
A:flask.testing.http_host->app.config.get('SERVER_NAME')
A:flask.testing.app_root->app.config.get('APPLICATION_ROOT')
A:flask.testing.url->url_parse(path)
A:flask.testing.environ_overrides->kwargs.setdefault('environ_overrides', {})
A:flask.testing.sess->app.open_session(c.request)
A:flask.testing.resp->app.response_class()
A:flask.testing.headers->app.response_class().get_wsgi_headers(c.request.environ)
A:flask.testing.as_tuple->kwargs.pop('as_tuple', False)
A:flask.testing.buffered->kwargs.pop('buffered', False)
A:flask.testing.follow_redirects->kwargs.pop('follow_redirects', False)
A:flask.testing.builder->make_test_environ_builder(self.application, *args, **kwargs)
flask.testing.FlaskClient(Client)
flask.testing.FlaskClient.__enter__(self)
flask.testing.FlaskClient.__exit__(self,exc_type,exc_value,tb)
flask.testing.FlaskClient.open(self,*args,**kwargs)
flask.testing.FlaskClient.session_transaction(self,*args,**kwargs)
flask.testing.make_test_environ_builder(app,path='/',base_url=None,*args,**kwargs)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/module.py----------------------------------------
flask.Module(self,import_name,name=None,url_prefix=None,static_path=None,subdomain=None)
flask.module.Module(self,import_name,name=None,url_prefix=None,static_path=None,subdomain=None)
flask.module.Module.__init__(self,import_name,name=None,url_prefix=None,static_path=None,subdomain=None)
flask.module.blueprint_is_module(bp)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/exthook.py----------------------------------------
A:flask.exthook.(exc_type, exc_value, tb)->sys.exc_info()
A:flask.exthook.filename->os.path.abspath(tb.tb_frame.f_code.co_filename)
flask.exthook.ExtensionImporter(self,module_choices,wrapper_module)
flask.exthook.ExtensionImporter.__eq__(self,other)
flask.exthook.ExtensionImporter.__init__(self,module_choices,wrapper_module)
flask.exthook.ExtensionImporter.__ne__(self,other)
flask.exthook.ExtensionImporter.find_module(self,fullname,path=None)
flask.exthook.ExtensionImporter.install(self)
flask.exthook.ExtensionImporter.is_important_frame(self,important_module,tb)
flask.exthook.ExtensionImporter.is_important_traceback(self,important_module,tb)
flask.exthook.ExtensionImporter.load_module(self,fullname)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/logging.py----------------------------------------
A:flask.logging.Logger->getLoggerClass()
A:flask.logging.handler->DebugHandler()
A:flask.logging.logger->getLogger(app.logger_name)
flask.logging.create_logger(app)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/debughelpers.py----------------------------------------
A:flask.debughelpers.form_matches->request.form.getlist(key)
A:flask.debughelpers.self.msg->''.join(buf)
flask.debughelpers.DebugFilesKeyError(self,request,key)
flask.debughelpers.DebugFilesKeyError.__init__(self,request,key)
flask.debughelpers.DebugFilesKeyError.__str__(self)
flask.debughelpers.FormDataRoutingRedirect(self,request)
flask.debughelpers.FormDataRoutingRedirect.__init__(self,request)
flask.debughelpers.UnexpectedUnicodeError(AssertionError,UnicodeError)
flask.debughelpers.attach_enctype_error_multidict(request)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/app.py----------------------------------------
A:flask.app._logger_lock->Lock()
A:flask.app.request_globals_class->property(_get_request_globals_class, _set_request_globals_class)
A:flask.app.debug->ConfigAttribute('DEBUG')
A:flask.app.testing->ConfigAttribute('TESTING')
A:flask.app.secret_key->ConfigAttribute('SECRET_KEY')
A:flask.app.session_cookie_name->ConfigAttribute('SESSION_COOKIE_NAME')
A:flask.app.permanent_session_lifetime->ConfigAttribute('PERMANENT_SESSION_LIFETIME', get_converter=_make_timedelta)
A:flask.app.use_x_sendfile->ConfigAttribute('USE_X_SENDFILE')
A:flask.app.logger_name->ConfigAttribute('LOGGER_NAME')
A:flask.app.jinja_options->ImmutableDict(extensions=['jinja2.ext.autoescape', 'jinja2.ext.with_'])
A:flask.app.default_config->ImmutableDict({'DEBUG': False, 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': None, 'PERMANENT_SESSION_LIFETIME': timedelta(days=31), 'USE_X_SENDFILE': False, 'LOGGER_NAME': None, 'SERVER_NAME': None, 'APPLICATION_ROOT': None, 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': 12 * 60 * 60, 'TRAP_BAD_REQUEST_ERRORS': False, 'TRAP_HTTP_EXCEPTIONS': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'JSONIFY_PRETTYPRINT_REGULAR': True})
A:flask.app.session_interface->SecureCookieSessionInterface()
A:flask.app.instance_path->self.auto_find_instance_path()
A:flask.app.self.config->self.make_config(instance_relative_config)
A:flask.app.self.url_map->Map()
A:flask.app.self._before_request_lock->Lock()
A:flask.app.error_handlers->property(_get_error_handlers, _set_error_handlers)
A:flask.app.fn->getattr(sys.modules['__main__'], '__file__', None)
A:flask.app.self._loggerrv->create_logger(self)
A:flask.app.(prefix, package_path)->find_package(self.import_name)
A:flask.app.options->dict(self.jinja_options)
A:flask.app.rv->func(exc)
A:flask.app.funcs->chain(funcs, reversed(self.teardown_request_funcs[bp]))
A:flask.app.orig_ctx->context.copy()
A:flask.app.port->int(server_name.rsplit(':', 1)[1])
A:flask.app.self.debug->bool(debug)
A:flask.app.endpoint->dict(self.jinja_options).pop('endpoint', None)
A:flask.app.methods->adapter.allowed_methods()
A:flask.app.required_methods->set(getattr(view_func, 'required_methods', ()))
A:flask.app.provide_automatic_options->getattr(view_func, 'provide_automatic_options', None)
A:flask.app.rule->self.url_rule_class(rule, methods=methods, **options)
A:flask.app.old_func->self.view_functions.get(endpoint)
A:flask.app.handlers->self.error_handler_spec.get(request.blueprint)
A:flask.app.handler->self.error_handler_spec[None].get(500)
A:flask.app.(exc_type, exc_value, tb)->sys.exc_info()
A:flask.app.blueprint_handlers->self.error_handler_spec.get(request.blueprint).get(None, ())
A:flask.app.app_handlers->self.error_handler_spec[None].get(None, ())
A:flask.app.response->self.make_response(self.handle_exception(e))
A:flask.app.builder->make_test_environ_builder(self, *args, **kwargs)
A:flask.app.ctx->self.request_context(environ)
flask.Flask(self,import_name,static_path=None,static_url_path=None,static_folder='static',template_folder='templates',instance_path=None,instance_relative_config=False)
flask.Flask.__repr__(self)
flask.Flask._get_error_handlers(self)
flask.Flask._get_request_globals_class(self)
flask.Flask._register_error_handler(self,key,code_or_exception,f)
flask.Flask._set_error_handlers(self,value)
flask.Flask._set_request_globals_class(self,value)
flask.Flask.add_template_filter(self,f,name=None)
flask.Flask.add_template_global(self,f,name=None)
flask.Flask.add_template_test(self,f,name=None)
flask.Flask.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.Flask.after_request(self,f)
flask.Flask.app_context(self)
flask.Flask.auto_find_instance_path(self)
flask.Flask.before_first_request(self,f)
flask.Flask.before_request(self,f)
flask.Flask.context_processor(self,f)
flask.Flask.create_global_jinja_loader(self)
flask.Flask.create_jinja_environment(self)
flask.Flask.create_url_adapter(self,request)
flask.Flask.dispatch_request(self)
flask.Flask.do_teardown_appcontext(self,exc=None)
flask.Flask.do_teardown_request(self,exc=None)
flask.Flask.endpoint(self,endpoint)
flask.Flask.errorhandler(self,code_or_exception)
flask.Flask.full_dispatch_request(self)
flask.Flask.got_first_request(self)
flask.Flask.handle_exception(self,e)
flask.Flask.handle_http_exception(self,e)
flask.Flask.handle_url_build_error(self,error,endpoint,values)
flask.Flask.handle_user_exception(self,e)
flask.Flask.init_jinja_globals(self)
flask.Flask.inject_url_defaults(self,endpoint,values)
flask.Flask.jinja_env(self)
flask.Flask.log_exception(self,exc_info)
flask.Flask.logger(self)
flask.Flask.make_config(self,instance_relative=False)
flask.Flask.make_default_options_response(self)
flask.Flask.make_null_session(self)
flask.Flask.make_response(self,rv)
flask.Flask.modules(self)
flask.Flask.name(self)
flask.Flask.open_instance_resource(self,resource,mode='rb')
flask.Flask.open_session(self,request)
flask.Flask.preprocess_request(self)
flask.Flask.preserve_context_on_exception(self)
flask.Flask.process_response(self,response)
flask.Flask.propagate_exceptions(self)
flask.Flask.raise_routing_exception(self,request)
flask.Flask.register_blueprint(self,blueprint,**options)
flask.Flask.register_error_handler(self,code_or_exception,f)
flask.Flask.register_module(self,module,**options)
flask.Flask.request_context(self,environ)
flask.Flask.route(self,rule,**options)
flask.Flask.run(self,host=None,port=None,debug=None,**options)
flask.Flask.save_session(self,session,response)
flask.Flask.select_jinja_autoescape(self,filename)
flask.Flask.should_ignore_error(self,error)
flask.Flask.teardown_appcontext(self,f)
flask.Flask.teardown_request(self,f)
flask.Flask.template_filter(self,name=None)
flask.Flask.template_global(self,name=None)
flask.Flask.template_test(self,name=None)
flask.Flask.test_client(self,use_cookies=True)
flask.Flask.test_request_context(self,*args,**kwargs)
flask.Flask.trap_http_exception(self,e)
flask.Flask.try_trigger_before_first_request_functions(self)
flask.Flask.update_template_context(self,context)
flask.Flask.url_defaults(self,f)
flask.Flask.url_value_preprocessor(self,f)
flask.Flask.wsgi_app(self,environ,start_response)
flask.app.Flask(self,import_name,static_path=None,static_url_path=None,static_folder='static',template_folder='templates',instance_path=None,instance_relative_config=False)
flask.app.Flask.__init__(self,import_name,static_path=None,static_url_path=None,static_folder='static',template_folder='templates',instance_path=None,instance_relative_config=False)
flask.app.Flask.__repr__(self)
flask.app.Flask._get_error_handlers(self)
flask.app.Flask._get_request_globals_class(self)
flask.app.Flask._register_error_handler(self,key,code_or_exception,f)
flask.app.Flask._set_error_handlers(self,value)
flask.app.Flask._set_request_globals_class(self,value)
flask.app.Flask.add_template_filter(self,f,name=None)
flask.app.Flask.add_template_global(self,f,name=None)
flask.app.Flask.add_template_test(self,f,name=None)
flask.app.Flask.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.app.Flask.after_request(self,f)
flask.app.Flask.app_context(self)
flask.app.Flask.auto_find_instance_path(self)
flask.app.Flask.before_first_request(self,f)
flask.app.Flask.before_request(self,f)
flask.app.Flask.context_processor(self,f)
flask.app.Flask.create_global_jinja_loader(self)
flask.app.Flask.create_jinja_environment(self)
flask.app.Flask.create_url_adapter(self,request)
flask.app.Flask.dispatch_request(self)
flask.app.Flask.do_teardown_appcontext(self,exc=None)
flask.app.Flask.do_teardown_request(self,exc=None)
flask.app.Flask.endpoint(self,endpoint)
flask.app.Flask.errorhandler(self,code_or_exception)
flask.app.Flask.full_dispatch_request(self)
flask.app.Flask.got_first_request(self)
flask.app.Flask.handle_exception(self,e)
flask.app.Flask.handle_http_exception(self,e)
flask.app.Flask.handle_url_build_error(self,error,endpoint,values)
flask.app.Flask.handle_user_exception(self,e)
flask.app.Flask.init_jinja_globals(self)
flask.app.Flask.inject_url_defaults(self,endpoint,values)
flask.app.Flask.jinja_env(self)
flask.app.Flask.log_exception(self,exc_info)
flask.app.Flask.logger(self)
flask.app.Flask.make_config(self,instance_relative=False)
flask.app.Flask.make_default_options_response(self)
flask.app.Flask.make_null_session(self)
flask.app.Flask.make_response(self,rv)
flask.app.Flask.modules(self)
flask.app.Flask.name(self)
flask.app.Flask.open_instance_resource(self,resource,mode='rb')
flask.app.Flask.open_session(self,request)
flask.app.Flask.preprocess_request(self)
flask.app.Flask.preserve_context_on_exception(self)
flask.app.Flask.process_response(self,response)
flask.app.Flask.propagate_exceptions(self)
flask.app.Flask.raise_routing_exception(self,request)
flask.app.Flask.register_blueprint(self,blueprint,**options)
flask.app.Flask.register_error_handler(self,code_or_exception,f)
flask.app.Flask.register_module(self,module,**options)
flask.app.Flask.request_context(self,environ)
flask.app.Flask.route(self,rule,**options)
flask.app.Flask.run(self,host=None,port=None,debug=None,**options)
flask.app.Flask.save_session(self,session,response)
flask.app.Flask.select_jinja_autoescape(self,filename)
flask.app.Flask.should_ignore_error(self,error)
flask.app.Flask.teardown_appcontext(self,f)
flask.app.Flask.teardown_request(self,f)
flask.app.Flask.template_filter(self,name=None)
flask.app.Flask.template_global(self,name=None)
flask.app.Flask.template_test(self,name=None)
flask.app.Flask.test_client(self,use_cookies=True)
flask.app.Flask.test_request_context(self,*args,**kwargs)
flask.app.Flask.trap_http_exception(self,e)
flask.app.Flask.try_trigger_before_first_request_functions(self)
flask.app.Flask.update_template_context(self,context)
flask.app.Flask.url_defaults(self,f)
flask.app.Flask.url_value_preprocessor(self,f)
flask.app.Flask.wsgi_app(self,environ,start_response)
flask.app._make_timedelta(value)
flask.app.setupmethod(f)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/signals.py----------------------------------------
A:flask.signals._signals->Namespace()
A:flask.signals.template_rendered->Namespace().signal('template-rendered')
A:flask.signals.request_started->Namespace().signal('request-started')
A:flask.signals.request_finished->Namespace().signal('request-finished')
A:flask.signals.request_tearing_down->Namespace().signal('request-tearing-down')
A:flask.signals.got_request_exception->Namespace().signal('got-request-exception')
A:flask.signals.appcontext_tearing_down->Namespace().signal('appcontext-tearing-down')
A:flask.signals.appcontext_pushed->Namespace().signal('appcontext-pushed')
A:flask.signals.appcontext_popped->Namespace().signal('appcontext-popped')
A:flask.signals.message_flashed->Namespace().signal('message-flashed')


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/config.py----------------------------------------
A:flask.config.rv->os.environ.get(variable_name)
A:flask.config.filename->os.path.join(self.root_path, filename)
A:flask.config.d->imp.new_module('config')
A:flask.config.obj->import_string(obj)
A:flask.config.self[key]->getattr(obj, key)
flask.Config(self,root_path,defaults=None)
flask.Config.__repr__(self)
flask.Config.from_envvar(self,variable_name,silent=False)
flask.Config.from_object(self,obj)
flask.Config.from_pyfile(self,filename,silent=False)
flask.ConfigAttribute(self,name,get_converter=None)
flask.ConfigAttribute.__get__(self,obj,type=None)
flask.ConfigAttribute.__set__(self,obj,value)
flask.config.Config(self,root_path,defaults=None)
flask.config.Config.__init__(self,root_path,defaults=None)
flask.config.Config.__repr__(self)
flask.config.Config.from_envvar(self,variable_name,silent=False)
flask.config.Config.from_object(self,obj)
flask.config.Config.from_pyfile(self,filename,silent=False)
flask.config.ConfigAttribute(self,name,get_converter=None)
flask.config.ConfigAttribute.__get__(self,obj,type=None)
flask.config.ConfigAttribute.__init__(self,name,get_converter=None)
flask.config.ConfigAttribute.__set__(self,obj,value)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/views.py----------------------------------------
A:flask.views.http_method_funcs->frozenset(['get', 'post', 'head', 'options', 'delete', 'put', 'trace', 'patch'])
A:flask.views.self->decorator(view).view_class(*class_args, **class_kwargs)
A:flask.views.view->decorator(view)
A:flask.views.rv->type.__new__(cls, name, bases, d)
A:flask.views.methods->set(rv.methods or [])
A:flask.views.rv.methods->sorted(methods)
A:flask.views.meth->getattr(self, 'get', None)
flask.views.MethodView(with_metaclass(MethodViewType,View))
flask.views.MethodView.dispatch_request(self,*args,**kwargs)
flask.views.MethodViewType(cls,name,bases,d)
flask.views.MethodViewType.__new__(cls,name,bases,d)
flask.views.View(object)
flask.views.View.as_view(cls,name,*class_args,**class_kwargs)
flask.views.View.dispatch_request(self)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/_compat.py----------------------------------------
flask._compat.with_metaclass(meta,*bases)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/templating.py----------------------------------------
A:flask.templating.options['loader']->app.create_global_jinja_loader()
A:flask.templating.(module, local_name)->posixpath.normpath(template).split('/', 1)
A:flask.templating.result->set()
A:flask.templating.rv->template.render(context)
flask.render_template(template_name_or_list,**context)
flask.render_template_string(source,**context)
flask.templating.DispatchingJinjaLoader(self,app)
flask.templating.DispatchingJinjaLoader.__init__(self,app)
flask.templating.DispatchingJinjaLoader._iter_loaders(self,template)
flask.templating.DispatchingJinjaLoader.get_source(self,environment,template)
flask.templating.DispatchingJinjaLoader.list_templates(self)
flask.templating.Environment(self,app,**options)
flask.templating.Environment.__init__(self,app,**options)
flask.templating._default_template_ctx_processor()
flask.templating._render(template,context,app)
flask.templating.render_template(template_name_or_list,**context)
flask.templating.render_template_string(source,**context)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/blueprints.py----------------------------------------
A:flask.blueprints.subdomain->self.options.get('subdomain')
A:flask.blueprints.url_prefix->self.options.get('url_prefix')
A:flask.blueprints.self.url_defaults->dict(self.blueprint.url_values_defaults)
A:flask.blueprints.endpoint->options.pop('endpoint', f.__name__)
A:flask.blueprints.defaults->dict(defaults, **options.pop('defaults'))
A:flask.blueprints.state->self.make_setup_state(app, options, first_registration)
flask.Blueprint(self,name,import_name,static_folder=None,static_url_path=None,template_folder=None,url_prefix=None,subdomain=None,url_defaults=None)
flask.Blueprint.add_app_template_filter(self,f,name=None)
flask.Blueprint.add_app_template_global(self,f,name=None)
flask.Blueprint.add_app_template_test(self,f,name=None)
flask.Blueprint.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.Blueprint.after_app_request(self,f)
flask.Blueprint.after_request(self,f)
flask.Blueprint.app_context_processor(self,f)
flask.Blueprint.app_errorhandler(self,code)
flask.Blueprint.app_template_filter(self,name=None)
flask.Blueprint.app_template_global(self,name=None)
flask.Blueprint.app_template_test(self,name=None)
flask.Blueprint.app_url_defaults(self,f)
flask.Blueprint.app_url_value_preprocessor(self,f)
flask.Blueprint.before_app_first_request(self,f)
flask.Blueprint.before_app_request(self,f)
flask.Blueprint.before_request(self,f)
flask.Blueprint.context_processor(self,f)
flask.Blueprint.endpoint(self,endpoint)
flask.Blueprint.errorhandler(self,code_or_exception)
flask.Blueprint.make_setup_state(self,app,options,first_registration=False)
flask.Blueprint.record(self,func)
flask.Blueprint.record_once(self,func)
flask.Blueprint.register(self,app,options,first_registration=False)
flask.Blueprint.route(self,rule,**options)
flask.Blueprint.teardown_app_request(self,f)
flask.Blueprint.teardown_request(self,f)
flask.Blueprint.url_defaults(self,f)
flask.Blueprint.url_value_preprocessor(self,f)
flask.BlueprintSetupState(self,blueprint,app,options,first_registration)
flask.BlueprintSetupState.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.blueprints.Blueprint(self,name,import_name,static_folder=None,static_url_path=None,template_folder=None,url_prefix=None,subdomain=None,url_defaults=None)
flask.blueprints.Blueprint.__init__(self,name,import_name,static_folder=None,static_url_path=None,template_folder=None,url_prefix=None,subdomain=None,url_defaults=None)
flask.blueprints.Blueprint.add_app_template_filter(self,f,name=None)
flask.blueprints.Blueprint.add_app_template_global(self,f,name=None)
flask.blueprints.Blueprint.add_app_template_test(self,f,name=None)
flask.blueprints.Blueprint.add_url_rule(self,rule,endpoint=None,view_func=None,**options)
flask.blueprints.Blueprint.after_app_request(self,f)
flask.blueprints.Blueprint.after_request(self,f)
flask.blueprints.Blueprint.app_context_processor(self,f)
flask.blueprints.Blueprint.app_errorhandler(self,code)
flask.blueprints.Blueprint.app_template_filter(self,name=None)
flask.blueprints.Blueprint.app_template_global(self,name=None)
flask.blueprints.Blueprint.app_template_test(self,name=None)
flask.blueprints.Blueprint.app_url_defaults(self,f)
flask.blueprints.Blueprint.app_url_value_preprocessor(self,f)
flask.blueprints.Blueprint.before_app_first_request(self,f)
flask.blueprints.Blueprint.before_app_request(self,f)
flask.blueprints.Blueprint.before_request(self,f)
flask.blueprints.Blueprint.context_processor(self,f)
flask.blueprints.Blueprint.endpoint(self,endpoint)
flask.blueprints.Blueprint.errorhandler(self,code_or_exception)
flask.blueprints.Blueprint.make_setup_state(self,app,options,first_registration=False)
flask.blueprints.Blueprint.record(self,func)
flask.blueprints.Blueprint.record_once(self,func)
flask.blueprints.Blueprint.register(self,app,options,first_registration=False)
flask.blueprints.Blueprint.route(self,rule,**options)
flask.blueprints.Blueprint.teardown_app_request(self,f)
flask.blueprints.Blueprint.teardown_request(self,f)
flask.blueprints.Blueprint.url_defaults(self,f)
flask.blueprints.Blueprint.url_value_preprocessor(self,f)
flask.blueprints.BlueprintSetupState(self,blueprint,app,options,first_registration)
flask.blueprints.BlueprintSetupState.__init__(self,blueprint,app,options,first_registration)
flask.blueprints.BlueprintSetupState.add_url_rule(self,rule,endpoint=None,view_func=None,**options)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/wrappers.py----------------------------------------
A:flask.wrappers._missing->object()
A:flask.wrappers.getter->getattr(req, 'get_data', None)
A:flask.wrappers.rv->self.on_json_loading_failed(e)
A:flask.wrappers.request_charset->self.mimetype_params.get('charset')
A:flask.wrappers.data->_get_data(self, cache)
flask.wrappers.Request(RequestBase)
flask.wrappers.Request._load_form_data(self)
flask.wrappers.Request.blueprint(self)
flask.wrappers.Request.endpoint(self)
flask.wrappers.Request.get_json(self,force=False,silent=False,cache=True)
flask.wrappers.Request.json(self)
flask.wrappers.Request.max_content_length(self)
flask.wrappers.Request.module(self)
flask.wrappers.Request.on_json_loading_failed(self,e)
flask.wrappers.Response(ResponseBase)
flask.wrappers._get_data(req,cache)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/json.py----------------------------------------
A:flask.json.fp->_wrap_reader_for_text(fp, kwargs.pop('encoding', None) or 'utf-8')
A:flask.json.encoding->kwargs.pop('encoding', None)
A:flask.json.rv->rv.replace('\\/', '/').replace('\\/', '/')
A:flask.json.s->s.decode(kwargs.pop('encoding', None) or 'utf-8').decode(kwargs.pop('encoding', None) or 'utf-8')
flask.json.JSONDecoder(_json.JSONDecoder)
flask.json.JSONEncoder(_json.JSONEncoder)
flask.json.JSONEncoder.default(self,o)
flask.json._dump_arg_defaults(kwargs)
flask.json._load_arg_defaults(kwargs)
flask.json._wrap_reader_for_text(fp,encoding)
flask.json._wrap_writer_for_text(fp,encoding)
flask.json.dump(obj,fp,**kwargs)
flask.json.dumps(obj,**kwargs)
flask.json.htmlsafe_dump(obj,fp,**kwargs)
flask.json.htmlsafe_dumps(obj,**kwargs)
flask.json.jsonify(*args,**kwargs)
flask.json.load(fp,**kwargs)
flask.json.loads(s,**kwargs)
flask.json.tojson_filter(obj,**kwargs)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/helpers.py----------------------------------------
A:flask.helpers._missing->object()
A:flask.helpers._os_alt_seps->list((sep for sep in [os.path.sep, os.path.altsep] if sep not in (None, '/')))
A:flask.helpers.gen->generator_or_function()
A:flask.helpers.wrapped_g->generator()
A:flask.helpers.external->values.pop('_external', True)
A:flask.helpers.anchor->values.pop('_anchor', None)
A:flask.helpers.method->values.pop('_method', None)
A:flask.helpers.scheme->values.pop('_scheme', None)
A:flask.helpers.rv->rv.make_conditional(request).make_conditional(request)
A:flask.helpers.flashes->list(filter(lambda f: f[0] in category_filter, flashes))
A:flask.helpers.filename->pkgutil.get_loader(root_mod_name).get_filename(root_mod_name)
A:flask.helpers.headers->Headers()
A:flask.helpers.attachment_filename->os.path.basename(filename)
A:flask.helpers.headers['Content-Length']->os.path.getsize(filename)
A:flask.helpers.file->open(filename, 'rb')
A:flask.helpers.mtime->os.path.getmtime(filename)
A:flask.helpers.data->wrap_file(request.environ, file)
A:flask.helpers.rv.last_modified->int(mtime)
A:flask.helpers.cache_timeout->self.get_send_file_max_age(filename)
A:flask.helpers.rv.expires->int(time() + cache_timeout)
A:flask.helpers.mod->sys.modules.get(import_name)
A:flask.helpers.loader->pkgutil.get_loader(root_mod_name)
A:flask.helpers.filepath->pkgutil.get_loader(root_mod_name).get_filename(import_name)
A:flask.helpers.package_path->os.path.dirname(package_path)
A:flask.helpers.(site_parent, site_folder)->os.path.split(package_path)
A:flask.helpers.py_prefix->os.path.abspath(sys.prefix)
A:flask.helpers.(parent, folder)->os.path.split(site_parent)
A:flask.helpers.base_dir->os.path.dirname(parent)
A:flask.helpers.self.lock->RLock()
A:flask.helpers.value->self.func(obj)
A:flask.helpers.self.root_path->get_root_path(self.import_name)
A:flask.helpers.static_folder->property(_get_static_folder, _set_static_folder)
A:flask.helpers.static_url_path->property(_get_static_url_path, _set_static_url_path)
flask.flash(message,category='message')
flask.get_flashed_messages(with_categories=False,category_filter=[])
flask.get_template_attribute(template_name,attribute)
flask.helpers._PackageBoundObject(self,import_name,template_folder=None)
flask.helpers._PackageBoundObject.__init__(self,import_name,template_folder=None)
flask.helpers._PackageBoundObject._get_static_folder(self)
flask.helpers._PackageBoundObject._get_static_url_path(self)
flask.helpers._PackageBoundObject._set_static_folder(self,value)
flask.helpers._PackageBoundObject._set_static_url_path(self,value)
flask.helpers._PackageBoundObject.get_send_file_max_age(self,filename)
flask.helpers._PackageBoundObject.has_static_folder(self)
flask.helpers._PackageBoundObject.jinja_loader(self)
flask.helpers._PackageBoundObject.open_resource(self,resource,mode='rb')
flask.helpers._PackageBoundObject.send_static_file(self,filename)
flask.helpers._endpoint_from_view_func(view_func)
flask.helpers.find_package(import_name)
flask.helpers.flash(message,category='message')
flask.helpers.get_flashed_messages(with_categories=False,category_filter=[])
flask.helpers.get_root_path(import_name)
flask.helpers.get_template_attribute(template_name,attribute)
flask.helpers.locked_cached_property(self,func,name=None,doc=None)
flask.helpers.locked_cached_property.__get__(self,obj,type=None)
flask.helpers.locked_cached_property.__init__(self,func,name=None,doc=None)
flask.helpers.make_response(*args)
flask.helpers.safe_join(directory,filename)
flask.helpers.send_file(filename_or_fp,mimetype=None,as_attachment=False,attachment_filename=None,add_etags=True,cache_timeout=None,conditional=False)
flask.helpers.send_from_directory(directory,filename,**options)
flask.helpers.stream_with_context(generator_or_function)
flask.helpers.url_for(endpoint,**values)
flask.make_response(*args)
flask.safe_join(directory,filename)
flask.send_file(filename_or_fp,mimetype=None,as_attachment=False,attachment_filename=None,add_etags=True,cache_timeout=None,conditional=False)
flask.send_from_directory(directory,filename,**options)
flask.stream_with_context(generator_or_function)
flask.url_for(endpoint,**values)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/subclassing.py----------------------------------------
A:flask.testsuite.subclassing.out->StringIO()
A:flask.testsuite.subclassing.app->SuppressedFlask(__name__)
A:flask.testsuite.subclassing.rv->SuppressedFlask(__name__).test_client().get('/')
A:flask.testsuite.subclassing.err->StringIO().getvalue()
A:flask.testsuite.subclassing.suite->unittest.TestSuite()
flask.testsuite.subclassing.FlaskSubclassingTestCase(FlaskTestCase)
flask.testsuite.subclassing.FlaskSubclassingTestCase.test_suppressed_exception_logging(self)
flask.testsuite.subclassing.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/examples.py----------------------------------------
A:flask.testsuite.examples.example_path->os.path.join(os.path.dirname(__file__), os.pardir, os.pardir, 'examples')
A:flask.testsuite.examples.suite->unittest.TestSuite()
flask.testsuite.examples.setup_path()
flask.testsuite.examples.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/testing.py----------------------------------------
A:flask.testsuite.testing.app->flask.Flask(__name__)
A:flask.testsuite.testing.ctx->flask.Flask(__name__).test_request_context()
A:flask.testsuite.testing.rv->app.test_client().get('/')
A:flask.testsuite.testing.req->flask.request._get_current_object()
A:flask.testsuite.testing.c->flask.Flask(__name__).test_client()
A:flask.testsuite.testing.resp->flask.Flask(__name__).test_client().get('/other')
A:flask.testsuite.testing.self.app->flask.Flask(__name__)
A:flask.testsuite.testing.self.client->self.app.test_client()
A:flask.testsuite.testing.self._ctx->self.app.test_request_context()
A:flask.testsuite.testing.url->flask.url_for('view', company_id='xxx')
A:flask.testsuite.testing.response->self.client.get(url)
A:flask.testsuite.testing.suite->unittest.TestSuite()
flask.testsuite.testing.SubdomainTestCase(FlaskTestCase)
flask.testsuite.testing.SubdomainTestCase.setUp(self)
flask.testsuite.testing.SubdomainTestCase.tearDown(self)
flask.testsuite.testing.SubdomainTestCase.test_nosubdomain(self)
flask.testsuite.testing.SubdomainTestCase.test_subdomain(self)
flask.testsuite.testing.TestToolsTestCase(FlaskTestCase)
flask.testsuite.testing.TestToolsTestCase.test_environ_defaults(self)
flask.testsuite.testing.TestToolsTestCase.test_environ_defaults_from_config(self)
flask.testsuite.testing.TestToolsTestCase.test_redirect_keep_session(self)
flask.testsuite.testing.TestToolsTestCase.test_reuse_client(self)
flask.testsuite.testing.TestToolsTestCase.test_session_transaction_needs_cookies(self)
flask.testsuite.testing.TestToolsTestCase.test_session_transactions(self)
flask.testsuite.testing.TestToolsTestCase.test_session_transactions_keep_context(self)
flask.testsuite.testing.TestToolsTestCase.test_session_transactions_no_null_sessions(self)
flask.testsuite.testing.TestToolsTestCase.test_test_client_calls_teardown_handlers(self)
flask.testsuite.testing.TestToolsTestCase.test_test_client_context_binding(self)
flask.testsuite.testing.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/basic.py----------------------------------------
A:flask.testsuite.basic.app->flask.Flask(__name__)
A:flask.testsuite.basic.rv->flask.Flask(__name__).test_client().open('/b/')
A:flask.testsuite.basic.c->flask.Flask(__name__).test_client()
A:flask.testsuite.basic.app.wsgi_app->PrefixPathMiddleware(app.wsgi_app, '/bar')
A:flask.testsuite.basic.cookie->flask.Flask(__name__).test_client().open('/b/').headers['set-cookie'].lower()
A:flask.testsuite.basic.client->flask.Flask(__name__).test_client()
A:flask.testsuite.basic.match->re.search('\\bexpires=([^;]+)', rv.headers['set-cookie'])
A:flask.testsuite.basic.expires->parse_date(match.group())
A:flask.testsuite.basic.now->datetime.datetime.utcnow().replace(microsecond=0)
A:flask.testsuite.basic.the_uuid->uuid.uuid4()
A:flask.testsuite.basic.flask.session['m']->flask.Markup('Hello!')
A:flask.testsuite.basic.messages->flask.get_flashed_messages(category_filter=['message', 'warning'])
A:flask.testsuite.basic.resp->flask.Flask(__name__).test_client().get('/')
A:flask.testsuite.basic.t->Thread(target=apprunner, args=(config_key,))
A:flask.testsuite.basic.flask.g.lang_code->dict().pop('lang_code', None)
A:flask.testsuite.basic.bp->flask.Blueprint('foo.bar.baz', __name__, template_folder='template')
A:flask.testsuite.basic.values->dict()
A:flask.testsuite.basic.expected->dict(page='login')
A:flask.testsuite.basic.url->flask.url_for('foo.bar.baz.view')
A:flask.testsuite.basic.mod->flask.Module(__name__, 'test', subdomain='testing')
A:flask.testsuite.basic._->View(app)
A:flask.testsuite.basic.suite->unittest.TestSuite()
flask.testsuite.basic.BasicFunctionalityTestCase(FlaskTestCase)
flask.testsuite.basic.BasicFunctionalityTestCase.test_after_request_processing(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_before_after_request_order(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_before_first_request_functions(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_before_request_and_routing_errors(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_build_error_handler(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_custom_converters(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_debug_mode_complains_after_first_request(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_enctype_debug_helper(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_endpoint_decorator(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_error_handling(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_exception_propagation(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_extended_flashing(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_flashes(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_g_iteration_protocol(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_get_method_on_g(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_inject_blueprint_url_defaults(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_make_response(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_make_response_with_response_instance(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_max_content_length(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_missing_session(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_nonascii_pathinfo(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_none_response(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_options_handling_disabled(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_options_on_multiple_rules(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_options_work(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_preserve_only_once(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_preserve_remembers_exception(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_request_dispatching(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_request_locals(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_request_processing(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_response_creation(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_route_decorator_custom_endpoint(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_routing_redirect_debugging(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_session(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_session_expiration(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_session_special_types(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_session_stored_last(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_session_using_application_root(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_session_using_server_name(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_session_using_server_name_and_port(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_session_using_server_name_port_and_path(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_session_using_session_settings(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_static_files(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_teardown_request_handler(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_teardown_request_handler_debug_mode(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_teardown_request_handler_error(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_test_app_proper_environ(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_trapping_of_all_http_exceptions(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_trapping_of_bad_request_key_errors(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_url_generation(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_url_mapping(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_url_processors(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_user_error_handling(self)
flask.testsuite.basic.BasicFunctionalityTestCase.test_werkzeug_routing(self)
flask.testsuite.basic.SubdomainTestCase(FlaskTestCase)
flask.testsuite.basic.SubdomainTestCase.test_basic_support(self)
flask.testsuite.basic.SubdomainTestCase.test_module_static_path_subdomain(self)
flask.testsuite.basic.SubdomainTestCase.test_module_subdomain_support(self)
flask.testsuite.basic.SubdomainTestCase.test_multi_route_class_views(self)
flask.testsuite.basic.SubdomainTestCase.test_multi_route_rules(self)
flask.testsuite.basic.SubdomainTestCase.test_subdomain_matching(self)
flask.testsuite.basic.SubdomainTestCase.test_subdomain_matching_with_ports(self)
flask.testsuite.basic.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/signals.py----------------------------------------
A:flask.testsuite.signals.app->flask.Flask(__name__)
A:flask.testsuite.signals.rv->c.get('/')
A:flask.testsuite.signals.client->flask.Flask(__name__).test_client()
A:flask.testsuite.signals.suite->unittest.TestSuite()
flask.testsuite.signals.SignalsTestCase(FlaskTestCase)
flask.testsuite.signals.SignalsTestCase.test_appcontext_signals(self)
flask.testsuite.signals.SignalsTestCase.test_flash_signal(self)
flask.testsuite.signals.SignalsTestCase.test_request_exception_signal(self)
flask.testsuite.signals.SignalsTestCase.test_request_signals(self)
flask.testsuite.signals.SignalsTestCase.test_template_rendered(self)
flask.testsuite.signals.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/ext.py----------------------------------------
A:flask.testsuite.ext.cls->type(item)
A:flask.testsuite.ext.(exc_type, exc_value, tb)->sys.exc_info()
A:flask.testsuite.ext.suite->unittest.TestSuite()
flask.testsuite.ext.ExtImportHookTestCase(FlaskTestCase)
flask.testsuite.ext.ExtImportHookTestCase.setup(self)
flask.testsuite.ext.ExtImportHookTestCase.teardown(self)
flask.testsuite.ext.ExtImportHookTestCase.test_flaskext_broken_package_no_module_caching(self)
flask.testsuite.ext.ExtImportHookTestCase.test_flaskext_new_package_import_module(self)
flask.testsuite.ext.ExtImportHookTestCase.test_flaskext_new_package_import_normal(self)
flask.testsuite.ext.ExtImportHookTestCase.test_flaskext_new_package_import_submodule(self)
flask.testsuite.ext.ExtImportHookTestCase.test_flaskext_new_package_import_submodule_function(self)
flask.testsuite.ext.ExtImportHookTestCase.test_flaskext_new_simple_import_module(self)
flask.testsuite.ext.ExtImportHookTestCase.test_flaskext_new_simple_import_normal(self)
flask.testsuite.ext.ExtImportHookTestCase.test_flaskext_old_package_import_module(self)
flask.testsuite.ext.ExtImportHookTestCase.test_flaskext_old_package_import_normal(self)
flask.testsuite.ext.ExtImportHookTestCase.test_flaskext_old_package_import_submodule(self)
flask.testsuite.ext.ExtImportHookTestCase.test_flaskext_old_package_import_submodule_function(self)
flask.testsuite.ext.ExtImportHookTestCase.test_flaskext_old_simple_import_module(self)
flask.testsuite.ext.ExtImportHookTestCase.test_flaskext_old_simple_import_normal(self)
flask.testsuite.ext.ExtImportHookTestCase.test_no_error_swallowing(self)
flask.testsuite.ext.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/config.py----------------------------------------
A:flask.testsuite.config.app->flask.Flask(__name__, instance_path=here)
A:flask.testsuite.config.msg->str(e)
A:flask.testsuite.config.here->os.path.abspath(os.path.dirname(__file__))
A:flask.testsuite.config.expected_prefix->os.path.join(here, 'test_apps')
A:flask.testsuite.config.site_packages->os.path.join(expected_prefix, 'lib', 'python2.5', 'site-packages')
A:flask.testsuite.config.installed_path->os.path.join(expected_prefix, 'path')
A:flask.testsuite.config.egg_path->os.path.join(site_packages, 'SiteEgg.egg')
A:flask.testsuite.config.suite->unittest.TestSuite()
flask.testsuite.ConfigTestCase(FlaskTestCase)
flask.testsuite.ConfigTestCase.common_object_test(self,app)
flask.testsuite.ConfigTestCase.test_config_from_class(self)
flask.testsuite.ConfigTestCase.test_config_from_envvar(self)
flask.testsuite.ConfigTestCase.test_config_from_envvar_missing(self)
flask.testsuite.ConfigTestCase.test_config_from_file(self)
flask.testsuite.ConfigTestCase.test_config_from_object(self)
flask.testsuite.ConfigTestCase.test_config_missing(self)
flask.testsuite.ConfigTestCase.test_session_lifetime(self)
flask.testsuite.config.ConfigTestCase(FlaskTestCase)
flask.testsuite.config.ConfigTestCase.common_object_test(self,app)
flask.testsuite.config.ConfigTestCase.test_config_from_class(self)
flask.testsuite.config.ConfigTestCase.test_config_from_envvar(self)
flask.testsuite.config.ConfigTestCase.test_config_from_envvar_missing(self)
flask.testsuite.config.ConfigTestCase.test_config_from_file(self)
flask.testsuite.config.ConfigTestCase.test_config_from_object(self)
flask.testsuite.config.ConfigTestCase.test_config_missing(self)
flask.testsuite.config.ConfigTestCase.test_session_lifetime(self)
flask.testsuite.config.InstanceTestCase(FlaskTestCase)
flask.testsuite.config.InstanceTestCase.test_egg_installed_paths(self)
flask.testsuite.config.InstanceTestCase.test_explicit_instance_paths(self)
flask.testsuite.config.InstanceTestCase.test_installed_module_paths(self)
flask.testsuite.config.InstanceTestCase.test_installed_module_paths_with_limited_loader(self)
flask.testsuite.config.InstanceTestCase.test_installed_package_paths(self)
flask.testsuite.config.InstanceTestCase.test_installed_package_paths_with_limited_loader(self)
flask.testsuite.config.InstanceTestCase.test_main_module_paths(self)
flask.testsuite.config.InstanceTestCase.test_prefix_package_paths(self)
flask.testsuite.config.InstanceTestCase.test_prefix_package_paths_with_limited_loader(self)
flask.testsuite.config.InstanceTestCase.test_uninstalled_module_paths(self)
flask.testsuite.config.InstanceTestCase.test_uninstalled_package_paths(self)
flask.testsuite.config.LimitedLoaderMockWrapper(self,loader)
flask.testsuite.config.LimitedLoaderMockWrapper.__getattr__(self,name)
flask.testsuite.config.LimitedLoaderMockWrapper.__init__(self,loader)
flask.testsuite.config.patch_pkgutil_get_loader(wrapper_class=LimitedLoaderMockWrapper)
flask.testsuite.config.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/views.py----------------------------------------
A:flask.testsuite.views.c->flask.Flask(__name__).test_client()
A:flask.testsuite.views.meths->parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])
A:flask.testsuite.views.app->flask.Flask(__name__)
A:flask.testsuite.views.view->Index.as_view('index')
A:flask.testsuite.views.resp->flask.make_response(f(*args, **kwargs))
A:flask.testsuite.views.rv->flask.Flask(__name__).test_client().head('/')
A:flask.testsuite.views.suite->unittest.TestSuite()
flask.testsuite.views.ViewTestCase(FlaskTestCase)
flask.testsuite.views.ViewTestCase.common_test(self,app)
flask.testsuite.views.ViewTestCase.test_basic_view(self)
flask.testsuite.views.ViewTestCase.test_endpoint_override(self)
flask.testsuite.views.ViewTestCase.test_explicit_head(self)
flask.testsuite.views.ViewTestCase.test_implicit_head(self)
flask.testsuite.views.ViewTestCase.test_method_based_view(self)
flask.testsuite.views.ViewTestCase.test_view_decorators(self)
flask.testsuite.views.ViewTestCase.test_view_inheritance(self)
flask.testsuite.views.ViewTestCase.test_view_patching(self)
flask.testsuite.views.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/templating.py----------------------------------------
A:flask.testsuite.templating.app->flask.Flask(__name__)
A:flask.testsuite.templating.rv->flask.Flask(__name__).test_client().get('/')
A:flask.testsuite.templating.lines->flask.Flask(__name__).test_client().get('/').data.splitlines()
A:flask.testsuite.templating.macro->flask.get_template_attribute('_macro.html', 'hello')
A:flask.testsuite.templating.c->flask.Flask(__name__).test_client()
A:flask.testsuite.templating.suite->unittest.TestSuite()
flask.testsuite.templating.TemplatingTestCase(FlaskTestCase)
flask.testsuite.templating.TemplatingTestCase.test_add_template_filter(self)
flask.testsuite.templating.TemplatingTestCase.test_add_template_filter_with_name(self)
flask.testsuite.templating.TemplatingTestCase.test_add_template_filter_with_name_and_template(self)
flask.testsuite.templating.TemplatingTestCase.test_add_template_filter_with_template(self)
flask.testsuite.templating.TemplatingTestCase.test_add_template_global(self)
flask.testsuite.templating.TemplatingTestCase.test_add_template_test(self)
flask.testsuite.templating.TemplatingTestCase.test_add_template_test_with_name(self)
flask.testsuite.templating.TemplatingTestCase.test_add_template_test_with_name_and_template(self)
flask.testsuite.templating.TemplatingTestCase.test_add_template_test_with_template(self)
flask.testsuite.templating.TemplatingTestCase.test_context_processing(self)
flask.testsuite.templating.TemplatingTestCase.test_custom_template_loader(self)
flask.testsuite.templating.TemplatingTestCase.test_escaping(self)
flask.testsuite.templating.TemplatingTestCase.test_iterable_loader(self)
flask.testsuite.templating.TemplatingTestCase.test_macros(self)
flask.testsuite.templating.TemplatingTestCase.test_no_escaping(self)
flask.testsuite.templating.TemplatingTestCase.test_original_win(self)
flask.testsuite.templating.TemplatingTestCase.test_request_less_rendering(self)
flask.testsuite.templating.TemplatingTestCase.test_standard_context(self)
flask.testsuite.templating.TemplatingTestCase.test_template_filter(self)
flask.testsuite.templating.TemplatingTestCase.test_template_filter_with_name(self)
flask.testsuite.templating.TemplatingTestCase.test_template_filter_with_name_and_template(self)
flask.testsuite.templating.TemplatingTestCase.test_template_filter_with_template(self)
flask.testsuite.templating.TemplatingTestCase.test_template_test(self)
flask.testsuite.templating.TemplatingTestCase.test_template_test_with_name(self)
flask.testsuite.templating.TemplatingTestCase.test_template_test_with_name_and_template(self)
flask.testsuite.templating.TemplatingTestCase.test_template_test_with_template(self)
flask.testsuite.templating.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/blueprints.py----------------------------------------
A:flask.testsuite.blueprints.app->flask.Flask(__name__)
A:flask.testsuite.blueprints.admin->flask.Module(__name__, 'admin')
A:flask.testsuite.blueprints.c->flask.Flask(__name__).test_client()
A:flask.testsuite.blueprints.mod->flask.Module(__name__, 'frontend')
A:flask.testsuite.blueprints.rv->flask.Flask(__name__).test_client().get('/')
A:flask.testsuite.blueprints.module->Module(__name__, __name__)
A:flask.testsuite.blueprints.frontend->flask.Blueprint('myapp.frontend', __name__)
A:flask.testsuite.blueprints.backend->flask.Blueprint('myapp.backend', __name__)
A:flask.testsuite.blueprints.sideend->flask.Blueprint('sideend', __name__)
A:flask.testsuite.blueprints.bp->flask.Blueprint('bp', __name__)
A:flask.testsuite.blueprints.flask.g.lang_code->values.pop('lang_code')
A:flask.testsuite.blueprints.cc->parse_cache_control_header(rv.headers['Cache-Control'])
A:flask.testsuite.blueprints.blueprint->MyBlueprint('blueprint', __name__, static_folder='static')
A:flask.testsuite.blueprints.templates->sorted(app.jinja_env.list_templates())
A:flask.testsuite.blueprints.test->flask.Blueprint('test', __name__)
A:flask.testsuite.blueprints.suite->unittest.TestSuite()
flask.testsuite.BlueprintTestCase(FlaskTestCase)
flask.testsuite.BlueprintTestCase.test_add_template_filter(self)
flask.testsuite.BlueprintTestCase.test_add_template_filter_with_name(self)
flask.testsuite.BlueprintTestCase.test_add_template_filter_with_name_and_template(self)
flask.testsuite.BlueprintTestCase.test_add_template_filter_with_template(self)
flask.testsuite.BlueprintTestCase.test_add_template_test(self)
flask.testsuite.BlueprintTestCase.test_add_template_test_with_name(self)
flask.testsuite.BlueprintTestCase.test_add_template_test_with_name_and_template(self)
flask.testsuite.BlueprintTestCase.test_add_template_test_with_template(self)
flask.testsuite.BlueprintTestCase.test_blueprint_specific_error_handling(self)
flask.testsuite.BlueprintTestCase.test_blueprint_url_definitions(self)
flask.testsuite.BlueprintTestCase.test_blueprint_url_processors(self)
flask.testsuite.BlueprintTestCase.test_default_static_cache_timeout(self)
flask.testsuite.BlueprintTestCase.test_dotted_names(self)
flask.testsuite.BlueprintTestCase.test_dotted_names_from_app(self)
flask.testsuite.BlueprintTestCase.test_empty_url_defaults(self)
flask.testsuite.BlueprintTestCase.test_route_decorator_custom_endpoint(self)
flask.testsuite.BlueprintTestCase.test_route_decorator_custom_endpoint_with_dots(self)
flask.testsuite.BlueprintTestCase.test_template_filter(self)
flask.testsuite.BlueprintTestCase.test_template_filter_after_route_with_template(self)
flask.testsuite.BlueprintTestCase.test_template_filter_with_name(self)
flask.testsuite.BlueprintTestCase.test_template_filter_with_name_and_template(self)
flask.testsuite.BlueprintTestCase.test_template_filter_with_template(self)
flask.testsuite.BlueprintTestCase.test_template_test(self)
flask.testsuite.BlueprintTestCase.test_template_test_after_route_with_template(self)
flask.testsuite.BlueprintTestCase.test_template_test_with_name(self)
flask.testsuite.BlueprintTestCase.test_template_test_with_name_and_template(self)
flask.testsuite.BlueprintTestCase.test_template_test_with_template(self)
flask.testsuite.BlueprintTestCase.test_templates_and_static(self)
flask.testsuite.BlueprintTestCase.test_templates_list(self)
flask.testsuite.blueprints.BlueprintTestCase(FlaskTestCase)
flask.testsuite.blueprints.BlueprintTestCase.test_add_template_filter(self)
flask.testsuite.blueprints.BlueprintTestCase.test_add_template_filter_with_name(self)
flask.testsuite.blueprints.BlueprintTestCase.test_add_template_filter_with_name_and_template(self)
flask.testsuite.blueprints.BlueprintTestCase.test_add_template_filter_with_template(self)
flask.testsuite.blueprints.BlueprintTestCase.test_add_template_test(self)
flask.testsuite.blueprints.BlueprintTestCase.test_add_template_test_with_name(self)
flask.testsuite.blueprints.BlueprintTestCase.test_add_template_test_with_name_and_template(self)
flask.testsuite.blueprints.BlueprintTestCase.test_add_template_test_with_template(self)
flask.testsuite.blueprints.BlueprintTestCase.test_blueprint_specific_error_handling(self)
flask.testsuite.blueprints.BlueprintTestCase.test_blueprint_url_definitions(self)
flask.testsuite.blueprints.BlueprintTestCase.test_blueprint_url_processors(self)
flask.testsuite.blueprints.BlueprintTestCase.test_default_static_cache_timeout(self)
flask.testsuite.blueprints.BlueprintTestCase.test_dotted_names(self)
flask.testsuite.blueprints.BlueprintTestCase.test_dotted_names_from_app(self)
flask.testsuite.blueprints.BlueprintTestCase.test_empty_url_defaults(self)
flask.testsuite.blueprints.BlueprintTestCase.test_route_decorator_custom_endpoint(self)
flask.testsuite.blueprints.BlueprintTestCase.test_route_decorator_custom_endpoint_with_dots(self)
flask.testsuite.blueprints.BlueprintTestCase.test_template_filter(self)
flask.testsuite.blueprints.BlueprintTestCase.test_template_filter_after_route_with_template(self)
flask.testsuite.blueprints.BlueprintTestCase.test_template_filter_with_name(self)
flask.testsuite.blueprints.BlueprintTestCase.test_template_filter_with_name_and_template(self)
flask.testsuite.blueprints.BlueprintTestCase.test_template_filter_with_template(self)
flask.testsuite.blueprints.BlueprintTestCase.test_template_test(self)
flask.testsuite.blueprints.BlueprintTestCase.test_template_test_after_route_with_template(self)
flask.testsuite.blueprints.BlueprintTestCase.test_template_test_with_name(self)
flask.testsuite.blueprints.BlueprintTestCase.test_template_test_with_name_and_template(self)
flask.testsuite.blueprints.BlueprintTestCase.test_template_test_with_template(self)
flask.testsuite.blueprints.BlueprintTestCase.test_templates_and_static(self)
flask.testsuite.blueprints.BlueprintTestCase.test_templates_list(self)
flask.testsuite.blueprints.ModuleTestCase(FlaskTestCase)
flask.testsuite.blueprints.ModuleTestCase.test_basic_module(self)
flask.testsuite.blueprints.ModuleTestCase.test_context_processors(self)
flask.testsuite.blueprints.ModuleTestCase.test_default_endpoint_name(self)
flask.testsuite.blueprints.ModuleTestCase.test_endpoint_decorator(self)
flask.testsuite.blueprints.ModuleTestCase.test_error_handling(self)
flask.testsuite.blueprints.ModuleTestCase.test_late_binding(self)
flask.testsuite.blueprints.ModuleTestCase.test_request_processing(self)
flask.testsuite.blueprints.ModuleTestCase.test_safe_access(self)
flask.testsuite.blueprints.ModuleTestCase.test_templates_and_static(self)
flask.testsuite.blueprints.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/regression.py----------------------------------------
A:flask.testsuite.regression._gc_lock->threading.Lock()
A:flask.testsuite.regression.self.old_objects->len(gc.get_objects())
A:flask.testsuite.regression.new_objects->len(gc.get_objects())
A:flask.testsuite.regression.app->flask.Flask(__name__)
A:flask.testsuite.regression.rv->c.get('/test')
A:flask.testsuite.regression.suite->unittest.TestSuite()
flask.testsuite.regression.ExceptionTestCase(FlaskTestCase)
flask.testsuite.regression.ExceptionTestCase.test_aborting(self)
flask.testsuite.regression.MemoryTestCase(FlaskTestCase)
flask.testsuite.regression.MemoryTestCase.assert_no_leak(self)
flask.testsuite.regression.MemoryTestCase.test_memory_consumption(self)
flask.testsuite.regression.MemoryTestCase.test_safe_join_toplevel_pardir(self)
flask.testsuite.regression._NoLeakAsserter(self,testcase)
flask.testsuite.regression._NoLeakAsserter.__enter__(self)
flask.testsuite.regression._NoLeakAsserter.__exit__(self,exc_type,exc_value,tb)
flask.testsuite.regression._NoLeakAsserter.__init__(self,testcase)
flask.testsuite.regression.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/helpers.py----------------------------------------
A:flask.testsuite.helpers.app->flask.Flask(__name__)
A:flask.testsuite.helpers.c->flask.Flask(__name__).test_client()
A:flask.testsuite.helpers.rv->flask.Flask(__name__).test_client().get('/?name=World')
A:flask.testsuite.helpers.resp->flask.Flask(__name__).test_client().get('/', data=u'"Hällo Wörld"'.encode('iso-8859-15'), content_type='application/json; charset=iso-8859-15')
A:flask.testsuite.helpers.d->dict.fromkeys(range(20), 'foo')
A:flask.testsuite.helpers.json->flask.request.get_json()
A:flask.testsuite.helpers.f->open(os.path.join(app.root_path, 'static/index.html'))
A:flask.testsuite.helpers.(value, options)->parse_options_header(rv.headers['Content-Disposition'])
A:flask.testsuite.helpers.cc->parse_cache_control_header(rv.headers['Cache-Control'])
A:flask.testsuite.helpers.out->StringIO()
A:flask.testsuite.helpers.err->StringIO().getvalue()
A:flask.testsuite.helpers.myview->MyView.as_view('myview')
A:flask.testsuite.helpers.suite->unittest.TestSuite()
flask.testsuite.helpers.JSONTestCase(FlaskTestCase)
flask.testsuite.helpers.JSONTestCase.test_json_as_unicode(self)
flask.testsuite.helpers.JSONTestCase.test_json_attr(self)
flask.testsuite.helpers.JSONTestCase.test_json_bad_requests(self)
flask.testsuite.helpers.JSONTestCase.test_json_body_encoding(self)
flask.testsuite.helpers.JSONTestCase.test_json_customization(self)
flask.testsuite.helpers.JSONTestCase.test_json_key_sorting(self)
flask.testsuite.helpers.JSONTestCase.test_jsonify(self)
flask.testsuite.helpers.JSONTestCase.test_modified_url_encoding(self)
flask.testsuite.helpers.JSONTestCase.test_template_escaping(self)
flask.testsuite.helpers.LoggingTestCase(FlaskTestCase)
flask.testsuite.helpers.LoggingTestCase.test_debug_log(self)
flask.testsuite.helpers.LoggingTestCase.test_debug_log_override(self)
flask.testsuite.helpers.LoggingTestCase.test_exception_logging(self)
flask.testsuite.helpers.LoggingTestCase.test_logger_cache(self)
flask.testsuite.helpers.LoggingTestCase.test_processor_exceptions(self)
flask.testsuite.helpers.LoggingTestCase.test_url_for_with_anchor(self)
flask.testsuite.helpers.LoggingTestCase.test_url_for_with_scheme(self)
flask.testsuite.helpers.LoggingTestCase.test_url_for_with_scheme_not_external(self)
flask.testsuite.helpers.LoggingTestCase.test_url_with_method(self)
flask.testsuite.helpers.NoImportsTestCase(FlaskTestCase)
flask.testsuite.helpers.NoImportsTestCase.test_name_with_import_error(self)
flask.testsuite.helpers.SendfileTestCase(FlaskTestCase)
flask.testsuite.helpers.SendfileTestCase.test_attachment(self)
flask.testsuite.helpers.SendfileTestCase.test_send_file_object(self)
flask.testsuite.helpers.SendfileTestCase.test_send_file_regular(self)
flask.testsuite.helpers.SendfileTestCase.test_send_file_xsendfile(self)
flask.testsuite.helpers.SendfileTestCase.test_static_file(self)
flask.testsuite.helpers.StreamingTestCase(FlaskTestCase)
flask.testsuite.helpers.StreamingTestCase.test_streaming_with_context(self)
flask.testsuite.helpers.StreamingTestCase.test_streaming_with_context_and_custom_close(self)
flask.testsuite.helpers.StreamingTestCase.test_streaming_with_context_as_decorator(self)
flask.testsuite.helpers.has_encoding(name)
flask.testsuite.helpers.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/__init__.py----------------------------------------
A:flask.testsuite.__init__.mod->import_string(module)
A:flask.testsuite.__init__.s->suites.pop()
A:flask.testsuite.__init__.sys.stderrrv->StringIO()
A:flask.testsuite.__init__.catcher->_ExceptionCatcher(self, exc_type)
A:flask.testsuite.__init__.root->self.getRootSuite()
A:flask.testsuite.__init__.rv->unittest.TestSuite()
A:flask.testsuite.__init__.suite->unittest.TestSuite()
flask.testsuite.__init__.BetterLoader(unittest.TestLoader)
flask.testsuite.__init__.BetterLoader.getRootSuite(self)
flask.testsuite.__init__.BetterLoader.loadTestsFromName(self,name,module=None)
flask.testsuite.__init__.FlaskTestCase(unittest.TestCase)
flask.testsuite.__init__.FlaskTestCase.assert_equal(self,x,y)
flask.testsuite.__init__.FlaskTestCase.assert_false(self,x,msg=None)
flask.testsuite.__init__.FlaskTestCase.assert_in(self,x,y)
flask.testsuite.__init__.FlaskTestCase.assert_not_in(self,x,y)
flask.testsuite.__init__.FlaskTestCase.assert_raises(self,exc_type,callable=None,*args,**kwargs)
flask.testsuite.__init__.FlaskTestCase.assert_true(self,x,msg=None)
flask.testsuite.__init__.FlaskTestCase.ensure_clean_request_context(self)
flask.testsuite.__init__.FlaskTestCase.setUp(self)
flask.testsuite.__init__.FlaskTestCase.setup(self)
flask.testsuite.__init__.FlaskTestCase.tearDown(self)
flask.testsuite.__init__.FlaskTestCase.teardown(self)
flask.testsuite.__init__._ExceptionCatcher(self,test_case,exc_type)
flask.testsuite.__init__._ExceptionCatcher.__enter__(self)
flask.testsuite.__init__._ExceptionCatcher.__exit__(self,exc_type,exc_value,tb)
flask.testsuite.__init__._ExceptionCatcher.__init__(self,test_case,exc_type)
flask.testsuite.__init__.add_to_path(path)
flask.testsuite.__init__.catch_stderr()
flask.testsuite.__init__.catch_warnings()
flask.testsuite.__init__.emits_module_deprecation_warning(f)
flask.testsuite.__init__.find_all_tests(suite)
flask.testsuite.__init__.iter_suites()
flask.testsuite.__init__.main()
flask.testsuite.__init__.setup_path()
flask.testsuite.__init__.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/deprecations.py----------------------------------------
A:flask.testsuite.deprecations.suite->unittest.TestSuite()
flask.testsuite.deprecations.DeprecationsTestCase(FlaskTestCase)
flask.testsuite.deprecations.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/appctx.py----------------------------------------
A:flask.testsuite.appctx.app->flask.Flask(__name__)
A:flask.testsuite.appctx.rv->flask.url_for('index')
A:flask.testsuite.appctx.c->flask.Flask(__name__).test_client()
A:flask.testsuite.appctx.suite->unittest.TestSuite()
flask.testsuite.appctx.AppContextTestCase(FlaskTestCase)
flask.testsuite.appctx.AppContextTestCase.test_app_context_provides_current_app(self)
flask.testsuite.appctx.AppContextTestCase.test_app_tearing_down(self)
flask.testsuite.appctx.AppContextTestCase.test_basic_url_generation(self)
flask.testsuite.appctx.AppContextTestCase.test_context_refcounts(self)
flask.testsuite.appctx.AppContextTestCase.test_custom_app_ctx_globals_class(self)
flask.testsuite.appctx.AppContextTestCase.test_request_context_means_app_context(self)
flask.testsuite.appctx.AppContextTestCase.test_url_generation_requires_server_name(self)
flask.testsuite.appctx.AppContextTestCase.test_url_generation_without_context_fails(self)
flask.testsuite.appctx.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/reqctx.py----------------------------------------
A:flask.testsuite.reqctx.app->flask.Flask(__name__)
A:flask.testsuite.reqctx.ctx->flask.Flask(__name__).test_request_context('/?name=World')
A:flask.testsuite.reqctx.reqctx->flask._request_ctx_stack.top.copy()
A:flask.testsuite.reqctx.rv->flask.Flask(__name__).test_client().get('/?foo=bar')
A:flask.testsuite.reqctx.result->greenlets[0].run()
A:flask.testsuite.reqctx.suite->unittest.TestSuite()
flask.testsuite.reqctx.RequestContextTestCase(FlaskTestCase)
flask.testsuite.reqctx.RequestContextTestCase.test_context_binding(self)
flask.testsuite.reqctx.RequestContextTestCase.test_context_test(self)
flask.testsuite.reqctx.RequestContextTestCase.test_greenlet_context_copying(self)
flask.testsuite.reqctx.RequestContextTestCase.test_greenlet_context_copying_api(self)
flask.testsuite.reqctx.RequestContextTestCase.test_manual_context_binding(self)
flask.testsuite.reqctx.RequestContextTestCase.test_proper_test_request_context(self)
flask.testsuite.reqctx.RequestContextTestCase.test_teardown_on_pop(self)
flask.testsuite.reqctx.suite()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/flask_newext_simple.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/config_module_app.py----------------------------------------
A:flask.testsuite.test_apps.config_module_app.here->os.path.abspath(os.path.dirname(__file__))
A:flask.testsuite.test_apps.config_module_app.app->flask.Flask(__name__)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/main_app.py----------------------------------------
A:flask.testsuite.test_apps.main_app.app->flask.Flask('__main__')


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/importerror.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/moduleapp/__init__.py----------------------------------------
A:flask.testsuite.test_apps.moduleapp.__init__.app->Flask(__name__)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/moduleapp/apps/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/moduleapp/apps/frontend/__init__.py----------------------------------------
A:flask.testsuite.test_apps.moduleapp.apps.frontend.__init__.frontend->Module(__name__)
flask.testsuite.test_apps.moduleapp.apps.frontend.__init__.index()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/moduleapp/apps/admin/__init__.py----------------------------------------
A:flask.testsuite.test_apps.moduleapp.apps.admin.__init__.admin->Module(__name__, url_prefix='/admin')
flask.testsuite.test_apps.moduleapp.apps.admin.__init__.index()
flask.testsuite.test_apps.moduleapp.apps.admin.__init__.index2()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/lib/python2.5/site-packages/site_app.py----------------------------------------
A:flask.testsuite.test_apps.lib.python2.5.site-packages.site_app.app->flask.Flask(__name__)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/lib/python2.5/site-packages/site_package/__init__.py----------------------------------------
A:flask.testsuite.test_apps.lib.python2.5.site-packages.site_package.__init__.app->flask.Flask(__name__)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/flask_newext_package/submodule.py----------------------------------------
flask.testsuite.test_apps.flask_newext_package.submodule.test_function()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/flask_newext_package/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/flask_broken/b.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/flask_broken/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/config_package_app/__init__.py----------------------------------------
A:flask.testsuite.test_apps.config_package_app.__init__.here->os.path.abspath(os.path.dirname(__file__))
A:flask.testsuite.test_apps.config_package_app.__init__.app->flask.Flask(__name__)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/flaskext/oldext_simple.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/flaskext/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/flaskext/oldext_package/submodule.py----------------------------------------
flask.testsuite.test_apps.flaskext.oldext_package.submodule.test_function()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/flaskext/oldext_package/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/blueprintapp/__init__.py----------------------------------------
A:flask.testsuite.test_apps.blueprintapp.__init__.app->Flask(__name__)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/blueprintapp/apps/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/blueprintapp/apps/frontend/__init__.py----------------------------------------
A:flask.testsuite.test_apps.blueprintapp.apps.frontend.__init__.frontend->Blueprint('frontend', __name__, template_folder='templates')
flask.testsuite.test_apps.blueprintapp.apps.frontend.__init__.index()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/blueprintapp/apps/admin/__init__.py----------------------------------------
A:flask.testsuite.test_apps.blueprintapp.apps.admin.__init__.admin->Blueprint('admin', __name__, url_prefix='/admin', template_folder='templates', static_folder='static')
flask.testsuite.test_apps.blueprintapp.apps.admin.__init__.index()
flask.testsuite.test_apps.blueprintapp.apps.admin.__init__.index2()


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/subdomaintestmodule/__init__.py----------------------------------------
A:flask.testsuite.test_apps.subdomaintestmodule.__init__.mod->Module(__name__, 'foo', subdomain='foo')


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/testsuite/test_apps/path/installed_package/__init__.py----------------------------------------
A:flask.testsuite.test_apps.path.installed_package.__init__.app->flask.Flask(__name__)


----------------------------------------/home/zhang/Packages/flask/flask0.10.1/ext/__init__.py----------------------------------------
A:flask.ext.__init__.importer->ExtensionImporter(['flask_%s', 'flaskext.%s'], __name__)
flask.ext.__init__.setup()

