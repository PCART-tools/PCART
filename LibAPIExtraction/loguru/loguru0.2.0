
----------------------------------------/home/zhang/Packages/loguru/loguru0.2.0/_datetime.py----------------------------------------
A:loguru._datetime.pattern->re.compile('(?:{0})|\\[(?:{0})\\]'.format(tokens))
A:loguru._datetime.(year, month, day, hour, minute, second, weekday, yearday, _)->self.timetuple()
A:loguru._datetime.timestamp->self.timestamp()
A:loguru._datetime.offset->timezone(timedelta(seconds=local.tm_gmtoff), local.tm_zone).utcoffset(self).total_seconds()
A:loguru._datetime.(h, m)->divmod(abs(offset // 60), 60)
A:loguru._datetime.now->datetime.now()
A:loguru._datetime.local->localtime(now.timestamp())
A:loguru._datetime.tzinfo->timezone(timedelta(seconds=local.tm_gmtoff), local.tm_zone)
loguru._datetime.datetime(datetime_)
loguru._datetime.datetime.__format__(self,spec)
loguru._datetime.now()


----------------------------------------/home/zhang/Packages/loguru/loguru0.2.0/_string_parsers.py----------------------------------------
A:loguru._string_parsers.size->size.strip().strip()
A:loguru._string_parsers.reg->re.compile('^(.*?)\\s+at\\s+(.*)$', flags=re.I)
A:loguru._string_parsers.match->re.compile('^(.*?)\\s+at\\s+(.*)$', flags=re.I).match(daytime)
A:loguru._string_parsers.(s, u, i, b)->re.compile('^(.*?)\\s+at\\s+(.*)$', flags=re.I).match(daytime).groups()
A:loguru._string_parsers.s->float(s)
A:loguru._string_parsers.duration->duration.strip().strip()
A:loguru._string_parsers.value->float(value)
A:loguru._string_parsers.unit->next((u for (r, u) in units if re.fullmatch(r, unit, flags=re.I)))
A:loguru._string_parsers.frequency->frequency.strip().lower().strip().lower()
A:loguru._string_parsers.day->parse_day(day)
A:loguru._string_parsers.time->parse_time(time)
A:loguru._string_parsers.dt->datetime.datetime.strptime(time, format_)
A:loguru._string_parsers.daytime->daytime.strip().strip()
A:loguru._string_parsers.(day, time)->re.compile('^(.*?)\\s+at\\s+(.*)$', flags=re.I).match(daytime).groups()
loguru._string_parsers.parse_day(day)
loguru._string_parsers.parse_daytime(daytime)
loguru._string_parsers.parse_duration(duration)
loguru._string_parsers.parse_frequency(frequency)
loguru._string_parsers.parse_size(size)
loguru._string_parsers.parse_time(time)


----------------------------------------/home/zhang/Packages/loguru/loguru0.2.0/_logger.py----------------------------------------
A:loguru._logger.Level->namedtuple('Level', ['no', 'color', 'icon'])
A:loguru._logger.start_time->now()
A:loguru._logger._handlers_count->itertools.count()
A:loguru._logger._min_level->float('inf')
A:loguru._logger._lock->threading.Lock()
A:loguru._logger.sink->FileSink(path, **kwargs)
A:loguru._logger.converter->AnsiToWin32(sink, convert=None, strip=False)
A:loguru._logger.isatty->AnsiToWin32(sink, convert=None, strip=False).stream.isatty()
A:loguru._logger.record->logging.root.makeRecord(r['name'], r['level'].no, r['file'].path, r['line'], r['message'], (), (exc.type, exc.value, exc.traceback) if exc else None, r['function'], r['extra'], **kwargs)
A:loguru._logger.length->len(parent)
A:loguru._logger.handler->self._handlers.pop(handler_id)
A:loguru._logger.handler_id->next(self._handlers_count)
A:loguru._logger.self.__class__._min_level->min(levelnos, default=float('inf'))
A:loguru._logger.logger_->self.opt(exception=True, record=True, lazy=self._lazy, ansi=self._ansi, raw=self._raw, depth=self._depth + back)
A:loguru._logger.log->self.opt(exception=True, record=True, lazy=self._lazy, ansi=self._ansi, raw=self._raw, depth=self._depth + back)._make_log_function(level, decorator)
A:loguru._logger.catcher->Catcher(True)
A:loguru._logger.(old_no, old_color, old_icon)->self.level(name)
A:loguru._logger.self._levels[name]->Level(no, color, icon)
A:loguru._logger.parent_status->next((s for (n, s) in activation_list if name[:len(n)] == n), None)
A:loguru._logger.fileobj->open(str(file))
A:loguru._logger.groups[key]->converter(groups[key])
A:loguru._logger.regex->re.compile(pattern)
A:loguru._logger.matches->list(regex.finditer(buffer))
A:loguru._logger.groups->match.groupdict()
A:loguru._logger.buffer->open(str(file)).read(0)
A:loguru._logger.text->open(str(file)).read(chunk)
A:loguru._logger.end->matches[-2].end()
A:loguru._logger.frame->get_frame(_self._depth + 1)
A:loguru._logger.current_datetime->now()
A:loguru._logger.file_path->normcase(code.co_filename)
A:loguru._logger.file_name->basename(file_path)
A:loguru._logger.thread->current_thread()
A:loguru._logger.process->current_process()
A:loguru._logger.level_recattr->LevelRecattr(level_name)
A:loguru._logger.file_recattr->FileRecattr(file_name)
A:loguru._logger.thread_recattr->ThreadRecattr(thread_ident)
A:loguru._logger.process_recattr->ProcessRecattr(process_ident)
A:loguru._logger.exception->ExceptionRecattr(_self._exception, decorated)
A:loguru._logger.record['message']->_message.format(*args, **kwargs)
A:loguru._logger.trace->_make_log_function.__func__('TRACE')
A:loguru._logger.debug->_make_log_function.__func__('DEBUG')
A:loguru._logger.info->_make_log_function.__func__('INFO')
A:loguru._logger.success->_make_log_function.__func__('SUCCESS')
A:loguru._logger.warning->_make_log_function.__func__('WARNING')
A:loguru._logger.error->_make_log_function.__func__('ERROR')
A:loguru._logger.critical->_make_log_function.__func__('CRITICAL')
A:loguru._logger.logger->_self.opt(exception=True, record=_self._record, lazy=_self._lazy, ansi=_self._ansi, raw=_self._raw, depth=_self._depth + 1)
loguru._Logger(self,extra,exception,record,lazy,ansi,raw,depth)
loguru._Logger._change_activation(self,name,status)
loguru._Logger._find_iter(fileobj,regex,chunk)
loguru._Logger._make_log_function(level,decorated=False)
loguru._Logger.bind(_self,**kwargs)
loguru._Logger.catch(self,exception=Exception,*,level='ERROR',reraise=False,message="Anerrorhasbeencaughtinfunction'{record[function]}',process'{record[process].name}'({record[process].id}),thread'{record[thread].name}'({record[thread].id}):")
loguru._Logger.configure(self,*,handlers=None,levels=None,extra=None,activation=None)
loguru._Logger.disable(self,name)
loguru._Logger.enable(self,name)
loguru._Logger.exception(_self,_message,*args,**kwargs)
loguru._Logger.level(self,name,no=None,color=None,icon=None)
loguru._Logger.log(_self,_level,_message,*args,**kwargs)
loguru._Logger.opt(self,*,exception=None,record=False,lazy=False,ansi=False,raw=False,depth=0)
loguru._Logger.parse(file,pattern,*,cast={},chunk=2**16)
loguru._Logger.start(self,sink,*,level=_defaults.LOGURU_LEVEL,format=_defaults.LOGURU_FORMAT,filter=_defaults.LOGURU_FILTER,colorize=_defaults.LOGURU_COLORIZE,serialize=_defaults.LOGURU_SERIALIZE,backtrace=_defaults.LOGURU_BACKTRACE,enqueue=_defaults.LOGURU_ENQUEUE,catch=_defaults.LOGURU_CATCH,**kwargs)
loguru._Logger.stop(self,handler_id=None)
loguru._logger.Logger(self,extra,exception,record,lazy,ansi,raw,depth)
loguru._logger.Logger.__init__(self,extra,exception,record,lazy,ansi,raw,depth)
loguru._logger.Logger._change_activation(self,name,status)
loguru._logger.Logger._find_iter(fileobj,regex,chunk)
loguru._logger.Logger._make_log_function(level,decorated=False)
loguru._logger.Logger.bind(_self,**kwargs)
loguru._logger.Logger.catch(self,exception=Exception,*,level='ERROR',reraise=False,message="Anerrorhasbeencaughtinfunction'{record[function]}',process'{record[process].name}'({record[process].id}),thread'{record[thread].name}'({record[thread].id}):")
loguru._logger.Logger.configure(self,*,handlers=None,levels=None,extra=None,activation=None)
loguru._logger.Logger.disable(self,name)
loguru._logger.Logger.enable(self,name)
loguru._logger.Logger.exception(_self,_message,*args,**kwargs)
loguru._logger.Logger.level(self,name,no=None,color=None,icon=None)
loguru._logger.Logger.log(_self,_level,_message,*args,**kwargs)
loguru._logger.Logger.opt(self,*,exception=None,record=False,lazy=False,ansi=False,raw=False,depth=0)
loguru._logger.Logger.parse(file,pattern,*,cast={},chunk=2**16)
loguru._logger.Logger.start(self,sink,*,level=_defaults.LOGURU_LEVEL,format=_defaults.LOGURU_FORMAT,filter=_defaults.LOGURU_FILTER,colorize=_defaults.LOGURU_COLORIZE,serialize=_defaults.LOGURU_SERIALIZE,backtrace=_defaults.LOGURU_BACKTRACE,enqueue=_defaults.LOGURU_ENQUEUE,catch=_defaults.LOGURU_CATCH,**kwargs)
loguru._logger.Logger.stop(self,handler_id=None)


----------------------------------------/home/zhang/Packages/loguru/loguru0.2.0/_recattrs.py----------------------------------------
A:loguru._recattrs.loguru_traceback->namedtuple('loguru_traceback', ('tb_frame', 'tb_lasti', 'tb_lineno', 'tb_next'))
A:loguru._recattrs.loguru_frame->namedtuple('loguru_frame', ('f_back', 'f_builtins', 'f_code', 'f_globals', 'f_lasti', 'f_lineno', 'f_locals', 'f_trace'))
A:loguru._recattrs.loguru_code->namedtuple('loguru_code', ('co_argcount', 'co_code', 'co_cellvars', 'co_consts', 'co_filename', 'co_firstlineno', 'co_flags', 'co_lnotab', 'co_freevars', 'co_kwonlyargcount', 'co_name', 'co_names', 'co_nlocals', 'co_stacksize', 'co_varnames'))
A:loguru._recattrs.(type_, value, traceback)->sys.exc_info()
A:loguru._recattrs.self._extended_traceback->self._extend_traceback(traceback, decorated)
A:loguru._recattrs.tb->loguru_traceback(frame, lasti, lineno, next_)
A:loguru._recattrs.code->loguru_code(c.co_argcount, c.co_code, c.co_cellvars, c.co_consts, c.co_filename, c.co_firstlineno, c.co_flags, c.co_lnotab, c.co_freevars, c.co_kwonlyargcount, c.co_name + self._catch_point_identifier, c.co_names, c.co_nlocals, c.co_stacksize, c.co_varnames)
A:loguru._recattrs.frame->loguru_frame(f.f_back, f.f_builtins, code, f.f_globals, f.f_lasti, f.f_lineno, f.f_locals, f.f_trace)
A:loguru._recattrs.error->''.join(error)
A:loguru._recattrs.formatter->ExceptionFormatter(colored=False, encoding=encoding)
loguru._recattrs.ExceptionRecattr(self,exception,decorated)
loguru._recattrs.ExceptionRecattr.__init__(self,exception,decorated)
loguru._recattrs.ExceptionRecattr.__reduce__(self)
loguru._recattrs.ExceptionRecattr._extend_traceback(self,tb,decorated)
loguru._recattrs.ExceptionRecattr._format_catch_point(self,error)
loguru._recattrs.ExceptionRecattr._make_catch_traceback(self,frame,lasti,lineno,next_)
loguru._recattrs.ExceptionRecattr.format_exception(self,backtrace,colored,encoding)
loguru._recattrs.FileRecattr(str)
loguru._recattrs.LevelRecattr(str)
loguru._recattrs.ProcessRecattr(str)
loguru._recattrs.ThreadRecattr(str)


----------------------------------------/home/zhang/Packages/loguru/loguru0.2.0/_defaults.py----------------------------------------
A:loguru._defaults.LOGURU_AUTOINIT->env('LOGURU_AUTOINIT', bool, True)
A:loguru._defaults.LOGURU_FORMAT->env('LOGURU_FORMAT', str, '<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>')
A:loguru._defaults.LOGURU_FILTER->env('LOGURU_FILTER', str, None)
A:loguru._defaults.LOGURU_LEVEL->env('LOGURU_LEVEL', str, 'DEBUG')
A:loguru._defaults.LOGURU_COLORIZE->env('LOGURU_COLORIZE', bool, None)
A:loguru._defaults.LOGURU_SERIALIZE->env('LOGURU_SERIALIZE', bool, False)
A:loguru._defaults.LOGURU_BACKTRACE->env('LOGURU_BACKTRACE', bool, True)
A:loguru._defaults.LOGURU_ENQUEUE->env('LOGURU_ENQUEUE', bool, False)
A:loguru._defaults.LOGURU_CATCH->env('LOGURU_CATCH', bool, True)
A:loguru._defaults.LOGURU_TRACE_NO->env('LOGURU_TRACE_NO', int, 5)
A:loguru._defaults.LOGURU_TRACE_COLOR->env('LOGURU_TRACE_COLOR', str, '<cyan><bold>')
A:loguru._defaults.LOGURU_TRACE_ICON->env('LOGURU_TRACE_ICON', str, '✏️')
A:loguru._defaults.LOGURU_DEBUG_NO->env('LOGURU_DEBUG_NO', int, 10)
A:loguru._defaults.LOGURU_DEBUG_COLOR->env('LOGURU_DEBUG_COLOR', str, '<blue><bold>')
A:loguru._defaults.LOGURU_DEBUG_ICON->env('LOGURU_DEBUG_ICON', str, '🐞')
A:loguru._defaults.LOGURU_INFO_NO->env('LOGURU_INFO_NO', int, 20)
A:loguru._defaults.LOGURU_INFO_COLOR->env('LOGURU_INFO_COLOR', str, '<bold>')
A:loguru._defaults.LOGURU_INFO_ICON->env('LOGURU_INFO_ICON', str, 'ℹ️')
A:loguru._defaults.LOGURU_SUCCESS_NO->env('LOGURU_SUCCESS_NO', int, 25)
A:loguru._defaults.LOGURU_SUCCESS_COLOR->env('LOGURU_SUCCESS_COLOR', str, '<green><bold>')
A:loguru._defaults.LOGURU_SUCCESS_ICON->env('LOGURU_SUCCESS_ICON', str, '✔️')
A:loguru._defaults.LOGURU_WARNING_NO->env('LOGURU_WARNING_NO', int, 30)
A:loguru._defaults.LOGURU_WARNING_COLOR->env('LOGURU_WARNING_COLOR', str, '<yellow><bold>')
A:loguru._defaults.LOGURU_WARNING_ICON->env('LOGURU_WARNING_ICON', str, '⚠️')
A:loguru._defaults.LOGURU_ERROR_NO->env('LOGURU_ERROR_NO', int, 40)
A:loguru._defaults.LOGURU_ERROR_COLOR->env('LOGURU_ERROR_COLOR', str, '<red><bold>')
A:loguru._defaults.LOGURU_ERROR_ICON->env('LOGURU_ERROR_ICON', str, '❌')
A:loguru._defaults.LOGURU_CRITICAL_NO->env('LOGURU_CRITICAL_NO', int, 50)
A:loguru._defaults.LOGURU_CRITICAL_COLOR->env('LOGURU_CRITICAL_COLOR', str, '<RED><bold>')
A:loguru._defaults.LOGURU_CRITICAL_ICON->env('LOGURU_CRITICAL_ICON', str, '☠️')
loguru._defaults.env(key,type_,default=None)


----------------------------------------/home/zhang/Packages/loguru/loguru0.2.0/_handler.py----------------------------------------
A:loguru._handler.self.lock->threading.Lock()
A:loguru._handler.self.decolorized_format->self.decolorize_format(self.static_format)
A:loguru._handler.self.queue->multiprocessing.SimpleQueue()
A:loguru._handler.self.thread->threading.Thread(target=self.queued_writer, daemon=True)
A:loguru._handler.color->ansimarkup.parse(color)
A:loguru._handler.custom_markup->dict(level=color, lvl=color)
A:loguru._handler.am->Handler.make_ansimarkup(color)
A:loguru._handler.self.precolorized_formats[color]->self.colorize_format(self.static_format, color)
A:loguru._handler.formatter->string.Formatter()
A:loguru._handler.literal_text->literal_text.replace('{', '{{').replace('}', '}}').replace('{', '{{').replace('}', '}}')
A:loguru._handler.value->string.Formatter().format_field(value, format_spec)
A:loguru._handler.(ex_type, ex, tb)->sys.exc_info()
A:loguru._handler.format_->self.format_message_only(format_, message)
A:loguru._handler.precomputed_format->self.decolorize_format(self.formatter(record))
A:loguru._handler.record['message']->self.decolorize_format(message)
A:loguru._handler.error->record['exception'].format_exception(self.backtrace, self.colorize, self.encoding)
A:loguru._handler.formatted->self.serialize_record(formatted, record)
A:loguru._handler.str_record->StrRecord(formatted)
A:loguru._handler.message->queue.get()
loguru._handler.Handler(self,*,writer,stopper,levelno,formatter,is_formatter_dynamic,filter_,colorize,serialize,backtrace,catch,enqueue,encoding,colors=[])
loguru._handler.Handler.__init__(self,*,writer,stopper,levelno,formatter,is_formatter_dynamic,filter_,colorize,serialize,backtrace,catch,enqueue,encoding,colors=[])
loguru._handler.Handler.colorize_format(format_,color)
loguru._handler.Handler.decolorize_format(format_)
loguru._handler.Handler.emit(self,record,level_color,ansi_message,raw)
loguru._handler.Handler.format_message_only(format_,message)
loguru._handler.Handler.handle_error(self,record=None)
loguru._handler.Handler.make_ansimarkup(color)
loguru._handler.Handler.queued_writer(self)
loguru._handler.Handler.serialize_record(text,record)
loguru._handler.Handler.stop(self)
loguru._handler.Handler.update_format(self,color)
loguru._handler.StrRecord(str)


----------------------------------------/home/zhang/Packages/loguru/loguru0.2.0/__init__.py----------------------------------------
A:loguru.__init__.logger->_Logger({}, None, False, False, False, False, 0)


----------------------------------------/home/zhang/Packages/loguru/loguru0.2.0/_file_sink.py----------------------------------------
A:loguru._file_sink.self.datetime->now()
A:loguru._file_sink.self.kwargs->kwargs.copy()
A:loguru._file_sink.self.path->str(path)
A:loguru._file_sink.self.rotation_function->self.make_rotation_function(rotation)
A:loguru._file_sink.self.retention_function->self.make_retention_function(retention)
A:loguru._file_sink.self.compression_function->self.make_compression_function(compression)
A:loguru._file_sink.self.glob_pattern->self.make_glob_pattern(self.path)
A:loguru._file_sink.new_path->self.format_path()
A:loguru._file_sink.new_dir->os.path.dirname(new_path)
A:loguru._file_sink.(root, ext)->os.path.splitext(''.join(parts))
A:loguru._file_sink.renamed_path->renamed_template.format(root, date, ext_before, ext)
A:loguru._file_sink.self.file->open(new_path, mode=self.mode, buffering=self.buffering, encoding=self.encoding, **self.kwargs)
A:loguru._file_sink.path->self.path.format_map({'time': FileDateFormatter()})
A:loguru._file_sink.tokens->string.Formatter().parse(path)
A:loguru._file_sink.start_timetime_limit->now().replace(tzinfo=None)
A:loguru._file_sink.time_limit->step_forward(time_limit)
A:loguru._file_sink.record_time->message.record['time'].replace(tzinfo=None)
A:loguru._file_sink.size->string_parsers.parse_size(rotation)
A:loguru._file_sink.interval->string_parsers.parse_duration(retention)
A:loguru._file_sink.frequency->string_parsers.parse_frequency(rotation)
A:loguru._file_sink.daytime->string_parsers.parse_daytime(rotation)
A:loguru._file_sink.time->datetime.time(0, 0, 0)
A:loguru._file_sink.seconds->retention.total_seconds()
A:loguru._file_sink.t->now().timestamp()
A:loguru._file_sink.ext->compression.strip().lstrip('.')
A:loguru._file_sink.compress->make_compress_zipped()
A:loguru._file_sink.path_out->'{}.{}'.format(path_in, ext)
A:loguru._file_sink.(root, ext_before)->os.path.splitext(path_in)
A:loguru._file_sink.date->FileDateFormatter()
A:loguru._file_sink.logs->glob.glob(self.glob_pattern)
loguru._file_sink.FileDateFormatter(self)
loguru._file_sink.FileDateFormatter.__format__(self,spec)
loguru._file_sink.FileDateFormatter.__init__(self)
loguru._file_sink.FileSink(self,path,*,rotation=None,retention=None,compression=None,delay=False,mode='a',buffering=1,encoding=None,**kwargs)
loguru._file_sink.FileSink.__init__(self,path,*,rotation=None,retention=None,compression=None,delay=False,mode='a',buffering=1,encoding=None,**kwargs)
loguru._file_sink.FileSink.delayed_write(self,message)
loguru._file_sink.FileSink.format_path(self)
loguru._file_sink.FileSink.initialize_file(self,*,rename_existing)
loguru._file_sink.FileSink.make_compression_function(self,compression)
loguru._file_sink.FileSink.make_glob_pattern(path)
loguru._file_sink.FileSink.make_retention_function(self,retention)
loguru._file_sink.FileSink.make_rotation_function(self,rotation)
loguru._file_sink.FileSink.rotating_write(self,message)
loguru._file_sink.FileSink.setup_write_function(self)
loguru._file_sink.FileSink.stop(self)
loguru._file_sink.FileSink.terminate(self,*,teardown)


----------------------------------------/home/zhang/Packages/loguru/loguru0.2.0/_get_frame.py----------------------------------------
A:loguru._get_frame.get_frame->get_get_frame_function()
loguru._get_frame.get_frame_fallback(n)
loguru._get_frame.get_get_frame_function()

