
----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/__init__.py----------------------------------------
A:polars.__init__.__version__->version()


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/_html.py----------------------------------------
A:polars._html.self.row_idx->range(0, df.height)
A:polars._html.self.col_idx->range(0, df.width)
A:polars._html.dtypes->self.df._df.dtype_strings()
A:polars._html.str_lengths->int(os.environ.get('POLARS_FMT_STR_LEN', '15'))
A:polars._html.template_mid->'\n\n'.join((template_select % t for t in element_props))
A:polars._html.template->dedent('\n'.join((template_first, template_mid, template_last)))
polars._html.HTMLFormatter(self,df:DataFrame,max_cols:int=75,max_rows:int=40)
polars._html.HTMLFormatter.__init__(self,df:DataFrame,max_cols:int=75,max_rows:int=40)
polars._html.HTMLFormatter.render(self)->list[str]
polars._html.HTMLFormatter.write(self,inner:str)->None
polars._html.HTMLFormatter.write_body(self)->None
polars._html.HTMLFormatter.write_header(self)->None
polars._html.NotebookFormatter(HTMLFormatter)
polars._html.NotebookFormatter.render(self)->list[str]
polars._html.NotebookFormatter.write_style(self)->None
polars._html.Tag(self,elements:list[str],tag:str,attributes:dict[str,str]|None=None)
polars._html.Tag.__enter__(self)->None
polars._html.Tag.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars._html.Tag.__init__(self,elements:list[str],tag:str,attributes:dict[str,str]|None=None)
polars._html.in_vscode_notebook()->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/datatypes_constructor.py----------------------------------------
polars.datatypes_constructor.numpy_type_to_constructor(dtype:type[np.dtype[Any]])->Callable[..., PySeries]
polars.datatypes_constructor.polars_type_to_constructor(dtype:PolarsDataType)->Callable[[str, Sequence[Any], bool], PySeries]
polars.datatypes_constructor.py_type_to_constructor(dtype:type[Any])->Callable[..., PySeries]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/utils.py----------------------------------------
A:polars.utils.dt->datetime.datetime.utcfromtimestamp(value / 1000)
A:polars.utils.EPOCH->datetime(1970, 1, 1).replace(tzinfo=None)
A:polars.utils.P->ParamSpec('P')
A:polars.utils.T->TypeVar('T')
A:polars.utils.kwargs[new]->kwargs.pop(alias)
polars.threadpool_size()->int
polars.utils._date_to_pl_date(d:date)->int
polars.utils._datetime_to_pl_timestamp(dt:datetime,tu:TimeUnit|None)->int
polars.utils._in_notebook()->bool
polars.utils._is_iterable_of(val:Iterable[object],eltype:type)->bool
polars.utils._prepare_row_count_args(row_count_name:str|None=None,row_count_offset:int=0)->tuple[str, int] | None
polars.utils._process_null_values(null_values:None|str|list[str]|dict[str,str]=None)->None | str | list[str] | list[tuple[str, str]]
polars.utils._rename_kwargs(func_name:str,kwargs:dict[str,object],aliases:dict[str,str])->None
polars.utils._timedelta_to_pl_duration(td:timedelta)->str
polars.utils._timedelta_to_pl_timedelta(td:timedelta,tu:TimeUnit|None=None)->int
polars.utils._to_python_datetime(value:int|float,dtype:type[DataType],tu:TimeUnit|None='ns',tz:str|None=None)->date | datetime
polars.utils._to_python_time(value:int)->time
polars.utils._to_python_timedelta(value:int|float,tu:TimeUnit='ns')->timedelta
polars.utils.deprecated_alias(**aliases:str)->Callable[[Callable[P, T]], Callable[P, T]]
polars.utils.format_path(path:str|Path)->str
polars.utils.handle_projection_columns(columns:list[str]|list[int]|None)->tuple[list[int] | None, list[str] | None]
polars.utils.is_bool_sequence(val:object)->TypeGuard[Sequence[bool]]
polars.utils.is_expr_sequence(val:object)->TypeGuard[Sequence[pli.Expr]]
polars.utils.is_int_sequence(val:object)->TypeGuard[Sequence[int]]
polars.utils.is_pyexpr_sequence(val:object)->TypeGuard[Sequence[PyExpr]]
polars.utils.is_str_sequence(val:object,*,allow_str:bool=False)->TypeGuard[Sequence[str]]
polars.utils.range_to_slice(rng:range)->slice
polars.utils.scale_bytes(sz:int,to:SizeUnit)->int | float
polars.utils.threadpool_size()->int


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/exceptions.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/testing.py----------------------------------------
A:polars.testing.union_cols->list(set(left.columns).union(set(right.columns)))
A:polars.testing.can_be_subtracted->hasattr(dtype_to_py_type(left.dtype), '__sub__')
A:polars.testing.op_list->op.split('.')
A:polars.testing.expr->_getattr_multi(pli.col('*'), op)(*args, **kwargs)
A:polars.testing.result_series->_getattr_multi(input, op)(*args, **kwargs)
A:polars.testing.strategy_dtypes->list(dtype_strategy_mapping)
A:polars.testing.self.dtype->py_type_to_dtype(sample_value_type)
A:polars.testing.sample_value_type->type(next((e for e in sample_value_iter if e is not None)))
A:polars.testing.cols->columns(cols)
A:polars.testing.names->list(cols)
A:polars.testing.dtypes->list(dtype)
A:polars.testing.null_probability->float(null_probability or 0.0)
A:polars.testing.series_values->draw(lists(dtype_strategy, min_size=series_size, max_size=series_size, unique=unique))
A:polars.testing.s->s.cast(Categorical).cast(Categorical)
A:polars.testing.n->between(draw, int, min_=min_cols or 0, max_=max_cols or MAX_COLS)
A:polars.testing.coldefs->list(cols)
A:polars.testing.c.null_probability->float(null_probability or 0.0).get(c.name, 0.0)
A:polars.testing.df->polars.internals.DataFrame(data={c.name: draw(series(name=c.name, dtype=c.dtype, size=series_size, null_probability=c.null_probability or 0.0, strategy=c.strategy, unique=c.unique)) for c in coldefs}, columns=frame_columns)
A:polars.testing.cat_to_str->polars.internals.col(Categorical).cast(str)
A:polars.testing.cat_to_phys->polars.internals.col(Categorical).to_physical()
polars.testing._assert_series_inner(left:pli.Series,right:pli.Series,check_dtype:bool,check_exact:bool,nans_compare_equal:bool,atol:float,rtol:float,obj:str)->None
polars.testing._getattr_multi(obj:object,op:str)->Any
polars.testing.assert_frame_equal(left:pli.DataFrame|pli.LazyFrame,right:pli.DataFrame|pli.LazyFrame,check_dtype:bool=True,check_exact:bool=False,check_column_names:bool=True,rtol:float=1e-05,atol:float=1e-08,nans_compare_equal:bool=True)->None
polars.testing.assert_frame_equal_local_categoricals(df_a:pli.DataFrame,df_b:pli.DataFrame)->None
polars.testing.assert_series_equal(left:pli.Series,right:pli.Series,check_dtype:bool=True,check_names:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,nans_compare_equal:bool=True)->None
polars.testing.is_categorical_dtype(data_type:Any)->bool
polars.testing.raise_assert_detail(obj:str,message:str,left:Any,right:Any)->None
polars.testing.verify_series_and_expr_api(input:pli.Series,expected:pli.Series|None,op:str,*args:Any,**kwargs:Any)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/string_cache.py----------------------------------------
polars.StringCache(self)
polars.StringCache.__enter__(self)->StringCache
polars.StringCache.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.string_cache.StringCache(self)
polars.string_cache.StringCache.__enter__(self)->StringCache
polars.string_cache.StringCache.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.string_cache.StringCache.__init__(self)
polars.string_cache.toggle_string_cache(toggle:bool)->None
polars.toggle_string_cache(toggle:bool)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/show_versions.py----------------------------------------
A:polars.show_versions.deps->_get_dependency_info()
A:polars.show_versions.module->importlib.import_module(dep_name)
polars.show_versions()->None
polars.show_versions._get_dep_version(dep_name:str)->str
polars.show_versions._get_dependency_info()->dict[str, str]
polars.show_versions.show_versions()->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/cfg.py----------------------------------------
A:polars.cfg.os.environ['POLARS_TABLE_WIDTH']->str(width)
A:polars.cfg.os.environ['POLARS_FMT_MAX_ROWS']->str(n)
A:polars.cfg.os.environ['POLARS_FMT_MAX_COLS']->str(n)
A:polars.cfg.os.environ['POLARS_FMT_STR_LEN']->str(n)
polars.Config
polars.Config.set_ascii_tables(cls)->type[Config]
polars.Config.set_fmt_str_lengths(cls,n:int)->type[Config]
polars.Config.set_global_string_cache(cls)->type[Config]
polars.Config.set_tbl_cols(cls,n:int)->type[Config]
polars.Config.set_tbl_rows(cls,n:int)->type[Config]
polars.Config.set_tbl_width_chars(cls,width:int)->type[Config]
polars.Config.set_utf8_tables(cls)->type[Config]
polars.Config.unset_global_string_cache(cls)->type[Config]
polars.cfg.Config
polars.cfg.Config.set_ascii_tables(cls)->type[Config]
polars.cfg.Config.set_fmt_str_lengths(cls,n:int)->type[Config]
polars.cfg.Config.set_global_string_cache(cls)->type[Config]
polars.cfg.Config.set_tbl_cols(cls,n:int)->type[Config]
polars.cfg.Config.set_tbl_rows(cls,n:int)->type[Config]
polars.cfg.Config.set_tbl_width_chars(cls,width:int)->type[Config]
polars.cfg.Config.set_utf8_tables(cls)->type[Config]
polars.cfg.Config.unset_global_string_cache(cls)->type[Config]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/datatypes.py----------------------------------------
A:polars.datatypes.self.inner->py_type_to_dtype(inner)
A:polars.datatypes.self.dtype->py_type_to_dtype(dtype)
A:polars.datatypes.dtype_str->repr(self.dtype)
A:polars.datatypes.py_type->dtype_to_py_type(dtype)
A:polars.datatypes.el->py_type(el)
polars.Boolean(DataType)
polars.Categorical(DataType)
polars.DataType(cls,*args:Any,**kwargs:Any)
polars.DataType.__repr__(self)->str
polars.DataType.string_repr(cls)->str
polars.Date(DataType)
polars.Datetime(self,time_unit:TimeUnit='us',time_zone:str|None=None)
polars.Datetime.__eq__(self,other:type[DataType])->bool
polars.Datetime.__hash__(self)->int
polars.Duration(self,time_unit:TimeUnit='us')
polars.Duration.__eq__(self,other:type[DataType])->bool
polars.Duration.__hash__(self)->int
polars.Field(self,name:str,dtype:type[DataType])
polars.Field.__eq__(self,other:Field)->bool
polars.Field.__repr__(self)->str
polars.Float32(DataType)
polars.Float64(DataType)
polars.Int16(DataType)
polars.Int32(DataType)
polars.Int64(DataType)
polars.Int8(DataType)
polars.List(self,inner:type[DataType])
polars.List.__eq__(self,other:type[DataType])->bool
polars.List.__hash__(self)->int
polars.Null(DataType)
polars.Object(DataType)
polars.Struct(self,fields:Sequence[Field])
polars.Struct.__eq__(self,other:type[DataType])->bool
polars.Struct.__hash__(self)->int
polars.Time(DataType)
polars.UInt16(DataType)
polars.UInt32(DataType)
polars.UInt64(DataType)
polars.UInt8(DataType)
polars.Utf8(DataType)
polars.datatypes.Boolean(DataType)
polars.datatypes.Categorical(DataType)
polars.datatypes.DataType(cls,*args:Any,**kwargs:Any)
polars.datatypes.DataType.__new__(cls,*args:Any,**kwargs:Any)
polars.datatypes.DataType.__repr__(self)->str
polars.datatypes.DataType.string_repr(cls)->str
polars.datatypes.Date(DataType)
polars.datatypes.Datetime(self,time_unit:TimeUnit='us',time_zone:str|None=None)
polars.datatypes.Datetime.__eq__(self,other:type[DataType])->bool
polars.datatypes.Datetime.__hash__(self)->int
polars.datatypes.Datetime.__init__(self,time_unit:TimeUnit='us',time_zone:str|None=None)
polars.datatypes.Duration(self,time_unit:TimeUnit='us')
polars.datatypes.Duration.__eq__(self,other:type[DataType])->bool
polars.datatypes.Duration.__hash__(self)->int
polars.datatypes.Duration.__init__(self,time_unit:TimeUnit='us')
polars.datatypes.Field(self,name:str,dtype:type[DataType])
polars.datatypes.Field.__eq__(self,other:Field)->bool
polars.datatypes.Field.__init__(self,name:str,dtype:type[DataType])
polars.datatypes.Field.__repr__(self)->str
polars.datatypes.Float32(DataType)
polars.datatypes.Float64(DataType)
polars.datatypes.Int16(DataType)
polars.datatypes.Int32(DataType)
polars.datatypes.Int64(DataType)
polars.datatypes.Int8(DataType)
polars.datatypes.List(self,inner:type[DataType])
polars.datatypes.List.__eq__(self,other:type[DataType])->bool
polars.datatypes.List.__hash__(self)->int
polars.datatypes.List.__init__(self,inner:type[DataType])
polars.datatypes.Null(DataType)
polars.datatypes.Object(DataType)
polars.datatypes.Struct(self,fields:Sequence[Field])
polars.datatypes.Struct.__eq__(self,other:type[DataType])->bool
polars.datatypes.Struct.__hash__(self)->int
polars.datatypes.Struct.__init__(self,fields:Sequence[Field])
polars.datatypes.Time(DataType)
polars.datatypes.UInt16(DataType)
polars.datatypes.UInt32(DataType)
polars.datatypes.UInt64(DataType)
polars.datatypes.UInt8(DataType)
polars.datatypes.Utf8(DataType)
polars.datatypes.dtype_to_arrow_type(dtype:PolarsDataType)->pa.lib.DataType
polars.datatypes.dtype_to_ctype(dtype:PolarsDataType)->type[_SimpleCData]
polars.datatypes.dtype_to_ffiname(dtype:PolarsDataType)->str
polars.datatypes.dtype_to_py_type(dtype:PolarsDataType)->type
polars.datatypes.get_idx_type()->type[DataType]
polars.datatypes.is_polars_dtype(data_type:Any)->bool
polars.datatypes.maybe_cast(el:type[DataType],dtype:type,time_unit:TimeUnit|None=None)->type[DataType]
polars.datatypes.numpy_char_code_to_dtype(dtype:str)->type[DataType]
polars.datatypes.py_type_to_arrow_type(dtype:type[Any])->pa.lib.DataType
polars.datatypes.py_type_to_dtype(data_type:Any)->PolarsDataType
polars.datatypes.supported_numpy_char_code(dtype:str)->bool
polars.get_idx_type()->type[DataType]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/io.py----------------------------------------
A:polars.io.arg_byte_length->len(arg.encode('utf-8'))
A:polars.io.(projection, columns)->handle_projection_columns(columns)
A:polars.io.tbl->connectorx.read_sql(conn=connection_uri, query=sql, return_type='arrow2', partition_on=partition_on, partition_range=partition_range, partition_num=partition_num, protocol=protocol)
A:polars.io.df->df.slice(0, n_rows).slice(0, n_rows)
A:polars.io.file->format_path(file)
A:polars.io.csv_buffer->StringIO()
polars.io._check_arg_is_1byte(arg_name:str,arg:str|None,can_be_empty:bool=False)->None
polars.io._update_columns(df:DataFrame,new_columns:list[str])->DataFrame
polars.io.read_avro(file:str|Path|BytesIO|BinaryIO,columns:list[int]|list[str]|None=None,n_rows:int|None=None)->DataFrame
polars.io.read_csv(file:str|TextIO|BytesIO|Path|BinaryIO|bytes,has_header:bool=True,columns:list[int]|list[str]|None=None,new_columns:list[str]|None=None,sep:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:Mapping[str,type[DataType]]|list[type[DataType]]|None=None,null_values:str|list[str]|dict[str,str]|None=None,ignore_errors:bool=False,parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=100,batch_size:int=8192,n_rows:int|None=None,encoding:CsvEncoding|str='utf8',low_memory:bool=False,rechunk:bool=True,use_pyarrow:bool=False,storage_options:dict[str,object]|None=None,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,sample_size:int=1024,eol_char:str='\n')->DataFrame
polars.io.read_excel(file:str|BytesIO|Path|BinaryIO|bytes,sheet_id:int|None=1,sheet_name:str|None=None,xlsx2csv_options:dict[str,object]|None=None,read_csv_options:dict[str,object]|None=None)->DataFrame
polars.io.read_ipc(file:str|BinaryIO|BytesIO|Path|bytes,columns:list[int]|list[str]|None=None,n_rows:int|None=None,use_pyarrow:bool=False,memory_map:bool=True,storage_options:dict[str,object]|None=None,row_count_name:str|None=None,row_count_offset:int=0,rechunk:bool=True)->DataFrame
polars.io.read_json(source:str|IOBase,json_lines:bool=False)->DataFrame
polars.io.read_parquet(source:str|Path|BinaryIO|BytesIO|bytes,columns:list[int]|list[str]|None=None,n_rows:int|None=None,use_pyarrow:bool=False,memory_map:bool=True,storage_options:dict[str,object]|None=None,parallel:ParallelStrategy='auto',row_count_name:str|None=None,row_count_offset:int=0,low_memory:bool=False,pyarrow_options:dict[str,object]|None=None)->DataFrame
polars.io.read_sql(sql:list[str]|str,connection_uri:str,partition_on:str|None=None,partition_range:tuple[int,int]|None=None,partition_num:int|None=None,protocol:str|None=None)->DataFrame
polars.io.scan_csv(file:str|Path,has_header:bool=True,sep:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:dict[str,PolarsDataType]|None=None,null_values:str|list[str]|dict[str,str]|None=None,ignore_errors:bool=False,cache:bool=True,with_column_names:Callable[[list[str]],list[str]]|None=None,infer_schema_length:int|None=100,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,parse_dates:bool=False,eol_char:str='\n')->LazyFrame
polars.io.scan_ds(ds:pa.dataset.dataset)->LazyFrame
polars.io.scan_ipc(file:str|Path,n_rows:int|None=None,cache:bool=True,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,object]|None=None,memory_map:bool=True)->LazyFrame
polars.io.scan_ndjson(file:str|Path,infer_schema_length:int|None=100,batch_size:int|None=1024,n_rows:int|None=None,low_memory:bool=False,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0)->LazyFrame
polars.io.scan_parquet(file:str|Path,n_rows:int|None=None,cache:bool=True,parallel:ParallelStrategy='auto',rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,object]|None=None,low_memory:bool=False)->LazyFrame
polars.read_avro(file:str|Path|BytesIO|BinaryIO,columns:list[int]|list[str]|None=None,n_rows:int|None=None)->DataFrame
polars.read_csv(file:str|TextIO|BytesIO|Path|BinaryIO|bytes,has_header:bool=True,columns:list[int]|list[str]|None=None,new_columns:list[str]|None=None,sep:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:Mapping[str,type[DataType]]|list[type[DataType]]|None=None,null_values:str|list[str]|dict[str,str]|None=None,ignore_errors:bool=False,parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=100,batch_size:int=8192,n_rows:int|None=None,encoding:CsvEncoding|str='utf8',low_memory:bool=False,rechunk:bool=True,use_pyarrow:bool=False,storage_options:dict[str,object]|None=None,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,sample_size:int=1024,eol_char:str='\n')->DataFrame
polars.read_excel(file:str|BytesIO|Path|BinaryIO|bytes,sheet_id:int|None=1,sheet_name:str|None=None,xlsx2csv_options:dict[str,object]|None=None,read_csv_options:dict[str,object]|None=None)->DataFrame
polars.read_ipc(file:str|BinaryIO|BytesIO|Path|bytes,columns:list[int]|list[str]|None=None,n_rows:int|None=None,use_pyarrow:bool=False,memory_map:bool=True,storage_options:dict[str,object]|None=None,row_count_name:str|None=None,row_count_offset:int=0,rechunk:bool=True)->DataFrame
polars.read_json(source:str|IOBase,json_lines:bool=False)->DataFrame
polars.read_parquet(source:str|Path|BinaryIO|BytesIO|bytes,columns:list[int]|list[str]|None=None,n_rows:int|None=None,use_pyarrow:bool=False,memory_map:bool=True,storage_options:dict[str,object]|None=None,parallel:ParallelStrategy='auto',row_count_name:str|None=None,row_count_offset:int=0,low_memory:bool=False,pyarrow_options:dict[str,object]|None=None)->DataFrame
polars.read_sql(sql:list[str]|str,connection_uri:str,partition_on:str|None=None,partition_range:tuple[int,int]|None=None,partition_num:int|None=None,protocol:str|None=None)->DataFrame
polars.scan_csv(file:str|Path,has_header:bool=True,sep:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:dict[str,PolarsDataType]|None=None,null_values:str|list[str]|dict[str,str]|None=None,ignore_errors:bool=False,cache:bool=True,with_column_names:Callable[[list[str]],list[str]]|None=None,infer_schema_length:int|None=100,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,parse_dates:bool=False,eol_char:str='\n')->LazyFrame
polars.scan_ds(ds:pa.dataset.dataset)->LazyFrame
polars.scan_ipc(file:str|Path,n_rows:int|None=None,cache:bool=True,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,object]|None=None,memory_map:bool=True)->LazyFrame
polars.scan_ndjson(file:str|Path,infer_schema_length:int|None=100,batch_size:int|None=1024,n_rows:int|None=None,low_memory:bool=False,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0)->LazyFrame
polars.scan_parquet(file:str|Path,n_rows:int|None=None,cache:bool=True,parallel:ParallelStrategy='auto',rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,object]|None=None,low_memory:bool=False)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/convert.py----------------------------------------
polars.convert.from_arrow(a:pa.Table|pa.Array|pa.ChunkedArray,rechunk:bool=True)->DataFrame | Series
polars.convert.from_dict(data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]],columns:Sequence[str]|None=None)->DataFrame
polars.convert.from_dicts(dicts:Sequence[dict[str,Any]],infer_schema_length:int|None=50)->DataFrame
polars.convert.from_numpy(data:np.ndarray[Any,Any],columns:Sequence[str]|None=None,orient:Orientation|None=None)->DataFrame
polars.convert.from_pandas(df:pd.DataFrame|pd.Series|pd.DatetimeIndex,rechunk:bool=True,nan_to_none:bool=True)->DataFrame | Series
polars.convert.from_records(data:Sequence[Sequence[Any]],columns:Sequence[str]|None=None,orient:Orientation|None=None,infer_schema_length:int|None=50)->DataFrame
polars.from_arrow(a:pa.Table|pa.Array|pa.ChunkedArray,rechunk:bool=True)->DataFrame | Series
polars.from_dict(data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]],columns:Sequence[str]|None=None)->DataFrame
polars.from_dicts(dicts:Sequence[dict[str,Any]],infer_schema_length:int|None=50)->DataFrame
polars.from_numpy(data:np.ndarray[Any,Any],columns:Sequence[str]|None=None,orient:Orientation|None=None)->DataFrame
polars.from_pandas(df:pd.DataFrame|pd.Series|pd.DatetimeIndex,rechunk:bool=True,nan_to_none:bool=True)->DataFrame | Series
polars.from_records(data:Sequence[Sequence[Any]],columns:Sequence[str]|None=None,orient:Orientation|None=None,infer_schema_length:int|None=50)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/anonymous_scan.py----------------------------------------
A:polars.internals.anonymous_scan.func->partial(_scan_parquet_impl, file)
A:polars.internals.anonymous_scan.func_serialized->pickle.dumps(func)
A:polars.internals.anonymous_scan.schema->polars.internals.read_parquet_schema(data)
polars.internals._deser_and_exec(buf:bytes,with_columns:list[str]|None)->pli.DataFrame
polars.internals._scan_ds(ds:pa.dataset.dataset)->pli.LazyFrame
polars.internals._scan_ds_impl(ds:pa.dataset.dataset,with_columns:list[str]|None)->pli.DataFrame
polars.internals._scan_ipc_fsspec(file:str,storage_options:dict[str,object]|None=None)->pli.LazyFrame
polars.internals._scan_parquet_fsspec(file:str,storage_options:dict[str,object]|None=None)->pli.LazyFrame
polars.internals.anonymous_scan._deser_and_exec(buf:bytes,with_columns:list[str]|None)->pli.DataFrame
polars.internals.anonymous_scan._scan_ds(ds:pa.dataset.dataset)->pli.LazyFrame
polars.internals.anonymous_scan._scan_ds_impl(ds:pa.dataset.dataset,with_columns:list[str]|None)->pli.DataFrame
polars.internals.anonymous_scan._scan_ipc_fsspec(file:str,storage_options:dict[str,object]|None=None)->pli.LazyFrame
polars.internals.anonymous_scan._scan_ipc_impl(uri:str,with_columns:list[str]|None)->pli.DataFrame
polars.internals.anonymous_scan._scan_parquet_fsspec(file:str,storage_options:dict[str,object]|None=None)->pli.LazyFrame
polars.internals.anonymous_scan._scan_parquet_impl(uri:str,with_columns:list[str]|None)->pli.DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/lazy_functions.py----------------------------------------
A:polars.internals.lazy_functions.name->name.to_list().to_list()
A:polars.internals.lazy_functions.exprs->polars.internals.selection_to_pyexpr_list(exprs)
A:polars.internals.lazy_functions.first->col(first)
A:polars.internals.lazy_functions.e->polars.internals.expr_to_lit_or_expr(next(arguments), str_to_lit=False)
A:polars.internals.lazy_functions.item->value.item()
A:polars.internals.lazy_functions.a->col(a)
A:polars.internals.lazy_functions.b->col(b)
A:polars.internals.lazy_functions.acc->polars.internals.expr_to_lit_or_expr(acc, str_to_lit=True)
A:polars.internals.lazy_functions.low->polars.internals.expr_to_lit_or_expr(low, str_to_lit=False)
A:polars.internals.lazy_functions.high->polars.internals.expr_to_lit_or_expr(high, str_to_lit=False)
A:polars.internals.lazy_functions.df->polars.internals.DataFrame({'a': [1]})
A:polars.internals.lazy_functions.year_expr->polars.internals.expr_to_lit_or_expr(year, str_to_lit=False)
A:polars.internals.lazy_functions.month_expr->polars.internals.expr_to_lit_or_expr(month, str_to_lit=False)
A:polars.internals.lazy_functions.day_expr->polars.internals.expr_to_lit_or_expr(day, str_to_lit=False)
A:polars.internals.lazy_functions.arguments->iter(args)
A:polars.internals.lazy_functions.ldf->lf._ldf.optimization_toggle(type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, string_cache, slice_pushdown)
A:polars.internals.lazy_functions.out->_collect_all(prepared)
A:polars.internals.lazy_functions.dtype->py_type_to_dtype(type(value))
A:polars.internals.lazy_functions.s->polars.internals.Series._repeat(name, value, n, dtype)
A:polars.internals.lazy_functions.n->lit(n)
A:polars.internals.lazy_functions.condition->polars.internals.expr_to_lit_or_expr(condition, str_to_lit=True)
polars.any(name:str|list[str]|list[pli.Expr]|pli.Expr)->pli.Expr
polars.apply(exprs:list[str|pli.Expr],f:Callable[[list[pli.Series]],pli.Series|Any],return_dtype:type[DataType]|None=None)->pli.Expr
polars.arange(low:int|pli.Expr|pli.Series,high:int|pli.Expr|pli.Series,step:int=1,*,eager:bool=False)->pli.Expr | pli.Series
polars.avg(column:str|pli.Series)->pli.Expr | float
polars.count(column:str|pli.Series|None=None)->pli.Expr | int
polars.cov(a:str|pli.Expr,b:str|pli.Expr)->pli.Expr
polars.date(year:pli.Expr|str,month:pli.Expr|str,day:pli.Expr|str)->pli.Expr
polars.datetime(year:pli.Expr|str,month:pli.Expr|str,day:pli.Expr|str,hour:pli.Expr|str|None=None,minute:pli.Expr|str|None=None,second:pli.Expr|str|None=None,millisecond:pli.Expr|str|None=None)->pli.Expr
polars.duration(*,days:pli.Expr|str|None=None,seconds:pli.Expr|str|None=None,nanoseconds:pli.Expr|str|None=None,milliseconds:pli.Expr|str|None=None,minutes:pli.Expr|str|None=None,hours:pli.Expr|str|None=None,weeks:pli.Expr|str|None=None)->pli.Expr
polars.exclude(columns:str|list[str]|DataType|type[DataType]|DataType|Sequence[DataType|type[DataType]])->pli.Expr
polars.first(column:str|pli.Series|None=None)->pli.Expr | Any
polars.fold(acc:IntoExpr,f:Callable[[pli.Series,pli.Series],pli.Series],exprs:Sequence[pli.Expr|str]|pli.Expr)->pli.Expr
polars.groups(column:str)->pli.Expr
polars.head(column:str|pli.Series,n:int=10)->pli.Expr | pli.Series
polars.internals.all(name:str|list[pli.Expr]|pli.Expr|None=None)->pli.Expr
polars.internals.arg_where(condition:pli.Expr|pli.Series,eager:bool=False)->pli.Expr | pli.Series
polars.internals.argsort_by(exprs:pli.Expr|str|Sequence[pli.Expr|str],reverse:list[bool]|bool=False)->pli.Expr
polars.internals.col(name:str|list[str]|Sequence[PolarsDataType]|pli.Series|PolarsDataType)->pli.Expr
polars.internals.collect_all(lazy_frames:list[pli.LazyFrame],type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=False,no_optimization:bool=False,slice_pushdown:bool=False)->list[pli.DataFrame]
polars.internals.concat_list(exprs:Sequence[str|pli.Expr|pli.Series]|pli.Expr)->pli.Expr
polars.internals.element()->pli.Expr
polars.internals.format(fstring:str,*args:pli.Expr|str)->pli.Expr
polars.internals.lazy_concat_str(exprs:Sequence[pli.Expr|str]|pli.Expr,sep:str='')->pli.Expr
polars.internals.lazy_functions._date(year:pli.Expr|str,month:pli.Expr|str,day:pli.Expr|str)->pli.Expr
polars.internals.lazy_functions._datetime(year:pli.Expr|str,month:pli.Expr|str,day:pli.Expr|str,hour:pli.Expr|str|None=None,minute:pli.Expr|str|None=None,second:pli.Expr|str|None=None,millisecond:pli.Expr|str|None=None)->pli.Expr
polars.internals.lazy_functions.all(name:str|list[pli.Expr]|pli.Expr|None=None)->pli.Expr
polars.internals.lazy_functions.any(name:str|list[str]|list[pli.Expr]|pli.Expr)->pli.Expr
polars.internals.lazy_functions.apply(exprs:list[str|pli.Expr],f:Callable[[list[pli.Series]],pli.Series|Any],return_dtype:type[DataType]|None=None)->pli.Expr
polars.internals.lazy_functions.arange(low:int|pli.Expr|pli.Series,high:int|pli.Expr|pli.Series,step:int=1,*,eager:bool=False)->pli.Expr | pli.Series
polars.internals.lazy_functions.arg_where(condition:pli.Expr|pli.Series,eager:bool=False)->pli.Expr | pli.Series
polars.internals.lazy_functions.argsort_by(exprs:pli.Expr|str|Sequence[pli.Expr|str],reverse:list[bool]|bool=False)->pli.Expr
polars.internals.lazy_functions.avg(column:str|pli.Series)->pli.Expr | float
polars.internals.lazy_functions.col(name:str|list[str]|Sequence[PolarsDataType]|pli.Series|PolarsDataType)->pli.Expr
polars.internals.lazy_functions.collect_all(lazy_frames:list[pli.LazyFrame],type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=False,no_optimization:bool=False,slice_pushdown:bool=False)->list[pli.DataFrame]
polars.internals.lazy_functions.concat_list(exprs:Sequence[str|pli.Expr|pli.Series]|pli.Expr)->pli.Expr
polars.internals.lazy_functions.concat_str(exprs:Sequence[pli.Expr|str]|pli.Expr,sep:str='')->pli.Expr
polars.internals.lazy_functions.count(column:str|pli.Series|None=None)->pli.Expr | int
polars.internals.lazy_functions.cov(a:str|pli.Expr,b:str|pli.Expr)->pli.Expr
polars.internals.lazy_functions.duration(*,days:pli.Expr|str|None=None,seconds:pli.Expr|str|None=None,nanoseconds:pli.Expr|str|None=None,milliseconds:pli.Expr|str|None=None,minutes:pli.Expr|str|None=None,hours:pli.Expr|str|None=None,weeks:pli.Expr|str|None=None)->pli.Expr
polars.internals.lazy_functions.element()->pli.Expr
polars.internals.lazy_functions.exclude(columns:str|list[str]|DataType|type[DataType]|DataType|Sequence[DataType|type[DataType]])->pli.Expr
polars.internals.lazy_functions.first(column:str|pli.Series|None=None)->pli.Expr | Any
polars.internals.lazy_functions.fold(acc:IntoExpr,f:Callable[[pli.Series,pli.Series],pli.Series],exprs:Sequence[pli.Expr|str]|pli.Expr)->pli.Expr
polars.internals.lazy_functions.format(fstring:str,*args:pli.Expr|str)->pli.Expr
polars.internals.lazy_functions.groups(column:str)->pli.Expr
polars.internals.lazy_functions.head(column:str|pli.Series,n:int=10)->pli.Expr | pli.Series
polars.internals.lazy_functions.last(column:str|pli.Series|None=None)->pli.Expr
polars.internals.lazy_functions.lit(value:Any,dtype:type[DataType]|None=None)->pli.Expr
polars.internals.lazy_functions.map(exprs:list[str]|list[pli.Expr],f:Callable[[list[pli.Series]],pli.Series],return_dtype:type[DataType]|None=None)->pli.Expr
polars.internals.lazy_functions.max(column:str|list[pli.Expr|str]|pli.Series)->pli.Expr | Any
polars.internals.lazy_functions.mean(column:str|pli.Series)->pli.Expr | float
polars.internals.lazy_functions.median(column:str|pli.Series)->pli.Expr | float | int
polars.internals.lazy_functions.min(column:str|list[pli.Expr|str]|pli.Series)->pli.Expr | Any
polars.internals.lazy_functions.n_unique(column:str|pli.Series)->pli.Expr | int
polars.internals.lazy_functions.pearson_corr(a:str|pli.Expr,b:str|pli.Expr,ddof:int=1)->pli.Expr
polars.internals.lazy_functions.quantile(column:str,quantile:float,interpolation:InterpolationMethod='nearest')->pli.Expr
polars.internals.lazy_functions.repeat(value:float|int|str|bool|None,n:pli.Expr|int,*,eager:bool=False,name:str|None=None)->pli.Expr | pli.Series
polars.internals.lazy_functions.select(exprs:str|pli.Expr|Sequence[str|pli.Expr]|pli.Series)->pli.DataFrame
polars.internals.lazy_functions.spearman_rank_corr(a:str|pli.Expr,b:str|pli.Expr,ddof:int=1)->pli.Expr
polars.internals.lazy_functions.std(column:str|pli.Series,ddof:int=1)->pli.Expr | float | None
polars.internals.lazy_functions.struct(exprs:Sequence[pli.Expr|str|pli.Series]|pli.Expr|pli.Series,eager:bool=False)->pli.Expr | pli.Series
polars.internals.lazy_functions.sum(column:str|list[pli.Expr|str]|pli.Series|pli.Expr)->pli.Expr | Any
polars.internals.lazy_functions.tail(column:str|pli.Series,n:int=10)->pli.Expr | pli.Series
polars.internals.lazy_functions.to_list(name:str)->pli.Expr
polars.internals.lazy_functions.var(column:str|pli.Series,ddof:int=1)->pli.Expr | float | None
polars.internals.lit(value:Any,dtype:type[DataType]|None=None)->pli.Expr
polars.internals.select(exprs:str|pli.Expr|Sequence[str|pli.Expr]|pli.Series)->pli.DataFrame
polars.last(column:str|pli.Series|None=None)->pli.Expr
polars.list(name:str)->pli.Expr
polars.map(exprs:list[str]|list[pli.Expr],f:Callable[[list[pli.Series]],pli.Series],return_dtype:type[DataType]|None=None)->pli.Expr
polars.max(column:str|list[pli.Expr|str]|pli.Series)->pli.Expr | Any
polars.mean(column:str|pli.Series)->pli.Expr | float
polars.median(column:str|pli.Series)->pli.Expr | float | int
polars.min(column:str|list[pli.Expr|str]|pli.Series)->pli.Expr | Any
polars.n_unique(column:str|pli.Series)->pli.Expr | int
polars.pearson_corr(a:str|pli.Expr,b:str|pli.Expr,ddof:int=1)->pli.Expr
polars.quantile(column:str,quantile:float,interpolation:InterpolationMethod='nearest')->pli.Expr
polars.repeat(value:float|int|str|bool|None,n:pli.Expr|int,*,eager:bool=False,name:str|None=None)->pli.Expr | pli.Series
polars.spearman_rank_corr(a:str|pli.Expr,b:str|pli.Expr,ddof:int=1)->pli.Expr
polars.std(column:str|pli.Series,ddof:int=1)->pli.Expr | float | None
polars.struct(exprs:Sequence[pli.Expr|str|pli.Series]|pli.Expr|pli.Series,eager:bool=False)->pli.Expr | pli.Series
polars.sum(column:str|list[pli.Expr|str]|pli.Series|pli.Expr)->pli.Expr | Any
polars.tail(column:str|pli.Series,n:int=10)->pli.Expr | pli.Series
polars.var(column:str|pli.Series,ddof:int=1)->pli.Expr | float | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/functions.py----------------------------------------
A:polars.internals.functions.out->out.append(e).append(e)
A:polars.internals.functions.value->datetime(value.year, value.month, value.day)
A:polars.internals.functions.interval->_timedelta_to_pl_duration(interval)
A:polars.internals.functions.(low, low_is_date)->_ensure_datetime(low)
A:polars.internals.functions.(high, high_is_date)->_ensure_datetime(high)
A:polars.internals.functions.start->_datetime_to_pl_timestamp(low, tu)
A:polars.internals.functions.stop->_datetime_to_pl_timestamp(high, tu)
A:polars.internals.functions.dt_range->dt_range.cast(Date).cast(Date)
A:polars.internals.functions.cuts_df->cuts_df.with_column(pli.col(category_label).cast(Categorical)).with_column(pli.col(category_label).cast(Categorical))
A:polars.internals.functions.result->s.sort().to_frame().join_asof(cuts_df, left_on=var_nm, right_on=break_point_label, strategy='forward')
polars.cut(s:pli.Series,bins:list[float],labels:list[str]|None=None,break_point_label:str='break_point',category_label:str='category')->pli.DataFrame
polars.get_dummies(df:pli.DataFrame,*,columns:list[str]|None=None)->pli.DataFrame
polars.internals.concat(items:Sequence[pli.DataFrame]|Sequence[pli.Series]|Sequence[pli.LazyFrame]|Sequence[pli.Expr],rechunk:bool=True,how:ConcatMethod='vertical')->pli.DataFrame | pli.Series | pli.LazyFrame | pli.Expr
polars.internals.date_range(low:date|datetime,high:date|datetime,interval:str|timedelta,closed:ClosedWindow='both',name:str|None=None,time_unit:TimeUnit|None=None)->pli.Series
polars.internals.functions._ensure_datetime(value:date|datetime)->tuple[datetime, bool]
polars.internals.functions._interval_granularity(interval:str)->str
polars.internals.functions.concat(items:Sequence[pli.DataFrame]|Sequence[pli.Series]|Sequence[pli.LazyFrame]|Sequence[pli.Expr],rechunk:bool=True,how:ConcatMethod='vertical')->pli.DataFrame | pli.Series | pli.LazyFrame | pli.Expr
polars.internals.functions.cut(s:pli.Series,bins:list[float],labels:list[str]|None=None,break_point_label:str='break_point',category_label:str='category')->pli.DataFrame
polars.internals.functions.date_range(low:date|datetime,high:date|datetime,interval:str|timedelta,closed:ClosedWindow='both',name:str|None=None,time_unit:TimeUnit|None=None)->pli.Series
polars.internals.functions.get_dummies(df:pli.DataFrame,*,columns:list[str]|None=None)->pli.DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/whenthen.py----------------------------------------
A:polars.internals.whenthen.predicate->polars.internals.expr_to_lit_or_expr(predicate)
A:polars.internals.whenthen.expr_->polars.internals.expr_to_lit_or_expr(expr)
A:polars.internals.whenthen.expr->polars.internals.expr_to_lit_or_expr(expr)
A:polars.internals.whenthen.pywhenthen->self._pywhen.then(expr._pyexpr)
A:polars.internals.whenthen.pw->pywhen(expr._pyexpr)
polars.internals.when(expr:pli.Expr|bool)->When
polars.internals.whenthen.When(self,pywhen:pywhen)
polars.internals.whenthen.When.__init__(self,pywhen:pywhen)
polars.internals.whenthen.When.then(self,expr:pli.Expr|pli.Series|int|float|str|None|Sequence[None|int|float|str])->WhenThen
polars.internals.whenthen.WhenThen(self,pywhenthen:Any)
polars.internals.whenthen.WhenThen.__init__(self,pywhenthen:Any)
polars.internals.whenthen.WhenThen.otherwise(self,expr:pli.Expr|int|float|str|None)->pli.Expr
polars.internals.whenthen.WhenThen.when(self,predicate:pli.Expr|bool)->WhenThenThen
polars.internals.whenthen.WhenThenThen(self,pywhenthenthen:Any)
polars.internals.whenthen.WhenThenThen.__init__(self,pywhenthenthen:Any)
polars.internals.whenthen.WhenThenThen.otherwise(self,expr:pli.Expr|int|float|str|None|Sequence[int|float|str|None])->pli.Expr
polars.internals.whenthen.WhenThenThen.then(self,expr:pli.Expr|int|float|str|None|pli.Series|Sequence[int|float|str|None])->WhenThenThen
polars.internals.whenthen.WhenThenThen.when(self,predicate:pli.Expr|bool)->WhenThenThen
polars.internals.whenthen.when(expr:pli.Expr|bool)->When


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/type_aliases.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/construction.py----------------------------------------
A:polars.internals.construction.array->pyarrow.compute.cast(array, pa.dictionary(pa.uint32(), pa.large_string())).combine_chunks()
A:polars.internals.construction.it->pyarrow.compute.cast(array, pa.dictionary(pa.uint32(), pa.large_string())).combine_chunks().iterchunks()
A:polars.internals.construction.pys->polars.polars.PySeries.from_arrow(name, array.combine_chunks())
A:polars.internals.construction.values->values.astype(np.float32).astype(np.float32)
A:polars.internals.construction.constructor->py_type_to_constructor(int)
A:polars.internals.construction.nested_dtype->getattr(dtype, 'inner', None)
A:polars.internals.construction.value->_get_first_non_none(values)
A:polars.internals.construction.dtype->py_type_to_dtype(nested_dtype)
A:polars.internals.construction.temporal_unit->getattr(dtype, 'tu', None)
A:polars.internals.construction.python_dtype->dtype_to_py_type(dtype)
A:polars.internals.construction.pyseries->pyseries.cast(dtype, True).cast(dtype, True)
A:polars.internals.construction.arrow_dtype->dtype_to_arrow_type(dtype)
A:polars.internals.construction.nested_value->_get_first_non_none(value)
A:polars.internals.construction.nested_arrow_dtype->to_arrow_type(nested_dtype)
A:polars.internals.construction.arrow_values->pyarrow.array(values, pa.large_list(nested_arrow_dtype))
A:polars.internals.construction.str_val->str(error)
A:polars.internals.construction.first_non_none->_get_first_non_none(values.values)
A:polars.internals.construction.name->str(values.name)
A:polars.internals.construction.(columns, dtypes)->_unpack_columns(columns or series_name, n_expected=1)
A:polars.internals.construction.pydf->_post_apply_columns(pydf, original_columns)
A:polars.internals.construction.columns->list(columns.items())
A:polars.internals.construction.data_series->_handle_columns_arg(data_series, columns=columns)
A:polars.internals.construction.pool_size->threadpool_size()
A:polars.internals.construction.pool->multiprocessing.dummy.Pool(pool_size)
A:polars.internals.construction.new_dtype->dtypes.get(columns[i])
A:polars.internals.construction.s->s.cast(new_dtype).cast(new_dtype)
A:polars.internals.construction.data->data.rename_columns(columns).rename_columns(columns)
A:polars.internals.construction.column->coerce_arrow(column)
A:polars.internals.construction.ps->arrow_to_pyseries(name, column, rechunk)
A:polars.internals.construction.dictionary_cols[i]->polars.internals.wrap_s(ps)
A:polars.internals.construction.tbl->pyarrow.table(data_dict)
A:polars.internals.construction.df->df.with_columns([pli.lit(s).alias(s.name) for s in dictionary_cols.values()]).with_columns([pli.lit(s).alias(s.name) for s in dictionary_cols.values()])
A:polars.internals.construction.data_series[0]->data_series[0].cast(new_dtype, True).cast(new_dtype, True)
A:polars.internals.construction.arrow_table->pyarrow.table(arrow_dict)
polars.internals.construction._get_first_non_none(values:Sequence[Any|None])->Any
polars.internals.construction._handle_columns_arg(data:list[PySeries],columns:Sequence[str]|None=None)->list[PySeries]
polars.internals.construction._pandas_series_to_arrow(values:pd.Series|pd.DatetimeIndex,nan_to_none:bool=True,min_len:int|None=None)->pa.Array
polars.internals.construction._post_apply_columns(pydf:PyDataFrame,columns:ColumnsType)->PyDataFrame
polars.internals.construction._unpack_columns(columns:ColumnsType|None,lookup_names:Iterable[str]|None=None,n_expected:int|None=None)->tuple[list[str], dict[str, PolarsDataType]]
polars.internals.construction.arrow_to_pydf(data:pa.Table,columns:ColumnsType|None=None,rechunk:bool=True)->PyDataFrame
polars.internals.construction.arrow_to_pyseries(name:str,values:pa.Array,rechunk:bool=True)->PySeries
polars.internals.construction.coerce_arrow(array:pa.Array,rechunk:bool=True)->pa.Array
polars.internals.construction.dict_to_pydf(data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]],columns:ColumnsType|None=None)->PyDataFrame
polars.internals.construction.numpy_to_pydf(data:np.ndarray[Any,Any],columns:ColumnsType|None=None,orient:Orientation|None=None)->PyDataFrame
polars.internals.construction.numpy_to_pyseries(name:str,values:np.ndarray[Any,Any],strict:bool=True,nan_to_null:bool=False)->PySeries
polars.internals.construction.pandas_to_pydf(data:pd.DataFrame,columns:ColumnsType|None=None,rechunk:bool=True,nan_to_none:bool=True)->PyDataFrame
polars.internals.construction.pandas_to_pyseries(name:str,values:pd.Series|pd.DatetimeIndex,nan_to_none:bool=True)->PySeries
polars.internals.construction.sequence_from_anyvalue_or_object(name:str,values:Sequence[Any])->PySeries
polars.internals.construction.sequence_to_pydf(data:Sequence[Any],columns:ColumnsType|None=None,orient:Orientation|None=None,infer_schema_length:int|None=50)->PyDataFrame
polars.internals.construction.sequence_to_pyseries(name:str,values:Sequence[Any],dtype:PolarsDataType|None=None,strict:bool=True,dtype_if_empty:PolarsDataType|None=None)->PySeries
polars.internals.construction.series_to_pydf(data:pli.Series,columns:ColumnsType|None=None)->PyDataFrame
polars.internals.construction.series_to_pyseries(name:str,values:pli.Series)->PySeries


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/io.py----------------------------------------
A:polars.internals.io.file->format_path(file)
polars.internals._is_local_file(file:str)->bool
polars.internals._prepare_file_arg(file:str|list[str]|TextIO|Path|BinaryIO|bytes,encoding:str|None=None,use_pyarrow:bool|None=None,**kwargs:Any)->ContextManager[str | BinaryIO | list[str] | list[BinaryIO]]
polars.internals.io._is_local_file(file:str)->bool
polars.internals.io._prepare_file_arg(file:str|list[str]|TextIO|Path|BinaryIO|bytes,encoding:str|None=None,use_pyarrow:bool|None=None,**kwargs:Any)->ContextManager[str | BinaryIO | list[str] | list[BinaryIO]]
polars.internals.io._process_http_file(path:str,encoding:str|None=None)->BytesIO
polars.internals.io.read_ipc_schema(file:str|BinaryIO|Path|bytes)->dict[str, type[DataType]]
polars.internals.io.read_parquet_schema(file:str|BinaryIO|Path|bytes)->dict[str, type[DataType]]
polars.internals.read_ipc_schema(file:str|BinaryIO|Path|bytes)->dict[str, type[DataType]]
polars.internals.read_parquet_schema(file:str|BinaryIO|Path|bytes)->dict[str, type[DataType]]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/slice.py----------------------------------------
A:polars.internals.slice.frame->lazy.collect()
A:polars.internals.slice.stride->abs(self.stride)
A:polars.internals.slice.lazyslice->self.obj.slice(start, slice_length).slice(self.stop + 1, self.slice_length).reverse()
A:polars.internals.slice.obj_len->len(self.obj)
A:polars.internals.slice.(start, stop, stride)->slice(s.start, s.stop, s.step).indices(obj_len)
A:polars.internals.slice.lazyobj->self._lazify(self.obj)
A:polars.internals.slice.obj->self.obj.slice(start, slice_length)
polars.internals.slice.LazyPolarsSlice(self,obj:'pli.LazyFrame')
polars.internals.slice.LazyPolarsSlice.__init__(self,obj:'pli.LazyFrame')
polars.internals.slice.LazyPolarsSlice.apply(self,s:slice)->'pli.LazyFrame'
polars.internals.slice.PolarsSlice(self,obj:FrameOrSeries)
polars.internals.slice.PolarsSlice.__init__(self,obj:FrameOrSeries)
polars.internals.slice.PolarsSlice._as_original(lazy:'pli.LazyFrame',original:FrameOrSeries)->FrameOrSeries
polars.internals.slice.PolarsSlice._lazify(obj:FrameOrSeries)->'pli.LazyFrame'
polars.internals.slice.PolarsSlice._slice_negative(self,obj:'pli.LazyFrame')->'pli.LazyFrame'
polars.internals.slice.PolarsSlice._slice_positive(self,obj:'pli.LazyFrame')->'pli.LazyFrame'
polars.internals.slice.PolarsSlice._slice_setup(self,s:slice)->None
polars.internals.slice.PolarsSlice.apply(self,s:slice)->FrameOrSeries


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/dataframe/frame.py----------------------------------------
A:polars.internals.dataframe.frame.DF->TypeVar('DF', bound='DataFrame')
A:polars.internals.dataframe.frame.self._df->polars.polars.PyDataFrame.read_json(file, json_lines)
A:polars.internals.dataframe.frame.sz->cls.__new__(cls)._df.estimated_size()
A:polars.internals.dataframe.frame.df->cls.__new__(cls).clone()
A:polars.internals.dataframe.frame.pydf->polars.polars.PyDataFrame.read_dicts(data, infer_schema_length)
A:polars.internals.dataframe.frame.col->polars.internals.Series(name, pd_series)
A:polars.internals.dataframe.frame.self->cls.__new__(cls)
A:polars.internals.dataframe.frame.path->format_path(file)
A:polars.internals.dataframe.frame.file->format_path(file)
A:polars.internals.dataframe.frame.processed_null_values->_process_null_values(null_values)
A:polars.internals.dataframe.frame.scan->scan_ipc(file, n_rows=n_rows, rechunk=rechunk, row_count_name=row_count_name, row_count_offset=row_count_offset, memory_map=memory_map)
A:polars.internals.dataframe.frame.(projection, columns)->handle_projection_columns(columns)
A:polars.internals.dataframe.frame.record_batches->cls.__new__(cls)._df.to_pandas()
A:polars.internals.dataframe.frame.json_bytes->buf.getvalue()
A:polars.internals.dataframe.frame.json_str->buf.getvalue().decode('utf8')
A:polars.internals.dataframe.frame.tbl->pyarrow.table(data)
A:polars.internals.dataframe.frame.buffer->BytesIO()
A:polars.internals.dataframe.frame.column_names->iter(column_names)
A:polars.internals.dataframe.frame.out->cls.__new__(cls)._df.to_numpy()
A:polars.internals.dataframe.frame.other_renamed->polars.internals.Series('', [other]).select(pli.all().suffix(suffix))
A:polars.internals.dataframe.frame.combined->polars.internals.concat([self, other_renamed], how='horizontal')
A:polars.internals.dataframe.frame.other->polars.internals.Series('', [other])
A:polars.internals.dataframe.frame.idx_type->get_idx_type()
A:polars.internals.dataframe.frame.idxs->numpy.where(idxs < 0, self.shape[dim] + idxs, idxs)
A:polars.internals.dataframe.frame.start->cls.__new__(cls).find_idx_by_name(col_selection.start)
A:polars.internals.dataframe.frame.col_selection->slice(start, stop, col_selection.step)
A:polars.internals.dataframe.frame.series->cls.__new__(cls).to_series(col_selection)
A:polars.internals.dataframe.frame.item->polars.internals.Series('', item)
A:polars.internals.dataframe.frame.value->numpy.array(value)
A:polars.internals.dataframe.frame.s->cls.__new__(cls).__getitem__(col_selection)
A:polars.internals.dataframe.frame.max_cols->int(os.environ.get('POLARS_FMT_MAX_COLS', default=75))
A:polars.internals.dataframe.frame.max_rows->int(os.environ.get('POLARS_FMT_MAX_ROWS', default=25))
A:polars.internals.dataframe.frame.predicate->polars.internals.Series(predicate)
A:polars.internals.dataframe.frame.summary->cls.__new__(cls)._from_pydf(pli.concat([describe_cast(self.mean()), describe_cast(self.std()), describe_cast(self.min()), describe_cast(self.max()), describe_cast(self.median())])._df)
A:polars.internals.dataframe.frame.(out, is_df)->cls.__new__(cls)._df.apply(f, return_dtype, inference_size)
A:polars.internals.dataframe.frame.columns->columns.get_columns().get_columns()
A:polars.internals.dataframe.frame.acc->operation(acc, self.to_series(i))
polars.internals.DataFrame(self,data:dict[str,Sequence[Any]]|Sequence[Any]|np.ndarray[Any,Any]|pa.Table|pd.DataFrame|pli.Series|None=None,columns:ColumnsType|None=None,orient:Orientation|None=None)
polars.internals.DataFrame.__add__(self:DF,other:DataFrame|pli.Series|int|float|bool|str)->DF
polars.internals.DataFrame.__contains__(self,key:str)->bool
polars.internals.DataFrame.__copy__(self:DF)->DF
polars.internals.DataFrame.__deepcopy__(self:DF,memo:None=None)->DF
polars.internals.DataFrame.__eq__(self,other:Any)->DataFrame
polars.internals.DataFrame.__ge__(self,other:Any)->DataFrame
polars.internals.DataFrame.__getitem__(self,item:str|int|np.ndarray[Any,Any]|MultiColSelector|tuple[int,MultiColSelector]|tuple[MultiRowSelector,MultiColSelector]|tuple[MultiRowSelector,int]|tuple[MultiRowSelector,str]|tuple[int,int]|tuple[int,str])->DataFrame | pli.Series
polars.internals.DataFrame.__getstate__(self)->list[pli.Series]
polars.internals.DataFrame.__gt__(self,other:Any)->DataFrame
polars.internals.DataFrame.__iter__(self)->Iterator[Any]
polars.internals.DataFrame.__le__(self,other:Any)->DataFrame
polars.internals.DataFrame.__len__(self)->int
polars.internals.DataFrame.__lt__(self,other:Any)->DataFrame
polars.internals.DataFrame.__mod__(self:DF,other:DataFrame|pli.Series|int|float|bool)->DF
polars.internals.DataFrame.__mul__(self:DF,other:DataFrame|pli.Series|int|float|bool)->DF
polars.internals.DataFrame.__ne__(self,other:Any)->DataFrame
polars.internals.DataFrame.__repr__(self)->str
polars.internals.DataFrame.__setitem__(self,key:str|list[int]|list[str]|tuple[Any,str|int],value:Any)->None
polars.internals.DataFrame.__setstate__(self,state)->None
polars.internals.DataFrame.__str__(self)->str
polars.internals.DataFrame.__sub__(self:DF,other:DataFrame|pli.Series|int|float|bool)->DF
polars.internals.DataFrame.__truediv__(self:DF,other:DataFrame|pli.Series|int|float|bool)->DF
polars.internals.DataFrame._comp(self,other:Any,op:ComparisonOperator)->DataFrame
polars.internals.DataFrame._compare_to_non_df(self,other:Any,op:ComparisonOperator)->DataFrame
polars.internals.DataFrame._compare_to_other_df(self,other:DataFrame,op:ComparisonOperator)->DataFrame
polars.internals.DataFrame._from_arrow(cls:type[DF],data:pa.Table,columns:Sequence[str]|None=None,rechunk:bool=True)->DF
polars.internals.DataFrame._from_dict(cls:type[DF],data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]],columns:Sequence[str]|None=None)->DF
polars.internals.DataFrame._from_dicts(cls:type[DF],data:Sequence[dict[str,Any]],infer_schema_length:int|None=100)->DF
polars.internals.DataFrame._from_numpy(cls:type[DF],data:np.ndarray[Any,Any],columns:Sequence[str]|None=None,orient:Orientation|None=None)->DF
polars.internals.DataFrame._from_pandas(cls:type[DF],data:pd.DataFrame,columns:Sequence[str]|None=None,rechunk:bool=True,nan_to_none:bool=True)->DF
polars.internals.DataFrame._from_pydf(cls:type[DF],py_df:PyDataFrame)->DF
polars.internals.DataFrame._from_records(cls:type[DF],data:Sequence[Sequence[Any]],columns:Sequence[str]|None=None,orient:Orientation|None=None,infer_schema_length:int|None=50)->DF
polars.internals.DataFrame._pos_idx(self,idx:int,dim:int)->int
polars.internals.DataFrame._pos_idxs(self,idxs:np.ndarray[Any,Any]|pli.Series,dim:int)->pli.Series
polars.internals.DataFrame._read_avro(cls:type[DF],file:str|Path|BinaryIO,columns:list[int]|list[str]|None=None,n_rows:int|None=None)->DF
polars.internals.DataFrame._read_csv(cls:type[DF],file:str|Path|BinaryIO|bytes,has_header:bool=True,columns:list[int]|list[str]|None=None,sep:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:None|(Mapping[str,PolarsDataType]|Sequence[PolarsDataType])=None,null_values:str|list[str]|dict[str,str]|None=None,ignore_errors:bool=False,parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=100,batch_size:int=8192,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,sample_size:int=1024,eol_char:str='\n')->DF
polars.internals.DataFrame._read_ipc(cls,file:str|Path|BinaryIO,columns:list[int]|list[str]|None=None,n_rows:int|None=None,row_count_name:str|None=None,row_count_offset:int=0,rechunk:bool=True,memory_map:bool=True)->DataFrame
polars.internals.DataFrame._read_json(cls:type[DF],file:str|Path|IOBase,json_lines:bool=False)->DF
polars.internals.DataFrame._read_parquet(cls:type[DF],file:str|Path|BinaryIO,columns:list[int]|list[str]|None=None,n_rows:int|None=None,parallel:ParallelStrategy='auto',row_count_name:str|None=None,row_count_offset:int=0,low_memory:bool=False)->DF
polars.internals.DataFrame._repr_html_(self)->str
polars.internals.DataFrame.apply(self:DF,f:Callable[[tuple[Any,...]],Any],return_dtype:type[DataType]|None=None,inference_size:int=256)->DF
polars.internals.DataFrame.cleared(self:DF)->DF
polars.internals.DataFrame.clone(self:DF)->DF
polars.internals.DataFrame.columns(self)->list[str]
polars.internals.DataFrame.columns(self,columns:Sequence[str])->None
polars.internals.DataFrame.describe(self:DF)->DF
polars.internals.DataFrame.drop(self:DF,name:str|list[str])->DF
polars.internals.DataFrame.drop_in_place(self,name:str)->pli.Series
polars.internals.DataFrame.drop_nulls(self:DF,subset:str|list[str]|None=None)->DF
polars.internals.DataFrame.dtypes(self)->list[type[DataType]]
polars.internals.DataFrame.estimated_size(self,unit:SizeUnit='b')->int | float
polars.internals.DataFrame.explode(self,columns:str|list[str]|pli.Expr|list[pli.Expr])->DataFrame
polars.internals.DataFrame.extend(self,other:DataFrame)->None
polars.internals.DataFrame.fill_nan(self,fill_value:pli.Expr|int|float|None)->DataFrame
polars.internals.DataFrame.fill_null(self,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->DataFrame
polars.internals.DataFrame.filter(self,predicate:pli.Expr|str|pli.Series|list[bool]|np.ndarray[Any,Any])->DataFrame
polars.internals.DataFrame.find_idx_by_name(self,name:str)->int
polars.internals.DataFrame.fold(self,operation:Callable[[pli.Series,pli.Series],pli.Series])->pli.Series
polars.internals.DataFrame.frame_equal(self,other:DataFrame,null_equal:bool=True)->bool
polars.internals.DataFrame.get_column(self,name:str)->pli.Series
polars.internals.DataFrame.get_columns(self)->list[pli.Series]
polars.internals.DataFrame.groupby(self:DF,by:str|pli.Expr|Sequence[str|pli.Expr],maintain_order:bool=False)->GroupBy[DF]
polars.internals.DataFrame.groupby_dynamic(self:DF,index_column:str,every:str,period:str|None=None,offset:str|None=None,truncate:bool=True,include_boundaries:bool=False,closed:ClosedWindow='left',by:str|list[str]|pli.Expr|list[pli.Expr]|None=None)->DynamicGroupBy[DF]
polars.internals.DataFrame.groupby_rolling(self:DF,index_column:str,period:str,offset:str|None=None,closed:ClosedWindow='right',by:str|list[str]|pli.Expr|list[pli.Expr]|None=None)->RollingGroupBy[DF]
polars.internals.DataFrame.hash_rows(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->pli.Series
polars.internals.DataFrame.head(self:DF,n:int=5)->DF
polars.internals.DataFrame.height(self)->int
polars.internals.DataFrame.hstack(self:DF,columns:list[pli.Series]|DataFrame,in_place:bool=False)->DF | None
polars.internals.DataFrame.insert_at_idx(self,index:int,series:pli.Series)->None
polars.internals.DataFrame.interpolate(self)->DataFrame
polars.internals.DataFrame.is_duplicated(self)->pli.Series
polars.internals.DataFrame.is_empty(self)->bool
polars.internals.DataFrame.is_unique(self)->pli.Series
polars.internals.DataFrame.join(self,other:DataFrame,left_on:str|pli.Expr|list[str|pli.Expr]|None=None,right_on:str|pli.Expr|list[str|pli.Expr]|None=None,on:str|pli.Expr|list[str|pli.Expr]|None=None,how:JoinStrategy='inner',suffix:str='_right')->DataFrame
polars.internals.DataFrame.join_asof(self,other:DataFrame,left_on:str|None=None,right_on:str|None=None,on:str|None=None,by_left:str|list[str]|None=None,by_right:str|list[str]|None=None,by:str|list[str]|None=None,strategy:AsofJoinStrategy='backward',suffix:str='_right',tolerance:str|int|float|None=None,allow_parallel:bool=True,force_parallel:bool=False)->DataFrame
polars.internals.DataFrame.lazy(self:DF)->pli.LazyFrame
polars.internals.DataFrame.limit(self:DF,n:int=5)->DF
polars.internals.DataFrame.max(self:DF,axis:int=0)->DF | pli.Series
polars.internals.DataFrame.mean(self:DF,axis:int=0,null_strategy:NullStrategy='ignore')->DF | pli.Series
polars.internals.DataFrame.median(self:DF)->DF
polars.internals.DataFrame.melt(self:DF,id_vars:list[str]|str|None=None,value_vars:list[str]|str|None=None,variable_name:str|None=None,value_name:str|None=None)->DF
polars.internals.DataFrame.min(self:DF,axis:int=0)->DF | pli.Series
polars.internals.DataFrame.n_chunks(self)->int
polars.internals.DataFrame.null_count(self:DF)->DF
polars.internals.DataFrame.partition_by(self:DF,groups:str|list[str],maintain_order:bool=True,*,as_dict:bool=False)->list[DF] | dict[Any, DF]
polars.internals.DataFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.internals.DataFrame.pivot(self:DF,values:list[str]|str,index:list[str]|str,columns:list[str]|str,aggregate_fn:PivotAgg|pli.Expr='first',maintain_order:bool=True,sort_columns:bool=False)->DF
polars.internals.DataFrame.product(self)->DataFrame
polars.internals.DataFrame.quantile(self:DF,quantile:float,interpolation:InterpolationMethod='nearest')->DF
polars.internals.DataFrame.rechunk(self:DF)->DF
polars.internals.DataFrame.rename(self,mapping:dict[str,str])->DataFrame
polars.internals.DataFrame.replace(self,column:str,new_col:pli.Series)->None
polars.internals.DataFrame.replace_at_idx(self,index:int,series:pli.Series)->None
polars.internals.DataFrame.reverse(self)->DataFrame
polars.internals.DataFrame.row(self,index:int)->tuple[Any]
polars.internals.DataFrame.rows(self)->list[tuple[object, ...]]
polars.internals.DataFrame.sample(self:DF,n:int|None=None,frac:float|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->DF
polars.internals.DataFrame.schema(self)->dict[str, type[DataType]]
polars.internals.DataFrame.select(self,exprs:str|pli.Expr|pli.Series|Sequence[str|pli.Expr|pli.Series])->DataFrame
polars.internals.DataFrame.shape(self)->tuple[int, int]
polars.internals.DataFrame.shift(self:DF,periods:int)->DF
polars.internals.DataFrame.shift_and_fill(self,periods:int,fill_value:int|str|float)->DataFrame
polars.internals.DataFrame.shrink_to_fit(self:DF,in_place:bool=False)->DF | None
polars.internals.DataFrame.slice(self:DF,offset:int,length:int|None=None)->DF
polars.internals.DataFrame.sort(self,by:str|pli.Expr|list[str]|list[pli.Expr],reverse:bool|list[bool]=False,nulls_last:bool=False)->DataFrame
polars.internals.DataFrame.std(self:DF,ddof:int=1)->DF
polars.internals.DataFrame.sum(self:DF,*,axis:int=0,null_strategy:NullStrategy='ignore')->DF | pli.Series
polars.internals.DataFrame.tail(self:DF,n:int=5)->DF
polars.internals.DataFrame.take_every(self,n:int)->DataFrame
polars.internals.DataFrame.to_arrow(self)->pa.Table
polars.internals.DataFrame.to_dict(self,as_series:bool=True)->dict[str, pli.Series] | dict[str, list[Any]]
polars.internals.DataFrame.to_dicts(self)->list[dict[str, Any]]
polars.internals.DataFrame.to_dummies(self:DF,*,columns:list[str]|None=None)->DF
polars.internals.DataFrame.to_numpy(self)->np.ndarray[Any, Any]
polars.internals.DataFrame.to_pandas(self,*args:Any,date_as_object:bool=False,**kwargs:Any)->pd.DataFrame
polars.internals.DataFrame.to_series(self,index:int=0)->pli.Series
polars.internals.DataFrame.to_struct(self,name:str)->pli.Series
polars.internals.DataFrame.transpose(self:DF,include_header:bool=False,header_name:str='column',column_names:Iterator[str]|Sequence[str]|None=None)->DF
polars.internals.DataFrame.unique(self:DF,maintain_order:bool=True,subset:str|list[str]|None=None,keep:UniqueKeepStrategy='first')->DF
polars.internals.DataFrame.unnest(self:DF,names:str|list[str])->DF
polars.internals.DataFrame.upsample(self:DF,time_column:str,every:str,offset:str|None=None,by:str|Sequence[str]|None=None,maintain_order:bool=False)->DF
polars.internals.DataFrame.var(self:DF,ddof:int=1)->DF
polars.internals.DataFrame.vstack(self:DF,df:DataFrame,in_place:bool=False)->DF | None
polars.internals.DataFrame.width(self)->int
polars.internals.DataFrame.with_column(self,column:pli.Series|pli.Expr)->DataFrame
polars.internals.DataFrame.with_columns(self,exprs:pli.Expr|pli.Series|Sequence[pli.Expr|pli.Series]|None=None,**named_exprs:pli.Expr|pli.Series)->DataFrame
polars.internals.DataFrame.with_row_count(self:DF,name:str='row_nr',offset:int=0)->DF
polars.internals.DataFrame.write_avro(self,file:BinaryIO|BytesIO|str|Path,compression:AvroCompression='uncompressed')->None
polars.internals.DataFrame.write_csv(self,file:TextIO|BytesIO|str|Path|None=None,has_header:bool=True,sep:str=',',quote:str='"',batch_size:int=1024,datetime_format:str|None=None,date_format:str|None=None,time_format:str|None=None,float_precision:int|None=None)->str | None
polars.internals.DataFrame.write_ipc(self,file:BinaryIO|BytesIO|str|Path,compression:IpcCompression='uncompressed')->None
polars.internals.DataFrame.write_json(self,file:IOBase|str|Path|None=None,pretty:bool=False,row_oriented:bool=False,json_lines:bool=False,*,to_string:bool=False)->str | None
polars.internals.DataFrame.write_parquet(self,file:str|Path|BytesIO,*,compression:ParquetCompression='lz4',compression_level:int|None=None,statistics:bool=False,row_group_size:int|None=None,use_pyarrow:bool=False,pyarrow_options:dict[str,object]|None=None)->None
polars.internals.dataframe.frame.DataFrame(self,data:dict[str,Sequence[Any]]|Sequence[Any]|np.ndarray[Any,Any]|pa.Table|pd.DataFrame|pli.Series|None=None,columns:ColumnsType|None=None,orient:Orientation|None=None)
polars.internals.dataframe.frame.DataFrame.__add__(self:DF,other:DataFrame|pli.Series|int|float|bool|str)->DF
polars.internals.dataframe.frame.DataFrame.__contains__(self,key:str)->bool
polars.internals.dataframe.frame.DataFrame.__copy__(self:DF)->DF
polars.internals.dataframe.frame.DataFrame.__deepcopy__(self:DF,memo:None=None)->DF
polars.internals.dataframe.frame.DataFrame.__eq__(self,other:Any)->DataFrame
polars.internals.dataframe.frame.DataFrame.__ge__(self,other:Any)->DataFrame
polars.internals.dataframe.frame.DataFrame.__getitem__(self,item:str|int|np.ndarray[Any,Any]|MultiColSelector|tuple[int,MultiColSelector]|tuple[MultiRowSelector,MultiColSelector]|tuple[MultiRowSelector,int]|tuple[MultiRowSelector,str]|tuple[int,int]|tuple[int,str])->DataFrame | pli.Series
polars.internals.dataframe.frame.DataFrame.__getstate__(self)->list[pli.Series]
polars.internals.dataframe.frame.DataFrame.__gt__(self,other:Any)->DataFrame
polars.internals.dataframe.frame.DataFrame.__init__(self,data:dict[str,Sequence[Any]]|Sequence[Any]|np.ndarray[Any,Any]|pa.Table|pd.DataFrame|pli.Series|None=None,columns:ColumnsType|None=None,orient:Orientation|None=None)
polars.internals.dataframe.frame.DataFrame.__iter__(self)->Iterator[Any]
polars.internals.dataframe.frame.DataFrame.__le__(self,other:Any)->DataFrame
polars.internals.dataframe.frame.DataFrame.__len__(self)->int
polars.internals.dataframe.frame.DataFrame.__lt__(self,other:Any)->DataFrame
polars.internals.dataframe.frame.DataFrame.__mod__(self:DF,other:DataFrame|pli.Series|int|float|bool)->DF
polars.internals.dataframe.frame.DataFrame.__mul__(self:DF,other:DataFrame|pli.Series|int|float|bool)->DF
polars.internals.dataframe.frame.DataFrame.__ne__(self,other:Any)->DataFrame
polars.internals.dataframe.frame.DataFrame.__repr__(self)->str
polars.internals.dataframe.frame.DataFrame.__setitem__(self,key:str|list[int]|list[str]|tuple[Any,str|int],value:Any)->None
polars.internals.dataframe.frame.DataFrame.__setstate__(self,state)->None
polars.internals.dataframe.frame.DataFrame.__str__(self)->str
polars.internals.dataframe.frame.DataFrame.__sub__(self:DF,other:DataFrame|pli.Series|int|float|bool)->DF
polars.internals.dataframe.frame.DataFrame.__truediv__(self:DF,other:DataFrame|pli.Series|int|float|bool)->DF
polars.internals.dataframe.frame.DataFrame._comp(self,other:Any,op:ComparisonOperator)->DataFrame
polars.internals.dataframe.frame.DataFrame._compare_to_non_df(self,other:Any,op:ComparisonOperator)->DataFrame
polars.internals.dataframe.frame.DataFrame._compare_to_other_df(self,other:DataFrame,op:ComparisonOperator)->DataFrame
polars.internals.dataframe.frame.DataFrame._from_arrow(cls:type[DF],data:pa.Table,columns:Sequence[str]|None=None,rechunk:bool=True)->DF
polars.internals.dataframe.frame.DataFrame._from_dict(cls:type[DF],data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]],columns:Sequence[str]|None=None)->DF
polars.internals.dataframe.frame.DataFrame._from_dicts(cls:type[DF],data:Sequence[dict[str,Any]],infer_schema_length:int|None=100)->DF
polars.internals.dataframe.frame.DataFrame._from_numpy(cls:type[DF],data:np.ndarray[Any,Any],columns:Sequence[str]|None=None,orient:Orientation|None=None)->DF
polars.internals.dataframe.frame.DataFrame._from_pandas(cls:type[DF],data:pd.DataFrame,columns:Sequence[str]|None=None,rechunk:bool=True,nan_to_none:bool=True)->DF
polars.internals.dataframe.frame.DataFrame._from_pydf(cls:type[DF],py_df:PyDataFrame)->DF
polars.internals.dataframe.frame.DataFrame._from_records(cls:type[DF],data:Sequence[Sequence[Any]],columns:Sequence[str]|None=None,orient:Orientation|None=None,infer_schema_length:int|None=50)->DF
polars.internals.dataframe.frame.DataFrame._pos_idx(self,idx:int,dim:int)->int
polars.internals.dataframe.frame.DataFrame._pos_idxs(self,idxs:np.ndarray[Any,Any]|pli.Series,dim:int)->pli.Series
polars.internals.dataframe.frame.DataFrame._read_avro(cls:type[DF],file:str|Path|BinaryIO,columns:list[int]|list[str]|None=None,n_rows:int|None=None)->DF
polars.internals.dataframe.frame.DataFrame._read_csv(cls:type[DF],file:str|Path|BinaryIO|bytes,has_header:bool=True,columns:list[int]|list[str]|None=None,sep:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:None|(Mapping[str,PolarsDataType]|Sequence[PolarsDataType])=None,null_values:str|list[str]|dict[str,str]|None=None,ignore_errors:bool=False,parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=100,batch_size:int=8192,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,sample_size:int=1024,eol_char:str='\n')->DF
polars.internals.dataframe.frame.DataFrame._read_ipc(cls,file:str|Path|BinaryIO,columns:list[int]|list[str]|None=None,n_rows:int|None=None,row_count_name:str|None=None,row_count_offset:int=0,rechunk:bool=True,memory_map:bool=True)->DataFrame
polars.internals.dataframe.frame.DataFrame._read_json(cls:type[DF],file:str|Path|IOBase,json_lines:bool=False)->DF
polars.internals.dataframe.frame.DataFrame._read_parquet(cls:type[DF],file:str|Path|BinaryIO,columns:list[int]|list[str]|None=None,n_rows:int|None=None,parallel:ParallelStrategy='auto',row_count_name:str|None=None,row_count_offset:int=0,low_memory:bool=False)->DF
polars.internals.dataframe.frame.DataFrame._repr_html_(self)->str
polars.internals.dataframe.frame.DataFrame.apply(self:DF,f:Callable[[tuple[Any,...]],Any],return_dtype:type[DataType]|None=None,inference_size:int=256)->DF
polars.internals.dataframe.frame.DataFrame.cleared(self:DF)->DF
polars.internals.dataframe.frame.DataFrame.clone(self:DF)->DF
polars.internals.dataframe.frame.DataFrame.columns(self)->list[str]
polars.internals.dataframe.frame.DataFrame.columns(self,columns:Sequence[str])->None
polars.internals.dataframe.frame.DataFrame.describe(self:DF)->DF
polars.internals.dataframe.frame.DataFrame.drop(self:DF,name:str|list[str])->DF
polars.internals.dataframe.frame.DataFrame.drop_in_place(self,name:str)->pli.Series
polars.internals.dataframe.frame.DataFrame.drop_nulls(self:DF,subset:str|list[str]|None=None)->DF
polars.internals.dataframe.frame.DataFrame.dtypes(self)->list[type[DataType]]
polars.internals.dataframe.frame.DataFrame.estimated_size(self,unit:SizeUnit='b')->int | float
polars.internals.dataframe.frame.DataFrame.explode(self,columns:str|list[str]|pli.Expr|list[pli.Expr])->DataFrame
polars.internals.dataframe.frame.DataFrame.extend(self,other:DataFrame)->None
polars.internals.dataframe.frame.DataFrame.fill_nan(self,fill_value:pli.Expr|int|float|None)->DataFrame
polars.internals.dataframe.frame.DataFrame.fill_null(self,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->DataFrame
polars.internals.dataframe.frame.DataFrame.filter(self,predicate:pli.Expr|str|pli.Series|list[bool]|np.ndarray[Any,Any])->DataFrame
polars.internals.dataframe.frame.DataFrame.find_idx_by_name(self,name:str)->int
polars.internals.dataframe.frame.DataFrame.fold(self,operation:Callable[[pli.Series,pli.Series],pli.Series])->pli.Series
polars.internals.dataframe.frame.DataFrame.frame_equal(self,other:DataFrame,null_equal:bool=True)->bool
polars.internals.dataframe.frame.DataFrame.get_column(self,name:str)->pli.Series
polars.internals.dataframe.frame.DataFrame.get_columns(self)->list[pli.Series]
polars.internals.dataframe.frame.DataFrame.groupby(self:DF,by:str|pli.Expr|Sequence[str|pli.Expr],maintain_order:bool=False)->GroupBy[DF]
polars.internals.dataframe.frame.DataFrame.groupby_dynamic(self:DF,index_column:str,every:str,period:str|None=None,offset:str|None=None,truncate:bool=True,include_boundaries:bool=False,closed:ClosedWindow='left',by:str|list[str]|pli.Expr|list[pli.Expr]|None=None)->DynamicGroupBy[DF]
polars.internals.dataframe.frame.DataFrame.groupby_rolling(self:DF,index_column:str,period:str,offset:str|None=None,closed:ClosedWindow='right',by:str|list[str]|pli.Expr|list[pli.Expr]|None=None)->RollingGroupBy[DF]
polars.internals.dataframe.frame.DataFrame.hash_rows(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->pli.Series
polars.internals.dataframe.frame.DataFrame.head(self:DF,n:int=5)->DF
polars.internals.dataframe.frame.DataFrame.height(self)->int
polars.internals.dataframe.frame.DataFrame.hstack(self:DF,columns:list[pli.Series]|DataFrame,in_place:bool=False)->DF | None
polars.internals.dataframe.frame.DataFrame.insert_at_idx(self,index:int,series:pli.Series)->None
polars.internals.dataframe.frame.DataFrame.interpolate(self)->DataFrame
polars.internals.dataframe.frame.DataFrame.is_duplicated(self)->pli.Series
polars.internals.dataframe.frame.DataFrame.is_empty(self)->bool
polars.internals.dataframe.frame.DataFrame.is_unique(self)->pli.Series
polars.internals.dataframe.frame.DataFrame.join(self,other:DataFrame,left_on:str|pli.Expr|list[str|pli.Expr]|None=None,right_on:str|pli.Expr|list[str|pli.Expr]|None=None,on:str|pli.Expr|list[str|pli.Expr]|None=None,how:JoinStrategy='inner',suffix:str='_right')->DataFrame
polars.internals.dataframe.frame.DataFrame.join_asof(self,other:DataFrame,left_on:str|None=None,right_on:str|None=None,on:str|None=None,by_left:str|list[str]|None=None,by_right:str|list[str]|None=None,by:str|list[str]|None=None,strategy:AsofJoinStrategy='backward',suffix:str='_right',tolerance:str|int|float|None=None,allow_parallel:bool=True,force_parallel:bool=False)->DataFrame
polars.internals.dataframe.frame.DataFrame.lazy(self:DF)->pli.LazyFrame
polars.internals.dataframe.frame.DataFrame.limit(self:DF,n:int=5)->DF
polars.internals.dataframe.frame.DataFrame.max(self:DF,axis:int=0)->DF | pli.Series
polars.internals.dataframe.frame.DataFrame.mean(self:DF,axis:int=0,null_strategy:NullStrategy='ignore')->DF | pli.Series
polars.internals.dataframe.frame.DataFrame.median(self:DF)->DF
polars.internals.dataframe.frame.DataFrame.melt(self:DF,id_vars:list[str]|str|None=None,value_vars:list[str]|str|None=None,variable_name:str|None=None,value_name:str|None=None)->DF
polars.internals.dataframe.frame.DataFrame.min(self:DF,axis:int=0)->DF | pli.Series
polars.internals.dataframe.frame.DataFrame.n_chunks(self)->int
polars.internals.dataframe.frame.DataFrame.null_count(self:DF)->DF
polars.internals.dataframe.frame.DataFrame.partition_by(self:DF,groups:str|list[str],maintain_order:bool=True,*,as_dict:bool=False)->list[DF] | dict[Any, DF]
polars.internals.dataframe.frame.DataFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.internals.dataframe.frame.DataFrame.pivot(self:DF,values:list[str]|str,index:list[str]|str,columns:list[str]|str,aggregate_fn:PivotAgg|pli.Expr='first',maintain_order:bool=True,sort_columns:bool=False)->DF
polars.internals.dataframe.frame.DataFrame.product(self)->DataFrame
polars.internals.dataframe.frame.DataFrame.quantile(self:DF,quantile:float,interpolation:InterpolationMethod='nearest')->DF
polars.internals.dataframe.frame.DataFrame.rechunk(self:DF)->DF
polars.internals.dataframe.frame.DataFrame.rename(self,mapping:dict[str,str])->DataFrame
polars.internals.dataframe.frame.DataFrame.replace(self,column:str,new_col:pli.Series)->None
polars.internals.dataframe.frame.DataFrame.replace_at_idx(self,index:int,series:pli.Series)->None
polars.internals.dataframe.frame.DataFrame.reverse(self)->DataFrame
polars.internals.dataframe.frame.DataFrame.row(self,index:int)->tuple[Any]
polars.internals.dataframe.frame.DataFrame.rows(self)->list[tuple[object, ...]]
polars.internals.dataframe.frame.DataFrame.sample(self:DF,n:int|None=None,frac:float|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->DF
polars.internals.dataframe.frame.DataFrame.schema(self)->dict[str, type[DataType]]
polars.internals.dataframe.frame.DataFrame.select(self,exprs:str|pli.Expr|pli.Series|Sequence[str|pli.Expr|pli.Series])->DataFrame
polars.internals.dataframe.frame.DataFrame.shape(self)->tuple[int, int]
polars.internals.dataframe.frame.DataFrame.shift(self:DF,periods:int)->DF
polars.internals.dataframe.frame.DataFrame.shift_and_fill(self,periods:int,fill_value:int|str|float)->DataFrame
polars.internals.dataframe.frame.DataFrame.shrink_to_fit(self:DF,in_place:bool=False)->DF | None
polars.internals.dataframe.frame.DataFrame.slice(self:DF,offset:int,length:int|None=None)->DF
polars.internals.dataframe.frame.DataFrame.sort(self,by:str|pli.Expr|list[str]|list[pli.Expr],reverse:bool|list[bool]=False,nulls_last:bool=False)->DataFrame
polars.internals.dataframe.frame.DataFrame.std(self:DF,ddof:int=1)->DF
polars.internals.dataframe.frame.DataFrame.sum(self:DF,*,axis:int=0,null_strategy:NullStrategy='ignore')->DF | pli.Series
polars.internals.dataframe.frame.DataFrame.tail(self:DF,n:int=5)->DF
polars.internals.dataframe.frame.DataFrame.take_every(self,n:int)->DataFrame
polars.internals.dataframe.frame.DataFrame.to_arrow(self)->pa.Table
polars.internals.dataframe.frame.DataFrame.to_dict(self,as_series:bool=True)->dict[str, pli.Series] | dict[str, list[Any]]
polars.internals.dataframe.frame.DataFrame.to_dicts(self)->list[dict[str, Any]]
polars.internals.dataframe.frame.DataFrame.to_dummies(self:DF,*,columns:list[str]|None=None)->DF
polars.internals.dataframe.frame.DataFrame.to_numpy(self)->np.ndarray[Any, Any]
polars.internals.dataframe.frame.DataFrame.to_pandas(self,*args:Any,date_as_object:bool=False,**kwargs:Any)->pd.DataFrame
polars.internals.dataframe.frame.DataFrame.to_series(self,index:int=0)->pli.Series
polars.internals.dataframe.frame.DataFrame.to_struct(self,name:str)->pli.Series
polars.internals.dataframe.frame.DataFrame.transpose(self:DF,include_header:bool=False,header_name:str='column',column_names:Iterator[str]|Sequence[str]|None=None)->DF
polars.internals.dataframe.frame.DataFrame.unique(self:DF,maintain_order:bool=True,subset:str|list[str]|None=None,keep:UniqueKeepStrategy='first')->DF
polars.internals.dataframe.frame.DataFrame.unnest(self:DF,names:str|list[str])->DF
polars.internals.dataframe.frame.DataFrame.upsample(self:DF,time_column:str,every:str,offset:str|None=None,by:str|Sequence[str]|None=None,maintain_order:bool=False)->DF
polars.internals.dataframe.frame.DataFrame.var(self:DF,ddof:int=1)->DF
polars.internals.dataframe.frame.DataFrame.vstack(self:DF,df:DataFrame,in_place:bool=False)->DF | None
polars.internals.dataframe.frame.DataFrame.width(self)->int
polars.internals.dataframe.frame.DataFrame.with_column(self,column:pli.Series|pli.Expr)->DataFrame
polars.internals.dataframe.frame.DataFrame.with_columns(self,exprs:pli.Expr|pli.Series|Sequence[pli.Expr|pli.Series]|None=None,**named_exprs:pli.Expr|pli.Series)->DataFrame
polars.internals.dataframe.frame.DataFrame.with_row_count(self:DF,name:str='row_nr',offset:int=0)->DF
polars.internals.dataframe.frame.DataFrame.write_avro(self,file:BinaryIO|BytesIO|str|Path,compression:AvroCompression='uncompressed')->None
polars.internals.dataframe.frame.DataFrame.write_csv(self,file:TextIO|BytesIO|str|Path|None=None,has_header:bool=True,sep:str=',',quote:str='"',batch_size:int=1024,datetime_format:str|None=None,date_format:str|None=None,time_format:str|None=None,float_precision:int|None=None)->str | None
polars.internals.dataframe.frame.DataFrame.write_ipc(self,file:BinaryIO|BytesIO|str|Path,compression:IpcCompression='uncompressed')->None
polars.internals.dataframe.frame.DataFrame.write_json(self,file:IOBase|str|Path|None=None,pretty:bool=False,row_oriented:bool=False,json_lines:bool=False,*,to_string:bool=False)->str | None
polars.internals.dataframe.frame.DataFrame.write_parquet(self,file:str|Path|BytesIO,*,compression:ParquetCompression='lz4',compression_level:int|None=None,statistics:bool=False,row_group_size:int|None=None,use_pyarrow:bool=False,pyarrow_options:dict[str,object]|None=None)->None
polars.internals.dataframe.frame._prepare_other_arg(other:Any)->pli.Series
polars.internals.dataframe.frame.wrap_df(df:PyDataFrame)->DataFrame
polars.internals.wrap_df(df:PyDataFrame)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/dataframe/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/dataframe/groupby.py----------------------------------------
A:polars.internals.dataframe.groupby.DF->TypeVar('DF', bound='pli.DataFrame')
A:polars.internals.dataframe.groupby.groups_df->self._groups()
A:polars.internals.dataframe.groupby.df->self.agg_list()
A:polars.internals.dataframe.groupby.s->self.agg_list().drop_in_place(name + '_agg_list').apply(func, return_dtype)
polars.internals.dataframe.groupby.DynamicGroupBy(self,df:DF,index_column:str,every:str,period:str|None,offset:str|None,truncate:bool=True,include_boundaries:bool=True,closed:ClosedWindow='none',by:str|list[str]|pli.Expr|list[pli.Expr]|None=None)
polars.internals.dataframe.groupby.DynamicGroupBy.__init__(self,df:DF,index_column:str,every:str,period:str|None,offset:str|None,truncate:bool=True,include_boundaries:bool=True,closed:ClosedWindow='none',by:str|list[str]|pli.Expr|list[pli.Expr]|None=None)
polars.internals.dataframe.groupby.DynamicGroupBy.agg(self,aggs:pli.Expr|Sequence[pli.Expr])->pli.DataFrame
polars.internals.dataframe.groupby.GBSelection(self,df:PyDataFrame,by:str|list[str],selection:list[str]|None,dataframe_class:type[DF])
polars.internals.dataframe.groupby.GBSelection.__init__(self,df:PyDataFrame,by:str|list[str],selection:list[str]|None,dataframe_class:type[DF])
polars.internals.dataframe.groupby.GBSelection.agg_list(self)->DF
polars.internals.dataframe.groupby.GBSelection.apply(self,func:Callable[[Any],Any],return_dtype:type[DataType]|None=None)->DF
polars.internals.dataframe.groupby.GBSelection.count(self)->DF
polars.internals.dataframe.groupby.GBSelection.first(self)->DF
polars.internals.dataframe.groupby.GBSelection.last(self)->DF
polars.internals.dataframe.groupby.GBSelection.max(self)->DF
polars.internals.dataframe.groupby.GBSelection.mean(self)->DF
polars.internals.dataframe.groupby.GBSelection.median(self)->DF
polars.internals.dataframe.groupby.GBSelection.min(self)->DF
polars.internals.dataframe.groupby.GBSelection.n_unique(self)->DF
polars.internals.dataframe.groupby.GBSelection.quantile(self,quantile:float,interpolation:InterpolationMethod='nearest')->DF
polars.internals.dataframe.groupby.GBSelection.sum(self)->DF
polars.internals.dataframe.groupby.GroupBy(self,df:PyDataFrame,by:str|list[str],dataframe_class:type[DF],maintain_order:bool=False)
polars.internals.dataframe.groupby.GroupBy.__init__(self,df:PyDataFrame,by:str|list[str],dataframe_class:type[DF],maintain_order:bool=False)
polars.internals.dataframe.groupby.GroupBy.__iter__(self)->Iterable[Any]
polars.internals.dataframe.groupby.GroupBy._groups(self)->DF
polars.internals.dataframe.groupby.GroupBy._select(self,columns:str|list[str])->GBSelection[DF]
polars.internals.dataframe.groupby.GroupBy._select_all(self)->GBSelection[DF]
polars.internals.dataframe.groupby.GroupBy.agg(self,aggs:pli.Expr|Sequence[pli.Expr])->pli.DataFrame
polars.internals.dataframe.groupby.GroupBy.agg_list(self)->pli.DataFrame
polars.internals.dataframe.groupby.GroupBy.apply(self,f:Callable[[pli.DataFrame],pli.DataFrame])->DF
polars.internals.dataframe.groupby.GroupBy.count(self)->pli.DataFrame
polars.internals.dataframe.groupby.GroupBy.first(self)->pli.DataFrame
polars.internals.dataframe.groupby.GroupBy.head(self,n:int=5)->DF
polars.internals.dataframe.groupby.GroupBy.last(self)->pli.DataFrame
polars.internals.dataframe.groupby.GroupBy.max(self)->pli.DataFrame
polars.internals.dataframe.groupby.GroupBy.mean(self)->pli.DataFrame
polars.internals.dataframe.groupby.GroupBy.median(self)->pli.DataFrame
polars.internals.dataframe.groupby.GroupBy.min(self)->pli.DataFrame
polars.internals.dataframe.groupby.GroupBy.n_unique(self)->pli.DataFrame
polars.internals.dataframe.groupby.GroupBy.pivot(self,pivot_column:str|list[str],values_column:str|list[str])->PivotOps[DF]
polars.internals.dataframe.groupby.GroupBy.quantile(self,quantile:float,interpolation:InterpolationMethod='nearest')->pli.DataFrame
polars.internals.dataframe.groupby.GroupBy.sum(self)->pli.DataFrame
polars.internals.dataframe.groupby.GroupBy.tail(self,n:int=5)->DF
polars.internals.dataframe.groupby.RollingGroupBy(self,df:DF,index_column:str,period:str,offset:str|None,closed:ClosedWindow='none',by:str|list[str]|pli.Expr|list[pli.Expr]|None=None)
polars.internals.dataframe.groupby.RollingGroupBy.__init__(self,df:DF,index_column:str,period:str,offset:str|None,closed:ClosedWindow='none',by:str|list[str]|pli.Expr|list[pli.Expr]|None=None)
polars.internals.dataframe.groupby.RollingGroupBy.agg(self,aggs:pli.Expr|Sequence[pli.Expr])->pli.DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/dataframe/pivot.py----------------------------------------
A:polars.internals.dataframe.pivot.DF->TypeVar('DF', bound='pli.DataFrame')
polars.internals.dataframe.pivot.PivotOps(self,df:PyDataFrame,by:str|list[str],pivot_column:str|list[str],values_column:str|list[str],dataframe_class:type[DF])
polars.internals.dataframe.pivot.PivotOps.__init__(self,df:PyDataFrame,by:str|list[str],pivot_column:str|list[str],values_column:str|list[str],dataframe_class:type[DF])
polars.internals.dataframe.pivot.PivotOps.count(self)->DF
polars.internals.dataframe.pivot.PivotOps.first(self)->DF
polars.internals.dataframe.pivot.PivotOps.last(self)->DF
polars.internals.dataframe.pivot.PivotOps.max(self)->DF
polars.internals.dataframe.pivot.PivotOps.mean(self)->DF
polars.internals.dataframe.pivot.PivotOps.median(self)->DF
polars.internals.dataframe.pivot.PivotOps.min(self)->DF
polars.internals.dataframe.pivot.PivotOps.sum(self)->DF


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/series/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/series/categorical.py----------------------------------------
polars.internals.series.categorical.CatNameSpace(self,series:pli.Series)
polars.internals.series.categorical.CatNameSpace.__init__(self,series:pli.Series)
polars.internals.series.categorical.CatNameSpace.set_ordering(self,ordering:CategoricalOrdering)->pli.Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/series/series.py----------------------------------------
A:polars.internals.series.series.self._s->self._s.sort(reverse)
A:polars.internals.series.series.dtype->Datetime('ms')
A:polars.internals.series.series.series->self.clone()
A:polars.internals.series.series.other->float(other)
A:polars.internals.series.series.ts->_datetime_to_pl_timestamp(other, self.time_unit)
A:polars.internals.series.series.f->get_ffi_func('set_with_mask_<>', self.dtype, self._s)
A:polars.internals.series.series.d->_date_to_pl_date(other)
A:polars.internals.series.series._s->sequence_to_pyseries('', [other])
A:polars.internals.series.series.result->result.floor().floor()
A:polars.internals.series.series.idx_type->get_idx_type()
A:polars.internals.series.series.idxs->numpy.where(idxs < 0, self.len() + idxs, idxs)
A:polars.internals.series.series.out->f(item)
A:polars.internals.series.series.item->Series('', item)
A:polars.internals.series.series.s->self.clone()
A:polars.internals.series.series.sz->self._s.estimated_size()
A:polars.internals.series.series.predicate->Series('', predicate)
A:polars.internals.series.series.opt_s->self._s.rechunk(in_place)
A:polars.internals.series.series.ptr_type->dtype_to_ctype(self.dtype)
A:polars.internals.series.series.ptr->self._s.as_single_ptr()
A:polars.internals.series.series.array->_ptr_to_numpy(ptr, self.len(), ptr_type)
A:polars.internals.series.series.np_array->self._s.to_numpy()
A:polars.internals.series.series.idx->Series('', idx)
A:polars.internals.series.series.value->Series('', value)
A:polars.internals.series.series.pl_return_dtype->py_type_to_dtype(return_dtype)
A:polars.internals.series.series.tu->getattr(dtype, 'tu', np.datetime_data(ndtype)[0])
polars.internals.Series(self,name:str|ArrayLike|None=None,values:ArrayLike|Sequence[Any]|None=None,dtype:type[DataType]|DataType|None=None,strict:bool=True,nan_to_null:bool=False,dtype_if_empty:type[DataType]|DataType|None=None)
polars.internals.Series.__add__(self,other:Any)->Series
polars.internals.Series.__and__(self,other:Series)->Series
polars.internals.Series.__array__(self,dtype:Any=None)->np.ndarray[Any, Any]
polars.internals.Series.__array_ufunc__(self,ufunc:np.ufunc,method:str,*inputs:Any,**kwargs:Any)->Series
polars.internals.Series.__copy__(self)->Series
polars.internals.Series.__deepcopy__(self,memo:None=None)->Series
polars.internals.Series.__eq__(self,other:Any)->Series
polars.internals.Series.__floordiv__(self,other:Any)->Series
polars.internals.Series.__ge__(self,other:Any)->Series
polars.internals.Series.__getitem__(self,item:int|Series|range|slice|np.ndarray[Any,Any]|list[int]|list[bool])->Any
polars.internals.Series.__getstate__(self)->Any
polars.internals.Series.__gt__(self,other:Any)->Series
polars.internals.Series.__invert__(self)->Series
polars.internals.Series.__iter__(self)->SeriesIter
polars.internals.Series.__le__(self,other:Any)->Series
polars.internals.Series.__len__(self)->int
polars.internals.Series.__lt__(self,other:Any)->Series
polars.internals.Series.__mod__(self,other:Any)->Series
polars.internals.Series.__mul__(self,other:Any)->Series
polars.internals.Series.__ne__(self,other:Any)->Series
polars.internals.Series.__neg__(self)->Series
polars.internals.Series.__or__(self,other:Series)->Series
polars.internals.Series.__pow__(self,power:int|float|Series)->Series
polars.internals.Series.__radd__(self,other:Any)->Series
polars.internals.Series.__rand__(self,other:Series)->Series
polars.internals.Series.__repr__(self)->str
polars.internals.Series.__rfloordiv__(self,other:Any)->Series
polars.internals.Series.__rmod__(self,other:Any)->Series
polars.internals.Series.__rmul__(self,other:Any)->Series
polars.internals.Series.__ror__(self,other:Series)->Series
polars.internals.Series.__rpow__(self,other:Any)->Series
polars.internals.Series.__rsub__(self,other:Any)->Series
polars.internals.Series.__rtruediv__(self,other:Any)->Series
polars.internals.Series.__rxor__(self,other:Series)->Series
polars.internals.Series.__setitem__(self,key:int|Series|np.ndarray[Any,Any]|Sequence[object]|tuple[object],value:Any)->None
polars.internals.Series.__setstate__(self,state:Any)->None
polars.internals.Series.__str__(self)->str
polars.internals.Series.__sub__(self,other:Any)->Series
polars.internals.Series.__truediv__(self,other:Any)->Series
polars.internals.Series.__xor__(self,other:Series)->Series
polars.internals.Series._arithmetic(self,other:Any,op_s:str,op_ffi:str)->Series
polars.internals.Series._comp(self,other:Any,op:ComparisonOperator)->Series
polars.internals.Series._from_arrow(cls,name:str,values:pa.Array,rechunk:bool=True)->Series
polars.internals.Series._from_pandas(cls,name:str,values:pd.Series|pd.DatetimeIndex,nan_to_none:bool=True)->Series
polars.internals.Series._from_pyseries(cls,pyseries:PySeries)->Series
polars.internals.Series._pos_idxs(self,idxs:np.ndarray[Any,Any]|Series)->Series
polars.internals.Series._repeat(cls,name:str,val:int|float|str|bool,n:int,dtype:type[DataType])->Series
polars.internals.Series.abs(self)->Series
polars.internals.Series.alias(self,name:str)->Series
polars.internals.Series.all(self)->bool
polars.internals.Series.any(self)->bool
polars.internals.Series.append(self,other:Series,append_chunks:bool=True)->None
polars.internals.Series.apply(self,func:Callable[[Any],Any],return_dtype:type[DataType]|None=None)->Series
polars.internals.Series.arccos(self)->Series
polars.internals.Series.arccosh(self)->Series
polars.internals.Series.arcsin(self)->Series
polars.internals.Series.arcsinh(self)->Series
polars.internals.Series.arctan(self)->Series
polars.internals.Series.arctanh(self)->Series
polars.internals.Series.arg_max(self)->int | None
polars.internals.Series.arg_min(self)->int | None
polars.internals.Series.arg_sort(self,reverse:bool=False,nulls_last:bool=False)->Series
polars.internals.Series.arg_true(self)->Series
polars.internals.Series.arg_unique(self)->Series
polars.internals.Series.argsort(self,reverse:bool=False,nulls_last:bool=False)->Series
polars.internals.Series.arr(self)->ListNameSpace
polars.internals.Series.cast(self,dtype:type[DataType]|type[int]|type[float]|type[str]|type[bool]|DataType,strict:bool=True)->Series
polars.internals.Series.cat(self)->CatNameSpace
polars.internals.Series.ceil(self)->Series
polars.internals.Series.chunk_lengths(self)->list[int]
polars.internals.Series.cleared(self)->Series
polars.internals.Series.clip(self,min_val:int|float,max_val:int|float)->Series
polars.internals.Series.clip_max(self,max_val:int|float)->Series
polars.internals.Series.clip_min(self,min_val:int|float)->Series
polars.internals.Series.clone(self)->Series
polars.internals.Series.cos(self)->Series
polars.internals.Series.cosh(self)->Series
polars.internals.Series.cummax(self,reverse:bool=False)->Series
polars.internals.Series.cummin(self,reverse:bool=False)->Series
polars.internals.Series.cumprod(self,reverse:bool=False)->Series
polars.internals.Series.cumsum(self,reverse:bool=False)->Series
polars.internals.Series.cumulative_eval(self,expr:pli.Expr,min_periods:int=1,parallel:bool=False)->Series
polars.internals.Series.describe(self)->pli.DataFrame
polars.internals.Series.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->Series
polars.internals.Series.dot(self,other:Series)->float | None
polars.internals.Series.drop_nans(self)->Series
polars.internals.Series.drop_nulls(self)->Series
polars.internals.Series.dt(self)->DateTimeNameSpace
polars.internals.Series.dtype(self)->type[DataType]
polars.internals.Series.entropy(self,base:float=math.e,normalize:bool=False)->float | None
polars.internals.Series.estimated_size(self,unit:SizeUnit='b')->int | float
polars.internals.Series.ewm_mean(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_periods:int=1)->Series
polars.internals.Series.ewm_std(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_periods:int=1)->Series
polars.internals.Series.ewm_var(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_periods:int=1)->Series
polars.internals.Series.exp(self)->Series
polars.internals.Series.explode(self)->Series
polars.internals.Series.extend_constant(self,value:int|float|str|bool|None,n:int)->Series
polars.internals.Series.fill_nan(self,fill_value:str|int|float|bool|pli.Expr|None)->Series
polars.internals.Series.fill_null(self,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->Series
polars.internals.Series.filter(self,predicate:Series|list[bool])->Series
polars.internals.Series.flags(self)->dict[str, bool]
polars.internals.Series.floor(self)->Series
polars.internals.Series.has_validity(self)->bool
polars.internals.Series.hash(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->pli.Series
polars.internals.Series.head(self,n:int=10)->Series
polars.internals.Series.inner_dtype(self)->type[DataType] | None
polars.internals.Series.interpolate(self)->Series
polars.internals.Series.is_boolean(self)->bool
polars.internals.Series.is_datelike(self)->bool
polars.internals.Series.is_duplicated(self)->Series
polars.internals.Series.is_empty(self)->bool
polars.internals.Series.is_finite(self)->Series
polars.internals.Series.is_first(self)->Series
polars.internals.Series.is_float(self)->bool
polars.internals.Series.is_in(self,other:Series|Sequence[Any])->Series
polars.internals.Series.is_infinite(self)->Series
polars.internals.Series.is_nan(self)->Series
polars.internals.Series.is_not_nan(self)->Series
polars.internals.Series.is_not_null(self)->Series
polars.internals.Series.is_null(self)->Series
polars.internals.Series.is_numeric(self)->bool
polars.internals.Series.is_unique(self)->Series
polars.internals.Series.is_utf8(self)->bool
polars.internals.Series.kurtosis(self,fisher:bool=True,bias:bool=True)->float | None
polars.internals.Series.len(self)->int
polars.internals.Series.limit(self,n:int=10)->Series
polars.internals.Series.log(self,base:float=math.e)->Series
polars.internals.Series.log10(self)->Series
polars.internals.Series.max(self)->int | float | date | datetime | timedelta
polars.internals.Series.mean(self)->int | float
polars.internals.Series.median(self)->float
polars.internals.Series.min(self)->int | float | date | datetime | timedelta
polars.internals.Series.mode(self)->Series
polars.internals.Series.n_chunks(self)->int
polars.internals.Series.n_unique(self)->int
polars.internals.Series.name(self)->str
polars.internals.Series.null_count(self)->int
polars.internals.Series.pct_change(self,n:int=1)->Series
polars.internals.Series.peak_max(self)->Series
polars.internals.Series.peak_min(self)->Series
polars.internals.Series.product(self)->int | float
polars.internals.Series.quantile(self,quantile:float,interpolation:InterpolationMethod='nearest')->float
polars.internals.Series.rank(self,method:RankMethod='average',reverse:bool=False)->Series
polars.internals.Series.rechunk(self,in_place:bool=False)->Series | None
polars.internals.Series.reinterpret(self,signed:bool=True)->Series
polars.internals.Series.rename(self,name:str,in_place:bool=False)->Series | None
polars.internals.Series.reshape(self,dims:tuple[int,...])->Series
polars.internals.Series.reverse(self)->Series
polars.internals.Series.rolling_apply(self,function:Callable[[pli.Series],Any],window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->pli.Series
polars.internals.Series.rolling_max(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.Series.rolling_mean(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.Series.rolling_median(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.Series.rolling_min(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.Series.rolling_quantile(self,quantile:float,interpolation:InterpolationMethod='nearest',window_size:int=2,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.Series.rolling_skew(self,window_size:int,bias:bool=True)->Series
polars.internals.Series.rolling_std(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.Series.rolling_sum(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.Series.rolling_var(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.Series.round(self,decimals:int)->Series
polars.internals.Series.sample(self,n:int|None=None,frac:float|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->Series
polars.internals.Series.search_sorted(self,element:int|float)->int
polars.internals.Series.series_equal(self,other:Series,null_equal:bool=False,strict:bool=False)->bool
polars.internals.Series.set(self,filter:Series,value:int|float|str)->Series
polars.internals.Series.set_at_idx(self,idx:Series|np.ndarray[Any,Any]|Sequence[int]|int,value:int|float|str|bool|Sequence[int]|Sequence[float]|Sequence[date]|Sequence[datetime]|date|datetime|Series|None)->Series
polars.internals.Series.set_sorted(self,reverse:bool=False)->Series
polars.internals.Series.shape(self)->tuple[int]
polars.internals.Series.shift(self,periods:int=1)->Series
polars.internals.Series.shift_and_fill(self,periods:int,fill_value:int|pli.Expr)->Series
polars.internals.Series.shrink_to_fit(self,in_place:bool=False)->Series | None
polars.internals.Series.shuffle(self,seed:int|None=None)->Series
polars.internals.Series.sign(self)->Series
polars.internals.Series.sin(self)->Series
polars.internals.Series.sinh(self)->Series
polars.internals.Series.skew(self,bias:bool=True)->float | None
polars.internals.Series.slice(self,offset:int,length:int|None=None)->Series
polars.internals.Series.sort(self,reverse:bool=False,*,in_place:bool=False)->Series | None
polars.internals.Series.sqrt(self)->Series
polars.internals.Series.std(self,ddof:int=1)->float | None
polars.internals.Series.str(self)->StringNameSpace
polars.internals.Series.struct(self)->StructNameSpace
polars.internals.Series.sum(self)->int | float
polars.internals.Series.tail(self,n:int=10)->Series
polars.internals.Series.take(self,indices:int|list[int]|pli.Expr|Series|np.ndarray[Any,Any])->Series
polars.internals.Series.take_every(self,n:int)->Series
polars.internals.Series.tan(self)->Series
polars.internals.Series.tanh(self)->Series
polars.internals.Series.time_unit(self)->TimeUnit | None
polars.internals.Series.to_arrow(self)->pa.Array
polars.internals.Series.to_dummies(self)->pli.DataFrame
polars.internals.Series.to_frame(self)->pli.DataFrame
polars.internals.Series.to_list(self,use_pyarrow:bool=False)->list[Any | None]
polars.internals.Series.to_numpy(self,*args:Any,zero_copy_only:bool=False,writable:bool=False)->np.ndarray[Any, Any]
polars.internals.Series.to_pandas(self)->pd.Series
polars.internals.Series.to_physical(self)->Series
polars.internals.Series.top_k(self,k:int=5,reverse:bool=False)->Series
polars.internals.Series.unique(self,maintain_order:bool=False)->Series
polars.internals.Series.unique_counts(self)->Series
polars.internals.Series.value_counts(self,sort:bool=False)->pli.DataFrame
polars.internals.Series.var(self,ddof:int=1)->float | None
polars.internals.Series.view(self,ignore_nulls:bool=False)->SeriesView
polars.internals.Series.zip_with(self,mask:Series,other:Series)->Series
polars.internals.SeriesIter(self,length:int,s:Series)
polars.internals.SeriesIter.__iter__(self)->SeriesIter
polars.internals.SeriesIter.__next__(self)->Any
polars.internals.series.series.Series(self,name:str|ArrayLike|None=None,values:ArrayLike|Sequence[Any]|None=None,dtype:type[DataType]|DataType|None=None,strict:bool=True,nan_to_null:bool=False,dtype_if_empty:type[DataType]|DataType|None=None)
polars.internals.series.series.Series.__add__(self,other:Any)->Series
polars.internals.series.series.Series.__and__(self,other:Series)->Series
polars.internals.series.series.Series.__array__(self,dtype:Any=None)->np.ndarray[Any, Any]
polars.internals.series.series.Series.__array_ufunc__(self,ufunc:np.ufunc,method:str,*inputs:Any,**kwargs:Any)->Series
polars.internals.series.series.Series.__copy__(self)->Series
polars.internals.series.series.Series.__deepcopy__(self,memo:None=None)->Series
polars.internals.series.series.Series.__eq__(self,other:Any)->Series
polars.internals.series.series.Series.__floordiv__(self,other:Any)->Series
polars.internals.series.series.Series.__ge__(self,other:Any)->Series
polars.internals.series.series.Series.__getitem__(self,item:int|Series|range|slice|np.ndarray[Any,Any]|list[int]|list[bool])->Any
polars.internals.series.series.Series.__getstate__(self)->Any
polars.internals.series.series.Series.__gt__(self,other:Any)->Series
polars.internals.series.series.Series.__init__(self,name:str|ArrayLike|None=None,values:ArrayLike|Sequence[Any]|None=None,dtype:type[DataType]|DataType|None=None,strict:bool=True,nan_to_null:bool=False,dtype_if_empty:type[DataType]|DataType|None=None)
polars.internals.series.series.Series.__invert__(self)->Series
polars.internals.series.series.Series.__iter__(self)->SeriesIter
polars.internals.series.series.Series.__le__(self,other:Any)->Series
polars.internals.series.series.Series.__len__(self)->int
polars.internals.series.series.Series.__lt__(self,other:Any)->Series
polars.internals.series.series.Series.__mod__(self,other:Any)->Series
polars.internals.series.series.Series.__mul__(self,other:Any)->Series
polars.internals.series.series.Series.__ne__(self,other:Any)->Series
polars.internals.series.series.Series.__neg__(self)->Series
polars.internals.series.series.Series.__or__(self,other:Series)->Series
polars.internals.series.series.Series.__pow__(self,power:int|float|Series)->Series
polars.internals.series.series.Series.__radd__(self,other:Any)->Series
polars.internals.series.series.Series.__rand__(self,other:Series)->Series
polars.internals.series.series.Series.__repr__(self)->str
polars.internals.series.series.Series.__rfloordiv__(self,other:Any)->Series
polars.internals.series.series.Series.__rmod__(self,other:Any)->Series
polars.internals.series.series.Series.__rmul__(self,other:Any)->Series
polars.internals.series.series.Series.__ror__(self,other:Series)->Series
polars.internals.series.series.Series.__rpow__(self,other:Any)->Series
polars.internals.series.series.Series.__rsub__(self,other:Any)->Series
polars.internals.series.series.Series.__rtruediv__(self,other:Any)->Series
polars.internals.series.series.Series.__rxor__(self,other:Series)->Series
polars.internals.series.series.Series.__setitem__(self,key:int|Series|np.ndarray[Any,Any]|Sequence[object]|tuple[object],value:Any)->None
polars.internals.series.series.Series.__setstate__(self,state:Any)->None
polars.internals.series.series.Series.__str__(self)->str
polars.internals.series.series.Series.__sub__(self,other:Any)->Series
polars.internals.series.series.Series.__truediv__(self,other:Any)->Series
polars.internals.series.series.Series.__xor__(self,other:Series)->Series
polars.internals.series.series.Series._arithmetic(self,other:Any,op_s:str,op_ffi:str)->Series
polars.internals.series.series.Series._comp(self,other:Any,op:ComparisonOperator)->Series
polars.internals.series.series.Series._from_arrow(cls,name:str,values:pa.Array,rechunk:bool=True)->Series
polars.internals.series.series.Series._from_pandas(cls,name:str,values:pd.Series|pd.DatetimeIndex,nan_to_none:bool=True)->Series
polars.internals.series.series.Series._from_pyseries(cls,pyseries:PySeries)->Series
polars.internals.series.series.Series._pos_idxs(self,idxs:np.ndarray[Any,Any]|Series)->Series
polars.internals.series.series.Series._repeat(cls,name:str,val:int|float|str|bool,n:int,dtype:type[DataType])->Series
polars.internals.series.series.Series.abs(self)->Series
polars.internals.series.series.Series.alias(self,name:str)->Series
polars.internals.series.series.Series.all(self)->bool
polars.internals.series.series.Series.any(self)->bool
polars.internals.series.series.Series.append(self,other:Series,append_chunks:bool=True)->None
polars.internals.series.series.Series.apply(self,func:Callable[[Any],Any],return_dtype:type[DataType]|None=None)->Series
polars.internals.series.series.Series.arccos(self)->Series
polars.internals.series.series.Series.arccosh(self)->Series
polars.internals.series.series.Series.arcsin(self)->Series
polars.internals.series.series.Series.arcsinh(self)->Series
polars.internals.series.series.Series.arctan(self)->Series
polars.internals.series.series.Series.arctanh(self)->Series
polars.internals.series.series.Series.arg_max(self)->int | None
polars.internals.series.series.Series.arg_min(self)->int | None
polars.internals.series.series.Series.arg_sort(self,reverse:bool=False,nulls_last:bool=False)->Series
polars.internals.series.series.Series.arg_true(self)->Series
polars.internals.series.series.Series.arg_unique(self)->Series
polars.internals.series.series.Series.argsort(self,reverse:bool=False,nulls_last:bool=False)->Series
polars.internals.series.series.Series.arr(self)->ListNameSpace
polars.internals.series.series.Series.cast(self,dtype:type[DataType]|type[int]|type[float]|type[str]|type[bool]|DataType,strict:bool=True)->Series
polars.internals.series.series.Series.cat(self)->CatNameSpace
polars.internals.series.series.Series.ceil(self)->Series
polars.internals.series.series.Series.chunk_lengths(self)->list[int]
polars.internals.series.series.Series.cleared(self)->Series
polars.internals.series.series.Series.clip(self,min_val:int|float,max_val:int|float)->Series
polars.internals.series.series.Series.clip_max(self,max_val:int|float)->Series
polars.internals.series.series.Series.clip_min(self,min_val:int|float)->Series
polars.internals.series.series.Series.clone(self)->Series
polars.internals.series.series.Series.cos(self)->Series
polars.internals.series.series.Series.cosh(self)->Series
polars.internals.series.series.Series.cummax(self,reverse:bool=False)->Series
polars.internals.series.series.Series.cummin(self,reverse:bool=False)->Series
polars.internals.series.series.Series.cumprod(self,reverse:bool=False)->Series
polars.internals.series.series.Series.cumsum(self,reverse:bool=False)->Series
polars.internals.series.series.Series.cumulative_eval(self,expr:pli.Expr,min_periods:int=1,parallel:bool=False)->Series
polars.internals.series.series.Series.describe(self)->pli.DataFrame
polars.internals.series.series.Series.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->Series
polars.internals.series.series.Series.dot(self,other:Series)->float | None
polars.internals.series.series.Series.drop_nans(self)->Series
polars.internals.series.series.Series.drop_nulls(self)->Series
polars.internals.series.series.Series.dt(self)->DateTimeNameSpace
polars.internals.series.series.Series.dtype(self)->type[DataType]
polars.internals.series.series.Series.entropy(self,base:float=math.e,normalize:bool=False)->float | None
polars.internals.series.series.Series.estimated_size(self,unit:SizeUnit='b')->int | float
polars.internals.series.series.Series.ewm_mean(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_periods:int=1)->Series
polars.internals.series.series.Series.ewm_std(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_periods:int=1)->Series
polars.internals.series.series.Series.ewm_var(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_periods:int=1)->Series
polars.internals.series.series.Series.exp(self)->Series
polars.internals.series.series.Series.explode(self)->Series
polars.internals.series.series.Series.extend_constant(self,value:int|float|str|bool|None,n:int)->Series
polars.internals.series.series.Series.fill_nan(self,fill_value:str|int|float|bool|pli.Expr|None)->Series
polars.internals.series.series.Series.fill_null(self,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->Series
polars.internals.series.series.Series.filter(self,predicate:Series|list[bool])->Series
polars.internals.series.series.Series.flags(self)->dict[str, bool]
polars.internals.series.series.Series.floor(self)->Series
polars.internals.series.series.Series.has_validity(self)->bool
polars.internals.series.series.Series.hash(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->pli.Series
polars.internals.series.series.Series.head(self,n:int=10)->Series
polars.internals.series.series.Series.inner_dtype(self)->type[DataType] | None
polars.internals.series.series.Series.interpolate(self)->Series
polars.internals.series.series.Series.is_boolean(self)->bool
polars.internals.series.series.Series.is_datelike(self)->bool
polars.internals.series.series.Series.is_duplicated(self)->Series
polars.internals.series.series.Series.is_empty(self)->bool
polars.internals.series.series.Series.is_finite(self)->Series
polars.internals.series.series.Series.is_first(self)->Series
polars.internals.series.series.Series.is_float(self)->bool
polars.internals.series.series.Series.is_in(self,other:Series|Sequence[Any])->Series
polars.internals.series.series.Series.is_infinite(self)->Series
polars.internals.series.series.Series.is_nan(self)->Series
polars.internals.series.series.Series.is_not_nan(self)->Series
polars.internals.series.series.Series.is_not_null(self)->Series
polars.internals.series.series.Series.is_null(self)->Series
polars.internals.series.series.Series.is_numeric(self)->bool
polars.internals.series.series.Series.is_unique(self)->Series
polars.internals.series.series.Series.is_utf8(self)->bool
polars.internals.series.series.Series.kurtosis(self,fisher:bool=True,bias:bool=True)->float | None
polars.internals.series.series.Series.len(self)->int
polars.internals.series.series.Series.limit(self,n:int=10)->Series
polars.internals.series.series.Series.log(self,base:float=math.e)->Series
polars.internals.series.series.Series.log10(self)->Series
polars.internals.series.series.Series.max(self)->int | float | date | datetime | timedelta
polars.internals.series.series.Series.mean(self)->int | float
polars.internals.series.series.Series.median(self)->float
polars.internals.series.series.Series.min(self)->int | float | date | datetime | timedelta
polars.internals.series.series.Series.mode(self)->Series
polars.internals.series.series.Series.n_chunks(self)->int
polars.internals.series.series.Series.n_unique(self)->int
polars.internals.series.series.Series.name(self)->str
polars.internals.series.series.Series.null_count(self)->int
polars.internals.series.series.Series.pct_change(self,n:int=1)->Series
polars.internals.series.series.Series.peak_max(self)->Series
polars.internals.series.series.Series.peak_min(self)->Series
polars.internals.series.series.Series.product(self)->int | float
polars.internals.series.series.Series.quantile(self,quantile:float,interpolation:InterpolationMethod='nearest')->float
polars.internals.series.series.Series.rank(self,method:RankMethod='average',reverse:bool=False)->Series
polars.internals.series.series.Series.rechunk(self,in_place:bool=False)->Series | None
polars.internals.series.series.Series.reinterpret(self,signed:bool=True)->Series
polars.internals.series.series.Series.rename(self,name:str,in_place:bool=False)->Series | None
polars.internals.series.series.Series.reshape(self,dims:tuple[int,...])->Series
polars.internals.series.series.Series.reverse(self)->Series
polars.internals.series.series.Series.rolling_apply(self,function:Callable[[pli.Series],Any],window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->pli.Series
polars.internals.series.series.Series.rolling_max(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.series.series.Series.rolling_mean(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.series.series.Series.rolling_median(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.series.series.Series.rolling_min(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.series.series.Series.rolling_quantile(self,quantile:float,interpolation:InterpolationMethod='nearest',window_size:int=2,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.series.series.Series.rolling_skew(self,window_size:int,bias:bool=True)->Series
polars.internals.series.series.Series.rolling_std(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.series.series.Series.rolling_sum(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.series.series.Series.rolling_var(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Series
polars.internals.series.series.Series.round(self,decimals:int)->Series
polars.internals.series.series.Series.sample(self,n:int|None=None,frac:float|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->Series
polars.internals.series.series.Series.search_sorted(self,element:int|float)->int
polars.internals.series.series.Series.series_equal(self,other:Series,null_equal:bool=False,strict:bool=False)->bool
polars.internals.series.series.Series.set(self,filter:Series,value:int|float|str)->Series
polars.internals.series.series.Series.set_at_idx(self,idx:Series|np.ndarray[Any,Any]|Sequence[int]|int,value:int|float|str|bool|Sequence[int]|Sequence[float]|Sequence[date]|Sequence[datetime]|date|datetime|Series|None)->Series
polars.internals.series.series.Series.set_sorted(self,reverse:bool=False)->Series
polars.internals.series.series.Series.shape(self)->tuple[int]
polars.internals.series.series.Series.shift(self,periods:int=1)->Series
polars.internals.series.series.Series.shift_and_fill(self,periods:int,fill_value:int|pli.Expr)->Series
polars.internals.series.series.Series.shrink_to_fit(self,in_place:bool=False)->Series | None
polars.internals.series.series.Series.shuffle(self,seed:int|None=None)->Series
polars.internals.series.series.Series.sign(self)->Series
polars.internals.series.series.Series.sin(self)->Series
polars.internals.series.series.Series.sinh(self)->Series
polars.internals.series.series.Series.skew(self,bias:bool=True)->float | None
polars.internals.series.series.Series.slice(self,offset:int,length:int|None=None)->Series
polars.internals.series.series.Series.sort(self,reverse:bool=False,*,in_place:bool=False)->Series | None
polars.internals.series.series.Series.sqrt(self)->Series
polars.internals.series.series.Series.std(self,ddof:int=1)->float | None
polars.internals.series.series.Series.str(self)->StringNameSpace
polars.internals.series.series.Series.struct(self)->StructNameSpace
polars.internals.series.series.Series.sum(self)->int | float
polars.internals.series.series.Series.tail(self,n:int=10)->Series
polars.internals.series.series.Series.take(self,indices:int|list[int]|pli.Expr|Series|np.ndarray[Any,Any])->Series
polars.internals.series.series.Series.take_every(self,n:int)->Series
polars.internals.series.series.Series.tan(self)->Series
polars.internals.series.series.Series.tanh(self)->Series
polars.internals.series.series.Series.time_unit(self)->TimeUnit | None
polars.internals.series.series.Series.to_arrow(self)->pa.Array
polars.internals.series.series.Series.to_dummies(self)->pli.DataFrame
polars.internals.series.series.Series.to_frame(self)->pli.DataFrame
polars.internals.series.series.Series.to_list(self,use_pyarrow:bool=False)->list[Any | None]
polars.internals.series.series.Series.to_numpy(self,*args:Any,zero_copy_only:bool=False,writable:bool=False)->np.ndarray[Any, Any]
polars.internals.series.series.Series.to_pandas(self)->pd.Series
polars.internals.series.series.Series.to_physical(self)->Series
polars.internals.series.series.Series.top_k(self,k:int=5,reverse:bool=False)->Series
polars.internals.series.series.Series.unique(self,maintain_order:bool=False)->Series
polars.internals.series.series.Series.unique_counts(self)->Series
polars.internals.series.series.Series.value_counts(self,sort:bool=False)->pli.DataFrame
polars.internals.series.series.Series.var(self,ddof:int=1)->float | None
polars.internals.series.series.Series.view(self,ignore_nulls:bool=False)->SeriesView
polars.internals.series.series.Series.zip_with(self,mask:Series,other:Series)->Series
polars.internals.series.series.SeriesIter(self,length:int,s:Series)
polars.internals.series.series.SeriesIter.__init__(self,length:int,s:Series)
polars.internals.series.series.SeriesIter.__iter__(self)->SeriesIter
polars.internals.series.series.SeriesIter.__next__(self)->Any
polars.internals.series.series._resolve_datetime_dtype(dtype:PolarsDataType|None,ndtype:np.datetime64)->PolarsDataType | None
polars.internals.series.series.wrap_s(s:PySeries)->Series
polars.internals.wrap_s(s:PySeries)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/series/utils.py----------------------------------------
A:polars.internals.series.utils.T->TypeVar('T')
A:polars.internals.series.utils.P->ParamSpec('P')
A:polars.internals.series.utils._EMPTY_BYTECODE->_EmptyBytecodeHelper()
A:polars.internals.series.utils.expr->getattr(expr, namespace)
A:polars.internals.series.utils.lookup->set()
A:polars.internals.series.utils.m->getattr(expr, name)
A:polars.internals.series.utils.s->polars.internals.wrap_s(self._s)
A:polars.internals.series.utils.namespace->getattr(cls, '_accessor', None)
A:polars.internals.series.utils.f->getattr(expr, func.__name__)
A:polars.internals.series.utils.expr_lookup->_expr_lookup(namespace)
A:polars.internals.series.utils.attr->getattr(cls, name)
A:polars.internals.series.utils.ffi_name->dtype_to_ffiname(dtype)
A:polars.internals.series.utils.fname->name.replace('<>', ffi_name)
polars.internals.series.utils._EmptyBytecodeHelper(self)
polars.internals.series.utils._EmptyBytecodeHelper.__contains__(self,item:bytes)->bool
polars.internals.series.utils._EmptyBytecodeHelper.__init__(self)
polars.internals.series.utils._expr_lookup(namespace:str|None)->set[tuple[str | None, str, tuple[str, ...]]]
polars.internals.series.utils._is_empty_method(func:SeriesMethod)->bool
polars.internals.series.utils.call_expr(func:SeriesMethod)->SeriesMethod
polars.internals.series.utils.expr_dispatch(cls:type[T])->type[T]
polars.internals.series.utils.get_ffi_func(name:str,dtype:type[DataType],obj:PySeries)->Callable[..., Any] | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/series/list.py----------------------------------------
polars.internals.series.list.ListNameSpace(self,series:pli.Series)
polars.internals.series.list.ListNameSpace.__init__(self,series:pli.Series)
polars.internals.series.list.ListNameSpace.arg_max(self)->pli.Series
polars.internals.series.list.ListNameSpace.arg_min(self)->pli.Series
polars.internals.series.list.ListNameSpace.concat(self,other:list[pli.Series]|pli.Series|list[Any])->pli.Series
polars.internals.series.list.ListNameSpace.contains(self,item:float|str|bool|int|date|datetime)->pli.Series
polars.internals.series.list.ListNameSpace.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->pli.Series
polars.internals.series.list.ListNameSpace.eval(self,expr:pli.Expr,parallel:bool=False)->pli.Series
polars.internals.series.list.ListNameSpace.first(self)->pli.Series
polars.internals.series.list.ListNameSpace.get(self,index:int)->pli.Series
polars.internals.series.list.ListNameSpace.head(self,n:int=5)->pli.Series
polars.internals.series.list.ListNameSpace.join(self,separator:str)->pli.Series
polars.internals.series.list.ListNameSpace.last(self)->pli.Series
polars.internals.series.list.ListNameSpace.lengths(self)->pli.Series
polars.internals.series.list.ListNameSpace.max(self)->pli.Series
polars.internals.series.list.ListNameSpace.mean(self)->pli.Series
polars.internals.series.list.ListNameSpace.min(self)->pli.Series
polars.internals.series.list.ListNameSpace.reverse(self)->pli.Series
polars.internals.series.list.ListNameSpace.shift(self,periods:int=1)->pli.Series
polars.internals.series.list.ListNameSpace.slice(self,offset:int,length:int|None=None)->pli.Series
polars.internals.series.list.ListNameSpace.sort(self,reverse:bool=False)->pli.Series
polars.internals.series.list.ListNameSpace.sum(self)->pli.Series
polars.internals.series.list.ListNameSpace.tail(self,n:int=5)->pli.Series
polars.internals.series.list.ListNameSpace.unique(self)->pli.Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/series/datetime.py----------------------------------------
A:polars.internals.series.datetime.s->polars.internals.wrap_s(self._s)
A:polars.internals.series.datetime.out->int(s.mean())
polars.internals.series.datetime.DateTimeNameSpace(self,series:pli.Series)
polars.internals.series.datetime.DateTimeNameSpace.__getitem__(self,item:int)->date | datetime
polars.internals.series.datetime.DateTimeNameSpace.__init__(self,series:pli.Series)
polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit(self,tu:TimeUnit)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.day(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.days(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.epoch(self,tu:EpochTimeUnit='us')->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.hour(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.hours(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.max(self)->date | datetime | timedelta
polars.internals.series.datetime.DateTimeNameSpace.mean(self)->date | datetime
polars.internals.series.datetime.DateTimeNameSpace.median(self)->date | datetime | timedelta
polars.internals.series.datetime.DateTimeNameSpace.microseconds(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.milliseconds(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.min(self)->date | datetime | timedelta
polars.internals.series.datetime.DateTimeNameSpace.minute(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.minutes(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.month(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.nanosecond(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.nanoseconds(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.offset_by(self,by:str)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.ordinal_day(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.quarter(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.second(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.seconds(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.strftime(self,fmt:str)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.timestamp(self,tu:TimeUnit='us')->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.truncate(self,every:str|timedelta,offset:str|timedelta|None=None)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.week(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.weekday(self)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.with_time_unit(self,tu:TimeUnit)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.with_time_zone(self,tz:str|None)->pli.Series
polars.internals.series.datetime.DateTimeNameSpace.year(self)->pli.Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/series/struct.py----------------------------------------
polars.internals.series.struct.StructNameSpace(self,series:pli.Series)
polars.internals.series.struct.StructNameSpace.__getitem__(self,item:int|str)->pli.Series
polars.internals.series.struct.StructNameSpace.__init__(self,series:pli.Series)
polars.internals.series.struct.StructNameSpace.field(self,name:str)->pli.Series
polars.internals.series.struct.StructNameSpace.fields(self)->list[str]
polars.internals.series.struct.StructNameSpace.rename_fields(self,names:list[str])->pli.Series
polars.internals.series.struct.StructNameSpace.to_frame(self)->pli.DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/series/string.py----------------------------------------
A:polars.internals.series.string.s->polars.internals.wrap_s(self._s)
polars.internals.series.string.StringNameSpace(self,series:pli.Series)
polars.internals.series.string.StringNameSpace.__init__(self,series:pli.Series)
polars.internals.series.string.StringNameSpace.concat(self,delimiter:str='-')->pli.Series
polars.internals.series.string.StringNameSpace.contains(self,pattern:str,literal:bool=False)->pli.Series
polars.internals.series.string.StringNameSpace.count_match(self,pattern:str)->pli.Series
polars.internals.series.string.StringNameSpace.decode(self,encoding:TransferEncoding,strict:bool=False)->pli.Series
polars.internals.series.string.StringNameSpace.encode(self,encoding:TransferEncoding)->pli.Series
polars.internals.series.string.StringNameSpace.ends_with(self,sub:str)->pli.Series
polars.internals.series.string.StringNameSpace.extract(self,pattern:str,group_index:int=1)->pli.Series
polars.internals.series.string.StringNameSpace.extract_all(self,pattern:str)->pli.Series
polars.internals.series.string.StringNameSpace.json_path_match(self,json_path:str)->pli.Series
polars.internals.series.string.StringNameSpace.lengths(self)->pli.Series
polars.internals.series.string.StringNameSpace.ljust(self,width:int,fillchar:str='')->pli.Series
polars.internals.series.string.StringNameSpace.lstrip(self)->pli.Series
polars.internals.series.string.StringNameSpace.replace(self,pattern:str,value:str,literal:bool=False)->pli.Series
polars.internals.series.string.StringNameSpace.replace_all(self,pattern:str,value:str,literal:bool=False)->pli.Series
polars.internals.series.string.StringNameSpace.rjust(self,width:int,fillchar:str='')->pli.Series
polars.internals.series.string.StringNameSpace.rstrip(self)->pli.Series
polars.internals.series.string.StringNameSpace.slice(self,offset:int,length:int|None=None)->pli.Series
polars.internals.series.string.StringNameSpace.split(self,by:str,inclusive:bool=False)->pli.Series
polars.internals.series.string.StringNameSpace.split_exact(self,by:str,n:int,inclusive:bool=False)->pli.Series
polars.internals.series.string.StringNameSpace.splitn(self,by:str,n:int)->pli.Series
polars.internals.series.string.StringNameSpace.starts_with(self,sub:str)->pli.Series
polars.internals.series.string.StringNameSpace.strip(self)->pli.Series
polars.internals.series.string.StringNameSpace.strptime(self,datatype:type[Date]|type[Datetime]|type[Time],fmt:str|None=None,strict:bool=True,exact:bool=True)->pli.Series
polars.internals.series.string.StringNameSpace.to_lowercase(self)->pli.Series
polars.internals.series.string.StringNameSpace.to_uppercase(self)->pli.Series
polars.internals.series.string.StringNameSpace.zfill(self,alignment:int)->pli.Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/series/_numpy.py----------------------------------------
A:polars.internals.series._numpy.obj->input_array.view(cls)
A:polars.internals.series._numpy.self.owned_series->getattr(obj, 'owned_series', None)
A:polars.internals.series._numpy.ptr_ctype->ctypes.cast(ptr, ctypes.POINTER(ptr_type))
polars.internals.series._numpy.SeriesView(cls,input_array:np.ndarray[Any,Any],owned_series:pli.Series)
polars.internals.series._numpy.SeriesView.__array_finalize__(self,obj:Any)->None
polars.internals.series._numpy.SeriesView.__new__(cls,input_array:np.ndarray[Any,Any],owned_series:pli.Series)
polars.internals.series._numpy._ptr_to_numpy(ptr:int,len:int,ptr_type:Any)->np.ndarray[Any, Any]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/lazyframe/frame.py----------------------------------------
A:polars.internals.lazyframe.frame.LDF->TypeVar('LDF', bound='LazyFrame')
A:polars.internals.lazyframe.frame.self->cls.__new__(cls)
A:polars.internals.lazyframe.frame.processed_null_values->_process_null_values(null_values)
A:polars.internals.lazyframe.frame.self._ldf->polars.polars.PyLazyFrame.scan_from_python_function_arrow_schema(list(schema), scan_fn)
A:polars.internals.lazyframe.frame.scan->scan.with_row_count(row_count_name, row_count_offset).with_row_count(row_count_name, row_count_offset)
A:polars.internals.lazyframe.frame.file->format_path(file)
A:polars.internals.lazyframe.frame.f->StringIO(json)
A:polars.internals.lazyframe.frame.json_bytes->buf.getvalue()
A:polars.internals.lazyframe.frame.json_str->buf.getvalue().decode('utf8')
A:polars.internals.lazyframe.frame.dot->cls.__new__(cls)._ldf.to_dot(optimized)
A:polars.internals.lazyframe.frame.svg->subprocess.check_output(['dot', '-Nshape=box', '-Tsvg'], input=f'{dot}'.encode())
A:polars.internals.lazyframe.frame.insert->cls.__new__(cls).describe_plan().replace('\n', '<p></p>')
A:polars.internals.lazyframe.frame.ldf->cls.__new__(cls)._ldf.optimization_toggle(type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, string_cache, slice_pushdown)
A:polars.internals.lazyframe.frame.dot_path->os.path.join(tmpdir_name, 'dot')
A:polars.internals.lazyframe.frame.out_path->os.path.join(tmpdir_name, 'dot.png')
A:polars.internals.lazyframe.frame.img->matplotlib.image.imread(out_path)
A:polars.internals.lazyframe.frame.by->_prepare_groupby_inputs(by)
A:polars.internals.lazyframe.frame.predicate->polars.internals.Series(predicate)
A:polars.internals.lazyframe.frame.exprs->polars.internals.selection_to_pyexpr_list(exprs)
A:polars.internals.lazyframe.frame.new_by->_prepare_groupby_inputs(by)
A:polars.internals.lazyframe.frame.lgb->cls.__new__(cls)._ldf.groupby_dynamic(index_column, every, period, offset, truncate, include_boundaries, closed, by)
A:polars.internals.lazyframe.frame.column->polars.internals.col(column)
A:polars.internals.lazyframe.frame.existing->list(mapping.keys())
A:polars.internals.lazyframe.frame.new->list(mapping.values())
A:polars.internals.lazyframe.frame.fill_value->polars.internals.lit(fill_value)
A:polars.internals.lazyframe.frame.columns->polars.internals.selection_to_pyexpr_list(columns)
A:polars.internals.lazyframe.frame.e->polars.internals.col(e)
polars.internals.LazyFrame
polars.internals.LazyFrame.__contains__(self:LDF,key:str)->bool
polars.internals.LazyFrame.__copy__(self:LDF)->LDF
polars.internals.LazyFrame.__deepcopy__(self:LDF,memo:None=None)->LDF
polars.internals.LazyFrame.__getitem__(self:LDF,item:int|range|slice)->LazyFrame
polars.internals.LazyFrame.__str__(self)->str
polars.internals.LazyFrame._from_pyldf(cls:type[LDF],ldf:PyLazyFrame)->LDF
polars.internals.LazyFrame._repr_html_(self)->str
polars.internals.LazyFrame._scan_python_function(cls,schema:pa.schema|dict[str,type[DataType]],scan_fn:bytes)->LazyFrame
polars.internals.LazyFrame.cache(self:LDF)->LDF
polars.internals.LazyFrame.cleared(self)->LazyFrame
polars.internals.LazyFrame.clone(self:LDF)->LDF
polars.internals.LazyFrame.collect(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=False,no_optimization:bool=False,slice_pushdown:bool=True)->pli.DataFrame
polars.internals.LazyFrame.columns(self)->list[str]
polars.internals.LazyFrame.describe_optimized_plan(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True)->str
polars.internals.LazyFrame.describe_plan(self)->str
polars.internals.LazyFrame.drop(self:LDF,columns:str|list[str])->LDF
polars.internals.LazyFrame.drop_nulls(self:LDF,subset:list[str]|str|None=None)->LDF
polars.internals.LazyFrame.dtypes(self)->list[type[DataType]]
polars.internals.LazyFrame.explode(self:LDF,columns:str|list[str]|pli.Expr|list[pli.Expr])->LDF
polars.internals.LazyFrame.fetch(self,n_rows:int=500,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=False,no_optimization:bool=False,slice_pushdown:bool=True)->pli.DataFrame
polars.internals.LazyFrame.fill_nan(self:LDF,fill_value:int|str|float|pli.Expr|None)->LDF
polars.internals.LazyFrame.fill_null(self:LDF,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->LDF
polars.internals.LazyFrame.filter(self:LDF,predicate:pli.Expr|str|pli.Series|list[bool])->LDF
polars.internals.LazyFrame.first(self:LDF)->LDF
polars.internals.LazyFrame.from_json(cls,json:str)->LazyFrame
polars.internals.LazyFrame.groupby(self:LDF,by:str|list[str]|pli.Expr|list[pli.Expr],maintain_order:bool=False)->LazyGroupBy[LDF]
polars.internals.LazyFrame.groupby_dynamic(self:LDF,index_column:str,every:str,period:str|None=None,offset:str|None=None,truncate:bool=True,include_boundaries:bool=False,closed:ClosedWindow='left',by:str|list[str]|pli.Expr|list[pli.Expr]|None=None)->LazyGroupBy[LDF]
polars.internals.LazyFrame.groupby_rolling(self:LDF,index_column:str,period:str,offset:str|None=None,closed:ClosedWindow='right',by:str|list[str]|pli.Expr|list[pli.Expr]|None=None)->LazyGroupBy[LDF]
polars.internals.LazyFrame.head(self:LDF,n:int=5)->LDF
polars.internals.LazyFrame.inspect(self:LDF,fmt:str='{}')->LDF
polars.internals.LazyFrame.interpolate(self:LDF)->LDF
polars.internals.LazyFrame.join(self:LDF,other:LazyFrame,left_on:str|pli.Expr|list[str|pli.Expr]|None=None,right_on:str|pli.Expr|list[str|pli.Expr]|None=None,on:str|pli.Expr|list[str|pli.Expr]|None=None,how:JoinStrategy='inner',suffix:str='_right',allow_parallel:bool=True,force_parallel:bool=False)->LDF
polars.internals.LazyFrame.join_asof(self:LDF,other:LazyFrame,left_on:str|None=None,right_on:str|None=None,on:str|None=None,by_left:str|list[str]|None=None,by_right:str|list[str]|None=None,by:str|list[str]|None=None,strategy:AsofJoinStrategy='backward',suffix:str='_right',tolerance:str|int|float|None=None,allow_parallel:bool=True,force_parallel:bool=False)->LDF
polars.internals.LazyFrame.last(self:LDF)->LDF
polars.internals.LazyFrame.lazy(self:LDF)->LDF
polars.internals.LazyFrame.limit(self:LDF,n:int=5)->LDF
polars.internals.LazyFrame.map(self:LDF,f:Callable[[pli.DataFrame],pli.DataFrame],predicate_pushdown:bool=True,projection_pushdown:bool=True,slice_pushdown:bool=True,no_optimizations:bool=False,schema:None|Schema=None,validate_output_schema:bool=True)->LDF
polars.internals.LazyFrame.max(self:LDF)->LDF
polars.internals.LazyFrame.mean(self:LDF)->LDF
polars.internals.LazyFrame.median(self:LDF)->LDF
polars.internals.LazyFrame.melt(self:LDF,id_vars:str|list[str]|None=None,value_vars:str|list[str]|None=None,variable_name:str|None=None,value_name:str|None=None)->LDF
polars.internals.LazyFrame.min(self:LDF)->LDF
polars.internals.LazyFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.internals.LazyFrame.quantile(self:LDF,quantile:float,interpolation:InterpolationMethod='nearest')->LDF
polars.internals.LazyFrame.read_json(cls,file:str|Path|IOBase)->LazyFrame
polars.internals.LazyFrame.rename(self:LDF,mapping:dict[str,str])->LDF
polars.internals.LazyFrame.reverse(self:LDF)->LDF
polars.internals.LazyFrame.scan_csv(cls:type[LDF],file:str,has_header:bool=True,sep:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:dict[str,PolarsDataType]|None=None,null_values:str|list[str]|dict[str,str]|None=None,ignore_errors:bool=False,cache:bool=True,with_column_names:Callable[[list[str]],list[str]]|None=None,infer_schema_length:int|None=100,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,parse_dates:bool=False,eol_char:str='\n')->LDF
polars.internals.LazyFrame.scan_ipc(cls:type[LDF],file:str|Path,n_rows:int|None=None,cache:bool=True,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,object]|None=None,memory_map:bool=True)->LDF
polars.internals.LazyFrame.scan_ndjson(cls:type[LDF],file:str,infer_schema_length:int|None=None,batch_size:int|None=None,n_rows:int|None=None,low_memory:bool=False,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0)->LDF
polars.internals.LazyFrame.scan_parquet(cls:type[LDF],file:str,n_rows:int|None=None,cache:bool=True,parallel:ParallelStrategy='auto',rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,object]|None=None,low_memory:bool=False)->LDF
polars.internals.LazyFrame.schema(self)->Schema
polars.internals.LazyFrame.select(self:LDF,exprs:str|pli.Expr|pli.Series|Sequence[str|pli.Expr|pli.Series])->LDF
polars.internals.LazyFrame.shift(self:LDF,periods:int)->LDF
polars.internals.LazyFrame.shift_and_fill(self:LDF,periods:int,fill_value:pli.Expr|int|str|float)->LDF
polars.internals.LazyFrame.show_graph(self,optimized:bool=True,show:bool=True,output_path:str|None=None,raw_output:bool=False,figsize:tuple[float,float]=(16.0,12.0))->str | None
polars.internals.LazyFrame.slice(self:LDF,offset:int,length:int|None=None)->LDF
polars.internals.LazyFrame.sort(self:LDF,by:str|pli.Expr|list[str]|list[pli.Expr],reverse:bool|list[bool]=False,nulls_last:bool=False)->LDF
polars.internals.LazyFrame.std(self:LDF,ddof:int=1)->LDF
polars.internals.LazyFrame.sum(self:LDF)->LDF
polars.internals.LazyFrame.tail(self:LDF,n:int=5)->LDF
polars.internals.LazyFrame.take_every(self:LDF,n:int)->LDF
polars.internals.LazyFrame.unique(self:LDF,maintain_order:bool=True,subset:str|list[str]|None=None,keep:UniqueKeepStrategy='first')->LDF
polars.internals.LazyFrame.unnest(self:LDF,names:str|list[str])->LDF
polars.internals.LazyFrame.var(self:LDF,ddof:int=1)->LDF
polars.internals.LazyFrame.with_column(self:LDF,expr:pli.Expr)->LDF
polars.internals.LazyFrame.with_columns(self:LDF,exprs:pli.Expr|pli.Series|Sequence[pli.Expr|pli.Series]|None=None,**named_exprs:pli.Expr|pli.Series|str)->LDF
polars.internals.LazyFrame.with_context(self,other:LDF|list[LDF])->LDF
polars.internals.LazyFrame.with_row_count(self:LDF,name:str='row_nr',offset:int=0)->LDF
polars.internals.LazyFrame.write_json(self,file:IOBase|str|Path|None=None,*,to_string:bool=False)->str | None
polars.internals.lazyframe.frame.LazyFrame
polars.internals.lazyframe.frame.LazyFrame.__contains__(self:LDF,key:str)->bool
polars.internals.lazyframe.frame.LazyFrame.__copy__(self:LDF)->LDF
polars.internals.lazyframe.frame.LazyFrame.__deepcopy__(self:LDF,memo:None=None)->LDF
polars.internals.lazyframe.frame.LazyFrame.__getitem__(self:LDF,item:int|range|slice)->LazyFrame
polars.internals.lazyframe.frame.LazyFrame.__str__(self)->str
polars.internals.lazyframe.frame.LazyFrame._from_pyldf(cls:type[LDF],ldf:PyLazyFrame)->LDF
polars.internals.lazyframe.frame.LazyFrame._repr_html_(self)->str
polars.internals.lazyframe.frame.LazyFrame._scan_python_function(cls,schema:pa.schema|dict[str,type[DataType]],scan_fn:bytes)->LazyFrame
polars.internals.lazyframe.frame.LazyFrame.cache(self:LDF)->LDF
polars.internals.lazyframe.frame.LazyFrame.cleared(self)->LazyFrame
polars.internals.lazyframe.frame.LazyFrame.clone(self:LDF)->LDF
polars.internals.lazyframe.frame.LazyFrame.collect(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=False,no_optimization:bool=False,slice_pushdown:bool=True)->pli.DataFrame
polars.internals.lazyframe.frame.LazyFrame.columns(self)->list[str]
polars.internals.lazyframe.frame.LazyFrame.describe_optimized_plan(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True)->str
polars.internals.lazyframe.frame.LazyFrame.describe_plan(self)->str
polars.internals.lazyframe.frame.LazyFrame.drop(self:LDF,columns:str|list[str])->LDF
polars.internals.lazyframe.frame.LazyFrame.drop_nulls(self:LDF,subset:list[str]|str|None=None)->LDF
polars.internals.lazyframe.frame.LazyFrame.dtypes(self)->list[type[DataType]]
polars.internals.lazyframe.frame.LazyFrame.explode(self:LDF,columns:str|list[str]|pli.Expr|list[pli.Expr])->LDF
polars.internals.lazyframe.frame.LazyFrame.fetch(self,n_rows:int=500,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=False,no_optimization:bool=False,slice_pushdown:bool=True)->pli.DataFrame
polars.internals.lazyframe.frame.LazyFrame.fill_nan(self:LDF,fill_value:int|str|float|pli.Expr|None)->LDF
polars.internals.lazyframe.frame.LazyFrame.fill_null(self:LDF,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->LDF
polars.internals.lazyframe.frame.LazyFrame.filter(self:LDF,predicate:pli.Expr|str|pli.Series|list[bool])->LDF
polars.internals.lazyframe.frame.LazyFrame.first(self:LDF)->LDF
polars.internals.lazyframe.frame.LazyFrame.from_json(cls,json:str)->LazyFrame
polars.internals.lazyframe.frame.LazyFrame.groupby(self:LDF,by:str|list[str]|pli.Expr|list[pli.Expr],maintain_order:bool=False)->LazyGroupBy[LDF]
polars.internals.lazyframe.frame.LazyFrame.groupby_dynamic(self:LDF,index_column:str,every:str,period:str|None=None,offset:str|None=None,truncate:bool=True,include_boundaries:bool=False,closed:ClosedWindow='left',by:str|list[str]|pli.Expr|list[pli.Expr]|None=None)->LazyGroupBy[LDF]
polars.internals.lazyframe.frame.LazyFrame.groupby_rolling(self:LDF,index_column:str,period:str,offset:str|None=None,closed:ClosedWindow='right',by:str|list[str]|pli.Expr|list[pli.Expr]|None=None)->LazyGroupBy[LDF]
polars.internals.lazyframe.frame.LazyFrame.head(self:LDF,n:int=5)->LDF
polars.internals.lazyframe.frame.LazyFrame.inspect(self:LDF,fmt:str='{}')->LDF
polars.internals.lazyframe.frame.LazyFrame.interpolate(self:LDF)->LDF
polars.internals.lazyframe.frame.LazyFrame.join(self:LDF,other:LazyFrame,left_on:str|pli.Expr|list[str|pli.Expr]|None=None,right_on:str|pli.Expr|list[str|pli.Expr]|None=None,on:str|pli.Expr|list[str|pli.Expr]|None=None,how:JoinStrategy='inner',suffix:str='_right',allow_parallel:bool=True,force_parallel:bool=False)->LDF
polars.internals.lazyframe.frame.LazyFrame.join_asof(self:LDF,other:LazyFrame,left_on:str|None=None,right_on:str|None=None,on:str|None=None,by_left:str|list[str]|None=None,by_right:str|list[str]|None=None,by:str|list[str]|None=None,strategy:AsofJoinStrategy='backward',suffix:str='_right',tolerance:str|int|float|None=None,allow_parallel:bool=True,force_parallel:bool=False)->LDF
polars.internals.lazyframe.frame.LazyFrame.last(self:LDF)->LDF
polars.internals.lazyframe.frame.LazyFrame.lazy(self:LDF)->LDF
polars.internals.lazyframe.frame.LazyFrame.limit(self:LDF,n:int=5)->LDF
polars.internals.lazyframe.frame.LazyFrame.map(self:LDF,f:Callable[[pli.DataFrame],pli.DataFrame],predicate_pushdown:bool=True,projection_pushdown:bool=True,slice_pushdown:bool=True,no_optimizations:bool=False,schema:None|Schema=None,validate_output_schema:bool=True)->LDF
polars.internals.lazyframe.frame.LazyFrame.max(self:LDF)->LDF
polars.internals.lazyframe.frame.LazyFrame.mean(self:LDF)->LDF
polars.internals.lazyframe.frame.LazyFrame.median(self:LDF)->LDF
polars.internals.lazyframe.frame.LazyFrame.melt(self:LDF,id_vars:str|list[str]|None=None,value_vars:str|list[str]|None=None,variable_name:str|None=None,value_name:str|None=None)->LDF
polars.internals.lazyframe.frame.LazyFrame.min(self:LDF)->LDF
polars.internals.lazyframe.frame.LazyFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.internals.lazyframe.frame.LazyFrame.quantile(self:LDF,quantile:float,interpolation:InterpolationMethod='nearest')->LDF
polars.internals.lazyframe.frame.LazyFrame.read_json(cls,file:str|Path|IOBase)->LazyFrame
polars.internals.lazyframe.frame.LazyFrame.rename(self:LDF,mapping:dict[str,str])->LDF
polars.internals.lazyframe.frame.LazyFrame.reverse(self:LDF)->LDF
polars.internals.lazyframe.frame.LazyFrame.scan_csv(cls:type[LDF],file:str,has_header:bool=True,sep:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:dict[str,PolarsDataType]|None=None,null_values:str|list[str]|dict[str,str]|None=None,ignore_errors:bool=False,cache:bool=True,with_column_names:Callable[[list[str]],list[str]]|None=None,infer_schema_length:int|None=100,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,parse_dates:bool=False,eol_char:str='\n')->LDF
polars.internals.lazyframe.frame.LazyFrame.scan_ipc(cls:type[LDF],file:str|Path,n_rows:int|None=None,cache:bool=True,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,object]|None=None,memory_map:bool=True)->LDF
polars.internals.lazyframe.frame.LazyFrame.scan_ndjson(cls:type[LDF],file:str,infer_schema_length:int|None=None,batch_size:int|None=None,n_rows:int|None=None,low_memory:bool=False,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0)->LDF
polars.internals.lazyframe.frame.LazyFrame.scan_parquet(cls:type[LDF],file:str,n_rows:int|None=None,cache:bool=True,parallel:ParallelStrategy='auto',rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,object]|None=None,low_memory:bool=False)->LDF
polars.internals.lazyframe.frame.LazyFrame.schema(self)->Schema
polars.internals.lazyframe.frame.LazyFrame.select(self:LDF,exprs:str|pli.Expr|pli.Series|Sequence[str|pli.Expr|pli.Series])->LDF
polars.internals.lazyframe.frame.LazyFrame.shift(self:LDF,periods:int)->LDF
polars.internals.lazyframe.frame.LazyFrame.shift_and_fill(self:LDF,periods:int,fill_value:pli.Expr|int|str|float)->LDF
polars.internals.lazyframe.frame.LazyFrame.show_graph(self,optimized:bool=True,show:bool=True,output_path:str|None=None,raw_output:bool=False,figsize:tuple[float,float]=(16.0,12.0))->str | None
polars.internals.lazyframe.frame.LazyFrame.slice(self:LDF,offset:int,length:int|None=None)->LDF
polars.internals.lazyframe.frame.LazyFrame.sort(self:LDF,by:str|pli.Expr|list[str]|list[pli.Expr],reverse:bool|list[bool]=False,nulls_last:bool=False)->LDF
polars.internals.lazyframe.frame.LazyFrame.std(self:LDF,ddof:int=1)->LDF
polars.internals.lazyframe.frame.LazyFrame.sum(self:LDF)->LDF
polars.internals.lazyframe.frame.LazyFrame.tail(self:LDF,n:int=5)->LDF
polars.internals.lazyframe.frame.LazyFrame.take_every(self:LDF,n:int)->LDF
polars.internals.lazyframe.frame.LazyFrame.unique(self:LDF,maintain_order:bool=True,subset:str|list[str]|None=None,keep:UniqueKeepStrategy='first')->LDF
polars.internals.lazyframe.frame.LazyFrame.unnest(self:LDF,names:str|list[str])->LDF
polars.internals.lazyframe.frame.LazyFrame.var(self:LDF,ddof:int=1)->LDF
polars.internals.lazyframe.frame.LazyFrame.with_column(self:LDF,expr:pli.Expr)->LDF
polars.internals.lazyframe.frame.LazyFrame.with_columns(self:LDF,exprs:pli.Expr|pli.Series|Sequence[pli.Expr|pli.Series]|None=None,**named_exprs:pli.Expr|pli.Series|str)->LDF
polars.internals.lazyframe.frame.LazyFrame.with_context(self,other:LDF|list[LDF])->LDF
polars.internals.lazyframe.frame.LazyFrame.with_row_count(self:LDF,name:str='row_nr',offset:int=0)->LDF
polars.internals.lazyframe.frame.LazyFrame.write_json(self,file:IOBase|str|Path|None=None,*,to_string:bool=False)->str | None
polars.internals.lazyframe.frame._prepare_groupby_inputs(by:str|list[str]|pli.Expr|list[pli.Expr]|None)->list[PyExpr]
polars.internals.lazyframe.frame.wrap_ldf(ldf:PyLazyFrame)->LazyFrame
polars.internals.wrap_ldf(ldf:PyLazyFrame)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/lazyframe/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/lazyframe/groupby.py----------------------------------------
A:polars.internals.lazyframe.groupby.LDF->TypeVar('LDF', bound='pli.LazyFrame')
A:polars.internals.lazyframe.groupby.pyexprs->ensure_list_of_pyexpr(aggs)
polars.internals.lazyframe.groupby.LazyGroupBy(self,lgb:PyLazyGroupBy,lazyframe_class:type[LDF])
polars.internals.lazyframe.groupby.LazyGroupBy.__init__(self,lgb:PyLazyGroupBy,lazyframe_class:type[LDF])
polars.internals.lazyframe.groupby.LazyGroupBy.agg(self,aggs:pli.Expr|Sequence[pli.Expr])->LDF
polars.internals.lazyframe.groupby.LazyGroupBy.apply(self,f:Callable[[pli.DataFrame],pli.DataFrame])->LDF
polars.internals.lazyframe.groupby.LazyGroupBy.head(self,n:int=5)->LDF
polars.internals.lazyframe.groupby.LazyGroupBy.tail(self,n:int=5)->LDF


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/expr/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/expr/categorical.py----------------------------------------
polars.internals.expr.categorical.ExprCatNameSpace(self,expr:pli.Expr)
polars.internals.expr.categorical.ExprCatNameSpace.__init__(self,expr:pli.Expr)
polars.internals.expr.categorical.ExprCatNameSpace.set_ordering(self,ordering:CategoricalOrdering)->pli.Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/expr/list.py----------------------------------------
A:polars.internals.expr.list.other_list->copy.copy(other)
polars.internals.expr.list.ExprListNameSpace(self,expr:pli.Expr)
polars.internals.expr.list.ExprListNameSpace.__init__(self,expr:pli.Expr)
polars.internals.expr.list.ExprListNameSpace.arg_max(self)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.arg_min(self)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.concat(self,other:list[pli.Expr|str]|pli.Expr|str|pli.Series|list[Any])->pli.Expr
polars.internals.expr.list.ExprListNameSpace.contains(self,item:float|str|bool|int|date|datetime|pli.Expr)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->pli.Expr
polars.internals.expr.list.ExprListNameSpace.eval(self,expr:pli.Expr,parallel:bool=False)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.first(self)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.get(self,index:int)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.head(self,n:int=5)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.join(self,separator:str)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.last(self)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.lengths(self)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.max(self)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.mean(self)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.min(self)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.reverse(self)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.shift(self,periods:int=1)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.slice(self,offset:int,length:int|None=None)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.sort(self,reverse:bool=False)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.sum(self)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.tail(self,n:int=5)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.to_struct(self,n_field_strategy:ToStructStrategy='first_non_null',name_generator:Callable[[int],str]|None=None)->pli.Expr
polars.internals.expr.list.ExprListNameSpace.unique(self)->pli.Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/expr/datetime.py----------------------------------------
A:polars.internals.expr.datetime.every->_timedelta_to_pl_duration(every)
A:polars.internals.expr.datetime.offset->_timedelta_to_pl_duration(offset)
polars.internals.expr.datetime.ExprDateTimeNameSpace(self,expr:pli.Expr)
polars.internals.expr.datetime.ExprDateTimeNameSpace.__init__(self,expr:pli.Expr)
polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit(self,tu:TimeUnit)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.day(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.days(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch(self,tu:EpochTimeUnit='us')->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.hour(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.hours(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.minute(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.month(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by(self,by:str)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.second(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime(self,fmt:str)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp(self,tu:TimeUnit='us')->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate(self,every:str|timedelta,offset:str|timedelta|None=None)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.week(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday(self)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit(self,tu:TimeUnit)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_zone(self,tz:str|None)->pli.Expr
polars.internals.expr.datetime.ExprDateTimeNameSpace.year(self)->pli.Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/expr/meta.py----------------------------------------
polars.internals.expr.meta.ExprMetaNameSpace(self,expr:pli.Expr)
polars.internals.expr.meta.ExprMetaNameSpace.__eq__(self,other:ExprMetaNameSpace|pli.Expr)->bool
polars.internals.expr.meta.ExprMetaNameSpace.__init__(self,expr:pli.Expr)
polars.internals.expr.meta.ExprMetaNameSpace.__ne__(self,other:ExprMetaNameSpace|pli.Expr)->bool
polars.internals.expr.meta.ExprMetaNameSpace.output_name(self)->str
polars.internals.expr.meta.ExprMetaNameSpace.pop(self)->list[pli.Expr]
polars.internals.expr.meta.ExprMetaNameSpace.root_names(self)->list[str]
polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases(self)->pli.Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/expr/struct.py----------------------------------------
polars.internals.expr.struct.ExprStructNameSpace(self,expr:pli.Expr)
polars.internals.expr.struct.ExprStructNameSpace.__getitem__(self,item:str|int)->pli.Expr
polars.internals.expr.struct.ExprStructNameSpace.__init__(self,expr:pli.Expr)
polars.internals.expr.struct.ExprStructNameSpace.field(self,name:str)->pli.Expr
polars.internals.expr.struct.ExprStructNameSpace.rename_fields(self,names:list[str])->pli.Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/expr/string.py----------------------------------------
A:polars.internals.expr.string.pattern->polars.internals.expr_to_lit_or_expr(pattern, str_to_lit=True)
A:polars.internals.expr.string.value->polars.internals.expr_to_lit_or_expr(value, str_to_lit=True)
polars.internals.expr.string.ExprStringNameSpace(self,expr:pli.Expr)
polars.internals.expr.string.ExprStringNameSpace.__init__(self,expr:pli.Expr)
polars.internals.expr.string.ExprStringNameSpace.concat(self,delimiter:str='-')->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.contains(self,pattern:str,literal:bool=False)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.count_match(self,pattern:str)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.decode(self,encoding:TransferEncoding,strict:bool=False)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.encode(self,encoding:TransferEncoding)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.ends_with(self,sub:str)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.extract(self,pattern:str,group_index:int=1)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.extract_all(self,pattern:str)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.json_path_match(self,json_path:str)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.lengths(self)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.ljust(self,width:int,fillchar:str='')->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.lstrip(self)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.replace(self,pattern:str|pli.Expr,value:str|pli.Expr,literal:bool=False)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.replace_all(self,pattern:str|pli.Expr,value:str|pli.Expr,literal:bool=False)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.rjust(self,width:int,fillchar:str='')->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.rstrip(self)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.slice(self,offset:int,length:int|None=None)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.split(self,by:str,inclusive:bool=False)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.split_exact(self,by:str,n:int,inclusive:bool=False)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.splitn(self,by:str,n:int)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.starts_with(self,sub:str)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.strip(self)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.strptime(self,datatype:type[Date]|type[Datetime]|type[Time],fmt:str|None=None,strict:bool=True,exact:bool=True)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.to_lowercase(self)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.to_uppercase(self)->pli.Expr
polars.internals.expr.string.ExprStringNameSpace.zfill(self,alignment:int)->pli.Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.14.6/lib/python3.9/site-packages/polars/internals/expr/expr.py----------------------------------------
A:polars.internals.expr.expr.self->Expr.__new__(Expr)
A:polars.internals.expr.expr.dtype->py_type_to_dtype(dtype)
A:polars.internals.expr.expr.offset->polars.internals.lit(offset)
A:polars.internals.expr.expr.length->polars.internals.lit(length)
A:polars.internals.expr.expr.other->expr_to_lit_or_expr(other, str_to_lit=False)
A:polars.internals.expr.expr.element->expr_to_lit_or_expr(element, str_to_lit=False)
A:polars.internals.expr.expr.by->expr_to_lit_or_expr(by, False)
A:polars.internals.expr.expr.indices_lit->polars.internals.expr_to_lit_or_expr(indices, str_to_lit=False)
A:polars.internals.expr.expr.fill_value->expr_to_lit_or_expr(fill_value, str_to_lit=True)
A:polars.internals.expr.expr.value->expr_to_lit_or_expr(value, str_to_lit=True)
A:polars.internals.expr.expr.pyexprs->selection_to_pyexpr_list(expr)
A:polars.internals.expr.expr.return_dtype->py_type_to_dtype(return_dtype)
A:polars.internals.expr.expr.exponent->expr_to_lit_or_expr(exponent)
A:polars.internals.expr.expr.start->polars.internals.lit(start)
A:polars.internals.expr.expr.end->polars.internals.lit(end)
A:polars.internals.expr.expr.expr->Expr.__new__(Expr).cast(Datetime)
A:polars.internals.expr.expr.(window_size, min_periods)->_prepare_rolling_window_args(window_size, min_periods)
A:polars.internals.expr.expr.seed->random.randint(0, 10000)
A:polars.internals.expr.expr.alpha->_prepare_alpha(com, span, half_life, alpha)
polars.internals.Expr(self)
polars.internals.Expr.__add__(self,other:Any)->Expr
polars.internals.Expr.__and__(self,other:Expr)->Expr
polars.internals.Expr.__array_ufunc__(self,ufunc:Callable[...,Any],method:str,*inputs:Any,**kwargs:Any)->Expr
polars.internals.Expr.__bool__(self)->Expr
polars.internals.Expr.__eq__(self,other:Any)->Expr
polars.internals.Expr.__floordiv__(self,other:Any)->Expr
polars.internals.Expr.__ge__(self,other:Any)->Expr
polars.internals.Expr.__getstate__(self)->Any
polars.internals.Expr.__gt__(self,other:Any)->Expr
polars.internals.Expr.__invert__(self)->Expr
polars.internals.Expr.__le__(self,other:Any)->Expr
polars.internals.Expr.__lt__(self,other:Any)->Expr
polars.internals.Expr.__mod__(self,other:Any)->Expr
polars.internals.Expr.__mul__(self,other:Any)->Expr
polars.internals.Expr.__ne__(self,other:Any)->Expr
polars.internals.Expr.__neg__(self)->Expr
polars.internals.Expr.__or__(self,other:Expr)->Expr
polars.internals.Expr.__pow__(self,power:int|float|pli.Series|Expr)->Expr
polars.internals.Expr.__radd__(self,other:Any)->Expr
polars.internals.Expr.__rand__(self,other:Any)->Expr
polars.internals.Expr.__rfloordiv__(self,other:Any)->Expr
polars.internals.Expr.__rmod__(self,other:Any)->Expr
polars.internals.Expr.__rmul__(self,other:Any)->Expr
polars.internals.Expr.__ror__(self,other:Any)->Expr
polars.internals.Expr.__rpow__(self,base:int|float|Expr)->Expr
polars.internals.Expr.__rsub__(self,other:Any)->Expr
polars.internals.Expr.__rtruediv__(self,other:Any)->Expr
polars.internals.Expr.__rxor__(self,other:Expr)->Expr
polars.internals.Expr.__setstate__(self,state:Any)->None
polars.internals.Expr.__str__(self)->str
polars.internals.Expr.__sub__(self,other:Any)->Expr
polars.internals.Expr.__to_expr(self,other:Any)->Expr
polars.internals.Expr.__to_pyexpr(self,other:Any)->PyExpr
polars.internals.Expr.__truediv__(self,other:Any)->Expr
polars.internals.Expr.__xor__(self,other:Expr)->Expr
polars.internals.Expr._from_pyexpr(pyexpr:PyExpr)->Expr
polars.internals.Expr._repr_html_(self)->str
polars.internals.Expr.abs(self)->Expr
polars.internals.Expr.agg_groups(self)->Expr
polars.internals.Expr.alias(self,name:str)->Expr
polars.internals.Expr.all(self)->Expr
polars.internals.Expr.any(self)->Expr
polars.internals.Expr.append(self,other:Expr,upcast:bool=True)->Expr
polars.internals.Expr.apply(self,f:Callable[[pli.Series],pli.Series]|Callable[[Any],Any],return_dtype:type[DataType]|None=None)->Expr
polars.internals.Expr.arccos(self)->Expr
polars.internals.Expr.arccosh(self)->Expr
polars.internals.Expr.arcsin(self)->Expr
polars.internals.Expr.arcsinh(self)->Expr
polars.internals.Expr.arctan(self)->Expr
polars.internals.Expr.arctanh(self)->Expr
polars.internals.Expr.arg_max(self)->Expr
polars.internals.Expr.arg_min(self)->Expr
polars.internals.Expr.arg_sort(self,reverse:bool=False,nulls_last:bool=False)->Expr
polars.internals.Expr.arg_unique(self)->Expr
polars.internals.Expr.argsort(self,reverse:bool=False,nulls_last:bool=False)->Expr
polars.internals.Expr.arr(self)->ExprListNameSpace
polars.internals.Expr.backward_fill(self,limit:int|None=None)->Expr
polars.internals.Expr.cast(self,dtype:PolarsDataType|type[Any],strict:bool=True)->Expr
polars.internals.Expr.cat(self)->ExprCatNameSpace
polars.internals.Expr.ceil(self)->Expr
polars.internals.Expr.clip(self,min_val:int|float,max_val:int|float)->Expr
polars.internals.Expr.clip_max(self,max_val:int|float)->Expr
polars.internals.Expr.clip_min(self,min_val:int|float)->Expr
polars.internals.Expr.cos(self)->Expr
polars.internals.Expr.cosh(self)->Expr
polars.internals.Expr.count(self)->Expr
polars.internals.Expr.cumcount(self,reverse:bool=False)->Expr
polars.internals.Expr.cummax(self,reverse:bool=False)->Expr
polars.internals.Expr.cummin(self,reverse:bool=False)->Expr
polars.internals.Expr.cumprod(self,reverse:bool=False)->Expr
polars.internals.Expr.cumsum(self,reverse:bool=False)->Expr
polars.internals.Expr.cumulative_eval(self,expr:Expr,min_periods:int=1,parallel:bool=False)->Expr
polars.internals.Expr.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->Expr
polars.internals.Expr.dot(self,other:Expr|str)->Expr
polars.internals.Expr.drop_nans(self)->Expr
polars.internals.Expr.drop_nulls(self)->Expr
polars.internals.Expr.dt(self)->ExprDateTimeNameSpace
polars.internals.Expr.entropy(self,base:float=math.e,normalize:bool=True)->Expr
polars.internals.Expr.ewm_mean(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_periods:int=1)->Expr
polars.internals.Expr.ewm_std(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_periods:int=1)->Expr
polars.internals.Expr.ewm_var(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_periods:int=1)->Expr
polars.internals.Expr.exclude(self,columns:str|list[str]|DataType|type[DataType]|DataType|Sequence[DataType|type[DataType]])->Expr
polars.internals.Expr.exp(self)->Expr
polars.internals.Expr.explode(self)->Expr
polars.internals.Expr.extend_constant(self,value:int|float|str|bool|None,n:int)->Expr
polars.internals.Expr.fill_nan(self,fill_value:str|int|float|bool|Expr|None)->Expr
polars.internals.Expr.fill_null(self,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->Expr
polars.internals.Expr.filter(self,predicate:Expr)->Expr
polars.internals.Expr.first(self)->Expr
polars.internals.Expr.flatten(self)->Expr
polars.internals.Expr.floor(self)->Expr
polars.internals.Expr.forward_fill(self,limit:int|None=None)->Expr
polars.internals.Expr.hash(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->Expr
polars.internals.Expr.head(self,n:int=10)->Expr
polars.internals.Expr.inspect(self,fmt:str='{}')->Expr
polars.internals.Expr.interpolate(self)->Expr
polars.internals.Expr.is_between(self,start:Expr|datetime|int,end:Expr|datetime|int,include_bounds:bool|Sequence[bool]=False)->Expr
polars.internals.Expr.is_duplicated(self)->Expr
polars.internals.Expr.is_finite(self)->Expr
polars.internals.Expr.is_first(self)->Expr
polars.internals.Expr.is_in(self,other:Expr|Sequence[Any]|str|pli.Series)->Expr
polars.internals.Expr.is_infinite(self)->Expr
polars.internals.Expr.is_nan(self)->Expr
polars.internals.Expr.is_not(self)->Expr
polars.internals.Expr.is_not_nan(self)->Expr
polars.internals.Expr.is_not_null(self)->Expr
polars.internals.Expr.is_null(self)->Expr
polars.internals.Expr.is_unique(self)->Expr
polars.internals.Expr.keep_name(self)->Expr
polars.internals.Expr.kurtosis(self,fisher:bool=True,bias:bool=True)->Expr
polars.internals.Expr.last(self)->Expr
polars.internals.Expr.len(self)->Expr
polars.internals.Expr.limit(self,n:int=10)->Expr
polars.internals.Expr.list(self)->Expr
polars.internals.Expr.log(self,base:float=math.e)->Expr
polars.internals.Expr.log10(self)->Expr
polars.internals.Expr.lower_bound(self)->Expr
polars.internals.Expr.map(self,f:Callable[[pli.Series],pli.Series|Any],return_dtype:PolarsDataType|None=None,agg_list:bool=False)->Expr
polars.internals.Expr.map_alias(self,f:Callable[[str],str])->Expr
polars.internals.Expr.max(self)->Expr
polars.internals.Expr.mean(self)->Expr
polars.internals.Expr.median(self)->Expr
polars.internals.Expr.meta(self)->ExprMetaNameSpace
polars.internals.Expr.min(self)->Expr
polars.internals.Expr.mode(self)->Expr
polars.internals.Expr.n_unique(self)->Expr
polars.internals.Expr.null_count(self)->Expr
polars.internals.Expr.over(self,expr:str|Expr|list[Expr|str])->Expr
polars.internals.Expr.pct_change(self,n:int=1)->Expr
polars.internals.Expr.pow(self,exponent:int|float|pli.Series|Expr)->Expr
polars.internals.Expr.prefix(self,prefix:str)->Expr
polars.internals.Expr.product(self)->Expr
polars.internals.Expr.quantile(self,quantile:float,interpolation:InterpolationMethod='nearest')->Expr
polars.internals.Expr.rank(self,method:RankMethod='average',reverse:bool=False)->Expr
polars.internals.Expr.rechunk(self)->Expr
polars.internals.Expr.reinterpret(self,signed:bool=True)->Expr
polars.internals.Expr.repeat_by(self,by:Expr|str)->Expr
polars.internals.Expr.reshape(self,dims:tuple[int,...])->Expr
polars.internals.Expr.reverse(self)->Expr
polars.internals.Expr.rolling_apply(self,function:Callable[[pli.Series],Any],window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Expr
polars.internals.Expr.rolling_max(self,window_size:int|str,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.Expr.rolling_mean(self,window_size:int|str,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.Expr.rolling_median(self,window_size:int|str,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.Expr.rolling_min(self,window_size:int|str,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.Expr.rolling_quantile(self,quantile:float,interpolation:InterpolationMethod='nearest',window_size:int|str=2,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.Expr.rolling_skew(self,window_size:int,bias:bool=True)->Expr
polars.internals.Expr.rolling_std(self,window_size:int|str,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.Expr.rolling_sum(self,window_size:int|str,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.Expr.rolling_var(self,window_size:int|str,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.Expr.round(self,decimals:int)->Expr
polars.internals.Expr.sample(self,fraction:float=1.0,with_replacement:bool=True,shuffle:bool=False,seed:int|None=None)->Expr
polars.internals.Expr.search_sorted(self,element:Expr|int|float)->Expr
polars.internals.Expr.set_sorted(self,reverse:bool=False)->Expr
polars.internals.Expr.shift(self,periods:int=1)->Expr
polars.internals.Expr.shift_and_fill(self,periods:int,fill_value:int|float|bool|str|Expr|list[Any])->Expr
polars.internals.Expr.shuffle(self,seed:int|None=None)->Expr
polars.internals.Expr.sign(self)->Expr
polars.internals.Expr.sin(self)->Expr
polars.internals.Expr.sinh(self)->Expr
polars.internals.Expr.skew(self,bias:bool=True)->Expr
polars.internals.Expr.slice(self,offset:int|Expr,length:int|Expr|None=None)->Expr
polars.internals.Expr.sort(self,reverse:bool=False,nulls_last:bool=False)->Expr
polars.internals.Expr.sort_by(self,by:Expr|str|list[Expr|str],reverse:bool|list[bool]=False)->Expr
polars.internals.Expr.sqrt(self)->Expr
polars.internals.Expr.std(self,ddof:int=1)->Expr
polars.internals.Expr.str(self)->ExprStringNameSpace
polars.internals.Expr.struct(self)->ExprStructNameSpace
polars.internals.Expr.suffix(self,suffix:str)->Expr
polars.internals.Expr.sum(self)->Expr
polars.internals.Expr.tail(self,n:int=10)->Expr
polars.internals.Expr.take(self,indices:int|list[int]|Expr|pli.Series|np.ndarray[Any,Any])->Expr
polars.internals.Expr.take_every(self,n:int)->Expr
polars.internals.Expr.tan(self)->Expr
polars.internals.Expr.tanh(self)->Expr
polars.internals.Expr.to_physical(self)->Expr
polars.internals.Expr.top_k(self,k:int=5,reverse:bool=False)->Expr
polars.internals.Expr.unique(self,maintain_order:bool=False)->Expr
polars.internals.Expr.unique_counts(self)->Expr
polars.internals.Expr.upper_bound(self)->Expr
polars.internals.Expr.value_counts(self,multithreaded:bool=False,sort:bool=False)->Expr
polars.internals.Expr.var(self,ddof:int=1)->Expr
polars.internals.Expr.where(self,predicate:Expr)->Expr
polars.internals.expr.ensure_list_of_pyexpr(exprs:object)->list[PyExpr]
polars.internals.expr.expr.Expr(self)
polars.internals.expr.expr.Expr.__add__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__and__(self,other:Expr)->Expr
polars.internals.expr.expr.Expr.__array_ufunc__(self,ufunc:Callable[...,Any],method:str,*inputs:Any,**kwargs:Any)->Expr
polars.internals.expr.expr.Expr.__bool__(self)->Expr
polars.internals.expr.expr.Expr.__eq__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__floordiv__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__ge__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__getstate__(self)->Any
polars.internals.expr.expr.Expr.__gt__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__init__(self)
polars.internals.expr.expr.Expr.__invert__(self)->Expr
polars.internals.expr.expr.Expr.__le__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__lt__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__mod__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__mul__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__ne__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__neg__(self)->Expr
polars.internals.expr.expr.Expr.__or__(self,other:Expr)->Expr
polars.internals.expr.expr.Expr.__pow__(self,power:int|float|pli.Series|Expr)->Expr
polars.internals.expr.expr.Expr.__radd__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__rand__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__rfloordiv__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__rmod__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__rmul__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__ror__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__rpow__(self,base:int|float|Expr)->Expr
polars.internals.expr.expr.Expr.__rsub__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__rtruediv__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__rxor__(self,other:Expr)->Expr
polars.internals.expr.expr.Expr.__setstate__(self,state:Any)->None
polars.internals.expr.expr.Expr.__str__(self)->str
polars.internals.expr.expr.Expr.__sub__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__to_expr(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__to_pyexpr(self,other:Any)->PyExpr
polars.internals.expr.expr.Expr.__truediv__(self,other:Any)->Expr
polars.internals.expr.expr.Expr.__xor__(self,other:Expr)->Expr
polars.internals.expr.expr.Expr._from_pyexpr(pyexpr:PyExpr)->Expr
polars.internals.expr.expr.Expr._repr_html_(self)->str
polars.internals.expr.expr.Expr.abs(self)->Expr
polars.internals.expr.expr.Expr.agg_groups(self)->Expr
polars.internals.expr.expr.Expr.alias(self,name:str)->Expr
polars.internals.expr.expr.Expr.all(self)->Expr
polars.internals.expr.expr.Expr.any(self)->Expr
polars.internals.expr.expr.Expr.append(self,other:Expr,upcast:bool=True)->Expr
polars.internals.expr.expr.Expr.apply(self,f:Callable[[pli.Series],pli.Series]|Callable[[Any],Any],return_dtype:type[DataType]|None=None)->Expr
polars.internals.expr.expr.Expr.arccos(self)->Expr
polars.internals.expr.expr.Expr.arccosh(self)->Expr
polars.internals.expr.expr.Expr.arcsin(self)->Expr
polars.internals.expr.expr.Expr.arcsinh(self)->Expr
polars.internals.expr.expr.Expr.arctan(self)->Expr
polars.internals.expr.expr.Expr.arctanh(self)->Expr
polars.internals.expr.expr.Expr.arg_max(self)->Expr
polars.internals.expr.expr.Expr.arg_min(self)->Expr
polars.internals.expr.expr.Expr.arg_sort(self,reverse:bool=False,nulls_last:bool=False)->Expr
polars.internals.expr.expr.Expr.arg_unique(self)->Expr
polars.internals.expr.expr.Expr.argsort(self,reverse:bool=False,nulls_last:bool=False)->Expr
polars.internals.expr.expr.Expr.arr(self)->ExprListNameSpace
polars.internals.expr.expr.Expr.backward_fill(self,limit:int|None=None)->Expr
polars.internals.expr.expr.Expr.cast(self,dtype:PolarsDataType|type[Any],strict:bool=True)->Expr
polars.internals.expr.expr.Expr.cat(self)->ExprCatNameSpace
polars.internals.expr.expr.Expr.ceil(self)->Expr
polars.internals.expr.expr.Expr.clip(self,min_val:int|float,max_val:int|float)->Expr
polars.internals.expr.expr.Expr.clip_max(self,max_val:int|float)->Expr
polars.internals.expr.expr.Expr.clip_min(self,min_val:int|float)->Expr
polars.internals.expr.expr.Expr.cos(self)->Expr
polars.internals.expr.expr.Expr.cosh(self)->Expr
polars.internals.expr.expr.Expr.count(self)->Expr
polars.internals.expr.expr.Expr.cumcount(self,reverse:bool=False)->Expr
polars.internals.expr.expr.Expr.cummax(self,reverse:bool=False)->Expr
polars.internals.expr.expr.Expr.cummin(self,reverse:bool=False)->Expr
polars.internals.expr.expr.Expr.cumprod(self,reverse:bool=False)->Expr
polars.internals.expr.expr.Expr.cumsum(self,reverse:bool=False)->Expr
polars.internals.expr.expr.Expr.cumulative_eval(self,expr:Expr,min_periods:int=1,parallel:bool=False)->Expr
polars.internals.expr.expr.Expr.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->Expr
polars.internals.expr.expr.Expr.dot(self,other:Expr|str)->Expr
polars.internals.expr.expr.Expr.drop_nans(self)->Expr
polars.internals.expr.expr.Expr.drop_nulls(self)->Expr
polars.internals.expr.expr.Expr.dt(self)->ExprDateTimeNameSpace
polars.internals.expr.expr.Expr.entropy(self,base:float=math.e,normalize:bool=True)->Expr
polars.internals.expr.expr.Expr.ewm_mean(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_periods:int=1)->Expr
polars.internals.expr.expr.Expr.ewm_std(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_periods:int=1)->Expr
polars.internals.expr.expr.Expr.ewm_var(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_periods:int=1)->Expr
polars.internals.expr.expr.Expr.exclude(self,columns:str|list[str]|DataType|type[DataType]|DataType|Sequence[DataType|type[DataType]])->Expr
polars.internals.expr.expr.Expr.exp(self)->Expr
polars.internals.expr.expr.Expr.explode(self)->Expr
polars.internals.expr.expr.Expr.extend_constant(self,value:int|float|str|bool|None,n:int)->Expr
polars.internals.expr.expr.Expr.fill_nan(self,fill_value:str|int|float|bool|Expr|None)->Expr
polars.internals.expr.expr.Expr.fill_null(self,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->Expr
polars.internals.expr.expr.Expr.filter(self,predicate:Expr)->Expr
polars.internals.expr.expr.Expr.first(self)->Expr
polars.internals.expr.expr.Expr.flatten(self)->Expr
polars.internals.expr.expr.Expr.floor(self)->Expr
polars.internals.expr.expr.Expr.forward_fill(self,limit:int|None=None)->Expr
polars.internals.expr.expr.Expr.hash(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->Expr
polars.internals.expr.expr.Expr.head(self,n:int=10)->Expr
polars.internals.expr.expr.Expr.inspect(self,fmt:str='{}')->Expr
polars.internals.expr.expr.Expr.interpolate(self)->Expr
polars.internals.expr.expr.Expr.is_between(self,start:Expr|datetime|int,end:Expr|datetime|int,include_bounds:bool|Sequence[bool]=False)->Expr
polars.internals.expr.expr.Expr.is_duplicated(self)->Expr
polars.internals.expr.expr.Expr.is_finite(self)->Expr
polars.internals.expr.expr.Expr.is_first(self)->Expr
polars.internals.expr.expr.Expr.is_in(self,other:Expr|Sequence[Any]|str|pli.Series)->Expr
polars.internals.expr.expr.Expr.is_infinite(self)->Expr
polars.internals.expr.expr.Expr.is_nan(self)->Expr
polars.internals.expr.expr.Expr.is_not(self)->Expr
polars.internals.expr.expr.Expr.is_not_nan(self)->Expr
polars.internals.expr.expr.Expr.is_not_null(self)->Expr
polars.internals.expr.expr.Expr.is_null(self)->Expr
polars.internals.expr.expr.Expr.is_unique(self)->Expr
polars.internals.expr.expr.Expr.keep_name(self)->Expr
polars.internals.expr.expr.Expr.kurtosis(self,fisher:bool=True,bias:bool=True)->Expr
polars.internals.expr.expr.Expr.last(self)->Expr
polars.internals.expr.expr.Expr.len(self)->Expr
polars.internals.expr.expr.Expr.limit(self,n:int=10)->Expr
polars.internals.expr.expr.Expr.list(self)->Expr
polars.internals.expr.expr.Expr.log(self,base:float=math.e)->Expr
polars.internals.expr.expr.Expr.log10(self)->Expr
polars.internals.expr.expr.Expr.lower_bound(self)->Expr
polars.internals.expr.expr.Expr.map(self,f:Callable[[pli.Series],pli.Series|Any],return_dtype:PolarsDataType|None=None,agg_list:bool=False)->Expr
polars.internals.expr.expr.Expr.map_alias(self,f:Callable[[str],str])->Expr
polars.internals.expr.expr.Expr.max(self)->Expr
polars.internals.expr.expr.Expr.mean(self)->Expr
polars.internals.expr.expr.Expr.median(self)->Expr
polars.internals.expr.expr.Expr.meta(self)->ExprMetaNameSpace
polars.internals.expr.expr.Expr.min(self)->Expr
polars.internals.expr.expr.Expr.mode(self)->Expr
polars.internals.expr.expr.Expr.n_unique(self)->Expr
polars.internals.expr.expr.Expr.null_count(self)->Expr
polars.internals.expr.expr.Expr.over(self,expr:str|Expr|list[Expr|str])->Expr
polars.internals.expr.expr.Expr.pct_change(self,n:int=1)->Expr
polars.internals.expr.expr.Expr.pow(self,exponent:int|float|pli.Series|Expr)->Expr
polars.internals.expr.expr.Expr.prefix(self,prefix:str)->Expr
polars.internals.expr.expr.Expr.product(self)->Expr
polars.internals.expr.expr.Expr.quantile(self,quantile:float,interpolation:InterpolationMethod='nearest')->Expr
polars.internals.expr.expr.Expr.rank(self,method:RankMethod='average',reverse:bool=False)->Expr
polars.internals.expr.expr.Expr.rechunk(self)->Expr
polars.internals.expr.expr.Expr.reinterpret(self,signed:bool=True)->Expr
polars.internals.expr.expr.Expr.repeat_by(self,by:Expr|str)->Expr
polars.internals.expr.expr.Expr.reshape(self,dims:tuple[int,...])->Expr
polars.internals.expr.expr.Expr.reverse(self)->Expr
polars.internals.expr.expr.Expr.rolling_apply(self,function:Callable[[pli.Series],Any],window_size:int,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False)->Expr
polars.internals.expr.expr.Expr.rolling_max(self,window_size:int|str,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.expr.expr.Expr.rolling_mean(self,window_size:int|str,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.expr.expr.Expr.rolling_median(self,window_size:int|str,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.expr.expr.Expr.rolling_min(self,window_size:int|str,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.expr.expr.Expr.rolling_quantile(self,quantile:float,interpolation:InterpolationMethod='nearest',window_size:int|str=2,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.expr.expr.Expr.rolling_skew(self,window_size:int,bias:bool=True)->Expr
polars.internals.expr.expr.Expr.rolling_std(self,window_size:int|str,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.expr.expr.Expr.rolling_sum(self,window_size:int|str,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.expr.expr.Expr.rolling_var(self,window_size:int|str,weights:list[float]|None=None,min_periods:int|None=None,center:bool=False,by:str|None=None,closed:ClosedWindow='left')->Expr
polars.internals.expr.expr.Expr.round(self,decimals:int)->Expr
polars.internals.expr.expr.Expr.sample(self,fraction:float=1.0,with_replacement:bool=True,shuffle:bool=False,seed:int|None=None)->Expr
polars.internals.expr.expr.Expr.search_sorted(self,element:Expr|int|float)->Expr
polars.internals.expr.expr.Expr.set_sorted(self,reverse:bool=False)->Expr
polars.internals.expr.expr.Expr.shift(self,periods:int=1)->Expr
polars.internals.expr.expr.Expr.shift_and_fill(self,periods:int,fill_value:int|float|bool|str|Expr|list[Any])->Expr
polars.internals.expr.expr.Expr.shuffle(self,seed:int|None=None)->Expr
polars.internals.expr.expr.Expr.sign(self)->Expr
polars.internals.expr.expr.Expr.sin(self)->Expr
polars.internals.expr.expr.Expr.sinh(self)->Expr
polars.internals.expr.expr.Expr.skew(self,bias:bool=True)->Expr
polars.internals.expr.expr.Expr.slice(self,offset:int|Expr,length:int|Expr|None=None)->Expr
polars.internals.expr.expr.Expr.sort(self,reverse:bool=False,nulls_last:bool=False)->Expr
polars.internals.expr.expr.Expr.sort_by(self,by:Expr|str|list[Expr|str],reverse:bool|list[bool]=False)->Expr
polars.internals.expr.expr.Expr.sqrt(self)->Expr
polars.internals.expr.expr.Expr.std(self,ddof:int=1)->Expr
polars.internals.expr.expr.Expr.str(self)->ExprStringNameSpace
polars.internals.expr.expr.Expr.struct(self)->ExprStructNameSpace
polars.internals.expr.expr.Expr.suffix(self,suffix:str)->Expr
polars.internals.expr.expr.Expr.sum(self)->Expr
polars.internals.expr.expr.Expr.tail(self,n:int=10)->Expr
polars.internals.expr.expr.Expr.take(self,indices:int|list[int]|Expr|pli.Series|np.ndarray[Any,Any])->Expr
polars.internals.expr.expr.Expr.take_every(self,n:int)->Expr
polars.internals.expr.expr.Expr.tan(self)->Expr
polars.internals.expr.expr.Expr.tanh(self)->Expr
polars.internals.expr.expr.Expr.to_physical(self)->Expr
polars.internals.expr.expr.Expr.top_k(self,k:int=5,reverse:bool=False)->Expr
polars.internals.expr.expr.Expr.unique(self,maintain_order:bool=False)->Expr
polars.internals.expr.expr.Expr.unique_counts(self)->Expr
polars.internals.expr.expr.Expr.upper_bound(self)->Expr
polars.internals.expr.expr.Expr.value_counts(self,multithreaded:bool=False,sort:bool=False)->Expr
polars.internals.expr.expr.Expr.var(self,ddof:int=1)->Expr
polars.internals.expr.expr.Expr.where(self,predicate:Expr)->Expr
polars.internals.expr.expr._prepare_alpha(com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None)->float
polars.internals.expr.expr._prepare_rolling_window_args(window_size:int|str,min_periods:int|None=None)->tuple[str, int]
polars.internals.expr.expr.ensure_list_of_pyexpr(exprs:object)->list[PyExpr]
polars.internals.expr.expr.expr_to_lit_or_expr(expr:Expr|bool|int|float|str|pli.Series|None|date|datetime|Sequence[int|float|str|None],str_to_lit:bool=True)->Expr
polars.internals.expr.expr.selection_to_pyexpr_list(exprs:str|Expr|Sequence[str|Expr|pli.Series]|pli.Series)->list[PyExpr]
polars.internals.expr.expr.wrap_expr(pyexpr:PyExpr)->Expr
polars.internals.expr_to_lit_or_expr(expr:Expr|bool|int|float|str|pli.Series|None|date|datetime|Sequence[int|float|str|None],str_to_lit:bool=True)->Expr
polars.internals.selection_to_pyexpr_list(exprs:str|Expr|Sequence[str|Expr|pli.Series]|pli.Series)->list[PyExpr]
polars.internals.wrap_expr(pyexpr:PyExpr)->Expr

