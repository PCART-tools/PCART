
----------------------------------------/home/zhang/Packages/polars/polars0.10.19/string_cache.py----------------------------------------
polars.StringCache(self)
polars.StringCache.__enter__(self)->'StringCache'
polars.StringCache.__exit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
polars.string_cache.StringCache(self)
polars.string_cache.StringCache.__enter__(self)->'StringCache'
polars.string_cache.StringCache.__exit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
polars.string_cache.StringCache.__init__(self)
polars.string_cache.toggle_string_cache(toggle:bool)->None
polars.toggle_string_cache(toggle:bool)->None


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/_html.py----------------------------------------
A:polars._html.self.row_idx->range(0, df.height)
A:polars._html.self.col_idx->range(0, df.width)
A:polars._html.template_mid->'\n\n'.join(map(lambda t: template_select % t, element_props))
A:polars._html.template->dedent('\n'.join((template_first, template_mid, template_last)))
polars._html.HTMLFormatter(self,df:'pl.DataFrame',max_cols:int=75,max_rows:int=40)
polars._html.HTMLFormatter.__init__(self,df:'pl.DataFrame',max_cols:int=75,max_rows:int=40)
polars._html.HTMLFormatter.render(self)->tp.List[str]
polars._html.HTMLFormatter.write(self,inner:str)->None
polars._html.HTMLFormatter.write_body(self)->None
polars._html.HTMLFormatter.write_header(self)->None
polars._html.NotebookFormatter(HTMLFormatter)
polars._html.NotebookFormatter.render(self)->tp.List[str]
polars._html.NotebookFormatter.write_style(self)->None
polars._html.Tag(self,elements:tp.List[str],tag:str,attributes:Optional[Dict[str,str]]=None)
polars._html.Tag.__enter__(self)->None
polars._html.Tag.__exit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
polars._html.Tag.__init__(self,elements:tp.List[str],tag:str,attributes:Optional[Dict[str,str]]=None)
polars._html.div(inner:str)->str
polars._html.table(inner:str)->str
polars._html.tag(inner:str,tag:str)->str
polars._html.tbody(inner:str)->str
polars._html.th(inner:str)->str
polars._html.thead(inner:str)->str
polars._html.tr(inner:str)->str


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/functions.py----------------------------------------
A:polars.functions.out->polars.wrap_s(_concat_series(items))
A:polars.functions.dtype->py_type_to_polars_type(type(val))
A:polars.functions.s->polars.Series._repeat(name, val, n, dtype)
A:polars.functions.values->numpy.append(values, np.array(high, dtype='datetime64[ms]'))
polars.arg_where(mask:'pl.Series')->'pl.Series'
polars.concat(items:Union[Sequence['pl.DataFrame'],Sequence['pl.Series'],Sequence['pl.LazyFrame']],rechunk:bool=True,how:str='vertical')->Union['pl.DataFrame', 'pl.Series', 'pl.LazyFrame']
polars.date_range(low:datetime,high:datetime,interval:timedelta,closed:Optional[str]=None,name:Optional[str]=None)->pl.Series
polars.functions.arg_where(mask:'pl.Series')->'pl.Series'
polars.functions.concat(items:Union[Sequence['pl.DataFrame'],Sequence['pl.Series'],Sequence['pl.LazyFrame']],rechunk:bool=True,how:str='vertical')->Union['pl.DataFrame', 'pl.Series', 'pl.LazyFrame']
polars.functions.date_range(low:datetime,high:datetime,interval:timedelta,closed:Optional[str]=None,name:Optional[str]=None)->pl.Series
polars.functions.get_dummies(df:'pl.DataFrame')->'pl.DataFrame'
polars.functions.repeat(val:Union[int,float,str,bool],n:int,name:Optional[str]=None)->'pl.Series'
polars.get_dummies(df:'pl.DataFrame')->'pl.DataFrame'
polars.repeat(val:Union[int,float,str,bool],n:int,name:Optional[str]=None)->'pl.Series'


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/cfg.py----------------------------------------
A:polars.cfg.os.environ['POLARS_TABLE_WIDTH']->str(width)
A:polars.cfg.os.environ['POLARS_FMT_MAX_ROWS']->str(n)
A:polars.cfg.os.environ['POLARS_FMT_MAX_COLS']->str(n)
polars.Config
polars.Config.set_ascii_tables(cls)->'Type[Config]'
polars.Config.set_global_string_cache(cls)->'Type[Config]'
polars.Config.set_tbl_cols(cls,n:int)->'Type[Config]'
polars.Config.set_tbl_rows(cls,n:int)->'Type[Config]'
polars.Config.set_tbl_width_chars(cls,width:int)->'Type[Config]'
polars.Config.set_utf8_tables(cls)->'Type[Config]'
polars.Config.unset_global_string_cache(cls)->'Type[Config]'
polars.cfg.Config
polars.cfg.Config.set_ascii_tables(cls)->'Type[Config]'
polars.cfg.Config.set_global_string_cache(cls)->'Type[Config]'
polars.cfg.Config.set_tbl_cols(cls,n:int)->'Type[Config]'
polars.cfg.Config.set_tbl_rows(cls,n:int)->'Type[Config]'
polars.cfg.Config.set_tbl_width_chars(cls,width:int)->'Type[Config]'
polars.cfg.Config.set_utf8_tables(cls)->'Type[Config]'
polars.cfg.Config.unset_global_string_cache(cls)->'Type[Config]'


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/utils.py----------------------------------------
A:polars.utils.ts_ms->pyarrow.compute.cast(array, pa.timestamp('ms'), safe=False)
A:polars.utils.ms->pyarrow.compute.cast(ts_ms, pa.int64())
A:polars.utils.array->array.combine_chunks().combine_chunks()
A:polars.utils.ptr_ctype->ctypes.cast(ptr, ctypes.POINTER(ptr_type))
polars.utils._process_null_values(null_values:Union[None,str,tp.List[str],Dict[str,str]]=None)->Union[None, str, tp.List[str], tp.List[Tuple[str, str]]]
polars.utils._ptr_to_numpy(ptr:int,len:int,ptr_type:Any)->np.ndarray
polars.utils.coerce_arrow(array:'pa.Array')->'pa.Array'


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/__init__.py----------------------------------------
A:polars.__init__.__version__->version()


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/io.py----------------------------------------
A:polars.io.tbl->connectorx.read_sql(conn=connection_uri, query=sql, return_type='arrow', partition_on=partition_on, partition_range=partition_range, partition_num=partition_num)
A:polars.io.df->polars.DataFrame.read_csv(file=data, infer_schema_length=infer_schema_length, batch_size=batch_size, has_headers=has_headers, ignore_errors=ignore_errors, stop_after_n_rows=stop_after_n_rows, skip_rows=skip_rows, projection=projection, sep=sep, columns=columns, rechunk=rechunk, encoding=encoding, n_threads=n_threads, dtype=dtype, low_memory=low_memory, comment_char=comment_char, quote_char=quote_char, null_values=null_values, parse_dates=parse_dates)
A:polars.io.file->str(file)
polars._prepare_file_arg(file:Union[str,List[str],TextIO,Path,BinaryIO,bytes],**kwargs:Any)->ContextManager[Union[str, BinaryIO, List[str], List[BinaryIO]]]
polars._process_http_file(path:str)->BytesIO
polars.io._prepare_file_arg(file:Union[str,List[str],TextIO,Path,BinaryIO,bytes],**kwargs:Any)->ContextManager[Union[str, BinaryIO, List[str], List[BinaryIO]]]
polars.io._process_http_file(path:str)->BytesIO
polars.io.read_csv(file:Union[str,TextIO,Path,BinaryIO,bytes],infer_schema_length:Optional[int]=100,batch_size:int=8192,has_headers:bool=True,ignore_errors:bool=False,stop_after_n_rows:Optional[int]=None,skip_rows:int=0,projection:Optional[List[int]]=None,sep:str=',',columns:Optional[List[str]]=None,rechunk:bool=True,encoding:str='utf8',n_threads:Optional[int]=None,dtype:Optional[Union[Dict[str,Type['pl.DataType']],List[Type['pl.DataType']]]]=None,new_columns:Optional[List[str]]=None,use_pyarrow:bool=False,low_memory:bool=False,comment_char:Optional[str]=None,quote_char:Optional[str]='"',storage_options:Optional[Dict]=None,null_values:Optional[Union[str,List[str],Dict[str,str]]]=None,parse_dates:bool=True)->'pl.DataFrame'
polars.io.read_ipc(file:Union[str,BinaryIO,Path,bytes],use_pyarrow:bool=_PYARROW_AVAILABLE,memory_map:bool=True,columns:Optional[List[str]]=None,storage_options:Optional[Dict]=None)->'pl.DataFrame'
polars.io.read_ipc_schema(file:Union[str,BinaryIO,Path,bytes])->Dict[str, Type['pl.DataType']]
polars.io.read_json(source:Union[str,BytesIO])->'pl.DataFrame'
polars.io.read_parquet(source:Union[str,List[str],Path,BinaryIO,bytes],use_pyarrow:bool=_PYARROW_AVAILABLE,stop_after_n_rows:Optional[int]=None,memory_map:bool=True,columns:Optional[List[str]]=None,storage_options:Optional[Dict]=None,**kwargs:Any)->'pl.DataFrame'
polars.io.read_sql(sql:Union[List[str],str],connection_uri:str,partition_on:Optional[str]=None,partition_range:Optional[Tuple[int,int]]=None,partition_num:Optional[int]=None)->'pl.DataFrame'
polars.io.scan_csv(file:Union[str,Path],infer_schema_length:Optional[int]=100,has_headers:bool=True,ignore_errors:bool=False,sep:str=',',skip_rows:int=0,stop_after_n_rows:Optional[int]=None,cache:bool=True,dtype:Optional[Dict[str,Type['pl.DataType']]]=None,low_memory:bool=False,comment_char:Optional[str]=None,quote_char:Optional[str]='"',null_values:Optional[Union[str,List[str],Dict[str,str]]]=None)->'pl.LazyFrame'
polars.io.scan_ipc(file:Union[str,Path],stop_after_n_rows:Optional[int]=None,cache:bool=True)->'pl.LazyFrame'
polars.io.scan_parquet(file:Union[str,Path],stop_after_n_rows:Optional[int]=None,cache:bool=True)->'pl.LazyFrame'
polars.io.update_columns(df:'pl.DataFrame',new_columns:List[str])->'pl.DataFrame'
polars.read_csv(file:Union[str,TextIO,Path,BinaryIO,bytes],infer_schema_length:Optional[int]=100,batch_size:int=8192,has_headers:bool=True,ignore_errors:bool=False,stop_after_n_rows:Optional[int]=None,skip_rows:int=0,projection:Optional[List[int]]=None,sep:str=',',columns:Optional[List[str]]=None,rechunk:bool=True,encoding:str='utf8',n_threads:Optional[int]=None,dtype:Optional[Union[Dict[str,Type['pl.DataType']],List[Type['pl.DataType']]]]=None,new_columns:Optional[List[str]]=None,use_pyarrow:bool=False,low_memory:bool=False,comment_char:Optional[str]=None,quote_char:Optional[str]='"',storage_options:Optional[Dict]=None,null_values:Optional[Union[str,List[str],Dict[str,str]]]=None,parse_dates:bool=True)->'pl.DataFrame'
polars.read_ipc(file:Union[str,BinaryIO,Path,bytes],use_pyarrow:bool=_PYARROW_AVAILABLE,memory_map:bool=True,columns:Optional[List[str]]=None,storage_options:Optional[Dict]=None)->'pl.DataFrame'
polars.read_ipc_schema(file:Union[str,BinaryIO,Path,bytes])->Dict[str, Type['pl.DataType']]
polars.read_json(source:Union[str,BytesIO])->'pl.DataFrame'
polars.read_parquet(source:Union[str,List[str],Path,BinaryIO,bytes],use_pyarrow:bool=_PYARROW_AVAILABLE,stop_after_n_rows:Optional[int]=None,memory_map:bool=True,columns:Optional[List[str]]=None,storage_options:Optional[Dict]=None,**kwargs:Any)->'pl.DataFrame'
polars.read_sql(sql:Union[List[str],str],connection_uri:str,partition_on:Optional[str]=None,partition_range:Optional[Tuple[int,int]]=None,partition_num:Optional[int]=None)->'pl.DataFrame'
polars.scan_csv(file:Union[str,Path],infer_schema_length:Optional[int]=100,has_headers:bool=True,ignore_errors:bool=False,sep:str=',',skip_rows:int=0,stop_after_n_rows:Optional[int]=None,cache:bool=True,dtype:Optional[Dict[str,Type['pl.DataType']]]=None,low_memory:bool=False,comment_char:Optional[str]=None,quote_char:Optional[str]='"',null_values:Optional[Union[str,List[str],Dict[str,str]]]=None)->'pl.LazyFrame'
polars.scan_ipc(file:Union[str,Path],stop_after_n_rows:Optional[int]=None,cache:bool=True)->'pl.LazyFrame'
polars.scan_parquet(file:Union[str,Path],stop_after_n_rows:Optional[int]=None,cache:bool=True)->'pl.LazyFrame'
polars.update_columns(df:'pl.DataFrame',new_columns:List[str])->'pl.DataFrame'


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/convert.py----------------------------------------
polars.convert.from_arrow(a:Union['pa.Table','pa.Array'],rechunk:bool=True)->Union['pl.DataFrame', 'pl.Series']
polars.convert.from_dict(data:Dict[str,Sequence[Any]],columns:Optional[Sequence[str]]=None)->'pl.DataFrame'
polars.convert.from_dicts(dicts:Sequence[Dict[str,Any]])->'pl.DataFrame'
polars.convert.from_pandas(df:Union['pd.DataFrame','pd.Series','pd.DatetimeIndex'],rechunk:bool=True,nan_to_none:bool=True)->Union['pl.Series', 'pl.DataFrame']
polars.convert.from_records(data:Union[np.ndarray,Sequence[Sequence[Any]]],columns:Optional[Sequence[str]]=None,orient:Optional[str]=None)->'pl.DataFrame'
polars.from_arrow(a:Union['pa.Table','pa.Array'],rechunk:bool=True)->Union['pl.DataFrame', 'pl.Series']
polars.from_dict(data:Dict[str,Sequence[Any]],columns:Optional[Sequence[str]]=None)->'pl.DataFrame'
polars.from_dicts(dicts:Sequence[Dict[str,Any]])->'pl.DataFrame'
polars.from_pandas(df:Union['pd.DataFrame','pd.Series','pd.DatetimeIndex'],rechunk:bool=True,nan_to_none:bool=True)->Union['pl.Series', 'pl.DataFrame']
polars.from_records(data:Union[np.ndarray,Sequence[Sequence[Any]]],columns:Optional[Sequence[str]]=None,orient:Optional[str]=None)->'pl.DataFrame'


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/datatypes.py----------------------------------------
polars.Boolean(DataType)
polars.Categorical(DataType)
polars.DataType
polars.Date(DataType)
polars.Datetime(DataType)
polars.Float32(DataType)
polars.Float64(DataType)
polars.Int16(DataType)
polars.Int32(DataType)
polars.Int64(DataType)
polars.Int8(DataType)
polars.List(DataType)
polars.Object(DataType)
polars.Time(DataType)
polars.UInt16(DataType)
polars.UInt32(DataType)
polars.UInt64(DataType)
polars.UInt8(DataType)
polars.Utf8(DataType)
polars.datatypes.Boolean(DataType)
polars.datatypes.Categorical(DataType)
polars.datatypes.DataType
polars.datatypes.Date(DataType)
polars.datatypes.Datetime(DataType)
polars.datatypes.Float32(DataType)
polars.datatypes.Float64(DataType)
polars.datatypes.Int16(DataType)
polars.datatypes.Int32(DataType)
polars.datatypes.Int64(DataType)
polars.datatypes.Int8(DataType)
polars.datatypes.List(DataType)
polars.datatypes.Object(DataType)
polars.datatypes.Time(DataType)
polars.datatypes.UInt16(DataType)
polars.datatypes.UInt32(DataType)
polars.datatypes.UInt64(DataType)
polars.datatypes.UInt8(DataType)
polars.datatypes.Utf8(DataType)
polars.datatypes.date_like_to_physical(dtype:Type[DataType])->Type[DataType]
polars.datatypes.dtype_to_ctype(dtype:Type[DataType])->Type[_SimpleCData]
polars.datatypes.numpy_type_to_constructor(dtype:Type[np.dtype])->Callable[..., 'PySeries']
polars.datatypes.polars_type_to_constructor(dtype:Type[DataType])->Callable[[str, Sequence[Any], bool], 'PySeries']
polars.datatypes.py_type_to_arrow_type(dtype:Type[Any])->'pa.lib.DataType'
polars.datatypes.py_type_to_constructor(dtype:Type[Any])->Callable[..., 'PySeries']
polars.datatypes.py_type_to_polars_type(dtype:Type[Any])->'Type[DataType]'
polars.datatypes.pytype_to_polars_type(data_type:Type[Any])->Type[DataType]
polars.date_like_to_physical(dtype:Type[DataType])->Type[DataType]
polars.dtype_to_ctype(dtype:Type[DataType])->Type[_SimpleCData]
polars.numpy_type_to_constructor(dtype:Type[np.dtype])->Callable[..., 'PySeries']
polars.polars_type_to_constructor(dtype:Type[DataType])->Callable[[str, Sequence[Any], bool], 'PySeries']
polars.py_type_to_arrow_type(dtype:Type[Any])->'pa.lib.DataType'
polars.py_type_to_constructor(dtype:Type[Any])->Callable[..., 'PySeries']
polars.py_type_to_polars_type(dtype:Type[Any])->'Type[DataType]'
polars.pytype_to_polars_type(data_type:Type[Any])->Type[DataType]


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/eager/series.py----------------------------------------
A:polars.eager.series.fname->name.replace('<>', ffi_name)
A:polars.eager.series.el->_DTYPE_TO_PY_TYPE[dtype](el)
A:polars.eager.series.self._s->sequence_to_pyseries('', [], Float32)
A:polars.eager.series.series->self.cast(pl.Float64).clone()
A:polars.eager.series.other->Series('', other)
A:polars.eager.series.f->get_ffi_func('set_at_idx_<>', self.dtype, self._s)
A:polars.eager.series.dtype->kwargs.pop('dtype')
A:polars.eager.series.physical_type->date_like_to_physical(self.dtype)
A:polars.eager.series.primitive->date_like_to_physical(self.dtype)
A:polars.eager.series.out->int(s.mean())
A:polars.eager.series.slc->slice(item.start, item.stop, step)
A:polars.eager.series.(start, stop, stride)->item.indices(self.len())
A:polars.eager.series.s->wrap_s(self._s)
A:polars.eager.series.self->self.cast(pl.Float64).cast(pl.Float64)
A:polars.eager.series.predicate->Series('', predicate)
A:polars.eager.series.indices->numpy.array(indices)
A:polars.eager.series.opt_s->self.cast(pl.Float64).cast(pl.Float64)._s.rechunk(in_place)
A:polars.eager.series.ptr_type->dtype_to_ctype(self.dtype)
A:polars.eager.series.ptr->self.cast(pl.Float64).cast(pl.Float64)._s.as_single_ptr()
A:polars.eager.series.array->_ptr_to_numpy(ptr, self.len(), ptr_type)
A:polars.eager.series.args[0]->wrap_s(self._s).view(ignore_nulls=True)
A:polars.eager.series.idx->idx.cast(pl.UInt32).cast(pl.UInt32)
A:polars.eager.series.idx_array->numpy.array(idx, dtype=np.uint32)
A:polars.eager.series.sthis->wrap_s(self._s)
A:polars.eager.series.df->polars.DataFrame(other)
polars.DateTimeNameSpace(self,series:Series)
polars.DateTimeNameSpace.__getitem__(self,item:int)->Union[date, datetime]
polars.DateTimeNameSpace.day(self)->Series
polars.DateTimeNameSpace.hour(self)->Series
polars.DateTimeNameSpace.max(self)->Union[date, datetime]
polars.DateTimeNameSpace.mean(self)->Union[date, datetime]
polars.DateTimeNameSpace.median(self)->Union[date, datetime]
polars.DateTimeNameSpace.min(self)->Union[date, datetime]
polars.DateTimeNameSpace.minute(self)->Series
polars.DateTimeNameSpace.month(self)->Series
polars.DateTimeNameSpace.nanosecond(self)->Series
polars.DateTimeNameSpace.ordinal_day(self)->Series
polars.DateTimeNameSpace.round(self,rule:str,n:int)->Series
polars.DateTimeNameSpace.second(self)->Series
polars.DateTimeNameSpace.strftime(self,fmt:str)->Series
polars.DateTimeNameSpace.timestamp(self)->Series
polars.DateTimeNameSpace.to_python_datetime(self)->Series
polars.DateTimeNameSpace.week(self)->Series
polars.DateTimeNameSpace.weekday(self)->Series
polars.DateTimeNameSpace.year(self)->Series
polars.ListNameSpace(self,series:Series)
polars.ListNameSpace.concat(self,other:Union[tp.List[Series],Series])->'Series'
polars.ListNameSpace.lengths(self)->Series
polars.ListNameSpace.max(self)->Series
polars.ListNameSpace.mean(self)->Series
polars.ListNameSpace.min(self)->Series
polars.ListNameSpace.reverse(self)->Series
polars.ListNameSpace.sort(self,reverse:bool)->Series
polars.ListNameSpace.sum(self)->Series
polars.ListNameSpace.unique(self)->Series
polars.Series(self,name:Optional[Union[str,ArrayLike]]=None,values:Optional[ArrayLike]=None,dtype:Optional[Type[DataType]]=None,strict:bool=True,nan_to_null:bool=False)
polars.Series.__add__(self,other:Any)->'Series'
polars.Series.__and__(self,other:'Series')->'Series'
polars.Series.__array__(self,dtype=None)->np.ndarray
polars.Series.__array_ufunc__(self,ufunc:Callable[...,Any],method:str,*inputs:Any,**kwargs:Any)->'Series'
polars.Series.__copy__(self)->'Series'
polars.Series.__deepcopy__(self,memodict={})->'Series'
polars.Series.__eq__(self,other:Any)->'Series'
polars.Series.__floordiv__(self,other:Any)->'Series'
polars.Series.__ge__(self,other:Any)->'Series'
polars.Series.__getitem__(self,item:Any)->Any
polars.Series.__getstate__(self)
polars.Series.__gt__(self,other:Any)->'Series'
polars.Series.__invert__(self)->'Series'
polars.Series.__iter__(self)->'SeriesIter'
polars.Series.__le__(self,other:Any)->'Series'
polars.Series.__len__(self)->int
polars.Series.__lt__(self,other:Any)->'Series'
polars.Series.__mod__(self,other:Any)->'Series'
polars.Series.__mul__(self,other:Any)->'Series'
polars.Series.__ne__(self,other:Any)->'Series'
polars.Series.__neg__(self)->'Series'
polars.Series.__or__(self,other:'Series')->'Series'
polars.Series.__pow__(self,power:float,modulo:None=None)->'Series'
polars.Series.__radd__(self,other:Any)->'Series'
polars.Series.__rand__(self,other:'Series')->'Series'
polars.Series.__repr__(self)->str
polars.Series.__rfloordiv__(self,other:Any)->'Series'
polars.Series.__rmod__(self,other:Any)->'Series'
polars.Series.__rmul__(self,other:Any)->'Series'
polars.Series.__ror__(self,other:'Series')->'Series'
polars.Series.__rsub__(self,other:Any)->'Series'
polars.Series.__rtruediv__(self,other:Any)->np.ndarray
polars.Series.__rxor__(self,other:'Series')->'Series'
polars.Series.__setitem__(self,key:Any,value:Any)->None
polars.Series.__setstate__(self,state)
polars.Series.__str__(self)->str
polars.Series.__sub__(self,other:Any)->'Series'
polars.Series.__truediv__(self,other:Any)->'Series'
polars.Series.__xor__(self,other:'Series')->'Series'
polars.Series._from_arrow(cls,name:str,values:'pa.Array')->'Series'
polars.Series._from_pandas(cls,name:str,values:Union['pd.Series','pd.DatetimeIndex'],nan_to_none:bool=True)->'Series'
polars.Series._from_pyseries(cls,pyseries:'PySeries')->'Series'
polars.Series._repeat(cls,name:str,val:Union[int,float,str,bool],n:int,dtype:Type[DataType])->'Series'
polars.Series.abs(self)->'Series'
polars.Series.alias(self,name:str)->'Series'
polars.Series.append(self,other:'Series')->None
polars.Series.apply(self,func:Callable[[Any],Any],return_dtype:Optional[Type[DataType]]=None)->'Series'
polars.Series.arccos(self)->'Series'
polars.Series.arcsin(self)->'Series'
polars.Series.arctan(self)->'Series'
polars.Series.arg_max(self)->Optional[int]
polars.Series.arg_min(self)->Optional[int]
polars.Series.arg_sort(self,reverse:bool=False)->'Series'
polars.Series.arg_true(self)->'Series'
polars.Series.arg_unique(self)->'Series'
polars.Series.argsort(self,reverse:bool=False)->'Series'
polars.Series.arr(self)->'ListNameSpace'
polars.Series.cast(self,dtype:Type[DataType],strict:bool=True)->'Series'
polars.Series.chunk_lengths(self)->tp.List[int]
polars.Series.clip(self,min_val:Union[int,float],max_val:Union[int,float])->'Series'
polars.Series.clone(self)->'Series'
polars.Series.cos(self)->'Series'
polars.Series.cummax(self,reverse:bool=False)->'Series'
polars.Series.cummin(self,reverse:bool=False)->'Series'
polars.Series.cumprod(self,reverse:bool=False)->'Series'
polars.Series.cumsum(self,reverse:bool=False)->'Series'
polars.Series.describe(self)->'pl.DataFrame'
polars.Series.diff(self,n:int=1,null_behavior:str='ignore')->'Series'
polars.Series.dot(self,other:'Series')->Optional[float]
polars.Series.drop_nulls(self)->'Series'
polars.Series.dt(self)->'DateTimeNameSpace'
polars.Series.dtype(self)->Type[DataType]
polars.Series.explode(self)->'Series'
polars.Series.fill_null(self,strategy:Union[str,'pl.Expr'])->'Series'
polars.Series.filter(self,predicate:'Series')->'Series'
polars.Series.floor(self)->'Series'
polars.Series.has_validity(self)->bool
polars.Series.hash(self,k0:int=0,k1:int=1,k2:int=2,k3:int=3)->'pl.Series'
polars.Series.head(self,length:Optional[int]=None)->'Series'
polars.Series.inner(self)->'PySeries'
polars.Series.interpolate(self)->'Series'
polars.Series.is_boolean(self)->bool
polars.Series.is_datetime(self)->bool
polars.Series.is_duplicated(self)->'Series'
polars.Series.is_finite(self)->'Series'
polars.Series.is_first(self)->'Series'
polars.Series.is_float(self)->bool
polars.Series.is_in(self,other:'Series')->'Series'
polars.Series.is_infinite(self)->'Series'
polars.Series.is_nan(self)->'Series'
polars.Series.is_not_nan(self)->'Series'
polars.Series.is_not_null(self)->'Series'
polars.Series.is_null(self)->'Series'
polars.Series.is_numeric(self)->bool
polars.Series.is_unique(self)->'Series'
polars.Series.is_utf8(self)->bool
polars.Series.kurtosis(self,fisher:bool=True,bias:bool=True)->Optional[float]
polars.Series.len(self)->int
polars.Series.limit(self,num_elements:int=10)->'Series'
polars.Series.max(self)->Union[int, float]
polars.Series.mean(self)->Union[int, float]
polars.Series.median(self)->float
polars.Series.min(self)->Union[int, float]
polars.Series.mode(self)->'Series'
polars.Series.n_chunks(self)->int
polars.Series.n_unique(self)->int
polars.Series.name(self)->str
polars.Series.null_count(self)->int
polars.Series.peak_max(self)->'Series'
polars.Series.peak_min(self)->'Series'
polars.Series.quantile(self,quantile:float)->float
polars.Series.rank(self,method:str='average')->'Series'
polars.Series.rechunk(self,in_place:bool=False)->Optional['Series']
polars.Series.reinterpret(self,signed:bool=True)->'Series'
polars.Series.rename(self,name:str,in_place:bool=False)->Optional['Series']
polars.Series.rolling_apply(self,window_size:int,function:Callable[['pl.Series'],Any])->'pl.Series'
polars.Series.rolling_max(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Series'
polars.Series.rolling_mean(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Series'
polars.Series.rolling_median(self,window_size:int)->'Series'
polars.Series.rolling_min(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Series'
polars.Series.rolling_quantile(self,window_size:int,quantile:float)->'Series'
polars.Series.rolling_skew(self,window_size:int,bias:bool=True)->'Series'
polars.Series.rolling_std(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Series'
polars.Series.rolling_sum(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Series'
polars.Series.rolling_var(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Series'
polars.Series.round(self,decimals:int)->'Series'
polars.Series.sample(self,n:Optional[int]=None,frac:Optional[float]=None,with_replacement:bool=False)->'Series'
polars.Series.series_equal(self,other:'Series',null_equal:bool=False)->bool
polars.Series.set(self,filter:'Series',value:Union[int,float])->'Series'
polars.Series.set_at_idx(self,idx:Union['Series',np.ndarray],value:Union[int,float])->'Series'
polars.Series.shape(self)->Tuple[int]
polars.Series.shift(self,periods:int=1)->'Series'
polars.Series.shift_and_fill(self,periods:int,fill_value:'pl.Expr')->'Series'
polars.Series.shrink_to_fit(self,in_place:bool=False)->Optional['Series']
polars.Series.sin(self)->'Series'
polars.Series.skew(self,bias:bool=True)->Optional[float]
polars.Series.slice(self,offset:int,length:int)->'Series'
polars.Series.sort(self,in_place:bool=False,reverse:bool=False)->Optional['Series']
polars.Series.sqrt(self)->'Series'
polars.Series.std(self,ddof:int=1)->Optional[float]
polars.Series.str(self)->'StringNameSpace'
polars.Series.str_concat(self,delimiter:str='-')->'Series'
polars.Series.sum(self)->Union[int, float]
polars.Series.tail(self,length:Optional[int]=None)->'Series'
polars.Series.take(self,indices:Union[np.ndarray,tp.List[int]])->'Series'
polars.Series.take_every(self,n:int)->'Series'
polars.Series.tan(self)->'Series'
polars.Series.to_arrow(self)->'pa.Array'
polars.Series.to_dummies(self)->'pl.DataFrame'
polars.Series.to_frame(self)->'pl.DataFrame'
polars.Series.to_list(self,use_pyarrow:bool=False)->tp.List[Optional[Any]]
polars.Series.to_numpy(self,*args:Any,zero_copy_only:bool=False,**kwargs:Any)->np.ndarray
polars.Series.unique(self)->'Series'
polars.Series.value_counts(self)->'pl.DataFrame'
polars.Series.var(self,ddof:int=1)->Optional[float]
polars.Series.view(self,ignore_nulls:bool=False)->np.ndarray
polars.Series.zip_with(self,mask:'Series',other:'Series')->'Series'
polars.SeriesIter(self,length:int,s:Series)
polars.SeriesIter.__iter__(self)->'SeriesIter'
polars.SeriesIter.__next__(self)->Any
polars.StringNameSpace(self,series:'Series')
polars.StringNameSpace.contains(self,pattern:str)->Series
polars.StringNameSpace.extract(self,pattern:str,group_index:int=1)->Series
polars.StringNameSpace.json_path_match(self,json_path:str)->Series
polars.StringNameSpace.lengths(self)->Series
polars.StringNameSpace.lstrip(self)->Series
polars.StringNameSpace.replace(self,pattern:str,value:str)->Series
polars.StringNameSpace.replace_all(self,pattern:str,value:str)->Series
polars.StringNameSpace.rstrip(self)->Series
polars.StringNameSpace.slice(self,start:int,length:Optional[int]=None)->Series
polars.StringNameSpace.strptime(self,datatype:DataType,fmt:Optional[str]=None)->Series
polars.StringNameSpace.to_lowercase(self)->Series
polars.StringNameSpace.to_uppercase(self)->Series
polars._maybe_cast(el:'Type[DataType]',dtype:Type)->'Type[DataType]'
polars._to_python_datetime(value:Union[int,float],dtype:Type[DataType])->Union[date, datetime]
polars.eager.series.DateTimeNameSpace(self,series:Series)
polars.eager.series.DateTimeNameSpace.__getitem__(self,item:int)->Union[date, datetime]
polars.eager.series.DateTimeNameSpace.__init__(self,series:Series)
polars.eager.series.DateTimeNameSpace.day(self)->Series
polars.eager.series.DateTimeNameSpace.hour(self)->Series
polars.eager.series.DateTimeNameSpace.max(self)->Union[date, datetime]
polars.eager.series.DateTimeNameSpace.mean(self)->Union[date, datetime]
polars.eager.series.DateTimeNameSpace.median(self)->Union[date, datetime]
polars.eager.series.DateTimeNameSpace.min(self)->Union[date, datetime]
polars.eager.series.DateTimeNameSpace.minute(self)->Series
polars.eager.series.DateTimeNameSpace.month(self)->Series
polars.eager.series.DateTimeNameSpace.nanosecond(self)->Series
polars.eager.series.DateTimeNameSpace.ordinal_day(self)->Series
polars.eager.series.DateTimeNameSpace.round(self,rule:str,n:int)->Series
polars.eager.series.DateTimeNameSpace.second(self)->Series
polars.eager.series.DateTimeNameSpace.strftime(self,fmt:str)->Series
polars.eager.series.DateTimeNameSpace.timestamp(self)->Series
polars.eager.series.DateTimeNameSpace.to_python_datetime(self)->Series
polars.eager.series.DateTimeNameSpace.week(self)->Series
polars.eager.series.DateTimeNameSpace.weekday(self)->Series
polars.eager.series.DateTimeNameSpace.year(self)->Series
polars.eager.series.ListNameSpace(self,series:Series)
polars.eager.series.ListNameSpace.__init__(self,series:Series)
polars.eager.series.ListNameSpace.concat(self,other:Union[tp.List[Series],Series])->'Series'
polars.eager.series.ListNameSpace.lengths(self)->Series
polars.eager.series.ListNameSpace.max(self)->Series
polars.eager.series.ListNameSpace.mean(self)->Series
polars.eager.series.ListNameSpace.min(self)->Series
polars.eager.series.ListNameSpace.reverse(self)->Series
polars.eager.series.ListNameSpace.sort(self,reverse:bool)->Series
polars.eager.series.ListNameSpace.sum(self)->Series
polars.eager.series.ListNameSpace.unique(self)->Series
polars.eager.series.Series(self,name:Optional[Union[str,ArrayLike]]=None,values:Optional[ArrayLike]=None,dtype:Optional[Type[DataType]]=None,strict:bool=True,nan_to_null:bool=False)
polars.eager.series.Series.__add__(self,other:Any)->'Series'
polars.eager.series.Series.__and__(self,other:'Series')->'Series'
polars.eager.series.Series.__array__(self,dtype=None)->np.ndarray
polars.eager.series.Series.__array_ufunc__(self,ufunc:Callable[...,Any],method:str,*inputs:Any,**kwargs:Any)->'Series'
polars.eager.series.Series.__copy__(self)->'Series'
polars.eager.series.Series.__deepcopy__(self,memodict={})->'Series'
polars.eager.series.Series.__eq__(self,other:Any)->'Series'
polars.eager.series.Series.__floordiv__(self,other:Any)->'Series'
polars.eager.series.Series.__ge__(self,other:Any)->'Series'
polars.eager.series.Series.__getitem__(self,item:Any)->Any
polars.eager.series.Series.__getstate__(self)
polars.eager.series.Series.__gt__(self,other:Any)->'Series'
polars.eager.series.Series.__init__(self,name:Optional[Union[str,ArrayLike]]=None,values:Optional[ArrayLike]=None,dtype:Optional[Type[DataType]]=None,strict:bool=True,nan_to_null:bool=False)
polars.eager.series.Series.__invert__(self)->'Series'
polars.eager.series.Series.__iter__(self)->'SeriesIter'
polars.eager.series.Series.__le__(self,other:Any)->'Series'
polars.eager.series.Series.__len__(self)->int
polars.eager.series.Series.__lt__(self,other:Any)->'Series'
polars.eager.series.Series.__mod__(self,other:Any)->'Series'
polars.eager.series.Series.__mul__(self,other:Any)->'Series'
polars.eager.series.Series.__ne__(self,other:Any)->'Series'
polars.eager.series.Series.__neg__(self)->'Series'
polars.eager.series.Series.__or__(self,other:'Series')->'Series'
polars.eager.series.Series.__pow__(self,power:float,modulo:None=None)->'Series'
polars.eager.series.Series.__radd__(self,other:Any)->'Series'
polars.eager.series.Series.__rand__(self,other:'Series')->'Series'
polars.eager.series.Series.__repr__(self)->str
polars.eager.series.Series.__rfloordiv__(self,other:Any)->'Series'
polars.eager.series.Series.__rmod__(self,other:Any)->'Series'
polars.eager.series.Series.__rmul__(self,other:Any)->'Series'
polars.eager.series.Series.__ror__(self,other:'Series')->'Series'
polars.eager.series.Series.__rsub__(self,other:Any)->'Series'
polars.eager.series.Series.__rtruediv__(self,other:Any)->np.ndarray
polars.eager.series.Series.__rxor__(self,other:'Series')->'Series'
polars.eager.series.Series.__setitem__(self,key:Any,value:Any)->None
polars.eager.series.Series.__setstate__(self,state)
polars.eager.series.Series.__str__(self)->str
polars.eager.series.Series.__sub__(self,other:Any)->'Series'
polars.eager.series.Series.__truediv__(self,other:Any)->'Series'
polars.eager.series.Series.__xor__(self,other:'Series')->'Series'
polars.eager.series.Series._from_arrow(cls,name:str,values:'pa.Array')->'Series'
polars.eager.series.Series._from_pandas(cls,name:str,values:Union['pd.Series','pd.DatetimeIndex'],nan_to_none:bool=True)->'Series'
polars.eager.series.Series._from_pyseries(cls,pyseries:'PySeries')->'Series'
polars.eager.series.Series._repeat(cls,name:str,val:Union[int,float,str,bool],n:int,dtype:Type[DataType])->'Series'
polars.eager.series.Series.abs(self)->'Series'
polars.eager.series.Series.alias(self,name:str)->'Series'
polars.eager.series.Series.append(self,other:'Series')->None
polars.eager.series.Series.apply(self,func:Callable[[Any],Any],return_dtype:Optional[Type[DataType]]=None)->'Series'
polars.eager.series.Series.arccos(self)->'Series'
polars.eager.series.Series.arcsin(self)->'Series'
polars.eager.series.Series.arctan(self)->'Series'
polars.eager.series.Series.arg_max(self)->Optional[int]
polars.eager.series.Series.arg_min(self)->Optional[int]
polars.eager.series.Series.arg_sort(self,reverse:bool=False)->'Series'
polars.eager.series.Series.arg_true(self)->'Series'
polars.eager.series.Series.arg_unique(self)->'Series'
polars.eager.series.Series.argsort(self,reverse:bool=False)->'Series'
polars.eager.series.Series.arr(self)->'ListNameSpace'
polars.eager.series.Series.cast(self,dtype:Type[DataType],strict:bool=True)->'Series'
polars.eager.series.Series.chunk_lengths(self)->tp.List[int]
polars.eager.series.Series.clip(self,min_val:Union[int,float],max_val:Union[int,float])->'Series'
polars.eager.series.Series.clone(self)->'Series'
polars.eager.series.Series.cos(self)->'Series'
polars.eager.series.Series.cummax(self,reverse:bool=False)->'Series'
polars.eager.series.Series.cummin(self,reverse:bool=False)->'Series'
polars.eager.series.Series.cumprod(self,reverse:bool=False)->'Series'
polars.eager.series.Series.cumsum(self,reverse:bool=False)->'Series'
polars.eager.series.Series.describe(self)->'pl.DataFrame'
polars.eager.series.Series.diff(self,n:int=1,null_behavior:str='ignore')->'Series'
polars.eager.series.Series.dot(self,other:'Series')->Optional[float]
polars.eager.series.Series.drop_nulls(self)->'Series'
polars.eager.series.Series.dt(self)->'DateTimeNameSpace'
polars.eager.series.Series.dtype(self)->Type[DataType]
polars.eager.series.Series.explode(self)->'Series'
polars.eager.series.Series.fill_null(self,strategy:Union[str,'pl.Expr'])->'Series'
polars.eager.series.Series.filter(self,predicate:'Series')->'Series'
polars.eager.series.Series.floor(self)->'Series'
polars.eager.series.Series.has_validity(self)->bool
polars.eager.series.Series.hash(self,k0:int=0,k1:int=1,k2:int=2,k3:int=3)->'pl.Series'
polars.eager.series.Series.head(self,length:Optional[int]=None)->'Series'
polars.eager.series.Series.inner(self)->'PySeries'
polars.eager.series.Series.interpolate(self)->'Series'
polars.eager.series.Series.is_boolean(self)->bool
polars.eager.series.Series.is_datetime(self)->bool
polars.eager.series.Series.is_duplicated(self)->'Series'
polars.eager.series.Series.is_finite(self)->'Series'
polars.eager.series.Series.is_first(self)->'Series'
polars.eager.series.Series.is_float(self)->bool
polars.eager.series.Series.is_in(self,other:'Series')->'Series'
polars.eager.series.Series.is_infinite(self)->'Series'
polars.eager.series.Series.is_nan(self)->'Series'
polars.eager.series.Series.is_not_nan(self)->'Series'
polars.eager.series.Series.is_not_null(self)->'Series'
polars.eager.series.Series.is_null(self)->'Series'
polars.eager.series.Series.is_numeric(self)->bool
polars.eager.series.Series.is_unique(self)->'Series'
polars.eager.series.Series.is_utf8(self)->bool
polars.eager.series.Series.kurtosis(self,fisher:bool=True,bias:bool=True)->Optional[float]
polars.eager.series.Series.len(self)->int
polars.eager.series.Series.limit(self,num_elements:int=10)->'Series'
polars.eager.series.Series.max(self)->Union[int, float]
polars.eager.series.Series.mean(self)->Union[int, float]
polars.eager.series.Series.median(self)->float
polars.eager.series.Series.min(self)->Union[int, float]
polars.eager.series.Series.mode(self)->'Series'
polars.eager.series.Series.n_chunks(self)->int
polars.eager.series.Series.n_unique(self)->int
polars.eager.series.Series.name(self)->str
polars.eager.series.Series.null_count(self)->int
polars.eager.series.Series.peak_max(self)->'Series'
polars.eager.series.Series.peak_min(self)->'Series'
polars.eager.series.Series.quantile(self,quantile:float)->float
polars.eager.series.Series.rank(self,method:str='average')->'Series'
polars.eager.series.Series.rechunk(self,in_place:bool=False)->Optional['Series']
polars.eager.series.Series.reinterpret(self,signed:bool=True)->'Series'
polars.eager.series.Series.rename(self,name:str,in_place:bool=False)->Optional['Series']
polars.eager.series.Series.rolling_apply(self,window_size:int,function:Callable[['pl.Series'],Any])->'pl.Series'
polars.eager.series.Series.rolling_max(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Series'
polars.eager.series.Series.rolling_mean(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Series'
polars.eager.series.Series.rolling_median(self,window_size:int)->'Series'
polars.eager.series.Series.rolling_min(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Series'
polars.eager.series.Series.rolling_quantile(self,window_size:int,quantile:float)->'Series'
polars.eager.series.Series.rolling_skew(self,window_size:int,bias:bool=True)->'Series'
polars.eager.series.Series.rolling_std(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Series'
polars.eager.series.Series.rolling_sum(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Series'
polars.eager.series.Series.rolling_var(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Series'
polars.eager.series.Series.round(self,decimals:int)->'Series'
polars.eager.series.Series.sample(self,n:Optional[int]=None,frac:Optional[float]=None,with_replacement:bool=False)->'Series'
polars.eager.series.Series.series_equal(self,other:'Series',null_equal:bool=False)->bool
polars.eager.series.Series.set(self,filter:'Series',value:Union[int,float])->'Series'
polars.eager.series.Series.set_at_idx(self,idx:Union['Series',np.ndarray],value:Union[int,float])->'Series'
polars.eager.series.Series.shape(self)->Tuple[int]
polars.eager.series.Series.shift(self,periods:int=1)->'Series'
polars.eager.series.Series.shift_and_fill(self,periods:int,fill_value:'pl.Expr')->'Series'
polars.eager.series.Series.shrink_to_fit(self,in_place:bool=False)->Optional['Series']
polars.eager.series.Series.sin(self)->'Series'
polars.eager.series.Series.skew(self,bias:bool=True)->Optional[float]
polars.eager.series.Series.slice(self,offset:int,length:int)->'Series'
polars.eager.series.Series.sort(self,in_place:bool=False,reverse:bool=False)->Optional['Series']
polars.eager.series.Series.sqrt(self)->'Series'
polars.eager.series.Series.std(self,ddof:int=1)->Optional[float]
polars.eager.series.Series.str(self)->'StringNameSpace'
polars.eager.series.Series.str_concat(self,delimiter:str='-')->'Series'
polars.eager.series.Series.sum(self)->Union[int, float]
polars.eager.series.Series.tail(self,length:Optional[int]=None)->'Series'
polars.eager.series.Series.take(self,indices:Union[np.ndarray,tp.List[int]])->'Series'
polars.eager.series.Series.take_every(self,n:int)->'Series'
polars.eager.series.Series.tan(self)->'Series'
polars.eager.series.Series.to_arrow(self)->'pa.Array'
polars.eager.series.Series.to_dummies(self)->'pl.DataFrame'
polars.eager.series.Series.to_frame(self)->'pl.DataFrame'
polars.eager.series.Series.to_list(self,use_pyarrow:bool=False)->tp.List[Optional[Any]]
polars.eager.series.Series.to_numpy(self,*args:Any,zero_copy_only:bool=False,**kwargs:Any)->np.ndarray
polars.eager.series.Series.unique(self)->'Series'
polars.eager.series.Series.value_counts(self)->'pl.DataFrame'
polars.eager.series.Series.var(self,ddof:int=1)->Optional[float]
polars.eager.series.Series.view(self,ignore_nulls:bool=False)->np.ndarray
polars.eager.series.Series.zip_with(self,mask:'Series',other:'Series')->'Series'
polars.eager.series.SeriesIter(self,length:int,s:Series)
polars.eager.series.SeriesIter.__init__(self,length:int,s:Series)
polars.eager.series.SeriesIter.__iter__(self)->'SeriesIter'
polars.eager.series.SeriesIter.__next__(self)->Any
polars.eager.series.StringNameSpace(self,series:'Series')
polars.eager.series.StringNameSpace.__init__(self,series:'Series')
polars.eager.series.StringNameSpace.contains(self,pattern:str)->Series
polars.eager.series.StringNameSpace.extract(self,pattern:str,group_index:int=1)->Series
polars.eager.series.StringNameSpace.json_path_match(self,json_path:str)->Series
polars.eager.series.StringNameSpace.lengths(self)->Series
polars.eager.series.StringNameSpace.lstrip(self)->Series
polars.eager.series.StringNameSpace.replace(self,pattern:str,value:str)->Series
polars.eager.series.StringNameSpace.replace_all(self,pattern:str,value:str)->Series
polars.eager.series.StringNameSpace.rstrip(self)->Series
polars.eager.series.StringNameSpace.slice(self,start:int,length:Optional[int]=None)->Series
polars.eager.series.StringNameSpace.strptime(self,datatype:DataType,fmt:Optional[str]=None)->Series
polars.eager.series.StringNameSpace.to_lowercase(self)->Series
polars.eager.series.StringNameSpace.to_uppercase(self)->Series
polars.eager.series._maybe_cast(el:'Type[DataType]',dtype:Type)->'Type[DataType]'
polars.eager.series._to_python_datetime(value:Union[int,float],dtype:Type[DataType])->Union[date, datetime]
polars.eager.series.get_ffi_func(name:str,dtype:Type['DataType'],obj:Optional['Series']=None,default:Optional[Callable[[Any],Any]]=None)->Callable[..., Any]
polars.eager.series.match_dtype(value:Any,dtype:'Type[DataType]')->Any
polars.eager.series.out_to_dtype(out:Any)->Union[Type[DataType], Type[np.ndarray]]
polars.eager.series.wrap_s(s:'PySeries')->'Series'
polars.get_ffi_func(name:str,dtype:Type['DataType'],obj:Optional['Series']=None,default:Optional[Callable[[Any],Any]]=None)->Callable[..., Any]
polars.match_dtype(value:Any,dtype:'Type[DataType]')->Any
polars.out_to_dtype(out:Any)->Union[Type[DataType], Type[np.ndarray]]
polars.wrap_s(s:'PySeries')->'Series'


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/eager/frame.py----------------------------------------
A:polars.eager.frame.other->_prepare_other_arg(other)
A:polars.eager.frame.self._df->polars.polars.PyDataFrame.read_json(file)
A:polars.eager.frame.df->DataFrame.__new__(DataFrame).agg_list()
A:polars.eager.frame.pydf->sequence_to_pydf(data, columns=columns, orient=orient)
A:polars.eager.frame.self->DataFrame.__new__(DataFrame)
A:polars.eager.frame.file->str(file)
A:polars.eager.frame.processed_null_values->_process_null_values(null_values)
A:polars.eager.frame.record_batches->DataFrame.__new__(DataFrame)._df.to_arrow()
A:polars.eager.frame.buffer->BytesIO()
A:polars.eager.frame.tbl->pyarrow.table(data)
A:polars.eager.frame.item->polars.Series('', item)
A:polars.eager.frame.start->DataFrame.__new__(DataFrame).find_idx_by_name(col_selection.start)
A:polars.eager.frame.col_selection->slice(start, stop, col_selection.step)
A:polars.eager.frame.series->DataFrame.__new__(DataFrame).select_at_idx(col_selection)
A:polars.eager.frame.slc->slice(item.start, item.stop, step)
A:polars.eager.frame.value->numpy.array(value)
A:polars.eager.frame.s->DataFrame.__new__(DataFrame).agg_list().drop_in_place(name + '_agg_list').apply(func, return_dtype)
A:polars.eager.frame.max_cols->int(os.environ.get('POLARS_FMT_MAX_COLS', default=75))
A:polars.eager.frame.max_rows->int(os.environ.get('POLARS_FMT_MAX_ROWS', default=25))
A:polars.eager.frame.summary->polars.functions.concat([describe_cast(self.mean()), describe_cast(self.std()), describe_cast(self.min()), describe_cast(self.max()), describe_cast(self.median())])
A:polars.eager.frame.bounds->DataFrame.__new__(DataFrame).select([pl.col(by).min().alias('low'), pl.col(by).max().alias('high')])
A:polars.eager.frame.upsampled->polars.date_range(low, high, interval, name=by)
A:polars.eager.frame.columns->columns.get_columns().get_columns()
A:polars.eager.frame.acc->operation(acc, df.select_at_idx(i))
A:polars.eager.frame.groups_df->DataFrame.__new__(DataFrame).groups()
polars.DataFrame(self,data:Optional[Union[Dict[str,Sequence[Any]],Sequence[Any],np.ndarray,'pa.Table','pd.DataFrame','pl.Series']]=None,columns:Optional[Sequence[str]]=None,orient:Optional[str]=None)
polars.DataFrame.__add__(self,other:Any)->'DataFrame'
polars.DataFrame.__copy__(self)->'DataFrame'
polars.DataFrame.__deepcopy__(self,memodict={})->'DataFrame'
polars.DataFrame.__getattr__(self,item:Any)->'PySeries'
polars.DataFrame.__getitem__(self,item:Any)->Any
polars.DataFrame.__getstate__(self)
polars.DataFrame.__iter__(self)->Iterator[Any]
polars.DataFrame.__len__(self)->int
polars.DataFrame.__mul__(self,other:Any)->'DataFrame'
polars.DataFrame.__repr__(self)->str
polars.DataFrame.__setitem__(self,key:Union[str,int,Tuple[Any,Any]],value:Any)->None
polars.DataFrame.__setstate__(self,state)
polars.DataFrame.__str__(self)->str
polars.DataFrame.__sub__(self,other:Any)->'DataFrame'
polars.DataFrame.__truediv__(self,other:Any)->'DataFrame'
polars.DataFrame._from_arrow(cls,data:'pa.Table',columns:Optional[Sequence[str]]=None,rechunk:bool=True)->'DataFrame'
polars.DataFrame._from_dict(cls,data:Dict[str,Sequence[Any]],columns:Optional[Sequence[str]]=None)->'DataFrame'
polars.DataFrame._from_dicts(cls,data:Sequence[Dict[str,Any]])->'DataFrame'
polars.DataFrame._from_pandas(cls,data:'pd.DataFrame',columns:Optional[Sequence[str]]=None,rechunk:bool=True,nan_to_none:bool=True)->'DataFrame'
polars.DataFrame._from_pydf(cls,py_df:'PyDataFrame')->'DataFrame'
polars.DataFrame._from_records(cls,data:Union[np.ndarray,Sequence[Sequence[Any]]],columns:Optional[Sequence[str]]=None,orient:Optional[str]=None)->'DataFrame'
polars.DataFrame._pos_idx(self,idx:int,dim:int)->int
polars.DataFrame._repr_html_(self)->str
polars.DataFrame.apply(self,f:Callable[[Tuple[Any]],Any],return_dtype:Optional[Type[DataType]]=None)->'pl.Series'
polars.DataFrame.clone(self)->'DataFrame'
polars.DataFrame.columns(self)->tp.List[str]
polars.DataFrame.columns(self,columns:Sequence[str])->None
polars.DataFrame.describe(self)->'DataFrame'
polars.DataFrame.downsample(self,by:Union[str,tp.List[str]],rule:str,n:int)->'GroupBy'
polars.DataFrame.drop(self,name:Union[str,tp.List[str]])->'DataFrame'
polars.DataFrame.drop_duplicates(self,maintain_order:bool=True,subset:Optional[Union[str,tp.List[str]]]=None)->'DataFrame'
polars.DataFrame.drop_in_place(self,name:str)->'pl.Series'
polars.DataFrame.drop_nulls(self,subset:Optional[tp.List[str]]=None)->'DataFrame'
polars.DataFrame.dtypes(self)->tp.List[Type[DataType]]
polars.DataFrame.explode(self,columns:Union[str,tp.List[str],'pl.Expr',tp.List['pl.Expr']])->'DataFrame'
polars.DataFrame.fill_nan(self,fill_value:'pl.Expr')->'DataFrame'
polars.DataFrame.fill_null(self,strategy:Union[str,'pl.Expr'])->'DataFrame'
polars.DataFrame.filter(self,predicate:'pl.Expr')->'DataFrame'
polars.DataFrame.find_idx_by_name(self,name:str)->int
polars.DataFrame.fold(self,operation:Callable[['pl.Series','pl.Series'],'pl.Series'])->'pl.Series'
polars.DataFrame.frame_equal(self,other:'DataFrame',null_equal:bool=False)->bool
polars.DataFrame.get_column(self,name:str)->'pl.Series'
polars.DataFrame.get_columns(self)->tp.List['pl.Series']
polars.DataFrame.groupby(self,by:Union[str,tp.List[str]],maintain_order:bool=False)->'GroupBy'
polars.DataFrame.hash_rows(self,k0:int=0,k1:int=1,k2:int=2,k3:int=3)->'pl.Series'
polars.DataFrame.head(self,length:int=5)->'DataFrame'
polars.DataFrame.height(self)->int
polars.DataFrame.hstack(self,columns:Union[tp.List['pl.Series'],'DataFrame'],in_place:bool=False)->Optional['DataFrame']
polars.DataFrame.insert_at_idx(self,index:int,series:'pl.Series')->None
polars.DataFrame.interpolate(self)->'DataFrame'
polars.DataFrame.is_duplicated(self)->'pl.Series'
polars.DataFrame.is_empty(self)->bool
polars.DataFrame.is_unique(self)->'pl.Series'
polars.DataFrame.join(self,df:'DataFrame',left_on:Optional[Union[str,'pl.Expr',tp.List[str],tp.List['pl.Expr']]]=None,right_on:Optional[Union[str,'pl.Expr',tp.List[str],tp.List['pl.Expr']]]=None,on:Optional[Union[str,tp.List[str]]]=None,how:str='inner',suffix:str='_right',asof_by:Optional[Union[str,tp.List[str]]]=None,asof_by_left:Optional[Union[str,tp.List[str]]]=None,asof_by_right:Optional[Union[str,tp.List[str]]]=None)->Union['DataFrame', 'pl.LazyFrame']
polars.DataFrame.lazy(self)->'pl.LazyFrame'
polars.DataFrame.limit(self,length:int=5)->'DataFrame'
polars.DataFrame.max(self,axis:int=0)->Union['DataFrame', 'pl.Series']
polars.DataFrame.mean(self,axis:int=0,null_strategy:str='ignore')->Union['DataFrame', 'pl.Series']
polars.DataFrame.median(self)->'DataFrame'
polars.DataFrame.melt(self,id_vars:Union[tp.List[str],str],value_vars:Union[tp.List[str],str])->'DataFrame'
polars.DataFrame.min(self,axis:int=0)->Union['DataFrame', 'pl.Series']
polars.DataFrame.n_chunks(self)->int
polars.DataFrame.null_count(self)->'DataFrame'
polars.DataFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.DataFrame.quantile(self,quantile:float)->'DataFrame'
polars.DataFrame.read_csv(file:Union[str,BinaryIO,bytes],infer_schema_length:Optional[int]=100,batch_size:int=64,has_headers:bool=True,ignore_errors:bool=False,stop_after_n_rows:Optional[int]=None,skip_rows:int=0,projection:Optional[tp.List[int]]=None,sep:str=',',columns:Optional[tp.List[str]]=None,rechunk:bool=True,encoding:str='utf8',n_threads:Optional[int]=None,dtype:Union[Dict[str,Type[DataType]],tp.List[Type[DataType]],None]=None,low_memory:bool=False,comment_char:Optional[str]=None,quote_char:Optional[str]='"',null_values:Optional[Union[str,tp.List[str],Dict[str,str]]]=None,parse_dates:bool=True)->'DataFrame'
polars.DataFrame.read_ipc(file:Union[str,BinaryIO])->'DataFrame'
polars.DataFrame.read_json(file:Union[str,BytesIO])->'DataFrame'
polars.DataFrame.read_parquet(file:Union[str,BinaryIO],stop_after_n_rows:Optional[int]=None)->'DataFrame'
polars.DataFrame.rechunk(self)->'DataFrame'
polars.DataFrame.rename(self,mapping:Dict[str,str])->'DataFrame'
polars.DataFrame.replace(self,column:str,new_col:'pl.Series')->None
polars.DataFrame.replace_at_idx(self,index:int,series:'pl.Series')->None
polars.DataFrame.row(self,index:int)->Tuple[Any]
polars.DataFrame.rows(self)->tp.List[Tuple[Any]]
polars.DataFrame.sample(self,n:Optional[int]=None,frac:Optional[float]=None,with_replacement:bool=False)->'DataFrame'
polars.DataFrame.select(self,exprs:Union[str,'pl.Expr',Sequence[str],Sequence['pl.Expr']])->'DataFrame'
polars.DataFrame.select_at_idx(self,idx:int)->'pl.Series'
polars.DataFrame.shape(self)->Tuple[int, int]
polars.DataFrame.shift(self,periods:int)->'DataFrame'
polars.DataFrame.shift_and_fill(self,periods:int,fill_value:Union[int,str,float])->'DataFrame'
polars.DataFrame.shrink_to_fit(self,in_place:bool=False)->Optional['DataFrame']
polars.DataFrame.slice(self,offset:int,length:int)->'DataFrame'
polars.DataFrame.sort(self,by:Union[str,'pl.Expr',tp.List['pl.Expr']],reverse:Union[bool,tp.List[bool]]=False,in_place:bool=False)->Optional['DataFrame']
polars.DataFrame.std(self)->'DataFrame'
polars.DataFrame.sum(self,axis:int=0,null_strategy:str='ignore')->Union['DataFrame', 'pl.Series']
polars.DataFrame.tail(self,length:int=5)->'DataFrame'
polars.DataFrame.to_arrow(self)->'pa.Table'
polars.DataFrame.to_csv(self,file:Optional[Union[TextIO,str,Path]]=None,has_headers:bool=True,sep:str=',')->Optional[str]
polars.DataFrame.to_dict(self,as_series:bool=True)->Union[Dict[str, 'pl.Series'], Dict[str, tp.List[Any]]]
polars.DataFrame.to_dicts(self)->tp.List[Dict[str, Any]]
polars.DataFrame.to_dummies(self)->'DataFrame'
polars.DataFrame.to_ipc(self,file:Union[BinaryIO,str,Path])->None
polars.DataFrame.to_json(self,file:Optional[Union[BytesIO,str,Path]]=None,pretty:bool=False,to_string:bool=False)->Optional[str]
polars.DataFrame.to_numpy(self)->np.ndarray
polars.DataFrame.to_pandas(self,*args:Any,date_as_object:bool=False,**kwargs:Any)->'pd.DataFrame'
polars.DataFrame.to_parquet(self,file:Union[str,Path],compression:str='snappy',use_pyarrow:bool=False,**kwargs:Any)->None
polars.DataFrame.transpose(self,include_header:bool=False,header_name:str='column')->'pl.DataFrame'
polars.DataFrame.upsample(self,by:str,interval:timedelta)->'DataFrame'
polars.DataFrame.var(self)->'DataFrame'
polars.DataFrame.vstack(self,df:'DataFrame',in_place:bool=False)->Optional['DataFrame']
polars.DataFrame.width(self)->int
polars.DataFrame.with_column(self,column:Union['pl.Series','pl.Expr'])->'DataFrame'
polars.DataFrame.with_column_renamed(self,existing_name:str,new_name:str)->'DataFrame'
polars.DataFrame.with_columns(self,exprs:Union['pl.Expr',tp.List['pl.Expr']])->'DataFrame'
polars.DataFrame.with_row_count(self,name:str='row_nr')->'DataFrame'
polars.GBSelection(self,df:'PyDataFrame',by:Union[str,tp.List[str]],selection:Optional[tp.List[str]],downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.GBSelection.agg_list(self)->DataFrame
polars.GBSelection.apply(self,func:Callable[[Any],Any],return_dtype:Optional[Type[DataType]]=None)->DataFrame
polars.GBSelection.count(self)->DataFrame
polars.GBSelection.first(self)->DataFrame
polars.GBSelection.last(self)->DataFrame
polars.GBSelection.max(self)->DataFrame
polars.GBSelection.mean(self)->DataFrame
polars.GBSelection.median(self)->DataFrame
polars.GBSelection.min(self)->DataFrame
polars.GBSelection.n_unique(self)->DataFrame
polars.GBSelection.quantile(self,quantile:float)->DataFrame
polars.GBSelection.sum(self)->DataFrame
polars.GroupBy(self,df:'PyDataFrame',by:Union[str,tp.List[str]],maintain_order:bool=False,downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.GroupBy.__getitem__(self,item:Any)->'GBSelection'
polars.GroupBy.__iter__(self)->Iterable[Any]
polars.GroupBy._select(self,columns:Union[str,tp.List[str]])->'GBSelection'
polars.GroupBy._select_all(self)->'GBSelection'
polars.GroupBy.agg(self,column_to_agg:Union[tp.List[Tuple[str,tp.List[str]]],Dict[str,Union[str,tp.List[str]]],tp.List['pl.Expr'],'pl.Expr'])->DataFrame
polars.GroupBy.agg_list(self)->DataFrame
polars.GroupBy.apply(self,f:Callable[[DataFrame],DataFrame])->DataFrame
polars.GroupBy.count(self)->DataFrame
polars.GroupBy.first(self)->DataFrame
polars.GroupBy.get_group(self,group_value:Union[Any,Tuple[Any]])->DataFrame
polars.GroupBy.groups(self)->DataFrame
polars.GroupBy.head(self,n:int=5)->DataFrame
polars.GroupBy.last(self)->DataFrame
polars.GroupBy.max(self)->DataFrame
polars.GroupBy.mean(self)->DataFrame
polars.GroupBy.median(self)->DataFrame
polars.GroupBy.min(self)->DataFrame
polars.GroupBy.n_unique(self)->DataFrame
polars.GroupBy.pivot(self,pivot_column:str,values_column:str)->'PivotOps'
polars.GroupBy.quantile(self,quantile:float)->DataFrame
polars.GroupBy.sum(self)->DataFrame
polars.GroupBy.tail(self,n:int=5)->DataFrame
polars.PivotOps(self,df:DataFrame,by:Union[str,tp.List[str]],pivot_column:str,values_column:str)
polars.PivotOps.count(self)->DataFrame
polars.PivotOps.first(self)->DataFrame
polars.PivotOps.max(self)->DataFrame
polars.PivotOps.mean(self)->DataFrame
polars.PivotOps.median(self)->DataFrame
polars.PivotOps.min(self)->DataFrame
polars.PivotOps.sum(self)->DataFrame
polars._prepare_other_arg(other:Any)->'pl.Series'
polars.eager.frame.DataFrame(self,data:Optional[Union[Dict[str,Sequence[Any]],Sequence[Any],np.ndarray,'pa.Table','pd.DataFrame','pl.Series']]=None,columns:Optional[Sequence[str]]=None,orient:Optional[str]=None)
polars.eager.frame.DataFrame.__add__(self,other:Any)->'DataFrame'
polars.eager.frame.DataFrame.__copy__(self)->'DataFrame'
polars.eager.frame.DataFrame.__deepcopy__(self,memodict={})->'DataFrame'
polars.eager.frame.DataFrame.__getattr__(self,item:Any)->'PySeries'
polars.eager.frame.DataFrame.__getitem__(self,item:Any)->Any
polars.eager.frame.DataFrame.__getstate__(self)
polars.eager.frame.DataFrame.__init__(self,data:Optional[Union[Dict[str,Sequence[Any]],Sequence[Any],np.ndarray,'pa.Table','pd.DataFrame','pl.Series']]=None,columns:Optional[Sequence[str]]=None,orient:Optional[str]=None)
polars.eager.frame.DataFrame.__iter__(self)->Iterator[Any]
polars.eager.frame.DataFrame.__len__(self)->int
polars.eager.frame.DataFrame.__mul__(self,other:Any)->'DataFrame'
polars.eager.frame.DataFrame.__repr__(self)->str
polars.eager.frame.DataFrame.__setitem__(self,key:Union[str,int,Tuple[Any,Any]],value:Any)->None
polars.eager.frame.DataFrame.__setstate__(self,state)
polars.eager.frame.DataFrame.__str__(self)->str
polars.eager.frame.DataFrame.__sub__(self,other:Any)->'DataFrame'
polars.eager.frame.DataFrame.__truediv__(self,other:Any)->'DataFrame'
polars.eager.frame.DataFrame._from_arrow(cls,data:'pa.Table',columns:Optional[Sequence[str]]=None,rechunk:bool=True)->'DataFrame'
polars.eager.frame.DataFrame._from_dict(cls,data:Dict[str,Sequence[Any]],columns:Optional[Sequence[str]]=None)->'DataFrame'
polars.eager.frame.DataFrame._from_dicts(cls,data:Sequence[Dict[str,Any]])->'DataFrame'
polars.eager.frame.DataFrame._from_pandas(cls,data:'pd.DataFrame',columns:Optional[Sequence[str]]=None,rechunk:bool=True,nan_to_none:bool=True)->'DataFrame'
polars.eager.frame.DataFrame._from_pydf(cls,py_df:'PyDataFrame')->'DataFrame'
polars.eager.frame.DataFrame._from_records(cls,data:Union[np.ndarray,Sequence[Sequence[Any]]],columns:Optional[Sequence[str]]=None,orient:Optional[str]=None)->'DataFrame'
polars.eager.frame.DataFrame._pos_idx(self,idx:int,dim:int)->int
polars.eager.frame.DataFrame._repr_html_(self)->str
polars.eager.frame.DataFrame.apply(self,f:Callable[[Tuple[Any]],Any],return_dtype:Optional[Type[DataType]]=None)->'pl.Series'
polars.eager.frame.DataFrame.clone(self)->'DataFrame'
polars.eager.frame.DataFrame.columns(self)->tp.List[str]
polars.eager.frame.DataFrame.columns(self,columns:Sequence[str])->None
polars.eager.frame.DataFrame.describe(self)->'DataFrame'
polars.eager.frame.DataFrame.downsample(self,by:Union[str,tp.List[str]],rule:str,n:int)->'GroupBy'
polars.eager.frame.DataFrame.drop(self,name:Union[str,tp.List[str]])->'DataFrame'
polars.eager.frame.DataFrame.drop_duplicates(self,maintain_order:bool=True,subset:Optional[Union[str,tp.List[str]]]=None)->'DataFrame'
polars.eager.frame.DataFrame.drop_in_place(self,name:str)->'pl.Series'
polars.eager.frame.DataFrame.drop_nulls(self,subset:Optional[tp.List[str]]=None)->'DataFrame'
polars.eager.frame.DataFrame.dtypes(self)->tp.List[Type[DataType]]
polars.eager.frame.DataFrame.explode(self,columns:Union[str,tp.List[str],'pl.Expr',tp.List['pl.Expr']])->'DataFrame'
polars.eager.frame.DataFrame.fill_nan(self,fill_value:'pl.Expr')->'DataFrame'
polars.eager.frame.DataFrame.fill_null(self,strategy:Union[str,'pl.Expr'])->'DataFrame'
polars.eager.frame.DataFrame.filter(self,predicate:'pl.Expr')->'DataFrame'
polars.eager.frame.DataFrame.find_idx_by_name(self,name:str)->int
polars.eager.frame.DataFrame.fold(self,operation:Callable[['pl.Series','pl.Series'],'pl.Series'])->'pl.Series'
polars.eager.frame.DataFrame.frame_equal(self,other:'DataFrame',null_equal:bool=False)->bool
polars.eager.frame.DataFrame.get_column(self,name:str)->'pl.Series'
polars.eager.frame.DataFrame.get_columns(self)->tp.List['pl.Series']
polars.eager.frame.DataFrame.groupby(self,by:Union[str,tp.List[str]],maintain_order:bool=False)->'GroupBy'
polars.eager.frame.DataFrame.hash_rows(self,k0:int=0,k1:int=1,k2:int=2,k3:int=3)->'pl.Series'
polars.eager.frame.DataFrame.head(self,length:int=5)->'DataFrame'
polars.eager.frame.DataFrame.height(self)->int
polars.eager.frame.DataFrame.hstack(self,columns:Union[tp.List['pl.Series'],'DataFrame'],in_place:bool=False)->Optional['DataFrame']
polars.eager.frame.DataFrame.insert_at_idx(self,index:int,series:'pl.Series')->None
polars.eager.frame.DataFrame.interpolate(self)->'DataFrame'
polars.eager.frame.DataFrame.is_duplicated(self)->'pl.Series'
polars.eager.frame.DataFrame.is_empty(self)->bool
polars.eager.frame.DataFrame.is_unique(self)->'pl.Series'
polars.eager.frame.DataFrame.join(self,df:'DataFrame',left_on:Optional[Union[str,'pl.Expr',tp.List[str],tp.List['pl.Expr']]]=None,right_on:Optional[Union[str,'pl.Expr',tp.List[str],tp.List['pl.Expr']]]=None,on:Optional[Union[str,tp.List[str]]]=None,how:str='inner',suffix:str='_right',asof_by:Optional[Union[str,tp.List[str]]]=None,asof_by_left:Optional[Union[str,tp.List[str]]]=None,asof_by_right:Optional[Union[str,tp.List[str]]]=None)->Union['DataFrame', 'pl.LazyFrame']
polars.eager.frame.DataFrame.lazy(self)->'pl.LazyFrame'
polars.eager.frame.DataFrame.limit(self,length:int=5)->'DataFrame'
polars.eager.frame.DataFrame.max(self,axis:int=0)->Union['DataFrame', 'pl.Series']
polars.eager.frame.DataFrame.mean(self,axis:int=0,null_strategy:str='ignore')->Union['DataFrame', 'pl.Series']
polars.eager.frame.DataFrame.median(self)->'DataFrame'
polars.eager.frame.DataFrame.melt(self,id_vars:Union[tp.List[str],str],value_vars:Union[tp.List[str],str])->'DataFrame'
polars.eager.frame.DataFrame.min(self,axis:int=0)->Union['DataFrame', 'pl.Series']
polars.eager.frame.DataFrame.n_chunks(self)->int
polars.eager.frame.DataFrame.null_count(self)->'DataFrame'
polars.eager.frame.DataFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.eager.frame.DataFrame.quantile(self,quantile:float)->'DataFrame'
polars.eager.frame.DataFrame.read_csv(file:Union[str,BinaryIO,bytes],infer_schema_length:Optional[int]=100,batch_size:int=64,has_headers:bool=True,ignore_errors:bool=False,stop_after_n_rows:Optional[int]=None,skip_rows:int=0,projection:Optional[tp.List[int]]=None,sep:str=',',columns:Optional[tp.List[str]]=None,rechunk:bool=True,encoding:str='utf8',n_threads:Optional[int]=None,dtype:Union[Dict[str,Type[DataType]],tp.List[Type[DataType]],None]=None,low_memory:bool=False,comment_char:Optional[str]=None,quote_char:Optional[str]='"',null_values:Optional[Union[str,tp.List[str],Dict[str,str]]]=None,parse_dates:bool=True)->'DataFrame'
polars.eager.frame.DataFrame.read_ipc(file:Union[str,BinaryIO])->'DataFrame'
polars.eager.frame.DataFrame.read_json(file:Union[str,BytesIO])->'DataFrame'
polars.eager.frame.DataFrame.read_parquet(file:Union[str,BinaryIO],stop_after_n_rows:Optional[int]=None)->'DataFrame'
polars.eager.frame.DataFrame.rechunk(self)->'DataFrame'
polars.eager.frame.DataFrame.rename(self,mapping:Dict[str,str])->'DataFrame'
polars.eager.frame.DataFrame.replace(self,column:str,new_col:'pl.Series')->None
polars.eager.frame.DataFrame.replace_at_idx(self,index:int,series:'pl.Series')->None
polars.eager.frame.DataFrame.row(self,index:int)->Tuple[Any]
polars.eager.frame.DataFrame.rows(self)->tp.List[Tuple[Any]]
polars.eager.frame.DataFrame.sample(self,n:Optional[int]=None,frac:Optional[float]=None,with_replacement:bool=False)->'DataFrame'
polars.eager.frame.DataFrame.select(self,exprs:Union[str,'pl.Expr',Sequence[str],Sequence['pl.Expr']])->'DataFrame'
polars.eager.frame.DataFrame.select_at_idx(self,idx:int)->'pl.Series'
polars.eager.frame.DataFrame.shape(self)->Tuple[int, int]
polars.eager.frame.DataFrame.shift(self,periods:int)->'DataFrame'
polars.eager.frame.DataFrame.shift_and_fill(self,periods:int,fill_value:Union[int,str,float])->'DataFrame'
polars.eager.frame.DataFrame.shrink_to_fit(self,in_place:bool=False)->Optional['DataFrame']
polars.eager.frame.DataFrame.slice(self,offset:int,length:int)->'DataFrame'
polars.eager.frame.DataFrame.sort(self,by:Union[str,'pl.Expr',tp.List['pl.Expr']],reverse:Union[bool,tp.List[bool]]=False,in_place:bool=False)->Optional['DataFrame']
polars.eager.frame.DataFrame.std(self)->'DataFrame'
polars.eager.frame.DataFrame.sum(self,axis:int=0,null_strategy:str='ignore')->Union['DataFrame', 'pl.Series']
polars.eager.frame.DataFrame.tail(self,length:int=5)->'DataFrame'
polars.eager.frame.DataFrame.to_arrow(self)->'pa.Table'
polars.eager.frame.DataFrame.to_csv(self,file:Optional[Union[TextIO,str,Path]]=None,has_headers:bool=True,sep:str=',')->Optional[str]
polars.eager.frame.DataFrame.to_dict(self,as_series:bool=True)->Union[Dict[str, 'pl.Series'], Dict[str, tp.List[Any]]]
polars.eager.frame.DataFrame.to_dicts(self)->tp.List[Dict[str, Any]]
polars.eager.frame.DataFrame.to_dummies(self)->'DataFrame'
polars.eager.frame.DataFrame.to_ipc(self,file:Union[BinaryIO,str,Path])->None
polars.eager.frame.DataFrame.to_json(self,file:Optional[Union[BytesIO,str,Path]]=None,pretty:bool=False,to_string:bool=False)->Optional[str]
polars.eager.frame.DataFrame.to_numpy(self)->np.ndarray
polars.eager.frame.DataFrame.to_pandas(self,*args:Any,date_as_object:bool=False,**kwargs:Any)->'pd.DataFrame'
polars.eager.frame.DataFrame.to_parquet(self,file:Union[str,Path],compression:str='snappy',use_pyarrow:bool=False,**kwargs:Any)->None
polars.eager.frame.DataFrame.transpose(self,include_header:bool=False,header_name:str='column')->'pl.DataFrame'
polars.eager.frame.DataFrame.upsample(self,by:str,interval:timedelta)->'DataFrame'
polars.eager.frame.DataFrame.var(self)->'DataFrame'
polars.eager.frame.DataFrame.vstack(self,df:'DataFrame',in_place:bool=False)->Optional['DataFrame']
polars.eager.frame.DataFrame.width(self)->int
polars.eager.frame.DataFrame.with_column(self,column:Union['pl.Series','pl.Expr'])->'DataFrame'
polars.eager.frame.DataFrame.with_column_renamed(self,existing_name:str,new_name:str)->'DataFrame'
polars.eager.frame.DataFrame.with_columns(self,exprs:Union['pl.Expr',tp.List['pl.Expr']])->'DataFrame'
polars.eager.frame.DataFrame.with_row_count(self,name:str='row_nr')->'DataFrame'
polars.eager.frame.GBSelection(self,df:'PyDataFrame',by:Union[str,tp.List[str]],selection:Optional[tp.List[str]],downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.eager.frame.GBSelection.__init__(self,df:'PyDataFrame',by:Union[str,tp.List[str]],selection:Optional[tp.List[str]],downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.eager.frame.GBSelection.agg_list(self)->DataFrame
polars.eager.frame.GBSelection.apply(self,func:Callable[[Any],Any],return_dtype:Optional[Type[DataType]]=None)->DataFrame
polars.eager.frame.GBSelection.count(self)->DataFrame
polars.eager.frame.GBSelection.first(self)->DataFrame
polars.eager.frame.GBSelection.last(self)->DataFrame
polars.eager.frame.GBSelection.max(self)->DataFrame
polars.eager.frame.GBSelection.mean(self)->DataFrame
polars.eager.frame.GBSelection.median(self)->DataFrame
polars.eager.frame.GBSelection.min(self)->DataFrame
polars.eager.frame.GBSelection.n_unique(self)->DataFrame
polars.eager.frame.GBSelection.quantile(self,quantile:float)->DataFrame
polars.eager.frame.GBSelection.sum(self)->DataFrame
polars.eager.frame.GroupBy(self,df:'PyDataFrame',by:Union[str,tp.List[str]],maintain_order:bool=False,downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.eager.frame.GroupBy.__getitem__(self,item:Any)->'GBSelection'
polars.eager.frame.GroupBy.__init__(self,df:'PyDataFrame',by:Union[str,tp.List[str]],maintain_order:bool=False,downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.eager.frame.GroupBy.__iter__(self)->Iterable[Any]
polars.eager.frame.GroupBy._select(self,columns:Union[str,tp.List[str]])->'GBSelection'
polars.eager.frame.GroupBy._select_all(self)->'GBSelection'
polars.eager.frame.GroupBy.agg(self,column_to_agg:Union[tp.List[Tuple[str,tp.List[str]]],Dict[str,Union[str,tp.List[str]]],tp.List['pl.Expr'],'pl.Expr'])->DataFrame
polars.eager.frame.GroupBy.agg_list(self)->DataFrame
polars.eager.frame.GroupBy.apply(self,f:Callable[[DataFrame],DataFrame])->DataFrame
polars.eager.frame.GroupBy.count(self)->DataFrame
polars.eager.frame.GroupBy.first(self)->DataFrame
polars.eager.frame.GroupBy.get_group(self,group_value:Union[Any,Tuple[Any]])->DataFrame
polars.eager.frame.GroupBy.groups(self)->DataFrame
polars.eager.frame.GroupBy.head(self,n:int=5)->DataFrame
polars.eager.frame.GroupBy.last(self)->DataFrame
polars.eager.frame.GroupBy.max(self)->DataFrame
polars.eager.frame.GroupBy.mean(self)->DataFrame
polars.eager.frame.GroupBy.median(self)->DataFrame
polars.eager.frame.GroupBy.min(self)->DataFrame
polars.eager.frame.GroupBy.n_unique(self)->DataFrame
polars.eager.frame.GroupBy.pivot(self,pivot_column:str,values_column:str)->'PivotOps'
polars.eager.frame.GroupBy.quantile(self,quantile:float)->DataFrame
polars.eager.frame.GroupBy.sum(self)->DataFrame
polars.eager.frame.GroupBy.tail(self,n:int=5)->DataFrame
polars.eager.frame.PivotOps(self,df:DataFrame,by:Union[str,tp.List[str]],pivot_column:str,values_column:str)
polars.eager.frame.PivotOps.__init__(self,df:DataFrame,by:Union[str,tp.List[str]],pivot_column:str,values_column:str)
polars.eager.frame.PivotOps.count(self)->DataFrame
polars.eager.frame.PivotOps.first(self)->DataFrame
polars.eager.frame.PivotOps.max(self)->DataFrame
polars.eager.frame.PivotOps.mean(self)->DataFrame
polars.eager.frame.PivotOps.median(self)->DataFrame
polars.eager.frame.PivotOps.min(self)->DataFrame
polars.eager.frame.PivotOps.sum(self)->DataFrame
polars.eager.frame._prepare_other_arg(other:Any)->'pl.Series'
polars.eager.frame.wrap_df(df:'PyDataFrame')->'DataFrame'
polars.wrap_df(df:'PyDataFrame')->'DataFrame'


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/eager/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/lazy/whenthen.py----------------------------------------
A:polars.lazy.whenthen.expr_->expr_to_lit_or_expr(expr)
A:polars.lazy.whenthen.expr->expr_to_lit_or_expr(expr)
A:polars.lazy.whenthen.pywhenthen->self._pywhen.then(expr._pyexpr)
A:polars.lazy.whenthen.pw->pywhen(expr._pyexpr)
polars.When(self,pywhen:'pywhen')
polars.When.then(self,expr:Union['pl.Expr',int,float,str])->WhenThen
polars.WhenThen(self,pywhenthen:Any)
polars.WhenThen.otherwise(self,expr:Union['pl.Expr',int,float,str])->'pl.Expr'
polars.WhenThen.when(self,predicate:'pl.Expr')->WhenThenThen
polars.WhenThenThen(self,pywhenthenthen:Any)
polars.WhenThenThen.otherwise(self,expr:Union['pl.Expr',int,float,str])->'pl.Expr'
polars.WhenThenThen.then(self,expr:Union['pl.Expr',int,float,str])->'WhenThenThen'
polars.WhenThenThen.when(self,predicate:'pl.Expr')->'WhenThenThen'
polars.lazy.whenthen.When(self,pywhen:'pywhen')
polars.lazy.whenthen.When.__init__(self,pywhen:'pywhen')
polars.lazy.whenthen.When.then(self,expr:Union['pl.Expr',int,float,str])->WhenThen
polars.lazy.whenthen.WhenThen(self,pywhenthen:Any)
polars.lazy.whenthen.WhenThen.__init__(self,pywhenthen:Any)
polars.lazy.whenthen.WhenThen.otherwise(self,expr:Union['pl.Expr',int,float,str])->'pl.Expr'
polars.lazy.whenthen.WhenThen.when(self,predicate:'pl.Expr')->WhenThenThen
polars.lazy.whenthen.WhenThenThen(self,pywhenthenthen:Any)
polars.lazy.whenthen.WhenThenThen.__init__(self,pywhenthenthen:Any)
polars.lazy.whenthen.WhenThenThen.otherwise(self,expr:Union['pl.Expr',int,float,str])->'pl.Expr'
polars.lazy.whenthen.WhenThenThen.then(self,expr:Union['pl.Expr',int,float,str])->'WhenThenThen'
polars.lazy.whenthen.WhenThenThen.when(self,predicate:'pl.Expr')->'WhenThenThen'
polars.lazy.whenthen.when(expr:'pl.Expr')->When
polars.when(expr:'pl.Expr')->When


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/lazy/functions.py----------------------------------------
A:polars.lazy.functions.name->name.to_list().to_list()
A:polars.lazy.functions.a->col(a)
A:polars.lazy.functions.b->col(b)
A:polars.lazy.functions.exprs->polars.lazy.expr._selection_to_pyexpr_list(exprs)
A:polars.lazy.functions.acc->polars.lazy.expr.expr_to_lit_or_expr(acc, str_to_lit=True)
A:polars.lazy.functions.low->polars.lazy.expr_to_lit_or_expr(low, str_to_lit=False)
A:polars.lazy.functions.high->polars.lazy.expr_to_lit_or_expr(high, str_to_lit=False)
A:polars.lazy.functions.df->polars.DataFrame({'a': [1]})
A:polars.lazy.functions.year->polars.expr_to_lit_or_expr(year, str_to_lit=False)
A:polars.lazy.functions.month->polars.expr_to_lit_or_expr(month, str_to_lit=False)
A:polars.lazy.functions.day->polars.expr_to_lit_or_expr(day, str_to_lit=False)
A:polars.lazy.functions.arguments->iter(args)
A:polars.lazy.functions.e->polars.lazy.expr_to_lit_or_expr(next(arguments), str_to_lit=False)
A:polars.lazy.functions.ldf->lf._ldf.optimization_toggle(type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, string_cache)
A:polars.lazy.functions.out->_collect_all(prepared)
polars.all(name:Optional[Union[str,tp.List['pl.Expr']]]=None)->'pl.Expr'
polars.any(name:Union[str,tp.List['pl.Expr']])->'pl.Expr'
polars.apply(exprs:Union[tp.List[str],tp.List['pl.Expr']],f:Callable[[tp.List['pl.Series']],'pl.Series'],return_dtype:Optional[Type[DataType]]=None)->'pl.Expr'
polars.arange(low:Union[int,'pl.Expr','pl.Series'],high:Union[int,'pl.Expr','pl.Series'],step:int=1,eager:bool=False)->Union['pl.Expr', 'pl.Series']
polars.argsort_by(exprs:tp.List['pl.Expr'],reverse:Union[tp.List[bool],bool]=False)->'pl.Expr'
polars.avg(column:Union[str,'pl.Series'])->Union['pl.Expr', float]
polars.col(name:Union[str,tp.List[str],tp.List[Type[DataType]],Type[DataType]])->'pl.Expr'
polars.collect_all(lazy_frames:'tp.List[pl.LazyFrame]',type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=False,no_optimization:bool=False)->'tp.List[pl.DataFrame]'
polars.concat_list(exprs:tp.List['pl.Expr'])->'pl.Expr'
polars.concat_str(exprs:tp.List['pl.Expr'],sep:str='')->'pl.Expr'
polars.count(column:Union[str,'pl.Series']='')->Union['pl.Expr', int]
polars.cov(a:Union[str,'pl.Expr'],b:Union[str,'pl.Expr'])->'pl.Expr'
polars.date(year:'pl.Expr',month:'pl.Expr',day:'pl.Expr')->'pl.Expr'
polars.datetime(year:'pl.Expr',month:'pl.Expr',day:'pl.Expr',hour:Optional['pl.Expr']=None,minute:Optional['pl.Expr']=None,second:Optional['pl.Expr']=None,millisecond:Optional['pl.Expr']=None)->'pl.Expr'
polars.exclude(columns:Union[str,tp.List[str]])->'pl.Expr'
polars.first(column:Union[str,'pl.Series'])->Union['pl.Expr', Any]
polars.fold(acc:'pl.Expr',f:Callable[['pl.Series','pl.Series'],'pl.Series'],exprs:Union[tp.List['pl.Expr'],'pl.Expr'])->'pl.Expr'
polars.format(fstring:str,*args:Union['pl.Expr',str])->'pl.Expr'
polars.groups(column:str)->'pl.Expr'
polars.head(column:Union[str,'pl.Series'],n:Optional[int]=None)->Union['pl.Expr', 'pl.Series']
polars.last(column:Union[str,'pl.Series'])->'pl.Expr'
polars.lazy.functions._date(year:'pl.Expr',month:'pl.Expr',day:'pl.Expr')->'pl.Expr'
polars.lazy.functions._datetime(year:'pl.Expr',month:'pl.Expr',day:'pl.Expr',hour:Optional['pl.Expr']=None,minute:Optional['pl.Expr']=None,second:Optional['pl.Expr']=None,millisecond:Optional['pl.Expr']=None)->'pl.Expr'
polars.lazy.functions.all(name:Optional[Union[str,tp.List['pl.Expr']]]=None)->'pl.Expr'
polars.lazy.functions.any(name:Union[str,tp.List['pl.Expr']])->'pl.Expr'
polars.lazy.functions.apply(exprs:Union[tp.List[str],tp.List['pl.Expr']],f:Callable[[tp.List['pl.Series']],'pl.Series'],return_dtype:Optional[Type[DataType]]=None)->'pl.Expr'
polars.lazy.functions.arange(low:Union[int,'pl.Expr','pl.Series'],high:Union[int,'pl.Expr','pl.Series'],step:int=1,eager:bool=False)->Union['pl.Expr', 'pl.Series']
polars.lazy.functions.argsort_by(exprs:tp.List['pl.Expr'],reverse:Union[tp.List[bool],bool]=False)->'pl.Expr'
polars.lazy.functions.avg(column:Union[str,'pl.Series'])->Union['pl.Expr', float]
polars.lazy.functions.col(name:Union[str,tp.List[str],tp.List[Type[DataType]],Type[DataType]])->'pl.Expr'
polars.lazy.functions.collect_all(lazy_frames:'tp.List[pl.LazyFrame]',type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=False,no_optimization:bool=False)->'tp.List[pl.DataFrame]'
polars.lazy.functions.concat_list(exprs:tp.List['pl.Expr'])->'pl.Expr'
polars.lazy.functions.concat_str(exprs:tp.List['pl.Expr'],sep:str='')->'pl.Expr'
polars.lazy.functions.count(column:Union[str,'pl.Series']='')->Union['pl.Expr', int]
polars.lazy.functions.cov(a:Union[str,'pl.Expr'],b:Union[str,'pl.Expr'])->'pl.Expr'
polars.lazy.functions.exclude(columns:Union[str,tp.List[str]])->'pl.Expr'
polars.lazy.functions.first(column:Union[str,'pl.Series'])->Union['pl.Expr', Any]
polars.lazy.functions.fold(acc:'pl.Expr',f:Callable[['pl.Series','pl.Series'],'pl.Series'],exprs:Union[tp.List['pl.Expr'],'pl.Expr'])->'pl.Expr'
polars.lazy.functions.format(fstring:str,*args:Union['pl.Expr',str])->'pl.Expr'
polars.lazy.functions.groups(column:str)->'pl.Expr'
polars.lazy.functions.head(column:Union[str,'pl.Series'],n:Optional[int]=None)->Union['pl.Expr', 'pl.Series']
polars.lazy.functions.last(column:Union[str,'pl.Series'])->'pl.Expr'
polars.lazy.functions.lit(value:Optional[Union[float,int,str,datetime,'pl.Series']],dtype:Optional[Type[DataType]]=None)->'pl.Expr'
polars.lazy.functions.map(exprs:Union[tp.List[str],tp.List['pl.Expr']],f:Callable[[tp.List['pl.Series']],'pl.Series'],return_dtype:Optional[Type[DataType]]=None)->'pl.Expr'
polars.lazy.functions.map_binary(a:Union[str,'pl.Expr'],b:Union[str,'pl.Expr'],f:Callable[['pl.Series','pl.Series'],'pl.Series'],return_dtype:Optional[Type[DataType]]=None)->'pl.Expr'
polars.lazy.functions.max(column:Union[str,tp.List['pl.Expr'],'pl.Series'])->Union['pl.Expr', Any]
polars.lazy.functions.mean(column:Union[str,'pl.Series'])->Union['pl.Expr', float]
polars.lazy.functions.median(column:Union[str,'pl.Series'])->Union['pl.Expr', float, int]
polars.lazy.functions.min(column:Union[str,tp.List['pl.Expr'],'pl.Series'])->Union['pl.Expr', Any]
polars.lazy.functions.n_unique(column:Union[str,'pl.Series'])->Union['pl.Expr', int]
polars.lazy.functions.pearson_corr(a:Union[str,'pl.Expr'],b:Union[str,'pl.Expr'])->'pl.Expr'
polars.lazy.functions.quantile(column:str,quantile:float)->'pl.Expr'
polars.lazy.functions.spearman_rank_corr(a:Union[str,'pl.Expr'],b:Union[str,'pl.Expr'])->'pl.Expr'
polars.lazy.functions.std(column:Union[str,'pl.Series'])->Union['pl.Expr', Optional[float]]
polars.lazy.functions.sum(column:Union[str,tp.List['pl.Expr'],'pl.Series'])->Union['pl.Expr', Any]
polars.lazy.functions.tail(column:Union[str,'pl.Series'],n:Optional[int]=None)->Union['pl.Expr', 'pl.Series']
polars.lazy.functions.to_list(name:str)->'pl.Expr'
polars.lazy.functions.var(column:Union[str,'pl.Series'])->Union['pl.Expr', Optional[float]]
polars.list(name:str)->'pl.Expr'
polars.lit(value:Optional[Union[float,int,str,datetime,'pl.Series']],dtype:Optional[Type[DataType]]=None)->'pl.Expr'
polars.map(exprs:Union[tp.List[str],tp.List['pl.Expr']],f:Callable[[tp.List['pl.Series']],'pl.Series'],return_dtype:Optional[Type[DataType]]=None)->'pl.Expr'
polars.map_binary(a:Union[str,'pl.Expr'],b:Union[str,'pl.Expr'],f:Callable[['pl.Series','pl.Series'],'pl.Series'],return_dtype:Optional[Type[DataType]]=None)->'pl.Expr'
polars.max(column:Union[str,tp.List['pl.Expr'],'pl.Series'])->Union['pl.Expr', Any]
polars.mean(column:Union[str,'pl.Series'])->Union['pl.Expr', float]
polars.median(column:Union[str,'pl.Series'])->Union['pl.Expr', float, int]
polars.min(column:Union[str,tp.List['pl.Expr'],'pl.Series'])->Union['pl.Expr', Any]
polars.n_unique(column:Union[str,'pl.Series'])->Union['pl.Expr', int]
polars.pearson_corr(a:Union[str,'pl.Expr'],b:Union[str,'pl.Expr'])->'pl.Expr'
polars.quantile(column:str,quantile:float)->'pl.Expr'
polars.spearman_rank_corr(a:Union[str,'pl.Expr'],b:Union[str,'pl.Expr'])->'pl.Expr'
polars.std(column:Union[str,'pl.Series'])->Union['pl.Expr', Optional[float]]
polars.sum(column:Union[str,tp.List['pl.Expr'],'pl.Series'])->Union['pl.Expr', Any]
polars.tail(column:Union[str,'pl.Series'],n:Optional[int]=None)->Union['pl.Expr', 'pl.Series']
polars.var(column:Union[str,'pl.Series'])->Union['pl.Expr', Optional[float]]


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/lazy/expr.py----------------------------------------
A:polars.lazy.expr.expr->Expr.__new__(Expr).cast(Datetime)
A:polars.lazy.expr.self->Expr.__new__(Expr)
A:polars.lazy.expr.other->copy.copy(other)
A:polars.lazy.expr.by->expr_to_lit_or_expr(by, False)
A:polars.lazy.expr.index->expr_to_lit_or_expr(index, str_to_lit=False)
A:polars.lazy.expr.fill_value->expr_to_lit_or_expr(fill_value, str_to_lit=True)
A:polars.lazy.expr.pyexprs->_selection_to_pyexpr_list(expr)
A:polars.lazy.expr.start->lit(start)
A:polars.lazy.expr.end->lit(end)
A:polars.lazy.expr.min_val->polars.lit(min_val)
A:polars.lazy.expr.max_val->polars.lit(max_val)
polars.Expr(self)
polars.Expr.__add__(self,other:Any)->'Expr'
polars.Expr.__and__(self,other:'Expr')->'Expr'
polars.Expr.__array_ufunc__(self,ufunc:Callable[...,Any],method:str,*inputs:Any,**kwargs:Any)->'Expr'
polars.Expr.__bool__(self)->'Expr'
polars.Expr.__eq__(self,other:Any)->'Expr'
polars.Expr.__floordiv__(self,other:Any)->'Expr'
polars.Expr.__ge__(self,other:Any)->'Expr'
polars.Expr.__gt__(self,other:Any)->'Expr'
polars.Expr.__invert__(self)->'Expr'
polars.Expr.__le__(self,other:Any)->'Expr'
polars.Expr.__lt__(self,other:Any)->'Expr'
polars.Expr.__mod__(self,other:Any)->'Expr'
polars.Expr.__mul__(self,other:Any)->'Expr'
polars.Expr.__ne__(self,other:Any)->'Expr'
polars.Expr.__neg__(self)->'Expr'
polars.Expr.__or__(self,other:'Expr')->'Expr'
polars.Expr.__pow__(self,power:float,modulo:None=None)->'Expr'
polars.Expr.__radd__(self,other:Any)->'Expr'
polars.Expr.__rand__(self,other:Any)->'Expr'
polars.Expr.__rfloordiv__(self,other:Any)->'Expr'
polars.Expr.__rmod__(self,other:Any)->'Expr'
polars.Expr.__rmul__(self,other:Any)->'Expr'
polars.Expr.__ror__(self,other:Any)->'Expr'
polars.Expr.__rsub__(self,other:Any)->'Expr'
polars.Expr.__rtruediv__(self,other:Any)->'Expr'
polars.Expr.__rxor__(self,other:'Expr')->'Expr'
polars.Expr.__sub__(self,other:Any)->'Expr'
polars.Expr.__to_expr(self,other:Any)->'Expr'
polars.Expr.__to_pyexpr(self,other:Any)->'PyExpr'
polars.Expr.__truediv__(self,other:Any)->'Expr'
polars.Expr.__xor__(self,other:'Expr')->'Expr'
polars.Expr._from_pyexpr(pyexpr:'PyExpr')->'Expr'
polars.Expr.abs(self)->'Expr'
polars.Expr.agg_groups(self)->'Expr'
polars.Expr.alias(self,name:str)->'Expr'
polars.Expr.apply(self,f:Union[Callable[['pl.Series'],'pl.Series'],Callable[[Any],Any]],return_dtype:Optional[Type[DataType]]=None)->'Expr'
polars.Expr.arccos(self)->'Expr'
polars.Expr.arcsin(self)->'Expr'
polars.Expr.arctan(self)->'Expr'
polars.Expr.arg_max(self)->'Expr'
polars.Expr.arg_min(self)->'Expr'
polars.Expr.arg_sort(self,reverse:bool=False)->'Expr'
polars.Expr.arg_unique(self)->'Expr'
polars.Expr.argsort(self,reverse:bool=False)->'Expr'
polars.Expr.arr(self)->'ExprListNameSpace'
polars.Expr.backward_fill(self)->'Expr'
polars.Expr.cast(self,dtype:Type[Any],strict:bool=True)->'Expr'
polars.Expr.clip(self,min_val:Union[int,float],max_val:Union[int,float])->'Expr'
polars.Expr.cos(self)->'Expr'
polars.Expr.count(self)->'Expr'
polars.Expr.cummax(self,reverse:bool=False)->'Expr'
polars.Expr.cummin(self,reverse:bool=False)->'Expr'
polars.Expr.cumprod(self,reverse:bool=False)->'Expr'
polars.Expr.cumsum(self,reverse:bool=False)->'Expr'
polars.Expr.diff(self,n:int=1,null_behavior:str='ignore')->'Expr'
polars.Expr.dot(self,other:'Expr')->'Expr'
polars.Expr.drop_nulls(self)->'Expr'
polars.Expr.dt(self)->'ExprDateTimeNameSpace'
polars.Expr.eq(self,other:'Expr')->'Expr'
polars.Expr.exclude(self,columns:Union[str,tp.List[str]])->'Expr'
polars.Expr.explode(self)->'Expr'
polars.Expr.fill_nan(self,fill_value:Union[str,int,float,'Expr'])->'Expr'
polars.Expr.fill_null(self,fill_value:Union[str,int,float,'Expr'])->'Expr'
polars.Expr.filter(self,predicate:'Expr')->'Expr'
polars.Expr.first(self)->'Expr'
polars.Expr.flatten(self)->'Expr'
polars.Expr.floor(self)->'Expr'
polars.Expr.forward_fill(self)->'Expr'
polars.Expr.gt(self,other:'Expr')->'Expr'
polars.Expr.gt_eq(self,other:'Expr')->'Expr'
polars.Expr.hash(self,k0:int=0,k1:int=1,k2:int=2,k3:int=3)->'pl.Expr'
polars.Expr.head(self,n:Optional[int]=None)->'Expr'
polars.Expr.inspect(self,fmt:str='{}')->'pl.Expr'
polars.Expr.interpolate(self)->'pl.Expr'
polars.Expr.is_between(self,start:Union['Expr',datetime],end:Union['Expr',datetime])->'Expr'
polars.Expr.is_duplicated(self)->'Expr'
polars.Expr.is_finite(self)->'Expr'
polars.Expr.is_first(self)->'Expr'
polars.Expr.is_in(self,other:Union['Expr',tp.List[Any]])->'Expr'
polars.Expr.is_infinite(self)->'Expr'
polars.Expr.is_nan(self)->'Expr'
polars.Expr.is_not(self)->'Expr'
polars.Expr.is_not_nan(self)->'Expr'
polars.Expr.is_not_null(self)->'Expr'
polars.Expr.is_null(self)->'Expr'
polars.Expr.is_unique(self)->'Expr'
polars.Expr.keep_name(self)->'Expr'
polars.Expr.kurtosis(self,fisher:bool=True,bias:bool=True)->'Expr'
polars.Expr.last(self)->'Expr'
polars.Expr.len(self)->'Expr'
polars.Expr.list(self)->'Expr'
polars.Expr.lt(self,other:'Expr')->'Expr'
polars.Expr.lt_eq(self,other:'Expr')->'Expr'
polars.Expr.map(self,f:Callable[['pl.Series'],'pl.Series'],return_dtype:Optional[Type[DataType]]=None,agg_list:bool=False)->'Expr'
polars.Expr.max(self)->'Expr'
polars.Expr.mean(self)->'Expr'
polars.Expr.median(self)->'Expr'
polars.Expr.min(self)->'Expr'
polars.Expr.mode(self)->'Expr'
polars.Expr.n_unique(self)->'Expr'
polars.Expr.neq(self,other:'Expr')->'Expr'
polars.Expr.over(self,expr:Union[str,'Expr',tp.List['Expr']])->'Expr'
polars.Expr.pow(self,exponent:float)->'Expr'
polars.Expr.prefix(self,prefix:str)->'Expr'
polars.Expr.quantile(self,quantile:float)->'Expr'
polars.Expr.rank(self,method:str='average')->'Expr'
polars.Expr.reinterpret(self,signed:bool)->'pl.Expr'
polars.Expr.repeat_by(self,by:'Expr')->'Expr'
polars.Expr.reverse(self)->'Expr'
polars.Expr.rolling_apply(self,window_size:int,function:Callable[['pl.Series'],Any])->'Expr'
polars.Expr.rolling_max(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Expr'
polars.Expr.rolling_mean(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Expr'
polars.Expr.rolling_median(self,window_size:int)->'Expr'
polars.Expr.rolling_min(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Expr'
polars.Expr.rolling_quantile(self,window_size:int,quantile:float)->'Expr'
polars.Expr.rolling_skew(self,window_size:int,bias:bool=True)->'Expr'
polars.Expr.rolling_std(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Expr'
polars.Expr.rolling_sum(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Expr'
polars.Expr.rolling_var(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Expr'
polars.Expr.round(self,decimals:int)->'Expr'
polars.Expr.shift(self,periods:int=1)->'Expr'
polars.Expr.shift_and_fill(self,periods:int,fill_value:'Expr')->'Expr'
polars.Expr.sin(self)->'Expr'
polars.Expr.skew(self,bias:bool=True)->'Expr'
polars.Expr.slice(self,offset:int,length:int)->'Expr'
polars.Expr.sort(self,reverse:bool=False)->'Expr'
polars.Expr.sort_by(self,by:Union['Expr',str],reverse:bool=False)->'Expr'
polars.Expr.sqrt(self)->'Expr'
polars.Expr.std(self)->'Expr'
polars.Expr.str(self)->'ExprStringNameSpace'
polars.Expr.str_concat(self,delimiter:str='-')->'Expr'
polars.Expr.suffix(self,suffix:str)->'Expr'
polars.Expr.sum(self)->'Expr'
polars.Expr.tail(self,n:Optional[int]=None)->'Expr'
polars.Expr.take(self,index:Union[tp.List[int],'Expr','pl.Series'])->'Expr'
polars.Expr.take_every(self,n:int)->'Expr'
polars.Expr.tan(self)->'Expr'
polars.Expr.unique(self)->'Expr'
polars.Expr.var(self)->'Expr'
polars.Expr.where(self,predicate:'Expr')->'Expr'
polars.ExprDateTimeNameSpace(self,expr:Expr)
polars.ExprDateTimeNameSpace.day(self)->Expr
polars.ExprDateTimeNameSpace.hour(self)->Expr
polars.ExprDateTimeNameSpace.minute(self)->Expr
polars.ExprDateTimeNameSpace.month(self)->Expr
polars.ExprDateTimeNameSpace.nanosecond(self)->Expr
polars.ExprDateTimeNameSpace.ordinal_day(self)->Expr
polars.ExprDateTimeNameSpace.round(self,rule:str,n:int)->Expr
polars.ExprDateTimeNameSpace.second(self)->Expr
polars.ExprDateTimeNameSpace.strftime(self,fmt:str)->Expr
polars.ExprDateTimeNameSpace.timestamp(self)->Expr
polars.ExprDateTimeNameSpace.to_python_datetime(self)->Expr
polars.ExprDateTimeNameSpace.week(self)->Expr
polars.ExprDateTimeNameSpace.weekday(self)->Expr
polars.ExprDateTimeNameSpace.year(self)->Expr
polars.ExprListNameSpace(self,expr:Expr)
polars.ExprListNameSpace.concat(self,other:Union[tp.List[Expr],Expr,str,tp.List[str]])->'Expr'
polars.ExprListNameSpace.lengths(self)->Expr
polars.ExprListNameSpace.max(self)->'Expr'
polars.ExprListNameSpace.mean(self)->'Expr'
polars.ExprListNameSpace.min(self)->'Expr'
polars.ExprListNameSpace.reverse(self)->'Expr'
polars.ExprListNameSpace.sort(self,reverse:bool)->'Expr'
polars.ExprListNameSpace.sum(self)->'Expr'
polars.ExprListNameSpace.unique(self)->'Expr'
polars.ExprStringNameSpace(self,expr:Expr)
polars.ExprStringNameSpace.contains(self,pattern:str)->Expr
polars.ExprStringNameSpace.extract(self,pattern:str,group_index:int=1)->Expr
polars.ExprStringNameSpace.json_path_match(self,json_path:str)->Expr
polars.ExprStringNameSpace.lengths(self)->Expr
polars.ExprStringNameSpace.replace(self,pattern:str,value:str)->Expr
polars.ExprStringNameSpace.replace_all(self,pattern:str,value:str)->Expr
polars.ExprStringNameSpace.slice(self,start:int,length:Optional[int]=None)->Expr
polars.ExprStringNameSpace.strptime(self,datatype:Union[Date,Datetime],fmt:Optional[str]=None)->Expr
polars.ExprStringNameSpace.to_lowercase(self)->Expr
polars.ExprStringNameSpace.to_uppercase(self)->Expr
polars._selection_to_pyexpr_list(exprs:Union[str,'Expr',Sequence[str],Sequence['Expr']])->tp.List['PyExpr']
polars.expr_to_lit_or_expr(expr:Union[Expr,int,float,str,tp.List[Expr],'pl.Series'],str_to_lit:bool=True)->Expr
polars.lazy.expr.Expr(self)
polars.lazy.expr.Expr.__add__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__and__(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.__array_ufunc__(self,ufunc:Callable[...,Any],method:str,*inputs:Any,**kwargs:Any)->'Expr'
polars.lazy.expr.Expr.__bool__(self)->'Expr'
polars.lazy.expr.Expr.__eq__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__floordiv__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__ge__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__gt__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__init__(self)
polars.lazy.expr.Expr.__invert__(self)->'Expr'
polars.lazy.expr.Expr.__le__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__lt__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__mod__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__mul__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__ne__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__neg__(self)->'Expr'
polars.lazy.expr.Expr.__or__(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.__pow__(self,power:float,modulo:None=None)->'Expr'
polars.lazy.expr.Expr.__radd__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__rand__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__rfloordiv__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__rmod__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__rmul__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__ror__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__rsub__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__rtruediv__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__rxor__(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.__sub__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__to_expr(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__to_pyexpr(self,other:Any)->'PyExpr'
polars.lazy.expr.Expr.__truediv__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__xor__(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr._from_pyexpr(pyexpr:'PyExpr')->'Expr'
polars.lazy.expr.Expr.abs(self)->'Expr'
polars.lazy.expr.Expr.agg_groups(self)->'Expr'
polars.lazy.expr.Expr.alias(self,name:str)->'Expr'
polars.lazy.expr.Expr.apply(self,f:Union[Callable[['pl.Series'],'pl.Series'],Callable[[Any],Any]],return_dtype:Optional[Type[DataType]]=None)->'Expr'
polars.lazy.expr.Expr.arccos(self)->'Expr'
polars.lazy.expr.Expr.arcsin(self)->'Expr'
polars.lazy.expr.Expr.arctan(self)->'Expr'
polars.lazy.expr.Expr.arg_max(self)->'Expr'
polars.lazy.expr.Expr.arg_min(self)->'Expr'
polars.lazy.expr.Expr.arg_sort(self,reverse:bool=False)->'Expr'
polars.lazy.expr.Expr.arg_unique(self)->'Expr'
polars.lazy.expr.Expr.argsort(self,reverse:bool=False)->'Expr'
polars.lazy.expr.Expr.arr(self)->'ExprListNameSpace'
polars.lazy.expr.Expr.backward_fill(self)->'Expr'
polars.lazy.expr.Expr.cast(self,dtype:Type[Any],strict:bool=True)->'Expr'
polars.lazy.expr.Expr.clip(self,min_val:Union[int,float],max_val:Union[int,float])->'Expr'
polars.lazy.expr.Expr.cos(self)->'Expr'
polars.lazy.expr.Expr.count(self)->'Expr'
polars.lazy.expr.Expr.cummax(self,reverse:bool=False)->'Expr'
polars.lazy.expr.Expr.cummin(self,reverse:bool=False)->'Expr'
polars.lazy.expr.Expr.cumprod(self,reverse:bool=False)->'Expr'
polars.lazy.expr.Expr.cumsum(self,reverse:bool=False)->'Expr'
polars.lazy.expr.Expr.diff(self,n:int=1,null_behavior:str='ignore')->'Expr'
polars.lazy.expr.Expr.dot(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.drop_nulls(self)->'Expr'
polars.lazy.expr.Expr.dt(self)->'ExprDateTimeNameSpace'
polars.lazy.expr.Expr.eq(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.exclude(self,columns:Union[str,tp.List[str]])->'Expr'
polars.lazy.expr.Expr.explode(self)->'Expr'
polars.lazy.expr.Expr.fill_nan(self,fill_value:Union[str,int,float,'Expr'])->'Expr'
polars.lazy.expr.Expr.fill_null(self,fill_value:Union[str,int,float,'Expr'])->'Expr'
polars.lazy.expr.Expr.filter(self,predicate:'Expr')->'Expr'
polars.lazy.expr.Expr.first(self)->'Expr'
polars.lazy.expr.Expr.flatten(self)->'Expr'
polars.lazy.expr.Expr.floor(self)->'Expr'
polars.lazy.expr.Expr.forward_fill(self)->'Expr'
polars.lazy.expr.Expr.gt(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.gt_eq(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.hash(self,k0:int=0,k1:int=1,k2:int=2,k3:int=3)->'pl.Expr'
polars.lazy.expr.Expr.head(self,n:Optional[int]=None)->'Expr'
polars.lazy.expr.Expr.inspect(self,fmt:str='{}')->'pl.Expr'
polars.lazy.expr.Expr.interpolate(self)->'pl.Expr'
polars.lazy.expr.Expr.is_between(self,start:Union['Expr',datetime],end:Union['Expr',datetime])->'Expr'
polars.lazy.expr.Expr.is_duplicated(self)->'Expr'
polars.lazy.expr.Expr.is_finite(self)->'Expr'
polars.lazy.expr.Expr.is_first(self)->'Expr'
polars.lazy.expr.Expr.is_in(self,other:Union['Expr',tp.List[Any]])->'Expr'
polars.lazy.expr.Expr.is_infinite(self)->'Expr'
polars.lazy.expr.Expr.is_nan(self)->'Expr'
polars.lazy.expr.Expr.is_not(self)->'Expr'
polars.lazy.expr.Expr.is_not_nan(self)->'Expr'
polars.lazy.expr.Expr.is_not_null(self)->'Expr'
polars.lazy.expr.Expr.is_null(self)->'Expr'
polars.lazy.expr.Expr.is_unique(self)->'Expr'
polars.lazy.expr.Expr.keep_name(self)->'Expr'
polars.lazy.expr.Expr.kurtosis(self,fisher:bool=True,bias:bool=True)->'Expr'
polars.lazy.expr.Expr.last(self)->'Expr'
polars.lazy.expr.Expr.len(self)->'Expr'
polars.lazy.expr.Expr.list(self)->'Expr'
polars.lazy.expr.Expr.lt(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.lt_eq(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.map(self,f:Callable[['pl.Series'],'pl.Series'],return_dtype:Optional[Type[DataType]]=None,agg_list:bool=False)->'Expr'
polars.lazy.expr.Expr.max(self)->'Expr'
polars.lazy.expr.Expr.mean(self)->'Expr'
polars.lazy.expr.Expr.median(self)->'Expr'
polars.lazy.expr.Expr.min(self)->'Expr'
polars.lazy.expr.Expr.mode(self)->'Expr'
polars.lazy.expr.Expr.n_unique(self)->'Expr'
polars.lazy.expr.Expr.neq(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.over(self,expr:Union[str,'Expr',tp.List['Expr']])->'Expr'
polars.lazy.expr.Expr.pow(self,exponent:float)->'Expr'
polars.lazy.expr.Expr.prefix(self,prefix:str)->'Expr'
polars.lazy.expr.Expr.quantile(self,quantile:float)->'Expr'
polars.lazy.expr.Expr.rank(self,method:str='average')->'Expr'
polars.lazy.expr.Expr.reinterpret(self,signed:bool)->'pl.Expr'
polars.lazy.expr.Expr.repeat_by(self,by:'Expr')->'Expr'
polars.lazy.expr.Expr.reverse(self)->'Expr'
polars.lazy.expr.Expr.rolling_apply(self,window_size:int,function:Callable[['pl.Series'],Any])->'Expr'
polars.lazy.expr.Expr.rolling_max(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Expr'
polars.lazy.expr.Expr.rolling_mean(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Expr'
polars.lazy.expr.Expr.rolling_median(self,window_size:int)->'Expr'
polars.lazy.expr.Expr.rolling_min(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Expr'
polars.lazy.expr.Expr.rolling_quantile(self,window_size:int,quantile:float)->'Expr'
polars.lazy.expr.Expr.rolling_skew(self,window_size:int,bias:bool=True)->'Expr'
polars.lazy.expr.Expr.rolling_std(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Expr'
polars.lazy.expr.Expr.rolling_sum(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Expr'
polars.lazy.expr.Expr.rolling_var(self,window_size:int,weights:Optional[tp.List[float]]=None,min_periods:Optional[int]=None,center:bool=False)->'Expr'
polars.lazy.expr.Expr.round(self,decimals:int)->'Expr'
polars.lazy.expr.Expr.shift(self,periods:int=1)->'Expr'
polars.lazy.expr.Expr.shift_and_fill(self,periods:int,fill_value:'Expr')->'Expr'
polars.lazy.expr.Expr.sin(self)->'Expr'
polars.lazy.expr.Expr.skew(self,bias:bool=True)->'Expr'
polars.lazy.expr.Expr.slice(self,offset:int,length:int)->'Expr'
polars.lazy.expr.Expr.sort(self,reverse:bool=False)->'Expr'
polars.lazy.expr.Expr.sort_by(self,by:Union['Expr',str],reverse:bool=False)->'Expr'
polars.lazy.expr.Expr.sqrt(self)->'Expr'
polars.lazy.expr.Expr.std(self)->'Expr'
polars.lazy.expr.Expr.str(self)->'ExprStringNameSpace'
polars.lazy.expr.Expr.str_concat(self,delimiter:str='-')->'Expr'
polars.lazy.expr.Expr.suffix(self,suffix:str)->'Expr'
polars.lazy.expr.Expr.sum(self)->'Expr'
polars.lazy.expr.Expr.tail(self,n:Optional[int]=None)->'Expr'
polars.lazy.expr.Expr.take(self,index:Union[tp.List[int],'Expr','pl.Series'])->'Expr'
polars.lazy.expr.Expr.take_every(self,n:int)->'Expr'
polars.lazy.expr.Expr.tan(self)->'Expr'
polars.lazy.expr.Expr.unique(self)->'Expr'
polars.lazy.expr.Expr.var(self)->'Expr'
polars.lazy.expr.Expr.where(self,predicate:'Expr')->'Expr'
polars.lazy.expr.ExprDateTimeNameSpace(self,expr:Expr)
polars.lazy.expr.ExprDateTimeNameSpace.__init__(self,expr:Expr)
polars.lazy.expr.ExprDateTimeNameSpace.day(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.hour(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.minute(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.month(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.nanosecond(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.ordinal_day(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.round(self,rule:str,n:int)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.second(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.strftime(self,fmt:str)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.timestamp(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.to_python_datetime(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.week(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.weekday(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.year(self)->Expr
polars.lazy.expr.ExprListNameSpace(self,expr:Expr)
polars.lazy.expr.ExprListNameSpace.__init__(self,expr:Expr)
polars.lazy.expr.ExprListNameSpace.concat(self,other:Union[tp.List[Expr],Expr,str,tp.List[str]])->'Expr'
polars.lazy.expr.ExprListNameSpace.lengths(self)->Expr
polars.lazy.expr.ExprListNameSpace.max(self)->'Expr'
polars.lazy.expr.ExprListNameSpace.mean(self)->'Expr'
polars.lazy.expr.ExprListNameSpace.min(self)->'Expr'
polars.lazy.expr.ExprListNameSpace.reverse(self)->'Expr'
polars.lazy.expr.ExprListNameSpace.sort(self,reverse:bool)->'Expr'
polars.lazy.expr.ExprListNameSpace.sum(self)->'Expr'
polars.lazy.expr.ExprListNameSpace.unique(self)->'Expr'
polars.lazy.expr.ExprStringNameSpace(self,expr:Expr)
polars.lazy.expr.ExprStringNameSpace.__init__(self,expr:Expr)
polars.lazy.expr.ExprStringNameSpace.contains(self,pattern:str)->Expr
polars.lazy.expr.ExprStringNameSpace.extract(self,pattern:str,group_index:int=1)->Expr
polars.lazy.expr.ExprStringNameSpace.json_path_match(self,json_path:str)->Expr
polars.lazy.expr.ExprStringNameSpace.lengths(self)->Expr
polars.lazy.expr.ExprStringNameSpace.replace(self,pattern:str,value:str)->Expr
polars.lazy.expr.ExprStringNameSpace.replace_all(self,pattern:str,value:str)->Expr
polars.lazy.expr.ExprStringNameSpace.slice(self,start:int,length:Optional[int]=None)->Expr
polars.lazy.expr.ExprStringNameSpace.strptime(self,datatype:Union[Date,Datetime],fmt:Optional[str]=None)->Expr
polars.lazy.expr.ExprStringNameSpace.to_lowercase(self)->Expr
polars.lazy.expr.ExprStringNameSpace.to_uppercase(self)->Expr
polars.lazy.expr._selection_to_pyexpr_list(exprs:Union[str,'Expr',Sequence[str],Sequence['Expr']])->tp.List['PyExpr']
polars.lazy.expr.expr_to_lit_or_expr(expr:Union[Expr,int,float,str,tp.List[Expr],'pl.Series'],str_to_lit:bool=True)->Expr
polars.lazy.expr.wrap_expr(pyexpr:'PyExpr')->'Expr'
polars.wrap_expr(pyexpr:'PyExpr')->'Expr'


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/lazy/frame.py----------------------------------------
A:polars.lazy.frame.self->LazyFrame.__new__(LazyFrame)
A:polars.lazy.frame.processed_null_values->_process_null_values(null_values)
A:polars.lazy.frame.self._ldf->polars.polars.PyLazyFrame.new_from_ipc(file, stop_after_n_rows, cache)
A:polars.lazy.frame.ldf->LazyFrame.__new__(LazyFrame)._ldf.optimization_toggle(type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, string_cache)
A:polars.lazy.frame.dot->LazyFrame.__new__(LazyFrame)._ldf.to_dot(optimized)
A:polars.lazy.frame.dot_path->os.path.join(tmpdir_name, 'dot')
A:polars.lazy.frame.out_path->os.path.join(tmpdir_name, 'dot.png')
A:polars.lazy.frame.img->matplotlib.image.imread(out_path)
A:polars.lazy.frame.by->_selection_to_pyexpr_list(by)
A:polars.lazy.frame.predicate->col(predicate)
A:polars.lazy.frame.exprs->_selection_to_pyexpr_list(exprs)
A:polars.lazy.frame.e->col(e)
A:polars.lazy.frame.lgb->LazyFrame.__new__(LazyFrame)._ldf.groupby(new_by, maintain_order)
A:polars.lazy.frame.column->col(column)
A:polars.lazy.frame.existing->list(mapping.keys())
A:polars.lazy.frame.new->list(mapping.values())
A:polars.lazy.frame.fill_value->lit(fill_value)
A:polars.lazy.frame.columns->_selection_to_pyexpr_list(columns)
A:polars.lazy.frame.aggs->_selection_to_pyexpr_list(aggs)
polars.LazyFrame(self)
polars.LazyFrame._from_pyldf(ldf:'PyLazyFrame')->'LazyFrame'
polars.LazyFrame.cache(self)->'LazyFrame'
polars.LazyFrame.collect(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=False,no_optimization:bool=False)->'pl.DataFrame'
polars.LazyFrame.columns(self)->tp.List[str]
polars.LazyFrame.describe_optimized_plan(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True)->str
polars.LazyFrame.describe_plan(self)->str
polars.LazyFrame.drop(self,columns:Union[str,tp.List[str]])->'LazyFrame'
polars.LazyFrame.drop_duplicates(self,maintain_order:bool=False,subset:Optional[Union[tp.List[str],str]]=None)->'LazyFrame'
polars.LazyFrame.drop_nulls(self,subset:Optional[Union[tp.List[str],str]]=None)->'LazyFrame'
polars.LazyFrame.explode(self,columns:Union[str,tp.List[str],'Expr',tp.List['Expr']])->'LazyFrame'
polars.LazyFrame.fetch(self,n_rows:int=500,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=True,no_optimization:bool=False)->'pl.DataFrame'
polars.LazyFrame.fill_nan(self,fill_value:Union[int,str,'Expr'])->'LazyFrame'
polars.LazyFrame.fill_null(self,fill_value:Union[int,str,'Expr'])->'LazyFrame'
polars.LazyFrame.filter(self,predicate:'Expr')->'LazyFrame'
polars.LazyFrame.first(self)->'LazyFrame'
polars.LazyFrame.groupby(self,by:Union[str,tp.List[str],'Expr',tp.List['Expr']],maintain_order:bool=False)->'LazyGroupBy'
polars.LazyFrame.head(self,n:int)->'LazyFrame'
polars.LazyFrame.inspect(self,fmt:str='{}')->'pl.LazyFrame'
polars.LazyFrame.interpolate(self)->'LazyFrame'
polars.LazyFrame.join(self,ldf:'LazyFrame',left_on:Optional[Union[str,'Expr',tp.List[str],tp.List['Expr']]]=None,right_on:Optional[Union[str,'Expr',tp.List[str],tp.List['Expr']]]=None,on:Optional[Union[str,'Expr',tp.List[str],tp.List['Expr']]]=None,how:str='inner',suffix:str='_right',allow_parallel:bool=True,force_parallel:bool=False,asof_by:Optional[Union[str,tp.List[str]]]=None,asof_by_left:Optional[Union[str,tp.List[str]]]=None,asof_by_right:Optional[Union[str,tp.List[str]]]=None)->'LazyFrame'
polars.LazyFrame.last(self)->'LazyFrame'
polars.LazyFrame.limit(self,n:int)->'LazyFrame'
polars.LazyFrame.map(self,f:Callable[['pl.DataFrame'],'pl.DataFrame'],predicate_pushdown:bool=True,projection_pushdown:bool=True,no_optimizations:bool=False)->'LazyFrame'
polars.LazyFrame.max(self)->'LazyFrame'
polars.LazyFrame.mean(self)->'LazyFrame'
polars.LazyFrame.median(self)->'LazyFrame'
polars.LazyFrame.melt(self,id_vars:Union[str,tp.List[str]],value_vars:Union[str,tp.List[str]])->'LazyFrame'
polars.LazyFrame.min(self)->'LazyFrame'
polars.LazyFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.LazyFrame.quantile(self,quantile:float)->'LazyFrame'
polars.LazyFrame.rename(self,mapping:Dict[str,str])->'LazyFrame'
polars.LazyFrame.reverse(self)->'LazyFrame'
polars.LazyFrame.scan_csv(file:str,infer_schema_length:Optional[int]=100,has_headers:bool=True,ignore_errors:bool=False,sep:str=',',skip_rows:int=0,stop_after_n_rows:Optional[int]=None,cache:bool=True,dtype:Optional[Dict[str,Type[DataType]]]=None,low_memory:bool=False,comment_char:Optional[str]=None,quote_char:Optional[str]='"',null_values:Optional[Union[str,tp.List[str],Dict[str,str]]]=None)->'LazyFrame'
polars.LazyFrame.scan_ipc(file:str,stop_after_n_rows:Optional[int]=None,cache:bool=True)->'LazyFrame'
polars.LazyFrame.scan_parquet(file:str,stop_after_n_rows:Optional[int]=None,cache:bool=True)->'LazyFrame'
polars.LazyFrame.select(self,exprs:Union[str,'Expr',Sequence[str],Sequence['Expr']])->'LazyFrame'
polars.LazyFrame.shift(self,periods:int)->'LazyFrame'
polars.LazyFrame.shift_and_fill(self,periods:int,fill_value:Union['Expr',int,str,float])->'LazyFrame'
polars.LazyFrame.show_graph(self,optimized:bool=True,show:bool=True,output_path:Optional[str]=None,raw_output:bool=False,figsize:Tuple[float,float]=(16.0,12.0))->Optional[str]
polars.LazyFrame.slice(self,offset:int,length:int)->'LazyFrame'
polars.LazyFrame.sort(self,by:Union[str,'Expr',tp.List['Expr']],reverse:Union[bool,tp.List[bool]]=False)->'LazyFrame'
polars.LazyFrame.std(self)->'LazyFrame'
polars.LazyFrame.sum(self)->'LazyFrame'
polars.LazyFrame.tail(self,n:int)->'LazyFrame'
polars.LazyFrame.var(self)->'LazyFrame'
polars.LazyFrame.with_column(self,expr:'Expr')->'LazyFrame'
polars.LazyFrame.with_column_renamed(self,existing_name:str,new_name:str)->'LazyFrame'
polars.LazyFrame.with_columns(self,exprs:Union[tp.List['Expr'],'Expr'])->'LazyFrame'
polars.LazyFrame.with_row_count(self,name:str='row_nr')->'LazyFrame'
polars.LazyGroupBy(self,lgb:'PyLazyGroupBy')
polars.LazyGroupBy.agg(self,aggs:Union[tp.List['Expr'],'Expr'])->'LazyFrame'
polars.LazyGroupBy.apply(self,f:Callable[['pl.DataFrame'],'pl.DataFrame'])->'LazyFrame'
polars.LazyGroupBy.head(self,n:int=5)->'LazyFrame'
polars.LazyGroupBy.tail(self,n:int=5)->'LazyFrame'
polars.lazy.frame.LazyFrame(self)
polars.lazy.frame.LazyFrame.__init__(self)
polars.lazy.frame.LazyFrame._from_pyldf(ldf:'PyLazyFrame')->'LazyFrame'
polars.lazy.frame.LazyFrame.cache(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.collect(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=False,no_optimization:bool=False)->'pl.DataFrame'
polars.lazy.frame.LazyFrame.columns(self)->tp.List[str]
polars.lazy.frame.LazyFrame.describe_optimized_plan(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True)->str
polars.lazy.frame.LazyFrame.describe_plan(self)->str
polars.lazy.frame.LazyFrame.drop(self,columns:Union[str,tp.List[str]])->'LazyFrame'
polars.lazy.frame.LazyFrame.drop_duplicates(self,maintain_order:bool=False,subset:Optional[Union[tp.List[str],str]]=None)->'LazyFrame'
polars.lazy.frame.LazyFrame.drop_nulls(self,subset:Optional[Union[tp.List[str],str]]=None)->'LazyFrame'
polars.lazy.frame.LazyFrame.explode(self,columns:Union[str,tp.List[str],'Expr',tp.List['Expr']])->'LazyFrame'
polars.lazy.frame.LazyFrame.fetch(self,n_rows:int=500,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=True,no_optimization:bool=False)->'pl.DataFrame'
polars.lazy.frame.LazyFrame.fill_nan(self,fill_value:Union[int,str,'Expr'])->'LazyFrame'
polars.lazy.frame.LazyFrame.fill_null(self,fill_value:Union[int,str,'Expr'])->'LazyFrame'
polars.lazy.frame.LazyFrame.filter(self,predicate:'Expr')->'LazyFrame'
polars.lazy.frame.LazyFrame.first(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.groupby(self,by:Union[str,tp.List[str],'Expr',tp.List['Expr']],maintain_order:bool=False)->'LazyGroupBy'
polars.lazy.frame.LazyFrame.head(self,n:int)->'LazyFrame'
polars.lazy.frame.LazyFrame.inspect(self,fmt:str='{}')->'pl.LazyFrame'
polars.lazy.frame.LazyFrame.interpolate(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.join(self,ldf:'LazyFrame',left_on:Optional[Union[str,'Expr',tp.List[str],tp.List['Expr']]]=None,right_on:Optional[Union[str,'Expr',tp.List[str],tp.List['Expr']]]=None,on:Optional[Union[str,'Expr',tp.List[str],tp.List['Expr']]]=None,how:str='inner',suffix:str='_right',allow_parallel:bool=True,force_parallel:bool=False,asof_by:Optional[Union[str,tp.List[str]]]=None,asof_by_left:Optional[Union[str,tp.List[str]]]=None,asof_by_right:Optional[Union[str,tp.List[str]]]=None)->'LazyFrame'
polars.lazy.frame.LazyFrame.last(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.limit(self,n:int)->'LazyFrame'
polars.lazy.frame.LazyFrame.map(self,f:Callable[['pl.DataFrame'],'pl.DataFrame'],predicate_pushdown:bool=True,projection_pushdown:bool=True,no_optimizations:bool=False)->'LazyFrame'
polars.lazy.frame.LazyFrame.max(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.mean(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.median(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.melt(self,id_vars:Union[str,tp.List[str]],value_vars:Union[str,tp.List[str]])->'LazyFrame'
polars.lazy.frame.LazyFrame.min(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.lazy.frame.LazyFrame.quantile(self,quantile:float)->'LazyFrame'
polars.lazy.frame.LazyFrame.rename(self,mapping:Dict[str,str])->'LazyFrame'
polars.lazy.frame.LazyFrame.reverse(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.scan_csv(file:str,infer_schema_length:Optional[int]=100,has_headers:bool=True,ignore_errors:bool=False,sep:str=',',skip_rows:int=0,stop_after_n_rows:Optional[int]=None,cache:bool=True,dtype:Optional[Dict[str,Type[DataType]]]=None,low_memory:bool=False,comment_char:Optional[str]=None,quote_char:Optional[str]='"',null_values:Optional[Union[str,tp.List[str],Dict[str,str]]]=None)->'LazyFrame'
polars.lazy.frame.LazyFrame.scan_ipc(file:str,stop_after_n_rows:Optional[int]=None,cache:bool=True)->'LazyFrame'
polars.lazy.frame.LazyFrame.scan_parquet(file:str,stop_after_n_rows:Optional[int]=None,cache:bool=True)->'LazyFrame'
polars.lazy.frame.LazyFrame.select(self,exprs:Union[str,'Expr',Sequence[str],Sequence['Expr']])->'LazyFrame'
polars.lazy.frame.LazyFrame.shift(self,periods:int)->'LazyFrame'
polars.lazy.frame.LazyFrame.shift_and_fill(self,periods:int,fill_value:Union['Expr',int,str,float])->'LazyFrame'
polars.lazy.frame.LazyFrame.show_graph(self,optimized:bool=True,show:bool=True,output_path:Optional[str]=None,raw_output:bool=False,figsize:Tuple[float,float]=(16.0,12.0))->Optional[str]
polars.lazy.frame.LazyFrame.slice(self,offset:int,length:int)->'LazyFrame'
polars.lazy.frame.LazyFrame.sort(self,by:Union[str,'Expr',tp.List['Expr']],reverse:Union[bool,tp.List[bool]]=False)->'LazyFrame'
polars.lazy.frame.LazyFrame.std(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.sum(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.tail(self,n:int)->'LazyFrame'
polars.lazy.frame.LazyFrame.var(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.with_column(self,expr:'Expr')->'LazyFrame'
polars.lazy.frame.LazyFrame.with_column_renamed(self,existing_name:str,new_name:str)->'LazyFrame'
polars.lazy.frame.LazyFrame.with_columns(self,exprs:Union[tp.List['Expr'],'Expr'])->'LazyFrame'
polars.lazy.frame.LazyFrame.with_row_count(self,name:str='row_nr')->'LazyFrame'
polars.lazy.frame.LazyGroupBy(self,lgb:'PyLazyGroupBy')
polars.lazy.frame.LazyGroupBy.__init__(self,lgb:'PyLazyGroupBy')
polars.lazy.frame.LazyGroupBy.agg(self,aggs:Union[tp.List['Expr'],'Expr'])->'LazyFrame'
polars.lazy.frame.LazyGroupBy.apply(self,f:Callable[['pl.DataFrame'],'pl.DataFrame'])->'LazyFrame'
polars.lazy.frame.LazyGroupBy.head(self,n:int=5)->'LazyFrame'
polars.lazy.frame.LazyGroupBy.tail(self,n:int=5)->'LazyFrame'
polars.lazy.frame.wrap_ldf(ldf:'PyLazyFrame')->'LazyFrame'
polars.wrap_ldf(ldf:'PyLazyFrame')->'LazyFrame'


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/lazy/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/internals/construction.py----------------------------------------
A:polars.internals.construction.array->coerce_arrow(values)
A:polars.internals.construction.values->numpy.array(values)
A:polars.internals.construction.constructor->py_type_to_constructor(dtype_)
A:polars.internals.construction.pyseries->pyseries.cast(str(pl.Datetime), True).cast(str(pl.Datetime), True)
A:polars.internals.construction.value->_get_first_non_none(values)
A:polars.internals.construction.nested_value->_get_first_non_none(value)
A:polars.internals.construction.dtype->py_type_to_polars_type(nested_dtype)
A:polars.internals.construction.nested_arrow_dtype->py_type_to_arrow_type(nested_dtype)
A:polars.internals.construction.arrow_values->pyarrow.array(values, pa.large_list(nested_arrow_dtype))
A:polars.internals.construction.arr->pyarrow.compute.cast(arr, pa.int64())
A:polars.internals.construction.name->str(values.name)
A:polars.internals.construction.data_series->_handle_columns_arg(data_series, columns=columns)
A:polars.internals.construction.s->polars.Series('column_0', data).inner()
A:polars.internals.construction.pydf->pydf.rechunk().rechunk()
A:polars.internals.construction.data->data.rename_columns(columns).rename_columns(columns)
A:polars.internals.construction.column->coerce_arrow(column)
A:polars.internals.construction.batches->pyarrow.table(data_dict).to_batches()
A:polars.internals.construction.arrow_table->pyarrow.table(arrow_dict)
polars.internals.construction._get_first_non_none(values:Sequence[Optional[Any]])->Any
polars.internals.construction._handle_columns_arg(data:List['PySeries'],columns:Optional[Sequence[str]]=None)->List['PySeries']
polars.internals.construction._pandas_series_to_arrow(values:Union['pd.Series','pd.DatetimeIndex'],nan_to_none:bool=True,min_len:Optional[int]=None)->'pa.Array'
polars.internals.construction.arrow_to_pydf(data:'pa.Table',columns:Optional[Sequence[str]]=None,rechunk:bool=True)->'PyDataFrame'
polars.internals.construction.arrow_to_pyseries(name:str,values:'pa.Array')->'PySeries'
polars.internals.construction.dict_to_pydf(data:Dict[str,Sequence[Any]],columns:Optional[Sequence[str]]=None)->'PyDataFrame'
polars.internals.construction.numpy_to_pydf(data:np.ndarray,columns:Optional[Sequence[str]]=None,orient:Optional[str]=None)->'PyDataFrame'
polars.internals.construction.numpy_to_pyseries(name:str,values:np.ndarray,strict:bool=True,nan_to_null:bool=False)->'PySeries'
polars.internals.construction.pandas_to_pydf(data:'pd.DataFrame',columns:Optional[Sequence[str]]=None,rechunk:bool=True,nan_to_none:bool=True)->'PyDataFrame'
polars.internals.construction.pandas_to_pyseries(name:str,values:Union['pd.Series','pd.DatetimeIndex'],nan_to_none:bool=True)->'PySeries'
polars.internals.construction.sequence_to_pydf(data:Sequence[Any],columns:Optional[Sequence[str]]=None,orient:Optional[str]=None)->'PyDataFrame'
polars.internals.construction.sequence_to_pyseries(name:str,values:Sequence[Any],dtype:Optional[Type[DataType]]=None,strict:bool=True)->'PySeries'
polars.internals.construction.series_to_pydf(data:'pl.Series',columns:Optional[Sequence[str]]=None)->'PyDataFrame'
polars.internals.construction.series_to_pyseries(name:str,values:'pl.Series')->'PySeries'


----------------------------------------/home/zhang/Packages/polars/polars0.10.19/internals/__init__.py----------------------------------------

