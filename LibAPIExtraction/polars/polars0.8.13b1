
----------------------------------------/home/zhang/Packages/polars/polars0.8.13b1/string_cache.py----------------------------------------
polars.StringCache(self)
polars.StringCache.__enter__(self)->'StringCache'
polars.StringCache.__exit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
polars.string_cache.StringCache(self)
polars.string_cache.StringCache.__enter__(self)->'StringCache'
polars.string_cache.StringCache.__exit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
polars.string_cache.StringCache.__init__(self)
polars.string_cache.toggle_string_cache(toggle:bool)->None
polars.toggle_string_cache(toggle:bool)->None


----------------------------------------/home/zhang/Packages/polars/polars0.8.13b1/_html.py----------------------------------------
A:polars._html.self.row_idx->range(0, df.height)
A:polars._html.self.col_idx->range(0, df.width)
A:polars._html.template_mid->'\n\n'.join(map(lambda t: template_select % t, element_props))
A:polars._html.template->dedent('\n'.join((template_first, template_mid, template_last)))
polars._html.HTMLFormatter(self,df:'pl.DataFrame',max_cols:int=75,max_rows:int=40)
polars._html.HTMLFormatter.__init__(self,df:'pl.DataFrame',max_cols:int=75,max_rows:int=40)
polars._html.HTMLFormatter.render(self)->tp.List[str]
polars._html.HTMLFormatter.write(self,inner:str)->None
polars._html.HTMLFormatter.write_body(self)->None
polars._html.HTMLFormatter.write_header(self)->None
polars._html.NotebookFormatter(HTMLFormatter)
polars._html.NotebookFormatter.render(self)->tp.List[str]
polars._html.NotebookFormatter.write_style(self)->None
polars._html.Tag(self,elements:tp.List[str],tag:str,attributes:Optional[Dict[str,str]]=None)
polars._html.Tag.__enter__(self)->None
polars._html.Tag.__exit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
polars._html.Tag.__init__(self,elements:tp.List[str],tag:str,attributes:Optional[Dict[str,str]]=None)
polars._html.div(inner:str)->str
polars._html.table(inner:str)->str
polars._html.tag(inner:str,tag:str)->str
polars._html.tbody(inner:str)->str
polars._html.th(inner:str)->str
polars._html.thead(inner:str)->str
polars._html.tr(inner:str)->str


----------------------------------------/home/zhang/Packages/polars/polars0.8.13b1/functions.py----------------------------------------
A:polars.functions.df->df.vstack(dfs[i], in_place=False).vstack(dfs[i], in_place=False)
A:polars.functions.s->polars.Series._repeat(name, val, n)
A:polars.functions.arr->pyarrow.compute.cast(arr, pa.int64())
A:polars.functions.data[name]->_from_pandas_helper(s)
A:polars.functions.table->pyarrow.table(data)
polars._from_pandas_helper(a:'pd.Series')->pa.Array
polars.arg_where(mask:'pl.Series')->'pl.Series'
polars.concat(dfs:Sequence['pl.DataFrame'],rechunk:bool=True)->'pl.DataFrame'
polars.from_arrow(a:Union[pa.Table,pa.Array],rechunk:bool=True)->Union['pl.DataFrame', 'pl.Series']
polars.from_arrow_table(table:pa.Table,rechunk:bool=True)->'pl.DataFrame'
polars.from_pandas(df:Union['pd.DataFrame','pd.Series','pd.DatetimeIndex'],rechunk:bool=True)->Union['pl.Series', 'pl.DataFrame']
polars.from_rows(rows:Sequence[Sequence[Any]],column_names:Optional[Sequence[str]]=None,column_name_mapping:Optional[Dict[int,str]]=None)->'pl.DataFrame'
polars.functions._from_pandas_helper(a:'pd.Series')->pa.Array
polars.functions.arg_where(mask:'pl.Series')->'pl.Series'
polars.functions.concat(dfs:Sequence['pl.DataFrame'],rechunk:bool=True)->'pl.DataFrame'
polars.functions.from_arrow(a:Union[pa.Table,pa.Array],rechunk:bool=True)->Union['pl.DataFrame', 'pl.Series']
polars.functions.from_arrow_table(table:pa.Table,rechunk:bool=True)->'pl.DataFrame'
polars.functions.from_pandas(df:Union['pd.DataFrame','pd.Series','pd.DatetimeIndex'],rechunk:bool=True)->Union['pl.Series', 'pl.DataFrame']
polars.functions.from_rows(rows:Sequence[Sequence[Any]],column_names:Optional[Sequence[str]]=None,column_name_mapping:Optional[Dict[int,str]]=None)->'pl.DataFrame'
polars.functions.get_dummies(df:'pl.DataFrame')->'pl.DataFrame'
polars.functions.repeat(val:Union[int,float,str],n:int,name:Optional[str]=None)->'pl.Series'
polars.get_dummies(df:'pl.DataFrame')->'pl.DataFrame'
polars.repeat(val:Union[int,float,str],n:int,name:Optional[str]=None)->'pl.Series'


----------------------------------------/home/zhang/Packages/polars/polars0.8.13b1/utils.py----------------------------------------
A:polars.utils.ts_ms->pyarrow.compute.cast(array, pa.timestamp('ms'), safe=False)
A:polars.utils.ms->pyarrow.compute.cast(ts_ms, pa.int64())
A:polars.utils.array->array.combine_chunks().combine_chunks()
A:polars.utils.ptr_ctype->ctypes.cast(ptr, ctypes.POINTER(ptr_type))
polars.utils._process_null_values(null_values:Union[None,str,tp.List[str],Dict[str,str]]=None)->Union[None, str, tp.List[str], tp.List[Tuple[str, str]]]
polars.utils._ptr_to_numpy(ptr:int,len:int,ptr_type:Any)->np.ndarray
polars.utils.coerce_arrow(array:pa.Array)->pa.Array


----------------------------------------/home/zhang/Packages/polars/polars0.8.13b1/__init__.py----------------------------------------
A:polars.__init__.__version__->version()


----------------------------------------/home/zhang/Packages/polars/polars0.8.13b1/io.py----------------------------------------
A:polars.io.compression->kwargs.pop('compression', 'infer')
A:polars.io.compressed->any((infer_compression(f) is not None for f in file))
A:polars.io.local->all((infer_storage_options(f)['protocol'] == 'file' for f in file))
A:polars.io.tbl->connectorx.read_sql(conn=connection_uri, query=sql, return_type='arrow', partition_on=partition_on, partition_range=partition_range, partition_num=partition_num)
A:polars.io.df->polars.DataFrame.read_csv(file=data, infer_schema_length=infer_schema_length, batch_size=batch_size, has_headers=has_headers, ignore_errors=ignore_errors, stop_after_n_rows=stop_after_n_rows, skip_rows=skip_rows, projection=projection, sep=sep, columns=columns, rechunk=rechunk, encoding=encoding, n_threads=n_threads, dtype=dtype, low_memory=low_memory, comment_char=comment_char, null_values=null_values)
A:polars.io.file->str(file)
polars._prepare_file_arg(file:Union[str,List[str],TextIO,Path,BinaryIO],**kwargs:Any)->ContextManager[Union[str, BinaryIO, List[str], List[BinaryIO]]]
polars._process_http_file(path:str)->BytesIO
polars.io._prepare_file_arg(file:Union[str,List[str],TextIO,Path,BinaryIO],**kwargs:Any)->ContextManager[Union[str, BinaryIO, List[str], List[BinaryIO]]]
polars.io._process_http_file(path:str)->BytesIO
polars.io.read_csv(file:Union[str,TextIO,Path,BinaryIO],infer_schema_length:int=100,batch_size:int=8192,has_headers:bool=True,ignore_errors:bool=False,stop_after_n_rows:Optional[int]=None,skip_rows:int=0,projection:Optional[List[int]]=None,sep:str=',',columns:Optional[List[str]]=None,rechunk:bool=True,encoding:str='utf8',n_threads:Optional[int]=None,dtype:Optional[Dict[str,Type['pl.DataType']]]=None,new_columns:Optional[List[str]]=None,use_pyarrow:bool=False,low_memory:bool=False,comment_char:Optional[str]=None,storage_options:Optional[Dict]=None,null_values:Optional[Union[str,List[str],Dict[str,str]]]=None)->'pl.DataFrame'
polars.io.read_ipc(file:Union[str,BinaryIO,Path],use_pyarrow:bool=True,storage_options:Optional[Dict]=None)->'pl.DataFrame'
polars.io.read_json(source:Union[str,BytesIO])->'pl.DataFrame'
polars.io.read_parquet(source:Union[str,List[str],Path,BinaryIO],stop_after_n_rows:Optional[int]=None,memory_map:bool=True,columns:Optional[List[str]]=None,storage_options:Optional[Dict]=None,**kwargs:Any)->'pl.DataFrame'
polars.io.read_sql(sql:Union[List[str],str],connection_uri:str,partition_on:Optional[str]=None,partition_range:Optional[Tuple[int,int]]=None,partition_num:Optional[int]=None)->'pl.DataFrame'
polars.io.scan_csv(file:Union[str,Path],has_headers:bool=True,ignore_errors:bool=False,sep:str=',',skip_rows:int=0,stop_after_n_rows:Optional[int]=None,cache:bool=True,dtype:Optional[Dict[str,Type['pl.DataType']]]=None,low_memory:bool=False,comment_char:Optional[str]=None,null_values:Optional[Union[str,List[str],Dict[str,str]]]=None)->'pl.LazyFrame'
polars.io.scan_parquet(file:Union[str,Path],stop_after_n_rows:Optional[int]=None,cache:bool=True)->'pl.LazyFrame'
polars.read_csv(file:Union[str,TextIO,Path,BinaryIO],infer_schema_length:int=100,batch_size:int=8192,has_headers:bool=True,ignore_errors:bool=False,stop_after_n_rows:Optional[int]=None,skip_rows:int=0,projection:Optional[List[int]]=None,sep:str=',',columns:Optional[List[str]]=None,rechunk:bool=True,encoding:str='utf8',n_threads:Optional[int]=None,dtype:Optional[Dict[str,Type['pl.DataType']]]=None,new_columns:Optional[List[str]]=None,use_pyarrow:bool=False,low_memory:bool=False,comment_char:Optional[str]=None,storage_options:Optional[Dict]=None,null_values:Optional[Union[str,List[str],Dict[str,str]]]=None)->'pl.DataFrame'
polars.read_ipc(file:Union[str,BinaryIO,Path],use_pyarrow:bool=True,storage_options:Optional[Dict]=None)->'pl.DataFrame'
polars.read_json(source:Union[str,BytesIO])->'pl.DataFrame'
polars.read_parquet(source:Union[str,List[str],Path,BinaryIO],stop_after_n_rows:Optional[int]=None,memory_map:bool=True,columns:Optional[List[str]]=None,storage_options:Optional[Dict]=None,**kwargs:Any)->'pl.DataFrame'
polars.read_sql(sql:Union[List[str],str],connection_uri:str,partition_on:Optional[str]=None,partition_range:Optional[Tuple[int,int]]=None,partition_num:Optional[int]=None)->'pl.DataFrame'
polars.scan_csv(file:Union[str,Path],has_headers:bool=True,ignore_errors:bool=False,sep:str=',',skip_rows:int=0,stop_after_n_rows:Optional[int]=None,cache:bool=True,dtype:Optional[Dict[str,Type['pl.DataType']]]=None,low_memory:bool=False,comment_char:Optional[str]=None,null_values:Optional[Union[str,List[str],Dict[str,str]]]=None)->'pl.LazyFrame'
polars.scan_parquet(file:Union[str,Path],stop_after_n_rows:Optional[int]=None,cache:bool=True)->'pl.LazyFrame'


----------------------------------------/home/zhang/Packages/polars/polars0.8.13b1/datatypes.py----------------------------------------
polars.Boolean(DataType)
polars.Categorical(DataType)
polars.DataType
polars.Date32(DataType)
polars.Date64(DataType)
polars.DurationMicrosecond(DataType)
polars.DurationMillisecond(DataType)
polars.DurationNanosecond(DataType)
polars.DurationSecond(DataType)
polars.Float32(DataType)
polars.Float64(DataType)
polars.Int16(DataType)
polars.Int32(DataType)
polars.Int64(DataType)
polars.Int8(DataType)
polars.List(DataType)
polars.Object(DataType)
polars.Time32Millisecond(DataType)
polars.Time32Second(DataType)
polars.Time64Microsecond(DataType)
polars.Time64Nanosecond(DataType)
polars.TimestampMicrosecond(DataType)
polars.TimestampMillisecond(DataType)
polars.TimestampNanosecond(DataType)
polars.TimestampSecond(DataType)
polars.UInt16(DataType)
polars.UInt32(DataType)
polars.UInt64(DataType)
polars.UInt8(DataType)
polars.Utf8(DataType)
polars.datatypes.Boolean(DataType)
polars.datatypes.Categorical(DataType)
polars.datatypes.DataType
polars.datatypes.Date32(DataType)
polars.datatypes.Date64(DataType)
polars.datatypes.DurationMicrosecond(DataType)
polars.datatypes.DurationMillisecond(DataType)
polars.datatypes.DurationNanosecond(DataType)
polars.datatypes.DurationSecond(DataType)
polars.datatypes.Float32(DataType)
polars.datatypes.Float64(DataType)
polars.datatypes.Int16(DataType)
polars.datatypes.Int32(DataType)
polars.datatypes.Int64(DataType)
polars.datatypes.Int8(DataType)
polars.datatypes.List(DataType)
polars.datatypes.Object(DataType)
polars.datatypes.Time32Millisecond(DataType)
polars.datatypes.Time32Second(DataType)
polars.datatypes.Time64Microsecond(DataType)
polars.datatypes.Time64Nanosecond(DataType)
polars.datatypes.TimestampMicrosecond(DataType)
polars.datatypes.TimestampMillisecond(DataType)
polars.datatypes.TimestampNanosecond(DataType)
polars.datatypes.TimestampSecond(DataType)
polars.datatypes.UInt16(DataType)
polars.datatypes.UInt32(DataType)
polars.datatypes.UInt64(DataType)
polars.datatypes.UInt8(DataType)
polars.datatypes.Utf8(DataType)
polars.datatypes.dtype_to_ctype(dtype:Type[DataType])->Type[_SimpleCData]
polars.datatypes.dtype_to_primitive(dtype:Type[DataType])->Type[DataType]
polars.datatypes.pytype_to_polars_type(data_type:Type[Any])->Type[DataType]
polars.dtype_to_ctype(dtype:Type[DataType])->Type[_SimpleCData]
polars.dtype_to_primitive(dtype:Type[DataType])->Type[DataType]
polars.pytype_to_polars_type(data_type:Type[Any])->Type[DataType]


----------------------------------------/home/zhang/Packages/polars/polars0.8.13b1/eager/series.py----------------------------------------
A:polars.eager.series.fname->name.replace('<>', ffi_name)
A:polars.eager.series.values->numpy.array(values)
A:polars.eager.series.self._s->polars.PySeries.new_object(name, values)
A:polars.eager.series.dtype->kwargs.pop('dtype')
A:polars.eager.series.arrow_array->pyarrow.array(values, pa.large_list(pa.large_utf8()))
A:polars.eager.series.s->wrap_s(self._s)
A:polars.eager.series.value_dtype->_find_first_non_none(dtype)
A:polars.eager.series.self->Series.__new__(Series)
A:polars.eager.series.array->_ptr_to_numpy(ptr, self.len(), ptr_type)
A:polars.eager.series.other->Series('', other)
A:polars.eager.series.f->get_ffi_func('parse_<>_from_str_slice', dtype, PySeries)
A:polars.eager.series.primitive->dtype_to_primitive(self.dtype)
A:polars.eager.series.(start, stop, stride)->item.indices(self.len())
A:polars.eager.series.out->int(s.mean())
A:polars.eager.series.predicate->Series('', predicate)
A:polars.eager.series.indices->numpy.array(indices)
A:polars.eager.series.opt_s->Series.__new__(Series)._s.rechunk(in_place)
A:polars.eager.series.ptr_type->dtype_to_ctype(self.dtype)
A:polars.eager.series.ptr->Series.__new__(Series)._s.as_single_ptr()
A:polars.eager.series.series->Series.__new__(Series).clone()
A:polars.eager.series.idx_array->numpy.array(idx, dtype=np.uint64)
polars.DateTimeNameSpace(self,series:Series)
polars.DateTimeNameSpace.day(self)->Series
polars.DateTimeNameSpace.hour(self)->Series
polars.DateTimeNameSpace.max(self)->datetime
polars.DateTimeNameSpace.mean(self)->datetime
polars.DateTimeNameSpace.median(self)->datetime
polars.DateTimeNameSpace.min(self)->datetime
polars.DateTimeNameSpace.minute(self)->Series
polars.DateTimeNameSpace.month(self)->Series
polars.DateTimeNameSpace.nanosecond(self)->Series
polars.DateTimeNameSpace.ordinal_day(self)->Series
polars.DateTimeNameSpace.round(self,rule:str,n:int)->Series
polars.DateTimeNameSpace.second(self)->Series
polars.DateTimeNameSpace.strftime(self,fmt:str)->Series
polars.DateTimeNameSpace.timestamp(self)->Series
polars.DateTimeNameSpace.to_python_datetime(self)->Series
polars.DateTimeNameSpace.week(self)->Series
polars.DateTimeNameSpace.weekday(self)->Series
polars.DateTimeNameSpace.year(self)->Series
polars.Series(self,name:Optional[Union[str,ArrayLike]]=None,values:Optional[ArrayLike]=None,nullable:bool=True,dtype:Optional[Type[DataType]]=None)
polars.Series.__add__(self,other:Any)->'Series'
polars.Series.__and__(self,other:'Series')->'Series'
polars.Series.__array_ufunc__(self,ufunc:Callable[...,Any],method:str,*inputs:Any,**kwargs:Any)->'Series'
polars.Series.__eq__(self,other:Any)->'Series'
polars.Series.__floordiv__(self,other:Any)->'Series'
polars.Series.__ge__(self,other:Any)->'Series'
polars.Series.__getitem__(self,item:Any)->Any
polars.Series.__gt__(self,other:Any)->'Series'
polars.Series.__invert__(self)->'Series'
polars.Series.__iter__(self)->'SeriesIter'
polars.Series.__le__(self,other:Any)->'Series'
polars.Series.__len__(self)->int
polars.Series.__lt__(self,other:Any)->'Series'
polars.Series.__mul__(self,other:Any)->'Series'
polars.Series.__ne__(self,other:Any)->'Series'
polars.Series.__or__(self,other:'Series')->'Series'
polars.Series.__radd__(self,other:Any)->'Series'
polars.Series.__repr__(self)->str
polars.Series.__rfloordiv__(self,other:Any)->'Series'
polars.Series.__rmul__(self,other:Any)->'Series'
polars.Series.__rsub__(self,other:Any)->'Series'
polars.Series.__rtruediv__(self,other:Any)->np.ndarray
polars.Series.__setitem__(self,key:Any,value:Any)->None
polars.Series.__str__(self)->str
polars.Series.__sub__(self,other:Any)->'Series'
polars.Series.__truediv__(self,other:Any)->'Series'
polars.Series._from_pyseries(s:'PySeries')->'Series'
polars.Series._repeat(name:str,val:str,n:int)->'Series'
polars.Series.append(self,other:'Series')->None
polars.Series.apply(self,func:Callable[[Any],Any],return_dtype:Optional[Type[DataType]]=None)->'Series'
polars.Series.arg_max(self)->Optional[int]
polars.Series.arg_min(self)->Optional[int]
polars.Series.arg_sort(self,reverse:bool=False)->'Series'
polars.Series.arg_true(self)->'Series'
polars.Series.arg_unique(self)->'Series'
polars.Series.argsort(self,reverse:bool=False)->'Series'
polars.Series.as_duration(self)->'Series'
polars.Series.cast(self,data_type:Type[DataType])->'Series'
polars.Series.chunk_lengths(self)->tp.List[int]
polars.Series.clone(self)->'Series'
polars.Series.cum_max(self,reverse:bool=False)->Union[int, float]
polars.Series.cum_min(self,reverse:bool=False)->Union[int, float]
polars.Series.cum_sum(self,reverse:bool=False)->Union[int, float]
polars.Series.describe(self)->Dict[str, Union[int, float]]
polars.Series.dot(self,other:'Series')->Optional[float]
polars.Series.drop_nulls(self)->'Series'
polars.Series.dt(self)->'DateTimeNameSpace'
polars.Series.dtype(self)->Type[DataType]
polars.Series.explode(self)->'Series'
polars.Series.fill_none(self,strategy:str)->'Series'
polars.Series.filter(self,predicate:'Series')->'Series'
polars.Series.from_arrow(name:str,array:pa.Array)->'Series'
polars.Series.hash(self,k0:int=0,k1:int=1,k2:int=2,k3:int=3)->'pl.Series'
polars.Series.head(self,length:Optional[int]=None)->'Series'
polars.Series.inner(self)->'PySeries'
polars.Series.is_boolean(self)->bool
polars.Series.is_duplicated(self)->'Series'
polars.Series.is_finite(self)->'Series'
polars.Series.is_first(self)->'Series'
polars.Series.is_float(self)->bool
polars.Series.is_in(self,other:'Series')->'Series'
polars.Series.is_infinite(self)->'Series'
polars.Series.is_nan(self)->'Series'
polars.Series.is_not_nan(self)->'Series'
polars.Series.is_not_null(self)->'Series'
polars.Series.is_null(self)->'Series'
polars.Series.is_numeric(self)->bool
polars.Series.is_unique(self)->'Series'
polars.Series.is_utf8(self)->bool
polars.Series.len(self)->int
polars.Series.limit(self,num_elements:int=10)->'Series'
polars.Series.max(self)->Union[int, float]
polars.Series.mean(self)->Union[int, float]
polars.Series.median(self)->float
polars.Series.min(self)->Union[int, float]
polars.Series.n_chunks(self)->int
polars.Series.n_unique(self)->int
polars.Series.name(self)->str
polars.Series.null_count(self)->int
polars.Series.parse_date(name:str,values:Sequence[str],dtype:Type[DataType],fmt:str)->'Series'
polars.Series.peak_max(self)->'Series'
polars.Series.peak_min(self)->'Series'
polars.Series.quantile(self,quantile:float)->float
polars.Series.rechunk(self,in_place:bool=False)->Optional['Series']
polars.Series.reinterpret(self,signed:bool=True)->'Series'
polars.Series.rename(self,name:str,in_place:bool=False)->Optional['Series']
polars.Series.rolling_max(self,window_size:int,weight:Optional[tp.List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.Series.rolling_mean(self,window_size:int,weight:Optional[tp.List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.Series.rolling_min(self,window_size:int,weight:Optional[tp.List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.Series.rolling_sum(self,window_size:int,weight:Optional[tp.List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.Series.round(self,decimals:int)->'Series'
polars.Series.sample(self,n:Optional[int]=None,frac:Optional[float]=None,with_replacement:bool=False)->'Series'
polars.Series.series_equal(self,other:'Series',null_equal:bool=False)->bool
polars.Series.set(self,filter:'Series',value:Union[int,float])->'Series'
polars.Series.set_at_idx(self,idx:Union['Series',np.ndarray],value:Union[int,float])->'Series'
polars.Series.shape(self)->Tuple[int]
polars.Series.shift(self,periods:int)->'Series'
polars.Series.shrink_to_fit(self,in_place:bool=False)->Optional['Series']
polars.Series.slice(self,offset:int,length:int)->'Series'
polars.Series.sort(self,in_place:bool=False,reverse:bool=False)->Optional['Series']
polars.Series.std(self,ddof:int=1)->float
polars.Series.str(self)->'StringNameSpace'
polars.Series.sum(self)->Union[int, float]
polars.Series.tail(self,length:Optional[int]=None)->'Series'
polars.Series.take(self,indices:Union[np.ndarray,tp.List[int]])->'Series'
polars.Series.take_every(self,n:int)->'Series'
polars.Series.to_arrow(self)->pa.Array
polars.Series.to_dummies(self)->'pl.DataFrame'
polars.Series.to_frame(self)->'pl.DataFrame'
polars.Series.to_list(self)->tp.List[Optional[Any]]
polars.Series.to_numpy(self,*args:Any,zero_copy_only:bool=False,**kwargs:Any)->np.ndarray
polars.Series.unique(self)->'Series'
polars.Series.value_counts(self)->'pl.DataFrame'
polars.Series.var(self,ddof:int=1)->float
polars.Series.view(self,ignore_nulls:bool=False)->np.ndarray
polars.Series.zip_with(self,mask:'Series',other:'Series')->'Series'
polars.SeriesIter(self,length:int,s:Series)
polars.SeriesIter.__iter__(self)->'SeriesIter'
polars.SeriesIter.__next__(self)->Any
polars.StringNameSpace(self,series:'Series')
polars.StringNameSpace.contains(self,pattern:str)->Series
polars.StringNameSpace.lengths(self)->Series
polars.StringNameSpace.lstrip(self)->Series
polars.StringNameSpace.replace(self,pattern:str,value:str)->Series
polars.StringNameSpace.replace_all(self,pattern:str,value:str)->Series
polars.StringNameSpace.rstrip(self)->Series
polars.StringNameSpace.slice(self,start:int,length:Optional[int]=None)->Series
polars.StringNameSpace.strptime(self,datatype:DataType,fmt:Optional[str]=None)->Series
polars.StringNameSpace.to_lowercase(self)->Series
polars.StringNameSpace.to_uppercase(self)->Series
polars._find_first_non_none(a:Sequence[Optional[Any]])->Any
polars._to_python_datetime(value:Union[int,float],dtype:Type[DataType])->datetime
polars.eager.series.DateTimeNameSpace(self,series:Series)
polars.eager.series.DateTimeNameSpace.__init__(self,series:Series)
polars.eager.series.DateTimeNameSpace.day(self)->Series
polars.eager.series.DateTimeNameSpace.hour(self)->Series
polars.eager.series.DateTimeNameSpace.max(self)->datetime
polars.eager.series.DateTimeNameSpace.mean(self)->datetime
polars.eager.series.DateTimeNameSpace.median(self)->datetime
polars.eager.series.DateTimeNameSpace.min(self)->datetime
polars.eager.series.DateTimeNameSpace.minute(self)->Series
polars.eager.series.DateTimeNameSpace.month(self)->Series
polars.eager.series.DateTimeNameSpace.nanosecond(self)->Series
polars.eager.series.DateTimeNameSpace.ordinal_day(self)->Series
polars.eager.series.DateTimeNameSpace.round(self,rule:str,n:int)->Series
polars.eager.series.DateTimeNameSpace.second(self)->Series
polars.eager.series.DateTimeNameSpace.strftime(self,fmt:str)->Series
polars.eager.series.DateTimeNameSpace.timestamp(self)->Series
polars.eager.series.DateTimeNameSpace.to_python_datetime(self)->Series
polars.eager.series.DateTimeNameSpace.week(self)->Series
polars.eager.series.DateTimeNameSpace.weekday(self)->Series
polars.eager.series.DateTimeNameSpace.year(self)->Series
polars.eager.series.Series(self,name:Optional[Union[str,ArrayLike]]=None,values:Optional[ArrayLike]=None,nullable:bool=True,dtype:Optional[Type[DataType]]=None)
polars.eager.series.Series.__add__(self,other:Any)->'Series'
polars.eager.series.Series.__and__(self,other:'Series')->'Series'
polars.eager.series.Series.__array_ufunc__(self,ufunc:Callable[...,Any],method:str,*inputs:Any,**kwargs:Any)->'Series'
polars.eager.series.Series.__eq__(self,other:Any)->'Series'
polars.eager.series.Series.__floordiv__(self,other:Any)->'Series'
polars.eager.series.Series.__ge__(self,other:Any)->'Series'
polars.eager.series.Series.__getitem__(self,item:Any)->Any
polars.eager.series.Series.__gt__(self,other:Any)->'Series'
polars.eager.series.Series.__init__(self,name:Optional[Union[str,ArrayLike]]=None,values:Optional[ArrayLike]=None,nullable:bool=True,dtype:Optional[Type[DataType]]=None)
polars.eager.series.Series.__invert__(self)->'Series'
polars.eager.series.Series.__iter__(self)->'SeriesIter'
polars.eager.series.Series.__le__(self,other:Any)->'Series'
polars.eager.series.Series.__len__(self)->int
polars.eager.series.Series.__lt__(self,other:Any)->'Series'
polars.eager.series.Series.__mul__(self,other:Any)->'Series'
polars.eager.series.Series.__ne__(self,other:Any)->'Series'
polars.eager.series.Series.__or__(self,other:'Series')->'Series'
polars.eager.series.Series.__radd__(self,other:Any)->'Series'
polars.eager.series.Series.__repr__(self)->str
polars.eager.series.Series.__rfloordiv__(self,other:Any)->'Series'
polars.eager.series.Series.__rmul__(self,other:Any)->'Series'
polars.eager.series.Series.__rsub__(self,other:Any)->'Series'
polars.eager.series.Series.__rtruediv__(self,other:Any)->np.ndarray
polars.eager.series.Series.__setitem__(self,key:Any,value:Any)->None
polars.eager.series.Series.__str__(self)->str
polars.eager.series.Series.__sub__(self,other:Any)->'Series'
polars.eager.series.Series.__truediv__(self,other:Any)->'Series'
polars.eager.series.Series._from_pyseries(s:'PySeries')->'Series'
polars.eager.series.Series._repeat(name:str,val:str,n:int)->'Series'
polars.eager.series.Series.append(self,other:'Series')->None
polars.eager.series.Series.apply(self,func:Callable[[Any],Any],return_dtype:Optional[Type[DataType]]=None)->'Series'
polars.eager.series.Series.arg_max(self)->Optional[int]
polars.eager.series.Series.arg_min(self)->Optional[int]
polars.eager.series.Series.arg_sort(self,reverse:bool=False)->'Series'
polars.eager.series.Series.arg_true(self)->'Series'
polars.eager.series.Series.arg_unique(self)->'Series'
polars.eager.series.Series.argsort(self,reverse:bool=False)->'Series'
polars.eager.series.Series.as_duration(self)->'Series'
polars.eager.series.Series.cast(self,data_type:Type[DataType])->'Series'
polars.eager.series.Series.chunk_lengths(self)->tp.List[int]
polars.eager.series.Series.clone(self)->'Series'
polars.eager.series.Series.cum_max(self,reverse:bool=False)->Union[int, float]
polars.eager.series.Series.cum_min(self,reverse:bool=False)->Union[int, float]
polars.eager.series.Series.cum_sum(self,reverse:bool=False)->Union[int, float]
polars.eager.series.Series.describe(self)->Dict[str, Union[int, float]]
polars.eager.series.Series.dot(self,other:'Series')->Optional[float]
polars.eager.series.Series.drop_nulls(self)->'Series'
polars.eager.series.Series.dt(self)->'DateTimeNameSpace'
polars.eager.series.Series.dtype(self)->Type[DataType]
polars.eager.series.Series.explode(self)->'Series'
polars.eager.series.Series.fill_none(self,strategy:str)->'Series'
polars.eager.series.Series.filter(self,predicate:'Series')->'Series'
polars.eager.series.Series.from_arrow(name:str,array:pa.Array)->'Series'
polars.eager.series.Series.hash(self,k0:int=0,k1:int=1,k2:int=2,k3:int=3)->'pl.Series'
polars.eager.series.Series.head(self,length:Optional[int]=None)->'Series'
polars.eager.series.Series.inner(self)->'PySeries'
polars.eager.series.Series.is_boolean(self)->bool
polars.eager.series.Series.is_duplicated(self)->'Series'
polars.eager.series.Series.is_finite(self)->'Series'
polars.eager.series.Series.is_first(self)->'Series'
polars.eager.series.Series.is_float(self)->bool
polars.eager.series.Series.is_in(self,other:'Series')->'Series'
polars.eager.series.Series.is_infinite(self)->'Series'
polars.eager.series.Series.is_nan(self)->'Series'
polars.eager.series.Series.is_not_nan(self)->'Series'
polars.eager.series.Series.is_not_null(self)->'Series'
polars.eager.series.Series.is_null(self)->'Series'
polars.eager.series.Series.is_numeric(self)->bool
polars.eager.series.Series.is_unique(self)->'Series'
polars.eager.series.Series.is_utf8(self)->bool
polars.eager.series.Series.len(self)->int
polars.eager.series.Series.limit(self,num_elements:int=10)->'Series'
polars.eager.series.Series.max(self)->Union[int, float]
polars.eager.series.Series.mean(self)->Union[int, float]
polars.eager.series.Series.median(self)->float
polars.eager.series.Series.min(self)->Union[int, float]
polars.eager.series.Series.n_chunks(self)->int
polars.eager.series.Series.n_unique(self)->int
polars.eager.series.Series.name(self)->str
polars.eager.series.Series.null_count(self)->int
polars.eager.series.Series.parse_date(name:str,values:Sequence[str],dtype:Type[DataType],fmt:str)->'Series'
polars.eager.series.Series.peak_max(self)->'Series'
polars.eager.series.Series.peak_min(self)->'Series'
polars.eager.series.Series.quantile(self,quantile:float)->float
polars.eager.series.Series.rechunk(self,in_place:bool=False)->Optional['Series']
polars.eager.series.Series.reinterpret(self,signed:bool=True)->'Series'
polars.eager.series.Series.rename(self,name:str,in_place:bool=False)->Optional['Series']
polars.eager.series.Series.rolling_max(self,window_size:int,weight:Optional[tp.List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.eager.series.Series.rolling_mean(self,window_size:int,weight:Optional[tp.List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.eager.series.Series.rolling_min(self,window_size:int,weight:Optional[tp.List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.eager.series.Series.rolling_sum(self,window_size:int,weight:Optional[tp.List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.eager.series.Series.round(self,decimals:int)->'Series'
polars.eager.series.Series.sample(self,n:Optional[int]=None,frac:Optional[float]=None,with_replacement:bool=False)->'Series'
polars.eager.series.Series.series_equal(self,other:'Series',null_equal:bool=False)->bool
polars.eager.series.Series.set(self,filter:'Series',value:Union[int,float])->'Series'
polars.eager.series.Series.set_at_idx(self,idx:Union['Series',np.ndarray],value:Union[int,float])->'Series'
polars.eager.series.Series.shape(self)->Tuple[int]
polars.eager.series.Series.shift(self,periods:int)->'Series'
polars.eager.series.Series.shrink_to_fit(self,in_place:bool=False)->Optional['Series']
polars.eager.series.Series.slice(self,offset:int,length:int)->'Series'
polars.eager.series.Series.sort(self,in_place:bool=False,reverse:bool=False)->Optional['Series']
polars.eager.series.Series.std(self,ddof:int=1)->float
polars.eager.series.Series.str(self)->'StringNameSpace'
polars.eager.series.Series.sum(self)->Union[int, float]
polars.eager.series.Series.tail(self,length:Optional[int]=None)->'Series'
polars.eager.series.Series.take(self,indices:Union[np.ndarray,tp.List[int]])->'Series'
polars.eager.series.Series.take_every(self,n:int)->'Series'
polars.eager.series.Series.to_arrow(self)->pa.Array
polars.eager.series.Series.to_dummies(self)->'pl.DataFrame'
polars.eager.series.Series.to_frame(self)->'pl.DataFrame'
polars.eager.series.Series.to_list(self)->tp.List[Optional[Any]]
polars.eager.series.Series.to_numpy(self,*args:Any,zero_copy_only:bool=False,**kwargs:Any)->np.ndarray
polars.eager.series.Series.unique(self)->'Series'
polars.eager.series.Series.value_counts(self)->'pl.DataFrame'
polars.eager.series.Series.var(self,ddof:int=1)->float
polars.eager.series.Series.view(self,ignore_nulls:bool=False)->np.ndarray
polars.eager.series.Series.zip_with(self,mask:'Series',other:'Series')->'Series'
polars.eager.series.SeriesIter(self,length:int,s:Series)
polars.eager.series.SeriesIter.__init__(self,length:int,s:Series)
polars.eager.series.SeriesIter.__iter__(self)->'SeriesIter'
polars.eager.series.SeriesIter.__next__(self)->Any
polars.eager.series.StringNameSpace(self,series:'Series')
polars.eager.series.StringNameSpace.__init__(self,series:'Series')
polars.eager.series.StringNameSpace.contains(self,pattern:str)->Series
polars.eager.series.StringNameSpace.lengths(self)->Series
polars.eager.series.StringNameSpace.lstrip(self)->Series
polars.eager.series.StringNameSpace.replace(self,pattern:str,value:str)->Series
polars.eager.series.StringNameSpace.replace_all(self,pattern:str,value:str)->Series
polars.eager.series.StringNameSpace.rstrip(self)->Series
polars.eager.series.StringNameSpace.slice(self,start:int,length:Optional[int]=None)->Series
polars.eager.series.StringNameSpace.strptime(self,datatype:DataType,fmt:Optional[str]=None)->Series
polars.eager.series.StringNameSpace.to_lowercase(self)->Series
polars.eager.series.StringNameSpace.to_uppercase(self)->Series
polars.eager.series._find_first_non_none(a:Sequence[Optional[Any]])->Any
polars.eager.series._to_python_datetime(value:Union[int,float],dtype:Type[DataType])->datetime
polars.eager.series.get_ffi_func(name:str,dtype:Type['DataType'],obj:Optional['Series']=None,default:Optional[Callable[[Any],Any]]=None)->Callable[..., Any]
polars.eager.series.out_to_dtype(out:Any)->Union[Type[DataType], Type[np.ndarray]]
polars.eager.series.wrap_s(s:'PySeries')->'Series'
polars.get_ffi_func(name:str,dtype:Type['DataType'],obj:Optional['Series']=None,default:Optional[Callable[[Any],Any]]=None)->Callable[..., Any]
polars.out_to_dtype(out:Any)->Union[Type[DataType], Type[np.ndarray]]
polars.wrap_s(s:'PySeries')->'Series'


----------------------------------------/home/zhang/Packages/polars/polars0.8.13b1/eager/frame.py----------------------------------------
A:polars.eager.frame.other->_prepare_other_arg(other)
A:polars.eager.frame.s->self.agg_list().drop_in_place(name + '_agg_list').apply(func, return_dtype)
A:polars.eager.frame.self._df->polars.PyDataFrame.from_arrow_record_batches(batches)
A:polars.eager.frame.self.columns->list(column_names)
A:polars.eager.frame.self->DataFrame.__new__(DataFrame)
A:polars.eager.frame.file->str(file)
A:polars.eager.frame.processed_null_values->_process_null_values(null_values)
A:polars.eager.frame.tbl->pyarrow.table(data)
A:polars.eager.frame.column->pyarrow.compute.cast(column, pa.timestamp('ms', None))
A:polars.eager.frame.table->pyarrow.table(data)
A:polars.eager.frame.batches->pyarrow.table(data).to_batches()
A:polars.eager.frame.record_batches->DataFrame.__new__(DataFrame)._df.to_arrow()
A:polars.eager.frame.buffer->BytesIO()
A:polars.eager.frame.item->polars.Series('', item)
A:polars.eager.frame.start->DataFrame.__new__(DataFrame).find_idx_by_name(col_selection.start)
A:polars.eager.frame.col_selection->slice(start, stop, col_selection.step)
A:polars.eager.frame.df->DataFrame.__new__(DataFrame).agg_list()
A:polars.eager.frame.series->DataFrame.__new__(DataFrame).select_at_idx(col_selection)
A:polars.eager.frame.max_cols->int(os.environ.get('POLARS_FMT_MAX_COLS', default=75))
A:polars.eager.frame.max_rows->int(os.environ.get('POLARS_FMT_MAX_rows', 25))
A:polars.eager.frame.summary->polars.functions.concat([describe_cast(self.mean()), describe_cast(self.std()), describe_cast(self.min()), describe_cast(self.max()), describe_cast(self.median())])
A:polars.eager.frame.columns->columns.get_columns().get_columns()
A:polars.eager.frame.acc->operation(acc, df.select_at_idx(i))
A:polars.eager.frame.groups_df->DataFrame.__new__(DataFrame).groups()
polars.DataFrame(self,data:Optional[Union[Dict[str,Sequence[Any]],Sequence[Any],np.ndarray,'pd.DataFrame','pl.Series']]=None,columns:Optional[Sequence[str]]=None,orientation:Optional[str]=None,nullable:bool=True)
polars.DataFrame.__add__(self,other:Any)->'DataFrame'
polars.DataFrame.__getattr__(self,item:Any)->'PySeries'
polars.DataFrame.__getitem__(self,item:Any)->Any
polars.DataFrame.__iter__(self)->Iterator[Any]
polars.DataFrame.__len__(self)->int
polars.DataFrame.__mul__(self,other:Any)->'DataFrame'
polars.DataFrame.__repr__(self)->str
polars.DataFrame.__setitem__(self,key:Union[str,int,Tuple[Any,Any]],value:Any)->None
polars.DataFrame.__str__(self)->str
polars.DataFrame.__sub__(self,other:Any)->'DataFrame'
polars.DataFrame.__truediv__(self,other:Any)->'DataFrame'
polars.DataFrame._from_pydf(df:'PyDataFrame')->'DataFrame'
polars.DataFrame._pos_idx(self,idx:int,dim:int)->int
polars.DataFrame._repr_html_(self)->str
polars.DataFrame.apply(self,f:Callable[[Tuple[Any]],Any],return_dtype:Optional[Type[DataType]]=None)->'pl.Series'
polars.DataFrame.clone(self)->'DataFrame'
polars.DataFrame.columns(self)->tp.List[str]
polars.DataFrame.columns(self,columns:tp.List[str])->None
polars.DataFrame.describe(self)->'DataFrame'
polars.DataFrame.downsample(self,by:Union[str,tp.List[str]],rule:str,n:int)->'GroupBy'
polars.DataFrame.drop(self,name:Union[str,tp.List[str]])->'DataFrame'
polars.DataFrame.drop_duplicates(self,maintain_order:bool=True,subset:Optional[Union[str,tp.List[str]]]=None)->'DataFrame'
polars.DataFrame.drop_in_place(self,name:str)->'pl.Series'
polars.DataFrame.drop_nulls(self,subset:Optional[tp.List[str]]=None)->'DataFrame'
polars.DataFrame.dtypes(self)->tp.List[Type[DataType]]
polars.DataFrame.explode(self,columns:Union[str,tp.List[str]])->'DataFrame'
polars.DataFrame.fill_none(self,strategy:Union[str,'pl.Expr'])->'DataFrame'
polars.DataFrame.filter(self,predicate:'pl.Expr')->'DataFrame'
polars.DataFrame.find_idx_by_name(self,name:str)->int
polars.DataFrame.fold(self,operation:Callable[['pl.Series','pl.Series'],'pl.Series'])->'pl.Series'
polars.DataFrame.frame_equal(self,other:'DataFrame',null_equal:bool=False)->bool
polars.DataFrame.from_arrow(table:pa.Table,rechunk:bool=True)->'DataFrame'
polars.DataFrame.from_rows(rows:Sequence[Sequence[Any]],column_names:Optional[Sequence[str]]=None,column_name_mapping:Optional[Dict[int,str]]=None)->'DataFrame'
polars.DataFrame.get_columns(self)->tp.List['pl.Series']
polars.DataFrame.groupby(self,by:Union[str,tp.List[str]])->'GroupBy'
polars.DataFrame.hash_rows(self,k0:int=0,k1:int=1,k2:int=2,k3:int=3)->'pl.Series'
polars.DataFrame.head(self,length:int=5)->'DataFrame'
polars.DataFrame.height(self)->int
polars.DataFrame.hstack(self,columns:Union[tp.List['pl.Series'],'DataFrame'],in_place:bool=False)->Optional['DataFrame']
polars.DataFrame.insert_at_idx(self,index:int,series:'pl.Series')->None
polars.DataFrame.is_duplicated(self)->'pl.Series'
polars.DataFrame.is_unique(self)->'pl.Series'
polars.DataFrame.join(self,df:'DataFrame',left_on:Optional[Union[str,'pl.Expr',tp.List[str],tp.List['pl.Expr']]]=None,right_on:Optional[Union[str,'pl.Expr',tp.List[str],tp.List['pl.Expr']]]=None,on:Optional[Union[str,tp.List[str]]]=None,how:str='inner')->Union['DataFrame', 'pl.LazyFrame']
polars.DataFrame.lazy(self)->'pl.LazyFrame'
polars.DataFrame.limit(self,length:int=5)->'DataFrame'
polars.DataFrame.max(self,axis:int=0)->'DataFrame'
polars.DataFrame.mean(self,axis:int=0)->'DataFrame'
polars.DataFrame.median(self)->'DataFrame'
polars.DataFrame.melt(self,id_vars:Union[tp.List[str],str],value_vars:Union[tp.List[str],str])->'DataFrame'
polars.DataFrame.min(self,axis:int=0)->'DataFrame'
polars.DataFrame.n_chunks(self)->int
polars.DataFrame.null_count(self)->'DataFrame'
polars.DataFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.DataFrame.quantile(self,quantile:float)->'DataFrame'
polars.DataFrame.read_csv(file:Union[str,BinaryIO,bytes],infer_schema_length:int=100,batch_size:int=64,has_headers:bool=True,ignore_errors:bool=False,stop_after_n_rows:Optional[int]=None,skip_rows:int=0,projection:Optional[tp.List[int]]=None,sep:str=',',columns:Optional[tp.List[str]]=None,rechunk:bool=True,encoding:str='utf8',n_threads:Optional[int]=None,dtype:Optional[Dict[str,Type[DataType]]]=None,low_memory:bool=False,comment_char:Optional[str]=None,null_values:Optional[Union[str,tp.List[str],Dict[str,str]]]=None)->'DataFrame'
polars.DataFrame.read_ipc(file:Union[str,BinaryIO],use_pyarrow:bool=True)->'DataFrame'
polars.DataFrame.read_json(file:Union[str,BytesIO])->'DataFrame'
polars.DataFrame.read_parquet(file:Union[str,BinaryIO],stop_after_n_rows:Optional[int]=None,use_pyarrow:bool=False)->'DataFrame'
polars.DataFrame.rechunk(self)->'DataFrame'
polars.DataFrame.rename(self,mapping:Dict[str,str])->'DataFrame'
polars.DataFrame.replace(self,column:str,new_col:'pl.Series')->None
polars.DataFrame.replace_at_idx(self,index:int,series:'pl.Series')->None
polars.DataFrame.row(self,index:int)->Tuple[Any]
polars.DataFrame.rows(self)->tp.List[Tuple[Any]]
polars.DataFrame.sample(self,n:Optional[int]=None,frac:Optional[float]=None,with_replacement:bool=False)->'DataFrame'
polars.DataFrame.select(self,exprs:Union[str,'pl.Expr',Sequence[str],Sequence['pl.Expr']])->'DataFrame'
polars.DataFrame.select_at_idx(self,idx:int)->'pl.Series'
polars.DataFrame.shape(self)->Tuple[int, int]
polars.DataFrame.shift(self,periods:int)->'DataFrame'
polars.DataFrame.shift_and_fill(self,periods:int,fill_value:Union[int,str,float])->'DataFrame'
polars.DataFrame.shrink_to_fit(self,in_place:bool=False)->Optional['DataFrame']
polars.DataFrame.slice(self,offset:int,length:int)->'DataFrame'
polars.DataFrame.sort(self,by:Union[str,'pl.Expr',tp.List['pl.Expr']],in_place:bool=False,reverse:Union[bool,tp.List[bool]]=False)->Optional['DataFrame']
polars.DataFrame.std(self)->'DataFrame'
polars.DataFrame.sum(self,axis:int=0)->'DataFrame'
polars.DataFrame.tail(self,length:int=5)->'DataFrame'
polars.DataFrame.to_arrow(self)->pa.Table
polars.DataFrame.to_csv(self,file:Optional[Union[TextIO,str,Path]]=None,has_headers:bool=True,delimiter:str=',')->Optional[str]
polars.DataFrame.to_dummies(self)->'DataFrame'
polars.DataFrame.to_ipc(self,file:Union[BinaryIO,str,Path])->None
polars.DataFrame.to_json(self,file:Optional[Union[BytesIO,str,Path]]=None,pretty:bool=False,to_string:bool=False)->Optional[str]
polars.DataFrame.to_numpy(self)->np.ndarray
polars.DataFrame.to_pandas(self,*args:Any,date_as_object:bool=False,**kwargs:Any)->'pd.DataFrame'
polars.DataFrame.to_parquet(self,file:Union[str,Path],compression:str='snappy',use_pyarrow:bool=True,**kwargs:Any)->None
polars.DataFrame.var(self)->'DataFrame'
polars.DataFrame.vstack(self,df:'DataFrame',in_place:bool=False)->Optional['DataFrame']
polars.DataFrame.width(self)->int
polars.DataFrame.with_column(self,column:Union['pl.Series','pl.Expr'])->'DataFrame'
polars.DataFrame.with_columns(self,exprs:Union['pl.Expr',tp.List['pl.Expr']])->'DataFrame'
polars.GBSelection(self,df:'PyDataFrame',by:Union[str,tp.List[str]],selection:Optional[tp.List[str]],downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.GBSelection.agg_list(self)->DataFrame
polars.GBSelection.apply(self,func:Callable[[Any],Any],return_dtype:Optional[Type[DataType]]=None)->DataFrame
polars.GBSelection.count(self)->DataFrame
polars.GBSelection.first(self)->DataFrame
polars.GBSelection.last(self)->DataFrame
polars.GBSelection.max(self)->DataFrame
polars.GBSelection.mean(self)->DataFrame
polars.GBSelection.median(self)->DataFrame
polars.GBSelection.min(self)->DataFrame
polars.GBSelection.n_unique(self)->DataFrame
polars.GBSelection.quantile(self,quantile:float)->DataFrame
polars.GBSelection.sum(self)->DataFrame
polars.GroupBy(self,df:'PyDataFrame',by:Union[str,tp.List[str]],downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.GroupBy.__getitem__(self,item:Any)->'GBSelection'
polars.GroupBy.__iter__(self)->Iterable[Any]
polars.GroupBy.agg(self,column_to_agg:Union[tp.List[Tuple[str,tp.List[str]]],Dict[str,Union[str,tp.List[str]]],tp.List['pl.Expr'],'pl.Expr'])->DataFrame
polars.GroupBy.agg_list(self)->DataFrame
polars.GroupBy.apply(self,f:Callable[[DataFrame],DataFrame])->DataFrame
polars.GroupBy.count(self)->DataFrame
polars.GroupBy.first(self)->DataFrame
polars.GroupBy.get_group(self,group_value:Union[Any,Tuple[Any]])->DataFrame
polars.GroupBy.groups(self)->DataFrame
polars.GroupBy.last(self)->DataFrame
polars.GroupBy.max(self)->DataFrame
polars.GroupBy.mean(self)->DataFrame
polars.GroupBy.median(self)->DataFrame
polars.GroupBy.min(self)->DataFrame
polars.GroupBy.n_unique(self)->DataFrame
polars.GroupBy.pivot(self,pivot_column:str,values_column:str)->'PivotOps'
polars.GroupBy.quantile(self,quantile:float)->DataFrame
polars.GroupBy.select(self,columns:Union[str,tp.List[str]])->'GBSelection'
polars.GroupBy.select_all(self)->'GBSelection'
polars.GroupBy.sum(self)->DataFrame
polars.PivotOps(self,df:DataFrame,by:Union[str,tp.List[str]],pivot_column:str,values_column:str)
polars.PivotOps.count(self)->DataFrame
polars.PivotOps.first(self)->DataFrame
polars.PivotOps.max(self)->DataFrame
polars.PivotOps.mean(self)->DataFrame
polars.PivotOps.median(self)->DataFrame
polars.PivotOps.min(self)->DataFrame
polars.PivotOps.sum(self)->DataFrame
polars._prepare_other_arg(other:Any)->'pl.Series'
polars.eager.frame.DataFrame(self,data:Optional[Union[Dict[str,Sequence[Any]],Sequence[Any],np.ndarray,'pd.DataFrame','pl.Series']]=None,columns:Optional[Sequence[str]]=None,orientation:Optional[str]=None,nullable:bool=True)
polars.eager.frame.DataFrame.__add__(self,other:Any)->'DataFrame'
polars.eager.frame.DataFrame.__getattr__(self,item:Any)->'PySeries'
polars.eager.frame.DataFrame.__getitem__(self,item:Any)->Any
polars.eager.frame.DataFrame.__init__(self,data:Optional[Union[Dict[str,Sequence[Any]],Sequence[Any],np.ndarray,'pd.DataFrame','pl.Series']]=None,columns:Optional[Sequence[str]]=None,orientation:Optional[str]=None,nullable:bool=True)
polars.eager.frame.DataFrame.__iter__(self)->Iterator[Any]
polars.eager.frame.DataFrame.__len__(self)->int
polars.eager.frame.DataFrame.__mul__(self,other:Any)->'DataFrame'
polars.eager.frame.DataFrame.__repr__(self)->str
polars.eager.frame.DataFrame.__setitem__(self,key:Union[str,int,Tuple[Any,Any]],value:Any)->None
polars.eager.frame.DataFrame.__str__(self)->str
polars.eager.frame.DataFrame.__sub__(self,other:Any)->'DataFrame'
polars.eager.frame.DataFrame.__truediv__(self,other:Any)->'DataFrame'
polars.eager.frame.DataFrame._from_pydf(df:'PyDataFrame')->'DataFrame'
polars.eager.frame.DataFrame._pos_idx(self,idx:int,dim:int)->int
polars.eager.frame.DataFrame._repr_html_(self)->str
polars.eager.frame.DataFrame.apply(self,f:Callable[[Tuple[Any]],Any],return_dtype:Optional[Type[DataType]]=None)->'pl.Series'
polars.eager.frame.DataFrame.clone(self)->'DataFrame'
polars.eager.frame.DataFrame.columns(self)->tp.List[str]
polars.eager.frame.DataFrame.columns(self,columns:tp.List[str])->None
polars.eager.frame.DataFrame.describe(self)->'DataFrame'
polars.eager.frame.DataFrame.downsample(self,by:Union[str,tp.List[str]],rule:str,n:int)->'GroupBy'
polars.eager.frame.DataFrame.drop(self,name:Union[str,tp.List[str]])->'DataFrame'
polars.eager.frame.DataFrame.drop_duplicates(self,maintain_order:bool=True,subset:Optional[Union[str,tp.List[str]]]=None)->'DataFrame'
polars.eager.frame.DataFrame.drop_in_place(self,name:str)->'pl.Series'
polars.eager.frame.DataFrame.drop_nulls(self,subset:Optional[tp.List[str]]=None)->'DataFrame'
polars.eager.frame.DataFrame.dtypes(self)->tp.List[Type[DataType]]
polars.eager.frame.DataFrame.explode(self,columns:Union[str,tp.List[str]])->'DataFrame'
polars.eager.frame.DataFrame.fill_none(self,strategy:Union[str,'pl.Expr'])->'DataFrame'
polars.eager.frame.DataFrame.filter(self,predicate:'pl.Expr')->'DataFrame'
polars.eager.frame.DataFrame.find_idx_by_name(self,name:str)->int
polars.eager.frame.DataFrame.fold(self,operation:Callable[['pl.Series','pl.Series'],'pl.Series'])->'pl.Series'
polars.eager.frame.DataFrame.frame_equal(self,other:'DataFrame',null_equal:bool=False)->bool
polars.eager.frame.DataFrame.from_arrow(table:pa.Table,rechunk:bool=True)->'DataFrame'
polars.eager.frame.DataFrame.from_rows(rows:Sequence[Sequence[Any]],column_names:Optional[Sequence[str]]=None,column_name_mapping:Optional[Dict[int,str]]=None)->'DataFrame'
polars.eager.frame.DataFrame.get_columns(self)->tp.List['pl.Series']
polars.eager.frame.DataFrame.groupby(self,by:Union[str,tp.List[str]])->'GroupBy'
polars.eager.frame.DataFrame.hash_rows(self,k0:int=0,k1:int=1,k2:int=2,k3:int=3)->'pl.Series'
polars.eager.frame.DataFrame.head(self,length:int=5)->'DataFrame'
polars.eager.frame.DataFrame.height(self)->int
polars.eager.frame.DataFrame.hstack(self,columns:Union[tp.List['pl.Series'],'DataFrame'],in_place:bool=False)->Optional['DataFrame']
polars.eager.frame.DataFrame.insert_at_idx(self,index:int,series:'pl.Series')->None
polars.eager.frame.DataFrame.is_duplicated(self)->'pl.Series'
polars.eager.frame.DataFrame.is_unique(self)->'pl.Series'
polars.eager.frame.DataFrame.join(self,df:'DataFrame',left_on:Optional[Union[str,'pl.Expr',tp.List[str],tp.List['pl.Expr']]]=None,right_on:Optional[Union[str,'pl.Expr',tp.List[str],tp.List['pl.Expr']]]=None,on:Optional[Union[str,tp.List[str]]]=None,how:str='inner')->Union['DataFrame', 'pl.LazyFrame']
polars.eager.frame.DataFrame.lazy(self)->'pl.LazyFrame'
polars.eager.frame.DataFrame.limit(self,length:int=5)->'DataFrame'
polars.eager.frame.DataFrame.max(self,axis:int=0)->'DataFrame'
polars.eager.frame.DataFrame.mean(self,axis:int=0)->'DataFrame'
polars.eager.frame.DataFrame.median(self)->'DataFrame'
polars.eager.frame.DataFrame.melt(self,id_vars:Union[tp.List[str],str],value_vars:Union[tp.List[str],str])->'DataFrame'
polars.eager.frame.DataFrame.min(self,axis:int=0)->'DataFrame'
polars.eager.frame.DataFrame.n_chunks(self)->int
polars.eager.frame.DataFrame.null_count(self)->'DataFrame'
polars.eager.frame.DataFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.eager.frame.DataFrame.quantile(self,quantile:float)->'DataFrame'
polars.eager.frame.DataFrame.read_csv(file:Union[str,BinaryIO,bytes],infer_schema_length:int=100,batch_size:int=64,has_headers:bool=True,ignore_errors:bool=False,stop_after_n_rows:Optional[int]=None,skip_rows:int=0,projection:Optional[tp.List[int]]=None,sep:str=',',columns:Optional[tp.List[str]]=None,rechunk:bool=True,encoding:str='utf8',n_threads:Optional[int]=None,dtype:Optional[Dict[str,Type[DataType]]]=None,low_memory:bool=False,comment_char:Optional[str]=None,null_values:Optional[Union[str,tp.List[str],Dict[str,str]]]=None)->'DataFrame'
polars.eager.frame.DataFrame.read_ipc(file:Union[str,BinaryIO],use_pyarrow:bool=True)->'DataFrame'
polars.eager.frame.DataFrame.read_json(file:Union[str,BytesIO])->'DataFrame'
polars.eager.frame.DataFrame.read_parquet(file:Union[str,BinaryIO],stop_after_n_rows:Optional[int]=None,use_pyarrow:bool=False)->'DataFrame'
polars.eager.frame.DataFrame.rechunk(self)->'DataFrame'
polars.eager.frame.DataFrame.rename(self,mapping:Dict[str,str])->'DataFrame'
polars.eager.frame.DataFrame.replace(self,column:str,new_col:'pl.Series')->None
polars.eager.frame.DataFrame.replace_at_idx(self,index:int,series:'pl.Series')->None
polars.eager.frame.DataFrame.row(self,index:int)->Tuple[Any]
polars.eager.frame.DataFrame.rows(self)->tp.List[Tuple[Any]]
polars.eager.frame.DataFrame.sample(self,n:Optional[int]=None,frac:Optional[float]=None,with_replacement:bool=False)->'DataFrame'
polars.eager.frame.DataFrame.select(self,exprs:Union[str,'pl.Expr',Sequence[str],Sequence['pl.Expr']])->'DataFrame'
polars.eager.frame.DataFrame.select_at_idx(self,idx:int)->'pl.Series'
polars.eager.frame.DataFrame.shape(self)->Tuple[int, int]
polars.eager.frame.DataFrame.shift(self,periods:int)->'DataFrame'
polars.eager.frame.DataFrame.shift_and_fill(self,periods:int,fill_value:Union[int,str,float])->'DataFrame'
polars.eager.frame.DataFrame.shrink_to_fit(self,in_place:bool=False)->Optional['DataFrame']
polars.eager.frame.DataFrame.slice(self,offset:int,length:int)->'DataFrame'
polars.eager.frame.DataFrame.sort(self,by:Union[str,'pl.Expr',tp.List['pl.Expr']],in_place:bool=False,reverse:Union[bool,tp.List[bool]]=False)->Optional['DataFrame']
polars.eager.frame.DataFrame.std(self)->'DataFrame'
polars.eager.frame.DataFrame.sum(self,axis:int=0)->'DataFrame'
polars.eager.frame.DataFrame.tail(self,length:int=5)->'DataFrame'
polars.eager.frame.DataFrame.to_arrow(self)->pa.Table
polars.eager.frame.DataFrame.to_csv(self,file:Optional[Union[TextIO,str,Path]]=None,has_headers:bool=True,delimiter:str=',')->Optional[str]
polars.eager.frame.DataFrame.to_dummies(self)->'DataFrame'
polars.eager.frame.DataFrame.to_ipc(self,file:Union[BinaryIO,str,Path])->None
polars.eager.frame.DataFrame.to_json(self,file:Optional[Union[BytesIO,str,Path]]=None,pretty:bool=False,to_string:bool=False)->Optional[str]
polars.eager.frame.DataFrame.to_numpy(self)->np.ndarray
polars.eager.frame.DataFrame.to_pandas(self,*args:Any,date_as_object:bool=False,**kwargs:Any)->'pd.DataFrame'
polars.eager.frame.DataFrame.to_parquet(self,file:Union[str,Path],compression:str='snappy',use_pyarrow:bool=True,**kwargs:Any)->None
polars.eager.frame.DataFrame.var(self)->'DataFrame'
polars.eager.frame.DataFrame.vstack(self,df:'DataFrame',in_place:bool=False)->Optional['DataFrame']
polars.eager.frame.DataFrame.width(self)->int
polars.eager.frame.DataFrame.with_column(self,column:Union['pl.Series','pl.Expr'])->'DataFrame'
polars.eager.frame.DataFrame.with_columns(self,exprs:Union['pl.Expr',tp.List['pl.Expr']])->'DataFrame'
polars.eager.frame.GBSelection(self,df:'PyDataFrame',by:Union[str,tp.List[str]],selection:Optional[tp.List[str]],downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.eager.frame.GBSelection.__init__(self,df:'PyDataFrame',by:Union[str,tp.List[str]],selection:Optional[tp.List[str]],downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.eager.frame.GBSelection.agg_list(self)->DataFrame
polars.eager.frame.GBSelection.apply(self,func:Callable[[Any],Any],return_dtype:Optional[Type[DataType]]=None)->DataFrame
polars.eager.frame.GBSelection.count(self)->DataFrame
polars.eager.frame.GBSelection.first(self)->DataFrame
polars.eager.frame.GBSelection.last(self)->DataFrame
polars.eager.frame.GBSelection.max(self)->DataFrame
polars.eager.frame.GBSelection.mean(self)->DataFrame
polars.eager.frame.GBSelection.median(self)->DataFrame
polars.eager.frame.GBSelection.min(self)->DataFrame
polars.eager.frame.GBSelection.n_unique(self)->DataFrame
polars.eager.frame.GBSelection.quantile(self,quantile:float)->DataFrame
polars.eager.frame.GBSelection.sum(self)->DataFrame
polars.eager.frame.GroupBy(self,df:'PyDataFrame',by:Union[str,tp.List[str]],downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.eager.frame.GroupBy.__getitem__(self,item:Any)->'GBSelection'
polars.eager.frame.GroupBy.__init__(self,df:'PyDataFrame',by:Union[str,tp.List[str]],downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.eager.frame.GroupBy.__iter__(self)->Iterable[Any]
polars.eager.frame.GroupBy.agg(self,column_to_agg:Union[tp.List[Tuple[str,tp.List[str]]],Dict[str,Union[str,tp.List[str]]],tp.List['pl.Expr'],'pl.Expr'])->DataFrame
polars.eager.frame.GroupBy.agg_list(self)->DataFrame
polars.eager.frame.GroupBy.apply(self,f:Callable[[DataFrame],DataFrame])->DataFrame
polars.eager.frame.GroupBy.count(self)->DataFrame
polars.eager.frame.GroupBy.first(self)->DataFrame
polars.eager.frame.GroupBy.get_group(self,group_value:Union[Any,Tuple[Any]])->DataFrame
polars.eager.frame.GroupBy.groups(self)->DataFrame
polars.eager.frame.GroupBy.last(self)->DataFrame
polars.eager.frame.GroupBy.max(self)->DataFrame
polars.eager.frame.GroupBy.mean(self)->DataFrame
polars.eager.frame.GroupBy.median(self)->DataFrame
polars.eager.frame.GroupBy.min(self)->DataFrame
polars.eager.frame.GroupBy.n_unique(self)->DataFrame
polars.eager.frame.GroupBy.pivot(self,pivot_column:str,values_column:str)->'PivotOps'
polars.eager.frame.GroupBy.quantile(self,quantile:float)->DataFrame
polars.eager.frame.GroupBy.select(self,columns:Union[str,tp.List[str]])->'GBSelection'
polars.eager.frame.GroupBy.select_all(self)->'GBSelection'
polars.eager.frame.GroupBy.sum(self)->DataFrame
polars.eager.frame.PivotOps(self,df:DataFrame,by:Union[str,tp.List[str]],pivot_column:str,values_column:str)
polars.eager.frame.PivotOps.__init__(self,df:DataFrame,by:Union[str,tp.List[str]],pivot_column:str,values_column:str)
polars.eager.frame.PivotOps.count(self)->DataFrame
polars.eager.frame.PivotOps.first(self)->DataFrame
polars.eager.frame.PivotOps.max(self)->DataFrame
polars.eager.frame.PivotOps.mean(self)->DataFrame
polars.eager.frame.PivotOps.median(self)->DataFrame
polars.eager.frame.PivotOps.min(self)->DataFrame
polars.eager.frame.PivotOps.sum(self)->DataFrame
polars.eager.frame._prepare_other_arg(other:Any)->'pl.Series'
polars.eager.frame.wrap_df(df:'PyDataFrame')->'DataFrame'
polars.wrap_df(df:'PyDataFrame')->'DataFrame'


----------------------------------------/home/zhang/Packages/polars/polars0.8.13b1/eager/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/polars/polars0.8.13b1/lazy/whenthen.py----------------------------------------
A:polars.lazy.whenthen.expr_->expr_to_lit_or_expr(expr)
A:polars.lazy.whenthen.expr->expr_to_lit_or_expr(expr)
A:polars.lazy.whenthen.pywhenthen->self._pywhen.then(expr._pyexpr)
A:polars.lazy.whenthen.pw->pywhen(expr._pyexpr)
polars.When(self,pywhen:'pywhen')
polars.When.then(self,expr:Union['pl.Expr',int,float,str])->WhenThen
polars.WhenThen(self,pywhenthen:Any)
polars.WhenThen.otherwise(self,expr:Union['pl.Expr',int,float,str])->'pl.Expr'
polars.WhenThen.when(self,predicate:'pl.Expr')->WhenThenThen
polars.WhenThenThen(self,pywhenthenthen:Any)
polars.WhenThenThen.otherwise(self,expr:Union['pl.Expr',int,float,str])->'pl.Expr'
polars.WhenThenThen.then(self,expr:Union['pl.Expr',int,float,str])->'WhenThenThen'
polars.WhenThenThen.when(self,predicate:'pl.Expr')->'WhenThenThen'
polars.lazy.whenthen.When(self,pywhen:'pywhen')
polars.lazy.whenthen.When.__init__(self,pywhen:'pywhen')
polars.lazy.whenthen.When.then(self,expr:Union['pl.Expr',int,float,str])->WhenThen
polars.lazy.whenthen.WhenThen(self,pywhenthen:Any)
polars.lazy.whenthen.WhenThen.__init__(self,pywhenthen:Any)
polars.lazy.whenthen.WhenThen.otherwise(self,expr:Union['pl.Expr',int,float,str])->'pl.Expr'
polars.lazy.whenthen.WhenThen.when(self,predicate:'pl.Expr')->WhenThenThen
polars.lazy.whenthen.WhenThenThen(self,pywhenthenthen:Any)
polars.lazy.whenthen.WhenThenThen.__init__(self,pywhenthenthen:Any)
polars.lazy.whenthen.WhenThenThen.otherwise(self,expr:Union['pl.Expr',int,float,str])->'pl.Expr'
polars.lazy.whenthen.WhenThenThen.then(self,expr:Union['pl.Expr',int,float,str])->'WhenThenThen'
polars.lazy.whenthen.WhenThenThen.when(self,predicate:'pl.Expr')->'WhenThenThen'
polars.lazy.whenthen.when(expr:'pl.Expr')->When
polars.when(expr:'pl.Expr')->When


----------------------------------------/home/zhang/Packages/polars/polars0.8.13b1/lazy/functions.py----------------------------------------
A:polars.lazy.functions.a->col(a)
A:polars.lazy.functions.b->col(b)
A:polars.lazy.functions.exprs->polars.lazy.expr._selection_to_pyexpr_list(exprs)
A:polars.lazy.functions.low->lit(low)
A:polars.lazy.functions.high->lit(high)
polars.UDF(self,f:Callable[['pl.Series'],'pl.Series'],return_dtype:Type[DataType])
polars.all(name:Union[str,tp.List['pl.Expr']])->'pl.Expr'
polars.any(name:Union[str,tp.List['pl.Expr']])->'pl.Expr'
polars.arange(low:Union[int,'pl.Expr'],high:Union[int,'pl.Expr'],step:int=1,dtype:Optional[Type[DataType]]=None,eager:bool=False)->Union['pl.Expr', 'pl.Series']
polars.argsort_by(exprs:tp.List['pl.Expr'],reverse:Union[tp.List[bool],bool]=False)->'pl.Expr'
polars.avg(column:Union[str,'pl.Series'])->Union['pl.Expr', float]
polars.col(name:str)->'pl.Expr'
polars.concat_str(exprs:tp.List['pl.Expr'],delimiter:str='')->'pl.Expr'
polars.count(column:Union[str,'pl.Series']='')->Union['pl.Expr', int]
polars.cov(a:Union[str,'pl.Expr'],b:Union[str,'pl.Expr'])->'pl.Expr'
polars.except_(name:str)->'pl.Expr'
polars.first(column:Union[str,'pl.Series'])->Union['pl.Expr', Any]
polars.fold(acc:'pl.Expr',f:Callable[['pl.Series','pl.Series'],'pl.Series'],exprs:Union[tp.List['pl.Expr'],'pl.Expr'])->'pl.Expr'
polars.groups(column:str)->'pl.Expr'
polars.head(column:Union[str,'pl.Series'],n:Optional[int]=None)->Union['pl.Expr', 'pl.Series']
polars.last(column:Union[str,'pl.Series'])->'pl.Expr'
polars.lazy.functions.UDF(self,f:Callable[['pl.Series'],'pl.Series'],return_dtype:Type[DataType])
polars.lazy.functions.UDF.__init__(self,f:Callable[['pl.Series'],'pl.Series'],return_dtype:Type[DataType])
polars.lazy.functions.all(name:Union[str,tp.List['pl.Expr']])->'pl.Expr'
polars.lazy.functions.any(name:Union[str,tp.List['pl.Expr']])->'pl.Expr'
polars.lazy.functions.arange(low:Union[int,'pl.Expr'],high:Union[int,'pl.Expr'],step:int=1,dtype:Optional[Type[DataType]]=None,eager:bool=False)->Union['pl.Expr', 'pl.Series']
polars.lazy.functions.argsort_by(exprs:tp.List['pl.Expr'],reverse:Union[tp.List[bool],bool]=False)->'pl.Expr'
polars.lazy.functions.avg(column:Union[str,'pl.Series'])->Union['pl.Expr', float]
polars.lazy.functions.col(name:str)->'pl.Expr'
polars.lazy.functions.concat_str(exprs:tp.List['pl.Expr'],delimiter:str='')->'pl.Expr'
polars.lazy.functions.count(column:Union[str,'pl.Series']='')->Union['pl.Expr', int]
polars.lazy.functions.cov(a:Union[str,'pl.Expr'],b:Union[str,'pl.Expr'])->'pl.Expr'
polars.lazy.functions.except_(name:str)->'pl.Expr'
polars.lazy.functions.first(column:Union[str,'pl.Series'])->Union['pl.Expr', Any]
polars.lazy.functions.fold(acc:'pl.Expr',f:Callable[['pl.Series','pl.Series'],'pl.Series'],exprs:Union[tp.List['pl.Expr'],'pl.Expr'])->'pl.Expr'
polars.lazy.functions.groups(column:str)->'pl.Expr'
polars.lazy.functions.head(column:Union[str,'pl.Series'],n:Optional[int]=None)->Union['pl.Expr', 'pl.Series']
polars.lazy.functions.last(column:Union[str,'pl.Series'])->'pl.Expr'
polars.lazy.functions.lit(value:Optional[Union[float,int,str,datetime,'pl.Series']],dtype:Optional[Type[DataType]]=None)->'pl.Expr'
polars.lazy.functions.lit_date(dt:datetime)->'pl.Expr'
polars.lazy.functions.map_binary(a:Union[str,'pl.Expr'],b:Union[str,'pl.Expr'],f:Callable[['pl.Series','pl.Series'],'pl.Series'],return_dtype:Optional[Type[DataType]]=None)->'pl.Expr'
polars.lazy.functions.max(column:Union[str,tp.List['pl.Expr'],'pl.Series'])->Union['pl.Expr', Any]
polars.lazy.functions.mean(column:Union[str,'pl.Series'])->Union['pl.Expr', float]
polars.lazy.functions.median(column:Union[str,'pl.Series'])->Union['pl.Expr', float, int]
polars.lazy.functions.min(column:Union[str,tp.List['pl.Expr'],'pl.Series'])->Union['pl.Expr', Any]
polars.lazy.functions.n_unique(column:Union[str,'pl.Series'])->Union['pl.Expr', int]
polars.lazy.functions.pearson_corr(a:Union[str,'pl.Expr'],b:Union[str,'pl.Expr'])->'pl.Expr'
polars.lazy.functions.quantile(column:str,quantile:float)->'pl.Expr'
polars.lazy.functions.std(column:Union[str,'pl.Series'])->Union['pl.Expr', float]
polars.lazy.functions.sum(column:Union[str,tp.List['pl.Expr'],'pl.Series'])->Union['pl.Expr', Any]
polars.lazy.functions.tail(column:Union[str,'pl.Series'],n:Optional[int]=None)->Union['pl.Expr', 'pl.Series']
polars.lazy.functions.to_list(name:str)->'pl.Expr'
polars.lazy.functions.udf(f:Callable[['pl.Series'],'pl.Series'],return_dtype:Type[DataType])->UDF
polars.lazy.functions.var(column:Union[str,'pl.Series'])->Union['pl.Expr', float]
polars.lit(value:Optional[Union[float,int,str,datetime,'pl.Series']],dtype:Optional[Type[DataType]]=None)->'pl.Expr'
polars.lit_date(dt:datetime)->'pl.Expr'
polars.map_binary(a:Union[str,'pl.Expr'],b:Union[str,'pl.Expr'],f:Callable[['pl.Series','pl.Series'],'pl.Series'],return_dtype:Optional[Type[DataType]]=None)->'pl.Expr'
polars.max(column:Union[str,tp.List['pl.Expr'],'pl.Series'])->Union['pl.Expr', Any]
polars.mean(column:Union[str,'pl.Series'])->Union['pl.Expr', float]
polars.median(column:Union[str,'pl.Series'])->Union['pl.Expr', float, int]
polars.min(column:Union[str,tp.List['pl.Expr'],'pl.Series'])->Union['pl.Expr', Any]
polars.n_unique(column:Union[str,'pl.Series'])->Union['pl.Expr', int]
polars.pearson_corr(a:Union[str,'pl.Expr'],b:Union[str,'pl.Expr'])->'pl.Expr'
polars.quantile(column:str,quantile:float)->'pl.Expr'
polars.std(column:Union[str,'pl.Series'])->Union['pl.Expr', float]
polars.sum(column:Union[str,tp.List['pl.Expr'],'pl.Series'])->Union['pl.Expr', Any]
polars.tail(column:Union[str,'pl.Series'],n:Optional[int]=None)->Union['pl.Expr', 'pl.Series']
polars.to_list(name:str)->'pl.Expr'
polars.udf(f:Callable[['pl.Series'],'pl.Series'],return_dtype:Type[DataType])->UDF
polars.var(column:Union[str,'pl.Series'])->Union['pl.Expr', float]


----------------------------------------/home/zhang/Packages/polars/polars0.8.13b1/lazy/expr.py----------------------------------------
A:polars.lazy.expr.expr->Expr.__new__(Expr).cast(Date64)
A:polars.lazy.expr.self->Expr.__new__(Expr)
A:polars.lazy.expr.other->lit(pl.Series('', other))
A:polars.lazy.expr.by->expr_to_lit_or_expr(by, False)
A:polars.lazy.expr.fill_value->lit(fill_value)
A:polars.lazy.expr.pyexprs->_selection_to_pyexpr_list(expr)
A:polars.lazy.expr.start->lit(start)
A:polars.lazy.expr.end->lit(end)
polars.Expr(self)
polars.Expr.__add__(self,other:Any)->'Expr'
polars.Expr.__and__(self,other:'Expr')->'Expr'
polars.Expr.__eq__(self,other:Any)->'Expr'
polars.Expr.__ge__(self,other:Any)->'Expr'
polars.Expr.__gt__(self,other:Any)->'Expr'
polars.Expr.__invert__(self)->'Expr'
polars.Expr.__le__(self,other:Any)->'Expr'
polars.Expr.__lt__(self,other:Any)->'Expr'
polars.Expr.__mul__(self,other:Any)->'Expr'
polars.Expr.__ne__(self,other:Any)->'Expr'
polars.Expr.__or__(self,other:'Expr')->'Expr'
polars.Expr.__pow__(self,power:float,modulo:None=None)->'Expr'
polars.Expr.__sub__(self,other:Any)->'Expr'
polars.Expr.__to_expr(self,other:Any)->'Expr'
polars.Expr.__to_pyexpr(self,other:Any)->'PyExpr'
polars.Expr.__truediv__(self,other:Any)->'Expr'
polars.Expr._from_pyexpr(pyexpr:'PyExpr')->'Expr'
polars.Expr.agg_groups(self)->'Expr'
polars.Expr.alias(self,name:str)->'Expr'
polars.Expr.apply(self,f:Callable[['pl.Series'],'pl.Series'],return_dtype:Optional[Type[DataType]]=None)->'Expr'
polars.Expr.arg_sort(self,reverse:bool=False)->'Expr'
polars.Expr.arg_unique(self)->'Expr'
polars.Expr.backward_fill(self)->'Expr'
polars.Expr.cast(self,dtype:Type[Any])->'Expr'
polars.Expr.count(self)->'Expr'
polars.Expr.cum_max(self,reverse:bool=False)->'Expr'
polars.Expr.cum_min(self,reverse:bool=False)->'Expr'
polars.Expr.cum_sum(self,reverse:bool=False)->'Expr'
polars.Expr.dot(self,other:'Expr')->'Expr'
polars.Expr.dt(self)->'ExprDateTimeNameSpace'
polars.Expr.eq(self,other:'Expr')->'Expr'
polars.Expr.explode(self)->'Expr'
polars.Expr.fill_none(self,fill_value:Union[str,int,float,'Expr'])->'Expr'
polars.Expr.filter(self,predicate:'Expr')->'Expr'
polars.Expr.first(self)->'Expr'
polars.Expr.forward_fill(self)->'Expr'
polars.Expr.gt(self,other:'Expr')->'Expr'
polars.Expr.gt_eq(self,other:'Expr')->'Expr'
polars.Expr.hash(self,k0:int=0,k1:int=1,k2:int=2,k3:int=3)->'pl.Expr'
polars.Expr.head(self,n:Optional[int]=None)->'Expr'
polars.Expr.is_between(self,start:Union['Expr',datetime],end:Union['Expr',datetime])->'Expr'
polars.Expr.is_duplicated(self)->'Expr'
polars.Expr.is_finite(self)->'Expr'
polars.Expr.is_first(self)->'Expr'
polars.Expr.is_in(self,other:Union['Expr',tp.List[Any]])->'Expr'
polars.Expr.is_infinite(self)->'Expr'
polars.Expr.is_nan(self)->'Expr'
polars.Expr.is_not(self)->'Expr'
polars.Expr.is_not_nan(self)->'Expr'
polars.Expr.is_not_null(self)->'Expr'
polars.Expr.is_null(self)->'Expr'
polars.Expr.is_unique(self)->'Expr'
polars.Expr.last(self)->'Expr'
polars.Expr.list(self)->'Expr'
polars.Expr.lt(self,other:'Expr')->'Expr'
polars.Expr.lt_eq(self,other:'Expr')->'Expr'
polars.Expr.map(self,f:Union['UDF',Callable[['pl.Series'],'pl.Series']],return_dtype:Optional[Type[DataType]]=None)->'Expr'
polars.Expr.max(self)->'Expr'
polars.Expr.mean(self)->'Expr'
polars.Expr.median(self)->'Expr'
polars.Expr.min(self)->'Expr'
polars.Expr.n_unique(self)->'Expr'
polars.Expr.neq(self,other:'Expr')->'Expr'
polars.Expr.over(self,expr:Union[str,'Expr',tp.List['Expr']])->'Expr'
polars.Expr.pow(self,exponent:float)->'Expr'
polars.Expr.quantile(self,quantile:float)->'Expr'
polars.Expr.reinterpret(self,signed:bool)->'pl.Expr'
polars.Expr.repeat_by(self,by:'Expr')->'Expr'
polars.Expr.reverse(self)->'Expr'
polars.Expr.round(self,decimals:int)->'Expr'
polars.Expr.shift(self,periods:int)->'Expr'
polars.Expr.shift_and_fill(self,periods:int,fill_value:'Expr')->'Expr'
polars.Expr.slice(self,offset:int,length:int)->'Expr'
polars.Expr.sort(self,reverse:bool=False)->'Expr'
polars.Expr.sort_by(self,by:Union['Expr',str],reverse:bool=False)->'Expr'
polars.Expr.std(self)->'Expr'
polars.Expr.str(self)->'ExprStringNameSpace'
polars.Expr.sum(self)->'Expr'
polars.Expr.tail(self,n:Optional[int]=None)->'Expr'
polars.Expr.take(self,index:'Expr')->'Expr'
polars.Expr.take_every(self,n:int)->'Expr'
polars.Expr.unique(self)->'Expr'
polars.Expr.var(self)->'Expr'
polars.ExprDateTimeNameSpace(self,expr:Expr)
polars.ExprDateTimeNameSpace.day(self)->Expr
polars.ExprDateTimeNameSpace.hour(self)->Expr
polars.ExprDateTimeNameSpace.minute(self)->Expr
polars.ExprDateTimeNameSpace.month(self)->Expr
polars.ExprDateTimeNameSpace.nanosecond(self)->Expr
polars.ExprDateTimeNameSpace.ordinal_day(self)->Expr
polars.ExprDateTimeNameSpace.round(self,rule:str,n:int)->Expr
polars.ExprDateTimeNameSpace.second(self)->Expr
polars.ExprDateTimeNameSpace.strftime(self,fmt:str)->Expr
polars.ExprDateTimeNameSpace.year(self)->Expr
polars.ExprStringNameSpace(self,expr:Expr)
polars.ExprStringNameSpace.contains(self,pattern:str)->Expr
polars.ExprStringNameSpace.lengths(self)->Expr
polars.ExprStringNameSpace.parse_date(self,datatype:Union[Date32,Date64],fmt:Optional[str]=None)->Expr
polars.ExprStringNameSpace.replace(self,pattern:str,value:str)->Expr
polars.ExprStringNameSpace.replace_all(self,pattern:str,value:str)->Expr
polars.ExprStringNameSpace.slice(self,start:int,length:Optional[int]=None)->Expr
polars.ExprStringNameSpace.strptime(self,datatype:Union[Date32,Date64],fmt:Optional[str]=None)->Expr
polars.ExprStringNameSpace.to_lowercase(self)->Expr
polars.ExprStringNameSpace.to_uppercase(self)->Expr
polars._selection_to_pyexpr_list(exprs:Union[str,'Expr',Sequence[str],Sequence['Expr']])->tp.List['PyExpr']
polars.expr_to_lit_or_expr(expr:Union[Expr,int,float,str,tp.List[Expr]],str_to_lit:bool=True)->Expr
polars.lazy.expr.Expr(self)
polars.lazy.expr.Expr.__add__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__and__(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.__eq__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__ge__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__gt__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__init__(self)
polars.lazy.expr.Expr.__invert__(self)->'Expr'
polars.lazy.expr.Expr.__le__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__lt__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__mul__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__ne__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__or__(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.__pow__(self,power:float,modulo:None=None)->'Expr'
polars.lazy.expr.Expr.__sub__(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__to_expr(self,other:Any)->'Expr'
polars.lazy.expr.Expr.__to_pyexpr(self,other:Any)->'PyExpr'
polars.lazy.expr.Expr.__truediv__(self,other:Any)->'Expr'
polars.lazy.expr.Expr._from_pyexpr(pyexpr:'PyExpr')->'Expr'
polars.lazy.expr.Expr.agg_groups(self)->'Expr'
polars.lazy.expr.Expr.alias(self,name:str)->'Expr'
polars.lazy.expr.Expr.apply(self,f:Callable[['pl.Series'],'pl.Series'],return_dtype:Optional[Type[DataType]]=None)->'Expr'
polars.lazy.expr.Expr.arg_sort(self,reverse:bool=False)->'Expr'
polars.lazy.expr.Expr.arg_unique(self)->'Expr'
polars.lazy.expr.Expr.backward_fill(self)->'Expr'
polars.lazy.expr.Expr.cast(self,dtype:Type[Any])->'Expr'
polars.lazy.expr.Expr.count(self)->'Expr'
polars.lazy.expr.Expr.cum_max(self,reverse:bool=False)->'Expr'
polars.lazy.expr.Expr.cum_min(self,reverse:bool=False)->'Expr'
polars.lazy.expr.Expr.cum_sum(self,reverse:bool=False)->'Expr'
polars.lazy.expr.Expr.dot(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.dt(self)->'ExprDateTimeNameSpace'
polars.lazy.expr.Expr.eq(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.explode(self)->'Expr'
polars.lazy.expr.Expr.fill_none(self,fill_value:Union[str,int,float,'Expr'])->'Expr'
polars.lazy.expr.Expr.filter(self,predicate:'Expr')->'Expr'
polars.lazy.expr.Expr.first(self)->'Expr'
polars.lazy.expr.Expr.forward_fill(self)->'Expr'
polars.lazy.expr.Expr.gt(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.gt_eq(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.hash(self,k0:int=0,k1:int=1,k2:int=2,k3:int=3)->'pl.Expr'
polars.lazy.expr.Expr.head(self,n:Optional[int]=None)->'Expr'
polars.lazy.expr.Expr.is_between(self,start:Union['Expr',datetime],end:Union['Expr',datetime])->'Expr'
polars.lazy.expr.Expr.is_duplicated(self)->'Expr'
polars.lazy.expr.Expr.is_finite(self)->'Expr'
polars.lazy.expr.Expr.is_first(self)->'Expr'
polars.lazy.expr.Expr.is_in(self,other:Union['Expr',tp.List[Any]])->'Expr'
polars.lazy.expr.Expr.is_infinite(self)->'Expr'
polars.lazy.expr.Expr.is_nan(self)->'Expr'
polars.lazy.expr.Expr.is_not(self)->'Expr'
polars.lazy.expr.Expr.is_not_nan(self)->'Expr'
polars.lazy.expr.Expr.is_not_null(self)->'Expr'
polars.lazy.expr.Expr.is_null(self)->'Expr'
polars.lazy.expr.Expr.is_unique(self)->'Expr'
polars.lazy.expr.Expr.last(self)->'Expr'
polars.lazy.expr.Expr.list(self)->'Expr'
polars.lazy.expr.Expr.lt(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.lt_eq(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.map(self,f:Union['UDF',Callable[['pl.Series'],'pl.Series']],return_dtype:Optional[Type[DataType]]=None)->'Expr'
polars.lazy.expr.Expr.max(self)->'Expr'
polars.lazy.expr.Expr.mean(self)->'Expr'
polars.lazy.expr.Expr.median(self)->'Expr'
polars.lazy.expr.Expr.min(self)->'Expr'
polars.lazy.expr.Expr.n_unique(self)->'Expr'
polars.lazy.expr.Expr.neq(self,other:'Expr')->'Expr'
polars.lazy.expr.Expr.over(self,expr:Union[str,'Expr',tp.List['Expr']])->'Expr'
polars.lazy.expr.Expr.pow(self,exponent:float)->'Expr'
polars.lazy.expr.Expr.quantile(self,quantile:float)->'Expr'
polars.lazy.expr.Expr.reinterpret(self,signed:bool)->'pl.Expr'
polars.lazy.expr.Expr.repeat_by(self,by:'Expr')->'Expr'
polars.lazy.expr.Expr.reverse(self)->'Expr'
polars.lazy.expr.Expr.round(self,decimals:int)->'Expr'
polars.lazy.expr.Expr.shift(self,periods:int)->'Expr'
polars.lazy.expr.Expr.shift_and_fill(self,periods:int,fill_value:'Expr')->'Expr'
polars.lazy.expr.Expr.slice(self,offset:int,length:int)->'Expr'
polars.lazy.expr.Expr.sort(self,reverse:bool=False)->'Expr'
polars.lazy.expr.Expr.sort_by(self,by:Union['Expr',str],reverse:bool=False)->'Expr'
polars.lazy.expr.Expr.std(self)->'Expr'
polars.lazy.expr.Expr.str(self)->'ExprStringNameSpace'
polars.lazy.expr.Expr.sum(self)->'Expr'
polars.lazy.expr.Expr.tail(self,n:Optional[int]=None)->'Expr'
polars.lazy.expr.Expr.take(self,index:'Expr')->'Expr'
polars.lazy.expr.Expr.take_every(self,n:int)->'Expr'
polars.lazy.expr.Expr.unique(self)->'Expr'
polars.lazy.expr.Expr.var(self)->'Expr'
polars.lazy.expr.ExprDateTimeNameSpace(self,expr:Expr)
polars.lazy.expr.ExprDateTimeNameSpace.__init__(self,expr:Expr)
polars.lazy.expr.ExprDateTimeNameSpace.day(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.hour(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.minute(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.month(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.nanosecond(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.ordinal_day(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.round(self,rule:str,n:int)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.second(self)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.strftime(self,fmt:str)->Expr
polars.lazy.expr.ExprDateTimeNameSpace.year(self)->Expr
polars.lazy.expr.ExprStringNameSpace(self,expr:Expr)
polars.lazy.expr.ExprStringNameSpace.__init__(self,expr:Expr)
polars.lazy.expr.ExprStringNameSpace.contains(self,pattern:str)->Expr
polars.lazy.expr.ExprStringNameSpace.lengths(self)->Expr
polars.lazy.expr.ExprStringNameSpace.parse_date(self,datatype:Union[Date32,Date64],fmt:Optional[str]=None)->Expr
polars.lazy.expr.ExprStringNameSpace.replace(self,pattern:str,value:str)->Expr
polars.lazy.expr.ExprStringNameSpace.replace_all(self,pattern:str,value:str)->Expr
polars.lazy.expr.ExprStringNameSpace.slice(self,start:int,length:Optional[int]=None)->Expr
polars.lazy.expr.ExprStringNameSpace.strptime(self,datatype:Union[Date32,Date64],fmt:Optional[str]=None)->Expr
polars.lazy.expr.ExprStringNameSpace.to_lowercase(self)->Expr
polars.lazy.expr.ExprStringNameSpace.to_uppercase(self)->Expr
polars.lazy.expr._selection_to_pyexpr_list(exprs:Union[str,'Expr',Sequence[str],Sequence['Expr']])->tp.List['PyExpr']
polars.lazy.expr.expr_to_lit_or_expr(expr:Union[Expr,int,float,str,tp.List[Expr]],str_to_lit:bool=True)->Expr
polars.lazy.expr.wrap_expr(pyexpr:'PyExpr')->'Expr'
polars.wrap_expr(pyexpr:'PyExpr')->'Expr'


----------------------------------------/home/zhang/Packages/polars/polars0.8.13b1/lazy/frame.py----------------------------------------
A:polars.lazy.frame.self->LazyFrame.__new__(LazyFrame)
A:polars.lazy.frame.processed_null_values->_process_null_values(null_values)
A:polars.lazy.frame.self._ldf->polars.PyLazyFrame.new_from_parquet(file, stop_after_n_rows, cache)
A:polars.lazy.frame.ldf->LazyFrame.__new__(LazyFrame)._ldf.optimization_toggle(type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, string_cache)
A:polars.lazy.frame.dot->LazyFrame.__new__(LazyFrame)._ldf.to_dot(optimized)
A:polars.lazy.frame.dot_path->os.path.join(tmpdir_name, 'dot')
A:polars.lazy.frame.out_path->os.path.join(tmpdir_name, 'dot.png')
A:polars.lazy.frame.img->matplotlib.image.imread(out_path)
A:polars.lazy.frame.by_columns->_selection_to_pyexpr_list(by_columns)
A:polars.lazy.frame.predicate->col(predicate)
A:polars.lazy.frame.exprs->_selection_to_pyexpr_list(exprs)
A:polars.lazy.frame.e->col(e)
A:polars.lazy.frame.lgb->LazyFrame.__new__(LazyFrame)._ldf.groupby(new_by)
A:polars.lazy.frame.column->col(column)
A:polars.lazy.frame.fill_value->lit(fill_value)
A:polars.lazy.frame.aggs->_selection_to_pyexpr_list(aggs)
polars.LazyFrame(self)
polars.LazyFrame._from_pyldf(ldf:'PyLazyFrame')->'LazyFrame'
polars.LazyFrame.cache(self)->'LazyFrame'
polars.LazyFrame.collect(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=False,no_optimization:bool=False)->'pl.DataFrame'
polars.LazyFrame.describe_optimized_plan(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True)->str
polars.LazyFrame.describe_plan(self)->str
polars.LazyFrame.drop_column(self,column:str)->'LazyFrame'
polars.LazyFrame.drop_columns(self,columns:tp.List[str])->'LazyFrame'
polars.LazyFrame.drop_duplicates(self,maintain_order:bool=False,subset:Optional[Union[tp.List[str],str]]=None)->'LazyFrame'
polars.LazyFrame.drop_nulls(self,subset:Optional[Union[tp.List[str],str]]=None)->'LazyFrame'
polars.LazyFrame.explode(self,columns:Union[str,tp.List[str]])->'LazyFrame'
polars.LazyFrame.fetch(self,n_rows:int=500,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=True,no_optimization:bool=False)->'pl.DataFrame'
polars.LazyFrame.fill_none(self,fill_value:Union[int,str,'Expr'])->'LazyFrame'
polars.LazyFrame.filter(self,predicate:'Expr')->'LazyFrame'
polars.LazyFrame.first(self)->'LazyFrame'
polars.LazyFrame.groupby(self,by:Union[str,tp.List[str],'Expr',tp.List['Expr']])->'LazyGroupBy'
polars.LazyFrame.head(self,n:int)->'LazyFrame'
polars.LazyFrame.join(self,ldf:'LazyFrame',left_on:Optional[Union[str,'Expr',tp.List[str],tp.List['Expr']]]=None,right_on:Optional[Union[str,'Expr',tp.List[str],tp.List['Expr']]]=None,on:Optional[Union[str,'Expr',tp.List[str],tp.List['Expr']]]=None,how:str='inner',allow_parallel:bool=True,force_parallel:bool=False)->'LazyFrame'
polars.LazyFrame.last(self)->'LazyFrame'
polars.LazyFrame.limit(self,n:int)->'LazyFrame'
polars.LazyFrame.map(self,f:Union['UDF',Callable[['pl.DataFrame'],'pl.DataFrame']],predicate_pushdown:bool=True,projection_pushdown:bool=True,no_optimizations:bool=False)->'LazyFrame'
polars.LazyFrame.max(self)->'LazyFrame'
polars.LazyFrame.mean(self)->'LazyFrame'
polars.LazyFrame.median(self)->'LazyFrame'
polars.LazyFrame.melt(self,id_vars:Union[str,tp.List[str]],value_vars:Union[str,tp.List[str]])->'LazyFrame'
polars.LazyFrame.min(self)->'LazyFrame'
polars.LazyFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.LazyFrame.quantile(self,quantile:float)->'LazyFrame'
polars.LazyFrame.reverse(self)->'LazyFrame'
polars.LazyFrame.scan_csv(file:str,has_headers:bool=True,ignore_errors:bool=False,sep:str=',',skip_rows:int=0,stop_after_n_rows:Optional[int]=None,cache:bool=True,dtype:Optional[Dict[str,Type[DataType]]]=None,low_memory:bool=False,comment_char:Optional[str]=None,null_values:Optional[Union[str,tp.List[str],Dict[str,str]]]=None)->'LazyFrame'
polars.LazyFrame.scan_parquet(file:str,stop_after_n_rows:Optional[int]=None,cache:bool=True)->'LazyFrame'
polars.LazyFrame.select(self,exprs:Union[str,'Expr',Sequence[str],Sequence['Expr']])->'LazyFrame'
polars.LazyFrame.shift(self,periods:int)->'LazyFrame'
polars.LazyFrame.shift_and_fill(self,periods:int,fill_value:Union['Expr',int,str,float])->'LazyFrame'
polars.LazyFrame.show_graph(self,optimized:bool=True,show:bool=True,output_path:Optional[str]=None,raw_output:bool=False,figsize:Tuple[float,float]=(16.0,12.0))->Optional[str]
polars.LazyFrame.slice(self,offset:int,length:int)->'LazyFrame'
polars.LazyFrame.sort(self,by_columns:Union[str,'Expr',tp.List['Expr']],reverse:Union[bool,tp.List[bool]]=False)->'LazyFrame'
polars.LazyFrame.std(self)->'LazyFrame'
polars.LazyFrame.sum(self)->'LazyFrame'
polars.LazyFrame.tail(self,n:int)->'LazyFrame'
polars.LazyFrame.var(self)->'LazyFrame'
polars.LazyFrame.with_column(self,expr:'Expr')->'LazyFrame'
polars.LazyFrame.with_column_renamed(self,existing_name:str,new_name:str)->'LazyFrame'
polars.LazyFrame.with_columns(self,exprs:Union[tp.List['Expr'],'Expr'])->'LazyFrame'
polars.LazyGroupBy(self,lgb:'PyLazyGroupBy')
polars.LazyGroupBy.agg(self,aggs:Union[tp.List['Expr'],'Expr'])->'LazyFrame'
polars.LazyGroupBy.apply(self,f:Callable[['pl.DataFrame'],'pl.DataFrame'])->'LazyFrame'
polars.lazy.frame.LazyFrame(self)
polars.lazy.frame.LazyFrame.__init__(self)
polars.lazy.frame.LazyFrame._from_pyldf(ldf:'PyLazyFrame')->'LazyFrame'
polars.lazy.frame.LazyFrame.cache(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.collect(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=False,no_optimization:bool=False)->'pl.DataFrame'
polars.lazy.frame.LazyFrame.describe_optimized_plan(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True)->str
polars.lazy.frame.LazyFrame.describe_plan(self)->str
polars.lazy.frame.LazyFrame.drop_column(self,column:str)->'LazyFrame'
polars.lazy.frame.LazyFrame.drop_columns(self,columns:tp.List[str])->'LazyFrame'
polars.lazy.frame.LazyFrame.drop_duplicates(self,maintain_order:bool=False,subset:Optional[Union[tp.List[str],str]]=None)->'LazyFrame'
polars.lazy.frame.LazyFrame.drop_nulls(self,subset:Optional[Union[tp.List[str],str]]=None)->'LazyFrame'
polars.lazy.frame.LazyFrame.explode(self,columns:Union[str,tp.List[str]])->'LazyFrame'
polars.lazy.frame.LazyFrame.fetch(self,n_rows:int=500,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=True,no_optimization:bool=False)->'pl.DataFrame'
polars.lazy.frame.LazyFrame.fill_none(self,fill_value:Union[int,str,'Expr'])->'LazyFrame'
polars.lazy.frame.LazyFrame.filter(self,predicate:'Expr')->'LazyFrame'
polars.lazy.frame.LazyFrame.first(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.groupby(self,by:Union[str,tp.List[str],'Expr',tp.List['Expr']])->'LazyGroupBy'
polars.lazy.frame.LazyFrame.head(self,n:int)->'LazyFrame'
polars.lazy.frame.LazyFrame.join(self,ldf:'LazyFrame',left_on:Optional[Union[str,'Expr',tp.List[str],tp.List['Expr']]]=None,right_on:Optional[Union[str,'Expr',tp.List[str],tp.List['Expr']]]=None,on:Optional[Union[str,'Expr',tp.List[str],tp.List['Expr']]]=None,how:str='inner',allow_parallel:bool=True,force_parallel:bool=False)->'LazyFrame'
polars.lazy.frame.LazyFrame.last(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.limit(self,n:int)->'LazyFrame'
polars.lazy.frame.LazyFrame.map(self,f:Union['UDF',Callable[['pl.DataFrame'],'pl.DataFrame']],predicate_pushdown:bool=True,projection_pushdown:bool=True,no_optimizations:bool=False)->'LazyFrame'
polars.lazy.frame.LazyFrame.max(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.mean(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.median(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.melt(self,id_vars:Union[str,tp.List[str]],value_vars:Union[str,tp.List[str]])->'LazyFrame'
polars.lazy.frame.LazyFrame.min(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.lazy.frame.LazyFrame.quantile(self,quantile:float)->'LazyFrame'
polars.lazy.frame.LazyFrame.reverse(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.scan_csv(file:str,has_headers:bool=True,ignore_errors:bool=False,sep:str=',',skip_rows:int=0,stop_after_n_rows:Optional[int]=None,cache:bool=True,dtype:Optional[Dict[str,Type[DataType]]]=None,low_memory:bool=False,comment_char:Optional[str]=None,null_values:Optional[Union[str,tp.List[str],Dict[str,str]]]=None)->'LazyFrame'
polars.lazy.frame.LazyFrame.scan_parquet(file:str,stop_after_n_rows:Optional[int]=None,cache:bool=True)->'LazyFrame'
polars.lazy.frame.LazyFrame.select(self,exprs:Union[str,'Expr',Sequence[str],Sequence['Expr']])->'LazyFrame'
polars.lazy.frame.LazyFrame.shift(self,periods:int)->'LazyFrame'
polars.lazy.frame.LazyFrame.shift_and_fill(self,periods:int,fill_value:Union['Expr',int,str,float])->'LazyFrame'
polars.lazy.frame.LazyFrame.show_graph(self,optimized:bool=True,show:bool=True,output_path:Optional[str]=None,raw_output:bool=False,figsize:Tuple[float,float]=(16.0,12.0))->Optional[str]
polars.lazy.frame.LazyFrame.slice(self,offset:int,length:int)->'LazyFrame'
polars.lazy.frame.LazyFrame.sort(self,by_columns:Union[str,'Expr',tp.List['Expr']],reverse:Union[bool,tp.List[bool]]=False)->'LazyFrame'
polars.lazy.frame.LazyFrame.std(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.sum(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.tail(self,n:int)->'LazyFrame'
polars.lazy.frame.LazyFrame.var(self)->'LazyFrame'
polars.lazy.frame.LazyFrame.with_column(self,expr:'Expr')->'LazyFrame'
polars.lazy.frame.LazyFrame.with_column_renamed(self,existing_name:str,new_name:str)->'LazyFrame'
polars.lazy.frame.LazyFrame.with_columns(self,exprs:Union[tp.List['Expr'],'Expr'])->'LazyFrame'
polars.lazy.frame.LazyGroupBy(self,lgb:'PyLazyGroupBy')
polars.lazy.frame.LazyGroupBy.__init__(self,lgb:'PyLazyGroupBy')
polars.lazy.frame.LazyGroupBy.agg(self,aggs:Union[tp.List['Expr'],'Expr'])->'LazyFrame'
polars.lazy.frame.LazyGroupBy.apply(self,f:Callable[['pl.DataFrame'],'pl.DataFrame'])->'LazyFrame'
polars.lazy.frame.wrap_ldf(ldf:'PyLazyFrame')->'LazyFrame'
polars.wrap_ldf(ldf:'PyLazyFrame')->'LazyFrame'


----------------------------------------/home/zhang/Packages/polars/polars0.8.13b1/lazy/__init__.py----------------------------------------

