
----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_reexport.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/__init__.py----------------------------------------
polars.__init__.__getattr__(name:str)->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/dependencies.py----------------------------------------
A:polars.dependencies.self._globals->globals()
A:polars.dependencies.module->import_module(module_name)
A:polars.dependencies.pfx->self._mod_pfx.get(self._module_name, '')
A:polars.dependencies.module_spec->find_spec(module_name)
A:polars.dependencies.(dataclasses, _)->_lazy_import('dataclasses')
A:polars.dependencies.(html, _)->_lazy_import('html')
A:polars.dependencies.(json, _)->_lazy_import('json')
A:polars.dependencies.(pickle, _)->_lazy_import('pickle')
A:polars.dependencies.(subprocess, _)->_lazy_import('subprocess')
A:polars.dependencies.(altair, _ALTAIR_AVAILABLE)->_lazy_import('altair')
A:polars.dependencies.(deltalake, _DELTALAKE_AVAILABLE)->_lazy_import('deltalake')
A:polars.dependencies.(fsspec, _FSSPEC_AVAILABLE)->_lazy_import('fsspec')
A:polars.dependencies.(great_tables, _GREAT_TABLES_AVAILABLE)->_lazy_import('great_tables')
A:polars.dependencies.(hypothesis, _HYPOTHESIS_AVAILABLE)->_lazy_import('hypothesis')
A:polars.dependencies.(numpy, _NUMPY_AVAILABLE)->_lazy_import('numpy')
A:polars.dependencies.(pandas, _PANDAS_AVAILABLE)->_lazy_import('pandas')
A:polars.dependencies.(polars_cloud, _POLARS_CLOUD_AVAILABLE)->_lazy_import('polars_cloud')
A:polars.dependencies.(pyarrow, _PYARROW_AVAILABLE)->_lazy_import('pyarrow')
A:polars.dependencies.(pydantic, _PYDANTIC_AVAILABLE)->_lazy_import('pydantic')
A:polars.dependencies.(pyiceberg, _PYICEBERG_AVAILABLE)->_lazy_import('pyiceberg')
A:polars.dependencies.(gevent, _GEVENT_AVAILABLE)->_lazy_import('gevent')
A:polars.dependencies.min_version->parse_version(min_version)
A:polars.dependencies.mod_version->parse_version(module.__version__)
polars.dependencies._LazyModule(self,module_name:str,*,module_available:bool)
polars.dependencies._LazyModule.__getattr__(self,name:str)->Any
polars.dependencies._LazyModule.__init__(self,module_name:str,*,module_available:bool)
polars.dependencies._LazyModule._import(self)->ModuleType
polars.dependencies._check_for_numpy(obj:Any,*,check_type:bool=True)->bool
polars.dependencies._check_for_pandas(obj:Any,*,check_type:bool=True)->bool
polars.dependencies._check_for_pyarrow(obj:Any,*,check_type:bool=True)->bool
polars.dependencies._check_for_pydantic(obj:Any,*,check_type:bool=True)->bool
polars.dependencies._lazy_import(module_name:str)->tuple[ModuleType, bool]
polars.dependencies._might_be(cls:type,type_:str)->bool
polars.dependencies.import_optional(module_name:str,err_prefix:str='requiredpackage',err_suffix:str='notfound',min_version:str|tuple[int,...]|None=None,min_err_prefix:str='requires',install_message:str|None=None)->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/plugins.py----------------------------------------
A:polars.plugins.pyexprs->parse_into_list_of_expressions(args)
A:polars.plugins.serialized_kwargs->_serialize_kwargs(kwargs)
A:polars.plugins.plugin_path->_resolve_plugin_path(plugin_path, use_abs_path=use_abs_path)
A:polars.plugins.path->Path(path)
A:polars.plugins.venv_path->Path(sys.prefix)
A:polars.plugins.file_path->Path(path).resolve()
polars.plugins._is_dynamic_lib(path:Path)->bool
polars.plugins._resolve_file_path(path:Path,*,use_abs_path:bool=False)->Path
polars.plugins._resolve_plugin_path(path:Path|str,*,use_abs_path:bool=False)->Path
polars.plugins._serialize_kwargs(kwargs:dict[str,Any]|None)->bytes
polars.plugins.register_plugin_function(*,plugin_path:Path|str,function_name:str,args:IntoExpr|Iterable[IntoExpr],kwargs:dict[str,Any]|None=None,is_elementwise:bool=False,changes_length:bool=False,returns_scalar:bool=False,cast_to_supertype:bool=False,input_wildcard_expansion:bool=False,pass_name_to_apply:bool=False,use_abs_path:bool=False)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/exceptions.py----------------------------------------
polars.exceptions.ChronoFormatWarning(PolarsWarning)
polars.exceptions.CustomUFuncWarning(PolarsWarning)
polars.exceptions.DataOrientationWarning(PolarsWarning)
polars.exceptions.ModuleUpgradeRequiredError(ModuleNotFoundError)
polars.exceptions.NoRowsReturnedError(RowsError)
polars.exceptions.ParameterCollisionError(PolarsError)
polars.exceptions.PolarsInefficientMapWarning(PerformanceWarning)
polars.exceptions.RowsError(PolarsError)
polars.exceptions.TooManyRowsReturnedError(RowsError)
polars.exceptions.UnstableWarning(PolarsWarning)
polars.exceptions.UnsuitableSQLError(PolarsError)


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/api.py----------------------------------------
A:polars.api.NS->TypeVar('NS')
A:polars.api.ns_instance->self._ns(instance)
polars.api.NameSpace(self,name:str,namespace:type[NS])
polars.api.NameSpace.__get__(self,instance:NS|None,cls:type[NS])->NS | type[NS]
polars.api.NameSpace.__init__(self,name:str,namespace:type[NS])
polars.api._create_namespace(name:str,cls:type[Expr|DataFrame|LazyFrame|Series])->Callable[[type[NS]], type[NS]]
polars.api.register_dataframe_namespace(name:str)->Callable[[type[NS]], type[NS]]
polars.api.register_expr_namespace(name:str)->Callable[[type[NS]], type[NS]]
polars.api.register_lazyframe_namespace(name:str)->Callable[[type[NS]], type[NS]]
polars.api.register_series_namespace(name:str)->Callable[[type[NS]], type[NS]]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/schema.py----------------------------------------
A:polars.schema.tp->tp()
A:polars.schema.dtype->_check_dtype(parse_into_dtype(dtype))
polars.Schema(self,schema:Mapping[str,SchemaInitDataType]|Iterable[tuple[str,SchemaInitDataType]]|None=None,*,check_dtypes:bool=True)
polars.Schema.__eq__(self,other:object)->bool
polars.Schema.__ne__(self,other:object)->bool
polars.Schema.__setitem__(self,name:str,dtype:DataType|DataTypeClass|PythonDataType)->None
polars.Schema.dtypes(self)->list[DataType]
polars.Schema.len(self)->int
polars.Schema.names(self)->list[str]
polars.Schema.to_frame(self,*,eager:bool=True)->DataFrame | LazyFrame
polars.Schema.to_python(self)->dict[str, type]
polars.schema.Schema(self,schema:Mapping[str,SchemaInitDataType]|Iterable[tuple[str,SchemaInitDataType]]|None=None,*,check_dtypes:bool=True)
polars.schema.Schema.__eq__(self,other:object)->bool
polars.schema.Schema.__init__(self,schema:Mapping[str,SchemaInitDataType]|Iterable[tuple[str,SchemaInitDataType]]|None=None,*,check_dtypes:bool=True)
polars.schema.Schema.__ne__(self,other:object)->bool
polars.schema.Schema.__setitem__(self,name:str,dtype:DataType|DataTypeClass|PythonDataType)->None
polars.schema.Schema.dtypes(self)->list[DataType]
polars.schema.Schema.len(self)->int
polars.schema.Schema.names(self)->list[str]
polars.schema.Schema.to_frame(self,*,eager:bool=True)->DataFrame | LazyFrame
polars.schema.Schema.to_python(self)->dict[str, type]
polars.schema._check_dtype(tp:DataType|DataTypeClass)->DataType


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/string_cache.py----------------------------------------
A:polars.string_cache.self._string_cache->PyStringCacheHolder()
polars.StringCache(contextlib.ContextDecorator)
polars.StringCache.__enter__(self)->Self
polars.StringCache.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.disable_string_cache()->bool
polars.enable_string_cache()->None
polars.string_cache.StringCache(contextlib.ContextDecorator)
polars.string_cache.StringCache.__enter__(self)->Self
polars.string_cache.StringCache.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.string_cache.disable_string_cache()->bool
polars.string_cache.enable_string_cache()->None
polars.string_cache.using_string_cache()->bool
polars.using_string_cache()->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/config.py----------------------------------------
A:polars.config.self._original_state->self.save()
A:polars.config.options->polars.dependencies.json.dumps({'environment': environment_vars, 'direct': direct_vars}, separators=(',', ':'))
A:polars.config.cfg_load->Config()
A:polars.config.opts->polars.dependencies.json.dumps({'environment': environment_vars, 'direct': direct_vars}, separators=(',', ':')).get('environment', {})
A:polars.config.file->Path(normalize_filepath(file)).resolve()
A:polars.config.config_state[cfg_methodname]->get_value()
A:polars.config.os.environ['POLARS_AUTO_STRUCTIFY']->str(int(active))
A:polars.config.os.environ['POLARS_FMT_STR_LEN']->str(n)
A:polars.config.os.environ['POLARS_FMT_TABLE_CELL_LIST_LEN']->str(n)
A:polars.config.os.environ['POLARS_STREAMING_CHUNK_SIZE']->str(size)
A:polars.config.os.environ['POLARS_FMT_MAX_COLS']->str(n)
A:polars.config.os.environ['POLARS_FMT_TABLE_INLINE_COLUMN_DATA_TYPE']->str(int(active))
A:polars.config.os.environ['POLARS_FMT_TABLE_DATAFRAME_SHAPE_BELOW']->str(int(active))
A:polars.config.valid_format_names->get_args(TableFormatNames)
A:polars.config.os.environ['POLARS_FMT_TABLE_ROUNDED_CORNERS']->str(int(rounded_corners))
A:polars.config.os.environ['POLARS_FMT_TABLE_HIDE_COLUMN_DATA_TYPES']->str(int(active))
A:polars.config.os.environ['POLARS_FMT_TABLE_HIDE_COLUMN_NAMES']->str(int(active))
A:polars.config.os.environ['POLARS_FMT_TABLE_HIDE_COLUMN_SEPARATOR']->str(int(active))
A:polars.config.os.environ['POLARS_FMT_TABLE_HIDE_DATAFRAME_SHAPE_INFORMATION']->str(int(active))
A:polars.config.os.environ['POLARS_FMT_MAX_ROWS']->str(n)
A:polars.config.os.environ['POLARS_TABLE_WIDTH']->str(width)
A:polars.config.os.environ['POLARS_VERBOSE']->str(int(active))
A:polars.config.os.environ['POLARS_WARN_UNSTABLE']->str(int(active))
A:polars.config.os.environ['POLARS_MAX_EXPR_DEPTH']->str(limit)
A:polars.config.supported_engines->get_args(get_args(EngineType)[0])
polars.Config(self,*,restore_defaults:bool=False,apply_on_context_enter:bool=False,**options:Unpack[ConfigParameters])
polars.Config.__enter__(self)->Self
polars.Config.__eq__(self,other:object)->bool
polars.Config.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.Config.__ne__(self,other:object)->bool
polars.Config._set_config_params(self,**options:Unpack[ConfigParameters])->None
polars.Config.load(cls,cfg:str)->Config
polars.Config.load_from_file(cls,file:Path|str)->Config
polars.Config.restore_defaults(cls)->type[Config]
polars.Config.save(cls,*,if_set:bool=False)->str
polars.Config.save_to_file(cls,file:Path|str)->None
polars.Config.set_ascii_tables(cls,active:bool|None=True)->type[Config]
polars.Config.set_auto_structify(cls,active:bool|None=False)->type[Config]
polars.Config.set_decimal_separator(cls,separator:str|None=None)->type[Config]
polars.Config.set_engine_affinity(cls,engine:EngineType|None=None)->type[Config]
polars.Config.set_expr_depth_warning(cls,limit:int)->type[Config]
polars.Config.set_float_precision(cls,precision:int|None=None)->type[Config]
polars.Config.set_fmt_float(cls,fmt:FloatFmt|None='mixed')->type[Config]
polars.Config.set_fmt_str_lengths(cls,n:int|None)->type[Config]
polars.Config.set_fmt_table_cell_list_len(cls,n:int|None)->type[Config]
polars.Config.set_streaming_chunk_size(cls,size:int|None)->type[Config]
polars.Config.set_tbl_cell_alignment(cls,format:Literal['LEFT','CENTER','RIGHT']|None)->type[Config]
polars.Config.set_tbl_cell_numeric_alignment(cls,format:Literal['LEFT','CENTER','RIGHT']|None)->type[Config]
polars.Config.set_tbl_cols(cls,n:int|None)->type[Config]
polars.Config.set_tbl_column_data_type_inline(cls,active:bool|None=True)->type[Config]
polars.Config.set_tbl_dataframe_shape_below(cls,active:bool|None=True)->type[Config]
polars.Config.set_tbl_formatting(cls,format:TableFormatNames|None=None,rounded_corners:bool|None=False)->type[Config]
polars.Config.set_tbl_hide_column_data_types(cls,active:bool|None=True)->type[Config]
polars.Config.set_tbl_hide_column_names(cls,active:bool|None=True)->type[Config]
polars.Config.set_tbl_hide_dataframe_shape(cls,active:bool|None=True)->type[Config]
polars.Config.set_tbl_hide_dtype_separator(cls,active:bool|None=True)->type[Config]
polars.Config.set_tbl_rows(cls,n:int|None)->type[Config]
polars.Config.set_tbl_width_chars(cls,width:int|None)->type[Config]
polars.Config.set_thousands_separator(cls,separator:str|bool|None=None)->type[Config]
polars.Config.set_trim_decimal_zeros(cls,active:bool|None=True)->type[Config]
polars.Config.set_verbose(cls,active:bool|None=True)->type[Config]
polars.Config.state(cls,*,if_set:bool=False,env_only:bool=False)->dict[str, str | None]
polars.Config.warn_unstable(cls,active:bool|None=True)->type[Config]
polars.ConfigParameters(TypedDict,total=False)
polars.config.Config(self,*,restore_defaults:bool=False,apply_on_context_enter:bool=False,**options:Unpack[ConfigParameters])
polars.config.Config.__enter__(self)->Self
polars.config.Config.__eq__(self,other:object)->bool
polars.config.Config.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.config.Config.__init__(self,*,restore_defaults:bool=False,apply_on_context_enter:bool=False,**options:Unpack[ConfigParameters])
polars.config.Config.__ne__(self,other:object)->bool
polars.config.Config._set_config_params(self,**options:Unpack[ConfigParameters])->None
polars.config.Config.load(cls,cfg:str)->Config
polars.config.Config.load_from_file(cls,file:Path|str)->Config
polars.config.Config.restore_defaults(cls)->type[Config]
polars.config.Config.save(cls,*,if_set:bool=False)->str
polars.config.Config.save_to_file(cls,file:Path|str)->None
polars.config.Config.set_ascii_tables(cls,active:bool|None=True)->type[Config]
polars.config.Config.set_auto_structify(cls,active:bool|None=False)->type[Config]
polars.config.Config.set_decimal_separator(cls,separator:str|None=None)->type[Config]
polars.config.Config.set_engine_affinity(cls,engine:EngineType|None=None)->type[Config]
polars.config.Config.set_expr_depth_warning(cls,limit:int)->type[Config]
polars.config.Config.set_float_precision(cls,precision:int|None=None)->type[Config]
polars.config.Config.set_fmt_float(cls,fmt:FloatFmt|None='mixed')->type[Config]
polars.config.Config.set_fmt_str_lengths(cls,n:int|None)->type[Config]
polars.config.Config.set_fmt_table_cell_list_len(cls,n:int|None)->type[Config]
polars.config.Config.set_streaming_chunk_size(cls,size:int|None)->type[Config]
polars.config.Config.set_tbl_cell_alignment(cls,format:Literal['LEFT','CENTER','RIGHT']|None)->type[Config]
polars.config.Config.set_tbl_cell_numeric_alignment(cls,format:Literal['LEFT','CENTER','RIGHT']|None)->type[Config]
polars.config.Config.set_tbl_cols(cls,n:int|None)->type[Config]
polars.config.Config.set_tbl_column_data_type_inline(cls,active:bool|None=True)->type[Config]
polars.config.Config.set_tbl_dataframe_shape_below(cls,active:bool|None=True)->type[Config]
polars.config.Config.set_tbl_formatting(cls,format:TableFormatNames|None=None,rounded_corners:bool|None=False)->type[Config]
polars.config.Config.set_tbl_hide_column_data_types(cls,active:bool|None=True)->type[Config]
polars.config.Config.set_tbl_hide_column_names(cls,active:bool|None=True)->type[Config]
polars.config.Config.set_tbl_hide_dataframe_shape(cls,active:bool|None=True)->type[Config]
polars.config.Config.set_tbl_hide_dtype_separator(cls,active:bool|None=True)->type[Config]
polars.config.Config.set_tbl_rows(cls,n:int|None)->type[Config]
polars.config.Config.set_tbl_width_chars(cls,width:int|None)->type[Config]
polars.config.Config.set_thousands_separator(cls,separator:str|bool|None=None)->type[Config]
polars.config.Config.set_trim_decimal_zeros(cls,active:bool|None=True)->type[Config]
polars.config.Config.set_verbose(cls,active:bool|None=True)->type[Config]
polars.config.Config.state(cls,*,if_set:bool=False,env_only:bool=False)->dict[str, str | None]
polars.config.Config.warn_unstable(cls,active:bool|None=True)->type[Config]
polars.config.ConfigParameters(TypedDict,total=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/type_aliases.py----------------------------------------
polars.type_aliases.__getattr__(name:str)->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_cpu_check.py----------------------------------------
A:polars._cpu_check.self.win->ctypes.CDLL('kernel32.dll')
A:polars._cpu_check.size->len(opc)
A:polars._cpu_check.code->(ctypes.c_ubyte * size)(*opc)
A:polars._cpu_check.self.addr->ctypes.addressof(ctypes.c_void_p.from_buffer(self.mmap))
A:polars._cpu_check.libc->_open_posix_libc()
A:polars._cpu_check.self.mmap->mmap.mmap(-1, size, mmap.MAP_PRIVATE | mmap.MAP_ANONYMOUS, mmap.PROT_READ | mmap.PROT_WRITE)
A:polars._cpu_check.func_type->CFUNCTYPE(None, POINTER(CPUID_struct), c_uint32, c_uint32)
A:polars._cpu_check.self.func_ptr->func_type(self.addr)
A:polars._cpu_check.struct->CPUID_struct()
A:polars._cpu_check.cpuid->CPUID()
A:polars._cpu_check.cpuid1->cpuid(1, 0)
A:polars._cpu_check.cpuid7->cpuid(7, 0)
A:polars._cpu_check.cpuid81h->cpuid(2147483649, 0)
A:polars._cpu_check.supported_cpu_flags->_read_cpu_flags()
polars._cpu_check.CPUID(self)
polars._cpu_check.CPUID.__del__(self)->None
polars._cpu_check.CPUID.__init__(self)
polars._cpu_check.CPUID_struct(ctypes.Structure)
polars._cpu_check._open_posix_libc()->ctypes.CDLL
polars._cpu_check._read_cpu_flags()->dict[str, bool]
polars._cpu_check.check_cpu_flags()->None
polars._cpu_check.get_lts_cpu()->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/selectors.py----------------------------------------
A:polars.selectors.target->DataFrame(schema=target)
A:polars.selectors.items_iter->_parse_inputs_as_iterable(items)
A:polars.selectors.selector_cols->expand_selector(frame, item)
A:polars.selectors.expanded[key]->expand_selector(df, selector=value)
A:polars.selectors.cols->expand_selector(df, selector=key)
A:polars.selectors.str_params->', '.join((repr(v)[1:-1] if k.startswith('*') else f'{k}={v!r}' for (k, v) in params.items())).rstrip(',')
A:polars.selectors.colname->by_name(other.meta.output_name()).meta.output_name()
A:polars.selectors.other->by_name(other.meta.output_name())
A:polars.selectors.rx->'|'.join((re_escape(x) if escape else x for x in strings))
A:polars.selectors.escaped_substring->_re_string(substring)
A:polars.selectors.escaped_suffix->_re_string(suffix)
A:polars.selectors.escaped_prefix->_re_string(prefix)
polars.selectors._combine_as_selector(items:str|Expr|PolarsDataType|SelectorType|Collection[str|Expr|PolarsDataType|SelectorType],*more_items:str|Expr|PolarsDataType|SelectorType)->SelectorType
polars.selectors._expand_selector_dicts(df:DataFrame,d:Mapping[Any,Any]|None,*,expand_keys:bool,expand_values:bool,tuple_keys:bool=False)->dict[str, Any]
polars.selectors._expand_selectors(frame:DataFrame|LazyFrame,*items:Any)->list[Any]
polars.selectors._re_string(string:str|Collection[str],*,escape:bool=True)->str
polars.selectors._selector_proxy_(self,expr:Expr,name:str,parameters:dict[str,Any]|None=None)
polars.selectors._selector_proxy_.__add__(self,other:Any)->SelectorType | Expr
polars.selectors._selector_proxy_.__and__(self,other:Any)->SelectorType | Expr
polars.selectors._selector_proxy_.__hash__(self)->int
polars.selectors._selector_proxy_.__init__(self,expr:Expr,name:str,parameters:dict[str,Any]|None=None)
polars.selectors._selector_proxy_.__invert__(self)->Self
polars.selectors._selector_proxy_.__or__(self,other:Any)->SelectorType | Expr
polars.selectors._selector_proxy_.__radd__(self,other:Any)->Expr
polars.selectors._selector_proxy_.__rand__(self,other:Any)->Expr
polars.selectors._selector_proxy_.__repr__(self)->str
polars.selectors._selector_proxy_.__ror__(self,other:Any)->Expr
polars.selectors._selector_proxy_.__rsub__(self,other:Any)->NoReturn
polars.selectors._selector_proxy_.__rxor__(self,other:Any)->Expr
polars.selectors._selector_proxy_.__sub__(self,other:Any)->Expr
polars.selectors._selector_proxy_.__xor__(self,other:Any)->SelectorType | Expr
polars.selectors._selector_proxy_.as_expr(self)->Expr
polars.selectors.all()->SelectorType
polars.selectors.alpha(ascii_only:bool=False,*,ignore_spaces:bool=False)->SelectorType
polars.selectors.alphanumeric(ascii_only:bool=False,*,ignore_spaces:bool=False)->SelectorType
polars.selectors.binary()->SelectorType
polars.selectors.boolean()->SelectorType
polars.selectors.by_dtype(*dtypes:PolarsDataType|PythonDataType|Iterable[PolarsDataType]|Iterable[PythonDataType])->SelectorType
polars.selectors.by_index(*indices:int|range|Sequence[int|range])->SelectorType
polars.selectors.by_name(*names:str|Collection[str],require_all:bool=True)->SelectorType
polars.selectors.categorical()->SelectorType
polars.selectors.contains(*substring:str)->SelectorType
polars.selectors.date()->SelectorType
polars.selectors.datetime(time_unit:TimeUnit|Collection[TimeUnit]|None=None,time_zone:str|timezone|Collection[str|timezone|None]|None=('*',None))->SelectorType
polars.selectors.decimal()->SelectorType
polars.selectors.digit(ascii_only:bool=False)->SelectorType
polars.selectors.duration(time_unit:TimeUnit|Collection[TimeUnit]|None=None)->SelectorType
polars.selectors.ends_with(*suffix:str)->SelectorType
polars.selectors.exclude(columns:str|PolarsDataType|SelectorType|Expr|Collection[str|PolarsDataType|SelectorType|Expr],*more_columns:str|PolarsDataType|SelectorType|Expr)->SelectorType
polars.selectors.expand_selector(target:DataFrame|LazyFrame|Mapping[str,PolarsDataType],selector:SelectorType|Expr,*,strict:bool=True)->tuple[str, ...]
polars.selectors.first()->SelectorType
polars.selectors.float()->SelectorType
polars.selectors.integer()->SelectorType
polars.selectors.is_selector(obj:Any)->bool
polars.selectors.last()->SelectorType
polars.selectors.matches(pattern:str)->SelectorType
polars.selectors.numeric()->SelectorType
polars.selectors.object()->SelectorType
polars.selectors.signed_integer()->SelectorType
polars.selectors.starts_with(*prefix:str)->SelectorType
polars.selectors.string(*,include_categorical:bool=False)->SelectorType
polars.selectors.temporal()->SelectorType
polars.selectors.time()->SelectorType
polars.selectors.unsigned_integer()->SelectorType


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_typing.py----------------------------------------
A:polars._typing.PolarsType->TypeVar('PolarsType', 'DataFrame', 'LazyFrame', 'Series', 'Expr')
A:polars._typing.FrameType->TypeVar('FrameType', 'DataFrame', 'LazyFrame')
polars._typing.ArrowArrayExportable(Protocol)
polars._typing.ArrowArrayExportable.__arrow_c_array__(self,requested_schema:object|None=None)->tuple[object, object]
polars._typing.ArrowStreamExportable(Protocol)
polars._typing.ArrowStreamExportable.__arrow_c_stream__(self,requested_schema:object|None=None)->object
polars._typing.BasicConnection(Protocol)
polars._typing.BasicConnection.cursor(self,*args:Any,**kwargs:Any)->Any
polars._typing.BasicCursor(Protocol)
polars._typing.BasicCursor.execute(self,*args:Any,**kwargs:Any)->Any
polars._typing.Cursor(BasicCursor)
polars._typing.Cursor.fetchall(self,*args:Any,**kwargs:Any)->Any
polars._typing.Cursor.fetchmany(self,*args:Any,**kwargs:Any)->Any
polars._typing.PartitioningScheme(self,py_partitioning:PyPartitioning)
polars._typing.PartitioningScheme.__init__(self,py_partitioning:PyPartitioning)
polars._typing.PartitioningScheme._base_path(self)->str | None
polars._typing.SeriesBuffers(TypedDict)


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/dataframe/frame.py----------------------------------------
A:polars.dataframe.frame.T->TypeVar('T')
A:polars.dataframe.frame.P->ParamSpec('P')
A:polars.dataframe.frame.self._df->dataframe_to_pydf(data, schema=schema, schema_overrides=schema_overrides, strict=strict)
A:polars.dataframe.frame.source->normalize_filepath(source)
A:polars.dataframe.frame.df->df.select(columns).select(columns)
A:polars.dataframe.frame.arr->frame_to_numpy(frame, writable=True, target='Tensor')
A:polars.dataframe.frame.other_renamed->other.extend_constant(value=value, n=length - 1).select(F.all().name.suffix(suffix))
A:polars.dataframe.frame.combined->polars.functions.concat([self, other_renamed], how='horizontal')
A:polars.dataframe.frame.s->StringIO().getvalue()
A:polars.dataframe.frame.other->other.extend_constant(value=value, n=length - 1).extend_constant(value=value, n=length - 1)
A:polars.dataframe.frame.value->polars.dependencies.numpy.array(value)
A:polars.dataframe.frame.max_cols->int(os.environ.get('POLARS_FMT_MAX_COLS', default=75))
A:polars.dataframe.frame.max_rows->int(os.environ.get('POLARS_FMT_MAX_ROWS', default=10))
A:polars.dataframe.frame.record_batches->df.select(columns).select(columns)._df.to_pandas()
A:polars.dataframe.frame.out->polars.dependencies.numpy.empty(self.height, dtype=struct_dtype)
A:polars.dataframe.frame.jx->import_optional('jax', install_message='Please see `https://jax.readthedocs.io/en/latest/installation.html` for specific installation recommendations for the Jax package')
A:polars.dataframe.frame.frame->self.cast(to_dtype)
A:polars.dataframe.frame.label_frame->self.cast(to_dtype).select(label)
A:polars.dataframe.frame.valid_jax_types->', '.join(get_args(JaxExportType))
A:polars.dataframe.frame.torch->import_optional('torch')
A:polars.dataframe.frame.valid_torch_types->', '.join(get_args(TorchExportType))
A:polars.dataframe.frame.pandas_df->polars.dependencies.pandas.DataFrame()
A:polars.dataframe.frame.tbl->polars.dependencies.pyarrow.table(data)
A:polars.dataframe.frame.date_as_object->kwargs.pop('date_as_object', False)
A:polars.dataframe.frame.output->StringIO()
A:polars.dataframe.frame.json_bytes->buf.getvalue()
A:polars.dataframe.frame.json_str->write_json_to_string()
A:polars.dataframe.frame.file->normalize_filepath(file)
A:polars.dataframe.frame.ndjson_bytes->buf.getvalue()
A:polars.dataframe.frame.ndjson_str->write_ndjson_to_string()
A:polars.dataframe.frame.csv_bytes->buf.getvalue()
A:polars.dataframe.frame.bufferfile->BytesIO()
A:polars.dataframe.frame.csv_str->write_csv_to_string()
A:polars.dataframe.frame.credential_provider_builder->_init_credential_provider_builder(credential_provider, target, storage_options, 'write_delta')
A:polars.dataframe.frame.storage_options->list(storage_options.items())
A:polars.dataframe.frame.xlsxwriter->import_optional('xlsxwriter', err_prefix='Excel export requires')
A:polars.dataframe.frame.(wb, ws, can_close)->_xl_setup_workbook(workbook, worksheet)
A:polars.dataframe.frame.fmt_cache->_XLFormatCache(wb)
A:polars.dataframe.frame.(table_style, table_options)->_xl_setup_table_options(table_style)
A:polars.dataframe.frame.(table_columns, column_formats, df)->_xl_setup_table_columns(df=df, format_cache=fmt_cache, column_formats=column_formats, column_totals=column_totals, dtype_formats=dtype_formats, header_format=header_format, float_precision=float_precision, table_style=table_style, row_totals=row_totals, sparklines=sparklines, formulas=formulas)
A:polars.dataframe.frame.hidden->set(_expand_selectors(df_original, hidden_columns))
A:polars.dataframe.frame.column_widths->_unpack_multi_column_dict(column_widths or {})
A:polars.dataframe.frame.allowed->', '.join((repr(m) for m in valid_write_modes))
A:polars.dataframe.frame.adbc_driver_manager->import_optional('adbc_driver_manager')
A:polars.dataframe.frame.adbc_version->parse_version(getattr(adbc_driver_manager, '__version__', '0.0'))
A:polars.dataframe.frame.adbc_str_version->'.'.join((str(v) for v in adbc_version))
A:polars.dataframe.frame.(catalog, db_schema, unpacked_table_name)->unpack_table_name(table_name)
A:polars.dataframe.frame.n_rows->len(rows)
A:polars.dataframe.frame.sa_object->connection.connection()
A:polars.dataframe.frame.catalog->load_catalog()
A:polars.dataframe.frame.table->load_catalog().load_table(target)
A:polars.dataframe.frame.data->self.to_arrow()
A:polars.dataframe.frame.target->_resolve_delta_lake_uri(str(target), strict=False)
A:polars.dataframe.frame.credential_provider_creds->_get_credentials_from_provider_expiry_aware(provider)
A:polars.dataframe.frame.dt->DeltaTable(table_uri=target, storage_options=storage_options)
A:polars.dataframe.frame.schema->delta_write_options.pop('schema', None)
A:polars.dataframe.frame.sz->self._df.estimated_size()
A:polars.dataframe.frame.column->polars.functions.col(column)
A:polars.dataframe.frame.max_n_values->min(max_items_per_column, self.height)
A:polars.dataframe.frame.values->self.select(data_cols)
A:polars.dataframe.frame.val_str->', '.join((fn(v) for v in values))
A:polars.dataframe.frame.max_col_name->max((len(col_name) for (col_name, _, _) in data))
A:polars.dataframe.frame.max_col_dtype->max((len(dtype_str) for (_, dtype_str, _) in data))
A:polars.dataframe.frame.n->polars._reexport.Series('', [n])
A:polars.dataframe.frame.every->parse_as_duration_string(every)
A:polars.dataframe.frame.(out, is_df)->self._df.map_rows(function, return_dtype, inference_size)
A:polars.dataframe.frame.columns->_expand_selectors(self, columns)
A:polars.dataframe.frame.on->_expand_selectors(self, on)
A:polars.dataframe.frame.index->_expand_selectors(self, index)
A:polars.dataframe.frame.n_cols->math.ceil(height / n_rows)
A:polars.dataframe.frame.by_parsed->_expand_selectors(self, by, *more_by)
A:polars.dataframe.frame.names->self.select(by_parsed).unique(maintain_order=True).rows()
A:polars.dataframe.frame.expr->polars.functions.struct(struct_fields)
A:polars.dataframe.frame.seed->random.randint(0, 10000)
A:polars.dataframe.frame.fraction->polars._reexport.Series('frac', [fraction])
A:polars.dataframe.frame.acc->operation(acc, self.to_series(i))
A:polars.dataframe.frame.row->self._df.row_tuple(index)
A:polars.dataframe.frame.rows->defaultdict(list)
A:polars.dataframe.frame.key->_expand_selectors(self, key)
A:polars.dataframe.frame.zipped->zip(keys, values.iter_rows(named=named))
A:polars.dataframe.frame.zerocopy_slice->self.slice(offset, buffer_size)
A:polars.dataframe.frame.correlation_matrix->polars.dependencies.numpy.array([correlation_matrix])
A:polars.dataframe.frame.md->md.select(stats).select(stats)
polars.DataFrame(self,data:FrameInitTypes|None=None,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,nan_to_null:bool=False)
polars.DataFrame.__add__(self,other:DataFrame|Series|int|float|bool|str)->DataFrame
polars.DataFrame.__array__(self,dtype:npt.DTypeLike|None=None,copy:bool|None=None)->np.ndarray[Any, Any]
polars.DataFrame.__arrow_c_stream__(self,requested_schema:object|None=None)->object
polars.DataFrame.__bool__(self)->NoReturn
polars.DataFrame.__contains__(self,key:str)->bool
polars.DataFrame.__copy__(self)->DataFrame
polars.DataFrame.__dataframe__(self,nan_as_null:bool=False,allow_copy:bool=True)->PolarsDataFrame
polars.DataFrame.__deepcopy__(self,memo:None=None)->DataFrame
polars.DataFrame.__eq__(self,other:object)->DataFrame
polars.DataFrame.__floordiv__(self,other:DataFrame|Series|int|float)->DataFrame
polars.DataFrame.__ge__(self,other:Any)->DataFrame
polars.DataFrame.__getitem__(self,key:SingleIndexSelector|SingleColSelector|MultiColSelector|MultiIndexSelector|tuple[SingleIndexSelector,SingleColSelector]|tuple[SingleIndexSelector,MultiColSelector]|tuple[MultiIndexSelector,SingleColSelector]|tuple[MultiIndexSelector,MultiColSelector])->DataFrame | Series | Any
polars.DataFrame.__getstate__(self)->bytes
polars.DataFrame.__gt__(self,other:Any)->DataFrame
polars.DataFrame.__iter__(self)->Iterator[Series]
polars.DataFrame.__le__(self,other:Any)->DataFrame
polars.DataFrame.__len__(self)->int
polars.DataFrame.__lt__(self,other:Any)->DataFrame
polars.DataFrame.__mod__(self,other:DataFrame|Series|int|float)->DataFrame
polars.DataFrame.__mul__(self,other:DataFrame|Series|int|float)->DataFrame
polars.DataFrame.__ne__(self,other:object)->DataFrame
polars.DataFrame.__radd__(self,other:DataFrame|Series|int|float|bool|str)->DataFrame
polars.DataFrame.__repr__(self)->str
polars.DataFrame.__reversed__(self)->Iterator[Series]
polars.DataFrame.__rmul__(self,other:int|float)->DataFrame
polars.DataFrame.__setitem__(self,key:str|Sequence[int]|Sequence[str]|tuple[Any,str|int],value:Any)->None
polars.DataFrame.__setstate__(self,state:bytes)->None
polars.DataFrame.__str__(self)->str
polars.DataFrame.__sub__(self,other:DataFrame|Series|int|float)->DataFrame
polars.DataFrame.__truediv__(self,other:DataFrame|Series|int|float)->DataFrame
polars.DataFrame._cast_all_from_to(self,df:DataFrame,from_:frozenset[PolarsDataType],to:PolarsDataType)->DataFrame
polars.DataFrame._comp(self,other:Any,op:ComparisonOperator)->DataFrame
polars.DataFrame._compare_to_non_df(self,other:Any,op:ComparisonOperator)->DataFrame
polars.DataFrame._compare_to_other_df(self,other:DataFrame,op:ComparisonOperator)->DataFrame
polars.DataFrame._div(self,other:Any,*,floordiv:bool)->DataFrame
polars.DataFrame._from_arrow(cls,data:pa.Table|pa.RecordBatch,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True)->DataFrame
polars.DataFrame._from_pandas(cls,data:pd.DataFrame,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True,nan_to_null:bool=True,include_index:bool=False)->DataFrame
polars.DataFrame._from_pydf(cls,py_df:PyDataFrame)->DataFrame
polars.DataFrame._ipython_key_completions_(self)->list[str]
polars.DataFrame._replace(self,column:str,new_column:Series)->DataFrame
polars.DataFrame._repr_html_(self,*,_from_series:bool=False)->str
polars.DataFrame._row_encode(self,fields:list[tuple[bool,bool,bool]])->Series
polars.DataFrame._to_metadata(self,columns:None|str|list[str]=None,stats:None|str|list[str]=None)->DataFrame
polars.DataFrame._to_pandas_with_object_columns(self,*,use_pyarrow_extension_array:bool,**kwargs:Any)->pd.DataFrame
polars.DataFrame._to_pandas_without_object_columns(self,df:DataFrame,*,use_pyarrow_extension_array:bool,**kwargs:Any)->pd.DataFrame
polars.DataFrame.approx_n_unique(self)->DataFrame
polars.DataFrame.bottom_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],reverse:bool|Sequence[bool]=False)->DataFrame
polars.DataFrame.cast(self,dtypes:Mapping[ColumnNameOrSelector|PolarsDataType,PolarsDataType|PythonDataType]|PolarsDataType,*,strict:bool=True)->DataFrame
polars.DataFrame.clear(self,n:int=0)->DataFrame
polars.DataFrame.clone(self)->DataFrame
polars.DataFrame.collect_schema(self)->Schema
polars.DataFrame.columns(self)->list[str]
polars.DataFrame.columns(self,names:Sequence[str])->None
polars.DataFrame.corr(self,**kwargs:Any)->DataFrame
polars.DataFrame.count(self)->DataFrame
polars.DataFrame.describe(self,percentiles:Sequence[float]|float|None=(0.25,0.5,0.75),*,interpolation:RollingInterpolationMethod='nearest')->DataFrame
polars.DataFrame.deserialize(cls,source:str|Path|IOBase,*,format:SerializationFormat='binary')->DataFrame
polars.DataFrame.drop(self,*columns:ColumnNameOrSelector|Iterable[ColumnNameOrSelector],strict:bool=True)->DataFrame
polars.DataFrame.drop_in_place(self,name:str)->Series
polars.DataFrame.drop_nans(self,subset:ColumnNameOrSelector|Collection[ColumnNameOrSelector]|None=None)->DataFrame
polars.DataFrame.drop_nulls(self,subset:ColumnNameOrSelector|Collection[ColumnNameOrSelector]|None=None)->DataFrame
polars.DataFrame.dtypes(self)->list[DataType]
polars.DataFrame.equals(self,other:DataFrame,*,null_equal:bool=True)->bool
polars.DataFrame.estimated_size(self,unit:SizeUnit='b')->int | float
polars.DataFrame.explode(self,columns:str|Expr|Sequence[str|Expr],*more_columns:str|Expr)->DataFrame
polars.DataFrame.extend(self,other:DataFrame)->DataFrame
polars.DataFrame.fill_nan(self,value:Expr|int|float|None)->DataFrame
polars.DataFrame.fill_null(self,value:Any|Expr|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None,*,matches_supertype:bool=True)->DataFrame
polars.DataFrame.filter(self,*predicates:IntoExprColumn|Iterable[IntoExprColumn]|bool|list[bool]|np.ndarray[Any,Any],**constraints:Any)->DataFrame
polars.DataFrame.flags(self)->dict[str, dict[str, bool]]
polars.DataFrame.fold(self,operation:Callable[[Series,Series],Series])->Series
polars.DataFrame.gather_every(self,n:int,offset:int=0)->DataFrame
polars.DataFrame.get_column(self,name:str,*,default:Any|NoDefault=no_default)->Series | Any
polars.DataFrame.get_column_index(self,name:str)->int
polars.DataFrame.get_columns(self)->list[Series]
polars.DataFrame.glimpse(self,*,max_items_per_column:int=10,max_colname_length:int=50,return_as_string:bool=False)->str | None
polars.DataFrame.group_by(self,*by:IntoExpr|Iterable[IntoExpr],maintain_order:bool=False,**named_by:IntoExpr)->GroupBy
polars.DataFrame.group_by_dynamic(self,index_column:IntoExpr,*,every:str|timedelta,period:str|timedelta|None=None,offset:str|timedelta|None=None,include_boundaries:bool=False,closed:ClosedInterval='left',label:Label='left',group_by:IntoExpr|Iterable[IntoExpr]|None=None,start_by:StartBy='window')->DynamicGroupBy
polars.DataFrame.hash_rows(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->Series
polars.DataFrame.head(self,n:int=5)->DataFrame
polars.DataFrame.height(self)->int
polars.DataFrame.hstack(self,columns:list[Series]|DataFrame,*,in_place:bool=False)->DataFrame
polars.DataFrame.insert_column(self,index:int,column:IntoExprColumn)->DataFrame
polars.DataFrame.interpolate(self)->DataFrame
polars.DataFrame.is_duplicated(self)->Series
polars.DataFrame.is_empty(self)->bool
polars.DataFrame.is_unique(self)->Series
polars.DataFrame.item(self,row:int|None=None,column:int|str|None=None)->Any
polars.DataFrame.iter_columns(self)->Iterator[Series]
polars.DataFrame.iter_rows(self,*,named:bool=False,buffer_size:int=512)->Iterator[tuple[Any, ...]] | Iterator[dict[str, Any]]
polars.DataFrame.iter_slices(self,n_rows:int=10000)->Iterator[DataFrame]
polars.DataFrame.join(self,other:DataFrame,on:str|Expr|Sequence[str|Expr]|None=None,how:JoinStrategy='inner',*,left_on:str|Expr|Sequence[str|Expr]|None=None,right_on:str|Expr|Sequence[str|Expr]|None=None,suffix:str='_right',validate:JoinValidation='m:m',nulls_equal:bool=False,coalesce:bool|None=None,maintain_order:MaintainOrderJoin|None=None)->DataFrame
polars.DataFrame.join_asof(self,other:DataFrame,*,left_on:str|None|Expr=None,right_on:str|None|Expr=None,on:str|None|Expr=None,by_left:str|Sequence[str]|None=None,by_right:str|Sequence[str]|None=None,by:str|Sequence[str]|None=None,strategy:AsofJoinStrategy='backward',suffix:str='_right',tolerance:str|int|float|timedelta|None=None,allow_parallel:bool=True,force_parallel:bool=False,coalesce:bool=True,allow_exact_matches:bool=True,check_sortedness:bool=True)->DataFrame
polars.DataFrame.join_where(self,other:DataFrame,*predicates:Expr|Iterable[Expr],suffix:str='_right')->DataFrame
polars.DataFrame.lazy(self)->LazyFrame
polars.DataFrame.limit(self,n:int=5)->DataFrame
polars.DataFrame.map_rows(self,function:Callable[[tuple[Any,...]],Any],return_dtype:PolarsDataType|None=None,*,inference_size:int=256)->DataFrame
polars.DataFrame.max(self)->DataFrame
polars.DataFrame.max_horizontal(self)->Series
polars.DataFrame.mean(self)->DataFrame
polars.DataFrame.mean_horizontal(self,*,ignore_nulls:bool=True)->Series
polars.DataFrame.median(self)->DataFrame
polars.DataFrame.melt(self,id_vars:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,value_vars:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,variable_name:str|None=None,value_name:str|None=None)->DataFrame
polars.DataFrame.merge_sorted(self,other:DataFrame,key:str)->DataFrame
polars.DataFrame.min(self)->DataFrame
polars.DataFrame.min_horizontal(self)->Series
polars.DataFrame.n_chunks(self,strategy:Literal['first','all']='first')->int | list[int]
polars.DataFrame.n_unique(self,subset:str|Expr|Sequence[str|Expr]|None=None)->int
polars.DataFrame.null_count(self)->DataFrame
polars.DataFrame.partition_by(self,by:ColumnNameOrSelector|Sequence[ColumnNameOrSelector],*more_by:ColumnNameOrSelector,maintain_order:bool=True,include_key:bool=True,as_dict:bool=False)->list[DataFrame] | dict[tuple[object, ...], DataFrame]
polars.DataFrame.pipe(self,function:Callable[Concatenate[DataFrame,P],T],*args:P.args,**kwargs:P.kwargs)->T
polars.DataFrame.pivot(self,on:ColumnNameOrSelector|Sequence[ColumnNameOrSelector],*,index:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,values:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,aggregate_function:PivotAgg|Expr|None=None,maintain_order:bool=True,sort_columns:bool=False,separator:str='_')->DataFrame
polars.DataFrame.plot(self)->DataFramePlot
polars.DataFrame.product(self)->DataFrame
polars.DataFrame.quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest')->DataFrame
polars.DataFrame.rechunk(self)->DataFrame
polars.DataFrame.remove(self,*predicates:IntoExprColumn|Iterable[IntoExprColumn]|bool|list[bool]|np.ndarray[Any,Any],**constraints:Any)->DataFrame
polars.DataFrame.rename(self,mapping:dict[str,str]|Callable[[str],str],*,strict:bool=True)->DataFrame
polars.DataFrame.replace_column(self,index:int,column:Series)->DataFrame
polars.DataFrame.reverse(self)->DataFrame
polars.DataFrame.rolling(self,index_column:IntoExpr,*,period:str|timedelta,offset:str|timedelta|None=None,closed:ClosedInterval='right',group_by:IntoExpr|Iterable[IntoExpr]|None=None)->RollingGroupBy
polars.DataFrame.row(self,index:int|None=None,*,by_predicate:Expr|None=None,named:bool=False)->tuple[Any, ...] | dict[str, Any]
polars.DataFrame.rows(self,*,named:bool=False)->list[tuple[Any, ...]] | list[dict[str, Any]]
polars.DataFrame.rows_by_key(self,key:ColumnNameOrSelector|Sequence[ColumnNameOrSelector],*,named:bool=False,include_key:bool=False,unique:bool=False)->dict[Any, Any]
polars.DataFrame.sample(self,n:int|Series|None=None,*,fraction:float|Series|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->DataFrame
polars.DataFrame.schema(self)->Schema
polars.DataFrame.select(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->DataFrame
polars.DataFrame.select_seq(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->DataFrame
polars.DataFrame.serialize(self,file:IOBase|str|Path|None=None,*,format:SerializationFormat='binary')->bytes | str | None
polars.DataFrame.set_sorted(self,column:str,*,descending:bool=False)->DataFrame
polars.DataFrame.shape(self)->tuple[int, int]
polars.DataFrame.shift(self,n:int=1,*,fill_value:IntoExpr|None=None)->DataFrame
polars.DataFrame.shrink_to_fit(self,*,in_place:bool=False)->DataFrame
polars.DataFrame.slice(self,offset:int,length:int|None=None)->DataFrame
polars.DataFrame.sort(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,descending:bool|Sequence[bool]=False,nulls_last:bool|Sequence[bool]=False,multithreaded:bool=True,maintain_order:bool=False)->DataFrame
polars.DataFrame.sql(self,query:str,*,table_name:str='self')->DataFrame
polars.DataFrame.std(self,ddof:int=1)->DataFrame
polars.DataFrame.style(self)->GT
polars.DataFrame.sum(self)->DataFrame
polars.DataFrame.sum_horizontal(self,*,ignore_nulls:bool=True)->Series
polars.DataFrame.tail(self,n:int=5)->DataFrame
polars.DataFrame.to_arrow(self,*,compat_level:CompatLevel|None=None)->pa.Table
polars.DataFrame.to_dict(self,*,as_series:bool=True)->dict[str, Series] | dict[str, list[Any]]
polars.DataFrame.to_dicts(self)->list[dict[str, Any]]
polars.DataFrame.to_dummies(self,columns:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,*,separator:str='_',drop_first:bool=False)->DataFrame
polars.DataFrame.to_init_repr(self,n:int=1000)->str
polars.DataFrame.to_jax(self,return_type:JaxExportType='array',*,device:jax.Device|str|None=None,label:str|Expr|Sequence[str|Expr]|None=None,features:str|Expr|Sequence[str|Expr]|None=None,dtype:PolarsDataType|None=None,order:IndexOrder='fortran')->jax.Array | dict[str, jax.Array]
polars.DataFrame.to_numpy(self,*,order:IndexOrder='fortran',writable:bool=False,allow_copy:bool=True,structured:bool=False,use_pyarrow:bool|None=None)->np.ndarray[Any, Any]
polars.DataFrame.to_pandas(self,*,use_pyarrow_extension_array:bool=False,**kwargs:Any)->pd.DataFrame
polars.DataFrame.to_series(self,index:int=0)->Series
polars.DataFrame.to_struct(self,name:str='')->Series
polars.DataFrame.to_torch(self,return_type:TorchExportType='tensor',*,label:str|Expr|Sequence[str|Expr]|None=None,features:str|Expr|Sequence[str|Expr]|None=None,dtype:PolarsDataType|None=None)->torch.Tensor | dict[str, torch.Tensor] | PolarsDataset
polars.DataFrame.top_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],reverse:bool|Sequence[bool]=False)->DataFrame
polars.DataFrame.transpose(self,*,include_header:bool=False,header_name:str='column',column_names:str|Iterable[str]|None=None)->DataFrame
polars.DataFrame.unique(self,subset:ColumnNameOrSelector|Collection[ColumnNameOrSelector]|None=None,*,keep:UniqueKeepStrategy='any',maintain_order:bool=False)->DataFrame
polars.DataFrame.unnest(self,columns:ColumnNameOrSelector|Collection[ColumnNameOrSelector],*more_columns:ColumnNameOrSelector)->DataFrame
polars.DataFrame.unpivot(self,on:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,*,index:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,variable_name:str|None=None,value_name:str|None=None)->DataFrame
polars.DataFrame.unstack(self,*,step:int,how:UnstackDirection='vertical',columns:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,fill_values:list[Any]|None=None)->DataFrame
polars.DataFrame.update(self,other:DataFrame,on:str|Sequence[str]|None=None,how:Literal['left','inner','full']='left',*,left_on:str|Sequence[str]|None=None,right_on:str|Sequence[str]|None=None,include_nulls:bool=False,maintain_order:MaintainOrderJoin|None='left')->DataFrame
polars.DataFrame.upsample(self,time_column:str,*,every:str|timedelta,group_by:str|Sequence[str]|None=None,maintain_order:bool=False)->DataFrame
polars.DataFrame.var(self,ddof:int=1)->DataFrame
polars.DataFrame.vstack(self,other:DataFrame,*,in_place:bool=False)->DataFrame
polars.DataFrame.width(self)->int
polars.DataFrame.with_columns(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->DataFrame
polars.DataFrame.with_columns_seq(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->DataFrame
polars.DataFrame.with_row_count(self,name:str='row_nr',offset:int=0)->DataFrame
polars.DataFrame.with_row_index(self,name:str='index',offset:int=0)->DataFrame
polars.DataFrame.write_avro(self,file:str|Path|IO[bytes],compression:AvroCompression='uncompressed',name:str='')->None
polars.DataFrame.write_clipboard(self,*,separator:str='\t',**kwargs:Any)->None
polars.DataFrame.write_csv(self,file:str|Path|IO[str]|IO[bytes]|None=None,*,include_bom:bool=False,include_header:bool=True,separator:str=',',line_terminator:str='\n',quote_char:str='"',batch_size:int=1024,datetime_format:str|None=None,date_format:str|None=None,time_format:str|None=None,float_scientific:bool|None=None,float_precision:int|None=None,null_value:str|None=None,quote_style:CsvQuoteStyle|None=None,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2)->str | None
polars.DataFrame.write_database(self,table_name:str,connection:ConnectionOrCursor|str,*,if_table_exists:DbWriteMode='fail',engine:DbWriteEngine|None=None,engine_options:dict[str,Any]|None=None)->int
polars.DataFrame.write_delta(self,target:str|Path|deltalake.DeltaTable,*,mode:Literal['error','append','overwrite','ignore','merge']='error',overwrite_schema:bool|None=None,storage_options:dict[str,str]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',delta_write_options:dict[str,Any]|None=None,delta_merge_options:dict[str,Any]|None=None)->deltalake.table.TableMerger | None
polars.DataFrame.write_excel(self,workbook:str|Workbook|IO[bytes]|Path|None=None,worksheet:str|Worksheet|None=None,*,position:tuple[int,int]|str='A1',table_style:str|dict[str,Any]|None=None,table_name:str|None=None,column_formats:ColumnFormatDict|None=None,dtype_formats:dict[OneOrMoreDataTypes,str]|None=None,conditional_formats:ConditionalFormatDict|None=None,header_format:dict[str,Any]|None=None,column_totals:ColumnTotalsDefinition|None=None,column_widths:ColumnWidthsDefinition|None=None,row_totals:RowTotalsDefinition|None=None,row_heights:dict[int|tuple[int,...],int]|int|None=None,sparklines:dict[str,Sequence[str]|dict[str,Any]]|None=None,formulas:dict[str,str|dict[str,str]]|None=None,float_precision:int=3,include_header:bool=True,autofilter:bool=True,autofit:bool=False,hidden_columns:Sequence[str]|SelectorType|None=None,hide_gridlines:bool=False,sheet_zoom:int|None=None,freeze_panes:str|tuple[int,int]|tuple[str,int,int]|tuple[int,int,int,int]|None=None)->Workbook
polars.DataFrame.write_iceberg(self,target:str|pyiceberg.table.Table,mode:Literal['append','overwrite'])->None
polars.DataFrame.write_ipc(self,file:str|Path|IO[bytes]|None,*,compression:IpcCompression='uncompressed',compat_level:CompatLevel|None=None,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2)->BytesIO | None
polars.DataFrame.write_ipc_stream(self,file:str|Path|IO[bytes]|None,*,compression:IpcCompression='uncompressed',compat_level:CompatLevel|None=None)->BytesIO | None
polars.DataFrame.write_json(self,file:IOBase|str|Path|None=None)->str | None
polars.DataFrame.write_ndjson(self,file:IOBase|str|Path|None=None)->str | None
polars.DataFrame.write_parquet(self,file:str|Path|IO[bytes],*,compression:ParquetCompression='zstd',compression_level:int|None=None,statistics:bool|str|dict[str,bool]=True,row_group_size:int|None=None,data_page_size:int|None=None,use_pyarrow:bool=False,pyarrow_options:dict[str,Any]|None=None,partition_by:str|Sequence[str]|None=None,partition_chunk_size_bytes:int=4294967296,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2)->None
polars.dataframe.frame.DataFrame(self,data:FrameInitTypes|None=None,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,nan_to_null:bool=False)
polars.dataframe.frame.DataFrame.__add__(self,other:DataFrame|Series|int|float|bool|str)->DataFrame
polars.dataframe.frame.DataFrame.__array__(self,dtype:npt.DTypeLike|None=None,copy:bool|None=None)->np.ndarray[Any, Any]
polars.dataframe.frame.DataFrame.__arrow_c_stream__(self,requested_schema:object|None=None)->object
polars.dataframe.frame.DataFrame.__bool__(self)->NoReturn
polars.dataframe.frame.DataFrame.__contains__(self,key:str)->bool
polars.dataframe.frame.DataFrame.__copy__(self)->DataFrame
polars.dataframe.frame.DataFrame.__dataframe__(self,nan_as_null:bool=False,allow_copy:bool=True)->PolarsDataFrame
polars.dataframe.frame.DataFrame.__deepcopy__(self,memo:None=None)->DataFrame
polars.dataframe.frame.DataFrame.__eq__(self,other:object)->DataFrame
polars.dataframe.frame.DataFrame.__floordiv__(self,other:DataFrame|Series|int|float)->DataFrame
polars.dataframe.frame.DataFrame.__ge__(self,other:Any)->DataFrame
polars.dataframe.frame.DataFrame.__getitem__(self,key:SingleIndexSelector|SingleColSelector|MultiColSelector|MultiIndexSelector|tuple[SingleIndexSelector,SingleColSelector]|tuple[SingleIndexSelector,MultiColSelector]|tuple[MultiIndexSelector,SingleColSelector]|tuple[MultiIndexSelector,MultiColSelector])->DataFrame | Series | Any
polars.dataframe.frame.DataFrame.__getstate__(self)->bytes
polars.dataframe.frame.DataFrame.__gt__(self,other:Any)->DataFrame
polars.dataframe.frame.DataFrame.__init__(self,data:FrameInitTypes|None=None,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,nan_to_null:bool=False)
polars.dataframe.frame.DataFrame.__iter__(self)->Iterator[Series]
polars.dataframe.frame.DataFrame.__le__(self,other:Any)->DataFrame
polars.dataframe.frame.DataFrame.__len__(self)->int
polars.dataframe.frame.DataFrame.__lt__(self,other:Any)->DataFrame
polars.dataframe.frame.DataFrame.__mod__(self,other:DataFrame|Series|int|float)->DataFrame
polars.dataframe.frame.DataFrame.__mul__(self,other:DataFrame|Series|int|float)->DataFrame
polars.dataframe.frame.DataFrame.__ne__(self,other:object)->DataFrame
polars.dataframe.frame.DataFrame.__radd__(self,other:DataFrame|Series|int|float|bool|str)->DataFrame
polars.dataframe.frame.DataFrame.__repr__(self)->str
polars.dataframe.frame.DataFrame.__reversed__(self)->Iterator[Series]
polars.dataframe.frame.DataFrame.__rmul__(self,other:int|float)->DataFrame
polars.dataframe.frame.DataFrame.__setitem__(self,key:str|Sequence[int]|Sequence[str]|tuple[Any,str|int],value:Any)->None
polars.dataframe.frame.DataFrame.__setstate__(self,state:bytes)->None
polars.dataframe.frame.DataFrame.__str__(self)->str
polars.dataframe.frame.DataFrame.__sub__(self,other:DataFrame|Series|int|float)->DataFrame
polars.dataframe.frame.DataFrame.__truediv__(self,other:DataFrame|Series|int|float)->DataFrame
polars.dataframe.frame.DataFrame._cast_all_from_to(self,df:DataFrame,from_:frozenset[PolarsDataType],to:PolarsDataType)->DataFrame
polars.dataframe.frame.DataFrame._comp(self,other:Any,op:ComparisonOperator)->DataFrame
polars.dataframe.frame.DataFrame._compare_to_non_df(self,other:Any,op:ComparisonOperator)->DataFrame
polars.dataframe.frame.DataFrame._compare_to_other_df(self,other:DataFrame,op:ComparisonOperator)->DataFrame
polars.dataframe.frame.DataFrame._div(self,other:Any,*,floordiv:bool)->DataFrame
polars.dataframe.frame.DataFrame._from_arrow(cls,data:pa.Table|pa.RecordBatch,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True)->DataFrame
polars.dataframe.frame.DataFrame._from_pandas(cls,data:pd.DataFrame,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True,nan_to_null:bool=True,include_index:bool=False)->DataFrame
polars.dataframe.frame.DataFrame._from_pydf(cls,py_df:PyDataFrame)->DataFrame
polars.dataframe.frame.DataFrame._ipython_key_completions_(self)->list[str]
polars.dataframe.frame.DataFrame._replace(self,column:str,new_column:Series)->DataFrame
polars.dataframe.frame.DataFrame._repr_html_(self,*,_from_series:bool=False)->str
polars.dataframe.frame.DataFrame._row_encode(self,fields:list[tuple[bool,bool,bool]])->Series
polars.dataframe.frame.DataFrame._to_metadata(self,columns:None|str|list[str]=None,stats:None|str|list[str]=None)->DataFrame
polars.dataframe.frame.DataFrame._to_pandas_with_object_columns(self,*,use_pyarrow_extension_array:bool,**kwargs:Any)->pd.DataFrame
polars.dataframe.frame.DataFrame._to_pandas_without_object_columns(self,df:DataFrame,*,use_pyarrow_extension_array:bool,**kwargs:Any)->pd.DataFrame
polars.dataframe.frame.DataFrame.approx_n_unique(self)->DataFrame
polars.dataframe.frame.DataFrame.bottom_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],reverse:bool|Sequence[bool]=False)->DataFrame
polars.dataframe.frame.DataFrame.cast(self,dtypes:Mapping[ColumnNameOrSelector|PolarsDataType,PolarsDataType|PythonDataType]|PolarsDataType,*,strict:bool=True)->DataFrame
polars.dataframe.frame.DataFrame.clear(self,n:int=0)->DataFrame
polars.dataframe.frame.DataFrame.clone(self)->DataFrame
polars.dataframe.frame.DataFrame.collect_schema(self)->Schema
polars.dataframe.frame.DataFrame.columns(self)->list[str]
polars.dataframe.frame.DataFrame.columns(self,names:Sequence[str])->None
polars.dataframe.frame.DataFrame.corr(self,**kwargs:Any)->DataFrame
polars.dataframe.frame.DataFrame.count(self)->DataFrame
polars.dataframe.frame.DataFrame.describe(self,percentiles:Sequence[float]|float|None=(0.25,0.5,0.75),*,interpolation:RollingInterpolationMethod='nearest')->DataFrame
polars.dataframe.frame.DataFrame.deserialize(cls,source:str|Path|IOBase,*,format:SerializationFormat='binary')->DataFrame
polars.dataframe.frame.DataFrame.drop(self,*columns:ColumnNameOrSelector|Iterable[ColumnNameOrSelector],strict:bool=True)->DataFrame
polars.dataframe.frame.DataFrame.drop_in_place(self,name:str)->Series
polars.dataframe.frame.DataFrame.drop_nans(self,subset:ColumnNameOrSelector|Collection[ColumnNameOrSelector]|None=None)->DataFrame
polars.dataframe.frame.DataFrame.drop_nulls(self,subset:ColumnNameOrSelector|Collection[ColumnNameOrSelector]|None=None)->DataFrame
polars.dataframe.frame.DataFrame.dtypes(self)->list[DataType]
polars.dataframe.frame.DataFrame.equals(self,other:DataFrame,*,null_equal:bool=True)->bool
polars.dataframe.frame.DataFrame.estimated_size(self,unit:SizeUnit='b')->int | float
polars.dataframe.frame.DataFrame.explode(self,columns:str|Expr|Sequence[str|Expr],*more_columns:str|Expr)->DataFrame
polars.dataframe.frame.DataFrame.extend(self,other:DataFrame)->DataFrame
polars.dataframe.frame.DataFrame.fill_nan(self,value:Expr|int|float|None)->DataFrame
polars.dataframe.frame.DataFrame.fill_null(self,value:Any|Expr|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None,*,matches_supertype:bool=True)->DataFrame
polars.dataframe.frame.DataFrame.filter(self,*predicates:IntoExprColumn|Iterable[IntoExprColumn]|bool|list[bool]|np.ndarray[Any,Any],**constraints:Any)->DataFrame
polars.dataframe.frame.DataFrame.flags(self)->dict[str, dict[str, bool]]
polars.dataframe.frame.DataFrame.fold(self,operation:Callable[[Series,Series],Series])->Series
polars.dataframe.frame.DataFrame.gather_every(self,n:int,offset:int=0)->DataFrame
polars.dataframe.frame.DataFrame.get_column(self,name:str,*,default:Any|NoDefault=no_default)->Series | Any
polars.dataframe.frame.DataFrame.get_column_index(self,name:str)->int
polars.dataframe.frame.DataFrame.get_columns(self)->list[Series]
polars.dataframe.frame.DataFrame.glimpse(self,*,max_items_per_column:int=10,max_colname_length:int=50,return_as_string:bool=False)->str | None
polars.dataframe.frame.DataFrame.group_by(self,*by:IntoExpr|Iterable[IntoExpr],maintain_order:bool=False,**named_by:IntoExpr)->GroupBy
polars.dataframe.frame.DataFrame.group_by_dynamic(self,index_column:IntoExpr,*,every:str|timedelta,period:str|timedelta|None=None,offset:str|timedelta|None=None,include_boundaries:bool=False,closed:ClosedInterval='left',label:Label='left',group_by:IntoExpr|Iterable[IntoExpr]|None=None,start_by:StartBy='window')->DynamicGroupBy
polars.dataframe.frame.DataFrame.hash_rows(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->Series
polars.dataframe.frame.DataFrame.head(self,n:int=5)->DataFrame
polars.dataframe.frame.DataFrame.height(self)->int
polars.dataframe.frame.DataFrame.hstack(self,columns:list[Series]|DataFrame,*,in_place:bool=False)->DataFrame
polars.dataframe.frame.DataFrame.insert_column(self,index:int,column:IntoExprColumn)->DataFrame
polars.dataframe.frame.DataFrame.interpolate(self)->DataFrame
polars.dataframe.frame.DataFrame.is_duplicated(self)->Series
polars.dataframe.frame.DataFrame.is_empty(self)->bool
polars.dataframe.frame.DataFrame.is_unique(self)->Series
polars.dataframe.frame.DataFrame.item(self,row:int|None=None,column:int|str|None=None)->Any
polars.dataframe.frame.DataFrame.iter_columns(self)->Iterator[Series]
polars.dataframe.frame.DataFrame.iter_rows(self,*,named:bool=False,buffer_size:int=512)->Iterator[tuple[Any, ...]] | Iterator[dict[str, Any]]
polars.dataframe.frame.DataFrame.iter_slices(self,n_rows:int=10000)->Iterator[DataFrame]
polars.dataframe.frame.DataFrame.join(self,other:DataFrame,on:str|Expr|Sequence[str|Expr]|None=None,how:JoinStrategy='inner',*,left_on:str|Expr|Sequence[str|Expr]|None=None,right_on:str|Expr|Sequence[str|Expr]|None=None,suffix:str='_right',validate:JoinValidation='m:m',nulls_equal:bool=False,coalesce:bool|None=None,maintain_order:MaintainOrderJoin|None=None)->DataFrame
polars.dataframe.frame.DataFrame.join_asof(self,other:DataFrame,*,left_on:str|None|Expr=None,right_on:str|None|Expr=None,on:str|None|Expr=None,by_left:str|Sequence[str]|None=None,by_right:str|Sequence[str]|None=None,by:str|Sequence[str]|None=None,strategy:AsofJoinStrategy='backward',suffix:str='_right',tolerance:str|int|float|timedelta|None=None,allow_parallel:bool=True,force_parallel:bool=False,coalesce:bool=True,allow_exact_matches:bool=True,check_sortedness:bool=True)->DataFrame
polars.dataframe.frame.DataFrame.join_where(self,other:DataFrame,*predicates:Expr|Iterable[Expr],suffix:str='_right')->DataFrame
polars.dataframe.frame.DataFrame.lazy(self)->LazyFrame
polars.dataframe.frame.DataFrame.limit(self,n:int=5)->DataFrame
polars.dataframe.frame.DataFrame.map_rows(self,function:Callable[[tuple[Any,...]],Any],return_dtype:PolarsDataType|None=None,*,inference_size:int=256)->DataFrame
polars.dataframe.frame.DataFrame.max(self)->DataFrame
polars.dataframe.frame.DataFrame.max_horizontal(self)->Series
polars.dataframe.frame.DataFrame.mean(self)->DataFrame
polars.dataframe.frame.DataFrame.mean_horizontal(self,*,ignore_nulls:bool=True)->Series
polars.dataframe.frame.DataFrame.median(self)->DataFrame
polars.dataframe.frame.DataFrame.melt(self,id_vars:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,value_vars:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,variable_name:str|None=None,value_name:str|None=None)->DataFrame
polars.dataframe.frame.DataFrame.merge_sorted(self,other:DataFrame,key:str)->DataFrame
polars.dataframe.frame.DataFrame.min(self)->DataFrame
polars.dataframe.frame.DataFrame.min_horizontal(self)->Series
polars.dataframe.frame.DataFrame.n_chunks(self,strategy:Literal['first','all']='first')->int | list[int]
polars.dataframe.frame.DataFrame.n_unique(self,subset:str|Expr|Sequence[str|Expr]|None=None)->int
polars.dataframe.frame.DataFrame.null_count(self)->DataFrame
polars.dataframe.frame.DataFrame.partition_by(self,by:ColumnNameOrSelector|Sequence[ColumnNameOrSelector],*more_by:ColumnNameOrSelector,maintain_order:bool=True,include_key:bool=True,as_dict:bool=False)->list[DataFrame] | dict[tuple[object, ...], DataFrame]
polars.dataframe.frame.DataFrame.pipe(self,function:Callable[Concatenate[DataFrame,P],T],*args:P.args,**kwargs:P.kwargs)->T
polars.dataframe.frame.DataFrame.pivot(self,on:ColumnNameOrSelector|Sequence[ColumnNameOrSelector],*,index:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,values:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,aggregate_function:PivotAgg|Expr|None=None,maintain_order:bool=True,sort_columns:bool=False,separator:str='_')->DataFrame
polars.dataframe.frame.DataFrame.plot(self)->DataFramePlot
polars.dataframe.frame.DataFrame.product(self)->DataFrame
polars.dataframe.frame.DataFrame.quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest')->DataFrame
polars.dataframe.frame.DataFrame.rechunk(self)->DataFrame
polars.dataframe.frame.DataFrame.remove(self,*predicates:IntoExprColumn|Iterable[IntoExprColumn]|bool|list[bool]|np.ndarray[Any,Any],**constraints:Any)->DataFrame
polars.dataframe.frame.DataFrame.rename(self,mapping:dict[str,str]|Callable[[str],str],*,strict:bool=True)->DataFrame
polars.dataframe.frame.DataFrame.replace_column(self,index:int,column:Series)->DataFrame
polars.dataframe.frame.DataFrame.reverse(self)->DataFrame
polars.dataframe.frame.DataFrame.rolling(self,index_column:IntoExpr,*,period:str|timedelta,offset:str|timedelta|None=None,closed:ClosedInterval='right',group_by:IntoExpr|Iterable[IntoExpr]|None=None)->RollingGroupBy
polars.dataframe.frame.DataFrame.row(self,index:int|None=None,*,by_predicate:Expr|None=None,named:bool=False)->tuple[Any, ...] | dict[str, Any]
polars.dataframe.frame.DataFrame.rows(self,*,named:bool=False)->list[tuple[Any, ...]] | list[dict[str, Any]]
polars.dataframe.frame.DataFrame.rows_by_key(self,key:ColumnNameOrSelector|Sequence[ColumnNameOrSelector],*,named:bool=False,include_key:bool=False,unique:bool=False)->dict[Any, Any]
polars.dataframe.frame.DataFrame.sample(self,n:int|Series|None=None,*,fraction:float|Series|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->DataFrame
polars.dataframe.frame.DataFrame.schema(self)->Schema
polars.dataframe.frame.DataFrame.select(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->DataFrame
polars.dataframe.frame.DataFrame.select_seq(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->DataFrame
polars.dataframe.frame.DataFrame.serialize(self,file:IOBase|str|Path|None=None,*,format:SerializationFormat='binary')->bytes | str | None
polars.dataframe.frame.DataFrame.set_sorted(self,column:str,*,descending:bool=False)->DataFrame
polars.dataframe.frame.DataFrame.shape(self)->tuple[int, int]
polars.dataframe.frame.DataFrame.shift(self,n:int=1,*,fill_value:IntoExpr|None=None)->DataFrame
polars.dataframe.frame.DataFrame.shrink_to_fit(self,*,in_place:bool=False)->DataFrame
polars.dataframe.frame.DataFrame.slice(self,offset:int,length:int|None=None)->DataFrame
polars.dataframe.frame.DataFrame.sort(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,descending:bool|Sequence[bool]=False,nulls_last:bool|Sequence[bool]=False,multithreaded:bool=True,maintain_order:bool=False)->DataFrame
polars.dataframe.frame.DataFrame.sql(self,query:str,*,table_name:str='self')->DataFrame
polars.dataframe.frame.DataFrame.std(self,ddof:int=1)->DataFrame
polars.dataframe.frame.DataFrame.style(self)->GT
polars.dataframe.frame.DataFrame.sum(self)->DataFrame
polars.dataframe.frame.DataFrame.sum_horizontal(self,*,ignore_nulls:bool=True)->Series
polars.dataframe.frame.DataFrame.tail(self,n:int=5)->DataFrame
polars.dataframe.frame.DataFrame.to_arrow(self,*,compat_level:CompatLevel|None=None)->pa.Table
polars.dataframe.frame.DataFrame.to_dict(self,*,as_series:bool=True)->dict[str, Series] | dict[str, list[Any]]
polars.dataframe.frame.DataFrame.to_dicts(self)->list[dict[str, Any]]
polars.dataframe.frame.DataFrame.to_dummies(self,columns:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,*,separator:str='_',drop_first:bool=False)->DataFrame
polars.dataframe.frame.DataFrame.to_init_repr(self,n:int=1000)->str
polars.dataframe.frame.DataFrame.to_jax(self,return_type:JaxExportType='array',*,device:jax.Device|str|None=None,label:str|Expr|Sequence[str|Expr]|None=None,features:str|Expr|Sequence[str|Expr]|None=None,dtype:PolarsDataType|None=None,order:IndexOrder='fortran')->jax.Array | dict[str, jax.Array]
polars.dataframe.frame.DataFrame.to_numpy(self,*,order:IndexOrder='fortran',writable:bool=False,allow_copy:bool=True,structured:bool=False,use_pyarrow:bool|None=None)->np.ndarray[Any, Any]
polars.dataframe.frame.DataFrame.to_pandas(self,*,use_pyarrow_extension_array:bool=False,**kwargs:Any)->pd.DataFrame
polars.dataframe.frame.DataFrame.to_series(self,index:int=0)->Series
polars.dataframe.frame.DataFrame.to_struct(self,name:str='')->Series
polars.dataframe.frame.DataFrame.to_torch(self,return_type:TorchExportType='tensor',*,label:str|Expr|Sequence[str|Expr]|None=None,features:str|Expr|Sequence[str|Expr]|None=None,dtype:PolarsDataType|None=None)->torch.Tensor | dict[str, torch.Tensor] | PolarsDataset
polars.dataframe.frame.DataFrame.top_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],reverse:bool|Sequence[bool]=False)->DataFrame
polars.dataframe.frame.DataFrame.transpose(self,*,include_header:bool=False,header_name:str='column',column_names:str|Iterable[str]|None=None)->DataFrame
polars.dataframe.frame.DataFrame.unique(self,subset:ColumnNameOrSelector|Collection[ColumnNameOrSelector]|None=None,*,keep:UniqueKeepStrategy='any',maintain_order:bool=False)->DataFrame
polars.dataframe.frame.DataFrame.unnest(self,columns:ColumnNameOrSelector|Collection[ColumnNameOrSelector],*more_columns:ColumnNameOrSelector)->DataFrame
polars.dataframe.frame.DataFrame.unpivot(self,on:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,*,index:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,variable_name:str|None=None,value_name:str|None=None)->DataFrame
polars.dataframe.frame.DataFrame.unstack(self,*,step:int,how:UnstackDirection='vertical',columns:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,fill_values:list[Any]|None=None)->DataFrame
polars.dataframe.frame.DataFrame.update(self,other:DataFrame,on:str|Sequence[str]|None=None,how:Literal['left','inner','full']='left',*,left_on:str|Sequence[str]|None=None,right_on:str|Sequence[str]|None=None,include_nulls:bool=False,maintain_order:MaintainOrderJoin|None='left')->DataFrame
polars.dataframe.frame.DataFrame.upsample(self,time_column:str,*,every:str|timedelta,group_by:str|Sequence[str]|None=None,maintain_order:bool=False)->DataFrame
polars.dataframe.frame.DataFrame.var(self,ddof:int=1)->DataFrame
polars.dataframe.frame.DataFrame.vstack(self,other:DataFrame,*,in_place:bool=False)->DataFrame
polars.dataframe.frame.DataFrame.width(self)->int
polars.dataframe.frame.DataFrame.with_columns(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->DataFrame
polars.dataframe.frame.DataFrame.with_columns_seq(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->DataFrame
polars.dataframe.frame.DataFrame.with_row_count(self,name:str='row_nr',offset:int=0)->DataFrame
polars.dataframe.frame.DataFrame.with_row_index(self,name:str='index',offset:int=0)->DataFrame
polars.dataframe.frame.DataFrame.write_avro(self,file:str|Path|IO[bytes],compression:AvroCompression='uncompressed',name:str='')->None
polars.dataframe.frame.DataFrame.write_clipboard(self,*,separator:str='\t',**kwargs:Any)->None
polars.dataframe.frame.DataFrame.write_csv(self,file:str|Path|IO[str]|IO[bytes]|None=None,*,include_bom:bool=False,include_header:bool=True,separator:str=',',line_terminator:str='\n',quote_char:str='"',batch_size:int=1024,datetime_format:str|None=None,date_format:str|None=None,time_format:str|None=None,float_scientific:bool|None=None,float_precision:int|None=None,null_value:str|None=None,quote_style:CsvQuoteStyle|None=None,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2)->str | None
polars.dataframe.frame.DataFrame.write_database(self,table_name:str,connection:ConnectionOrCursor|str,*,if_table_exists:DbWriteMode='fail',engine:DbWriteEngine|None=None,engine_options:dict[str,Any]|None=None)->int
polars.dataframe.frame.DataFrame.write_delta(self,target:str|Path|deltalake.DeltaTable,*,mode:Literal['error','append','overwrite','ignore','merge']='error',overwrite_schema:bool|None=None,storage_options:dict[str,str]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',delta_write_options:dict[str,Any]|None=None,delta_merge_options:dict[str,Any]|None=None)->deltalake.table.TableMerger | None
polars.dataframe.frame.DataFrame.write_excel(self,workbook:str|Workbook|IO[bytes]|Path|None=None,worksheet:str|Worksheet|None=None,*,position:tuple[int,int]|str='A1',table_style:str|dict[str,Any]|None=None,table_name:str|None=None,column_formats:ColumnFormatDict|None=None,dtype_formats:dict[OneOrMoreDataTypes,str]|None=None,conditional_formats:ConditionalFormatDict|None=None,header_format:dict[str,Any]|None=None,column_totals:ColumnTotalsDefinition|None=None,column_widths:ColumnWidthsDefinition|None=None,row_totals:RowTotalsDefinition|None=None,row_heights:dict[int|tuple[int,...],int]|int|None=None,sparklines:dict[str,Sequence[str]|dict[str,Any]]|None=None,formulas:dict[str,str|dict[str,str]]|None=None,float_precision:int=3,include_header:bool=True,autofilter:bool=True,autofit:bool=False,hidden_columns:Sequence[str]|SelectorType|None=None,hide_gridlines:bool=False,sheet_zoom:int|None=None,freeze_panes:str|tuple[int,int]|tuple[str,int,int]|tuple[int,int,int,int]|None=None)->Workbook
polars.dataframe.frame.DataFrame.write_iceberg(self,target:str|pyiceberg.table.Table,mode:Literal['append','overwrite'])->None
polars.dataframe.frame.DataFrame.write_ipc(self,file:str|Path|IO[bytes]|None,*,compression:IpcCompression='uncompressed',compat_level:CompatLevel|None=None,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2)->BytesIO | None
polars.dataframe.frame.DataFrame.write_ipc_stream(self,file:str|Path|IO[bytes]|None,*,compression:IpcCompression='uncompressed',compat_level:CompatLevel|None=None)->BytesIO | None
polars.dataframe.frame.DataFrame.write_json(self,file:IOBase|str|Path|None=None)->str | None
polars.dataframe.frame.DataFrame.write_ndjson(self,file:IOBase|str|Path|None=None)->str | None
polars.dataframe.frame.DataFrame.write_parquet(self,file:str|Path|IO[bytes],*,compression:ParquetCompression='zstd',compression_level:int|None=None,statistics:bool|str|dict[str,bool]=True,row_group_size:int|None=None,data_page_size:int|None=None,use_pyarrow:bool=False,pyarrow_options:dict[str,Any]|None=None,partition_by:str|Sequence[str]|None=None,partition_chunk_size_bytes:int=4294967296,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2)->None
polars.dataframe.frame._prepare_other_arg(other:Any,length:int|None=None)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/dataframe/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/dataframe/_html.py----------------------------------------
A:polars.dataframe._html.(half, rest)->divmod(max_rows, 2)
A:polars.dataframe._html.self.row_idx->range(df.height)
A:polars.dataframe._html.self.col_idx->range(df.width)
A:polars.dataframe._html.dtypes->self.df._df.dtype_strings()
A:polars.dataframe._html.str_len_limit->int(os.environ.get('POLARS_FMT_STR_LEN', default=30))
polars.dataframe._html.HTMLFormatter(self,df:DataFrame,*,max_cols:int=75,max_rows:int=40,from_series:bool=False)
polars.dataframe._html.HTMLFormatter.__init__(self,df:DataFrame,*,max_cols:int=75,max_rows:int=40,from_series:bool=False)
polars.dataframe._html.HTMLFormatter.render(self)->list[str]
polars.dataframe._html.HTMLFormatter.write(self,inner:str)->None
polars.dataframe._html.HTMLFormatter.write_body(self)->None
polars.dataframe._html.HTMLFormatter.write_header(self)->None
polars.dataframe._html.NotebookFormatter(HTMLFormatter)
polars.dataframe._html.NotebookFormatter.render(self)->list[str]
polars.dataframe._html.NotebookFormatter.write_style(self)->None
polars.dataframe._html.Tag(self,elements:list[str],tag:str,attributes:dict[str,str]|None=None)
polars.dataframe._html.Tag.__enter__(self)->None
polars.dataframe._html.Tag.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.dataframe._html.Tag.__init__(self,elements:list[str],tag:str,attributes:dict[str,str]|None=None)
polars.dataframe._html.replace_consecutive_spaces(s:str)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/dataframe/group_by.py----------------------------------------
A:polars.dataframe.group_by.self.df->self.df.rechunk()
A:polars.dataframe.group_by.groups_df->self.df.lazy().group_by_dynamic(index_column=self.time_column, every=self.every, period=self.period, offset=self.offset, label=self.label, include_boundaries=self.include_boundaries, closed=self.closed, group_by=self.group_by, start_by=self.start_by).agg(F.first().agg_groups().alias(temp_col)).collect(no_optimization=True)
A:polars.dataframe.group_by.self._group_names->self.df.lazy().group_by_dynamic(index_column=self.time_column, every=self.every, period=self.period, offset=self.offset, label=self.label, include_boundaries=self.include_boundaries, closed=self.closed, group_by=self.group_by, start_by=self.start_by).agg(F.first().agg_groups().alias(temp_col)).collect(no_optimization=True).select(F.all().exclude(temp_col)).iter_rows()
A:polars.dataframe.group_by.self._group_indices->self.df.lazy().group_by_dynamic(index_column=self.time_column, every=self.every, period=self.period, offset=self.offset, label=self.label, include_boundaries=self.include_boundaries, closed=self.closed, group_by=self.group_by, start_by=self.start_by).agg(F.first().agg_groups().alias(temp_col)).collect(no_optimization=True).select(temp_col).to_series()
A:polars.dataframe.group_by.group_name->next(self._group_names)
A:polars.dataframe.group_by.len_expr->len_expr.alias(name).alias(name)
A:polars.dataframe.group_by.period->parse_as_duration_string(period)
A:polars.dataframe.group_by.offset->parse_as_duration_string(offset)
A:polars.dataframe.group_by.every->parse_as_duration_string(every)
polars.dataframe.group_by.DynamicGroupBy(self,df:DataFrame,index_column:IntoExpr,*,every:str|timedelta,period:str|timedelta|None,offset:str|timedelta|None,include_boundaries:bool,closed:ClosedInterval,label:Label,group_by:IntoExpr|Iterable[IntoExpr]|None,start_by:StartBy)
polars.dataframe.group_by.DynamicGroupBy.__init__(self,df:DataFrame,index_column:IntoExpr,*,every:str|timedelta,period:str|timedelta|None,offset:str|timedelta|None,include_boundaries:bool,closed:ClosedInterval,label:Label,group_by:IntoExpr|Iterable[IntoExpr]|None,start_by:StartBy)
polars.dataframe.group_by.DynamicGroupBy.__iter__(self)->Self
polars.dataframe.group_by.DynamicGroupBy.__next__(self)->tuple[tuple[object, ...], DataFrame]
polars.dataframe.group_by.DynamicGroupBy.agg(self,*aggs:IntoExpr|Iterable[IntoExpr],**named_aggs:IntoExpr)->DataFrame
polars.dataframe.group_by.DynamicGroupBy.map_groups(self,function:Callable[[DataFrame],DataFrame],schema:SchemaDict|None)->DataFrame
polars.dataframe.group_by.GroupBy(self,df:DataFrame,*by:IntoExpr|Iterable[IntoExpr],maintain_order:bool,**named_by:IntoExpr)
polars.dataframe.group_by.GroupBy.__init__(self,df:DataFrame,*by:IntoExpr|Iterable[IntoExpr],maintain_order:bool,**named_by:IntoExpr)
polars.dataframe.group_by.GroupBy.__iter__(self)->Self
polars.dataframe.group_by.GroupBy.__next__(self)->tuple[tuple[object, ...], DataFrame]
polars.dataframe.group_by.GroupBy.agg(self,*aggs:IntoExpr|Iterable[IntoExpr],**named_aggs:IntoExpr)->DataFrame
polars.dataframe.group_by.GroupBy.all(self)->DataFrame
polars.dataframe.group_by.GroupBy.count(self)->DataFrame
polars.dataframe.group_by.GroupBy.first(self)->DataFrame
polars.dataframe.group_by.GroupBy.head(self,n:int=5)->DataFrame
polars.dataframe.group_by.GroupBy.last(self)->DataFrame
polars.dataframe.group_by.GroupBy.len(self,name:str|None=None)->DataFrame
polars.dataframe.group_by.GroupBy.map_groups(self,function:Callable[[DataFrame],DataFrame])->DataFrame
polars.dataframe.group_by.GroupBy.max(self)->DataFrame
polars.dataframe.group_by.GroupBy.mean(self)->DataFrame
polars.dataframe.group_by.GroupBy.median(self)->DataFrame
polars.dataframe.group_by.GroupBy.min(self)->DataFrame
polars.dataframe.group_by.GroupBy.n_unique(self)->DataFrame
polars.dataframe.group_by.GroupBy.quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest')->DataFrame
polars.dataframe.group_by.GroupBy.sum(self)->DataFrame
polars.dataframe.group_by.GroupBy.tail(self,n:int=5)->DataFrame
polars.dataframe.group_by.RollingGroupBy(self,df:DataFrame,index_column:IntoExpr,*,period:str|timedelta,offset:str|timedelta|None,closed:ClosedInterval,group_by:IntoExpr|Iterable[IntoExpr]|None)
polars.dataframe.group_by.RollingGroupBy.__init__(self,df:DataFrame,index_column:IntoExpr,*,period:str|timedelta,offset:str|timedelta|None,closed:ClosedInterval,group_by:IntoExpr|Iterable[IntoExpr]|None)
polars.dataframe.group_by.RollingGroupBy.__iter__(self)->Self
polars.dataframe.group_by.RollingGroupBy.__next__(self)->tuple[tuple[object, ...], DataFrame]
polars.dataframe.group_by.RollingGroupBy.agg(self,*aggs:IntoExpr|Iterable[IntoExpr],**named_aggs:IntoExpr)->DataFrame
polars.dataframe.group_by.RollingGroupBy.map_groups(self,function:Callable[[DataFrame],DataFrame],schema:SchemaDict|None)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/dataframe/plotting.py----------------------------------------
A:polars.dataframe.plotting.self._chart->polars.dependencies.altair.Chart(df)
A:polars.dataframe.plotting.method->getattr(self._chart, f'mark_{attr}', None)
polars.dataframe.plotting.DataFramePlot(self,df:DataFrame)
polars.dataframe.plotting.DataFramePlot.__getattr__(self,attr:str)->Callable[..., alt.Chart]
polars.dataframe.plotting.DataFramePlot.__init__(self,df:DataFrame)
polars.dataframe.plotting.DataFramePlot.bar(self,x:X|None=None,y:Y|None=None,color:Color|None=None,/,**kwargs:Unpack[EncodeKwds])->alt.Chart
polars.dataframe.plotting.DataFramePlot.line(self,x:X|None=None,y:Y|None=None,color:Color|None=None,order:Order|None=None,/,**kwargs:Unpack[EncodeKwds])->alt.Chart
polars.dataframe.plotting.DataFramePlot.point(self,x:X|None=None,y:Y|None=None,color:Color|None=None,size:Size|None=None,/,**kwargs:Unpack[EncodeKwds])->alt.Chart


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/interchange/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/interchange/protocol.py----------------------------------------
A:polars.interchange.protocol.compat_level->CompatLevel.__new__(CompatLevel)
A:polars.interchange.protocol.CompatLevel._compatible->CompatLevel._with_version(0)
A:polars.interchange.protocol.CompatLevel._future1->CompatLevel._with_version(1)
polars.CompatLevel(self)
polars.CompatLevel.__repr__(self)->str
polars.CompatLevel._newest()->CompatLevel
polars.CompatLevel._with_version(version:int)->CompatLevel
polars.CompatLevel.newest()->CompatLevel
polars.CompatLevel.oldest()->CompatLevel
polars.interchange.protocol.Buffer(Protocol)
polars.interchange.protocol.Buffer.__dlpack__(self)->Any
polars.interchange.protocol.Buffer.__dlpack_device__(self)->tuple[DlpackDeviceType, int | None]
polars.interchange.protocol.Buffer.bufsize(self)->int
polars.interchange.protocol.Buffer.ptr(self)->int
polars.interchange.protocol.CategoricalDescription(TypedDict)
polars.interchange.protocol.Column(Protocol)
polars.interchange.protocol.Column.describe_categorical(self)->CategoricalDescription
polars.interchange.protocol.Column.describe_null(self)->tuple[ColumnNullType, Any]
polars.interchange.protocol.Column.dtype(self)->Dtype
polars.interchange.protocol.Column.get_buffers(self)->ColumnBuffers
polars.interchange.protocol.Column.get_chunks(self,n_chunks:int|None=None)->Iterable[Column]
polars.interchange.protocol.Column.metadata(self)->dict[str, Any]
polars.interchange.protocol.Column.null_count(self)->int | None
polars.interchange.protocol.Column.num_chunks(self)->int
polars.interchange.protocol.Column.offset(self)->int
polars.interchange.protocol.Column.size(self)->int
polars.interchange.protocol.ColumnBuffers(TypedDict)
polars.interchange.protocol.ColumnNullType(IntEnum)
polars.interchange.protocol.CompatLevel(self)
polars.interchange.protocol.CompatLevel.__init__(self)
polars.interchange.protocol.CompatLevel.__repr__(self)->str
polars.interchange.protocol.CompatLevel._newest()->CompatLevel
polars.interchange.protocol.CompatLevel._with_version(version:int)->CompatLevel
polars.interchange.protocol.CompatLevel.newest()->CompatLevel
polars.interchange.protocol.CompatLevel.oldest()->CompatLevel
polars.interchange.protocol.CopyNotAllowedError(RuntimeError)
polars.interchange.protocol.DataFrame(Protocol)
polars.interchange.protocol.DataFrame.__dataframe__(self,nan_as_null:bool=False,allow_copy:bool=True)->DataFrame
polars.interchange.protocol.DataFrame.column_names(self)->Iterable[str]
polars.interchange.protocol.DataFrame.get_chunks(self,n_chunks:int|None=None)->Iterable[DataFrame]
polars.interchange.protocol.DataFrame.get_column(self,i:int)->Column
polars.interchange.protocol.DataFrame.get_column_by_name(self,name:str)->Column
polars.interchange.protocol.DataFrame.get_columns(self)->Iterable[Column]
polars.interchange.protocol.DataFrame.metadata(self)->dict[str, Any]
polars.interchange.protocol.DataFrame.num_chunks(self)->int
polars.interchange.protocol.DataFrame.num_columns(self)->int
polars.interchange.protocol.DataFrame.num_rows(self)->int | None
polars.interchange.protocol.DataFrame.select_columns(self,indices:Sequence[int])->DataFrame
polars.interchange.protocol.DataFrame.select_columns_by_name(self,names:Sequence[str])->DataFrame
polars.interchange.protocol.DlpackDeviceType(IntEnum)
polars.interchange.protocol.DtypeKind(IntEnum)
polars.interchange.protocol.Endianness
polars.interchange.protocol.SupportsInterchange(Protocol)
polars.interchange.protocol.SupportsInterchange.__dataframe__(self,nan_as_null:bool=False,allow_copy:bool=True)->SupportsInterchange


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/interchange/from_dataframe.py----------------------------------------
A:polars.interchange.from_dataframe.polars_chunk->_protocol_df_chunk_to_polars(df, allow_copy=allow_copy)
A:polars.interchange.from_dataframe.dtype->Enum(categories)
A:polars.interchange.from_dataframe.s->s.cast(Boolean).cast(Boolean)
A:polars.interchange.from_dataframe.buffers->column.get_buffers()
A:polars.interchange.from_dataframe.data_buffer->_construct_data_buffer(*buffers['data'], column.size(), offset, allow_copy=allow_copy)
A:polars.interchange.from_dataframe.validity_buffer->_construct_validity_buffer(buffers['validity'], column, dtype, data_buffer, offset, allow_copy=allow_copy)
A:polars.interchange.from_dataframe.offsets_buffer->_construct_offsets_buffer(*offsets_buffer_info, offset, allow_copy=allow_copy)
A:polars.interchange.from_dataframe.data->polars._reexport.Series._from_buffers(String, data=data_buffers, validity=validity_buffer)
A:polars.interchange.from_dataframe.categories->_string_column_to_series(categories_col, allow_copy=allow_copy)
A:polars.interchange.from_dataframe.out->out.cast(UInt32).cast(UInt32)
A:polars.interchange.from_dataframe.polars_dtype->dtype_to_polars_dtype(dtype)
A:polars.interchange.from_dataframe.sentinel->sentinel.cast(column_dtype).cast(column_dtype)
polars.interchange.from_dataframe._categorical_column_to_series(column:Column,*,allow_copy:bool)->Series
polars.interchange.from_dataframe._column_to_series(column:Column,dtype:PolarsDataType,*,allow_copy:bool)->Series
polars.interchange.from_dataframe._construct_data_buffer(buffer:Buffer,dtype:Dtype,length:int,offset:int=0,*,allow_copy:bool)->Series
polars.interchange.from_dataframe._construct_offsets_buffer(buffer:Buffer,dtype:Dtype,offset:int,*,allow_copy:bool)->Series
polars.interchange.from_dataframe._construct_validity_buffer(validity_buffer_info:tuple[Buffer,Dtype]|None,column:Column,column_dtype:PolarsDataType,data:Series,offset:int=0,*,allow_copy:bool)->Series | None
polars.interchange.from_dataframe._construct_validity_buffer_from_bitmask(buffer:Buffer,null_value:int,length:int,offset:int=0,*,allow_copy:bool)->Series
polars.interchange.from_dataframe._construct_validity_buffer_from_bytemask(buffer:Buffer,null_value:int,*,allow_copy:bool)->Series
polars.interchange.from_dataframe._from_dataframe(df:InterchangeDataFrame,*,allow_copy:bool)->DataFrame
polars.interchange.from_dataframe._protocol_df_chunk_to_polars(df:InterchangeDataFrame,*,allow_copy:bool)->DataFrame
polars.interchange.from_dataframe._string_column_to_series(column:Column,*,allow_copy:bool)->Series
polars.interchange.from_dataframe.from_dataframe(df:SupportsInterchange,*,allow_copy:bool=True)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/interchange/utils.py----------------------------------------
A:polars.interchange.utils.(bytes_per_element, rest)->divmod(bits_per_element, 8)
polars.interchange.utils._datetime_to_dtype(dtype:Datetime)->Dtype
polars.interchange.utils._duration_to_dtype(dtype:Duration)->Dtype
polars.interchange.utils._temporal_dtype_to_polars_dtype(format_str:str,dtype:Dtype)->PolarsDataType
polars.interchange.utils.dtype_to_polars_dtype(dtype:Dtype)->PolarsDataType
polars.interchange.utils.get_buffer_length_in_elements(buffer_size:int,dtype:Dtype)->int
polars.interchange.utils.polars_dtype_to_data_buffer_dtype(dtype:PolarsDataType)->PolarsDataType
polars.interchange.utils.polars_dtype_to_dtype(dtype:PolarsDataType)->Dtype


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/interchange/dataframe.py----------------------------------------
A:polars.interchange.dataframe.s->self._df.get_column(name)
A:polars.interchange.dataframe.indices->list(indices)
A:polars.interchange.dataframe.total_n_chunks->self.num_chunks()
A:polars.interchange.dataframe.chunks->self._get_chunks_from_col_chunks()
A:polars.interchange.dataframe.size->len(chunk)
A:polars.interchange.dataframe.col_chunks->self.get_column(0).get_chunks()
A:polars.interchange.dataframe.chunk->chunk.rechunk().rechunk()
polars.interchange.dataframe.PolarsDataFrame(self,df:DataFrame,*,allow_copy:bool=True)
polars.interchange.dataframe.PolarsDataFrame.__dataframe__(self,nan_as_null:bool=False,allow_copy:bool=True)->PolarsDataFrame
polars.interchange.dataframe.PolarsDataFrame.__init__(self,df:DataFrame,*,allow_copy:bool=True)
polars.interchange.dataframe.PolarsDataFrame._get_chunks_from_col_chunks(self)->Iterator[DataFrame]
polars.interchange.dataframe.PolarsDataFrame.column_names(self)->list[str]
polars.interchange.dataframe.PolarsDataFrame.get_chunks(self,n_chunks:int|None=None)->Iterator[PolarsDataFrame]
polars.interchange.dataframe.PolarsDataFrame.get_column(self,i:int)->PolarsColumn
polars.interchange.dataframe.PolarsDataFrame.get_column_by_name(self,name:str)->PolarsColumn
polars.interchange.dataframe.PolarsDataFrame.get_columns(self)->Iterator[PolarsColumn]
polars.interchange.dataframe.PolarsDataFrame.metadata(self)->dict[str, Any]
polars.interchange.dataframe.PolarsDataFrame.num_chunks(self)->int
polars.interchange.dataframe.PolarsDataFrame.num_columns(self)->int
polars.interchange.dataframe.PolarsDataFrame.num_rows(self)->int
polars.interchange.dataframe.PolarsDataFrame.select_columns(self,indices:Sequence[int])->PolarsDataFrame
polars.interchange.dataframe.PolarsDataFrame.select_columns_by_name(self,names:Sequence[str])->PolarsDataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/interchange/column.py----------------------------------------
A:polars.interchange.column.categories->self._col.cat.get_categories()
A:polars.interchange.column.total_n_chunks->self.num_chunks()
A:polars.interchange.column.chunks->self._col.get_chunks()
A:polars.interchange.column.size->len(chunk)
A:polars.interchange.column.self._col->self._col.cat.to_local()
A:polars.interchange.column.buffers->self._col._get_buffers()
A:polars.interchange.column.interchange_buffer->PolarsBuffer(buffer, allow_copy=self._allow_copy)
A:polars.interchange.column.dtype->polars_dtype_to_dtype(buffer.dtype)
polars.interchange.column.PolarsColumn(self,column:Series,*,allow_copy:bool=True)
polars.interchange.column.PolarsColumn.__init__(self,column:Series,*,allow_copy:bool=True)
polars.interchange.column.PolarsColumn._wrap_data_buffer(self,buffer:Series)->tuple[PolarsBuffer, Dtype]
polars.interchange.column.PolarsColumn._wrap_offsets_buffer(self,buffer:Series|None)->tuple[PolarsBuffer, Dtype] | None
polars.interchange.column.PolarsColumn._wrap_validity_buffer(self,buffer:Series|None)->tuple[PolarsBuffer, Dtype] | None
polars.interchange.column.PolarsColumn.describe_categorical(self)->CategoricalDescription
polars.interchange.column.PolarsColumn.describe_null(self)->tuple[ColumnNullType, int | None]
polars.interchange.column.PolarsColumn.dtype(self)->Dtype
polars.interchange.column.PolarsColumn.get_buffers(self)->ColumnBuffers
polars.interchange.column.PolarsColumn.get_chunks(self,n_chunks:int|None=None)->Iterator[PolarsColumn]
polars.interchange.column.PolarsColumn.metadata(self)->dict[str, Any]
polars.interchange.column.PolarsColumn.null_count(self)->int
polars.interchange.column.PolarsColumn.num_chunks(self)->int
polars.interchange.column.PolarsColumn.offset(self)->int
polars.interchange.column.PolarsColumn.size(self)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/interchange/buffer.py----------------------------------------
A:polars.interchange.buffer.data->data.rechunk().rechunk()
A:polars.interchange.buffer.dtype->polars_dtype_to_dtype(self._data.dtype)
A:polars.interchange.buffer.(_, offset, length)->self._data._get_buffer_info()
A:polars.interchange.buffer.(n_bytes, rest)->divmod(n_bits, 8)
A:polars.interchange.buffer.(pointer, _, _)->self._data._get_buffer_info()
polars.interchange.buffer.PolarsBuffer(self,data:Series,*,allow_copy:bool=True)
polars.interchange.buffer.PolarsBuffer.__dlpack__(self)->NoReturn
polars.interchange.buffer.PolarsBuffer.__dlpack_device__(self)->tuple[DlpackDeviceType, None]
polars.interchange.buffer.PolarsBuffer.__init__(self,data:Series,*,allow_copy:bool=True)
polars.interchange.buffer.PolarsBuffer.__repr__(self)->str
polars.interchange.buffer.PolarsBuffer.bufsize(self)->int
polars.interchange.buffer.PolarsBuffer.ptr(self)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/_utils.py----------------------------------------
A:polars.io._utils.file->normalize_filepath(file, check_not_directory=check_not_dir)
polars.io._utils._check_empty(b:BytesIO,*,context:str,raise_if_empty:bool,read_position:int|None=None)->BytesIO
polars.io._utils._ensure_columns_are_unique(columns:Sequence[str]|Sequence[int])->None
polars.io._utils.is_glob_pattern(file:str)->bool
polars.io._utils.is_local_file(file:str)->bool
polars.io._utils.looks_like_url(path:str)->bool
polars.io._utils.parse_columns_arg(columns:Sequence[str]|Sequence[int]|str|int|None)->tuple[Sequence[int] | None, Sequence[str] | None]
polars.io._utils.parse_row_index_args(row_index_name:str|None=None,row_index_offset:int=0)->tuple[str, int] | None
polars.io._utils.prepare_file_arg(file:str|Path|list[str]|IO[str]|IO[bytes]|bytes,encoding:str|None=None,*,use_pyarrow:bool=False,raise_if_empty:bool=True,storage_options:dict[str,Any]|None=None)->ContextManager[str | list[str] | BytesIO | list[BytesIO]]
polars.io._utils.process_file_url(path:str,encoding:str|None=None)->BytesIO


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/plugins.py----------------------------------------
A:polars.io.plugins.parsed_predicate->polars._reexport.Expr.deserialize(predicate)
A:polars.io.plugins.lf->lf.limit(n_rows).limit(n_rows)
polars.defer(function:Callable[[],DataFrame],*,schema:SchemaDict|Callable[[],SchemaDict],validate_schema:bool=True)->LazyFrame
polars.io.plugins._defer(function:Callable[[],DataFrame],*,schema:SchemaDict|Callable[[],SchemaDict],validate_schema:bool=True)->LazyFrame
polars.io.plugins.register_io_source(io_source:Callable[[list[str]|None,Expr|None,int|None,int|None],Iterator[DataFrame]],*,schema:Callable[[],SchemaDict]|SchemaDict,validate_schema:bool=False)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/avro.py----------------------------------------
A:polars.io.avro.source->normalize_filepath(source)
A:polars.io.avro.(projection, column_names)->parse_columns_arg(columns)
A:polars.io.avro.pydf->polars.polars.PyDataFrame.read_avro(source, column_names, projection, n_rows)
polars.io.avro.read_avro(source:str|Path|IO[bytes]|bytes,*,columns:list[int]|list[str]|None=None,n_rows:int|None=None)->DataFrame
polars.read_avro(source:str|Path|IO[bytes]|bytes,*,columns:list[int]|list[str]|None=None,n_rows:int|None=None)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/delta.py----------------------------------------
A:polars.io.delta.df->df.select(columns).select(columns)
A:polars.io.delta.credential_provider_builder->_init_credential_provider_builder(credential_provider, source, storage_options, 'scan_delta')
A:polars.io.delta.credential_provider_creds->_get_credentials_from_provider_expiry_aware(provider)
A:polars.io.delta.dl_tbl->polars.dependencies.deltalake.DeltaTable(table_path, storage_options=storage_options, **delta_table_options)
A:polars.io.delta.pa_ds->polars.dependencies.deltalake.DeltaTable(table_path, storage_options=storage_options, **delta_table_options).to_pyarrow_dataset(**pyarrow_options)
A:polars.io.delta.table_protocol->polars.dependencies.deltalake.DeltaTable(table_path, storage_options=storage_options, **delta_table_options).protocol()
A:polars.io.delta.missing_features->{*table_protocol.reader_features}.difference(SUPPORTED_READER_FEATURES)
A:polars.io.delta.delta_schema->polars.dependencies.deltalake.DeltaTable(table_path, storage_options=storage_options, **delta_table_options).schema().to_pyarrow(as_large_types=True)
A:polars.io.delta.(main_schema, hive_schema)->_split_schema(polars_schema, partition_columns)
A:polars.io.delta.file_uris->polars.dependencies.deltalake.DeltaTable(table_path, storage_options=storage_options, **delta_table_options).file_uris()
A:polars.io.delta.parsed_result->urlparse(table_uri)
A:polars.io.delta.resolved_uri->_resolve_delta_lake_uri(table_path)
A:polars.io.delta.schema_dtypes->unpack_dtypes(*dtypes)
polars.io.delta._check_for_unsupported_types(dtypes:list[DataType])->None
polars.io.delta._check_if_delta_available()->None
polars.io.delta._get_delta_lake_table(table_path:str|DeltaTable,version:int|str|datetime|None=None,storage_options:dict[str,Any]|None=None,delta_table_options:dict[str,Any]|None=None)->deltalake.DeltaTable
polars.io.delta._resolve_delta_lake_uri(table_uri:str,*,strict:bool=True)->str
polars.io.delta.read_delta(source:str|DeltaTable,*,version:int|str|datetime|None=None,columns:list[str]|None=None,rechunk:bool|None=None,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',delta_table_options:dict[str,Any]|None=None,use_pyarrow:bool=False,pyarrow_options:dict[str,Any]|None=None)->DataFrame
polars.io.delta.scan_delta(source:str|DeltaTable,*,version:int|str|datetime|None=None,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',delta_table_options:dict[str,Any]|None=None,use_pyarrow:bool=False,pyarrow_options:dict[str,Any]|None=None,rechunk:bool|None=None)->LazyFrame
polars.read_delta(source:str|DeltaTable,*,version:int|str|datetime|None=None,columns:list[str]|None=None,rechunk:bool|None=None,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',delta_table_options:dict[str,Any]|None=None,use_pyarrow:bool=False,pyarrow_options:dict[str,Any]|None=None)->DataFrame
polars.scan_delta(source:str|DeltaTable,*,version:int|str|datetime|None=None,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',delta_table_options:dict[str,Any]|None=None,use_pyarrow:bool=False,pyarrow_options:dict[str,Any]|None=None,rechunk:bool|None=None)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/ndjson.py----------------------------------------
A:polars.io.ndjson.source->normalize_filepath(source, check_not_directory=False)
A:polars.io.ndjson.pydf->polars.polars.PyDataFrame.read_ndjson(source, ignore_errors=ignore_errors, schema=schema, schema_overrides=schema_overrides)
A:polars.io.ndjson.df->df.head(n_rows).head(n_rows)
A:polars.io.ndjson.credential_provider_builder->_init_credential_provider_builder(credential_provider, source, storage_options, 'scan_ndjson')
A:polars.io.ndjson.storage_options->list(storage_options.items())
A:polars.io.ndjson.pylf->polars.polars.PyLazyFrame.new_from_ndjson(source, sources, infer_schema_length=infer_schema_length, schema=schema, schema_overrides=schema_overrides, batch_size=batch_size, n_rows=n_rows, low_memory=low_memory, rechunk=rechunk, row_index=parse_row_index_args(row_index_name, row_index_offset), ignore_errors=ignore_errors, include_file_paths=include_file_paths, retries=retries, cloud_options=storage_options, credential_provider=credential_provider_builder, file_cache_ttl=file_cache_ttl)
polars.io.ndjson.read_ndjson(source:str|Path|list[str]|list[Path]|IOBase|bytes,*,schema:SchemaDefinition|None=None,schema_overrides:SchemaDefinition|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int|None=1024,n_rows:int|None=None,low_memory:bool=False,rechunk:bool=False,row_index_name:str|None=None,row_index_offset:int=0,ignore_errors:bool=False,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,file_cache_ttl:int|None=None,include_file_paths:str|None=None)->DataFrame
polars.io.ndjson.scan_ndjson(source:str|Path|IO[str]|IO[bytes]|bytes|list[str]|list[Path]|list[IO[str]]|list[IO[bytes]],*,schema:SchemaDefinition|None=None,schema_overrides:SchemaDefinition|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int|None=1024,n_rows:int|None=None,low_memory:bool=False,rechunk:bool=False,row_index_name:str|None=None,row_index_offset:int=0,ignore_errors:bool=False,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,file_cache_ttl:int|None=None,include_file_paths:str|None=None)->LazyFrame
polars.read_ndjson(source:str|Path|list[str]|list[Path]|IOBase|bytes,*,schema:SchemaDefinition|None=None,schema_overrides:SchemaDefinition|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int|None=1024,n_rows:int|None=None,low_memory:bool=False,rechunk:bool=False,row_index_name:str|None=None,row_index_offset:int=0,ignore_errors:bool=False,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,file_cache_ttl:int|None=None,include_file_paths:str|None=None)->DataFrame
polars.scan_ndjson(source:str|Path|IO[str]|IO[bytes]|bytes|list[str]|list[Path]|list[IO[str]]|list[IO[bytes]],*,schema:SchemaDefinition|None=None,schema_overrides:SchemaDefinition|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int|None=1024,n_rows:int|None=None,low_memory:bool=False,rechunk:bool=False,row_index_name:str|None=None,row_index_offset:int=0,ignore_errors:bool=False,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,file_cache_ttl:int|None=None,include_file_paths:str|None=None)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/clipboard.py----------------------------------------
A:polars.io.clipboard.io_string->StringIO(csv_string)
polars.io.clipboard.read_clipboard(separator:str='\t',**kwargs:Any)->DataFrame
polars.read_clipboard(separator:str='\t',**kwargs:Any)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/partition.py----------------------------------------
A:polars.io.partition.p->Path(self.keys[0].hive_name())
A:polars.io.partition.lowered_by->_lower_by(by)
polars.BasePartitionContext(self,file_idx:int,file_path:Path,full_path:Path)
polars.KeyedPartition(self,name:str,str_value:str,raw_value:Any)
polars.KeyedPartition.hive_name(self)->str
polars.KeyedPartitionContext(self,file_idx:int,part_idx:int,in_part_idx:int,keys:list[KeyedPartition],file_path:Path,full_path:Path)
polars.KeyedPartitionContext.hive_dirs(self)->Path
polars.PartitionByKey(self,base_path:str|Path,*,file_path:Callable[[KeyedPartitionContext],Path|str|IO[bytes]|IO[str]]|None=None,by:str|Expr|Sequence[str|Expr]|Mapping[str,Expr],include_key:bool=True)
polars.PartitionMaxSize(self,base_path:str|Path,*,file_path:Callable[[BasePartitionContext],Path|str|IO[bytes]|IO[str]]|None=None,max_size:int)
polars.PartitionParted(self,base_path:str|Path,*,file_path:Callable[[KeyedPartitionContext],Path|str|IO[bytes]|IO[str]]|None=None,by:str|Expr|Sequence[str|Expr]|Mapping[str,Expr],include_key:bool=True)
polars.io.partition.BasePartitionContext(self,file_idx:int,file_path:Path,full_path:Path)
polars.io.partition.BasePartitionContext.__init__(self,file_idx:int,file_path:Path,full_path:Path)
polars.io.partition.KeyedPartition(self,name:str,str_value:str,raw_value:Any)
polars.io.partition.KeyedPartition.__init__(self,name:str,str_value:str,raw_value:Any)
polars.io.partition.KeyedPartition.hive_name(self)->str
polars.io.partition.KeyedPartitionContext(self,file_idx:int,part_idx:int,in_part_idx:int,keys:list[KeyedPartition],file_path:Path,full_path:Path)
polars.io.partition.KeyedPartitionContext.__init__(self,file_idx:int,part_idx:int,in_part_idx:int,keys:list[KeyedPartition],file_path:Path,full_path:Path)
polars.io.partition.KeyedPartitionContext.hive_dirs(self)->Path
polars.io.partition.PartitionByKey(self,base_path:str|Path,*,file_path:Callable[[KeyedPartitionContext],Path|str|IO[bytes]|IO[str]]|None=None,by:str|Expr|Sequence[str|Expr]|Mapping[str,Expr],include_key:bool=True)
polars.io.partition.PartitionByKey.__init__(self,base_path:str|Path,*,file_path:Callable[[KeyedPartitionContext],Path|str|IO[bytes]|IO[str]]|None=None,by:str|Expr|Sequence[str|Expr]|Mapping[str,Expr],include_key:bool=True)
polars.io.partition.PartitionMaxSize(self,base_path:str|Path,*,file_path:Callable[[BasePartitionContext],Path|str|IO[bytes]|IO[str]]|None=None,max_size:int)
polars.io.partition.PartitionMaxSize.__init__(self,base_path:str|Path,*,file_path:Callable[[BasePartitionContext],Path|str|IO[bytes]|IO[str]]|None=None,max_size:int)
polars.io.partition.PartitionParted(self,base_path:str|Path,*,file_path:Callable[[KeyedPartitionContext],Path|str|IO[bytes]|IO[str]]|None=None,by:str|Expr|Sequence[str|Expr]|Mapping[str,Expr],include_key:bool=True)
polars.io.partition.PartitionParted.__init__(self,base_path:str|Path,*,file_path:Callable[[KeyedPartitionContext],Path|str|IO[bytes]|IO[str]]|None=None,by:str|Expr|Sequence[str|Expr]|Mapping[str,Expr],include_key:bool=True)
polars.io.partition._cast_base_file_path_cb(file_path_cb:Callable[[BasePartitionContext],Path|str|IO[bytes]|IO[str]]|None)->Callable[[BasePartitionContext], Path | str | IO[bytes] | IO[str]] | None
polars.io.partition._cast_keyed_file_path_cb(file_path_cb:Callable[[KeyedPartitionContext],Path|str|IO[bytes]|IO[str]]|None)->Callable[[KeyedPartitionContext], Path | str | IO[bytes] | IO[str]] | None
polars.io.partition._lower_by(by:str|Expr|Sequence[str|Expr]|Mapping[str,Expr])->list[PyExpr]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/iceberg.py----------------------------------------
A:polars.io.iceberg.source->pyiceberg.table.StaticTable.from_metadata(metadata_location=source, properties=storage_options or {})
A:polars.io.iceberg.snapshot->pyiceberg.table.StaticTable.from_metadata(metadata_location=source, properties=storage_options or {}).snapshot_by_id(snapshot_id)
A:polars.io.iceberg.func->partial(_scan_pyarrow_dataset_impl, source, snapshot_id=snapshot_id)
A:polars.io.iceberg.arrow_schema->schema_to_pyarrow(source.schema())
A:polars.io.iceberg.scan->scan.filter(pyiceberg_expr).filter(pyiceberg_expr)
A:polars.io.iceberg.expr_ast->_to_ast(predicate)
A:polars.io.iceberg.pyiceberg_expr->_convert_predicate(expr_ast)
A:polars.io.iceberg.f->_convert_predicate(a.func)
A:polars.io.iceberg.lhs->_convert_predicate(a.left)
A:polars.io.iceberg.rhs->_convert_predicate(a.comparators[0])
polars.io.iceberg._(a:Attribute)->Any
polars.io.iceberg._(a:BinOp)->Any
polars.io.iceberg._(a:Call)->Any
polars.io.iceberg._(a:Compare)->Any
polars.io.iceberg._(a:Constant)->Any
polars.io.iceberg._(a:List)->Any
polars.io.iceberg._(a:Name)->Any
polars.io.iceberg._(a:UnaryOp)->Any
polars.io.iceberg._convert_predicate(a:Any)->Any
polars.io.iceberg._scan_pyarrow_dataset_impl(tbl:Table,with_columns:list[str]|None=None,predicate:str='',n_rows:int|None=None,snapshot_id:int|None=None,**kwargs:Any)->DataFrame | Series
polars.io.iceberg._to_ast(expr:str)->ast.expr
polars.io.iceberg.scan_iceberg(source:str|Table,*,snapshot_id:int|None=None,storage_options:dict[str,Any]|None=None)->LazyFrame
polars.scan_iceberg(source:str|Table,*,snapshot_id:int|None=None,storage_options:dict[str,Any]|None=None)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/pyarrow_dataset/anonymous_scan.py----------------------------------------
A:polars.io.pyarrow_dataset.anonymous_scan.func->partial(_scan_pyarrow_dataset_impl, ds, batch_size=batch_size)
A:polars.io.pyarrow_dataset.anonymous_scan._filter->eval(predicate, {'pa': pa, 'Date': Date, 'Datetime': Datetime, 'Duration': Duration, 'to_py_date': to_py_date, 'to_py_datetime': to_py_datetime, 'to_py_time': to_py_time, 'to_py_timedelta': to_py_timedelta})
polars.io.pyarrow_dataset.anonymous_scan._scan_pyarrow_dataset(ds:pa.dataset.Dataset,*,allow_pyarrow_filter:bool=True,batch_size:int|None=None)->LazyFrame
polars.io.pyarrow_dataset.anonymous_scan._scan_pyarrow_dataset_impl(ds:pa.dataset.Dataset,with_columns:list[str]|None,predicate:str|None,n_rows:int|None,batch_size:int|None)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/pyarrow_dataset/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/pyarrow_dataset/functions.py----------------------------------------
polars.io.pyarrow_dataset.functions.scan_pyarrow_dataset(source:pa.dataset.Dataset,*,allow_pyarrow_filter:bool=True,batch_size:int|None=None)->LazyFrame
polars.scan_pyarrow_dataset(source:pa.dataset.Dataset,*,allow_pyarrow_filter:bool=True,batch_size:int|None=None)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/ipc/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/ipc/functions.py----------------------------------------
A:polars.io.ipc.functions.lf->lf.select(columns).select(columns)
A:polars.io.ipc.functions.df->df.slice(0, n_rows).slice(0, n_rows)
A:polars.io.ipc.functions.pyarrow_feather->import_optional('pyarrow.feather', err_prefix='', err_suffix="is required when using 'read_ipc(..., use_pyarrow=True)'")
A:polars.io.ipc.functions.tbl->reader.read_all()
A:polars.io.ipc.functions.source->normalize_filepath(source, check_not_directory=False)
A:polars.io.ipc.functions.scan->scan_ipc(source, n_rows=n_rows, rechunk=rechunk, row_index_name=row_index_name, row_index_offset=row_index_offset)
A:polars.io.ipc.functions.(projection, columns)->parse_columns_arg(columns)
A:polars.io.ipc.functions.pydf->polars.polars.PyDataFrame.read_ipc_stream(source, columns, projection, n_rows, parse_row_index_args(row_index_name, row_index_offset), rechunk)
A:polars.io.ipc.functions.pyarrow_ipc->import_optional('pyarrow.ipc', err_prefix='', err_suffix="is required when using 'read_ipc_stream(..., use_pyarrow=True)'")
A:polars.io.ipc.functions.credential_provider_builder->_init_credential_provider_builder(credential_provider, source, storage_options, 'scan_parquet')
A:polars.io.ipc.functions.storage_options->list(storage_options.items())
A:polars.io.ipc.functions.pylf->polars.polars.PyLazyFrame.new_from_ipc(source, sources, n_rows, cache, rechunk, parse_row_index_args(row_index_name, row_index_offset), cloud_options=storage_options, credential_provider=credential_provider_builder, retries=retries, file_cache_ttl=file_cache_ttl, hive_partitioning=hive_partitioning, hive_schema=hive_schema, try_parse_hive_dates=try_parse_hive_dates, include_file_paths=include_file_paths)
polars.io.ipc.functions._read_ipc_impl(source:str|Path|IO[bytes]|bytes,*,columns:Sequence[int]|Sequence[str]|None=None,n_rows:int|None=None,row_index_name:str|None=None,row_index_offset:int=0,rechunk:bool=True,memory_map:bool=True)->DataFrame
polars.io.ipc.functions._read_ipc_stream_impl(source:str|Path|IO[bytes]|bytes,*,columns:Sequence[int]|Sequence[str]|None=None,n_rows:int|None=None,row_index_name:str|None=None,row_index_offset:int=0,rechunk:bool=True)->DataFrame
polars.io.ipc.functions.read_ipc(source:str|Path|IO[bytes]|bytes,*,columns:list[int]|list[str]|None=None,n_rows:int|None=None,use_pyarrow:bool=False,memory_map:bool=True,storage_options:dict[str,Any]|None=None,row_index_name:str|None=None,row_index_offset:int=0,rechunk:bool=True)->DataFrame
polars.io.ipc.functions.read_ipc_schema(source:str|Path|IO[bytes]|bytes)->dict[str, DataType]
polars.io.ipc.functions.read_ipc_stream(source:str|Path|IO[bytes]|bytes,*,columns:list[int]|list[str]|None=None,n_rows:int|None=None,use_pyarrow:bool=False,storage_options:dict[str,Any]|None=None,row_index_name:str|None=None,row_index_offset:int=0,rechunk:bool=True)->DataFrame
polars.io.ipc.functions.scan_ipc(source:str|Path|IO[bytes]|bytes|list[str]|list[Path]|list[IO[bytes]]|list[bytes],*,n_rows:int|None=None,cache:bool=True,rechunk:bool=False,row_index_name:str|None=None,row_index_offset:int=0,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',memory_map:bool=True,retries:int=2,file_cache_ttl:int|None=None,hive_partitioning:bool|None=None,hive_schema:SchemaDict|None=None,try_parse_hive_dates:bool=True,include_file_paths:str|None=None)->LazyFrame
polars.read_ipc(source:str|Path|IO[bytes]|bytes,*,columns:list[int]|list[str]|None=None,n_rows:int|None=None,use_pyarrow:bool=False,memory_map:bool=True,storage_options:dict[str,Any]|None=None,row_index_name:str|None=None,row_index_offset:int=0,rechunk:bool=True)->DataFrame
polars.read_ipc_schema(source:str|Path|IO[bytes]|bytes)->dict[str, DataType]
polars.read_ipc_stream(source:str|Path|IO[bytes]|bytes,*,columns:list[int]|list[str]|None=None,n_rows:int|None=None,use_pyarrow:bool=False,storage_options:dict[str,Any]|None=None,row_index_name:str|None=None,row_index_offset:int=0,rechunk:bool=True)->DataFrame
polars.scan_ipc(source:str|Path|IO[bytes]|bytes|list[str]|list[Path]|list[IO[bytes]]|list[bytes],*,n_rows:int|None=None,cache:bool=True,rechunk:bool=False,row_index_name:str|None=None,row_index_offset:int=0,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',memory_map:bool=True,retries:int=2,file_cache_ttl:int|None=None,hive_partitioning:bool|None=None,hive_schema:SchemaDict|None=None,try_parse_hive_dates:bool=True,include_file_paths:str|None=None)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/spreadsheet/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/spreadsheet/_write_utils.py----------------------------------------
A:polars.io.spreadsheet._write_utils.key->self._key(fmt)
A:polars.io.spreadsheet._write_utils.wbfmt->self.wb.add_format(fmt)
A:polars.io.spreadsheet._write_utils.idxs->sorted((df.get_column_index(col) for col in cols))
A:polars.io.spreadsheet._write_utils.cols->next(iter(cols))
A:polars.io.spreadsheet._write_utils.col_range->_xl_column_range(df, table_start, col, include_header=include_header)
A:polars.io.spreadsheet._write_utils.col->next(iter(cols))
A:polars.io.spreadsheet._write_utils.df_original_columns->set(df.columns)
A:polars.io.spreadsheet._write_utils.df_select_cols->_xl_inject_dummy_table_columns(df, row_total_funcs, dtype=row_totals_dtype).columns.copy()
A:polars.io.spreadsheet._write_utils.cast_lookup[col]->definition.get('return_dtype')
A:polars.io.spreadsheet._write_utils.insert_before->definition.get('insert_before')
A:polars.io.spreadsheet._write_utils.insert_after->definition.get('insert_after')
A:polars.io.spreadsheet._write_utils.df->_xl_inject_dummy_table_columns(df, row_total_funcs, dtype=row_totals_dtype)
A:polars.io.spreadsheet._write_utils.(spk_row, spk_col, _, _)->_xl_column_range(df, table_start, col, include_header=include_header, as_range=False)
A:polars.io.spreadsheet._write_utils.data_start->xl_rowcol_to_cell(spk_row, data_start_col)
A:polars.io.spreadsheet._write_utils.data_end->xl_rowcol_to_cell(spk_row, data_end_col)
A:polars.io.spreadsheet._write_utils.column_formats->dict(column_formats or {})
A:polars.io.spreadsheet._write_utils.n_ucase->sum(((c[0] if c else '').isupper() for c in df.columns))
A:polars.io.spreadsheet._write_utils.row_totals->_expand_selector_dicts(df, row_totals, expand_keys=False, expand_values=True)
A:polars.io.spreadsheet._write_utils.fn->_unpack_multi_column_dict(_expand_selector_dicts(df, column_totals, expand_keys=True, expand_values=False) if isinstance(column_totals, dict) else _expand_selectors(df, column_totals)).lower()
A:polars.io.spreadsheet._write_utils.column_totals->_unpack_multi_column_dict(_expand_selector_dicts(df, column_totals, expand_keys=True, expand_values=False) if isinstance(column_totals, dict) else _expand_selectors(df, column_totals))
A:polars.io.spreadsheet._write_utils.dtype_formats->dict(dtype_formats or {})
A:polars.io.spreadsheet._write_utils.fmt_default->format_cache.get({'valign': 'vcenter'})
A:polars.io.spreadsheet._write_utils.base_type->df.schema.get(col).base_type()
A:polars.io.spreadsheet._write_utils.fmt->dict(dtype_formats or {}).get(tp, dtype_formats[base_type])
A:polars.io.spreadsheet._write_utils.column_formats[col]->format_cache.get(fmt)
A:polars.io.spreadsheet._write_utils.tp->_xl_inject_dummy_table_columns(df, row_total_funcs, dtype=row_totals_dtype).schema.get(col)
A:polars.io.spreadsheet._write_utils.table_options->table_options.pop('style', None).copy()
A:polars.io.spreadsheet._write_utils.table_style->table_options.pop('style', None).copy().pop('style', None)
A:polars.io.spreadsheet._write_utils.file->(file if file.suffix else file.with_suffix('.xlsx')).expanduser().resolve(strict=False)
A:polars.io.spreadsheet._write_utils.wb->Workbook(file, workbook_options)
A:polars.io.spreadsheet._write_utils.ws->Workbook(file, workbook_options).add_worksheet(name=worksheet)
A:polars.io.spreadsheet._write_utils.colrefs->','.join((f'[@[{c}]]' for c in cols))
A:polars.io.spreadsheet._write_utils.n->len(polars_tables)
polars.io.spreadsheet._write_utils._XLFormatCache(self,wb:Workbook)
polars.io.spreadsheet._write_utils._XLFormatCache.__init__(self,wb:Workbook)
polars.io.spreadsheet._write_utils._XLFormatCache._key(fmt:dict[str,Any])->str
polars.io.spreadsheet._write_utils._XLFormatCache.get(self,fmt:dict[str,Any]|Format)->Format
polars.io.spreadsheet._write_utils._adjacent_cols(df:DataFrame,cols:Iterable[str],min_max:dict[str,Any])->bool
polars.io.spreadsheet._write_utils._all_integer_cols(cols:Iterable[str],schema:Schema)->bool
polars.io.spreadsheet._write_utils._cluster(iterable:Iterable[Any],n:int=2)->Iterable[Any]
polars.io.spreadsheet._write_utils._unpack_multi_column_dict(d:dict[str|Sequence[str],Any]|Any)->dict[str, Any] | Any
polars.io.spreadsheet._write_utils._xl_apply_conditional_formats(df:DataFrame,ws:Worksheet,*,conditional_formats:ConditionalFormatDict,table_start:tuple[int,int],include_header:bool,format_cache:_XLFormatCache)->None
polars.io.spreadsheet._write_utils._xl_column_multi_range(df:DataFrame,table_start:tuple[int,int],cols:Iterable[str],*,include_header:bool)->str
polars.io.spreadsheet._write_utils._xl_column_range(df:DataFrame,table_start:tuple[int,int],col:str|tuple[int,int],*,include_header:bool,as_range:bool=True)->tuple[int, int, int, int] | str
polars.io.spreadsheet._write_utils._xl_inject_dummy_table_columns(df:DataFrame,coldefs:dict[str,Any],*,dtype:dict[str,PolarsDataType]|PolarsDataType|None=None,expr:Expr|None=None)->DataFrame
polars.io.spreadsheet._write_utils._xl_inject_sparklines(ws:Worksheet,df:DataFrame,table_start:tuple[int,int],col:str,*,include_header:bool,params:Sequence[str]|dict[str,Any])->None
polars.io.spreadsheet._write_utils._xl_rowcols_to_range(*row_col_pairs:int)->list[str]
polars.io.spreadsheet._write_utils._xl_setup_table_columns(df:DataFrame,format_cache:_XLFormatCache,column_totals:ColumnTotalsDefinition|None=None,column_formats:ColumnFormatDict|None=None,dtype_formats:dict[OneOrMoreDataTypes,str]|None=None,header_format:dict[str,Any]|None=None,sparklines:dict[str,Sequence[str]|dict[str,Any]]|None=None,formulas:dict[str,str|dict[str,str]]|None=None,row_totals:RowTotalsDefinition|None=None,float_precision:int=3,table_style:dict[str,Any]|str|None=None)->tuple[list[dict[str, Any]], dict[str | tuple[str, ...], str], DataFrame]
polars.io.spreadsheet._write_utils._xl_setup_table_options(table_style:dict[str,Any]|str|None)->tuple[dict[str, Any] | str | None, dict[str, Any]]
polars.io.spreadsheet._write_utils._xl_setup_workbook(workbook:Workbook|BytesIO|Path|str|None,worksheet:str|Worksheet|None=None)->tuple[Workbook, Worksheet, bool]
polars.io.spreadsheet._write_utils._xl_table_formula(df:DataFrame,cols:Iterable[str],func:str)->str
polars.io.spreadsheet._write_utils._xl_unique_table_name(wb:Workbook)->str
polars.io.spreadsheet._write_utils._xl_worksheet_in_workbook(wb:Workbook,ws:Worksheet,*,return_worksheet:bool=False)->bool | Worksheet


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/spreadsheet/_utils.py----------------------------------------
A:polars.io.spreadsheet._utils.params->cast(Any, {'mode': mode, 'buffering': buffering, 'encoding': encoding, 'newline': newline, 'suffix': suffix, 'prefix': prefix, 'dir': dir, 'delete': False, 'errors': errors})
polars.io.spreadsheet._utils.PortableTemporaryFile(mode:str='w+b',*,buffering:int=-1,encoding:str|None=None,newline:str|None=None,suffix:str|None=None,prefix:str|None=None,dir:str|Path|None=None,delete:bool=True,errors:str|None=None)->Iterator[Any]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/spreadsheet/functions.py----------------------------------------
A:polars.io.spreadsheet.functions.source->source.read().read()
A:polars.io.spreadsheet.functions.src->str(src)
A:polars.io.spreadsheet.functions.sheet_frames->defaultdict(list)
A:polars.io.spreadsheet.functions.(sources, read_multiple_workbooks)->_sources(source)
A:polars.io.spreadsheet.functions.read_options->read_options.copy().copy()
A:polars.io.spreadsheet.functions.engine_options->(engine_options or {}).copy()
A:polars.io.spreadsheet.functions.schema_overrides->dict(schema_overrides or {})
A:polars.io.spreadsheet.functions.(reader_fn, parser, worksheets)->_initialise_spreadsheet_parser(engine, source, engine_options)
A:polars.io.spreadsheet.functions.(sheet_names, return_multiple_sheets)->_get_sheet_names(sheet_id, sheet_name, table_name, worksheets)
A:polars.io.spreadsheet.functions.xlsx2csv->import_optional('xlsx2csv')
A:polars.io.spreadsheet.functions.parser->import_optional('fastexcel').read_excel(source, **engine_options)
A:polars.io.spreadsheet.functions.openpyxl->import_optional('openpyxl')
A:polars.io.spreadsheet.functions.fastexcel->import_optional('fastexcel')
A:polars.io.spreadsheet.functions.csv_dtypes->read_options.copy().copy().get('dtypes', {})
A:polars.io.spreadsheet.functions.csv_schema_overrides->read_options.copy().copy().get('schema_overrides', csv_dtypes)
A:polars.io.spreadsheet.functions.df->df.rename(_standardize_duplicates).rename(_standardize_duplicates)
A:polars.io.spreadsheet.functions.fastexcel_version->parse_version((original_version := fastexcel.__version__))
A:polars.io.spreadsheet.functions.parser_dtypes->read_options.copy().copy().get('dtypes', {})
A:polars.io.spreadsheet.functions.ws->import_optional('fastexcel').read_excel(source, **engine_options).load_sheet_by_name(name=sheet_name, **read_options)
A:polars.io.spreadsheet.functions.xl_table->import_optional('fastexcel').read_excel(source, **engine_options).load_table(table_name, **read_options)
A:polars.io.spreadsheet.functions.ws_arrow->import_optional('fastexcel').read_excel(source, **engine_options).load_sheet_eager(sheet_name, **read_options)
A:polars.io.spreadsheet.functions.lf->lf.cast(dtypes=updated_overrides).cast(dtypes=updated_overrides)
A:polars.io.spreadsheet.functions.apply_cast->df.rename(_standardize_duplicates).rename(_standardize_duplicates).select((d[0].all(ignore_nulls=True) for d in type_checks)).row(0)
A:polars.io.spreadsheet.functions.infer_schema_length->read_options.copy().copy().pop('infer_schema_length', None)
A:polars.io.spreadsheet.functions.has_header->read_options.copy().copy().pop('has_header', True)
A:polars.io.spreadsheet.functions.rows->list(ws[table.ref])
A:polars.io.spreadsheet.functions.n_cols->len(rows_iter[0])
A:polars.io.spreadsheet.functions.rows_iter->import_optional('fastexcel').read_excel(source, **engine_options).load_sheet_by_name(name=sheet_name, **read_options).iter_rows()
A:polars.io.spreadsheet.functions.s->polars._reexport.Series(name, values, dtype=dtype, strict=False)
A:polars.io.spreadsheet.functions.names->deduplicate_names((s.name for s in series_data))
A:polars.io.spreadsheet.functions.csv_buffer->StringIO()
polars.io.spreadsheet.functions._csv_buffer_to_frame(csv:StringIO,*,separator:str,read_options:dict[str,Any],schema_overrides:SchemaDict|None,drop_empty_rows:bool,drop_empty_cols:bool,raise_if_empty:bool)->pl.DataFrame
polars.io.spreadsheet.functions._drop_null_data(df:pl.DataFrame,*,raise_if_empty:bool,drop_empty_rows:bool=True,drop_empty_cols:bool=True)->pl.DataFrame
polars.io.spreadsheet.functions._empty_frame(raise_if_empty:bool)->pl.DataFrame
polars.io.spreadsheet.functions._get_read_options(read_options:dict[str,Any]|None,*,engine:ExcelSpreadsheetEngine,columns:Sequence[int]|Sequence[str]|None,infer_schema_length:int|None,has_header:bool)->dict[str, Any]
polars.io.spreadsheet.functions._get_sheet_names(sheet_id:int|Sequence[int]|None,sheet_name:str|Sequence[str]|None,table_name:str|None,worksheets:list[dict[str,Any]])->tuple[list[str], bool]
polars.io.spreadsheet.functions._initialise_spreadsheet_parser(engine:str|None,source:str|IO[bytes]|bytes,engine_options:dict[str,Any])->tuple[Callable[..., pl.DataFrame], Any, list[dict[str, Any]]]
polars.io.spreadsheet.functions._read_spreadsheet(source:str|IO[bytes]|bytes,*,sheet_id:int|Sequence[int]|None,sheet_name:str|Sequence[str]|None,table_name:str|None,engine:ExcelSpreadsheetEngine,engine_options:dict[str,Any]|None=None,read_options:dict[str,Any]|None=None,schema_overrides:SchemaDict|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,include_file_paths:str|None=None,columns:Sequence[int]|Sequence[str]|None=None,has_header:bool=True,raise_if_empty:bool=True,drop_empty_rows:bool=True,drop_empty_cols:bool=True)->pl.DataFrame | dict[str, pl.DataFrame]
polars.io.spreadsheet.functions._read_spreadsheet_calamine(parser:Any,*,sheet_name:str|None,read_options:dict[str,Any],schema_overrides:SchemaDict|None,columns:Sequence[int]|Sequence[str]|None,table_name:str|None=None,drop_empty_rows:bool,drop_empty_cols:bool,raise_if_empty:bool)->pl.DataFrame
polars.io.spreadsheet.functions._read_spreadsheet_openpyxl(parser:Any,*,sheet_name:str|None,read_options:dict[str,Any],schema_overrides:SchemaDict|None,columns:Sequence[int]|Sequence[str]|None,table_name:str|None=None,drop_empty_rows:bool,drop_empty_cols:bool,raise_if_empty:bool)->pl.DataFrame
polars.io.spreadsheet.functions._read_spreadsheet_xlsx2csv(parser:Any,*,sheet_name:str|None,read_options:dict[str,Any],schema_overrides:SchemaDict|None,columns:Sequence[int]|Sequence[str]|None,table_name:str|None=None,drop_empty_rows:bool,drop_empty_cols:bool,raise_if_empty:bool)->pl.DataFrame
polars.io.spreadsheet.functions._reorder_columns(df:pl.DataFrame,columns:Sequence[int]|Sequence[str]|None)->pl.DataFrame
polars.io.spreadsheet.functions._sources(source:FileSource)->tuple[Any, bool]
polars.io.spreadsheet.functions._standardize_duplicates(s:str)->str
polars.io.spreadsheet.functions._unpack_read_results(frames:list[pl.DataFrame]|list[dict[str,pl.DataFrame]],*,read_multiple_workbooks:bool)->Any
polars.io.spreadsheet.functions.read_excel(source:FileSource,*,sheet_id:int|Sequence[int]|None=None,sheet_name:str|list[str]|tuple[str]|None=None,table_name:str|None=None,engine:ExcelSpreadsheetEngine='calamine',engine_options:dict[str,Any]|None=None,read_options:dict[str,Any]|None=None,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,schema_overrides:SchemaDict|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,include_file_paths:str|None=None,drop_empty_rows:bool=True,drop_empty_cols:bool=True,raise_if_empty:bool=True)->pl.DataFrame | dict[str, pl.DataFrame]
polars.io.spreadsheet.functions.read_ods(source:FileSource,*,sheet_id:int|Sequence[int]|None=None,sheet_name:str|list[str]|tuple[str]|None=None,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,schema_overrides:SchemaDict|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,include_file_paths:str|None=None,drop_empty_rows:bool=True,drop_empty_cols:bool=True,raise_if_empty:bool=True)->pl.DataFrame | dict[str, pl.DataFrame]
polars.read_excel(source:FileSource,*,sheet_id:int|Sequence[int]|None=None,sheet_name:str|list[str]|tuple[str]|None=None,table_name:str|None=None,engine:ExcelSpreadsheetEngine='calamine',engine_options:dict[str,Any]|None=None,read_options:dict[str,Any]|None=None,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,schema_overrides:SchemaDict|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,include_file_paths:str|None=None,drop_empty_rows:bool=True,drop_empty_cols:bool=True,raise_if_empty:bool=True)->pl.DataFrame | dict[str, pl.DataFrame]
polars.read_ods(source:FileSource,*,sheet_id:int|Sequence[int]|None=None,sheet_name:str|list[str]|tuple[str]|None=None,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,schema_overrides:SchemaDict|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,include_file_paths:str|None=None,drop_empty_rows:bool=True,drop_empty_cols:bool=True,raise_if_empty:bool=True)->pl.DataFrame | dict[str, pl.DataFrame]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/csv/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/csv/batched_reader.py----------------------------------------
A:polars.io.csv.batched_reader.path->normalize_filepath(source, check_not_directory=False)
A:polars.io.csv.batched_reader.processed_null_values->_process_null_values(null_values)
A:polars.io.csv.batched_reader.(projection, columns)->parse_columns_arg(columns)
A:polars.io.csv.batched_reader.self._reader->polars.polars.PyBatchedCsv.new(infer_schema_length=infer_schema_length, chunk_size=batch_size, has_header=has_header, ignore_errors=ignore_errors, n_rows=n_rows, skip_rows=skip_rows, skip_lines=skip_lines, projection=projection, separator=separator, rechunk=rechunk, columns=columns, encoding=encoding, n_threads=n_threads, path=path, schema_overrides=dtype_list, overwrite_dtype_slice=dtype_slice, low_memory=low_memory, comment_prefix=comment_prefix, quote_char=quote_char, null_values=processed_null_values, missing_utf8_is_empty_string=missing_utf8_is_empty_string, try_parse_dates=try_parse_dates, skip_rows_after_header=skip_rows_after_header, row_index=parse_row_index_args(row_index_name, row_index_offset), eol_char=eol_char, raise_if_empty=raise_if_empty, truncate_ragged_lines=truncate_ragged_lines, decimal_comma=decimal_comma)
polars.io.csv.BatchedCsvReader(self,source:str|Path,*,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,separator:str=',',comment_prefix:str|None=None,quote_char:str|None='"',skip_rows:int=0,skip_lines:int=0,schema_overrides:SchemaDict|Sequence[PolarsDataType]|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=50000,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_index_name:str|None=None,row_index_offset:int=0,eol_char:str='\n',new_columns:Sequence[str]|None=None,raise_if_empty:bool=True,truncate_ragged_lines:bool=False,decimal_comma:bool=False)
polars.io.csv.BatchedCsvReader.next_batches(self,n:int)->list[DataFrame] | None
polars.io.csv.batched_reader.BatchedCsvReader(self,source:str|Path,*,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,separator:str=',',comment_prefix:str|None=None,quote_char:str|None='"',skip_rows:int=0,skip_lines:int=0,schema_overrides:SchemaDict|Sequence[PolarsDataType]|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=50000,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_index_name:str|None=None,row_index_offset:int=0,eol_char:str='\n',new_columns:Sequence[str]|None=None,raise_if_empty:bool=True,truncate_ragged_lines:bool=False,decimal_comma:bool=False)
polars.io.csv.batched_reader.BatchedCsvReader.__init__(self,source:str|Path,*,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,separator:str=',',comment_prefix:str|None=None,quote_char:str|None='"',skip_rows:int=0,skip_lines:int=0,schema_overrides:SchemaDict|Sequence[PolarsDataType]|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=50000,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_index_name:str|None=None,row_index_offset:int=0,eol_char:str='\n',new_columns:Sequence[str]|None=None,raise_if_empty:bool=True,truncate_ragged_lines:bool=False,decimal_comma:bool=False)
polars.io.csv.batched_reader.BatchedCsvReader.next_batches(self,n:int)->list[DataFrame] | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/csv/_utils.py----------------------------------------
A:polars.io.csv._utils.arg_byte_length->len(arg.encode('utf-8'))
A:polars.io.csv._utils.df.columns->list(new_columns)
polars.io.csv._utils._check_arg_is_1byte(arg_name:str,arg:str|None,*,can_be_empty:bool=False)->None
polars.io.csv._utils._update_columns(df:DataFrame,new_columns:Sequence[str])->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/csv/functions.py----------------------------------------
A:polars.io.csv.functions.(projection, columns)->parse_columns_arg(columns)
A:polars.io.csv.functions.tbl->tbl.rename_columns([f'column_{int(column[1:]) + 1}' for column in tbl.column_names]).rename_columns([f'column_{int(column[1:]) + 1}' for column in tbl.column_names])
A:polars.io.csv.functions.df->_read_csv_impl(data, has_header=has_header, columns=columns if columns else projection, separator=separator, comment_prefix=comment_prefix, quote_char=quote_char, skip_rows=skip_rows, skip_lines=skip_lines, schema_overrides=schema_overrides, schema=schema, null_values=null_values, missing_utf8_is_empty_string=missing_utf8_is_empty_string, ignore_errors=ignore_errors, try_parse_dates=try_parse_dates, n_threads=n_threads, infer_schema_length=infer_schema_length, batch_size=batch_size, n_rows=n_rows, encoding=encoding if encoding == 'utf8-lossy' else 'utf8', low_memory=low_memory, rechunk=rechunk, skip_rows_after_header=skip_rows_after_header, row_index_name=row_index_name, row_index_offset=row_index_offset, eol_char=eol_char, raise_if_empty=raise_if_empty, truncate_ragged_lines=truncate_ragged_lines, decimal_comma=decimal_comma, glob=glob)
A:polars.io.csv.functions.schema_overrides->dict(zip(new_columns, schema_overrides))
A:polars.io.csv.functions.new_to_current->dict(zip(new_columns, current_columns))
A:polars.io.csv.functions.schema_overrides_is_list->isinstance(schema_overrides, Sequence)
A:polars.io.csv.functions.source->normalize_filepath(source, check_not_directory=False)
A:polars.io.csv.functions.lf->lf.select(F.nth(projection)).select(F.nth(projection))
A:polars.io.csv.functions.path->normalize_filepath(source, check_not_directory=False)
A:polars.io.csv.functions.processed_null_values->_process_null_values(null_values)
A:polars.io.csv.functions.dtypes_dict->dict(dtype_list)
A:polars.io.csv.functions.scan->scan_csv(source, has_header=has_header, separator=separator, comment_prefix=comment_prefix, quote_char=quote_char, skip_rows=skip_rows, skip_lines=skip_lines, schema=schema, schema_overrides=dtypes_dict, null_values=null_values, missing_utf8_is_empty_string=missing_utf8_is_empty_string, ignore_errors=ignore_errors, infer_schema_length=infer_schema_length, n_rows=n_rows, low_memory=low_memory, rechunk=rechunk, skip_rows_after_header=skip_rows_after_header, row_index_name=row_index_name, row_index_offset=row_index_offset, eol_char=eol_char, raise_if_empty=raise_if_empty, truncate_ragged_lines=truncate_ragged_lines, decimal_comma=decimal_comma, glob=glob)
A:polars.io.csv.functions.pydf->polars.polars.PyDataFrame.read_csv(source, infer_schema_length, batch_size, has_header, ignore_errors, n_rows, skip_rows, skip_lines, projection, separator, rechunk, columns, encoding, n_threads, path, dtype_list, dtype_slice, low_memory, comment_prefix, quote_char, processed_null_values, missing_utf8_is_empty_string, try_parse_dates, skip_rows_after_header, parse_row_index_args(row_index_name, row_index_offset), eol_char=eol_char, raise_if_empty=raise_if_empty, truncate_ragged_lines=truncate_ragged_lines, decimal_comma=decimal_comma, schema=schema)
A:polars.io.csv.functions.credential_provider_builder->_init_credential_provider_builder(credential_provider, source, storage_options, 'scan_csv')
A:polars.io.csv.functions.storage_options->list(storage_options.items())
A:polars.io.csv.functions.pylf->polars.polars.PyLazyFrame.new_from_csv(source, sources, separator=separator, has_header=has_header, ignore_errors=ignore_errors, skip_rows=skip_rows, skip_lines=skip_lines, n_rows=n_rows, cache=cache, overwrite_dtype=dtype_list, low_memory=low_memory, comment_prefix=comment_prefix, quote_char=quote_char, null_values=processed_null_values, missing_utf8_is_empty_string=missing_utf8_is_empty_string, infer_schema_length=infer_schema_length, with_schema_modify=with_column_names, rechunk=rechunk, skip_rows_after_header=skip_rows_after_header, encoding=encoding, row_index=parse_row_index_args(row_index_name, row_index_offset), try_parse_dates=try_parse_dates, eol_char=eol_char, raise_if_empty=raise_if_empty, truncate_ragged_lines=truncate_ragged_lines, decimal_comma=decimal_comma, glob=glob, schema=schema, cloud_options=storage_options, credential_provider=credential_provider, retries=retries, file_cache_ttl=file_cache_ttl, include_file_paths=include_file_paths)
polars.io.csv.functions._read_csv_impl(source:str|Path|IO[bytes]|bytes,*,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,separator:str=',',comment_prefix:str|None=None,quote_char:str|None='"',skip_rows:int=0,skip_lines:int=0,schema:None|SchemaDict=None,schema_overrides:None|(SchemaDict|Sequence[PolarsDataType])=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=8192,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=False,skip_rows_after_header:int=0,row_index_name:str|None=None,row_index_offset:int=0,sample_size:int=1024,eol_char:str='\n',raise_if_empty:bool=True,truncate_ragged_lines:bool=False,decimal_comma:bool=False,glob:bool=True)->DataFrame
polars.io.csv.functions._scan_csv_impl(source:str|IO[str]|IO[bytes]|bytes|list[str]|list[Path]|list[IO[str]]|list[IO[bytes]]|list[bytes],*,has_header:bool=True,separator:str=',',comment_prefix:str|None=None,quote_char:str|None='"',skip_rows:int=0,skip_lines:int=0,schema:SchemaDict|None=None,schema_overrides:SchemaDict|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,cache:bool=True,with_column_names:Callable[[list[str]],list[str]]|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=False,skip_rows_after_header:int=0,row_index_name:str|None=None,row_index_offset:int=0,try_parse_dates:bool=False,eol_char:str='\n',raise_if_empty:bool=True,truncate_ragged_lines:bool=True,decimal_comma:bool=False,glob:bool=True,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderBuilder|None=None,retries:int=2,file_cache_ttl:int|None=None,include_file_paths:str|None=None)->LazyFrame
polars.io.csv.functions.read_csv(source:str|Path|IO[str]|IO[bytes]|bytes,*,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,new_columns:Sequence[str]|None=None,separator:str=',',comment_prefix:str|None=None,quote_char:str|None='"',skip_rows:int=0,skip_lines:int=0,schema:SchemaDict|None=None,schema_overrides:Mapping[str,PolarsDataType]|Sequence[PolarsDataType]|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema:bool=True,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=8192,n_rows:int|None=None,encoding:CsvEncoding|str='utf8',low_memory:bool=False,rechunk:bool=False,use_pyarrow:bool=False,storage_options:dict[str,Any]|None=None,skip_rows_after_header:int=0,row_index_name:str|None=None,row_index_offset:int=0,sample_size:int=1024,eol_char:str='\n',raise_if_empty:bool=True,truncate_ragged_lines:bool=False,decimal_comma:bool=False,glob:bool=True)->DataFrame
polars.io.csv.functions.read_csv_batched(source:str|Path,*,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,new_columns:Sequence[str]|None=None,separator:str=',',comment_prefix:str|None=None,quote_char:str|None='"',skip_rows:int=0,schema_overrides:Mapping[str,PolarsDataType]|Sequence[PolarsDataType]|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=50000,n_rows:int|None=None,encoding:CsvEncoding|str='utf8',low_memory:bool=False,rechunk:bool=False,skip_rows_after_header:int=0,row_index_name:str|None=None,row_index_offset:int=0,sample_size:int=1024,eol_char:str='\n',raise_if_empty:bool=True,truncate_ragged_lines:bool=False,decimal_comma:bool=False)->BatchedCsvReader
polars.io.csv.functions.scan_csv(source:str|Path|IO[str]|IO[bytes]|bytes|list[str]|list[Path]|list[IO[str]]|list[IO[bytes]]|list[bytes],*,has_header:bool=True,separator:str=',',comment_prefix:str|None=None,quote_char:str|None='"',skip_rows:int=0,skip_lines:int=0,schema:SchemaDict|None=None,schema_overrides:SchemaDict|Sequence[PolarsDataType]|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,cache:bool=True,with_column_names:Callable[[list[str]],list[str]]|None=None,infer_schema:bool=True,infer_schema_length:int|None=N_INFER_DEFAULT,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=False,skip_rows_after_header:int=0,row_index_name:str|None=None,row_index_offset:int=0,try_parse_dates:bool=False,eol_char:str='\n',new_columns:Sequence[str]|None=None,raise_if_empty:bool=True,truncate_ragged_lines:bool=False,decimal_comma:bool=False,glob:bool=True,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,file_cache_ttl:int|None=None,include_file_paths:str|None=None)->LazyFrame
polars.read_csv(source:str|Path|IO[str]|IO[bytes]|bytes,*,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,new_columns:Sequence[str]|None=None,separator:str=',',comment_prefix:str|None=None,quote_char:str|None='"',skip_rows:int=0,skip_lines:int=0,schema:SchemaDict|None=None,schema_overrides:Mapping[str,PolarsDataType]|Sequence[PolarsDataType]|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema:bool=True,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=8192,n_rows:int|None=None,encoding:CsvEncoding|str='utf8',low_memory:bool=False,rechunk:bool=False,use_pyarrow:bool=False,storage_options:dict[str,Any]|None=None,skip_rows_after_header:int=0,row_index_name:str|None=None,row_index_offset:int=0,sample_size:int=1024,eol_char:str='\n',raise_if_empty:bool=True,truncate_ragged_lines:bool=False,decimal_comma:bool=False,glob:bool=True)->DataFrame
polars.read_csv_batched(source:str|Path,*,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,new_columns:Sequence[str]|None=None,separator:str=',',comment_prefix:str|None=None,quote_char:str|None='"',skip_rows:int=0,schema_overrides:Mapping[str,PolarsDataType]|Sequence[PolarsDataType]|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=50000,n_rows:int|None=None,encoding:CsvEncoding|str='utf8',low_memory:bool=False,rechunk:bool=False,skip_rows_after_header:int=0,row_index_name:str|None=None,row_index_offset:int=0,sample_size:int=1024,eol_char:str='\n',raise_if_empty:bool=True,truncate_ragged_lines:bool=False,decimal_comma:bool=False)->BatchedCsvReader
polars.scan_csv(source:str|Path|IO[str]|IO[bytes]|bytes|list[str]|list[Path]|list[IO[str]]|list[IO[bytes]]|list[bytes],*,has_header:bool=True,separator:str=',',comment_prefix:str|None=None,quote_char:str|None='"',skip_rows:int=0,skip_lines:int=0,schema:SchemaDict|None=None,schema_overrides:SchemaDict|Sequence[PolarsDataType]|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,cache:bool=True,with_column_names:Callable[[list[str]],list[str]]|None=None,infer_schema:bool=True,infer_schema_length:int|None=N_INFER_DEFAULT,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=False,skip_rows_after_header:int=0,row_index_name:str|None=None,row_index_offset:int=0,try_parse_dates:bool=False,eol_char:str='\n',new_columns:Sequence[str]|None=None,raise_if_empty:bool=True,truncate_ragged_lines:bool=False,decimal_comma:bool=False,glob:bool=True,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,file_cache_ttl:int|None=None,include_file_paths:str|None=None)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/json/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/json/read.py----------------------------------------
A:polars.io.json.read.source->normalize_filepath(source)
A:polars.io.json.read.pydf->polars.polars.PyDataFrame.read_json(source, infer_schema_length=infer_schema_length, schema=schema, schema_overrides=schema_overrides)
polars.io.json.read.read_json(source:str|Path|IOBase|bytes,*,schema:SchemaDefinition|None=None,schema_overrides:SchemaDefinition|None=None,infer_schema_length:int|None=N_INFER_DEFAULT)->DataFrame
polars.read_json(source:str|Path|IOBase|bytes,*,schema:SchemaDefinition|None=None,schema_overrides:SchemaDefinition|None=None,infer_schema_length:int|None=N_INFER_DEFAULT)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/cloud/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/cloud/_utils.py----------------------------------------
A:polars.io.cloud._utils.splitted->str(path).split('://', maxsplit=1)
polars.io.cloud._utils._first_scan_path(source:Any)->str | Path | None
polars.io.cloud._utils._get_path_scheme(path:str|Path)->str | None
polars.io.cloud._utils._is_aws_cloud(scheme:str)->bool
polars.io.cloud._utils._is_azure_cloud(scheme:str)->bool
polars.io.cloud._utils._is_gcp_cloud(scheme:str)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/cloud/credential_provider/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/cloud/credential_provider/_builder.py----------------------------------------
A:polars.io.cloud.credential_provider._builder.verbose->polars._utils.logging.verbose()
A:polars.io.cloud.credential_provider._builder.v->self.credential_provider_init()
A:polars.io.cloud.credential_provider._builder.provider->self.initializer()
A:polars.io.cloud.credential_provider._builder.k->k.lower().lower()
A:polars.io.cloud.credential_provider._builder.credential_provider_init->f()
polars.io.cloud.credential_provider._builder.AutoInit(self,cls:Any,**kw:Any)
polars.io.cloud.credential_provider._builder.AutoInit.__init__(self,cls:Any,**kw:Any)
polars.io.cloud.credential_provider._builder.AutoInit.provider_repr(self)->str
polars.io.cloud.credential_provider._builder.AutoInitAWS(self,initializer:Callable[[],CredentialProviderAWS])
polars.io.cloud.credential_provider._builder.AutoInitAWS.__init__(self,initializer:Callable[[],CredentialProviderAWS])
polars.io.cloud.credential_provider._builder.AutoInitAWS.provider_repr(self)->str
polars.io.cloud.credential_provider._builder.CredentialProviderBuilder(self,credential_provider_init:CredentialProviderBuilderImpl)
polars.io.cloud.credential_provider._builder.CredentialProviderBuilder.__getstate__(self)->Any
polars.io.cloud.credential_provider._builder.CredentialProviderBuilder.__init__(self,credential_provider_init:CredentialProviderBuilderImpl)
polars.io.cloud.credential_provider._builder.CredentialProviderBuilder.__repr__(self)->str
polars.io.cloud.credential_provider._builder.CredentialProviderBuilder.__setstate__(self,state:Any)->None
polars.io.cloud.credential_provider._builder.CredentialProviderBuilder.build_credential_provider(self)->CredentialProvider | CredentialProviderFunction | None
polars.io.cloud.credential_provider._builder.CredentialProviderBuilder.from_initialized_provider(cls,credential_provider:CredentialProviderFunction)->CredentialProviderBuilder
polars.io.cloud.credential_provider._builder.CredentialProviderBuilderImpl(self)
polars.io.cloud.credential_provider._builder.CredentialProviderBuilderImpl.__call__(self)
polars.io.cloud.credential_provider._builder.CredentialProviderBuilderImpl.__repr__(self)->str
polars.io.cloud.credential_provider._builder.CredentialProviderBuilderImpl.provider_repr(self)->str
polars.io.cloud.credential_provider._builder.InitializedCredentialProvider(self,credential_provider:CredentialProviderFunction|None)
polars.io.cloud.credential_provider._builder.InitializedCredentialProvider.__init__(self,credential_provider:CredentialProviderFunction|None)
polars.io.cloud.credential_provider._builder.InitializedCredentialProvider.provider_repr(self)->str
polars.io.cloud.credential_provider._builder.UserProvidedGCPToken(self,token:str)
polars.io.cloud.credential_provider._builder.UserProvidedGCPToken.__init__(self,token:str)
polars.io.cloud.credential_provider._builder._init_credential_provider_builder(credential_provider:CredentialProviderFunction|CredentialProviderBuilder|Literal['auto']|None,source:Any,storage_options:dict[str,Any]|None,caller_name:str)->CredentialProviderBuilder | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/cloud/credential_provider/_providers.py----------------------------------------
A:polars.io.cloud.credential_provider._providers.session->boto3.Session(profile_name=self.profile_name, region_name=self.region_name)
A:polars.io.cloud.credential_provider._providers.creds->boto3.Session(profile_name=self.profile_name, region_name=self.region_name).get_credentials()
A:polars.io.cloud.credential_provider._providers.client->boto3.Session(profile_name=self.profile_name, region_name=self.region_name).client('sts')
A:polars.io.cloud.credential_provider._providers.sts_response->boto3.Session(profile_name=self.profile_name, region_name=self.region_name).client('sts').assume_role(**self.assume_role)
A:polars.io.cloud.credential_provider._providers.token->credential.get_token(*self.scopes, tenant_id=self.tenant_id)
A:polars.io.cloud.credential_provider._providers.POLARS_AUTO_USE_AZURE_STORAGE_ACCOUNT_KEY->os.getenv('POLARS_AUTO_USE_AZURE_STORAGE_ACCOUNT_KEY')
A:polars.io.cloud.credential_provider._providers.verbose->polars._utils.logging.verbose()
A:polars.io.cloud.credential_provider._providers.(creds, _)->credential_provider()
A:polars.io.cloud.credential_provider._providers.(creds, opt_expiry)->credential_provider()
polars.io.cloud.credential_provider.CredentialProvider(self)
polars.io.cloud.credential_provider.CredentialProviderAWS(self,*,profile_name:str|None=None,region_name:str|None=None,assume_role:AWSAssumeRoleKWArgs|None=None)
polars.io.cloud.credential_provider.CredentialProviderAWS.EmptyCredentialError(Exception)
polars.io.cloud.credential_provider.CredentialProviderAWS._ensure_module_availability(cls)->None
polars.io.cloud.credential_provider.CredentialProviderAWS._finish_assume_role(self,session:Any)->CredentialProviderFunctionReturn
polars.io.cloud.credential_provider.CredentialProviderAzure(self,*,scopes:list[str]|None=None,tenant_id:str|None=None,credential:Any|None=None,_storage_account:str|None=None)
polars.io.cloud.credential_provider.CredentialProviderAzure._azcli(*args:str)->bytes
polars.io.cloud.credential_provider.CredentialProviderAzure._azcli_version(cls)->str | None
polars.io.cloud.credential_provider.CredentialProviderAzure._ensure_module_availability(cls)->None
polars.io.cloud.credential_provider.CredentialProviderAzure._extract_adls_uri_storage_account(uri:str)->str | None
polars.io.cloud.credential_provider.CredentialProviderAzure._get_azure_storage_account_key_az_cli(cls,account_name:str)->str
polars.io.cloud.credential_provider.CredentialProviderAzure._try_get_azure_storage_account_credential_if_permitted(self)->CredentialProviderFunctionReturn | None
polars.io.cloud.credential_provider.CredentialProviderGCP(self,*,scopes:Any|None=None,request:Any|None=None,quota_project_id:Any|None=None,default_scopes:Any|None=None)
polars.io.cloud.credential_provider.CredentialProviderGCP._ensure_module_availability(cls)->None
polars.io.cloud.credential_provider._providers.AWSAssumeRoleKWArgs(TypedDict)
polars.io.cloud.credential_provider._providers.CredentialProvider(self)
polars.io.cloud.credential_provider._providers.CredentialProvider.__call__(self)
polars.io.cloud.credential_provider._providers.CredentialProviderAWS(self,*,profile_name:str|None=None,region_name:str|None=None,assume_role:AWSAssumeRoleKWArgs|None=None)
polars.io.cloud.credential_provider._providers.CredentialProviderAWS.EmptyCredentialError(Exception)
polars.io.cloud.credential_provider._providers.CredentialProviderAWS.__init__(self,*,profile_name:str|None=None,region_name:str|None=None,assume_role:AWSAssumeRoleKWArgs|None=None)
polars.io.cloud.credential_provider._providers.CredentialProviderAWS._ensure_module_availability(cls)->None
polars.io.cloud.credential_provider._providers.CredentialProviderAWS._finish_assume_role(self,session:Any)->CredentialProviderFunctionReturn
polars.io.cloud.credential_provider._providers.CredentialProviderAzure(self,*,scopes:list[str]|None=None,tenant_id:str|None=None,credential:Any|None=None,_storage_account:str|None=None)
polars.io.cloud.credential_provider._providers.CredentialProviderAzure.__init__(self,*,scopes:list[str]|None=None,tenant_id:str|None=None,credential:Any|None=None,_storage_account:str|None=None)
polars.io.cloud.credential_provider._providers.CredentialProviderAzure._azcli(*args:str)->bytes
polars.io.cloud.credential_provider._providers.CredentialProviderAzure._azcli_version(cls)->str | None
polars.io.cloud.credential_provider._providers.CredentialProviderAzure._ensure_module_availability(cls)->None
polars.io.cloud.credential_provider._providers.CredentialProviderAzure._extract_adls_uri_storage_account(uri:str)->str | None
polars.io.cloud.credential_provider._providers.CredentialProviderAzure._get_azure_storage_account_key_az_cli(cls,account_name:str)->str
polars.io.cloud.credential_provider._providers.CredentialProviderAzure._try_get_azure_storage_account_credential_if_permitted(self)->CredentialProviderFunctionReturn | None
polars.io.cloud.credential_provider._providers.CredentialProviderGCP(self,*,scopes:Any|None=None,request:Any|None=None,quota_project_id:Any|None=None,default_scopes:Any|None=None)
polars.io.cloud.credential_provider._providers.CredentialProviderGCP.__init__(self,*,scopes:Any|None=None,request:Any|None=None,quota_project_id:Any|None=None,default_scopes:Any|None=None)
polars.io.cloud.credential_provider._providers.CredentialProviderGCP._ensure_module_availability(cls)->None
polars.io.cloud.credential_provider._providers._get_credentials_from_provider_expiry_aware(credential_provider:CredentialProviderFunction)->dict[str, str]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/database/_arrow_registry.py----------------------------------------
polars.io.database._arrow_registry.ArrowDriverProperties(TypedDict)


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/database/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/database/_inference.py----------------------------------------
A:polars.io.database._inference.value->re.sub('\\d', '', value)
A:polars.io.database._inference.nested->_infer_dtype_from_database_typename(value=modifier, raise_unmatched=False)
A:polars.io.database._inference.dtype->{(8, False): Int8, (8, True): UInt8, (16, False): Int16, (16, True): UInt16, (32, False): Int32, (32, True): UInt32, (64, False): Int64, (64, True): UInt64}.get((bits, unsigned), None)
A:polars.io.database._inference.(prec, scale)->modifier.split(',')
A:polars.io.database._inference.precision->int(precision)
A:polars.io.database._inference.n->min(max(3, int(ceil(precision / 3)) * 3), 9)
polars.io.database._inference._infer_dtype_from_cursor_description(cursor:Any,description:tuple[Any,...])->PolarsDataType | None
polars.io.database._inference._infer_dtype_from_database_typename(value:str,*,raise_unmatched:bool=True)->PolarsDataType | None
polars.io.database._inference._integer_dtype_from_nbits(bits:int,*,unsigned:bool,default:PolarsDataType|None=None)->PolarsDataType | None
polars.io.database._inference._timeunit_from_precision(precision:int|str|None)->str | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/database/_utils.py----------------------------------------
A:polars.io.database._utils.cx->import_optional('connectorx')
A:polars.io.database._utils.tbl->cursor.fetch_arrow_table()
A:polars.io.database._utils.errmsg->re.sub('://[^:]+:[^:]+@', '://***:***@', str(err))
A:polars.io.database._utils.driver_name->re.sub(f'^{driver_name}:/{{,3}}', '', connection_uri).split(':', 1)[0].lower()
A:polars.io.database._utils.module_suffix->module_suffix_map.get(driver_name, driver_name)
A:polars.io.database._utils.adbc_driver->import_optional(module_name, err_prefix='ADBC', err_suffix='driver not detected', install_message=f'If ADBC supports this database, please run: pip install adbc-driver-{driver_name} pyarrow')
A:polars.io.database._utils.connection_uri->re.sub(f'^{driver_name}:/{{,3}}', '', connection_uri)
polars.io.database._utils._open_adbc_connection(connection_uri:str)->Any
polars.io.database._utils._read_sql_adbc(query:str,connection_uri:str,schema_overrides:SchemaDict|None,execute_options:dict[str,Any]|None=None)->DataFrame
polars.io.database._utils._read_sql_connectorx(query:str|list[str],connection_uri:str,partition_on:str|None=None,partition_range:tuple[int,int]|None=None,partition_num:int|None=None,protocol:str|None=None,schema_overrides:SchemaDict|None=None)->DataFrame
polars.io.database._utils._run_async(co:Coroutine[Any,Any,Any])->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/database/functions.py----------------------------------------
A:polars.io.database.functions._->import_optional(module_name='arrow_odbc', err_prefix='use of ODBC connection string requires the', err_suffix='package')
A:polars.io.database.functions.connection->ODBCCursorProxy(connection)
polars.io.database.functions.read_database(query:str|TextClause|Selectable,connection:ConnectionOrCursor|str,*,iter_batches:bool=False,batch_size:int|None=None,schema_overrides:SchemaDict|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,execute_options:dict[str,Any]|None=None)->DataFrame | Iterator[DataFrame]
polars.io.database.functions.read_database_uri(query:list[str]|str,uri:str,*,partition_on:str|None=None,partition_range:tuple[int,int]|None=None,partition_num:int|None=None,protocol:str|None=None,engine:DbReadEngine|None=None,schema_overrides:SchemaDict|None=None,execute_options:dict[str,Any]|None=None)->DataFrame
polars.read_database(query:str|TextClause|Selectable,connection:ConnectionOrCursor|str,*,iter_batches:bool=False,batch_size:int|None=None,schema_overrides:SchemaDict|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,execute_options:dict[str,Any]|None=None)->DataFrame | Iterator[DataFrame]
polars.read_database_uri(query:list[str]|str,uri:str,*,partition_on:str|None=None,partition_range:tuple[int,int]|None=None,partition_num:int|None=None,protocol:str|None=None,engine:DbReadEngine|None=None,schema_overrides:SchemaDict|None=None,execute_options:dict[str,Any]|None=None)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/database/_cursor_proxies.py----------------------------------------
A:polars.io.database._cursor_proxies.batch_reader->read_arrow_batches_from_odbc(query=self.query, batch_size=batch_size, connection_string=self.connection_string, **self.execute_options)
A:polars.io.database._cursor_proxies.surrealdb->import_optional('surrealdb')
A:polars.io.database._cursor_proxies.self.is_async->isinstance(client, surrealdb.AsyncSurrealDB)
A:polars.io.database._cursor_proxies.self._cached_result->self.fetchall()
polars.io.database._cursor_proxies.ODBCCursorProxy(self,connection_string:str)
polars.io.database._cursor_proxies.ODBCCursorProxy.__init__(self,connection_string:str)
polars.io.database._cursor_proxies.ODBCCursorProxy.close(self)->None
polars.io.database._cursor_proxies.ODBCCursorProxy.execute(self,query:str,**execute_options:Any)->None
polars.io.database._cursor_proxies.ODBCCursorProxy.fetch_arrow_table(self,batch_size:int=10000,*,fetch_all:bool=False)->pa.Table
polars.io.database._cursor_proxies.ODBCCursorProxy.fetch_record_batches(self,batch_size:int=10000,*,fetch_all:bool=False)->Iterable[pa.RecordBatch]
polars.io.database._cursor_proxies.SurrealDBCursorProxy(self,client:Any)
polars.io.database._cursor_proxies.SurrealDBCursorProxy.__init__(self,client:Any)
polars.io.database._cursor_proxies.SurrealDBCursorProxy._unpack_result(result:list[dict[str,Any]])->list[dict[str, Any]]
polars.io.database._cursor_proxies.SurrealDBCursorProxy._unpack_result_async(result:Coroutine[Any,Any,list[dict[str,Any]]])->Coroutine[Any, Any, list[dict[str, Any]]]
polars.io.database._cursor_proxies.SurrealDBCursorProxy.close(self)->None
polars.io.database._cursor_proxies.SurrealDBCursorProxy.execute(self,query:str,**execute_options:Any)->Self
polars.io.database._cursor_proxies.SurrealDBCursorProxy.fetchall(self)->list[dict[str, Any]]
polars.io.database._cursor_proxies.SurrealDBCursorProxy.fetchmany(self,size:int)->list[dict[str, Any]]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/database/_executor.py----------------------------------------
A:polars.io.database._executor.connection->SurrealDBCursorProxy(client=connection)
A:polars.io.database._executor.self.cursor->self._normalise_cursor(connection)
A:polars.io.database._executor.df->df.with_columns(cast_cols).with_columns(cast_cols)
A:polars.io.database._executor.mod->__import__(module_name)
A:polars.io.database._executor.module_version->parse_version(ver)
A:polars.io.database._executor.fetchmany_arrow->getattr(self.result, fetch_batches)
A:polars.io.database._executor.arrow->fetchmany_arrow(*size)
A:polars.io.database._executor.rows->cursor_execute(query, *positional_options).fetchmany(batch_size)
A:polars.io.database._executor.self.result->_run_async(self.result)
A:polars.io.database._executor.schema_overrides->self._inject_type_overrides(description=cursor_desc, schema_overrides=schema_overrides or {})
A:polars.io.database._executor.dupe_check->set()
A:polars.io.database._executor.dtype->_infer_dtype_from_cursor_description(self.cursor, desc)
A:polars.io.database._executor.is_session->self._is_alchemy_session(self.cursor)
A:polars.io.database._executor.options->options.copy().copy()
A:polars.io.database._executor.options['params']->options.copy().copy().pop('parameters')
A:polars.io.database._executor.params->options.copy().copy().get(param_key)
A:polars.io.database._executor.is_async->self._is_alchemy_async(self.cursor)
A:polars.io.database._executor.query->text(query)
A:polars.io.database._executor.options[param_key]->tuple(params)
A:polars.io.database._executor.q->re.search('\\w{3,}', re.sub('/\\*(.|[\\r\\n])*?\\*/', '', query))
A:polars.io.database._executor.(cursor_execute, options, query)->self._sqlalchemy_setup(query, options)
A:polars.io.database._executor.result->cursor_execute(query, *positional_options)
A:polars.io.database._executor.frame->frame_init(batch_size=batch_size, iter_batches=iter_batches, schema_overrides=schema_overrides, infer_schema_length=infer_schema_length)
polars.io.database._executor.CloseAfterFrameIter(self,frames:Any,*,cursor:Cursor)
polars.io.database._executor.CloseAfterFrameIter.__init__(self,frames:Any,*,cursor:Cursor)
polars.io.database._executor.CloseAfterFrameIter.__iter__(self)->Iterator[DataFrame]
polars.io.database._executor.ConnectionExecutor(self,connection:ConnectionOrCursor)
polars.io.database._executor.ConnectionExecutor.__enter__(self)->Self
polars.io.database._executor.ConnectionExecutor.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.io.database._executor.ConnectionExecutor.__init__(self,connection:ConnectionOrCursor)
polars.io.database._executor.ConnectionExecutor.__repr__(self)->str
polars.io.database._executor.ConnectionExecutor._apply_overrides(df:DataFrame,schema_overrides:SchemaDict)->DataFrame
polars.io.database._executor.ConnectionExecutor._check_module_version(module_name:str,minimum_version:str)->None
polars.io.database._executor.ConnectionExecutor._close_async_cursor(self)->None
polars.io.database._executor.ConnectionExecutor._fetch_arrow(self,driver_properties:ArrowDriverProperties,*,batch_size:int|None,iter_batches:bool)->Iterable[pa.RecordBatch]
polars.io.database._executor.ConnectionExecutor._fetchall_rows(result:Cursor,*,is_alchemy:bool)->Iterable[Sequence[Any]]
polars.io.database._executor.ConnectionExecutor._fetchmany_rows(self,result:Cursor,*,batch_size:int|None,is_alchemy:bool)->Iterable[Sequence[Any]]
polars.io.database._executor.ConnectionExecutor._from_arrow(self,*,batch_size:int|None,iter_batches:bool,schema_overrides:SchemaDict|None,infer_schema_length:int|None)->DataFrame | Iterator[DataFrame] | None
polars.io.database._executor.ConnectionExecutor._from_rows(self,*,batch_size:int|None,iter_batches:bool,schema_overrides:SchemaDict|None,infer_schema_length:int|None)->DataFrame | Iterator[DataFrame] | None
polars.io.database._executor.ConnectionExecutor._inject_type_overrides(self,description:list[tuple[str,Any]],schema_overrides:SchemaDict)->SchemaDict
polars.io.database._executor.ConnectionExecutor._is_alchemy_async(conn:Any)->bool
polars.io.database._executor.ConnectionExecutor._is_alchemy_engine(conn:Any)->bool
polars.io.database._executor.ConnectionExecutor._is_alchemy_object(conn:Any)->bool
polars.io.database._executor.ConnectionExecutor._is_alchemy_session(conn:Any)->bool
polars.io.database._executor.ConnectionExecutor._normalise_cursor(self,conn:Any)->Cursor
polars.io.database._executor.ConnectionExecutor._sqlalchemy_async_execute(self,query:TextClause,**options:Any)->Any
polars.io.database._executor.ConnectionExecutor._sqlalchemy_setup(self,query:str|TextClause|Selectable,options:dict[str,Any])->tuple[Any, dict[str, Any], str | TextClause | Selectable]
polars.io.database._executor.ConnectionExecutor.execute(self,query:str|TextClause|Selectable,*,options:dict[str,Any]|None=None,select_queries_only:bool=True)->Self
polars.io.database._executor.ConnectionExecutor.to_polars(self,*,iter_batches:bool=False,batch_size:int|None=None,schema_overrides:SchemaDict|None=None,infer_schema_length:int|None=N_INFER_DEFAULT)->DataFrame | Iterator[DataFrame]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/parquet/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/io/parquet/functions.py----------------------------------------
A:polars.io.parquet.functions.lf->lf.select(columns).select(columns)
A:polars.io.parquet.functions.pyarrow_parquet->import_optional('pyarrow.parquet', err_prefix='', err_suffix='is required when using `read_parquet(..., use_pyarrow=True)`')
A:polars.io.parquet.functions.pa_table->import_optional('pyarrow.parquet', err_prefix='', err_suffix='is required when using `read_parquet(..., use_pyarrow=True)`').read_table(source_prep, memory_map=memory_map, columns=columns, **pyarrow_options)
A:polars.io.parquet.functions.result->from_arrow(pa_table, rechunk=rechunk)
A:polars.io.parquet.functions.source->normalize_filepath(source, check_not_directory=False)
A:polars.io.parquet.functions.credential_provider_builder->_init_credential_provider_builder(credential_provider, source, storage_options, 'scan_parquet')
A:polars.io.parquet.functions.storage_options->list(storage_options.items())
A:polars.io.parquet.functions.pylf->polars.polars.PyLazyFrame.new_from_parquet(source, sources, n_rows, cache, parallel, rechunk, parse_row_index_args(row_index_name, row_index_offset), low_memory, cloud_options=storage_options, credential_provider=credential_provider, use_statistics=use_statistics, hive_partitioning=hive_partitioning, schema=schema, hive_schema=hive_schema, try_parse_hive_dates=try_parse_hive_dates, retries=retries, glob=glob, include_file_paths=include_file_paths, allow_missing_columns=allow_missing_columns)
polars.io.parquet.functions._read_parquet_with_pyarrow(source:str|Path|IO[bytes]|bytes|list[str]|list[Path]|list[IO[bytes]]|list[bytes],*,columns:list[int]|list[str]|None=None,storage_options:dict[str,Any]|None=None,pyarrow_options:dict[str,Any]|None=None,memory_map:bool=True,rechunk:bool=True)->DataFrame
polars.io.parquet.functions._scan_parquet_impl(source:str|list[str]|list[Path]|IO[str]|IO[bytes],*,n_rows:int|None=None,cache:bool=True,parallel:ParallelStrategy='auto',rechunk:bool=False,row_index_name:str|None=None,row_index_offset:int=0,storage_options:dict[str,object]|None=None,credential_provider:CredentialProviderBuilder|None=None,low_memory:bool=False,use_statistics:bool=True,hive_partitioning:bool|None=None,glob:bool=True,schema:SchemaDict|None=None,hive_schema:SchemaDict|None=None,try_parse_hive_dates:bool=True,retries:int=2,include_file_paths:str|None=None,allow_missing_columns:bool=False)->LazyFrame
polars.io.parquet.functions.read_parquet(source:FileSource,*,columns:list[int]|list[str]|None=None,n_rows:int|None=None,row_index_name:str|None=None,row_index_offset:int=0,parallel:ParallelStrategy='auto',use_statistics:bool=True,hive_partitioning:bool|None=None,glob:bool=True,schema:SchemaDict|None=None,hive_schema:SchemaDict|None=None,try_parse_hive_dates:bool=True,rechunk:bool=False,low_memory:bool=False,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,use_pyarrow:bool=False,pyarrow_options:dict[str,Any]|None=None,memory_map:bool=True,include_file_paths:str|None=None,allow_missing_columns:bool=False)->DataFrame
polars.io.parquet.functions.read_parquet_schema(source:str|Path|IO[bytes]|bytes)->dict[str, DataType]
polars.io.parquet.functions.scan_parquet(source:FileSource,*,n_rows:int|None=None,row_index_name:str|None=None,row_index_offset:int=0,parallel:ParallelStrategy='auto',use_statistics:bool=True,hive_partitioning:bool|None=None,glob:bool=True,schema:SchemaDict|None=None,hive_schema:SchemaDict|None=None,try_parse_hive_dates:bool=True,rechunk:bool=False,low_memory:bool=False,cache:bool=True,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,include_file_paths:str|None=None,allow_missing_columns:bool=False)->LazyFrame
polars.read_parquet(source:FileSource,*,columns:list[int]|list[str]|None=None,n_rows:int|None=None,row_index_name:str|None=None,row_index_offset:int=0,parallel:ParallelStrategy='auto',use_statistics:bool=True,hive_partitioning:bool|None=None,glob:bool=True,schema:SchemaDict|None=None,hive_schema:SchemaDict|None=None,try_parse_hive_dates:bool=True,rechunk:bool=False,low_memory:bool=False,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,use_pyarrow:bool=False,pyarrow_options:dict[str,Any]|None=None,memory_map:bool=True,include_file_paths:str|None=None,allow_missing_columns:bool=False)->DataFrame
polars.read_parquet_schema(source:str|Path|IO[bytes]|bytes)->dict[str, DataType]
polars.scan_parquet(source:FileSource,*,n_rows:int|None=None,row_index_name:str|None=None,row_index_offset:int=0,parallel:ParallelStrategy='auto',use_statistics:bool=True,hive_partitioning:bool|None=None,glob:bool=True,schema:SchemaDict|None=None,hive_schema:SchemaDict|None=None,try_parse_hive_dates:bool=True,rechunk:bool=False,low_memory:bool=False,cache:bool=True,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,include_file_paths:str|None=None,allow_missing_columns:bool=False)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/meta/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/meta/build.py----------------------------------------
polars.build_info()->dict[str, Any]
polars.meta.build.build_info()->dict[str, Any]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/meta/versions.py----------------------------------------
A:polars.meta.versions.deps->_get_dependency_list()
A:polars.meta.versions.module->importlib.import_module(dep_name)
A:polars.meta.versions.module_version->importlib.metadata.version(dep_name)
polars.meta.versions._get_dependency_list()->list[str]
polars.meta.versions._get_dependency_version(dep_name:str)->str
polars.meta.versions.show_versions()->None
polars.show_versions()->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/meta/thread_pool.py----------------------------------------
polars.meta.thread_pool.thread_pool_size()->int
polars.meta.thread_pool.threadpool_size()->int
polars.thread_pool_size()->int
polars.threadpool_size()->int


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/meta/index_type.py----------------------------------------
polars.get_index_type()->DataType
polars.meta.index_type.get_index_type()->DataType


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/series/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/series/categorical.py----------------------------------------
polars.series.categorical.CatNameSpace(self,series:Series)
polars.series.categorical.CatNameSpace.__init__(self,series:Series)
polars.series.categorical.CatNameSpace.ends_with(self,suffix:str)->Series
polars.series.categorical.CatNameSpace.get_categories(self)->Series
polars.series.categorical.CatNameSpace.is_local(self)->bool
polars.series.categorical.CatNameSpace.len_bytes(self)->Series
polars.series.categorical.CatNameSpace.len_chars(self)->Series
polars.series.categorical.CatNameSpace.slice(self,offset:int,length:int|None=None)->Series
polars.series.categorical.CatNameSpace.starts_with(self,prefix:str)->Series
polars.series.categorical.CatNameSpace.to_local(self)->Series
polars.series.categorical.CatNameSpace.uses_lexical_ordering(self)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/series/series.py----------------------------------------
A:polars.series.series.dtype->PolarsType('ms')
A:polars.series.series.self._s->self.cast(Datetime('us'))._s.sort(descending, nulls_last, multithreaded)
A:polars.series.series.input_dtype->_resolve_temporal_dtype(None, values.dtype)
A:polars.series.series.series->self.cast(Datetime('us')).clone()
A:polars.series.series.buffers->self.cast(Datetime('us'))._s._get_buffers()
A:polars.series.series.out['FAST_EXPLODE']->self.cast(Datetime('us'))._s.can_fast_explode_flag()
A:polars.series.series.other->Series(other)
A:polars.series.series.self->self.cast(Datetime('us')).cast(Datetime('us'))
A:polars.series.series.f->get_ffi_func('set_with_mask_<>', self.dtype, self._s)
A:polars.series.series.ts->datetime_to_int(other, time_unit)
A:polars.series.series.d->date_to_int(other)
A:polars.series.series.td->timedelta_to_int(other, time_unit)
A:polars.series.series._s->sequence_to_pyseries(self.name, [other], dtype=Decimal)
A:polars.series.series.pyseries->sequence_to_pyseries(self.name, [other])
A:polars.series.series.s->self.cast(Datetime('us')).cast(Datetime('us')).clone()
A:polars.series.series.arr->arr.__array__(dtype).__array__(dtype)
A:polars.series.series.phys_arg->arg.to_physical()
A:polars.series.series.is_generalized_ufunc->bool(ufunc.signature)
A:polars.series.series.(ufunc_input, ufunc_output)->ufunc.signature.split('->')
A:polars.series.series.result->self.cast(Datetime('us')).cast(Datetime('us'))._from_pyseries(series)
A:polars.series.series.validity_mask->self.cast(Datetime('us')).cast(Datetime('us')).is_not_null()
A:polars.series.series.sz->self.cast(Datetime('us')).cast(Datetime('us'))._s.estimated_size()
A:polars.series.series.stats->self.cast(Datetime('us')).cast(Datetime('us')).to_frame().describe(percentiles=percentiles, interpolation=interpolation)
A:polars.series.series.exponent->Series(exponent)
A:polars.series.series.out->polars.functions.select(out).to_series()
A:polars.series.series.predicate->Series('', predicate)
A:polars.series.series.n->max(0, self.len() + n)
A:polars.series.series.df->polars.functions.select(F.lit(self).search_sorted(element, side))
A:polars.series.series.opt_s->self.cast(Datetime('us')).cast(Datetime('us'))._s.rechunk(in_place)
A:polars.series.series.jx->import_optional('jax', install_message='Please see `https://jax.readthedocs.io/en/latest/installation.html` for specific installation recommendations for the Jax package')
A:polars.series.series.srs->self.cast(Datetime('us')).cast(Datetime('us')).cast(Int32)
A:polars.series.series.torch->import_optional('torch')
A:polars.series.series.numpy_array->self.cast(Datetime('us')).cast(Datetime('us')).cast(Int32).to_numpy(writable=True)
A:polars.series.series.tensor->import_optional('torch').from_numpy(numpy_array)
A:polars.series.series.pa_arr->pa_arr.cast(pa.dictionary(pa.int64(), pa.large_string())).cast(pa.dictionary(pa.int64(), pa.large_string()))
A:polars.series.series.pd_series->pa_arr.cast(pa.dictionary(pa.int64(), pa.large_string())).cast(pa.dictionary(pa.int64(), pa.large_string())).to_pandas(date_as_object=date_as_object, **kwargs)
A:polars.series.series.date_as_object->kwargs.pop('date_as_object', False)
A:polars.series.series.values->Series(values=values)
A:polars.series.series.dtype_init_repr->dtype_to_init_repr(self.dtype)
A:polars.series.series.indices->Series(values=indices)
A:polars.series.series.pl_return_dtype->parse_into_dtype(return_dtype)
polars.Series(self,name:str|ArrayLike|None=None,values:ArrayLike|None=None,dtype:PolarsDataType|None=None,*,strict:bool=True,nan_to_null:bool=False)
polars.Series.__abs__(self)->Series
polars.Series.__add__(self,other:Any)->Series | DataFrame | Expr
polars.Series.__and__(self,other:Any)->Self
polars.Series.__array__(self,dtype:npt.DTypeLike|None=None,copy:bool|None=None)->np.ndarray[Any, Any]
polars.Series.__array_ufunc__(self,ufunc:np.ufunc,method:str,*inputs:Any,**kwargs:Any)->Series
polars.Series.__arrow_c_stream__(self,requested_schema:object|None=None)->object
polars.Series.__bool__(self)->NoReturn
polars.Series.__contains__(self,item:Any)->bool
polars.Series.__copy__(self)->Self
polars.Series.__deepcopy__(self,memo:None=None)->Self
polars.Series.__eq__(self,other:object)->Series | Expr
polars.Series.__floordiv__(self,other:Any)->Series | Expr
polars.Series.__ge__(self,other:Any)->Series | Expr
polars.Series.__getitem__(self,key:SingleIndexSelector|MultiIndexSelector)->Any | Series
polars.Series.__getstate__(self)->bytes
polars.Series.__gt__(self,other:Any)->Series | Expr
polars.Series.__invert__(self)->Series
polars.Series.__iter__(self)->Generator[Any]
polars.Series.__le__(self,other:Any)->Series | Expr
polars.Series.__len__(self)->int
polars.Series.__lt__(self,other:Any)->Series | Expr
polars.Series.__matmul__(self,other:Any)->float | Series | None
polars.Series.__mod__(self,other:Any)->Series | Expr
polars.Series.__mul__(self,other:Any)->Series | DataFrame | Expr
polars.Series.__ne__(self,other:object)->Series | Expr
polars.Series.__neg__(self)->Series
polars.Series.__or__(self,other:Any)->Self
polars.Series.__pos__(self)->Series
polars.Series.__pow__(self,exponent:int|float|Series)->Series
polars.Series.__radd__(self,other:Any)->Series
polars.Series.__rand__(self,other:Any)->Series
polars.Series.__repr__(self)->str
polars.Series.__rfloordiv__(self,other:Any)->Series
polars.Series.__rmatmul__(self,other:Any)->float | Series | None
polars.Series.__rmod__(self,other:Any)->Series
polars.Series.__rmul__(self,other:Any)->Series
polars.Series.__ror__(self,other:Any)->Series
polars.Series.__rpow__(self,other:Any)->Series
polars.Series.__rsub__(self,other:Any)->Series
polars.Series.__rtruediv__(self,other:Any)->Series
polars.Series.__rxor__(self,other:Any)->Series
polars.Series.__setitem__(self,key:int|Series|np.ndarray[Any,Any]|Sequence[object]|tuple[object],value:Any)->None
polars.Series.__setstate__(self,state:bytes)->None
polars.Series.__str__(self)->str
polars.Series.__sub__(self,other:Any)->Series | Expr
polars.Series.__truediv__(self,other:Any)->Series | Expr
polars.Series.__xor__(self,other:Any)->Self
polars.Series._arithmetic(self,other:Any,op_s:str,op_ffi:str)->Self
polars.Series._comp(self,other:Any,op:ComparisonOperator)->Series
polars.Series._export_arrow_to_c(self,out_ptr:int,out_schema_ptr:int)->None
polars.Series._from_buffer(cls,dtype:PolarsDataType,buffer_info:BufferInfo,owner:Any)->Self
polars.Series._from_buffers(cls,dtype:PolarsDataType,data:Series|Sequence[Series],validity:Series|None=None)->Self
polars.Series._from_pyseries(cls,pyseries:PySeries)->Self
polars.Series._get_buffer_info(self)->BufferInfo
polars.Series._get_buffers(self)->SeriesBuffers
polars.Series._import_arrow_from_c(cls,name:str,pointers:list[tuple[int,int]])->Self
polars.Series._import_from_c(cls,name:str,pointers:list[tuple[int,int]])->Self
polars.Series._newest_compat_level()->int
polars.Series._recursive_cast_to_dtype(self,leaf_dtype:PolarsDataType)->Series
polars.Series._repr_html_(self)->str
polars.Series._row_decode(self,dtypes:Iterable[tuple[str,DataType]],fields:Iterable[tuple[bool,bool,bool]])->DataFrame
polars.Series.abs(self)->Series
polars.Series.alias(self,name:str)->Series
polars.Series.all(self,*,ignore_nulls:bool=True)->bool | None
polars.Series.any(self,*,ignore_nulls:bool=True)->bool | None
polars.Series.append(self,other:Series)->Self
polars.Series.approx_n_unique(self)->PythonLiteral | None
polars.Series.arccos(self)->Series
polars.Series.arccosh(self)->Series
polars.Series.arcsin(self)->Series
polars.Series.arcsinh(self)->Series
polars.Series.arctan(self)->Series
polars.Series.arctanh(self)->Series
polars.Series.arg_max(self)->int | None
polars.Series.arg_min(self)->int | None
polars.Series.arg_sort(self,*,descending:bool=False,nulls_last:bool=False)->Series
polars.Series.arg_true(self)->Series
polars.Series.arg_unique(self)->Series
polars.Series.arr(self)->ArrayNameSpace
polars.Series.bin(self)->BinaryNameSpace
polars.Series.bitwise_and(self)->PythonLiteral | None
polars.Series.bitwise_count_ones(self)->Self
polars.Series.bitwise_count_zeros(self)->Self
polars.Series.bitwise_leading_ones(self)->Self
polars.Series.bitwise_leading_zeros(self)->Self
polars.Series.bitwise_or(self)->PythonLiteral | None
polars.Series.bitwise_trailing_ones(self)->Self
polars.Series.bitwise_trailing_zeros(self)->Self
polars.Series.bitwise_xor(self)->PythonLiteral | None
polars.Series.bottom_k(self,k:int=5)->Series
polars.Series.cast(self,dtype:type[int|float|str|bool]|PolarsDataType,*,strict:bool=True,wrap_numerical:bool=False)->Self
polars.Series.cat(self)->CatNameSpace
polars.Series.cbrt(self)->Series
polars.Series.ceil(self)->Series
polars.Series.chunk_lengths(self)->list[int]
polars.Series.clear(self,n:int=0)->Series
polars.Series.clip(self,lower_bound:NumericLiteral|TemporalLiteral|IntoExprColumn|None=None,upper_bound:NumericLiteral|TemporalLiteral|IntoExprColumn|None=None)->Series
polars.Series.clone(self)->Self
polars.Series.cos(self)->Series
polars.Series.cosh(self)->Series
polars.Series.cot(self)->Series
polars.Series.count(self)->int
polars.Series.cum_count(self,*,reverse:bool=False)->Self
polars.Series.cum_max(self,*,reverse:bool=False)->Series
polars.Series.cum_min(self,*,reverse:bool=False)->Series
polars.Series.cum_prod(self,*,reverse:bool=False)->Series
polars.Series.cum_sum(self,*,reverse:bool=False)->Series
polars.Series.cumulative_eval(self,expr:Expr,*,min_samples:int=1,parallel:bool=False)->Series
polars.Series.cut(self,breaks:Sequence[float],*,labels:Sequence[str]|None=None,left_closed:bool=False,include_breaks:bool=False)->Series
polars.Series.describe(self,percentiles:Sequence[float]|float|None=(0.25,0.5,0.75),interpolation:RollingInterpolationMethod='nearest')->DataFrame
polars.Series.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->Series
polars.Series.dot(self,other:Series|ArrayLike)->int | float | None
polars.Series.drop_nans(self)->Series
polars.Series.drop_nulls(self)->Series
polars.Series.dt(self)->DateTimeNameSpace
polars.Series.dtype(self)->DataType
polars.Series.entropy(self,base:float=math.e,*,normalize:bool=True)->float | None
polars.Series.eq(self,other:Any)->Series | Expr
polars.Series.eq_missing(self,other:Any)->Series | Expr
polars.Series.equals(self,other:Series,*,check_dtypes:bool=False,check_names:bool=False,null_equal:bool=True)->bool
polars.Series.estimated_size(self,unit:SizeUnit='b')->int | float
polars.Series.ewm_mean(self,*,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_samples:int=1,ignore_nulls:bool=False)->Series
polars.Series.ewm_mean_by(self,by:IntoExpr,*,half_life:str|timedelta)->Series
polars.Series.ewm_std(self,*,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,bias:bool=False,min_samples:int=1,ignore_nulls:bool=False)->Series
polars.Series.ewm_var(self,*,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,bias:bool=False,min_samples:int=1,ignore_nulls:bool=False)->Series
polars.Series.exp(self)->Series
polars.Series.explode(self)->Series
polars.Series.extend(self,other:Series)->Self
polars.Series.extend_constant(self,value:IntoExpr,n:int|IntoExprColumn)->Series
polars.Series.fill_nan(self,value:int|float|Expr|None)->Series
polars.Series.fill_null(self,value:Any|Expr|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->Series
polars.Series.filter(self,predicate:Series|Iterable[bool])->Self
polars.Series.first(self)->PythonLiteral | None
polars.Series.flags(self)->dict[str, bool]
polars.Series.floor(self)->Series
polars.Series.gather(self,indices:int|list[int]|Expr|Series|np.ndarray[Any,Any])->Series
polars.Series.gather_every(self,n:int,offset:int=0)->Series
polars.Series.ge(self,other:Any)->Series | Expr
polars.Series.get_chunks(self)->list[Series]
polars.Series.gt(self,other:Any)->Series | Expr
polars.Series.has_nulls(self)->bool
polars.Series.has_validity(self)->bool
polars.Series.hash(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->Series
polars.Series.head(self,n:int=10)->Series
polars.Series.hist(self,bins:list[float]|None=None,*,bin_count:int|None=None,include_category:bool=True,include_breakpoint:bool=True)->DataFrame
polars.Series.implode(self)->Self
polars.Series.index_of(self,element:IntoExpr)->int | None
polars.Series.interpolate(self,method:InterpolationMethod='linear')->Series
polars.Series.interpolate_by(self,by:IntoExpr)->Series
polars.Series.is_between(self,lower_bound:IntoExpr,upper_bound:IntoExpr,closed:ClosedInterval='both')->Series
polars.Series.is_duplicated(self)->Series
polars.Series.is_empty(self)->bool
polars.Series.is_finite(self)->Series
polars.Series.is_first_distinct(self)->Series
polars.Series.is_in(self,other:Series|Collection[Any],*,nulls_equal:bool=False)->Series
polars.Series.is_infinite(self)->Series
polars.Series.is_last_distinct(self)->Series
polars.Series.is_nan(self)->Series
polars.Series.is_not_nan(self)->Series
polars.Series.is_not_null(self)->Series
polars.Series.is_null(self)->Series
polars.Series.is_sorted(self,*,descending:bool=False,nulls_last:bool=False)->bool
polars.Series.is_unique(self)->Series
polars.Series.item(self,index:int|None=None)->Any
polars.Series.kurtosis(self,*,fisher:bool=True,bias:bool=True)->float | None
polars.Series.last(self)->PythonLiteral | None
polars.Series.le(self,other:Any)->Series | Expr
polars.Series.len(self)->int
polars.Series.limit(self,n:int=10)->Series
polars.Series.list(self)->ListNameSpace
polars.Series.log(self,base:float=math.e)->Series
polars.Series.log10(self)->Series
polars.Series.log1p(self)->Series
polars.Series.lower_bound(self)->Self
polars.Series.lt(self,other:Any)->Series | Expr
polars.Series.map_elements(self,function:Callable[[Any],Any],return_dtype:PolarsDataType|None=None,*,skip_nulls:bool=True)->Self
polars.Series.max(self)->PythonLiteral | None
polars.Series.mean(self)->PythonLiteral | None
polars.Series.median(self)->PythonLiteral | None
polars.Series.min(self)->PythonLiteral | None
polars.Series.mode(self)->Series
polars.Series.n_chunks(self)->int
polars.Series.n_unique(self)->int
polars.Series.name(self)->str
polars.Series.nan_max(self)->int | float | date | datetime | timedelta | str
polars.Series.nan_min(self)->int | float | date | datetime | timedelta | str
polars.Series.ne(self,other:Any)->Series | Expr
polars.Series.ne_missing(self,other:Any)->Series | Expr
polars.Series.new_from_index(self,index:int,length:int)->Self
polars.Series.not_(self)->Series
polars.Series.null_count(self)->int
polars.Series.pct_change(self,n:int|IntoExprColumn=1)->Series
polars.Series.peak_max(self)->Self
polars.Series.peak_min(self)->Self
polars.Series.plot(self)->SeriesPlot
polars.Series.pow(self,exponent:int|float|Series)->Series
polars.Series.product(self)->int | float
polars.Series.qcut(self,quantiles:Sequence[float]|int,*,labels:Sequence[str]|None=None,left_closed:bool=False,allow_duplicates:bool=False,include_breaks:bool=False)->Series
polars.Series.quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest')->float | None
polars.Series.rank(self,method:RankMethod='average',*,descending:bool=False,seed:int|None=None)->Series
polars.Series.rechunk(self,*,in_place:bool=False)->Self
polars.Series.reinterpret(self,*,signed:bool=True)->Series
polars.Series.rename(self,name:str)->Series
polars.Series.repeat_by(self,by:int|IntoExprColumn)->Self
polars.Series.replace(self,old:IntoExpr|Sequence[Any]|Mapping[Any,Any],new:IntoExpr|Sequence[Any]|NoDefault=no_default,*,default:IntoExpr|NoDefault=no_default,return_dtype:PolarsDataType|None=None)->Self
polars.Series.replace_strict(self,old:IntoExpr|Sequence[Any]|Mapping[Any,Any],new:IntoExpr|Sequence[Any]|NoDefault=no_default,*,default:IntoExpr|NoDefault=no_default,return_dtype:PolarsDataType|None=None)->Self
polars.Series.reshape(self,dimensions:tuple[int,...])->Series
polars.Series.reverse(self)->Series
polars.Series.rle(self)->Series
polars.Series.rle_id(self)->Series
polars.Series.rolling_map(self,function:Callable[[Series],Any],window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Series
polars.Series.rolling_max(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Series
polars.Series.rolling_mean(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Series
polars.Series.rolling_median(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Series
polars.Series.rolling_min(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Series
polars.Series.rolling_quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest',window_size:int=2,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Series
polars.Series.rolling_skew(self,window_size:int,*,bias:bool=True)->Series
polars.Series.rolling_std(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False,ddof:int=1)->Series
polars.Series.rolling_sum(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Series
polars.Series.rolling_var(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False,ddof:int=1)->Series
polars.Series.round(self,decimals:int=0)->Series
polars.Series.round_sig_figs(self,digits:int)->Series
polars.Series.sample(self,n:int|None=None,*,fraction:float|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->Series
polars.Series.scatter(self,indices:Series|Iterable[int]|int|np.ndarray[Any,Any],values:Series|Iterable[PythonLiteral]|PythonLiteral|None)->Series
polars.Series.search_sorted(self,element:IntoExpr|np.ndarray[Any,Any]|None,side:SearchSortedSide='any')->int | Series
polars.Series.set(self,filter:Series,value:int|float|str|bool|None)->Series
polars.Series.set_sorted(self,*,descending:bool=False)->Self
polars.Series.shape(self)->tuple[int]
polars.Series.shift(self,n:int=1,*,fill_value:IntoExpr|None=None)->Series
polars.Series.shrink_dtype(self)->Series
polars.Series.shrink_to_fit(self,*,in_place:bool=False)->Series
polars.Series.shuffle(self,seed:int|None=None)->Series
polars.Series.sign(self)->Series
polars.Series.sin(self)->Series
polars.Series.sinh(self)->Series
polars.Series.skew(self,*,bias:bool=True)->float | None
polars.Series.slice(self,offset:int,length:int|None=None)->Series
polars.Series.sort(self,*,descending:bool=False,nulls_last:bool=False,multithreaded:bool=True,in_place:bool=False)->Self
polars.Series.sqrt(self)->Series
polars.Series.std(self,ddof:int=1)->float | timedelta | None
polars.Series.str(self)->StringNameSpace
polars.Series.struct(self)->StructNameSpace
polars.Series.sum(self)->int | float
polars.Series.tail(self,n:int=10)->Series
polars.Series.tan(self)->Series
polars.Series.tanh(self)->Series
polars.Series.to_arrow(self,*,compat_level:CompatLevel|None=None)->pa.Array
polars.Series.to_dummies(self,*,separator:str='_',drop_first:bool=False)->DataFrame
polars.Series.to_frame(self,name:str|None=None)->DataFrame
polars.Series.to_init_repr(self,n:int=1000)->str
polars.Series.to_jax(self,device:jax.Device|str|None=None)->jax.Array
polars.Series.to_list(self)->list[Any]
polars.Series.to_numpy(self,*,writable:bool=False,allow_copy:bool=True,use_pyarrow:bool|None=None,zero_copy_only:bool|None=None)->np.ndarray[Any, Any]
polars.Series.to_pandas(self,*,use_pyarrow_extension_array:bool=False,**kwargs:Any)->pd.Series[Any]
polars.Series.to_physical(self)->Series
polars.Series.to_torch(self)->torch.Tensor
polars.Series.top_k(self,k:int=5)->Series
polars.Series.unique(self,*,maintain_order:bool=False)->Series
polars.Series.unique_counts(self)->Series
polars.Series.upper_bound(self)->Self
polars.Series.value_counts(self,*,sort:bool=False,parallel:bool=False,name:str|None=None,normalize:bool=False)->DataFrame
polars.Series.var(self,ddof:int=1)->float | timedelta | None
polars.Series.zip_with(self,mask:Series,other:Series)->Self
polars.series.series.Series(self,name:str|ArrayLike|None=None,values:ArrayLike|None=None,dtype:PolarsDataType|None=None,*,strict:bool=True,nan_to_null:bool=False)
polars.series.series.Series.__abs__(self)->Series
polars.series.series.Series.__add__(self,other:Any)->Series | DataFrame | Expr
polars.series.series.Series.__and__(self,other:Any)->Self
polars.series.series.Series.__array__(self,dtype:npt.DTypeLike|None=None,copy:bool|None=None)->np.ndarray[Any, Any]
polars.series.series.Series.__array_ufunc__(self,ufunc:np.ufunc,method:str,*inputs:Any,**kwargs:Any)->Series
polars.series.series.Series.__arrow_c_stream__(self,requested_schema:object|None=None)->object
polars.series.series.Series.__bool__(self)->NoReturn
polars.series.series.Series.__contains__(self,item:Any)->bool
polars.series.series.Series.__copy__(self)->Self
polars.series.series.Series.__deepcopy__(self,memo:None=None)->Self
polars.series.series.Series.__eq__(self,other:object)->Series | Expr
polars.series.series.Series.__floordiv__(self,other:Any)->Series | Expr
polars.series.series.Series.__ge__(self,other:Any)->Series | Expr
polars.series.series.Series.__getitem__(self,key:SingleIndexSelector|MultiIndexSelector)->Any | Series
polars.series.series.Series.__getstate__(self)->bytes
polars.series.series.Series.__gt__(self,other:Any)->Series | Expr
polars.series.series.Series.__init__(self,name:str|ArrayLike|None=None,values:ArrayLike|None=None,dtype:PolarsDataType|None=None,*,strict:bool=True,nan_to_null:bool=False)
polars.series.series.Series.__invert__(self)->Series
polars.series.series.Series.__iter__(self)->Generator[Any]
polars.series.series.Series.__le__(self,other:Any)->Series | Expr
polars.series.series.Series.__len__(self)->int
polars.series.series.Series.__lt__(self,other:Any)->Series | Expr
polars.series.series.Series.__matmul__(self,other:Any)->float | Series | None
polars.series.series.Series.__mod__(self,other:Any)->Series | Expr
polars.series.series.Series.__mul__(self,other:Any)->Series | DataFrame | Expr
polars.series.series.Series.__ne__(self,other:object)->Series | Expr
polars.series.series.Series.__neg__(self)->Series
polars.series.series.Series.__or__(self,other:Any)->Self
polars.series.series.Series.__pos__(self)->Series
polars.series.series.Series.__pow__(self,exponent:int|float|Series)->Series
polars.series.series.Series.__radd__(self,other:Any)->Series
polars.series.series.Series.__rand__(self,other:Any)->Series
polars.series.series.Series.__repr__(self)->str
polars.series.series.Series.__rfloordiv__(self,other:Any)->Series
polars.series.series.Series.__rmatmul__(self,other:Any)->float | Series | None
polars.series.series.Series.__rmod__(self,other:Any)->Series
polars.series.series.Series.__rmul__(self,other:Any)->Series
polars.series.series.Series.__ror__(self,other:Any)->Series
polars.series.series.Series.__rpow__(self,other:Any)->Series
polars.series.series.Series.__rsub__(self,other:Any)->Series
polars.series.series.Series.__rtruediv__(self,other:Any)->Series
polars.series.series.Series.__rxor__(self,other:Any)->Series
polars.series.series.Series.__setitem__(self,key:int|Series|np.ndarray[Any,Any]|Sequence[object]|tuple[object],value:Any)->None
polars.series.series.Series.__setstate__(self,state:bytes)->None
polars.series.series.Series.__str__(self)->str
polars.series.series.Series.__sub__(self,other:Any)->Series | Expr
polars.series.series.Series.__truediv__(self,other:Any)->Series | Expr
polars.series.series.Series.__xor__(self,other:Any)->Self
polars.series.series.Series._arithmetic(self,other:Any,op_s:str,op_ffi:str)->Self
polars.series.series.Series._comp(self,other:Any,op:ComparisonOperator)->Series
polars.series.series.Series._export_arrow_to_c(self,out_ptr:int,out_schema_ptr:int)->None
polars.series.series.Series._from_buffer(cls,dtype:PolarsDataType,buffer_info:BufferInfo,owner:Any)->Self
polars.series.series.Series._from_buffers(cls,dtype:PolarsDataType,data:Series|Sequence[Series],validity:Series|None=None)->Self
polars.series.series.Series._from_pyseries(cls,pyseries:PySeries)->Self
polars.series.series.Series._get_buffer_info(self)->BufferInfo
polars.series.series.Series._get_buffers(self)->SeriesBuffers
polars.series.series.Series._import_arrow_from_c(cls,name:str,pointers:list[tuple[int,int]])->Self
polars.series.series.Series._import_from_c(cls,name:str,pointers:list[tuple[int,int]])->Self
polars.series.series.Series._newest_compat_level()->int
polars.series.series.Series._recursive_cast_to_dtype(self,leaf_dtype:PolarsDataType)->Series
polars.series.series.Series._repr_html_(self)->str
polars.series.series.Series._row_decode(self,dtypes:Iterable[tuple[str,DataType]],fields:Iterable[tuple[bool,bool,bool]])->DataFrame
polars.series.series.Series.abs(self)->Series
polars.series.series.Series.alias(self,name:str)->Series
polars.series.series.Series.all(self,*,ignore_nulls:bool=True)->bool | None
polars.series.series.Series.any(self,*,ignore_nulls:bool=True)->bool | None
polars.series.series.Series.append(self,other:Series)->Self
polars.series.series.Series.approx_n_unique(self)->PythonLiteral | None
polars.series.series.Series.arccos(self)->Series
polars.series.series.Series.arccosh(self)->Series
polars.series.series.Series.arcsin(self)->Series
polars.series.series.Series.arcsinh(self)->Series
polars.series.series.Series.arctan(self)->Series
polars.series.series.Series.arctanh(self)->Series
polars.series.series.Series.arg_max(self)->int | None
polars.series.series.Series.arg_min(self)->int | None
polars.series.series.Series.arg_sort(self,*,descending:bool=False,nulls_last:bool=False)->Series
polars.series.series.Series.arg_true(self)->Series
polars.series.series.Series.arg_unique(self)->Series
polars.series.series.Series.arr(self)->ArrayNameSpace
polars.series.series.Series.bin(self)->BinaryNameSpace
polars.series.series.Series.bitwise_and(self)->PythonLiteral | None
polars.series.series.Series.bitwise_count_ones(self)->Self
polars.series.series.Series.bitwise_count_zeros(self)->Self
polars.series.series.Series.bitwise_leading_ones(self)->Self
polars.series.series.Series.bitwise_leading_zeros(self)->Self
polars.series.series.Series.bitwise_or(self)->PythonLiteral | None
polars.series.series.Series.bitwise_trailing_ones(self)->Self
polars.series.series.Series.bitwise_trailing_zeros(self)->Self
polars.series.series.Series.bitwise_xor(self)->PythonLiteral | None
polars.series.series.Series.bottom_k(self,k:int=5)->Series
polars.series.series.Series.cast(self,dtype:type[int|float|str|bool]|PolarsDataType,*,strict:bool=True,wrap_numerical:bool=False)->Self
polars.series.series.Series.cat(self)->CatNameSpace
polars.series.series.Series.cbrt(self)->Series
polars.series.series.Series.ceil(self)->Series
polars.series.series.Series.chunk_lengths(self)->list[int]
polars.series.series.Series.clear(self,n:int=0)->Series
polars.series.series.Series.clip(self,lower_bound:NumericLiteral|TemporalLiteral|IntoExprColumn|None=None,upper_bound:NumericLiteral|TemporalLiteral|IntoExprColumn|None=None)->Series
polars.series.series.Series.clone(self)->Self
polars.series.series.Series.cos(self)->Series
polars.series.series.Series.cosh(self)->Series
polars.series.series.Series.cot(self)->Series
polars.series.series.Series.count(self)->int
polars.series.series.Series.cum_count(self,*,reverse:bool=False)->Self
polars.series.series.Series.cum_max(self,*,reverse:bool=False)->Series
polars.series.series.Series.cum_min(self,*,reverse:bool=False)->Series
polars.series.series.Series.cum_prod(self,*,reverse:bool=False)->Series
polars.series.series.Series.cum_sum(self,*,reverse:bool=False)->Series
polars.series.series.Series.cumulative_eval(self,expr:Expr,*,min_samples:int=1,parallel:bool=False)->Series
polars.series.series.Series.cut(self,breaks:Sequence[float],*,labels:Sequence[str]|None=None,left_closed:bool=False,include_breaks:bool=False)->Series
polars.series.series.Series.describe(self,percentiles:Sequence[float]|float|None=(0.25,0.5,0.75),interpolation:RollingInterpolationMethod='nearest')->DataFrame
polars.series.series.Series.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->Series
polars.series.series.Series.dot(self,other:Series|ArrayLike)->int | float | None
polars.series.series.Series.drop_nans(self)->Series
polars.series.series.Series.drop_nulls(self)->Series
polars.series.series.Series.dt(self)->DateTimeNameSpace
polars.series.series.Series.dtype(self)->DataType
polars.series.series.Series.entropy(self,base:float=math.e,*,normalize:bool=True)->float | None
polars.series.series.Series.eq(self,other:Any)->Series | Expr
polars.series.series.Series.eq_missing(self,other:Any)->Series | Expr
polars.series.series.Series.equals(self,other:Series,*,check_dtypes:bool=False,check_names:bool=False,null_equal:bool=True)->bool
polars.series.series.Series.estimated_size(self,unit:SizeUnit='b')->int | float
polars.series.series.Series.ewm_mean(self,*,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_samples:int=1,ignore_nulls:bool=False)->Series
polars.series.series.Series.ewm_mean_by(self,by:IntoExpr,*,half_life:str|timedelta)->Series
polars.series.series.Series.ewm_std(self,*,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,bias:bool=False,min_samples:int=1,ignore_nulls:bool=False)->Series
polars.series.series.Series.ewm_var(self,*,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,bias:bool=False,min_samples:int=1,ignore_nulls:bool=False)->Series
polars.series.series.Series.exp(self)->Series
polars.series.series.Series.explode(self)->Series
polars.series.series.Series.extend(self,other:Series)->Self
polars.series.series.Series.extend_constant(self,value:IntoExpr,n:int|IntoExprColumn)->Series
polars.series.series.Series.fill_nan(self,value:int|float|Expr|None)->Series
polars.series.series.Series.fill_null(self,value:Any|Expr|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->Series
polars.series.series.Series.filter(self,predicate:Series|Iterable[bool])->Self
polars.series.series.Series.first(self)->PythonLiteral | None
polars.series.series.Series.flags(self)->dict[str, bool]
polars.series.series.Series.floor(self)->Series
polars.series.series.Series.gather(self,indices:int|list[int]|Expr|Series|np.ndarray[Any,Any])->Series
polars.series.series.Series.gather_every(self,n:int,offset:int=0)->Series
polars.series.series.Series.ge(self,other:Any)->Series | Expr
polars.series.series.Series.get_chunks(self)->list[Series]
polars.series.series.Series.gt(self,other:Any)->Series | Expr
polars.series.series.Series.has_nulls(self)->bool
polars.series.series.Series.has_validity(self)->bool
polars.series.series.Series.hash(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->Series
polars.series.series.Series.head(self,n:int=10)->Series
polars.series.series.Series.hist(self,bins:list[float]|None=None,*,bin_count:int|None=None,include_category:bool=True,include_breakpoint:bool=True)->DataFrame
polars.series.series.Series.implode(self)->Self
polars.series.series.Series.index_of(self,element:IntoExpr)->int | None
polars.series.series.Series.interpolate(self,method:InterpolationMethod='linear')->Series
polars.series.series.Series.interpolate_by(self,by:IntoExpr)->Series
polars.series.series.Series.is_between(self,lower_bound:IntoExpr,upper_bound:IntoExpr,closed:ClosedInterval='both')->Series
polars.series.series.Series.is_duplicated(self)->Series
polars.series.series.Series.is_empty(self)->bool
polars.series.series.Series.is_finite(self)->Series
polars.series.series.Series.is_first_distinct(self)->Series
polars.series.series.Series.is_in(self,other:Series|Collection[Any],*,nulls_equal:bool=False)->Series
polars.series.series.Series.is_infinite(self)->Series
polars.series.series.Series.is_last_distinct(self)->Series
polars.series.series.Series.is_nan(self)->Series
polars.series.series.Series.is_not_nan(self)->Series
polars.series.series.Series.is_not_null(self)->Series
polars.series.series.Series.is_null(self)->Series
polars.series.series.Series.is_sorted(self,*,descending:bool=False,nulls_last:bool=False)->bool
polars.series.series.Series.is_unique(self)->Series
polars.series.series.Series.item(self,index:int|None=None)->Any
polars.series.series.Series.kurtosis(self,*,fisher:bool=True,bias:bool=True)->float | None
polars.series.series.Series.last(self)->PythonLiteral | None
polars.series.series.Series.le(self,other:Any)->Series | Expr
polars.series.series.Series.len(self)->int
polars.series.series.Series.limit(self,n:int=10)->Series
polars.series.series.Series.list(self)->ListNameSpace
polars.series.series.Series.log(self,base:float=math.e)->Series
polars.series.series.Series.log10(self)->Series
polars.series.series.Series.log1p(self)->Series
polars.series.series.Series.lower_bound(self)->Self
polars.series.series.Series.lt(self,other:Any)->Series | Expr
polars.series.series.Series.map_elements(self,function:Callable[[Any],Any],return_dtype:PolarsDataType|None=None,*,skip_nulls:bool=True)->Self
polars.series.series.Series.max(self)->PythonLiteral | None
polars.series.series.Series.mean(self)->PythonLiteral | None
polars.series.series.Series.median(self)->PythonLiteral | None
polars.series.series.Series.min(self)->PythonLiteral | None
polars.series.series.Series.mode(self)->Series
polars.series.series.Series.n_chunks(self)->int
polars.series.series.Series.n_unique(self)->int
polars.series.series.Series.name(self)->str
polars.series.series.Series.nan_max(self)->int | float | date | datetime | timedelta | str
polars.series.series.Series.nan_min(self)->int | float | date | datetime | timedelta | str
polars.series.series.Series.ne(self,other:Any)->Series | Expr
polars.series.series.Series.ne_missing(self,other:Any)->Series | Expr
polars.series.series.Series.new_from_index(self,index:int,length:int)->Self
polars.series.series.Series.not_(self)->Series
polars.series.series.Series.null_count(self)->int
polars.series.series.Series.pct_change(self,n:int|IntoExprColumn=1)->Series
polars.series.series.Series.peak_max(self)->Self
polars.series.series.Series.peak_min(self)->Self
polars.series.series.Series.plot(self)->SeriesPlot
polars.series.series.Series.pow(self,exponent:int|float|Series)->Series
polars.series.series.Series.product(self)->int | float
polars.series.series.Series.qcut(self,quantiles:Sequence[float]|int,*,labels:Sequence[str]|None=None,left_closed:bool=False,allow_duplicates:bool=False,include_breaks:bool=False)->Series
polars.series.series.Series.quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest')->float | None
polars.series.series.Series.rank(self,method:RankMethod='average',*,descending:bool=False,seed:int|None=None)->Series
polars.series.series.Series.rechunk(self,*,in_place:bool=False)->Self
polars.series.series.Series.reinterpret(self,*,signed:bool=True)->Series
polars.series.series.Series.rename(self,name:str)->Series
polars.series.series.Series.repeat_by(self,by:int|IntoExprColumn)->Self
polars.series.series.Series.replace(self,old:IntoExpr|Sequence[Any]|Mapping[Any,Any],new:IntoExpr|Sequence[Any]|NoDefault=no_default,*,default:IntoExpr|NoDefault=no_default,return_dtype:PolarsDataType|None=None)->Self
polars.series.series.Series.replace_strict(self,old:IntoExpr|Sequence[Any]|Mapping[Any,Any],new:IntoExpr|Sequence[Any]|NoDefault=no_default,*,default:IntoExpr|NoDefault=no_default,return_dtype:PolarsDataType|None=None)->Self
polars.series.series.Series.reshape(self,dimensions:tuple[int,...])->Series
polars.series.series.Series.reverse(self)->Series
polars.series.series.Series.rle(self)->Series
polars.series.series.Series.rle_id(self)->Series
polars.series.series.Series.rolling_map(self,function:Callable[[Series],Any],window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Series
polars.series.series.Series.rolling_max(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Series
polars.series.series.Series.rolling_mean(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Series
polars.series.series.Series.rolling_median(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Series
polars.series.series.Series.rolling_min(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Series
polars.series.series.Series.rolling_quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest',window_size:int=2,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Series
polars.series.series.Series.rolling_skew(self,window_size:int,*,bias:bool=True)->Series
polars.series.series.Series.rolling_std(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False,ddof:int=1)->Series
polars.series.series.Series.rolling_sum(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Series
polars.series.series.Series.rolling_var(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False,ddof:int=1)->Series
polars.series.series.Series.round(self,decimals:int=0)->Series
polars.series.series.Series.round_sig_figs(self,digits:int)->Series
polars.series.series.Series.sample(self,n:int|None=None,*,fraction:float|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->Series
polars.series.series.Series.scatter(self,indices:Series|Iterable[int]|int|np.ndarray[Any,Any],values:Series|Iterable[PythonLiteral]|PythonLiteral|None)->Series
polars.series.series.Series.search_sorted(self,element:IntoExpr|np.ndarray[Any,Any]|None,side:SearchSortedSide='any')->int | Series
polars.series.series.Series.set(self,filter:Series,value:int|float|str|bool|None)->Series
polars.series.series.Series.set_sorted(self,*,descending:bool=False)->Self
polars.series.series.Series.shape(self)->tuple[int]
polars.series.series.Series.shift(self,n:int=1,*,fill_value:IntoExpr|None=None)->Series
polars.series.series.Series.shrink_dtype(self)->Series
polars.series.series.Series.shrink_to_fit(self,*,in_place:bool=False)->Series
polars.series.series.Series.shuffle(self,seed:int|None=None)->Series
polars.series.series.Series.sign(self)->Series
polars.series.series.Series.sin(self)->Series
polars.series.series.Series.sinh(self)->Series
polars.series.series.Series.skew(self,*,bias:bool=True)->float | None
polars.series.series.Series.slice(self,offset:int,length:int|None=None)->Series
polars.series.series.Series.sort(self,*,descending:bool=False,nulls_last:bool=False,multithreaded:bool=True,in_place:bool=False)->Self
polars.series.series.Series.sqrt(self)->Series
polars.series.series.Series.std(self,ddof:int=1)->float | timedelta | None
polars.series.series.Series.str(self)->StringNameSpace
polars.series.series.Series.struct(self)->StructNameSpace
polars.series.series.Series.sum(self)->int | float
polars.series.series.Series.tail(self,n:int=10)->Series
polars.series.series.Series.tan(self)->Series
polars.series.series.Series.tanh(self)->Series
polars.series.series.Series.to_arrow(self,*,compat_level:CompatLevel|None=None)->pa.Array
polars.series.series.Series.to_dummies(self,*,separator:str='_',drop_first:bool=False)->DataFrame
polars.series.series.Series.to_frame(self,name:str|None=None)->DataFrame
polars.series.series.Series.to_init_repr(self,n:int=1000)->str
polars.series.series.Series.to_jax(self,device:jax.Device|str|None=None)->jax.Array
polars.series.series.Series.to_list(self)->list[Any]
polars.series.series.Series.to_numpy(self,*,writable:bool=False,allow_copy:bool=True,use_pyarrow:bool|None=None,zero_copy_only:bool|None=None)->np.ndarray[Any, Any]
polars.series.series.Series.to_pandas(self,*,use_pyarrow_extension_array:bool=False,**kwargs:Any)->pd.Series[Any]
polars.series.series.Series.to_physical(self)->Series
polars.series.series.Series.to_torch(self)->torch.Tensor
polars.series.series.Series.top_k(self,k:int=5)->Series
polars.series.series.Series.unique(self,*,maintain_order:bool=False)->Series
polars.series.series.Series.unique_counts(self)->Series
polars.series.series.Series.upper_bound(self)->Self
polars.series.series.Series.value_counts(self,*,sort:bool=False,parallel:bool=False,name:str|None=None,normalize:bool=False)->DataFrame
polars.series.series.Series.var(self,ddof:int=1)->float | timedelta | None
polars.series.series.Series.zip_with(self,mask:Series,other:Series)->Self
polars.series.series._resolve_temporal_dtype(dtype:PolarsDataType|None,ndtype:np.dtype[np.datetime64]|np.dtype[np.timedelta64])->PolarsDataType | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/series/utils.py----------------------------------------
A:polars.series.utils.T->TypeVar('T')
A:polars.series.utils.P->ParamSpec('P')
A:polars.series.utils.namespace->getattr(cls, '_accessor', None)
A:polars.series.utils.expr_lookup->_expr_lookup(namespace)
A:polars.series.utils.attr->_undecorated(attr)
A:polars.series.utils.expr->getattr(expr, namespace)
A:polars.series.utils.lookup->set()
A:polars.series.utils.m->_undecorated(m)
A:polars.series.utils.s->wrap_s(self._s)
A:polars.series.utils.f->getattr(expr, func.__name__)
A:polars.series.utils._EMPTY_BYTECODE->_EmptyBytecodeHelper()
A:polars.series.utils.ffi_name->dtype_to_ffiname(dtype)
A:polars.series.utils.fname->name.replace('<>', ffi_name)
A:polars.series.utils.result->func()
polars.series.utils._EmptyBytecodeHelper(self)
polars.series.utils._EmptyBytecodeHelper.__contains__(self,item:bytes)->bool
polars.series.utils._EmptyBytecodeHelper.__init__(self)
polars.series.utils._expr_lookup(namespace:str|None)->set[tuple[str | None, str, tuple[str, ...]]]
polars.series.utils._is_empty_method(func:SeriesMethod)->bool
polars.series.utils._undecorated(function:Callable[P,T])->Callable[P, T]
polars.series.utils._with_no_check_length(func:Callable[...,Any])->Any
polars.series.utils.call_expr(func:SeriesMethod)->SeriesMethod
polars.series.utils.expr_dispatch(cls:type[T])->type[T]
polars.series.utils.get_ffi_func(name:str,dtype:PolarsDataType,obj:PySeries)->Callable[..., Any] | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/series/list.py----------------------------------------
A:polars.series.list.s->wrap_s(self._s)
polars.series.list.ListNameSpace(self,series:Series)
polars.series.list.ListNameSpace.__getitem__(self,item:int)->Series
polars.series.list.ListNameSpace.__init__(self,series:Series)
polars.series.list.ListNameSpace.all(self)->Series
polars.series.list.ListNameSpace.any(self)->Series
polars.series.list.ListNameSpace.arg_max(self)->Series
polars.series.list.ListNameSpace.arg_min(self)->Series
polars.series.list.ListNameSpace.concat(self,other:list[Series]|Series|list[Any])->Series
polars.series.list.ListNameSpace.contains(self,item:float|str|bool|int|date|datetime|time|IntoExprColumn)->Series
polars.series.list.ListNameSpace.count_matches(self,element:IntoExpr)->Series
polars.series.list.ListNameSpace.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->Series
polars.series.list.ListNameSpace.drop_nulls(self)->Series
polars.series.list.ListNameSpace.eval(self,expr:Expr,*,parallel:bool=False)->Series
polars.series.list.ListNameSpace.explode(self)->Series
polars.series.list.ListNameSpace.first(self)->Series
polars.series.list.ListNameSpace.gather(self,indices:Series|list[int]|list[list[int]],*,null_on_oob:bool=False)->Series
polars.series.list.ListNameSpace.gather_every(self,n:int|IntoExprColumn,offset:int|IntoExprColumn=0)->Series
polars.series.list.ListNameSpace.get(self,index:int|Series|list[int],*,null_on_oob:bool=False)->Series
polars.series.list.ListNameSpace.head(self,n:int|Expr=5)->Series
polars.series.list.ListNameSpace.join(self,separator:IntoExprColumn,*,ignore_nulls:bool=True)->Series
polars.series.list.ListNameSpace.last(self)->Series
polars.series.list.ListNameSpace.len(self)->Series
polars.series.list.ListNameSpace.max(self)->Series
polars.series.list.ListNameSpace.mean(self)->Series
polars.series.list.ListNameSpace.median(self)->Series
polars.series.list.ListNameSpace.min(self)->Series
polars.series.list.ListNameSpace.n_unique(self)->Series
polars.series.list.ListNameSpace.reverse(self)->Series
polars.series.list.ListNameSpace.sample(self,n:int|IntoExprColumn|None=None,*,fraction:float|IntoExprColumn|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->Series
polars.series.list.ListNameSpace.set_difference(self,other:Series|Collection[Any])->Series
polars.series.list.ListNameSpace.set_intersection(self,other:Series|Collection[Any])->Series
polars.series.list.ListNameSpace.set_symmetric_difference(self,other:Series|Collection[Any])->Series
polars.series.list.ListNameSpace.set_union(self,other:Series|Collection[Any])->Series
polars.series.list.ListNameSpace.shift(self,n:int|IntoExprColumn=1)->Series
polars.series.list.ListNameSpace.slice(self,offset:int|Expr,length:int|Expr|None=None)->Series
polars.series.list.ListNameSpace.sort(self,*,descending:bool=False,nulls_last:bool=False,multithreaded:bool=True)->Series
polars.series.list.ListNameSpace.std(self,ddof:int=1)->Series
polars.series.list.ListNameSpace.sum(self)->Series
polars.series.list.ListNameSpace.tail(self,n:int|Expr=5)->Series
polars.series.list.ListNameSpace.to_array(self,width:int)->Series
polars.series.list.ListNameSpace.to_struct(self,n_field_strategy:ListToStructWidthStrategy='first_non_null',fields:Callable[[int],str]|Sequence[str]|None=None)->Series
polars.series.list.ListNameSpace.unique(self,*,maintain_order:bool=False)->Series
polars.series.list.ListNameSpace.var(self,ddof:int=1)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/series/datetime.py----------------------------------------
A:polars.series.datetime.s->wrap_s(self._s)
polars.series.datetime.DateTimeNameSpace(self,series:Series)
polars.series.datetime.DateTimeNameSpace.__getitem__(self,item:int)->dt.date | dt.datetime | dt.timedelta
polars.series.datetime.DateTimeNameSpace.__init__(self,series:Series)
polars.series.datetime.DateTimeNameSpace.add_business_days(self,n:int|IntoExpr,week_mask:Iterable[bool]=(True,True,True,True,True,False,False),holidays:Iterable[dt.date]=(),roll:Roll='raise')->Series
polars.series.datetime.DateTimeNameSpace.base_utc_offset(self)->Series
polars.series.datetime.DateTimeNameSpace.cast_time_unit(self,time_unit:TimeUnit)->Series
polars.series.datetime.DateTimeNameSpace.century(self)->Series
polars.series.datetime.DateTimeNameSpace.combine(self,time:dt.time|Series,time_unit:TimeUnit='us')->Series
polars.series.datetime.DateTimeNameSpace.convert_time_zone(self,time_zone:str)->Series
polars.series.datetime.DateTimeNameSpace.date(self)->Series
polars.series.datetime.DateTimeNameSpace.datetime(self)->Series
polars.series.datetime.DateTimeNameSpace.day(self)->Series
polars.series.datetime.DateTimeNameSpace.dst_offset(self)->Series
polars.series.datetime.DateTimeNameSpace.epoch(self,time_unit:EpochTimeUnit='us')->Series
polars.series.datetime.DateTimeNameSpace.hour(self)->Series
polars.series.datetime.DateTimeNameSpace.is_business_day(self,*,week_mask:Iterable[bool]=(True,True,True,True,True,False,False),holidays:Iterable[dt.date]=())->Series
polars.series.datetime.DateTimeNameSpace.is_leap_year(self)->Series
polars.series.datetime.DateTimeNameSpace.iso_year(self)->Series
polars.series.datetime.DateTimeNameSpace.max(self)->dt.date | dt.datetime | dt.timedelta | None
polars.series.datetime.DateTimeNameSpace.mean(self)->TemporalLiteral | None
polars.series.datetime.DateTimeNameSpace.median(self)->TemporalLiteral | None
polars.series.datetime.DateTimeNameSpace.microsecond(self)->Series
polars.series.datetime.DateTimeNameSpace.millennium(self)->Series
polars.series.datetime.DateTimeNameSpace.millisecond(self)->Series
polars.series.datetime.DateTimeNameSpace.min(self)->dt.date | dt.datetime | dt.timedelta | None
polars.series.datetime.DateTimeNameSpace.minute(self)->Series
polars.series.datetime.DateTimeNameSpace.month(self)->Series
polars.series.datetime.DateTimeNameSpace.month_end(self)->Series
polars.series.datetime.DateTimeNameSpace.month_start(self)->Series
polars.series.datetime.DateTimeNameSpace.nanosecond(self)->Series
polars.series.datetime.DateTimeNameSpace.offset_by(self,by:str|IntoExprColumn)->Series
polars.series.datetime.DateTimeNameSpace.ordinal_day(self)->Series
polars.series.datetime.DateTimeNameSpace.quarter(self)->Series
polars.series.datetime.DateTimeNameSpace.replace(self,*,year:int|Series|None=None,month:int|Series|None=None,day:int|Series|None=None,hour:int|Series|None=None,minute:int|Series|None=None,second:int|Series|None=None,microsecond:int|Series|None=None,ambiguous:Ambiguous|Series='raise')->Series
polars.series.datetime.DateTimeNameSpace.replace_time_zone(self,time_zone:str|None,*,ambiguous:Ambiguous|Series='raise',non_existent:NonExistent='raise')->Series
polars.series.datetime.DateTimeNameSpace.round(self,every:str|dt.timedelta|IntoExprColumn)->Series
polars.series.datetime.DateTimeNameSpace.second(self,*,fractional:bool=False)->Series
polars.series.datetime.DateTimeNameSpace.strftime(self,format:str)->Series
polars.series.datetime.DateTimeNameSpace.time(self)->Series
polars.series.datetime.DateTimeNameSpace.timestamp(self,time_unit:TimeUnit='us')->Series
polars.series.datetime.DateTimeNameSpace.to_string(self,format:str|None=None)->Series
polars.series.datetime.DateTimeNameSpace.total_days(self)->Series
polars.series.datetime.DateTimeNameSpace.total_hours(self)->Series
polars.series.datetime.DateTimeNameSpace.total_microseconds(self)->Series
polars.series.datetime.DateTimeNameSpace.total_milliseconds(self)->Series
polars.series.datetime.DateTimeNameSpace.total_minutes(self)->Series
polars.series.datetime.DateTimeNameSpace.total_nanoseconds(self)->Series
polars.series.datetime.DateTimeNameSpace.total_seconds(self)->Series
polars.series.datetime.DateTimeNameSpace.truncate(self,every:str|dt.timedelta|IntoExprColumn)->Series
polars.series.datetime.DateTimeNameSpace.week(self)->Series
polars.series.datetime.DateTimeNameSpace.weekday(self)->Series
polars.series.datetime.DateTimeNameSpace.with_time_unit(self,time_unit:TimeUnit)->Series
polars.series.datetime.DateTimeNameSpace.year(self)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/series/struct.py----------------------------------------
A:polars.series.struct.schema->self._s.dtype().to_schema()
polars.series.struct.StructNameSpace(self,series:Series)
polars.series.struct.StructNameSpace.__getitem__(self,item:int|str)->Series
polars.series.struct.StructNameSpace.__init__(self,series:Series)
polars.series.struct.StructNameSpace._ipython_key_completions_(self)->list[str]
polars.series.struct.StructNameSpace.field(self,name:str)->Series
polars.series.struct.StructNameSpace.fields(self)->list[str]
polars.series.struct.StructNameSpace.json_encode(self)->Series
polars.series.struct.StructNameSpace.rename_fields(self,names:Sequence[str])->Series
polars.series.struct.StructNameSpace.schema(self)->Schema
polars.series.struct.StructNameSpace.unnest(self)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/series/array.py----------------------------------------
A:polars.series.array.s->wrap_s(self._s)
polars.series.array.ArrayNameSpace(self,series:Series)
polars.series.array.ArrayNameSpace.__init__(self,series:Series)
polars.series.array.ArrayNameSpace.all(self)->Series
polars.series.array.ArrayNameSpace.any(self)->Series
polars.series.array.ArrayNameSpace.arg_max(self)->Series
polars.series.array.ArrayNameSpace.arg_min(self)->Series
polars.series.array.ArrayNameSpace.contains(self,item:float|str|bool|int|date|datetime|time|IntoExprColumn)->Series
polars.series.array.ArrayNameSpace.count_matches(self,element:IntoExpr)->Series
polars.series.array.ArrayNameSpace.explode(self)->Series
polars.series.array.ArrayNameSpace.first(self)->Series
polars.series.array.ArrayNameSpace.get(self,index:int|IntoExprColumn,*,null_on_oob:bool=False)->Series
polars.series.array.ArrayNameSpace.join(self,separator:IntoExprColumn,*,ignore_nulls:bool=True)->Series
polars.series.array.ArrayNameSpace.last(self)->Series
polars.series.array.ArrayNameSpace.len(self)->Series
polars.series.array.ArrayNameSpace.max(self)->Series
polars.series.array.ArrayNameSpace.median(self)->Series
polars.series.array.ArrayNameSpace.min(self)->Series
polars.series.array.ArrayNameSpace.n_unique(self)->Series
polars.series.array.ArrayNameSpace.reverse(self)->Series
polars.series.array.ArrayNameSpace.shift(self,n:int|IntoExprColumn=1)->Series
polars.series.array.ArrayNameSpace.sort(self,*,descending:bool=False,nulls_last:bool=False,multithreaded:bool=True)->Series
polars.series.array.ArrayNameSpace.std(self,ddof:int=1)->Series
polars.series.array.ArrayNameSpace.sum(self)->Series
polars.series.array.ArrayNameSpace.to_list(self)->Series
polars.series.array.ArrayNameSpace.to_struct(self,fields:Callable[[int],str]|Sequence[str]|None=None)->Series
polars.series.array.ArrayNameSpace.unique(self,*,maintain_order:bool=False)->Series
polars.series.array.ArrayNameSpace.var(self,ddof:int=1)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/series/string.py----------------------------------------
polars.series.string.StringNameSpace(self,series:Series)
polars.series.string.StringNameSpace.__init__(self,series:Series)
polars.series.string.StringNameSpace.concat(self,delimiter:str|None=None,*,ignore_nulls:bool=True)->Series
polars.series.string.StringNameSpace.contains(self,pattern:str|Expr,*,literal:bool=False,strict:bool=True)->Series
polars.series.string.StringNameSpace.contains_any(self,patterns:Series|list[str],*,ascii_case_insensitive:bool=False)->Series
polars.series.string.StringNameSpace.count_matches(self,pattern:str|Series,*,literal:bool=False)->Series
polars.series.string.StringNameSpace.decode(self,encoding:TransferEncoding,*,strict:bool=True)->Series
polars.series.string.StringNameSpace.encode(self,encoding:TransferEncoding)->Series
polars.series.string.StringNameSpace.ends_with(self,suffix:str|Expr|None)->Series
polars.series.string.StringNameSpace.escape_regex(self)->Series
polars.series.string.StringNameSpace.explode(self)->Series
polars.series.string.StringNameSpace.extract(self,pattern:IntoExprColumn,group_index:int=1)->Series
polars.series.string.StringNameSpace.extract_all(self,pattern:str|Series)->Series
polars.series.string.StringNameSpace.extract_groups(self,pattern:str)->Series
polars.series.string.StringNameSpace.extract_many(self,patterns:Series|list[str],*,ascii_case_insensitive:bool=False,overlapping:bool=False)->Series
polars.series.string.StringNameSpace.find(self,pattern:str|Expr,*,literal:bool=False,strict:bool=True)->Series
polars.series.string.StringNameSpace.find_many(self,patterns:IntoExpr,*,ascii_case_insensitive:bool=False,overlapping:bool=False)->Series
polars.series.string.StringNameSpace.head(self,n:int|IntoExprColumn)->Series
polars.series.string.StringNameSpace.join(self,delimiter:str='',*,ignore_nulls:bool=True)->Series
polars.series.string.StringNameSpace.json_decode(self,dtype:PolarsDataType|None=None,*,infer_schema_length:int|None=N_INFER_DEFAULT)->Series
polars.series.string.StringNameSpace.json_path_match(self,json_path:IntoExprColumn)->Series
polars.series.string.StringNameSpace.len_bytes(self)->Series
polars.series.string.StringNameSpace.len_chars(self)->Series
polars.series.string.StringNameSpace.normalize(self,form:UnicodeForm='NFC')->Series
polars.series.string.StringNameSpace.pad_end(self,length:int,fill_char:str='')->Series
polars.series.string.StringNameSpace.pad_start(self,length:int,fill_char:str='')->Series
polars.series.string.StringNameSpace.replace(self,pattern:str,value:str,*,literal:bool=False,n:int=1)->Series
polars.series.string.StringNameSpace.replace_all(self,pattern:str,value:str,*,literal:bool=False)->Series
polars.series.string.StringNameSpace.replace_many(self,patterns:Series|list[str]|Mapping[str,str],replace_with:Series|list[str]|str|NoDefault=no_default,*,ascii_case_insensitive:bool=False)->Series
polars.series.string.StringNameSpace.reverse(self)->Series
polars.series.string.StringNameSpace.slice(self,offset:int|IntoExprColumn,length:int|IntoExprColumn|None=None)->Series
polars.series.string.StringNameSpace.split(self,by:IntoExpr,*,inclusive:bool=False)->Series
polars.series.string.StringNameSpace.split_exact(self,by:IntoExpr,n:int,*,inclusive:bool=False)->Series
polars.series.string.StringNameSpace.splitn(self,by:IntoExpr,n:int)->Series
polars.series.string.StringNameSpace.starts_with(self,prefix:str|Expr)->Series
polars.series.string.StringNameSpace.strip_chars(self,characters:IntoExpr=None)->Series
polars.series.string.StringNameSpace.strip_chars_end(self,characters:IntoExpr=None)->Series
polars.series.string.StringNameSpace.strip_chars_start(self,characters:IntoExpr=None)->Series
polars.series.string.StringNameSpace.strip_prefix(self,prefix:IntoExpr)->Series
polars.series.string.StringNameSpace.strip_suffix(self,suffix:IntoExpr)->Series
polars.series.string.StringNameSpace.strptime(self,dtype:PolarsTemporalType,format:str|None=None,*,strict:bool=True,exact:bool=True,cache:bool=True,ambiguous:Ambiguous|Series='raise')->Series
polars.series.string.StringNameSpace.tail(self,n:int|IntoExprColumn)->Series
polars.series.string.StringNameSpace.to_date(self,format:str|None=None,*,strict:bool=True,exact:bool=True,cache:bool=True)->Series
polars.series.string.StringNameSpace.to_datetime(self,format:str|None=None,*,time_unit:TimeUnit|None=None,time_zone:str|None=None,strict:bool=True,exact:bool=True,cache:bool=True,ambiguous:Ambiguous|Series='raise')->Series
polars.series.string.StringNameSpace.to_decimal(self,inference_length:int=100)->Series
polars.series.string.StringNameSpace.to_integer(self,*,base:int|IntoExprColumn=10,strict:bool=True)->Series
polars.series.string.StringNameSpace.to_lowercase(self)->Series
polars.series.string.StringNameSpace.to_time(self,format:str|None=None,*,strict:bool=True,cache:bool=True)->Series
polars.series.string.StringNameSpace.to_titlecase(self)->Series
polars.series.string.StringNameSpace.to_uppercase(self)->Series
polars.series.string.StringNameSpace.zfill(self,length:int|IntoExprColumn)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/series/binary.py----------------------------------------
polars.series.binary.BinaryNameSpace(self,series:Series)
polars.series.binary.BinaryNameSpace.__init__(self,series:Series)
polars.series.binary.BinaryNameSpace.contains(self,literal:IntoExpr)->Series
polars.series.binary.BinaryNameSpace.decode(self,encoding:TransferEncoding,*,strict:bool=True)->Series
polars.series.binary.BinaryNameSpace.encode(self,encoding:TransferEncoding)->Series
polars.series.binary.BinaryNameSpace.ends_with(self,suffix:IntoExpr)->Series
polars.series.binary.BinaryNameSpace.reinterpret(self,*,dtype:PolarsDataType,endianness:Endianness='little')->Series
polars.series.binary.BinaryNameSpace.size(self,unit:SizeUnit='b')->Series
polars.series.binary.BinaryNameSpace.starts_with(self,prefix:IntoExpr)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/series/plotting.py----------------------------------------
A:polars.series.plotting.self._df->s.to_frame(name)
A:polars.series.plotting.method->getattr(alt.Chart(self._df.with_row_index()), f'mark_{attr}', None)
polars.series.plotting.SeriesPlot(self,s:Series)
polars.series.plotting.SeriesPlot.__getattr__(self,attr:str)->Callable[..., alt.Chart]
polars.series.plotting.SeriesPlot.__init__(self,s:Series)
polars.series.plotting.SeriesPlot.hist(self,/,**kwargs:Unpack[EncodeKwds])->alt.Chart
polars.series.plotting.SeriesPlot.kde(self,/,**kwargs:Unpack[EncodeKwds])->alt.Chart
polars.series.plotting.SeriesPlot.line(self,/,**kwargs:Unpack[EncodeKwds])->alt.Chart


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/catalog/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/catalog/unity/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/catalog/unity/client.py----------------------------------------
A:polars.catalog.unity.client.bearer_token->self._get_databricks_token()
A:polars.catalog.unity.client.self._client->polars.polars.PyCatalogClient.new(workspace_url, bearer_token)
A:polars.catalog.unity.client.table_info->self.get_table_info(catalog_name, namespace, table_name)
A:polars.catalog.unity.client.(storage_location, data_source_format)->_extract_location_and_data_format(table_info, 'scan table')
A:polars.catalog.unity.client.(credential_provider, storage_options)->self._init_credentials(credential_provider, storage_options, table_info, write=True, caller_name='Catalog.write_table')
A:polars.catalog.unity.client.storage_options->list(storage_options.items())
A:polars.catalog.unity.client.catalog_credential_provider->CatalogCredentialProvider(self, table_info.table_id, write=write)
A:polars.catalog.unity.client.v->CatalogCredentialProvider(self, table_info.table_id, write=write)._credentials_iter()
A:polars.catalog.unity.client.storage_update_options->next(v)
A:polars.catalog.unity.client.(_, (creds, expiry))->self._credentials_iter()
A:polars.catalog.unity.client.(creds, storage_update_options, expiry)->self.catalog._get_table_credentials(self.table_id, write=self.write)
polars.Catalog(self,workspace_url:str,*,bearer_token:str|None='auto',require_https:bool=True)
polars.Catalog._get_databricks_token(cls)->str
polars.Catalog._get_table_credentials(self,table_id:str,*,write:bool)->tuple[dict[str, str] | None, dict[str, str], int]
polars.Catalog._init_credentials(self,credential_provider:CredentialProviderFunction|Literal['auto']|None,storage_options:dict[str,Any]|None,table_info:TableInfo,*,write:bool,caller_name:str)->tuple[CredentialProviderBuilder | None, dict[str, Any] | None]
polars.Catalog.create_catalog(self,catalog_name:str,*,comment:str|None=None,storage_root:str|None=None)->CatalogInfo
polars.Catalog.create_namespace(self,catalog_name:str,namespace:str,*,comment:str|None=None,storage_root:str|None=None)->NamespaceInfo
polars.Catalog.create_table(self,catalog_name:str,namespace:str,table_name:str,*,schema:SchemaDict|None,table_type:TableType,data_source_format:DataSourceFormat|None=None,comment:str|None=None,storage_root:str|None=None,properties:dict[str,str]|None=None)->TableInfo
polars.Catalog.delete_catalog(self,catalog_name:str,*,force:bool=False)->None
polars.Catalog.delete_namespace(self,catalog_name:str,namespace:str,*,force:bool=False)->None
polars.Catalog.delete_table(self,catalog_name:str,namespace:str,table_name:str)->None
polars.Catalog.get_table_info(self,catalog_name:str,namespace:str,table_name:str)->TableInfo
polars.Catalog.list_catalogs(self)->list[CatalogInfo]
polars.Catalog.list_namespaces(self,catalog_name:str)->list[NamespaceInfo]
polars.Catalog.list_tables(self,catalog_name:str,namespace:str)->list[TableInfo]
polars.Catalog.scan_table(self,catalog_name:str,namespace:str,table_name:str,*,delta_table_version:int|str|datetime|None=None,delta_table_options:dict[str,Any]|None=None,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2)->LazyFrame
polars.Catalog.write_table(self,df:DataFrame,catalog_name:str,namespace:str,table_name:str,*,delta_mode:Literal['error','append','overwrite','ignore','merge']='error',delta_write_options:dict[str,Any]|None=None,delta_merge_options:dict[str,Any]|None=None,storage_options:dict[str,str]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto')->None | deltalake.table.TableMerger
polars.CatalogCredentialProvider(self,catalog:Catalog,table_id:str,*,write:bool)
polars.CatalogCredentialProvider._credentials_iter(self)->Generator[Any]
polars.catalog.unity.client.Catalog(self,workspace_url:str,*,bearer_token:str|None='auto',require_https:bool=True)
polars.catalog.unity.client.Catalog.__init__(self,workspace_url:str,*,bearer_token:str|None='auto',require_https:bool=True)
polars.catalog.unity.client.Catalog._get_databricks_token(cls)->str
polars.catalog.unity.client.Catalog._get_table_credentials(self,table_id:str,*,write:bool)->tuple[dict[str, str] | None, dict[str, str], int]
polars.catalog.unity.client.Catalog._init_credentials(self,credential_provider:CredentialProviderFunction|Literal['auto']|None,storage_options:dict[str,Any]|None,table_info:TableInfo,*,write:bool,caller_name:str)->tuple[CredentialProviderBuilder | None, dict[str, Any] | None]
polars.catalog.unity.client.Catalog.create_catalog(self,catalog_name:str,*,comment:str|None=None,storage_root:str|None=None)->CatalogInfo
polars.catalog.unity.client.Catalog.create_namespace(self,catalog_name:str,namespace:str,*,comment:str|None=None,storage_root:str|None=None)->NamespaceInfo
polars.catalog.unity.client.Catalog.create_table(self,catalog_name:str,namespace:str,table_name:str,*,schema:SchemaDict|None,table_type:TableType,data_source_format:DataSourceFormat|None=None,comment:str|None=None,storage_root:str|None=None,properties:dict[str,str]|None=None)->TableInfo
polars.catalog.unity.client.Catalog.delete_catalog(self,catalog_name:str,*,force:bool=False)->None
polars.catalog.unity.client.Catalog.delete_namespace(self,catalog_name:str,namespace:str,*,force:bool=False)->None
polars.catalog.unity.client.Catalog.delete_table(self,catalog_name:str,namespace:str,table_name:str)->None
polars.catalog.unity.client.Catalog.get_table_info(self,catalog_name:str,namespace:str,table_name:str)->TableInfo
polars.catalog.unity.client.Catalog.list_catalogs(self)->list[CatalogInfo]
polars.catalog.unity.client.Catalog.list_namespaces(self,catalog_name:str)->list[NamespaceInfo]
polars.catalog.unity.client.Catalog.list_tables(self,catalog_name:str,namespace:str)->list[TableInfo]
polars.catalog.unity.client.Catalog.scan_table(self,catalog_name:str,namespace:str,table_name:str,*,delta_table_version:int|str|datetime|None=None,delta_table_options:dict[str,Any]|None=None,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2)->LazyFrame
polars.catalog.unity.client.Catalog.write_table(self,df:DataFrame,catalog_name:str,namespace:str,table_name:str,*,delta_mode:Literal['error','append','overwrite','ignore','merge']='error',delta_write_options:dict[str,Any]|None=None,delta_merge_options:dict[str,Any]|None=None,storage_options:dict[str,str]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto')->None | deltalake.table.TableMerger
polars.catalog.unity.client.CatalogCredentialProvider(self,catalog:Catalog,table_id:str,*,write:bool)
polars.catalog.unity.client.CatalogCredentialProvider.__init__(self,catalog:Catalog,table_id:str,*,write:bool)
polars.catalog.unity.client.CatalogCredentialProvider._credentials_iter(self)->Generator[Any]
polars.catalog.unity.client._extract_location_and_data_format(table_info:TableInfo,operation:str)->tuple[str, DataSourceFormat]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/catalog/unity/models.py----------------------------------------
A:polars.catalog.unity.models.schema->Schema()
A:polars.catalog.unity.models.schema[column_info.name]->column_info.get_polars_dtype()
polars.CatalogInfo
polars.catalog.unity.ColumnInfo
polars.catalog.unity.ColumnInfo.get_polars_dtype(self)->DataType
polars.catalog.unity.NamespaceInfo
polars.catalog.unity.TableInfo
polars.catalog.unity.TableInfo.get_polars_schema(self)->Schema | None
polars.catalog.unity.models.CatalogInfo
polars.catalog.unity.models.ColumnInfo
polars.catalog.unity.models.ColumnInfo.get_polars_dtype(self)->DataType
polars.catalog.unity.models.NamespaceInfo
polars.catalog.unity.models.TableInfo
polars.catalog.unity.models.TableInfo.get_polars_schema(self)->Schema | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/lazyframe/engine_config.py----------------------------------------
polars.GPUEngine(self,*,device:int|None=None,memory_resource:Any|None=None,raise_on_fail:bool=False,**kwargs:Any)
polars.lazyframe.engine_config.GPUEngine(self,*,device:int|None=None,memory_resource:Any|None=None,raise_on_fail:bool=False,**kwargs:Any)
polars.lazyframe.engine_config.GPUEngine.__init__(self,*,device:int|None=None,memory_resource:Any|None=None,raise_on_fail:bool=False,**kwargs:Any)


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/lazyframe/frame.py----------------------------------------
A:polars.lazyframe.frame.T->TypeVar('T')
A:polars.lazyframe.frame.P->ParamSpec('P')
A:polars.lazyframe.frame.cudf_polars->import_optional('cudf_polars', err_prefix='GPU engine requested, but required package', install_message='Please install using the command `pip install cudf-polars-cu12` (or `pip install --extra-index-url=https://pypi.nvidia.com cudf-polars-cu11` if your system has a CUDA 11 driver).')
A:polars.lazyframe.frame.engine->_select_engine(engine)
A:polars.lazyframe.frame.self->self.with_row_index(row_index_name).with_row_index(row_index_name)
A:polars.lazyframe.frame.self._ldf->polars.polars.PyLazyFrame.scan_from_python_function_schema_function(schema, scan_fn, validate_schema=validate_schema)
A:polars.lazyframe.frame.source->normalize_filepath(source)
A:polars.lazyframe.frame.dot->self._ldf.optimization_toggle(type_coercion=type_coercion, type_check=type_check, predicate_pushdown=predicate_pushdown, projection_pushdown=projection_pushdown, simplify_expression=simplify_expression, slice_pushdown=slice_pushdown, comm_subplan_elim=comm_subplan_elim, comm_subexpr_elim=comm_subexpr_elim, cluster_with_columns=cluster_with_columns, collapse_joins=collapse_joins, streaming=engine == 'old-streaming', _eager=False, _check_order=_check_order, new_streaming=engine == 'streaming').to_dot(optimized)
A:polars.lazyframe.frame.svg->polars.dependencies.subprocess.check_output(['dot', '-Nshape=box', '-Tsvg'], input=f'{dot}'.encode())
A:polars.lazyframe.frame.insert->self.with_row_index(row_index_name).with_row_index(row_index_name).explain(optimized=False).replace('\n', '<p></p>')
A:polars.lazyframe.frame.schema->self.with_row_index(row_index_name).with_row_index(row_index_name).collect_schema()
A:polars.lazyframe.frame.null->polars.functions.lit(None)
A:polars.lazyframe.frame.is_numeric->parse_into_dtype(dtype).is_numeric()
A:polars.lazyframe.frame.df_metrics->(self.with_columns((F.col(c).sort() for c in sort_cols)) if sort_cols else self).select(*metric_exprs).collect()
A:polars.lazyframe.frame.n_metrics->len(metrics)
A:polars.lazyframe.frame.summary->dict(zip(schema, column_metrics))
A:polars.lazyframe.frame.df_summary->from_dict(summary)
A:polars.lazyframe.frame.ldf->self.with_row_index(row_index_name).with_row_index(row_index_name)._ldf.optimization_toggle(type_coercion=type_coercion, type_check=type_check, predicate_pushdown=predicate_pushdown, projection_pushdown=projection_pushdown, simplify_expression=simplify_expression, slice_pushdown=slice_pushdown, comm_subplan_elim=comm_subplan_elim, comm_subexpr_elim=comm_subexpr_elim, cluster_with_columns=cluster_with_columns, collapse_joins=collapse_joins, streaming=False, _eager=False, _check_order=_check_order, new_streaming=False)
A:polars.lazyframe.frame._ldf->self.with_row_index(row_index_name).with_row_index(row_index_name)._ldf.optimization_toggle(type_coercion=type_coercion, type_check=type_check, predicate_pushdown=predicate_pushdown, projection_pushdown=projection_pushdown, simplify_expression=simplify_expression, slice_pushdown=slice_pushdown, comm_subplan_elim=comm_subplan_elim, comm_subexpr_elim=comm_subexpr_elim, cluster_with_columns=cluster_with_columns, collapse_joins=collapse_joins, streaming=engine == 'old-streaming', _eager=False, _check_order=_check_order, new_streaming=engine == 'streaming')
A:polars.lazyframe.frame.by->parse_into_list_of_expressions(by)
A:polars.lazyframe.frame.descending->extend_bool(descending, len(by), 'descending', 'by')
A:polars.lazyframe.frame.nulls_last->extend_bool(nulls_last, len(by), 'nulls_last', 'by')
A:polars.lazyframe.frame.reverse->extend_bool(reverse, len(by), 'reverse', 'by')
A:polars.lazyframe.frame.callback->_kwargs.get('post_opt_callback', callback)
A:polars.lazyframe.frame.(df, timings)->self.with_row_index(row_index_name).with_row_index(row_index_name)._ldf.optimization_toggle(type_coercion=type_coercion, type_check=type_check, predicate_pushdown=predicate_pushdown, projection_pushdown=projection_pushdown, simplify_expression=simplify_expression, slice_pushdown=slice_pushdown, comm_subplan_elim=comm_subplan_elim, comm_subexpr_elim=comm_subexpr_elim, cluster_with_columns=cluster_with_columns, collapse_joins=collapse_joins, streaming=False, _eager=False, _check_order=_check_order, new_streaming=False).profile(callback)
A:polars.lazyframe.frame.(_fig, ax)->matplotlib.pyplot.subplots(1, figsize=figsize)
A:polars.lazyframe.frame.timings_->timings_.with_columns(F.col('node').str.slice(0, truncate_nodes) + '...').with_columns(F.col('node').str.slice(0, truncate_nodes) + '...')
A:polars.lazyframe.frame.lf->lf.select(columns).select(columns)
A:polars.lazyframe.frame.credential_provider_builder->_init_credential_provider_builder(credential_provider, path, storage_options, 'sink_ndjson')
A:polars.lazyframe.frame.storage_options->list(storage_options.items())
A:polars.lazyframe.frame.target->_to_sink_target(path)
A:polars.lazyframe.frame.dtypes->parse_into_dtype(dtypes)
A:polars.lazyframe.frame.c->by_dtype(c)
A:polars.lazyframe.frame.dtype->parse_into_dtype(dtype)
A:polars.lazyframe.frame.p->tuple(p)
A:polars.lazyframe.frame.mask_expr->polars.functions.lit(reduce(and_, boolean_masks))
A:polars.lazyframe.frame.structify->bool(int(os.environ.get('POLARS_AUTO_STRUCTIFY', 0)))
A:polars.lazyframe.frame.pyexprs->parse_into_list_of_expressions(*exprs, **named_exprs, __structify=structify)
A:polars.lazyframe.frame.exprs->parse_into_list_of_expressions(*by, **named_by)
A:polars.lazyframe.frame.lgb->self.with_row_index(row_index_name).with_row_index(row_index_name)._ldf.group_by_dynamic(index_column, every, period, offset, label, include_boundaries, closed, pyexprs_by, start_by)
A:polars.lazyframe.frame.index_column->parse_into_expression(index_column)
A:polars.lazyframe.frame.offset->parse_as_duration_string(offset)
A:polars.lazyframe.frame.period->parse_as_duration_string(period)
A:polars.lazyframe.frame.every->parse_as_duration_string(every)
A:polars.lazyframe.frame.tolerance_str->parse_as_duration_string(tolerance)
A:polars.lazyframe.frame.left_on->polars.functions.col(left_on)
A:polars.lazyframe.frame.right_on->polars.functions.col(right_on)
A:polars.lazyframe.frame.pyexprs_left->parse_into_list_of_expressions(left_on)
A:polars.lazyframe.frame.pyexprs_right->parse_into_list_of_expressions(right_on)
A:polars.lazyframe.frame.drop_cols->parse_into_list_of_expressions(*columns)
A:polars.lazyframe.frame.existing->list(mapping.keys())
A:polars.lazyframe.frame.new->list(mapping.values())
A:polars.lazyframe.frame.fill_value->parse_into_expression(fill_value, str_as_lit=True)
A:polars.lazyframe.frame.n->parse_into_expression(n)
A:polars.lazyframe.frame.value->polars.functions.lit(value)
A:polars.lazyframe.frame.quantile->parse_into_expression(quantile)
A:polars.lazyframe.frame.columns->parse_into_list_of_expressions(columns, *more_columns)
A:polars.lazyframe.frame.subset->parse_into_list_of_expressions(subset)
A:polars.lazyframe.frame.other->other.with_columns(F.lit(True).alias(validity[0])).with_columns(F.lit(True).alias(validity[0]))
A:polars.lazyframe.frame.left_schema->self.with_row_index(row_index_name).with_row_index(row_index_name).collect_schema()
A:polars.lazyframe.frame.right_schema->other.with_columns(F.lit(True).alias(validity[0])).with_columns(F.lit(True).alias(validity[0])).collect_schema()
A:polars.lazyframe.frame.result->result.drop(row_index_name).drop(row_index_name)
polars.LazyFrame(self,data:FrameInitTypes|None=None,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,nan_to_null:bool=False)
polars.LazyFrame.__bool__(self)->NoReturn
polars.LazyFrame.__contains__(self,key:str)->bool
polars.LazyFrame.__copy__(self)->LazyFrame
polars.LazyFrame.__deepcopy__(self,memo:None=None)->LazyFrame
polars.LazyFrame.__eq__(self,other:object)->NoReturn
polars.LazyFrame.__ge__(self,other:Any)->NoReturn
polars.LazyFrame.__getitem__(self,item:int|range|slice)->LazyFrame
polars.LazyFrame.__getstate__(self)->bytes
polars.LazyFrame.__gt__(self,other:Any)->NoReturn
polars.LazyFrame.__le__(self,other:Any)->NoReturn
polars.LazyFrame.__lt__(self,other:Any)->NoReturn
polars.LazyFrame.__ne__(self,other:object)->NoReturn
polars.LazyFrame.__repr__(self)->str
polars.LazyFrame.__setstate__(self,state:bytes)->None
polars.LazyFrame.__str__(self)->str
polars.LazyFrame._comparison_error(self,operator:str)->NoReturn
polars.LazyFrame._fetch(self,n_rows:int=500,*,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,_check_order:bool=True)->DataFrame
polars.LazyFrame._filter(self,*,predicates:tuple[IntoExprColumn|Iterable[IntoExprColumn]|bool|list[bool]|np.ndarray[Any,Any],...],constraints:dict[str,Any],invert:bool=False)->LazyFrame
polars.LazyFrame._from_pyldf(cls,ldf:PyLazyFrame)->LazyFrame
polars.LazyFrame._repr_html_(self)->str
polars.LazyFrame._scan_python_function(cls,schema:pa.schema|SchemaDict|Callable[[],SchemaDict],scan_fn:Any,*,pyarrow:bool=False,validate_schema:bool=False)->LazyFrame
polars.LazyFrame._set_sink_optimizations(self,engine:EngineType='auto',*,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,collapse_joins:bool=True,cluster_with_columns:bool=True,no_optimization:bool=False,comm_subplan_elim:bool=False,comm_subexpr_elim:bool=False,_check_order:bool=True)->PyLazyFrame
polars.LazyFrame._to_metadata(self,columns:None|str|list[str]=None,stats:None|str|list[str]=None)->DataFrame
polars.LazyFrame.approx_n_unique(self)->LazyFrame
polars.LazyFrame.bottom_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],reverse:bool|Sequence[bool]=False)->LazyFrame
polars.LazyFrame.cache(self)->LazyFrame
polars.LazyFrame.cast(self,dtypes:Mapping[ColumnNameOrSelector|PolarsDataType,PolarsDataType|PythonDataType]|PolarsDataType,*,strict:bool=True)->LazyFrame
polars.LazyFrame.clear(self,n:int=0)->LazyFrame
polars.LazyFrame.clone(self)->LazyFrame
polars.LazyFrame.collect(self,*,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,no_optimization:bool=False,engine:EngineType='auto',background:bool=False,_check_order:bool=True,_eager:bool=False,**_kwargs:Any)->DataFrame | InProcessQuery
polars.LazyFrame.collect_async(self,*,gevent:bool=False,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,engine:EngineType='auto',_check_order:bool=True)->Awaitable[DataFrame] | _GeventDataFrameResult[DataFrame]
polars.LazyFrame.collect_schema(self)->Schema
polars.LazyFrame.columns(self)->list[str]
polars.LazyFrame.count(self)->LazyFrame
polars.LazyFrame.describe(self,percentiles:Sequence[float]|float|None=(0.25,0.5,0.75),*,interpolation:RollingInterpolationMethod='nearest')->DataFrame
polars.LazyFrame.deserialize(cls,source:str|Path|IOBase,*,format:SerializationFormat='binary')->LazyFrame
polars.LazyFrame.drop(self,*columns:ColumnNameOrSelector|Iterable[ColumnNameOrSelector],strict:bool=True)->LazyFrame
polars.LazyFrame.drop_nans(self,subset:ColumnNameOrSelector|Collection[ColumnNameOrSelector]|None=None)->LazyFrame
polars.LazyFrame.drop_nulls(self,subset:ColumnNameOrSelector|Collection[ColumnNameOrSelector]|None=None)->LazyFrame
polars.LazyFrame.dtypes(self)->list[DataType]
polars.LazyFrame.explain(self,*,format:ExplainFormat='plain',optimized:bool=True,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,streaming:bool=False,engine:EngineType='auto',tree_format:bool|None=None,_check_order:bool=True)->str
polars.LazyFrame.explode(self,columns:str|Expr|Sequence[str|Expr],*more_columns:str|Expr)->LazyFrame
polars.LazyFrame.fetch(self,n_rows:int=500,*,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True)->DataFrame
polars.LazyFrame.fill_nan(self,value:int|float|Expr|None)->LazyFrame
polars.LazyFrame.fill_null(self,value:Any|Expr|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None,*,matches_supertype:bool=True)->LazyFrame
polars.LazyFrame.filter(self,*predicates:IntoExprColumn|Iterable[IntoExprColumn]|bool|list[bool]|np.ndarray[Any,Any],**constraints:Any)->LazyFrame
polars.LazyFrame.first(self)->LazyFrame
polars.LazyFrame.gather_every(self,n:int,offset:int=0)->LazyFrame
polars.LazyFrame.group_by(self,*by:IntoExpr|Iterable[IntoExpr],maintain_order:bool=False,**named_by:IntoExpr)->LazyGroupBy
polars.LazyFrame.group_by_dynamic(self,index_column:IntoExpr,*,every:str|timedelta,period:str|timedelta|None=None,offset:str|timedelta|None=None,include_boundaries:bool=False,closed:ClosedInterval='left',label:Label='left',group_by:IntoExpr|Iterable[IntoExpr]|None=None,start_by:StartBy='window')->LazyGroupBy
polars.LazyFrame.head(self,n:int=5)->LazyFrame
polars.LazyFrame.inspect(self,fmt:str='{}')->LazyFrame
polars.LazyFrame.interpolate(self)->LazyFrame
polars.LazyFrame.join(self,other:LazyFrame,on:str|Expr|Sequence[str|Expr]|None=None,how:JoinStrategy='inner',*,left_on:str|Expr|Sequence[str|Expr]|None=None,right_on:str|Expr|Sequence[str|Expr]|None=None,suffix:str='_right',validate:JoinValidation='m:m',nulls_equal:bool=False,coalesce:bool|None=None,maintain_order:MaintainOrderJoin|None=None,allow_parallel:bool=True,force_parallel:bool=False)->LazyFrame
polars.LazyFrame.join_asof(self,other:LazyFrame,*,left_on:str|None|Expr=None,right_on:str|None|Expr=None,on:str|None|Expr=None,by_left:str|Sequence[str]|None=None,by_right:str|Sequence[str]|None=None,by:str|Sequence[str]|None=None,strategy:AsofJoinStrategy='backward',suffix:str='_right',tolerance:str|int|float|timedelta|None=None,allow_parallel:bool=True,force_parallel:bool=False,coalesce:bool=True,allow_exact_matches:bool=True,check_sortedness:bool=True)->LazyFrame
polars.LazyFrame.join_where(self,other:LazyFrame,*predicates:Expr|Iterable[Expr],suffix:str='_right')->LazyFrame
polars.LazyFrame.last(self)->LazyFrame
polars.LazyFrame.lazy(self)->LazyFrame
polars.LazyFrame.limit(self,n:int=5)->LazyFrame
polars.LazyFrame.map_batches(self,function:Callable[[DataFrame],DataFrame],*,predicate_pushdown:bool=True,projection_pushdown:bool=True,slice_pushdown:bool=True,no_optimizations:bool=False,schema:None|SchemaDict=None,validate_output_schema:bool=True,streamable:bool=False)->LazyFrame
polars.LazyFrame.max(self)->LazyFrame
polars.LazyFrame.mean(self)->LazyFrame
polars.LazyFrame.median(self)->LazyFrame
polars.LazyFrame.melt(self,id_vars:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,value_vars:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,variable_name:str|None=None,value_name:str|None=None,*,streamable:bool=True)->LazyFrame
polars.LazyFrame.merge_sorted(self,other:LazyFrame,key:str)->LazyFrame
polars.LazyFrame.min(self)->LazyFrame
polars.LazyFrame.null_count(self)->LazyFrame
polars.LazyFrame.pipe(self,function:Callable[Concatenate[LazyFrame,P],T],*args:P.args,**kwargs:P.kwargs)->T
polars.LazyFrame.profile(self,*,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,show_plot:bool=False,truncate_nodes:int=0,figsize:tuple[int,int]=(18,8),engine:EngineType='auto',_check_order:bool=True,**_kwargs:Any)->tuple[DataFrame, DataFrame]
polars.LazyFrame.quantile(self,quantile:float|Expr,interpolation:RollingInterpolationMethod='nearest')->LazyFrame
polars.LazyFrame.remote(self,context:pc.ComputeContext|None=None,plan_type:pc._typing.PlanTypePreference='dot')->pc.LazyFrameExt
polars.LazyFrame.remove(self,*predicates:IntoExprColumn|Iterable[IntoExprColumn]|bool|list[bool]|np.ndarray[Any,Any],**constraints:Any)->LazyFrame
polars.LazyFrame.rename(self,mapping:dict[str,str]|Callable[[str],str],*,strict:bool=True)->LazyFrame
polars.LazyFrame.reverse(self)->LazyFrame
polars.LazyFrame.rolling(self,index_column:IntoExpr,*,period:str|timedelta,offset:str|timedelta|None=None,closed:ClosedInterval='right',group_by:IntoExpr|Iterable[IntoExpr]|None=None)->LazyGroupBy
polars.LazyFrame.schema(self)->Schema
polars.LazyFrame.select(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->LazyFrame
polars.LazyFrame.select_seq(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->LazyFrame
polars.LazyFrame.serialize(self,file:IOBase|str|Path|None=None,*,format:SerializationFormat='binary')->bytes | str | None
polars.LazyFrame.set_sorted(self,column:str,*,descending:bool=False)->LazyFrame
polars.LazyFrame.shift(self,n:int|IntoExprColumn=1,*,fill_value:IntoExpr|None=None)->LazyFrame
polars.LazyFrame.show_graph(self,*,optimized:bool=True,show:bool=True,output_path:str|Path|None=None,raw_output:bool=False,figsize:tuple[float,float]=(16.0,12.0),type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,streaming:bool=False,engine:EngineType='auto',_check_order:bool=True)->str | None
polars.LazyFrame.sink_csv(self,path:str|Path|IO[bytes]|IO[str]|PartitioningScheme,*,include_bom:bool=False,include_header:bool=True,separator:str=',',line_terminator:str='\n',quote_char:str='"',batch_size:int=1024,datetime_format:str|None=None,date_format:str|None=None,time_format:str|None=None,float_scientific:bool|None=None,float_precision:int|None=None,null_value:str|None=None,quote_style:CsvQuoteStyle|None=None,maintain_order:bool=True,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,collapse_joins:bool=True,no_optimization:bool=False,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,sync_on_close:SyncOnCloseMethod|None=None,mkdir:bool=False,lazy:bool=False,engine:EngineType='auto')->LazyFrame | None
polars.LazyFrame.sink_ipc(self,path:str|Path|IO[bytes]|PartitioningScheme,*,compression:IpcCompression|None='zstd',compat_level:CompatLevel|None=None,maintain_order:bool=True,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,collapse_joins:bool=True,no_optimization:bool=False,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,sync_on_close:SyncOnCloseMethod|None=None,mkdir:bool=False,lazy:bool=False,engine:EngineType='auto')->LazyFrame | None
polars.LazyFrame.sink_ndjson(self,path:str|Path|IO[bytes]|IO[str]|PartitioningScheme,*,maintain_order:bool=True,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,collapse_joins:bool=True,no_optimization:bool=False,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,sync_on_close:SyncOnCloseMethod|None=None,mkdir:bool=False,lazy:bool=False,engine:EngineType='auto')->LazyFrame | None
polars.LazyFrame.sink_parquet(self,path:str|Path|IO[bytes]|PartitioningScheme,*,compression:str='zstd',compression_level:int|None=None,statistics:bool|str|dict[str,bool]=True,row_group_size:int|None=None,data_page_size:int|None=None,maintain_order:bool=True,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,collapse_joins:bool=True,no_optimization:bool=False,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,sync_on_close:SyncOnCloseMethod|None=None,mkdir:bool=False,lazy:bool=False,engine:EngineType='auto')->LazyFrame | None
polars.LazyFrame.slice(self,offset:int,length:int|None=None)->LazyFrame
polars.LazyFrame.sort(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,descending:bool|Sequence[bool]=False,nulls_last:bool|Sequence[bool]=False,maintain_order:bool=False,multithreaded:bool=True)->LazyFrame
polars.LazyFrame.sql(self,query:str,*,table_name:str='self')->LazyFrame
polars.LazyFrame.std(self,ddof:int=1)->LazyFrame
polars.LazyFrame.sum(self)->LazyFrame
polars.LazyFrame.tail(self,n:int=5)->LazyFrame
polars.LazyFrame.top_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],reverse:bool|Sequence[bool]=False)->LazyFrame
polars.LazyFrame.unique(self,subset:ColumnNameOrSelector|Collection[ColumnNameOrSelector]|None=None,*,keep:UniqueKeepStrategy='any',maintain_order:bool=False)->LazyFrame
polars.LazyFrame.unnest(self,columns:ColumnNameOrSelector|Collection[ColumnNameOrSelector],*more_columns:ColumnNameOrSelector)->LazyFrame
polars.LazyFrame.unpivot(self,on:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,*,index:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,variable_name:str|None=None,value_name:str|None=None,streamable:bool=True)->LazyFrame
polars.LazyFrame.update(self,other:LazyFrame,on:str|Sequence[str]|None=None,how:Literal['left','inner','full']='left',*,left_on:str|Sequence[str]|None=None,right_on:str|Sequence[str]|None=None,include_nulls:bool=False,maintain_order:MaintainOrderJoin|None='left')->LazyFrame
polars.LazyFrame.var(self,ddof:int=1)->LazyFrame
polars.LazyFrame.width(self)->int
polars.LazyFrame.with_columns(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->LazyFrame
polars.LazyFrame.with_columns_seq(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->LazyFrame
polars.LazyFrame.with_context(self,other:Self|list[Self])->LazyFrame
polars.LazyFrame.with_row_count(self,name:str='row_nr',offset:int=0)->LazyFrame
polars.LazyFrame.with_row_index(self,name:str='index',offset:int=0)->LazyFrame
polars.lazyframe.frame.LazyFrame(self,data:FrameInitTypes|None=None,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,nan_to_null:bool=False)
polars.lazyframe.frame.LazyFrame.__bool__(self)->NoReturn
polars.lazyframe.frame.LazyFrame.__contains__(self,key:str)->bool
polars.lazyframe.frame.LazyFrame.__copy__(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.__deepcopy__(self,memo:None=None)->LazyFrame
polars.lazyframe.frame.LazyFrame.__eq__(self,other:object)->NoReturn
polars.lazyframe.frame.LazyFrame.__ge__(self,other:Any)->NoReturn
polars.lazyframe.frame.LazyFrame.__getitem__(self,item:int|range|slice)->LazyFrame
polars.lazyframe.frame.LazyFrame.__getstate__(self)->bytes
polars.lazyframe.frame.LazyFrame.__gt__(self,other:Any)->NoReturn
polars.lazyframe.frame.LazyFrame.__init__(self,data:FrameInitTypes|None=None,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,nan_to_null:bool=False)
polars.lazyframe.frame.LazyFrame.__le__(self,other:Any)->NoReturn
polars.lazyframe.frame.LazyFrame.__lt__(self,other:Any)->NoReturn
polars.lazyframe.frame.LazyFrame.__ne__(self,other:object)->NoReturn
polars.lazyframe.frame.LazyFrame.__repr__(self)->str
polars.lazyframe.frame.LazyFrame.__setstate__(self,state:bytes)->None
polars.lazyframe.frame.LazyFrame.__str__(self)->str
polars.lazyframe.frame.LazyFrame._comparison_error(self,operator:str)->NoReturn
polars.lazyframe.frame.LazyFrame._fetch(self,n_rows:int=500,*,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,_check_order:bool=True)->DataFrame
polars.lazyframe.frame.LazyFrame._filter(self,*,predicates:tuple[IntoExprColumn|Iterable[IntoExprColumn]|bool|list[bool]|np.ndarray[Any,Any],...],constraints:dict[str,Any],invert:bool=False)->LazyFrame
polars.lazyframe.frame.LazyFrame._from_pyldf(cls,ldf:PyLazyFrame)->LazyFrame
polars.lazyframe.frame.LazyFrame._repr_html_(self)->str
polars.lazyframe.frame.LazyFrame._scan_python_function(cls,schema:pa.schema|SchemaDict|Callable[[],SchemaDict],scan_fn:Any,*,pyarrow:bool=False,validate_schema:bool=False)->LazyFrame
polars.lazyframe.frame.LazyFrame._set_sink_optimizations(self,engine:EngineType='auto',*,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,collapse_joins:bool=True,cluster_with_columns:bool=True,no_optimization:bool=False,comm_subplan_elim:bool=False,comm_subexpr_elim:bool=False,_check_order:bool=True)->PyLazyFrame
polars.lazyframe.frame.LazyFrame._to_metadata(self,columns:None|str|list[str]=None,stats:None|str|list[str]=None)->DataFrame
polars.lazyframe.frame.LazyFrame.approx_n_unique(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.bottom_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],reverse:bool|Sequence[bool]=False)->LazyFrame
polars.lazyframe.frame.LazyFrame.cache(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.cast(self,dtypes:Mapping[ColumnNameOrSelector|PolarsDataType,PolarsDataType|PythonDataType]|PolarsDataType,*,strict:bool=True)->LazyFrame
polars.lazyframe.frame.LazyFrame.clear(self,n:int=0)->LazyFrame
polars.lazyframe.frame.LazyFrame.clone(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.collect(self,*,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,no_optimization:bool=False,engine:EngineType='auto',background:bool=False,_check_order:bool=True,_eager:bool=False,**_kwargs:Any)->DataFrame | InProcessQuery
polars.lazyframe.frame.LazyFrame.collect_async(self,*,gevent:bool=False,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,engine:EngineType='auto',_check_order:bool=True)->Awaitable[DataFrame] | _GeventDataFrameResult[DataFrame]
polars.lazyframe.frame.LazyFrame.collect_schema(self)->Schema
polars.lazyframe.frame.LazyFrame.columns(self)->list[str]
polars.lazyframe.frame.LazyFrame.count(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.describe(self,percentiles:Sequence[float]|float|None=(0.25,0.5,0.75),*,interpolation:RollingInterpolationMethod='nearest')->DataFrame
polars.lazyframe.frame.LazyFrame.deserialize(cls,source:str|Path|IOBase,*,format:SerializationFormat='binary')->LazyFrame
polars.lazyframe.frame.LazyFrame.drop(self,*columns:ColumnNameOrSelector|Iterable[ColumnNameOrSelector],strict:bool=True)->LazyFrame
polars.lazyframe.frame.LazyFrame.drop_nans(self,subset:ColumnNameOrSelector|Collection[ColumnNameOrSelector]|None=None)->LazyFrame
polars.lazyframe.frame.LazyFrame.drop_nulls(self,subset:ColumnNameOrSelector|Collection[ColumnNameOrSelector]|None=None)->LazyFrame
polars.lazyframe.frame.LazyFrame.dtypes(self)->list[DataType]
polars.lazyframe.frame.LazyFrame.explain(self,*,format:ExplainFormat='plain',optimized:bool=True,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,streaming:bool=False,engine:EngineType='auto',tree_format:bool|None=None,_check_order:bool=True)->str
polars.lazyframe.frame.LazyFrame.explode(self,columns:str|Expr|Sequence[str|Expr],*more_columns:str|Expr)->LazyFrame
polars.lazyframe.frame.LazyFrame.fetch(self,n_rows:int=500,*,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True)->DataFrame
polars.lazyframe.frame.LazyFrame.fill_nan(self,value:int|float|Expr|None)->LazyFrame
polars.lazyframe.frame.LazyFrame.fill_null(self,value:Any|Expr|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None,*,matches_supertype:bool=True)->LazyFrame
polars.lazyframe.frame.LazyFrame.filter(self,*predicates:IntoExprColumn|Iterable[IntoExprColumn]|bool|list[bool]|np.ndarray[Any,Any],**constraints:Any)->LazyFrame
polars.lazyframe.frame.LazyFrame.first(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.gather_every(self,n:int,offset:int=0)->LazyFrame
polars.lazyframe.frame.LazyFrame.group_by(self,*by:IntoExpr|Iterable[IntoExpr],maintain_order:bool=False,**named_by:IntoExpr)->LazyGroupBy
polars.lazyframe.frame.LazyFrame.group_by_dynamic(self,index_column:IntoExpr,*,every:str|timedelta,period:str|timedelta|None=None,offset:str|timedelta|None=None,include_boundaries:bool=False,closed:ClosedInterval='left',label:Label='left',group_by:IntoExpr|Iterable[IntoExpr]|None=None,start_by:StartBy='window')->LazyGroupBy
polars.lazyframe.frame.LazyFrame.head(self,n:int=5)->LazyFrame
polars.lazyframe.frame.LazyFrame.inspect(self,fmt:str='{}')->LazyFrame
polars.lazyframe.frame.LazyFrame.interpolate(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.join(self,other:LazyFrame,on:str|Expr|Sequence[str|Expr]|None=None,how:JoinStrategy='inner',*,left_on:str|Expr|Sequence[str|Expr]|None=None,right_on:str|Expr|Sequence[str|Expr]|None=None,suffix:str='_right',validate:JoinValidation='m:m',nulls_equal:bool=False,coalesce:bool|None=None,maintain_order:MaintainOrderJoin|None=None,allow_parallel:bool=True,force_parallel:bool=False)->LazyFrame
polars.lazyframe.frame.LazyFrame.join_asof(self,other:LazyFrame,*,left_on:str|None|Expr=None,right_on:str|None|Expr=None,on:str|None|Expr=None,by_left:str|Sequence[str]|None=None,by_right:str|Sequence[str]|None=None,by:str|Sequence[str]|None=None,strategy:AsofJoinStrategy='backward',suffix:str='_right',tolerance:str|int|float|timedelta|None=None,allow_parallel:bool=True,force_parallel:bool=False,coalesce:bool=True,allow_exact_matches:bool=True,check_sortedness:bool=True)->LazyFrame
polars.lazyframe.frame.LazyFrame.join_where(self,other:LazyFrame,*predicates:Expr|Iterable[Expr],suffix:str='_right')->LazyFrame
polars.lazyframe.frame.LazyFrame.last(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.lazy(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.limit(self,n:int=5)->LazyFrame
polars.lazyframe.frame.LazyFrame.map_batches(self,function:Callable[[DataFrame],DataFrame],*,predicate_pushdown:bool=True,projection_pushdown:bool=True,slice_pushdown:bool=True,no_optimizations:bool=False,schema:None|SchemaDict=None,validate_output_schema:bool=True,streamable:bool=False)->LazyFrame
polars.lazyframe.frame.LazyFrame.max(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.mean(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.median(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.melt(self,id_vars:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,value_vars:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,variable_name:str|None=None,value_name:str|None=None,*,streamable:bool=True)->LazyFrame
polars.lazyframe.frame.LazyFrame.merge_sorted(self,other:LazyFrame,key:str)->LazyFrame
polars.lazyframe.frame.LazyFrame.min(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.null_count(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.pipe(self,function:Callable[Concatenate[LazyFrame,P],T],*args:P.args,**kwargs:P.kwargs)->T
polars.lazyframe.frame.LazyFrame.profile(self,*,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,show_plot:bool=False,truncate_nodes:int=0,figsize:tuple[int,int]=(18,8),engine:EngineType='auto',_check_order:bool=True,**_kwargs:Any)->tuple[DataFrame, DataFrame]
polars.lazyframe.frame.LazyFrame.quantile(self,quantile:float|Expr,interpolation:RollingInterpolationMethod='nearest')->LazyFrame
polars.lazyframe.frame.LazyFrame.remote(self,context:pc.ComputeContext|None=None,plan_type:pc._typing.PlanTypePreference='dot')->pc.LazyFrameExt
polars.lazyframe.frame.LazyFrame.remove(self,*predicates:IntoExprColumn|Iterable[IntoExprColumn]|bool|list[bool]|np.ndarray[Any,Any],**constraints:Any)->LazyFrame
polars.lazyframe.frame.LazyFrame.rename(self,mapping:dict[str,str]|Callable[[str],str],*,strict:bool=True)->LazyFrame
polars.lazyframe.frame.LazyFrame.reverse(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.rolling(self,index_column:IntoExpr,*,period:str|timedelta,offset:str|timedelta|None=None,closed:ClosedInterval='right',group_by:IntoExpr|Iterable[IntoExpr]|None=None)->LazyGroupBy
polars.lazyframe.frame.LazyFrame.schema(self)->Schema
polars.lazyframe.frame.LazyFrame.select(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->LazyFrame
polars.lazyframe.frame.LazyFrame.select_seq(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->LazyFrame
polars.lazyframe.frame.LazyFrame.serialize(self,file:IOBase|str|Path|None=None,*,format:SerializationFormat='binary')->bytes | str | None
polars.lazyframe.frame.LazyFrame.set_sorted(self,column:str,*,descending:bool=False)->LazyFrame
polars.lazyframe.frame.LazyFrame.shift(self,n:int|IntoExprColumn=1,*,fill_value:IntoExpr|None=None)->LazyFrame
polars.lazyframe.frame.LazyFrame.show_graph(self,*,optimized:bool=True,show:bool=True,output_path:str|Path|None=None,raw_output:bool=False,figsize:tuple[float,float]=(16.0,12.0),type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,streaming:bool=False,engine:EngineType='auto',_check_order:bool=True)->str | None
polars.lazyframe.frame.LazyFrame.sink_csv(self,path:str|Path|IO[bytes]|IO[str]|PartitioningScheme,*,include_bom:bool=False,include_header:bool=True,separator:str=',',line_terminator:str='\n',quote_char:str='"',batch_size:int=1024,datetime_format:str|None=None,date_format:str|None=None,time_format:str|None=None,float_scientific:bool|None=None,float_precision:int|None=None,null_value:str|None=None,quote_style:CsvQuoteStyle|None=None,maintain_order:bool=True,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,collapse_joins:bool=True,no_optimization:bool=False,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,sync_on_close:SyncOnCloseMethod|None=None,mkdir:bool=False,lazy:bool=False,engine:EngineType='auto')->LazyFrame | None
polars.lazyframe.frame.LazyFrame.sink_ipc(self,path:str|Path|IO[bytes]|PartitioningScheme,*,compression:IpcCompression|None='zstd',compat_level:CompatLevel|None=None,maintain_order:bool=True,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,collapse_joins:bool=True,no_optimization:bool=False,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,sync_on_close:SyncOnCloseMethod|None=None,mkdir:bool=False,lazy:bool=False,engine:EngineType='auto')->LazyFrame | None
polars.lazyframe.frame.LazyFrame.sink_ndjson(self,path:str|Path|IO[bytes]|IO[str]|PartitioningScheme,*,maintain_order:bool=True,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,collapse_joins:bool=True,no_optimization:bool=False,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,sync_on_close:SyncOnCloseMethod|None=None,mkdir:bool=False,lazy:bool=False,engine:EngineType='auto')->LazyFrame | None
polars.lazyframe.frame.LazyFrame.sink_parquet(self,path:str|Path|IO[bytes]|PartitioningScheme,*,compression:str='zstd',compression_level:int|None=None,statistics:bool|str|dict[str,bool]=True,row_group_size:int|None=None,data_page_size:int|None=None,maintain_order:bool=True,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,collapse_joins:bool=True,no_optimization:bool=False,storage_options:dict[str,Any]|None=None,credential_provider:CredentialProviderFunction|Literal['auto']|None='auto',retries:int=2,sync_on_close:SyncOnCloseMethod|None=None,mkdir:bool=False,lazy:bool=False,engine:EngineType='auto')->LazyFrame | None
polars.lazyframe.frame.LazyFrame.slice(self,offset:int,length:int|None=None)->LazyFrame
polars.lazyframe.frame.LazyFrame.sort(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,descending:bool|Sequence[bool]=False,nulls_last:bool|Sequence[bool]=False,maintain_order:bool=False,multithreaded:bool=True)->LazyFrame
polars.lazyframe.frame.LazyFrame.sql(self,query:str,*,table_name:str='self')->LazyFrame
polars.lazyframe.frame.LazyFrame.std(self,ddof:int=1)->LazyFrame
polars.lazyframe.frame.LazyFrame.sum(self)->LazyFrame
polars.lazyframe.frame.LazyFrame.tail(self,n:int=5)->LazyFrame
polars.lazyframe.frame.LazyFrame.top_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],reverse:bool|Sequence[bool]=False)->LazyFrame
polars.lazyframe.frame.LazyFrame.unique(self,subset:ColumnNameOrSelector|Collection[ColumnNameOrSelector]|None=None,*,keep:UniqueKeepStrategy='any',maintain_order:bool=False)->LazyFrame
polars.lazyframe.frame.LazyFrame.unnest(self,columns:ColumnNameOrSelector|Collection[ColumnNameOrSelector],*more_columns:ColumnNameOrSelector)->LazyFrame
polars.lazyframe.frame.LazyFrame.unpivot(self,on:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,*,index:ColumnNameOrSelector|Sequence[ColumnNameOrSelector]|None=None,variable_name:str|None=None,value_name:str|None=None,streamable:bool=True)->LazyFrame
polars.lazyframe.frame.LazyFrame.update(self,other:LazyFrame,on:str|Sequence[str]|None=None,how:Literal['left','inner','full']='left',*,left_on:str|Sequence[str]|None=None,right_on:str|Sequence[str]|None=None,include_nulls:bool=False,maintain_order:MaintainOrderJoin|None='left')->LazyFrame
polars.lazyframe.frame.LazyFrame.var(self,ddof:int=1)->LazyFrame
polars.lazyframe.frame.LazyFrame.width(self)->int
polars.lazyframe.frame.LazyFrame.with_columns(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->LazyFrame
polars.lazyframe.frame.LazyFrame.with_columns_seq(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->LazyFrame
polars.lazyframe.frame.LazyFrame.with_context(self,other:Self|list[Self])->LazyFrame
polars.lazyframe.frame.LazyFrame.with_row_count(self,name:str='row_nr',offset:int=0)->LazyFrame
polars.lazyframe.frame.LazyFrame.with_row_index(self,name:str='index',offset:int=0)->LazyFrame
polars.lazyframe.frame._gpu_engine_callback(engine:EngineType,*,streaming:bool,background:bool,new_streaming:bool,_eager:bool)->Callable[[Any, int | None], None] | None
polars.lazyframe.frame._select_engine(engine:EngineType)->EngineType
polars.lazyframe.frame._to_sink_target(path:str|Path|IO[bytes]|IO[str]|PartitioningScheme)->str | Path | IO[bytes] | IO[str] | PyPartitioning


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/lazyframe/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/lazyframe/opt_flags.py----------------------------------------
A:polars.lazyframe.opt_flags.self._pyoptflags->polars.polars.PyOptFlags.empty()
polars.lazyframe.OptFlags(self,*,_type_check:bool=True,_type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,check_order_observe:bool=True)
polars.lazyframe.OptFlags.check_order_observe(self)->bool
polars.lazyframe.OptFlags.check_order_observe(self,value:bool)->None
polars.lazyframe.OptFlags.cluster_with_columns(self)->bool
polars.lazyframe.OptFlags.cluster_with_columns(self,value:bool)->None
polars.lazyframe.OptFlags.collapse_joins(self)->bool
polars.lazyframe.OptFlags.collapse_joins(self,value:bool)->None
polars.lazyframe.OptFlags.common_subexpr_elim(self)->bool
polars.lazyframe.OptFlags.common_subexpr_elim(self,value:bool)->None
polars.lazyframe.OptFlags.common_subplan_elim(self)->bool
polars.lazyframe.OptFlags.common_subplan_elim(self,value:bool)->None
polars.lazyframe.OptFlags.no_optimizations(self)->None
polars.lazyframe.OptFlags.predicate_pushdown(self)->bool
polars.lazyframe.OptFlags.predicate_pushdown(self,value:bool)->None
polars.lazyframe.OptFlags.projection_pushdown(self)->bool
polars.lazyframe.OptFlags.projection_pushdown(self,value:bool)->None
polars.lazyframe.OptFlags.simplify_expression(self)->bool
polars.lazyframe.OptFlags.simplify_expression(self,value:bool)->None
polars.lazyframe.OptFlags.slice_pushdown(self)->bool
polars.lazyframe.OptFlags.slice_pushdown(self,value:bool)->None
polars.lazyframe.opt_flags.OptFlags(self,*,_type_check:bool=True,_type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,check_order_observe:bool=True)
polars.lazyframe.opt_flags.OptFlags.__init__(self,*,_type_check:bool=True,_type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,check_order_observe:bool=True)
polars.lazyframe.opt_flags.OptFlags.check_order_observe(self)->bool
polars.lazyframe.opt_flags.OptFlags.check_order_observe(self,value:bool)->None
polars.lazyframe.opt_flags.OptFlags.cluster_with_columns(self)->bool
polars.lazyframe.opt_flags.OptFlags.cluster_with_columns(self,value:bool)->None
polars.lazyframe.opt_flags.OptFlags.collapse_joins(self)->bool
polars.lazyframe.opt_flags.OptFlags.collapse_joins(self,value:bool)->None
polars.lazyframe.opt_flags.OptFlags.common_subexpr_elim(self)->bool
polars.lazyframe.opt_flags.OptFlags.common_subexpr_elim(self,value:bool)->None
polars.lazyframe.opt_flags.OptFlags.common_subplan_elim(self)->bool
polars.lazyframe.opt_flags.OptFlags.common_subplan_elim(self,value:bool)->None
polars.lazyframe.opt_flags.OptFlags.no_optimizations(self)->None
polars.lazyframe.opt_flags.OptFlags.predicate_pushdown(self)->bool
polars.lazyframe.opt_flags.OptFlags.predicate_pushdown(self,value:bool)->None
polars.lazyframe.opt_flags.OptFlags.projection_pushdown(self)->bool
polars.lazyframe.opt_flags.OptFlags.projection_pushdown(self,value:bool)->None
polars.lazyframe.opt_flags.OptFlags.simplify_expression(self)->bool
polars.lazyframe.opt_flags.OptFlags.simplify_expression(self,value:bool)->None
polars.lazyframe.opt_flags.OptFlags.slice_pushdown(self)->bool
polars.lazyframe.opt_flags.OptFlags.slice_pushdown(self,value:bool)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/lazyframe/group_by.py----------------------------------------
A:polars.lazyframe.group_by.pyexprs->parse_into_list_of_expressions(*aggs, **named_aggs)
A:polars.lazyframe.group_by.len_expr->len_expr.alias(name).alias(name)
polars.lazyframe.group_by.LazyGroupBy(self,lgb:PyLazyGroupBy)
polars.lazyframe.group_by.LazyGroupBy.__init__(self,lgb:PyLazyGroupBy)
polars.lazyframe.group_by.LazyGroupBy.agg(self,*aggs:IntoExpr|Iterable[IntoExpr],**named_aggs:IntoExpr)->LazyFrame
polars.lazyframe.group_by.LazyGroupBy.all(self)->LazyFrame
polars.lazyframe.group_by.LazyGroupBy.count(self)->LazyFrame
polars.lazyframe.group_by.LazyGroupBy.first(self)->LazyFrame
polars.lazyframe.group_by.LazyGroupBy.head(self,n:int=5)->LazyFrame
polars.lazyframe.group_by.LazyGroupBy.last(self)->LazyFrame
polars.lazyframe.group_by.LazyGroupBy.len(self,name:str|None=None)->LazyFrame
polars.lazyframe.group_by.LazyGroupBy.map_groups(self,function:Callable[[DataFrame],DataFrame],schema:SchemaDict|None)->LazyFrame
polars.lazyframe.group_by.LazyGroupBy.max(self)->LazyFrame
polars.lazyframe.group_by.LazyGroupBy.mean(self)->LazyFrame
polars.lazyframe.group_by.LazyGroupBy.median(self)->LazyFrame
polars.lazyframe.group_by.LazyGroupBy.min(self)->LazyFrame
polars.lazyframe.group_by.LazyGroupBy.n_unique(self)->LazyFrame
polars.lazyframe.group_by.LazyGroupBy.quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest')->LazyFrame
polars.lazyframe.group_by.LazyGroupBy.sum(self)->LazyFrame
polars.lazyframe.group_by.LazyGroupBy.tail(self,n:int=5)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/lazyframe/in_process.py----------------------------------------
polars.lazyframe.in_process.InProcessQuery(self,ipq:PyInProcessQuery)
polars.lazyframe.in_process.InProcessQuery.__init__(self,ipq:PyInProcessQuery)
polars.lazyframe.in_process.InProcessQuery.cancel(self)->None
polars.lazyframe.in_process.InProcessQuery.fetch(self)->DataFrame | None
polars.lazyframe.in_process.InProcessQuery.fetch_blocking(self)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/datatypes/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/datatypes/_utils.py----------------------------------------
A:polars.datatypes._utils.init_repr->_dtype_to_init_repr_struct(dtype, prefix)
A:polars.datatypes._utils.inner_repr->dtype_to_init_repr(dtype.inner, prefix)
polars.datatypes._utils._dtype_to_init_repr_array(dtype:Array,prefix:str)->str
polars.datatypes._utils._dtype_to_init_repr_list(dtype:List,prefix:str)->str
polars.datatypes._utils._dtype_to_init_repr_struct(dtype:Struct,prefix:str)->str
polars.datatypes._utils.dtype_to_init_repr(dtype:PolarsDataType,prefix:str='pl.')->str


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/datatypes/classes.py----------------------------------------
A:polars.datatypes.classes.time_zone->str(time_zone)
A:polars.datatypes.classes.categories->polars._reexport.Series(values=categories)
A:polars.datatypes.classes.self.categories->polars._reexport.Series(values=categories).rechunk().alias('category')
A:polars.datatypes.classes.self.inner->polars.datatypes.parse_into_dtype(inner)
A:polars.datatypes.classes.inner_parsed->Array(inner_parsed, shape[1:])
A:polars.datatypes.classes.self.dtype->polars.datatypes.parse_into_dtype(dtype)
A:polars.datatypes.classes.self.fields->list(fields)
polars.Array(self,inner:PolarsDataType|PythonDataType,shape:int|tuple[int,...]|None=None,*,width:int|None=None)
polars.Array.__eq__(self,other:PolarsDataType)->bool
polars.Array.__hash__(self)->int
polars.Array.__repr__(self)->str
polars.Array.width(self)->int
polars.Binary(DataType)
polars.Boolean(DataType)
polars.Categorical(self,ordering:CategoricalOrdering|None='physical')
polars.Categorical.__eq__(self,other:PolarsDataType)->bool
polars.Categorical.__hash__(self)->int
polars.Categorical.__repr__(self)->str
polars.DataType(metaclass=DataTypeClass)
polars.DataType.__eq__(self,other:PolarsDataType)->bool
polars.DataType.__hash__(self)->int
polars.DataType.__repr__(self)->str
polars.DataType._string_repr(self)->str
polars.DataType.base_type(cls)->DataTypeClass
polars.DataType.from_python(cls,py_type:PythonDataType)->PolarsDataType
polars.DataType.is_(self,other:PolarsDataType)->bool
polars.DataType.is_decimal(cls)->bool
polars.DataType.is_float(cls)->bool
polars.DataType.is_integer(cls)->bool
polars.DataType.is_nested(cls)->bool
polars.DataType.is_numeric(cls)->bool
polars.DataType.is_object(cls)->bool
polars.DataType.is_signed_integer(cls)->bool
polars.DataType.is_temporal(cls)->bool
polars.DataType.is_unsigned_integer(cls)->bool
polars.DataType.to_python(self)->PythonDataType
polars.DataTypeClass(type)
polars.DataTypeClass.__repr__(cls)->str
polars.DataTypeClass._string_repr(cls)->str
polars.DataTypeClass.base_type(cls)->DataTypeClass
polars.DataTypeClass.from_python(cls,py_type:PythonDataType)->PolarsDataType
polars.DataTypeClass.is_(cls,other:PolarsDataType)->bool
polars.DataTypeClass.is_decimal(cls)->bool
polars.DataTypeClass.is_float(cls)->bool
polars.DataTypeClass.is_integer(cls)->bool
polars.DataTypeClass.is_nested(cls)->bool
polars.DataTypeClass.is_numeric(cls)->bool
polars.DataTypeClass.is_object(cls)->bool
polars.DataTypeClass.is_signed_integer(cls)->bool
polars.DataTypeClass.is_temporal(cls)->bool
polars.DataTypeClass.is_unsigned_integer(cls)->bool
polars.DataTypeClass.to_python(cls)->PythonDataType
polars.Date(TemporalType)
polars.Datetime(self,time_unit:TimeUnit='us',time_zone:str|tzinfo|None=None)
polars.Datetime.__eq__(self,other:PolarsDataType)->bool
polars.Datetime.__hash__(self)->int
polars.Datetime.__repr__(self)->str
polars.Decimal(self,precision:int|None=None,scale:int=0)
polars.Decimal.__eq__(self,other:PolarsDataType)->bool
polars.Decimal.__hash__(self)->int
polars.Decimal.__repr__(self)->str
polars.Duration(self,time_unit:TimeUnit='us')
polars.Duration.__eq__(self,other:PolarsDataType)->bool
polars.Duration.__hash__(self)->int
polars.Duration.__repr__(self)->str
polars.Enum(self,categories:Series|Iterable[str]|type[enum.Enum])
polars.Enum.__eq__(self,other:PolarsDataType)->bool
polars.Enum.__hash__(self)->int
polars.Enum.__repr__(self)->str
polars.Enum.union(self,other:Enum)->Enum
polars.Field(self,name:str,dtype:PolarsDataType)
polars.Field.__eq__(self,other:Field)->bool
polars.Field.__hash__(self)->int
polars.Field.__repr__(self)->str
polars.Float32(FloatType)
polars.Float64(FloatType)
polars.Int128(SignedIntegerType)
polars.Int16(SignedIntegerType)
polars.Int32(SignedIntegerType)
polars.Int64(SignedIntegerType)
polars.Int8(SignedIntegerType)
polars.List(self,inner:PolarsDataType|PythonDataType)
polars.List.__eq__(self,other:PolarsDataType)->bool
polars.List.__hash__(self)->int
polars.List.__repr__(self)->str
polars.Null(DataType)
polars.Object(ObjectType)
polars.ObjectType(DataType)
polars.String(DataType)
polars.Struct(self,fields:Sequence[Field]|SchemaDict)
polars.Struct.__eq__(self,other:PolarsDataType)->bool
polars.Struct.__hash__(self)->int
polars.Struct.__iter__(self)->Iterator[tuple[str, PolarsDataType]]
polars.Struct.__repr__(self)->str
polars.Struct.__reversed__(self)->Iterator[tuple[str, PolarsDataType]]
polars.Struct.to_schema(self)->OrderedDict[str, PolarsDataType]
polars.Time(TemporalType)
polars.Time.max(cls)->pl.Expr
polars.Time.min(cls)->pl.Expr
polars.UInt16(UnsignedIntegerType)
polars.UInt32(UnsignedIntegerType)
polars.UInt64(UnsignedIntegerType)
polars.UInt8(UnsignedIntegerType)
polars.Unknown(DataType)
polars.datatypes.IntegerType(NumericType)
polars.datatypes.TemporalType(DataType)
polars.datatypes.classes.Array(self,inner:PolarsDataType|PythonDataType,shape:int|tuple[int,...]|None=None,*,width:int|None=None)
polars.datatypes.classes.Array.__eq__(self,other:PolarsDataType)->bool
polars.datatypes.classes.Array.__hash__(self)->int
polars.datatypes.classes.Array.__init__(self,inner:PolarsDataType|PythonDataType,shape:int|tuple[int,...]|None=None,*,width:int|None=None)
polars.datatypes.classes.Array.__repr__(self)->str
polars.datatypes.classes.Array.width(self)->int
polars.datatypes.classes.Binary(DataType)
polars.datatypes.classes.Boolean(DataType)
polars.datatypes.classes.Categorical(self,ordering:CategoricalOrdering|None='physical')
polars.datatypes.classes.Categorical.__eq__(self,other:PolarsDataType)->bool
polars.datatypes.classes.Categorical.__hash__(self)->int
polars.datatypes.classes.Categorical.__init__(self,ordering:CategoricalOrdering|None='physical')
polars.datatypes.classes.Categorical.__repr__(self)->str
polars.datatypes.classes.DataType(metaclass=DataTypeClass)
polars.datatypes.classes.DataType.__eq__(self,other:PolarsDataType)->bool
polars.datatypes.classes.DataType.__hash__(self)->int
polars.datatypes.classes.DataType.__repr__(self)->str
polars.datatypes.classes.DataType._string_repr(self)->str
polars.datatypes.classes.DataType.base_type(cls)->DataTypeClass
polars.datatypes.classes.DataType.from_python(cls,py_type:PythonDataType)->PolarsDataType
polars.datatypes.classes.DataType.is_(self,other:PolarsDataType)->bool
polars.datatypes.classes.DataType.is_decimal(cls)->bool
polars.datatypes.classes.DataType.is_float(cls)->bool
polars.datatypes.classes.DataType.is_integer(cls)->bool
polars.datatypes.classes.DataType.is_nested(cls)->bool
polars.datatypes.classes.DataType.is_numeric(cls)->bool
polars.datatypes.classes.DataType.is_object(cls)->bool
polars.datatypes.classes.DataType.is_signed_integer(cls)->bool
polars.datatypes.classes.DataType.is_temporal(cls)->bool
polars.datatypes.classes.DataType.is_unsigned_integer(cls)->bool
polars.datatypes.classes.DataType.to_python(self)->PythonDataType
polars.datatypes.classes.DataTypeClass(type)
polars.datatypes.classes.DataTypeClass.__repr__(cls)->str
polars.datatypes.classes.DataTypeClass._string_repr(cls)->str
polars.datatypes.classes.DataTypeClass.base_type(cls)->DataTypeClass
polars.datatypes.classes.DataTypeClass.from_python(cls,py_type:PythonDataType)->PolarsDataType
polars.datatypes.classes.DataTypeClass.is_(cls,other:PolarsDataType)->bool
polars.datatypes.classes.DataTypeClass.is_decimal(cls)->bool
polars.datatypes.classes.DataTypeClass.is_float(cls)->bool
polars.datatypes.classes.DataTypeClass.is_integer(cls)->bool
polars.datatypes.classes.DataTypeClass.is_nested(cls)->bool
polars.datatypes.classes.DataTypeClass.is_numeric(cls)->bool
polars.datatypes.classes.DataTypeClass.is_object(cls)->bool
polars.datatypes.classes.DataTypeClass.is_signed_integer(cls)->bool
polars.datatypes.classes.DataTypeClass.is_temporal(cls)->bool
polars.datatypes.classes.DataTypeClass.is_unsigned_integer(cls)->bool
polars.datatypes.classes.DataTypeClass.to_python(cls)->PythonDataType
polars.datatypes.classes.Date(TemporalType)
polars.datatypes.classes.Datetime(self,time_unit:TimeUnit='us',time_zone:str|tzinfo|None=None)
polars.datatypes.classes.Datetime.__eq__(self,other:PolarsDataType)->bool
polars.datatypes.classes.Datetime.__hash__(self)->int
polars.datatypes.classes.Datetime.__init__(self,time_unit:TimeUnit='us',time_zone:str|tzinfo|None=None)
polars.datatypes.classes.Datetime.__repr__(self)->str
polars.datatypes.classes.Decimal(self,precision:int|None=None,scale:int=0)
polars.datatypes.classes.Decimal.__eq__(self,other:PolarsDataType)->bool
polars.datatypes.classes.Decimal.__hash__(self)->int
polars.datatypes.classes.Decimal.__init__(self,precision:int|None=None,scale:int=0)
polars.datatypes.classes.Decimal.__repr__(self)->str
polars.datatypes.classes.Duration(self,time_unit:TimeUnit='us')
polars.datatypes.classes.Duration.__eq__(self,other:PolarsDataType)->bool
polars.datatypes.classes.Duration.__hash__(self)->int
polars.datatypes.classes.Duration.__init__(self,time_unit:TimeUnit='us')
polars.datatypes.classes.Duration.__repr__(self)->str
polars.datatypes.classes.Enum(self,categories:Series|Iterable[str]|type[enum.Enum])
polars.datatypes.classes.Enum.__eq__(self,other:PolarsDataType)->bool
polars.datatypes.classes.Enum.__hash__(self)->int
polars.datatypes.classes.Enum.__init__(self,categories:Series|Iterable[str]|type[enum.Enum])
polars.datatypes.classes.Enum.__repr__(self)->str
polars.datatypes.classes.Enum.union(self,other:Enum)->Enum
polars.datatypes.classes.Field(self,name:str,dtype:PolarsDataType)
polars.datatypes.classes.Field.__eq__(self,other:Field)->bool
polars.datatypes.classes.Field.__hash__(self)->int
polars.datatypes.classes.Field.__init__(self,name:str,dtype:PolarsDataType)
polars.datatypes.classes.Field.__repr__(self)->str
polars.datatypes.classes.Float32(FloatType)
polars.datatypes.classes.Float64(FloatType)
polars.datatypes.classes.FloatType(NumericType)
polars.datatypes.classes.Int128(SignedIntegerType)
polars.datatypes.classes.Int16(SignedIntegerType)
polars.datatypes.classes.Int32(SignedIntegerType)
polars.datatypes.classes.Int64(SignedIntegerType)
polars.datatypes.classes.Int8(SignedIntegerType)
polars.datatypes.classes.IntegerType(NumericType)
polars.datatypes.classes.List(self,inner:PolarsDataType|PythonDataType)
polars.datatypes.classes.List.__eq__(self,other:PolarsDataType)->bool
polars.datatypes.classes.List.__hash__(self)->int
polars.datatypes.classes.List.__init__(self,inner:PolarsDataType|PythonDataType)
polars.datatypes.classes.List.__repr__(self)->str
polars.datatypes.classes.NestedType(DataType)
polars.datatypes.classes.Null(DataType)
polars.datatypes.classes.NumericType(DataType)
polars.datatypes.classes.NumericType.max(cls)->pl.Expr
polars.datatypes.classes.NumericType.min(cls)->pl.Expr
polars.datatypes.classes.Object(ObjectType)
polars.datatypes.classes.ObjectType(DataType)
polars.datatypes.classes.SignedIntegerType(IntegerType)
polars.datatypes.classes.String(DataType)
polars.datatypes.classes.Struct(self,fields:Sequence[Field]|SchemaDict)
polars.datatypes.classes.Struct.__eq__(self,other:PolarsDataType)->bool
polars.datatypes.classes.Struct.__hash__(self)->int
polars.datatypes.classes.Struct.__init__(self,fields:Sequence[Field]|SchemaDict)
polars.datatypes.classes.Struct.__iter__(self)->Iterator[tuple[str, PolarsDataType]]
polars.datatypes.classes.Struct.__repr__(self)->str
polars.datatypes.classes.Struct.__reversed__(self)->Iterator[tuple[str, PolarsDataType]]
polars.datatypes.classes.Struct.to_schema(self)->OrderedDict[str, PolarsDataType]
polars.datatypes.classes.TemporalType(DataType)
polars.datatypes.classes.Time(TemporalType)
polars.datatypes.classes.Time.max(cls)->pl.Expr
polars.datatypes.classes.Time.min(cls)->pl.Expr
polars.datatypes.classes.UInt16(UnsignedIntegerType)
polars.datatypes.classes.UInt32(UnsignedIntegerType)
polars.datatypes.classes.UInt64(UnsignedIntegerType)
polars.datatypes.classes.UInt8(UnsignedIntegerType)
polars.datatypes.classes.Unknown(DataType)
polars.datatypes.classes.UnsignedIntegerType(IntegerType)
polars.datatypes.classes.classinstmethod(classmethod)
polars.datatypes.classes.classinstmethod.__get__(self,instance:Any,type_:type)->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/datatypes/group.py----------------------------------------
A:polars.datatypes.group.dtype_group->super().__new__(cls, items)
A:polars.datatypes.group.item->item.base_type().base_type()
polars.datatypes.group.DataTypeGroup(cls,items:Iterable[DataType|DataTypeClass],*,match_base_type:bool=True)
polars.datatypes.group.DataTypeGroup.__contains__(self,item:Any)->bool
polars.datatypes.group.DataTypeGroup.__new__(cls,items:Iterable[DataType|DataTypeClass],*,match_base_type:bool=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/datatypes/constructor.py----------------------------------------
A:polars.datatypes.constructor.base_type->dtype.base_type()
A:polars.datatypes.constructor.(dtype, cast_as)->_normalise_numpy_dtype(values.dtype)
A:polars.datatypes.constructor.values->values.astype(cast_as).astype(cast_as)
A:polars.datatypes.constructor.first_non_nan->next((v for v in values if isinstance(v, np.ndarray) or v == v), None)
polars.datatypes.constructor._normalise_numpy_dtype(dtype:Any)->tuple[Any, Any]
polars.datatypes.constructor._set_numpy_to_constructor()->None
polars.datatypes.constructor.numpy_type_to_constructor(values:np.ndarray[Any,Any],dtype:type[np.dtype[Any]])->Callable[..., PySeries]
polars.datatypes.constructor.numpy_values_and_dtype(values:np.ndarray[Any,Any])->tuple[np.ndarray[Any, Any], type]
polars.datatypes.constructor.polars_type_to_constructor(dtype:PolarsDataType)->Callable[[str, Sequence[Any], bool], PySeries]
polars.datatypes.constructor.py_type_to_constructor(py_type:type[Any])->Callable[..., PySeries]
polars.datatypes.numpy_type_to_constructor(values:np.ndarray[Any,Any],dtype:type[np.dtype[Any]])->Callable[..., PySeries]
polars.datatypes.numpy_values_and_dtype(values:np.ndarray[Any,Any])->tuple[np.ndarray[Any, Any], type]
polars.datatypes.polars_type_to_constructor(dtype:PolarsDataType)->Callable[[str, Sequence[Any], bool], PySeries]
polars.datatypes.py_type_to_constructor(py_type:type[Any])->Callable[..., PySeries]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/datatypes/constants.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/datatypes/convert.py----------------------------------------
A:polars.datatypes.convert.OptionType->type(Optional[type])
A:polars.datatypes.convert.NoneType->type(None)
A:polars.datatypes.convert.UnionType->type(Union[int, float])
A:polars.datatypes.convert.is_dtype->isinstance(dtype, check_classes)
A:polars.datatypes.convert.DataTypeMappings->_DataTypeMappings()
A:polars.datatypes.convert.dtype->polars.dependencies.numpy.dtype(dtype_char)
A:polars.datatypes.convert.m->re.match('^(\\w+)(?:\\[(.+)\\])?$', dtype_string)
A:polars.datatypes.convert.(dtype_base, subtype)->re.match('^(\\w+)(?:\\[(.+)\\])?$', dtype_string).groups()
A:polars.datatypes.convert.time_unit->getattr(dtype, 'time_unit', 'us')
A:polars.datatypes.convert.py_type->dtype_to_py_type(dtype)
A:polars.datatypes.convert.el->py_type(el)
polars.datatypes.convert._DataTypeMappings
polars.datatypes.convert._DataTypeMappings.DTYPE_TO_FFINAME(self)->dict[PolarsDataType, str]
polars.datatypes.convert._DataTypeMappings.DTYPE_TO_PY_TYPE(self)->dict[PolarsDataType, PythonDataType]
polars.datatypes.convert._DataTypeMappings.NUMPY_KIND_AND_ITEMSIZE_TO_DTYPE(self)->dict[tuple[str, int], PolarsDataType]
polars.datatypes.convert._DataTypeMappings.PY_TYPE_TO_ARROW_TYPE(self)->dict[PythonDataType, pa.lib.DataType]
polars.datatypes.convert._DataTypeMappings.REPR_TO_DTYPE(self)->dict[str, PolarsDataType]
polars.datatypes.convert.dtype_short_repr_to_dtype(dtype_string:str|None)->PolarsDataType | None
polars.datatypes.convert.dtype_to_ffiname(dtype:PolarsDataType)->str
polars.datatypes.convert.dtype_to_py_type(dtype:PolarsDataType)->PythonDataType
polars.datatypes.convert.is_polars_dtype(dtype:Any,*,include_unknown:bool=False,require_instantiated:bool=False)->TypeGuard[PolarsDataType]
polars.datatypes.convert.maybe_cast(el:Any,dtype:PolarsDataType)->Any
polars.datatypes.convert.numpy_char_code_to_dtype(dtype_char:str)->PolarsDataType
polars.datatypes.convert.py_type_to_arrow_type(dtype:PythonDataType)->pa.lib.DataType
polars.datatypes.convert.supported_numpy_char_code(dtype_char:str)->bool
polars.datatypes.convert.unpack_dtypes(*dtypes:PolarsDataType|None,include_compound:bool=False)->set[PolarsDataType]
polars.datatypes.dtype_to_ffiname(dtype:PolarsDataType)->str
polars.datatypes.dtype_to_py_type(dtype:PolarsDataType)->PythonDataType
polars.datatypes.is_polars_dtype(dtype:Any,*,include_unknown:bool=False,require_instantiated:bool=False)->TypeGuard[PolarsDataType]
polars.datatypes.maybe_cast(el:Any,dtype:PolarsDataType)->Any
polars.datatypes.numpy_char_code_to_dtype(dtype_char:str)->PolarsDataType
polars.datatypes.py_type_to_arrow_type(dtype:PythonDataType)->pa.lib.DataType
polars.datatypes.supported_numpy_char_code(dtype_char:str)->bool
polars.datatypes.unpack_dtypes(*dtypes:PolarsDataType|None,include_compound:bool=False)->set[PolarsDataType]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/datatypes/_parse.py----------------------------------------
A:polars.datatypes._parse.UnionTypeOld->type(Union[int, str])
A:polars.datatypes._parse.NoneType->type(None)
A:polars.datatypes._parse.all_equal->all((t in (inner_type, ...) for t in inner_types))
A:polars.datatypes._parse.inner_dtype->parse_py_type_into_dtype(inner_type)
A:polars.datatypes._parse.formatted->re.sub('(^None \\|)|(\\| None$)', '', annotation).strip()
polars.datatypes._parse._parse_forward_ref_into_dtype(input:ForwardRef)->PolarsDataType
polars.datatypes._parse._parse_generic_into_dtype(input:Any)->PolarsDataType
polars.datatypes._parse._parse_union_type_into_dtype(input:Any)->PolarsDataType
polars.datatypes._parse._raise_on_invalid_dtype(input:Any)->NoReturn
polars.datatypes._parse.parse_into_dtype(input:Any)->PolarsDataType
polars.datatypes._parse.parse_py_type_into_dtype(input:PythonDataType|type[object])->PolarsDataType
polars.datatypes._parse.try_parse_into_dtype(input:Any)->PolarsDataType | None
polars.datatypes.parse_into_dtype(input:Any)->PolarsDataType
polars.datatypes.try_parse_into_dtype(input:Any)->PolarsDataType | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/testing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/testing/parametric/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/testing/parametric/profiles.py----------------------------------------
A:polars.testing.parametric.profiles.profile_name->str(int(profile_name))
A:polars.testing.parametric.profiles.n_iterations->int(profile_name.replace('polars.custom.', ''))
A:polars.testing.parametric.profiles.valid_profile_names->get_args(ParametricProfileNames)
polars.testing.parametric.load_profile(profile:ParametricProfileNames|int='fast',*,set_environment:bool=False)->None
polars.testing.parametric.profiles.load_profile(profile:ParametricProfileNames|int='fast',*,set_environment:bool=False)->None
polars.testing.parametric.profiles.set_profile(profile:ParametricProfileNames|int)->None
polars.testing.parametric.set_profile(profile:ParametricProfileNames|int)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/testing/parametric/strategies/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/testing/parametric/strategies/_utils.py----------------------------------------
polars.testing.parametric.strategies._utils.flexhash(elem:Any)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/testing/parametric/strategies/core.py----------------------------------------
A:polars.testing.parametric.strategies.core.allow_null->_handle_null_probability_deprecation(null_prob)
A:polars.testing.parametric.strategies.core.allowed_dtypes->list(allowed_dtypes)
A:polars.testing.parametric.strategies.core.excluded_dtypes->list(excluded_dtypes)
A:polars.testing.parametric.strategies.core.dtype_strat->_instantiate_dtype(dtype, allowed_dtypes=allowed_dtypes, excluded_dtypes=excluded_dtypes, allow_time_zones=allow_time_zones)
A:polars.testing.parametric.strategies.core.dtype->draw(dtype_strat)
A:polars.testing.parametric.strategies.core.size->draw(st.integers(min_value=min_size, max_value=max_size))
A:polars.testing.parametric.strategies.core.name->draw(name)
A:polars.testing.parametric.strategies.core.strategy->data(dtype, allow_null=allow_null and (not do_mask_out), **kwargs)
A:polars.testing.parametric.strategies.core.values->draw(st.lists(st.booleans(), min_size=size, max_size=size, unique_by=flexhash if unique else None))
A:polars.testing.parametric.strategies.core.s->s[:split_at].append(s[split_at:])
A:polars.testing.parametric.strategies.core.mask->Series(name=None, values=values, dtype=Boolean)
A:polars.testing.parametric.strategies.core.n_cols->draw(st.integers(min_value=min_cols, max_value=max_cols))
A:polars.testing.parametric.strategies.core.cols->list(cols)
A:polars.testing.parametric.strategies.core.c.allow_null->_handle_null_probability_deprecation(null_prob).get(c.name, True)
A:polars.testing.parametric.strategies.core.df->df[:split_at].vstack(df[split_at:])
A:polars.testing.parametric.strategies.core.self.allow_null->_handle_null_probability_deprecation(self.null_probability)
polars.testing.parametric.column
polars.testing.parametric.column.__post_init__(self)->None
polars.testing.parametric.dataframes(draw:DrawFn,/,cols:int|column|Sequence[column]|None=None,*,lazy:bool=False,min_cols:int=1,max_cols:int=_COL_LIMIT,min_size:int=0,max_size:int=_ROW_LIMIT,include_cols:Sequence[column]|column|None=None,allow_null:bool|Mapping[str,bool]=True,allow_chunks:bool=True,allow_masked_out:bool=True,allowed_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None,excluded_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None,allow_time_zones:bool=True,**kwargs:Any)->DataFrame | LazyFrame
polars.testing.parametric.series(draw:DrawFn,/,*,name:str|SearchStrategy[str]|None=None,dtype:PolarsDataType|None=None,min_size:int=0,max_size:int=_ROW_LIMIT,strategy:SearchStrategy[Any]|None=None,allow_null:bool=True,allow_chunks:bool=True,allow_masked_out:bool=True,unique:bool=False,allowed_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None,excluded_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None,allow_time_zones:bool=True,**kwargs:Any)->Series
polars.testing.parametric.strategies.core._handle_null_probability_deprecation(null_probability:float|Mapping[str,float])->bool | dict[str, bool]
polars.testing.parametric.strategies.core.column
polars.testing.parametric.strategies.core.column.__post_init__(self)->None
polars.testing.parametric.strategies.core.dataframes(draw:DrawFn,/,cols:int|column|Sequence[column]|None=None,*,lazy:bool=False,min_cols:int=1,max_cols:int=_COL_LIMIT,min_size:int=0,max_size:int=_ROW_LIMIT,include_cols:Sequence[column]|column|None=None,allow_null:bool|Mapping[str,bool]=True,allow_chunks:bool=True,allow_masked_out:bool=True,allowed_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None,excluded_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None,allow_time_zones:bool=True,**kwargs:Any)->DataFrame | LazyFrame
polars.testing.parametric.strategies.core.series(draw:DrawFn,/,*,name:str|SearchStrategy[str]|None=None,dtype:PolarsDataType|None=None,min_size:int=0,max_size:int=_ROW_LIMIT,strategy:SearchStrategy[Any]|None=None,allow_null:bool=True,allow_chunks:bool=True,allow_masked_out:bool=True,unique:bool=False,allowed_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None,excluded_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None,allow_time_zones:bool=True,**kwargs:Any)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/testing/parametric/strategies/dtype.py----------------------------------------
A:polars.testing.parametric.strategies.dtype.(flat_dtypes, nested_dtypes, excluded_dtypes)->_parse_dtype_restrictions(allowed_dtypes, excluded_dtypes)
A:polars.testing.parametric.strategies.dtype.dtype->draw(st.sampled_from(allowed_dtypes))
A:polars.testing.parametric.strategies.dtype.time_unit->draw(_time_units())
A:polars.testing.parametric.strategies.dtype.ordering->draw(_categorical_orderings())
A:polars.testing.parametric.strategies.dtype.n_categories->draw(st.integers(min_value=1, max_value=_DEFAULT_ENUM_CATEGORIES_LIMIT))
A:polars.testing.parametric.strategies.dtype.precision->draw(st.integers(min_value=1, max_value=38) | st.none())
A:polars.testing.parametric.strategies.dtype.scale->draw(st.integers(min_value=0, max_value=precision or 38))
A:polars.testing.parametric.strategies.dtype.inner_dtype->instantiate_inner(getattr(dtype, 'inner', None))
A:polars.testing.parametric.strategies.dtype.size->getattr(dtype, 'size', draw(st.integers(min_value=1, max_value=_DEFAULT_ARRAY_WIDTH_LIMIT)))
A:polars.testing.parametric.strategies.dtype.n_fields->draw(st.integers(min_value=1, max_value=_DEFAULT_STRUCT_FIELDS_LIMIT))
A:polars.testing.parametric.strategies.dtype.chrono_known_tz->set(_known_timezones())
A:polars.testing.parametric.strategies.dtype.inner->draw_inner(getattr(dtype, 'inner', None))
A:polars.testing.parametric.strategies.dtype.inner_strategy->dtypes(allowed_dtypes=allowed_dtypes, excluded_dtypes=excluded_dtypes, nesting_level=nesting_level - 1, allow_time_zones=allow_time_zones)
polars.testing.parametric.dtypes(*,allowed_dtypes:Collection[PolarsDataType]|None=None,excluded_dtypes:Sequence[PolarsDataType]|None=None,allow_time_zones:bool=True,nesting_level:int=3)->SearchStrategy[DataType]
polars.testing.parametric.strategies.dtype._categorical_orderings()->SearchStrategy[CategoricalOrdering]
polars.testing.parametric.strategies.dtype._flat_dtypes(draw:DrawFn,allowed_dtypes:Sequence[PolarsDataType]|None=None,excluded_dtypes:Sequence[PolarsDataType]|None=None,*,allow_time_zones:bool=True)->DataType
polars.testing.parametric.strategies.dtype._instantiate_dtype(draw:DrawFn,dtype:PolarsDataType,*,allowed_dtypes:Collection[PolarsDataType]|None=None,excluded_dtypes:Sequence[PolarsDataType]|None=None,nesting_level:int=3,allow_time_zones:bool=True)->DataType
polars.testing.parametric.strategies.dtype._instantiate_flat_dtype(draw:DrawFn,dtype:PolarsDataType,*,allow_time_zones:bool=True)->DataType
polars.testing.parametric.strategies.dtype._instantiate_nested_dtype(draw:DrawFn,dtype:PolarsDataType,inner:SearchStrategy[DataType],*,allow_time_zones:bool=True)->DataType
polars.testing.parametric.strategies.dtype._nested_dtypes(draw:DrawFn,inner:SearchStrategy[DataType],allowed_dtypes:Sequence[PolarsDataType]|None=None,excluded_dtypes:Sequence[PolarsDataType]|None=None,*,allow_time_zones:bool=True)->DataType
polars.testing.parametric.strategies.dtype._parse_dtype_restrictions(allowed_dtypes:Collection[PolarsDataType]|None=None,excluded_dtypes:Sequence[PolarsDataType]|None=None)->tuple[list[PolarsDataType], list[PolarsDataType], list[DataType]]
polars.testing.parametric.strategies.dtype._time_units()->SearchStrategy[TimeUnit]
polars.testing.parametric.strategies.dtype._time_zones()->SearchStrategy[str]
polars.testing.parametric.strategies.dtype.dtypes(*,allowed_dtypes:Collection[PolarsDataType]|None=None,excluded_dtypes:Sequence[PolarsDataType]|None=None,allow_time_zones:bool=True,nesting_level:int=3)->SearchStrategy[DataType]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/testing/parametric/strategies/data.py----------------------------------------
A:polars.testing.parametric.strategies.data.alphabet->hypothesis.strategies.characters(max_codepoint=1000, exclude_categories=['Cs', 'Cc'])
A:polars.testing.parametric.strategies.data.time_zone_info->ZoneInfo(time_zone)
A:polars.testing.parametric.strategies.data.c->decimal.Context(prec=precision)
A:polars.testing.parametric.strategies.data.exclusive_limit->decimal.Context(prec=precision).create_decimal(f'1E+{precision - scale}')
A:polars.testing.parametric.strategies.data.max_value->decimal.Context(prec=precision).next_minus(exclusive_limit)
A:polars.testing.parametric.strategies.data.min_value->decimal.Context(prec=precision).copy_negate(max_value)
A:polars.testing.parametric.strategies.data.inner_strategy->data(inner_dtype, select_from=select_from, min_size=min_size, max_size=max_size, unique=unique, **kwargs)
A:polars.testing.parametric.strategies.data.strategy->structs(fields, allow_null=allow_null, **kwargs)
A:polars.testing.parametric.strategies.data.size->getattr(dtype, 'size', _DEFAULT_ARRAY_WIDTH_LIMIT)
polars.testing.parametric.lists(inner_dtype:DataType,*,select_from:Sequence[Any]|None=None,min_size:int=0,max_size:int|None=None,unique:bool=False,**kwargs:Any)->SearchStrategy[list[Any]]
polars.testing.parametric.strategies.data.binary()->SearchStrategy[bytes]
polars.testing.parametric.strategies.data.booleans()->SearchStrategy[bool]
polars.testing.parametric.strategies.data.categories(n_categories:int=_DEFAULT_N_CATEGORIES)->SearchStrategy[str]
polars.testing.parametric.strategies.data.data(dtype:PolarsDataType,*,allow_null:bool=False,**kwargs:Any)->SearchStrategy[Any]
polars.testing.parametric.strategies.data.dates()->SearchStrategy[date]
polars.testing.parametric.strategies.data.datetimes(time_unit:TimeUnit='us',time_zone:str|None=None)->SearchStrategy[datetime]
polars.testing.parametric.strategies.data.decimals(precision:int|None=38,scale:int=0)->SearchStrategy[decimal.Decimal]
polars.testing.parametric.strategies.data.durations(time_unit:TimeUnit='us')->SearchStrategy[timedelta]
polars.testing.parametric.strategies.data.floats(bit_width:Literal[32,64]=64,*,allow_infinity:bool=True)->SearchStrategy[float]
polars.testing.parametric.strategies.data.integers(bit_width:Literal[8,16,32,64,128]=64,*,signed:bool=True)->SearchStrategy[int]
polars.testing.parametric.strategies.data.lists(inner_dtype:DataType,*,select_from:Sequence[Any]|None=None,min_size:int=0,max_size:int|None=None,unique:bool=False,**kwargs:Any)->SearchStrategy[list[Any]]
polars.testing.parametric.strategies.data.nulls()->SearchStrategy[None]
polars.testing.parametric.strategies.data.objects()->SearchStrategy[object]
polars.testing.parametric.strategies.data.strings()->SearchStrategy[str]
polars.testing.parametric.strategies.data.structs(fields:Sequence[Field]|SchemaDict,*,allow_null:bool=True,**kwargs:Any)->SearchStrategy[dict[str, Any]]
polars.testing.parametric.strategies.data.times()->SearchStrategy[time]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/testing/parametric/strategies/legacy.py----------------------------------------
A:polars.testing.parametric.strategies.legacy.cols->hypothesis.strategies.integers(min_value=min_cols, max_value=max_cols).example()
A:polars.testing.parametric.strategies.legacy.n_cols->len(names)
A:polars.testing.parametric.strategies.legacy.inner_dtype->_instantiate_dtype(inner_dtype).example()
polars.testing.parametric.columns(cols:int|Sequence[str]|None=None,*,dtype:OneOrMoreDataTypes|None=None,min_cols:int=0,max_cols:int=_COL_LIMIT,unique:bool=False)->list[column]
polars.testing.parametric.create_list_strategy(inner_dtype:PolarsDataType|None=None,*,select_from:Sequence[Any]|None=None,size:int|None=None,min_size:int=0,max_size:int|None=None,unique:bool=False)->SearchStrategy[list[Any]]
polars.testing.parametric.strategies.legacy.columns(cols:int|Sequence[str]|None=None,*,dtype:OneOrMoreDataTypes|None=None,min_cols:int=0,max_cols:int=_COL_LIMIT,unique:bool=False)->list[column]
polars.testing.parametric.strategies.legacy.create_list_strategy(inner_dtype:PolarsDataType|None=None,*,select_from:Sequence[Any]|None=None,size:int|None=None,min_size:int=0,max_size:int|None=None,unique:bool=False)->SearchStrategy[list[Any]]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/testing/asserts/frame.py----------------------------------------
A:polars.testing.asserts.frame.lazy->_assert_correct_input_type(left, right)
A:polars.testing.asserts.frame.(left, right)->_sort_dataframes(left, right)
A:polars.testing.asserts.frame.left->left.sort(by).sort(by)
A:polars.testing.asserts.frame.right->right.sort(by).sort(by)
polars.testing.assert_frame_equal(left:DataFrame|LazyFrame,right:DataFrame|LazyFrame,*,check_row_order:bool=True,check_column_order:bool=True,check_dtypes:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,categorical_as_str:bool=False)->None
polars.testing.assert_frame_not_equal(left:DataFrame|LazyFrame,right:DataFrame|LazyFrame,*,check_row_order:bool=True,check_column_order:bool=True,check_dtypes:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,categorical_as_str:bool=False)->None
polars.testing.asserts.frame._assert_correct_input_type(left:DataFrame|LazyFrame,right:DataFrame|LazyFrame)->bool
polars.testing.asserts.frame._assert_frame_schema_equal(left:DataFrame|LazyFrame,right:DataFrame|LazyFrame,*,check_dtypes:bool,check_column_order:bool,objects:str)->None
polars.testing.asserts.frame._sort_dataframes(left:DataFrame,right:DataFrame)->tuple[DataFrame, DataFrame]
polars.testing.asserts.frame.assert_frame_equal(left:DataFrame|LazyFrame,right:DataFrame|LazyFrame,*,check_row_order:bool=True,check_column_order:bool=True,check_dtypes:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,categorical_as_str:bool=False)->None
polars.testing.asserts.frame.assert_frame_not_equal(left:DataFrame|LazyFrame,right:DataFrame|LazyFrame,*,check_row_order:bool=True,check_column_order:bool=True,check_dtypes:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,categorical_as_str:bool=False)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/testing/asserts/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/testing/asserts/series.py----------------------------------------
A:polars.testing.asserts.series.left->left.sort().sort()
A:polars.testing.asserts.series.right->right.sort().sort()
A:polars.testing.asserts.series.(left, right)->_sort_series(left, right)
A:polars.testing.asserts.series.unequal->left.sort().sort().ne_missing(right)
A:polars.testing.asserts.series.difference->(left_unequal - right_unequal).abs()
A:polars.testing.asserts.series.noncat_dtype->_categorical_dtype_to_string_dtype(dtype)
A:polars.testing.asserts.series.s->s.cast(noncat_dtype).cast(noncat_dtype)
A:polars.testing.asserts.series.inner_cast->_categorical_dtype_to_string_dtype(dtype.inner)
polars.testing.assert_series_equal(left:Series,right:Series,*,check_dtypes:bool=True,check_names:bool=True,check_order:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,categorical_as_str:bool=False)->None
polars.testing.assert_series_not_equal(left:Series,right:Series,*,check_dtypes:bool=True,check_names:bool=True,check_order:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,categorical_as_str:bool=False)->None
polars.testing.asserts.series._assert_correct_input_type(left:Any,right:Any)->bool
polars.testing.asserts.series._assert_series_nan_values_match(left:Series,right:Series)->None
polars.testing.asserts.series._assert_series_nested_values_equal(left:Series,right:Series,*,check_exact:bool,rtol:float,atol:float,categorical_as_str:bool)->None
polars.testing.asserts.series._assert_series_null_values_match(left:Series,right:Series)->None
polars.testing.asserts.series._assert_series_values_equal(left:Series,right:Series,*,check_order:bool,check_exact:bool,rtol:float,atol:float,categorical_as_str:bool)->None
polars.testing.asserts.series._assert_series_values_within_tolerance(left:Series,right:Series,unequal:Series,*,rtol:float,atol:float)->None
polars.testing.asserts.series._categorical_dtype_to_string_dtype(dtype:DataType)->DataType
polars.testing.asserts.series._categorical_series_to_string(s:Series)->Series
polars.testing.asserts.series._comparing_floats(left:DataType,right:DataType)->bool
polars.testing.asserts.series._comparing_lists(left:DataType,right:DataType)->bool
polars.testing.asserts.series._comparing_nested_floats(left:DataType,right:DataType)->bool
polars.testing.asserts.series._comparing_structs(left:DataType,right:DataType)->bool
polars.testing.asserts.series._sort_series(left:Series,right:Series)->tuple[Series, Series]
polars.testing.asserts.series.assert_series_equal(left:Series,right:Series,*,check_dtypes:bool=True,check_names:bool=True,check_order:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,categorical_as_str:bool=False)->None
polars.testing.asserts.series.assert_series_not_equal(left:Series,right:Series,*,check_dtypes:bool=True,check_names:bool=True,check_order:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,categorical_as_str:bool=False)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/testing/asserts/utils.py----------------------------------------
polars.testing.asserts.utils.raise_assertion_error(objects:str,detail:str,left:Any,right:Any,*,cause:Exception|None=None)->NoReturn


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/unstable.py----------------------------------------
A:polars._utils.unstable.P->ParamSpec('P')
A:polars._utils.unstable.T->TypeVar('T')
A:polars._utils.unstable.warnings_enabled->bool(int(os.environ.get('POLARS_WARN_UNSTABLE', 0)))
A:polars._utils.unstable.wrapper.__signature__->inspect.signature(function)
polars._utils.unstable.issue_unstable_warning(message:str|None=None)->None
polars._utils.unstable.unstable()->Callable[[Callable[P, T]], Callable[P, T]]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/cloud.py----------------------------------------
A:polars._utils.cloud.pylf->lf._set_sink_optimizations(engine='old-streaming', **optimizations)
polars._utils.cloud.prepare_cloud_plan(lf:LazyFrame,**optimizations:bool)->bytes


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/pycapsule.py----------------------------------------
A:polars._utils.pycapsule.s->wrap_s(PySeries.from_arrow_c_stream(obj))
A:polars._utils.pycapsule.df->wrap_df(dataframe_to_pydf(df, schema=schema, schema_overrides=schema_overrides))
polars._utils.pycapsule.is_pycapsule(obj:Any)->bool
polars._utils.pycapsule.pycapsule_to_frame(obj:Any,*,schema:SchemaDefinition|None=None,schema_overrides:SchemaDict|None=None,rechunk:bool=False)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/getitem.py----------------------------------------
A:polars._utils.getitem.key->range_to_slice(key)
A:polars._utils.getitem.indices->_convert_np_ndarray_to_indices(key, df.height)
A:polars._utils.getitem.selection->_select_columns(df, col_key)
A:polars._utils.getitem.start->df.get_column_index(start)
A:polars._utils.getitem.int_slice->slice(start, stop, step)
A:polars._utils.getitem.s->polars._reexport.Series('', key, dtype=Int64)
A:polars._utils.getitem.idx_type->get_index_type()
A:polars._utils.getitem.arr->polars.dependencies.numpy.where(arr < 0, size + arr, arr)
polars._utils.getitem._convert_np_ndarray_to_indices(arr:np.ndarray[Any,Any],size:int)->Series
polars._utils.getitem._convert_series_to_indices(s:Series,size:int)->Series
polars._utils.getitem._raise_on_boolean_mask()->NoReturn
polars._utils.getitem._select_columns(df:DataFrame,key:SingleColSelector|MultiColSelector)->DataFrame | Series
polars._utils.getitem._select_columns_by_index(df:DataFrame,key:Iterable[int])->DataFrame
polars._utils.getitem._select_columns_by_mask(df:DataFrame,key:Sequence[bool]|Series|np.ndarray[Any,Any])->DataFrame
polars._utils.getitem._select_columns_by_name(df:DataFrame,key:Iterable[str])->DataFrame
polars._utils.getitem._select_elements_by_index(s:Series,key:Series)->Series
polars._utils.getitem._select_elements_by_slice(s:Series,key:slice)->Series
polars._utils.getitem._select_rows(df:DataFrame,key:SingleIndexSelector|MultiIndexSelector)->DataFrame | Series
polars._utils.getitem._select_rows_by_index(df:DataFrame,key:Series)->DataFrame
polars._utils.getitem._select_rows_by_slice(df:DataFrame,key:slice)->DataFrame
polars._utils.getitem.get_df_item_by_key(df:DataFrame,key:SingleIndexSelector|SingleColSelector|MultiColSelector|MultiIndexSelector|tuple[SingleIndexSelector,SingleColSelector]|tuple[SingleIndexSelector,MultiColSelector]|tuple[MultiIndexSelector,SingleColSelector]|tuple[MultiIndexSelector,MultiColSelector])->DataFrame | Series | Any
polars._utils.getitem.get_series_item_by_key(s:Series,key:SingleIndexSelector|MultiIndexSelector)->Any | Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/scan.py----------------------------------------
polars._utils._execute_from_rust(function:Any,with_columns:list[str]|None,*args:Any)->DataFrame
polars._utils.scan._execute_from_rust(function:Any,with_columns:list[str]|None,*args:Any)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/polars_version.py----------------------------------------
polars._get_polars_version()->str
polars._utils.polars_version.get_polars_version()->str


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/logging.py----------------------------------------
A:polars._utils.logging.eprint->partial(print, file=sys.stderr)
polars._utils.logging.verbose()->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/async_.py----------------------------------------
A:polars._utils.async_.T->TypeVar('T')
A:polars._utils.async_.self._result->AsyncResult()
A:polars._utils.async_.self._watcher->get_hub().loop.async_()
A:polars._utils.async_.obj->wrap_df(obj)
A:polars._utils.async_.self.loop->get_event_loop()
polars._utils.async_._AioDataFrameResult(self)
polars._utils.async_._AioDataFrameResult.__await__(self)->Generator[Any, None, T]
polars._utils.async_._AioDataFrameResult.__init__(self)
polars._utils.async_._AioDataFrameResult._callback(self,obj:PyDataFrame|Exception)->None
polars._utils.async_._AioDataFrameResult._callback_all(self,obj:list[PyDataFrame]|Exception)->None
polars._utils.async_._GeventDataFrameResult(self)
polars._utils.async_._GeventDataFrameResult.__init__(self)
polars._utils.async_._GeventDataFrameResult._callback(self,obj:PyDataFrame|Exception)->None
polars._utils.async_._GeventDataFrameResult._callback_all(self,obj:list[PyDataFrame]|Exception)->None
polars._utils.async_._GeventDataFrameResult._watcher_callback(self)->None
polars._utils.async_._GeventDataFrameResult.get(self,block:bool=True,timeout:float|int|None=None)->T
polars._utils.async_._GeventDataFrameResult.result(self)->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/wrap.py----------------------------------------
polars._utils.wrap.wrap_df(df:PyDataFrame)->DataFrame
polars._utils.wrap.wrap_expr(pyexpr:PyExpr)->Expr
polars._utils.wrap.wrap_ldf(ldf:PyLazyFrame)->LazyFrame
polars._utils.wrap.wrap_s(s:PySeries)->Series
polars.wrap_df(df:PyDataFrame)->DataFrame
polars.wrap_s(s:PySeries)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/deprecation.py----------------------------------------
A:polars._utils.deprecation.P->ParamSpec('P')
A:polars._utils.deprecation.T->TypeVar('T')
A:polars._utils.deprecation.wrapper.__signature__->inspect.signature(function)
A:polars._utils.deprecation.kwargs[new_name]->kwargs.pop(old_name)
A:polars._utils.deprecation.old_sig->inspect.signature(function)
A:polars._utils.deprecation.new_sig->inspect.signature(function).replace(parameters=new_params)
A:polars._utils.deprecation.num_allowed_args->len(allow_args)
A:polars._utils.deprecation.msg->msg_format.format(except_args=_format_argument_list(allow_args))
A:polars._utils.deprecation.args->', '.join([f'{x!r}' for x in allowed_args[:-1]])
A:polars._utils.deprecation.arg_value->tuple(arg_value)
polars._utils.deprecation._format_argument_list(allowed_args:list[str])->str
polars._utils.deprecation._rename_keyword_argument(old_name:str,new_name:str,kwargs:dict[str,object],func_name:str,version:str)->None
polars._utils.deprecation.deprecate_function(message:str,*,version:str)->Callable[[Callable[P, T]], Callable[P, T]]
polars._utils.deprecation.deprecate_nonkeyword_arguments(allowed_args:list[str]|None=None,message:str|None=None,*,version:str)->Callable[[Callable[P, T]], Callable[P, T]]
polars._utils.deprecation.deprecate_parameter_as_multi_positional(old_name:str,*,version:str)->Callable[[Callable[P, T]], Callable[P, T]]
polars._utils.deprecation.deprecate_renamed_function(new_name:str,*,version:str)->Callable[[Callable[P, T]], Callable[P, T]]
polars._utils.deprecation.deprecate_renamed_parameter(old_name:str,new_name:str,*,version:str)->Callable[[Callable[P, T]], Callable[P, T]]
polars._utils.deprecation.deprecate_streaming_parameter()->Callable[[Callable[P, T]], Callable[P, T]]
polars._utils.deprecation.issue_deprecation_warning(message:str,*,version:str)->None
polars.issue_deprecation_warning(message:str,*,version:str)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/constants.py----------------------------------------
A:polars._utils.constants.EPOCH_DATE->date(1970, 1, 1)
A:polars._utils.constants.EPOCH->datetime(1970, 1, 1).replace(tzinfo=None)
A:polars._utils.constants.EPOCH_UTC->datetime(1970, 1, 1, tzinfo=timezone.utc)


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/nest_asyncio.py----------------------------------------
A:polars._utils.nest_asyncio.loop->self.new_event_loop()
A:polars._utils.nest_asyncio.task->asyncio.ensure_future(main)
A:polars._utils.nest_asyncio.policy->asyncio.events.get_event_loop_policy()
A:polars._utils.nest_asyncio.f->asyncio.ensure_future(future, loop=self)
A:polars._utils.nest_asyncio.event_list->self._selector.select(timeout)
A:polars._utils.nest_asyncio.handle->ready.popleft()
A:polars._utils.nest_asyncio.curr_task->curr_tasks.pop(self, None)
A:polars._utils.nest_asyncio.old_running_loop->asyncio.events._get_running_loop()
A:polars._utils.nest_asyncio.self._thread_id->threading.get_ident()
A:polars._utils.nest_asyncio.old_agen_hooks->sys.get_asyncgen_hooks()
polars._utils.nest_asyncio._patch_asyncio()
polars._utils.nest_asyncio._patch_loop(loop)
polars._utils.nest_asyncio._patch_policy()
polars._utils.nest_asyncio._patch_tornado()
polars._utils.nest_asyncio.apply(loop=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/various.py----------------------------------------
A:polars._utils.various.P->ParamSpec('P')
A:polars._utils.various.T->TypeVar('T')
A:polars._utils.various._reverse_mapping_views->tuple((type(reversed(view)) for view in _views))
A:polars._utils.various.range->polars.functions.int_range(start=rng.start, end=rng.stop, step=rng.step, eager=True).cast(dtype)
A:polars._utils.various.path->os.path.expanduser(path)
A:polars._utils.various.version->version.split('.').split('.')
A:polars._utils.various.tp_base->Datetime(tp.time_unit)
A:polars._utils.various.d->polars.functions.col(c).str.replace('[A-Z ]+$', '')
A:polars._utils.various.cast_cols[c]->polars.functions.col(c).cast(tp)
A:polars._utils.various.int_string->polars.functions.col(c).str.replace_all('[^\\d+-]', '')
A:polars._utils.various.integer_part->polars.functions.col(c).str.replace('^(.*)\\D(\\d*)$', '$1')
A:polars._utils.various.fractional_part->polars.functions.col(c).str.replace('^(.*)\\D(\\d*)$', '$2')
A:polars._utils.various.NS->TypeVar('NS')
A:polars._utils.various.BUILDING_SPHINX_DOCS->os.getenv('BUILDING_SPHINX_DOCS')
A:polars._utils.various.pkg_dir->str(Path(pl.__file__).parent)
A:polars._utils.various.frame->inspect.currentframe()
A:polars._utils.various.fname->inspect.getfile(frame)
A:polars._utils.various.of_type->tuple(of_type)
A:polars._utils.various.named->set(named)
A:polars._utils.various.stack_frame->getattr(stack_frame, 'f_back', None)
A:polars._utils.various.local_items->list(stack_frame.f_locals.items())
A:polars._utils.various.sub_50_percentiles->sorted((p for p in percentiles if p < 0.5))
A:polars._utils.various.at_or_above_50_percentiles->sorted((p for p in percentiles if p >= 0.5))
A:polars._utils.various.graph->polars.dependencies.subprocess.check_output(['dot', '-Nshape=box', '-T' + output_type], input=f'{dot}'.encode())
A:polars._utils.various.img->matplotlib.image.imread(BytesIO(graph))
polars._utils._polars_warn(msg:str,category:type[Warning]=UserWarning)->None
polars._utils.is_column(obj:Any)->bool
polars._utils.various._NoDefault(Enum)
polars._utils.various._NoDefault.__repr__(self)->str
polars._utils.various._cast_repr_strings_with_schema(df:DataFrame,schema:dict[str,PolarsDataType|None])->DataFrame
polars._utils.various._get_stack_locals(of_type:type|Collection[type]|Callable[[Any],bool]|None=None,*,named:str|Collection[str]|None=None,n_objects:int|None=None,n_frames:int|None=None)->dict[str, Any]
polars._utils.various._in_notebook()->bool
polars._utils.various._is_generator(val:object|Iterator[T])->TypeIs[Iterator[T]]
polars._utils.various._is_iterable_of(val:Iterable[object],eltype:type|tuple[type,...])->bool
polars._utils.various._polars_warn(msg:str,category:type[Warning]=UserWarning)->None
polars._utils.various._process_null_values(null_values:None|str|Sequence[str]|dict[str,str]=None)->None | str | Sequence[str] | list[tuple[str, str]]
polars._utils.various.arrlen(obj:Any)->int | None
polars._utils.various.deduplicate_names(names:Iterable[str])->list[str]
polars._utils.various.display_dot_graph(*,dot:str,show:bool=True,output_path:str|Path|None=None,raw_output:bool=False,figsize:tuple[float,float]=(16.0,12.0))->str | None
polars._utils.various.extend_bool(value:bool|Sequence[bool],n_match:int,value_name:str,match_name:str)->Sequence[bool]
polars._utils.various.find_stacklevel()->int
polars._utils.various.in_terminal_that_supports_colour()->bool
polars._utils.various.is_bool_sequence(val:object,*,include_series:bool=False)->TypeGuard[Sequence[bool]]
polars._utils.various.is_column(obj:Any)->bool
polars._utils.various.is_int_sequence(val:object,*,include_series:bool=False)->TypeGuard[Sequence[int]]
polars._utils.various.is_path_or_str_sequence(val:object,*,allow_str:bool=False,include_series:bool=False)->TypeGuard[Sequence[str | Path]]
polars._utils.various.is_sequence(val:object,*,include_series:bool=False)->TypeGuard[Sequence[Any]]
polars._utils.various.is_str_sequence(val:object,*,allow_str:bool=False,include_series:bool=False)->TypeGuard[Sequence[str]]
polars._utils.various.issue_warning(message:str,category:type[Warning],**kwargs:Any)->None
polars._utils.various.normalize_filepath(path:str|Path,*,check_not_directory:bool=True)->str
polars._utils.various.ordered_unique(values:Sequence[Any])->list[Any]
polars._utils.various.parse_percentiles(percentiles:Sequence[float]|float|None,*,inject_median:bool=False)->Sequence[float]
polars._utils.various.parse_version(version:Sequence[str|int])->tuple[int, ...]
polars._utils.various.range_to_series(name:str,rng:range,dtype:PolarsDataType|None=None)->pl.Series
polars._utils.various.range_to_slice(rng:range)->slice
polars._utils.various.re_escape(s:str)->str
polars._utils.various.scale_bytes(sz:int|Expr,unit:SizeUnit)->int | float | Expr
polars._utils.various.sphinx_accessor(property)
polars._utils.various.sphinx_accessor.__get__(self,instance:Any,cls:type[NS])->NS
polars._utils.various.warn_null_comparison(obj:Any)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/slice.py----------------------------------------
A:polars._utils.slice.frame->lazy.collect()
A:polars._utils.slice.stride->abs(self.stride)
A:polars._utils.slice.lazyslice->self.obj.slice(start, slice_length).slice(self.stop + 1, self.slice_length).reverse()
A:polars._utils.slice.obj_len->len(self.obj)
A:polars._utils.slice.(start, stop, stride)->slice(s.start, s.stop, s.step).indices(obj_len)
A:polars._utils.slice.lazyobj->self._lazify(self.obj)
A:polars._utils.slice.obj->self.obj.slice(start, slice_length)
polars._utils.slice.LazyPolarsSlice(self,obj:LazyFrame)
polars._utils.slice.LazyPolarsSlice.__init__(self,obj:LazyFrame)
polars._utils.slice.LazyPolarsSlice.apply(self,s:slice)->LazyFrame
polars._utils.slice.PolarsSlice(self,obj:FrameOrSeries)
polars._utils.slice.PolarsSlice.__init__(self,obj:FrameOrSeries)
polars._utils.slice.PolarsSlice._as_original(lazy:LazyFrame,original:FrameOrSeries)->FrameOrSeries
polars._utils.slice.PolarsSlice._lazify(obj:FrameOrSeries)->LazyFrame
polars._utils.slice.PolarsSlice._slice_negative(self,obj:LazyFrame)->LazyFrame
polars._utils.slice.PolarsSlice._slice_positive(self,obj:LazyFrame)->LazyFrame
polars._utils.slice.PolarsSlice._slice_setup(self,s:slice)->None
polars._utils.slice.PolarsSlice.apply(self,s:slice)->FrameOrSeries


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/serde.py----------------------------------------
A:polars._utils.serde.serialized->serialize_to_bytes()
A:polars._utils.serde.serialized_str->serialize_to_bytes().decode()
A:polars._utils.serde.file->normalize_filepath(file)
polars._utils.serde.serialize_polars_object(serializer:Callable[[IOBase|str],None],file:IOBase|str|Path|None,format:SerializationFormat)->bytes | str | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/udfs.py----------------------------------------
A:polars._utils.udfs.CALL->frozenset({'CALL'} if _MIN_PY311 else {'CALL_FUNCTION', 'CALL_METHOD'})
A:polars._utils.udfs.LOAD_VALUES->frozenset(('LOAD_CONST', 'LOAD_DEREF', 'LOAD_FAST', 'LOAD_GLOBAL'))
A:polars._utils.udfs.LOAD_ATTR->frozenset({'LOAD_METHOD', 'LOAD_ATTR'})
A:polars._utils.udfs.PARSEABLE_OPS->frozenset({'BINARY_OP', 'BINARY_SUBSCR', 'COMPARE_OP', 'CONTAINS_OP', 'IS_OP'} | set(UNARY) | set(CONTROL_FLOW) | set(SYNTHETIC) | LOAD_VALUES)
A:polars._utils.udfs.UNARY_VALUES->frozenset(UNARY.values())
A:polars._utils.udfs._MATH_FUNCTIONS->frozenset(('acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil', 'cos', 'cosh', 'degrees', 'exp', 'floor', 'log', 'log10', 'log1p', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh'))
A:polars._utils.udfs._NUMPY_MODULE_ALIASES->frozenset(('np', 'numpy'))
A:polars._utils.udfs._NUMPY_FUNCTIONS->frozenset(('arccos', 'arccosh', 'arcsin', 'arcsinh', 'arctan', 'arctanh', 'cbrt', 'ceil', 'cos', 'cosh', 'degrees', 'exp', 'floor', 'log', 'log10', 'log1p', 'radians', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh'))
A:polars._utils.udfs._RE_IMPLICIT_BOOL->re.compile('pl\\.col\\("([^"]*)"\\) & pl\\.col\\("\\1"\\)\\.(.+)')
A:polars._utils.udfs._RE_STRIP_BOOL->re.compile('^bool\\((.+)\\)$')
A:polars._utils.udfs.frame->inspect.currentframe()
A:polars._utils.udfs.fname->inspect.getfile(frame)
A:polars._utils.udfs.search_expr->expression.replace(col_expr, '')
A:polars._utils.udfs.n->count()
A:polars._utils.udfs.original_instructions->iter([])
A:polars._utils.udfs.self._param_name->self._get_param_name(function)
A:polars._utils.udfs.self._rewritten_instructions->self._rewrite(normalised_instructions)
A:polars._utils.udfs.expr->re.compile('pl\\.col\\("([^"]*)"\\) & pl\\.col\\("\\1"\\)\\.(.+)').sub(repl='pl.col("\\1").\\2', string=expr)
A:polars._utils.udfs.sig->signature(function)
A:polars._utils.udfs.control_flow_blocks->defaultdict(list)
A:polars._utils.udfs.expression_strings->self._inject_nesting({offset: InstructionTranslator(instructions=ops, caller_variables=self._caller_variables, map_target=self._map_target, function=self._function).to_expression(col=col, param_name=self._param_name, depth=int(bool(logical_instructions))) for (offset, ops) in control_flow_blocks.items()}, logical_instructions)
A:polars._utils.udfs.polars_expr->self._omit_implicit_bool(polars_expr)
A:polars._utils.udfs.target_name->_get_target_name(col, suggestion, map_target)
A:polars._utils.udfs.self._stack->self._to_intermediate_stack(instructions, map_target)
A:polars._utils.udfs.op->re.compile('^bool\\((.+)\\)$').sub('\\1', value.operator)
A:polars._utils.udfs.e1->self._expr(value.left_operand, col, param_name, depth + 1)
A:polars._utils.udfs.e2->self._expr(value.right_operand, col, param_name, depth + 1)
A:polars._utils.udfs.self._caller_variables->_get_all_caller_variables()
A:polars._utils.udfs._ignored_ops->frozenset(['COPY', 'COPY_FREE_VARS', 'POP_TOP', 'PRECALL', 'PUSH_NULL', 'RESUME', 'RETURN_VALUE', 'TO_BOOL'])
A:polars._utils.udfs.self._original_instructions->list(instructions)
A:polars._utils.udfs.upgraded_inst->self._upgrade_instruction(inst)
A:polars._utils.udfs.px->inst._replace(argrepr=OpNames.BINARY[inst.opname], opname='BINARY_OP')._replace(opname='POLARS_EXPRESSION', argval=expr, argrepr=expr)
A:polars._utils.udfs.operand->swap_inst._replace(offset=inst1.offset)
A:polars._utils.udfs.attribute_count->len(function_kind['attribute_name'])
A:polars._utils.udfs.expr_name->_MODULE_FUNC_TO_EXPR_NAME.get(f'math.{func_name}', func_name)
A:polars._utils.udfs.rx->'|'.join((re_escape(v) for v in param_value))
A:polars._utils.udfs.inst->inst._replace(argrepr=OpNames.BINARY[inst.opname], opname='BINARY_OP')._replace(argrepr=OpNames.BINARY[inst.opname], opname='BINARY_OP')
A:polars._utils.udfs.parser->BytecodeParser(function, map_target)
A:polars._utils.udfs.(module, suggestion)->_raw_function_meta(function)
polars._utils.udfs.BytecodeParser(self,function:Callable[[Any],Any],map_target:MapTarget)
polars._utils.udfs.BytecodeParser.__init__(self,function:Callable[[Any],Any],map_target:MapTarget)
polars._utils.udfs.BytecodeParser._get_param_name(function:Callable[[Any],Any])->str | None
polars._utils.udfs.BytecodeParser._inject_nesting(self,expression_blocks:dict[int,str],logical_instructions:list[Instruction])->list[tuple[int, str]]
polars._utils.udfs.BytecodeParser._omit_implicit_bool(self,expr:str)->str
polars._utils.udfs.BytecodeParser.can_attempt_rewrite(self)->bool
polars._utils.udfs.BytecodeParser.dis(self)->None
polars._utils.udfs.BytecodeParser.function(self)->Callable[[Any], Any]
polars._utils.udfs.BytecodeParser.map_target(self)->MapTarget
polars._utils.udfs.BytecodeParser.original_instructions(self)->list[Instruction]
polars._utils.udfs.BytecodeParser.param_name(self)->str | None
polars._utils.udfs.BytecodeParser.rewritten_instructions(self)->list[Instruction]
polars._utils.udfs.BytecodeParser.to_expression(self,col:str)->str | None
polars._utils.udfs.BytecodeParser.warn(self,col:str,*,suggestion_override:str|None=None,udf_override:str|None=None)->None
polars._utils.udfs.InstructionTranslator(self,instructions:list[Instruction],caller_variables:dict[str,Any]|None,function:Callable[[Any],Any],map_target:MapTarget)
polars._utils.udfs.InstructionTranslator.__init__(self,instructions:list[Instruction],caller_variables:dict[str,Any]|None,function:Callable[[Any],Any],map_target:MapTarget)
polars._utils.udfs.InstructionTranslator._expr(self,value:StackEntry,col:str,param_name:str,depth:int)->str
polars._utils.udfs.InstructionTranslator._to_intermediate_stack(self,instructions:list[Instruction],map_target:MapTarget)->StackEntry
polars._utils.udfs.InstructionTranslator.op(inst:Instruction)->str
polars._utils.udfs.InstructionTranslator.to_expression(self,col:str,param_name:str,depth:int)->str
polars._utils.udfs.OpNames
polars._utils.udfs.RewrittenInstructions(self,instructions:Iterator[Instruction],function:Callable[[Any],Any],caller_variables:dict[str,Any]|None)
polars._utils.udfs.RewrittenInstructions.__getitem__(self,item:Any)->Instruction
polars._utils.udfs.RewrittenInstructions.__init__(self,instructions:Iterator[Instruction],function:Callable[[Any],Any],caller_variables:dict[str,Any]|None)
polars._utils.udfs.RewrittenInstructions.__iter__(self)->Iterator[Instruction]
polars._utils.udfs.RewrittenInstructions.__len__(self)->int
polars._utils.udfs.RewrittenInstructions._is_stdlib_datetime(self,function_name:str,module_name:str,attribute_count:int)->bool
polars._utils.udfs.RewrittenInstructions._matches(self,idx:int,*,opnames:list[AbstractSet[str]],argvals:list[AbstractSet[Any]|dict[Any,Any]|None]|None,is_attr:bool=False)->list[Instruction]
polars._utils.udfs.RewrittenInstructions._rewrite(self,instructions:list[Instruction])->list[Instruction]
polars._utils.udfs.RewrittenInstructions._rewrite_attrs(self,idx:int,updated_instructions:list[Instruction])->int
polars._utils.udfs.RewrittenInstructions._rewrite_builtins(self,idx:int,updated_instructions:list[Instruction])->int
polars._utils.udfs.RewrittenInstructions._rewrite_functions(self,idx:int,updated_instructions:list[Instruction])->int
polars._utils.udfs.RewrittenInstructions._rewrite_methods(self,idx:int,updated_instructions:list[Instruction])->int
polars._utils.udfs.RewrittenInstructions._unpack_superinstructions(instructions:list[Instruction])->Iterator[Instruction]
polars._utils.udfs.RewrittenInstructions._upgrade_instruction(inst:Instruction)->Instruction
polars._utils.udfs.StackValue(NamedTuple)
polars._utils.udfs._get_all_caller_variables()->dict[str, Any]
polars._utils.udfs._get_target_name(col:str,expression:str,map_target:str)->str
polars._utils.udfs._raw_function_meta(function:Callable[[Any],Any])->tuple[str, str]
polars._utils.udfs.warn_on_inefficient_map(function:Callable[[Any],Any],columns:list[str],map_target:MapTarget)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/convert.py----------------------------------------
A:polars._utils.convert.t->t.replace(tzinfo=timezone.utc).replace(tzinfo=timezone.utc)
A:polars._utils.convert.dt->dt.replace(tzinfo=timezone.utc).replace(tzinfo=timezone.utc)
A:polars._utils.convert.(seconds, nanoseconds)->divmod(value, NS_PER_SECOND)
A:polars._utils.convert.(minutes, seconds)->divmod(seconds, 60)
A:polars._utils.convert.(hours, minutes)->divmod(minutes, 60)
A:polars._utils.convert.td->timedelta(milliseconds=value)
A:polars._utils.convert.tz->_parse_fixed_tz_offset(time_zone)
A:polars._utils.convert.dt_offset->datetime.datetime.fromisoformat('2000-01-01T00:00:00' + offset)
polars._utils.convert._create_decimal_with_prec(precision:int)->Callable[[tuple[int, Sequence[int], int]], Decimal]
polars._utils.convert._localize_datetime(dt:datetime,time_zone:str)->datetime
polars._utils.convert._parse_fixed_tz_offset(offset:str)->tzinfo
polars._utils.convert._raise_invalid_time_unit(time_unit:Any)->NoReturn
polars._utils.convert._timedelta_to_duration_string(td:timedelta)->str
polars._utils.convert.date_to_int(d:date)->int
polars._utils.convert.datetime_to_int(dt:datetime,time_unit:TimeUnit)->int
polars._utils.convert.negate_duration_string(duration:str)->str
polars._utils.convert.parse_as_duration_string(td:timedelta|str|None)->str | None
polars._utils.convert.time_to_int(t:time)->int
polars._utils.convert.timedelta_to_int(td:timedelta,time_unit:TimeUnit)->int
polars._utils.convert.to_py_date(value:int|float)->date
polars._utils.convert.to_py_datetime(value:int|float,time_unit:TimeUnit,time_zone:str|None=None)->datetime
polars._utils.convert.to_py_decimal(sign:int,digits:Sequence[int],prec:int,scale:int)->Decimal
polars._utils.convert.to_py_time(value:int)->time
polars._utils.convert.to_py_timedelta(value:int|float,time_unit:TimeUnit)->timedelta
polars._utils.date_to_int(d:date)->int
polars._utils.datetime_to_int(dt:datetime,time_unit:TimeUnit)->int
polars._utils.time_to_int(t:time)->int
polars._utils.timedelta_to_int(td:timedelta,time_unit:TimeUnit)->int
polars._utils.to_py_date(value:int|float)->date
polars._utils.to_py_datetime(value:int|float,time_unit:TimeUnit,time_zone:str|None=None)->datetime
polars._utils.to_py_decimal(sign:int,digits:Sequence[int],prec:int,scale:int)->Decimal
polars._utils.to_py_time(value:int)->time
polars._utils.to_py_timedelta(value:int|float,time_unit:TimeUnit)->timedelta


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/construction/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/construction/series.py----------------------------------------
A:polars._utils.construction.series.value->get_first_non_none(values)
A:polars._utils.construction.series.dtype->numpy_char_code_to_dtype(np.dtype(python_dtype).char)
A:polars._utils.construction.series.python_dtype->type(value)
A:polars._utils.construction.series.constructor->numpy_type_to_constructor(values, dtype)
A:polars._utils.construction.series.pyseries->pyseries.cast(dtype, strict=False, wrap_numerical=False).cast(dtype, strict=False, wrap_numerical=False)
A:polars._utils.construction.series.py_series->polars.polars.PySeries.new_from_any_values(name, values, strict)
A:polars._utils.construction.series.time_unit->getattr(dtype, 'time_unit', None)
A:polars._utils.construction.series.time_zone->getattr(dtype, 'time_zone', None)
A:polars._utils.construction.series.s->s.cast(dtype, strict=strict).cast(dtype, strict=strict)
A:polars._utils.construction.series.n_elems->len(value)
A:polars._utils.construction.series.srs->polars.polars.PySeries.new_from_any_values(name, values, strict)
A:polars._utils.construction.series.values->polars.dependencies.numpy.ascontiguousarray(values)
A:polars._utils.construction.series.slice_values->list(islice(values, chunk_size))
A:polars._utils.construction.series.schunk->to_series_chunk(slice_values, dtype)
A:polars._utils.construction.series.series->to_series_chunk([], dtype)
A:polars._utils.construction.series.name->str(values.name)
A:polars._utils.construction.series.array->polars._utils.construction.coerce_arrow(values)
A:polars._utils.construction.series.pys->polars.polars.PySeries.from_arrow(name, array.chunks[0])
A:polars._utils.construction.series.it->polars._utils.construction.coerce_arrow(values).iterchunks()
A:polars._utils.construction.series.(values, dtype)->numpy_values_and_dtype(values)
A:polars._utils.construction.series.values_1d->polars.dependencies.numpy.ascontiguousarray(values).reshape(-1)
A:polars._utils.construction.series.py_s->_with_no_check_length(lambda : numpy_to_pyseries(name, values_1d, strict=strict, nan_to_null=nan_to_null))
polars._utils.construction.arrow_to_pyseries(name:str,values:pa.Array,dtype:PolarsDataType|None=None,*,strict:bool=True,rechunk:bool=True)->PySeries
polars._utils.construction.dataframe_to_pyseries(name:str|None,values:DataFrame,*,dtype:PolarsDataType|None=None,strict:bool=True)->PySeries
polars._utils.construction.iterable_to_pyseries(name:str,values:Iterable[Any],dtype:PolarsDataType|None=None,*,chunk_size:int=1000000,strict:bool=True)->PySeries
polars._utils.construction.numpy_to_pyseries(name:str,values:np.ndarray[Any,Any],*,strict:bool=True,nan_to_null:bool=False)->PySeries
polars._utils.construction.pandas_to_pyseries(name:str,values:pd.Series[Any]|pd.Index[Any]|pd.DatetimeIndex,dtype:PolarsDataType|None=None,*,strict:bool=True,nan_to_null:bool=True)->PySeries
polars._utils.construction.sequence_to_pyseries(name:str,values:Sequence[Any],dtype:PolarsDataType|None=None,*,strict:bool=True,nan_to_null:bool=False)->PySeries
polars._utils.construction.series._construct_series_with_fallbacks(constructor:Callable[[str,Sequence[Any],bool],PySeries],name:str,values:Sequence[Any],dtype:PolarsDataType|None,*,strict:bool)->PySeries
polars._utils.construction.series.arrow_to_pyseries(name:str,values:pa.Array,dtype:PolarsDataType|None=None,*,strict:bool=True,rechunk:bool=True)->PySeries
polars._utils.construction.series.dataframe_to_pyseries(name:str|None,values:DataFrame,*,dtype:PolarsDataType|None=None,strict:bool=True)->PySeries
polars._utils.construction.series.iterable_to_pyseries(name:str,values:Iterable[Any],dtype:PolarsDataType|None=None,*,chunk_size:int=1000000,strict:bool=True)->PySeries
polars._utils.construction.series.numpy_to_pyseries(name:str,values:np.ndarray[Any,Any],*,strict:bool=True,nan_to_null:bool=False)->PySeries
polars._utils.construction.series.pandas_to_pyseries(name:str,values:pd.Series[Any]|pd.Index[Any]|pd.DatetimeIndex,dtype:PolarsDataType|None=None,*,strict:bool=True,nan_to_null:bool=True)->PySeries
polars._utils.construction.series.sequence_to_pyseries(name:str,values:Sequence[Any],dtype:PolarsDataType|None=None,*,strict:bool=True,nan_to_null:bool=False)->PySeries
polars._utils.construction.series.series_to_pyseries(name:str|None,values:Series,*,dtype:PolarsDataType|None=None,strict:bool=True)->PySeries
polars._utils.construction.series_to_pyseries(name:str|None,values:Series,*,dtype:PolarsDataType|None=None,strict:bool=True)->PySeries


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/construction/utils.py----------------------------------------
polars._utils.construction.utils._get_annotations(obj:type)->dict[str, Any]
polars._utils.construction.utils.contains_nested(value:Any,is_nested:Callable[[Any],bool])->bool
polars._utils.construction.utils.get_first_non_none(values:Sequence[Any|None])->Any
polars._utils.construction.utils.is_namedtuple(cls:Any,*,annotated:bool=False)->bool
polars._utils.construction.utils.is_pydantic_model(value:Any)->bool
polars._utils.construction.utils.is_simple_numpy_backed_pandas_series(series:pd.Series[Any]|pd.Index[Any]|pd.DatetimeIndex)->bool
polars._utils.construction.utils.is_sqlalchemy(value:Any)->bool
polars._utils.construction.utils.nt_unpack(obj:Any)->Any
polars._utils.construction.utils.try_get_type_hints(obj:type)->dict[str, Any]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/construction/dataframe.py----------------------------------------
A:polars._utils.construction.dataframe.(column_names, schema_overrides)->_unpack_schema(schema or data.columns, schema_overrides=schema_overrides)
A:polars._utils.construction.dataframe.column_names->list(data)
A:polars._utils.construction.dataframe.count_numpy->sum((int(allow_multithreaded and _check_for_numpy(val) and isinstance(val, np.ndarray) and (len(val) > _MIN_NUMPY_SIZE_FOR_MULTITHREADING) and nan_to_null and (val.dtype in (np.float32, np.float64))) for val in data.values()))
A:polars._utils.construction.dataframe.pool_size->thread_pool_size()
A:polars._utils.construction.dataframe.data->data.rename_columns(column_names).rename_columns(column_names)
A:polars._utils.construction.dataframe.data_series->_handle_columns_arg(data_series, columns=column_names)
A:polars._utils.construction.dataframe.pydf->_post_apply_columns(pydf, column_names, schema_overrides=schema_overrides, strict=strict)
A:polars._utils.construction.dataframe.schema_overrides->_parse_schema_overrides(schema_overrides)
A:polars._utils.construction.dataframe.schema->list(schema.items())
A:polars._utils.construction.dataframe.dtype->_parse_schema_overrides(schema_overrides).get(name)
A:polars._utils.construction.dataframe.data[i]->data[i].clone().clone()
A:polars._utils.construction.dataframe.(columns, dtypes)->_unpack_schema(columns or pydf_columns, schema_overrides=schema_overrides)
A:polars._utils.construction.dataframe.array_len->max((arrlen(val) or 0 for val in data.values()))
A:polars._utils.construction.dataframe.vdf->polars._reexport.DataFrame(val, strict=strict)
A:polars._utils.construction.dataframe.st->polars._reexport.DataFrame(val, strict=strict).to_struct(name)
A:polars._utils.construction.dataframe.s->s.cast(new_dtype, strict=strict, wrap_numerical=False).cast(new_dtype, strict=strict, wrap_numerical=False)
A:polars._utils.construction.dataframe.updated_data[name]->polars._reexport.Series(name, values=val if _is_generator(val) else [val], dtype=dtypes.get(name), strict=strict)
A:polars._utils.construction.dataframe.unpack_nested->contains_nested(getattr(first_element, col, None), is_pydantic_model if model_fields else dataclasses.is_dataclass)
A:polars._utils.construction.dataframe.new_dtype->next(iter(schema_overrides.values()))
A:polars._utils.construction.dataframe.annotations->getattr(first_element, '__annotations__', None)
A:polars._utils.construction.dataframe.pyseries->pyseries.cast(dtype, strict=strict, wrap_numerical=False).cast(dtype, strict=strict, wrap_numerical=False)
A:polars._utils.construction.dataframe.(unpack_nested, column_names, schema_overrides, overrides)->_establish_dataclass_or_model_schema(first_element, schema, schema_overrides, model_fields)
A:polars._utils.construction.dataframe.model_fields->list(first_element.__fields__ if old_pydantic else first_element.__class__.model_fields)
A:polars._utils.construction.dataframe.get_values->itemgetter(*model_fields)
A:polars._utils.construction.dataframe.dc_fields->set(asdict(first_element))
A:polars._utils.construction.dataframe.overrides->dict(zip(model_fields, overrides.values()))
A:polars._utils.construction.dataframe.(_, schema_overrides)->_unpack_schema(schema, schema_overrides=schema_overrides)
A:polars._utils.construction.dataframe.chunk_size->max(infer_schema_length or 0, adaptive_chunk_size or 1000)
A:polars._utils.construction.dataframe.values->list(islice(data, chunk_size))
A:polars._utils.construction.dataframe.frame_chunk->to_frame_chunk(values, original_schema)
A:polars._utils.construction.dataframe.original_schema->list(df.schema.items())
A:polars._utils.construction.dataframe.df->df.rechunk().rechunk()
A:polars._utils.construction.dataframe.arrow_dict[str(idxcol)]->polars._utils.construction.pandas_series_to_arrow(data.index.get_level_values(idxcol), nan_to_null=nan_to_null, length=length)
A:polars._utils.construction.dataframe.arrow_dict[str(col_idx)]->polars._utils.construction.pandas_series_to_arrow(col_data, nan_to_null=nan_to_null, length=length)
A:polars._utils.construction.dataframe.arrow_table->polars.dependencies.pyarrow.table(arrow_dict)
A:polars._utils.construction.dataframe.batches->data.rename_columns(column_names).rename_columns(column_names).to_batches()
A:polars._utils.construction.dataframe.record_names->list(data.dtype.names)
A:polars._utils.construction.dataframe.n_columns->len(record_names)
A:polars._utils.construction.dataframe.n_schema_cols->len(schema)
A:polars._utils.construction.dataframe.data_series[0]->data_series[0].cast(new_dtype, strict=strict, wrap_numerical=False).cast(new_dtype, strict=strict, wrap_numerical=False)
A:polars._utils.construction.dataframe.data_series[name]->data_series[name].cast(new_dtype, strict=strict, wrap_numerical=False).cast(new_dtype, strict=strict, wrap_numerical=False)
A:polars._utils.construction.dataframe.series_cols->_handle_columns_arg(list(data_series.values()), columns=column_names)
polars._utils.construction.arrow_to_pydf(data:pa.Table|pa.RecordBatch,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,rechunk:bool=True)->PyDataFrame
polars._utils.construction.dataframe._check_pandas_columns(data:pd.DataFrame,*,include_index:bool)->None
polars._utils.construction.dataframe._establish_dataclass_or_model_schema(first_element:Any,schema:SchemaDefinition|None,schema_overrides:SchemaDict|None,model_fields:list[str]|None)->tuple[bool, list[str], SchemaDict, SchemaDict]
polars._utils.construction.dataframe._expand_dict_data(data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]|Series],dtypes:SchemaDict,*,strict:bool=True)->Mapping[str, Sequence[object] | Mapping[str, Sequence[object]] | Series]
polars._utils.construction.dataframe._expand_dict_values(data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]|Series],*,schema_overrides:SchemaDict|None=None,strict:bool=True,order:Sequence[str]|None=None,nan_to_null:bool=False)->dict[str, Series]
polars._utils.construction.dataframe._handle_columns_arg(data:list[PySeries],columns:Sequence[str]|None=None,*,from_dict:bool=False)->list[PySeries]
polars._utils.construction.dataframe._include_unknowns(schema:SchemaDict,cols:Sequence[str])->MutableMapping[str, PolarsDataType]
polars._utils.construction.dataframe._pandas_has_default_index(df:pd.DataFrame)->bool
polars._utils.construction.dataframe._post_apply_columns(pydf:PyDataFrame,columns:SchemaDefinition|None,structs:dict[str,Struct]|None=None,schema_overrides:SchemaDict|None=None,*,strict:bool=True)->PyDataFrame
polars._utils.construction.dataframe._sequence_of_dataclasses_to_pydf(first_element:Any,data:Sequence[Any],schema:SchemaDefinition|None,schema_overrides:SchemaDict|None,infer_schema_length:int|None,*,strict:bool=True,**kwargs:Any)->PyDataFrame
polars._utils.construction.dataframe._sequence_of_dict_to_pydf(first_element:dict[str,Any],data:Sequence[Any],schema:SchemaDefinition|None,*,schema_overrides:SchemaDict|None,strict:bool,infer_schema_length:int|None,**kwargs:Any)->PyDataFrame
polars._utils.construction.dataframe._sequence_of_elements_to_pydf(first_element:Any,data:Sequence[Any],schema:SchemaDefinition|None,schema_overrides:SchemaDict|None,*,strict:bool,**kwargs:Any)->PyDataFrame
polars._utils.construction.dataframe._sequence_of_numpy_to_pydf(first_element:np.ndarray[Any,Any],**kwargs:Any)->PyDataFrame
polars._utils.construction.dataframe._sequence_of_pandas_to_pydf(first_element:pd.Series[Any]|pd.Index[Any]|pd.DatetimeIndex,data:Sequence[Any],schema:SchemaDefinition|None,schema_overrides:SchemaDict|None,*,strict:bool,**kwargs:Any)->PyDataFrame
polars._utils.construction.dataframe._sequence_of_pydantic_models_to_pydf(first_element:Any,data:Sequence[Any],schema:SchemaDefinition|None,schema_overrides:SchemaDict|None,infer_schema_length:int|None,*,strict:bool,**kwargs:Any)->PyDataFrame
polars._utils.construction.dataframe._sequence_of_sequence_to_pydf(first_element:Sequence[Any]|np.ndarray[Any,Any],data:Sequence[Any],schema:SchemaDefinition|None,*,schema_overrides:SchemaDict|None,strict:bool,orient:Orientation|None,infer_schema_length:int|None,nan_to_null:bool=False)->PyDataFrame
polars._utils.construction.dataframe._sequence_of_series_to_pydf(first_element:Series,data:Sequence[Any],schema:SchemaDefinition|None,*,schema_overrides:SchemaDict|None,strict:bool,**kwargs:Any)->PyDataFrame
polars._utils.construction.dataframe._sequence_of_tuple_to_pydf(first_element:tuple[Any,...],data:Sequence[Any],schema:SchemaDefinition|None,*,schema_overrides:SchemaDict|None,strict:bool,orient:Orientation|None,infer_schema_length:int|None,nan_to_null:bool=False)->PyDataFrame
polars._utils.construction.dataframe._sequence_to_pydf_dispatcher(first_element:Any,data:Sequence[Any],schema:SchemaDefinition|None,*,schema_overrides:SchemaDict|None,strict:bool=True,orient:Orientation|None,infer_schema_length:int|None,nan_to_null:bool=False)->PyDataFrame
polars._utils.construction.dataframe._unpack_schema(schema:SchemaDefinition|None,*,schema_overrides:SchemaDict|None=None,n_expected:int|None=None,lookup_names:Iterable[str]|None=None)->tuple[list[str], SchemaDict]
polars._utils.construction.dataframe.arrow_to_pydf(data:pa.Table|pa.RecordBatch,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,rechunk:bool=True)->PyDataFrame
polars._utils.construction.dataframe.dataframe_to_pydf(data:DataFrame,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True)->PyDataFrame
polars._utils.construction.dataframe.dict_to_pydf(data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]|Series],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,nan_to_null:bool=False,allow_multithreaded:bool=True)->PyDataFrame
polars._utils.construction.dataframe.iterable_to_pydf(data:Iterable[Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,orient:Orientation|None=None,chunk_size:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,rechunk:bool=True)->PyDataFrame
polars._utils.construction.dataframe.numpy_to_pydf(data:np.ndarray[Any,Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None,strict:bool=True,nan_to_null:bool=False)->PyDataFrame
polars._utils.construction.dataframe.pandas_to_pydf(data:pd.DataFrame,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,rechunk:bool=True,nan_to_null:bool=True,include_index:bool=False)->PyDataFrame
polars._utils.construction.dataframe.sequence_to_pydf(data:Sequence[Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,nan_to_null:bool=False)->PyDataFrame
polars._utils.construction.dataframe.series_to_pydf(data:Series,schema:SchemaDefinition|None=None,schema_overrides:SchemaDict|None=None,*,strict:bool=True)->PyDataFrame
polars._utils.construction.dataframe_to_pydf(data:DataFrame,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True)->PyDataFrame
polars._utils.construction.dict_to_pydf(data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]|Series],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,nan_to_null:bool=False,allow_multithreaded:bool=True)->PyDataFrame
polars._utils.construction.iterable_to_pydf(data:Iterable[Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,orient:Orientation|None=None,chunk_size:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,rechunk:bool=True)->PyDataFrame
polars._utils.construction.numpy_to_pydf(data:np.ndarray[Any,Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None,strict:bool=True,nan_to_null:bool=False)->PyDataFrame
polars._utils.construction.pandas_to_pydf(data:pd.DataFrame,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,rechunk:bool=True,nan_to_null:bool=True,include_index:bool=False)->PyDataFrame
polars._utils.construction.sequence_to_pydf(data:Sequence[Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,nan_to_null:bool=False)->PyDataFrame
polars._utils.construction.series_to_pydf(data:Series,schema:SchemaDefinition|None=None,schema_overrides:SchemaDict|None=None,*,strict:bool=True)->PyDataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/construction/other.py----------------------------------------
A:polars._utils.construction.other.dtype->getattr(values, 'dtype', None)
A:polars._utils.construction.other.first_non_none->get_first_non_none(values.values)
A:polars._utils.construction.other.array->pyarrow.compute.cast(array, pa.dictionary(pa.uint32(), pa.large_string())).combine_chunks()
polars._utils.construction.coerce_arrow(array:pa.Array)->pa.Array
polars._utils.construction.other.coerce_arrow(array:pa.Array)->pa.Array
polars._utils.construction.other.pandas_series_to_arrow(values:pd.Series[Any]|pd.Index[Any],*,length:int|None=None,nan_to_null:bool=True)->pa.Array
polars._utils.construction.pandas_series_to_arrow(values:pd.Series[Any]|pd.Index[Any],*,length:int|None=None,nan_to_null:bool=True)->pa.Array


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/parse/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/_utils/parse/expr.py----------------------------------------
A:polars._utils.parse.expr.expr->polars.functions.struct(unaliased_expr).alias(expr_name)
A:polars._utils.parse.expr.unaliased_expr->polars.functions.struct(unaliased_expr).alias(expr_name).meta.undo_aliases()
A:polars._utils.parse.expr.expr_name->polars.functions.struct(unaliased_expr).alias(expr_name).meta.output_name()
A:polars._utils.parse.expr.exprs->_parse_positional_inputs(inputs, structify=__structify)
A:polars._utils.parse.expr.named_exprs->_parse_named_inputs(named_inputs, structify=__structify)
A:polars._utils.parse.expr.inputs_iter->_parse_inputs_as_iterable(inputs)
A:polars._utils.parse.expr.all_predicates->_parse_positional_inputs(predicates)
A:polars._utils.parse.expr.constraint_predicates->_parse_constraints(constraints)
polars._utils.parse.expr._combine_predicates(predicates:list[PyExpr])->PyExpr
polars._utils.parse.expr._is_iterable(input:Any|Iterable[Any])->bool
polars._utils.parse.expr._parse_constraints(constraints:dict[str,IntoExpr])->Iterable[PyExpr]
polars._utils.parse.expr._parse_inputs_as_iterable(inputs:tuple[Any,...]|tuple[Iterable[Any]])->Iterable[Any]
polars._utils.parse.expr._parse_named_inputs(named_inputs:dict[str,IntoExpr],*,structify:bool=False)->Iterable[PyExpr]
polars._utils.parse.expr._parse_positional_inputs(inputs:tuple[IntoExpr,...]|tuple[Iterable[IntoExpr]],*,structify:bool=False)->list[PyExpr]
polars._utils.parse.expr._structify_expression(expr:Expr)->Expr
polars._utils.parse.expr.parse_into_expression(input:IntoExpr,*,str_as_lit:bool=False,list_as_series:bool=False,structify:bool=False,dtype:PolarsDataType|None=None)->PyExpr
polars._utils.parse.expr.parse_into_list_of_expressions(*inputs:IntoExpr|Iterable[IntoExpr],__structify:bool=False,**named_inputs:IntoExpr)->list[PyExpr]
polars._utils.parse.expr.parse_predicates_constraints_into_expression(*predicates:IntoExpr|Iterable[IntoExpr],**constraints:Any)->PyExpr
polars._utils.parse.parse_into_expression(input:IntoExpr,*,str_as_lit:bool=False,list_as_series:bool=False,structify:bool=False,dtype:PolarsDataType|None=None)->PyExpr
polars._utils.parse.parse_into_list_of_expressions(*inputs:IntoExpr|Iterable[IntoExpr],__structify:bool=False,**named_inputs:IntoExpr)->list[PyExpr]
polars._utils.parse.parse_predicates_constraints_into_expression(*predicates:IntoExpr|Iterable[IntoExpr],**constraints:Any)->PyExpr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/expr/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/expr/categorical.py----------------------------------------
polars.expr.categorical.ExprCatNameSpace(self,expr:Expr)
polars.expr.categorical.ExprCatNameSpace.__init__(self,expr:Expr)
polars.expr.categorical.ExprCatNameSpace.ends_with(self,suffix:str)->Expr
polars.expr.categorical.ExprCatNameSpace.get_categories(self)->Expr
polars.expr.categorical.ExprCatNameSpace.len_bytes(self)->Expr
polars.expr.categorical.ExprCatNameSpace.len_chars(self)->Expr
polars.expr.categorical.ExprCatNameSpace.slice(self,offset:int,length:int|None=None)->Expr
polars.expr.categorical.ExprCatNameSpace.starts_with(self,prefix:str)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/expr/list.py----------------------------------------
A:polars.expr.list.fraction->parse_into_expression(fraction)
A:polars.expr.list.n->parse_into_expression(n)
A:polars.expr.list.index->parse_into_expression(index)
A:polars.expr.list.indices->parse_into_expression(indices)
A:polars.expr.list.offset->parse_into_expression(offset)
A:polars.expr.list.item->parse_into_expression(item, str_as_lit=True)
A:polars.expr.list.separator->parse_into_expression(separator, str_as_lit=True)
A:polars.expr.list.length->parse_into_expression(length)
A:polars.expr.list.element->parse_into_expression(element, str_as_lit=True)
A:polars.expr.list.pyexpr->self._pyexpr.list_to_struct(n_field_strategy, fields, upper_bound)
A:polars.expr.list.other->parse_into_expression(other)
polars.expr.list.ExprListNameSpace(self,expr:Expr)
polars.expr.list.ExprListNameSpace.__getitem__(self,item:int)->Expr
polars.expr.list.ExprListNameSpace.__init__(self,expr:Expr)
polars.expr.list.ExprListNameSpace.all(self)->Expr
polars.expr.list.ExprListNameSpace.any(self)->Expr
polars.expr.list.ExprListNameSpace.arg_max(self)->Expr
polars.expr.list.ExprListNameSpace.arg_min(self)->Expr
polars.expr.list.ExprListNameSpace.concat(self,other:list[Expr|str]|Expr|str|Series|list[Any])->Expr
polars.expr.list.ExprListNameSpace.contains(self,item:float|str|bool|int|date|datetime|time|IntoExprColumn)->Expr
polars.expr.list.ExprListNameSpace.count_matches(self,element:IntoExpr)->Expr
polars.expr.list.ExprListNameSpace.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->Expr
polars.expr.list.ExprListNameSpace.drop_nulls(self)->Expr
polars.expr.list.ExprListNameSpace.eval(self,expr:Expr,*,parallel:bool=False)->Expr
polars.expr.list.ExprListNameSpace.explode(self)->Expr
polars.expr.list.ExprListNameSpace.first(self)->Expr
polars.expr.list.ExprListNameSpace.gather(self,indices:Expr|Series|list[int]|list[list[int]],*,null_on_oob:bool=False)->Expr
polars.expr.list.ExprListNameSpace.gather_every(self,n:int|IntoExprColumn,offset:int|IntoExprColumn=0)->Expr
polars.expr.list.ExprListNameSpace.get(self,index:int|Expr|str,*,null_on_oob:bool=False)->Expr
polars.expr.list.ExprListNameSpace.head(self,n:int|str|Expr=5)->Expr
polars.expr.list.ExprListNameSpace.join(self,separator:IntoExprColumn,*,ignore_nulls:bool=True)->Expr
polars.expr.list.ExprListNameSpace.last(self)->Expr
polars.expr.list.ExprListNameSpace.len(self)->Expr
polars.expr.list.ExprListNameSpace.max(self)->Expr
polars.expr.list.ExprListNameSpace.mean(self)->Expr
polars.expr.list.ExprListNameSpace.median(self)->Expr
polars.expr.list.ExprListNameSpace.min(self)->Expr
polars.expr.list.ExprListNameSpace.n_unique(self)->Expr
polars.expr.list.ExprListNameSpace.reverse(self)->Expr
polars.expr.list.ExprListNameSpace.sample(self,n:int|IntoExprColumn|None=None,*,fraction:float|IntoExprColumn|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->Expr
polars.expr.list.ExprListNameSpace.set_difference(self,other:IntoExpr|Collection[Any])->Expr
polars.expr.list.ExprListNameSpace.set_intersection(self,other:IntoExpr|Collection[Any])->Expr
polars.expr.list.ExprListNameSpace.set_symmetric_difference(self,other:IntoExpr|Collection[Any])->Expr
polars.expr.list.ExprListNameSpace.set_union(self,other:IntoExpr|Collection[Any])->Expr
polars.expr.list.ExprListNameSpace.shift(self,n:int|IntoExprColumn=1)->Expr
polars.expr.list.ExprListNameSpace.slice(self,offset:int|str|Expr,length:int|str|Expr|None=None)->Expr
polars.expr.list.ExprListNameSpace.sort(self,*,descending:bool=False,nulls_last:bool=False)->Expr
polars.expr.list.ExprListNameSpace.std(self,ddof:int=1)->Expr
polars.expr.list.ExprListNameSpace.sum(self)->Expr
polars.expr.list.ExprListNameSpace.tail(self,n:int|str|Expr=5)->Expr
polars.expr.list.ExprListNameSpace.to_array(self,width:int)->Expr
polars.expr.list.ExprListNameSpace.to_struct(self,n_field_strategy:ListToStructWidthStrategy='first_non_null',fields:Sequence[str]|Callable[[int],str]|None=None,upper_bound:int=0,*,_eager:bool=False)->Expr
polars.expr.list.ExprListNameSpace.unique(self,*,maintain_order:bool=False)->Expr
polars.expr.list.ExprListNameSpace.var(self,ddof:int=1)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/expr/datetime.py----------------------------------------
A:polars.expr.datetime.n_pyexpr->parse_into_expression(n)
A:polars.expr.datetime.unix_epoch->datetime.date(1970, 1, 1)
A:polars.expr.datetime.every->parse_into_expression(every, str_as_lit=True)
A:polars.expr.datetime.(day, month, year, hour, minute, second, microsecond)->parse_into_list_of_expressions(day, month, year, hour, minute, second, microsecond)
A:polars.expr.datetime.ambiguous_expr->parse_into_expression(ambiguous, str_as_lit=True)
A:polars.expr.datetime.time->parse_into_expression(time)
A:polars.expr.datetime.sec->wrap_expr(self._pyexpr.dt_second())
A:polars.expr.datetime.ambiguous->polars.functions.lit(ambiguous)
A:polars.expr.datetime.by->parse_into_expression(by, str_as_lit=True)
polars.expr.datetime.ExprDateTimeNameSpace(self,expr:Expr)
polars.expr.datetime.ExprDateTimeNameSpace.__init__(self,expr:Expr)
polars.expr.datetime.ExprDateTimeNameSpace.add_business_days(self,n:int|IntoExpr,week_mask:Iterable[bool]=(True,True,True,True,True,False,False),holidays:Iterable[dt.date]=(),roll:Roll='raise')->Expr
polars.expr.datetime.ExprDateTimeNameSpace.base_utc_offset(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.cast_time_unit(self,time_unit:TimeUnit)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.century(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.combine(self,time:dt.time|Expr,time_unit:TimeUnit='us')->Expr
polars.expr.datetime.ExprDateTimeNameSpace.convert_time_zone(self,time_zone:str)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.date(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.datetime(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.day(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.dst_offset(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.epoch(self,time_unit:EpochTimeUnit='us')->Expr
polars.expr.datetime.ExprDateTimeNameSpace.hour(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.is_business_day(self,*,week_mask:Iterable[bool]=(True,True,True,True,True,False,False),holidays:Iterable[dt.date]=())->Expr
polars.expr.datetime.ExprDateTimeNameSpace.is_leap_year(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.iso_year(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.microsecond(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.millennium(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.millisecond(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.minute(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.month(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.month_end(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.month_start(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.nanosecond(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.offset_by(self,by:str|Expr)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.ordinal_day(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.quarter(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.replace(self,*,year:int|IntoExpr|None=None,month:int|IntoExpr|None=None,day:int|IntoExpr|None=None,hour:int|IntoExpr|None=None,minute:int|IntoExpr|None=None,second:int|IntoExpr|None=None,microsecond:int|IntoExpr|None=None,ambiguous:Ambiguous|Expr='raise')->Expr
polars.expr.datetime.ExprDateTimeNameSpace.replace_time_zone(self,time_zone:str|None,*,ambiguous:Ambiguous|Expr='raise',non_existent:NonExistent='raise')->Expr
polars.expr.datetime.ExprDateTimeNameSpace.round(self,every:str|dt.timedelta|IntoExprColumn)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.second(self,*,fractional:bool=False)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.strftime(self,format:str)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.time(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.timestamp(self,time_unit:TimeUnit='us')->Expr
polars.expr.datetime.ExprDateTimeNameSpace.to_string(self,format:str|None=None)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.total_days(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.total_hours(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.total_microseconds(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.total_milliseconds(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.total_minutes(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.total_nanoseconds(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.total_seconds(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.truncate(self,every:str|dt.timedelta|Expr)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.week(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.weekday(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.with_time_unit(self,time_unit:TimeUnit)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.year(self)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/expr/name.py----------------------------------------
polars.expr.name.ExprNameNameSpace(self,expr:Expr)
polars.expr.name.ExprNameNameSpace.__init__(self,expr:Expr)
polars.expr.name.ExprNameNameSpace.keep(self)->Expr
polars.expr.name.ExprNameNameSpace.map(self,function:Callable[[str],str])->Expr
polars.expr.name.ExprNameNameSpace.map_fields(self,function:Callable[[str],str])->Expr
polars.expr.name.ExprNameNameSpace.prefix(self,prefix:str)->Expr
polars.expr.name.ExprNameNameSpace.prefix_fields(self,prefix:str)->Expr
polars.expr.name.ExprNameNameSpace.suffix(self,suffix:str)->Expr
polars.expr.name.ExprNameNameSpace.suffix_fields(self,suffix:str)->Expr
polars.expr.name.ExprNameNameSpace.to_lowercase(self)->Expr
polars.expr.name.ExprNameNameSpace.to_uppercase(self)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/expr/whenthen.py----------------------------------------
A:polars.expr.whenthen.statement_pyexpr->parse_into_expression(statement)
A:polars.expr.whenthen.condition_pyexpr->parse_predicates_constraints_into_expression(*predicates, **constraints)
polars.expr.When(self,when:Any)
polars.expr.When.then(self,statement:IntoExpr)->Then
polars.expr.whenthen.ChainedThen(self,chained_then:Any)
polars.expr.whenthen.ChainedThen.__init__(self,chained_then:Any)
polars.expr.whenthen.ChainedThen._from_pyexpr(cls,pyexpr:PyExpr)->Expr
polars.expr.whenthen.ChainedThen._pyexpr(self)->PyExpr
polars.expr.whenthen.ChainedThen.otherwise(self,statement:IntoExpr)->Expr
polars.expr.whenthen.ChainedThen.when(self,*predicates:IntoExpr|Iterable[IntoExpr],**constraints:Any)->ChainedWhen
polars.expr.whenthen.ChainedWhen(self,chained_when:Any)
polars.expr.whenthen.ChainedWhen.__init__(self,chained_when:Any)
polars.expr.whenthen.ChainedWhen.then(self,statement:IntoExpr)->ChainedThen
polars.expr.whenthen.Then(self,then:Any)
polars.expr.whenthen.Then.__init__(self,then:Any)
polars.expr.whenthen.Then._from_pyexpr(cls,pyexpr:PyExpr)->Expr
polars.expr.whenthen.Then._pyexpr(self)->PyExpr
polars.expr.whenthen.Then.otherwise(self,statement:IntoExpr)->Expr
polars.expr.whenthen.Then.when(self,*predicates:IntoExpr|Iterable[IntoExpr],**constraints:Any)->ChainedWhen
polars.expr.whenthen.When(self,when:Any)
polars.expr.whenthen.When.__init__(self,when:Any)
polars.expr.whenthen.When.then(self,statement:IntoExpr)->Then


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/expr/meta.py----------------------------------------
A:polars.expr.meta.s->self._pyexpr.meta_tree_format()
A:polars.expr.meta.dot->self._pyexpr.meta_show_graph()
polars.expr.meta.ExprMetaNameSpace(self,expr:Expr)
polars.expr.meta.ExprMetaNameSpace.__eq__(self,other:ExprMetaNameSpace|Expr)->bool
polars.expr.meta.ExprMetaNameSpace.__init__(self,expr:Expr)
polars.expr.meta.ExprMetaNameSpace.__ne__(self,other:ExprMetaNameSpace|Expr)->bool
polars.expr.meta.ExprMetaNameSpace._as_selector(self)->Expr
polars.expr.meta.ExprMetaNameSpace._selector_add(self,other:Expr)->Expr
polars.expr.meta.ExprMetaNameSpace._selector_and(self,other:Expr)->Expr
polars.expr.meta.ExprMetaNameSpace._selector_sub(self,other:Expr)->Expr
polars.expr.meta.ExprMetaNameSpace._selector_xor(self,other:Expr)->Expr
polars.expr.meta.ExprMetaNameSpace.eq(self,other:ExprMetaNameSpace|Expr)->bool
polars.expr.meta.ExprMetaNameSpace.has_multiple_outputs(self)->bool
polars.expr.meta.ExprMetaNameSpace.is_column(self)->bool
polars.expr.meta.ExprMetaNameSpace.is_column_selection(self,*,allow_aliasing:bool=False)->bool
polars.expr.meta.ExprMetaNameSpace.is_literal(self,*,allow_aliasing:bool=False)->bool
polars.expr.meta.ExprMetaNameSpace.is_regex_projection(self)->bool
polars.expr.meta.ExprMetaNameSpace.ne(self,other:ExprMetaNameSpace|Expr)->bool
polars.expr.meta.ExprMetaNameSpace.output_name(self,*,raise_if_undetermined:bool=True)->str | None
polars.expr.meta.ExprMetaNameSpace.pop(self)->list[Expr]
polars.expr.meta.ExprMetaNameSpace.root_names(self)->list[str]
polars.expr.meta.ExprMetaNameSpace.serialize(self,file:IOBase|str|Path|None=None,*,format:SerializationFormat='binary')->bytes | str | None
polars.expr.meta.ExprMetaNameSpace.show_graph(self,*,show:bool=True,output_path:str|Path|None=None,raw_output:bool=False,figsize:tuple[float,float]=(16.0,12.0))->str | None
polars.expr.meta.ExprMetaNameSpace.tree_format(self,*,return_as_string:bool=False)->str | None
polars.expr.meta.ExprMetaNameSpace.undo_aliases(self)->Expr
polars.expr.meta.ExprMetaNameSpace.write_json(self,file:IOBase|str|Path|None=None)->str | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/expr/struct.py----------------------------------------
A:polars.expr.struct.structify->bool(int(os.environ.get('POLARS_AUTO_STRUCTIFY', 0)))
A:polars.expr.struct.pyexprs->parse_into_list_of_expressions(*exprs, **named_exprs, __structify=structify)
polars.expr.struct.ExprStructNameSpace(self,expr:Expr)
polars.expr.struct.ExprStructNameSpace.__getitem__(self,item:str|int)->Expr
polars.expr.struct.ExprStructNameSpace.__init__(self,expr:Expr)
polars.expr.struct.ExprStructNameSpace.field(self,name:str|list[str],*more_names:str)->Expr
polars.expr.struct.ExprStructNameSpace.json_encode(self)->Expr
polars.expr.struct.ExprStructNameSpace.rename_fields(self,names:Sequence[str])->Expr
polars.expr.struct.ExprStructNameSpace.unnest(self)->Expr
polars.expr.struct.ExprStructNameSpace.with_fields(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/expr/array.py----------------------------------------
A:polars.expr.array.index->parse_into_expression(index)
A:polars.expr.array.separator->parse_into_expression(separator, str_as_lit=True)
A:polars.expr.array.item->parse_into_expression(item, str_as_lit=True)
A:polars.expr.array.element->parse_into_expression(element, str_as_lit=True)
A:polars.expr.array.field_names->list(fields)
A:polars.expr.array.pyexpr->self._pyexpr.arr_to_struct(fields)
A:polars.expr.array.n->parse_into_expression(n)
polars.expr.array.ExprArrayNameSpace(self,expr:Expr)
polars.expr.array.ExprArrayNameSpace.__init__(self,expr:Expr)
polars.expr.array.ExprArrayNameSpace.all(self)->Expr
polars.expr.array.ExprArrayNameSpace.any(self)->Expr
polars.expr.array.ExprArrayNameSpace.arg_max(self)->Expr
polars.expr.array.ExprArrayNameSpace.arg_min(self)->Expr
polars.expr.array.ExprArrayNameSpace.contains(self,item:float|str|bool|int|date|datetime|time|IntoExprColumn)->Expr
polars.expr.array.ExprArrayNameSpace.count_matches(self,element:IntoExpr)->Expr
polars.expr.array.ExprArrayNameSpace.explode(self)->Expr
polars.expr.array.ExprArrayNameSpace.first(self)->Expr
polars.expr.array.ExprArrayNameSpace.get(self,index:int|IntoExprColumn,*,null_on_oob:bool=False)->Expr
polars.expr.array.ExprArrayNameSpace.join(self,separator:IntoExprColumn,*,ignore_nulls:bool=True)->Expr
polars.expr.array.ExprArrayNameSpace.last(self)->Expr
polars.expr.array.ExprArrayNameSpace.len(self)->Expr
polars.expr.array.ExprArrayNameSpace.max(self)->Expr
polars.expr.array.ExprArrayNameSpace.median(self)->Expr
polars.expr.array.ExprArrayNameSpace.min(self)->Expr
polars.expr.array.ExprArrayNameSpace.n_unique(self)->Expr
polars.expr.array.ExprArrayNameSpace.reverse(self)->Expr
polars.expr.array.ExprArrayNameSpace.shift(self,n:int|IntoExprColumn=1)->Expr
polars.expr.array.ExprArrayNameSpace.sort(self,*,descending:bool=False,nulls_last:bool=False)->Expr
polars.expr.array.ExprArrayNameSpace.std(self,ddof:int=1)->Expr
polars.expr.array.ExprArrayNameSpace.sum(self)->Expr
polars.expr.array.ExprArrayNameSpace.to_list(self)->Expr
polars.expr.array.ExprArrayNameSpace.to_struct(self,fields:Sequence[str]|Callable[[int],str]|None=None)->Expr
polars.expr.array.ExprArrayNameSpace.unique(self,*,maintain_order:bool=False)->Expr
polars.expr.array.ExprArrayNameSpace.var(self,ddof:int=1)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/expr/string.py----------------------------------------
A:polars.expr.string.ambiguous->polars.functions.lit(ambiguous)
A:polars.expr.string.time_unit->getattr(dtype, 'time_unit', None)
A:polars.expr.string.time_zone->getattr(dtype, 'time_zone', None)
A:polars.expr.string.characters->parse_into_expression(characters, str_as_lit=True)
A:polars.expr.string.prefix->parse_into_expression(prefix, str_as_lit=True)
A:polars.expr.string.suffix->parse_into_expression(suffix, str_as_lit=True)
A:polars.expr.string.length->parse_into_expression(length)
A:polars.expr.string.pattern->parse_into_expression(pattern, str_as_lit=True)
A:polars.expr.string.dtype->parse_into_dtype(dtype)
A:polars.expr.string.json_path->parse_into_expression(json_path, str_as_lit=True)
A:polars.expr.string.by->parse_into_expression(by, str_as_lit=True)
A:polars.expr.string.value->parse_into_expression(value, str_as_lit=True)
A:polars.expr.string.offset->parse_into_expression(offset)
A:polars.expr.string.n->parse_into_expression(n)
A:polars.expr.string.split->self.split('')
A:polars.expr.string.base->parse_into_expression(base, str_as_lit=False)
A:polars.expr.string.patterns->parse_into_expression(patterns, str_as_lit=False, list_as_series=True)
A:polars.expr.string.replace_with->parse_into_expression(replace_with, str_as_lit=True, list_as_series=True)
polars.expr.string.ExprStringNameSpace(self,expr:Expr)
polars.expr.string.ExprStringNameSpace.__init__(self,expr:Expr)
polars.expr.string.ExprStringNameSpace.concat(self,delimiter:str|None=None,*,ignore_nulls:bool=True)->Expr
polars.expr.string.ExprStringNameSpace.contains(self,pattern:str|Expr,*,literal:bool=False,strict:bool=True)->Expr
polars.expr.string.ExprStringNameSpace.contains_any(self,patterns:IntoExpr,*,ascii_case_insensitive:bool=False)->Expr
polars.expr.string.ExprStringNameSpace.count_matches(self,pattern:str|Expr,*,literal:bool=False)->Expr
polars.expr.string.ExprStringNameSpace.decode(self,encoding:TransferEncoding,*,strict:bool=True)->Expr
polars.expr.string.ExprStringNameSpace.encode(self,encoding:TransferEncoding)->Expr
polars.expr.string.ExprStringNameSpace.ends_with(self,suffix:str|Expr)->Expr
polars.expr.string.ExprStringNameSpace.escape_regex(self)->Expr
polars.expr.string.ExprStringNameSpace.explode(self)->Expr
polars.expr.string.ExprStringNameSpace.extract(self,pattern:IntoExprColumn,group_index:int=1)->Expr
polars.expr.string.ExprStringNameSpace.extract_all(self,pattern:str|Expr)->Expr
polars.expr.string.ExprStringNameSpace.extract_groups(self,pattern:str)->Expr
polars.expr.string.ExprStringNameSpace.extract_many(self,patterns:IntoExpr,*,ascii_case_insensitive:bool=False,overlapping:bool=False)->Expr
polars.expr.string.ExprStringNameSpace.find(self,pattern:str|Expr,*,literal:bool=False,strict:bool=True)->Expr
polars.expr.string.ExprStringNameSpace.find_many(self,patterns:IntoExpr,*,ascii_case_insensitive:bool=False,overlapping:bool=False)->Expr
polars.expr.string.ExprStringNameSpace.head(self,n:int|IntoExprColumn)->Expr
polars.expr.string.ExprStringNameSpace.join(self,delimiter:str='',*,ignore_nulls:bool=True)->Expr
polars.expr.string.ExprStringNameSpace.json_decode(self,dtype:PolarsDataType|None=None,*,infer_schema_length:int|None=N_INFER_DEFAULT)->Expr
polars.expr.string.ExprStringNameSpace.json_path_match(self,json_path:IntoExprColumn)->Expr
polars.expr.string.ExprStringNameSpace.len_bytes(self)->Expr
polars.expr.string.ExprStringNameSpace.len_chars(self)->Expr
polars.expr.string.ExprStringNameSpace.normalize(self,form:UnicodeForm='NFC')->Expr
polars.expr.string.ExprStringNameSpace.pad_end(self,length:int,fill_char:str='')->Expr
polars.expr.string.ExprStringNameSpace.pad_start(self,length:int,fill_char:str='')->Expr
polars.expr.string.ExprStringNameSpace.replace(self,pattern:str|Expr,value:str|Expr,*,literal:bool=False,n:int=1)->Expr
polars.expr.string.ExprStringNameSpace.replace_all(self,pattern:str|Expr,value:str|Expr,*,literal:bool=False)->Expr
polars.expr.string.ExprStringNameSpace.replace_many(self,patterns:IntoExpr|Mapping[str,str],replace_with:IntoExpr|NoDefault=no_default,*,ascii_case_insensitive:bool=False)->Expr
polars.expr.string.ExprStringNameSpace.reverse(self)->Expr
polars.expr.string.ExprStringNameSpace.slice(self,offset:int|IntoExprColumn,length:int|IntoExprColumn|None=None)->Expr
polars.expr.string.ExprStringNameSpace.split(self,by:IntoExpr,*,inclusive:bool=False)->Expr
polars.expr.string.ExprStringNameSpace.split_exact(self,by:IntoExpr,n:int,*,inclusive:bool=False)->Expr
polars.expr.string.ExprStringNameSpace.splitn(self,by:IntoExpr,n:int)->Expr
polars.expr.string.ExprStringNameSpace.starts_with(self,prefix:str|Expr)->Expr
polars.expr.string.ExprStringNameSpace.strip_chars(self,characters:IntoExpr=None)->Expr
polars.expr.string.ExprStringNameSpace.strip_chars_end(self,characters:IntoExpr=None)->Expr
polars.expr.string.ExprStringNameSpace.strip_chars_start(self,characters:IntoExpr=None)->Expr
polars.expr.string.ExprStringNameSpace.strip_prefix(self,prefix:IntoExpr)->Expr
polars.expr.string.ExprStringNameSpace.strip_suffix(self,suffix:IntoExpr)->Expr
polars.expr.string.ExprStringNameSpace.strptime(self,dtype:PolarsTemporalType,format:str|None=None,*,strict:bool=True,exact:bool=True,cache:bool=True,ambiguous:Ambiguous|Expr='raise')->Expr
polars.expr.string.ExprStringNameSpace.tail(self,n:int|IntoExprColumn)->Expr
polars.expr.string.ExprStringNameSpace.to_date(self,format:str|None=None,*,strict:bool=True,exact:bool=True,cache:bool=True)->Expr
polars.expr.string.ExprStringNameSpace.to_datetime(self,format:str|None=None,*,time_unit:TimeUnit|None=None,time_zone:str|None=None,strict:bool=True,exact:bool=True,cache:bool=True,ambiguous:Ambiguous|Expr='raise')->Expr
polars.expr.string.ExprStringNameSpace.to_decimal(self,inference_length:int=100)->Expr
polars.expr.string.ExprStringNameSpace.to_integer(self,*,base:int|IntoExprColumn=10,strict:bool=True)->Expr
polars.expr.string.ExprStringNameSpace.to_lowercase(self)->Expr
polars.expr.string.ExprStringNameSpace.to_time(self,format:str|None=None,*,strict:bool=True,cache:bool=True)->Expr
polars.expr.string.ExprStringNameSpace.to_titlecase(self)->Expr
polars.expr.string.ExprStringNameSpace.to_uppercase(self)->Expr
polars.expr.string.ExprStringNameSpace.zfill(self,length:int|IntoExprColumn)->Expr
polars.expr.string._validate_format_argument(format:str|None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/expr/binary.py----------------------------------------
A:polars.expr.binary.literal->parse_into_expression(literal, str_as_lit=True)
A:polars.expr.binary.suffix->parse_into_expression(suffix, str_as_lit=True)
A:polars.expr.binary.prefix->parse_into_expression(prefix, str_as_lit=True)
A:polars.expr.binary.sz->scale_bytes(sz, unit)
A:polars.expr.binary.dtype->parse_into_dtype(dtype)
polars.expr.binary.ExprBinaryNameSpace(self,expr:Expr)
polars.expr.binary.ExprBinaryNameSpace.__init__(self,expr:Expr)
polars.expr.binary.ExprBinaryNameSpace.contains(self,literal:IntoExpr)->Expr
polars.expr.binary.ExprBinaryNameSpace.decode(self,encoding:TransferEncoding,*,strict:bool=True)->Expr
polars.expr.binary.ExprBinaryNameSpace.encode(self,encoding:TransferEncoding)->Expr
polars.expr.binary.ExprBinaryNameSpace.ends_with(self,suffix:IntoExpr)->Expr
polars.expr.binary.ExprBinaryNameSpace.reinterpret(self,*,dtype:PolarsDataType,endianness:Endianness='little')->Expr
polars.expr.binary.ExprBinaryNameSpace.size(self,unit:SizeUnit='b')->Expr
polars.expr.binary.ExprBinaryNameSpace.starts_with(self,prefix:IntoExpr)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/expr/expr.py----------------------------------------
A:polars.expr.expr.T->TypeVar('T')
A:polars.expr.expr.P->ParamSpec('P')
A:polars.expr.expr.expr->cls.__new__(cls)
A:polars.expr.expr.other->parse_into_expression(other)
A:polars.expr.expr.other_expr->parse_into_expression(other)
A:polars.expr.expr.exponent->parse_into_expression(exponent)
A:polars.expr.expr.base->parse_into_expression(base)
A:polars.expr.expr.num_expr->sum((isinstance(inp, Expr) for inp in inputs))
A:polars.expr.expr.root_expr->polars.functions.struct(actual_exprs)
A:polars.expr.expr.inp->inp.alias(f'argument_{index}').alias(f'argument_{index}')
A:polars.expr.expr.source->BytesIO(source)
A:polars.expr.expr.offset->parse_as_duration_string(offset)
A:polars.expr.expr.length->polars.functions.lit(length)
A:polars.expr.expr.dtype->parse_into_dtype(dtype)
A:polars.expr.expr.k->parse_into_expression(k)
A:polars.expr.expr.by->parse_into_expression(by)
A:polars.expr.expr.reverse->extend_bool(reverse, len(by), 'reverse', 'by')
A:polars.expr.expr.element->parse_into_expression(element, str_as_lit=True, list_as_series=True)
A:polars.expr.expr.descending->extend_bool(descending, len(by), 'descending', 'by')
A:polars.expr.expr.nulls_last->extend_bool(nulls_last, len(by), 'nulls_last', 'by')
A:polars.expr.expr.indices_lit->parse_into_expression(indices)
A:polars.expr.expr.index_lit->parse_into_expression(index)
A:polars.expr.expr.fill_value->parse_into_expression(value, str_as_lit=True)
A:polars.expr.expr.n->parse_into_expression(n)
A:polars.expr.expr.value->parse_into_expression(value, str_as_lit=True)
A:polars.expr.expr.partition_by->parse_into_list_of_expressions(partition_by, *more_exprs)
A:polars.expr.expr.order_by->parse_into_list_of_expressions(order_by)
A:polars.expr.expr.period->parse_as_duration_string(period)
A:polars.expr.expr.quantile->parse_into_expression(quantile)
A:polars.expr.expr.pyexpr->self._pyexpr.qcut(quantiles, labels, left_closed, allow_duplicates, include_breaks)
A:polars.expr.expr.predicate->parse_predicates_constraints_into_expression(*predicates, **constraints)
A:polars.expr.expr.result->self._pyexpr.skip_batch_predicate(schema)
A:polars.expr.expr.return_dtype->parse_into_dtype(return_dtype)
A:polars.expr.expr.root_names->self.meta.root_names()
A:polars.expr.expr.s->s.alias(x.name).alias(x.name)
A:polars.expr.expr.df->x.to_frame('x')
A:polars.expr.expr.n_threads->thread_pool_size()
A:polars.expr.expr.lower_bound->parse_into_expression(lower_bound)
A:polars.expr.expr.upper_bound->parse_into_expression(upper_bound)
A:polars.expr.expr.window_size->parse_as_duration_string(window_size)
A:polars.expr.expr.fraction->parse_into_expression(fraction)
A:polars.expr.expr.alpha->_prepare_alpha(com, span, half_life, alpha)
A:polars.expr.expr.half_life->parse_as_duration_string(half_life)
A:polars.expr.expr.bins->parse_into_expression(bins)
A:polars.expr.expr.new->parse_into_expression(new, str_as_lit=True, list_as_series=True)
A:polars.expr.expr.old->parse_into_expression(old, str_as_lit=True, list_as_series=True)
polars.Expr
polars.Expr.__abs__(self)->Expr
polars.Expr.__add__(self,other:IntoExpr)->Expr
polars.Expr.__and__(self,other:IntoExprColumn|int|bool)->Expr
polars.Expr.__array_ufunc__(self,ufunc:Callable[...,Any],method:str,*inputs:Any,**kwargs:Any)->Expr
polars.Expr.__bool__(self)->NoReturn
polars.Expr.__eq__(self,other:IntoExpr)->Expr
polars.Expr.__floordiv__(self,other:IntoExpr)->Expr
polars.Expr.__ge__(self,other:IntoExpr)->Expr
polars.Expr.__getstate__(self)->bytes
polars.Expr.__gt__(self,other:IntoExpr)->Expr
polars.Expr.__invert__(self)->Expr
polars.Expr.__le__(self,other:IntoExpr)->Expr
polars.Expr.__lt__(self,other:IntoExpr)->Expr
polars.Expr.__mod__(self,other:IntoExpr)->Expr
polars.Expr.__mul__(self,other:IntoExpr)->Expr
polars.Expr.__ne__(self,other:IntoExpr)->Expr
polars.Expr.__neg__(self)->Expr
polars.Expr.__or__(self,other:IntoExprColumn|int|bool)->Expr
polars.Expr.__pos__(self)->Expr
polars.Expr.__pow__(self,exponent:IntoExprColumn|int|float)->Expr
polars.Expr.__radd__(self,other:IntoExpr)->Expr
polars.Expr.__rand__(self,other:IntoExprColumn|int|bool)->Expr
polars.Expr.__repr__(self)->str
polars.Expr.__rfloordiv__(self,other:IntoExpr)->Expr
polars.Expr.__rmod__(self,other:IntoExpr)->Expr
polars.Expr.__rmul__(self,other:IntoExpr)->Expr
polars.Expr.__ror__(self,other:IntoExprColumn|int|bool)->Expr
polars.Expr.__rpow__(self,base:IntoExprColumn|int|float)->Expr
polars.Expr.__rsub__(self,other:IntoExpr)->Expr
polars.Expr.__rtruediv__(self,other:IntoExpr)->Expr
polars.Expr.__rxor__(self,other:IntoExprColumn|int|bool)->Expr
polars.Expr.__setstate__(self,state:bytes)->None
polars.Expr.__str__(self)->str
polars.Expr.__sub__(self,other:IntoExpr)->Expr
polars.Expr.__truediv__(self,other:IntoExpr)->Expr
polars.Expr.__xor__(self,other:IntoExprColumn|int|bool)->Expr
polars.Expr._from_pyexpr(cls,pyexpr:PyExpr)->Expr
polars.Expr._map_batches_wrapper(self,function:Callable[[Series],Series|Any],return_dtype:PolarsDataType|None)
polars.Expr._repr_html_(self)->str
polars.Expr._skip_batch_predicate(self,schema:SchemaDict)->Expr | None
polars.Expr.abs(self)->Expr
polars.Expr.add(self,other:Any)->Expr
polars.Expr.agg_groups(self)->Expr
polars.Expr.alias(self,name:str)->Expr
polars.Expr.all(self,*,ignore_nulls:bool=True)->Expr
polars.Expr.and_(self,*others:Any)->Expr
polars.Expr.any(self,*,ignore_nulls:bool=True)->Expr
polars.Expr.append(self,other:IntoExpr,*,upcast:bool=True)->Expr
polars.Expr.approx_n_unique(self)->Expr
polars.Expr.arccos(self)->Expr
polars.Expr.arccosh(self)->Expr
polars.Expr.arcsin(self)->Expr
polars.Expr.arcsinh(self)->Expr
polars.Expr.arctan(self)->Expr
polars.Expr.arctanh(self)->Expr
polars.Expr.arg_max(self)->Expr
polars.Expr.arg_min(self)->Expr
polars.Expr.arg_sort(self,*,descending:bool=False,nulls_last:bool=False)->Expr
polars.Expr.arg_true(self)->Expr
polars.Expr.arg_unique(self)->Expr
polars.Expr.arr(self)->ExprArrayNameSpace
polars.Expr.backward_fill(self,limit:int|None=None)->Expr
polars.Expr.bin(self)->ExprBinaryNameSpace
polars.Expr.bitwise_and(self)->Expr
polars.Expr.bitwise_count_ones(self)->Expr
polars.Expr.bitwise_count_zeros(self)->Expr
polars.Expr.bitwise_leading_ones(self)->Expr
polars.Expr.bitwise_leading_zeros(self)->Expr
polars.Expr.bitwise_or(self)->Expr
polars.Expr.bitwise_trailing_ones(self)->Expr
polars.Expr.bitwise_trailing_zeros(self)->Expr
polars.Expr.bitwise_xor(self)->Expr
polars.Expr.bottom_k(self,k:int|IntoExprColumn=5)->Expr
polars.Expr.bottom_k_by(self,by:IntoExpr|Iterable[IntoExpr],k:int|IntoExprColumn=5,*,reverse:bool|Sequence[bool]=False)->Expr
polars.Expr.cast(self,dtype:PolarsDataType|type[Any],*,strict:bool=True,wrap_numerical:bool=False)->Expr
polars.Expr.cat(self)->ExprCatNameSpace
polars.Expr.cbrt(self)->Expr
polars.Expr.ceil(self)->Expr
polars.Expr.clip(self,lower_bound:NumericLiteral|TemporalLiteral|IntoExprColumn|None=None,upper_bound:NumericLiteral|TemporalLiteral|IntoExprColumn|None=None)->Expr
polars.Expr.cos(self)->Expr
polars.Expr.cosh(self)->Expr
polars.Expr.cot(self)->Expr
polars.Expr.count(self)->Expr
polars.Expr.cum_count(self,*,reverse:bool=False)->Expr
polars.Expr.cum_max(self,*,reverse:bool=False)->Expr
polars.Expr.cum_min(self,*,reverse:bool=False)->Expr
polars.Expr.cum_prod(self,*,reverse:bool=False)->Expr
polars.Expr.cum_sum(self,*,reverse:bool=False)->Expr
polars.Expr.cumulative_eval(self,expr:Expr,*,min_samples:int=1,parallel:bool=False)->Expr
polars.Expr.cut(self,breaks:Sequence[float],*,labels:Sequence[str]|None=None,left_closed:bool=False,include_breaks:bool=False)->Expr
polars.Expr.degrees(self)->Expr
polars.Expr.deserialize(cls,source:str|Path|IOBase|bytes,*,format:SerializationFormat='binary')->Expr
polars.Expr.diff(self,n:int|IntoExpr=1,null_behavior:NullBehavior='ignore')->Expr
polars.Expr.dot(self,other:Expr|str)->Expr
polars.Expr.drop_nans(self)->Expr
polars.Expr.drop_nulls(self)->Expr
polars.Expr.dt(self)->ExprDateTimeNameSpace
polars.Expr.entropy(self,base:float=math.e,*,normalize:bool=True)->Expr
polars.Expr.eq(self,other:Any)->Expr
polars.Expr.eq_missing(self,other:Any)->Expr
polars.Expr.ewm_mean(self,*,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_samples:int=1,ignore_nulls:bool=False)->Expr
polars.Expr.ewm_mean_by(self,by:str|IntoExpr,*,half_life:str|timedelta)->Expr
polars.Expr.ewm_std(self,*,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,bias:bool=False,min_samples:int=1,ignore_nulls:bool=False)->Expr
polars.Expr.ewm_var(self,*,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,bias:bool=False,min_samples:int=1,ignore_nulls:bool=False)->Expr
polars.Expr.exclude(self,columns:str|PolarsDataType|Collection[str]|Collection[PolarsDataType],*more_columns:str|PolarsDataType)->Expr
polars.Expr.exp(self)->Expr
polars.Expr.explode(self)->Expr
polars.Expr.extend_constant(self,value:IntoExpr,n:int|IntoExprColumn)->Expr
polars.Expr.fill_nan(self,value:int|float|Expr|None)->Expr
polars.Expr.fill_null(self,value:Any|Expr|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->Expr
polars.Expr.filter(self,*predicates:IntoExprColumn|Iterable[IntoExprColumn],**constraints:Any)->Expr
polars.Expr.first(self)->Expr
polars.Expr.flatten(self)->Expr
polars.Expr.floor(self)->Expr
polars.Expr.floordiv(self,other:Any)->Expr
polars.Expr.forward_fill(self,limit:int|None=None)->Expr
polars.Expr.from_json(cls,value:str)->Expr
polars.Expr.gather(self,indices:int|Sequence[int]|IntoExpr|Series|np.ndarray[Any,Any])->Expr
polars.Expr.gather_every(self,n:int,offset:int=0)->Expr
polars.Expr.ge(self,other:Any)->Expr
polars.Expr.get(self,index:int|Expr)->Expr
polars.Expr.gt(self,other:Any)->Expr
polars.Expr.has_nulls(self)->Expr
polars.Expr.hash(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->Expr
polars.Expr.head(self,n:int|Expr=10)->Expr
polars.Expr.hist(self,bins:IntoExpr|None=None,*,bin_count:int|None=None,include_category:bool=False,include_breakpoint:bool=False)->Expr
polars.Expr.implode(self)->Expr
polars.Expr.index_of(self,element:IntoExpr)->Expr
polars.Expr.inspect(self,fmt:str='{}')->Expr
polars.Expr.interpolate(self,method:InterpolationMethod='linear')->Expr
polars.Expr.interpolate_by(self,by:IntoExpr)->Expr
polars.Expr.is_between(self,lower_bound:IntoExpr,upper_bound:IntoExpr,closed:ClosedInterval='both')->Expr
polars.Expr.is_duplicated(self)->Expr
polars.Expr.is_finite(self)->Expr
polars.Expr.is_first_distinct(self)->Expr
polars.Expr.is_in(self,other:Expr|Collection[Any]|Series,*,nulls_equal:bool=False)->Expr
polars.Expr.is_infinite(self)->Expr
polars.Expr.is_last_distinct(self)->Expr
polars.Expr.is_nan(self)->Expr
polars.Expr.is_not_nan(self)->Expr
polars.Expr.is_not_null(self)->Expr
polars.Expr.is_null(self)->Expr
polars.Expr.is_unique(self)->Expr
polars.Expr.kurtosis(self,*,fisher:bool=True,bias:bool=True)->Expr
polars.Expr.last(self)->Expr
polars.Expr.le(self,other:Any)->Expr
polars.Expr.len(self)->Expr
polars.Expr.limit(self,n:int|Expr=10)->Expr
polars.Expr.list(self)->ExprListNameSpace
polars.Expr.log(self,base:float=math.e)->Expr
polars.Expr.log10(self)->Expr
polars.Expr.log1p(self)->Expr
polars.Expr.lower_bound(self)->Expr
polars.Expr.lt(self,other:Any)->Expr
polars.Expr.map_batches(self,function:Callable[[Series],Series|Any],return_dtype:PolarsDataType|None=None,*,agg_list:bool=False,is_elementwise:bool=False,returns_scalar:bool=False)->Expr
polars.Expr.map_elements(self,function:Callable[[Any],Any],return_dtype:PolarsDataType|None=None,*,skip_nulls:bool=True,pass_name:bool=False,strategy:MapElementsStrategy='thread_local',returns_scalar:bool=False)->Expr
polars.Expr.max(self)->Expr
polars.Expr.mean(self)->Expr
polars.Expr.median(self)->Expr
polars.Expr.meta(self)->ExprMetaNameSpace
polars.Expr.min(self)->Expr
polars.Expr.mod(self,other:Any)->Expr
polars.Expr.mode(self)->Expr
polars.Expr.mul(self,other:Any)->Expr
polars.Expr.n_unique(self)->Expr
polars.Expr.name(self)->ExprNameNameSpace
polars.Expr.nan_max(self)->Expr
polars.Expr.nan_min(self)->Expr
polars.Expr.ne(self,other:Any)->Expr
polars.Expr.ne_missing(self,other:Any)->Expr
polars.Expr.neg(self)->Expr
polars.Expr.not_(self)->Expr
polars.Expr.null_count(self)->Expr
polars.Expr.or_(self,*others:Any)->Expr
polars.Expr.over(self,partition_by:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr,order_by:IntoExpr|Iterable[IntoExpr]|None=None,descending:bool=False,nulls_last:bool=False,mapping_strategy:WindowMappingStrategy='group_to_rows')->Expr
polars.Expr.pct_change(self,n:int|IntoExprColumn=1)->Expr
polars.Expr.peak_max(self)->Expr
polars.Expr.peak_min(self)->Expr
polars.Expr.pipe(self,function:Callable[Concatenate[Expr,P],T],*args:P.args,**kwargs:P.kwargs)->T
polars.Expr.pow(self,exponent:IntoExprColumn|int|float)->Expr
polars.Expr.product(self)->Expr
polars.Expr.qcut(self,quantiles:Sequence[float]|int,*,labels:Sequence[str]|None=None,left_closed:bool=False,allow_duplicates:bool=False,include_breaks:bool=False)->Expr
polars.Expr.quantile(self,quantile:float|Expr,interpolation:RollingInterpolationMethod='nearest')->Expr
polars.Expr.radians(self)->Expr
polars.Expr.rank(self,method:RankMethod='average',*,descending:bool=False,seed:int|None=None)->Expr
polars.Expr.rechunk(self)->Expr
polars.Expr.register_plugin(self,*,lib:str,symbol:str,args:list[IntoExpr]|None=None,kwargs:dict[Any,Any]|None=None,is_elementwise:bool=False,input_wildcard_expansion:bool=False,returns_scalar:bool=False,cast_to_supertypes:bool=False,pass_name_to_apply:bool=False,changes_length:bool=False)->Expr
polars.Expr.reinterpret(self,*,signed:bool=True)->Expr
polars.Expr.repeat_by(self,by:pl.Series|Expr|str|int)->Expr
polars.Expr.replace(self,old:IntoExpr|Sequence[Any]|Mapping[Any,Any],new:IntoExpr|Sequence[Any]|NoDefault=no_default,*,default:IntoExpr|NoDefault=no_default,return_dtype:PolarsDataType|None=None)->Expr
polars.Expr.replace_strict(self,old:IntoExpr|Sequence[Any]|Mapping[Any,Any],new:IntoExpr|Sequence[Any]|NoDefault=no_default,*,default:IntoExpr|NoDefault=no_default,return_dtype:PolarsDataType|None=None)->Expr
polars.Expr.reshape(self,dimensions:tuple[int,...])->Expr
polars.Expr.reverse(self)->Expr
polars.Expr.rle(self)->Expr
polars.Expr.rle_id(self)->Expr
polars.Expr.rolling(self,index_column:str,*,period:str|timedelta,offset:str|timedelta|None=None,closed:ClosedInterval='right')->Expr
polars.Expr.rolling_map(self,function:Callable[[Series],Any],window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Expr
polars.Expr.rolling_max(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Expr
polars.Expr.rolling_max_by(self,by:IntoExpr,window_size:timedelta|str,*,min_samples:int=1,closed:ClosedInterval='right')->Expr
polars.Expr.rolling_mean(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Expr
polars.Expr.rolling_mean_by(self,by:IntoExpr,window_size:timedelta|str,*,min_samples:int=1,closed:ClosedInterval='right')->Expr
polars.Expr.rolling_median(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Expr
polars.Expr.rolling_median_by(self,by:IntoExpr,window_size:timedelta|str,*,min_samples:int=1,closed:ClosedInterval='right')->Expr
polars.Expr.rolling_min(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Expr
polars.Expr.rolling_min_by(self,by:IntoExpr,window_size:timedelta|str,*,min_samples:int=1,closed:ClosedInterval='right')->Expr
polars.Expr.rolling_quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest',window_size:int=2,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Expr
polars.Expr.rolling_quantile_by(self,by:IntoExpr,window_size:timedelta|str,*,quantile:float,interpolation:RollingInterpolationMethod='nearest',min_samples:int=1,closed:ClosedInterval='right')->Expr
polars.Expr.rolling_skew(self,window_size:int,*,bias:bool=True)->Expr
polars.Expr.rolling_std(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False,ddof:int=1)->Expr
polars.Expr.rolling_std_by(self,by:IntoExpr,window_size:timedelta|str,*,min_samples:int=1,closed:ClosedInterval='right',ddof:int=1)->Expr
polars.Expr.rolling_sum(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Expr
polars.Expr.rolling_sum_by(self,by:IntoExpr,window_size:timedelta|str,*,min_samples:int=1,closed:ClosedInterval='right')->Expr
polars.Expr.rolling_var(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False,ddof:int=1)->Expr
polars.Expr.rolling_var_by(self,by:IntoExpr,window_size:timedelta|str,*,min_samples:int=1,closed:ClosedInterval='right',ddof:int=1)->Expr
polars.Expr.round(self,decimals:int=0)->Expr
polars.Expr.round_sig_figs(self,digits:int)->Expr
polars.Expr.sample(self,n:int|IntoExprColumn|None=None,*,fraction:float|IntoExprColumn|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->Expr
polars.Expr.search_sorted(self,element:IntoExpr|np.ndarray[Any,Any],side:SearchSortedSide='any')->Expr
polars.Expr.set_sorted(self,*,descending:bool=False)->Expr
polars.Expr.shift(self,n:int|IntoExprColumn=1,*,fill_value:IntoExpr|None=None)->Expr
polars.Expr.shrink_dtype(self)->Expr
polars.Expr.shuffle(self,seed:int|None=None)->Expr
polars.Expr.sign(self)->Expr
polars.Expr.sin(self)->Expr
polars.Expr.sinh(self)->Expr
polars.Expr.skew(self,*,bias:bool=True)->Expr
polars.Expr.slice(self,offset:int|Expr,length:int|Expr|None=None)->Expr
polars.Expr.sort(self,*,descending:bool=False,nulls_last:bool=False)->Expr
polars.Expr.sort_by(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,descending:bool|Sequence[bool]=False,nulls_last:bool|Sequence[bool]=False,multithreaded:bool=True,maintain_order:bool=False)->Expr
polars.Expr.sqrt(self)->Expr
polars.Expr.std(self,ddof:int=1)->Expr
polars.Expr.str(self)->ExprStringNameSpace
polars.Expr.struct(self)->ExprStructNameSpace
polars.Expr.sub(self,other:Any)->Expr
polars.Expr.sum(self)->Expr
polars.Expr.tail(self,n:int|Expr=10)->Expr
polars.Expr.tan(self)->Expr
polars.Expr.tanh(self)->Expr
polars.Expr.to_physical(self)->Expr
polars.Expr.top_k(self,k:int|IntoExprColumn=5)->Expr
polars.Expr.top_k_by(self,by:IntoExpr|Iterable[IntoExpr],k:int|IntoExprColumn=5,*,reverse:bool|Sequence[bool]=False)->Expr
polars.Expr.truediv(self,other:Any)->Expr
polars.Expr.unique(self,*,maintain_order:bool=False)->Expr
polars.Expr.unique_counts(self)->Expr
polars.Expr.upper_bound(self)->Expr
polars.Expr.value_counts(self,*,sort:bool=False,parallel:bool=False,name:str|None=None,normalize:bool=False)->Expr
polars.Expr.var(self,ddof:int=1)->Expr
polars.Expr.where(self,predicate:Expr)->Expr
polars.Expr.xor(self,other:Any)->Expr
polars.expr.expr.Expr
polars.expr.expr.Expr.__abs__(self)->Expr
polars.expr.expr.Expr.__add__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__and__(self,other:IntoExprColumn|int|bool)->Expr
polars.expr.expr.Expr.__array_ufunc__(self,ufunc:Callable[...,Any],method:str,*inputs:Any,**kwargs:Any)->Expr
polars.expr.expr.Expr.__bool__(self)->NoReturn
polars.expr.expr.Expr.__eq__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__floordiv__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__ge__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__getstate__(self)->bytes
polars.expr.expr.Expr.__gt__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__invert__(self)->Expr
polars.expr.expr.Expr.__le__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__lt__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__mod__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__mul__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__ne__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__neg__(self)->Expr
polars.expr.expr.Expr.__or__(self,other:IntoExprColumn|int|bool)->Expr
polars.expr.expr.Expr.__pos__(self)->Expr
polars.expr.expr.Expr.__pow__(self,exponent:IntoExprColumn|int|float)->Expr
polars.expr.expr.Expr.__radd__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__rand__(self,other:IntoExprColumn|int|bool)->Expr
polars.expr.expr.Expr.__repr__(self)->str
polars.expr.expr.Expr.__rfloordiv__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__rmod__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__rmul__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__ror__(self,other:IntoExprColumn|int|bool)->Expr
polars.expr.expr.Expr.__rpow__(self,base:IntoExprColumn|int|float)->Expr
polars.expr.expr.Expr.__rsub__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__rtruediv__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__rxor__(self,other:IntoExprColumn|int|bool)->Expr
polars.expr.expr.Expr.__setstate__(self,state:bytes)->None
polars.expr.expr.Expr.__str__(self)->str
polars.expr.expr.Expr.__sub__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__truediv__(self,other:IntoExpr)->Expr
polars.expr.expr.Expr.__xor__(self,other:IntoExprColumn|int|bool)->Expr
polars.expr.expr.Expr._from_pyexpr(cls,pyexpr:PyExpr)->Expr
polars.expr.expr.Expr._map_batches_wrapper(self,function:Callable[[Series],Series|Any],return_dtype:PolarsDataType|None)
polars.expr.expr.Expr._map_batches_wrapper.__init__(self,function:Callable[[Series],Series|Any],return_dtype:PolarsDataType|None)
polars.expr.expr.Expr._repr_html_(self)->str
polars.expr.expr.Expr._skip_batch_predicate(self,schema:SchemaDict)->Expr | None
polars.expr.expr.Expr.abs(self)->Expr
polars.expr.expr.Expr.add(self,other:Any)->Expr
polars.expr.expr.Expr.agg_groups(self)->Expr
polars.expr.expr.Expr.alias(self,name:str)->Expr
polars.expr.expr.Expr.all(self,*,ignore_nulls:bool=True)->Expr
polars.expr.expr.Expr.and_(self,*others:Any)->Expr
polars.expr.expr.Expr.any(self,*,ignore_nulls:bool=True)->Expr
polars.expr.expr.Expr.append(self,other:IntoExpr,*,upcast:bool=True)->Expr
polars.expr.expr.Expr.approx_n_unique(self)->Expr
polars.expr.expr.Expr.arccos(self)->Expr
polars.expr.expr.Expr.arccosh(self)->Expr
polars.expr.expr.Expr.arcsin(self)->Expr
polars.expr.expr.Expr.arcsinh(self)->Expr
polars.expr.expr.Expr.arctan(self)->Expr
polars.expr.expr.Expr.arctanh(self)->Expr
polars.expr.expr.Expr.arg_max(self)->Expr
polars.expr.expr.Expr.arg_min(self)->Expr
polars.expr.expr.Expr.arg_sort(self,*,descending:bool=False,nulls_last:bool=False)->Expr
polars.expr.expr.Expr.arg_true(self)->Expr
polars.expr.expr.Expr.arg_unique(self)->Expr
polars.expr.expr.Expr.arr(self)->ExprArrayNameSpace
polars.expr.expr.Expr.backward_fill(self,limit:int|None=None)->Expr
polars.expr.expr.Expr.bin(self)->ExprBinaryNameSpace
polars.expr.expr.Expr.bitwise_and(self)->Expr
polars.expr.expr.Expr.bitwise_count_ones(self)->Expr
polars.expr.expr.Expr.bitwise_count_zeros(self)->Expr
polars.expr.expr.Expr.bitwise_leading_ones(self)->Expr
polars.expr.expr.Expr.bitwise_leading_zeros(self)->Expr
polars.expr.expr.Expr.bitwise_or(self)->Expr
polars.expr.expr.Expr.bitwise_trailing_ones(self)->Expr
polars.expr.expr.Expr.bitwise_trailing_zeros(self)->Expr
polars.expr.expr.Expr.bitwise_xor(self)->Expr
polars.expr.expr.Expr.bottom_k(self,k:int|IntoExprColumn=5)->Expr
polars.expr.expr.Expr.bottom_k_by(self,by:IntoExpr|Iterable[IntoExpr],k:int|IntoExprColumn=5,*,reverse:bool|Sequence[bool]=False)->Expr
polars.expr.expr.Expr.cast(self,dtype:PolarsDataType|type[Any],*,strict:bool=True,wrap_numerical:bool=False)->Expr
polars.expr.expr.Expr.cat(self)->ExprCatNameSpace
polars.expr.expr.Expr.cbrt(self)->Expr
polars.expr.expr.Expr.ceil(self)->Expr
polars.expr.expr.Expr.clip(self,lower_bound:NumericLiteral|TemporalLiteral|IntoExprColumn|None=None,upper_bound:NumericLiteral|TemporalLiteral|IntoExprColumn|None=None)->Expr
polars.expr.expr.Expr.cos(self)->Expr
polars.expr.expr.Expr.cosh(self)->Expr
polars.expr.expr.Expr.cot(self)->Expr
polars.expr.expr.Expr.count(self)->Expr
polars.expr.expr.Expr.cum_count(self,*,reverse:bool=False)->Expr
polars.expr.expr.Expr.cum_max(self,*,reverse:bool=False)->Expr
polars.expr.expr.Expr.cum_min(self,*,reverse:bool=False)->Expr
polars.expr.expr.Expr.cum_prod(self,*,reverse:bool=False)->Expr
polars.expr.expr.Expr.cum_sum(self,*,reverse:bool=False)->Expr
polars.expr.expr.Expr.cumulative_eval(self,expr:Expr,*,min_samples:int=1,parallel:bool=False)->Expr
polars.expr.expr.Expr.cut(self,breaks:Sequence[float],*,labels:Sequence[str]|None=None,left_closed:bool=False,include_breaks:bool=False)->Expr
polars.expr.expr.Expr.degrees(self)->Expr
polars.expr.expr.Expr.deserialize(cls,source:str|Path|IOBase|bytes,*,format:SerializationFormat='binary')->Expr
polars.expr.expr.Expr.diff(self,n:int|IntoExpr=1,null_behavior:NullBehavior='ignore')->Expr
polars.expr.expr.Expr.dot(self,other:Expr|str)->Expr
polars.expr.expr.Expr.drop_nans(self)->Expr
polars.expr.expr.Expr.drop_nulls(self)->Expr
polars.expr.expr.Expr.dt(self)->ExprDateTimeNameSpace
polars.expr.expr.Expr.entropy(self,base:float=math.e,*,normalize:bool=True)->Expr
polars.expr.expr.Expr.eq(self,other:Any)->Expr
polars.expr.expr.Expr.eq_missing(self,other:Any)->Expr
polars.expr.expr.Expr.ewm_mean(self,*,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,min_samples:int=1,ignore_nulls:bool=False)->Expr
polars.expr.expr.Expr.ewm_mean_by(self,by:str|IntoExpr,*,half_life:str|timedelta)->Expr
polars.expr.expr.Expr.ewm_std(self,*,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,bias:bool=False,min_samples:int=1,ignore_nulls:bool=False)->Expr
polars.expr.expr.Expr.ewm_var(self,*,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,adjust:bool=True,bias:bool=False,min_samples:int=1,ignore_nulls:bool=False)->Expr
polars.expr.expr.Expr.exclude(self,columns:str|PolarsDataType|Collection[str]|Collection[PolarsDataType],*more_columns:str|PolarsDataType)->Expr
polars.expr.expr.Expr.exp(self)->Expr
polars.expr.expr.Expr.explode(self)->Expr
polars.expr.expr.Expr.extend_constant(self,value:IntoExpr,n:int|IntoExprColumn)->Expr
polars.expr.expr.Expr.fill_nan(self,value:int|float|Expr|None)->Expr
polars.expr.expr.Expr.fill_null(self,value:Any|Expr|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->Expr
polars.expr.expr.Expr.filter(self,*predicates:IntoExprColumn|Iterable[IntoExprColumn],**constraints:Any)->Expr
polars.expr.expr.Expr.first(self)->Expr
polars.expr.expr.Expr.flatten(self)->Expr
polars.expr.expr.Expr.floor(self)->Expr
polars.expr.expr.Expr.floordiv(self,other:Any)->Expr
polars.expr.expr.Expr.forward_fill(self,limit:int|None=None)->Expr
polars.expr.expr.Expr.from_json(cls,value:str)->Expr
polars.expr.expr.Expr.gather(self,indices:int|Sequence[int]|IntoExpr|Series|np.ndarray[Any,Any])->Expr
polars.expr.expr.Expr.gather_every(self,n:int,offset:int=0)->Expr
polars.expr.expr.Expr.ge(self,other:Any)->Expr
polars.expr.expr.Expr.get(self,index:int|Expr)->Expr
polars.expr.expr.Expr.gt(self,other:Any)->Expr
polars.expr.expr.Expr.has_nulls(self)->Expr
polars.expr.expr.Expr.hash(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->Expr
polars.expr.expr.Expr.head(self,n:int|Expr=10)->Expr
polars.expr.expr.Expr.hist(self,bins:IntoExpr|None=None,*,bin_count:int|None=None,include_category:bool=False,include_breakpoint:bool=False)->Expr
polars.expr.expr.Expr.implode(self)->Expr
polars.expr.expr.Expr.index_of(self,element:IntoExpr)->Expr
polars.expr.expr.Expr.inspect(self,fmt:str='{}')->Expr
polars.expr.expr.Expr.interpolate(self,method:InterpolationMethod='linear')->Expr
polars.expr.expr.Expr.interpolate_by(self,by:IntoExpr)->Expr
polars.expr.expr.Expr.is_between(self,lower_bound:IntoExpr,upper_bound:IntoExpr,closed:ClosedInterval='both')->Expr
polars.expr.expr.Expr.is_duplicated(self)->Expr
polars.expr.expr.Expr.is_finite(self)->Expr
polars.expr.expr.Expr.is_first_distinct(self)->Expr
polars.expr.expr.Expr.is_in(self,other:Expr|Collection[Any]|Series,*,nulls_equal:bool=False)->Expr
polars.expr.expr.Expr.is_infinite(self)->Expr
polars.expr.expr.Expr.is_last_distinct(self)->Expr
polars.expr.expr.Expr.is_nan(self)->Expr
polars.expr.expr.Expr.is_not_nan(self)->Expr
polars.expr.expr.Expr.is_not_null(self)->Expr
polars.expr.expr.Expr.is_null(self)->Expr
polars.expr.expr.Expr.is_unique(self)->Expr
polars.expr.expr.Expr.kurtosis(self,*,fisher:bool=True,bias:bool=True)->Expr
polars.expr.expr.Expr.last(self)->Expr
polars.expr.expr.Expr.le(self,other:Any)->Expr
polars.expr.expr.Expr.len(self)->Expr
polars.expr.expr.Expr.limit(self,n:int|Expr=10)->Expr
polars.expr.expr.Expr.list(self)->ExprListNameSpace
polars.expr.expr.Expr.log(self,base:float=math.e)->Expr
polars.expr.expr.Expr.log10(self)->Expr
polars.expr.expr.Expr.log1p(self)->Expr
polars.expr.expr.Expr.lower_bound(self)->Expr
polars.expr.expr.Expr.lt(self,other:Any)->Expr
polars.expr.expr.Expr.map_batches(self,function:Callable[[Series],Series|Any],return_dtype:PolarsDataType|None=None,*,agg_list:bool=False,is_elementwise:bool=False,returns_scalar:bool=False)->Expr
polars.expr.expr.Expr.map_elements(self,function:Callable[[Any],Any],return_dtype:PolarsDataType|None=None,*,skip_nulls:bool=True,pass_name:bool=False,strategy:MapElementsStrategy='thread_local',returns_scalar:bool=False)->Expr
polars.expr.expr.Expr.max(self)->Expr
polars.expr.expr.Expr.mean(self)->Expr
polars.expr.expr.Expr.median(self)->Expr
polars.expr.expr.Expr.meta(self)->ExprMetaNameSpace
polars.expr.expr.Expr.min(self)->Expr
polars.expr.expr.Expr.mod(self,other:Any)->Expr
polars.expr.expr.Expr.mode(self)->Expr
polars.expr.expr.Expr.mul(self,other:Any)->Expr
polars.expr.expr.Expr.n_unique(self)->Expr
polars.expr.expr.Expr.name(self)->ExprNameNameSpace
polars.expr.expr.Expr.nan_max(self)->Expr
polars.expr.expr.Expr.nan_min(self)->Expr
polars.expr.expr.Expr.ne(self,other:Any)->Expr
polars.expr.expr.Expr.ne_missing(self,other:Any)->Expr
polars.expr.expr.Expr.neg(self)->Expr
polars.expr.expr.Expr.not_(self)->Expr
polars.expr.expr.Expr.null_count(self)->Expr
polars.expr.expr.Expr.or_(self,*others:Any)->Expr
polars.expr.expr.Expr.over(self,partition_by:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr,order_by:IntoExpr|Iterable[IntoExpr]|None=None,descending:bool=False,nulls_last:bool=False,mapping_strategy:WindowMappingStrategy='group_to_rows')->Expr
polars.expr.expr.Expr.pct_change(self,n:int|IntoExprColumn=1)->Expr
polars.expr.expr.Expr.peak_max(self)->Expr
polars.expr.expr.Expr.peak_min(self)->Expr
polars.expr.expr.Expr.pipe(self,function:Callable[Concatenate[Expr,P],T],*args:P.args,**kwargs:P.kwargs)->T
polars.expr.expr.Expr.pow(self,exponent:IntoExprColumn|int|float)->Expr
polars.expr.expr.Expr.product(self)->Expr
polars.expr.expr.Expr.qcut(self,quantiles:Sequence[float]|int,*,labels:Sequence[str]|None=None,left_closed:bool=False,allow_duplicates:bool=False,include_breaks:bool=False)->Expr
polars.expr.expr.Expr.quantile(self,quantile:float|Expr,interpolation:RollingInterpolationMethod='nearest')->Expr
polars.expr.expr.Expr.radians(self)->Expr
polars.expr.expr.Expr.rank(self,method:RankMethod='average',*,descending:bool=False,seed:int|None=None)->Expr
polars.expr.expr.Expr.rechunk(self)->Expr
polars.expr.expr.Expr.register_plugin(self,*,lib:str,symbol:str,args:list[IntoExpr]|None=None,kwargs:dict[Any,Any]|None=None,is_elementwise:bool=False,input_wildcard_expansion:bool=False,returns_scalar:bool=False,cast_to_supertypes:bool=False,pass_name_to_apply:bool=False,changes_length:bool=False)->Expr
polars.expr.expr.Expr.reinterpret(self,*,signed:bool=True)->Expr
polars.expr.expr.Expr.repeat_by(self,by:pl.Series|Expr|str|int)->Expr
polars.expr.expr.Expr.replace(self,old:IntoExpr|Sequence[Any]|Mapping[Any,Any],new:IntoExpr|Sequence[Any]|NoDefault=no_default,*,default:IntoExpr|NoDefault=no_default,return_dtype:PolarsDataType|None=None)->Expr
polars.expr.expr.Expr.replace_strict(self,old:IntoExpr|Sequence[Any]|Mapping[Any,Any],new:IntoExpr|Sequence[Any]|NoDefault=no_default,*,default:IntoExpr|NoDefault=no_default,return_dtype:PolarsDataType|None=None)->Expr
polars.expr.expr.Expr.reshape(self,dimensions:tuple[int,...])->Expr
polars.expr.expr.Expr.reverse(self)->Expr
polars.expr.expr.Expr.rle(self)->Expr
polars.expr.expr.Expr.rle_id(self)->Expr
polars.expr.expr.Expr.rolling(self,index_column:str,*,period:str|timedelta,offset:str|timedelta|None=None,closed:ClosedInterval='right')->Expr
polars.expr.expr.Expr.rolling_map(self,function:Callable[[Series],Any],window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Expr
polars.expr.expr.Expr.rolling_max(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Expr
polars.expr.expr.Expr.rolling_max_by(self,by:IntoExpr,window_size:timedelta|str,*,min_samples:int=1,closed:ClosedInterval='right')->Expr
polars.expr.expr.Expr.rolling_mean(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Expr
polars.expr.expr.Expr.rolling_mean_by(self,by:IntoExpr,window_size:timedelta|str,*,min_samples:int=1,closed:ClosedInterval='right')->Expr
polars.expr.expr.Expr.rolling_median(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Expr
polars.expr.expr.Expr.rolling_median_by(self,by:IntoExpr,window_size:timedelta|str,*,min_samples:int=1,closed:ClosedInterval='right')->Expr
polars.expr.expr.Expr.rolling_min(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Expr
polars.expr.expr.Expr.rolling_min_by(self,by:IntoExpr,window_size:timedelta|str,*,min_samples:int=1,closed:ClosedInterval='right')->Expr
polars.expr.expr.Expr.rolling_quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest',window_size:int=2,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Expr
polars.expr.expr.Expr.rolling_quantile_by(self,by:IntoExpr,window_size:timedelta|str,*,quantile:float,interpolation:RollingInterpolationMethod='nearest',min_samples:int=1,closed:ClosedInterval='right')->Expr
polars.expr.expr.Expr.rolling_skew(self,window_size:int,*,bias:bool=True)->Expr
polars.expr.expr.Expr.rolling_std(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False,ddof:int=1)->Expr
polars.expr.expr.Expr.rolling_std_by(self,by:IntoExpr,window_size:timedelta|str,*,min_samples:int=1,closed:ClosedInterval='right',ddof:int=1)->Expr
polars.expr.expr.Expr.rolling_sum(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False)->Expr
polars.expr.expr.Expr.rolling_sum_by(self,by:IntoExpr,window_size:timedelta|str,*,min_samples:int=1,closed:ClosedInterval='right')->Expr
polars.expr.expr.Expr.rolling_var(self,window_size:int,weights:list[float]|None=None,*,min_samples:int|None=None,center:bool=False,ddof:int=1)->Expr
polars.expr.expr.Expr.rolling_var_by(self,by:IntoExpr,window_size:timedelta|str,*,min_samples:int=1,closed:ClosedInterval='right',ddof:int=1)->Expr
polars.expr.expr.Expr.round(self,decimals:int=0)->Expr
polars.expr.expr.Expr.round_sig_figs(self,digits:int)->Expr
polars.expr.expr.Expr.sample(self,n:int|IntoExprColumn|None=None,*,fraction:float|IntoExprColumn|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->Expr
polars.expr.expr.Expr.search_sorted(self,element:IntoExpr|np.ndarray[Any,Any],side:SearchSortedSide='any')->Expr
polars.expr.expr.Expr.set_sorted(self,*,descending:bool=False)->Expr
polars.expr.expr.Expr.shift(self,n:int|IntoExprColumn=1,*,fill_value:IntoExpr|None=None)->Expr
polars.expr.expr.Expr.shrink_dtype(self)->Expr
polars.expr.expr.Expr.shuffle(self,seed:int|None=None)->Expr
polars.expr.expr.Expr.sign(self)->Expr
polars.expr.expr.Expr.sin(self)->Expr
polars.expr.expr.Expr.sinh(self)->Expr
polars.expr.expr.Expr.skew(self,*,bias:bool=True)->Expr
polars.expr.expr.Expr.slice(self,offset:int|Expr,length:int|Expr|None=None)->Expr
polars.expr.expr.Expr.sort(self,*,descending:bool=False,nulls_last:bool=False)->Expr
polars.expr.expr.Expr.sort_by(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,descending:bool|Sequence[bool]=False,nulls_last:bool|Sequence[bool]=False,multithreaded:bool=True,maintain_order:bool=False)->Expr
polars.expr.expr.Expr.sqrt(self)->Expr
polars.expr.expr.Expr.std(self,ddof:int=1)->Expr
polars.expr.expr.Expr.str(self)->ExprStringNameSpace
polars.expr.expr.Expr.struct(self)->ExprStructNameSpace
polars.expr.expr.Expr.sub(self,other:Any)->Expr
polars.expr.expr.Expr.sum(self)->Expr
polars.expr.expr.Expr.tail(self,n:int|Expr=10)->Expr
polars.expr.expr.Expr.tan(self)->Expr
polars.expr.expr.Expr.tanh(self)->Expr
polars.expr.expr.Expr.to_physical(self)->Expr
polars.expr.expr.Expr.top_k(self,k:int|IntoExprColumn=5)->Expr
polars.expr.expr.Expr.top_k_by(self,by:IntoExpr|Iterable[IntoExpr],k:int|IntoExprColumn=5,*,reverse:bool|Sequence[bool]=False)->Expr
polars.expr.expr.Expr.truediv(self,other:Any)->Expr
polars.expr.expr.Expr.unique(self,*,maintain_order:bool=False)->Expr
polars.expr.expr.Expr.unique_counts(self)->Expr
polars.expr.expr.Expr.upper_bound(self)->Expr
polars.expr.expr.Expr.value_counts(self,*,sort:bool=False,parallel:bool=False,name:str|None=None,normalize:bool=False)->Expr
polars.expr.expr.Expr.var(self,ddof:int=1)->Expr
polars.expr.expr.Expr.where(self,predicate:Expr)->Expr
polars.expr.expr.Expr.xor(self,other:Any)->Expr
polars.expr.expr._prepare_alpha(com:float|int|None=None,span:float|int|None=None,half_life:float|int|None=None,alpha:float|int|None=None)->float
polars.expr.expr._prepare_rolling_by_window_args(window_size:timedelta|str)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/convert/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/convert/normalize.py----------------------------------------
A:polars.convert.normalize.normalized_json_object->_normalize_json_ordered(data=data, separator=separator, max_level=max_level, encoder=encoder)
A:polars.convert.normalize.normalized_dict[key_string]->encoder(data)
A:polars.convert.normalize.nested_->_normalize_json(data=nested_data, key_string='', normalized_dict={}, separator=separator, max_level=max_level, encoder=encoder)
A:polars.convert.normalize.data->list(data)
polars.convert.normalize._normalize_json(data:Any,key_string:str,normalized_dict:dict[str,Any],separator:str,max_level:int,encoder:JSONEncoder)->dict[str, Any]
polars.convert.normalize._normalize_json_ordered(data:dict[str,Any],separator:str,max_level:int,encoder:JSONEncoder)->dict[str, Any]
polars.convert.normalize._simple_json_normalize(data:dict[Any,Any]|Sequence[dict[Any,Any]|Any],separator:str,max_level:int,encoder:JSONEncoder)->dict[Any, Any] | list[dict[Any, Any]] | Any
polars.convert.normalize.json_normalize(data:dict[Any,Any]|Sequence[dict[Any,Any]|Any],*,separator:str='.',max_level:int|None=None,schema:Schema|None=None,strict:bool=True,infer_schema_length:int|None=N_INFER_DEFAULT,encoder:JSONEncoder|None=None)->DataFrame
polars.json_normalize(data:dict[Any,Any]|Sequence[dict[Any,Any]|Any],*,separator:str='.',max_level:int|None=None,schema:Schema|None=None,strict:bool=True,infer_schema_length:int|None=N_INFER_DEFAULT,encoder:JSONEncoder|None=None)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/convert/general.py----------------------------------------
A:polars.convert.general.s->polars._reexport.DataFrame(data=s, schema=schema, schema_overrides=schema_overrides).to_series()
A:polars.convert.general.pa_table->polars.dependencies.pyarrow.Table.from_batches(itertools.chain.from_iterable((b.to_batches() if isinstance(b, pa.Table) else [b] for b in data)))
A:polars.convert.general.data->data.reset_index().reset_index()
A:polars.convert.general.m->re.search(pattern='(?:shape: (\\(\\d+,\\))\\n.*?)?Series:\\s+([^\\n]+)\\s+\\[([^\\n]+)](.*)', string=data, flags=re.DOTALL)
A:polars.convert.general.no_dtypes->all((d is None for d in dtypes))
A:polars.convert.general.coldata->list(zip(*(row for row in body if not all((e == '…' for e in row)))))
A:polars.convert.general.idx->headers.index(el)
A:polars.convert.general.schema->dict(zip(headers, (dtype_short_repr_to_dtype(d) for d in dtypes)))
A:polars.convert.general.df->read_csv(buf, new_columns=df.columns, try_parse_dates=True, infer_schema_length=None)
A:polars.convert.general.buf->io.BytesIO()
A:polars.convert.general.length->int(shape[1:-2] if shape else -1)
A:polars.convert.general.dtype->dtype_short_repr_to_dtype(m.groups()[2])
A:polars.convert.general.srs->polars._reexport.Series(name=name, values=values, dtype=String)
A:polars.convert.general.result->from_dataframe(df, allow_copy=allow_copy)
polars.convert.general._from_dataframe_repr(m:re.Match[str])->DataFrame
polars.convert.general._from_series_repr(m:re.Match[str])->Series
polars.convert.general.from_arrow(data:pa.Table|pa.Array|pa.ChunkedArray|pa.RecordBatch|Iterable[pa.RecordBatch|pa.Table]|ArrowArrayExportable|ArrowStreamExportable,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True)->DataFrame | Series
polars.convert.general.from_dataframe(df:SupportsInterchange|ArrowArrayExportable|ArrowStreamExportable,*,allow_copy:bool|None=None,rechunk:bool=True)->DataFrame
polars.convert.general.from_dict(data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]|Series],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True)->DataFrame
polars.convert.general.from_dicts(data:Iterable[dict[str,Any]],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,infer_schema_length:int|None=N_INFER_DEFAULT)->DataFrame
polars.convert.general.from_numpy(data:np.ndarray[Any,Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None)->DataFrame
polars.convert.general.from_pandas(data:pd.DataFrame|pd.Series[Any]|pd.Index[Any]|pd.DatetimeIndex,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True,nan_to_null:bool=True,include_index:bool=False)->DataFrame | Series
polars.convert.general.from_records(data:Sequence[Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT)->DataFrame
polars.convert.general.from_repr(data:str)->DataFrame | Series
polars.from_arrow(data:pa.Table|pa.Array|pa.ChunkedArray|pa.RecordBatch|Iterable[pa.RecordBatch|pa.Table]|ArrowArrayExportable|ArrowStreamExportable,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True)->DataFrame | Series
polars.from_dataframe(df:SupportsInterchange|ArrowArrayExportable|ArrowStreamExportable,*,allow_copy:bool|None=None,rechunk:bool=True)->DataFrame
polars.from_dict(data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]|Series],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True)->DataFrame
polars.from_dicts(data:Iterable[dict[str,Any]],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,infer_schema_length:int|None=N_INFER_DEFAULT)->DataFrame
polars.from_numpy(data:np.ndarray[Any,Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None)->DataFrame
polars.from_pandas(data:pd.DataFrame|pd.Series[Any]|pd.Index[Any]|pd.DatetimeIndex,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True,nan_to_null:bool=True,include_index:bool=False)->DataFrame | Series
polars.from_records(data:Sequence[Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,strict:bool=True,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT)->DataFrame
polars.from_repr(data:str)->DataFrame | Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/sql/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/sql/functions.py----------------------------------------
polars.sql(query:str,*,eager:bool=False)->DataFrame | LazyFrame
polars.sql.functions.sql(query:str,*,eager:bool=False)->DataFrame | LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/sql/context.py----------------------------------------
A:polars.sql.context.frame->frame.to_frame().to_frame()
A:polars.sql.context.self._ctxt->polars.polars.PySQLContext.new()
A:polars.sql.context.frames->dict(frames or {})
A:polars.sql.context.q->re.split('\\bFROM\\b', query, maxsplit=1, flags=re.I)
A:polars.sql.context.named_frames->_get_frame_locals(all_compatible=True, named=possible_names)
A:polars.sql.context.self._tables_scope_stack->getattr(self, '_tables_scope_stack', [])
A:polars.sql.context.n_tables->len(self.tables())
A:polars.sql.context.res->wrap_ldf(self._ctxt.execute(query))
polars.SQLContext(self,frames:Mapping[str,CompatibleFrameType|None]|None=None,*,register_globals:bool|int=False,eager:bool=False,**named_frames:CompatibleFrameType|None)
polars.SQLContext.__enter__(self)->SQLContext[FrameType]
polars.SQLContext.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.SQLContext.__repr__(self)->str
polars.SQLContext.execute(self,query:str,*,eager:bool|None=None)->LazyFrame | DataFrame
polars.SQLContext.execute_global(cls,query:str,*,eager:bool=False)->DataFrame | LazyFrame
polars.SQLContext.register(self,name:str,frame:CompatibleFrameType|None)->Self
polars.SQLContext.register_globals(self,n:int|None=None,*,all_compatible:bool=True)->Self
polars.SQLContext.register_many(self,frames:Mapping[str,CompatibleFrameType|None]|None=None,**named_frames:CompatibleFrameType|None)->Self
polars.SQLContext.tables(self)->list[str]
polars.SQLContext.unregister(self,names:str|Collection[str])->Self
polars.sql.context.SQLContext(self,frames:Mapping[str,CompatibleFrameType|None]|None=None,*,register_globals:bool|int=False,eager:bool=False,**named_frames:CompatibleFrameType|None)
polars.sql.context.SQLContext.__enter__(self)->SQLContext[FrameType]
polars.sql.context.SQLContext.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.sql.context.SQLContext.__init__(self,frames:Mapping[str,CompatibleFrameType|None]|None=None,*,register_globals:bool|int=False,eager:bool=False,**named_frames:CompatibleFrameType|None)
polars.sql.context.SQLContext.__repr__(self)->str
polars.sql.context.SQLContext.execute(self,query:str,*,eager:bool|None=None)->LazyFrame | DataFrame
polars.sql.context.SQLContext.execute_global(cls,query:str,*,eager:bool=False)->DataFrame | LazyFrame
polars.sql.context.SQLContext.register(self,name:str,frame:CompatibleFrameType|None)->Self
polars.sql.context.SQLContext.register_globals(self,n:int|None=None,*,all_compatible:bool=True)->Self
polars.sql.context.SQLContext.register_many(self,frames:Mapping[str,CompatibleFrameType|None]|None=None,**named_frames:CompatibleFrameType|None)->Self
polars.sql.context.SQLContext.tables(self)->list[str]
polars.sql.context.SQLContext.unregister(self,names:str|Collection[str])->Self
polars.sql.context._compatible_frame(obj:Any)->bool
polars.sql.context._ensure_lazyframe(obj:Any)->LazyFrame
polars.sql.context._get_frame_locals(*,all_compatible:bool,n_objects:int|None=None,named:str|Collection[str]|Callable[[str],bool]|None=None)->dict[str, Any]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/col.py----------------------------------------
A:polars.functions.col.dtypes->_python_dtype_match(name)
A:polars.functions.col.names->list(name)
polars.col.Col(self,name:str|PolarsDataType|PythonDataType|Iterable[str]|Iterable[PolarsDataType|PythonDataType],*more_names:str|PolarsDataType|PythonDataType)
polars.col.Col.__getattr__(self,name:str)->Expr
polars.col._create_col(name:str|PolarsDataType|PythonDataType|Iterable[str]|Iterable[PolarsDataType|PythonDataType],*more_names:str|PolarsDataType|PythonDataType)->Expr
polars.col._polars_dtype_match(tp:PolarsDataType)->list[PolarsDataType]
polars.col._python_dtype_match(tp:PythonDataType)->list[PolarsDataType]
polars.functions.col.Col(self,name:str|PolarsDataType|PythonDataType|Iterable[str]|Iterable[PolarsDataType|PythonDataType],*more_names:str|PolarsDataType|PythonDataType)
polars.functions.col.Col.__call__(self,name:str|PolarsDataType|PythonDataType|Iterable[str]|Iterable[PolarsDataType|PythonDataType],*more_names:str|PolarsDataType|PythonDataType)
polars.functions.col.Col.__getattr__(self,name:str)->Expr
polars.functions.col._create_col(name:str|PolarsDataType|PythonDataType|Iterable[str]|Iterable[PolarsDataType|PythonDataType],*more_names:str|PolarsDataType|PythonDataType)->Expr
polars.functions.col._polars_dtype_match(tp:PolarsDataType)->list[PolarsDataType]
polars.functions.col._python_dtype_match(tp:PythonDataType)->list[PolarsDataType]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/as_datatype.py----------------------------------------
A:polars.functions.as_datatype.ambiguous_expr->parse_into_expression(ambiguous, str_as_lit=True)
A:polars.functions.as_datatype.year_expr->parse_into_expression(year)
A:polars.functions.as_datatype.month_expr->parse_into_expression(month)
A:polars.functions.as_datatype.day_expr->parse_into_expression(day)
A:polars.functions.as_datatype.hour->parse_into_expression(hour)
A:polars.functions.as_datatype.minute->parse_into_expression(minute)
A:polars.functions.as_datatype.second->parse_into_expression(second)
A:polars.functions.as_datatype.microsecond->parse_into_expression(microsecond)
A:polars.functions.as_datatype.weeks->parse_into_expression(weeks)
A:polars.functions.as_datatype.days->parse_into_expression(days)
A:polars.functions.as_datatype.hours->parse_into_expression(hours)
A:polars.functions.as_datatype.minutes->parse_into_expression(minutes)
A:polars.functions.as_datatype.seconds->parse_into_expression(seconds)
A:polars.functions.as_datatype.milliseconds->parse_into_expression(milliseconds)
A:polars.functions.as_datatype.microseconds->parse_into_expression(microseconds)
A:polars.functions.as_datatype.nanoseconds->parse_into_expression(nanoseconds)
A:polars.functions.as_datatype.exprs->parse_into_list_of_expressions(exprs, *more_exprs)
A:polars.functions.as_datatype.pyexprs->parse_into_list_of_expressions(*exprs, **named_exprs)
A:polars.functions.as_datatype.expr->wrap_expr(plr.as_struct(pyexprs))
A:polars.functions.as_datatype.arguments->iter(args)
A:polars.functions.as_datatype.e->wrap_expr(parse_into_expression(next(arguments)))
polars.concat_arr(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr
polars.concat_list(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr
polars.concat_str(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr,separator:str='',ignore_nulls:bool=False)->Expr
polars.date(year:Expr|str|int,month:Expr|str|int,day:Expr|str|int)->Expr
polars.datetime(year:int|IntoExpr,month:int|IntoExpr,day:int|IntoExpr,hour:int|IntoExpr|None=None,minute:int|IntoExpr|None=None,second:int|IntoExpr|None=None,microsecond:int|IntoExpr|None=None,*,time_unit:TimeUnit='us',time_zone:str|None=None,ambiguous:Ambiguous|Expr='raise')->Expr
polars.duration(*,weeks:Expr|str|int|None=None,days:Expr|str|int|None=None,hours:Expr|str|int|None=None,minutes:Expr|str|int|None=None,seconds:Expr|str|int|None=None,milliseconds:Expr|str|int|None=None,microseconds:Expr|str|int|None=None,nanoseconds:Expr|str|int|None=None,time_unit:TimeUnit|None=None)->Expr
polars.format(f_string:str,*args:Expr|str)->Expr
polars.functions.as_datatype.concat_arr(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr
polars.functions.as_datatype.concat_list(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr
polars.functions.as_datatype.concat_str(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr,separator:str='',ignore_nulls:bool=False)->Expr
polars.functions.as_datatype.date_(year:Expr|str|int,month:Expr|str|int,day:Expr|str|int)->Expr
polars.functions.as_datatype.datetime_(year:int|IntoExpr,month:int|IntoExpr,day:int|IntoExpr,hour:int|IntoExpr|None=None,minute:int|IntoExpr|None=None,second:int|IntoExpr|None=None,microsecond:int|IntoExpr|None=None,*,time_unit:TimeUnit='us',time_zone:str|None=None,ambiguous:Ambiguous|Expr='raise')->Expr
polars.functions.as_datatype.duration(*,weeks:Expr|str|int|None=None,days:Expr|str|int|None=None,hours:Expr|str|int|None=None,minutes:Expr|str|int|None=None,seconds:Expr|str|int|None=None,milliseconds:Expr|str|int|None=None,microseconds:Expr|str|int|None=None,nanoseconds:Expr|str|int|None=None,time_unit:TimeUnit|None=None)->Expr
polars.functions.as_datatype.format(f_string:str,*args:Expr|str)->Expr
polars.functions.as_datatype.struct(*exprs:IntoExpr|Iterable[IntoExpr],schema:SchemaDict|None=None,eager:bool=False,**named_exprs:IntoExpr)->Expr | Series
polars.functions.as_datatype.time_(hour:Expr|str|int|None=None,minute:Expr|str|int|None=None,second:Expr|str|int|None=None,microsecond:Expr|str|int|None=None)->Expr
polars.struct(*exprs:IntoExpr|Iterable[IntoExpr],schema:SchemaDict|None=None,eager:bool=False,**named_exprs:IntoExpr)->Expr | Series
polars.time(hour:Expr|str|int|None=None,minute:Expr|str|int|None=None,second:Expr|str|int|None=None,microsecond:Expr|str|int|None=None)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/repeat.py----------------------------------------
A:polars.functions.repeat.arr_width->getattr(dtype, 'size', 1)
A:polars.functions.repeat.n->polars.functions.lit(n)
A:polars.functions.repeat.value->parse_into_expression(value, str_as_lit=True, dtype=dtype)
A:polars.functions.repeat.expr->wrap_expr(plr.repeat(value, n._pyexpr, dtype))
polars.functions.repeat._one_or_zero_by_dtype(value:int,dtype:PolarsDataType)->Any
polars.functions.repeat.ones(n:int|Expr,dtype:PolarsDataType=Float64,*,eager:bool=False)->Expr | Series
polars.functions.repeat.repeat(value:IntoExpr|None,n:int|Expr,*,dtype:PolarsDataType|None=None,eager:bool=False)->Expr | Series
polars.functions.repeat.zeros(n:int|Expr,dtype:PolarsDataType=Float64,*,eager:bool=False)->Expr | Series
polars.ones(n:int|Expr,dtype:PolarsDataType=Float64,*,eager:bool=False)->Expr | Series
polars.repeat(value:IntoExpr|None,n:int|Expr,*,dtype:PolarsDataType|None=None,eager:bool=False)->Expr | Series
polars.repeat._one_or_zero_by_dtype(value:int,dtype:PolarsDataType)->Any
polars.zeros(n:int|Expr,dtype:PolarsDataType=Float64,*,eager:bool=False)->Expr | Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/whenthen.py----------------------------------------
A:polars.functions.whenthen.condition->parse_predicates_constraints_into_expression(*predicates, **constraints)
polars.functions.whenthen.when(*predicates:IntoExprColumn|Iterable[IntoExprColumn]|bool,**constraints:Any)->pl.When
polars.when(*predicates:IntoExprColumn|Iterable[IntoExprColumn]|bool,**constraints:Any)->pl.When


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/escape_regex.py----------------------------------------
polars.escape_regex(s:str)->str
polars.functions.escape_regex.escape_regex(s:str)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/len.py----------------------------------------
polars.functions.len.len()->Expr
polars.len()->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/lit.py----------------------------------------
A:polars.functions.lit.dtype_tz->getattr(dtype, 'time_zone', None)
A:polars.functions.lit.tz->str(value_tz)
A:polars.functions.lit.value->value.astimezone(timezone.utc).astimezone(timezone.utc)
A:polars.functions.lit.dt_utc->datetime(value.year, value.month, value.day)
A:polars.functions.lit.expr->expr.dt.replace_time_zone(str(time_zone)).dt.replace_time_zone(str(time_zone))
A:polars.functions.lit.item->value.astimezone(timezone.utc).astimezone(timezone.utc).item()
polars.functions.lit.lit(value:Any,dtype:PolarsDataType|None=None,*,allow_object:bool=False)->Expr
polars.lit(value:Any,dtype:PolarsDataType|None=None,*,allow_object:bool=False)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/random.py----------------------------------------
polars.functions.random.set_random_seed(seed:int)->None
polars.set_random_seed(seed:int)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/business.py----------------------------------------
A:polars.functions.business.start_pyexpr->parse_into_expression(start)
A:polars.functions.business.end_pyexpr->parse_into_expression(end)
A:polars.functions.business.unix_epoch->date(1970, 1, 1)
polars.business_day_count(start:date|IntoExprColumn,end:date|IntoExprColumn,week_mask:Iterable[bool]=(True,True,True,True,True,False,False),holidays:Iterable[date]=())->Expr
polars.functions.business.business_day_count(start:date|IntoExprColumn,end:date|IntoExprColumn,week_mask:Iterable[bool]=(True,True,True,True,True,False,False),holidays:Iterable[date]=())->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/lazy.py----------------------------------------
A:polars.functions.lazy.frame->polars._reexport.DataFrame([e for e in (a, b) if isinstance(e, pl.Series)])
A:polars.functions.lazy.a->polars.functions.col(a)
A:polars.functions.lazy.b->polars.functions.col(b)
A:polars.functions.lazy.exprs->parse_into_list_of_expressions(exprs, *more_exprs)
A:polars.functions.lazy.acc->parse_into_expression(acc, str_as_lit=True)
A:polars.functions.lazy.y->polars.functions.col(y)
A:polars.functions.lazy.x->polars.functions.col(x)
A:polars.functions.lazy.descending->extend_bool(descending, len(exprs), 'descending', 'exprs')
A:polars.functions.lazy.nulls_last->extend_bool(nulls_last, len(exprs), 'nulls_last', 'exprs')
A:polars.functions.lazy.optflags->OptFlags(_type_coercion=type_coercion, _type_check=_type_check, predicate_pushdown=predicate_pushdown, projection_pushdown=projection_pushdown, simplify_expression=simplify_expression, slice_pushdown=slice_pushdown, comm_subplan_elim=comm_subplan_elim, comm_subexpr_elim=comm_subexpr_elim, cluster_with_columns=cluster_with_columns, collapse_joins=collapse_joins, check_order_observe=_check_order)
A:polars.functions.lazy.out->polars.polars.collect_all(lfs, engine, optflags._pyoptflags)
A:polars.functions.lazy.condition->parse_into_expression(condition)
A:polars.functions.lazy.column->polars._reexport.Series(column)
polars.approx_n_unique(*columns:str)->Expr
polars.arctan2(y:str|Expr,x:str|Expr)->Expr
polars.arctan2d(y:str|Expr,x:str|Expr)->Expr
polars.arg_sort_by(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr,descending:bool|Sequence[bool]=False,nulls_last:bool|Sequence[bool]=False,multithreaded:bool=True,maintain_order:bool=False)->Expr
polars.arg_where(condition:Expr|Series,*,eager:bool=False)->Expr | Series
polars.coalesce(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr,eager:bool=False)->Expr | Series
polars.collect_all(lazy_frames:Iterable[LazyFrame],*,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,_check_order:bool=True,engine:EngineType='auto')->list[DataFrame]
polars.collect_all_async(lazy_frames:Iterable[LazyFrame],*,gevent:bool=False,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,_check_order:bool=True,engine:EngineType='auto')->Awaitable[list[DataFrame]] | _GeventDataFrameResult[list[DataFrame]]
polars.corr(a:IntoExpr,b:IntoExpr,*,method:CorrelationMethod='pearson',ddof:int|None=None,propagate_nans:bool=False,eager:bool=False)->Expr | Series
polars.count(*columns:str)->Expr
polars.cov(a:IntoExpr,b:IntoExpr,*,ddof:int=1,eager:bool=False)->Expr | Series
polars.cum_count(*columns:str,reverse:bool=False)->Expr
polars.cum_fold(acc:IntoExpr,function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr,*,include_init:bool=False)->Expr
polars.cum_reduce(function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr)->Expr
polars.element()->Expr
polars.exclude(columns:str|PolarsDataType|Collection[str]|Collection[PolarsDataType],*more_columns:str|PolarsDataType)->Expr
polars.explain_all(lazy_frames:Iterable[LazyFrame],*,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,_check_order:bool=True)->str
polars.field(name:str|list[str])->Expr
polars.first(*columns:str)->Expr
polars.fold(acc:IntoExpr,function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr)->Expr
polars.from_epoch(column:str|Expr|Series|Sequence[int],time_unit:EpochTimeUnit='s')->Expr | Series
polars.functions.lazy.approx_n_unique(*columns:str)->Expr
polars.functions.lazy.arctan2(y:str|Expr,x:str|Expr)->Expr
polars.functions.lazy.arctan2d(y:str|Expr,x:str|Expr)->Expr
polars.functions.lazy.arg_sort_by(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr,descending:bool|Sequence[bool]=False,nulls_last:bool|Sequence[bool]=False,multithreaded:bool=True,maintain_order:bool=False)->Expr
polars.functions.lazy.arg_where(condition:Expr|Series,*,eager:bool=False)->Expr | Series
polars.functions.lazy.coalesce(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr,eager:bool=False)->Expr | Series
polars.functions.lazy.collect_all(lazy_frames:Iterable[LazyFrame],*,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,_check_order:bool=True,engine:EngineType='auto')->list[DataFrame]
polars.functions.lazy.collect_all_async(lazy_frames:Iterable[LazyFrame],*,gevent:bool=False,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,_check_order:bool=True,engine:EngineType='auto')->Awaitable[list[DataFrame]] | _GeventDataFrameResult[list[DataFrame]]
polars.functions.lazy.corr(a:IntoExpr,b:IntoExpr,*,method:CorrelationMethod='pearson',ddof:int|None=None,propagate_nans:bool=False,eager:bool=False)->Expr | Series
polars.functions.lazy.count(*columns:str)->Expr
polars.functions.lazy.cov(a:IntoExpr,b:IntoExpr,*,ddof:int=1,eager:bool=False)->Expr | Series
polars.functions.lazy.cum_count(*columns:str,reverse:bool=False)->Expr
polars.functions.lazy.cum_fold(acc:IntoExpr,function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr,*,include_init:bool=False)->Expr
polars.functions.lazy.cum_reduce(function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr)->Expr
polars.functions.lazy.element()->Expr
polars.functions.lazy.exclude(columns:str|PolarsDataType|Collection[str]|Collection[PolarsDataType],*more_columns:str|PolarsDataType)->Expr
polars.functions.lazy.explain_all(lazy_frames:Iterable[LazyFrame],*,type_coercion:bool=True,_type_check:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,cluster_with_columns:bool=True,collapse_joins:bool=True,_check_order:bool=True)->str
polars.functions.lazy.field(name:str|list[str])->Expr
polars.functions.lazy.first(*columns:str)->Expr
polars.functions.lazy.fold(acc:IntoExpr,function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr)->Expr
polars.functions.lazy.from_epoch(column:str|Expr|Series|Sequence[int],time_unit:EpochTimeUnit='s')->Expr | Series
polars.functions.lazy.groups(column:str)->Expr
polars.functions.lazy.head(column:str,n:int=10)->Expr
polars.functions.lazy.implode(*columns:str)->Expr
polars.functions.lazy.last(*columns:str)->Expr
polars.functions.lazy.map_batches(exprs:Sequence[str]|Sequence[Expr],function:Callable[[Sequence[Series]],Series],return_dtype:PolarsDataType|None=None)->Expr
polars.functions.lazy.map_groups(exprs:Sequence[str|Expr],function:Callable[[Sequence[Series]],Series|Any],return_dtype:PolarsDataType|None=None,*,returns_scalar:bool=True)->Expr
polars.functions.lazy.mean(*columns:str)->Expr
polars.functions.lazy.median(*columns:str)->Expr
polars.functions.lazy.n_unique(*columns:str)->Expr
polars.functions.lazy.nth(*indices:int|Sequence[int])->Expr
polars.functions.lazy.quantile(column:str,quantile:float|Expr,interpolation:RollingInterpolationMethod='nearest')->Expr
polars.functions.lazy.reduce(function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr)->Expr
polars.functions.lazy.rolling_corr(a:str|Expr,b:str|Expr,*,window_size:int,min_samples:int|None=None,ddof:int=1)->Expr
polars.functions.lazy.rolling_cov(a:str|Expr,b:str|Expr,*,window_size:int,min_samples:int|None=None,ddof:int=1)->Expr
polars.functions.lazy.select(*exprs:IntoExpr|Iterable[IntoExpr],eager:bool=True,**named_exprs:IntoExpr)->DataFrame | LazyFrame
polars.functions.lazy.sql_expr(sql:str|Sequence[str])->Expr | list[Expr]
polars.functions.lazy.std(column:str,ddof:int=1)->Expr
polars.functions.lazy.tail(column:str,n:int=10)->Expr
polars.functions.lazy.var(column:str,ddof:int=1)->Expr
polars.groups(column:str)->Expr
polars.head(column:str,n:int=10)->Expr
polars.implode(*columns:str)->Expr
polars.last(*columns:str)->Expr
polars.map_batches(exprs:Sequence[str]|Sequence[Expr],function:Callable[[Sequence[Series]],Series],return_dtype:PolarsDataType|None=None)->Expr
polars.map_groups(exprs:Sequence[str|Expr],function:Callable[[Sequence[Series]],Series|Any],return_dtype:PolarsDataType|None=None,*,returns_scalar:bool=True)->Expr
polars.mean(*columns:str)->Expr
polars.median(*columns:str)->Expr
polars.n_unique(*columns:str)->Expr
polars.nth(*indices:int|Sequence[int])->Expr
polars.quantile(column:str,quantile:float|Expr,interpolation:RollingInterpolationMethod='nearest')->Expr
polars.reduce(function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr)->Expr
polars.rolling_corr(a:str|Expr,b:str|Expr,*,window_size:int,min_samples:int|None=None,ddof:int=1)->Expr
polars.rolling_cov(a:str|Expr,b:str|Expr,*,window_size:int,min_samples:int|None=None,ddof:int=1)->Expr
polars.select(*exprs:IntoExpr|Iterable[IntoExpr],eager:bool=True,**named_exprs:IntoExpr)->DataFrame | LazyFrame
polars.sql_expr(sql:str|Sequence[str])->Expr | list[Expr]
polars.std(column:str,ddof:int=1)->Expr
polars.tail(column:str,n:int=10)->Expr
polars.var(column:str,ddof:int=1)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/eager.py----------------------------------------
A:polars.functions.eager.elems->list(items)
A:polars.functions.eager.all_columns->list(chain.from_iterable((e.collect_schema() for e in elems)))
A:polars.functions.eager.output_column_order->list(key)
A:polars.functions.eager.common_cols->sorted(reduce(lambda x, y: set(x) & set(y), chain((e.collect_schema() for e in elems))), key=lambda k: key.get(k, 0))
A:polars.functions.eager.eager->isinstance(frames[0], pl.DataFrame)
A:polars.functions.eager.out->wrap_s(plr.concat_series(elems))
A:polars.functions.eager.allowed->', '.join((repr(m) for m in get_args(ConcatMethod)))
A:polars.functions.eager.joined->joined.collect(no_optimization=True).lazy().collect(no_optimization=True).lazy()
A:polars.functions.eager.frames->tuple(frames)
A:polars.functions.eager.alignment_frame->_alignment_join(*idx_frames, align_on=align_on, how=how, descending=descending)
A:polars.functions.eager.aligned_cols->set(alignment_frame.collect_schema())
A:polars.functions.eager.f->f.select(select).select(select)
polars.align_frames(*frames:FrameType|Iterable[FrameType],on:str|Expr|Sequence[str]|Sequence[Expr]|Sequence[str|Expr],how:JoinStrategy='full',select:str|Expr|Sequence[str|Expr]|None=None,descending:bool|Sequence[bool]=False)->list[FrameType]
polars.concat(items:Iterable[PolarsType],*,how:ConcatMethod='vertical',rechunk:bool=False,parallel:bool=True)->PolarsType
polars.functions.eager._alignment_join(*idx_frames:tuple[int,LazyFrame],align_on:list[str],how:JoinStrategy='full',descending:bool|Sequence[bool]=False)->LazyFrame
polars.functions.eager.align_frames(*frames:FrameType|Iterable[FrameType],on:str|Expr|Sequence[str]|Sequence[Expr]|Sequence[str|Expr],how:JoinStrategy='full',select:str|Expr|Sequence[str|Expr]|None=None,descending:bool|Sequence[bool]=False)->list[FrameType]
polars.functions.eager.concat(items:Iterable[PolarsType],*,how:ConcatMethod='vertical',rechunk:bool=False,parallel:bool=True)->PolarsType


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/range/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/range/date_range.py----------------------------------------
A:polars.functions.range.date_range.interval->parse_interval_argument(interval)
A:polars.functions.range.date_range.start_pyexpr->parse_into_expression(start)
A:polars.functions.range.date_range.end_pyexpr->parse_into_expression(end)
A:polars.functions.range.date_range.result->wrap_expr(plr.date_ranges(start_pyexpr, end_pyexpr, interval, closed))
polars.date_range(start:date|datetime|IntoExprColumn,end:date|datetime|IntoExprColumn,interval:str|timedelta='1d',*,closed:ClosedInterval='both',eager:bool=False)->Series | Expr
polars.date_ranges(start:date|datetime|IntoExprColumn,end:date|datetime|IntoExprColumn,interval:str|timedelta='1d',*,closed:ClosedInterval='both',eager:bool=False)->Series | Expr
polars.functions.range.date_range.date_range(start:date|datetime|IntoExprColumn,end:date|datetime|IntoExprColumn,interval:str|timedelta='1d',*,closed:ClosedInterval='both',eager:bool=False)->Series | Expr
polars.functions.range.date_range.date_ranges(start:date|datetime|IntoExprColumn,end:date|datetime|IntoExprColumn,interval:str|timedelta='1d',*,closed:ClosedInterval='both',eager:bool=False)->Series | Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/range/_utils.py----------------------------------------
A:polars.functions.range._utils.interval->interval.replace(' ', '').replace(' ', '')
polars.functions.range._utils.parse_interval_argument(interval:str|timedelta)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/range/time_range.py----------------------------------------
A:polars.functions.range.time_range.interval->parse_interval_argument(interval)
A:polars.functions.range.time_range.start->time(0, 0, 0)
A:polars.functions.range.time_range.end->time(23, 59, 59, 999999)
A:polars.functions.range.time_range.start_pyexpr->parse_into_expression(start)
A:polars.functions.range.time_range.end_pyexpr->parse_into_expression(end)
A:polars.functions.range.time_range.result->wrap_expr(plr.time_ranges(start_pyexpr, end_pyexpr, interval, closed))
polars.functions.range.time_range.time_range(start:time|IntoExprColumn|None=None,end:time|IntoExprColumn|None=None,interval:str|timedelta='1h',*,closed:ClosedInterval='both',eager:bool=False)->Series | Expr
polars.functions.range.time_range.time_ranges(start:time|IntoExprColumn|None=None,end:time|IntoExprColumn|None=None,interval:str|timedelta='1h',*,closed:ClosedInterval='both',eager:bool=False)->Series | Expr
polars.time_range(start:time|IntoExprColumn|None=None,end:time|IntoExprColumn|None=None,interval:str|timedelta='1h',*,closed:ClosedInterval='both',eager:bool=False)->Series | Expr
polars.time_ranges(start:time|IntoExprColumn|None=None,end:time|IntoExprColumn|None=None,interval:str|timedelta='1h',*,closed:ClosedInterval='both',eager:bool=False)->Series | Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/range/int_range.py----------------------------------------
A:polars.functions.range.int_range.start->parse_into_expression(start)
A:polars.functions.range.int_range.end->parse_into_expression(end)
A:polars.functions.range.int_range.result->wrap_expr(plr.int_ranges(start, end, step, dtype))
A:polars.functions.range.int_range.step->parse_into_expression(step)
polars.arange(start:int|IntoExprColumn=0,end:int|IntoExprColumn|None=None,step:int=1,*,dtype:PolarsIntegerType=Int64,eager:bool=False)->Expr | Series
polars.functions.range.int_range.arange(start:int|IntoExprColumn=0,end:int|IntoExprColumn|None=None,step:int=1,*,dtype:PolarsIntegerType=Int64,eager:bool=False)->Expr | Series
polars.functions.range.int_range.int_range(start:int|IntoExprColumn=0,end:int|IntoExprColumn|None=None,step:int=1,*,dtype:PolarsIntegerType=Int64,eager:bool=False)->Expr | Series
polars.functions.range.int_range.int_ranges(start:int|IntoExprColumn=0,end:int|IntoExprColumn|None=None,step:int|IntoExprColumn=1,*,dtype:PolarsIntegerType=Int64,eager:bool=False)->Expr | Series
polars.int_range(start:int|IntoExprColumn=0,end:int|IntoExprColumn|None=None,step:int=1,*,dtype:PolarsIntegerType=Int64,eager:bool=False)->Expr | Series
polars.int_ranges(start:int|IntoExprColumn=0,end:int|IntoExprColumn|None=None,step:int|IntoExprColumn=1,*,dtype:PolarsIntegerType=Int64,eager:bool=False)->Expr | Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/range/linear_space.py----------------------------------------
A:polars.functions.range.linear_space.start->parse_into_expression(start)
A:polars.functions.range.linear_space.end->parse_into_expression(end)
A:polars.functions.range.linear_space.num_samples->parse_into_expression(num_samples)
A:polars.functions.range.linear_space.result->wrap_expr(plr.linear_spaces(start, end, num_samples, closed, as_array))
polars.functions.range.linear_space.linear_space(start:NumericLiteral|TemporalLiteral|IntoExpr,end:NumericLiteral|TemporalLiteral|IntoExpr,num_samples:int|IntoExpr,*,closed:ClosedInterval='both',eager:bool=False)->Expr | Series
polars.functions.range.linear_space.linear_spaces(start:NumericLiteral|TemporalLiteral|IntoExprColumn,end:NumericLiteral|TemporalLiteral|IntoExprColumn,num_samples:int|IntoExprColumn,*,closed:ClosedInterval='both',as_array:bool=False,eager:bool=False)->Expr | Series
polars.linear_space(start:NumericLiteral|TemporalLiteral|IntoExpr,end:NumericLiteral|TemporalLiteral|IntoExpr,num_samples:int|IntoExpr,*,closed:ClosedInterval='both',eager:bool=False)->Expr | Series
polars.linear_spaces(start:NumericLiteral|TemporalLiteral|IntoExprColumn,end:NumericLiteral|TemporalLiteral|IntoExprColumn,num_samples:int|IntoExprColumn,*,closed:ClosedInterval='both',as_array:bool=False,eager:bool=False)->Expr | Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/range/datetime_range.py----------------------------------------
A:polars.functions.range.datetime_range.interval->parse_interval_argument(interval)
A:polars.functions.range.datetime_range.start_pyexpr->parse_into_expression(start)
A:polars.functions.range.datetime_range.end_pyexpr->parse_into_expression(end)
A:polars.functions.range.datetime_range.result->wrap_expr(plr.datetime_ranges(start_pyexpr, end_pyexpr, interval, closed, time_unit, time_zone))
polars.datetime_range(start:datetime|date|IntoExprColumn,end:datetime|date|IntoExprColumn,interval:str|timedelta='1d',*,closed:ClosedInterval='both',time_unit:TimeUnit|None=None,time_zone:str|None=None,eager:bool=False)->Series | Expr
polars.datetime_ranges(start:datetime|date|IntoExprColumn,end:datetime|date|IntoExprColumn,interval:str|timedelta='1d',*,closed:ClosedInterval='both',time_unit:TimeUnit|None=None,time_zone:str|None=None,eager:bool=False)->Series | Expr
polars.functions.range.datetime_range.datetime_range(start:datetime|date|IntoExprColumn,end:datetime|date|IntoExprColumn,interval:str|timedelta='1d',*,closed:ClosedInterval='both',time_unit:TimeUnit|None=None,time_zone:str|None=None,eager:bool=False)->Series | Expr
polars.functions.range.datetime_range.datetime_ranges(start:datetime|date|IntoExprColumn,end:datetime|date|IntoExprColumn,interval:str|timedelta='1d',*,closed:ClosedInterval='both',time_unit:TimeUnit|None=None,time_zone:str|None=None,eager:bool=False)->Series | Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/aggregation/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/aggregation/vertical.py----------------------------------------
polars.all(*names:str,ignore_nulls:bool=True)->Expr
polars.any(*names:str,ignore_nulls:bool=True)->Expr | bool | None
polars.cum_sum(*names:str)->Expr
polars.functions.aggregation.vertical.all(*names:str,ignore_nulls:bool=True)->Expr
polars.functions.aggregation.vertical.any(*names:str,ignore_nulls:bool=True)->Expr | bool | None
polars.functions.aggregation.vertical.cum_sum(*names:str)->Expr
polars.functions.aggregation.vertical.max(*names:str)->Expr
polars.functions.aggregation.vertical.min(*names:str)->Expr
polars.functions.aggregation.vertical.sum(*names:str)->Expr
polars.max(*names:str)->Expr
polars.min(*names:str)->Expr
polars.sum(*names:str)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/functions/aggregation/horizontal.py----------------------------------------
A:polars.functions.aggregation.horizontal.pyexprs->parse_into_list_of_expressions(*exprs)
polars.all_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.any_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.cum_sum_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.functions.aggregation.horizontal.all_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.functions.aggregation.horizontal.any_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.functions.aggregation.horizontal.cum_sum_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.functions.aggregation.horizontal.max_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.functions.aggregation.horizontal.mean_horizontal(*exprs:IntoExpr|Iterable[IntoExpr],ignore_nulls:bool=True)->Expr
polars.functions.aggregation.horizontal.min_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.functions.aggregation.horizontal.sum_horizontal(*exprs:IntoExpr|Iterable[IntoExpr],ignore_nulls:bool=True)->Expr
polars.max_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.mean_horizontal(*exprs:IntoExpr|Iterable[IntoExpr],ignore_nulls:bool=True)->Expr
polars.min_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.sum_horizontal(*exprs:IntoExpr|Iterable[IntoExpr],ignore_nulls:bool=True)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/ml/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/ml/utilities.py----------------------------------------
A:polars.ml.utilities.arr->df.to_numpy(writable=writable, order=order)
polars.ml.utilities.frame_to_numpy(df:DataFrame,*,writable:bool,target:str,order:IndexOrder='fortran')->np.ndarray[Any, Any]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars1.27.1/lib/python3.9/site-packages/polars/ml/torch.py----------------------------------------
A:polars.ml.torch.self.features->frame.select(features if isinstance(features, Expr) or features else exclude(label_frame.columns)).to_torch()
A:polars.ml.torch.label_frame->frame.select(*label)
A:polars.ml.torch.self.labels->(label_frame if len(label) > 1 else label_frame.to_series()).to_torch()
A:polars.ml.torch.feature_frame->frame.select(features if isinstance(features, Expr) or features else exclude(label_frame.columns))
A:polars.ml.torch.dummy_frame->DataFrame({'blank': [0]})
A:polars.ml.torch.dataset_copy->self.__class__(dummy_frame)
A:polars.ml.torch.ds->self.__copy__()
A:polars.ml.torch.ds.features->self.features.to(torch.float16, memory_format=memory_format)
A:polars.ml.torch.ds.labels->self.labels.to(torch.float16, memory_format=memory_format)
polars.ml.torch.PolarsDataset(self,frame:DataFrame,*,label:str|Expr|Sequence[str|Expr]|None=None,features:str|Expr|Sequence[str|Expr]|None=None)
polars.ml.torch.PolarsDataset.__copy__(self)->Self
polars.ml.torch.PolarsDataset.__init__(self,frame:DataFrame,*,label:str|Expr|Sequence[str|Expr]|None=None,features:str|Expr|Sequence[str|Expr]|None=None)
polars.ml.torch.PolarsDataset.__repr__(self)->str
polars.ml.torch.PolarsDataset.half(self,*,features:bool=True,labels:bool=True,memory_format:memory_format=torch.preserve_format)->Self
polars.ml.torch.PolarsDataset.schema(self)->dict[str, torch.dtype | None]

