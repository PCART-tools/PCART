
----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/_reexport.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/dependencies.py----------------------------------------
A:polars.dependencies.self._globals->globals()
A:polars.dependencies.module->self._import()
A:polars.dependencies.pfx->self._mod_pfx.get(self._module_name, '')
A:polars.dependencies.module_spec->find_spec(module_name)
A:polars.dependencies.(dataclasses, _)->_lazy_import('dataclasses')
A:polars.dependencies.(html, _)->_lazy_import('html')
A:polars.dependencies.(json, _)->_lazy_import('json')
A:polars.dependencies.(pickle, _)->_lazy_import('pickle')
A:polars.dependencies.(subprocess, _)->_lazy_import('subprocess')
A:polars.dependencies.(deltalake, _DELTALAKE_AVAILABLE)->_lazy_import('deltalake')
A:polars.dependencies.(fsspec, _FSSPEC_AVAILABLE)->_lazy_import('fsspec')
A:polars.dependencies.(hypothesis, _HYPOTHESIS_AVAILABLE)->_lazy_import('hypothesis')
A:polars.dependencies.(numpy, _NUMPY_AVAILABLE)->_lazy_import('numpy')
A:polars.dependencies.(pandas, _PANDAS_AVAILABLE)->_lazy_import('pandas')
A:polars.dependencies.(pyarrow, _PYARROW_AVAILABLE)->_lazy_import('pyarrow')
A:polars.dependencies.(pydantic, _PYDANTIC_AVAILABLE)->_lazy_import('pydantic')
polars.dependencies._LazyModule(self,module_name:str,module_available:bool)
polars.dependencies._LazyModule.__getattr__(self,attr:Any)->Any
polars.dependencies._LazyModule.__init__(self,module_name:str,module_available:bool)
polars.dependencies._LazyModule._import(self)->ModuleType
polars.dependencies._check_for_numpy(obj:Any)->bool
polars.dependencies._check_for_pandas(obj:Any)->bool
polars.dependencies._check_for_pyarrow(obj:Any)->bool
polars.dependencies._check_for_pydantic(obj:Any)->bool
polars.dependencies._lazy_import(module_name:str)->tuple[ModuleType, bool]
polars.dependencies._might_be(cls:type,type_:str)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/exceptions.py----------------------------------------
polars.ChronoFormatWarning(Warning)
polars.exceptions.ChronoFormatWarning(Warning)
polars.exceptions.InvalidAssert(Exception)
polars.exceptions.NoRowsReturnedError(RowsError)
polars.exceptions.PolarsInefficientApplyWarning(Warning)
polars.exceptions.RowsError(Exception)
polars.exceptions.TimeZoneAwareConstructorWarning(Warning)
polars.exceptions.TooManyRowsReturnedError(RowsError)


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/api.py----------------------------------------
A:polars.api.NS->TypeVar('NS')
A:polars.api.ns_instance->self._ns(instance)
polars.api.NameSpace(self,name:str,namespace:type[NS])
polars.api.NameSpace.__get__(self,instance:NS|None,cls:type[NS])->NS | type[NS]
polars.api.NameSpace.__init__(self,name:str,namespace:type[NS])
polars.api._create_namespace(name:str,cls:type[Expr|DataFrame|LazyFrame|Series])->Callable[[type[NS]], type[NS]]
polars.api.register_dataframe_namespace(name:str)->Callable[[type[NS]], type[NS]]
polars.api.register_expr_namespace(name:str)->Callable[[type[NS]], type[NS]]
polars.api.register_lazyframe_namespace(name:str)->Callable[[type[NS]], type[NS]]
polars.api.register_series_namespace(name:str)->Callable[[type[NS]], type[NS]]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/string_cache.py----------------------------------------
A:polars.string_cache.self._already_enabled->_using_string_cache()
polars.StringCache(contextlib.ContextDecorator)
polars.StringCache.__enter__(self)->StringCache
polars.StringCache.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.enable_string_cache(enable:bool)->None
polars.string_cache.StringCache(contextlib.ContextDecorator)
polars.string_cache.StringCache.__enter__(self)->StringCache
polars.string_cache.StringCache.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.string_cache.enable_string_cache(enable:bool)->None
polars.string_cache.toggle_string_cache(toggle:bool)->None
polars.string_cache.using_string_cache()->bool
polars.toggle_string_cache(toggle:bool)->None
polars.using_string_cache()->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/config.py----------------------------------------
A:polars.config.self._original_state->self.save()
A:polars.config.options->polars.dependencies.json.dumps({'environment': environment_vars, 'direct': direct_vars}, separators=(',', ':'))
A:polars.config.file->Path(normalise_filepath(file)).resolve()
A:polars.config.config_state[cfg_methodname]->get_value()
A:polars.config.os.environ['POLARS_AUTO_STRUCTIFY']->str(int(active))
A:polars.config.os.environ['POLARS_FMT_STR_LEN']->str(n)
A:polars.config.os.environ['POLARS_STREAMING_CHUNK_SIZE']->str(size)
A:polars.config.os.environ['POLARS_FMT_MAX_COLS']->str(n)
A:polars.config.os.environ['POLARS_FMT_TABLE_INLINE_COLUMN_DATA_TYPE']->str(int(active))
A:polars.config.os.environ['POLARS_FMT_TABLE_DATAFRAME_SHAPE_BELOW']->str(int(active))
A:polars.config.os.environ['POLARS_FMT_TABLE_ROUNDED_CORNERS']->str(int(rounded_corners))
A:polars.config.os.environ['POLARS_FMT_TABLE_HIDE_COLUMN_DATA_TYPES']->str(int(active))
A:polars.config.os.environ['POLARS_FMT_TABLE_HIDE_COLUMN_NAMES']->str(int(active))
A:polars.config.os.environ['POLARS_FMT_TABLE_HIDE_COLUMN_SEPARATOR']->str(int(active))
A:polars.config.os.environ['POLARS_FMT_TABLE_HIDE_DATAFRAME_SHAPE_INFORMATION']->str(int(active))
A:polars.config.os.environ['POLARS_FMT_MAX_ROWS']->str(n)
A:polars.config.os.environ['POLARS_TABLE_WIDTH']->str(width)
A:polars.config.os.environ['POLARS_VERBOSE']->str(int(active))
polars.Config(self,*,restore_defaults:bool=False,**options:Any)
polars.Config.__enter__(self)->Config
polars.Config.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.Config.activate_decimals(cls,active:bool=True)->type[Config]
polars.Config.load(cls,cfg:Path|str)->type[Config]
polars.Config.restore_defaults(cls)->type[Config]
polars.Config.save(cls,file:Path|str|None=None)->str
polars.Config.set_ascii_tables(cls,active:bool=True)->type[Config]
polars.Config.set_auto_structify(cls,active:bool=False)->type[Config]
polars.Config.set_fmt_float(cls,fmt:FloatFmt='mixed')->type[Config]
polars.Config.set_fmt_str_lengths(cls,n:int)->type[Config]
polars.Config.set_streaming_chunk_size(cls,size:int)->type[Config]
polars.Config.set_tbl_cell_alignment(cls,format:Literal['LEFT','CENTER','RIGHT'])->type[Config]
polars.Config.set_tbl_cols(cls,n:int)->type[Config]
polars.Config.set_tbl_column_data_type_inline(cls,active:bool=True)->type[Config]
polars.Config.set_tbl_dataframe_shape_below(cls,active:bool=True)->type[Config]
polars.Config.set_tbl_formatting(cls,format:Literal['ASCII_FULL','ASCII_FULL_CONDENSED','ASCII_NO_BORDERS','ASCII_BORDERS_ONLY','ASCII_BORDERS_ONLY_CONDENSED','ASCII_HORIZONTAL_ONLY','ASCII_MARKDOWN','UTF8_FULL','UTF8_FULL_CONDENSED','UTF8_NO_BORDERS','UTF8_BORDERS_ONLY','UTF8_HORIZONTAL_ONLY','NOTHING']|None=None,rounded_corners:bool=False)->type[Config]
polars.Config.set_tbl_hide_column_data_types(cls,active:bool=True)->type[Config]
polars.Config.set_tbl_hide_column_names(cls,active:bool=True)->type[Config]
polars.Config.set_tbl_hide_dataframe_shape(cls,active:bool=True)->type[Config]
polars.Config.set_tbl_hide_dtype_separator(cls,active:bool=True)->type[Config]
polars.Config.set_tbl_rows(cls,n:int)->type[Config]
polars.Config.set_tbl_width_chars(cls,width:int)->type[Config]
polars.Config.set_verbose(cls,active:bool=True)->type[Config]
polars.Config.state(cls,if_set:bool=False,env_only:bool=False)->dict[str, str | None]
polars.config.Config(self,*,restore_defaults:bool=False,**options:Any)
polars.config.Config.__enter__(self)->Config
polars.config.Config.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.config.Config.__init__(self,*,restore_defaults:bool=False,**options:Any)
polars.config.Config.activate_decimals(cls,active:bool=True)->type[Config]
polars.config.Config.load(cls,cfg:Path|str)->type[Config]
polars.config.Config.restore_defaults(cls)->type[Config]
polars.config.Config.save(cls,file:Path|str|None=None)->str
polars.config.Config.set_ascii_tables(cls,active:bool=True)->type[Config]
polars.config.Config.set_auto_structify(cls,active:bool=False)->type[Config]
polars.config.Config.set_fmt_float(cls,fmt:FloatFmt='mixed')->type[Config]
polars.config.Config.set_fmt_str_lengths(cls,n:int)->type[Config]
polars.config.Config.set_streaming_chunk_size(cls,size:int)->type[Config]
polars.config.Config.set_tbl_cell_alignment(cls,format:Literal['LEFT','CENTER','RIGHT'])->type[Config]
polars.config.Config.set_tbl_cols(cls,n:int)->type[Config]
polars.config.Config.set_tbl_column_data_type_inline(cls,active:bool=True)->type[Config]
polars.config.Config.set_tbl_dataframe_shape_below(cls,active:bool=True)->type[Config]
polars.config.Config.set_tbl_formatting(cls,format:Literal['ASCII_FULL','ASCII_FULL_CONDENSED','ASCII_NO_BORDERS','ASCII_BORDERS_ONLY','ASCII_BORDERS_ONLY_CONDENSED','ASCII_HORIZONTAL_ONLY','ASCII_MARKDOWN','UTF8_FULL','UTF8_FULL_CONDENSED','UTF8_NO_BORDERS','UTF8_BORDERS_ONLY','UTF8_HORIZONTAL_ONLY','NOTHING']|None=None,rounded_corners:bool=False)->type[Config]
polars.config.Config.set_tbl_hide_column_data_types(cls,active:bool=True)->type[Config]
polars.config.Config.set_tbl_hide_column_names(cls,active:bool=True)->type[Config]
polars.config.Config.set_tbl_hide_dataframe_shape(cls,active:bool=True)->type[Config]
polars.config.Config.set_tbl_hide_dtype_separator(cls,active:bool=True)->type[Config]
polars.config.Config.set_tbl_rows(cls,n:int)->type[Config]
polars.config.Config.set_tbl_width_chars(cls,width:int)->type[Config]
polars.config.Config.set_verbose(cls,active:bool=True)->type[Config]
polars.config.Config.state(cls,if_set:bool=False,env_only:bool=False)->dict[str, str | None]
polars.config._get_float_fmt()->str


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/type_aliases.py----------------------------------------
A:polars.type_aliases.PolarsType->TypeVar('PolarsType', 'DataFrame', 'LazyFrame', 'Series', 'Expr')
A:polars.type_aliases.FrameType->TypeVar('FrameType', 'DataFrame', 'LazyFrame')


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/selectors.py----------------------------------------
A:polars.selectors.str_params->','.join((repr(v)[1:-1] if k.startswith('*') else f'{k}={v!r}' for (k, v) in (params or {}).items()))
A:polars.selectors.rx->'|'.join((re.escape(x) for x in strings))
A:polars.selectors.SelectorType->TypeVar('SelectorType', Expr, _selector_proxy_)
A:polars.selectors.escaped_substring->_re_string(substring)
A:polars.selectors.escaped_suffix->_re_string(suffix)
A:polars.selectors.escaped_prefix->_re_string(prefix)
polars.selectors._re_string(string:str|Collection[str])->str
polars.selectors._selector_proxy_(self,expr:Expr,name:str,parameters:dict[str,Any]|None=None)
polars.selectors._selector_proxy_.__and__(self,other:Any)->SelectorType | Expr
polars.selectors._selector_proxy_.__init__(self,expr:Expr,name:str,parameters:dict[str,Any]|None=None)
polars.selectors._selector_proxy_.__invert__(self)->Self
polars.selectors._selector_proxy_.__or__(self,other:Any)->SelectorType | Expr
polars.selectors._selector_proxy_.__rand__(self,other:Any)->SelectorType | Expr
polars.selectors._selector_proxy_.__repr__(self)->str
polars.selectors._selector_proxy_.__ror__(self,other:Any)->SelectorType | Expr
polars.selectors._selector_proxy_.__sub__(self,other:Any)->SelectorType | Expr
polars.selectors._selector_proxy_.as_expr(self)->Expr
polars.selectors.all()->SelectorType
polars.selectors.by_dtype(*dtypes:PolarsDataType|Collection[PolarsDataType])->SelectorType
polars.selectors.by_name(*names:str|Collection[str])->SelectorType
polars.selectors.contains(substring:str|Collection[str])->SelectorType
polars.selectors.datetime(time_unit:TimeUnit|Collection[TimeUnit]|None=None,time_zone:str|timezone|Collection[str|timezone|None]|None=('*',None))->SelectorType
polars.selectors.duration(time_unit:TimeUnit|Collection[TimeUnit]|None=None)->SelectorType
polars.selectors.ends_with(*suffix:str)->SelectorType
polars.selectors.first()->SelectorType
polars.selectors.float()->SelectorType
polars.selectors.integer()->SelectorType
polars.selectors.is_selector(obj:Any)->bool
polars.selectors.last()->SelectorType
polars.selectors.matches(pattern:str)->SelectorType
polars.selectors.numeric()->SelectorType
polars.selectors.selector_column_names(frame:DataFrame|LazyFrame,selector:SelectorType)->tuple[str, ...]
polars.selectors.starts_with(*prefix:str)->SelectorType
polars.selectors.string(include_categorical:bool=False)->SelectorType
polars.selectors.temporal()->SelectorType


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/slice.py----------------------------------------
A:polars.slice.frame->lazy.collect()
A:polars.slice.stride->abs(self.stride)
A:polars.slice.lazyslice->self.obj.slice(start, slice_length).slice(self.stop + 1, self.slice_length).reverse()
A:polars.slice.obj_len->len(self.obj)
A:polars.slice.(start, stop, stride)->slice(s.start, s.stop, s.step).indices(obj_len)
A:polars.slice.lazyobj->self._lazify(self.obj)
A:polars.slice.obj->self.obj.slice(start, slice_length)
polars.slice.LazyPolarsSlice(self,obj:LazyFrame)
polars.slice.LazyPolarsSlice.__init__(self,obj:LazyFrame)
polars.slice.LazyPolarsSlice.apply(self,s:slice)->LazyFrame
polars.slice.PolarsSlice(self,obj:FrameOrSeries)
polars.slice.PolarsSlice.__init__(self,obj:FrameOrSeries)
polars.slice.PolarsSlice._as_original(lazy:LazyFrame,original:FrameOrSeries)->FrameOrSeries
polars.slice.PolarsSlice._lazify(obj:FrameOrSeries)->LazyFrame
polars.slice.PolarsSlice._slice_negative(self,obj:LazyFrame)->LazyFrame
polars.slice.PolarsSlice._slice_positive(self,obj:LazyFrame)->LazyFrame
polars.slice.PolarsSlice._slice_setup(self,s:slice)->None
polars.slice.PolarsSlice.apply(self,s:slice)->FrameOrSeries


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/convert.py----------------------------------------
A:polars.convert.no_dtypes->all((d is None for d in dtypes))
A:polars.convert.coldata->list(zip(*(row for row in body if not all((e == '…' for e in row)))))
A:polars.convert.idx->headers.index(el)
A:polars.convert.schema->dict(zip(headers, (dtype_short_repr_to_dtype(d) for d in dtypes)))
A:polars.convert.df->read_csv(buf, new_columns=df.columns, try_parse_dates=True)
A:polars.convert.buf->io.BytesIO()
A:polars.convert.length->int(shape[1:-2] if shape else -1)
A:polars.convert.dtype->dtype_short_repr_to_dtype(m.groups()[2])
A:polars.convert.srs->polars._reexport.Series(name=name, values=values, dtype=Utf8)
A:polars.convert.m->re.search(pattern='(?:shape: (\\(\\d+,\\))\\n.*?)?Series:\\s+([^\\n]+)\\s+\\[([^\\n]+)](.*)', string=tbl, flags=re.DOTALL)
A:polars.convert.s->polars._reexport.DataFrame(data=pl.Series._from_arrow(name, data, rechunk=rechunk), schema=schema, schema_overrides=schema_overrides).to_series()
A:polars.convert.pa_table->polars.dependencies.pyarrow.interchange.from_dataframe(df, allow_copy=allow_copy)
polars.convert._from_dataframe_repr(m:re.Match[str])->DataFrame
polars.convert._from_series_repr(m:re.Match[str])->Series
polars.convert.from_arrow(data:pa.Table|pa.Array|pa.ChunkedArray|pa.RecordBatch|Sequence[pa.RecordBatch],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True)->DataFrame | Series
polars.convert.from_dataframe(df:Any,*,allow_copy:bool=True)->DataFrame
polars.convert.from_dict(data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]|Series],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None)->DataFrame
polars.convert.from_dicts(data:Sequence[dict[str,Any]],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,infer_schema_length:int|None=N_INFER_DEFAULT)->DataFrame
polars.convert.from_numpy(data:np.ndarray[Any,Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None)->DataFrame
polars.convert.from_pandas(data:pd.DataFrame|pd.Series[Any]|pd.Index,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True,nan_to_null:bool=True,include_index:bool=False)->DataFrame | Series
polars.convert.from_records(data:Sequence[Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT)->DataFrame
polars.convert.from_repr(tbl:str)->DataFrame | Series
polars.from_arrow(data:pa.Table|pa.Array|pa.ChunkedArray|pa.RecordBatch|Sequence[pa.RecordBatch],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True)->DataFrame | Series
polars.from_dataframe(df:Any,*,allow_copy:bool=True)->DataFrame
polars.from_dict(data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]|Series],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None)->DataFrame
polars.from_dicts(data:Sequence[dict[str,Any]],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,infer_schema_length:int|None=N_INFER_DEFAULT)->DataFrame
polars.from_numpy(data:np.ndarray[Any,Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None)->DataFrame
polars.from_pandas(data:pd.DataFrame|pd.Series[Any]|pd.Index,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True,nan_to_null:bool=True,include_index:bool=False)->DataFrame | Series
polars.from_records(data:Sequence[Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT)->DataFrame
polars.from_repr(tbl:str)->DataFrame | Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/dataframe/frame.py----------------------------------------
A:polars.dataframe.frame.T->TypeVar('T')
A:polars.dataframe.frame.P->ParamSpec('P')
A:polars.dataframe.frame.self._df->polars.polars.PyDataFrame.read_ndjson(source, ignore_errors=ignore_errors, schema=schema, schema_overrides=schema_overrides)
A:polars.dataframe.frame.df->cls.__new__(cls).clone()
A:polars.dataframe.frame.pydf->_post_apply_columns(pydf, list(schema or pydf.columns()), schema_overrides=schema_overrides)
A:polars.dataframe.frame.self->cls.__new__(cls)
A:polars.dataframe.frame.path->normalise_filepath(source)
A:polars.dataframe.frame.source->normalise_filepath(source)
A:polars.dataframe.frame.processed_null_values->_process_null_values(null_values)
A:polars.dataframe.frame.dtypes_dict->dict(dtype_list)
A:polars.dataframe.frame.scan->scan_ipc(source, n_rows=n_rows, rechunk=rechunk, row_count_name=row_count_name, row_count_offset=row_count_offset, memory_map=memory_map)
A:polars.dataframe.frame.(projection, columns)->handle_projection_columns(columns)
A:polars.dataframe.frame.other_renamed->other.extend_constant(value=value, n=length - 1).select(F.all().suffix(suffix))
A:polars.dataframe.frame.combined->polars.functions.concat([self, other_renamed], how='horizontal')
A:polars.dataframe.frame.s->StringIO().getvalue()
A:polars.dataframe.frame.other->other.extend_constant(value=value, n=length - 1).extend_constant(value=value, n=length - 1)
A:polars.dataframe.frame.row_selection->slice(0)
A:polars.dataframe.frame.start->cls.__new__(cls).find_idx_by_name(col_selection.start)
A:polars.dataframe.frame.col_selection->slice(start, stop, col_selection.step)
A:polars.dataframe.frame.series->cls.__new__(cls).to_series(col_selection)
A:polars.dataframe.frame.item->polars._reexport.Series('', item)
A:polars.dataframe.frame.value->polars.dependencies.numpy.array(value)
A:polars.dataframe.frame.max_cols->int(os.environ.get('POLARS_FMT_MAX_COLS', default=75))
A:polars.dataframe.frame.max_rows->int(os.environ.get('POLARS_FMT_MAX_ROWS', default=25))
A:polars.dataframe.frame.from_series->kwargs.get('from_series', False)
A:polars.dataframe.frame.record_batches->cls.__new__(cls)._df.to_pandas()
A:polars.dataframe.frame.a->StringIO().getvalue().to_numpy()
A:polars.dataframe.frame.out->cls.__new__(cls)._df.to_numpy(order)
A:polars.dataframe.frame.tbl->polars.dependencies.pyarrow.table(data)
A:polars.dataframe.frame.date_as_object->kwargs.pop('date_as_object', False)
A:polars.dataframe.frame.output->StringIO()
A:polars.dataframe.frame.file->normalise_filepath(file)
A:polars.dataframe.frame.json_bytes->buf.getvalue()
A:polars.dataframe.frame.json_str->buf.getvalue().decode('utf8')
A:polars.dataframe.frame.buffer->BytesIO()
A:polars.dataframe.frame.(wb, ws, can_close)->_xl_setup_workbook(workbook, worksheet)
A:polars.dataframe.frame.fmt_cache->_XLFormatCache(wb)
A:polars.dataframe.frame.(table_style, table_options)->_xl_setup_table_options(table_style)
A:polars.dataframe.frame.(table_columns, column_formats, df)->_xl_setup_table_columns(df=df, format_cache=fmt_cache, column_formats=column_formats, column_totals=column_totals, dtype_formats=dtype_formats, float_precision=float_precision, row_totals=row_totals, sparklines=sparklines, formulas=formulas)
A:polars.dataframe.frame.column_widths->_unpack_multi_column_dict(column_widths or {})
A:polars.dataframe.frame.table_ident->next(delimited_read([table_name], delimiter='.'))
A:polars.dataframe.frame.engine_sa->create_engine(connection)
A:polars.dataframe.frame.target->_resolve_delta_lake_uri(str(target), strict=False)
A:polars.dataframe.frame.data->cls.__new__(cls).to_arrow()
A:polars.dataframe.frame.table->try_get_deltatable(target, storage_options)
A:polars.dataframe.frame.table_schema->try_get_deltatable(target, storage_options).schema()
A:polars.dataframe.frame.data_schema->try_get_deltatable(target, storage_options).schema().to_pyarrow()
A:polars.dataframe.frame.sz->cls.__new__(cls)._df.estimated_size()
A:polars.dataframe.frame.predicate->polars._reexport.Series(predicate)
A:polars.dataframe.frame.max_num_values->min(10, self.height)
A:polars.dataframe.frame.val->self[:max_num_values][col_name].to_list()
A:polars.dataframe.frame.val_str->', '.join(map(str, val))
A:polars.dataframe.frame.max_col_name->max((len(col_name) for (col_name, _, _) in data))
A:polars.dataframe.frame.max_col_dtype->max((len(dtype_str) for (_, dtype_str, _) in data))
A:polars.dataframe.frame.df_metrics->cls.__new__(cls).select(F.all().count().prefix('count:'), F.all().null_count().prefix('null_count:'), F.all().mean().prefix('mean:'), F.all().std().prefix('std:'), F.all().min().prefix('min:'), F.all().max().prefix('max:'), F.all().median().prefix('median:'), *percentile_exprs).row(0)
A:polars.dataframe.frame.n_cols->math.ceil(height / n_rows)
A:polars.dataframe.frame.summary->dict(zip(self.columns, list(zip(*described))))
A:polars.dataframe.frame.df_summary->cls.__new__(cls).__class__(summary)
A:polars.dataframe.frame.n->max(0, self.height + n)
A:polars.dataframe.frame.every->_timedelta_to_pl_duration(every)
A:polars.dataframe.frame.offset->_timedelta_to_pl_duration(offset)
A:polars.dataframe.frame.(out, is_df)->cls.__new__(cls)._df.apply(function, return_dtype, inference_size)
A:polars.dataframe.frame.columns->list(columns)
A:polars.dataframe.frame.n_rows->len(rows)
A:polars.dataframe.frame.by->list(by)
A:polars.dataframe.frame.expr->polars.functions.struct(struct_fields)
A:polars.dataframe.frame.seed->random.randint(0, 10000)
A:polars.dataframe.frame.acc->operation(acc, self.to_series(i))
A:polars.dataframe.frame.row->cls.__new__(cls)._df.row_tuple(index)
A:polars.dataframe.frame.rows->cls.__new__(cls).filter(by_predicate).rows()
A:polars.dataframe.frame.key->tuple(key)
A:polars.dataframe.frame.get_data->itemgetter(*data_idxs)
A:polars.dataframe.frame.get_key->itemgetter(*index_idxs)
A:polars.dataframe.frame.k->get_key(d)
A:polars.dataframe.frame.zerocopy_slice->cls.__new__(cls).slice(offset, buffer_size)
A:polars.dataframe.frame.rows_chunk->cls.__new__(cls).slice(offset, buffer_size).rows(named=False)
polars.DataFrame(self,data:FrameInitTypes|None=None,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,nan_to_null:bool=False)
polars.DataFrame.__add__(self,other:DataFrame|Series|int|float|bool|str)->DataFrame
polars.DataFrame.__array__(self,dtype:Any=None)->np.ndarray[Any, Any]
polars.DataFrame.__bool__(self)->NoReturn
polars.DataFrame.__contains__(self,key:str)->bool
polars.DataFrame.__copy__(self)->Self
polars.DataFrame.__dataframe__(self,nan_as_null:bool=False,allow_copy:bool=True)->_PyArrowDataFrame
polars.DataFrame.__deepcopy__(self,memo:None=None)->Self
polars.DataFrame.__eq__(self,other:Any)->DataFrame
polars.DataFrame.__floordiv__(self,other:DataFrame|Series|int|float)->DataFrame
polars.DataFrame.__ge__(self,other:Any)->DataFrame
polars.DataFrame.__getitem__(self,item:str|int|np.ndarray[Any,Any]|MultiColSelector|tuple[int,MultiColSelector]|tuple[MultiRowSelector,MultiColSelector]|tuple[MultiRowSelector,int|str]|tuple[int,int|str])->DataFrame | Series
polars.DataFrame.__getstate__(self)->list[Series]
polars.DataFrame.__gt__(self,other:Any)->DataFrame
polars.DataFrame.__iter__(self)->Iterator[Any]
polars.DataFrame.__le__(self,other:Any)->DataFrame
polars.DataFrame.__len__(self)->int
polars.DataFrame.__lt__(self,other:Any)->DataFrame
polars.DataFrame.__mod__(self,other:DataFrame|Series|int|float)->Self
polars.DataFrame.__mul__(self,other:DataFrame|Series|int|float)->Self
polars.DataFrame.__ne__(self,other:Any)->DataFrame
polars.DataFrame.__radd__(self,other:DataFrame|Series|int|float|bool|str)->DataFrame
polars.DataFrame.__repr__(self)->str
polars.DataFrame.__rmul__(self,other:DataFrame|Series|int|float)->Self
polars.DataFrame.__setitem__(self,key:str|Sequence[int]|Sequence[str]|tuple[Any,str|int],value:Any)->None
polars.DataFrame.__setstate__(self,state)->None
polars.DataFrame.__str__(self)->str
polars.DataFrame.__sub__(self,other:DataFrame|Series|int|float)->Self
polars.DataFrame.__truediv__(self,other:DataFrame|Series|int|float)->DataFrame
polars.DataFrame._cast_all_from_to(self,df:DataFrame,from_:frozenset[PolarsDataType],to:PolarsDataType)->DataFrame
polars.DataFrame._comp(self,other:Any,op:ComparisonOperator)->DataFrame
polars.DataFrame._compare_to_non_df(self,other:Any,op:ComparisonOperator)->DataFrame
polars.DataFrame._compare_to_other_df(self,other:DataFrame,op:ComparisonOperator)->DataFrame
polars.DataFrame._div(self,other:Any,floordiv:bool)->DataFrame
polars.DataFrame._from_arrow(cls,data:pa.Table,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True)->Self
polars.DataFrame._from_dict(cls,data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]|Series],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None)->Self
polars.DataFrame._from_dicts(cls,data:Sequence[dict[str,Any]],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,infer_schema_length:int|None=N_INFER_DEFAULT)->Self
polars.DataFrame._from_numpy(cls,data:np.ndarray[Any,Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None)->Self
polars.DataFrame._from_pandas(cls,data:pd.DataFrame,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True,nan_to_null:bool=True,include_index:bool=False)->Self
polars.DataFrame._from_pydf(cls,py_df:PyDataFrame)->Self
polars.DataFrame._from_records(cls,data:Sequence[Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT)->Self
polars.DataFrame._ipython_key_completions_(self)->list[str]
polars.DataFrame._pos_idx(self,idx:int,dim:int)->int
polars.DataFrame._read_avro(cls,source:str|Path|BinaryIO|bytes,*,columns:Sequence[int]|Sequence[str]|None=None,n_rows:int|None=None)->Self
polars.DataFrame._read_csv(cls,source:str|Path|BinaryIO|bytes,*,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,separator:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:None|(SchemaDict|Sequence[PolarsDataType])=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=8192,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,sample_size:int=1024,eol_char:str='\n')->DataFrame
polars.DataFrame._read_ipc(cls,source:str|Path|BinaryIO|bytes,*,columns:Sequence[int]|Sequence[str]|None=None,n_rows:int|None=None,row_count_name:str|None=None,row_count_offset:int=0,rechunk:bool=True,memory_map:bool=True)->Self
polars.DataFrame._read_json(cls,source:str|Path|IOBase|bytes,*,schema:SchemaDefinition|None=None,schema_overrides:SchemaDefinition|None=None)->Self
polars.DataFrame._read_ndjson(cls,source:str|Path|IOBase|bytes,*,schema:SchemaDefinition|None=None,schema_overrides:SchemaDefinition|None=None,ignore_errors:bool=False)->Self
polars.DataFrame._read_parquet(cls,source:str|Path|BinaryIO|bytes,*,columns:Sequence[int]|Sequence[str]|None=None,n_rows:int|None=None,parallel:ParallelStrategy='auto',row_count_name:str|None=None,row_count_offset:int=0,low_memory:bool=False,use_statistics:bool=True,rechunk:bool=True)->DataFrame
polars.DataFrame._repr_html_(self,**kwargs:Any)->str
polars.DataFrame._take_with_series(self,s:Series)->DataFrame
polars.DataFrame.apply(self,function:Callable[[tuple[Any,...]],Any],return_dtype:PolarsDataType|None=None,*,inference_size:int=256)->DataFrame
polars.DataFrame.bottom_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],descending:bool|Sequence[bool]=False,nulls_last:bool=False,maintain_order:bool=False)->DataFrame
polars.DataFrame.clear(self,n:int=0)->Self
polars.DataFrame.clone(self)->Self
polars.DataFrame.columns(self)->list[str]
polars.DataFrame.columns(self,names:Sequence[str])->None
polars.DataFrame.corr(self,**kwargs:Any)->DataFrame
polars.DataFrame.describe(self,percentiles:Sequence[float]|float|None=(0.25,0.75))->Self
polars.DataFrame.drop(self,columns:str|Collection[str],*more_columns:str)->DataFrame
polars.DataFrame.drop_in_place(self,name:str)->Series
polars.DataFrame.drop_nulls(self,subset:str|Collection[str]|None=None)->DataFrame
polars.DataFrame.dtypes(self)->list[PolarsDataType]
polars.DataFrame.estimated_size(self,unit:SizeUnit='b')->int | float
polars.DataFrame.explode(self,columns:str|Sequence[str]|Expr|Sequence[Expr],*more_columns:str|Expr)->DataFrame
polars.DataFrame.extend(self,other:DataFrame)->Self
polars.DataFrame.fill_nan(self,value:Expr|int|float|None)->DataFrame
polars.DataFrame.fill_null(self,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None,*,matches_supertype:bool=True)->DataFrame
polars.DataFrame.filter(self,predicate:Expr|str|Series|list[bool]|np.ndarray[Any,Any]|bool)->DataFrame
polars.DataFrame.find_idx_by_name(self,name:str)->int
polars.DataFrame.flags(self)->dict[str, dict[str, bool]]
polars.DataFrame.fold(self,operation:Callable[[Series,Series],Series])->Series
polars.DataFrame.frame_equal(self,other:DataFrame,*,null_equal:bool=True)->bool
polars.DataFrame.get_column(self,name:str)->Series
polars.DataFrame.get_columns(self)->list[Series]
polars.DataFrame.glimpse(self,*,return_as_string:bool=False)->str | None
polars.DataFrame.groupby(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,maintain_order:bool=False)->GroupBy
polars.DataFrame.groupby_dynamic(self,index_column:IntoExpr,*,every:str|timedelta,period:str|timedelta|None=None,offset:str|timedelta|None=None,truncate:bool=True,include_boundaries:bool=False,closed:ClosedInterval='left',by:IntoExpr|Iterable[IntoExpr]|None=None,start_by:StartBy='window',check_sorted:bool=True)->DynamicGroupBy
polars.DataFrame.groupby_rolling(self,index_column:IntoExpr,*,period:str|timedelta,offset:str|timedelta|None=None,closed:ClosedInterval='right',by:IntoExpr|Iterable[IntoExpr]|None=None,check_sorted:bool=True)->RollingGroupBy
polars.DataFrame.hash_rows(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->Series
polars.DataFrame.head(self,n:int=5)->Self
polars.DataFrame.height(self)->int
polars.DataFrame.hstack(self,columns:list[Series]|DataFrame,*,in_place:bool=False)->Self
polars.DataFrame.insert_at_idx(self,index:int,series:Series)->Self
polars.DataFrame.interpolate(self)->DataFrame
polars.DataFrame.is_duplicated(self)->Series
polars.DataFrame.is_empty(self)->bool
polars.DataFrame.is_unique(self)->Series
polars.DataFrame.item(self,row:int|None=None,column:int|str|None=None)->Any
polars.DataFrame.iter_rows(self,*,named:bool=False,buffer_size:int=500)->Iterator[tuple[Any, ...]] | Iterator[dict[str, Any]]
polars.DataFrame.iter_slices(self,n_rows:int=10000)->Iterator[DataFrame]
polars.DataFrame.join(self,other:DataFrame,on:str|Expr|Sequence[str|Expr]|None=None,how:JoinStrategy='inner',*,left_on:str|Expr|Sequence[str|Expr]|None=None,right_on:str|Expr|Sequence[str|Expr]|None=None,suffix:str='_right',validate:JoinValidation='m:m')->DataFrame
polars.DataFrame.join_asof(self,other:DataFrame,*,left_on:str|None|Expr=None,right_on:str|None|Expr=None,on:str|None|Expr=None,by_left:str|Sequence[str]|None=None,by_right:str|Sequence[str]|None=None,by:str|Sequence[str]|None=None,strategy:AsofJoinStrategy='backward',suffix:str='_right',tolerance:str|int|float|None=None,allow_parallel:bool=True,force_parallel:bool=False)->DataFrame
polars.DataFrame.lazy(self)->LazyFrame
polars.DataFrame.limit(self,n:int=5)->Self
polars.DataFrame.max(self,axis:int=0)->Self | Series
polars.DataFrame.mean(self,*,axis:int=0,null_strategy:NullStrategy='ignore')->Self | Series
polars.DataFrame.median(self)->Self
polars.DataFrame.melt(self,id_vars:Sequence[str]|str|None=None,value_vars:Sequence[str]|str|None=None,variable_name:str|None=None,value_name:str|None=None)->Self
polars.DataFrame.merge_sorted(self,other:DataFrame,key:str)->DataFrame
polars.DataFrame.min(self,axis:int=0)->Self | Series
polars.DataFrame.n_chunks(self,strategy:str='first')->int | list[int]
polars.DataFrame.n_unique(self,subset:str|Expr|Sequence[str|Expr]|None=None)->int
polars.DataFrame.null_count(self)->Self
polars.DataFrame.partition_by(self,by:str|Iterable[str],*more_by:str,maintain_order:bool=True,include_key:bool=True,as_dict:bool=False)->list[Self] | dict[Any, Self]
polars.DataFrame.pipe(self,function:Callable[Concatenate[DataFrame,P],T],*args:P.args,**kwargs:P.kwargs)->T
polars.DataFrame.pivot(self,values:Sequence[str]|str,index:Sequence[str]|str,columns:Sequence[str]|str,aggregate_function:PivotAgg|Expr|None|NoDefault=no_default,*,maintain_order:bool=True,sort_columns:bool=False,separator:str='_')->Self
polars.DataFrame.product(self)->DataFrame
polars.DataFrame.quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest')->Self
polars.DataFrame.rechunk(self)->Self
polars.DataFrame.rename(self,mapping:dict[str,str])->DataFrame
polars.DataFrame.replace(self,column:str,new_column:Series)->Self
polars.DataFrame.replace_at_idx(self,index:int,series:Series)->Self
polars.DataFrame.reverse(self)->DataFrame
polars.DataFrame.row(self,index:int|None=None,*,by_predicate:Expr|None=None,named:bool=False)->tuple[Any, ...] | dict[str, Any]
polars.DataFrame.rows(self,*,named:bool=False)->list[tuple[Any, ...]] | list[dict[str, Any]]
polars.DataFrame.rows_by_key(self,key:str|Sequence[str]|SelectorType,*,named:bool=False,include_key:bool=False,unique:bool=False)->dict[Any, Iterable[Any]]
polars.DataFrame.sample(self,n:int|None=None,*,fraction:float|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->Self
polars.DataFrame.schema(self)->SchemaDict
polars.DataFrame.select(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->DataFrame
polars.DataFrame.set_sorted(self,column:str|Iterable[str],*more_columns:str,descending:bool=False)->DataFrame
polars.DataFrame.shape(self)->tuple[int, int]
polars.DataFrame.shift(self,periods:int)->Self
polars.DataFrame.shift_and_fill(self,fill_value:int|str|float,*,periods:int=1)->DataFrame
polars.DataFrame.shrink_to_fit(self,*,in_place:bool=False)->Self
polars.DataFrame.slice(self,offset:int,length:int|None=None)->Self
polars.DataFrame.sort(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,descending:bool|Sequence[bool]=False,nulls_last:bool=False)->DataFrame
polars.DataFrame.std(self,ddof:int=1)->Self
polars.DataFrame.sum(self,*,axis:int=0,null_strategy:NullStrategy='ignore')->Self | Series
polars.DataFrame.tail(self,n:int=5)->Self
polars.DataFrame.take_every(self,n:int)->DataFrame
polars.DataFrame.to_arrow(self)->pa.Table
polars.DataFrame.to_dict(self,as_series:bool=True)->dict[str, Series] | dict[str, list[Any]]
polars.DataFrame.to_dicts(self)->list[dict[str, Any]]
polars.DataFrame.to_dummies(self,columns:str|Sequence[str]|None=None,*,separator:str='_',drop_first:bool=False)->Self
polars.DataFrame.to_init_repr(self,n:int=1000)->str
polars.DataFrame.to_numpy(self,structured:bool=False,*,order:IndexOrder='fortran')->np.ndarray[Any, Any]
polars.DataFrame.to_pandas(self,*args:Any,use_pyarrow_extension_array:bool=False,**kwargs:Any)->pd.DataFrame
polars.DataFrame.to_series(self,index:int=0)->Series
polars.DataFrame.to_struct(self,name:str)->Series
polars.DataFrame.top_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],descending:bool|Sequence[bool]=False,nulls_last:bool=False,maintain_order:bool=False)->DataFrame
polars.DataFrame.transpose(self,*,include_header:bool=False,header_name:str='column',column_names:str|Iterable[str]|None=None)->Self
polars.DataFrame.unique(self,subset:str|Sequence[str]|None=None,*,keep:UniqueKeepStrategy='any',maintain_order:bool=False)->DataFrame
polars.DataFrame.unnest(self,columns:str|Sequence[str],*more_columns:str)->Self
polars.DataFrame.unstack(self,step:int,how:UnstackDirection='vertical',columns:str|Sequence[str]|None=None,fill_values:list[Any]|None=None)->DataFrame
polars.DataFrame.update(self,other:DataFrame,on:str|Sequence[str]|None=None,how:Literal['left','inner']='left')->DataFrame
polars.DataFrame.upsample(self,time_column:str,*,every:str|timedelta,offset:str|timedelta|None=None,by:str|Sequence[str]|None=None,maintain_order:bool=False)->Self
polars.DataFrame.var(self,ddof:int=1)->Self
polars.DataFrame.vstack(self,other:DataFrame,*,in_place:bool=False)->Self
polars.DataFrame.width(self)->int
polars.DataFrame.with_columns(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->DataFrame
polars.DataFrame.with_row_count(self,name:str='row_nr',offset:int=0)->Self
polars.DataFrame.write_avro(self,file:BinaryIO|BytesIO|str|Path,compression:AvroCompression='uncompressed')->None
polars.DataFrame.write_csv(self,file:BytesIO|TextIOWrapper|str|Path|None=None,*,has_header:bool=True,separator:str=',',quote:str='"',batch_size:int=1024,datetime_format:str|None=None,date_format:str|None=None,time_format:str|None=None,float_precision:int|None=None,null_value:str|None=None)->str | None
polars.DataFrame.write_database(self,table_name:str,connection:str,*,if_exists:DbWriteMode='fail',engine:DbWriteEngine='sqlalchemy')->None
polars.DataFrame.write_delta(self,target:str|Path|deltalake.DeltaTable,*,mode:Literal['error','append','overwrite','ignore']='error',overwrite_schema:bool=False,storage_options:dict[str,str]|None=None,delta_write_options:dict[str,Any]|None=None)->None
polars.DataFrame.write_excel(self,workbook:Workbook|BytesIO|Path|str|None=None,worksheet:str|None=None,*,position:tuple[int,int]|str='A1',table_style:str|dict[str,Any]|None=None,table_name:str|None=None,column_formats:dict[str|tuple[str,...],str|dict[str,str]]|None=None,dtype_formats:dict[OneOrMoreDataTypes,str]|None=None,conditional_formats:ConditionalFormatDict|None=None,column_totals:ColumnTotalsDefinition|None=None,column_widths:dict[str|tuple[str,...],int]|int|None=None,row_totals:RowTotalsDefinition|None=None,row_heights:dict[int|tuple[int,...],int]|int|None=None,sparklines:dict[str,Sequence[str]|dict[str,Any]]|None=None,formulas:dict[str,str|dict[str,str]]|None=None,float_precision:int=3,has_header:bool=True,autofilter:bool=True,autofit:bool=False,hidden_columns:Sequence[str]|None=None,hide_gridlines:bool=False,sheet_zoom:int|None=None,freeze_panes:str|tuple[int,int]|tuple[str,int,int]|tuple[int,int,int,int]|None=None)->Workbook
polars.DataFrame.write_ipc(self,file:BinaryIO|BytesIO|str|Path|None,compression:IpcCompression='uncompressed')->BytesIO | None
polars.DataFrame.write_json(self,file:IOBase|str|Path|None=None,*,pretty:bool=False,row_oriented:bool=False)->str | None
polars.DataFrame.write_ndjson(self,file:IOBase|str|Path|None=None)->str | None
polars.DataFrame.write_parquet(self,file:str|Path|BytesIO,*,compression:ParquetCompression='zstd',compression_level:int|None=None,statistics:bool=False,row_group_size:int|None=None,use_pyarrow:bool=False,pyarrow_options:dict[str,object]|None=None)->None
polars.dataframe.frame.DataFrame(self,data:FrameInitTypes|None=None,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,nan_to_null:bool=False)
polars.dataframe.frame.DataFrame.__add__(self,other:DataFrame|Series|int|float|bool|str)->DataFrame
polars.dataframe.frame.DataFrame.__array__(self,dtype:Any=None)->np.ndarray[Any, Any]
polars.dataframe.frame.DataFrame.__bool__(self)->NoReturn
polars.dataframe.frame.DataFrame.__contains__(self,key:str)->bool
polars.dataframe.frame.DataFrame.__copy__(self)->Self
polars.dataframe.frame.DataFrame.__dataframe__(self,nan_as_null:bool=False,allow_copy:bool=True)->_PyArrowDataFrame
polars.dataframe.frame.DataFrame.__deepcopy__(self,memo:None=None)->Self
polars.dataframe.frame.DataFrame.__eq__(self,other:Any)->DataFrame
polars.dataframe.frame.DataFrame.__floordiv__(self,other:DataFrame|Series|int|float)->DataFrame
polars.dataframe.frame.DataFrame.__ge__(self,other:Any)->DataFrame
polars.dataframe.frame.DataFrame.__getitem__(self,item:str|int|np.ndarray[Any,Any]|MultiColSelector|tuple[int,MultiColSelector]|tuple[MultiRowSelector,MultiColSelector]|tuple[MultiRowSelector,int|str]|tuple[int,int|str])->DataFrame | Series
polars.dataframe.frame.DataFrame.__getstate__(self)->list[Series]
polars.dataframe.frame.DataFrame.__gt__(self,other:Any)->DataFrame
polars.dataframe.frame.DataFrame.__init__(self,data:FrameInitTypes|None=None,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,nan_to_null:bool=False)
polars.dataframe.frame.DataFrame.__iter__(self)->Iterator[Any]
polars.dataframe.frame.DataFrame.__le__(self,other:Any)->DataFrame
polars.dataframe.frame.DataFrame.__len__(self)->int
polars.dataframe.frame.DataFrame.__lt__(self,other:Any)->DataFrame
polars.dataframe.frame.DataFrame.__mod__(self,other:DataFrame|Series|int|float)->Self
polars.dataframe.frame.DataFrame.__mul__(self,other:DataFrame|Series|int|float)->Self
polars.dataframe.frame.DataFrame.__ne__(self,other:Any)->DataFrame
polars.dataframe.frame.DataFrame.__radd__(self,other:DataFrame|Series|int|float|bool|str)->DataFrame
polars.dataframe.frame.DataFrame.__repr__(self)->str
polars.dataframe.frame.DataFrame.__rmul__(self,other:DataFrame|Series|int|float)->Self
polars.dataframe.frame.DataFrame.__setitem__(self,key:str|Sequence[int]|Sequence[str]|tuple[Any,str|int],value:Any)->None
polars.dataframe.frame.DataFrame.__setstate__(self,state)->None
polars.dataframe.frame.DataFrame.__str__(self)->str
polars.dataframe.frame.DataFrame.__sub__(self,other:DataFrame|Series|int|float)->Self
polars.dataframe.frame.DataFrame.__truediv__(self,other:DataFrame|Series|int|float)->DataFrame
polars.dataframe.frame.DataFrame._cast_all_from_to(self,df:DataFrame,from_:frozenset[PolarsDataType],to:PolarsDataType)->DataFrame
polars.dataframe.frame.DataFrame._comp(self,other:Any,op:ComparisonOperator)->DataFrame
polars.dataframe.frame.DataFrame._compare_to_non_df(self,other:Any,op:ComparisonOperator)->DataFrame
polars.dataframe.frame.DataFrame._compare_to_other_df(self,other:DataFrame,op:ComparisonOperator)->DataFrame
polars.dataframe.frame.DataFrame._div(self,other:Any,floordiv:bool)->DataFrame
polars.dataframe.frame.DataFrame._from_arrow(cls,data:pa.Table,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True)->Self
polars.dataframe.frame.DataFrame._from_dict(cls,data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]|Series],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None)->Self
polars.dataframe.frame.DataFrame._from_dicts(cls,data:Sequence[dict[str,Any]],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,infer_schema_length:int|None=N_INFER_DEFAULT)->Self
polars.dataframe.frame.DataFrame._from_numpy(cls,data:np.ndarray[Any,Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None)->Self
polars.dataframe.frame.DataFrame._from_pandas(cls,data:pd.DataFrame,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,rechunk:bool=True,nan_to_null:bool=True,include_index:bool=False)->Self
polars.dataframe.frame.DataFrame._from_pydf(cls,py_df:PyDataFrame)->Self
polars.dataframe.frame.DataFrame._from_records(cls,data:Sequence[Any],schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT)->Self
polars.dataframe.frame.DataFrame._ipython_key_completions_(self)->list[str]
polars.dataframe.frame.DataFrame._pos_idx(self,idx:int,dim:int)->int
polars.dataframe.frame.DataFrame._read_avro(cls,source:str|Path|BinaryIO|bytes,*,columns:Sequence[int]|Sequence[str]|None=None,n_rows:int|None=None)->Self
polars.dataframe.frame.DataFrame._read_csv(cls,source:str|Path|BinaryIO|bytes,*,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,separator:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:None|(SchemaDict|Sequence[PolarsDataType])=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=8192,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,sample_size:int=1024,eol_char:str='\n')->DataFrame
polars.dataframe.frame.DataFrame._read_ipc(cls,source:str|Path|BinaryIO|bytes,*,columns:Sequence[int]|Sequence[str]|None=None,n_rows:int|None=None,row_count_name:str|None=None,row_count_offset:int=0,rechunk:bool=True,memory_map:bool=True)->Self
polars.dataframe.frame.DataFrame._read_json(cls,source:str|Path|IOBase|bytes,*,schema:SchemaDefinition|None=None,schema_overrides:SchemaDefinition|None=None)->Self
polars.dataframe.frame.DataFrame._read_ndjson(cls,source:str|Path|IOBase|bytes,*,schema:SchemaDefinition|None=None,schema_overrides:SchemaDefinition|None=None,ignore_errors:bool=False)->Self
polars.dataframe.frame.DataFrame._read_parquet(cls,source:str|Path|BinaryIO|bytes,*,columns:Sequence[int]|Sequence[str]|None=None,n_rows:int|None=None,parallel:ParallelStrategy='auto',row_count_name:str|None=None,row_count_offset:int=0,low_memory:bool=False,use_statistics:bool=True,rechunk:bool=True)->DataFrame
polars.dataframe.frame.DataFrame._repr_html_(self,**kwargs:Any)->str
polars.dataframe.frame.DataFrame._take_with_series(self,s:Series)->DataFrame
polars.dataframe.frame.DataFrame.apply(self,function:Callable[[tuple[Any,...]],Any],return_dtype:PolarsDataType|None=None,*,inference_size:int=256)->DataFrame
polars.dataframe.frame.DataFrame.bottom_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],descending:bool|Sequence[bool]=False,nulls_last:bool=False,maintain_order:bool=False)->DataFrame
polars.dataframe.frame.DataFrame.clear(self,n:int=0)->Self
polars.dataframe.frame.DataFrame.clone(self)->Self
polars.dataframe.frame.DataFrame.columns(self)->list[str]
polars.dataframe.frame.DataFrame.columns(self,names:Sequence[str])->None
polars.dataframe.frame.DataFrame.corr(self,**kwargs:Any)->DataFrame
polars.dataframe.frame.DataFrame.describe(self,percentiles:Sequence[float]|float|None=(0.25,0.75))->Self
polars.dataframe.frame.DataFrame.drop(self,columns:str|Collection[str],*more_columns:str)->DataFrame
polars.dataframe.frame.DataFrame.drop_in_place(self,name:str)->Series
polars.dataframe.frame.DataFrame.drop_nulls(self,subset:str|Collection[str]|None=None)->DataFrame
polars.dataframe.frame.DataFrame.dtypes(self)->list[PolarsDataType]
polars.dataframe.frame.DataFrame.estimated_size(self,unit:SizeUnit='b')->int | float
polars.dataframe.frame.DataFrame.explode(self,columns:str|Sequence[str]|Expr|Sequence[Expr],*more_columns:str|Expr)->DataFrame
polars.dataframe.frame.DataFrame.extend(self,other:DataFrame)->Self
polars.dataframe.frame.DataFrame.fill_nan(self,value:Expr|int|float|None)->DataFrame
polars.dataframe.frame.DataFrame.fill_null(self,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None,*,matches_supertype:bool=True)->DataFrame
polars.dataframe.frame.DataFrame.filter(self,predicate:Expr|str|Series|list[bool]|np.ndarray[Any,Any]|bool)->DataFrame
polars.dataframe.frame.DataFrame.find_idx_by_name(self,name:str)->int
polars.dataframe.frame.DataFrame.flags(self)->dict[str, dict[str, bool]]
polars.dataframe.frame.DataFrame.fold(self,operation:Callable[[Series,Series],Series])->Series
polars.dataframe.frame.DataFrame.frame_equal(self,other:DataFrame,*,null_equal:bool=True)->bool
polars.dataframe.frame.DataFrame.get_column(self,name:str)->Series
polars.dataframe.frame.DataFrame.get_columns(self)->list[Series]
polars.dataframe.frame.DataFrame.glimpse(self,*,return_as_string:bool=False)->str | None
polars.dataframe.frame.DataFrame.groupby(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,maintain_order:bool=False)->GroupBy
polars.dataframe.frame.DataFrame.groupby_dynamic(self,index_column:IntoExpr,*,every:str|timedelta,period:str|timedelta|None=None,offset:str|timedelta|None=None,truncate:bool=True,include_boundaries:bool=False,closed:ClosedInterval='left',by:IntoExpr|Iterable[IntoExpr]|None=None,start_by:StartBy='window',check_sorted:bool=True)->DynamicGroupBy
polars.dataframe.frame.DataFrame.groupby_rolling(self,index_column:IntoExpr,*,period:str|timedelta,offset:str|timedelta|None=None,closed:ClosedInterval='right',by:IntoExpr|Iterable[IntoExpr]|None=None,check_sorted:bool=True)->RollingGroupBy
polars.dataframe.frame.DataFrame.hash_rows(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->Series
polars.dataframe.frame.DataFrame.head(self,n:int=5)->Self
polars.dataframe.frame.DataFrame.height(self)->int
polars.dataframe.frame.DataFrame.hstack(self,columns:list[Series]|DataFrame,*,in_place:bool=False)->Self
polars.dataframe.frame.DataFrame.insert_at_idx(self,index:int,series:Series)->Self
polars.dataframe.frame.DataFrame.interpolate(self)->DataFrame
polars.dataframe.frame.DataFrame.is_duplicated(self)->Series
polars.dataframe.frame.DataFrame.is_empty(self)->bool
polars.dataframe.frame.DataFrame.is_unique(self)->Series
polars.dataframe.frame.DataFrame.item(self,row:int|None=None,column:int|str|None=None)->Any
polars.dataframe.frame.DataFrame.iter_rows(self,*,named:bool=False,buffer_size:int=500)->Iterator[tuple[Any, ...]] | Iterator[dict[str, Any]]
polars.dataframe.frame.DataFrame.iter_slices(self,n_rows:int=10000)->Iterator[DataFrame]
polars.dataframe.frame.DataFrame.join(self,other:DataFrame,on:str|Expr|Sequence[str|Expr]|None=None,how:JoinStrategy='inner',*,left_on:str|Expr|Sequence[str|Expr]|None=None,right_on:str|Expr|Sequence[str|Expr]|None=None,suffix:str='_right',validate:JoinValidation='m:m')->DataFrame
polars.dataframe.frame.DataFrame.join_asof(self,other:DataFrame,*,left_on:str|None|Expr=None,right_on:str|None|Expr=None,on:str|None|Expr=None,by_left:str|Sequence[str]|None=None,by_right:str|Sequence[str]|None=None,by:str|Sequence[str]|None=None,strategy:AsofJoinStrategy='backward',suffix:str='_right',tolerance:str|int|float|None=None,allow_parallel:bool=True,force_parallel:bool=False)->DataFrame
polars.dataframe.frame.DataFrame.lazy(self)->LazyFrame
polars.dataframe.frame.DataFrame.limit(self,n:int=5)->Self
polars.dataframe.frame.DataFrame.max(self,axis:int=0)->Self | Series
polars.dataframe.frame.DataFrame.mean(self,*,axis:int=0,null_strategy:NullStrategy='ignore')->Self | Series
polars.dataframe.frame.DataFrame.median(self)->Self
polars.dataframe.frame.DataFrame.melt(self,id_vars:Sequence[str]|str|None=None,value_vars:Sequence[str]|str|None=None,variable_name:str|None=None,value_name:str|None=None)->Self
polars.dataframe.frame.DataFrame.merge_sorted(self,other:DataFrame,key:str)->DataFrame
polars.dataframe.frame.DataFrame.min(self,axis:int=0)->Self | Series
polars.dataframe.frame.DataFrame.n_chunks(self,strategy:str='first')->int | list[int]
polars.dataframe.frame.DataFrame.n_unique(self,subset:str|Expr|Sequence[str|Expr]|None=None)->int
polars.dataframe.frame.DataFrame.null_count(self)->Self
polars.dataframe.frame.DataFrame.partition_by(self,by:str|Iterable[str],*more_by:str,maintain_order:bool=True,include_key:bool=True,as_dict:bool=False)->list[Self] | dict[Any, Self]
polars.dataframe.frame.DataFrame.pipe(self,function:Callable[Concatenate[DataFrame,P],T],*args:P.args,**kwargs:P.kwargs)->T
polars.dataframe.frame.DataFrame.pivot(self,values:Sequence[str]|str,index:Sequence[str]|str,columns:Sequence[str]|str,aggregate_function:PivotAgg|Expr|None|NoDefault=no_default,*,maintain_order:bool=True,sort_columns:bool=False,separator:str='_')->Self
polars.dataframe.frame.DataFrame.product(self)->DataFrame
polars.dataframe.frame.DataFrame.quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest')->Self
polars.dataframe.frame.DataFrame.rechunk(self)->Self
polars.dataframe.frame.DataFrame.rename(self,mapping:dict[str,str])->DataFrame
polars.dataframe.frame.DataFrame.replace(self,column:str,new_column:Series)->Self
polars.dataframe.frame.DataFrame.replace_at_idx(self,index:int,series:Series)->Self
polars.dataframe.frame.DataFrame.reverse(self)->DataFrame
polars.dataframe.frame.DataFrame.row(self,index:int|None=None,*,by_predicate:Expr|None=None,named:bool=False)->tuple[Any, ...] | dict[str, Any]
polars.dataframe.frame.DataFrame.rows(self,*,named:bool=False)->list[tuple[Any, ...]] | list[dict[str, Any]]
polars.dataframe.frame.DataFrame.rows_by_key(self,key:str|Sequence[str]|SelectorType,*,named:bool=False,include_key:bool=False,unique:bool=False)->dict[Any, Iterable[Any]]
polars.dataframe.frame.DataFrame.sample(self,n:int|None=None,*,fraction:float|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->Self
polars.dataframe.frame.DataFrame.schema(self)->SchemaDict
polars.dataframe.frame.DataFrame.select(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->DataFrame
polars.dataframe.frame.DataFrame.set_sorted(self,column:str|Iterable[str],*more_columns:str,descending:bool=False)->DataFrame
polars.dataframe.frame.DataFrame.shape(self)->tuple[int, int]
polars.dataframe.frame.DataFrame.shift(self,periods:int)->Self
polars.dataframe.frame.DataFrame.shift_and_fill(self,fill_value:int|str|float,*,periods:int=1)->DataFrame
polars.dataframe.frame.DataFrame.shrink_to_fit(self,*,in_place:bool=False)->Self
polars.dataframe.frame.DataFrame.slice(self,offset:int,length:int|None=None)->Self
polars.dataframe.frame.DataFrame.sort(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,descending:bool|Sequence[bool]=False,nulls_last:bool=False)->DataFrame
polars.dataframe.frame.DataFrame.std(self,ddof:int=1)->Self
polars.dataframe.frame.DataFrame.sum(self,*,axis:int=0,null_strategy:NullStrategy='ignore')->Self | Series
polars.dataframe.frame.DataFrame.tail(self,n:int=5)->Self
polars.dataframe.frame.DataFrame.take_every(self,n:int)->DataFrame
polars.dataframe.frame.DataFrame.to_arrow(self)->pa.Table
polars.dataframe.frame.DataFrame.to_dict(self,as_series:bool=True)->dict[str, Series] | dict[str, list[Any]]
polars.dataframe.frame.DataFrame.to_dicts(self)->list[dict[str, Any]]
polars.dataframe.frame.DataFrame.to_dummies(self,columns:str|Sequence[str]|None=None,*,separator:str='_',drop_first:bool=False)->Self
polars.dataframe.frame.DataFrame.to_init_repr(self,n:int=1000)->str
polars.dataframe.frame.DataFrame.to_numpy(self,structured:bool=False,*,order:IndexOrder='fortran')->np.ndarray[Any, Any]
polars.dataframe.frame.DataFrame.to_pandas(self,*args:Any,use_pyarrow_extension_array:bool=False,**kwargs:Any)->pd.DataFrame
polars.dataframe.frame.DataFrame.to_series(self,index:int=0)->Series
polars.dataframe.frame.DataFrame.to_struct(self,name:str)->Series
polars.dataframe.frame.DataFrame.top_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],descending:bool|Sequence[bool]=False,nulls_last:bool=False,maintain_order:bool=False)->DataFrame
polars.dataframe.frame.DataFrame.transpose(self,*,include_header:bool=False,header_name:str='column',column_names:str|Iterable[str]|None=None)->Self
polars.dataframe.frame.DataFrame.unique(self,subset:str|Sequence[str]|None=None,*,keep:UniqueKeepStrategy='any',maintain_order:bool=False)->DataFrame
polars.dataframe.frame.DataFrame.unnest(self,columns:str|Sequence[str],*more_columns:str)->Self
polars.dataframe.frame.DataFrame.unstack(self,step:int,how:UnstackDirection='vertical',columns:str|Sequence[str]|None=None,fill_values:list[Any]|None=None)->DataFrame
polars.dataframe.frame.DataFrame.update(self,other:DataFrame,on:str|Sequence[str]|None=None,how:Literal['left','inner']='left')->DataFrame
polars.dataframe.frame.DataFrame.upsample(self,time_column:str,*,every:str|timedelta,offset:str|timedelta|None=None,by:str|Sequence[str]|None=None,maintain_order:bool=False)->Self
polars.dataframe.frame.DataFrame.var(self,ddof:int=1)->Self
polars.dataframe.frame.DataFrame.vstack(self,other:DataFrame,*,in_place:bool=False)->Self
polars.dataframe.frame.DataFrame.width(self)->int
polars.dataframe.frame.DataFrame.with_columns(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->DataFrame
polars.dataframe.frame.DataFrame.with_row_count(self,name:str='row_nr',offset:int=0)->Self
polars.dataframe.frame.DataFrame.write_avro(self,file:BinaryIO|BytesIO|str|Path,compression:AvroCompression='uncompressed')->None
polars.dataframe.frame.DataFrame.write_csv(self,file:BytesIO|TextIOWrapper|str|Path|None=None,*,has_header:bool=True,separator:str=',',quote:str='"',batch_size:int=1024,datetime_format:str|None=None,date_format:str|None=None,time_format:str|None=None,float_precision:int|None=None,null_value:str|None=None)->str | None
polars.dataframe.frame.DataFrame.write_database(self,table_name:str,connection:str,*,if_exists:DbWriteMode='fail',engine:DbWriteEngine='sqlalchemy')->None
polars.dataframe.frame.DataFrame.write_delta(self,target:str|Path|deltalake.DeltaTable,*,mode:Literal['error','append','overwrite','ignore']='error',overwrite_schema:bool=False,storage_options:dict[str,str]|None=None,delta_write_options:dict[str,Any]|None=None)->None
polars.dataframe.frame.DataFrame.write_excel(self,workbook:Workbook|BytesIO|Path|str|None=None,worksheet:str|None=None,*,position:tuple[int,int]|str='A1',table_style:str|dict[str,Any]|None=None,table_name:str|None=None,column_formats:dict[str|tuple[str,...],str|dict[str,str]]|None=None,dtype_formats:dict[OneOrMoreDataTypes,str]|None=None,conditional_formats:ConditionalFormatDict|None=None,column_totals:ColumnTotalsDefinition|None=None,column_widths:dict[str|tuple[str,...],int]|int|None=None,row_totals:RowTotalsDefinition|None=None,row_heights:dict[int|tuple[int,...],int]|int|None=None,sparklines:dict[str,Sequence[str]|dict[str,Any]]|None=None,formulas:dict[str,str|dict[str,str]]|None=None,float_precision:int=3,has_header:bool=True,autofilter:bool=True,autofit:bool=False,hidden_columns:Sequence[str]|None=None,hide_gridlines:bool=False,sheet_zoom:int|None=None,freeze_panes:str|tuple[int,int]|tuple[str,int,int]|tuple[int,int,int,int]|None=None)->Workbook
polars.dataframe.frame.DataFrame.write_ipc(self,file:BinaryIO|BytesIO|str|Path|None,compression:IpcCompression='uncompressed')->BytesIO | None
polars.dataframe.frame.DataFrame.write_json(self,file:IOBase|str|Path|None=None,*,pretty:bool=False,row_oriented:bool=False)->str | None
polars.dataframe.frame.DataFrame.write_ndjson(self,file:IOBase|str|Path|None=None)->str | None
polars.dataframe.frame.DataFrame.write_parquet(self,file:str|Path|BytesIO,*,compression:ParquetCompression='zstd',compression_level:int|None=None,statistics:bool=False,row_group_size:int|None=None,use_pyarrow:bool=False,pyarrow_options:dict[str,object]|None=None)->None
polars.dataframe.frame._prepare_other_arg(other:Any,length:int|None=None)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/dataframe/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/dataframe/_html.py----------------------------------------
A:polars.dataframe._html.self.row_idx->range(0, df.height)
A:polars.dataframe._html.self.col_idx->range(0, df.width)
A:polars.dataframe._html.dtypes->self.df._df.dtype_strings()
A:polars.dataframe._html.str_lengths->int(os.environ.get('POLARS_FMT_STR_LEN', '15'))
polars.dataframe._html.HTMLFormatter(self,df:DataFrame,max_cols:int=75,max_rows:int=40,from_series:bool=False)
polars.dataframe._html.HTMLFormatter.__init__(self,df:DataFrame,max_cols:int=75,max_rows:int=40,from_series:bool=False)
polars.dataframe._html.HTMLFormatter.render(self)->list[str]
polars.dataframe._html.HTMLFormatter.write(self,inner:str)->None
polars.dataframe._html.HTMLFormatter.write_body(self)->None
polars.dataframe._html.HTMLFormatter.write_header(self)->None
polars.dataframe._html.NotebookFormatter(HTMLFormatter)
polars.dataframe._html.NotebookFormatter.render(self)->list[str]
polars.dataframe._html.NotebookFormatter.write_style(self)->None
polars.dataframe._html.Tag(self,elements:list[str],tag:str,attributes:dict[str,str]|None=None)
polars.dataframe._html.Tag.__enter__(self)->None
polars.dataframe._html.Tag.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.dataframe._html.Tag.__init__(self,elements:list[str],tag:str,attributes:dict[str,str]|None=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/dataframe/groupby.py----------------------------------------
A:polars.dataframe.groupby.groups_df->self.df.lazy().with_row_count(name=temp_col).groupby_dynamic(index_column=self.time_column, every=self.every, period=self.period, offset=self.offset, truncate=self.truncate, include_boundaries=self.include_boundaries, closed=self.closed, by=self.by, start_by=self.start_by, check_sorted=self.check_sorted).agg(F.col(temp_col)).collect(no_optimization=True)
A:polars.dataframe.groupby.group_names->self.df.lazy().with_row_count(name=temp_col).groupby_dynamic(index_column=self.time_column, every=self.every, period=self.period, offset=self.offset, truncate=self.truncate, include_boundaries=self.include_boundaries, closed=self.closed, by=self.by, start_by=self.start_by, check_sorted=self.check_sorted).agg(F.col(temp_col)).collect(no_optimization=True).select(F.all().exclude(temp_col))
A:polars.dataframe.groupby.self._group_names->self.df.lazy().with_row_count(name=temp_col).groupby_dynamic(index_column=self.time_column, every=self.every, period=self.period, offset=self.offset, truncate=self.truncate, include_boundaries=self.include_boundaries, closed=self.closed, by=self.by, start_by=self.start_by, check_sorted=self.check_sorted).agg(F.col(temp_col)).collect(no_optimization=True).select(F.all().exclude(temp_col)).iter_rows()
A:polars.dataframe.groupby.self._group_indices->self.df.lazy().with_row_count(name=temp_col).groupby_dynamic(index_column=self.time_column, every=self.every, period=self.period, offset=self.offset, truncate=self.truncate, include_boundaries=self.include_boundaries, closed=self.closed, by=self.by, start_by=self.start_by, check_sorted=self.check_sorted).agg(F.col(temp_col)).collect(no_optimization=True).select(temp_col).to_series()
A:polars.dataframe.groupby.group_name->next(self._group_names)
A:polars.dataframe.groupby.by->list(self.by)
A:polars.dataframe.groupby.period->_timedelta_to_pl_duration(period)
A:polars.dataframe.groupby.offset->_timedelta_to_pl_duration(offset)
A:polars.dataframe.groupby.every->_timedelta_to_pl_duration(every)
polars.dataframe.groupby.DynamicGroupBy(self,df:DataFrame,index_column:IntoExpr,every:str|timedelta,period:str|timedelta|None,offset:str|timedelta|None,truncate:bool,include_boundaries:bool,closed:ClosedInterval,by:IntoExpr|Iterable[IntoExpr]|None,start_by:StartBy,check_sorted:bool)
polars.dataframe.groupby.DynamicGroupBy.__init__(self,df:DataFrame,index_column:IntoExpr,every:str|timedelta,period:str|timedelta|None,offset:str|timedelta|None,truncate:bool,include_boundaries:bool,closed:ClosedInterval,by:IntoExpr|Iterable[IntoExpr]|None,start_by:StartBy,check_sorted:bool)
polars.dataframe.groupby.DynamicGroupBy.__iter__(self)->Self
polars.dataframe.groupby.DynamicGroupBy.__next__(self)->tuple[object, DataFrame] | tuple[tuple[object, ...], DataFrame]
polars.dataframe.groupby.DynamicGroupBy.agg(self,*aggs:IntoExpr|Iterable[IntoExpr],**named_aggs:IntoExpr)->DataFrame
polars.dataframe.groupby.DynamicGroupBy.apply(self,function:Callable[[DataFrame],DataFrame],schema:SchemaDict|None)->DataFrame
polars.dataframe.groupby.GroupBy(self,df:DataFrame,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,maintain_order:bool)
polars.dataframe.groupby.GroupBy.__init__(self,df:DataFrame,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,maintain_order:bool)
polars.dataframe.groupby.GroupBy.__iter__(self)->Self
polars.dataframe.groupby.GroupBy.__next__(self)->tuple[object, DataFrame] | tuple[tuple[object, ...], DataFrame]
polars.dataframe.groupby.GroupBy.agg(self,*aggs:IntoExpr|Iterable[IntoExpr],**named_aggs:IntoExpr)->DataFrame
polars.dataframe.groupby.GroupBy.all(self)->DataFrame
polars.dataframe.groupby.GroupBy.apply(self,function:Callable[[DataFrame],DataFrame])->DataFrame
polars.dataframe.groupby.GroupBy.count(self)->DataFrame
polars.dataframe.groupby.GroupBy.first(self)->DataFrame
polars.dataframe.groupby.GroupBy.head(self,n:int=5)->DataFrame
polars.dataframe.groupby.GroupBy.last(self)->DataFrame
polars.dataframe.groupby.GroupBy.max(self)->DataFrame
polars.dataframe.groupby.GroupBy.mean(self)->DataFrame
polars.dataframe.groupby.GroupBy.median(self)->DataFrame
polars.dataframe.groupby.GroupBy.min(self)->DataFrame
polars.dataframe.groupby.GroupBy.n_unique(self)->DataFrame
polars.dataframe.groupby.GroupBy.quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest')->DataFrame
polars.dataframe.groupby.GroupBy.sum(self)->DataFrame
polars.dataframe.groupby.GroupBy.tail(self,n:int=5)->DataFrame
polars.dataframe.groupby.RollingGroupBy(self,df:DataFrame,index_column:IntoExpr,period:str|timedelta,offset:str|timedelta|None,closed:ClosedInterval,by:IntoExpr|Iterable[IntoExpr]|None,check_sorted:bool)
polars.dataframe.groupby.RollingGroupBy.__init__(self,df:DataFrame,index_column:IntoExpr,period:str|timedelta,offset:str|timedelta|None,closed:ClosedInterval,by:IntoExpr|Iterable[IntoExpr]|None,check_sorted:bool)
polars.dataframe.groupby.RollingGroupBy.__iter__(self)->Self
polars.dataframe.groupby.RollingGroupBy.__next__(self)->tuple[object, DataFrame] | tuple[tuple[object, ...], DataFrame]
polars.dataframe.groupby.RollingGroupBy.agg(self,*aggs:IntoExpr|Iterable[IntoExpr],**named_aggs:IntoExpr)->DataFrame
polars.dataframe.groupby.RollingGroupBy.apply(self,function:Callable[[DataFrame],DataFrame],schema:SchemaDict|None)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/_utils.py----------------------------------------
A:polars.io._utils.file->normalise_filepath(file, check_not_dir)
polars.io._utils._check_empty(b:BytesIO,context:str,read_position:int|None=None)->BytesIO
polars.io._utils._is_glob_pattern(file:str)->bool
polars.io._utils._is_local_file(file:str)->bool
polars.io._utils._prepare_file_arg(file:str|list[str]|TextIO|Path|BinaryIO|bytes,encoding:str|None=None,use_pyarrow:bool|None=None,**kwargs:Any)->ContextManager[str | BinaryIO | list[str] | list[BinaryIO]]
polars.io._utils._process_http_file(path:str,encoding:str|None=None)->BytesIO


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/avro.py----------------------------------------
polars.io.avro.read_avro(source:str|Path|BytesIO|BinaryIO,*,columns:list[int]|list[str]|None=None,n_rows:int|None=None)->DataFrame
polars.read_avro(source:str|Path|BytesIO|BinaryIO,*,columns:list[int]|list[str]|None=None,n_rows:int|None=None)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/delta.py----------------------------------------
A:polars.io.delta.resolved_uri->str(Path(table_uri).expanduser().resolve(strict) if parsed_result.scheme == '' else table_uri)
A:polars.io.delta.dl_tbl->polars.dependencies.deltalake.DeltaTable(table_path, version=version, storage_options=storage_options, **delta_table_options)
A:polars.io.delta.pa_ds->polars.dependencies.deltalake.DeltaTable(table_path, version=version, storage_options=storage_options, **delta_table_options).to_pyarrow_dataset(**pyarrow_options)
A:polars.io.delta.parsed_result->urlparse(table_uri)
polars.io.delta._check_if_delta_available()->None
polars.io.delta._get_delta_lake_table(table_path:str,version:int|None=None,storage_options:dict[str,Any]|None=None,delta_table_options:dict[str,Any]|None=None)->deltalake.DeltaTable
polars.io.delta._resolve_delta_lake_uri(table_uri:str,strict:bool=True)->str
polars.io.delta.read_delta(source:str,*,version:int|None=None,columns:list[str]|None=None,storage_options:dict[str,Any]|None=None,delta_table_options:dict[str,Any]|None=None,pyarrow_options:dict[str,Any]|None=None)->DataFrame
polars.io.delta.scan_delta(source:str,*,version:int|None=None,storage_options:dict[str,Any]|None=None,delta_table_options:dict[str,Any]|None=None,pyarrow_options:dict[str,Any]|None=None)->LazyFrame
polars.read_delta(source:str,*,version:int|None=None,columns:list[str]|None=None,storage_options:dict[str,Any]|None=None,delta_table_options:dict[str,Any]|None=None,pyarrow_options:dict[str,Any]|None=None)->DataFrame
polars.scan_delta(source:str,*,version:int|None=None,storage_options:dict[str,Any]|None=None,delta_table_options:dict[str,Any]|None=None,pyarrow_options:dict[str,Any]|None=None)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/ndjson.py----------------------------------------
A:polars.io.ndjson.source->normalise_filepath(source)
polars.io.ndjson.read_ndjson(source:str|Path|IOBase|bytes,*,schema:SchemaDefinition|None=None,schema_overrides:SchemaDefinition|None=None,ignore_errors:bool=False)->DataFrame
polars.io.ndjson.scan_ndjson(source:str|Path,*,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int|None=1024,n_rows:int|None=None,low_memory:bool=False,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0)->LazyFrame
polars.read_ndjson(source:str|Path|IOBase|bytes,*,schema:SchemaDefinition|None=None,schema_overrides:SchemaDefinition|None=None,ignore_errors:bool=False)->DataFrame
polars.scan_ndjson(source:str|Path,*,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int|None=1024,n_rows:int|None=None,low_memory:bool=False,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/json.py----------------------------------------
polars.io.json.read_json(source:str|Path|IOBase|bytes,*,schema:SchemaDefinition|None=None,schema_overrides:SchemaDefinition|None=None)->DataFrame
polars.read_json(source:str|Path|IOBase|bytes,*,schema:SchemaDefinition|None=None,schema_overrides:SchemaDefinition|None=None)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/database.py----------------------------------------
A:polars.io.database.tbl->cursor.fetch_arrow_table()
A:polars.io.database.driver_name->re.sub(f'^{driver_name}:/{{,3}}', '', connection_uri).split(':', 1)[0].lower()
A:polars.io.database.module_suffix->module_suffix_map.get(driver_name, driver_name)
A:polars.io.database.connection_uri->re.sub(f'^{driver_name}:/{{,3}}', '', connection_uri)
polars.io.database._open_adbc_connection(connection_uri:str)->Any
polars.io.database._read_sql_adbc(query:str,connection_uri:str)->DataFrame
polars.io.database._read_sql_connectorx(query:str|list[str],connection_uri:str,partition_on:str|None=None,partition_range:tuple[int,int]|None=None,partition_num:int|None=None,protocol:str|None=None)->DataFrame
polars.io.database.read_database(query:list[str]|str,connection:str,*,partition_on:str|None=None,partition_range:tuple[int,int]|None=None,partition_num:int|None=None,protocol:str|None=None,engine:DbReadEngine|None=None)->DataFrame
polars.read_database(query:list[str]|str,connection:str,*,partition_on:str|None=None,partition_range:tuple[int,int]|None=None,partition_num:int|None=None,protocol:str|None=None,engine:DbReadEngine|None=None)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/pyarrow_dataset/anonymous_scan.py----------------------------------------
A:polars.io.pyarrow_dataset.anonymous_scan.func->partial(_scan_pyarrow_dataset_impl, ds)
A:polars.io.pyarrow_dataset.anonymous_scan._filter->eval(predicate)
polars.io.pyarrow_dataset.anonymous_scan._scan_pyarrow_dataset(ds:pa.dataset.Dataset,allow_pyarrow_filter:bool=True)->LazyFrame
polars.io.pyarrow_dataset.anonymous_scan._scan_pyarrow_dataset_impl(ds:pa.dataset.Dataset,with_columns:list[str]|None,predicate:str|None,n_rows:int|None)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/pyarrow_dataset/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/pyarrow_dataset/functions.py----------------------------------------
polars.io.pyarrow_dataset.functions.scan_ds(ds:pa.dataset.Dataset,*,allow_pyarrow_filter:bool=True)->LazyFrame
polars.io.pyarrow_dataset.functions.scan_pyarrow_dataset(source:pa.dataset.Dataset,*,allow_pyarrow_filter:bool=True)->LazyFrame
polars.scan_ds(ds:pa.dataset.Dataset,*,allow_pyarrow_filter:bool=True)->LazyFrame
polars.scan_pyarrow_dataset(source:pa.dataset.Dataset,*,allow_pyarrow_filter:bool=True)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/excel/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/excel/_write_utils.py----------------------------------------
A:polars.io.excel._write_utils.key->self._key(fmt)
A:polars.io.excel._write_utils.wbfmt->self.wb.add_format(fmt)
A:polars.io.excel._write_utils.idxs->sorted((df.find_idx_by_name(col) for col in cols))
A:polars.io.excel._write_utils.cols->next(iter(cols))
A:polars.io.excel._write_utils.col_range->_xl_column_range(df, table_start, col, has_header)
A:polars.io.excel._write_utils.col->next(iter(cols))
A:polars.io.excel._write_utils.df_original_columns->set(df.columns)
A:polars.io.excel._write_utils.df_select_cols->_xl_inject_dummy_table_columns(df, row_total_funcs, dtype=Float64).columns.copy()
A:polars.io.excel._write_utils.cast_lookup[col]->definition.get('return_dtype')
A:polars.io.excel._write_utils.insert_before->definition.get('insert_before')
A:polars.io.excel._write_utils.insert_after->definition.get('insert_after')
A:polars.io.excel._write_utils.df->_xl_inject_dummy_table_columns(df, row_total_funcs, dtype=Float64)
A:polars.io.excel._write_utils.(spk_row, spk_col, _, _)->_xl_column_range(df, table_start, col, has_header, as_range=False)
A:polars.io.excel._write_utils.data_start->xl_rowcol_to_cell(spk_row, data_start_col)
A:polars.io.excel._write_utils.data_end->xl_rowcol_to_cell(spk_row, data_end_col)
A:polars.io.excel._write_utils.column_totals->_unpack_multi_column_dict(column_totals)
A:polars.io.excel._write_utils.column_formats->(column_formats or {}).copy()
A:polars.io.excel._write_utils.n_ucase->sum(((c[0] if c else '').isupper() for c in df.columns))
A:polars.io.excel._write_utils.dtype_formats->(dtype_formats or {}).copy()
A:polars.io.excel._write_utils.fmt_default->format_cache.get({'valign': 'vcenter'})
A:polars.io.excel._write_utils.base_type->df.schema.get(col).base_type()
A:polars.io.excel._write_utils.fmt->(dtype_formats or {}).copy().get(tp, dtype_formats[base_type])
A:polars.io.excel._write_utils.column_formats[col]->format_cache.get(fmt)
A:polars.io.excel._write_utils.tp->_xl_inject_dummy_table_columns(df, row_total_funcs, dtype=Float64).schema.get(col)
A:polars.io.excel._write_utils.table_options->table_options.pop('style', None).copy()
A:polars.io.excel._write_utils.table_style->table_options.pop('style', None).copy().pop('style', None)
A:polars.io.excel._write_utils.ws->Workbook((file if file.suffix else file.with_suffix('.xlsx')).expanduser().resolve(strict=False), workbook_options).add_worksheet(name=worksheet)
A:polars.io.excel._write_utils.file->Path('dataframe.xlsx' if workbook is None else workbook)
A:polars.io.excel._write_utils.wb->Workbook((file if file.suffix else file.with_suffix('.xlsx')).expanduser().resolve(strict=False), workbook_options)
A:polars.io.excel._write_utils.colrefs->','.join((f'[@[{c}]]' for c in cols))
A:polars.io.excel._write_utils.n->len(polars_tables)
polars.io.excel._write_utils._XLFormatCache(self,wb:Workbook)
polars.io.excel._write_utils._XLFormatCache.__init__(self,wb:Workbook)
polars.io.excel._write_utils._XLFormatCache._key(fmt:dict[str,Any])->str
polars.io.excel._write_utils._XLFormatCache.get(self,fmt:dict[str,Any])->Format
polars.io.excel._write_utils._adjacent_cols(df:DataFrame,cols:Iterable[str],min_max:dict[str,Any])->bool
polars.io.excel._write_utils._cluster(iterable:Iterable[Any],n:int=2)->Iterable[Any]
polars.io.excel._write_utils._unpack_multi_column_dict(d:dict[str|Sequence[str],Any]|Any)->dict[str, Any] | Any
polars.io.excel._write_utils._xl_apply_conditional_formats(df:DataFrame,ws:Worksheet,conditional_formats:ConditionalFormatDict,table_start:tuple[int,int],has_header:bool,format_cache:_XLFormatCache)->None
polars.io.excel._write_utils._xl_column_multi_range(df:DataFrame,table_start:tuple[int,int],cols:Iterable[str],has_header:bool)->str
polars.io.excel._write_utils._xl_column_range(df:DataFrame,table_start:tuple[int,int],col:str|tuple[int,int],has_header:bool,as_range:bool=True)->tuple[int, int, int, int] | str
polars.io.excel._write_utils._xl_inject_dummy_table_columns(df:DataFrame,options:dict[str,Any],dtype:PolarsDataType|None=None)->DataFrame
polars.io.excel._write_utils._xl_inject_sparklines(ws:Worksheet,df:DataFrame,table_start:tuple[int,int],col:str,has_header:bool,params:Sequence[str]|dict[str,Any])->None
polars.io.excel._write_utils._xl_rowcols_to_range(*row_col_pairs:int)->list[str]
polars.io.excel._write_utils._xl_setup_table_columns(df:DataFrame,format_cache:_XLFormatCache,column_totals:ColumnTotalsDefinition|None=None,column_formats:dict[str|tuple[str,...],str|dict[str,str]]|None=None,dtype_formats:dict[OneOrMoreDataTypes,str]|None=None,sparklines:dict[str,Sequence[str]|dict[str,Any]]|None=None,formulas:dict[str,str|dict[str,str]]|None=None,row_totals:RowTotalsDefinition|None=None,float_precision:int=3)->tuple[list[dict[str, Any]], dict[str | tuple[str, ...], str], DataFrame]
polars.io.excel._write_utils._xl_setup_table_options(table_style:dict[str,Any]|str|None)->tuple[dict[str, Any] | str | None, dict[str, Any]]
polars.io.excel._write_utils._xl_setup_workbook(workbook:Workbook|BytesIO|Path|str|None,worksheet:str|None=None)->tuple[Workbook, Worksheet, bool]
polars.io.excel._write_utils._xl_table_formula(df:DataFrame,cols:Iterable[str],func:str)->str
polars.io.excel._write_utils._xl_unique_table_name(wb:Workbook)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/excel/functions.py----------------------------------------
A:polars.io.excel.functions.source->normalise_filepath(source)
A:polars.io.excel.functions.parser->xlsx2csv.Xlsx2csv(source, **xlsx2csv_options)
A:polars.io.excel.functions.csv_buffer->StringIO()
polars.io.excel.functions._read_excel_sheet(parser:Any,sheet_id:int|None,sheet_name:str|None,read_csv_options:dict[str,Any])->DataFrame
polars.io.excel.functions.read_excel(source:str|BytesIO|Path|BinaryIO|bytes,*,sheet_id:int|None=None,sheet_name:str|None=None,xlsx2csv_options:dict[str,Any]|None=None,read_csv_options:dict[str,Any]|None=None)->DataFrame | dict[str, DataFrame]
polars.read_excel(source:str|BytesIO|Path|BinaryIO|bytes,*,sheet_id:int|None=None,sheet_name:str|None=None,xlsx2csv_options:dict[str,Any]|None=None,read_csv_options:dict[str,Any]|None=None)->DataFrame | dict[str, DataFrame]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/ipc/anonymous_scan.py----------------------------------------
A:polars.io.ipc.anonymous_scan.func->partial(_scan_ipc_impl, source, storage_options=storage_options)
A:polars.io.ipc.anonymous_scan.schema->polars.io.ipc.read_ipc_schema(data)
polars.io.ipc.anonymous_scan._scan_ipc_fsspec(source:str,storage_options:dict[str,object]|None=None)->LazyFrame
polars.io.ipc.anonymous_scan._scan_ipc_impl(source:str,columns:list[str]|None,predicate:str|None,n_rows:int|None,**kwargs:Any)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/ipc/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/ipc/functions.py----------------------------------------
A:polars.io.ipc.functions.tbl->pyarrow.feather.read_table(data, memory_map=memory_map, columns=columns)
A:polars.io.ipc.functions.df->df.slice(0, n_rows).slice(0, n_rows)
A:polars.io.ipc.functions.source->normalise_filepath(source)
polars.io.ipc.functions.read_ipc(source:str|BinaryIO|BytesIO|Path|bytes,*,columns:list[int]|list[str]|None=None,n_rows:int|None=None,use_pyarrow:bool=False,memory_map:bool=True,storage_options:dict[str,Any]|None=None,row_count_name:str|None=None,row_count_offset:int=0,rechunk:bool=True)->DataFrame
polars.io.ipc.functions.read_ipc_schema(source:str|BinaryIO|Path|bytes)->dict[str, PolarsDataType]
polars.io.ipc.functions.scan_ipc(source:str|Path,*,n_rows:int|None=None,cache:bool=True,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,Any]|None=None,memory_map:bool=True)->LazyFrame
polars.read_ipc(source:str|BinaryIO|BytesIO|Path|bytes,*,columns:list[int]|list[str]|None=None,n_rows:int|None=None,use_pyarrow:bool=False,memory_map:bool=True,storage_options:dict[str,Any]|None=None,row_count_name:str|None=None,row_count_offset:int=0,rechunk:bool=True)->DataFrame
polars.read_ipc_schema(source:str|BinaryIO|Path|bytes)->dict[str, PolarsDataType]
polars.scan_ipc(source:str|Path,*,n_rows:int|None=None,cache:bool=True,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,Any]|None=None,memory_map:bool=True)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/csv/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/csv/batched_reader.py----------------------------------------
A:polars.io.csv.batched_reader.path->normalise_filepath(source)
A:polars.io.csv.batched_reader.processed_null_values->_process_null_values(null_values)
A:polars.io.csv.batched_reader.(projection, columns)->handle_projection_columns(columns)
A:polars.io.csv.batched_reader.self._reader->polars.polars.PyBatchedCsv.new(infer_schema_length=infer_schema_length, chunk_size=batch_size, has_header=has_header, ignore_errors=ignore_errors, n_rows=n_rows, skip_rows=skip_rows, projection=projection, separator=separator, rechunk=rechunk, columns=columns, encoding=encoding, n_threads=n_threads, path=path, overwrite_dtype=dtype_list, overwrite_dtype_slice=dtype_slice, low_memory=low_memory, comment_char=comment_char, quote_char=quote_char, null_values=processed_null_values, missing_utf8_is_empty_string=missing_utf8_is_empty_string, try_parse_dates=try_parse_dates, skip_rows_after_header=skip_rows_after_header, row_count=_prepare_row_count_args(row_count_name, row_count_offset), sample_size=sample_size, eol_char=eol_char)
A:polars.io.csv.batched_reader.batches->self._reader.next_batches(n)
polars.io.csv.batched_reader.BatchedCsvReader(self,source:str|Path,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,separator:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:None|(SchemaDict|Sequence[PolarsDataType])=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=50000,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,sample_size:int=1024,eol_char:str='\n',new_columns:Sequence[str]|None=None)
polars.io.csv.batched_reader.BatchedCsvReader.__init__(self,source:str|Path,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,separator:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:None|(SchemaDict|Sequence[PolarsDataType])=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=50000,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,sample_size:int=1024,eol_char:str='\n',new_columns:Sequence[str]|None=None)
polars.io.csv.batched_reader.BatchedCsvReader.next_batches(self,n:int)->list[DataFrame] | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/csv/_utils.py----------------------------------------
A:polars.io.csv._utils.arg_byte_length->len(arg.encode('utf-8'))
A:polars.io.csv._utils.df.columns->list(new_columns)
polars.io.csv._utils._check_arg_is_1byte(arg_name:str,arg:str|None,can_be_empty:bool=False)->None
polars.io.csv._utils._update_columns(df:DataFrame,new_columns:Sequence[str])->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/csv/functions.py----------------------------------------
A:polars.io.csv.functions.(projection, columns)->handle_projection_columns(columns)
A:polars.io.csv.functions.tbl->tbl.rename_columns([f'column_{int(column[1:]) + 1}' for column in tbl.column_names]).rename_columns([f'column_{int(column[1:]) + 1}' for column in tbl.column_names])
A:polars.io.csv.functions.df->polars._reexport.DataFrame._read_csv(data, has_header=has_header, columns=columns if columns else projection, separator=separator, comment_char=comment_char, quote_char=quote_char, skip_rows=skip_rows, dtypes=dtypes, null_values=null_values, missing_utf8_is_empty_string=missing_utf8_is_empty_string, ignore_errors=ignore_errors, try_parse_dates=try_parse_dates, n_threads=n_threads, infer_schema_length=infer_schema_length, batch_size=batch_size, n_rows=n_rows, encoding=encoding if encoding == 'utf8-lossy' else 'utf8', low_memory=low_memory, rechunk=rechunk, skip_rows_after_header=skip_rows_after_header, row_count_name=row_count_name, row_count_offset=row_count_offset, sample_size=sample_size, eol_char=eol_char)
A:polars.io.csv.functions.dtypes->dict(zip(new_columns, dtypes))
A:polars.io.csv.functions.new_to_current->dict(zip(new_columns, current_columns))
A:polars.io.csv.functions.source->normalise_filepath(source)
polars.io.csv.functions.read_csv(source:str|TextIO|BytesIO|Path|BinaryIO|bytes,*,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,new_columns:Sequence[str]|None=None,separator:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:Mapping[str,PolarsDataType]|Sequence[PolarsDataType]|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=8192,n_rows:int|None=None,encoding:CsvEncoding|str='utf8',low_memory:bool=False,rechunk:bool=True,use_pyarrow:bool=False,storage_options:dict[str,Any]|None=None,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,sample_size:int=1024,eol_char:str='\n')->DataFrame
polars.io.csv.functions.read_csv_batched(source:str|Path,*,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,new_columns:Sequence[str]|None=None,separator:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:Mapping[str,PolarsDataType]|Sequence[PolarsDataType]|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=50000,n_rows:int|None=None,encoding:CsvEncoding|str='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,sample_size:int=1024,eol_char:str='\n')->BatchedCsvReader
polars.io.csv.functions.scan_csv(source:str|Path,*,has_header:bool=True,separator:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:SchemaDict|Sequence[PolarsDataType]|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,cache:bool=True,with_column_names:Callable[[list[str]],list[str]]|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,try_parse_dates:bool=False,eol_char:str='\n',new_columns:Sequence[str]|None=None)->LazyFrame
polars.read_csv(source:str|TextIO|BytesIO|Path|BinaryIO|bytes,*,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,new_columns:Sequence[str]|None=None,separator:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:Mapping[str,PolarsDataType]|Sequence[PolarsDataType]|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=8192,n_rows:int|None=None,encoding:CsvEncoding|str='utf8',low_memory:bool=False,rechunk:bool=True,use_pyarrow:bool=False,storage_options:dict[str,Any]|None=None,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,sample_size:int=1024,eol_char:str='\n')->DataFrame
polars.read_csv_batched(source:str|Path,*,has_header:bool=True,columns:Sequence[int]|Sequence[str]|None=None,new_columns:Sequence[str]|None=None,separator:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:Mapping[str,PolarsDataType]|Sequence[PolarsDataType]|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,try_parse_dates:bool=False,n_threads:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,batch_size:int=50000,n_rows:int|None=None,encoding:CsvEncoding|str='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,sample_size:int=1024,eol_char:str='\n')->BatchedCsvReader
polars.scan_csv(source:str|Path,*,has_header:bool=True,separator:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:SchemaDict|Sequence[PolarsDataType]|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,cache:bool=True,with_column_names:Callable[[list[str]],list[str]]|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,try_parse_dates:bool=False,eol_char:str='\n',new_columns:Sequence[str]|None=None)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/parquet/anonymous_scan.py----------------------------------------
A:polars.io.parquet.anonymous_scan.func->partial(_scan_parquet_impl, source, storage_options=storage_options)
A:polars.io.parquet.anonymous_scan.schema->polars.io.parquet.read_parquet_schema(data)
polars.io.parquet.anonymous_scan._scan_parquet_fsspec(source:str,storage_options:dict[str,object]|None=None)->LazyFrame
polars.io.parquet.anonymous_scan._scan_parquet_impl(source:str,columns:list[str]|None,predicate:str|None,n_rows:int|None,**kwargs:Any)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/parquet/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/io/parquet/functions.py----------------------------------------
A:polars.io.parquet.functions.source->normalise_filepath(source)
polars.io.parquet.functions.read_parquet(source:str|Path|BinaryIO|BytesIO|bytes,*,columns:list[int]|list[str]|None=None,n_rows:int|None=None,use_pyarrow:bool=False,memory_map:bool=True,storage_options:dict[str,Any]|None=None,parallel:ParallelStrategy='auto',row_count_name:str|None=None,row_count_offset:int=0,low_memory:bool=False,pyarrow_options:dict[str,Any]|None=None,use_statistics:bool=True,rechunk:bool=True)->DataFrame
polars.io.parquet.functions.read_parquet_schema(source:str|BinaryIO|Path|bytes)->dict[str, PolarsDataType]
polars.io.parquet.functions.scan_parquet(source:str|Path,*,n_rows:int|None=None,cache:bool=True,parallel:ParallelStrategy='auto',rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,Any]|None=None,low_memory:bool=False,use_statistics:bool=True)->LazyFrame
polars.read_parquet(source:str|Path|BinaryIO|BytesIO|bytes,*,columns:list[int]|list[str]|None=None,n_rows:int|None=None,use_pyarrow:bool=False,memory_map:bool=True,storage_options:dict[str,Any]|None=None,parallel:ParallelStrategy='auto',row_count_name:str|None=None,row_count_offset:int=0,low_memory:bool=False,pyarrow_options:dict[str,Any]|None=None,use_statistics:bool=True,rechunk:bool=True)->DataFrame
polars.read_parquet_schema(source:str|BinaryIO|Path|bytes)->dict[str, PolarsDataType]
polars.scan_parquet(source:str|Path,*,n_rows:int|None=None,cache:bool=True,parallel:ParallelStrategy='auto',rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,Any]|None=None,low_memory:bool=False,use_statistics:bool=True)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/series/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/series/categorical.py----------------------------------------
polars.series.categorical.CatNameSpace(self,series:Series)
polars.series.categorical.CatNameSpace.__init__(self,series:Series)
polars.series.categorical.CatNameSpace.get_categories(self)->Series
polars.series.categorical.CatNameSpace.set_ordering(self,ordering:CategoricalOrdering)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/series/series.py----------------------------------------
A:polars.series.series.self._s->self._s.sort(descending)
A:polars.series.series.dtype->Datetime('ms')
A:polars.series.series.series->self.clone()
A:polars.series.series.out['FAST_EXPLODE']->self._s.can_fast_explode_flag()
A:polars.series.series.other->Series(other)
A:polars.series.series.ts->_datetime_to_pl_timestamp(other, self._s.time_unit())
A:polars.series.series.f->get_ffi_func('set_with_mask_<>', self.dtype, self._s)
A:polars.series.series.d->_date_to_pl_date(other)
A:polars.series.series._s->sequence_to_pyseries(self.name, [other])
A:polars.series.series.idx_type->get_index_type()
A:polars.series.series.idx_series->Series('', item, dtype=Int64)._pos_idxs(self.len())
A:polars.series.series.s->self.clone()
A:polars.series.series.sz->self._s.estimated_size()
A:polars.series.series.exponent->Series(exponent)
A:polars.series.series.n->max(0, self.len() + n)
A:polars.series.series.res->self.to_frame().select(F.col(n).qcut(q, labels, left_closed, allow_duplicates, include_breaks)).to_series()
A:polars.series.series.predicate->Series('', predicate)
A:polars.series.series.element->Series(element)
A:polars.series.series.opt_s->self._s.rechunk(in_place)
A:polars.series.series.lower_bound->polars.functions.lit(lower_bound)
A:polars.series.series.upper_bound->polars.functions.lit(upper_bound)
A:polars.series.series.ptr_type->dtype_to_ctype(self.dtype)
A:polars.series.series.ptr->self._s.as_single_ptr()
A:polars.series.series.array->_ptr_to_numpy(ptr, self.len(), ptr_type)
A:polars.series.series.np_array->self._s.to_numpy()
A:polars.series.series.idx->Series('', idx)
A:polars.series.series.value->Series('', value)
A:polars.series.series.pl_return_dtype->py_type_to_dtype(return_dtype)
polars.Series(self,name:str|ArrayLike|None=None,values:ArrayLike|None=None,dtype:PolarsDataType|None=None,*,strict:bool=True,nan_to_null:bool=False,dtype_if_empty:PolarsDataType|None=None)
polars.Series.__abs__(self)->Series
polars.Series.__add__(self,other:Any)->Self | DataFrame | Expr
polars.Series.__and__(self,other:Series)->Self
polars.Series.__array__(self,dtype:Any=None)->np.ndarray[Any, Any]
polars.Series.__array_ufunc__(self,ufunc:np.ufunc,method:str,*inputs:Any,**kwargs:Any)->Series
polars.Series.__bool__(self)->NoReturn
polars.Series.__contains__(self,item:Any)->bool
polars.Series.__copy__(self)->Self
polars.Series.__deepcopy__(self,memo:None=None)->Self
polars.Series.__eq__(self,other:Any)->Self | Expr
polars.Series.__floordiv__(self,other:Any)->Series | Expr
polars.Series.__ge__(self,other:Any)->Self | Expr
polars.Series.__getitem__(self,item:int|Series|range|slice|np.ndarray[Any,Any]|list[int])->Any
polars.Series.__getstate__(self)->Any
polars.Series.__gt__(self,other:Any)->Self | Expr
polars.Series.__invert__(self)->Self
polars.Series.__iter__(self)->Generator[Any, None, None]
polars.Series.__le__(self,other:Any)->Self | Expr
polars.Series.__len__(self)->int
polars.Series.__lt__(self,other:Any)->Self | Expr
polars.Series.__matmul__(self,other:Any)->float | Series | None
polars.Series.__mod__(self,other:Any)->Series | Expr
polars.Series.__mul__(self,other:Any)->Series | DataFrame | Expr
polars.Series.__ne__(self,other:Any)->Self | Expr
polars.Series.__neg__(self)->Series
polars.Series.__or__(self,other:Series)->Self
polars.Series.__pos__(self)->Series
polars.Series.__pow__(self,exponent:int|float|None|Series)->Series
polars.Series.__radd__(self,other:Any)->Series
polars.Series.__rand__(self,other:Series)->Series
polars.Series.__repr__(self)->str
polars.Series.__rfloordiv__(self,other:Any)->Series
polars.Series.__rmatmul__(self,other:Any)->float | Series | None
polars.Series.__rmod__(self,other:Any)->Series
polars.Series.__rmul__(self,other:Any)->Series
polars.Series.__ror__(self,other:Series)->Self
polars.Series.__rpow__(self,other:Any)->Series
polars.Series.__rsub__(self,other:Any)->Series
polars.Series.__rtruediv__(self,other:Any)->Series
polars.Series.__rxor__(self,other:Series)->Series
polars.Series.__setitem__(self,key:int|Series|np.ndarray[Any,Any]|Sequence[object]|tuple[object],value:Any)->None
polars.Series.__setstate__(self,state:Any)->None
polars.Series.__str__(self)->str
polars.Series.__sub__(self,other:Any)->Self | Expr
polars.Series.__truediv__(self,other:Any)->Series | Expr
polars.Series.__xor__(self,other:Series)->Self
polars.Series._arithmetic(self,other:Any,op_s:str,op_ffi:str)->Self
polars.Series._comp(self,other:Any,op:ComparisonOperator)->Self
polars.Series._from_arrow(cls,name:str,values:pa.Array,*,rechunk:bool=True)->Self
polars.Series._from_pandas(cls,name:str,values:pd.Series[Any]|pd.DatetimeIndex,*,nan_to_null:bool=True)->Self
polars.Series._from_pyseries(cls,pyseries:PySeries)->Self
polars.Series._get_ptr(self)->int
polars.Series._pos_idxs(self,size:int)->Series
polars.Series._repr_html_(self)->str
polars.Series._take_with_series(self,s:Series)->Series
polars.Series.abs(self)->Series
polars.Series.alias(self,name:str)->Series
polars.Series.all(self,drop_nulls:bool=True)->bool | None
polars.Series.any(self,drop_nulls:bool=True)->bool | None
polars.Series.append(self,other:Series,*,append_chunks:bool|None=None)->Self
polars.Series.apply(self,function:Callable[[Any],Any],return_dtype:PolarsDataType|None=None,*,skip_nulls:bool=True)->Self
polars.Series.arccos(self)->Series
polars.Series.arccosh(self)->Series
polars.Series.arcsin(self)->Series
polars.Series.arcsinh(self)->Series
polars.Series.arctan(self)->Series
polars.Series.arctanh(self)->Series
polars.Series.arg_max(self)->int | None
polars.Series.arg_min(self)->int | None
polars.Series.arg_sort(self,*,descending:bool=False,nulls_last:bool=False)->Series
polars.Series.arg_true(self)->Series
polars.Series.arg_unique(self)->Series
polars.Series.arr(self)->ArrayNameSpace
polars.Series.bin(self)->BinaryNameSpace
polars.Series.bottom_k(self,k:int=5)->Series
polars.Series.cast(self,dtype:PolarsDataType|type[int]|type[float]|type[str]|type[bool],*,strict:bool=True)->Self
polars.Series.cat(self)->CatNameSpace
polars.Series.cbrt(self)->Series
polars.Series.ceil(self)->Series
polars.Series.chunk_lengths(self)->list[int]
polars.Series.clear(self,n:int=0)->Series
polars.Series.clip(self,lower_bound:int|float,upper_bound:int|float)->Series
polars.Series.clip_max(self,upper_bound:int|float)->Series
polars.Series.clip_min(self,lower_bound:int|float)->Series
polars.Series.clone(self)->Self
polars.Series.cos(self)->Series
polars.Series.cosh(self)->Series
polars.Series.cummax(self,*,reverse:bool=False)->Series
polars.Series.cummin(self,*,reverse:bool=False)->Series
polars.Series.cumprod(self,*,reverse:bool=False)->Series
polars.Series.cumsum(self,*,reverse:bool=False)->Series
polars.Series.cumulative_eval(self,expr:Expr,min_periods:int=1,*,parallel:bool=False)->Series
polars.Series.cut(self,breaks:list[float],labels:list[str]|None=None,break_point_label:str='break_point',category_label:str='category',*,series:bool=True,left_closed:bool=False,include_breaks:bool=False)->DataFrame | Series
polars.Series.describe(self,percentiles:Sequence[float]|float|None=(0.25,0.75))->DataFrame
polars.Series.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->Series
polars.Series.dot(self,other:Series|ArrayLike)->float | None
polars.Series.drop_nans(self)->Series
polars.Series.drop_nulls(self)->Series
polars.Series.dt(self)->DateTimeNameSpace
polars.Series.dtype(self)->PolarsDataType
polars.Series.entropy(self,base:float=math.e,*,normalize:bool=False)->float | None
polars.Series.eq(self,other:Any)->Self | Expr
polars.Series.eq_missing(self,other:Any)->Self | Expr
polars.Series.estimated_size(self,unit:SizeUnit='b')->int | float
polars.Series.ewm_mean(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,*,adjust:bool=True,min_periods:int=1,ignore_nulls:bool=True)->Series
polars.Series.ewm_std(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,*,adjust:bool=True,bias:bool=False,min_periods:int=1,ignore_nulls:bool=True)->Series
polars.Series.ewm_var(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,*,adjust:bool=True,bias:bool=False,min_periods:int=1,ignore_nulls:bool=True)->Series
polars.Series.exp(self)->Series
polars.Series.explode(self)->Series
polars.Series.extend(self,other:Series)->Self
polars.Series.extend_constant(self,value:PythonLiteral|None,n:int)->Series
polars.Series.fill_nan(self,value:int|float|Expr|None)->Series
polars.Series.fill_null(self,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->Series
polars.Series.filter(self,predicate:Series|list[bool])->Self
polars.Series.flags(self)->dict[str, bool]
polars.Series.floor(self)->Series
polars.Series.ge(self,other:Any)->Self | Expr
polars.Series.get_chunks(self)->list[Series]
polars.Series.gt(self,other:Any)->Self | Expr
polars.Series.has_validity(self)->bool
polars.Series.hash(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->Series
polars.Series.head(self,n:int=10)->Series
polars.Series.hist(self,bins:list[float]|None=None,*,bin_count:int|None=None)->DataFrame
polars.Series.implode(self)->Self
polars.Series.inner_dtype(self)->PolarsDataType | None
polars.Series.interpolate(self,method:InterpolationMethod='linear')->Series
polars.Series.is_between(self,lower_bound:IntoExpr,upper_bound:IntoExpr,closed:ClosedInterval='both')->Series
polars.Series.is_boolean(self)->bool
polars.Series.is_duplicated(self)->Series
polars.Series.is_empty(self)->bool
polars.Series.is_finite(self)->Series
polars.Series.is_first(self)->Series
polars.Series.is_float(self)->bool
polars.Series.is_in(self,other:Series|Collection[Any])->Series
polars.Series.is_infinite(self)->Series
polars.Series.is_integer(self,signed:bool|None=None)->bool
polars.Series.is_nan(self)->Series
polars.Series.is_not_nan(self)->Series
polars.Series.is_not_null(self)->Series
polars.Series.is_null(self)->Series
polars.Series.is_numeric(self)->bool
polars.Series.is_sorted(self,*,descending:bool=False)->bool
polars.Series.is_temporal(self,excluding:OneOrMoreDataTypes|None=None)->bool
polars.Series.is_unique(self)->Series
polars.Series.is_utf8(self)->bool
polars.Series.item(self,row:int|None=None)->Any
polars.Series.kurtosis(self,*,fisher:bool=True,bias:bool=True)->float | None
polars.Series.le(self,other:Any)->Self | Expr
polars.Series.len(self)->int
polars.Series.limit(self,n:int=10)->Series
polars.Series.list(self)->ListNameSpace
polars.Series.log(self,base:float=math.e)->Series
polars.Series.log10(self)->Series
polars.Series.log1p(self)->Series
polars.Series.lower_bound(self)->Self
polars.Series.lt(self,other:Any)->Self | Expr
polars.Series.map_dict(self,remapping:dict[Any,Any],*,default:Any=None,return_dtype:PolarsDataType|None=None)->Self
polars.Series.max(self)->PythonLiteral | None
polars.Series.mean(self)->int | float | None
polars.Series.median(self)->float | None
polars.Series.min(self)->PythonLiteral | None
polars.Series.mode(self)->Series
polars.Series.n_chunks(self)->int
polars.Series.n_unique(self)->int
polars.Series.name(self)->str
polars.Series.nan_max(self)->int | float | date | datetime | timedelta | str
polars.Series.nan_min(self)->int | float | date | datetime | timedelta | str
polars.Series.ne(self,other:Any)->Self | Expr
polars.Series.ne_missing(self,other:Any)->Self | Expr
polars.Series.new_from_index(self,index:int,length:int)->Self
polars.Series.null_count(self)->int
polars.Series.pct_change(self,n:int=1)->Series
polars.Series.peak_max(self)->Self
polars.Series.peak_min(self)->Self
polars.Series.pow(self,exponent:int|float|None|Series)->Series
polars.Series.product(self)->int | float
polars.Series.qcut(self,q:list[float]|int,*,labels:list[str]|None=None,break_point_label:str='break_point',category_label:str='category',series:bool=True,left_closed:bool=False,allow_duplicates:bool=False,include_breaks:bool=False)->DataFrame | Series
polars.Series.quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest')->float | None
polars.Series.rank(self,method:RankMethod='average',*,descending:bool=False,seed:int|None=None)->Series
polars.Series.rechunk(self,*,in_place:bool=False)->Self
polars.Series.reinterpret(self,*,signed:bool=True)->Series
polars.Series.rename(self,name:str,*,in_place:bool|None=None)->Series
polars.Series.reshape(self,dimensions:tuple[int,...])->Series
polars.Series.reverse(self)->Series
polars.Series.rle(self)->Series
polars.Series.rle_id(self)->Series
polars.Series.rolling_apply(self,function:Callable[[Series],Any],window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Series
polars.Series.rolling_max(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Series
polars.Series.rolling_mean(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Series
polars.Series.rolling_median(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Series
polars.Series.rolling_min(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Series
polars.Series.rolling_quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest',window_size:int=2,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Series
polars.Series.rolling_skew(self,window_size:int,*,bias:bool=True)->Series
polars.Series.rolling_std(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,ddof:int=1)->Series
polars.Series.rolling_sum(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Series
polars.Series.rolling_var(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,ddof:int=1)->Series
polars.Series.round(self,decimals:int=0)->Series
polars.Series.sample(self,n:int|None=None,*,fraction:float|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->Series
polars.Series.search_sorted(self,element:int|float|Series|np.ndarray[Any,Any]|list[int]|list[float],side:SearchSortedSide='any')->int | Series
polars.Series.series_equal(self,other:Series,*,null_equal:bool=True,strict:bool=False)->bool
polars.Series.set(self,filter:Series,value:int|float|str)->Series
polars.Series.set_at_idx(self,idx:Series|np.ndarray[Any,Any]|Sequence[int]|int,value:int|float|str|bool|Sequence[int]|Sequence[float]|Sequence[bool]|Sequence[str]|Sequence[date]|Sequence[datetime]|date|datetime|Series|None)->Series
polars.Series.set_sorted(self,*,descending:bool=False)->Self
polars.Series.shape(self)->tuple[int]
polars.Series.shift(self,periods:int=1)->Series
polars.Series.shift_and_fill(self,fill_value:int|Expr,*,periods:int=1)->Series
polars.Series.shrink_dtype(self)->Series
polars.Series.shrink_to_fit(self,*,in_place:bool=False)->Series
polars.Series.shuffle(self,seed:int|None=None)->Series
polars.Series.sign(self)->Series
polars.Series.sin(self)->Series
polars.Series.sinh(self)->Series
polars.Series.skew(self,*,bias:bool=True)->float | None
polars.Series.slice(self,offset:int,length:int|None=None)->Series
polars.Series.sort(self,*,descending:bool=False,in_place:bool=False)->Self
polars.Series.sqrt(self)->Series
polars.Series.std(self,ddof:int=1)->float | None
polars.Series.str(self)->StringNameSpace
polars.Series.struct(self)->StructNameSpace
polars.Series.sum(self)->int | float
polars.Series.tail(self,n:int=10)->Series
polars.Series.take(self,indices:int|list[int]|Expr|Series|np.ndarray[Any,Any])->Series
polars.Series.take_every(self,n:int)->Series
polars.Series.tan(self)->Series
polars.Series.tanh(self)->Series
polars.Series.time_unit(self)->TimeUnit | None
polars.Series.to_arrow(self)->pa.Array
polars.Series.to_dummies(self,separator:str='_')->DataFrame
polars.Series.to_frame(self,name:str|None=None)->DataFrame
polars.Series.to_init_repr(self,n:int=1000)->str
polars.Series.to_list(self,*,use_pyarrow:bool=False)->list[Any]
polars.Series.to_numpy(self,*args:Any,zero_copy_only:bool=False,writable:bool=False,use_pyarrow:bool=True)->np.ndarray[Any, Any]
polars.Series.to_pandas(self,*args:Any,use_pyarrow_extension_array:bool=False,**kwargs:Any)->pd.Series[Any]
polars.Series.to_physical(self)->Series
polars.Series.top_k(self,k:int=5)->Series
polars.Series.unique(self,*,maintain_order:bool=False)->Series
polars.Series.unique_counts(self)->Series
polars.Series.upper_bound(self)->Self
polars.Series.value_counts(self,*,sort:bool=False)->DataFrame
polars.Series.var(self,ddof:int=1)->float | None
polars.Series.view(self,*,ignore_nulls:bool=False)->SeriesView
polars.Series.zip_with(self,mask:Series,other:Series)->Self
polars.series.series.Series(self,name:str|ArrayLike|None=None,values:ArrayLike|None=None,dtype:PolarsDataType|None=None,*,strict:bool=True,nan_to_null:bool=False,dtype_if_empty:PolarsDataType|None=None)
polars.series.series.Series.__abs__(self)->Series
polars.series.series.Series.__add__(self,other:Any)->Self | DataFrame | Expr
polars.series.series.Series.__and__(self,other:Series)->Self
polars.series.series.Series.__array__(self,dtype:Any=None)->np.ndarray[Any, Any]
polars.series.series.Series.__array_ufunc__(self,ufunc:np.ufunc,method:str,*inputs:Any,**kwargs:Any)->Series
polars.series.series.Series.__bool__(self)->NoReturn
polars.series.series.Series.__contains__(self,item:Any)->bool
polars.series.series.Series.__copy__(self)->Self
polars.series.series.Series.__deepcopy__(self,memo:None=None)->Self
polars.series.series.Series.__eq__(self,other:Any)->Self | Expr
polars.series.series.Series.__floordiv__(self,other:Any)->Series | Expr
polars.series.series.Series.__ge__(self,other:Any)->Self | Expr
polars.series.series.Series.__getitem__(self,item:int|Series|range|slice|np.ndarray[Any,Any]|list[int])->Any
polars.series.series.Series.__getstate__(self)->Any
polars.series.series.Series.__gt__(self,other:Any)->Self | Expr
polars.series.series.Series.__init__(self,name:str|ArrayLike|None=None,values:ArrayLike|None=None,dtype:PolarsDataType|None=None,*,strict:bool=True,nan_to_null:bool=False,dtype_if_empty:PolarsDataType|None=None)
polars.series.series.Series.__invert__(self)->Self
polars.series.series.Series.__iter__(self)->Generator[Any, None, None]
polars.series.series.Series.__le__(self,other:Any)->Self | Expr
polars.series.series.Series.__len__(self)->int
polars.series.series.Series.__lt__(self,other:Any)->Self | Expr
polars.series.series.Series.__matmul__(self,other:Any)->float | Series | None
polars.series.series.Series.__mod__(self,other:Any)->Series | Expr
polars.series.series.Series.__mul__(self,other:Any)->Series | DataFrame | Expr
polars.series.series.Series.__ne__(self,other:Any)->Self | Expr
polars.series.series.Series.__neg__(self)->Series
polars.series.series.Series.__or__(self,other:Series)->Self
polars.series.series.Series.__pos__(self)->Series
polars.series.series.Series.__pow__(self,exponent:int|float|None|Series)->Series
polars.series.series.Series.__radd__(self,other:Any)->Series
polars.series.series.Series.__rand__(self,other:Series)->Series
polars.series.series.Series.__repr__(self)->str
polars.series.series.Series.__rfloordiv__(self,other:Any)->Series
polars.series.series.Series.__rmatmul__(self,other:Any)->float | Series | None
polars.series.series.Series.__rmod__(self,other:Any)->Series
polars.series.series.Series.__rmul__(self,other:Any)->Series
polars.series.series.Series.__ror__(self,other:Series)->Self
polars.series.series.Series.__rpow__(self,other:Any)->Series
polars.series.series.Series.__rsub__(self,other:Any)->Series
polars.series.series.Series.__rtruediv__(self,other:Any)->Series
polars.series.series.Series.__rxor__(self,other:Series)->Series
polars.series.series.Series.__setitem__(self,key:int|Series|np.ndarray[Any,Any]|Sequence[object]|tuple[object],value:Any)->None
polars.series.series.Series.__setstate__(self,state:Any)->None
polars.series.series.Series.__str__(self)->str
polars.series.series.Series.__sub__(self,other:Any)->Self | Expr
polars.series.series.Series.__truediv__(self,other:Any)->Series | Expr
polars.series.series.Series.__xor__(self,other:Series)->Self
polars.series.series.Series._arithmetic(self,other:Any,op_s:str,op_ffi:str)->Self
polars.series.series.Series._comp(self,other:Any,op:ComparisonOperator)->Self
polars.series.series.Series._from_arrow(cls,name:str,values:pa.Array,*,rechunk:bool=True)->Self
polars.series.series.Series._from_pandas(cls,name:str,values:pd.Series[Any]|pd.DatetimeIndex,*,nan_to_null:bool=True)->Self
polars.series.series.Series._from_pyseries(cls,pyseries:PySeries)->Self
polars.series.series.Series._get_ptr(self)->int
polars.series.series.Series._pos_idxs(self,size:int)->Series
polars.series.series.Series._repr_html_(self)->str
polars.series.series.Series._take_with_series(self,s:Series)->Series
polars.series.series.Series.abs(self)->Series
polars.series.series.Series.alias(self,name:str)->Series
polars.series.series.Series.all(self,drop_nulls:bool=True)->bool | None
polars.series.series.Series.any(self,drop_nulls:bool=True)->bool | None
polars.series.series.Series.append(self,other:Series,*,append_chunks:bool|None=None)->Self
polars.series.series.Series.apply(self,function:Callable[[Any],Any],return_dtype:PolarsDataType|None=None,*,skip_nulls:bool=True)->Self
polars.series.series.Series.arccos(self)->Series
polars.series.series.Series.arccosh(self)->Series
polars.series.series.Series.arcsin(self)->Series
polars.series.series.Series.arcsinh(self)->Series
polars.series.series.Series.arctan(self)->Series
polars.series.series.Series.arctanh(self)->Series
polars.series.series.Series.arg_max(self)->int | None
polars.series.series.Series.arg_min(self)->int | None
polars.series.series.Series.arg_sort(self,*,descending:bool=False,nulls_last:bool=False)->Series
polars.series.series.Series.arg_true(self)->Series
polars.series.series.Series.arg_unique(self)->Series
polars.series.series.Series.arr(self)->ArrayNameSpace
polars.series.series.Series.bin(self)->BinaryNameSpace
polars.series.series.Series.bottom_k(self,k:int=5)->Series
polars.series.series.Series.cast(self,dtype:PolarsDataType|type[int]|type[float]|type[str]|type[bool],*,strict:bool=True)->Self
polars.series.series.Series.cat(self)->CatNameSpace
polars.series.series.Series.cbrt(self)->Series
polars.series.series.Series.ceil(self)->Series
polars.series.series.Series.chunk_lengths(self)->list[int]
polars.series.series.Series.clear(self,n:int=0)->Series
polars.series.series.Series.clip(self,lower_bound:int|float,upper_bound:int|float)->Series
polars.series.series.Series.clip_max(self,upper_bound:int|float)->Series
polars.series.series.Series.clip_min(self,lower_bound:int|float)->Series
polars.series.series.Series.clone(self)->Self
polars.series.series.Series.cos(self)->Series
polars.series.series.Series.cosh(self)->Series
polars.series.series.Series.cummax(self,*,reverse:bool=False)->Series
polars.series.series.Series.cummin(self,*,reverse:bool=False)->Series
polars.series.series.Series.cumprod(self,*,reverse:bool=False)->Series
polars.series.series.Series.cumsum(self,*,reverse:bool=False)->Series
polars.series.series.Series.cumulative_eval(self,expr:Expr,min_periods:int=1,*,parallel:bool=False)->Series
polars.series.series.Series.cut(self,breaks:list[float],labels:list[str]|None=None,break_point_label:str='break_point',category_label:str='category',*,series:bool=True,left_closed:bool=False,include_breaks:bool=False)->DataFrame | Series
polars.series.series.Series.describe(self,percentiles:Sequence[float]|float|None=(0.25,0.75))->DataFrame
polars.series.series.Series.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->Series
polars.series.series.Series.dot(self,other:Series|ArrayLike)->float | None
polars.series.series.Series.drop_nans(self)->Series
polars.series.series.Series.drop_nulls(self)->Series
polars.series.series.Series.dt(self)->DateTimeNameSpace
polars.series.series.Series.dtype(self)->PolarsDataType
polars.series.series.Series.entropy(self,base:float=math.e,*,normalize:bool=False)->float | None
polars.series.series.Series.eq(self,other:Any)->Self | Expr
polars.series.series.Series.eq_missing(self,other:Any)->Self | Expr
polars.series.series.Series.estimated_size(self,unit:SizeUnit='b')->int | float
polars.series.series.Series.ewm_mean(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,*,adjust:bool=True,min_periods:int=1,ignore_nulls:bool=True)->Series
polars.series.series.Series.ewm_std(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,*,adjust:bool=True,bias:bool=False,min_periods:int=1,ignore_nulls:bool=True)->Series
polars.series.series.Series.ewm_var(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,*,adjust:bool=True,bias:bool=False,min_periods:int=1,ignore_nulls:bool=True)->Series
polars.series.series.Series.exp(self)->Series
polars.series.series.Series.explode(self)->Series
polars.series.series.Series.extend(self,other:Series)->Self
polars.series.series.Series.extend_constant(self,value:PythonLiteral|None,n:int)->Series
polars.series.series.Series.fill_nan(self,value:int|float|Expr|None)->Series
polars.series.series.Series.fill_null(self,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->Series
polars.series.series.Series.filter(self,predicate:Series|list[bool])->Self
polars.series.series.Series.flags(self)->dict[str, bool]
polars.series.series.Series.floor(self)->Series
polars.series.series.Series.ge(self,other:Any)->Self | Expr
polars.series.series.Series.get_chunks(self)->list[Series]
polars.series.series.Series.gt(self,other:Any)->Self | Expr
polars.series.series.Series.has_validity(self)->bool
polars.series.series.Series.hash(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->Series
polars.series.series.Series.head(self,n:int=10)->Series
polars.series.series.Series.hist(self,bins:list[float]|None=None,*,bin_count:int|None=None)->DataFrame
polars.series.series.Series.implode(self)->Self
polars.series.series.Series.inner_dtype(self)->PolarsDataType | None
polars.series.series.Series.interpolate(self,method:InterpolationMethod='linear')->Series
polars.series.series.Series.is_between(self,lower_bound:IntoExpr,upper_bound:IntoExpr,closed:ClosedInterval='both')->Series
polars.series.series.Series.is_boolean(self)->bool
polars.series.series.Series.is_duplicated(self)->Series
polars.series.series.Series.is_empty(self)->bool
polars.series.series.Series.is_finite(self)->Series
polars.series.series.Series.is_first(self)->Series
polars.series.series.Series.is_float(self)->bool
polars.series.series.Series.is_in(self,other:Series|Collection[Any])->Series
polars.series.series.Series.is_infinite(self)->Series
polars.series.series.Series.is_integer(self,signed:bool|None=None)->bool
polars.series.series.Series.is_nan(self)->Series
polars.series.series.Series.is_not_nan(self)->Series
polars.series.series.Series.is_not_null(self)->Series
polars.series.series.Series.is_null(self)->Series
polars.series.series.Series.is_numeric(self)->bool
polars.series.series.Series.is_sorted(self,*,descending:bool=False)->bool
polars.series.series.Series.is_temporal(self,excluding:OneOrMoreDataTypes|None=None)->bool
polars.series.series.Series.is_unique(self)->Series
polars.series.series.Series.is_utf8(self)->bool
polars.series.series.Series.item(self,row:int|None=None)->Any
polars.series.series.Series.kurtosis(self,*,fisher:bool=True,bias:bool=True)->float | None
polars.series.series.Series.le(self,other:Any)->Self | Expr
polars.series.series.Series.len(self)->int
polars.series.series.Series.limit(self,n:int=10)->Series
polars.series.series.Series.list(self)->ListNameSpace
polars.series.series.Series.log(self,base:float=math.e)->Series
polars.series.series.Series.log10(self)->Series
polars.series.series.Series.log1p(self)->Series
polars.series.series.Series.lower_bound(self)->Self
polars.series.series.Series.lt(self,other:Any)->Self | Expr
polars.series.series.Series.map_dict(self,remapping:dict[Any,Any],*,default:Any=None,return_dtype:PolarsDataType|None=None)->Self
polars.series.series.Series.max(self)->PythonLiteral | None
polars.series.series.Series.mean(self)->int | float | None
polars.series.series.Series.median(self)->float | None
polars.series.series.Series.min(self)->PythonLiteral | None
polars.series.series.Series.mode(self)->Series
polars.series.series.Series.n_chunks(self)->int
polars.series.series.Series.n_unique(self)->int
polars.series.series.Series.name(self)->str
polars.series.series.Series.nan_max(self)->int | float | date | datetime | timedelta | str
polars.series.series.Series.nan_min(self)->int | float | date | datetime | timedelta | str
polars.series.series.Series.ne(self,other:Any)->Self | Expr
polars.series.series.Series.ne_missing(self,other:Any)->Self | Expr
polars.series.series.Series.new_from_index(self,index:int,length:int)->Self
polars.series.series.Series.null_count(self)->int
polars.series.series.Series.pct_change(self,n:int=1)->Series
polars.series.series.Series.peak_max(self)->Self
polars.series.series.Series.peak_min(self)->Self
polars.series.series.Series.pow(self,exponent:int|float|None|Series)->Series
polars.series.series.Series.product(self)->int | float
polars.series.series.Series.qcut(self,q:list[float]|int,*,labels:list[str]|None=None,break_point_label:str='break_point',category_label:str='category',series:bool=True,left_closed:bool=False,allow_duplicates:bool=False,include_breaks:bool=False)->DataFrame | Series
polars.series.series.Series.quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest')->float | None
polars.series.series.Series.rank(self,method:RankMethod='average',*,descending:bool=False,seed:int|None=None)->Series
polars.series.series.Series.rechunk(self,*,in_place:bool=False)->Self
polars.series.series.Series.reinterpret(self,*,signed:bool=True)->Series
polars.series.series.Series.rename(self,name:str,*,in_place:bool|None=None)->Series
polars.series.series.Series.reshape(self,dimensions:tuple[int,...])->Series
polars.series.series.Series.reverse(self)->Series
polars.series.series.Series.rle(self)->Series
polars.series.series.Series.rle_id(self)->Series
polars.series.series.Series.rolling_apply(self,function:Callable[[Series],Any],window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Series
polars.series.series.Series.rolling_max(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Series
polars.series.series.Series.rolling_mean(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Series
polars.series.series.Series.rolling_median(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Series
polars.series.series.Series.rolling_min(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Series
polars.series.series.Series.rolling_quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest',window_size:int=2,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Series
polars.series.series.Series.rolling_skew(self,window_size:int,*,bias:bool=True)->Series
polars.series.series.Series.rolling_std(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,ddof:int=1)->Series
polars.series.series.Series.rolling_sum(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Series
polars.series.series.Series.rolling_var(self,window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,ddof:int=1)->Series
polars.series.series.Series.round(self,decimals:int=0)->Series
polars.series.series.Series.sample(self,n:int|None=None,*,fraction:float|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None)->Series
polars.series.series.Series.search_sorted(self,element:int|float|Series|np.ndarray[Any,Any]|list[int]|list[float],side:SearchSortedSide='any')->int | Series
polars.series.series.Series.series_equal(self,other:Series,*,null_equal:bool=True,strict:bool=False)->bool
polars.series.series.Series.set(self,filter:Series,value:int|float|str)->Series
polars.series.series.Series.set_at_idx(self,idx:Series|np.ndarray[Any,Any]|Sequence[int]|int,value:int|float|str|bool|Sequence[int]|Sequence[float]|Sequence[bool]|Sequence[str]|Sequence[date]|Sequence[datetime]|date|datetime|Series|None)->Series
polars.series.series.Series.set_sorted(self,*,descending:bool=False)->Self
polars.series.series.Series.shape(self)->tuple[int]
polars.series.series.Series.shift(self,periods:int=1)->Series
polars.series.series.Series.shift_and_fill(self,fill_value:int|Expr,*,periods:int=1)->Series
polars.series.series.Series.shrink_dtype(self)->Series
polars.series.series.Series.shrink_to_fit(self,*,in_place:bool=False)->Series
polars.series.series.Series.shuffle(self,seed:int|None=None)->Series
polars.series.series.Series.sign(self)->Series
polars.series.series.Series.sin(self)->Series
polars.series.series.Series.sinh(self)->Series
polars.series.series.Series.skew(self,*,bias:bool=True)->float | None
polars.series.series.Series.slice(self,offset:int,length:int|None=None)->Series
polars.series.series.Series.sort(self,*,descending:bool=False,in_place:bool=False)->Self
polars.series.series.Series.sqrt(self)->Series
polars.series.series.Series.std(self,ddof:int=1)->float | None
polars.series.series.Series.str(self)->StringNameSpace
polars.series.series.Series.struct(self)->StructNameSpace
polars.series.series.Series.sum(self)->int | float
polars.series.series.Series.tail(self,n:int=10)->Series
polars.series.series.Series.take(self,indices:int|list[int]|Expr|Series|np.ndarray[Any,Any])->Series
polars.series.series.Series.take_every(self,n:int)->Series
polars.series.series.Series.tan(self)->Series
polars.series.series.Series.tanh(self)->Series
polars.series.series.Series.time_unit(self)->TimeUnit | None
polars.series.series.Series.to_arrow(self)->pa.Array
polars.series.series.Series.to_dummies(self,separator:str='_')->DataFrame
polars.series.series.Series.to_frame(self,name:str|None=None)->DataFrame
polars.series.series.Series.to_init_repr(self,n:int=1000)->str
polars.series.series.Series.to_list(self,*,use_pyarrow:bool=False)->list[Any]
polars.series.series.Series.to_numpy(self,*args:Any,zero_copy_only:bool=False,writable:bool=False,use_pyarrow:bool=True)->np.ndarray[Any, Any]
polars.series.series.Series.to_pandas(self,*args:Any,use_pyarrow_extension_array:bool=False,**kwargs:Any)->pd.Series[Any]
polars.series.series.Series.to_physical(self)->Series
polars.series.series.Series.top_k(self,k:int=5)->Series
polars.series.series.Series.unique(self,*,maintain_order:bool=False)->Series
polars.series.series.Series.unique_counts(self)->Series
polars.series.series.Series.upper_bound(self)->Self
polars.series.series.Series.value_counts(self,*,sort:bool=False)->DataFrame
polars.series.series.Series.var(self,ddof:int=1)->float | None
polars.series.series.Series.view(self,*,ignore_nulls:bool=False)->SeriesView
polars.series.series.Series.zip_with(self,mask:Series,other:Series)->Self
polars.series.series._resolve_datetime_dtype(dtype:PolarsDataType|None,ndtype:np.datetime64)->PolarsDataType | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/series/utils.py----------------------------------------
A:polars.series.utils.T->TypeVar('T')
A:polars.series.utils.P->ParamSpec('P')
A:polars.series.utils._EMPTY_BYTECODE->_EmptyBytecodeHelper()
A:polars.series.utils.expr->getattr(expr, namespace)
A:polars.series.utils.lookup->set()
A:polars.series.utils.m->getattr(expr, name)
A:polars.series.utils.s->wrap_s(self._s)
A:polars.series.utils.namespace->getattr(cls, '_accessor', None)
A:polars.series.utils.f->getattr(expr, func.__name__)
A:polars.series.utils.expr_lookup->_expr_lookup(namespace)
A:polars.series.utils.attr->getattr(cls, name)
A:polars.series.utils.ffi_name->dtype_to_ffiname(dtype)
A:polars.series.utils.fname->name.replace('<>', ffi_name)
polars.series.utils._EmptyBytecodeHelper(self)
polars.series.utils._EmptyBytecodeHelper.__contains__(self,item:bytes)->bool
polars.series.utils._EmptyBytecodeHelper.__init__(self)
polars.series.utils._expr_lookup(namespace:str|None)->set[tuple[str | None, str, tuple[str, ...]]]
polars.series.utils._is_empty_method(func:SeriesMethod)->bool
polars.series.utils.call_expr(func:SeriesMethod)->SeriesMethod
polars.series.utils.expr_dispatch(cls:type[T])->type[T]
polars.series.utils.get_ffi_func(name:str,dtype:PolarsDataType,obj:PySeries)->Callable[..., Any] | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/series/list.py----------------------------------------
A:polars.series.list.s->wrap_s(self._s)
polars.series.list.ListNameSpace(self,series:Series)
polars.series.list.ListNameSpace.__getitem__(self,item:int)->Series
polars.series.list.ListNameSpace.__init__(self,series:Series)
polars.series.list.ListNameSpace.all(self)->Expr
polars.series.list.ListNameSpace.any(self)->Expr
polars.series.list.ListNameSpace.arg_max(self)->Series
polars.series.list.ListNameSpace.arg_min(self)->Series
polars.series.list.ListNameSpace.concat(self,other:list[Series]|Series|list[Any])->Series
polars.series.list.ListNameSpace.contains(self,item:float|str|bool|int|date|datetime)->Series
polars.series.list.ListNameSpace.count_match(self,element:float|str|bool|int|date|datetime|time|Expr)->Expr
polars.series.list.ListNameSpace.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->Series
polars.series.list.ListNameSpace.eval(self,expr:Expr,*,parallel:bool=False)->Series
polars.series.list.ListNameSpace.explode(self)->Series
polars.series.list.ListNameSpace.first(self)->Series
polars.series.list.ListNameSpace.get(self,index:int|Series|list[int])->Series
polars.series.list.ListNameSpace.head(self,n:int|Expr=5)->Series
polars.series.list.ListNameSpace.join(self,separator:str)->Series
polars.series.list.ListNameSpace.last(self)->Series
polars.series.list.ListNameSpace.lengths(self)->Series
polars.series.list.ListNameSpace.max(self)->Series
polars.series.list.ListNameSpace.mean(self)->Series
polars.series.list.ListNameSpace.min(self)->Series
polars.series.list.ListNameSpace.reverse(self)->Series
polars.series.list.ListNameSpace.set_difference(self,other:Series)->Series
polars.series.list.ListNameSpace.set_intersection(self,other:Series)->Series
polars.series.list.ListNameSpace.set_symmetric_difference(self,other:Series)->Series
polars.series.list.ListNameSpace.set_union(self,other:Series)->Series
polars.series.list.ListNameSpace.shift(self,periods:int=1)->Series
polars.series.list.ListNameSpace.slice(self,offset:int|Expr,length:int|Expr|None=None)->Series
polars.series.list.ListNameSpace.sort(self,*,descending:bool=False)->Series
polars.series.list.ListNameSpace.sum(self)->Series
polars.series.list.ListNameSpace.tail(self,n:int|Expr=5)->Series
polars.series.list.ListNameSpace.take(self,index:Series|list[int]|list[list[int]],*,null_on_oob:bool=False)->Series
polars.series.list.ListNameSpace.to_struct(self,n_field_strategy:ToStructStrategy='first_non_null',fields:Callable[[int],str]|Sequence[str]|None=None)->Series
polars.series.list.ListNameSpace.unique(self,*,maintain_order:bool=False)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/series/datetime.py----------------------------------------
A:polars.series.datetime.s->wrap_s(self._s)
A:polars.series.datetime.out->wrap_s(self._s).mean()
polars.series.datetime.DateTimeNameSpace(self,series:Series)
polars.series.datetime.DateTimeNameSpace.__getitem__(self,item:int)->dt.date | dt.datetime
polars.series.datetime.DateTimeNameSpace.__init__(self,series:Series)
polars.series.datetime.DateTimeNameSpace.base_utc_offset(self)->Series
polars.series.datetime.DateTimeNameSpace.cast_time_unit(self,time_unit:TimeUnit)->Series
polars.series.datetime.DateTimeNameSpace.combine(self,time:dt.time|Series,time_unit:TimeUnit='us')->Expr
polars.series.datetime.DateTimeNameSpace.convert_time_zone(self,time_zone:str)->Series
polars.series.datetime.DateTimeNameSpace.date(self)->Series
polars.series.datetime.DateTimeNameSpace.datetime(self)->Series
polars.series.datetime.DateTimeNameSpace.day(self)->Series
polars.series.datetime.DateTimeNameSpace.days(self)->Series
polars.series.datetime.DateTimeNameSpace.dst_offset(self)->Series
polars.series.datetime.DateTimeNameSpace.epoch(self,time_unit:EpochTimeUnit='us')->Series
polars.series.datetime.DateTimeNameSpace.hour(self)->Series
polars.series.datetime.DateTimeNameSpace.hours(self)->Series
polars.series.datetime.DateTimeNameSpace.is_leap_year(self)->Series
polars.series.datetime.DateTimeNameSpace.iso_year(self)->Series
polars.series.datetime.DateTimeNameSpace.max(self)->dt.date | dt.datetime | dt.timedelta | None
polars.series.datetime.DateTimeNameSpace.mean(self)->dt.date | dt.datetime | None
polars.series.datetime.DateTimeNameSpace.median(self)->dt.date | dt.datetime | dt.timedelta | None
polars.series.datetime.DateTimeNameSpace.microsecond(self)->Series
polars.series.datetime.DateTimeNameSpace.microseconds(self)->Series
polars.series.datetime.DateTimeNameSpace.millisecond(self)->Series
polars.series.datetime.DateTimeNameSpace.milliseconds(self)->Series
polars.series.datetime.DateTimeNameSpace.min(self)->dt.date | dt.datetime | dt.timedelta | None
polars.series.datetime.DateTimeNameSpace.minute(self)->Series
polars.series.datetime.DateTimeNameSpace.minutes(self)->Series
polars.series.datetime.DateTimeNameSpace.month(self)->Series
polars.series.datetime.DateTimeNameSpace.month_end(self)->Series
polars.series.datetime.DateTimeNameSpace.month_start(self)->Series
polars.series.datetime.DateTimeNameSpace.nanosecond(self)->Series
polars.series.datetime.DateTimeNameSpace.nanoseconds(self)->Series
polars.series.datetime.DateTimeNameSpace.offset_by(self,by:str)->Series
polars.series.datetime.DateTimeNameSpace.ordinal_day(self)->Series
polars.series.datetime.DateTimeNameSpace.quarter(self)->Series
polars.series.datetime.DateTimeNameSpace.replace_time_zone(self,time_zone:str|None,*,use_earliest:bool|None=None)->Series
polars.series.datetime.DateTimeNameSpace.round(self,every:str|dt.timedelta,offset:str|dt.timedelta|None=None)->Series
polars.series.datetime.DateTimeNameSpace.second(self,*,fractional:bool=False)->Series
polars.series.datetime.DateTimeNameSpace.seconds(self)->Series
polars.series.datetime.DateTimeNameSpace.strftime(self,format:str)->Series
polars.series.datetime.DateTimeNameSpace.time(self)->Series
polars.series.datetime.DateTimeNameSpace.timestamp(self,time_unit:TimeUnit='us')->Series
polars.series.datetime.DateTimeNameSpace.to_string(self,format:str)->Series
polars.series.datetime.DateTimeNameSpace.truncate(self,every:str|dt.timedelta,offset:str|dt.timedelta|None=None,*,use_earliest:bool|None=None)->Series
polars.series.datetime.DateTimeNameSpace.week(self)->Series
polars.series.datetime.DateTimeNameSpace.weekday(self)->Series
polars.series.datetime.DateTimeNameSpace.with_time_unit(self,time_unit:TimeUnit)->Series
polars.series.datetime.DateTimeNameSpace.year(self)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/series/struct.py----------------------------------------
polars.series.struct.StructNameSpace(self,series:Series)
polars.series.struct.StructNameSpace.__getitem__(self,item:int|str)->Series
polars.series.struct.StructNameSpace.__init__(self,series:Series)
polars.series.struct.StructNameSpace._ipython_key_completions_(self)->list[str]
polars.series.struct.StructNameSpace.field(self,name:str)->Series
polars.series.struct.StructNameSpace.fields(self)->list[str]
polars.series.struct.StructNameSpace.rename_fields(self,names:Sequence[str])->Series
polars.series.struct.StructNameSpace.schema(self)->dict[str, PolarsDataType]
polars.series.struct.StructNameSpace.unnest(self)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/series/array.py----------------------------------------
polars.series.array.ArrayNameSpace(self,series:Series)
polars.series.array.ArrayNameSpace.__init__(self,series:Series)
polars.series.array.ArrayNameSpace.max(self)->Series
polars.series.array.ArrayNameSpace.min(self)->Series
polars.series.array.ArrayNameSpace.sum(self)->Series
polars.series.array.ArrayNameSpace.unique(self,*,maintain_order:bool=False)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/series/string.py----------------------------------------
A:polars.series.string.s->wrap_s(self._s)
polars.series.string.StringNameSpace(self,series:Series)
polars.series.string.StringNameSpace.__init__(self,series:Series)
polars.series.string.StringNameSpace.concat(self,delimiter:str='-')->Series
polars.series.string.StringNameSpace.contains(self,pattern:str|Expr,*,literal:bool=False,strict:bool=True)->Series
polars.series.string.StringNameSpace.count_match(self,pattern:str)->Series
polars.series.string.StringNameSpace.decode(self,encoding:TransferEncoding,*,strict:bool=True)->Series
polars.series.string.StringNameSpace.encode(self,encoding:TransferEncoding)->Series
polars.series.string.StringNameSpace.ends_with(self,suffix:str|Expr)->Series
polars.series.string.StringNameSpace.explode(self)->Series
polars.series.string.StringNameSpace.extract(self,pattern:str,group_index:int=1)->Series
polars.series.string.StringNameSpace.extract_all(self,pattern:str|Series)->Series
polars.series.string.StringNameSpace.json_extract(self,dtype:PolarsDataType|None=None,infer_schema_length:int|None=100)->Series
polars.series.string.StringNameSpace.json_path_match(self,json_path:str)->Series
polars.series.string.StringNameSpace.lengths(self)->Series
polars.series.string.StringNameSpace.ljust(self,width:int,fill_char:str='')->Series
polars.series.string.StringNameSpace.lstrip(self,characters:str|None=None)->Series
polars.series.string.StringNameSpace.n_chars(self)->Series
polars.series.string.StringNameSpace.parse_int(self,radix:int=2,*,strict:bool=True)->Series
polars.series.string.StringNameSpace.replace(self,pattern:str,value:str,*,literal:bool=False,n:int=1)->Series
polars.series.string.StringNameSpace.replace_all(self,pattern:str,value:str,*,literal:bool=False)->Series
polars.series.string.StringNameSpace.rjust(self,width:int,fill_char:str='')->Series
polars.series.string.StringNameSpace.rstrip(self,characters:str|None=None)->Series
polars.series.string.StringNameSpace.slice(self,offset:int,length:int|None=None)->Series
polars.series.string.StringNameSpace.split(self,by:str,*,inclusive:bool=False)->Series
polars.series.string.StringNameSpace.split_exact(self,by:str,n:int,*,inclusive:bool=False)->Series
polars.series.string.StringNameSpace.splitn(self,by:str,n:int)->Series
polars.series.string.StringNameSpace.starts_with(self,prefix:str|Expr)->Series
polars.series.string.StringNameSpace.strip(self,characters:str|None=None)->Series
polars.series.string.StringNameSpace.strptime(self,dtype:PolarsTemporalType,format:str|None=None,*,strict:bool=True,exact:bool=True,cache:bool=True,utc:bool|None=None)->Series
polars.series.string.StringNameSpace.to_date(self,format:str|None=None,*,strict:bool=True,exact:bool=True,cache:bool=True)->Series
polars.series.string.StringNameSpace.to_datetime(self,format:str|None=None,*,time_unit:TimeUnit|None=None,time_zone:str|None=None,strict:bool=True,exact:bool=True,cache:bool=True,utc:bool|None=None)->Series
polars.series.string.StringNameSpace.to_decimal(self,inference_length:int=100)->Series
polars.series.string.StringNameSpace.to_lowercase(self)->Series
polars.series.string.StringNameSpace.to_time(self,format:str|None=None,*,strict:bool=True,cache:bool=True)->Series
polars.series.string.StringNameSpace.to_titlecase(self)->Series
polars.series.string.StringNameSpace.to_uppercase(self)->Series
polars.series.string.StringNameSpace.zfill(self,alignment:int)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/series/binary.py----------------------------------------
polars.series.binary.BinaryNameSpace(self,series:Series)
polars.series.binary.BinaryNameSpace.__init__(self,series:Series)
polars.series.binary.BinaryNameSpace.contains(self,literal:bytes)->Series
polars.series.binary.BinaryNameSpace.decode(self,encoding:TransferEncoding,*,strict:bool=True)->Series
polars.series.binary.BinaryNameSpace.encode(self,encoding:TransferEncoding)->Series
polars.series.binary.BinaryNameSpace.ends_with(self,suffix:bytes)->Series
polars.series.binary.BinaryNameSpace.starts_with(self,prefix:bytes)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/series/_numpy.py----------------------------------------
A:polars.series._numpy.obj->input_array.view(cls)
A:polars.series._numpy.self.owned_series->getattr(obj, 'owned_series', None)
A:polars.series._numpy.ptr_ctype->ctypes.cast(ptr, ctypes.POINTER(ptr_type))
polars.series._numpy.SeriesView(cls,input_array:np.ndarray[Any,Any],owned_series:Series)
polars.series._numpy.SeriesView.__array_finalize__(self,obj:Any)->None
polars.series._numpy.SeriesView.__new__(cls,input_array:np.ndarray[Any,Any],owned_series:Series)
polars.series._numpy._ptr_to_numpy(ptr:int,len:int,ptr_type:Any)->np.ndarray[Any, Any]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/lazyframe/frame.py----------------------------------------
A:polars.lazyframe.frame.T->TypeVar('T')
A:polars.lazyframe.frame.P->ParamSpec('P')
A:polars.lazyframe.frame.self->self.with_row_count(row_count_name).with_row_count(row_count_name)
A:polars.lazyframe.frame.processed_null_values->_process_null_values(null_values)
A:polars.lazyframe.frame.self._ldf->polars.polars.PyLazyFrame.scan_from_python_function_arrow_schema(list(schema), scan_fn, pyarrow)
A:polars.lazyframe.frame.scan->scan.with_row_count(row_count_name, row_count_offset).with_row_count(row_count_name, row_count_offset)
A:polars.lazyframe.frame.source->normalise_filepath(source)
A:polars.lazyframe.frame.bytes->StringIO(json).getvalue().encode()
A:polars.lazyframe.frame.file->normalise_filepath(file)
A:polars.lazyframe.frame.cols_str->'{} col{}'.format(width, '' if width == 1 else 's')
A:polars.lazyframe.frame.schema_str->(', ' if width == 2 else ' … ').join((f'"{k}": {v}' for (k, v) in schema_max_2))
A:polars.lazyframe.frame.dot->self._ldf.optimization_toggle(type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, slice_pushdown, comm_subplan_elim, comm_subexpr_elim, streaming).to_dot(optimized)
A:polars.lazyframe.frame.svg->polars.dependencies.subprocess.check_output(['dot', '-Nshape=box', '-Tsvg'], input=f'{dot}'.encode())
A:polars.lazyframe.frame.insert->self.with_row_count(row_count_name).with_row_count(row_count_name).explain(optimized=False).replace('\n', '<p></p>')
A:polars.lazyframe.frame.json_bytes->buf.getvalue()
A:polars.lazyframe.frame.json_str->buf.getvalue().decode('utf8')
A:polars.lazyframe.frame.ldf->self.with_row_count(row_count_name).with_row_count(row_count_name)._ldf.optimization_toggle(type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, slice_pushdown, comm_subplan_elim, comm_subexpr_elim, streaming)
A:polars.lazyframe.frame._ldf->self.with_row_count(row_count_name).with_row_count(row_count_name)._ldf.optimization_toggle(type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, slice_pushdown, comm_subplan_elim, comm_subexpr_elim, streaming)
A:polars.lazyframe.frame.graph->polars.dependencies.subprocess.check_output(['dot', '-Nshape=box', '-T' + output_type], input=f'{dot}'.encode())
A:polars.lazyframe.frame.img->matplotlib.image.imread(BytesIO(graph))
A:polars.lazyframe.frame.by->parse_as_list_of_expressions(by)
A:polars.lazyframe.frame.(df, timings)->self.with_row_count(row_count_name).with_row_count(row_count_name)._ldf.optimization_toggle(type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, slice_pushdown, comm_subplan_elim, comm_subexpr_elim, streaming).profile()
A:polars.lazyframe.frame.(fig, ax)->matplotlib.pyplot.subplots(1, figsize=figsize)
A:polars.lazyframe.frame.timings_->timings_.with_columns(F.col('node').str.slice(0, truncate_nodes) + '...').with_columns(F.col('node').str.slice(0, truncate_nodes) + '...')
A:polars.lazyframe.frame.lf->self.with_row_count(row_count_name).with_row_count(row_count_name)._ldf.optimization_toggle(type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, slice_pushdown, comm_subplan_elim, comm_subexpr_elim, streaming)
A:polars.lazyframe.frame.predicate->parse_as_expression(predicate)
A:polars.lazyframe.frame.structify->bool(int(os.environ.get('POLARS_AUTO_STRUCTIFY', 0)))
A:polars.lazyframe.frame.first_input->named_exprs.pop('exprs')
A:polars.lazyframe.frame.pyexprs->parse_as_list_of_expressions(*exprs, **named_exprs, __structify=structify)
A:polars.lazyframe.frame.exprs->parse_as_list_of_expressions(by, *more_by)
A:polars.lazyframe.frame.lgb->self.with_row_count(row_count_name).with_row_count(row_count_name)._ldf.groupby_dynamic(index_column, every, period, offset, truncate, include_boundaries, closed, pyexprs_by, start_by, check_sorted)
A:polars.lazyframe.frame.index_column->parse_as_expression(index_column)
A:polars.lazyframe.frame.period->_timedelta_to_pl_duration(period)
A:polars.lazyframe.frame.offset->_timedelta_to_pl_duration(offset)
A:polars.lazyframe.frame.every->_timedelta_to_pl_duration(every)
A:polars.lazyframe.frame.left_on->polars.functions.col(left_on)
A:polars.lazyframe.frame.right_on->polars.functions.col(right_on)
A:polars.lazyframe.frame.pyexprs_left->parse_as_list_of_expressions(left_on)
A:polars.lazyframe.frame.pyexprs_right->parse_as_list_of_expressions(right_on)
A:polars.lazyframe.frame.existing->list(mapping.keys())
A:polars.lazyframe.frame.new->list(mapping.values())
A:polars.lazyframe.frame.fill_value->polars.functions.lit(fill_value)
A:polars.lazyframe.frame.value->polars.functions.lit(value)
A:polars.lazyframe.frame.quantile->parse_as_expression(quantile)
A:polars.lazyframe.frame.columns->parse_as_list_of_expressions(column, *more_columns)
A:polars.lazyframe.frame.subset->list(subset)
A:polars.lazyframe.frame.other->other.with_row_count(row_count_name).with_row_count(row_count_name)
A:polars.lazyframe.frame.result->result.drop(row_count_name).drop(row_count_name)
polars.LazyFrame(self,data:FrameInitTypes|None=None,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,nan_to_null:bool=False)
polars.LazyFrame.__bool__(self)->NoReturn
polars.LazyFrame.__contains__(self,key:str)->bool
polars.LazyFrame.__copy__(self)->Self
polars.LazyFrame.__deepcopy__(self,memo:None=None)->Self
polars.LazyFrame.__getitem__(self,item:int|range|slice)->LazyFrame
polars.LazyFrame.__getstate__(self)->Any
polars.LazyFrame.__repr__(self)->str
polars.LazyFrame.__setstate__(self,state)->None
polars.LazyFrame.__str__(self)->str
polars.LazyFrame._from_pyldf(cls,ldf:PyLazyFrame)->Self
polars.LazyFrame._repr_html_(self)->str
polars.LazyFrame._scan_csv(cls,source:str,*,has_header:bool=True,separator:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:SchemaDict|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,cache:bool=True,with_column_names:Callable[[list[str]],list[str]]|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,try_parse_dates:bool=False,eol_char:str='\n')->Self
polars.LazyFrame._scan_ipc(cls,source:str|Path,*,n_rows:int|None=None,cache:bool=True,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,object]|None=None,memory_map:bool=True)->Self
polars.LazyFrame._scan_ndjson(cls,source:str,*,infer_schema_length:int|None=None,batch_size:int|None=None,n_rows:int|None=None,low_memory:bool=False,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0)->Self
polars.LazyFrame._scan_parquet(cls,source:str,*,n_rows:int|None=None,cache:bool=True,parallel:ParallelStrategy='auto',rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,object]|None=None,low_memory:bool=False,use_statistics:bool=True)->Self
polars.LazyFrame._scan_python_function(cls,schema:pa.schema|dict[str,PolarsDataType],scan_fn:Any,pyarrow:bool=False)->Self
polars.LazyFrame.approx_unique(self)->Self
polars.LazyFrame.bottom_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],descending:bool|Sequence[bool]=False,nulls_last:bool=False,maintain_order:bool=False)->Self
polars.LazyFrame.cache(self)->Self
polars.LazyFrame.clear(self,n:int=0)->LazyFrame
polars.LazyFrame.clone(self)->Self
polars.LazyFrame.collect(self,*,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,streaming:bool=False)->DataFrame
polars.LazyFrame.columns(self)->list[str]
polars.LazyFrame.drop(self,columns:str|Collection[str],*more_columns:str)->Self
polars.LazyFrame.drop_nulls(self,subset:str|Collection[str]|None=None)->Self
polars.LazyFrame.dtypes(self)->list[PolarsDataType]
polars.LazyFrame.explain(self,*,optimized:bool=True,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,streaming:bool=False)->str
polars.LazyFrame.explode(self,columns:str|Sequence[str]|Expr|Sequence[Expr],*more_columns:str|Expr)->Self
polars.LazyFrame.fetch(self,n_rows:int=500,*,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,streaming:bool=False)->DataFrame
polars.LazyFrame.fill_nan(self,value:int|float|Expr|None)->Self
polars.LazyFrame.fill_null(self,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None,*,matches_supertype:bool=True)->Self
polars.LazyFrame.filter(self,predicate:IntoExpr)->Self
polars.LazyFrame.first(self)->Self
polars.LazyFrame.from_json(cls,json:str)->Self
polars.LazyFrame.groupby(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,maintain_order:bool=False)->LazyGroupBy
polars.LazyFrame.groupby_dynamic(self,index_column:IntoExpr,*,every:str|timedelta,period:str|timedelta|None=None,offset:str|timedelta|None=None,truncate:bool=True,include_boundaries:bool=False,closed:ClosedInterval='left',by:IntoExpr|Iterable[IntoExpr]|None=None,start_by:StartBy='window',check_sorted:bool=True)->LazyGroupBy
polars.LazyFrame.groupby_rolling(self,index_column:IntoExpr,*,period:str|timedelta,offset:str|timedelta|None=None,closed:ClosedInterval='right',by:IntoExpr|Iterable[IntoExpr]|None=None,check_sorted:bool=True)->LazyGroupBy
polars.LazyFrame.head(self,n:int=5)->Self
polars.LazyFrame.inspect(self,fmt:str='{}')->Self
polars.LazyFrame.interpolate(self)->Self
polars.LazyFrame.join(self,other:LazyFrame,on:str|Expr|Sequence[str|Expr]|None=None,how:JoinStrategy='inner',*,left_on:str|Expr|Sequence[str|Expr]|None=None,right_on:str|Expr|Sequence[str|Expr]|None=None,suffix:str='_right',validate:JoinValidation='m:m',allow_parallel:bool=True,force_parallel:bool=False)->Self
polars.LazyFrame.join_asof(self,other:LazyFrame,*,left_on:str|None|Expr=None,right_on:str|None|Expr=None,on:str|None|Expr=None,by_left:str|Sequence[str]|None=None,by_right:str|Sequence[str]|None=None,by:str|Sequence[str]|None=None,strategy:AsofJoinStrategy='backward',suffix:str='_right',tolerance:str|int|float|None=None,allow_parallel:bool=True,force_parallel:bool=False)->Self
polars.LazyFrame.last(self)->Self
polars.LazyFrame.lazy(self)->Self
polars.LazyFrame.limit(self,n:int=5)->Self
polars.LazyFrame.map(self,function:Callable[[DataFrame],DataFrame],*,predicate_pushdown:bool=True,projection_pushdown:bool=True,slice_pushdown:bool=True,no_optimizations:bool=False,schema:None|SchemaDict=None,validate_output_schema:bool=True,streamable:bool=False)->Self
polars.LazyFrame.max(self)->Self
polars.LazyFrame.mean(self)->Self
polars.LazyFrame.median(self)->Self
polars.LazyFrame.melt(self,id_vars:str|list[str]|None=None,value_vars:str|list[str]|None=None,variable_name:str|None=None,value_name:str|None=None,*,streamable:bool=True)->Self
polars.LazyFrame.merge_sorted(self,other:LazyFrame,key:str)->Self
polars.LazyFrame.min(self)->Self
polars.LazyFrame.null_count(self)->Self
polars.LazyFrame.pipe(self,function:Callable[Concatenate[LazyFrame,P],T],*args:P.args,**kwargs:P.kwargs)->T
polars.LazyFrame.profile(self,*,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,show_plot:bool=False,truncate_nodes:int=0,figsize:tuple[int,int]=(18,8),streaming:bool=False)->tuple[DataFrame, DataFrame]
polars.LazyFrame.quantile(self,quantile:float|Expr,interpolation:RollingInterpolationMethod='nearest')->Self
polars.LazyFrame.read_json(cls,file:str|Path|IOBase)->Self
polars.LazyFrame.rename(self,mapping:dict[str,str])->Self
polars.LazyFrame.reverse(self)->Self
polars.LazyFrame.schema(self)->SchemaDict
polars.LazyFrame.select(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->Self
polars.LazyFrame.set_sorted(self,column:str|Iterable[str],*more_columns:str,descending:bool=False)->Self
polars.LazyFrame.shift(self,periods:int)->Self
polars.LazyFrame.shift_and_fill(self,fill_value:Expr|int|str|float,*,periods:int=1)->Self
polars.LazyFrame.show_graph(self,*,optimized:bool=True,show:bool=True,output_path:str|Path|None=None,raw_output:bool=False,figsize:tuple[float,float]=(16.0,12.0),type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,streaming:bool=False)->str | None
polars.LazyFrame.sink_ipc(self,path:str|Path,*,compression:str|None='zstd',maintain_order:bool=True,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True)->DataFrame
polars.LazyFrame.sink_parquet(self,path:str|Path,*,compression:str='zstd',compression_level:int|None=None,statistics:bool=False,row_group_size:int|None=None,data_pagesize_limit:int|None=None,maintain_order:bool=True,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True)->DataFrame
polars.LazyFrame.slice(self,offset:int,length:int|None=None)->Self
polars.LazyFrame.sort(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,descending:bool|Sequence[bool]=False,nulls_last:bool=False,maintain_order:bool=False)->Self
polars.LazyFrame.std(self,ddof:int=1)->Self
polars.LazyFrame.sum(self)->Self
polars.LazyFrame.tail(self,n:int=5)->Self
polars.LazyFrame.take_every(self,n:int)->Self
polars.LazyFrame.top_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],descending:bool|Sequence[bool]=False,nulls_last:bool=False,maintain_order:bool=False)->Self
polars.LazyFrame.unique(self,subset:str|Sequence[str]|None=None,*,keep:UniqueKeepStrategy='any',maintain_order:bool=False)->Self
polars.LazyFrame.unnest(self,columns:str|Sequence[str],*more_columns:str)->Self
polars.LazyFrame.update(self,other:LazyFrame,on:str|Sequence[str]|None=None,how:Literal['left','inner']='left')->Self
polars.LazyFrame.var(self,ddof:int=1)->Self
polars.LazyFrame.width(self)->int
polars.LazyFrame.with_columns(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->Self
polars.LazyFrame.with_context(self,other:Self|list[Self])->Self
polars.LazyFrame.with_row_count(self,name:str='row_nr',offset:int=0)->Self
polars.LazyFrame.write_json(self,file:IOBase|str|Path|None=None)->str | None
polars.lazyframe.frame.LazyFrame(self,data:FrameInitTypes|None=None,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,nan_to_null:bool=False)
polars.lazyframe.frame.LazyFrame.__bool__(self)->NoReturn
polars.lazyframe.frame.LazyFrame.__contains__(self,key:str)->bool
polars.lazyframe.frame.LazyFrame.__copy__(self)->Self
polars.lazyframe.frame.LazyFrame.__deepcopy__(self,memo:None=None)->Self
polars.lazyframe.frame.LazyFrame.__getitem__(self,item:int|range|slice)->LazyFrame
polars.lazyframe.frame.LazyFrame.__getstate__(self)->Any
polars.lazyframe.frame.LazyFrame.__init__(self,data:FrameInitTypes|None=None,schema:SchemaDefinition|None=None,*,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,nan_to_null:bool=False)
polars.lazyframe.frame.LazyFrame.__repr__(self)->str
polars.lazyframe.frame.LazyFrame.__setstate__(self,state)->None
polars.lazyframe.frame.LazyFrame.__str__(self)->str
polars.lazyframe.frame.LazyFrame._from_pyldf(cls,ldf:PyLazyFrame)->Self
polars.lazyframe.frame.LazyFrame._repr_html_(self)->str
polars.lazyframe.frame.LazyFrame._scan_csv(cls,source:str,*,has_header:bool=True,separator:str=',',comment_char:str|None=None,quote_char:str|None='"',skip_rows:int=0,dtypes:SchemaDict|None=None,null_values:str|Sequence[str]|dict[str,str]|None=None,missing_utf8_is_empty_string:bool=False,ignore_errors:bool=False,cache:bool=True,with_column_names:Callable[[list[str]],list[str]]|None=None,infer_schema_length:int|None=N_INFER_DEFAULT,n_rows:int|None=None,encoding:CsvEncoding='utf8',low_memory:bool=False,rechunk:bool=True,skip_rows_after_header:int=0,row_count_name:str|None=None,row_count_offset:int=0,try_parse_dates:bool=False,eol_char:str='\n')->Self
polars.lazyframe.frame.LazyFrame._scan_ipc(cls,source:str|Path,*,n_rows:int|None=None,cache:bool=True,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,object]|None=None,memory_map:bool=True)->Self
polars.lazyframe.frame.LazyFrame._scan_ndjson(cls,source:str,*,infer_schema_length:int|None=None,batch_size:int|None=None,n_rows:int|None=None,low_memory:bool=False,rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0)->Self
polars.lazyframe.frame.LazyFrame._scan_parquet(cls,source:str,*,n_rows:int|None=None,cache:bool=True,parallel:ParallelStrategy='auto',rechunk:bool=True,row_count_name:str|None=None,row_count_offset:int=0,storage_options:dict[str,object]|None=None,low_memory:bool=False,use_statistics:bool=True)->Self
polars.lazyframe.frame.LazyFrame._scan_python_function(cls,schema:pa.schema|dict[str,PolarsDataType],scan_fn:Any,pyarrow:bool=False)->Self
polars.lazyframe.frame.LazyFrame.approx_unique(self)->Self
polars.lazyframe.frame.LazyFrame.bottom_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],descending:bool|Sequence[bool]=False,nulls_last:bool=False,maintain_order:bool=False)->Self
polars.lazyframe.frame.LazyFrame.cache(self)->Self
polars.lazyframe.frame.LazyFrame.clear(self,n:int=0)->LazyFrame
polars.lazyframe.frame.LazyFrame.clone(self)->Self
polars.lazyframe.frame.LazyFrame.collect(self,*,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,streaming:bool=False)->DataFrame
polars.lazyframe.frame.LazyFrame.columns(self)->list[str]
polars.lazyframe.frame.LazyFrame.drop(self,columns:str|Collection[str],*more_columns:str)->Self
polars.lazyframe.frame.LazyFrame.drop_nulls(self,subset:str|Collection[str]|None=None)->Self
polars.lazyframe.frame.LazyFrame.dtypes(self)->list[PolarsDataType]
polars.lazyframe.frame.LazyFrame.explain(self,*,optimized:bool=True,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,streaming:bool=False)->str
polars.lazyframe.frame.LazyFrame.explode(self,columns:str|Sequence[str]|Expr|Sequence[Expr],*more_columns:str|Expr)->Self
polars.lazyframe.frame.LazyFrame.fetch(self,n_rows:int=500,*,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,streaming:bool=False)->DataFrame
polars.lazyframe.frame.LazyFrame.fill_nan(self,value:int|float|Expr|None)->Self
polars.lazyframe.frame.LazyFrame.fill_null(self,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None,*,matches_supertype:bool=True)->Self
polars.lazyframe.frame.LazyFrame.filter(self,predicate:IntoExpr)->Self
polars.lazyframe.frame.LazyFrame.first(self)->Self
polars.lazyframe.frame.LazyFrame.from_json(cls,json:str)->Self
polars.lazyframe.frame.LazyFrame.groupby(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,maintain_order:bool=False)->LazyGroupBy
polars.lazyframe.frame.LazyFrame.groupby_dynamic(self,index_column:IntoExpr,*,every:str|timedelta,period:str|timedelta|None=None,offset:str|timedelta|None=None,truncate:bool=True,include_boundaries:bool=False,closed:ClosedInterval='left',by:IntoExpr|Iterable[IntoExpr]|None=None,start_by:StartBy='window',check_sorted:bool=True)->LazyGroupBy
polars.lazyframe.frame.LazyFrame.groupby_rolling(self,index_column:IntoExpr,*,period:str|timedelta,offset:str|timedelta|None=None,closed:ClosedInterval='right',by:IntoExpr|Iterable[IntoExpr]|None=None,check_sorted:bool=True)->LazyGroupBy
polars.lazyframe.frame.LazyFrame.head(self,n:int=5)->Self
polars.lazyframe.frame.LazyFrame.inspect(self,fmt:str='{}')->Self
polars.lazyframe.frame.LazyFrame.interpolate(self)->Self
polars.lazyframe.frame.LazyFrame.join(self,other:LazyFrame,on:str|Expr|Sequence[str|Expr]|None=None,how:JoinStrategy='inner',*,left_on:str|Expr|Sequence[str|Expr]|None=None,right_on:str|Expr|Sequence[str|Expr]|None=None,suffix:str='_right',validate:JoinValidation='m:m',allow_parallel:bool=True,force_parallel:bool=False)->Self
polars.lazyframe.frame.LazyFrame.join_asof(self,other:LazyFrame,*,left_on:str|None|Expr=None,right_on:str|None|Expr=None,on:str|None|Expr=None,by_left:str|Sequence[str]|None=None,by_right:str|Sequence[str]|None=None,by:str|Sequence[str]|None=None,strategy:AsofJoinStrategy='backward',suffix:str='_right',tolerance:str|int|float|None=None,allow_parallel:bool=True,force_parallel:bool=False)->Self
polars.lazyframe.frame.LazyFrame.last(self)->Self
polars.lazyframe.frame.LazyFrame.lazy(self)->Self
polars.lazyframe.frame.LazyFrame.limit(self,n:int=5)->Self
polars.lazyframe.frame.LazyFrame.map(self,function:Callable[[DataFrame],DataFrame],*,predicate_pushdown:bool=True,projection_pushdown:bool=True,slice_pushdown:bool=True,no_optimizations:bool=False,schema:None|SchemaDict=None,validate_output_schema:bool=True,streamable:bool=False)->Self
polars.lazyframe.frame.LazyFrame.max(self)->Self
polars.lazyframe.frame.LazyFrame.mean(self)->Self
polars.lazyframe.frame.LazyFrame.median(self)->Self
polars.lazyframe.frame.LazyFrame.melt(self,id_vars:str|list[str]|None=None,value_vars:str|list[str]|None=None,variable_name:str|None=None,value_name:str|None=None,*,streamable:bool=True)->Self
polars.lazyframe.frame.LazyFrame.merge_sorted(self,other:LazyFrame,key:str)->Self
polars.lazyframe.frame.LazyFrame.min(self)->Self
polars.lazyframe.frame.LazyFrame.null_count(self)->Self
polars.lazyframe.frame.LazyFrame.pipe(self,function:Callable[Concatenate[LazyFrame,P],T],*args:P.args,**kwargs:P.kwargs)->T
polars.lazyframe.frame.LazyFrame.profile(self,*,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,show_plot:bool=False,truncate_nodes:int=0,figsize:tuple[int,int]=(18,8),streaming:bool=False)->tuple[DataFrame, DataFrame]
polars.lazyframe.frame.LazyFrame.quantile(self,quantile:float|Expr,interpolation:RollingInterpolationMethod='nearest')->Self
polars.lazyframe.frame.LazyFrame.read_json(cls,file:str|Path|IOBase)->Self
polars.lazyframe.frame.LazyFrame.rename(self,mapping:dict[str,str])->Self
polars.lazyframe.frame.LazyFrame.reverse(self)->Self
polars.lazyframe.frame.LazyFrame.schema(self)->SchemaDict
polars.lazyframe.frame.LazyFrame.select(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->Self
polars.lazyframe.frame.LazyFrame.set_sorted(self,column:str|Iterable[str],*more_columns:str,descending:bool=False)->Self
polars.lazyframe.frame.LazyFrame.shift(self,periods:int)->Self
polars.lazyframe.frame.LazyFrame.shift_and_fill(self,fill_value:Expr|int|str|float,*,periods:int=1)->Self
polars.lazyframe.frame.LazyFrame.show_graph(self,*,optimized:bool=True,show:bool=True,output_path:str|Path|None=None,raw_output:bool=False,figsize:tuple[float,float]=(16.0,12.0),type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,streaming:bool=False)->str | None
polars.lazyframe.frame.LazyFrame.sink_ipc(self,path:str|Path,*,compression:str|None='zstd',maintain_order:bool=True,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True)->DataFrame
polars.lazyframe.frame.LazyFrame.sink_parquet(self,path:str|Path,*,compression:str='zstd',compression_level:int|None=None,statistics:bool=False,row_group_size:int|None=None,data_pagesize_limit:int|None=None,maintain_order:bool=True,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True)->DataFrame
polars.lazyframe.frame.LazyFrame.slice(self,offset:int,length:int|None=None)->Self
polars.lazyframe.frame.LazyFrame.sort(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,descending:bool|Sequence[bool]=False,nulls_last:bool=False,maintain_order:bool=False)->Self
polars.lazyframe.frame.LazyFrame.std(self,ddof:int=1)->Self
polars.lazyframe.frame.LazyFrame.sum(self)->Self
polars.lazyframe.frame.LazyFrame.tail(self,n:int=5)->Self
polars.lazyframe.frame.LazyFrame.take_every(self,n:int)->Self
polars.lazyframe.frame.LazyFrame.top_k(self,k:int,*,by:IntoExpr|Iterable[IntoExpr],descending:bool|Sequence[bool]=False,nulls_last:bool=False,maintain_order:bool=False)->Self
polars.lazyframe.frame.LazyFrame.unique(self,subset:str|Sequence[str]|None=None,*,keep:UniqueKeepStrategy='any',maintain_order:bool=False)->Self
polars.lazyframe.frame.LazyFrame.unnest(self,columns:str|Sequence[str],*more_columns:str)->Self
polars.lazyframe.frame.LazyFrame.update(self,other:LazyFrame,on:str|Sequence[str]|None=None,how:Literal['left','inner']='left')->Self
polars.lazyframe.frame.LazyFrame.var(self,ddof:int=1)->Self
polars.lazyframe.frame.LazyFrame.width(self)->int
polars.lazyframe.frame.LazyFrame.with_columns(self,*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->Self
polars.lazyframe.frame.LazyFrame.with_context(self,other:Self|list[Self])->Self
polars.lazyframe.frame.LazyFrame.with_row_count(self,name:str='row_nr',offset:int=0)->Self
polars.lazyframe.frame.LazyFrame.write_json(self,file:IOBase|str|Path|None=None)->str | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/lazyframe/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/lazyframe/groupby.py----------------------------------------
A:polars.lazyframe.groupby.first_input->named_aggs.pop('aggs')
A:polars.lazyframe.groupby.pyexprs->parse_as_list_of_expressions(*aggs, **named_aggs)
polars.lazyframe.groupby.LazyGroupBy(self,lgb:PyLazyGroupBy)
polars.lazyframe.groupby.LazyGroupBy.__init__(self,lgb:PyLazyGroupBy)
polars.lazyframe.groupby.LazyGroupBy.agg(self,*aggs:IntoExpr|Iterable[IntoExpr],**named_aggs:IntoExpr)->LazyFrame
polars.lazyframe.groupby.LazyGroupBy.all(self)->LazyFrame
polars.lazyframe.groupby.LazyGroupBy.apply(self,function:Callable[[DataFrame],DataFrame],schema:SchemaDict|None)->LazyFrame
polars.lazyframe.groupby.LazyGroupBy.count(self)->LazyFrame
polars.lazyframe.groupby.LazyGroupBy.first(self)->LazyFrame
polars.lazyframe.groupby.LazyGroupBy.head(self,n:int=5)->LazyFrame
polars.lazyframe.groupby.LazyGroupBy.last(self)->LazyFrame
polars.lazyframe.groupby.LazyGroupBy.max(self)->LazyFrame
polars.lazyframe.groupby.LazyGroupBy.mean(self)->LazyFrame
polars.lazyframe.groupby.LazyGroupBy.median(self)->LazyFrame
polars.lazyframe.groupby.LazyGroupBy.min(self)->LazyFrame
polars.lazyframe.groupby.LazyGroupBy.n_unique(self)->LazyFrame
polars.lazyframe.groupby.LazyGroupBy.quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest')->LazyFrame
polars.lazyframe.groupby.LazyGroupBy.sum(self)->LazyFrame
polars.lazyframe.groupby.LazyGroupBy.tail(self,n:int=5)->LazyFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/datatypes/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/datatypes/classes.py----------------------------------------
A:polars.datatypes.classes.obj->object.__new__(cls)
A:polars.datatypes.classes.dtype_group->super().__new__(cls, items)
A:polars.datatypes.classes.item->item.base_type().base_type()
A:polars.datatypes.classes.time_zone->str(time_zone)
A:polars.datatypes.classes.self.inner->polars.datatypes.py_type_to_dtype(inner)
A:polars.datatypes.classes.self.dtype->polars.datatypes.py_type_to_dtype(dtype)
A:polars.datatypes.classes.self.fields->list(fields)
polars.Array(self,width:int,inner:PolarsDataType|PythonDataType=Null)
polars.Array.__eq__(self,other:PolarsDataType)->bool
polars.Array.__hash__(self)->int
polars.Array.__repr__(self)->str
polars.Binary(DataType)
polars.Boolean(DataType)
polars.Categorical(DataType)
polars.DataType(cls,*args:Any,**kwargs:Any)
polars.DataType.__reduce__(self)->Any
polars.DataType._string_repr(self)->str
polars.DataType.base_type(cls)->DataTypeClass
polars.DataType.is_(self,other:PolarsDataType)->bool
polars.DataType.is_nested(self)->bool
polars.DataType.is_not(self,other:PolarsDataType)->bool
polars.DataTypeClass(type)
polars.DataTypeClass.__repr__(cls)->str
polars.DataTypeClass._string_repr(cls)->str
polars.DataTypeClass.base_type(cls)->PolarsDataType
polars.DataTypeClass.is_(cls,other:PolarsDataType)->bool
polars.DataTypeClass.is_nested(self)->bool
polars.DataTypeClass.is_not(cls,other:PolarsDataType)->bool
polars.DataTypeGroup(cls,items:Iterable[DataType|DataTypeClass],*,match_base_type:bool=True)
polars.DataTypeGroup.__contains__(self,item:Any)->bool
polars.Date(TemporalType)
polars.Datetime(self,time_unit:TimeUnit|None='us',time_zone:str|timezone|None=None)
polars.Datetime.__eq__(self,other:PolarsDataType)->bool
polars.Datetime.__hash__(self)->int
polars.Datetime.__repr__(self)->str
polars.Decimal(self,scale:int,precision:int|None=None)
polars.Decimal.__eq__(self,other:PolarsDataType)->bool
polars.Decimal.__hash__(self)->int
polars.Decimal.__repr__(self)->str
polars.Duration(self,time_unit:TimeUnit='us')
polars.Duration.__eq__(self,other:PolarsDataType)->bool
polars.Duration.__hash__(self)->int
polars.Duration.__repr__(self)->str
polars.Field(self,name:str,dtype:PolarsDataType)
polars.Field.__eq__(self,other:Field)->bool
polars.Field.__hash__(self)->int
polars.Field.__repr__(self)->str
polars.Float32(FloatType)
polars.Float64(FloatType)
polars.Int16(IntegralType)
polars.Int32(IntegralType)
polars.Int64(IntegralType)
polars.Int8(IntegralType)
polars.List(self,inner:PolarsDataType|PythonDataType)
polars.List.__eq__(self,other:PolarsDataType)->bool
polars.List.__hash__(self)->int
polars.List.__repr__(self)->str
polars.Null(DataType)
polars.Object(DataType)
polars.Struct(self,fields:Sequence[Field]|SchemaDict)
polars.Struct.__eq__(self,other:PolarsDataType)->bool
polars.Struct.__hash__(self)->int
polars.Struct.__iter__(self)->Iterator[tuple[str, PolarsDataType]]
polars.Struct.__repr__(self)->str
polars.Struct.to_schema(self)->SchemaDict | None
polars.Time(TemporalType)
polars.UInt16(IntegralType)
polars.UInt32(IntegralType)
polars.UInt64(IntegralType)
polars.UInt8(IntegralType)
polars.Unknown(DataType)
polars.Utf8(DataType)
polars.datatypes.FractionalType(NumericType)
polars.datatypes.IntegralType(NumericType)
polars.datatypes.NumericType(DataType)
polars.datatypes.TemporalType(DataType)
polars.datatypes.classes.Array(self,width:int,inner:PolarsDataType|PythonDataType=Null)
polars.datatypes.classes.Array.__eq__(self,other:PolarsDataType)->bool
polars.datatypes.classes.Array.__hash__(self)->int
polars.datatypes.classes.Array.__init__(self,width:int,inner:PolarsDataType|PythonDataType=Null)
polars.datatypes.classes.Array.__repr__(self)->str
polars.datatypes.classes.Binary(DataType)
polars.datatypes.classes.Boolean(DataType)
polars.datatypes.classes.Categorical(DataType)
polars.datatypes.classes.DataType(cls,*args:Any,**kwargs:Any)
polars.datatypes.classes.DataType.__new__(cls,*args:Any,**kwargs:Any)
polars.datatypes.classes.DataType.__reduce__(self)->Any
polars.datatypes.classes.DataType._string_repr(self)->str
polars.datatypes.classes.DataType.base_type(cls)->DataTypeClass
polars.datatypes.classes.DataType.is_(self,other:PolarsDataType)->bool
polars.datatypes.classes.DataType.is_nested(self)->bool
polars.datatypes.classes.DataType.is_not(self,other:PolarsDataType)->bool
polars.datatypes.classes.DataTypeClass(type)
polars.datatypes.classes.DataTypeClass.__repr__(cls)->str
polars.datatypes.classes.DataTypeClass._string_repr(cls)->str
polars.datatypes.classes.DataTypeClass.base_type(cls)->PolarsDataType
polars.datatypes.classes.DataTypeClass.is_(cls,other:PolarsDataType)->bool
polars.datatypes.classes.DataTypeClass.is_nested(self)->bool
polars.datatypes.classes.DataTypeClass.is_not(cls,other:PolarsDataType)->bool
polars.datatypes.classes.DataTypeGroup(cls,items:Iterable[DataType|DataTypeClass],*,match_base_type:bool=True)
polars.datatypes.classes.DataTypeGroup.__contains__(self,item:Any)->bool
polars.datatypes.classes.DataTypeGroup.__new__(cls,items:Iterable[DataType|DataTypeClass],*,match_base_type:bool=True)
polars.datatypes.classes.Date(TemporalType)
polars.datatypes.classes.Datetime(self,time_unit:TimeUnit|None='us',time_zone:str|timezone|None=None)
polars.datatypes.classes.Datetime.__eq__(self,other:PolarsDataType)->bool
polars.datatypes.classes.Datetime.__hash__(self)->int
polars.datatypes.classes.Datetime.__init__(self,time_unit:TimeUnit|None='us',time_zone:str|timezone|None=None)
polars.datatypes.classes.Datetime.__repr__(self)->str
polars.datatypes.classes.Decimal(self,scale:int,precision:int|None=None)
polars.datatypes.classes.Decimal.__eq__(self,other:PolarsDataType)->bool
polars.datatypes.classes.Decimal.__hash__(self)->int
polars.datatypes.classes.Decimal.__init__(self,scale:int,precision:int|None=None)
polars.datatypes.classes.Decimal.__repr__(self)->str
polars.datatypes.classes.Duration(self,time_unit:TimeUnit='us')
polars.datatypes.classes.Duration.__eq__(self,other:PolarsDataType)->bool
polars.datatypes.classes.Duration.__hash__(self)->int
polars.datatypes.classes.Duration.__init__(self,time_unit:TimeUnit='us')
polars.datatypes.classes.Duration.__repr__(self)->str
polars.datatypes.classes.Field(self,name:str,dtype:PolarsDataType)
polars.datatypes.classes.Field.__eq__(self,other:Field)->bool
polars.datatypes.classes.Field.__hash__(self)->int
polars.datatypes.classes.Field.__init__(self,name:str,dtype:PolarsDataType)
polars.datatypes.classes.Field.__repr__(self)->str
polars.datatypes.classes.Float32(FloatType)
polars.datatypes.classes.Float64(FloatType)
polars.datatypes.classes.FloatType(FractionalType)
polars.datatypes.classes.FractionalType(NumericType)
polars.datatypes.classes.Int16(IntegralType)
polars.datatypes.classes.Int32(IntegralType)
polars.datatypes.classes.Int64(IntegralType)
polars.datatypes.classes.Int8(IntegralType)
polars.datatypes.classes.IntegralType(NumericType)
polars.datatypes.classes.List(self,inner:PolarsDataType|PythonDataType)
polars.datatypes.classes.List.__eq__(self,other:PolarsDataType)->bool
polars.datatypes.classes.List.__hash__(self)->int
polars.datatypes.classes.List.__init__(self,inner:PolarsDataType|PythonDataType)
polars.datatypes.classes.List.__repr__(self)->str
polars.datatypes.classes.NestedType(DataType)
polars.datatypes.classes.NestedType.is_nested(self)->bool
polars.datatypes.classes.Null(DataType)
polars.datatypes.classes.NumericType(DataType)
polars.datatypes.classes.Object(DataType)
polars.datatypes.classes.Struct(self,fields:Sequence[Field]|SchemaDict)
polars.datatypes.classes.Struct.__eq__(self,other:PolarsDataType)->bool
polars.datatypes.classes.Struct.__hash__(self)->int
polars.datatypes.classes.Struct.__init__(self,fields:Sequence[Field]|SchemaDict)
polars.datatypes.classes.Struct.__iter__(self)->Iterator[tuple[str, PolarsDataType]]
polars.datatypes.classes.Struct.__repr__(self)->str
polars.datatypes.classes.Struct.to_schema(self)->SchemaDict | None
polars.datatypes.classes.TemporalType(DataType)
polars.datatypes.classes.Time(TemporalType)
polars.datatypes.classes.UInt16(IntegralType)
polars.datatypes.classes.UInt32(IntegralType)
polars.datatypes.classes.UInt64(IntegralType)
polars.datatypes.classes.UInt8(IntegralType)
polars.datatypes.classes.Unknown(DataType)
polars.datatypes.classes.Utf8(DataType)
polars.datatypes.classes._custom_reconstruct(cls:type[Any],base:type[Any],state:Any)->PolarsDataType | type
polars.datatypes.classes.classinstmethod(classmethod)
polars.datatypes.classes.classinstmethod.__get__(self,instance:Any,type_:type)->Any
polars.datatypes.classes.classproperty(self,method:Callable[...,Any]|None=None)
polars.datatypes.classes.classproperty.__get__(self,instance:Any,cls:type|None=None)->Any
polars.datatypes.classes.classproperty.__init__(self,method:Callable[...,Any]|None=None)
polars.datatypes.classes.classproperty.getter(self,method:Callable[...,Any])->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/datatypes/constructor.py----------------------------------------
A:polars.datatypes.constructor.base_type->dtype.base_type()
A:polars.datatypes.constructor.values->values.astype(np.int64).astype(np.int64)
polars.datatypes.constructor._set_numpy_to_constructor()->None
polars.datatypes.constructor.numpy_type_to_constructor(dtype:type[np.dtype[Any]])->Callable[..., PySeries]
polars.datatypes.constructor.numpy_values_and_dtype(values:np.ndarray[Any,Any])->tuple[np.ndarray[Any, Any], type]
polars.datatypes.constructor.polars_type_to_constructor(dtype:PolarsDataType)->Callable[[str, Sequence[Any], bool], PySeries]
polars.datatypes.constructor.py_type_to_constructor(dtype:type[Any])->Callable[..., PySeries]
polars.datatypes.numpy_type_to_constructor(dtype:type[np.dtype[Any]])->Callable[..., PySeries]
polars.datatypes.numpy_values_and_dtype(values:np.ndarray[Any,Any])->tuple[np.ndarray[Any, Any], type]
polars.datatypes.polars_type_to_constructor(dtype:PolarsDataType)->Callable[[str, Sequence[Any], bool], PySeries]
polars.datatypes.py_type_to_constructor(dtype:type[Any])->Callable[..., PySeries]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/datatypes/constants.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/datatypes/convert.py----------------------------------------
A:polars.datatypes.convert.OptionType->type(Optional[type])
A:polars.datatypes.convert.NoneType->type(None)
A:polars.datatypes.convert.UnionType->type(Union[int, float])
A:polars.datatypes.convert.T->TypeVar('T')
A:polars.datatypes.convert.dtype->polars.dependencies.numpy.dtype(dtype_char)
A:polars.datatypes.convert.DataTypeMappings->_DataTypeMappings()
A:polars.datatypes.convert.data_type->_DataTypeMappings().REPR_TO_DTYPE.get(re.sub('^(?:dataclasses\\.)?InitVar\\[(.+)\\]$', '\\1', data_type), data_type)
A:polars.datatypes.convert.m->re.match('^(\\w+)(?:\\[(.+)\\])?$', dtype_string)
A:polars.datatypes.convert.(dtype_base, subtype)->re.match('^(\\w+)(?:\\[(.+)\\])?$', dtype_string).groups()
A:polars.datatypes.convert.py_type->dtype_to_py_type(dtype)
A:polars.datatypes.convert.el->py_type(el)
polars.datatypes.convert._DataTypeMappings
polars.datatypes.convert._DataTypeMappings.DTYPE_TO_CTYPE(self)->dict[PolarsDataType, Any]
polars.datatypes.convert._DataTypeMappings.DTYPE_TO_FFINAME(self)->dict[PolarsDataType, str]
polars.datatypes.convert._DataTypeMappings.DTYPE_TO_PY_TYPE(self)->dict[PolarsDataType, PythonDataType]
polars.datatypes.convert._DataTypeMappings.NUMPY_KIND_AND_ITEMSIZE_TO_DTYPE(self)->dict[tuple[str, int], PolarsDataType]
polars.datatypes.convert._DataTypeMappings.PY_TYPE_TO_ARROW_TYPE(self)->dict[PythonDataType, pa.lib.DataType]
polars.datatypes.convert._DataTypeMappings.REPR_TO_DTYPE(self)->dict[str, PolarsDataType]
polars.datatypes.convert._map_py_type_to_dtype(python_dtype:PythonDataType|type[object])->PolarsDataType
polars.datatypes.convert.cache(function:Callable[...,T])->T
polars.datatypes.convert.dtype_short_repr_to_dtype(dtype_string:str|None)->PolarsDataType | None
polars.datatypes.convert.dtype_to_ctype(dtype:PolarsDataType)->Any
polars.datatypes.convert.dtype_to_ffiname(dtype:PolarsDataType)->str
polars.datatypes.convert.dtype_to_py_type(dtype:PolarsDataType)->PythonDataType
polars.datatypes.convert.is_polars_dtype(dtype:Any,include_unknown:bool=False)->bool
polars.datatypes.convert.maybe_cast(el:Any,dtype:PolarsDataType,time_unit:TimeUnit|None=None)->Any
polars.datatypes.convert.numpy_char_code_to_dtype(dtype_char:str)->PolarsDataType
polars.datatypes.convert.py_type_to_arrow_type(dtype:PythonDataType)->pa.lib.DataType
polars.datatypes.convert.py_type_to_dtype(data_type:Any,raise_unmatched:bool=True,allow_strings:bool=False)->PolarsDataType | None
polars.datatypes.convert.supported_numpy_char_code(dtype_char:str)->bool
polars.datatypes.convert.unpack_dtypes(*dtypes:PolarsDataType|None,include_compound:bool=False)->set[PolarsDataType]
polars.datatypes.dtype_to_ctype(dtype:PolarsDataType)->Any
polars.datatypes.dtype_to_ffiname(dtype:PolarsDataType)->str
polars.datatypes.dtype_to_py_type(dtype:PolarsDataType)->PythonDataType
polars.datatypes.is_polars_dtype(dtype:Any,include_unknown:bool=False)->bool
polars.datatypes.maybe_cast(el:Any,dtype:PolarsDataType,time_unit:TimeUnit|None=None)->Any
polars.datatypes.numpy_char_code_to_dtype(dtype_char:str)->PolarsDataType
polars.datatypes.py_type_to_arrow_type(dtype:PythonDataType)->pa.lib.DataType
polars.datatypes.py_type_to_dtype(data_type:Any,raise_unmatched:bool=True,allow_strings:bool=False)->PolarsDataType | None
polars.datatypes.supported_numpy_char_code(dtype_char:str)->bool
polars.datatypes.unpack_dtypes(*dtypes:PolarsDataType|None,include_compound:bool=False)->set[PolarsDataType]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/testing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/testing/_private.py----------------------------------------
A:polars.testing._private.out->out.lower().lower()
A:polars.testing._private.val->str(val).lower()
polars.testing._private._to_rust_syntax(df:DataFrame)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/testing/asserts.py----------------------------------------
A:polars.testing.asserts.left->left.sort(by=left.columns).sort(by=left.columns)
A:polars.testing.asserts.right->right.sort(by=left.columns).sort(by=left.columns)
A:polars.testing.asserts.unequal->left.sort(by=left.columns).sort(by=left.columns).ne_missing(right)
A:polars.testing.asserts.can_be_subtracted->hasattr(dtype_to_py_type(left.dtype), '__sub__')
A:polars.testing.asserts.s_diff->(left - right).abs()
A:polars.testing.asserts.error_msg->textwrap.dedent(f'        {obj} are different.\n\n        {detail}\n        [left]:  {left}\n        [right]: {right}        ')
A:polars.testing.asserts.cat_to_str->polars.functions.col(Categorical).cast(str)
A:polars.testing.asserts.cat_to_phys->polars.functions.col(Categorical).to_physical()
polars.testing.assert_frame_equal(left:DataFrame|LazyFrame,right:DataFrame|LazyFrame,*,check_dtype:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,nans_compare_equal:bool=True,check_column_order:bool=True,check_row_order:bool=True)->None
polars.testing.assert_frame_equal_local_categoricals(df_a:DataFrame,df_b:DataFrame)->None
polars.testing.assert_frame_not_equal(left:DataFrame|LazyFrame,right:DataFrame|LazyFrame,*,check_dtype:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,nans_compare_equal:bool=True,check_column_order:bool=True,check_row_order:bool=True)->None
polars.testing.assert_series_equal(left:Series,right:Series,*,check_dtype:bool=True,check_names:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,nans_compare_equal:bool=True)->None
polars.testing.assert_series_not_equal(left:Series,right:Series,*,check_dtype:bool=True,check_names:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,nans_compare_equal:bool=True)->None
polars.testing.asserts._assert_series_inner(left:Series,right:Series,check_dtype:bool,check_exact:bool,nans_compare_equal:bool,atol:float,rtol:float)->None
polars.testing.asserts._assert_series_nested(left:Series,right:Series,check_dtype:bool,check_exact:bool,nans_compare_equal:bool,atol:float,rtol:float)->bool
polars.testing.asserts.assert_frame_equal(left:DataFrame|LazyFrame,right:DataFrame|LazyFrame,*,check_dtype:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,nans_compare_equal:bool=True,check_column_order:bool=True,check_row_order:bool=True)->None
polars.testing.asserts.assert_frame_equal_local_categoricals(df_a:DataFrame,df_b:DataFrame)->None
polars.testing.asserts.assert_frame_not_equal(left:DataFrame|LazyFrame,right:DataFrame|LazyFrame,*,check_dtype:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,nans_compare_equal:bool=True,check_column_order:bool=True,check_row_order:bool=True)->None
polars.testing.asserts.assert_series_equal(left:Series,right:Series,*,check_dtype:bool=True,check_names:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,nans_compare_equal:bool=True)->None
polars.testing.asserts.assert_series_not_equal(left:Series,right:Series,*,check_dtype:bool=True,check_names:bool=True,check_exact:bool=False,rtol:float=1e-05,atol:float=1e-08,nans_compare_equal:bool=True)->None
polars.testing.asserts.is_categorical_dtype(data_type:Any)->bool
polars.testing.asserts.raise_assert_detail(obj:str,detail:str,left:Any,right:Any,exc:AssertionError|None=None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/testing/parametric/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/testing/parametric/strategies.py----------------------------------------
A:polars.testing.parametric.strategies.strategy_bool->booleans()
A:polars.testing.parametric.strategies.strategy_f32->floats(width=32)
A:polars.testing.parametric.strategies.strategy_f64->floats(width=64)
A:polars.testing.parametric.strategies.strategy_i8->integers(min_value=-2 ** 7, max_value=2 ** 7 - 1)
A:polars.testing.parametric.strategies.strategy_i16->integers(min_value=-2 ** 15, max_value=2 ** 15 - 1)
A:polars.testing.parametric.strategies.strategy_i32->integers(min_value=-2 ** 31, max_value=2 ** 31 - 1)
A:polars.testing.parametric.strategies.strategy_i64->integers(min_value=-2 ** 63, max_value=2 ** 63 - 1)
A:polars.testing.parametric.strategies.strategy_u8->integers(min_value=0, max_value=2 ** 8 - 1)
A:polars.testing.parametric.strategies.strategy_u16->integers(min_value=0, max_value=2 ** 16 - 1)
A:polars.testing.parametric.strategies.strategy_u32->integers(min_value=0, max_value=2 ** 32 - 1)
A:polars.testing.parametric.strategies.strategy_u64->integers(min_value=0, max_value=2 ** 64 - 1)
A:polars.testing.parametric.strategies.strategy_ascii->text(max_size=8, alphabet=ascii_letters + digits + punctuation)
A:polars.testing.parametric.strategies.strategy_categorical->text(max_size=2, alphabet=ascii_uppercase)
A:polars.testing.parametric.strategies.strategy_utf8->text(alphabet=characters(max_codepoint=1000, blacklist_categories=('Cs', 'Cc')), max_size=8)
A:polars.testing.parametric.strategies.strategy_datetime_ns->datetimes(min_value=datetime(1677, 9, 22, 0, 12, 43, 145225), max_value=datetime(2262, 4, 11, 23, 47, 16, 854775))
A:polars.testing.parametric.strategies.strategy_datetime_usstrategy_datetime_ms->datetimes(min_value=datetime(1, 1, 1), max_value=datetime(9999, 12, 31, 23, 59, 59, 999000))
A:polars.testing.parametric.strategies.strategy_time->times()
A:polars.testing.parametric.strategies.strategy_date->dates()
A:polars.testing.parametric.strategies.strategy_duration->timedeltas(min_value=timedelta(microseconds=-2 ** 46), max_value=timedelta(microseconds=2 ** 46 - 1))
A:polars.testing.parametric.strategies.strategy_closed->sampled_from(['left', 'right', 'both', 'none'])
A:polars.testing.parametric.strategies.strategy_time_unit->sampled_from(['ns', 'us', 'ms'])
A:polars.testing.parametric.strategies.places->draw(integers(min_value=0, max_value=18))
A:polars.testing.parametric.strategies.fmt->draw(sets(sampled_from(['%m', '%b', '%B', '%d', '%j', '%a', '%A', '%w', '%H', '%I', '%p', '%M', '%S', '%U', '%W', '%%'])))
A:polars.testing.parametric.strategies.scalar_strategies[Decimal]->strategy_decimal()
A:polars.testing.parametric.strategies.strategy_dtypes->list(chain(scalar_strategies.keys(), nested_strategies.keys()))
A:polars.testing.parametric.strategies.strats->list(_get_strategy_dtypes(base_type=True, excluding=Categorical))
A:polars.testing.parametric.strategies.inner_dtype->choice(strats)
A:polars.testing.parametric.strategies.st->create_list_strategy(inner_dtype=inner_dtype.inner, select_from=select_from, min_size=min_size, max_size=max_size)
A:polars.testing.parametric.strategies.ls->lists(elements=st, min_size=min_size, max_size=max_size, unique_by=_flexhash if unique else None)
A:polars.testing.parametric.strategies.ls._dtype->List(inner_dtype)
polars.testing.parametric.create_list_strategy(inner_dtype:PolarsDataType|None,select_from:Sequence[Any]|None=None,size:int|None=None,min_size:int|None=None,max_size:int|None=None,unique:bool=False)->SearchStrategy[list[Any]]
polars.testing.parametric.strategies.StrategyLookup(self,items:Mapping[PolarsDataType,SearchStrategy[Any]|Callable[...,SearchStrategy[Any]]]|None=None)
polars.testing.parametric.strategies.StrategyLookup.__delitem__(self,item:PolarsDataType)->None
polars.testing.parametric.strategies.StrategyLookup.__getitem__(self,item:PolarsDataType)->SearchStrategy[Any]
polars.testing.parametric.strategies.StrategyLookup.__init__(self,items:Mapping[PolarsDataType,SearchStrategy[Any]|Callable[...,SearchStrategy[Any]]]|None=None)
polars.testing.parametric.strategies.StrategyLookup.__iter__(self)->Iterator[PolarsDataType]
polars.testing.parametric.strategies.StrategyLookup.__len__(self)->int
polars.testing.parametric.strategies.StrategyLookup.__or__(self,other:StrategyLookup)->StrategyLookup
polars.testing.parametric.strategies.StrategyLookup.__setitem__(self,item:PolarsDataType,value:SearchStrategy[Any]|Callable[...,SearchStrategy[Any]])->None
polars.testing.parametric.strategies.StrategyLookup.update(self,items:StrategyLookup)->Self
polars.testing.parametric.strategies._flexhash(elem:Any)->int
polars.testing.parametric.strategies._get_strategy_dtypes(base_type:bool=False,excluding:tuple[PolarsDataType]|PolarsDataType|None=None)->list[PolarsDataType]
polars.testing.parametric.strategies.between(draw:DrawFn,type_:type,min_:Any,max_:Any)->Any
polars.testing.parametric.strategies.create_list_strategy(inner_dtype:PolarsDataType|None,select_from:Sequence[Any]|None=None,size:int|None=None,min_size:int|None=None,max_size:int|None=None,unique:bool=False)->SearchStrategy[list[Any]]
polars.testing.parametric.strategies.strategy_datetime_format(draw:DrawFn)->str
polars.testing.parametric.strategies.strategy_decimal(draw:DrawFn)->PyDecimal


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/testing/parametric/profiles.py----------------------------------------
A:polars.testing.parametric.profiles.profile_name->str(int(profile_name))
A:polars.testing.parametric.profiles.n_iterations->int(profile_name.replace('polars.custom.', ''))
A:polars.testing.parametric.profiles.valid_profile_names->get_args(ParametricProfileNames)
polars.testing.parametric.load_profile(profile:ParametricProfileNames|int='fast',set_environment:bool=False)->None
polars.testing.parametric.profiles.load_profile(profile:ParametricProfileNames|int='fast',set_environment:bool=False)->None
polars.testing.parametric.profiles.set_profile(profile:ParametricProfileNames|int)->None
polars.testing.parametric.set_profile(profile:ParametricProfileNames|int)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/testing/parametric/primitives.py----------------------------------------
A:polars.testing.parametric.primitives._time_units->list(DTYPE_TEMPORAL_UNITS)
A:polars.testing.parametric.primitives.strategy_dtypes->list({dtype.base_type() for dtype in scalar_strategies})
A:polars.testing.parametric.primitives.tp->getattr(self.strategy, '_dtype', None)
A:polars.testing.parametric.primitives.self.dtype->getattr(self.strategy, '_dtype', self.dtype)
A:polars.testing.parametric.primitives.self.strategy->create_list_strategy(getattr(self.dtype, 'inner', None))
A:polars.testing.parametric.primitives.sample_value_type->type(next((e for e in sample_value_iter if e is not None and (not empty_list(e, nested=True)))))
A:polars.testing.parametric.primitives.value_dtype->py_type_to_dtype(sample_value_type)
A:polars.testing.parametric.primitives.cols->random.randint(a=min_cols or 0, b=max_cols or MAX_COLS)
A:polars.testing.parametric.primitives.names->list(cols)
A:polars.testing.parametric.primitives.dtypes->list(dtype)
A:polars.testing.parametric.primitives.null_probability->float(null_probability or 0.0)
A:polars.testing.parametric.primitives.series_dtype->series_dtype(random.choice(_time_units))
A:polars.testing.parametric.primitives.dtype_strategy->dtype_strategy.filter(lambda x: not isinstance(x, float) or isfinite(x)).filter(lambda x: not isinstance(x, float) or isfinite(x))
A:polars.testing.parametric.primitives.series_values->draw(lists(dtype_strategy, min_size=series_size, max_size=series_size, unique_by=_flexhash if unique else None))
A:polars.testing.parametric.primitives.s->s[:split_at].append(s[split_at:])
A:polars.testing.parametric.primitives.coldefs->list(cols)
A:polars.testing.parametric.primitives.c.null_probability->float(null_probability or 0.0).get(c.name, 0.0)
A:polars.testing.parametric.primitives.data->list(zip(*data.values()))
A:polars.testing.parametric.primitives.df->df[:split_at].vstack(df[split_at:])
A:polars.testing.parametric.primitives.frame_cols->', '.join((f'{col!r}: {s.to_init_repr()}' for (col, s) in data.items()))
A:polars.testing.parametric.primitives.frame_data->repr(data)
A:polars.testing.parametric.primitives.failed_frame_init->dedent(f"""\n                    # failed frame init: reproduce with...\n                    pl.DataFrame(\n                        data={frame_data},\n                        schema={repr(schema).replace("', ", "', pl.")},\n                        orient={orient!r},\n                    )\n                    """.replace('datetime.', ''))
polars.testing.parametric.column
polars.testing.parametric.column.__post_init__(self)->None
polars.testing.parametric.columns(cols:int|Sequence[str]|None=None,*,dtype:OneOrMoreDataTypes|None=None,min_cols:int|None=0,max_cols:int|None=MAX_COLS,unique:bool=False)->list[column]
polars.testing.parametric.dataframes(cols:int|column|Sequence[column]|None=None,*,lazy:bool=False,min_cols:int|None=0,max_cols:int|None=MAX_COLS,size:int|None=None,min_size:int|None=0,max_size:int|None=MAX_DATA_SIZE,chunked:bool|None=None,include_cols:Sequence[column]|column|None=None,null_probability:float|dict[str,float]=0.0,allow_infinities:bool=True,allowed_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None,excluded_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None)->SearchStrategy[DataFrame | LazyFrame]
polars.testing.parametric.primitives.column
polars.testing.parametric.primitives.column.__post_init__(self)->None
polars.testing.parametric.primitives.columns(cols:int|Sequence[str]|None=None,*,dtype:OneOrMoreDataTypes|None=None,min_cols:int|None=0,max_cols:int|None=MAX_COLS,unique:bool=False)->list[column]
polars.testing.parametric.primitives.dataframes(cols:int|column|Sequence[column]|None=None,*,lazy:bool=False,min_cols:int|None=0,max_cols:int|None=MAX_COLS,size:int|None=None,min_size:int|None=0,max_size:int|None=MAX_DATA_SIZE,chunked:bool|None=None,include_cols:Sequence[column]|column|None=None,null_probability:float|dict[str,float]=0.0,allow_infinities:bool=True,allowed_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None,excluded_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None)->SearchStrategy[DataFrame | LazyFrame]
polars.testing.parametric.primitives.empty_list(value:Any,nested:bool)->bool
polars.testing.parametric.primitives.series(*,name:str|SearchStrategy[str]|None=None,dtype:PolarsDataType|None=None,size:int|None=None,min_size:int|None=0,max_size:int|None=MAX_DATA_SIZE,strategy:SearchStrategy[object]|None=None,null_probability:float=0.0,allow_infinities:bool=True,unique:bool=False,chunked:bool|None=None,allowed_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None,excluded_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None)->SearchStrategy[Series]
polars.testing.parametric.series(*,name:str|SearchStrategy[str]|None=None,dtype:PolarsDataType|None=None,size:int|None=None,min_size:int|None=0,max_size:int|None=MAX_DATA_SIZE,strategy:SearchStrategy[object]|None=None,null_probability:float=0.0,allow_infinities:bool=True,unique:bool=False,chunked:bool|None=None,allowed_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None,excluded_dtypes:Collection[PolarsDataType]|PolarsDataType|None=None)->SearchStrategy[Series]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/expr/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/expr/categorical.py----------------------------------------
polars.expr.categorical.ExprCatNameSpace(self,expr:Expr)
polars.expr.categorical.ExprCatNameSpace.__init__(self,expr:Expr)
polars.expr.categorical.ExprCatNameSpace.get_categories(self)->Expr
polars.expr.categorical.ExprCatNameSpace.set_ordering(self,ordering:CategoricalOrdering)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/expr/list.py----------------------------------------
A:polars.expr.list.index->parse_as_expression(index)
A:polars.expr.list.item->parse_as_expression(item, str_as_lit=True)
A:polars.expr.list.offset->parse_as_expression(offset)
A:polars.expr.list.length->parse_as_expression(length)
A:polars.expr.list.n->parse_as_expression(n)
A:polars.expr.list.element->parse_as_expression(element, str_as_lit=True)
A:polars.expr.list.field_names->list(fields)
A:polars.expr.list.other->parse_as_expression(other, str_as_lit=False)
polars.expr.list.ExprListNameSpace(self,expr:Expr)
polars.expr.list.ExprListNameSpace.__getitem__(self,item:int)->Expr
polars.expr.list.ExprListNameSpace.__init__(self,expr:Expr)
polars.expr.list.ExprListNameSpace.all(self)->Expr
polars.expr.list.ExprListNameSpace.any(self)->Expr
polars.expr.list.ExprListNameSpace.arg_max(self)->Expr
polars.expr.list.ExprListNameSpace.arg_min(self)->Expr
polars.expr.list.ExprListNameSpace.concat(self,other:list[Expr|str]|Expr|str|Series|list[Any])->Expr
polars.expr.list.ExprListNameSpace.contains(self,item:float|str|bool|int|date|datetime|time|Expr)->Expr
polars.expr.list.ExprListNameSpace.count_match(self,element:IntoExpr)->Expr
polars.expr.list.ExprListNameSpace.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->Expr
polars.expr.list.ExprListNameSpace.eval(self,expr:Expr,*,parallel:bool=False)->Expr
polars.expr.list.ExprListNameSpace.explode(self)->Expr
polars.expr.list.ExprListNameSpace.first(self)->Expr
polars.expr.list.ExprListNameSpace.get(self,index:int|Expr|str)->Expr
polars.expr.list.ExprListNameSpace.head(self,n:int|str|Expr=5)->Expr
polars.expr.list.ExprListNameSpace.join(self,separator:str)->Expr
polars.expr.list.ExprListNameSpace.last(self)->Expr
polars.expr.list.ExprListNameSpace.lengths(self)->Expr
polars.expr.list.ExprListNameSpace.max(self)->Expr
polars.expr.list.ExprListNameSpace.mean(self)->Expr
polars.expr.list.ExprListNameSpace.min(self)->Expr
polars.expr.list.ExprListNameSpace.reverse(self)->Expr
polars.expr.list.ExprListNameSpace.set_difference(self,other:Expr|IntoExpr)->Expr
polars.expr.list.ExprListNameSpace.set_intersection(self,other:Expr|IntoExpr)->Expr
polars.expr.list.ExprListNameSpace.set_symmetric_difference(self,other:Expr|IntoExpr)->Expr
polars.expr.list.ExprListNameSpace.set_union(self,other:Expr|IntoExpr)->Expr
polars.expr.list.ExprListNameSpace.shift(self,periods:int=1)->Expr
polars.expr.list.ExprListNameSpace.slice(self,offset:int|str|Expr,length:int|str|Expr|None=None)->Expr
polars.expr.list.ExprListNameSpace.sort(self,*,descending:bool=False)->Expr
polars.expr.list.ExprListNameSpace.sum(self)->Expr
polars.expr.list.ExprListNameSpace.tail(self,n:int|str|Expr=5)->Expr
polars.expr.list.ExprListNameSpace.take(self,index:Expr|Series|list[int]|list[list[int]],*,null_on_oob:bool=False)->Expr
polars.expr.list.ExprListNameSpace.to_struct(self,n_field_strategy:ToStructStrategy='first_non_null',fields:Sequence[str]|Callable[[int],str]|None=None,upper_bound:int=0)->Expr
polars.expr.list.ExprListNameSpace.unique(self,*,maintain_order:bool=False)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/expr/datetime.py----------------------------------------
A:polars.expr.datetime.time->parse_as_expression(time)
A:polars.expr.datetime.sec->wrap_expr(self._pyexpr.dt_second())
polars.expr.datetime.ExprDateTimeNameSpace(self,expr:Expr)
polars.expr.datetime.ExprDateTimeNameSpace.__init__(self,expr:Expr)
polars.expr.datetime.ExprDateTimeNameSpace.base_utc_offset(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.cast_time_unit(self,time_unit:TimeUnit)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.combine(self,time:dt.time|Expr,time_unit:TimeUnit='us')->Expr
polars.expr.datetime.ExprDateTimeNameSpace.convert_time_zone(self,time_zone:str)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.date(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.datetime(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.day(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.days(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.dst_offset(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.epoch(self,time_unit:EpochTimeUnit='us')->Expr
polars.expr.datetime.ExprDateTimeNameSpace.hour(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.hours(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.is_leap_year(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.iso_year(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.microsecond(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.microseconds(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.millisecond(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.milliseconds(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.minute(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.minutes(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.month(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.month_end(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.month_start(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.nanosecond(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.nanoseconds(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.offset_by(self,by:str)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.ordinal_day(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.quarter(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.replace_time_zone(self,time_zone:str|None,*,use_earliest:bool|None=None)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.round(self,every:str|timedelta,offset:str|timedelta|None=None)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.second(self,*,fractional:bool=False)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.seconds(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.strftime(self,format:str)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.time(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.timestamp(self,time_unit:TimeUnit='us')->Expr
polars.expr.datetime.ExprDateTimeNameSpace.to_string(self,format:str)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.truncate(self,every:str|timedelta,offset:str|timedelta|None=None,*,use_earliest:bool|None=None)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.week(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.weekday(self)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.with_time_unit(self,time_unit:TimeUnit)->Expr
polars.expr.datetime.ExprDateTimeNameSpace.year(self)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/expr/whenthen.py----------------------------------------
A:polars.expr.whenthen.statement_pyexpr->parse_as_expression(statement, str_as_lit=True)
A:polars.expr.whenthen.condition_pyexpr->parse_as_expression(condition)
polars.expr.When(self,when:Any)
polars.expr.When.then(self,statement:IntoExpr)->Then
polars.expr.whenthen.ChainedThen(self,chained_then:Any)
polars.expr.whenthen.ChainedThen.__init__(self,chained_then:Any)
polars.expr.whenthen.ChainedThen._from_pyexpr(cls,pyexpr:PyExpr)->Expr
polars.expr.whenthen.ChainedThen._pyexpr(self)->PyExpr
polars.expr.whenthen.ChainedThen.otherwise(self,statement:IntoExpr)->Expr
polars.expr.whenthen.ChainedThen.when(self,condition:IntoExpr)->ChainedWhen
polars.expr.whenthen.ChainedWhen(self,chained_when:Any)
polars.expr.whenthen.ChainedWhen.__init__(self,chained_when:Any)
polars.expr.whenthen.ChainedWhen.then(self,statement:IntoExpr)->ChainedThen
polars.expr.whenthen.Then(self,then:Any)
polars.expr.whenthen.Then.__init__(self,then:Any)
polars.expr.whenthen.Then._from_pyexpr(cls,pyexpr:PyExpr)->Expr
polars.expr.whenthen.Then._pyexpr(self)->PyExpr
polars.expr.whenthen.Then.otherwise(self,statement:IntoExpr)->Expr
polars.expr.whenthen.Then.when(self,condition:IntoExpr)->ChainedWhen
polars.expr.whenthen.When(self,when:Any)
polars.expr.whenthen.When.__init__(self,when:Any)
polars.expr.whenthen.When.then(self,statement:IntoExpr)->Then
polars.expr.whenthen._warn_for_deprecated_string_input_behavior(input:str)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/expr/meta.py----------------------------------------
A:polars.expr.meta.file->normalise_filepath(file)
A:polars.expr.meta.json_bytes->buf.getvalue()
A:polars.expr.meta.json_str->buf.getvalue().decode('utf8')
A:polars.expr.meta.s->self._pyexpr.meta_tree_format()
polars.expr.meta.ExprMetaNameSpace(self,expr:Expr)
polars.expr.meta.ExprMetaNameSpace.__eq__(self,other:ExprMetaNameSpace|Expr)->bool
polars.expr.meta.ExprMetaNameSpace.__init__(self,expr:Expr)
polars.expr.meta.ExprMetaNameSpace.__ne__(self,other:ExprMetaNameSpace|Expr)->bool
polars.expr.meta.ExprMetaNameSpace._as_selector(self)->Expr
polars.expr.meta.ExprMetaNameSpace._selector_add(self,other:Expr)->Expr
polars.expr.meta.ExprMetaNameSpace._selector_and(self,other:Expr)->Expr
polars.expr.meta.ExprMetaNameSpace._selector_sub(self,other:Expr)->Expr
polars.expr.meta.ExprMetaNameSpace.eq(self,other:ExprMetaNameSpace|Expr)->bool
polars.expr.meta.ExprMetaNameSpace.has_multiple_outputs(self)->bool
polars.expr.meta.ExprMetaNameSpace.is_regex_projection(self)->bool
polars.expr.meta.ExprMetaNameSpace.ne(self,other:ExprMetaNameSpace|Expr)->bool
polars.expr.meta.ExprMetaNameSpace.output_name(self)->str
polars.expr.meta.ExprMetaNameSpace.pop(self)->list[Expr]
polars.expr.meta.ExprMetaNameSpace.root_names(self)->list[str]
polars.expr.meta.ExprMetaNameSpace.tree_format(self,return_as_string:bool=False)->str | None
polars.expr.meta.ExprMetaNameSpace.undo_aliases(self)->Expr
polars.expr.meta.ExprMetaNameSpace.write_json(self,file:IOBase|str|Path|None=None)->str | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/expr/struct.py----------------------------------------
polars.expr.struct.ExprStructNameSpace(self,expr:Expr)
polars.expr.struct.ExprStructNameSpace.__getitem__(self,item:str|int)->Expr
polars.expr.struct.ExprStructNameSpace.__init__(self,expr:Expr)
polars.expr.struct.ExprStructNameSpace.field(self,name:str)->Expr
polars.expr.struct.ExprStructNameSpace.rename_fields(self,names:Sequence[str])->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/expr/array.py----------------------------------------
polars.expr.array.ExprArrayNameSpace(self,expr:Expr)
polars.expr.array.ExprArrayNameSpace.__init__(self,expr:Expr)
polars.expr.array.ExprArrayNameSpace.max(self)->Expr
polars.expr.array.ExprArrayNameSpace.min(self)->Expr
polars.expr.array.ExprArrayNameSpace.sum(self)->Expr
polars.expr.array.ExprArrayNameSpace.unique(self,*,maintain_order:bool=False)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/expr/string.py----------------------------------------
A:polars.expr.string.pattern->parse_as_expression(pattern, str_as_lit=True)
A:polars.expr.string.suffix->parse_as_expression(suffix, str_as_lit=True)
A:polars.expr.string.prefix->parse_as_expression(prefix, str_as_lit=True)
A:polars.expr.string.dtype->py_type_to_dtype(dtype)
A:polars.expr.string.value->parse_as_expression(value, str_as_lit=True)
polars.expr.string.ExprStringNameSpace(self,expr:Expr)
polars.expr.string.ExprStringNameSpace.__init__(self,expr:Expr)
polars.expr.string.ExprStringNameSpace.concat(self,delimiter:str='-')->Expr
polars.expr.string.ExprStringNameSpace.contains(self,pattern:str|Expr,*,literal:bool=False,strict:bool=True)->Expr
polars.expr.string.ExprStringNameSpace.count_match(self,pattern:str)->Expr
polars.expr.string.ExprStringNameSpace.decode(self,encoding:TransferEncoding,*,strict:bool=True)->Expr
polars.expr.string.ExprStringNameSpace.encode(self,encoding:TransferEncoding)->Expr
polars.expr.string.ExprStringNameSpace.ends_with(self,suffix:str|Expr)->Expr
polars.expr.string.ExprStringNameSpace.explode(self)->Expr
polars.expr.string.ExprStringNameSpace.extract(self,pattern:str,group_index:int=1)->Expr
polars.expr.string.ExprStringNameSpace.extract_all(self,pattern:str|Expr)->Expr
polars.expr.string.ExprStringNameSpace.json_extract(self,dtype:PolarsDataType|None=None,infer_schema_length:int|None=100)->Expr
polars.expr.string.ExprStringNameSpace.json_path_match(self,json_path:str)->Expr
polars.expr.string.ExprStringNameSpace.lengths(self)->Expr
polars.expr.string.ExprStringNameSpace.ljust(self,width:int,fill_char:str='')->Expr
polars.expr.string.ExprStringNameSpace.lstrip(self,characters:str|None=None)->Expr
polars.expr.string.ExprStringNameSpace.n_chars(self)->Expr
polars.expr.string.ExprStringNameSpace.parse_int(self,radix:int=2,*,strict:bool=True)->Expr
polars.expr.string.ExprStringNameSpace.replace(self,pattern:str|Expr,value:str|Expr,*,literal:bool=False,n:int=1)->Expr
polars.expr.string.ExprStringNameSpace.replace_all(self,pattern:str|Expr,value:str|Expr,*,literal:bool=False)->Expr
polars.expr.string.ExprStringNameSpace.rjust(self,width:int,fill_char:str='')->Expr
polars.expr.string.ExprStringNameSpace.rstrip(self,characters:str|None=None)->Expr
polars.expr.string.ExprStringNameSpace.slice(self,offset:int,length:int|None=None)->Expr
polars.expr.string.ExprStringNameSpace.split(self,by:str,*,inclusive:bool=False)->Expr
polars.expr.string.ExprStringNameSpace.split_exact(self,by:str,n:int,*,inclusive:bool=False)->Expr
polars.expr.string.ExprStringNameSpace.splitn(self,by:str,n:int)->Expr
polars.expr.string.ExprStringNameSpace.starts_with(self,prefix:str|Expr)->Expr
polars.expr.string.ExprStringNameSpace.strip(self,characters:str|None=None)->Expr
polars.expr.string.ExprStringNameSpace.strptime(self,dtype:PolarsTemporalType,format:str|None=None,*,strict:bool=True,exact:bool=True,cache:bool=True,utc:bool|None=None)->Expr
polars.expr.string.ExprStringNameSpace.to_date(self,format:str|None=None,*,strict:bool=True,exact:bool=True,cache:bool=True)->Expr
polars.expr.string.ExprStringNameSpace.to_datetime(self,format:str|None=None,*,time_unit:TimeUnit|None=None,time_zone:str|None=None,strict:bool=True,exact:bool=True,cache:bool=True,utc:bool|None=None)->Expr
polars.expr.string.ExprStringNameSpace.to_decimal(self,inference_length:int=100)->Expr
polars.expr.string.ExprStringNameSpace.to_lowercase(self)->Expr
polars.expr.string.ExprStringNameSpace.to_time(self,format:str|None=None,*,strict:bool=True,cache:bool=True)->Expr
polars.expr.string.ExprStringNameSpace.to_titlecase(self)->Expr
polars.expr.string.ExprStringNameSpace.to_uppercase(self)->Expr
polars.expr.string.ExprStringNameSpace.zfill(self,alignment:int)->Expr
polars.expr.string._validate_format_argument(format:str|None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/expr/binary.py----------------------------------------
polars.expr.binary.ExprBinaryNameSpace(self,expr:Expr)
polars.expr.binary.ExprBinaryNameSpace.__init__(self,expr:Expr)
polars.expr.binary.ExprBinaryNameSpace.contains(self,literal:bytes)->Expr
polars.expr.binary.ExprBinaryNameSpace.decode(self,encoding:TransferEncoding,*,strict:bool=True)->Expr
polars.expr.binary.ExprBinaryNameSpace.encode(self,encoding:TransferEncoding)->Expr
polars.expr.binary.ExprBinaryNameSpace.ends_with(self,suffix:bytes)->Expr
polars.expr.binary.ExprBinaryNameSpace.starts_with(self,prefix:bytes)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/expr/expr.py----------------------------------------
A:polars.expr.expr.T->TypeVar('T')
A:polars.expr.expr.P->ParamSpec('P')
A:polars.expr.expr.expr->cls.__new__(cls)
A:polars.expr.expr.num_expr->sum((isinstance(inp, Expr) for inp in inputs))
A:polars.expr.expr.exprs->parse_as_list_of_expressions(expr, *more_exprs)
A:polars.expr.expr.expr._pyexpr->polars.polars.PyExpr.meta_read_json(value)
A:polars.expr.expr.columns_list->list(columns)
A:polars.expr.expr.offset->polars.functions.lit(offset)
A:polars.expr.expr.length->polars.functions.lit(length)
A:polars.expr.expr.other->parse_as_expression(other)
A:polars.expr.expr.dtype->py_type_to_dtype(dtype)
A:polars.expr.expr.element->parse_as_expression(element)
A:polars.expr.expr.by->parse_as_expression(by)
A:polars.expr.expr.indices_lit->parse_as_expression(indices)
A:polars.expr.expr.fill_value->parse_as_expression(value, str_as_lit=True)
A:polars.expr.expr.value->parse_as_expression(value, str_as_lit=True)
A:polars.expr.expr.quantile->parse_as_expression(quantile)
A:polars.expr.expr.return_dtype->py_type_to_dtype(return_dtype)
A:polars.expr.expr.root_names->self.meta.root_names()
A:polars.expr.expr.df->x.to_frame('x')
A:polars.expr.expr.n_threads->threadpool_size()
A:polars.expr.expr.exponent->parse_as_expression(exponent)
A:polars.expr.expr.lower_bound->self._from_pyexpr(parse_as_expression(lower_bound))
A:polars.expr.expr.upper_bound->self._from_pyexpr(parse_as_expression(upper_bound))
A:polars.expr.expr.(window_size, min_periods)->_prepare_rolling_window_args(window_size, min_periods)
A:polars.expr.expr.seed->random.randint(0, 10000)
A:polars.expr.expr.alpha->_prepare_alpha(com, span, half_life, alpha)
A:polars.expr.expr.s->polars._reexport.Series(name, values, dtype=dtype, dtype_if_empty=dtype_if_empty, strict=True)
A:polars.expr.expr.remap_key_s->_remap_key_or_value_series(name=remap_key_column, values=list(remapping.keys()), dtype=input_dtype, dtype_if_empty=input_dtype, dtype_keys=input_dtype, is_keys=True)
A:polars.expr.expr.remap_value_s->_remap_key_or_value_series(name=remap_value_column, values=remapping.values(), dtype=None, dtype_if_empty=input_dtype, dtype_keys=input_dtype, is_keys=False)
A:polars.expr.expr.default_parsed->self._from_pyexpr(parse_as_expression(default, str_as_lit=True))
A:polars.expr.expr.window_size->_timedelta_to_pl_duration(window_size)
polars.Expr
polars.Expr.__abs__(self)->Self
polars.Expr.__add__(self,other:Any)->Self
polars.Expr.__and__(self,other:Expr|int)->Self
polars.Expr.__array_ufunc__(self,ufunc:Callable[...,Any],method:str,*inputs:Any,**kwargs:Any)->Self
polars.Expr.__bool__(self)->NoReturn
polars.Expr.__eq__(self,other:Any)->Self
polars.Expr.__floordiv__(self,other:Any)->Self
polars.Expr.__ge__(self,other:Any)->Self
polars.Expr.__getstate__(self)->Any
polars.Expr.__gt__(self,other:Any)->Self
polars.Expr.__invert__(self)->Self
polars.Expr.__le__(self,other:Any)->Self
polars.Expr.__lt__(self,other:Any)->Self
polars.Expr.__mod__(self,other:Any)->Self
polars.Expr.__mul__(self,other:Any)->Self
polars.Expr.__ne__(self,other:Any)->Self
polars.Expr.__neg__(self)->Expr
polars.Expr.__or__(self,other:Expr|int)->Self
polars.Expr.__pos__(self)->Expr
polars.Expr.__pow__(self,power:int|float|Series|Expr)->Self
polars.Expr.__radd__(self,other:Any)->Self
polars.Expr.__rand__(self,other:Any)->Self
polars.Expr.__rfloordiv__(self,other:Any)->Self
polars.Expr.__rmod__(self,other:Any)->Self
polars.Expr.__rmul__(self,other:Any)->Self
polars.Expr.__ror__(self,other:Any)->Self
polars.Expr.__rpow__(self,base:int|float|Expr)->Expr
polars.Expr.__rsub__(self,other:Any)->Self
polars.Expr.__rtruediv__(self,other:Any)->Self
polars.Expr.__rxor__(self,other:Expr)->Self
polars.Expr.__setstate__(self,state:Any)->None
polars.Expr.__str__(self)->str
polars.Expr.__sub__(self,other:Any)->Self
polars.Expr.__truediv__(self,other:Any)->Self
polars.Expr.__xor__(self,other:Expr)->Self
polars.Expr._from_pyexpr(cls,pyexpr:PyExpr)->Self
polars.Expr._repr_html_(self)->str
polars.Expr._to_expr(self,other:Any)->Expr
polars.Expr._to_pyexpr(self,other:Any)->PyExpr
polars.Expr.abs(self)->Self
polars.Expr.add(self,other:Any)->Self
polars.Expr.agg_groups(self)->Self
polars.Expr.alias(self,name:str)->Self
polars.Expr.all(self,drop_nulls:bool=True)->Self
polars.Expr.and_(self,*others:Any)->Self
polars.Expr.any(self,drop_nulls:bool=True)->Self
polars.Expr.append(self,other:IntoExpr,*,upcast:bool=True)->Self
polars.Expr.apply(self,function:Callable[[Series],Series]|Callable[[Any],Any],return_dtype:PolarsDataType|None=None,*,skip_nulls:bool=True,pass_name:bool=False,strategy:ApplyStrategy='thread_local')->Self
polars.Expr.approx_unique(self)->Self
polars.Expr.arccos(self)->Self
polars.Expr.arccosh(self)->Self
polars.Expr.arcsin(self)->Self
polars.Expr.arcsinh(self)->Self
polars.Expr.arctan(self)->Self
polars.Expr.arctanh(self)->Self
polars.Expr.arg_max(self)->Self
polars.Expr.arg_min(self)->Self
polars.Expr.arg_sort(self,*,descending:bool=False,nulls_last:bool=False)->Self
polars.Expr.arg_true(self)->Self
polars.Expr.arg_unique(self)->Self
polars.Expr.arr(self)->ExprArrayNameSpace
polars.Expr.backward_fill(self,limit:int|None=None)->Self
polars.Expr.bin(self)->ExprBinaryNameSpace
polars.Expr.bottom_k(self,k:int=5)->Self
polars.Expr.cache(self)->Self
polars.Expr.cast(self,dtype:PolarsDataType|type[Any],*,strict:bool=True)->Self
polars.Expr.cat(self)->ExprCatNameSpace
polars.Expr.cbrt(self)->Self
polars.Expr.ceil(self)->Self
polars.Expr.clip(self,lower_bound:int|float,upper_bound:int|float)->Self
polars.Expr.clip_max(self,upper_bound:int|float)->Self
polars.Expr.clip_min(self,lower_bound:int|float)->Self
polars.Expr.cos(self)->Self
polars.Expr.cosh(self)->Self
polars.Expr.count(self)->Self
polars.Expr.cumcount(self,*,reverse:bool=False)->Self
polars.Expr.cummax(self,*,reverse:bool=False)->Self
polars.Expr.cummin(self,*,reverse:bool=False)->Self
polars.Expr.cumprod(self,*,reverse:bool=False)->Self
polars.Expr.cumsum(self,*,reverse:bool=False)->Self
polars.Expr.cumulative_eval(self,expr:Expr,min_periods:int=1,*,parallel:bool=False)->Self
polars.Expr.cut(self,breaks:list[float],labels:list[str]|None=None,left_closed:bool=False,include_breaks:bool=False)->Self
polars.Expr.degrees(self)->Self
polars.Expr.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->Self
polars.Expr.dot(self,other:Expr|str)->Self
polars.Expr.drop_nans(self)->Self
polars.Expr.drop_nulls(self)->Self
polars.Expr.dt(self)->ExprDateTimeNameSpace
polars.Expr.entropy(self,base:float=math.e,*,normalize:bool=True)->Self
polars.Expr.eq(self,other:Any)->Self
polars.Expr.eq_missing(self,other:Any)->Self
polars.Expr.ewm_mean(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,*,adjust:bool=True,min_periods:int=1,ignore_nulls:bool=True)->Self
polars.Expr.ewm_std(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,*,adjust:bool=True,bias:bool=False,min_periods:int=1,ignore_nulls:bool=True)->Self
polars.Expr.ewm_var(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,*,adjust:bool=True,bias:bool=False,min_periods:int=1,ignore_nulls:bool=True)->Self
polars.Expr.exclude(self,columns:str|PolarsDataType|Iterable[str]|Iterable[PolarsDataType],*more_columns:str|PolarsDataType)->Self
polars.Expr.exp(self)->Self
polars.Expr.explode(self)->Self
polars.Expr.extend_constant(self,value:PythonLiteral|None,n:int)->Self
polars.Expr.fill_nan(self,value:int|float|Expr|None)->Self
polars.Expr.fill_null(self,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->Self
polars.Expr.filter(self,predicate:Expr)->Self
polars.Expr.first(self)->Self
polars.Expr.flatten(self)->Self
polars.Expr.floor(self)->Self
polars.Expr.floordiv(self,other:Any)->Self
polars.Expr.forward_fill(self,limit:int|None=None)->Self
polars.Expr.from_json(cls,value:str)->Self
polars.Expr.ge(self,other:Any)->Self
polars.Expr.gt(self,other:Any)->Self
polars.Expr.hash(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->Self
polars.Expr.head(self,n:int|Expr=10)->Self
polars.Expr.implode(self)->Self
polars.Expr.inspect(self,fmt:str='{}')->Self
polars.Expr.interpolate(self,method:InterpolationMethod='linear')->Self
polars.Expr.is_between(self,lower_bound:IntoExpr,upper_bound:IntoExpr,closed:ClosedInterval='both')->Self
polars.Expr.is_duplicated(self)->Self
polars.Expr.is_finite(self)->Self
polars.Expr.is_first(self)->Self
polars.Expr.is_in(self,other:Expr|Collection[Any]|Series)->Self
polars.Expr.is_infinite(self)->Self
polars.Expr.is_nan(self)->Self
polars.Expr.is_not(self)->Self
polars.Expr.is_not_nan(self)->Self
polars.Expr.is_not_null(self)->Self
polars.Expr.is_null(self)->Self
polars.Expr.is_unique(self)->Self
polars.Expr.keep_name(self)->Self
polars.Expr.kurtosis(self,*,fisher:bool=True,bias:bool=True)->Self
polars.Expr.last(self)->Self
polars.Expr.le(self,other:Any)->Self
polars.Expr.len(self)->Self
polars.Expr.limit(self,n:int|Expr=10)->Self
polars.Expr.list(self)->ExprListNameSpace
polars.Expr.log(self,base:float=math.e)->Self
polars.Expr.log10(self)->Self
polars.Expr.log1p(self)->Self
polars.Expr.lower_bound(self)->Self
polars.Expr.lt(self,other:Any)->Self
polars.Expr.map(self,function:Callable[[Series],Series|Any],return_dtype:PolarsDataType|None=None,*,agg_list:bool=False)->Self
polars.Expr.map_alias(self,function:Callable[[str],str])->Self
polars.Expr.map_dict(self,remapping:dict[Any,Any],*,default:Any=None,return_dtype:PolarsDataType|None=None)->Self
polars.Expr.max(self)->Self
polars.Expr.mean(self)->Self
polars.Expr.median(self)->Self
polars.Expr.meta(self)->ExprMetaNameSpace
polars.Expr.min(self)->Self
polars.Expr.mod(self,other:Any)->Self
polars.Expr.mode(self)->Self
polars.Expr.mul(self,other:Any)->Self
polars.Expr.n_unique(self)->Self
polars.Expr.nan_max(self)->Self
polars.Expr.nan_min(self)->Self
polars.Expr.ne(self,other:Any)->Self
polars.Expr.ne_missing(self,other:Any)->Self
polars.Expr.null_count(self)->Self
polars.Expr.or_(self,*others:Any)->Self
polars.Expr.over(self,expr:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr,mapping_strategy:WindowMappingStrategy='group_to_rows')->Self
polars.Expr.pct_change(self,n:int=1)->Self
polars.Expr.pipe(self,function:Callable[Concatenate[Expr,P],T],*args:P.args,**kwargs:P.kwargs)->T
polars.Expr.pow(self,exponent:int|float|None|Series|Expr)->Self
polars.Expr.prefix(self,prefix:str)->Self
polars.Expr.product(self)->Self
polars.Expr.qcut(self,q:list[float]|int,labels:list[str]|None=None,left_closed:bool=False,allow_duplicates:bool=False,include_breaks:bool=False)->Self
polars.Expr.quantile(self,quantile:float|Expr,interpolation:RollingInterpolationMethod='nearest')->Self
polars.Expr.radians(self)->Self
polars.Expr.rank(self,method:RankMethod='average',*,descending:bool=False,seed:int|None=None)->Self
polars.Expr.rechunk(self)->Self
polars.Expr.reinterpret(self,*,signed:bool=True)->Self
polars.Expr.repeat_by(self,by:pl.Series|Expr|str|int)->Self
polars.Expr.reshape(self,dimensions:tuple[int,...])->Self
polars.Expr.reverse(self)->Self
polars.Expr.rle(self)->Self
polars.Expr.rle_id(self)->Self
polars.Expr.rolling_apply(self,function:Callable[[Series],Any],window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Self
polars.Expr.rolling_max(self,window_size:int|timedelta|str,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left')->Self
polars.Expr.rolling_mean(self,window_size:int|timedelta|str,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left')->Self
polars.Expr.rolling_median(self,window_size:int|timedelta|str,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left')->Self
polars.Expr.rolling_min(self,window_size:int|timedelta|str,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left')->Self
polars.Expr.rolling_quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest',window_size:int|timedelta|str=2,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left')->Self
polars.Expr.rolling_skew(self,window_size:int,*,bias:bool=True)->Self
polars.Expr.rolling_std(self,window_size:int|timedelta|str,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left',ddof:int=1)->Self
polars.Expr.rolling_sum(self,window_size:int|timedelta|str,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left')->Self
polars.Expr.rolling_var(self,window_size:int|timedelta|str,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left',ddof:int=1)->Self
polars.Expr.round(self,decimals:int=0)->Self
polars.Expr.sample(self,n:int|None=None,*,fraction:float|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None,fixed_seed:bool=False)->Self
polars.Expr.search_sorted(self,element:Expr|int|float|Series,side:SearchSortedSide='any')->Self
polars.Expr.set_sorted(self,*,descending:bool=False)->Self
polars.Expr.shift(self,periods:int=1)->Self
polars.Expr.shift_and_fill(self,fill_value:IntoExpr,*,periods:int=1)->Self
polars.Expr.shrink_dtype(self)->Self
polars.Expr.shuffle(self,seed:int|None=None,fixed_seed:bool=False)->Self
polars.Expr.sign(self)->Self
polars.Expr.sin(self)->Self
polars.Expr.sinh(self)->Self
polars.Expr.skew(self,*,bias:bool=True)->Self
polars.Expr.slice(self,offset:int|Expr,length:int|Expr|None=None)->Self
polars.Expr.sort(self,*,descending:bool=False,nulls_last:bool=False)->Self
polars.Expr.sort_by(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,descending:bool|Sequence[bool]=False)->Self
polars.Expr.sqrt(self)->Self
polars.Expr.std(self,ddof:int=1)->Self
polars.Expr.str(self)->ExprStringNameSpace
polars.Expr.struct(self)->ExprStructNameSpace
polars.Expr.sub(self,other:Any)->Self
polars.Expr.suffix(self,suffix:str)->Self
polars.Expr.sum(self)->Self
polars.Expr.tail(self,n:int|Expr=10)->Self
polars.Expr.take(self,indices:int|list[int]|Expr|Series|np.ndarray[Any,Any])->Self
polars.Expr.take_every(self,n:int)->Self
polars.Expr.tan(self)->Self
polars.Expr.tanh(self)->Self
polars.Expr.to_physical(self)->Self
polars.Expr.top_k(self,k:int=5)->Self
polars.Expr.truediv(self,other:Any)->Self
polars.Expr.unique(self,*,maintain_order:bool=False)->Self
polars.Expr.unique_counts(self)->Self
polars.Expr.upper_bound(self)->Self
polars.Expr.value_counts(self,*,multithreaded:bool=False,sort:bool=False)->Self
polars.Expr.var(self,ddof:int=1)->Self
polars.Expr.where(self,predicate:Expr)->Self
polars.Expr.xor(self,other:Any)->Self
polars.expr.expr.Expr
polars.expr.expr.Expr.__abs__(self)->Self
polars.expr.expr.Expr.__add__(self,other:Any)->Self
polars.expr.expr.Expr.__and__(self,other:Expr|int)->Self
polars.expr.expr.Expr.__array_ufunc__(self,ufunc:Callable[...,Any],method:str,*inputs:Any,**kwargs:Any)->Self
polars.expr.expr.Expr.__bool__(self)->NoReturn
polars.expr.expr.Expr.__eq__(self,other:Any)->Self
polars.expr.expr.Expr.__floordiv__(self,other:Any)->Self
polars.expr.expr.Expr.__ge__(self,other:Any)->Self
polars.expr.expr.Expr.__getstate__(self)->Any
polars.expr.expr.Expr.__gt__(self,other:Any)->Self
polars.expr.expr.Expr.__invert__(self)->Self
polars.expr.expr.Expr.__le__(self,other:Any)->Self
polars.expr.expr.Expr.__lt__(self,other:Any)->Self
polars.expr.expr.Expr.__mod__(self,other:Any)->Self
polars.expr.expr.Expr.__mul__(self,other:Any)->Self
polars.expr.expr.Expr.__ne__(self,other:Any)->Self
polars.expr.expr.Expr.__neg__(self)->Expr
polars.expr.expr.Expr.__or__(self,other:Expr|int)->Self
polars.expr.expr.Expr.__pos__(self)->Expr
polars.expr.expr.Expr.__pow__(self,power:int|float|Series|Expr)->Self
polars.expr.expr.Expr.__radd__(self,other:Any)->Self
polars.expr.expr.Expr.__rand__(self,other:Any)->Self
polars.expr.expr.Expr.__rfloordiv__(self,other:Any)->Self
polars.expr.expr.Expr.__rmod__(self,other:Any)->Self
polars.expr.expr.Expr.__rmul__(self,other:Any)->Self
polars.expr.expr.Expr.__ror__(self,other:Any)->Self
polars.expr.expr.Expr.__rpow__(self,base:int|float|Expr)->Expr
polars.expr.expr.Expr.__rsub__(self,other:Any)->Self
polars.expr.expr.Expr.__rtruediv__(self,other:Any)->Self
polars.expr.expr.Expr.__rxor__(self,other:Expr)->Self
polars.expr.expr.Expr.__setstate__(self,state:Any)->None
polars.expr.expr.Expr.__str__(self)->str
polars.expr.expr.Expr.__sub__(self,other:Any)->Self
polars.expr.expr.Expr.__truediv__(self,other:Any)->Self
polars.expr.expr.Expr.__xor__(self,other:Expr)->Self
polars.expr.expr.Expr._from_pyexpr(cls,pyexpr:PyExpr)->Self
polars.expr.expr.Expr._repr_html_(self)->str
polars.expr.expr.Expr._to_expr(self,other:Any)->Expr
polars.expr.expr.Expr._to_pyexpr(self,other:Any)->PyExpr
polars.expr.expr.Expr.abs(self)->Self
polars.expr.expr.Expr.add(self,other:Any)->Self
polars.expr.expr.Expr.agg_groups(self)->Self
polars.expr.expr.Expr.alias(self,name:str)->Self
polars.expr.expr.Expr.all(self,drop_nulls:bool=True)->Self
polars.expr.expr.Expr.and_(self,*others:Any)->Self
polars.expr.expr.Expr.any(self,drop_nulls:bool=True)->Self
polars.expr.expr.Expr.append(self,other:IntoExpr,*,upcast:bool=True)->Self
polars.expr.expr.Expr.apply(self,function:Callable[[Series],Series]|Callable[[Any],Any],return_dtype:PolarsDataType|None=None,*,skip_nulls:bool=True,pass_name:bool=False,strategy:ApplyStrategy='thread_local')->Self
polars.expr.expr.Expr.approx_unique(self)->Self
polars.expr.expr.Expr.arccos(self)->Self
polars.expr.expr.Expr.arccosh(self)->Self
polars.expr.expr.Expr.arcsin(self)->Self
polars.expr.expr.Expr.arcsinh(self)->Self
polars.expr.expr.Expr.arctan(self)->Self
polars.expr.expr.Expr.arctanh(self)->Self
polars.expr.expr.Expr.arg_max(self)->Self
polars.expr.expr.Expr.arg_min(self)->Self
polars.expr.expr.Expr.arg_sort(self,*,descending:bool=False,nulls_last:bool=False)->Self
polars.expr.expr.Expr.arg_true(self)->Self
polars.expr.expr.Expr.arg_unique(self)->Self
polars.expr.expr.Expr.arr(self)->ExprArrayNameSpace
polars.expr.expr.Expr.backward_fill(self,limit:int|None=None)->Self
polars.expr.expr.Expr.bin(self)->ExprBinaryNameSpace
polars.expr.expr.Expr.bottom_k(self,k:int=5)->Self
polars.expr.expr.Expr.cache(self)->Self
polars.expr.expr.Expr.cast(self,dtype:PolarsDataType|type[Any],*,strict:bool=True)->Self
polars.expr.expr.Expr.cat(self)->ExprCatNameSpace
polars.expr.expr.Expr.cbrt(self)->Self
polars.expr.expr.Expr.ceil(self)->Self
polars.expr.expr.Expr.clip(self,lower_bound:int|float,upper_bound:int|float)->Self
polars.expr.expr.Expr.clip_max(self,upper_bound:int|float)->Self
polars.expr.expr.Expr.clip_min(self,lower_bound:int|float)->Self
polars.expr.expr.Expr.cos(self)->Self
polars.expr.expr.Expr.cosh(self)->Self
polars.expr.expr.Expr.count(self)->Self
polars.expr.expr.Expr.cumcount(self,*,reverse:bool=False)->Self
polars.expr.expr.Expr.cummax(self,*,reverse:bool=False)->Self
polars.expr.expr.Expr.cummin(self,*,reverse:bool=False)->Self
polars.expr.expr.Expr.cumprod(self,*,reverse:bool=False)->Self
polars.expr.expr.Expr.cumsum(self,*,reverse:bool=False)->Self
polars.expr.expr.Expr.cumulative_eval(self,expr:Expr,min_periods:int=1,*,parallel:bool=False)->Self
polars.expr.expr.Expr.cut(self,breaks:list[float],labels:list[str]|None=None,left_closed:bool=False,include_breaks:bool=False)->Self
polars.expr.expr.Expr.degrees(self)->Self
polars.expr.expr.Expr.diff(self,n:int=1,null_behavior:NullBehavior='ignore')->Self
polars.expr.expr.Expr.dot(self,other:Expr|str)->Self
polars.expr.expr.Expr.drop_nans(self)->Self
polars.expr.expr.Expr.drop_nulls(self)->Self
polars.expr.expr.Expr.dt(self)->ExprDateTimeNameSpace
polars.expr.expr.Expr.entropy(self,base:float=math.e,*,normalize:bool=True)->Self
polars.expr.expr.Expr.eq(self,other:Any)->Self
polars.expr.expr.Expr.eq_missing(self,other:Any)->Self
polars.expr.expr.Expr.ewm_mean(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,*,adjust:bool=True,min_periods:int=1,ignore_nulls:bool=True)->Self
polars.expr.expr.Expr.ewm_std(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,*,adjust:bool=True,bias:bool=False,min_periods:int=1,ignore_nulls:bool=True)->Self
polars.expr.expr.Expr.ewm_var(self,com:float|None=None,span:float|None=None,half_life:float|None=None,alpha:float|None=None,*,adjust:bool=True,bias:bool=False,min_periods:int=1,ignore_nulls:bool=True)->Self
polars.expr.expr.Expr.exclude(self,columns:str|PolarsDataType|Iterable[str]|Iterable[PolarsDataType],*more_columns:str|PolarsDataType)->Self
polars.expr.expr.Expr.exp(self)->Self
polars.expr.expr.Expr.explode(self)->Self
polars.expr.expr.Expr.extend_constant(self,value:PythonLiteral|None,n:int)->Self
polars.expr.expr.Expr.fill_nan(self,value:int|float|Expr|None)->Self
polars.expr.expr.Expr.fill_null(self,value:Any|None=None,strategy:FillNullStrategy|None=None,limit:int|None=None)->Self
polars.expr.expr.Expr.filter(self,predicate:Expr)->Self
polars.expr.expr.Expr.first(self)->Self
polars.expr.expr.Expr.flatten(self)->Self
polars.expr.expr.Expr.floor(self)->Self
polars.expr.expr.Expr.floordiv(self,other:Any)->Self
polars.expr.expr.Expr.forward_fill(self,limit:int|None=None)->Self
polars.expr.expr.Expr.from_json(cls,value:str)->Self
polars.expr.expr.Expr.ge(self,other:Any)->Self
polars.expr.expr.Expr.gt(self,other:Any)->Self
polars.expr.expr.Expr.hash(self,seed:int=0,seed_1:int|None=None,seed_2:int|None=None,seed_3:int|None=None)->Self
polars.expr.expr.Expr.head(self,n:int|Expr=10)->Self
polars.expr.expr.Expr.implode(self)->Self
polars.expr.expr.Expr.inspect(self,fmt:str='{}')->Self
polars.expr.expr.Expr.interpolate(self,method:InterpolationMethod='linear')->Self
polars.expr.expr.Expr.is_between(self,lower_bound:IntoExpr,upper_bound:IntoExpr,closed:ClosedInterval='both')->Self
polars.expr.expr.Expr.is_duplicated(self)->Self
polars.expr.expr.Expr.is_finite(self)->Self
polars.expr.expr.Expr.is_first(self)->Self
polars.expr.expr.Expr.is_in(self,other:Expr|Collection[Any]|Series)->Self
polars.expr.expr.Expr.is_infinite(self)->Self
polars.expr.expr.Expr.is_nan(self)->Self
polars.expr.expr.Expr.is_not(self)->Self
polars.expr.expr.Expr.is_not_nan(self)->Self
polars.expr.expr.Expr.is_not_null(self)->Self
polars.expr.expr.Expr.is_null(self)->Self
polars.expr.expr.Expr.is_unique(self)->Self
polars.expr.expr.Expr.keep_name(self)->Self
polars.expr.expr.Expr.kurtosis(self,*,fisher:bool=True,bias:bool=True)->Self
polars.expr.expr.Expr.last(self)->Self
polars.expr.expr.Expr.le(self,other:Any)->Self
polars.expr.expr.Expr.len(self)->Self
polars.expr.expr.Expr.limit(self,n:int|Expr=10)->Self
polars.expr.expr.Expr.list(self)->ExprListNameSpace
polars.expr.expr.Expr.log(self,base:float=math.e)->Self
polars.expr.expr.Expr.log10(self)->Self
polars.expr.expr.Expr.log1p(self)->Self
polars.expr.expr.Expr.lower_bound(self)->Self
polars.expr.expr.Expr.lt(self,other:Any)->Self
polars.expr.expr.Expr.map(self,function:Callable[[Series],Series|Any],return_dtype:PolarsDataType|None=None,*,agg_list:bool=False)->Self
polars.expr.expr.Expr.map_alias(self,function:Callable[[str],str])->Self
polars.expr.expr.Expr.map_dict(self,remapping:dict[Any,Any],*,default:Any=None,return_dtype:PolarsDataType|None=None)->Self
polars.expr.expr.Expr.max(self)->Self
polars.expr.expr.Expr.mean(self)->Self
polars.expr.expr.Expr.median(self)->Self
polars.expr.expr.Expr.meta(self)->ExprMetaNameSpace
polars.expr.expr.Expr.min(self)->Self
polars.expr.expr.Expr.mod(self,other:Any)->Self
polars.expr.expr.Expr.mode(self)->Self
polars.expr.expr.Expr.mul(self,other:Any)->Self
polars.expr.expr.Expr.n_unique(self)->Self
polars.expr.expr.Expr.nan_max(self)->Self
polars.expr.expr.Expr.nan_min(self)->Self
polars.expr.expr.Expr.ne(self,other:Any)->Self
polars.expr.expr.Expr.ne_missing(self,other:Any)->Self
polars.expr.expr.Expr.null_count(self)->Self
polars.expr.expr.Expr.or_(self,*others:Any)->Self
polars.expr.expr.Expr.over(self,expr:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr,mapping_strategy:WindowMappingStrategy='group_to_rows')->Self
polars.expr.expr.Expr.pct_change(self,n:int=1)->Self
polars.expr.expr.Expr.pipe(self,function:Callable[Concatenate[Expr,P],T],*args:P.args,**kwargs:P.kwargs)->T
polars.expr.expr.Expr.pow(self,exponent:int|float|None|Series|Expr)->Self
polars.expr.expr.Expr.prefix(self,prefix:str)->Self
polars.expr.expr.Expr.product(self)->Self
polars.expr.expr.Expr.qcut(self,q:list[float]|int,labels:list[str]|None=None,left_closed:bool=False,allow_duplicates:bool=False,include_breaks:bool=False)->Self
polars.expr.expr.Expr.quantile(self,quantile:float|Expr,interpolation:RollingInterpolationMethod='nearest')->Self
polars.expr.expr.Expr.radians(self)->Self
polars.expr.expr.Expr.rank(self,method:RankMethod='average',*,descending:bool=False,seed:int|None=None)->Self
polars.expr.expr.Expr.rechunk(self)->Self
polars.expr.expr.Expr.reinterpret(self,*,signed:bool=True)->Self
polars.expr.expr.Expr.repeat_by(self,by:pl.Series|Expr|str|int)->Self
polars.expr.expr.Expr.reshape(self,dimensions:tuple[int,...])->Self
polars.expr.expr.Expr.reverse(self)->Self
polars.expr.expr.Expr.rle(self)->Self
polars.expr.expr.Expr.rle_id(self)->Self
polars.expr.expr.Expr.rolling_apply(self,function:Callable[[Series],Any],window_size:int,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False)->Self
polars.expr.expr.Expr.rolling_max(self,window_size:int|timedelta|str,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left')->Self
polars.expr.expr.Expr.rolling_mean(self,window_size:int|timedelta|str,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left')->Self
polars.expr.expr.Expr.rolling_median(self,window_size:int|timedelta|str,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left')->Self
polars.expr.expr.Expr.rolling_min(self,window_size:int|timedelta|str,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left')->Self
polars.expr.expr.Expr.rolling_quantile(self,quantile:float,interpolation:RollingInterpolationMethod='nearest',window_size:int|timedelta|str=2,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left')->Self
polars.expr.expr.Expr.rolling_skew(self,window_size:int,*,bias:bool=True)->Self
polars.expr.expr.Expr.rolling_std(self,window_size:int|timedelta|str,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left',ddof:int=1)->Self
polars.expr.expr.Expr.rolling_sum(self,window_size:int|timedelta|str,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left')->Self
polars.expr.expr.Expr.rolling_var(self,window_size:int|timedelta|str,weights:list[float]|None=None,min_periods:int|None=None,*,center:bool=False,by:str|None=None,closed:ClosedInterval='left',ddof:int=1)->Self
polars.expr.expr.Expr.round(self,decimals:int=0)->Self
polars.expr.expr.Expr.sample(self,n:int|None=None,*,fraction:float|None=None,with_replacement:bool=False,shuffle:bool=False,seed:int|None=None,fixed_seed:bool=False)->Self
polars.expr.expr.Expr.search_sorted(self,element:Expr|int|float|Series,side:SearchSortedSide='any')->Self
polars.expr.expr.Expr.set_sorted(self,*,descending:bool=False)->Self
polars.expr.expr.Expr.shift(self,periods:int=1)->Self
polars.expr.expr.Expr.shift_and_fill(self,fill_value:IntoExpr,*,periods:int=1)->Self
polars.expr.expr.Expr.shrink_dtype(self)->Self
polars.expr.expr.Expr.shuffle(self,seed:int|None=None,fixed_seed:bool=False)->Self
polars.expr.expr.Expr.sign(self)->Self
polars.expr.expr.Expr.sin(self)->Self
polars.expr.expr.Expr.sinh(self)->Self
polars.expr.expr.Expr.skew(self,*,bias:bool=True)->Self
polars.expr.expr.Expr.slice(self,offset:int|Expr,length:int|Expr|None=None)->Self
polars.expr.expr.Expr.sort(self,*,descending:bool=False,nulls_last:bool=False)->Self
polars.expr.expr.Expr.sort_by(self,by:IntoExpr|Iterable[IntoExpr],*more_by:IntoExpr,descending:bool|Sequence[bool]=False)->Self
polars.expr.expr.Expr.sqrt(self)->Self
polars.expr.expr.Expr.std(self,ddof:int=1)->Self
polars.expr.expr.Expr.str(self)->ExprStringNameSpace
polars.expr.expr.Expr.struct(self)->ExprStructNameSpace
polars.expr.expr.Expr.sub(self,other:Any)->Self
polars.expr.expr.Expr.suffix(self,suffix:str)->Self
polars.expr.expr.Expr.sum(self)->Self
polars.expr.expr.Expr.tail(self,n:int|Expr=10)->Self
polars.expr.expr.Expr.take(self,indices:int|list[int]|Expr|Series|np.ndarray[Any,Any])->Self
polars.expr.expr.Expr.take_every(self,n:int)->Self
polars.expr.expr.Expr.tan(self)->Self
polars.expr.expr.Expr.tanh(self)->Self
polars.expr.expr.Expr.to_physical(self)->Self
polars.expr.expr.Expr.top_k(self,k:int=5)->Self
polars.expr.expr.Expr.truediv(self,other:Any)->Self
polars.expr.expr.Expr.unique(self,*,maintain_order:bool=False)->Self
polars.expr.expr.Expr.unique_counts(self)->Self
polars.expr.expr.Expr.upper_bound(self)->Self
polars.expr.expr.Expr.value_counts(self,*,multithreaded:bool=False,sort:bool=False)->Self
polars.expr.expr.Expr.var(self,ddof:int=1)->Self
polars.expr.expr.Expr.where(self,predicate:Expr)->Self
polars.expr.expr.Expr.xor(self,other:Any)->Self
polars.expr.expr._prepare_alpha(com:float|int|None=None,span:float|int|None=None,half_life:float|int|None=None,alpha:float|int|None=None)->float
polars.expr.expr._prepare_rolling_window_args(window_size:int|timedelta|str,min_periods:int|None=None)->tuple[str, int]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/sql/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/sql/context.py----------------------------------------
A:polars.sql.context.self._ctxt->polars.polars.PySQLContext.new()
A:polars.sql.context.frames->dict(frames or {})
A:polars.sql.context.self._tables_scope_stack->getattr(self, '_tables_scope_stack', [])
A:polars.sql.context.n_tables->len(self.tables())
A:polars.sql.context.res->wrap_ldf(self._ctxt.execute(query))
A:polars.sql.context.frame->frame.lazy().lazy()
polars.SQLContext(self,frames:Mapping[str,DataFrame|LazyFrame]|None=None,*,register_globals:bool|int=False,eager_execution:bool=False,**named_frames:DataFrame|LazyFrame)
polars.SQLContext.__enter__(self)->SQLContext[FrameType]
polars.SQLContext.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.SQLContext.__repr__(self)->str
polars.SQLContext.execute(self,query:str,eager:bool|None=None)->LazyFrame | DataFrame
polars.SQLContext.register(self,name:str,frame:DataFrame|LazyFrame)->Self
polars.SQLContext.register_globals(self,n:int|None=None)->Self
polars.SQLContext.register_many(self,frames:Mapping[str,DataFrame|LazyFrame]|None=None,**named_frames:DataFrame|LazyFrame)->Self
polars.SQLContext.tables(self)->list[str]
polars.SQLContext.unregister(self,names:str|Collection[str])->Self
polars.sql.context.SQLContext(self,frames:Mapping[str,DataFrame|LazyFrame]|None=None,*,register_globals:bool|int=False,eager_execution:bool=False,**named_frames:DataFrame|LazyFrame)
polars.sql.context.SQLContext.__enter__(self)->SQLContext[FrameType]
polars.sql.context.SQLContext.__exit__(self,exc_type:type[BaseException]|None,exc_val:BaseException|None,exc_tb:TracebackType|None)->None
polars.sql.context.SQLContext.__init__(self,frames:Mapping[str,DataFrame|LazyFrame]|None=None,*,register_globals:bool|int=False,eager_execution:bool=False,**named_frames:DataFrame|LazyFrame)
polars.sql.context.SQLContext.__repr__(self)->str
polars.sql.context.SQLContext.execute(self,query:str,eager:bool|None=None)->LazyFrame | DataFrame
polars.sql.context.SQLContext.register(self,name:str,frame:DataFrame|LazyFrame)->Self
polars.sql.context.SQLContext.register_globals(self,n:int|None=None)->Self
polars.sql.context.SQLContext.register_many(self,frames:Mapping[str,DataFrame|LazyFrame]|None=None,**named_frames:DataFrame|LazyFrame)->Self
polars.sql.context.SQLContext.tables(self)->list[str]
polars.sql.context.SQLContext.unregister(self,names:str|Collection[str])->Self


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/utils/_parse_expr_input.py----------------------------------------
A:polars.utils._parse_expr_input.exprs->_parse_regular_inputs(inputs, structify=__structify)
A:polars.utils._parse_expr_input.named_exprs->_parse_named_inputs(named_inputs, structify=__structify)
A:polars.utils._parse_expr_input.input_list->_first_input_to_list(inputs[0])
A:polars.utils._parse_expr_input.expr->polars.functions.struct(unaliased_expr).alias(expr_name)
A:polars.utils._parse_expr_input.unaliased_expr->polars.functions.struct(unaliased_expr).alias(expr_name).meta.undo_aliases()
A:polars.utils._parse_expr_input.expr_name->polars.functions.struct(unaliased_expr).alias(expr_name).meta.output_name()
polars.utils._parse_expr_input._first_input_to_list(inputs:IntoExpr|Iterable[IntoExpr])->list[IntoExpr]
polars.utils._parse_expr_input._parse_named_inputs(named_inputs:dict[str,IntoExpr],*,structify:bool=False)->Iterable[PyExpr]
polars.utils._parse_expr_input._parse_regular_inputs(inputs:tuple[IntoExpr|Iterable[IntoExpr],...],*,structify:bool=False)->list[PyExpr]
polars.utils._parse_expr_input._structify_expression(expr:Expr)->Expr
polars.utils._parse_expr_input.parse_as_expression(input:IntoExpr,*,str_as_lit:bool=False,structify:bool=False)->PyExpr | Expr
polars.utils._parse_expr_input.parse_as_list_of_expressions(*inputs:IntoExpr|Iterable[IntoExpr],__structify:bool=False,**named_inputs:IntoExpr)->list[PyExpr]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/utils/polars_version.py----------------------------------------
A:polars.utils.polars_version.polars_version_string->_get_polars_version()
polars._get_polars_version()->str
polars.utils.polars_version.get_polars_version()->str


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/utils/_wrap.py----------------------------------------
polars.utils._wrap.wrap_df(df:PyDataFrame)->DataFrame
polars.utils._wrap.wrap_expr(pyexpr:PyExpr)->Expr
polars.utils._wrap.wrap_ldf(ldf:PyLazyFrame)->LazyFrame
polars.utils._wrap.wrap_s(s:PySeries)->Series
polars.wrap_df(df:PyDataFrame)->DataFrame
polars.wrap_s(s:PySeries)->Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/utils/build_info.py----------------------------------------
polars.build_info()->dict[str, Any]
polars.utils.build_info.build_info()->dict[str, Any]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/utils/_scan.py----------------------------------------
polars.utils._execute_from_rust(function:Any,with_columns:list[str]|None,*args:Any)->DataFrame
polars.utils._scan._execute_from_rust(function:Any,with_columns:list[str]|None,*args:Any)->DataFrame


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/utils/show_versions.py----------------------------------------
A:polars.utils.show_versions.deps->_get_dependency_info()
A:polars.utils.show_versions.module->importlib.import_module(dep_name)
A:polars.utils.show_versions.module_version->importlib.metadata.version(dep_name)
polars.show_versions()->None
polars.show_versions._get_dependency_info()->dict[str, str]
polars.show_versions._get_dependency_version(dep_name:str)->str
polars.utils.show_versions._get_dependency_info()->dict[str, str]
polars.utils.show_versions._get_dependency_version(dep_name:str)->str
polars.utils.show_versions.show_versions()->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/utils/meta.py----------------------------------------
polars.get_idx_type()->DataTypeClass
polars.get_index_type()->DataTypeClass
polars.threadpool_size()->int
polars.utils.meta.get_idx_type()->DataTypeClass
polars.utils.meta.get_index_type()->DataTypeClass
polars.utils.meta.threadpool_size()->int


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/utils/deprecation.py----------------------------------------
A:polars.utils.deprecation.P->ParamSpec('P')
A:polars.utils.deprecation.T->TypeVar('T')
A:polars.utils.deprecation.kwargs[new]->kwargs.pop(alias)
A:polars.utils.deprecation.attr->partial(attr, **new_item[1])
A:polars.utils.deprecation.old_sig->inspect.signature(function)
A:polars.utils.deprecation.new_sig->inspect.signature(function).replace(parameters=new_params)
A:polars.utils.deprecation.num_allowed_args->len(allow_args)
A:polars.utils.deprecation.msg->msg_format.format(except_args=_format_argument_list(allow_args))
A:polars.utils.deprecation.args->', '.join([f'{x!r}' for x in allowed_args[:-1]])
polars.utils.deprecation._format_argument_list(allowed_args:list[str])->str
polars.utils.deprecation._rename_kwargs(func_name:str,kwargs:dict[str,object],aliases:dict[str,str])->None
polars.utils.deprecation.deprecate_nonkeyword_arguments(allowed_args:list[str]|None=None,message:str|None=None,*,version:str)->Callable[[Callable[P, T]], Callable[P, T]]
polars.utils.deprecation.deprecated(message:str,*,version:str)->Callable[[Callable[P, T]], Callable[P, T]]
polars.utils.deprecation.deprecated_alias(**aliases:str)->Callable[[Callable[P, T]], Callable[P, T]]
polars.utils.deprecation.deprecated_name(new_name:str,*,version:str)->Callable[[Callable[P, T]], Callable[P, T]]
polars.utils.deprecation.issue_deprecation_warning(message:str,*,version:str)->None
polars.utils.deprecation.redirect(from_to:dict[str,str|tuple[str,dict[str,Any]]],*,version:str)->Callable[[type[T]], type[T]]
polars.utils.deprecation.warn_closed_future_change()->Callable[[Callable[P, T]], Callable[P, T]]


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/utils/various.py----------------------------------------
A:polars.utils.various.P->ParamSpec('P')
A:polars.utils.various.T->TypeVar('T')
A:polars.utils.various._reverse_mapping_views->tuple((type(reversed(view)) for view in _views))
A:polars.utils.various.projection->list(columns)
A:polars.utils.various.path->os.path.expanduser(path)
A:polars.utils.various.version->version.split('.').split('.')
A:polars.utils.various.tp_base->Datetime(tp.time_unit)
A:polars.utils.various.d->polars.functions.col(c).str.replace('[A-Z ]+$', '')
A:polars.utils.various.cast_cols[c]->polars.functions.col(c).cast(tp)
A:polars.utils.various.NS->TypeVar('NS')
A:polars.utils.various.frame->inspect.currentframe()
A:polars.utils.various.fname->inspect.getfile(frame)
A:polars.utils.various.stack_frame->getattr(inspect.currentframe(), 'f_back', None)
A:polars.utils.various.local_items->list(stack_frame.f_locals.items())
polars.utils._polars_warn(msg:str)->None
polars.utils.various._NoDefault(Enum)
polars.utils.various._NoDefault.__repr__(self)->str
polars.utils.various._cast_repr_strings_with_schema(df:DataFrame,schema:dict[str,PolarsDataType|None])->DataFrame
polars.utils.various._get_stack_locals(of_type:type|tuple[type,...]|None=None,n_objects:int|None=None,n_frames:int|None=None,named:str|tuple[str,...]|None=None)->dict[str, Any]
polars.utils.various._in_notebook()->bool
polars.utils.various._is_generator(val:object)->bool
polars.utils.various._is_iterable_of(val:Iterable[object],eltype:type|tuple[type,...])->bool
polars.utils.various._polars_warn(msg:str)->None
polars.utils.various._prepare_row_count_args(row_count_name:str|None=None,row_count_offset:int=0)->tuple[str, int] | None
polars.utils.various._process_null_values(null_values:None|str|Sequence[str]|dict[str,str]=None)->None | str | Sequence[str] | list[tuple[str, str]]
polars.utils.various.arrlen(obj:Any)->int | None
polars.utils.various.can_create_dicts_with_pyarrow(dtypes:Sequence[PolarsDataType])->bool
polars.utils.various.find_stacklevel()->int
polars.utils.various.handle_projection_columns(columns:Sequence[str]|Sequence[int]|str|None)->tuple[list[int] | None, Sequence[str] | None]
polars.utils.various.in_terminal_that_supports_colour()->bool
polars.utils.various.is_bool_sequence(val:object)->TypeGuard[Sequence[bool]]
polars.utils.various.is_int_sequence(val:object)->TypeGuard[Sequence[int]]
polars.utils.various.is_str_sequence(val:object,*,allow_str:bool=False)->TypeGuard[Sequence[str]]
polars.utils.various.normalise_filepath(path:str|Path,check_not_directory:bool=True)->str
polars.utils.various.ordered_unique(values:Sequence[Any])->list[Any]
polars.utils.various.parse_version(version:Sequence[str|int])->tuple[int, ...]
polars.utils.various.range_to_series(name:str,rng:range,dtype:PolarsIntegerType|None=None)->Series
polars.utils.various.range_to_slice(rng:range)->slice
polars.utils.various.scale_bytes(sz:int,unit:SizeUnit)->int | float
polars.utils.various.sphinx_accessor(property)
polars.utils.various.sphinx_accessor.__get__(self,instance:Any,cls:type[NS])->NS


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/utils/_construction.py----------------------------------------
A:polars.utils._construction.py_s->list(islice(data, chunk_size))._s.clone()
A:polars.utils._construction.array->pyarrow.compute.cast(array, pa.dictionary(pa.uint32(), pa.large_string())).combine_chunks()
A:polars.utils._construction.pys->polars.polars.PySeries.from_arrow(name, array.chunks[0])
A:polars.utils._construction.it->pyarrow.compute.cast(array, pa.dictionary(pa.uint32(), pa.large_string())).combine_chunks().iterchunks()
A:polars.utils._construction.values->list(islice(data, chunk_size))
A:polars.utils._construction.(values, dtype)->numpy_values_and_dtype(values)
A:polars.utils._construction.constructor->py_type_to_constructor(python_dtype)
A:polars.utils._construction.slice_values->list(islice(values, chunk_size))
A:polars.utils._construction.schunk->to_series_chunk(slice_values, dtype)
A:polars.utils._construction.series->to_series_chunk([], dtype)
A:polars.utils._construction.str_exc->str(exc)
A:polars.utils._construction.value->_get_first_non_none(values)
A:polars.utils._construction.dtype->schema_overrides.get(name, None)
A:polars.utils._construction.python_dtype->type(value)
A:polars.utils._construction.pyseries->pyseries.cast(dtype, strict=True).cast(dtype, strict=True)
A:polars.utils._construction.py_series->polars.polars.PySeries.new_from_anyvalues(name, values, strict)
A:polars.utils._construction.time_unit->getattr(dtype, 'time_unit', None)
A:polars.utils._construction.s->s.cast(new_dtype).cast(new_dtype)
A:polars.utils._construction.tz->str(value.tzinfo)
A:polars.utils._construction.srs->srs.cast(dtype, strict=False).cast(dtype, strict=False)
A:polars.utils._construction.first_non_none->_get_first_non_none(values.values)
A:polars.utils._construction.name->str(values.name)
A:polars.utils._construction.data[i]->data[i].clone().clone()
A:polars.utils._construction.(columns, dtypes)->_unpack_schema(columns or pydf_columns, schema_overrides=schema_overrides)
A:polars.utils._construction.pydf->_post_apply_columns(pydf, original_schema, schema_overrides=schema_overrides)
A:polars.utils._construction.schema->list(schema.items())
A:polars.utils._construction.column_dtypes[col]->py_type_to_dtype(dtype)
A:polars.utils._construction.data->iter(data)
A:polars.utils._construction.array_len->max((arrlen(val) or 0 for val in data.values()))
A:polars.utils._construction.updated_data[name]->polars._reexport.Series(name, values=val if _is_generator(val) else [val], dtype=dtypes.get(name))
A:polars.utils._construction.(column_names, schema_overrides)->_unpack_schema(schema, schema_overrides=schema_overrides)
A:polars.utils._construction.column_names->list(data)
A:polars.utils._construction.count_numpy->sum((int(_check_for_numpy(val) and isinstance(val, np.ndarray) and (len(val) > 1000)) for val in data.values()))
A:polars.utils._construction.pool_size->threadpool_size()
A:polars.utils._construction.data_series->_handle_columns_arg(data_series, columns=column_names)
A:polars.utils._construction.new_dtype->next(iter(schema_overrides.values()))
A:polars.utils._construction.to_pydf->partial(_dataclasses_or_models_to_pydf, pydantic_model=True)
A:polars.utils._construction.unpack_nested->contains_nested(getattr(first_element, col, None), is_pydantic_model if from_model else dataclasses.is_dataclass)
A:polars.utils._construction.from_model->kwargs.get('pydantic_model')
A:polars.utils._construction.dc_fields->set(asdict(first_element))
A:polars.utils._construction.record_names->list(data.dtype.names)
A:polars.utils._construction.n_columns->len(record_names)
A:polars.utils._construction.column->coerce_arrow(column)
A:polars.utils._construction.ps->arrow_to_pyseries(name, column, rechunk)
A:polars.utils._construction.dictionary_cols[i]->wrap_s(ps)
A:polars.utils._construction.struct_cols[i]->wrap_s(ps)
A:polars.utils._construction.tbl->polars.dependencies.pyarrow.table(data_dict)
A:polars.utils._construction.df->to_frame_chunk([], original_schema)
A:polars.utils._construction.override_dtype->schema_overrides.get(col)
A:polars.utils._construction.data_series[0]->data_series[0].cast(new_dtype, True).cast(new_dtype, True)
A:polars.utils._construction.(_, schema_overrides)->_unpack_schema(schema, schema_overrides=schema_overrides)
A:polars.utils._construction.chunk_size->max(infer_schema_length or 0, adaptive_chunk_size or 1000)
A:polars.utils._construction.frame_chunk->to_frame_chunk(values, original_schema)
A:polars.utils._construction.original_schema->list(df.schema.items())
A:polars.utils._construction.arrow_dict[str(idxcol)]->_pandas_series_to_arrow(data.index.get_level_values(idxcol), nan_to_null=nan_to_null, length=length)
A:polars.utils._construction.arrow_dict[str(col)]->_pandas_series_to_arrow(data[col], nan_to_null=nan_to_null, length=length)
A:polars.utils._construction.arrow_table->polars.dependencies.pyarrow.table(arrow_dict)
A:polars.utils._construction.idx_type->get_index_type()
A:polars.utils._construction.idxs->polars.dependencies.numpy.where(idxs < 0, size + idxs, idxs)
polars.utils._construction._construct_series_with_fallbacks(constructor:Callable[[str,Sequence[Any],bool],PySeries],name:str,values:Sequence[Any],target_dtype:PolarsDataType|None,strict:bool)->PySeries
polars.utils._construction._dataclasses_or_models_to_pydf(first_element:Any,data:Sequence[Any],schema:SchemaDefinition|None,schema_overrides:SchemaDict|None,infer_schema_length:int|None,**kwargs:Any)->PyDataFrame
polars.utils._construction._expand_dict_data(data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]|Series],dtypes:SchemaDict)->Mapping[str, Sequence[object] | Mapping[str, Sequence[object]] | Series]
polars.utils._construction._expand_dict_scalars(data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]|Series],schema_overrides:SchemaDict|None=None,order:Sequence[str]|None=None,nan_to_null:bool=False)->dict[str, Series]
polars.utils._construction._get_annotations(obj:type)->dict[str, Any]
polars.utils._construction._get_first_non_none(values:Sequence[Any|None])->Any
polars.utils._construction._handle_columns_arg(data:list[PySeries],columns:Sequence[str]|None=None,from_dict:bool=False)->list[PySeries]
polars.utils._construction._pandas_series_to_arrow(values:pd.Series[Any]|pd.Index,nan_to_null:bool=True,length:int|None=None)->pa.Array
polars.utils._construction._post_apply_columns(pydf:PyDataFrame,columns:SchemaDefinition|None,structs:dict[str,Struct]|None=None,schema_overrides:SchemaDict|None=None)->PyDataFrame
polars.utils._construction._sequence_of_dict_to_pydf(first_element:Any,data:Sequence[Any],schema:SchemaDefinition|None,schema_overrides:SchemaDict|None,infer_schema_length:int|None,**kwargs:Any)->PyDataFrame
polars.utils._construction._sequence_of_elements_to_pydf(first_element:Any,data:Sequence[Any],schema:SchemaDefinition|None,schema_overrides:SchemaDict|None,**kwargs:Any)->PyDataFrame
polars.utils._construction._sequence_of_numpy_to_pydf(first_element:np.ndarray[Any,Any],**kwargs:Any)->PyDataFrame
polars.utils._construction._sequence_of_pandas_to_pydf(first_element:pd.Series[Any]|pd.DatetimeIndex,data:Sequence[Any],schema:SchemaDefinition|None,schema_overrides:SchemaDict|None,**kwargs:Any)->PyDataFrame
polars.utils._construction._sequence_of_sequence_to_pydf(first_element:Sequence[Any]|np.ndarray[Any,Any],data:Sequence[Any],schema:SchemaDefinition|None,schema_overrides:SchemaDict|None,orient:Orientation|None,infer_schema_length:int|None)->PyDataFrame
polars.utils._construction._sequence_of_series_to_pydf(first_element:Series,data:Sequence[Any],schema:SchemaDefinition|None,schema_overrides:SchemaDict|None,**kwargs:Any)->PyDataFrame
polars.utils._construction._sequence_of_tuple_to_pydf(first_element:tuple[Any,...],data:Sequence[Any],schema:SchemaDefinition|None,schema_overrides:SchemaDict|None,orient:Orientation|None,infer_schema_length:int|None)->PyDataFrame
polars.utils._construction._sequence_to_pydf_dispatcher(first_element:Any,data:Sequence[Any],schema:SchemaDefinition|None,schema_overrides:SchemaDict|None,orient:Orientation|None,infer_schema_length:int|None)->PyDataFrame
polars.utils._construction._unpack_schema(schema:SchemaDefinition|None,schema_overrides:SchemaDict|None=None,n_expected:int|None=None,lookup_names:Iterable[str]|None=None,include_overrides_in_columns:bool=False)->tuple[list[str], SchemaDict]
polars.utils._construction.arrow_to_pydf(data:pa.Table,schema:SchemaDefinition|None=None,schema_overrides:SchemaDict|None=None,rechunk:bool=True)->PyDataFrame
polars.utils._construction.arrow_to_pyseries(name:str,values:pa.Array,rechunk:bool=True)->PySeries
polars.utils._construction.coerce_arrow(array:pa.Array,rechunk:bool=True)->pa.Array
polars.utils._construction.contains_nested(value:Any,is_nested:Callable[[Any],bool])->bool
polars.utils._construction.dict_to_pydf(data:Mapping[str,Sequence[object]|Mapping[str,Sequence[object]]|Series],schema:SchemaDefinition|None=None,schema_overrides:SchemaDict|None=None,nan_to_null:bool=False)->PyDataFrame
polars.utils._construction.include_unknowns(schema:SchemaDict,cols:Sequence[str])->MutableMapping[str, PolarsDataType]
polars.utils._construction.is_namedtuple(cls:Any,annotated:bool=False)->bool
polars.utils._construction.is_pydantic_model(value:Any)->bool
polars.utils._construction.iterable_to_pydf(data:Iterable[Any],schema:SchemaDefinition|None=None,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None,chunk_size:int|None=None,infer_schema_length:int|None=N_INFER_DEFAULT)->PyDataFrame
polars.utils._construction.iterable_to_pyseries(name:str,values:Iterable[Any],dtype:PolarsDataType|None=None,strict:bool=True,dtype_if_empty:PolarsDataType|None=None,chunk_size:int=1000000)->PySeries
polars.utils._construction.nt_unpack(obj:Any)->Any
polars.utils._construction.numpy_to_idxs(idxs:np.ndarray[Any,Any],size:int)->pl.Series
polars.utils._construction.numpy_to_pydf(data:np.ndarray[Any,Any],schema:SchemaDefinition|None=None,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None,nan_to_null:bool=False)->PyDataFrame
polars.utils._construction.numpy_to_pyseries(name:str,values:np.ndarray[Any,Any],strict:bool=True,nan_to_null:bool=False)->PySeries
polars.utils._construction.pandas_has_default_index(df:pd.DataFrame)->bool
polars.utils._construction.pandas_to_pydf(data:pd.DataFrame,schema:SchemaDefinition|None=None,schema_overrides:SchemaDict|None=None,rechunk:bool=True,nan_to_null:bool=True,include_index:bool=False)->PyDataFrame
polars.utils._construction.pandas_to_pyseries(name:str,values:pd.Series[Any]|pd.DatetimeIndex,nan_to_null:bool=True)->PySeries
polars.utils._construction.sequence_from_anyvalue_or_object(name:str,values:Sequence[Any])->PySeries
polars.utils._construction.sequence_to_pydf(data:Sequence[Any],schema:SchemaDefinition|None=None,schema_overrides:SchemaDict|None=None,orient:Orientation|None=None,infer_schema_length:int|None=N_INFER_DEFAULT)->PyDataFrame
polars.utils._construction.sequence_to_pyseries(name:str,values:Sequence[Any],dtype:PolarsDataType|None=None,strict:bool=True,dtype_if_empty:PolarsDataType|None=None,nan_to_null:bool=False)->PySeries
polars.utils._construction.series_to_pydf(data:Series,schema:SchemaDefinition|None=None,schema_overrides:SchemaDict|None=None)->PyDataFrame
polars.utils._construction.series_to_pyseries(name:str,values:Series)->PySeries


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/utils/udfs.py----------------------------------------
A:polars.utils.udfs.LOAD_VALUES->frozenset(('LOAD_CONST', 'LOAD_DEREF', 'LOAD_FAST', 'LOAD_GLOBAL'))
A:polars.utils.udfs.UNARY_VALUES->frozenset(UNARY.values())
A:polars.utils.udfs._NUMPY_MODULE_ALIASES->frozenset(('np', 'numpy'))
A:polars.utils.udfs._NUMPY_FUNCTIONS->frozenset(('cbrt', 'cos', 'cosh', 'sin', 'sinh', 'sqrt', 'tan', 'tanh'))
A:polars.utils.udfs.frame->inspect.currentframe()
A:polars.utils.udfs.fname->inspect.getfile(frame)
A:polars.utils.udfs.original_instructions->iter([])
A:polars.utils.udfs.self._param_name->self._get_param_name(function)
A:polars.utils.udfs.self._rewritten_instructions->self._rewrite((self._upgrade_instruction(inst) for inst in instructions if inst.opname not in self._ignored_ops))
A:polars.utils.udfs.sig->signature(function)
A:polars.utils.udfs.combined_offset_idxs->set()
A:polars.utils.udfs.search_expr->expression.replace(col_expr, '')
A:polars.utils.udfs.n->count()
A:polars.utils.udfs.control_flow_blocks->defaultdict(list)
A:polars.utils.udfs.expression_strings->self._inject_nesting({offset: InstructionTranslator(instructions=ops, apply_target=self._apply_target).to_expression(col=col, param_name=self._param_name, depth=int(bool(logical_instructions))) for (offset, ops) in control_flow_blocks.items()}, logical_instructions)
A:polars.utils.udfs.polars_expr->' '.join((expr for (_offset, expr) in expression_strings))
A:polars.utils.udfs.target_name->self._get_target_name(col, suggested_expression)
A:polars.utils.udfs.self._stack->self._to_intermediate_stack(instructions, apply_target)
A:polars.utils.udfs.e1->cls._expr(value.left_operand, col, param_name, depth + 1)
A:polars.utils.udfs.e2->cls._expr(value.right_operand, col, param_name, depth + 1)
A:polars.utils.udfs._ignored_ops->frozenset(['COPY_FREE_VARS', 'PRECALL', 'RESUME', 'RETURN_VALUE'])
A:polars.utils.udfs.self._instructions->list(instructions)
A:polars.utils.udfs.synthetic_call->inst._replace(argrepr=OpNames.BINARY[inst.opname], opname='BINARY_OP')._replace(opname='POLARS_EXPRESSION', argval=expr_name, argrepr=expr_name)
A:polars.utils.udfs.operand->inst3._replace(offset=inst1.offset)
A:polars.utils.udfs.variables->_get_all_caller_variables()
A:polars.utils.udfs.inst->inst._replace(argrepr=OpNames.BINARY[inst.opname], opname='BINARY_OP')._replace(argrepr=OpNames.BINARY[inst.opname], opname='BINARY_OP')
A:polars.utils.udfs.parser->BytecodeParser(function, apply_target)
A:polars.utils.udfs.(module, suggestion)->_is_raw_function(function)
polars.utils.udfs.BytecodeParser(self,function:Callable[[Any],Any],apply_target:ApplyTarget)
polars.utils.udfs.BytecodeParser.__init__(self,function:Callable[[Any],Any],apply_target:ApplyTarget)
polars.utils.udfs.BytecodeParser._get_param_name(function:Callable[[Any],Any])->str | None
polars.utils.udfs.BytecodeParser._get_target_name(self,col:str,expression:str)->str
polars.utils.udfs.BytecodeParser._inject_nesting(self,expression_blocks:dict[int,str],logical_instructions:list[Instruction])->list[tuple[int, str]]
polars.utils.udfs.BytecodeParser.apply_target(self)->ApplyTarget
polars.utils.udfs.BytecodeParser.can_rewrite(self)->bool
polars.utils.udfs.BytecodeParser.dis(self)->None
polars.utils.udfs.BytecodeParser.function(self)->Callable[[Any], Any]
polars.utils.udfs.BytecodeParser.original_instructions(self)->list[Instruction]
polars.utils.udfs.BytecodeParser.param_name(self)->str | None
polars.utils.udfs.BytecodeParser.rewritten_instructions(self)->list[Instruction]
polars.utils.udfs.BytecodeParser.to_expression(self,col:str)->str | None
polars.utils.udfs.BytecodeParser.warn(self,col:str,suggestion_override:str|None=None,udf_override:str|None=None)->None
polars.utils.udfs.InstructionTranslator(self,instructions:list[Instruction],apply_target:ApplyTarget)
polars.utils.udfs.InstructionTranslator.__init__(self,instructions:list[Instruction],apply_target:ApplyTarget)
polars.utils.udfs.InstructionTranslator._expr(cls,value:StackEntry,col:str,param_name:str,depth:int)->str
polars.utils.udfs.InstructionTranslator._to_intermediate_stack(self,instructions:list[Instruction],apply_target:ApplyTarget)->StackEntry
polars.utils.udfs.InstructionTranslator.op(cls,inst:Instruction)->str
polars.utils.udfs.InstructionTranslator.to_expression(self,col:str,param_name:str,depth:int)->str
polars.utils.udfs.OpNames
polars.utils.udfs.RewrittenInstructions(self,instructions:Iterator[Instruction])
polars.utils.udfs.RewrittenInstructions.__getitem__(self,item:Any)->Instruction
polars.utils.udfs.RewrittenInstructions.__init__(self,instructions:Iterator[Instruction])
polars.utils.udfs.RewrittenInstructions.__iter__(self)->Iterator[Instruction]
polars.utils.udfs.RewrittenInstructions.__len__(self)->int
polars.utils.udfs.RewrittenInstructions._matches(self,idx:int,*,opnames:list[set[str]],argvals:list[set[Any]|frozenset[Any]|dict[Any,Any]]|None)->list[Instruction]
polars.utils.udfs.RewrittenInstructions._rewrite(self,instructions:Iterator[Instruction])->list[Instruction]
polars.utils.udfs.RewrittenInstructions._rewrite_builtins(self,idx:int,updated_instructions:list[Instruction])->int
polars.utils.udfs.RewrittenInstructions._rewrite_functions(self,idx:int,updated_instructions:list[Instruction])->int
polars.utils.udfs.RewrittenInstructions._rewrite_lookups(self,idx:int,updated_instructions:list[Instruction])->int
polars.utils.udfs.RewrittenInstructions._rewrite_methods(self,idx:int,updated_instructions:list[Instruction])->int
polars.utils.udfs.RewrittenInstructions._upgrade_instruction(inst:Instruction)->Instruction
polars.utils.udfs.StackValue(NamedTuple)
polars.utils.udfs._get_all_caller_variables()->dict[str, Any]
polars.utils.udfs._is_raw_function(function:Callable[[Any],Any])->tuple[str, str]
polars.utils.udfs.warn_on_inefficient_apply(function:Callable[[Any],Any],columns:list[str],apply_target:ApplyTarget)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/utils/convert.py----------------------------------------
A:polars.utils.convert.P->ParamSpec('P')
A:polars.utils.convert.T->TypeVar('T')
A:polars.utils.convert._reverse_mapping_views->tuple((type(reversed(view)) for view in _views))
A:polars.utils.convert.EPOCH->datetime(1970, 1, 1).replace(tzinfo=None)
A:polars.utils.convert.EPOCH_UTC->datetime(1970, 1, 1, tzinfo=timezone.utc)
A:polars.utils.convert.t->t.replace(tzinfo=timezone.utc).replace(tzinfo=timezone.utc)
A:polars.utils.convert.dt->_localize(dt, 'UTC')
A:polars.utils.convert.(seconds, nanoseconds)->divmod(value, 1000000000)
A:polars.utils.convert.(minutes, seconds)->divmod(seconds, 60)
A:polars.utils.convert.(hours, minutes)->divmod(minutes, 60)
A:polars.utils.convert._tzinfo->_parse_fixed_tz_offset(time_zone)
A:polars.utils.convert.dt_offset->datetime.datetime.fromisoformat('2000-01-01T00:00:00' + offset)
polars.utils._date_to_pl_date(d:date)->int
polars.utils._datetime_for_anyvalue(dt:datetime)->tuple[int, int]
polars.utils._datetime_for_anyvalue_windows(dt:datetime)->tuple[float, int]
polars.utils._time_to_pl_time(t:time)->int
polars.utils._timedelta_to_pl_timedelta(td:timedelta,time_unit:TimeUnit|None=None)->int
polars.utils._to_python_date(value:int|float)->date
polars.utils._to_python_datetime(value:int|float,time_unit:TimeUnit|None='ns',time_zone:str|None=None)->datetime
polars.utils._to_python_decimal(sign:int,digits:Sequence[int],prec:int,scale:int)->Decimal
polars.utils._to_python_time(value:int)->time
polars.utils._to_python_timedelta(value:int|float,time_unit:TimeUnit='ns')->timedelta
polars.utils.convert._create_decimal_with_prec(precision:int)->Callable[[tuple[int, Sequence[int], int]], Decimal]
polars.utils.convert._date_to_pl_date(d:date)->int
polars.utils.convert._datetime_for_anyvalue(dt:datetime)->tuple[int, int]
polars.utils.convert._datetime_for_anyvalue_windows(dt:datetime)->tuple[float, int]
polars.utils.convert._datetime_to_pl_timestamp(dt:datetime,time_unit:TimeUnit|None)->int
polars.utils.convert._localize(dt:datetime,time_zone:str)->datetime
polars.utils.convert._parse_fixed_tz_offset(offset:str)->tzinfo
polars.utils.convert._time_to_pl_time(t:time)->int
polars.utils.convert._timedelta_to_pl_duration(td:timedelta|str|None)->str | None
polars.utils.convert._timedelta_to_pl_timedelta(td:timedelta,time_unit:TimeUnit|None=None)->int
polars.utils.convert._timestamp_in_seconds(dt:datetime)->int
polars.utils.convert._to_python_date(value:int|float)->date
polars.utils.convert._to_python_datetime(value:int|float,time_unit:TimeUnit|None='ns',time_zone:str|None=None)->datetime
polars.utils.convert._to_python_decimal(sign:int,digits:Sequence[int],prec:int,scale:int)->Decimal
polars.utils.convert._to_python_time(value:int)->time
polars.utils.convert._to_python_timedelta(value:int|float,time_unit:TimeUnit='ns')->timedelta


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/functions/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/functions/as_datatype.py----------------------------------------
A:polars.functions.as_datatype.year_expr->parse_as_expression(year)
A:polars.functions.as_datatype.month_expr->parse_as_expression(month)
A:polars.functions.as_datatype.day_expr->parse_as_expression(day)
A:polars.functions.as_datatype.hour->parse_as_expression(hour)
A:polars.functions.as_datatype.minute->parse_as_expression(minute)
A:polars.functions.as_datatype.second->parse_as_expression(second)
A:polars.functions.as_datatype.microsecond->parse_as_expression(microsecond)
A:polars.functions.as_datatype.hours->parse_as_expression(hours)
A:polars.functions.as_datatype.minutes->parse_as_expression(minutes)
A:polars.functions.as_datatype.seconds->parse_as_expression(seconds)
A:polars.functions.as_datatype.milliseconds->parse_as_expression(milliseconds)
A:polars.functions.as_datatype.microseconds->parse_as_expression(microseconds)
A:polars.functions.as_datatype.nanoseconds->parse_as_expression(nanoseconds)
A:polars.functions.as_datatype.days->parse_as_expression(days)
A:polars.functions.as_datatype.weeks->parse_as_expression(weeks)
A:polars.functions.as_datatype.exprs->parse_as_list_of_expressions(exprs, *more_exprs)
A:polars.functions.as_datatype.first_input->named_exprs.pop('exprs')
A:polars.functions.as_datatype.pyexprs->parse_as_list_of_expressions(*exprs, **named_exprs)
A:polars.functions.as_datatype.expr->expr.cast(Struct(schema), strict=False).cast(Struct(schema), strict=False)
A:polars.functions.as_datatype.arguments->iter(args)
A:polars.functions.as_datatype.e->wrap_expr(parse_as_expression(next(arguments)))
polars.concat_list(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr
polars.concat_str(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr,separator:str='')->Expr
polars.date(year:Expr|str|int,month:Expr|str|int,day:Expr|str|int)->Expr
polars.datetime(year:Expr|str|int,month:Expr|str|int,day:Expr|str|int,hour:Expr|str|int|None=None,minute:Expr|str|int|None=None,second:Expr|str|int|None=None,microsecond:Expr|str|int|None=None)->Expr
polars.duration(*,days:Expr|str|int|None=None,seconds:Expr|str|int|None=None,nanoseconds:Expr|str|int|None=None,microseconds:Expr|str|int|None=None,milliseconds:Expr|str|int|None=None,minutes:Expr|str|int|None=None,hours:Expr|str|int|None=None,weeks:Expr|str|int|None=None)->Expr
polars.format(f_string:str,*args:Expr|str)->Expr
polars.functions.as_datatype.concat_list(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr
polars.functions.as_datatype.concat_str(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr,separator:str='')->Expr
polars.functions.as_datatype.date_(year:Expr|str|int,month:Expr|str|int,day:Expr|str|int)->Expr
polars.functions.as_datatype.datetime_(year:Expr|str|int,month:Expr|str|int,day:Expr|str|int,hour:Expr|str|int|None=None,minute:Expr|str|int|None=None,second:Expr|str|int|None=None,microsecond:Expr|str|int|None=None)->Expr
polars.functions.as_datatype.duration(*,days:Expr|str|int|None=None,seconds:Expr|str|int|None=None,nanoseconds:Expr|str|int|None=None,microseconds:Expr|str|int|None=None,milliseconds:Expr|str|int|None=None,minutes:Expr|str|int|None=None,hours:Expr|str|int|None=None,weeks:Expr|str|int|None=None)->Expr
polars.functions.as_datatype.format(f_string:str,*args:Expr|str)->Expr
polars.functions.as_datatype.struct(*exprs:IntoExpr|Iterable[IntoExpr],schema:SchemaDict|None=None,eager:bool=False,**named_exprs:IntoExpr)->Expr | Series
polars.functions.as_datatype.time_(hour:Expr|str|int|None=None,minute:Expr|str|int|None=None,second:Expr|str|int|None=None,microsecond:Expr|str|int|None=None)->Expr
polars.struct(*exprs:IntoExpr|Iterable[IntoExpr],schema:SchemaDict|None=None,eager:bool=False,**named_exprs:IntoExpr)->Expr | Series
polars.time(hour:Expr|str|int|None=None,minute:Expr|str|int|None=None,second:Expr|str|int|None=None,microsecond:Expr|str|int|None=None)->Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/functions/repeat.py----------------------------------------
A:polars.functions.repeat.n->polars.functions.lit(n)
A:polars.functions.repeat.value->parse_as_expression(value, str_as_lit=True)
A:polars.functions.repeat.expr->expr.alias(name).alias(name)
polars.functions.repeat.ones(n:int|Expr,dtype:PolarsDataType=Float64,*,eager:bool=False)->Expr | Series
polars.functions.repeat.repeat(value:IntoExpr|None,n:int|Expr,*,dtype:PolarsDataType|None=None,eager:bool=False,name:str|None=None)->Expr | Series
polars.functions.repeat.zeros(n:int|Expr,dtype:PolarsDataType=Float64,*,eager:bool=False)->Expr | Series
polars.ones(n:int|Expr,dtype:PolarsDataType=Float64,*,eager:bool=False)->Expr | Series
polars.repeat(value:IntoExpr|None,n:int|Expr,*,dtype:PolarsDataType|None=None,eager:bool=False,name:str|None=None)->Expr | Series
polars.zeros(n:int|Expr,dtype:PolarsDataType=Float64,*,eager:bool=False)->Expr | Series


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/functions/whenthen.py----------------------------------------
A:polars.functions.whenthen.condition_pyexpr->parse_as_expression(condition)
polars.functions.whenthen.when(condition:IntoExpr)->pl.When
polars.when(condition:IntoExpr)->pl.When


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/functions/range.py----------------------------------------
A:polars.functions.range.start->time(0, 0, 0)
A:polars.functions.range.end->time(23, 59, 59, 999999)
A:polars.functions.range.result->wrap_expr(plr.time_ranges(start_pyexpr, end_pyexpr, interval, closed))
A:polars.functions.range.interval->interval.replace(' ', '').replace(' ', '')
A:polars.functions.range.start_pyexpr->parse_as_expression(start)
A:polars.functions.range.end_pyexpr->parse_as_expression(end)
A:polars.functions.range.s->s.explode().set_sorted().explode().set_sorted()
polars.arange(start:int|IntoExpr,end:int|IntoExpr,step:int=1,*,dtype:PolarsDataType|None=None,eager:bool=False)->Expr | Series
polars.date_range(start:date|datetime|IntoExpr,end:date|datetime|IntoExpr,interval:str|timedelta='1d',*,closed:ClosedInterval='both',time_unit:TimeUnit|None=None,time_zone:str|None=None,eager:bool=False,name:str|None=None)->Series | Expr
polars.date_ranges(start:date|datetime|IntoExpr,end:date|datetime|IntoExpr,interval:str|timedelta='1d',*,closed:ClosedInterval='both',time_unit:TimeUnit|None=None,time_zone:str|None=None,eager:bool=False)->Series | Expr
polars.functions.range._parse_interval_argument(interval:str|timedelta)->str
polars.functions.range._warn_for_deprecation_date_range()->None
polars.functions.range._warn_for_deprecation_time_range()->None
polars.functions.range.arange(start:int|IntoExpr,end:int|IntoExpr,step:int=1,*,dtype:PolarsDataType|None=None,eager:bool=False)->Expr | Series
polars.functions.range.date_range(start:date|datetime|IntoExpr,end:date|datetime|IntoExpr,interval:str|timedelta='1d',*,closed:ClosedInterval='both',time_unit:TimeUnit|None=None,time_zone:str|None=None,eager:bool=False,name:str|None=None)->Series | Expr
polars.functions.range.date_ranges(start:date|datetime|IntoExpr,end:date|datetime|IntoExpr,interval:str|timedelta='1d',*,closed:ClosedInterval='both',time_unit:TimeUnit|None=None,time_zone:str|None=None,eager:bool=False)->Series | Expr
polars.functions.range.int_range(start:int|IntoExpr,end:int|IntoExpr,step:int=1,*,dtype:PolarsIntegerType=Int64,eager:bool=False)->Expr | Series
polars.functions.range.int_ranges(start:IntoExpr,end:IntoExpr,step:int=1,*,dtype:PolarsIntegerType=Int64,eager:bool=False)->Expr | Series
polars.functions.range.time_range(start:time|IntoExpr|None=None,end:time|IntoExpr|None=None,interval:str|timedelta='1h',*,closed:ClosedInterval='both',eager:bool=False,name:str|None=None)->Series | Expr
polars.functions.range.time_ranges(start:time|IntoExpr|None=None,end:time|IntoExpr|None=None,interval:str|timedelta='1h',*,closed:ClosedInterval='both',eager:bool=False)->Series | Expr
polars.int_range(start:int|IntoExpr,end:int|IntoExpr,step:int=1,*,dtype:PolarsIntegerType=Int64,eager:bool=False)->Expr | Series
polars.int_ranges(start:IntoExpr,end:IntoExpr,step:int=1,*,dtype:PolarsIntegerType=Int64,eager:bool=False)->Expr | Series
polars.time_range(start:time|IntoExpr|None=None,end:time|IntoExpr|None=None,interval:str|timedelta='1h',*,closed:ClosedInterval='both',eager:bool=False,name:str|None=None)->Series | Expr
polars.time_ranges(start:time|IntoExpr|None=None,end:time|IntoExpr|None=None,interval:str|timedelta='1h',*,closed:ClosedInterval='both',eager:bool=False)->Series | Expr


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/functions/lazy.py----------------------------------------
A:polars.functions.lazy.names->list(name)
A:polars.functions.lazy.e->wrap_expr(plr.lit(value, allow_object))
A:polars.functions.lazy.item->value.item()
A:polars.functions.lazy.a->col(a)
A:polars.functions.lazy.b->col(b)
A:polars.functions.lazy.exprs->parse_as_list_of_expressions(exprs, *more_exprs)
A:polars.functions.lazy.acc->parse_as_expression(acc, str_as_lit=True)
A:polars.functions.lazy.y->col(y)
A:polars.functions.lazy.x->col(x)
A:polars.functions.lazy.ldf->lf._ldf.optimization_toggle(type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, slice_pushdown, comm_subplan_elim, comm_subexpr_elim, streaming)
A:polars.functions.lazy.out->polars.polars.collect_all(prepared)
A:polars.functions.lazy.condition->parse_as_expression(condition)
A:polars.functions.lazy.column->polars._reexport.Series(column)
polars.apply(exprs:Sequence[str|Expr],function:Callable[[Sequence[Series]],Series|Any],return_dtype:PolarsDataType|None=None,*,returns_scalar:bool=True)->Expr
polars.approx_unique(column:str|Expr)->Expr
polars.arctan2(y:str|Expr,x:str|Expr)->Expr
polars.arctan2d(y:str|Expr,x:str|Expr)->Expr
polars.arg_sort_by(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr,descending:bool|Sequence[bool]=False)->Expr
polars.arg_where(condition:Expr|Series,*,eager:bool=False)->Expr | Series
polars.avg(column:str|Series)->Expr | float
polars.coalesce(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr
polars.col(name:str|PolarsDataType|Iterable[str]|Iterable[PolarsDataType],*more_names:str|PolarsDataType)->Expr
polars.collect_all(lazy_frames:Sequence[LazyFrame],*,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,streaming:bool=False)->list[DataFrame]
polars.corr(a:str|Expr,b:str|Expr,*,method:CorrelationMethod='pearson',ddof:int=1,propagate_nans:bool=False)->Expr
polars.count(column:str|Series|None=None)->Expr | int
polars.cov(a:str|Expr,b:str|Expr)->Expr
polars.cumfold(acc:IntoExpr,function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr,*,include_init:bool=False)->Expr
polars.cumreduce(function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr)->Expr
polars.element()->Expr
polars.exclude(columns:str|PolarsDataType|Iterable[str]|Iterable[PolarsDataType],*more_columns:str|PolarsDataType)->Expr
polars.first(column:str|Series|None=None)->Expr | Any
polars.fold(acc:IntoExpr,function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr)->Expr
polars.from_epoch(column:str|Expr|Series|Sequence[int],time_unit:EpochTimeUnit='s')->Expr | Series
polars.functions.lazy.apply(exprs:Sequence[str|Expr],function:Callable[[Sequence[Series]],Series|Any],return_dtype:PolarsDataType|None=None,*,returns_scalar:bool=True)->Expr
polars.functions.lazy.approx_unique(column:str|Expr)->Expr
polars.functions.lazy.arctan2(y:str|Expr,x:str|Expr)->Expr
polars.functions.lazy.arctan2d(y:str|Expr,x:str|Expr)->Expr
polars.functions.lazy.arg_sort_by(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr,descending:bool|Sequence[bool]=False)->Expr
polars.functions.lazy.arg_where(condition:Expr|Series,*,eager:bool=False)->Expr | Series
polars.functions.lazy.avg(column:str|Series)->Expr | float
polars.functions.lazy.coalesce(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr
polars.functions.lazy.col(name:str|PolarsDataType|Iterable[str]|Iterable[PolarsDataType],*more_names:str|PolarsDataType)->Expr
polars.functions.lazy.collect_all(lazy_frames:Sequence[LazyFrame],*,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,no_optimization:bool=False,slice_pushdown:bool=True,comm_subplan_elim:bool=True,comm_subexpr_elim:bool=True,streaming:bool=False)->list[DataFrame]
polars.functions.lazy.corr(a:str|Expr,b:str|Expr,*,method:CorrelationMethod='pearson',ddof:int=1,propagate_nans:bool=False)->Expr
polars.functions.lazy.count(column:str|Series|None=None)->Expr | int
polars.functions.lazy.cov(a:str|Expr,b:str|Expr)->Expr
polars.functions.lazy.cumfold(acc:IntoExpr,function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr,*,include_init:bool=False)->Expr
polars.functions.lazy.cumreduce(function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr)->Expr
polars.functions.lazy.element()->Expr
polars.functions.lazy.exclude(columns:str|PolarsDataType|Iterable[str]|Iterable[PolarsDataType],*more_columns:str|PolarsDataType)->Expr
polars.functions.lazy.first(column:str|Series|None=None)->Expr | Any
polars.functions.lazy.fold(acc:IntoExpr,function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr)->Expr
polars.functions.lazy.from_epoch(column:str|Expr|Series|Sequence[int],time_unit:EpochTimeUnit='s')->Expr | Series
polars.functions.lazy.groups(column:str)->Expr
polars.functions.lazy.head(column:str|Series,n:int=10)->Expr | Series
polars.functions.lazy.implode(name:str)->Expr
polars.functions.lazy.last(column:str|Series|None=None)->Expr
polars.functions.lazy.lit(value:Any,dtype:PolarsDataType|None=None,*,allow_object:bool=False)->Expr
polars.functions.lazy.map(exprs:Sequence[str]|Sequence[Expr],function:Callable[[Sequence[Series]],Series],return_dtype:PolarsDataType|None=None)->Expr
polars.functions.lazy.mean(column:str|Series)->Expr | float | None
polars.functions.lazy.median(column:str|Series)->Expr | float | int | None
polars.functions.lazy.n_unique(column:str|Series)->Expr | int
polars.functions.lazy.quantile(column:str,quantile:float|Expr,interpolation:RollingInterpolationMethod='nearest')->Expr
polars.functions.lazy.reduce(function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr)->Expr
polars.functions.lazy.rolling_corr(a:str|Expr,b:str|Expr,*,window_size:int,min_periods:int|None=None,ddof:int=1)->Expr
polars.functions.lazy.rolling_cov(a:str|Expr,b:str|Expr,*,window_size:int,min_periods:int|None=None,ddof:int=1)->Expr
polars.functions.lazy.select(*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->DataFrame
polars.functions.lazy.sql_expr(sql:str|Sequence[str])->Expr | list[Expr]
polars.functions.lazy.std(column:str|Series,ddof:int=1)->Expr | float | None
polars.functions.lazy.tail(column:str|Series,n:int=10)->Expr | Series
polars.functions.lazy.var(column:str|Series,ddof:int=1)->Expr | float | None
polars.groups(column:str)->Expr
polars.head(column:str|Series,n:int=10)->Expr | Series
polars.implode(name:str)->Expr
polars.last(column:str|Series|None=None)->Expr
polars.lit(value:Any,dtype:PolarsDataType|None=None,*,allow_object:bool=False)->Expr
polars.map(exprs:Sequence[str]|Sequence[Expr],function:Callable[[Sequence[Series]],Series],return_dtype:PolarsDataType|None=None)->Expr
polars.mean(column:str|Series)->Expr | float | None
polars.median(column:str|Series)->Expr | float | int | None
polars.n_unique(column:str|Series)->Expr | int
polars.quantile(column:str,quantile:float|Expr,interpolation:RollingInterpolationMethod='nearest')->Expr
polars.reduce(function:Callable[[Series,Series],Series],exprs:Sequence[Expr|str]|Expr)->Expr
polars.rolling_corr(a:str|Expr,b:str|Expr,*,window_size:int,min_periods:int|None=None,ddof:int=1)->Expr
polars.rolling_cov(a:str|Expr,b:str|Expr,*,window_size:int,min_periods:int|None=None,ddof:int=1)->Expr
polars.select(*exprs:IntoExpr|Iterable[IntoExpr],**named_exprs:IntoExpr)->DataFrame
polars.sql_expr(sql:str|Sequence[str])->Expr | list[Expr]
polars.std(column:str|Series,ddof:int=1)->Expr | float | None
polars.tail(column:str|Series,n:int=10)->Expr | Series
polars.var(column:str|Series,ddof:int=1)->Expr | float | None


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/functions/eager.py----------------------------------------
A:polars.functions.eager.elems->list(items)
A:polars.functions.eager.all_columns->list(chain.from_iterable((e.columns for e in elems)))
A:polars.functions.eager.common_cols->sorted(reduce(lambda x, y: set(x) & set(y), chain((e.columns for e in elems))), key=lambda k: key.get(k, 0))
A:polars.functions.eager.eager->isinstance(frames[0], pl.DataFrame)
A:polars.functions.eager.out->wrap_s(plr.concat_series(elems))
A:polars.functions.eager.alignment_frame->reduce(lambda x, y: x.join(y, how=how, on=align_on, suffix=str(id(y))), frames).sort(by=align_on, descending=descending).lazy()
A:polars.functions.eager.aligned_cols->set(alignment_frame.columns)
A:polars.functions.eager.sfx->str(id(df))
A:polars.functions.eager.f->f.select(select).select(select)
polars.align_frames(*frames:FrameType,on:str|Expr|Sequence[str]|Sequence[Expr]|Sequence[str|Expr],how:JoinStrategy='outer',select:str|Expr|Sequence[str|Expr]|None=None,descending:bool|Sequence[bool]=False)->list[FrameType]
polars.concat(items:Iterable[PolarsType],*,how:ConcatMethod='vertical',rechunk:bool=True,parallel:bool=True)->PolarsType
polars.functions.eager.align_frames(*frames:FrameType,on:str|Expr|Sequence[str]|Sequence[Expr]|Sequence[str|Expr],how:JoinStrategy='outer',select:str|Expr|Sequence[str|Expr]|None=None,descending:bool|Sequence[bool]=False)->list[FrameType]
polars.functions.eager.concat(items:Iterable[PolarsType],*,how:ConcatMethod='vertical',rechunk:bool=True,parallel:bool=True)->PolarsType


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/functions/aggregation/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/functions/aggregation/vertical.py----------------------------------------
polars.all(exprs:IntoExpr|Iterable[IntoExpr]|None=None,*more_exprs:IntoExpr)->Expr | bool | None
polars.any(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr | bool | None
polars.cumsum(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr | Series
polars.functions.aggregation.vertical._warn_for_deprecated_horizontal_use(name:str)->None
polars.functions.aggregation.vertical.all(exprs:IntoExpr|Iterable[IntoExpr]|None=None,*more_exprs:IntoExpr)->Expr | bool | None
polars.functions.aggregation.vertical.any(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr | bool | None
polars.functions.aggregation.vertical.cumsum(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr | Series
polars.functions.aggregation.vertical.max(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr | Any
polars.functions.aggregation.vertical.min(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr | PythonLiteral | None
polars.functions.aggregation.vertical.sum(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr | int | float
polars.max(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr | Any
polars.min(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr | PythonLiteral | None
polars.sum(exprs:IntoExpr|Iterable[IntoExpr],*more_exprs:IntoExpr)->Expr | int | float


----------------------------------------/dataset/nuaa/anaconda3/envs/polars0.18.10/lib/python3.9/site-packages/polars/functions/aggregation/horizontal.py----------------------------------------
A:polars.functions.aggregation.horizontal.pyexprs->parse_as_list_of_expressions(*exprs)
polars.all_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.any_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.cumsum_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.functions.aggregation.horizontal.all_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.functions.aggregation.horizontal.any_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.functions.aggregation.horizontal.cumsum_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.functions.aggregation.horizontal.max_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.functions.aggregation.horizontal.min_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.functions.aggregation.horizontal.sum_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.max_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.min_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr
polars.sum_horizontal(*exprs:IntoExpr|Iterable[IntoExpr])->Expr

