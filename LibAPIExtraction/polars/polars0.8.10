
----------------------------------------/home/zhang/Packages/polars/polars0.8.10/ffi.py----------------------------------------
A:polars.ffi.ptr_ctype->ctypes.cast(ptr, ctypes.POINTER(ptr_type))
polars.ffi._as_float_ndarray(ptr:int,size:int)->np.ndarray
polars.ffi._ptr_to_numpy(ptr:int,len:int,ptr_type:Any)->np.ndarray


----------------------------------------/home/zhang/Packages/polars/polars0.8.10/_html.py----------------------------------------
A:polars._html.self.row_idx->range(0, df.height)
A:polars._html.self.col_idx->range(0, df.width)
A:polars._html.template_mid->'\n\n'.join(map(lambda t: template_select % t, element_props))
A:polars._html.template->dedent('\n'.join((template_first, template_mid, template_last)))
A:polars._html.df->polars.DataFrame({'a': [1, 2, 3], 'b': [1, 2, 3]})
A:polars._html.fmt->NotebookFormatter(df)
polars._html.HTMLFormatter(self,df:'pl.DataFrame',max_cols:int=75,max_rows:int=40)
polars._html.HTMLFormatter.__init__(self,df:'pl.DataFrame',max_cols:int=75,max_rows:int=40)
polars._html.HTMLFormatter.render(self)->None
polars._html.HTMLFormatter.write(self,inner:str)->None
polars._html.HTMLFormatter.write_body(self)->None
polars._html.HTMLFormatter.write_header(self)->None
polars._html.NotebookFormatter(HTMLFormatter)
polars._html.NotebookFormatter.render(self)->List[str]
polars._html.NotebookFormatter.write_style(self)->None
polars._html.Tag(self,elements:List[str],tag:str,attributes:Optional[Dict[str,str]]=None)
polars._html.Tag.__enter__(self)->None
polars._html.Tag.__exit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
polars._html.Tag.__init__(self,elements:List[str],tag:str,attributes:Optional[Dict[str,str]]=None)
polars._html.div(inner:str)->str
polars._html.table(inner:str)->str
polars._html.tag(inner:str,tag:str)->str
polars._html.tbody(inner:str)->str
polars._html.th(inner:str)->str
polars._html.thead(inner:str)->str
polars._html.tr(inner:str)->str


----------------------------------------/home/zhang/Packages/polars/polars0.8.10/functions.py----------------------------------------
A:polars.functions.compression->kwargs.pop('compression', 'infer')
A:polars.functions.compressed->any((infer_compression(f) is not None for f in file))
A:polars.functions.local->all((infer_storage_options(f)['protocol'] == 'file' for f in file))
A:polars.functions.tbl->tbl.rename_columns([f'column_{int(column[1:]) + 1}' for column in tbl.column_names]).rename_columns([f'column_{int(column[1:]) + 1}' for column in tbl.column_names])
A:polars.functions.df->df.vstack(dfs[i], in_place=False).vstack(dfs[i], in_place=False)
A:polars.functions.file->str(file)
A:polars.functions.arr->pyarrow.compute.cast(arr, pa.int64())
A:polars.functions.data[name]->_from_pandas_helper(s)
A:polars.functions.table->pyarrow.table(data)
A:polars.functions.s->series.Series._repeat(name, val, n)
A:polars.functions.result->con.execute(text(sql))
A:polars.functions.rows->con.execute(text(sql)).fetchall()
polars._from_pandas_helper(a:pd.Series)->pa.Array
polars._prepare_file_arg(file:Union[str,List[str],TextIO,Path,BinaryIO],**kwargs:Any)->ContextManager[Union[str, BinaryIO, List[str], List[BinaryIO]]]
polars._process_http_file(path:str)->io.BytesIO
polars.arg_where(mask:Series)->Series
polars.concat(dfs:List[DataFrame],rechunk:bool=True)->DataFrame
polars.from_arrow(a:Union[pa.Table,pa.Array],rechunk:bool=True)->Union[DataFrame, Series]
polars.from_arrow_table(table:pa.Table,rechunk:bool=True)->DataFrame
polars.from_pandas(df:Union[pd.DataFrame,pd.Series,pd.DatetimeIndex],rechunk:bool=True)->DataFrame
polars.from_rows(rows:Sequence[Sequence[Any]],column_names:Optional[List[str]]=None,column_name_mapping:Optional[Dict[int,str]]=None)->DataFrame
polars.functions._from_pandas_helper(a:pd.Series)->pa.Array
polars.functions._prepare_file_arg(file:Union[str,List[str],TextIO,Path,BinaryIO],**kwargs:Any)->ContextManager[Union[str, BinaryIO, List[str], List[BinaryIO]]]
polars.functions._process_http_file(path:str)->io.BytesIO
polars.functions.arg_where(mask:Series)->Series
polars.functions.concat(dfs:List[DataFrame],rechunk:bool=True)->DataFrame
polars.functions.from_arrow(a:Union[pa.Table,pa.Array],rechunk:bool=True)->Union[DataFrame, Series]
polars.functions.from_arrow_table(table:pa.Table,rechunk:bool=True)->DataFrame
polars.functions.from_pandas(df:Union[pd.DataFrame,pd.Series,pd.DatetimeIndex],rechunk:bool=True)->DataFrame
polars.functions.from_rows(rows:Sequence[Sequence[Any]],column_names:Optional[List[str]]=None,column_name_mapping:Optional[Dict[int,str]]=None)->DataFrame
polars.functions.get_dummies(df:DataFrame)->DataFrame
polars.functions.read_csv(file:Union[str,TextIO,Path,BinaryIO],infer_schema_length:int=100,batch_size:int=8192,has_headers:bool=True,ignore_errors:bool=False,stop_after_n_rows:Optional[int]=None,skip_rows:int=0,projection:Optional[List[int]]=None,sep:str=',',columns:Optional[List[str]]=None,rechunk:bool=True,encoding:str='utf8',n_threads:Optional[int]=None,dtype:Optional[Dict[str,Type[DataType]]]=None,new_columns:Optional[List[str]]=None,use_pyarrow:bool=True,low_memory:bool=False,comment_char:Optional[str]=None,storage_options:Optional[Dict]=None,null_values:Optional[Union[str,List[str],Dict[str,str]]]=None)->DataFrame
polars.functions.read_ipc(file:Union[str,BinaryIO,Path],use_pyarrow:bool=True,storage_options:Optional[Dict]=None)->DataFrame
polars.functions.read_json(source:Union[str,StringIO,Path])->DataFrame
polars.functions.read_parquet(source:Union[str,BinaryIO,Path,List[str]],stop_after_n_rows:Optional[int]=None,memory_map:bool=True,columns:Optional[List[str]]=None,storage_options:Optional[Dict]=None,**kwargs:Any)->DataFrame
polars.functions.read_sql(sql:str,engine:Any)->DataFrame
polars.functions.repeat(val:Union[int,float,str],n:int,name:Optional[str]=None)->Series
polars.functions.scan_csv(file:Union[str,Path],has_headers:bool=True,ignore_errors:bool=False,sep:str=',',skip_rows:int=0,stop_after_n_rows:Optional[int]=None,cache:bool=True,dtype:Optional[Dict[str,Type[DataType]]]=None,low_memory:bool=False,comment_char:Optional[str]=None,null_values:Optional[Union[str,List[str],Dict[str,str]]]=None)->LazyFrame
polars.functions.scan_parquet(file:Union[str,Path],stop_after_n_rows:Optional[int]=None,cache:bool=True)->LazyFrame
polars.get_dummies(df:DataFrame)->DataFrame
polars.read_csv(file:Union[str,TextIO,Path,BinaryIO],infer_schema_length:int=100,batch_size:int=8192,has_headers:bool=True,ignore_errors:bool=False,stop_after_n_rows:Optional[int]=None,skip_rows:int=0,projection:Optional[List[int]]=None,sep:str=',',columns:Optional[List[str]]=None,rechunk:bool=True,encoding:str='utf8',n_threads:Optional[int]=None,dtype:Optional[Dict[str,Type[DataType]]]=None,new_columns:Optional[List[str]]=None,use_pyarrow:bool=True,low_memory:bool=False,comment_char:Optional[str]=None,storage_options:Optional[Dict]=None,null_values:Optional[Union[str,List[str],Dict[str,str]]]=None)->DataFrame
polars.read_ipc(file:Union[str,BinaryIO,Path],use_pyarrow:bool=True,storage_options:Optional[Dict]=None)->DataFrame
polars.read_json(source:Union[str,StringIO,Path])->DataFrame
polars.read_parquet(source:Union[str,BinaryIO,Path,List[str]],stop_after_n_rows:Optional[int]=None,memory_map:bool=True,columns:Optional[List[str]]=None,storage_options:Optional[Dict]=None,**kwargs:Any)->DataFrame
polars.read_sql(sql:str,engine:Any)->DataFrame
polars.repeat(val:Union[int,float,str],n:int,name:Optional[str]=None)->Series
polars.scan_csv(file:Union[str,Path],has_headers:bool=True,ignore_errors:bool=False,sep:str=',',skip_rows:int=0,stop_after_n_rows:Optional[int]=None,cache:bool=True,dtype:Optional[Dict[str,Type[DataType]]]=None,low_memory:bool=False,comment_char:Optional[str]=None,null_values:Optional[Union[str,List[str],Dict[str,str]]]=None)->LazyFrame
polars.scan_parquet(file:Union[str,Path],stop_after_n_rows:Optional[int]=None,cache:bool=True)->LazyFrame


----------------------------------------/home/zhang/Packages/polars/polars0.8.10/utils.py----------------------------------------
A:polars.utils.ts_ms->pyarrow.compute.cast(array, pa.timestamp('ms'), safe=False)
A:polars.utils.ms->pyarrow.compute.cast(ts_ms, pa.int64())
A:polars.utils.array->array.combine_chunks().combine_chunks()
polars.utils._is_expr(arg:Any)->bool
polars.utils._process_null_values(null_values:Optional[Union[str,List[str],Dict[str,str]]]=None)->Optional[Union[str, List[str], List[Tuple[str, str]]]]
polars.utils.coerce_arrow(array:pa.Array)->pa.Array


----------------------------------------/home/zhang/Packages/polars/polars0.8.10/series.py----------------------------------------
A:polars.series.fname->name.replace('<>', ffi_name)
A:polars.series.values->numpy.array(values)
A:polars.series.self._s->polars.PySeries.new_object(name, values)
A:polars.series.dtype->kwargs.pop('dtype')
A:polars.series.arrow_array->pyarrow.array(values, pa.large_list(pa.large_utf8()))
A:polars.series.s->wrap_s(self._s)
A:polars.series.value_dtype->_find_first_non_none(dtype)
A:polars.series.self->Series.__new__(Series)
A:polars.series.array->_ptr_to_numpy(ptr, self.len(), ptr_type)
A:polars.series.other->Series('', other)
A:polars.series.f->get_ffi_func('parse_<>_from_str_slice', dtype, PySeries)
A:polars.series.primitive->dtype_to_primitive(self.dtype)
A:polars.series.(start, stop, stride)->item.indices(self.len())
A:polars.series.out->int(s.mean())
A:polars.series.predicate->Series('', predicate)
A:polars.series.indices->numpy.array(indices)
A:polars.series.opt_s->Series.__new__(Series)._s.rechunk(in_place)
A:polars.series.ptr_type->dtype_to_ctype(self.dtype)
A:polars.series.ptr->Series.__new__(Series)._s.as_single_ptr()
A:polars.series.series->Series.__new__(Series).clone()
A:polars.series.idx_array->numpy.array(idx, dtype=np.uint64)
polars.Series(self,name:str,values:Union['Series',np.ndarray,List[Any],None]=None,nullable:bool=True,dtype:Optional[Type[DataType]]=None)
polars.Series.__add__(self,other:Any)->'Series'
polars.Series.__and__(self,other:'Series')->'Series'
polars.Series.__array_ufunc__(self,ufunc:Callable[...,Any],method:str,*inputs:Any,**kwargs:Any)->'Series'
polars.Series.__eq__(self,other:Any)->'Series'
polars.Series.__floordiv__(self,other:Any)->'Series'
polars.Series.__ge__(self,other:Any)->'Series'
polars.Series.__getitem__(self,item:Any)->Any
polars.Series.__gt__(self,other:Any)->'Series'
polars.Series.__invert__(self)->'Series'
polars.Series.__iter__(self)->'SeriesIter'
polars.Series.__le__(self,other:Any)->'Series'
polars.Series.__len__(self)->int
polars.Series.__lt__(self,other:Any)->'Series'
polars.Series.__mul__(self,other:Any)->'Series'
polars.Series.__ne__(self,other:Any)->'Series'
polars.Series.__or__(self,other:'Series')->'Series'
polars.Series.__radd__(self,other:Any)->'Series'
polars.Series.__repr__(self)->str
polars.Series.__rfloordiv__(self,other:Any)->'Series'
polars.Series.__rmul__(self,other:Any)->'Series'
polars.Series.__rsub__(self,other:Any)->'Series'
polars.Series.__rtruediv__(self,other:Any)->np.ndarray
polars.Series.__setitem__(self,key:Any,value:Any)->None
polars.Series.__str__(self)->str
polars.Series.__sub__(self,other:Any)->'Series'
polars.Series.__truediv__(self,other:Any)->'Series'
polars.Series._from_pyseries(s:PySeries)->'Series'
polars.Series._repeat(name:str,val:str,n:int)->'Series'
polars.Series.append(self,other:'Series')->None
polars.Series.apply(self,func:Callable[[Any],Any],return_dtype:Optional[Type[DataType]]=None)->'Series'
polars.Series.arg_max(self)->Optional[int]
polars.Series.arg_min(self)->Optional[int]
polars.Series.arg_sort(self,reverse:bool=False)->'Series'
polars.Series.arg_true(self)->'Series'
polars.Series.arg_unique(self)->'Series'
polars.Series.argsort(self,reverse:bool=False)->'Series'
polars.Series.as_duration(self)->'Series'
polars.Series.cast(self,data_type:Type[DataType])->'Series'
polars.Series.chunk_lengths(self)->List[int]
polars.Series.clone(self)->'Series'
polars.Series.cum_max(self,reverse:bool=False)->Union[int, float]
polars.Series.cum_min(self,reverse:bool=False)->Union[int, float]
polars.Series.cum_sum(self,reverse:bool=False)->Union[int, float]
polars.Series.describe(self)->Dict[str, Union[int, float]]
polars.Series.drop_nulls(self)->'Series'
polars.Series.dt(self)->'DateTimeNameSpace'
polars.Series.dtype(self)->Type[DataType]
polars.Series.explode(self)->'Series'
polars.Series.fill_none(self,strategy:str)->'Series'
polars.Series.filter(self,predicate:'Series')->'Series'
polars.Series.from_arrow(name:str,array:pa.Array)->'Series'
polars.Series.head(self,length:Optional[int]=None)->'Series'
polars.Series.inner(self)->PySeries
polars.Series.is_boolean(self)->bool
polars.Series.is_duplicated(self)->'Series'
polars.Series.is_finite(self)->'Series'
polars.Series.is_first(self)->'Series'
polars.Series.is_float(self)->bool
polars.Series.is_in(self,other:'Series')->'Series'
polars.Series.is_infinite(self)->'Series'
polars.Series.is_nan(self)->'Series'
polars.Series.is_not_nan(self)->'Series'
polars.Series.is_not_null(self)->'Series'
polars.Series.is_null(self)->'Series'
polars.Series.is_numeric(self)->bool
polars.Series.is_unique(self)->'Series'
polars.Series.is_utf8(self)->bool
polars.Series.len(self)->int
polars.Series.limit(self,num_elements:int=10)->'Series'
polars.Series.max(self)->Union[int, float]
polars.Series.mean(self)->Union[int, float]
polars.Series.median(self)->float
polars.Series.min(self)->Union[int, float]
polars.Series.n_chunks(self)->int
polars.Series.n_unique(self)->int
polars.Series.name(self)->str
polars.Series.null_count(self)->int
polars.Series.parse_date(name:str,values:Sequence[str],dtype:Type[DataType],fmt:str)->'Series'
polars.Series.peak_max(self)->'Series'
polars.Series.peak_min(self)->'Series'
polars.Series.quantile(self,quantile:float)->float
polars.Series.rechunk(self,in_place:bool=False)->Optional['Series']
polars.Series.rename(self,name:str,in_place:bool=False)->Optional['Series']
polars.Series.rolling_max(self,window_size:int,weight:Optional[List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.Series.rolling_mean(self,window_size:int,weight:Optional[List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.Series.rolling_min(self,window_size:int,weight:Optional[List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.Series.rolling_sum(self,window_size:int,weight:Optional[List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.Series.round(self,decimals:int)->'Series'
polars.Series.sample(self,n:Optional[int]=None,frac:Optional[float]=None,with_replacement:bool=False)->'Series'
polars.Series.series_equal(self,other:'Series',null_equal:bool=False)->bool
polars.Series.set(self,filter:'Series',value:Union[int,float])->'Series'
polars.Series.set_at_idx(self,idx:Union['Series',np.ndarray],value:Union[int,float])->'Series'
polars.Series.shape(self)->Tuple[int]
polars.Series.shift(self,periods:int)->'Series'
polars.Series.shrink_to_fit(self,in_place:bool=False)->Optional['Series']
polars.Series.slice(self,offset:int,length:int)->'Series'
polars.Series.sort(self,in_place:bool=False,reverse:bool=False)->Optional['Series']
polars.Series.std(self,ddof:int=1)->float
polars.Series.str(self)->'StringNameSpace'
polars.Series.sum(self)->Union[int, float]
polars.Series.tail(self,length:Optional[int]=None)->'Series'
polars.Series.take(self,indices:Union[np.ndarray,List[int]])->'Series'
polars.Series.take_every(self,n:int)->'Series'
polars.Series.to_arrow(self)->pa.Array
polars.Series.to_dummies(self)->'DataFrame'
polars.Series.to_frame(self)->'DataFrame'
polars.Series.to_list(self)->List[Optional[Any]]
polars.Series.to_numpy(self,*args:Any,zero_copy_only:bool=False,**kwargs:Any)->np.ndarray
polars.Series.unique(self)->'Series'
polars.Series.value_counts(self)->'DataFrame'
polars.Series.var(self,ddof:int=1)->float
polars.Series.view(self,ignore_nulls:bool=False)->np.ndarray
polars.Series.zip_with(self,mask:'Series',other:'Series')->'Series'
polars.SeriesIter(self,length:int,s:Series)
polars.SeriesIter.__iter__(self)->'SeriesIter'
polars.SeriesIter.__next__(self)->Any
polars.series.DateTimeNameSpace(self,series:Series)
polars.series.DateTimeNameSpace.__init__(self,series:Series)
polars.series.DateTimeNameSpace.day(self)->Series
polars.series.DateTimeNameSpace.hour(self)->Series
polars.series.DateTimeNameSpace.max(self)->datetime
polars.series.DateTimeNameSpace.mean(self)->datetime
polars.series.DateTimeNameSpace.median(self)->datetime
polars.series.DateTimeNameSpace.min(self)->datetime
polars.series.DateTimeNameSpace.minute(self)->Series
polars.series.DateTimeNameSpace.month(self)->Series
polars.series.DateTimeNameSpace.nanosecond(self)->Series
polars.series.DateTimeNameSpace.ordinal_day(self)->Series
polars.series.DateTimeNameSpace.round(self,rule:str,n:int)->Series
polars.series.DateTimeNameSpace.second(self)->Series
polars.series.DateTimeNameSpace.strftime(self,fmt:str)->Series
polars.series.DateTimeNameSpace.timestamp(self)->Series
polars.series.DateTimeNameSpace.to_python_datetime(self)->Series
polars.series.DateTimeNameSpace.week(self)->Series
polars.series.DateTimeNameSpace.weekday(self)->Series
polars.series.DateTimeNameSpace.year(self)->Series
polars.series.IdentityDict(dict)
polars.series.IdentityDict.__missing__(self,key:Any)->Any
polars.series.Series(self,name:str,values:Union['Series',np.ndarray,List[Any],None]=None,nullable:bool=True,dtype:Optional[Type[DataType]]=None)
polars.series.Series.__add__(self,other:Any)->'Series'
polars.series.Series.__and__(self,other:'Series')->'Series'
polars.series.Series.__array_ufunc__(self,ufunc:Callable[...,Any],method:str,*inputs:Any,**kwargs:Any)->'Series'
polars.series.Series.__eq__(self,other:Any)->'Series'
polars.series.Series.__floordiv__(self,other:Any)->'Series'
polars.series.Series.__ge__(self,other:Any)->'Series'
polars.series.Series.__getitem__(self,item:Any)->Any
polars.series.Series.__gt__(self,other:Any)->'Series'
polars.series.Series.__init__(self,name:str,values:Union['Series',np.ndarray,List[Any],None]=None,nullable:bool=True,dtype:Optional[Type[DataType]]=None)
polars.series.Series.__invert__(self)->'Series'
polars.series.Series.__iter__(self)->'SeriesIter'
polars.series.Series.__le__(self,other:Any)->'Series'
polars.series.Series.__len__(self)->int
polars.series.Series.__lt__(self,other:Any)->'Series'
polars.series.Series.__mul__(self,other:Any)->'Series'
polars.series.Series.__ne__(self,other:Any)->'Series'
polars.series.Series.__or__(self,other:'Series')->'Series'
polars.series.Series.__radd__(self,other:Any)->'Series'
polars.series.Series.__repr__(self)->str
polars.series.Series.__rfloordiv__(self,other:Any)->'Series'
polars.series.Series.__rmul__(self,other:Any)->'Series'
polars.series.Series.__rsub__(self,other:Any)->'Series'
polars.series.Series.__rtruediv__(self,other:Any)->np.ndarray
polars.series.Series.__setitem__(self,key:Any,value:Any)->None
polars.series.Series.__str__(self)->str
polars.series.Series.__sub__(self,other:Any)->'Series'
polars.series.Series.__truediv__(self,other:Any)->'Series'
polars.series.Series._from_pyseries(s:PySeries)->'Series'
polars.series.Series._repeat(name:str,val:str,n:int)->'Series'
polars.series.Series.append(self,other:'Series')->None
polars.series.Series.apply(self,func:Callable[[Any],Any],return_dtype:Optional[Type[DataType]]=None)->'Series'
polars.series.Series.arg_max(self)->Optional[int]
polars.series.Series.arg_min(self)->Optional[int]
polars.series.Series.arg_sort(self,reverse:bool=False)->'Series'
polars.series.Series.arg_true(self)->'Series'
polars.series.Series.arg_unique(self)->'Series'
polars.series.Series.argsort(self,reverse:bool=False)->'Series'
polars.series.Series.as_duration(self)->'Series'
polars.series.Series.cast(self,data_type:Type[DataType])->'Series'
polars.series.Series.chunk_lengths(self)->List[int]
polars.series.Series.clone(self)->'Series'
polars.series.Series.cum_max(self,reverse:bool=False)->Union[int, float]
polars.series.Series.cum_min(self,reverse:bool=False)->Union[int, float]
polars.series.Series.cum_sum(self,reverse:bool=False)->Union[int, float]
polars.series.Series.describe(self)->Dict[str, Union[int, float]]
polars.series.Series.drop_nulls(self)->'Series'
polars.series.Series.dt(self)->'DateTimeNameSpace'
polars.series.Series.dtype(self)->Type[DataType]
polars.series.Series.explode(self)->'Series'
polars.series.Series.fill_none(self,strategy:str)->'Series'
polars.series.Series.filter(self,predicate:'Series')->'Series'
polars.series.Series.from_arrow(name:str,array:pa.Array)->'Series'
polars.series.Series.head(self,length:Optional[int]=None)->'Series'
polars.series.Series.inner(self)->PySeries
polars.series.Series.is_boolean(self)->bool
polars.series.Series.is_duplicated(self)->'Series'
polars.series.Series.is_finite(self)->'Series'
polars.series.Series.is_first(self)->'Series'
polars.series.Series.is_float(self)->bool
polars.series.Series.is_in(self,other:'Series')->'Series'
polars.series.Series.is_infinite(self)->'Series'
polars.series.Series.is_nan(self)->'Series'
polars.series.Series.is_not_nan(self)->'Series'
polars.series.Series.is_not_null(self)->'Series'
polars.series.Series.is_null(self)->'Series'
polars.series.Series.is_numeric(self)->bool
polars.series.Series.is_unique(self)->'Series'
polars.series.Series.is_utf8(self)->bool
polars.series.Series.len(self)->int
polars.series.Series.limit(self,num_elements:int=10)->'Series'
polars.series.Series.max(self)->Union[int, float]
polars.series.Series.mean(self)->Union[int, float]
polars.series.Series.median(self)->float
polars.series.Series.min(self)->Union[int, float]
polars.series.Series.n_chunks(self)->int
polars.series.Series.n_unique(self)->int
polars.series.Series.name(self)->str
polars.series.Series.null_count(self)->int
polars.series.Series.parse_date(name:str,values:Sequence[str],dtype:Type[DataType],fmt:str)->'Series'
polars.series.Series.peak_max(self)->'Series'
polars.series.Series.peak_min(self)->'Series'
polars.series.Series.quantile(self,quantile:float)->float
polars.series.Series.rechunk(self,in_place:bool=False)->Optional['Series']
polars.series.Series.rename(self,name:str,in_place:bool=False)->Optional['Series']
polars.series.Series.rolling_max(self,window_size:int,weight:Optional[List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.series.Series.rolling_mean(self,window_size:int,weight:Optional[List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.series.Series.rolling_min(self,window_size:int,weight:Optional[List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.series.Series.rolling_sum(self,window_size:int,weight:Optional[List[float]]=None,ignore_null:bool=True,min_periods:Optional[int]=None)->'Series'
polars.series.Series.round(self,decimals:int)->'Series'
polars.series.Series.sample(self,n:Optional[int]=None,frac:Optional[float]=None,with_replacement:bool=False)->'Series'
polars.series.Series.series_equal(self,other:'Series',null_equal:bool=False)->bool
polars.series.Series.set(self,filter:'Series',value:Union[int,float])->'Series'
polars.series.Series.set_at_idx(self,idx:Union['Series',np.ndarray],value:Union[int,float])->'Series'
polars.series.Series.shape(self)->Tuple[int]
polars.series.Series.shift(self,periods:int)->'Series'
polars.series.Series.shrink_to_fit(self,in_place:bool=False)->Optional['Series']
polars.series.Series.slice(self,offset:int,length:int)->'Series'
polars.series.Series.sort(self,in_place:bool=False,reverse:bool=False)->Optional['Series']
polars.series.Series.std(self,ddof:int=1)->float
polars.series.Series.str(self)->'StringNameSpace'
polars.series.Series.sum(self)->Union[int, float]
polars.series.Series.tail(self,length:Optional[int]=None)->'Series'
polars.series.Series.take(self,indices:Union[np.ndarray,List[int]])->'Series'
polars.series.Series.take_every(self,n:int)->'Series'
polars.series.Series.to_arrow(self)->pa.Array
polars.series.Series.to_dummies(self)->'DataFrame'
polars.series.Series.to_frame(self)->'DataFrame'
polars.series.Series.to_list(self)->List[Optional[Any]]
polars.series.Series.to_numpy(self,*args:Any,zero_copy_only:bool=False,**kwargs:Any)->np.ndarray
polars.series.Series.unique(self)->'Series'
polars.series.Series.value_counts(self)->'DataFrame'
polars.series.Series.var(self,ddof:int=1)->float
polars.series.Series.view(self,ignore_nulls:bool=False)->np.ndarray
polars.series.Series.zip_with(self,mask:'Series',other:'Series')->'Series'
polars.series.SeriesIter(self,length:int,s:Series)
polars.series.SeriesIter.__init__(self,length:int,s:Series)
polars.series.SeriesIter.__iter__(self)->'SeriesIter'
polars.series.SeriesIter.__next__(self)->Any
polars.series.StringNameSpace(self,series:'Series')
polars.series.StringNameSpace.__init__(self,series:'Series')
polars.series.StringNameSpace.contains(self,pattern:str)->Series
polars.series.StringNameSpace.lengths(self)->Series
polars.series.StringNameSpace.lstrip(self)->Series
polars.series.StringNameSpace.replace(self,pattern:str,value:str)->Series
polars.series.StringNameSpace.replace_all(self,pattern:str,value:str)->Series
polars.series.StringNameSpace.rstrip(self)->Series
polars.series.StringNameSpace.slice(self,start:int,length:Optional[int]=None)->Series
polars.series.StringNameSpace.strptime(self,datatype:DataType,fmt:Optional[str]=None)->Series
polars.series.StringNameSpace.to_lowercase(self)->Series
polars.series.StringNameSpace.to_uppercase(self)->Series
polars.series._find_first_non_none(a:List[Optional[Any]])->Any
polars.series._to_python_datetime(value:Union[int,float],dtype:Type[DataType])->datetime
polars.series.get_ffi_func(name:str,dtype:Type[DataType],obj:Optional['Series']=None,default:Optional=None)->Callable[..., Any]
polars.series.out_to_dtype(out:Any)->Union[DataType, np.ndarray]
polars.series.wrap_s(s:PySeries)->'Series'
polars.wrap_s(s:PySeries)->'Series'


----------------------------------------/home/zhang/Packages/polars/polars0.8.10/frame.py----------------------------------------
A:polars.frame.other->_prepare_other_arg(other)
A:polars.frame.s->self.agg_list().drop_in_place(name + '_agg_list').apply(func, return_dtype)
A:polars.frame.self._df->polars.PyDataFrame.from_arrow_record_batches(batches)
A:polars.frame.self->DataFrame.__new__(DataFrame)
A:polars.frame.file->str(file)
A:polars.frame.null_values->_process_null_values(null_values)
A:polars.frame.tbl->pyarrow.table(data)
A:polars.frame.column->pyarrow.compute.cast(column, pa.timestamp('ms', None))
A:polars.frame.table->pyarrow.table(data)
A:polars.frame.batches->pyarrow.table(data).to_batches()
A:polars.frame.record_batches->DataFrame.__new__(DataFrame)._df.to_arrow()
A:polars.frame.buffer->BytesIO()
A:polars.frame.item->Series('', item)
A:polars.frame.start->DataFrame.__new__(DataFrame).find_idx_by_name(col_selection.start)
A:polars.frame.col_selection->slice(start, stop, col_selection.step)
A:polars.frame.df->DataFrame.__new__(DataFrame).agg_list()
A:polars.frame.series->DataFrame.__new__(DataFrame).select_at_idx(col_selection)
A:polars.frame.max_cols->int(os.environ.get('POLARS_FMT_MAX_COLS', default=75))
A:polars.frame.max_rows->int(os.environ.get('POLARS_FMT_MAX_rows', 25))
A:polars.frame.summary->polars.concat([describe_cast(self.mean()), describe_cast(self.std()), describe_cast(self.min()), describe_cast(self.max()), describe_cast(self.median())])
A:polars.frame.out->DataFrame.__new__(DataFrame)._df.join(df._df, left_on, right_on, how)
A:polars.frame.columns->columns.get_columns().get_columns()
A:polars.frame.acc->operation(acc, df.select_at_idx(i))
A:polars.frame.groups_df->DataFrame.__new__(DataFrame).groups()
polars.DataFrame(self,data:Union[Dict[str,Sequence],List[Series],np.ndarray],nullable:bool=True)
polars.DataFrame.__add__(self,other:Any)->'DataFrame'
polars.DataFrame.__getattr__(self,item:Any)->PySeries
polars.DataFrame.__getitem__(self,item:Any)->Any
polars.DataFrame.__iter__(self)->Iterator[Any]
polars.DataFrame.__len__(self)->int
polars.DataFrame.__mul__(self,other:Any)->'DataFrame'
polars.DataFrame.__repr__(self)->str
polars.DataFrame.__setitem__(self,key:Union[str,int,Tuple[Any,Any]],value:Any)->None
polars.DataFrame.__str__(self)->str
polars.DataFrame.__sub__(self,other:Any)->'DataFrame'
polars.DataFrame.__truediv__(self,other:Any)->'DataFrame'
polars.DataFrame._from_pydf(df:PyDataFrame)->'DataFrame'
polars.DataFrame._pos_idx(self,idx:int,dim:int)->int
polars.DataFrame._repr_html_(self)->str
polars.DataFrame.apply(self,f:Callable[[Tuple[Any]],Any],return_dtype:Optional[Type[DataType]]=None)->'Series'
polars.DataFrame.clone(self)->'DataFrame'
polars.DataFrame.columns(self)->List[str]
polars.DataFrame.columns(self,columns:List[str])->None
polars.DataFrame.describe(self)->'DataFrame'
polars.DataFrame.downsample(self,by:Union[str,List[str]],rule:str,n:int)->'GroupBy'
polars.DataFrame.drop(self,name:Union[str,List[str]])->'DataFrame'
polars.DataFrame.drop_duplicates(self,maintain_order:bool=True,subset:Optional[Union[str,List[str]]]=None)->'DataFrame'
polars.DataFrame.drop_in_place(self,name:str)->Series
polars.DataFrame.drop_nulls(self,subset:Optional[List[str]]=None)->'DataFrame'
polars.DataFrame.dtypes(self)->List[Type[DataType]]
polars.DataFrame.explode(self,columns:Union[str,List[str]])->'DataFrame'
polars.DataFrame.fill_none(self,strategy:Union[str,'Expr'])->'DataFrame'
polars.DataFrame.filter(self,predicate:'Expr')->'DataFrame'
polars.DataFrame.find_idx_by_name(self,name:str)->int
polars.DataFrame.fold(self,operation:Callable[[Series,Series],Series])->Series
polars.DataFrame.frame_equal(self,other:'DataFrame',null_equal:bool=False)->bool
polars.DataFrame.from_arrow(table:pa.Table,rechunk:bool=True)->'DataFrame'
polars.DataFrame.from_rows(rows:Sequence[Sequence[Any]],column_names:Optional[List[str]]=None,column_name_mapping:Optional[Dict[int,str]]=None)->'DataFrame'
polars.DataFrame.get_columns(self)->List[Series]
polars.DataFrame.groupby(self,by:Union[str,List[str]])->'GroupBy'
polars.DataFrame.head(self,length:int=5)->'DataFrame'
polars.DataFrame.height(self)->int
polars.DataFrame.hstack(self,columns:Union[List[Series],'DataFrame'],in_place:bool=False)->Optional['DataFrame']
polars.DataFrame.insert_at_idx(self,index:int,series:Series)->None
polars.DataFrame.is_duplicated(self)->Series
polars.DataFrame.is_unique(self)->Series
polars.DataFrame.join(self,df:'DataFrame',left_on:Optional[Union[str,List[str],'Expr',List['Expr']]]=None,right_on:Optional[Union[str,List[str],'Expr',List['Expr']]]=None,on:Optional[Union[str,List[str]]]=None,how:str='inner')->Union['DataFrame', 'LazyFrame']
polars.DataFrame.lazy(self)->'LazyFrame'
polars.DataFrame.limit(self,length:int=5)->'DataFrame'
polars.DataFrame.max(self,axis:int=0)->'DataFrame'
polars.DataFrame.mean(self,axis:int=0)->'DataFrame'
polars.DataFrame.median(self)->'DataFrame'
polars.DataFrame.melt(self,id_vars:Union[List[str],str],value_vars:Union[List[str],str])->'DataFrame'
polars.DataFrame.min(self,axis:int=0)->'DataFrame'
polars.DataFrame.n_chunks(self)->int
polars.DataFrame.null_count(self)->'DataFrame'
polars.DataFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.DataFrame.quantile(self,quantile:float)->'DataFrame'
polars.DataFrame.read_csv(file:Union[str,BinaryIO,bytes],infer_schema_length:int=100,batch_size:int=64,has_headers:bool=True,ignore_errors:bool=False,stop_after_n_rows:Optional[int]=None,skip_rows:int=0,projection:Optional[List[int]]=None,sep:str=',',columns:Optional[List[str]]=None,rechunk:bool=True,encoding:str='utf8',n_threads:Optional[int]=None,dtype:Optional[Dict[str,Type[DataType]]]=None,low_memory:bool=False,comment_char:Optional[str]=None,null_values:Optional[Union[str,List[str],Dict[str,str]]]=None)->'DataFrame'
polars.DataFrame.read_ipc(file:Union[str,BinaryIO],use_pyarrow:bool=True)->'DataFrame'
polars.DataFrame.read_json(file:Union[str,BytesIO])->'DataFrame'
polars.DataFrame.read_parquet(file:Union[str,BinaryIO],stop_after_n_rows:Optional[int]=None,use_pyarrow:bool=False)->'DataFrame'
polars.DataFrame.rechunk(self)->'DataFrame'
polars.DataFrame.rename(self,mapping:Dict[str,str])->'DataFrame'
polars.DataFrame.replace(self,column:str,new_col:Series)->None
polars.DataFrame.replace_at_idx(self,index:int,series:Series)->None
polars.DataFrame.row(self,index:int)->Tuple[Any]
polars.DataFrame.rows(self)->List[Tuple[Any]]
polars.DataFrame.sample(self,n:Optional[int]=None,frac:Optional[float]=None,with_replacement:bool=False)->'DataFrame'
polars.DataFrame.select(self,exprs:Union[str,'Expr',List[str],List['Expr']])->'DataFrame'
polars.DataFrame.select_at_idx(self,idx:int)->Series
polars.DataFrame.shape(self)->Tuple[int, int]
polars.DataFrame.shift(self,periods:int)->'DataFrame'
polars.DataFrame.shift_and_fill(self,periods:int,fill_value:Union[int,str,float])->'DataFrame'
polars.DataFrame.shrink_to_fit(self,in_place:bool=False)->Optional['DataFrame']
polars.DataFrame.slice(self,offset:int,length:int)->'DataFrame'
polars.DataFrame.sort(self,by:Union[str,'Expr',List['Expr']],in_place:bool=False,reverse:Union[bool,List[bool]]=False)->Optional['DataFrame']
polars.DataFrame.std(self)->'DataFrame'
polars.DataFrame.sum(self,axis:int=0)->'DataFrame'
polars.DataFrame.tail(self,length:int=5)->'DataFrame'
polars.DataFrame.to_arrow(self)->pa.Table
polars.DataFrame.to_csv(self,file:Optional[Union[TextIO,str,Path]]=None,has_headers:bool=True,delimiter:str=',')->Optional[str]
polars.DataFrame.to_dummies(self)->'DataFrame'
polars.DataFrame.to_ipc(self,file:Union[BinaryIO,str,Path])->None
polars.DataFrame.to_json(self,file:Optional[Union[BytesIO,str,Path]]=None,pretty:bool=False,to_string:bool=False)->Optional[str]
polars.DataFrame.to_numpy(self)->np.ndarray
polars.DataFrame.to_pandas(self,*args:Any,date_as_object:bool=False,**kwargs:Any)->pd.DataFrame
polars.DataFrame.to_parquet(self,file:Union[str,Path],compression:str='snappy',use_pyarrow:bool=True,**kwargs:Any)->None
polars.DataFrame.var(self)->'DataFrame'
polars.DataFrame.vstack(self,df:'DataFrame',in_place:bool=False)->Optional['DataFrame']
polars.DataFrame.width(self)->int
polars.DataFrame.with_column(self,column:Union[Series,'Expr'])->'DataFrame'
polars.DataFrame.with_columns(self,exprs:Union['Expr',List['Expr']])->'DataFrame'
polars.StringCache(self)
polars.StringCache.__enter__(self)->'StringCache'
polars.StringCache.__exit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
polars.frame.DataFrame(self,data:Union[Dict[str,Sequence],List[Series],np.ndarray],nullable:bool=True)
polars.frame.DataFrame.__add__(self,other:Any)->'DataFrame'
polars.frame.DataFrame.__getattr__(self,item:Any)->PySeries
polars.frame.DataFrame.__getitem__(self,item:Any)->Any
polars.frame.DataFrame.__init__(self,data:Union[Dict[str,Sequence],List[Series],np.ndarray],nullable:bool=True)
polars.frame.DataFrame.__iter__(self)->Iterator[Any]
polars.frame.DataFrame.__len__(self)->int
polars.frame.DataFrame.__mul__(self,other:Any)->'DataFrame'
polars.frame.DataFrame.__repr__(self)->str
polars.frame.DataFrame.__setitem__(self,key:Union[str,int,Tuple[Any,Any]],value:Any)->None
polars.frame.DataFrame.__str__(self)->str
polars.frame.DataFrame.__sub__(self,other:Any)->'DataFrame'
polars.frame.DataFrame.__truediv__(self,other:Any)->'DataFrame'
polars.frame.DataFrame._from_pydf(df:PyDataFrame)->'DataFrame'
polars.frame.DataFrame._pos_idx(self,idx:int,dim:int)->int
polars.frame.DataFrame._repr_html_(self)->str
polars.frame.DataFrame.apply(self,f:Callable[[Tuple[Any]],Any],return_dtype:Optional[Type[DataType]]=None)->'Series'
polars.frame.DataFrame.clone(self)->'DataFrame'
polars.frame.DataFrame.columns(self)->List[str]
polars.frame.DataFrame.columns(self,columns:List[str])->None
polars.frame.DataFrame.describe(self)->'DataFrame'
polars.frame.DataFrame.downsample(self,by:Union[str,List[str]],rule:str,n:int)->'GroupBy'
polars.frame.DataFrame.drop(self,name:Union[str,List[str]])->'DataFrame'
polars.frame.DataFrame.drop_duplicates(self,maintain_order:bool=True,subset:Optional[Union[str,List[str]]]=None)->'DataFrame'
polars.frame.DataFrame.drop_in_place(self,name:str)->Series
polars.frame.DataFrame.drop_nulls(self,subset:Optional[List[str]]=None)->'DataFrame'
polars.frame.DataFrame.dtypes(self)->List[Type[DataType]]
polars.frame.DataFrame.explode(self,columns:Union[str,List[str]])->'DataFrame'
polars.frame.DataFrame.fill_none(self,strategy:Union[str,'Expr'])->'DataFrame'
polars.frame.DataFrame.filter(self,predicate:'Expr')->'DataFrame'
polars.frame.DataFrame.find_idx_by_name(self,name:str)->int
polars.frame.DataFrame.fold(self,operation:Callable[[Series,Series],Series])->Series
polars.frame.DataFrame.frame_equal(self,other:'DataFrame',null_equal:bool=False)->bool
polars.frame.DataFrame.from_arrow(table:pa.Table,rechunk:bool=True)->'DataFrame'
polars.frame.DataFrame.from_rows(rows:Sequence[Sequence[Any]],column_names:Optional[List[str]]=None,column_name_mapping:Optional[Dict[int,str]]=None)->'DataFrame'
polars.frame.DataFrame.get_columns(self)->List[Series]
polars.frame.DataFrame.groupby(self,by:Union[str,List[str]])->'GroupBy'
polars.frame.DataFrame.head(self,length:int=5)->'DataFrame'
polars.frame.DataFrame.height(self)->int
polars.frame.DataFrame.hstack(self,columns:Union[List[Series],'DataFrame'],in_place:bool=False)->Optional['DataFrame']
polars.frame.DataFrame.insert_at_idx(self,index:int,series:Series)->None
polars.frame.DataFrame.is_duplicated(self)->Series
polars.frame.DataFrame.is_unique(self)->Series
polars.frame.DataFrame.join(self,df:'DataFrame',left_on:Optional[Union[str,List[str],'Expr',List['Expr']]]=None,right_on:Optional[Union[str,List[str],'Expr',List['Expr']]]=None,on:Optional[Union[str,List[str]]]=None,how:str='inner')->Union['DataFrame', 'LazyFrame']
polars.frame.DataFrame.lazy(self)->'LazyFrame'
polars.frame.DataFrame.limit(self,length:int=5)->'DataFrame'
polars.frame.DataFrame.max(self,axis:int=0)->'DataFrame'
polars.frame.DataFrame.mean(self,axis:int=0)->'DataFrame'
polars.frame.DataFrame.median(self)->'DataFrame'
polars.frame.DataFrame.melt(self,id_vars:Union[List[str],str],value_vars:Union[List[str],str])->'DataFrame'
polars.frame.DataFrame.min(self,axis:int=0)->'DataFrame'
polars.frame.DataFrame.n_chunks(self)->int
polars.frame.DataFrame.null_count(self)->'DataFrame'
polars.frame.DataFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.frame.DataFrame.quantile(self,quantile:float)->'DataFrame'
polars.frame.DataFrame.read_csv(file:Union[str,BinaryIO,bytes],infer_schema_length:int=100,batch_size:int=64,has_headers:bool=True,ignore_errors:bool=False,stop_after_n_rows:Optional[int]=None,skip_rows:int=0,projection:Optional[List[int]]=None,sep:str=',',columns:Optional[List[str]]=None,rechunk:bool=True,encoding:str='utf8',n_threads:Optional[int]=None,dtype:Optional[Dict[str,Type[DataType]]]=None,low_memory:bool=False,comment_char:Optional[str]=None,null_values:Optional[Union[str,List[str],Dict[str,str]]]=None)->'DataFrame'
polars.frame.DataFrame.read_ipc(file:Union[str,BinaryIO],use_pyarrow:bool=True)->'DataFrame'
polars.frame.DataFrame.read_json(file:Union[str,BytesIO])->'DataFrame'
polars.frame.DataFrame.read_parquet(file:Union[str,BinaryIO],stop_after_n_rows:Optional[int]=None,use_pyarrow:bool=False)->'DataFrame'
polars.frame.DataFrame.rechunk(self)->'DataFrame'
polars.frame.DataFrame.rename(self,mapping:Dict[str,str])->'DataFrame'
polars.frame.DataFrame.replace(self,column:str,new_col:Series)->None
polars.frame.DataFrame.replace_at_idx(self,index:int,series:Series)->None
polars.frame.DataFrame.row(self,index:int)->Tuple[Any]
polars.frame.DataFrame.rows(self)->List[Tuple[Any]]
polars.frame.DataFrame.sample(self,n:Optional[int]=None,frac:Optional[float]=None,with_replacement:bool=False)->'DataFrame'
polars.frame.DataFrame.select(self,exprs:Union[str,'Expr',List[str],List['Expr']])->'DataFrame'
polars.frame.DataFrame.select_at_idx(self,idx:int)->Series
polars.frame.DataFrame.shape(self)->Tuple[int, int]
polars.frame.DataFrame.shift(self,periods:int)->'DataFrame'
polars.frame.DataFrame.shift_and_fill(self,periods:int,fill_value:Union[int,str,float])->'DataFrame'
polars.frame.DataFrame.shrink_to_fit(self,in_place:bool=False)->Optional['DataFrame']
polars.frame.DataFrame.slice(self,offset:int,length:int)->'DataFrame'
polars.frame.DataFrame.sort(self,by:Union[str,'Expr',List['Expr']],in_place:bool=False,reverse:Union[bool,List[bool]]=False)->Optional['DataFrame']
polars.frame.DataFrame.std(self)->'DataFrame'
polars.frame.DataFrame.sum(self,axis:int=0)->'DataFrame'
polars.frame.DataFrame.tail(self,length:int=5)->'DataFrame'
polars.frame.DataFrame.to_arrow(self)->pa.Table
polars.frame.DataFrame.to_csv(self,file:Optional[Union[TextIO,str,Path]]=None,has_headers:bool=True,delimiter:str=',')->Optional[str]
polars.frame.DataFrame.to_dummies(self)->'DataFrame'
polars.frame.DataFrame.to_ipc(self,file:Union[BinaryIO,str,Path])->None
polars.frame.DataFrame.to_json(self,file:Optional[Union[BytesIO,str,Path]]=None,pretty:bool=False,to_string:bool=False)->Optional[str]
polars.frame.DataFrame.to_numpy(self)->np.ndarray
polars.frame.DataFrame.to_pandas(self,*args:Any,date_as_object:bool=False,**kwargs:Any)->pd.DataFrame
polars.frame.DataFrame.to_parquet(self,file:Union[str,Path],compression:str='snappy',use_pyarrow:bool=True,**kwargs:Any)->None
polars.frame.DataFrame.var(self)->'DataFrame'
polars.frame.DataFrame.vstack(self,df:'DataFrame',in_place:bool=False)->Optional['DataFrame']
polars.frame.DataFrame.width(self)->int
polars.frame.DataFrame.with_column(self,column:Union[Series,'Expr'])->'DataFrame'
polars.frame.DataFrame.with_columns(self,exprs:Union['Expr',List['Expr']])->'DataFrame'
polars.frame.GBSelection(self,df:PyDataFrame,by:Union[str,List[str]],selection:Optional[List[str]],downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.frame.GBSelection.__init__(self,df:PyDataFrame,by:Union[str,List[str]],selection:Optional[List[str]],downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.frame.GBSelection.agg_list(self)->DataFrame
polars.frame.GBSelection.apply(self,func:Union[Callable[[Any],Any],Callable[[Any],Any]],return_dtype:Optional[Type[DataType]]=None)->DataFrame
polars.frame.GBSelection.count(self)->DataFrame
polars.frame.GBSelection.first(self)->DataFrame
polars.frame.GBSelection.last(self)->DataFrame
polars.frame.GBSelection.max(self)->DataFrame
polars.frame.GBSelection.mean(self)->DataFrame
polars.frame.GBSelection.median(self)->DataFrame
polars.frame.GBSelection.min(self)->DataFrame
polars.frame.GBSelection.n_unique(self)->DataFrame
polars.frame.GBSelection.quantile(self,quantile:float)->DataFrame
polars.frame.GBSelection.sum(self)->DataFrame
polars.frame.GroupBy(self,df:PyDataFrame,by:Union[str,List[str]],downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.frame.GroupBy.__getitem__(self,item:Any)->'GBSelection'
polars.frame.GroupBy.__init__(self,df:PyDataFrame,by:Union[str,List[str]],downsample:bool=False,rule:Optional[str]=None,downsample_n:int=0)
polars.frame.GroupBy.__iter__(self)->Iterable[Any]
polars.frame.GroupBy.agg(self,column_to_agg:Union[List[Tuple[str,List[str]]],Dict[str,Union[str,List[str]]],List['Expr'],'Expr'])->DataFrame
polars.frame.GroupBy.agg_list(self)->DataFrame
polars.frame.GroupBy.apply(self,f:Callable[[DataFrame],DataFrame])->DataFrame
polars.frame.GroupBy.count(self)->DataFrame
polars.frame.GroupBy.first(self)->DataFrame
polars.frame.GroupBy.get_group(self,group_value:Union[Any,Tuple[Any]])->DataFrame
polars.frame.GroupBy.groups(self)->DataFrame
polars.frame.GroupBy.last(self)->DataFrame
polars.frame.GroupBy.max(self)->DataFrame
polars.frame.GroupBy.mean(self)->DataFrame
polars.frame.GroupBy.median(self)->DataFrame
polars.frame.GroupBy.min(self)->DataFrame
polars.frame.GroupBy.n_unique(self)->DataFrame
polars.frame.GroupBy.pivot(self,pivot_column:str,values_column:str)->'PivotOps'
polars.frame.GroupBy.quantile(self,quantile:float)->DataFrame
polars.frame.GroupBy.select(self,columns:Union[str,List[str]])->'GBSelection'
polars.frame.GroupBy.select_all(self)->'GBSelection'
polars.frame.GroupBy.sum(self)->DataFrame
polars.frame.PivotOps(self,df:DataFrame,by:Union[str,List[str]],pivot_column:str,values_column:str)
polars.frame.PivotOps.__init__(self,df:DataFrame,by:Union[str,List[str]],pivot_column:str,values_column:str)
polars.frame.PivotOps.count(self)->DataFrame
polars.frame.PivotOps.first(self)->DataFrame
polars.frame.PivotOps.max(self)->DataFrame
polars.frame.PivotOps.mean(self)->DataFrame
polars.frame.PivotOps.median(self)->DataFrame
polars.frame.PivotOps.min(self)->DataFrame
polars.frame.PivotOps.sum(self)->DataFrame
polars.frame.StringCache(self)
polars.frame.StringCache.__enter__(self)->'StringCache'
polars.frame.StringCache.__exit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
polars.frame.StringCache.__init__(self)
polars.frame._prepare_other_arg(other:Any)->Series
polars.frame._series_to_frame(self:Series)->DataFrame
polars.frame.toggle_string_cache(toggle:bool)->None
polars.frame.wrap_df(df:PyDataFrame)->'DataFrame'
polars.wrap_df(df:PyDataFrame)->'DataFrame'


----------------------------------------/home/zhang/Packages/polars/polars0.8.10/__init__.py----------------------------------------
A:polars.__init__.__version__->version()


----------------------------------------/home/zhang/Packages/polars/polars0.8.10/datatypes.py----------------------------------------
polars.Boolean(DataType)
polars.Categorical(DataType)
polars.DataType
polars.Date32(DataType)
polars.Date64(DataType)
polars.DurationMicrosecond(DataType)
polars.DurationMillisecond(DataType)
polars.DurationNanosecond(DataType)
polars.DurationSecond(DataType)
polars.Float32(DataType)
polars.Float64(DataType)
polars.Int16(DataType)
polars.Int32(DataType)
polars.Int64(DataType)
polars.Int8(DataType)
polars.List(DataType)
polars.Object(DataType)
polars.Time32Millisecond(DataType)
polars.Time32Second(DataType)
polars.Time64Microsecond(DataType)
polars.Time64Nanosecond(DataType)
polars.TimestampMicrosecond(DataType)
polars.TimestampMillisecond(DataType)
polars.TimestampNanosecond(DataType)
polars.TimestampSecond(DataType)
polars.UInt16(DataType)
polars.UInt32(DataType)
polars.UInt64(DataType)
polars.UInt8(DataType)
polars.Utf8(DataType)
polars.datatypes.Boolean(DataType)
polars.datatypes.Categorical(DataType)
polars.datatypes.DataType
polars.datatypes.Date32(DataType)
polars.datatypes.Date64(DataType)
polars.datatypes.DurationMicrosecond(DataType)
polars.datatypes.DurationMillisecond(DataType)
polars.datatypes.DurationNanosecond(DataType)
polars.datatypes.DurationSecond(DataType)
polars.datatypes.Float32(DataType)
polars.datatypes.Float64(DataType)
polars.datatypes.Int16(DataType)
polars.datatypes.Int32(DataType)
polars.datatypes.Int64(DataType)
polars.datatypes.Int8(DataType)
polars.datatypes.List(DataType)
polars.datatypes.Object(DataType)
polars.datatypes.Time32Millisecond(DataType)
polars.datatypes.Time32Second(DataType)
polars.datatypes.Time64Microsecond(DataType)
polars.datatypes.Time64Nanosecond(DataType)
polars.datatypes.TimestampMicrosecond(DataType)
polars.datatypes.TimestampMillisecond(DataType)
polars.datatypes.TimestampNanosecond(DataType)
polars.datatypes.TimestampSecond(DataType)
polars.datatypes.UInt16(DataType)
polars.datatypes.UInt32(DataType)
polars.datatypes.UInt64(DataType)
polars.datatypes.UInt8(DataType)
polars.datatypes.Utf8(DataType)
polars.datatypes.dtype_to_ctype(dtype:Type[DataType])->Type[_SimpleCData]
polars.datatypes.dtype_to_int(dtype:Type[DataType])->int
polars.datatypes.dtype_to_primitive(dtype:Type[DataType])->Type[DataType]
polars.datatypes.pytype_to_polars_type(data_type:Type[Any])->Type[DataType]
polars.dtype_to_ctype(dtype:Type[DataType])->Type[_SimpleCData]
polars.dtype_to_int(dtype:Type[DataType])->int
polars.dtype_to_primitive(dtype:Type[DataType])->Type[DataType]
polars.pytype_to_polars_type(data_type:Type[Any])->Type[DataType]


----------------------------------------/home/zhang/Packages/polars/polars0.8.10/lazy/__init__.py----------------------------------------
A:polars.lazy.__init__.exprs->_selection_to_pyexpr_list(exprs)
A:polars.lazy.__init__.expr->expr_to_lit_or_expr(expr)
A:polars.lazy.__init__.aggs->_selection_to_pyexpr_list(aggs)
A:polars.lazy.__init__.self->Expr.__new__(Expr)
A:polars.lazy.__init__.null_values->_process_null_values(null_values)
A:polars.lazy.__init__.self._ldf->polars.PyLazyFrame.new_from_parquet(file, stop_after_n_rows, cache)
A:polars.lazy.__init__.ldf->Expr.__new__(Expr)._ldf.optimization_toggle(type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, string_cache)
A:polars.lazy.__init__.dot->Expr.__new__(Expr)._ldf.to_dot(optimized)
A:polars.lazy.__init__.dot_path->os.path.join(tmpdir_name, 'dot')
A:polars.lazy.__init__.out_path->os.path.join(tmpdir_name, 'dot.png')
A:polars.lazy.__init__.img->matplotlib.image.imread(out_path)
A:polars.lazy.__init__.by_columns->_selection_to_pyexpr_list(by_columns)
A:polars.lazy.__init__.predicate->col(predicate)
A:polars.lazy.__init__.e->col(e)
A:polars.lazy.__init__.lgb->Expr.__new__(Expr)._ldf.groupby(new_by)
A:polars.lazy.__init__.column->col(column)
A:polars.lazy.__init__.out->Expr.__new__(Expr)._ldf.join(ldf._ldf, new_left_on, new_right_on, allow_parallel, force_parallel, how)
A:polars.lazy.__init__.fill_value->lit(fill_value)
A:polars.lazy.__init__.by->expr_to_lit_or_expr(by, False)
A:polars.lazy.__init__.pyexprs->_selection_to_pyexpr_list(expr)
A:polars.lazy.__init__.other->lit(Series('', other))
A:polars.lazy.__init__.start->lit(start)
A:polars.lazy.__init__.end->lit(end)
A:polars.lazy.__init__.expr_->expr_to_lit_or_expr(expr)
A:polars.lazy.__init__.whenthen->Expr.__new__(Expr)._pywhen.then(expr._pyexpr)
A:polars.lazy.__init__.pw->pywhen(expr._pyexpr)
A:polars.lazy.__init__.a->col(a)
A:polars.lazy.__init__.b->col(b)
A:polars.lazy.__init__.acc->map_binary(acc, e, f, None)
A:polars.lazy.__init__.low->lit(low)
A:polars.lazy.__init__.high->lit(high)
polars.__init__.Expr(self)
polars.__init__.Expr.__add__(self,other:Any)->'Expr'
polars.__init__.Expr.__and__(self,other:'Expr')->'Expr'
polars.__init__.Expr.__eq__(self,other:Any)->'Expr'
polars.__init__.Expr.__ge__(self,other:Any)->'Expr'
polars.__init__.Expr.__gt__(self,other:Any)->'Expr'
polars.__init__.Expr.__invert__(self)->'Expr'
polars.__init__.Expr.__le__(self,other:Any)->'Expr'
polars.__init__.Expr.__lt__(self,other:Any)->'Expr'
polars.__init__.Expr.__mul__(self,other:Any)->'Expr'
polars.__init__.Expr.__ne__(self,other:Any)->'Expr'
polars.__init__.Expr.__or__(self,other:'Expr')->'Expr'
polars.__init__.Expr.__pow__(self,power:float,modulo:None=None)->'Expr'
polars.__init__.Expr.__sub__(self,other:Any)->'Expr'
polars.__init__.Expr.__to_expr(self,other:Any)->'Expr'
polars.__init__.Expr.__to_pyexpr(self,other:Any)->PyExpr
polars.__init__.Expr.__truediv__(self,other:Any)->'Expr'
polars.__init__.Expr._from_pyexpr(pyexpr:PyExpr)->'Expr'
polars.__init__.Expr.agg_groups(self)->'Expr'
polars.__init__.Expr.alias(self,name:str)->'Expr'
polars.__init__.Expr.apply(self,f:Union['UDF',Callable[[Series],Series]],return_dtype:Optional[Type[DataType]]=None)->'Expr'
polars.__init__.Expr.arg_sort(self,reverse:bool=False)->'Expr'
polars.__init__.Expr.arg_unique(self)->'Expr'
polars.__init__.Expr.backward_fill(self)->'Expr'
polars.__init__.Expr.cast(self,dtype:Type[Any])->'Expr'
polars.__init__.Expr.count(self)->'Expr'
polars.__init__.Expr.cum_max(self,reverse:bool=False)->'Expr'
polars.__init__.Expr.cum_min(self,reverse:bool=False)->'Expr'
polars.__init__.Expr.cum_sum(self,reverse:bool=False)->'Expr'
polars.__init__.Expr.dt(self)->'ExprDateTimeNameSpace'
polars.__init__.Expr.eq(self,other:'Expr')->'Expr'
polars.__init__.Expr.explode(self)->'Expr'
polars.__init__.Expr.fill_none(self,fill_value:Union[str,int,float,'Expr'])->'Expr'
polars.__init__.Expr.filter(self,predicate:'Expr')->'Expr'
polars.__init__.Expr.first(self)->'Expr'
polars.__init__.Expr.forward_fill(self)->'Expr'
polars.__init__.Expr.gt(self,other:'Expr')->'Expr'
polars.__init__.Expr.gt_eq(self,other:'Expr')->'Expr'
polars.__init__.Expr.head(self,n:Optional[int]=None)->'Expr'
polars.__init__.Expr.is_between(self,start:Union['Expr',datetime],end:Union['Expr',datetime])->'Expr'
polars.__init__.Expr.is_duplicated(self)->'Expr'
polars.__init__.Expr.is_finite(self)->'Expr'
polars.__init__.Expr.is_first(self)->'Expr'
polars.__init__.Expr.is_in(self,other:'Expr')->'Expr'
polars.__init__.Expr.is_infinite(self)->'Expr'
polars.__init__.Expr.is_nan(self)->'Expr'
polars.__init__.Expr.is_not(self)->'Expr'
polars.__init__.Expr.is_not_nan(self)->'Expr'
polars.__init__.Expr.is_not_null(self)->'Expr'
polars.__init__.Expr.is_null(self)->'Expr'
polars.__init__.Expr.is_unique(self)->'Expr'
polars.__init__.Expr.last(self)->'Expr'
polars.__init__.Expr.list(self)->'Expr'
polars.__init__.Expr.lt(self,other:'Expr')->'Expr'
polars.__init__.Expr.lt_eq(self,other:'Expr')->'Expr'
polars.__init__.Expr.map(self,f:Union['UDF',Callable[[Series],Series]],return_dtype:Optional[Type[DataType]]=None)->'Expr'
polars.__init__.Expr.max(self)->'Expr'
polars.__init__.Expr.mean(self)->'Expr'
polars.__init__.Expr.median(self)->'Expr'
polars.__init__.Expr.min(self)->'Expr'
polars.__init__.Expr.n_unique(self)->'Expr'
polars.__init__.Expr.neq(self,other:'Expr')->'Expr'
polars.__init__.Expr.over(self,expr:Union[str,'Expr',List['Expr']])->'Expr'
polars.__init__.Expr.pow(self,exponent:float)->'Expr'
polars.__init__.Expr.quantile(self,quantile:float)->'Expr'
polars.__init__.Expr.repeat_by(self,by:'Expr')->'Expr'
polars.__init__.Expr.reverse(self)->'Expr'
polars.__init__.Expr.round(self,decimals:int)->'Expr'
polars.__init__.Expr.shift(self,periods:int)->'Expr'
polars.__init__.Expr.shift_and_fill(self,periods:int,fill_value:'Expr')->'Expr'
polars.__init__.Expr.slice(self,offset:int,length:int)->'Expr'
polars.__init__.Expr.sort(self,reverse:bool=False)->'Expr'
polars.__init__.Expr.sort_by(self,by:Union['Expr',str],reverse:bool=False)->'Expr'
polars.__init__.Expr.std(self)->'Expr'
polars.__init__.Expr.str(self)->'ExprStringNameSpace'
polars.__init__.Expr.sum(self)->'Expr'
polars.__init__.Expr.tail(self,n:Optional[int]=None)->'Expr'
polars.__init__.Expr.take(self,index:'Expr')->'Expr'
polars.__init__.Expr.take_every(self,n:int)->'Expr'
polars.__init__.Expr.unique(self)->'Expr'
polars.__init__.Expr.var(self)->'Expr'
polars.__init__.ExprDateTimeNameSpace(self,expr:Expr)
polars.__init__.ExprDateTimeNameSpace.day(self)->Expr
polars.__init__.ExprDateTimeNameSpace.hour(self)->Expr
polars.__init__.ExprDateTimeNameSpace.minute(self)->Expr
polars.__init__.ExprDateTimeNameSpace.month(self)->Expr
polars.__init__.ExprDateTimeNameSpace.nanosecond(self)->Expr
polars.__init__.ExprDateTimeNameSpace.ordinal_day(self)->Expr
polars.__init__.ExprDateTimeNameSpace.round(self,rule:str,n:int)->Expr
polars.__init__.ExprDateTimeNameSpace.second(self)->Expr
polars.__init__.ExprDateTimeNameSpace.strftime(self,fmt:str)->Expr
polars.__init__.ExprDateTimeNameSpace.year(self)->Expr
polars.__init__.ExprStringNameSpace(self,expr:Expr)
polars.__init__.ExprStringNameSpace.contains(self,pattern:str)->Expr
polars.__init__.ExprStringNameSpace.lengths(self)->Expr
polars.__init__.ExprStringNameSpace.parse_date(self,datatype:Union[datatypes.Date32,datatypes.Date64],fmt:Optional[str]=None)->Expr
polars.__init__.ExprStringNameSpace.replace(self,pattern:str,value:str)->Expr
polars.__init__.ExprStringNameSpace.replace_all(self,pattern:str,value:str)->Expr
polars.__init__.ExprStringNameSpace.slice(self,start:int,length:Optional[int]=None)->Expr
polars.__init__.ExprStringNameSpace.strptime(self,datatype:Union[datatypes.Date32,datatypes.Date64],fmt:Optional[str]=None)->Expr
polars.__init__.ExprStringNameSpace.to_lowercase(self)->Expr
polars.__init__.ExprStringNameSpace.to_uppercase(self)->Expr
polars.__init__.LazyFrame(self)
polars.__init__.LazyFrame._from_pyldf(ldf:PyLazyFrame)->'LazyFrame'
polars.__init__.LazyFrame.cache(self)->'LazyFrame'
polars.__init__.LazyFrame.collect(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=False,no_optimization:bool=False)->DataFrame
polars.__init__.LazyFrame.describe_optimized_plan(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True)->str
polars.__init__.LazyFrame.describe_plan(self)->str
polars.__init__.LazyFrame.drop_column(self,column:str)->'LazyFrame'
polars.__init__.LazyFrame.drop_columns(self,columns:List[str])->'LazyFrame'
polars.__init__.LazyFrame.drop_duplicates(self,maintain_order:bool=False,subset:Optional[Union[List[str],str]]=None)->'LazyFrame'
polars.__init__.LazyFrame.drop_nulls(self,subset:Optional[Union[List[str],str]]=None)->'LazyFrame'
polars.__init__.LazyFrame.explode(self,columns:Union[str,List[str]])->'LazyFrame'
polars.__init__.LazyFrame.fetch(self,n_rows:int=500,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=True,no_optimization:bool=False)->DataFrame
polars.__init__.LazyFrame.fill_none(self,fill_value:Union[int,str,'Expr'])->'LazyFrame'
polars.__init__.LazyFrame.filter(self,predicate:'Expr')->'LazyFrame'
polars.__init__.LazyFrame.first(self)->'LazyFrame'
polars.__init__.LazyFrame.groupby(self,by:Union[str,List[str],'Expr',List['Expr']])->LazyGroupBy
polars.__init__.LazyFrame.head(self,n:int)->'LazyFrame'
polars.__init__.LazyFrame.join(self,ldf:'LazyFrame',left_on:Optional[Union['Expr',str,List['Expr'],List[str]]]=None,right_on:Optional[Union['Expr',str,List['Expr'],List[str]]]=None,on:Optional[Union['Expr',str,List['Expr'],List[str]]]=None,how:str='inner',allow_parallel:bool=True,force_parallel:bool=False)->'LazyFrame'
polars.__init__.LazyFrame.last(self)->'LazyFrame'
polars.__init__.LazyFrame.limit(self,n:int)->'LazyFrame'
polars.__init__.LazyFrame.map(self,f:Union['UDF',Callable[[DataFrame],DataFrame]],predicate_pushdown:bool=True,projection_pushdown:bool=True,no_optimizations:bool=False)->'LazyFrame'
polars.__init__.LazyFrame.max(self)->'LazyFrame'
polars.__init__.LazyFrame.mean(self)->'LazyFrame'
polars.__init__.LazyFrame.median(self)->'LazyFrame'
polars.__init__.LazyFrame.melt(self,id_vars:Union[str,List[str]],value_vars:Union[str,List[str]])->'LazyFrame'
polars.__init__.LazyFrame.min(self)->'LazyFrame'
polars.__init__.LazyFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.__init__.LazyFrame.quantile(self,quantile:float)->'LazyFrame'
polars.__init__.LazyFrame.reverse(self)->'LazyFrame'
polars.__init__.LazyFrame.scan_csv(file:str,has_headers:bool=True,ignore_errors:bool=False,sep:str=',',skip_rows:int=0,stop_after_n_rows:Optional[int]=None,cache:bool=True,dtype:Optional[Dict[str,Type[DataType]]]=None,low_memory:bool=False,comment_char:Optional[str]=None,null_values:Optional[Union[str,List[str],Dict[str,str]]]=None)->'LazyFrame'
polars.__init__.LazyFrame.scan_parquet(file:str,stop_after_n_rows:Optional[int]=None,cache:bool=True)->'LazyFrame'
polars.__init__.LazyFrame.select(self,exprs:Union[str,'Expr',List[str],List['Expr']])->'LazyFrame'
polars.__init__.LazyFrame.shift(self,periods:int)->'LazyFrame'
polars.__init__.LazyFrame.shift_and_fill(self,periods:int,fill_value:Union['Expr',int,str,float])->'LazyFrame'
polars.__init__.LazyFrame.show_graph(self,optimized:bool=True,show:bool=True,output_path:Optional[str]=None,raw_output:bool=False,figsize:Tuple[float,float]=(16.0,12.0))->Optional[str]
polars.__init__.LazyFrame.slice(self,offset:int,length:int)->'LazyFrame'
polars.__init__.LazyFrame.sort(self,by_columns:Union[str,'Expr',List['Expr']],reverse:Union[bool,List[bool]]=False)->'LazyFrame'
polars.__init__.LazyFrame.std(self)->'LazyFrame'
polars.__init__.LazyFrame.sum(self)->'LazyFrame'
polars.__init__.LazyFrame.tail(self,n:int)->'LazyFrame'
polars.__init__.LazyFrame.var(self)->'LazyFrame'
polars.__init__.LazyFrame.with_column(self,expr:'Expr')->'LazyFrame'
polars.__init__.LazyFrame.with_column_renamed(self,existing_name:str,new_name:str)->'LazyFrame'
polars.__init__.LazyFrame.with_columns(self,exprs:Union[List['Expr'],'Expr'])->'LazyFrame'
polars.__init__.LazyGroupBy(self,lgb:PyLazyGroupBy)
polars.__init__.LazyGroupBy.agg(self,aggs:Union[List['Expr'],'Expr'])->'LazyFrame'
polars.__init__.LazyGroupBy.apply(self,f:Callable[[DataFrame],DataFrame])->'LazyFrame'
polars.__init__.UDF(self,f:Callable[[Series],Series],return_dtype:Type[DataType])
polars.__init__.When(self,pywhen:pywhen)
polars.__init__.When.then(self,expr:Union[Expr,int,float,str])->WhenThen
polars.__init__.WhenThen(self,pywhenthen:'PyWhenThen')
polars.__init__.WhenThen.otherwise(self,expr:Union[Expr,int,float,str])->Expr
polars.__init__.WhenThen.when(self,predicate:Expr)->WhenThenThen
polars.__init__.WhenThenThen(self,pywhenthenthen:'PyWhenThenThen')
polars.__init__.WhenThenThen.otherwise(self,expr:Union[Expr,int,float,str])->Expr
polars.__init__.WhenThenThen.then(self,expr:Union[Expr,int,float,str])->'WhenThenThen'
polars.__init__.WhenThenThen.when(self,predicate:Expr)->'WhenThenThen'
polars.__init__._selection_to_pyexpr_list(exprs:Union[str,List[str],'Expr',List['Expr']])->List[PyExpr]
polars.__init__.all(name:Union[str,List[Expr]])->Expr
polars.__init__.any(name:Union[str,List[Expr]])->Expr
polars.__init__.arange(low:Union[int,Expr],high:Union[int,Expr],step:int=1,dtype:Optional[Type[DataType]]=None,eager:bool=False)->Union[Expr, Series]
polars.__init__.argsort_by(exprs:List[Expr],reverse:Union[List[bool],bool]=False)->Expr
polars.__init__.avg(column:Union[str,Series])->Union[Expr, float]
polars.__init__.col(name:str)->Expr
polars.__init__.count(column:Union[str,Series]='')->Union[Expr, int]
polars.__init__.cov(a:Union[str,Expr],b:Union[str,Expr])->Expr
polars.__init__.except_(name:str)->Expr
polars.__init__.expr_to_lit_or_expr(expr:Union[Expr,int,float,str,List[Expr]],str_to_lit:bool=True)->Expr
polars.__init__.first(column:Union[str,Series])->Union[Expr, Any]
polars.__init__.fold(acc:Expr,f:Callable[[Series,Series],Series],exprs:List[Expr])->Expr
polars.__init__.groups(column:str)->Expr
polars.__init__.head(column:Union[str,Series],n:Optional[int]=None)->Union[Expr, Series]
polars.__init__.last(column:Union[str,Series])->Expr
polars.__init__.lit(value:Optional[Union[float,int,str,datetime,Series]],dtype:Optional[Type[DataType]]=None)->Expr
polars.__init__.lit_date(dt:datetime)->Expr
polars.__init__.map_binary(a:Union[str,Expr],b:Union[str,Expr],f:Callable[[Series,Series],Series],return_dtype:Optional[Type[DataType]]=None)->Expr
polars.__init__.max(column:Union[str,List[Expr],Series])->Union[Expr, Any]
polars.__init__.mean(column:Union[str,Series])->Union[Expr, float]
polars.__init__.median(column:Union[str,Series])->Union[Expr, float, int]
polars.__init__.min(column:Union[str,List[Expr],Series])->Union[Expr, Any]
polars.__init__.n_unique(column:Union[str,Series])->Union[Expr, int]
polars.__init__.pearson_corr(a:Union[str,Expr],b:Union[str,Expr])->Expr
polars.__init__.quantile(column:str,quantile:float)->Expr
polars.__init__.std(column:Union[str,Series])->Union[Expr, float]
polars.__init__.sum(column:Union[str,List[Expr],Series])->Union[Expr, Any]
polars.__init__.tail(column:Union[str,Series],n:Optional[int]=None)->Union[Expr, Series]
polars.__init__.to_list(name:str)->Expr
polars.__init__.udf(f:Callable[[Series],Series],return_dtype:Type[DataType])->UDF
polars.__init__.var(column:Union[str,Series])->Union[Expr, float]
polars.__init__.when(expr:Expr)->When
polars.__init__.wrap_expr(pyexpr:PyExpr)->'Expr'
polars.__init__.wrap_ldf(ldf:PyLazyFrame)->'LazyFrame'
polars.lazy.__init__.Expr(self)
polars.lazy.__init__.Expr.__add__(self,other:Any)->'Expr'
polars.lazy.__init__.Expr.__and__(self,other:'Expr')->'Expr'
polars.lazy.__init__.Expr.__eq__(self,other:Any)->'Expr'
polars.lazy.__init__.Expr.__ge__(self,other:Any)->'Expr'
polars.lazy.__init__.Expr.__gt__(self,other:Any)->'Expr'
polars.lazy.__init__.Expr.__init__(self)
polars.lazy.__init__.Expr.__invert__(self)->'Expr'
polars.lazy.__init__.Expr.__le__(self,other:Any)->'Expr'
polars.lazy.__init__.Expr.__lt__(self,other:Any)->'Expr'
polars.lazy.__init__.Expr.__mul__(self,other:Any)->'Expr'
polars.lazy.__init__.Expr.__ne__(self,other:Any)->'Expr'
polars.lazy.__init__.Expr.__or__(self,other:'Expr')->'Expr'
polars.lazy.__init__.Expr.__pow__(self,power:float,modulo:None=None)->'Expr'
polars.lazy.__init__.Expr.__sub__(self,other:Any)->'Expr'
polars.lazy.__init__.Expr.__to_expr(self,other:Any)->'Expr'
polars.lazy.__init__.Expr.__to_pyexpr(self,other:Any)->PyExpr
polars.lazy.__init__.Expr.__truediv__(self,other:Any)->'Expr'
polars.lazy.__init__.Expr._from_pyexpr(pyexpr:PyExpr)->'Expr'
polars.lazy.__init__.Expr.agg_groups(self)->'Expr'
polars.lazy.__init__.Expr.alias(self,name:str)->'Expr'
polars.lazy.__init__.Expr.apply(self,f:Union['UDF',Callable[[Series],Series]],return_dtype:Optional[Type[DataType]]=None)->'Expr'
polars.lazy.__init__.Expr.arg_sort(self,reverse:bool=False)->'Expr'
polars.lazy.__init__.Expr.arg_unique(self)->'Expr'
polars.lazy.__init__.Expr.backward_fill(self)->'Expr'
polars.lazy.__init__.Expr.cast(self,dtype:Type[Any])->'Expr'
polars.lazy.__init__.Expr.count(self)->'Expr'
polars.lazy.__init__.Expr.cum_max(self,reverse:bool=False)->'Expr'
polars.lazy.__init__.Expr.cum_min(self,reverse:bool=False)->'Expr'
polars.lazy.__init__.Expr.cum_sum(self,reverse:bool=False)->'Expr'
polars.lazy.__init__.Expr.dt(self)->'ExprDateTimeNameSpace'
polars.lazy.__init__.Expr.eq(self,other:'Expr')->'Expr'
polars.lazy.__init__.Expr.explode(self)->'Expr'
polars.lazy.__init__.Expr.fill_none(self,fill_value:Union[str,int,float,'Expr'])->'Expr'
polars.lazy.__init__.Expr.filter(self,predicate:'Expr')->'Expr'
polars.lazy.__init__.Expr.first(self)->'Expr'
polars.lazy.__init__.Expr.forward_fill(self)->'Expr'
polars.lazy.__init__.Expr.gt(self,other:'Expr')->'Expr'
polars.lazy.__init__.Expr.gt_eq(self,other:'Expr')->'Expr'
polars.lazy.__init__.Expr.head(self,n:Optional[int]=None)->'Expr'
polars.lazy.__init__.Expr.is_between(self,start:Union['Expr',datetime],end:Union['Expr',datetime])->'Expr'
polars.lazy.__init__.Expr.is_duplicated(self)->'Expr'
polars.lazy.__init__.Expr.is_finite(self)->'Expr'
polars.lazy.__init__.Expr.is_first(self)->'Expr'
polars.lazy.__init__.Expr.is_in(self,other:'Expr')->'Expr'
polars.lazy.__init__.Expr.is_infinite(self)->'Expr'
polars.lazy.__init__.Expr.is_nan(self)->'Expr'
polars.lazy.__init__.Expr.is_not(self)->'Expr'
polars.lazy.__init__.Expr.is_not_nan(self)->'Expr'
polars.lazy.__init__.Expr.is_not_null(self)->'Expr'
polars.lazy.__init__.Expr.is_null(self)->'Expr'
polars.lazy.__init__.Expr.is_unique(self)->'Expr'
polars.lazy.__init__.Expr.last(self)->'Expr'
polars.lazy.__init__.Expr.list(self)->'Expr'
polars.lazy.__init__.Expr.lt(self,other:'Expr')->'Expr'
polars.lazy.__init__.Expr.lt_eq(self,other:'Expr')->'Expr'
polars.lazy.__init__.Expr.map(self,f:Union['UDF',Callable[[Series],Series]],return_dtype:Optional[Type[DataType]]=None)->'Expr'
polars.lazy.__init__.Expr.max(self)->'Expr'
polars.lazy.__init__.Expr.mean(self)->'Expr'
polars.lazy.__init__.Expr.median(self)->'Expr'
polars.lazy.__init__.Expr.min(self)->'Expr'
polars.lazy.__init__.Expr.n_unique(self)->'Expr'
polars.lazy.__init__.Expr.neq(self,other:'Expr')->'Expr'
polars.lazy.__init__.Expr.over(self,expr:Union[str,'Expr',List['Expr']])->'Expr'
polars.lazy.__init__.Expr.pow(self,exponent:float)->'Expr'
polars.lazy.__init__.Expr.quantile(self,quantile:float)->'Expr'
polars.lazy.__init__.Expr.repeat_by(self,by:'Expr')->'Expr'
polars.lazy.__init__.Expr.reverse(self)->'Expr'
polars.lazy.__init__.Expr.round(self,decimals:int)->'Expr'
polars.lazy.__init__.Expr.shift(self,periods:int)->'Expr'
polars.lazy.__init__.Expr.shift_and_fill(self,periods:int,fill_value:'Expr')->'Expr'
polars.lazy.__init__.Expr.slice(self,offset:int,length:int)->'Expr'
polars.lazy.__init__.Expr.sort(self,reverse:bool=False)->'Expr'
polars.lazy.__init__.Expr.sort_by(self,by:Union['Expr',str],reverse:bool=False)->'Expr'
polars.lazy.__init__.Expr.std(self)->'Expr'
polars.lazy.__init__.Expr.str(self)->'ExprStringNameSpace'
polars.lazy.__init__.Expr.sum(self)->'Expr'
polars.lazy.__init__.Expr.tail(self,n:Optional[int]=None)->'Expr'
polars.lazy.__init__.Expr.take(self,index:'Expr')->'Expr'
polars.lazy.__init__.Expr.take_every(self,n:int)->'Expr'
polars.lazy.__init__.Expr.unique(self)->'Expr'
polars.lazy.__init__.Expr.var(self)->'Expr'
polars.lazy.__init__.ExprDateTimeNameSpace(self,expr:Expr)
polars.lazy.__init__.ExprDateTimeNameSpace.__init__(self,expr:Expr)
polars.lazy.__init__.ExprDateTimeNameSpace.day(self)->Expr
polars.lazy.__init__.ExprDateTimeNameSpace.hour(self)->Expr
polars.lazy.__init__.ExprDateTimeNameSpace.minute(self)->Expr
polars.lazy.__init__.ExprDateTimeNameSpace.month(self)->Expr
polars.lazy.__init__.ExprDateTimeNameSpace.nanosecond(self)->Expr
polars.lazy.__init__.ExprDateTimeNameSpace.ordinal_day(self)->Expr
polars.lazy.__init__.ExprDateTimeNameSpace.round(self,rule:str,n:int)->Expr
polars.lazy.__init__.ExprDateTimeNameSpace.second(self)->Expr
polars.lazy.__init__.ExprDateTimeNameSpace.strftime(self,fmt:str)->Expr
polars.lazy.__init__.ExprDateTimeNameSpace.year(self)->Expr
polars.lazy.__init__.ExprStringNameSpace(self,expr:Expr)
polars.lazy.__init__.ExprStringNameSpace.__init__(self,expr:Expr)
polars.lazy.__init__.ExprStringNameSpace.contains(self,pattern:str)->Expr
polars.lazy.__init__.ExprStringNameSpace.lengths(self)->Expr
polars.lazy.__init__.ExprStringNameSpace.parse_date(self,datatype:Union[datatypes.Date32,datatypes.Date64],fmt:Optional[str]=None)->Expr
polars.lazy.__init__.ExprStringNameSpace.replace(self,pattern:str,value:str)->Expr
polars.lazy.__init__.ExprStringNameSpace.replace_all(self,pattern:str,value:str)->Expr
polars.lazy.__init__.ExprStringNameSpace.slice(self,start:int,length:Optional[int]=None)->Expr
polars.lazy.__init__.ExprStringNameSpace.strptime(self,datatype:Union[datatypes.Date32,datatypes.Date64],fmt:Optional[str]=None)->Expr
polars.lazy.__init__.ExprStringNameSpace.to_lowercase(self)->Expr
polars.lazy.__init__.ExprStringNameSpace.to_uppercase(self)->Expr
polars.lazy.__init__.LazyFrame(self)
polars.lazy.__init__.LazyFrame.__init__(self)
polars.lazy.__init__.LazyFrame._from_pyldf(ldf:PyLazyFrame)->'LazyFrame'
polars.lazy.__init__.LazyFrame.cache(self)->'LazyFrame'
polars.lazy.__init__.LazyFrame.collect(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=False,no_optimization:bool=False)->DataFrame
polars.lazy.__init__.LazyFrame.describe_optimized_plan(self,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True)->str
polars.lazy.__init__.LazyFrame.describe_plan(self)->str
polars.lazy.__init__.LazyFrame.drop_column(self,column:str)->'LazyFrame'
polars.lazy.__init__.LazyFrame.drop_columns(self,columns:List[str])->'LazyFrame'
polars.lazy.__init__.LazyFrame.drop_duplicates(self,maintain_order:bool=False,subset:Optional[Union[List[str],str]]=None)->'LazyFrame'
polars.lazy.__init__.LazyFrame.drop_nulls(self,subset:Optional[Union[List[str],str]]=None)->'LazyFrame'
polars.lazy.__init__.LazyFrame.explode(self,columns:Union[str,List[str]])->'LazyFrame'
polars.lazy.__init__.LazyFrame.fetch(self,n_rows:int=500,type_coercion:bool=True,predicate_pushdown:bool=True,projection_pushdown:bool=True,simplify_expression:bool=True,string_cache:bool=True,no_optimization:bool=False)->DataFrame
polars.lazy.__init__.LazyFrame.fill_none(self,fill_value:Union[int,str,'Expr'])->'LazyFrame'
polars.lazy.__init__.LazyFrame.filter(self,predicate:'Expr')->'LazyFrame'
polars.lazy.__init__.LazyFrame.first(self)->'LazyFrame'
polars.lazy.__init__.LazyFrame.groupby(self,by:Union[str,List[str],'Expr',List['Expr']])->LazyGroupBy
polars.lazy.__init__.LazyFrame.head(self,n:int)->'LazyFrame'
polars.lazy.__init__.LazyFrame.join(self,ldf:'LazyFrame',left_on:Optional[Union['Expr',str,List['Expr'],List[str]]]=None,right_on:Optional[Union['Expr',str,List['Expr'],List[str]]]=None,on:Optional[Union['Expr',str,List['Expr'],List[str]]]=None,how:str='inner',allow_parallel:bool=True,force_parallel:bool=False)->'LazyFrame'
polars.lazy.__init__.LazyFrame.last(self)->'LazyFrame'
polars.lazy.__init__.LazyFrame.limit(self,n:int)->'LazyFrame'
polars.lazy.__init__.LazyFrame.map(self,f:Union['UDF',Callable[[DataFrame],DataFrame]],predicate_pushdown:bool=True,projection_pushdown:bool=True,no_optimizations:bool=False)->'LazyFrame'
polars.lazy.__init__.LazyFrame.max(self)->'LazyFrame'
polars.lazy.__init__.LazyFrame.mean(self)->'LazyFrame'
polars.lazy.__init__.LazyFrame.median(self)->'LazyFrame'
polars.lazy.__init__.LazyFrame.melt(self,id_vars:Union[str,List[str]],value_vars:Union[str,List[str]])->'LazyFrame'
polars.lazy.__init__.LazyFrame.min(self)->'LazyFrame'
polars.lazy.__init__.LazyFrame.pipe(self,func:Callable[...,Any],*args:Any,**kwargs:Any)->Any
polars.lazy.__init__.LazyFrame.quantile(self,quantile:float)->'LazyFrame'
polars.lazy.__init__.LazyFrame.reverse(self)->'LazyFrame'
polars.lazy.__init__.LazyFrame.scan_csv(file:str,has_headers:bool=True,ignore_errors:bool=False,sep:str=',',skip_rows:int=0,stop_after_n_rows:Optional[int]=None,cache:bool=True,dtype:Optional[Dict[str,Type[DataType]]]=None,low_memory:bool=False,comment_char:Optional[str]=None,null_values:Optional[Union[str,List[str],Dict[str,str]]]=None)->'LazyFrame'
polars.lazy.__init__.LazyFrame.scan_parquet(file:str,stop_after_n_rows:Optional[int]=None,cache:bool=True)->'LazyFrame'
polars.lazy.__init__.LazyFrame.select(self,exprs:Union[str,'Expr',List[str],List['Expr']])->'LazyFrame'
polars.lazy.__init__.LazyFrame.shift(self,periods:int)->'LazyFrame'
polars.lazy.__init__.LazyFrame.shift_and_fill(self,periods:int,fill_value:Union['Expr',int,str,float])->'LazyFrame'
polars.lazy.__init__.LazyFrame.show_graph(self,optimized:bool=True,show:bool=True,output_path:Optional[str]=None,raw_output:bool=False,figsize:Tuple[float,float]=(16.0,12.0))->Optional[str]
polars.lazy.__init__.LazyFrame.slice(self,offset:int,length:int)->'LazyFrame'
polars.lazy.__init__.LazyFrame.sort(self,by_columns:Union[str,'Expr',List['Expr']],reverse:Union[bool,List[bool]]=False)->'LazyFrame'
polars.lazy.__init__.LazyFrame.std(self)->'LazyFrame'
polars.lazy.__init__.LazyFrame.sum(self)->'LazyFrame'
polars.lazy.__init__.LazyFrame.tail(self,n:int)->'LazyFrame'
polars.lazy.__init__.LazyFrame.var(self)->'LazyFrame'
polars.lazy.__init__.LazyFrame.with_column(self,expr:'Expr')->'LazyFrame'
polars.lazy.__init__.LazyFrame.with_column_renamed(self,existing_name:str,new_name:str)->'LazyFrame'
polars.lazy.__init__.LazyFrame.with_columns(self,exprs:Union[List['Expr'],'Expr'])->'LazyFrame'
polars.lazy.__init__.LazyGroupBy(self,lgb:PyLazyGroupBy)
polars.lazy.__init__.LazyGroupBy.__init__(self,lgb:PyLazyGroupBy)
polars.lazy.__init__.LazyGroupBy.agg(self,aggs:Union[List['Expr'],'Expr'])->'LazyFrame'
polars.lazy.__init__.LazyGroupBy.apply(self,f:Callable[[DataFrame],DataFrame])->'LazyFrame'
polars.lazy.__init__.UDF(self,f:Callable[[Series],Series],return_dtype:Type[DataType])
polars.lazy.__init__.UDF.__init__(self,f:Callable[[Series],Series],return_dtype:Type[DataType])
polars.lazy.__init__.When(self,pywhen:pywhen)
polars.lazy.__init__.When.__init__(self,pywhen:pywhen)
polars.lazy.__init__.When.then(self,expr:Union[Expr,int,float,str])->WhenThen
polars.lazy.__init__.WhenThen(self,pywhenthen:'PyWhenThen')
polars.lazy.__init__.WhenThen.__init__(self,pywhenthen:'PyWhenThen')
polars.lazy.__init__.WhenThen.otherwise(self,expr:Union[Expr,int,float,str])->Expr
polars.lazy.__init__.WhenThen.when(self,predicate:Expr)->WhenThenThen
polars.lazy.__init__.WhenThenThen(self,pywhenthenthen:'PyWhenThenThen')
polars.lazy.__init__.WhenThenThen.__init__(self,pywhenthenthen:'PyWhenThenThen')
polars.lazy.__init__.WhenThenThen.otherwise(self,expr:Union[Expr,int,float,str])->Expr
polars.lazy.__init__.WhenThenThen.then(self,expr:Union[Expr,int,float,str])->'WhenThenThen'
polars.lazy.__init__.WhenThenThen.when(self,predicate:Expr)->'WhenThenThen'
polars.lazy.__init__._selection_to_pyexpr_list(exprs:Union[str,List[str],'Expr',List['Expr']])->List[PyExpr]
polars.lazy.__init__.all(name:Union[str,List[Expr]])->Expr
polars.lazy.__init__.any(name:Union[str,List[Expr]])->Expr
polars.lazy.__init__.arange(low:Union[int,Expr],high:Union[int,Expr],step:int=1,dtype:Optional[Type[DataType]]=None,eager:bool=False)->Union[Expr, Series]
polars.lazy.__init__.argsort_by(exprs:List[Expr],reverse:Union[List[bool],bool]=False)->Expr
polars.lazy.__init__.avg(column:Union[str,Series])->Union[Expr, float]
polars.lazy.__init__.col(name:str)->Expr
polars.lazy.__init__.count(column:Union[str,Series]='')->Union[Expr, int]
polars.lazy.__init__.cov(a:Union[str,Expr],b:Union[str,Expr])->Expr
polars.lazy.__init__.except_(name:str)->Expr
polars.lazy.__init__.expr_to_lit_or_expr(expr:Union[Expr,int,float,str,List[Expr]],str_to_lit:bool=True)->Expr
polars.lazy.__init__.first(column:Union[str,Series])->Union[Expr, Any]
polars.lazy.__init__.fold(acc:Expr,f:Callable[[Series,Series],Series],exprs:List[Expr])->Expr
polars.lazy.__init__.groups(column:str)->Expr
polars.lazy.__init__.head(column:Union[str,Series],n:Optional[int]=None)->Union[Expr, Series]
polars.lazy.__init__.last(column:Union[str,Series])->Expr
polars.lazy.__init__.lit(value:Optional[Union[float,int,str,datetime,Series]],dtype:Optional[Type[DataType]]=None)->Expr
polars.lazy.__init__.lit_date(dt:datetime)->Expr
polars.lazy.__init__.map_binary(a:Union[str,Expr],b:Union[str,Expr],f:Callable[[Series,Series],Series],return_dtype:Optional[Type[DataType]]=None)->Expr
polars.lazy.__init__.max(column:Union[str,List[Expr],Series])->Union[Expr, Any]
polars.lazy.__init__.mean(column:Union[str,Series])->Union[Expr, float]
polars.lazy.__init__.median(column:Union[str,Series])->Union[Expr, float, int]
polars.lazy.__init__.min(column:Union[str,List[Expr],Series])->Union[Expr, Any]
polars.lazy.__init__.n_unique(column:Union[str,Series])->Union[Expr, int]
polars.lazy.__init__.pearson_corr(a:Union[str,Expr],b:Union[str,Expr])->Expr
polars.lazy.__init__.quantile(column:str,quantile:float)->Expr
polars.lazy.__init__.std(column:Union[str,Series])->Union[Expr, float]
polars.lazy.__init__.sum(column:Union[str,List[Expr],Series])->Union[Expr, Any]
polars.lazy.__init__.tail(column:Union[str,Series],n:Optional[int]=None)->Union[Expr, Series]
polars.lazy.__init__.to_list(name:str)->Expr
polars.lazy.__init__.udf(f:Callable[[Series],Series],return_dtype:Type[DataType])->UDF
polars.lazy.__init__.var(column:Union[str,Series])->Union[Expr, float]
polars.lazy.__init__.when(expr:Expr)->When
polars.lazy.__init__.wrap_expr(pyexpr:PyExpr)->'Expr'
polars.lazy.__init__.wrap_ldf(ldf:PyLazyFrame)->'LazyFrame'

