
----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/__init__.py----------------------------------------
A:tensorflow.__init__.contrib->_LazyContribLoader()
tensorflow.__init__._LazyContribLoader(object)
tensorflow.__init__._LazyContribLoader.__getattr__(self,item)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/lib/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/lib/core/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/lib/core/error_codes_pb2.py----------------------------------------
A:tensorflow.core.lib.core.error_codes_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.lib.core.error_codes_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/lib/core/error_codes.proto', package='tensorflow.error', syntax='proto3', serialized_pb=_b('\n*tensorflow/core/lib/core/error_codes.proto\x12\x10tensorflow.error*\x84\x03\n\x04Code\x12\x06\n\x02OK\x10\x00\x12\r\n\tCANCELLED\x10\x01\x12\x0b\n\x07UNKNOWN\x10\x02\x12\x14\n\x10INVALID_ARGUMENT\x10\x03\x12\x15\n\x11DEADLINE_EXCEEDED\x10\x04\x12\r\n\tNOT_FOUND\x10\x05\x12\x12\n\x0eALREADY_EXISTS\x10\x06\x12\x15\n\x11PERMISSION_DENIED\x10\x07\x12\x13\n\x0fUNAUTHENTICATED\x10\x10\x12\x16\n\x12RESOURCE_EXHAUSTED\x10\x08\x12\x17\n\x13FAILED_PRECONDITION\x10\t\x12\x0b\n\x07ABORTED\x10\n\x12\x10\n\x0cOUT_OF_RANGE\x10\x0b\x12\x11\n\rUNIMPLEMENTED\x10\x0c\x12\x0c\n\x08INTERNAL\x10\r\x12\x0f\n\x0bUNAVAILABLE\x10\x0e\x12\r\n\tDATA_LOSS\x10\x0f\x12K\nGDO_NOT_USE_RESERVED_FOR_FUTURE_EXPANSION_USE_DEFAULT_IN_SWITCH_INSTEAD_\x10\x14B1\n\x18org.tensorflow.frameworkB\x10ErrorCodesProtosP\x01ø\x01\x01b\x06proto3'))
A:tensorflow.core.lib.core.error_codes_pb2._CODE->google.protobuf.descriptor.EnumDescriptor(name='Code', full_name='tensorflow.error.Code', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='OK', index=0, number=0, options=None, type=None), _descriptor.EnumValueDescriptor(name='CANCELLED', index=1, number=1, options=None, type=None), _descriptor.EnumValueDescriptor(name='UNKNOWN', index=2, number=2, options=None, type=None), _descriptor.EnumValueDescriptor(name='INVALID_ARGUMENT', index=3, number=3, options=None, type=None), _descriptor.EnumValueDescriptor(name='DEADLINE_EXCEEDED', index=4, number=4, options=None, type=None), _descriptor.EnumValueDescriptor(name='NOT_FOUND', index=5, number=5, options=None, type=None), _descriptor.EnumValueDescriptor(name='ALREADY_EXISTS', index=6, number=6, options=None, type=None), _descriptor.EnumValueDescriptor(name='PERMISSION_DENIED', index=7, number=7, options=None, type=None), _descriptor.EnumValueDescriptor(name='UNAUTHENTICATED', index=8, number=16, options=None, type=None), _descriptor.EnumValueDescriptor(name='RESOURCE_EXHAUSTED', index=9, number=8, options=None, type=None), _descriptor.EnumValueDescriptor(name='FAILED_PRECONDITION', index=10, number=9, options=None, type=None), _descriptor.EnumValueDescriptor(name='ABORTED', index=11, number=10, options=None, type=None), _descriptor.EnumValueDescriptor(name='OUT_OF_RANGE', index=12, number=11, options=None, type=None), _descriptor.EnumValueDescriptor(name='UNIMPLEMENTED', index=13, number=12, options=None, type=None), _descriptor.EnumValueDescriptor(name='INTERNAL', index=14, number=13, options=None, type=None), _descriptor.EnumValueDescriptor(name='UNAVAILABLE', index=15, number=14, options=None, type=None), _descriptor.EnumValueDescriptor(name='DATA_LOSS', index=16, number=15, options=None, type=None), _descriptor.EnumValueDescriptor(name='DO_NOT_USE_RESERVED_FOR_FUTURE_EXPANSION_USE_DEFAULT_IN_SWITCH_INSTEAD_', index=17, number=20, options=None, type=None)], containing_type=None, options=None, serialized_start=65, serialized_end=453)
A:tensorflow.core.lib.core.error_codes_pb2.Code->google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper(_CODE)
A:tensorflow.core.lib.core.error_codes_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x10ErrorCodesProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/example/example_pb2.py----------------------------------------
A:tensorflow.core.example.example_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.example.example_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/example/example.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n%tensorflow/core/example/example.proto\x12\ntensorflow\x1a%tensorflow/core/example/feature.proto"1\n\x07Example\x12&\n\x08features\x18\x01 \x01(\x0b2\x14.tensorflow.Features"i\n\x0fSequenceExample\x12%\n\x07context\x18\x01 \x01(\x0b2\x14.tensorflow.Features\x12/\n\rfeature_lists\x18\x02 \x01(\x0b2\x18.tensorflow.FeatureListsB,\n\x16org.tensorflow.exampleB\rExampleProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_example_dot_feature__pb2.DESCRIPTOR])
A:tensorflow.core.example.example_pb2._EXAMPLE->google.protobuf.descriptor.Descriptor(name='Example', full_name='tensorflow.Example', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='features', full_name='tensorflow.Example.features', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=92, serialized_end=141)
A:tensorflow.core.example.example_pb2._SEQUENCEEXAMPLE->google.protobuf.descriptor.Descriptor(name='SequenceExample', full_name='tensorflow.SequenceExample', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='context', full_name='tensorflow.SequenceExample.context', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='feature_lists', full_name='tensorflow.SequenceExample.feature_lists', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=143, serialized_end=248)
A:tensorflow.core.example.example_pb2.Example->google.protobuf.reflection.GeneratedProtocolMessageType('Example', (_message.Message,), dict(DESCRIPTOR=_EXAMPLE, __module__='tensorflow.core.example.example_pb2'))
A:tensorflow.core.example.example_pb2.SequenceExample->google.protobuf.reflection.GeneratedProtocolMessageType('SequenceExample', (_message.Message,), dict(DESCRIPTOR=_SEQUENCEEXAMPLE, __module__='tensorflow.core.example.example_pb2'))
A:tensorflow.core.example.example_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x16org.tensorflow.exampleB\rExampleProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/example/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/example/example_parser_configuration_pb2.py----------------------------------------
A:tensorflow.core.example.example_parser_configuration_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.example.example_parser_configuration_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/example/example_parser_configuration.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n:tensorflow/core/example/example_parser_configuration.proto\x12\ntensorflow\x1a,tensorflow/core/framework/tensor_shape.proto\x1a&tensorflow/core/framework/tensor.proto\x1a%tensorflow/core/framework/types.proto"£\x01\n\x12VarLenFeatureProto\x12#\n\x05dtype\x18\x01 \x01(\x0e2\x14.tensorflow.DataType\x12!\n\x19values_output_tensor_name\x18\x02 \x01(\t\x12"\n\x1aindices_output_tensor_name\x18\x03 \x01(\t\x12!\n\x19shapes_output_tensor_name\x18\x04 \x01(\t"»\x01\n\x14FixedLenFeatureProto\x12#\n\x05dtype\x18\x01 \x01(\x0e2\x14.tensorflow.DataType\x12+\n\x05shape\x18\x02 \x01(\x0b2\x1c.tensorflow.TensorShapeProto\x12.\n\rdefault_value\x18\x03 \x01(\x0b2\x17.tensorflow.TensorProto\x12!\n\x19values_output_tensor_name\x18\x04 \x01(\t"\x9a\x01\n\x14FeatureConfiguration\x12=\n\x11fixed_len_feature\x18\x01 \x01(\x0b2 .tensorflow.FixedLenFeatureProtoH\x00\x129\n\x0fvar_len_feature\x18\x02 \x01(\x0b2\x1e.tensorflow.VarLenFeatureProtoH\x00B\x08\n\x06config"¾\x01\n\x1aExampleParserConfiguration\x12K\n\x0bfeature_map\x18\x01 \x03(\x0b26.tensorflow.ExampleParserConfiguration.FeatureMapEntry\x1aS\n\x0fFeatureMapEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12/\n\x05value\x18\x02 \x01(\x0b2 .tensorflow.FeatureConfiguration:\x028\x01B?\n\x16org.tensorflow.exampleB ExampleParserConfigurationProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_tensor__shape__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_tensor__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_types__pb2.DESCRIPTOR])
A:tensorflow.core.example.example_parser_configuration_pb2._VARLENFEATUREPROTO->google.protobuf.descriptor.Descriptor(name='VarLenFeatureProto', full_name='tensorflow.VarLenFeatureProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='dtype', full_name='tensorflow.VarLenFeatureProto.dtype', index=0, number=1, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='values_output_tensor_name', full_name='tensorflow.VarLenFeatureProto.values_output_tensor_name', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='indices_output_tensor_name', full_name='tensorflow.VarLenFeatureProto.indices_output_tensor_name', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='shapes_output_tensor_name', full_name='tensorflow.VarLenFeatureProto.shapes_output_tensor_name', index=3, number=4, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=200, serialized_end=363)
A:tensorflow.core.example.example_parser_configuration_pb2._FIXEDLENFEATUREPROTO->google.protobuf.descriptor.Descriptor(name='FixedLenFeatureProto', full_name='tensorflow.FixedLenFeatureProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='dtype', full_name='tensorflow.FixedLenFeatureProto.dtype', index=0, number=1, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='shape', full_name='tensorflow.FixedLenFeatureProto.shape', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='default_value', full_name='tensorflow.FixedLenFeatureProto.default_value', index=2, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='values_output_tensor_name', full_name='tensorflow.FixedLenFeatureProto.values_output_tensor_name', index=3, number=4, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=366, serialized_end=553)
A:tensorflow.core.example.example_parser_configuration_pb2._FEATURECONFIGURATION->google.protobuf.descriptor.Descriptor(name='FeatureConfiguration', full_name='tensorflow.FeatureConfiguration', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='fixed_len_feature', full_name='tensorflow.FeatureConfiguration.fixed_len_feature', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='var_len_feature', full_name='tensorflow.FeatureConfiguration.var_len_feature', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[_descriptor.OneofDescriptor(name='config', full_name='tensorflow.FeatureConfiguration.config', index=0, containing_type=None, fields=[])], serialized_start=556, serialized_end=710)
A:tensorflow.core.example.example_parser_configuration_pb2._EXAMPLEPARSERCONFIGURATION_FEATUREMAPENTRY->google.protobuf.descriptor.Descriptor(name='FeatureMapEntry', full_name='tensorflow.ExampleParserConfiguration.FeatureMapEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.ExampleParserConfiguration.FeatureMapEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.ExampleParserConfiguration.FeatureMapEntry.value', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=820, serialized_end=903)
A:tensorflow.core.example.example_parser_configuration_pb2._EXAMPLEPARSERCONFIGURATION->google.protobuf.descriptor.Descriptor(name='ExampleParserConfiguration', full_name='tensorflow.ExampleParserConfiguration', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='feature_map', full_name='tensorflow.ExampleParserConfiguration.feature_map', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_EXAMPLEPARSERCONFIGURATION_FEATUREMAPENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=713, serialized_end=903)
A:tensorflow.core.example.example_parser_configuration_pb2.VarLenFeatureProto->google.protobuf.reflection.GeneratedProtocolMessageType('VarLenFeatureProto', (_message.Message,), dict(DESCRIPTOR=_VARLENFEATUREPROTO, __module__='tensorflow.core.example.example_parser_configuration_pb2'))
A:tensorflow.core.example.example_parser_configuration_pb2.FixedLenFeatureProto->google.protobuf.reflection.GeneratedProtocolMessageType('FixedLenFeatureProto', (_message.Message,), dict(DESCRIPTOR=_FIXEDLENFEATUREPROTO, __module__='tensorflow.core.example.example_parser_configuration_pb2'))
A:tensorflow.core.example.example_parser_configuration_pb2.FeatureConfiguration->google.protobuf.reflection.GeneratedProtocolMessageType('FeatureConfiguration', (_message.Message,), dict(DESCRIPTOR=_FEATURECONFIGURATION, __module__='tensorflow.core.example.example_parser_configuration_pb2'))
A:tensorflow.core.example.example_parser_configuration_pb2.ExampleParserConfiguration->google.protobuf.reflection.GeneratedProtocolMessageType('ExampleParserConfiguration', (_message.Message,), dict(FeatureMapEntry=_reflection.GeneratedProtocolMessageType('FeatureMapEntry', (_message.Message,), dict(DESCRIPTOR=_EXAMPLEPARSERCONFIGURATION_FEATUREMAPENTRY, __module__='tensorflow.core.example.example_parser_configuration_pb2')), DESCRIPTOR=_EXAMPLEPARSERCONFIGURATION, __module__='tensorflow.core.example.example_parser_configuration_pb2'))
A:tensorflow.core.example.example_parser_configuration_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x16org.tensorflow.exampleB ExampleParserConfigurationProtosP\x01ø\x01\x01'))
A:tensorflow.core.example.example_parser_configuration_pb2._EXAMPLEPARSERCONFIGURATION_FEATUREMAPENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/example/feature_pb2.py----------------------------------------
A:tensorflow.core.example.feature_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.example.feature_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/example/feature.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n%tensorflow/core/example/feature.proto\x12\ntensorflow"\x1a\n\tBytesList\x12\r\n\x05value\x18\x01 \x03(\x0c"\x1e\n\tFloatList\x12\x11\n\x05value\x18\x01 \x03(\x02B\x02\x10\x01"\x1e\n\tInt64List\x12\x11\n\x05value\x18\x01 \x03(\x03B\x02\x10\x01"\x98\x01\n\x07Feature\x12+\n\nbytes_list\x18\x01 \x01(\x0b2\x15.tensorflow.BytesListH\x00\x12+\n\nfloat_list\x18\x02 \x01(\x0b2\x15.tensorflow.FloatListH\x00\x12+\n\nint64_list\x18\x03 \x01(\x0b2\x15.tensorflow.Int64ListH\x00B\x06\n\x04kind"\x83\x01\n\x08Features\x122\n\x07feature\x18\x01 \x03(\x0b2!.tensorflow.Features.FeatureEntry\x1aC\n\x0cFeatureEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12"\n\x05value\x18\x02 \x01(\x0b2\x13.tensorflow.Feature:\x028\x01"3\n\x0bFeatureList\x12$\n\x07feature\x18\x01 \x03(\x0b2\x13.tensorflow.Feature"\x9c\x01\n\x0cFeatureLists\x12?\n\x0cfeature_list\x18\x01 \x03(\x0b2).tensorflow.FeatureLists.FeatureListEntry\x1aK\n\x10FeatureListEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12&\n\x05value\x18\x02 \x01(\x0b2\x17.tensorflow.FeatureList:\x028\x01B,\n\x16org.tensorflow.exampleB\rFeatureProtosP\x01ø\x01\x01b\x06proto3'))
A:tensorflow.core.example.feature_pb2._BYTESLIST->google.protobuf.descriptor.Descriptor(name='BytesList', full_name='tensorflow.BytesList', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='value', full_name='tensorflow.BytesList.value', index=0, number=1, type=12, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=53, serialized_end=79)
A:tensorflow.core.example.feature_pb2._FLOATLIST->google.protobuf.descriptor.Descriptor(name='FloatList', full_name='tensorflow.FloatList', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='value', full_name='tensorflow.FloatList.value', index=0, number=1, type=2, cpp_type=6, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01')))], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=81, serialized_end=111)
A:tensorflow.core.example.feature_pb2._INT64LIST->google.protobuf.descriptor.Descriptor(name='Int64List', full_name='tensorflow.Int64List', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='value', full_name='tensorflow.Int64List.value', index=0, number=1, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01')))], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=113, serialized_end=143)
A:tensorflow.core.example.feature_pb2._FEATURE->google.protobuf.descriptor.Descriptor(name='Feature', full_name='tensorflow.Feature', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='bytes_list', full_name='tensorflow.Feature.bytes_list', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='float_list', full_name='tensorflow.Feature.float_list', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='int64_list', full_name='tensorflow.Feature.int64_list', index=2, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[_descriptor.OneofDescriptor(name='kind', full_name='tensorflow.Feature.kind', index=0, containing_type=None, fields=[])], serialized_start=146, serialized_end=298)
A:tensorflow.core.example.feature_pb2._FEATURES_FEATUREENTRY->google.protobuf.descriptor.Descriptor(name='FeatureEntry', full_name='tensorflow.Features.FeatureEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.Features.FeatureEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.Features.FeatureEntry.value', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=365, serialized_end=432)
A:tensorflow.core.example.feature_pb2._FEATURES->google.protobuf.descriptor.Descriptor(name='Features', full_name='tensorflow.Features', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='feature', full_name='tensorflow.Features.feature', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_FEATURES_FEATUREENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=301, serialized_end=432)
A:tensorflow.core.example.feature_pb2._FEATURELIST->google.protobuf.descriptor.Descriptor(name='FeatureList', full_name='tensorflow.FeatureList', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='feature', full_name='tensorflow.FeatureList.feature', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=434, serialized_end=485)
A:tensorflow.core.example.feature_pb2._FEATURELISTS_FEATURELISTENTRY->google.protobuf.descriptor.Descriptor(name='FeatureListEntry', full_name='tensorflow.FeatureLists.FeatureListEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.FeatureLists.FeatureListEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.FeatureLists.FeatureListEntry.value', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=569, serialized_end=644)
A:tensorflow.core.example.feature_pb2._FEATURELISTS->google.protobuf.descriptor.Descriptor(name='FeatureLists', full_name='tensorflow.FeatureLists', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='feature_list', full_name='tensorflow.FeatureLists.feature_list', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_FEATURELISTS_FEATURELISTENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=488, serialized_end=644)
A:tensorflow.core.example.feature_pb2.BytesList->google.protobuf.reflection.GeneratedProtocolMessageType('BytesList', (_message.Message,), dict(DESCRIPTOR=_BYTESLIST, __module__='tensorflow.core.example.feature_pb2'))
A:tensorflow.core.example.feature_pb2.FloatList->google.protobuf.reflection.GeneratedProtocolMessageType('FloatList', (_message.Message,), dict(DESCRIPTOR=_FLOATLIST, __module__='tensorflow.core.example.feature_pb2'))
A:tensorflow.core.example.feature_pb2.Int64List->google.protobuf.reflection.GeneratedProtocolMessageType('Int64List', (_message.Message,), dict(DESCRIPTOR=_INT64LIST, __module__='tensorflow.core.example.feature_pb2'))
A:tensorflow.core.example.feature_pb2.Feature->google.protobuf.reflection.GeneratedProtocolMessageType('Feature', (_message.Message,), dict(DESCRIPTOR=_FEATURE, __module__='tensorflow.core.example.feature_pb2'))
A:tensorflow.core.example.feature_pb2.Features->google.protobuf.reflection.GeneratedProtocolMessageType('Features', (_message.Message,), dict(FeatureEntry=_reflection.GeneratedProtocolMessageType('FeatureEntry', (_message.Message,), dict(DESCRIPTOR=_FEATURES_FEATUREENTRY, __module__='tensorflow.core.example.feature_pb2')), DESCRIPTOR=_FEATURES, __module__='tensorflow.core.example.feature_pb2'))
A:tensorflow.core.example.feature_pb2.FeatureList->google.protobuf.reflection.GeneratedProtocolMessageType('FeatureList', (_message.Message,), dict(DESCRIPTOR=_FEATURELIST, __module__='tensorflow.core.example.feature_pb2'))
A:tensorflow.core.example.feature_pb2.FeatureLists->google.protobuf.reflection.GeneratedProtocolMessageType('FeatureLists', (_message.Message,), dict(FeatureListEntry=_reflection.GeneratedProtocolMessageType('FeatureListEntry', (_message.Message,), dict(DESCRIPTOR=_FEATURELISTS_FEATURELISTENTRY, __module__='tensorflow.core.example.feature_pb2')), DESCRIPTOR=_FEATURELISTS, __module__='tensorflow.core.example.feature_pb2'))
A:tensorflow.core.example.feature_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x16org.tensorflow.exampleB\rFeatureProtosP\x01ø\x01\x01'))
A:tensorflow.core.example.feature_pb2._FLOATLIST.fields_by_name['value']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.example.feature_pb2._INT64LIST.fields_by_name['value']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.example.feature_pb2._FEATURES_FEATUREENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))
A:tensorflow.core.example.feature_pb2._FEATURELISTS_FEATURELISTENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/variable_pb2.py----------------------------------------
A:tensorflow.core.framework.variable_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.variable_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/variable.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n(tensorflow/core/framework/variable.proto\x12\ntensorflow"¥\x01\n\x0bVariableDef\x12\x15\n\rvariable_name\x18\x01 \x01(\t\x12\x18\n\x10initializer_name\x18\x02 \x01(\t\x12\x15\n\rsnapshot_name\x18\x03 \x01(\t\x129\n\x13save_slice_info_def\x18\x04 \x01(\x0b2\x1c.tensorflow.SaveSliceInfoDef\x12\x13\n\x0bis_resource\x18\x05 \x01(\x08"`\n\x10SaveSliceInfoDef\x12\x11\n\tfull_name\x18\x01 \x01(\t\x12\x12\n\nfull_shape\x18\x02 \x03(\x03\x12\x12\n\nvar_offset\x18\x03 \x03(\x03\x12\x11\n\tvar_shape\x18\x04 \x03(\x03B/\n\x18org.tensorflow.frameworkB\x0eVariableProtosP\x01ø\x01\x01b\x06proto3'))
A:tensorflow.core.framework.variable_pb2._VARIABLEDEF->google.protobuf.descriptor.Descriptor(name='VariableDef', full_name='tensorflow.VariableDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='variable_name', full_name='tensorflow.VariableDef.variable_name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='initializer_name', full_name='tensorflow.VariableDef.initializer_name', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='snapshot_name', full_name='tensorflow.VariableDef.snapshot_name', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='save_slice_info_def', full_name='tensorflow.VariableDef.save_slice_info_def', index=3, number=4, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='is_resource', full_name='tensorflow.VariableDef.is_resource', index=4, number=5, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=57, serialized_end=222)
A:tensorflow.core.framework.variable_pb2._SAVESLICEINFODEF->google.protobuf.descriptor.Descriptor(name='SaveSliceInfoDef', full_name='tensorflow.SaveSliceInfoDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='full_name', full_name='tensorflow.SaveSliceInfoDef.full_name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='full_shape', full_name='tensorflow.SaveSliceInfoDef.full_shape', index=1, number=2, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='var_offset', full_name='tensorflow.SaveSliceInfoDef.var_offset', index=2, number=3, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='var_shape', full_name='tensorflow.SaveSliceInfoDef.var_shape', index=3, number=4, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=224, serialized_end=320)
A:tensorflow.core.framework.variable_pb2.VariableDef->google.protobuf.reflection.GeneratedProtocolMessageType('VariableDef', (_message.Message,), dict(DESCRIPTOR=_VARIABLEDEF, __module__='tensorflow.core.framework.variable_pb2'))
A:tensorflow.core.framework.variable_pb2.SaveSliceInfoDef->google.protobuf.reflection.GeneratedProtocolMessageType('SaveSliceInfoDef', (_message.Message,), dict(DESCRIPTOR=_SAVESLICEINFODEF, __module__='tensorflow.core.framework.variable_pb2'))
A:tensorflow.core.framework.variable_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x0eVariableProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/function_pb2.py----------------------------------------
A:tensorflow.core.framework.function_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.function_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/function.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n(tensorflow/core/framework/function.proto\x12\ntensorflow\x1a*tensorflow/core/framework/attr_value.proto\x1a(tensorflow/core/framework/node_def.proto\x1a&tensorflow/core/framework/op_def.proto"j\n\x12FunctionDefLibrary\x12)\n\x08function\x18\x01 \x03(\x0b2\x17.tensorflow.FunctionDef\x12)\n\x08gradient\x18\x02 \x03(\x0b2\x17.tensorflow.GradientDef"ª\x02\n\x0bFunctionDef\x12$\n\tsignature\x18\x01 \x01(\x0b2\x11.tensorflow.OpDef\x12/\n\x04attr\x18\x05 \x03(\x0b2!.tensorflow.FunctionDef.AttrEntry\x12%\n\x08node_def\x18\x03 \x03(\x0b2\x13.tensorflow.NodeDef\x12-\n\x03ret\x18\x04 \x03(\x0b2 .tensorflow.FunctionDef.RetEntry\x1aB\n\tAttrEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12$\n\x05value\x18\x02 \x01(\x0b2\x15.tensorflow.AttrValue:\x028\x01\x1a*\n\x08RetEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x028\x01";\n\x0bGradientDef\x12\x15\n\rfunction_name\x18\x01 \x01(\t\x12\x15\n\rgradient_func\x18\x02 \x01(\tB/\n\x18org.tensorflow.frameworkB\x0eFunctionProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_attr__value__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_node__def__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_op__def__pb2.DESCRIPTOR])
A:tensorflow.core.framework.function_pb2._FUNCTIONDEFLIBRARY->google.protobuf.descriptor.Descriptor(name='FunctionDefLibrary', full_name='tensorflow.FunctionDefLibrary', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='function', full_name='tensorflow.FunctionDefLibrary.function', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='gradient', full_name='tensorflow.FunctionDefLibrary.gradient', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=182, serialized_end=288)
A:tensorflow.core.framework.function_pb2._FUNCTIONDEF_ATTRENTRY->google.protobuf.descriptor.Descriptor(name='AttrEntry', full_name='tensorflow.FunctionDef.AttrEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.FunctionDef.AttrEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.FunctionDef.AttrEntry.value', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=479, serialized_end=545)
A:tensorflow.core.framework.function_pb2._FUNCTIONDEF_RETENTRY->google.protobuf.descriptor.Descriptor(name='RetEntry', full_name='tensorflow.FunctionDef.RetEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.FunctionDef.RetEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.FunctionDef.RetEntry.value', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=547, serialized_end=589)
A:tensorflow.core.framework.function_pb2._FUNCTIONDEF->google.protobuf.descriptor.Descriptor(name='FunctionDef', full_name='tensorflow.FunctionDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='signature', full_name='tensorflow.FunctionDef.signature', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='attr', full_name='tensorflow.FunctionDef.attr', index=1, number=5, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='node_def', full_name='tensorflow.FunctionDef.node_def', index=2, number=3, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='ret', full_name='tensorflow.FunctionDef.ret', index=3, number=4, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_FUNCTIONDEF_ATTRENTRY, _FUNCTIONDEF_RETENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=291, serialized_end=589)
A:tensorflow.core.framework.function_pb2._GRADIENTDEF->google.protobuf.descriptor.Descriptor(name='GradientDef', full_name='tensorflow.GradientDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='function_name', full_name='tensorflow.GradientDef.function_name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='gradient_func', full_name='tensorflow.GradientDef.gradient_func', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=591, serialized_end=650)
A:tensorflow.core.framework.function_pb2.FunctionDefLibrary->google.protobuf.reflection.GeneratedProtocolMessageType('FunctionDefLibrary', (_message.Message,), dict(DESCRIPTOR=_FUNCTIONDEFLIBRARY, __module__='tensorflow.core.framework.function_pb2'))
A:tensorflow.core.framework.function_pb2.FunctionDef->google.protobuf.reflection.GeneratedProtocolMessageType('FunctionDef', (_message.Message,), dict(AttrEntry=_reflection.GeneratedProtocolMessageType('AttrEntry', (_message.Message,), dict(DESCRIPTOR=_FUNCTIONDEF_ATTRENTRY, __module__='tensorflow.core.framework.function_pb2')), RetEntry=_reflection.GeneratedProtocolMessageType('RetEntry', (_message.Message,), dict(DESCRIPTOR=_FUNCTIONDEF_RETENTRY, __module__='tensorflow.core.framework.function_pb2')), DESCRIPTOR=_FUNCTIONDEF, __module__='tensorflow.core.framework.function_pb2'))
A:tensorflow.core.framework.function_pb2.GradientDef->google.protobuf.reflection.GeneratedProtocolMessageType('GradientDef', (_message.Message,), dict(DESCRIPTOR=_GRADIENTDEF, __module__='tensorflow.core.framework.function_pb2'))
A:tensorflow.core.framework.function_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x0eFunctionProtosP\x01ø\x01\x01'))
A:tensorflow.core.framework.function_pb2._FUNCTIONDEF_ATTRENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))
A:tensorflow.core.framework.function_pb2._FUNCTIONDEF_RETENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/step_stats_pb2.py----------------------------------------
A:tensorflow.core.framework.step_stats_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.step_stats_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/step_stats.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n*tensorflow/core/framework/step_stats.proto\x12\ntensorflow\x1a6tensorflow/core/framework/allocation_description.proto\x1a2tensorflow/core/framework/tensor_description.proto"j\n\x13AllocatorMemoryUsed\x12\x16\n\x0eallocator_name\x18\x01 \x01(\t\x12\x13\n\x0btotal_bytes\x18\x02 \x01(\x03\x12\x12\n\npeak_bytes\x18\x03 \x01(\x03\x12\x12\n\nlive_bytes\x18\x04 \x01(\x03"U\n\nNodeOutput\x12\x0c\n\x04slot\x18\x01 \x01(\x05\x129\n\x12tensor_description\x18\x03 \x01(\x0b2\x1d.tensorflow.TensorDescription"ï\x01\n\x0bMemoryStats\x12\x1d\n\x15host_temp_memory_size\x18\x01 \x01(\x03\x12\x1f\n\x17device_temp_memory_size\x18\x02 \x01(\x03\x12#\n\x1bhost_persistent_memory_size\x18\x03 \x01(\x03\x12%\n\x1ddevice_persistent_memory_size\x18\x04 \x01(\x03\x12(\n host_persistent_tensor_alloc_ids\x18\x05 \x03(\x03\x12*\n"device_persistent_tensor_alloc_ids\x18\x06 \x03(\x03"\x9b\x03\n\rNodeExecStats\x12\x11\n\tnode_name\x18\x01 \x01(\t\x12\x18\n\x10all_start_micros\x18\x02 \x01(\x03\x12\x1b\n\x13op_start_rel_micros\x18\x03 \x01(\x03\x12\x19\n\x11op_end_rel_micros\x18\x04 \x01(\x03\x12\x1a\n\x12all_end_rel_micros\x18\x05 \x01(\x03\x12/\n\x06memory\x18\x06 \x03(\x0b2\x1f.tensorflow.AllocatorMemoryUsed\x12&\n\x06output\x18\x07 \x03(\x0b2\x16.tensorflow.NodeOutput\x12\x16\n\x0etimeline_label\x18\x08 \x01(\t\x12\x18\n\x10scheduled_micros\x18\t \x01(\x03\x12\x11\n\tthread_id\x18\n \x01(\r\x12<\n\x11referenced_tensor\x18\x0b \x03(\x0b2!.tensorflow.AllocationDescription\x12-\n\x0cmemory_stats\x18\x0c \x01(\x0b2\x17.tensorflow.MemoryStats"P\n\x0fDeviceStepStats\x12\x0e\n\x06device\x18\x01 \x01(\t\x12-\n\nnode_stats\x18\x02 \x03(\x0b2\x19.tensorflow.NodeExecStats";\n\tStepStats\x12.\n\tdev_stats\x18\x01 \x03(\x0b2\x1b.tensorflow.DeviceStepStatsB0\n\x18org.tensorflow.frameworkB\x0fStepStatsProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_allocation__description__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_tensor__description__pb2.DESCRIPTOR])
A:tensorflow.core.framework.step_stats_pb2._ALLOCATORMEMORYUSED->google.protobuf.descriptor.Descriptor(name='AllocatorMemoryUsed', full_name='tensorflow.AllocatorMemoryUsed', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='allocator_name', full_name='tensorflow.AllocatorMemoryUsed.allocator_name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='total_bytes', full_name='tensorflow.AllocatorMemoryUsed.total_bytes', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='peak_bytes', full_name='tensorflow.AllocatorMemoryUsed.peak_bytes', index=2, number=3, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='live_bytes', full_name='tensorflow.AllocatorMemoryUsed.live_bytes', index=3, number=4, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=166, serialized_end=272)
A:tensorflow.core.framework.step_stats_pb2._NODEOUTPUT->google.protobuf.descriptor.Descriptor(name='NodeOutput', full_name='tensorflow.NodeOutput', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='slot', full_name='tensorflow.NodeOutput.slot', index=0, number=1, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tensor_description', full_name='tensorflow.NodeOutput.tensor_description', index=1, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=274, serialized_end=359)
A:tensorflow.core.framework.step_stats_pb2._MEMORYSTATS->google.protobuf.descriptor.Descriptor(name='MemoryStats', full_name='tensorflow.MemoryStats', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='host_temp_memory_size', full_name='tensorflow.MemoryStats.host_temp_memory_size', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='device_temp_memory_size', full_name='tensorflow.MemoryStats.device_temp_memory_size', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='host_persistent_memory_size', full_name='tensorflow.MemoryStats.host_persistent_memory_size', index=2, number=3, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='device_persistent_memory_size', full_name='tensorflow.MemoryStats.device_persistent_memory_size', index=3, number=4, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='host_persistent_tensor_alloc_ids', full_name='tensorflow.MemoryStats.host_persistent_tensor_alloc_ids', index=4, number=5, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='device_persistent_tensor_alloc_ids', full_name='tensorflow.MemoryStats.device_persistent_tensor_alloc_ids', index=5, number=6, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=362, serialized_end=601)
A:tensorflow.core.framework.step_stats_pb2._NODEEXECSTATS->google.protobuf.descriptor.Descriptor(name='NodeExecStats', full_name='tensorflow.NodeExecStats', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='node_name', full_name='tensorflow.NodeExecStats.node_name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='all_start_micros', full_name='tensorflow.NodeExecStats.all_start_micros', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='op_start_rel_micros', full_name='tensorflow.NodeExecStats.op_start_rel_micros', index=2, number=3, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='op_end_rel_micros', full_name='tensorflow.NodeExecStats.op_end_rel_micros', index=3, number=4, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='all_end_rel_micros', full_name='tensorflow.NodeExecStats.all_end_rel_micros', index=4, number=5, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='memory', full_name='tensorflow.NodeExecStats.memory', index=5, number=6, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='output', full_name='tensorflow.NodeExecStats.output', index=6, number=7, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='timeline_label', full_name='tensorflow.NodeExecStats.timeline_label', index=7, number=8, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='scheduled_micros', full_name='tensorflow.NodeExecStats.scheduled_micros', index=8, number=9, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='thread_id', full_name='tensorflow.NodeExecStats.thread_id', index=9, number=10, type=13, cpp_type=3, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='referenced_tensor', full_name='tensorflow.NodeExecStats.referenced_tensor', index=10, number=11, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='memory_stats', full_name='tensorflow.NodeExecStats.memory_stats', index=11, number=12, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=604, serialized_end=1015)
A:tensorflow.core.framework.step_stats_pb2._DEVICESTEPSTATS->google.protobuf.descriptor.Descriptor(name='DeviceStepStats', full_name='tensorflow.DeviceStepStats', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='device', full_name='tensorflow.DeviceStepStats.device', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='node_stats', full_name='tensorflow.DeviceStepStats.node_stats', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1017, serialized_end=1097)
A:tensorflow.core.framework.step_stats_pb2._STEPSTATS->google.protobuf.descriptor.Descriptor(name='StepStats', full_name='tensorflow.StepStats', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='dev_stats', full_name='tensorflow.StepStats.dev_stats', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1099, serialized_end=1158)
A:tensorflow.core.framework.step_stats_pb2.AllocatorMemoryUsed->google.protobuf.reflection.GeneratedProtocolMessageType('AllocatorMemoryUsed', (_message.Message,), dict(DESCRIPTOR=_ALLOCATORMEMORYUSED, __module__='tensorflow.core.framework.step_stats_pb2'))
A:tensorflow.core.framework.step_stats_pb2.NodeOutput->google.protobuf.reflection.GeneratedProtocolMessageType('NodeOutput', (_message.Message,), dict(DESCRIPTOR=_NODEOUTPUT, __module__='tensorflow.core.framework.step_stats_pb2'))
A:tensorflow.core.framework.step_stats_pb2.MemoryStats->google.protobuf.reflection.GeneratedProtocolMessageType('MemoryStats', (_message.Message,), dict(DESCRIPTOR=_MEMORYSTATS, __module__='tensorflow.core.framework.step_stats_pb2'))
A:tensorflow.core.framework.step_stats_pb2.NodeExecStats->google.protobuf.reflection.GeneratedProtocolMessageType('NodeExecStats', (_message.Message,), dict(DESCRIPTOR=_NODEEXECSTATS, __module__='tensorflow.core.framework.step_stats_pb2'))
A:tensorflow.core.framework.step_stats_pb2.DeviceStepStats->google.protobuf.reflection.GeneratedProtocolMessageType('DeviceStepStats', (_message.Message,), dict(DESCRIPTOR=_DEVICESTEPSTATS, __module__='tensorflow.core.framework.step_stats_pb2'))
A:tensorflow.core.framework.step_stats_pb2.StepStats->google.protobuf.reflection.GeneratedProtocolMessageType('StepStats', (_message.Message,), dict(DESCRIPTOR=_STEPSTATS, __module__='tensorflow.core.framework.step_stats_pb2'))
A:tensorflow.core.framework.step_stats_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x0fStepStatsProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/resource_handle_pb2.py----------------------------------------
A:tensorflow.core.framework.resource_handle_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.resource_handle_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/resource_handle.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n/tensorflow/core/framework/resource_handle.proto\x12\ntensorflow"m\n\x0eResourceHandle\x12\x0e\n\x06device\x18\x01 \x01(\t\x12\x11\n\tcontainer\x18\x02 \x01(\t\x12\x0c\n\x04name\x18\x03 \x01(\t\x12\x11\n\thash_code\x18\x04 \x01(\x04\x12\x17\n\x0fmaybe_type_name\x18\x05 \x01(\tB4\n\x18org.tensorflow.frameworkB\x13ResourceHandleProtoP\x01ø\x01\x01b\x06proto3'))
A:tensorflow.core.framework.resource_handle_pb2._RESOURCEHANDLE->google.protobuf.descriptor.Descriptor(name='ResourceHandle', full_name='tensorflow.ResourceHandle', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='device', full_name='tensorflow.ResourceHandle.device', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='container', full_name='tensorflow.ResourceHandle.container', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='name', full_name='tensorflow.ResourceHandle.name', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='hash_code', full_name='tensorflow.ResourceHandle.hash_code', index=3, number=4, type=4, cpp_type=4, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='maybe_type_name', full_name='tensorflow.ResourceHandle.maybe_type_name', index=4, number=5, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=63, serialized_end=172)
A:tensorflow.core.framework.resource_handle_pb2.ResourceHandle->google.protobuf.reflection.GeneratedProtocolMessageType('ResourceHandle', (_message.Message,), dict(DESCRIPTOR=_RESOURCEHANDLE, __module__='tensorflow.core.framework.resource_handle_pb2'))
A:tensorflow.core.framework.resource_handle_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x13ResourceHandleProtoP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/graph_transfer_info_pb2.py----------------------------------------
A:tensorflow.core.framework.graph_transfer_info_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.graph_transfer_info_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/graph_transfer_info.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n3tensorflow/core/framework/graph_transfer_info.proto\x12\ntensorflow\x1a%tensorflow/core/framework/types.proto"«\t\n\x11GraphTransferInfo\x129\n\tnode_info\x18\x01 \x03(\x0b2&.tensorflow.GraphTransferInfo.NodeInfo\x12D\n\x0fconst_node_info\x18\x02 \x03(\x0b2+.tensorflow.GraphTransferInfo.ConstNodeInfo\x12D\n\x0fnode_input_info\x18\x03 \x03(\x0b2+.tensorflow.GraphTransferInfo.NodeInputInfo\x12F\n\x10node_output_info\x18\x04 \x03(\x0b2,.tensorflow.GraphTransferInfo.NodeOutputInfo\x12O\n\x15graph_input_node_info\x18\x05 \x03(\x0b20.tensorflow.GraphTransferInfo.GraphInputNodeInfo\x12Q\n\x16graph_output_node_info\x18\x06 \x03(\x0b21.tensorflow.GraphTransferInfo.GraphOutputNodeInfo\x12>\n\x0bdestination\x18\x07 \x01(\x0e2).tensorflow.GraphTransferInfo.Destination\x1a1\n\tNodeInput\x12\x0f\n\x07node_id\x18\x01 \x01(\x05\x12\x13\n\x0boutput_port\x18\x02 \x01(\x05\x1a\x8e\x01\n\x08NodeInfo\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0f\n\x07node_id\x18\x02 \x01(\x05\x12\x11\n\ttype_name\x18\x03 \x01(\t\x12\x11\n\tsoc_op_id\x18\x04 \x01(\x05\x12\x12\n\npadding_id\x18\x05 \x01(\x05\x12\x13\n\x0binput_count\x18\x06 \x01(\x05\x12\x14\n\x0coutput_count\x18\x07 \x01(\x05\x1ap\n\rConstNodeInfo\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0f\n\x07node_id\x18\x02 \x01(\x05\x12\r\n\x05shape\x18\x03 \x03(\x03\x12\x0c\n\x04data\x18\x04 \x01(\x0c\x12#\n\x05dtype\x18\x05 \x01(\x0e2\x14.tensorflow.DataType\x1a]\n\rNodeInputInfo\x12\x0f\n\x07node_id\x18\x01 \x01(\x05\x12;\n\nnode_input\x18\x02 \x03(\x0b2\'.tensorflow.GraphTransferInfo.NodeInput\x1a8\n\x0eNodeOutputInfo\x12\x0f\n\x07node_id\x18\x01 \x01(\x05\x12\x15\n\rmax_byte_size\x18\x02 \x03(\x05\x1aV\n\x12GraphInputNodeInfo\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05shape\x18\x02 \x03(\x03\x12#\n\x05dtype\x18\x03 \x01(\x0e2\x14.tensorflow.DataType\x1aW\n\x13GraphOutputNodeInfo\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05shape\x18\x02 \x03(\x03\x12#\n\x05dtype\x18\x03 \x01(\x0e2\x14.tensorflow.DataType"#\n\x0bDestination\x12\x07\n\x03NOP\x10\x00\x12\x0b\n\x07HEXAGON\x10\x01B7\n\x18org.tensorflow.frameworkB\x16GraphTransferInfoProtoP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_types__pb2.DESCRIPTOR])
A:tensorflow.core.framework.graph_transfer_info_pb2._GRAPHTRANSFERINFO_DESTINATION->google.protobuf.descriptor.EnumDescriptor(name='Destination', full_name='tensorflow.GraphTransferInfo.Destination', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='NOP', index=0, number=0, options=None, type=None), _descriptor.EnumValueDescriptor(name='HEXAGON', index=1, number=1, options=None, type=None)], containing_type=None, options=None, serialized_start=1267, serialized_end=1302)
A:tensorflow.core.framework.graph_transfer_info_pb2._GRAPHTRANSFERINFO_NODEINPUT->google.protobuf.descriptor.Descriptor(name='NodeInput', full_name='tensorflow.GraphTransferInfo.NodeInput', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='node_id', full_name='tensorflow.GraphTransferInfo.NodeInput.node_id', index=0, number=1, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='output_port', full_name='tensorflow.GraphTransferInfo.NodeInput.output_port', index=1, number=2, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=627, serialized_end=676)
A:tensorflow.core.framework.graph_transfer_info_pb2._GRAPHTRANSFERINFO_NODEINFO->google.protobuf.descriptor.Descriptor(name='NodeInfo', full_name='tensorflow.GraphTransferInfo.NodeInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.GraphTransferInfo.NodeInfo.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='node_id', full_name='tensorflow.GraphTransferInfo.NodeInfo.node_id', index=1, number=2, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='type_name', full_name='tensorflow.GraphTransferInfo.NodeInfo.type_name', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='soc_op_id', full_name='tensorflow.GraphTransferInfo.NodeInfo.soc_op_id', index=3, number=4, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='padding_id', full_name='tensorflow.GraphTransferInfo.NodeInfo.padding_id', index=4, number=5, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='input_count', full_name='tensorflow.GraphTransferInfo.NodeInfo.input_count', index=5, number=6, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='output_count', full_name='tensorflow.GraphTransferInfo.NodeInfo.output_count', index=6, number=7, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=679, serialized_end=821)
A:tensorflow.core.framework.graph_transfer_info_pb2._GRAPHTRANSFERINFO_CONSTNODEINFO->google.protobuf.descriptor.Descriptor(name='ConstNodeInfo', full_name='tensorflow.GraphTransferInfo.ConstNodeInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.GraphTransferInfo.ConstNodeInfo.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='node_id', full_name='tensorflow.GraphTransferInfo.ConstNodeInfo.node_id', index=1, number=2, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='shape', full_name='tensorflow.GraphTransferInfo.ConstNodeInfo.shape', index=2, number=3, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='data', full_name='tensorflow.GraphTransferInfo.ConstNodeInfo.data', index=3, number=4, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='dtype', full_name='tensorflow.GraphTransferInfo.ConstNodeInfo.dtype', index=4, number=5, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=823, serialized_end=935)
A:tensorflow.core.framework.graph_transfer_info_pb2._GRAPHTRANSFERINFO_NODEINPUTINFO->google.protobuf.descriptor.Descriptor(name='NodeInputInfo', full_name='tensorflow.GraphTransferInfo.NodeInputInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='node_id', full_name='tensorflow.GraphTransferInfo.NodeInputInfo.node_id', index=0, number=1, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='node_input', full_name='tensorflow.GraphTransferInfo.NodeInputInfo.node_input', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=937, serialized_end=1030)
A:tensorflow.core.framework.graph_transfer_info_pb2._GRAPHTRANSFERINFO_NODEOUTPUTINFO->google.protobuf.descriptor.Descriptor(name='NodeOutputInfo', full_name='tensorflow.GraphTransferInfo.NodeOutputInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='node_id', full_name='tensorflow.GraphTransferInfo.NodeOutputInfo.node_id', index=0, number=1, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='max_byte_size', full_name='tensorflow.GraphTransferInfo.NodeOutputInfo.max_byte_size', index=1, number=2, type=5, cpp_type=1, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1032, serialized_end=1088)
A:tensorflow.core.framework.graph_transfer_info_pb2._GRAPHTRANSFERINFO_GRAPHINPUTNODEINFO->google.protobuf.descriptor.Descriptor(name='GraphInputNodeInfo', full_name='tensorflow.GraphTransferInfo.GraphInputNodeInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.GraphTransferInfo.GraphInputNodeInfo.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='shape', full_name='tensorflow.GraphTransferInfo.GraphInputNodeInfo.shape', index=1, number=2, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='dtype', full_name='tensorflow.GraphTransferInfo.GraphInputNodeInfo.dtype', index=2, number=3, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1090, serialized_end=1176)
A:tensorflow.core.framework.graph_transfer_info_pb2._GRAPHTRANSFERINFO_GRAPHOUTPUTNODEINFO->google.protobuf.descriptor.Descriptor(name='GraphOutputNodeInfo', full_name='tensorflow.GraphTransferInfo.GraphOutputNodeInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='shape', full_name='tensorflow.GraphTransferInfo.GraphOutputNodeInfo.shape', index=1, number=2, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='dtype', full_name='tensorflow.GraphTransferInfo.GraphOutputNodeInfo.dtype', index=2, number=3, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1178, serialized_end=1265)
A:tensorflow.core.framework.graph_transfer_info_pb2._GRAPHTRANSFERINFO->google.protobuf.descriptor.Descriptor(name='GraphTransferInfo', full_name='tensorflow.GraphTransferInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='node_info', full_name='tensorflow.GraphTransferInfo.node_info', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='const_node_info', full_name='tensorflow.GraphTransferInfo.const_node_info', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='node_input_info', full_name='tensorflow.GraphTransferInfo.node_input_info', index=2, number=3, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='node_output_info', full_name='tensorflow.GraphTransferInfo.node_output_info', index=3, number=4, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='graph_input_node_info', full_name='tensorflow.GraphTransferInfo.graph_input_node_info', index=4, number=5, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='graph_output_node_info', full_name='tensorflow.GraphTransferInfo.graph_output_node_info', index=5, number=6, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='destination', full_name='tensorflow.GraphTransferInfo.destination', index=6, number=7, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_GRAPHTRANSFERINFO_NODEINPUT, _GRAPHTRANSFERINFO_NODEINFO, _GRAPHTRANSFERINFO_CONSTNODEINFO, _GRAPHTRANSFERINFO_NODEINPUTINFO, _GRAPHTRANSFERINFO_NODEOUTPUTINFO, _GRAPHTRANSFERINFO_GRAPHINPUTNODEINFO, _GRAPHTRANSFERINFO_GRAPHOUTPUTNODEINFO], enum_types=[_GRAPHTRANSFERINFO_DESTINATION], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=107, serialized_end=1302)
A:tensorflow.core.framework.graph_transfer_info_pb2.GraphTransferInfo->google.protobuf.reflection.GeneratedProtocolMessageType('GraphTransferInfo', (_message.Message,), dict(NodeInput=_reflection.GeneratedProtocolMessageType('NodeInput', (_message.Message,), dict(DESCRIPTOR=_GRAPHTRANSFERINFO_NODEINPUT, __module__='tensorflow.core.framework.graph_transfer_info_pb2')), NodeInfo=_reflection.GeneratedProtocolMessageType('NodeInfo', (_message.Message,), dict(DESCRIPTOR=_GRAPHTRANSFERINFO_NODEINFO, __module__='tensorflow.core.framework.graph_transfer_info_pb2')), ConstNodeInfo=_reflection.GeneratedProtocolMessageType('ConstNodeInfo', (_message.Message,), dict(DESCRIPTOR=_GRAPHTRANSFERINFO_CONSTNODEINFO, __module__='tensorflow.core.framework.graph_transfer_info_pb2')), NodeInputInfo=_reflection.GeneratedProtocolMessageType('NodeInputInfo', (_message.Message,), dict(DESCRIPTOR=_GRAPHTRANSFERINFO_NODEINPUTINFO, __module__='tensorflow.core.framework.graph_transfer_info_pb2')), NodeOutputInfo=_reflection.GeneratedProtocolMessageType('NodeOutputInfo', (_message.Message,), dict(DESCRIPTOR=_GRAPHTRANSFERINFO_NODEOUTPUTINFO, __module__='tensorflow.core.framework.graph_transfer_info_pb2')), GraphInputNodeInfo=_reflection.GeneratedProtocolMessageType('GraphInputNodeInfo', (_message.Message,), dict(DESCRIPTOR=_GRAPHTRANSFERINFO_GRAPHINPUTNODEINFO, __module__='tensorflow.core.framework.graph_transfer_info_pb2')), GraphOutputNodeInfo=_reflection.GeneratedProtocolMessageType('GraphOutputNodeInfo', (_message.Message,), dict(DESCRIPTOR=_GRAPHTRANSFERINFO_GRAPHOUTPUTNODEINFO, __module__='tensorflow.core.framework.graph_transfer_info_pb2')), DESCRIPTOR=_GRAPHTRANSFERINFO, __module__='tensorflow.core.framework.graph_transfer_info_pb2'))
A:tensorflow.core.framework.graph_transfer_info_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x16GraphTransferInfoProtoP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/versions_pb2.py----------------------------------------
A:tensorflow.core.framework.versions_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.versions_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/versions.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n(tensorflow/core/framework/versions.proto\x12\ntensorflow"K\n\nVersionDef\x12\x10\n\x08producer\x18\x01 \x01(\x05\x12\x14\n\x0cmin_consumer\x18\x02 \x01(\x05\x12\x15\n\rbad_consumers\x18\x03 \x03(\x05B/\n\x18org.tensorflow.frameworkB\x0eVersionsProtosP\x01ø\x01\x01b\x06proto3'))
A:tensorflow.core.framework.versions_pb2._VERSIONDEF->google.protobuf.descriptor.Descriptor(name='VersionDef', full_name='tensorflow.VersionDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='producer', full_name='tensorflow.VersionDef.producer', index=0, number=1, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='min_consumer', full_name='tensorflow.VersionDef.min_consumer', index=1, number=2, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='bad_consumers', full_name='tensorflow.VersionDef.bad_consumers', index=2, number=3, type=5, cpp_type=1, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=56, serialized_end=131)
A:tensorflow.core.framework.versions_pb2.VersionDef->google.protobuf.reflection.GeneratedProtocolMessageType('VersionDef', (_message.Message,), dict(DESCRIPTOR=_VERSIONDEF, __module__='tensorflow.core.framework.versions_pb2'))
A:tensorflow.core.framework.versions_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x0eVersionsProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/cost_graph_pb2.py----------------------------------------
A:tensorflow.core.framework.cost_graph_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.cost_graph_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/cost_graph.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n*tensorflow/core/framework/cost_graph.proto\x12\ntensorflow\x1a,tensorflow/core/framework/tensor_shape.proto\x1a%tensorflow/core/framework/types.proto"Å\x05\n\x0cCostGraphDef\x12+\n\x04node\x18\x01 \x03(\x0b2\x1d.tensorflow.CostGraphDef.Node\x1a\x87\x05\n\x04Node\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0e\n\x06device\x18\x02 \x01(\t\x12\n\n\x02id\x18\x03 \x01(\x05\x12;\n\ninput_info\x18\x04 \x03(\x0b2\'.tensorflow.CostGraphDef.Node.InputInfo\x12=\n\x0boutput_info\x18\x05 \x03(\x0b2(.tensorflow.CostGraphDef.Node.OutputInfo\x12\x1d\n\x15temporary_memory_size\x18\x06 \x01(\x03\x12\x1d\n\x15host_temp_memory_size\x18\n \x01(\x03\x12\x1f\n\x17device_temp_memory_size\x18\x0b \x01(\x03\x12#\n\x1bhost_persistent_memory_size\x18\x0c \x01(\x03\x12%\n\x1ddevice_persistent_memory_size\x18\x10 \x01(\x03\x12\x14\n\x0ccompute_cost\x18\t \x01(\x03\x12\x14\n\x0ccompute_time\x18\x0e \x01(\x03\x12\x13\n\x0bmemory_time\x18\x0f \x01(\x03\x12\x10\n\x08is_final\x18\x07 \x01(\x08\x12\x15\n\rcontrol_input\x18\x08 \x03(\x05\x1a;\n\tInputInfo\x12\x16\n\x0epreceding_node\x18\x01 \x01(\x05\x12\x16\n\x0epreceding_port\x18\x02 \x01(\x05\x1a\x86\x01\n\nOutputInfo\x12\x0c\n\x04size\x18\x01 \x01(\x03\x12\x18\n\x10alias_input_port\x18\x02 \x01(\x03\x12+\n\x05shape\x18\x03 \x01(\x0b2\x1c.tensorflow.TensorShapeProto\x12#\n\x05dtype\x18\x04 \x01(\x0e2\x14.tensorflow.DataTypeB0\n\x18org.tensorflow.frameworkB\x0fCostGraphProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_tensor__shape__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_types__pb2.DESCRIPTOR])
A:tensorflow.core.framework.cost_graph_pb2._COSTGRAPHDEF_NODE_INPUTINFO->google.protobuf.descriptor.Descriptor(name='InputInfo', full_name='tensorflow.CostGraphDef.Node.InputInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='preceding_node', full_name='tensorflow.CostGraphDef.Node.InputInfo.preceding_node', index=0, number=1, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='preceding_port', full_name='tensorflow.CostGraphDef.Node.InputInfo.preceding_port', index=1, number=2, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=657, serialized_end=716)
A:tensorflow.core.framework.cost_graph_pb2._COSTGRAPHDEF_NODE_OUTPUTINFO->google.protobuf.descriptor.Descriptor(name='OutputInfo', full_name='tensorflow.CostGraphDef.Node.OutputInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='size', full_name='tensorflow.CostGraphDef.Node.OutputInfo.size', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='alias_input_port', full_name='tensorflow.CostGraphDef.Node.OutputInfo.alias_input_port', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='shape', full_name='tensorflow.CostGraphDef.Node.OutputInfo.shape', index=2, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='dtype', full_name='tensorflow.CostGraphDef.Node.OutputInfo.dtype', index=3, number=4, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=719, serialized_end=853)
A:tensorflow.core.framework.cost_graph_pb2._COSTGRAPHDEF_NODE->google.protobuf.descriptor.Descriptor(name='Node', full_name='tensorflow.CostGraphDef.Node', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.CostGraphDef.Node.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='device', full_name='tensorflow.CostGraphDef.Node.device', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='id', full_name='tensorflow.CostGraphDef.Node.id', index=2, number=3, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='input_info', full_name='tensorflow.CostGraphDef.Node.input_info', index=3, number=4, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='output_info', full_name='tensorflow.CostGraphDef.Node.output_info', index=4, number=5, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='temporary_memory_size', full_name='tensorflow.CostGraphDef.Node.temporary_memory_size', index=5, number=6, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='host_temp_memory_size', full_name='tensorflow.CostGraphDef.Node.host_temp_memory_size', index=6, number=10, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='device_temp_memory_size', full_name='tensorflow.CostGraphDef.Node.device_temp_memory_size', index=7, number=11, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='host_persistent_memory_size', full_name='tensorflow.CostGraphDef.Node.host_persistent_memory_size', index=8, number=12, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='device_persistent_memory_size', full_name='tensorflow.CostGraphDef.Node.device_persistent_memory_size', index=9, number=16, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='compute_cost', full_name='tensorflow.CostGraphDef.Node.compute_cost', index=10, number=9, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='compute_time', full_name='tensorflow.CostGraphDef.Node.compute_time', index=11, number=14, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='memory_time', full_name='tensorflow.CostGraphDef.Node.memory_time', index=12, number=15, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='is_final', full_name='tensorflow.CostGraphDef.Node.is_final', index=13, number=7, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='control_input', full_name='tensorflow.CostGraphDef.Node.control_input', index=14, number=8, type=5, cpp_type=1, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_COSTGRAPHDEF_NODE_INPUTINFO, _COSTGRAPHDEF_NODE_OUTPUTINFO], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=206, serialized_end=853)
A:tensorflow.core.framework.cost_graph_pb2._COSTGRAPHDEF->google.protobuf.descriptor.Descriptor(name='CostGraphDef', full_name='tensorflow.CostGraphDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='node', full_name='tensorflow.CostGraphDef.node', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_COSTGRAPHDEF_NODE], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=144, serialized_end=853)
A:tensorflow.core.framework.cost_graph_pb2.CostGraphDef->google.protobuf.reflection.GeneratedProtocolMessageType('CostGraphDef', (_message.Message,), dict(Node=_reflection.GeneratedProtocolMessageType('Node', (_message.Message,), dict(InputInfo=_reflection.GeneratedProtocolMessageType('InputInfo', (_message.Message,), dict(DESCRIPTOR=_COSTGRAPHDEF_NODE_INPUTINFO, __module__='tensorflow.core.framework.cost_graph_pb2')), OutputInfo=_reflection.GeneratedProtocolMessageType('OutputInfo', (_message.Message,), dict(DESCRIPTOR=_COSTGRAPHDEF_NODE_OUTPUTINFO, __module__='tensorflow.core.framework.cost_graph_pb2')), DESCRIPTOR=_COSTGRAPHDEF_NODE, __module__='tensorflow.core.framework.cost_graph_pb2')), DESCRIPTOR=_COSTGRAPHDEF, __module__='tensorflow.core.framework.cost_graph_pb2'))
A:tensorflow.core.framework.cost_graph_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x0fCostGraphProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/tensor_shape_pb2.py----------------------------------------
A:tensorflow.core.framework.tensor_shape_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.tensor_shape_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/tensor_shape.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n,tensorflow/core/framework/tensor_shape.proto\x12\ntensorflow"z\n\x10TensorShapeProto\x12-\n\x03dim\x18\x02 \x03(\x0b2 .tensorflow.TensorShapeProto.Dim\x12\x14\n\x0cunknown_rank\x18\x03 \x01(\x08\x1a!\n\x03Dim\x12\x0c\n\x04size\x18\x01 \x01(\x03\x12\x0c\n\x04name\x18\x02 \x01(\tB2\n\x18org.tensorflow.frameworkB\x11TensorShapeProtosP\x01ø\x01\x01b\x06proto3'))
A:tensorflow.core.framework.tensor_shape_pb2._TENSORSHAPEPROTO_DIM->google.protobuf.descriptor.Descriptor(name='Dim', full_name='tensorflow.TensorShapeProto.Dim', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='size', full_name='tensorflow.TensorShapeProto.Dim.size', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='name', full_name='tensorflow.TensorShapeProto.Dim.name', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=149, serialized_end=182)
A:tensorflow.core.framework.tensor_shape_pb2._TENSORSHAPEPROTO->google.protobuf.descriptor.Descriptor(name='TensorShapeProto', full_name='tensorflow.TensorShapeProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='dim', full_name='tensorflow.TensorShapeProto.dim', index=0, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='unknown_rank', full_name='tensorflow.TensorShapeProto.unknown_rank', index=1, number=3, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_TENSORSHAPEPROTO_DIM], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=60, serialized_end=182)
A:tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto->google.protobuf.reflection.GeneratedProtocolMessageType('TensorShapeProto', (_message.Message,), dict(Dim=_reflection.GeneratedProtocolMessageType('Dim', (_message.Message,), dict(DESCRIPTOR=_TENSORSHAPEPROTO_DIM, __module__='tensorflow.core.framework.tensor_shape_pb2')), DESCRIPTOR=_TENSORSHAPEPROTO, __module__='tensorflow.core.framework.tensor_shape_pb2'))
A:tensorflow.core.framework.tensor_shape_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x11TensorShapeProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/graph_pb2.py----------------------------------------
A:tensorflow.core.framework.graph_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.graph_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/graph.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n%tensorflow/core/framework/graph.proto\x12\ntensorflow\x1a(tensorflow/core/framework/node_def.proto\x1a(tensorflow/core/framework/function.proto\x1a(tensorflow/core/framework/versions.proto"\x9d\x01\n\x08GraphDef\x12!\n\x04node\x18\x01 \x03(\x0b2\x13.tensorflow.NodeDef\x12(\n\x08versions\x18\x04 \x01(\x0b2\x16.tensorflow.VersionDef\x12\x13\n\x07version\x18\x03 \x01(\x05B\x02\x18\x01\x12/\n\x07library\x18\x02 \x01(\x0b2\x1e.tensorflow.FunctionDefLibraryB,\n\x18org.tensorflow.frameworkB\x0bGraphProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_node__def__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_function__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_versions__pb2.DESCRIPTOR])
A:tensorflow.core.framework.graph_pb2._GRAPHDEF->google.protobuf.descriptor.Descriptor(name='GraphDef', full_name='tensorflow.GraphDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='node', full_name='tensorflow.GraphDef.node', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='versions', full_name='tensorflow.GraphDef.versions', index=1, number=4, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='version', full_name='tensorflow.GraphDef.version', index=2, number=3, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x18\x01'))), _descriptor.FieldDescriptor(name='library', full_name='tensorflow.GraphDef.library', index=3, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=180, serialized_end=337)
A:tensorflow.core.framework.graph_pb2.GraphDef->google.protobuf.reflection.GeneratedProtocolMessageType('GraphDef', (_message.Message,), dict(DESCRIPTOR=_GRAPHDEF, __module__='tensorflow.core.framework.graph_pb2'))
A:tensorflow.core.framework.graph_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x0bGraphProtosP\x01ø\x01\x01'))
A:tensorflow.core.framework.graph_pb2._GRAPHDEF.fields_by_name['version']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x18\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/allocation_description_pb2.py----------------------------------------
A:tensorflow.core.framework.allocation_description_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.allocation_description_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/allocation_description.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n6tensorflow/core/framework/allocation_description.proto\x12\ntensorflow"£\x01\n\x15AllocationDescription\x12\x17\n\x0frequested_bytes\x18\x01 \x01(\x03\x12\x17\n\x0fallocated_bytes\x18\x02 \x01(\x03\x12\x16\n\x0eallocator_name\x18\x03 \x01(\t\x12\x15\n\rallocation_id\x18\x04 \x01(\x03\x12\x1c\n\x14has_single_reference\x18\x05 \x01(\x08\x12\x0b\n\x03ptr\x18\x06 \x01(\x04B<\n\x18org.tensorflow.frameworkB\x1bAllocationDescriptionProtosP\x01ø\x01\x01b\x06proto3'))
A:tensorflow.core.framework.allocation_description_pb2._ALLOCATIONDESCRIPTION->google.protobuf.descriptor.Descriptor(name='AllocationDescription', full_name='tensorflow.AllocationDescription', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='requested_bytes', full_name='tensorflow.AllocationDescription.requested_bytes', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='allocated_bytes', full_name='tensorflow.AllocationDescription.allocated_bytes', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='allocator_name', full_name='tensorflow.AllocationDescription.allocator_name', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='allocation_id', full_name='tensorflow.AllocationDescription.allocation_id', index=3, number=4, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='has_single_reference', full_name='tensorflow.AllocationDescription.has_single_reference', index=4, number=5, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='ptr', full_name='tensorflow.AllocationDescription.ptr', index=5, number=6, type=4, cpp_type=4, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=71, serialized_end=234)
A:tensorflow.core.framework.allocation_description_pb2.AllocationDescription->google.protobuf.reflection.GeneratedProtocolMessageType('AllocationDescription', (_message.Message,), dict(DESCRIPTOR=_ALLOCATIONDESCRIPTION, __module__='tensorflow.core.framework.allocation_description_pb2'))
A:tensorflow.core.framework.allocation_description_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x1bAllocationDescriptionProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/kernel_def_pb2.py----------------------------------------
A:tensorflow.core.framework.kernel_def_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.kernel_def_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/kernel_def.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n*tensorflow/core/framework/kernel_def.proto\x12\ntensorflow\x1a*tensorflow/core/framework/attr_value.proto"Ý\x01\n\tKernelDef\x12\n\n\x02op\x18\x01 \x01(\t\x12\x13\n\x0bdevice_type\x18\x02 \x01(\t\x128\n\nconstraint\x18\x03 \x03(\x0b2$.tensorflow.KernelDef.AttrConstraint\x12\x17\n\x0fhost_memory_arg\x18\x04 \x03(\t\x12\r\n\x05label\x18\x05 \x01(\t\x1aM\n\x0eAttrConstraint\x12\x0c\n\x04name\x18\x01 \x01(\t\x12-\n\x0eallowed_values\x18\x02 \x01(\x0b2\x15.tensorflow.AttrValueB0\n\x18org.tensorflow.frameworkB\x0fKernelDefProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_attr__value__pb2.DESCRIPTOR])
A:tensorflow.core.framework.kernel_def_pb2._KERNELDEF_ATTRCONSTRAINT->google.protobuf.descriptor.Descriptor(name='AttrConstraint', full_name='tensorflow.KernelDef.AttrConstraint', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.KernelDef.AttrConstraint.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='allowed_values', full_name='tensorflow.KernelDef.AttrConstraint.allowed_values', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=247, serialized_end=324)
A:tensorflow.core.framework.kernel_def_pb2._KERNELDEF->google.protobuf.descriptor.Descriptor(name='KernelDef', full_name='tensorflow.KernelDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='op', full_name='tensorflow.KernelDef.op', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='device_type', full_name='tensorflow.KernelDef.device_type', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='constraint', full_name='tensorflow.KernelDef.constraint', index=2, number=3, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='host_memory_arg', full_name='tensorflow.KernelDef.host_memory_arg', index=3, number=4, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='label', full_name='tensorflow.KernelDef.label', index=4, number=5, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_KERNELDEF_ATTRCONSTRAINT], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=103, serialized_end=324)
A:tensorflow.core.framework.kernel_def_pb2.KernelDef->google.protobuf.reflection.GeneratedProtocolMessageType('KernelDef', (_message.Message,), dict(AttrConstraint=_reflection.GeneratedProtocolMessageType('AttrConstraint', (_message.Message,), dict(DESCRIPTOR=_KERNELDEF_ATTRCONSTRAINT, __module__='tensorflow.core.framework.kernel_def_pb2')), DESCRIPTOR=_KERNELDEF, __module__='tensorflow.core.framework.kernel_def_pb2'))
A:tensorflow.core.framework.kernel_def_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x0fKernelDefProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/device_attributes_pb2.py----------------------------------------
A:tensorflow.core.framework.device_attributes_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.device_attributes_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/device_attributes.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n1tensorflow/core/framework/device_attributes.proto\x12\ntensorflow" \n\x0eDeviceLocality\x12\x0e\n\x06bus_id\x18\x01 \x01(\x05"¬\x01\n\x10DeviceAttributes\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x13\n\x0bdevice_type\x18\x02 \x01(\t\x12\x14\n\x0cmemory_limit\x18\x04 \x01(\x03\x12,\n\x08locality\x18\x05 \x01(\x0b2\x1a.tensorflow.DeviceLocality\x12\x13\n\x0bincarnation\x18\x06 \x01(\x06\x12\x1c\n\x14physical_device_desc\x18\x07 \x01(\tB7\n\x18org.tensorflow.frameworkB\x16DeviceAttributesProtosP\x01ø\x01\x01b\x06proto3'))
A:tensorflow.core.framework.device_attributes_pb2._DEVICELOCALITY->google.protobuf.descriptor.Descriptor(name='DeviceLocality', full_name='tensorflow.DeviceLocality', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='bus_id', full_name='tensorflow.DeviceLocality.bus_id', index=0, number=1, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=65, serialized_end=97)
A:tensorflow.core.framework.device_attributes_pb2._DEVICEATTRIBUTES->google.protobuf.descriptor.Descriptor(name='DeviceAttributes', full_name='tensorflow.DeviceAttributes', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.DeviceAttributes.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='device_type', full_name='tensorflow.DeviceAttributes.device_type', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='memory_limit', full_name='tensorflow.DeviceAttributes.memory_limit', index=2, number=4, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='locality', full_name='tensorflow.DeviceAttributes.locality', index=3, number=5, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='incarnation', full_name='tensorflow.DeviceAttributes.incarnation', index=4, number=6, type=6, cpp_type=4, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='physical_device_desc', full_name='tensorflow.DeviceAttributes.physical_device_desc', index=5, number=7, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=100, serialized_end=272)
A:tensorflow.core.framework.device_attributes_pb2.DeviceLocality->google.protobuf.reflection.GeneratedProtocolMessageType('DeviceLocality', (_message.Message,), dict(DESCRIPTOR=_DEVICELOCALITY, __module__='tensorflow.core.framework.device_attributes_pb2'))
A:tensorflow.core.framework.device_attributes_pb2.DeviceAttributes->google.protobuf.reflection.GeneratedProtocolMessageType('DeviceAttributes', (_message.Message,), dict(DESCRIPTOR=_DEVICEATTRIBUTES, __module__='tensorflow.core.framework.device_attributes_pb2'))
A:tensorflow.core.framework.device_attributes_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x16DeviceAttributesProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/attr_value_pb2.py----------------------------------------
A:tensorflow.core.framework.attr_value_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.attr_value_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/attr_value.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n*tensorflow/core/framework/attr_value.proto\x12\ntensorflow\x1a&tensorflow/core/framework/tensor.proto\x1a,tensorflow/core/framework/tensor_shape.proto\x1a%tensorflow/core/framework/types.proto"¦\x04\n\tAttrValue\x12\x0b\n\x01s\x18\x02 \x01(\x0cH\x00\x12\x0b\n\x01i\x18\x03 \x01(\x03H\x00\x12\x0b\n\x01f\x18\x04 \x01(\x02H\x00\x12\x0b\n\x01b\x18\x05 \x01(\x08H\x00\x12$\n\x04type\x18\x06 \x01(\x0e2\x14.tensorflow.DataTypeH\x00\x12-\n\x05shape\x18\x07 \x01(\x0b2\x1c.tensorflow.TensorShapeProtoH\x00\x12)\n\x06tensor\x18\x08 \x01(\x0b2\x17.tensorflow.TensorProtoH\x00\x12/\n\x04list\x18\x01 \x01(\x0b2\x1f.tensorflow.AttrValue.ListValueH\x00\x12(\n\x04func\x18\n \x01(\x0b2\x18.tensorflow.NameAttrListH\x00\x12\x15\n\x0bplaceholder\x18\t \x01(\tH\x00\x1aé\x01\n\tListValue\x12\t\n\x01s\x18\x02 \x03(\x0c\x12\r\n\x01i\x18\x03 \x03(\x03B\x02\x10\x01\x12\r\n\x01f\x18\x04 \x03(\x02B\x02\x10\x01\x12\r\n\x01b\x18\x05 \x03(\x08B\x02\x10\x01\x12&\n\x04type\x18\x06 \x03(\x0e2\x14.tensorflow.DataTypeB\x02\x10\x01\x12+\n\x05shape\x18\x07 \x03(\x0b2\x1c.tensorflow.TensorShapeProto\x12\'\n\x06tensor\x18\x08 \x03(\x0b2\x17.tensorflow.TensorProto\x12&\n\x04func\x18\t \x03(\x0b2\x18.tensorflow.NameAttrListB\x07\n\x05value"\x92\x01\n\x0cNameAttrList\x12\x0c\n\x04name\x18\x01 \x01(\t\x120\n\x04attr\x18\x02 \x03(\x0b2".tensorflow.NameAttrList.AttrEntry\x1aB\n\tAttrEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12$\n\x05value\x18\x02 \x01(\x0b2\x15.tensorflow.AttrValue:\x028\x01B0\n\x18org.tensorflow.frameworkB\x0fAttrValueProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_tensor__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_tensor__shape__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_types__pb2.DESCRIPTOR])
A:tensorflow.core.framework.attr_value_pb2._ATTRVALUE_LISTVALUE->google.protobuf.descriptor.Descriptor(name='ListValue', full_name='tensorflow.AttrValue.ListValue', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='s', full_name='tensorflow.AttrValue.ListValue.s', index=0, number=2, type=12, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='i', full_name='tensorflow.AttrValue.ListValue.i', index=1, number=3, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))), _descriptor.FieldDescriptor(name='f', full_name='tensorflow.AttrValue.ListValue.f', index=2, number=4, type=2, cpp_type=6, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))), _descriptor.FieldDescriptor(name='b', full_name='tensorflow.AttrValue.ListValue.b', index=3, number=5, type=8, cpp_type=7, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))), _descriptor.FieldDescriptor(name='type', full_name='tensorflow.AttrValue.ListValue.type', index=4, number=6, type=14, cpp_type=8, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))), _descriptor.FieldDescriptor(name='shape', full_name='tensorflow.AttrValue.ListValue.shape', index=5, number=7, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tensor', full_name='tensorflow.AttrValue.ListValue.tensor', index=6, number=8, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='func', full_name='tensorflow.AttrValue.ListValue.func', index=7, number=9, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=492, serialized_end=725)
A:tensorflow.core.framework.attr_value_pb2._ATTRVALUE->google.protobuf.descriptor.Descriptor(name='AttrValue', full_name='tensorflow.AttrValue', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='s', full_name='tensorflow.AttrValue.s', index=0, number=2, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='i', full_name='tensorflow.AttrValue.i', index=1, number=3, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='f', full_name='tensorflow.AttrValue.f', index=2, number=4, type=2, cpp_type=6, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='b', full_name='tensorflow.AttrValue.b', index=3, number=5, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='type', full_name='tensorflow.AttrValue.type', index=4, number=6, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='shape', full_name='tensorflow.AttrValue.shape', index=5, number=7, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tensor', full_name='tensorflow.AttrValue.tensor', index=6, number=8, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='list', full_name='tensorflow.AttrValue.list', index=7, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='func', full_name='tensorflow.AttrValue.func', index=8, number=10, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='placeholder', full_name='tensorflow.AttrValue.placeholder', index=9, number=9, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_ATTRVALUE_LISTVALUE], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[_descriptor.OneofDescriptor(name='value', full_name='tensorflow.AttrValue.value', index=0, containing_type=None, fields=[])], serialized_start=184, serialized_end=734)
A:tensorflow.core.framework.attr_value_pb2._NAMEATTRLIST_ATTRENTRY->google.protobuf.descriptor.Descriptor(name='AttrEntry', full_name='tensorflow.NameAttrList.AttrEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.NameAttrList.AttrEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.NameAttrList.AttrEntry.value', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=817, serialized_end=883)
A:tensorflow.core.framework.attr_value_pb2._NAMEATTRLIST->google.protobuf.descriptor.Descriptor(name='NameAttrList', full_name='tensorflow.NameAttrList', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.NameAttrList.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='attr', full_name='tensorflow.NameAttrList.attr', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_NAMEATTRLIST_ATTRENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=737, serialized_end=883)
A:tensorflow.core.framework.attr_value_pb2.AttrValue->google.protobuf.reflection.GeneratedProtocolMessageType('AttrValue', (_message.Message,), dict(ListValue=_reflection.GeneratedProtocolMessageType('ListValue', (_message.Message,), dict(DESCRIPTOR=_ATTRVALUE_LISTVALUE, __module__='tensorflow.core.framework.attr_value_pb2')), DESCRIPTOR=_ATTRVALUE, __module__='tensorflow.core.framework.attr_value_pb2'))
A:tensorflow.core.framework.attr_value_pb2.NameAttrList->google.protobuf.reflection.GeneratedProtocolMessageType('NameAttrList', (_message.Message,), dict(AttrEntry=_reflection.GeneratedProtocolMessageType('AttrEntry', (_message.Message,), dict(DESCRIPTOR=_NAMEATTRLIST_ATTRENTRY, __module__='tensorflow.core.framework.attr_value_pb2')), DESCRIPTOR=_NAMEATTRLIST, __module__='tensorflow.core.framework.attr_value_pb2'))
A:tensorflow.core.framework.attr_value_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x0fAttrValueProtosP\x01ø\x01\x01'))
A:tensorflow.core.framework.attr_value_pb2._ATTRVALUE_LISTVALUE.fields_by_name['i']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.framework.attr_value_pb2._ATTRVALUE_LISTVALUE.fields_by_name['f']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.framework.attr_value_pb2._ATTRVALUE_LISTVALUE.fields_by_name['b']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.framework.attr_value_pb2._ATTRVALUE_LISTVALUE.fields_by_name['type']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.framework.attr_value_pb2._NAMEATTRLIST_ATTRENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/log_memory_pb2.py----------------------------------------
A:tensorflow.core.framework.log_memory_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.log_memory_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/log_memory.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n*tensorflow/core/framework/log_memory.proto\x12\ntensorflow\x1a2tensorflow/core/framework/tensor_description.proto"0\n\rMemoryLogStep\x12\x0f\n\x07step_id\x18\x01 \x01(\x03\x12\x0e\n\x06handle\x18\x02 \x01(\t"p\n\x19MemoryLogTensorAllocation\x12\x0f\n\x07step_id\x18\x01 \x01(\x03\x12\x13\n\x0bkernel_name\x18\x02 \x01(\t\x12-\n\x06tensor\x18\x03 \x01(\x0b2\x1d.tensorflow.TensorDescription"L\n\x1bMemoryLogTensorDeallocation\x12\x15\n\rallocation_id\x18\x01 \x01(\x03\x12\x16\n\x0eallocator_name\x18\x02 \x01(\t"{\n\x15MemoryLogTensorOutput\x12\x0f\n\x07step_id\x18\x01 \x01(\x03\x12\x13\n\x0bkernel_name\x18\x02 \x01(\t\x12\r\n\x05index\x18\x03 \x01(\x05\x12-\n\x06tensor\x18\x04 \x01(\x0b2\x1d.tensorflow.TensorDescription"\x8b\x01\n\x16MemoryLogRawAllocation\x12\x0f\n\x07step_id\x18\x01 \x01(\x03\x12\x11\n\toperation\x18\x02 \x01(\t\x12\x11\n\tnum_bytes\x18\x03 \x01(\x03\x12\x0b\n\x03ptr\x18\x04 \x01(\x04\x12\x15\n\rallocation_id\x18\x05 \x01(\x03\x12\x16\n\x0eallocator_name\x18\x06 \x01(\t"\x7f\n\x18MemoryLogRawDeallocation\x12\x0f\n\x07step_id\x18\x01 \x01(\x03\x12\x11\n\toperation\x18\x02 \x01(\t\x12\x15\n\rallocation_id\x18\x03 \x01(\x03\x12\x16\n\x0eallocator_name\x18\x04 \x01(\t\x12\x10\n\x08deferred\x18\x05 \x01(\x08B0\n\x18org.tensorflow.frameworkB\x0fLogMemoryProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_tensor__description__pb2.DESCRIPTOR])
A:tensorflow.core.framework.log_memory_pb2._MEMORYLOGSTEP->google.protobuf.descriptor.Descriptor(name='MemoryLogStep', full_name='tensorflow.MemoryLogStep', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='step_id', full_name='tensorflow.MemoryLogStep.step_id', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='handle', full_name='tensorflow.MemoryLogStep.handle', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=110, serialized_end=158)
A:tensorflow.core.framework.log_memory_pb2._MEMORYLOGTENSORALLOCATION->google.protobuf.descriptor.Descriptor(name='MemoryLogTensorAllocation', full_name='tensorflow.MemoryLogTensorAllocation', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='step_id', full_name='tensorflow.MemoryLogTensorAllocation.step_id', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='kernel_name', full_name='tensorflow.MemoryLogTensorAllocation.kernel_name', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tensor', full_name='tensorflow.MemoryLogTensorAllocation.tensor', index=2, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=160, serialized_end=272)
A:tensorflow.core.framework.log_memory_pb2._MEMORYLOGTENSORDEALLOCATION->google.protobuf.descriptor.Descriptor(name='MemoryLogTensorDeallocation', full_name='tensorflow.MemoryLogTensorDeallocation', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='allocation_id', full_name='tensorflow.MemoryLogTensorDeallocation.allocation_id', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='allocator_name', full_name='tensorflow.MemoryLogTensorDeallocation.allocator_name', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=274, serialized_end=350)
A:tensorflow.core.framework.log_memory_pb2._MEMORYLOGTENSOROUTPUT->google.protobuf.descriptor.Descriptor(name='MemoryLogTensorOutput', full_name='tensorflow.MemoryLogTensorOutput', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='step_id', full_name='tensorflow.MemoryLogTensorOutput.step_id', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='kernel_name', full_name='tensorflow.MemoryLogTensorOutput.kernel_name', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='index', full_name='tensorflow.MemoryLogTensorOutput.index', index=2, number=3, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tensor', full_name='tensorflow.MemoryLogTensorOutput.tensor', index=3, number=4, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=352, serialized_end=475)
A:tensorflow.core.framework.log_memory_pb2._MEMORYLOGRAWALLOCATION->google.protobuf.descriptor.Descriptor(name='MemoryLogRawAllocation', full_name='tensorflow.MemoryLogRawAllocation', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='step_id', full_name='tensorflow.MemoryLogRawAllocation.step_id', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='operation', full_name='tensorflow.MemoryLogRawAllocation.operation', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='num_bytes', full_name='tensorflow.MemoryLogRawAllocation.num_bytes', index=2, number=3, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='ptr', full_name='tensorflow.MemoryLogRawAllocation.ptr', index=3, number=4, type=4, cpp_type=4, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='allocation_id', full_name='tensorflow.MemoryLogRawAllocation.allocation_id', index=4, number=5, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='allocator_name', full_name='tensorflow.MemoryLogRawAllocation.allocator_name', index=5, number=6, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=478, serialized_end=617)
A:tensorflow.core.framework.log_memory_pb2._MEMORYLOGRAWDEALLOCATION->google.protobuf.descriptor.Descriptor(name='MemoryLogRawDeallocation', full_name='tensorflow.MemoryLogRawDeallocation', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='step_id', full_name='tensorflow.MemoryLogRawDeallocation.step_id', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='operation', full_name='tensorflow.MemoryLogRawDeallocation.operation', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='allocation_id', full_name='tensorflow.MemoryLogRawDeallocation.allocation_id', index=2, number=3, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='allocator_name', full_name='tensorflow.MemoryLogRawDeallocation.allocator_name', index=3, number=4, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='deferred', full_name='tensorflow.MemoryLogRawDeallocation.deferred', index=4, number=5, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=619, serialized_end=746)
A:tensorflow.core.framework.log_memory_pb2.MemoryLogStep->google.protobuf.reflection.GeneratedProtocolMessageType('MemoryLogStep', (_message.Message,), dict(DESCRIPTOR=_MEMORYLOGSTEP, __module__='tensorflow.core.framework.log_memory_pb2'))
A:tensorflow.core.framework.log_memory_pb2.MemoryLogTensorAllocation->google.protobuf.reflection.GeneratedProtocolMessageType('MemoryLogTensorAllocation', (_message.Message,), dict(DESCRIPTOR=_MEMORYLOGTENSORALLOCATION, __module__='tensorflow.core.framework.log_memory_pb2'))
A:tensorflow.core.framework.log_memory_pb2.MemoryLogTensorDeallocation->google.protobuf.reflection.GeneratedProtocolMessageType('MemoryLogTensorDeallocation', (_message.Message,), dict(DESCRIPTOR=_MEMORYLOGTENSORDEALLOCATION, __module__='tensorflow.core.framework.log_memory_pb2'))
A:tensorflow.core.framework.log_memory_pb2.MemoryLogTensorOutput->google.protobuf.reflection.GeneratedProtocolMessageType('MemoryLogTensorOutput', (_message.Message,), dict(DESCRIPTOR=_MEMORYLOGTENSOROUTPUT, __module__='tensorflow.core.framework.log_memory_pb2'))
A:tensorflow.core.framework.log_memory_pb2.MemoryLogRawAllocation->google.protobuf.reflection.GeneratedProtocolMessageType('MemoryLogRawAllocation', (_message.Message,), dict(DESCRIPTOR=_MEMORYLOGRAWALLOCATION, __module__='tensorflow.core.framework.log_memory_pb2'))
A:tensorflow.core.framework.log_memory_pb2.MemoryLogRawDeallocation->google.protobuf.reflection.GeneratedProtocolMessageType('MemoryLogRawDeallocation', (_message.Message,), dict(DESCRIPTOR=_MEMORYLOGRAWDEALLOCATION, __module__='tensorflow.core.framework.log_memory_pb2'))
A:tensorflow.core.framework.log_memory_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x0fLogMemoryProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/tensor_pb2.py----------------------------------------
A:tensorflow.core.framework.tensor_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.tensor_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/tensor.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n&tensorflow/core/framework/tensor.proto\x12\ntensorflow\x1a/tensorflow/core/framework/resource_handle.proto\x1a,tensorflow/core/framework/tensor_shape.proto\x1a%tensorflow/core/framework/types.proto"\x9e\x03\n\x0bTensorProto\x12#\n\x05dtype\x18\x01 \x01(\x0e2\x14.tensorflow.DataType\x122\n\x0ctensor_shape\x18\x02 \x01(\x0b2\x1c.tensorflow.TensorShapeProto\x12\x16\n\x0eversion_number\x18\x03 \x01(\x05\x12\x16\n\x0etensor_content\x18\x04 \x01(\x0c\x12\x14\n\x08half_val\x18\r \x03(\x05B\x02\x10\x01\x12\x15\n\tfloat_val\x18\x05 \x03(\x02B\x02\x10\x01\x12\x16\n\ndouble_val\x18\x06 \x03(\x01B\x02\x10\x01\x12\x13\n\x07int_val\x18\x07 \x03(\x05B\x02\x10\x01\x12\x12\n\nstring_val\x18\x08 \x03(\x0c\x12\x18\n\x0cscomplex_val\x18\t \x03(\x02B\x02\x10\x01\x12\x15\n\tint64_val\x18\n \x03(\x03B\x02\x10\x01\x12\x14\n\x08bool_val\x18\x0b \x03(\x08B\x02\x10\x01\x12\x18\n\x0cdcomplex_val\x18\x0c \x03(\x01B\x02\x10\x01\x127\n\x13resource_handle_val\x18\x0e \x03(\x0b2\x1a.tensorflow.ResourceHandleB-\n\x18org.tensorflow.frameworkB\x0cTensorProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_resource__handle__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_tensor__shape__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_types__pb2.DESCRIPTOR])
A:tensorflow.core.framework.tensor_pb2._TENSORPROTO->google.protobuf.descriptor.Descriptor(name='TensorProto', full_name='tensorflow.TensorProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='dtype', full_name='tensorflow.TensorProto.dtype', index=0, number=1, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tensor_shape', full_name='tensorflow.TensorProto.tensor_shape', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='version_number', full_name='tensorflow.TensorProto.version_number', index=2, number=3, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tensor_content', full_name='tensorflow.TensorProto.tensor_content', index=3, number=4, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='half_val', full_name='tensorflow.TensorProto.half_val', index=4, number=13, type=5, cpp_type=1, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))), _descriptor.FieldDescriptor(name='float_val', full_name='tensorflow.TensorProto.float_val', index=5, number=5, type=2, cpp_type=6, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))), _descriptor.FieldDescriptor(name='double_val', full_name='tensorflow.TensorProto.double_val', index=6, number=6, type=1, cpp_type=5, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))), _descriptor.FieldDescriptor(name='int_val', full_name='tensorflow.TensorProto.int_val', index=7, number=7, type=5, cpp_type=1, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))), _descriptor.FieldDescriptor(name='string_val', full_name='tensorflow.TensorProto.string_val', index=8, number=8, type=12, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='scomplex_val', full_name='tensorflow.TensorProto.scomplex_val', index=9, number=9, type=2, cpp_type=6, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))), _descriptor.FieldDescriptor(name='int64_val', full_name='tensorflow.TensorProto.int64_val', index=10, number=10, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))), _descriptor.FieldDescriptor(name='bool_val', full_name='tensorflow.TensorProto.bool_val', index=11, number=11, type=8, cpp_type=7, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))), _descriptor.FieldDescriptor(name='dcomplex_val', full_name='tensorflow.TensorProto.dcomplex_val', index=12, number=12, type=1, cpp_type=5, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))), _descriptor.FieldDescriptor(name='resource_handle_val', full_name='tensorflow.TensorProto.resource_handle_val', index=13, number=14, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=189, serialized_end=603)
A:tensorflow.core.framework.tensor_pb2.TensorProto->google.protobuf.reflection.GeneratedProtocolMessageType('TensorProto', (_message.Message,), dict(DESCRIPTOR=_TENSORPROTO, __module__='tensorflow.core.framework.tensor_pb2'))
A:tensorflow.core.framework.tensor_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x0cTensorProtosP\x01ø\x01\x01'))
A:tensorflow.core.framework.tensor_pb2._TENSORPROTO.fields_by_name['half_val']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.framework.tensor_pb2._TENSORPROTO.fields_by_name['float_val']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.framework.tensor_pb2._TENSORPROTO.fields_by_name['double_val']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.framework.tensor_pb2._TENSORPROTO.fields_by_name['int_val']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.framework.tensor_pb2._TENSORPROTO.fields_by_name['scomplex_val']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.framework.tensor_pb2._TENSORPROTO.fields_by_name['int64_val']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.framework.tensor_pb2._TENSORPROTO.fields_by_name['bool_val']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.framework.tensor_pb2._TENSORPROTO.fields_by_name['dcomplex_val']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/tensor_slice_pb2.py----------------------------------------
A:tensorflow.core.framework.tensor_slice_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.tensor_slice_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/tensor_slice.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n,tensorflow/core/framework/tensor_slice.proto\x12\ntensorflow"\x80\x01\n\x10TensorSliceProto\x123\n\x06extent\x18\x01 \x03(\x0b2#.tensorflow.TensorSliceProto.Extent\x1a7\n\x06Extent\x12\r\n\x05start\x18\x01 \x01(\x03\x12\x10\n\x06length\x18\x02 \x01(\x03H\x00B\x0c\n\nhas_lengthB2\n\x18org.tensorflow.frameworkB\x11TensorSliceProtosP\x01ø\x01\x01b\x06proto3'))
A:tensorflow.core.framework.tensor_slice_pb2._TENSORSLICEPROTO_EXTENT->google.protobuf.descriptor.Descriptor(name='Extent', full_name='tensorflow.TensorSliceProto.Extent', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='start', full_name='tensorflow.TensorSliceProto.Extent.start', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='length', full_name='tensorflow.TensorSliceProto.Extent.length', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[_descriptor.OneofDescriptor(name='has_length', full_name='tensorflow.TensorSliceProto.Extent.has_length', index=0, containing_type=None, fields=[])], serialized_start=134, serialized_end=189)
A:tensorflow.core.framework.tensor_slice_pb2._TENSORSLICEPROTO->google.protobuf.descriptor.Descriptor(name='TensorSliceProto', full_name='tensorflow.TensorSliceProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='extent', full_name='tensorflow.TensorSliceProto.extent', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_TENSORSLICEPROTO_EXTENT], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=61, serialized_end=189)
A:tensorflow.core.framework.tensor_slice_pb2.TensorSliceProto->google.protobuf.reflection.GeneratedProtocolMessageType('TensorSliceProto', (_message.Message,), dict(Extent=_reflection.GeneratedProtocolMessageType('Extent', (_message.Message,), dict(DESCRIPTOR=_TENSORSLICEPROTO_EXTENT, __module__='tensorflow.core.framework.tensor_slice_pb2')), DESCRIPTOR=_TENSORSLICEPROTO, __module__='tensorflow.core.framework.tensor_slice_pb2'))
A:tensorflow.core.framework.tensor_slice_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x11TensorSliceProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/summary_pb2.py----------------------------------------
A:tensorflow.core.framework.summary_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.summary_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/summary.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n\'tensorflow/core/framework/summary.proto\x12\ntensorflow\x1a&tensorflow/core/framework/tensor.proto"\'\n\x12SummaryDescription\x12\x11\n\ttype_hint\x18\x01 \x01(\t"\x87\x01\n\x0eHistogramProto\x12\x0b\n\x03min\x18\x01 \x01(\x01\x12\x0b\n\x03max\x18\x02 \x01(\x01\x12\x0b\n\x03num\x18\x03 \x01(\x01\x12\x0b\n\x03sum\x18\x04 \x01(\x01\x12\x13\n\x0bsum_squares\x18\x05 \x01(\x01\x12\x18\n\x0cbucket_limit\x18\x06 \x03(\x01B\x02\x10\x01\x12\x12\n\x06bucket\x18\x07 \x03(\x01B\x02\x10\x01"¯\x04\n\x07Summary\x12(\n\x05value\x18\x01 \x03(\x0b2\x19.tensorflow.Summary.Value\x1aX\n\x05Image\x12\x0e\n\x06height\x18\x01 \x01(\x05\x12\r\n\x05width\x18\x02 \x01(\x05\x12\x12\n\ncolorspace\x18\x03 \x01(\x05\x12\x1c\n\x14encoded_image_string\x18\x04 \x01(\x0c\x1a}\n\x05Audio\x12\x13\n\x0bsample_rate\x18\x01 \x01(\x02\x12\x14\n\x0cnum_channels\x18\x02 \x01(\x03\x12\x15\n\rlength_frames\x18\x03 \x01(\x03\x12\x1c\n\x14encoded_audio_string\x18\x04 \x01(\x0c\x12\x14\n\x0ccontent_type\x18\x05 \x01(\t\x1a\xa0\x02\n\x05Value\x12\x11\n\tnode_name\x18\x07 \x01(\t\x12\x0b\n\x03tag\x18\x01 \x01(\t\x12\x16\n\x0csimple_value\x18\x02 \x01(\x02H\x00\x12&\n\x1cobsolete_old_style_histogram\x18\x03 \x01(\x0cH\x00\x12*\n\x05image\x18\x04 \x01(\x0b2\x19.tensorflow.Summary.ImageH\x00\x12+\n\x05histo\x18\x05 \x01(\x0b2\x1a.tensorflow.HistogramProtoH\x00\x12*\n\x05audio\x18\x06 \x01(\x0b2\x19.tensorflow.Summary.AudioH\x00\x12)\n\x06tensor\x18\x08 \x01(\x0b2\x17.tensorflow.TensorProtoH\x00B\x07\n\x05valueB.\n\x18org.tensorflow.frameworkB\rSummaryProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_tensor__pb2.DESCRIPTOR])
A:tensorflow.core.framework.summary_pb2._SUMMARYDESCRIPTION->google.protobuf.descriptor.Descriptor(name='SummaryDescription', full_name='tensorflow.SummaryDescription', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='type_hint', full_name='tensorflow.SummaryDescription.type_hint', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=95, serialized_end=134)
A:tensorflow.core.framework.summary_pb2._HISTOGRAMPROTO->google.protobuf.descriptor.Descriptor(name='HistogramProto', full_name='tensorflow.HistogramProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='min', full_name='tensorflow.HistogramProto.min', index=0, number=1, type=1, cpp_type=5, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='max', full_name='tensorflow.HistogramProto.max', index=1, number=2, type=1, cpp_type=5, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='num', full_name='tensorflow.HistogramProto.num', index=2, number=3, type=1, cpp_type=5, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='sum', full_name='tensorflow.HistogramProto.sum', index=3, number=4, type=1, cpp_type=5, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='sum_squares', full_name='tensorflow.HistogramProto.sum_squares', index=4, number=5, type=1, cpp_type=5, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='bucket_limit', full_name='tensorflow.HistogramProto.bucket_limit', index=5, number=6, type=1, cpp_type=5, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))), _descriptor.FieldDescriptor(name='bucket', full_name='tensorflow.HistogramProto.bucket', index=6, number=7, type=1, cpp_type=5, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01')))], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=137, serialized_end=272)
A:tensorflow.core.framework.summary_pb2._SUMMARY_IMAGE->google.protobuf.descriptor.Descriptor(name='Image', full_name='tensorflow.Summary.Image', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='height', full_name='tensorflow.Summary.Image.height', index=0, number=1, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='width', full_name='tensorflow.Summary.Image.width', index=1, number=2, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='colorspace', full_name='tensorflow.Summary.Image.colorspace', index=2, number=3, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='encoded_image_string', full_name='tensorflow.Summary.Image.encoded_image_string', index=3, number=4, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=328, serialized_end=416)
A:tensorflow.core.framework.summary_pb2._SUMMARY_AUDIO->google.protobuf.descriptor.Descriptor(name='Audio', full_name='tensorflow.Summary.Audio', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='sample_rate', full_name='tensorflow.Summary.Audio.sample_rate', index=0, number=1, type=2, cpp_type=6, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='num_channels', full_name='tensorflow.Summary.Audio.num_channels', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='length_frames', full_name='tensorflow.Summary.Audio.length_frames', index=2, number=3, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='encoded_audio_string', full_name='tensorflow.Summary.Audio.encoded_audio_string', index=3, number=4, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='content_type', full_name='tensorflow.Summary.Audio.content_type', index=4, number=5, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=418, serialized_end=543)
A:tensorflow.core.framework.summary_pb2._SUMMARY_VALUE->google.protobuf.descriptor.Descriptor(name='Value', full_name='tensorflow.Summary.Value', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='node_name', full_name='tensorflow.Summary.Value.node_name', index=0, number=7, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tag', full_name='tensorflow.Summary.Value.tag', index=1, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='simple_value', full_name='tensorflow.Summary.Value.simple_value', index=2, number=2, type=2, cpp_type=6, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='obsolete_old_style_histogram', full_name='tensorflow.Summary.Value.obsolete_old_style_histogram', index=3, number=3, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='image', full_name='tensorflow.Summary.Value.image', index=4, number=4, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='histo', full_name='tensorflow.Summary.Value.histo', index=5, number=5, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='audio', full_name='tensorflow.Summary.Value.audio', index=6, number=6, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tensor', full_name='tensorflow.Summary.Value.tensor', index=7, number=8, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[_descriptor.OneofDescriptor(name='value', full_name='tensorflow.Summary.Value.value', index=0, containing_type=None, fields=[])], serialized_start=546, serialized_end=834)
A:tensorflow.core.framework.summary_pb2._SUMMARY->google.protobuf.descriptor.Descriptor(name='Summary', full_name='tensorflow.Summary', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='value', full_name='tensorflow.Summary.value', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_SUMMARY_IMAGE, _SUMMARY_AUDIO, _SUMMARY_VALUE], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=275, serialized_end=834)
A:tensorflow.core.framework.summary_pb2.SummaryDescription->google.protobuf.reflection.GeneratedProtocolMessageType('SummaryDescription', (_message.Message,), dict(DESCRIPTOR=_SUMMARYDESCRIPTION, __module__='tensorflow.core.framework.summary_pb2'))
A:tensorflow.core.framework.summary_pb2.HistogramProto->google.protobuf.reflection.GeneratedProtocolMessageType('HistogramProto', (_message.Message,), dict(DESCRIPTOR=_HISTOGRAMPROTO, __module__='tensorflow.core.framework.summary_pb2'))
A:tensorflow.core.framework.summary_pb2.Summary->google.protobuf.reflection.GeneratedProtocolMessageType('Summary', (_message.Message,), dict(Image=_reflection.GeneratedProtocolMessageType('Image', (_message.Message,), dict(DESCRIPTOR=_SUMMARY_IMAGE, __module__='tensorflow.core.framework.summary_pb2')), Audio=_reflection.GeneratedProtocolMessageType('Audio', (_message.Message,), dict(DESCRIPTOR=_SUMMARY_AUDIO, __module__='tensorflow.core.framework.summary_pb2')), Value=_reflection.GeneratedProtocolMessageType('Value', (_message.Message,), dict(DESCRIPTOR=_SUMMARY_VALUE, __module__='tensorflow.core.framework.summary_pb2')), DESCRIPTOR=_SUMMARY, __module__='tensorflow.core.framework.summary_pb2'))
A:tensorflow.core.framework.summary_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\rSummaryProtosP\x01ø\x01\x01'))
A:tensorflow.core.framework.summary_pb2._HISTOGRAMPROTO.fields_by_name['bucket_limit']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.framework.summary_pb2._HISTOGRAMPROTO.fields_by_name['bucket']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/remote_fused_graph_execute_info_pb2.py----------------------------------------
A:tensorflow.core.framework.remote_fused_graph_execute_info_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.remote_fused_graph_execute_info_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/remote_fused_graph_execute_info.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n?tensorflow/core/framework/remote_fused_graph_execute_info.proto\x12\ntensorflow\x1a(tensorflow/core/framework/node_def.proto\x1a,tensorflow/core/framework/tensor_shape.proto\x1a%tensorflow/core/framework/types.proto"ù\x03\n\x1bRemoteFusedGraphExecuteInfo\x12!\n\x04node\x18\x01 \x03(\x0b2\x13.tensorflow.NodeDef\x12\x1d\n\x15graph_input_node_name\x18\x02 \x03(\t\x12\x1e\n\x16graph_output_node_name\x18\x03 \x03(\t\x12\x15\n\rexecutor_name\x18\x04 \x01(\t\x12&\n\x1eserialized_executor_parameters\x18\x05 \x01(\x0c\x12f\n default_graph_input_tensor_shape\x18\x06 \x03(\x0b2<.tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto\x12g\n!default_graph_output_tensor_shape\x18\x07 \x03(\x0b2<.tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto\x1ah\n\x14TensorShapeTypeProto\x12#\n\x05dtype\x18\x01 \x01(\x0e2\x14.tensorflow.DataType\x12+\n\x05shape\x18\x02 \x01(\x0b2\x1c.tensorflow.TensorShapeProtoBA\n\x18org.tensorflow.frameworkB RemoteFusedGraphExecuteInfoProtoP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_node__def__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_tensor__shape__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_types__pb2.DESCRIPTOR])
A:tensorflow.core.framework.remote_fused_graph_execute_info_pb2._REMOTEFUSEDGRAPHEXECUTEINFO_TENSORSHAPETYPEPROTO->google.protobuf.descriptor.Descriptor(name='TensorShapeTypeProto', full_name='tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='dtype', full_name='tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.dtype', index=0, number=1, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='shape', full_name='tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto.shape', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=608, serialized_end=712)
A:tensorflow.core.framework.remote_fused_graph_execute_info_pb2._REMOTEFUSEDGRAPHEXECUTEINFO->google.protobuf.descriptor.Descriptor(name='RemoteFusedGraphExecuteInfo', full_name='tensorflow.RemoteFusedGraphExecuteInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='node', full_name='tensorflow.RemoteFusedGraphExecuteInfo.node', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='graph_input_node_name', full_name='tensorflow.RemoteFusedGraphExecuteInfo.graph_input_node_name', index=1, number=2, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='graph_output_node_name', full_name='tensorflow.RemoteFusedGraphExecuteInfo.graph_output_node_name', index=2, number=3, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='executor_name', full_name='tensorflow.RemoteFusedGraphExecuteInfo.executor_name', index=3, number=4, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='serialized_executor_parameters', full_name='tensorflow.RemoteFusedGraphExecuteInfo.serialized_executor_parameters', index=4, number=5, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='default_graph_input_tensor_shape', full_name='tensorflow.RemoteFusedGraphExecuteInfo.default_graph_input_tensor_shape', index=5, number=6, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='default_graph_output_tensor_shape', full_name='tensorflow.RemoteFusedGraphExecuteInfo.default_graph_output_tensor_shape', index=6, number=7, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_REMOTEFUSEDGRAPHEXECUTEINFO_TENSORSHAPETYPEPROTO], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=207, serialized_end=712)
A:tensorflow.core.framework.remote_fused_graph_execute_info_pb2.RemoteFusedGraphExecuteInfo->google.protobuf.reflection.GeneratedProtocolMessageType('RemoteFusedGraphExecuteInfo', (_message.Message,), dict(TensorShapeTypeProto=_reflection.GeneratedProtocolMessageType('TensorShapeTypeProto', (_message.Message,), dict(DESCRIPTOR=_REMOTEFUSEDGRAPHEXECUTEINFO_TENSORSHAPETYPEPROTO, __module__='tensorflow.core.framework.remote_fused_graph_execute_info_pb2')), DESCRIPTOR=_REMOTEFUSEDGRAPHEXECUTEINFO, __module__='tensorflow.core.framework.remote_fused_graph_execute_info_pb2'))
A:tensorflow.core.framework.remote_fused_graph_execute_info_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB RemoteFusedGraphExecuteInfoProtoP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/op_def_pb2.py----------------------------------------
A:tensorflow.core.framework.op_def_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.op_def_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/op_def.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n&tensorflow/core/framework/op_def.proto\x12\ntensorflow\x1a*tensorflow/core/framework/attr_value.proto\x1a%tensorflow/core/framework/types.proto"¸\x05\n\x05OpDef\x12\x0c\n\x04name\x18\x01 \x01(\t\x12+\n\tinput_arg\x18\x02 \x03(\x0b2\x18.tensorflow.OpDef.ArgDef\x12,\n\noutput_arg\x18\x03 \x03(\x0b2\x18.tensorflow.OpDef.ArgDef\x12\'\n\x04attr\x18\x04 \x03(\x0b2\x19.tensorflow.OpDef.AttrDef\x12.\n\x0bdeprecation\x18\x08 \x01(\x0b2\x19.tensorflow.OpDeprecation\x12\x0f\n\x07summary\x18\x05 \x01(\t\x12\x13\n\x0bdescription\x18\x06 \x01(\t\x12\x16\n\x0eis_commutative\x18\x12 \x01(\x08\x12\x14\n\x0cis_aggregate\x18\x10 \x01(\x08\x12\x13\n\x0bis_stateful\x18\x11 \x01(\x08\x12"\n\x1aallows_uninitialized_input\x18\x13 \x01(\x08\x1a\x9f\x01\n\x06ArgDef\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x13\n\x0bdescription\x18\x02 \x01(\t\x12"\n\x04type\x18\x03 \x01(\x0e2\x14.tensorflow.DataType\x12\x11\n\ttype_attr\x18\x04 \x01(\t\x12\x13\n\x0bnumber_attr\x18\x05 \x01(\t\x12\x16\n\x0etype_list_attr\x18\x06 \x01(\t\x12\x0e\n\x06is_ref\x18\x10 \x01(\x08\x1a½\x01\n\x07AttrDef\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0c\n\x04type\x18\x02 \x01(\t\x12,\n\rdefault_value\x18\x03 \x01(\x0b2\x15.tensorflow.AttrValue\x12\x13\n\x0bdescription\x18\x04 \x01(\t\x12\x13\n\x0bhas_minimum\x18\x05 \x01(\x08\x12\x0f\n\x07minimum\x18\x06 \x01(\x03\x12-\n\x0eallowed_values\x18\x07 \x01(\x0b2\x15.tensorflow.AttrValue"5\n\rOpDeprecation\x12\x0f\n\x07version\x18\x01 \x01(\x05\x12\x13\n\x0bexplanation\x18\x02 \x01(\t"\'\n\x06OpList\x12\x1d\n\x02op\x18\x01 \x03(\x0b2\x11.tensorflow.OpDefB,\n\x18org.tensorflow.frameworkB\x0bOpDefProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_attr__value__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_types__pb2.DESCRIPTOR])
A:tensorflow.core.framework.op_def_pb2._OPDEF_ARGDEF->google.protobuf.descriptor.Descriptor(name='ArgDef', full_name='tensorflow.OpDef.ArgDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.OpDef.ArgDef.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='description', full_name='tensorflow.OpDef.ArgDef.description', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='type', full_name='tensorflow.OpDef.ArgDef.type', index=2, number=3, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='type_attr', full_name='tensorflow.OpDef.ArgDef.type_attr', index=3, number=4, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='number_attr', full_name='tensorflow.OpDef.ArgDef.number_attr', index=4, number=5, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='type_list_attr', full_name='tensorflow.OpDef.ArgDef.type_list_attr', index=5, number=6, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='is_ref', full_name='tensorflow.OpDef.ArgDef.is_ref', index=6, number=16, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=483, serialized_end=642)
A:tensorflow.core.framework.op_def_pb2._OPDEF_ATTRDEF->google.protobuf.descriptor.Descriptor(name='AttrDef', full_name='tensorflow.OpDef.AttrDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.OpDef.AttrDef.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='type', full_name='tensorflow.OpDef.AttrDef.type', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='default_value', full_name='tensorflow.OpDef.AttrDef.default_value', index=2, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='description', full_name='tensorflow.OpDef.AttrDef.description', index=3, number=4, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='has_minimum', full_name='tensorflow.OpDef.AttrDef.has_minimum', index=4, number=5, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='minimum', full_name='tensorflow.OpDef.AttrDef.minimum', index=5, number=6, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='allowed_values', full_name='tensorflow.OpDef.AttrDef.allowed_values', index=6, number=7, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=645, serialized_end=834)
A:tensorflow.core.framework.op_def_pb2._OPDEF->google.protobuf.descriptor.Descriptor(name='OpDef', full_name='tensorflow.OpDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.OpDef.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='input_arg', full_name='tensorflow.OpDef.input_arg', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='output_arg', full_name='tensorflow.OpDef.output_arg', index=2, number=3, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='attr', full_name='tensorflow.OpDef.attr', index=3, number=4, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='deprecation', full_name='tensorflow.OpDef.deprecation', index=4, number=8, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='summary', full_name='tensorflow.OpDef.summary', index=5, number=5, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='description', full_name='tensorflow.OpDef.description', index=6, number=6, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='is_commutative', full_name='tensorflow.OpDef.is_commutative', index=7, number=18, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='is_aggregate', full_name='tensorflow.OpDef.is_aggregate', index=8, number=16, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='is_stateful', full_name='tensorflow.OpDef.is_stateful', index=9, number=17, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='allows_uninitialized_input', full_name='tensorflow.OpDef.allows_uninitialized_input', index=10, number=19, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_OPDEF_ARGDEF, _OPDEF_ATTRDEF], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=138, serialized_end=834)
A:tensorflow.core.framework.op_def_pb2._OPDEPRECATION->google.protobuf.descriptor.Descriptor(name='OpDeprecation', full_name='tensorflow.OpDeprecation', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='version', full_name='tensorflow.OpDeprecation.version', index=0, number=1, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='explanation', full_name='tensorflow.OpDeprecation.explanation', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=836, serialized_end=889)
A:tensorflow.core.framework.op_def_pb2._OPLIST->google.protobuf.descriptor.Descriptor(name='OpList', full_name='tensorflow.OpList', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='op', full_name='tensorflow.OpList.op', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=891, serialized_end=930)
A:tensorflow.core.framework.op_def_pb2.OpDef->google.protobuf.reflection.GeneratedProtocolMessageType('OpDef', (_message.Message,), dict(ArgDef=_reflection.GeneratedProtocolMessageType('ArgDef', (_message.Message,), dict(DESCRIPTOR=_OPDEF_ARGDEF, __module__='tensorflow.core.framework.op_def_pb2')), AttrDef=_reflection.GeneratedProtocolMessageType('AttrDef', (_message.Message,), dict(DESCRIPTOR=_OPDEF_ATTRDEF, __module__='tensorflow.core.framework.op_def_pb2')), DESCRIPTOR=_OPDEF, __module__='tensorflow.core.framework.op_def_pb2'))
A:tensorflow.core.framework.op_def_pb2.OpDeprecation->google.protobuf.reflection.GeneratedProtocolMessageType('OpDeprecation', (_message.Message,), dict(DESCRIPTOR=_OPDEPRECATION, __module__='tensorflow.core.framework.op_def_pb2'))
A:tensorflow.core.framework.op_def_pb2.OpList->google.protobuf.reflection.GeneratedProtocolMessageType('OpList', (_message.Message,), dict(DESCRIPTOR=_OPLIST, __module__='tensorflow.core.framework.op_def_pb2'))
A:tensorflow.core.framework.op_def_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x0bOpDefProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/tensor_description_pb2.py----------------------------------------
A:tensorflow.core.framework.tensor_description_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.tensor_description_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/tensor_description.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n2tensorflow/core/framework/tensor_description.proto\x12\ntensorflow\x1a%tensorflow/core/framework/types.proto\x1a,tensorflow/core/framework/tensor_shape.proto\x1a6tensorflow/core/framework/allocation_description.proto"¨\x01\n\x11TensorDescription\x12#\n\x05dtype\x18\x01 \x01(\x0e2\x14.tensorflow.DataType\x12+\n\x05shape\x18\x02 \x01(\x0b2\x1c.tensorflow.TensorShapeProto\x12A\n\x16allocation_description\x18\x04 \x01(\x0b2!.tensorflow.AllocationDescriptionB8\n\x18org.tensorflow.frameworkB\x17TensorDescriptionProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_types__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_tensor__shape__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_allocation__description__pb2.DESCRIPTOR])
A:tensorflow.core.framework.tensor_description_pb2._TENSORDESCRIPTION->google.protobuf.descriptor.Descriptor(name='TensorDescription', full_name='tensorflow.TensorDescription', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='dtype', full_name='tensorflow.TensorDescription.dtype', index=0, number=1, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='shape', full_name='tensorflow.TensorDescription.shape', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='allocation_description', full_name='tensorflow.TensorDescription.allocation_description', index=2, number=4, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=208, serialized_end=376)
A:tensorflow.core.framework.tensor_description_pb2.TensorDescription->google.protobuf.reflection.GeneratedProtocolMessageType('TensorDescription', (_message.Message,), dict(DESCRIPTOR=_TENSORDESCRIPTION, __module__='tensorflow.core.framework.tensor_description_pb2'))
A:tensorflow.core.framework.tensor_description_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x17TensorDescriptionProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/types_pb2.py----------------------------------------
A:tensorflow.core.framework.types_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.types_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/types.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n%tensorflow/core/framework/types.proto\x12\ntensorflow*Â\x05\n\x08DataType\x12\x0e\n\nDT_INVALID\x10\x00\x12\x0c\n\x08DT_FLOAT\x10\x01\x12\r\n\tDT_DOUBLE\x10\x02\x12\x0c\n\x08DT_INT32\x10\x03\x12\x0c\n\x08DT_UINT8\x10\x04\x12\x0c\n\x08DT_INT16\x10\x05\x12\x0b\n\x07DT_INT8\x10\x06\x12\r\n\tDT_STRING\x10\x07\x12\x10\n\x0cDT_COMPLEX64\x10\x08\x12\x0c\n\x08DT_INT64\x10\t\x12\x0b\n\x07DT_BOOL\x10\n\x12\x0c\n\x08DT_QINT8\x10\x0b\x12\r\n\tDT_QUINT8\x10\x0c\x12\r\n\tDT_QINT32\x10\r\x12\x0f\n\x0bDT_BFLOAT16\x10\x0e\x12\r\n\tDT_QINT16\x10\x0f\x12\x0e\n\nDT_QUINT16\x10\x10\x12\r\n\tDT_UINT16\x10\x11\x12\x11\n\rDT_COMPLEX128\x10\x12\x12\x0b\n\x07DT_HALF\x10\x13\x12\x0f\n\x0bDT_RESOURCE\x10\x14\x12\x10\n\x0cDT_FLOAT_REF\x10e\x12\x11\n\rDT_DOUBLE_REF\x10f\x12\x10\n\x0cDT_INT32_REF\x10g\x12\x10\n\x0cDT_UINT8_REF\x10h\x12\x10\n\x0cDT_INT16_REF\x10i\x12\x0f\n\x0bDT_INT8_REF\x10j\x12\x11\n\rDT_STRING_REF\x10k\x12\x14\n\x10DT_COMPLEX64_REF\x10l\x12\x10\n\x0cDT_INT64_REF\x10m\x12\x0f\n\x0bDT_BOOL_REF\x10n\x12\x10\n\x0cDT_QINT8_REF\x10o\x12\x11\n\rDT_QUINT8_REF\x10p\x12\x11\n\rDT_QINT32_REF\x10q\x12\x13\n\x0fDT_BFLOAT16_REF\x10r\x12\x11\n\rDT_QINT16_REF\x10s\x12\x12\n\x0eDT_QUINT16_REF\x10t\x12\x11\n\rDT_UINT16_REF\x10u\x12\x15\n\x11DT_COMPLEX128_REF\x10v\x12\x0f\n\x0bDT_HALF_REF\x10w\x12\x13\n\x0fDT_RESOURCE_REF\x10xB,\n\x18org.tensorflow.frameworkB\x0bTypesProtosP\x01ø\x01\x01b\x06proto3'))
A:tensorflow.core.framework.types_pb2._DATATYPE->google.protobuf.descriptor.EnumDescriptor(name='DataType', full_name='tensorflow.DataType', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='DT_INVALID', index=0, number=0, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_FLOAT', index=1, number=1, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_DOUBLE', index=2, number=2, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_INT32', index=3, number=3, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_UINT8', index=4, number=4, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_INT16', index=5, number=5, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_INT8', index=6, number=6, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_STRING', index=7, number=7, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_COMPLEX64', index=8, number=8, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_INT64', index=9, number=9, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_BOOL', index=10, number=10, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_QINT8', index=11, number=11, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_QUINT8', index=12, number=12, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_QINT32', index=13, number=13, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_BFLOAT16', index=14, number=14, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_QINT16', index=15, number=15, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_QUINT16', index=16, number=16, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_UINT16', index=17, number=17, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_COMPLEX128', index=18, number=18, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_HALF', index=19, number=19, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_RESOURCE', index=20, number=20, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_FLOAT_REF', index=21, number=101, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_DOUBLE_REF', index=22, number=102, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_INT32_REF', index=23, number=103, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_UINT8_REF', index=24, number=104, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_INT16_REF', index=25, number=105, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_INT8_REF', index=26, number=106, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_STRING_REF', index=27, number=107, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_COMPLEX64_REF', index=28, number=108, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_INT64_REF', index=29, number=109, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_BOOL_REF', index=30, number=110, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_QINT8_REF', index=31, number=111, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_QUINT8_REF', index=32, number=112, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_QINT32_REF', index=33, number=113, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_BFLOAT16_REF', index=34, number=114, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_QINT16_REF', index=35, number=115, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_QUINT16_REF', index=36, number=116, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_UINT16_REF', index=37, number=117, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_COMPLEX128_REF', index=38, number=118, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_HALF_REF', index=39, number=119, options=None, type=None), _descriptor.EnumValueDescriptor(name='DT_RESOURCE_REF', index=40, number=120, options=None, type=None)], containing_type=None, options=None, serialized_start=54, serialized_end=760)
A:tensorflow.core.framework.types_pb2.DataType->google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper(_DATATYPE)
A:tensorflow.core.framework.types_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x0bTypesProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/framework/node_def_pb2.py----------------------------------------
A:tensorflow.core.framework.node_def_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.framework.node_def_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/framework/node_def.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n(tensorflow/core/framework/node_def.proto\x12\ntensorflow\x1a*tensorflow/core/framework/attr_value.proto"³\x01\n\x07NodeDef\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\n\n\x02op\x18\x02 \x01(\t\x12\r\n\x05input\x18\x03 \x03(\t\x12\x0e\n\x06device\x18\x04 \x01(\t\x12+\n\x04attr\x18\x05 \x03(\x0b2\x1d.tensorflow.NodeDef.AttrEntry\x1aB\n\tAttrEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12$\n\x05value\x18\x02 \x01(\x0b2\x15.tensorflow.AttrValue:\x028\x01B*\n\x18org.tensorflow.frameworkB\tNodeProtoP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_attr__value__pb2.DESCRIPTOR])
A:tensorflow.core.framework.node_def_pb2._NODEDEF_ATTRENTRY->google.protobuf.descriptor.Descriptor(name='AttrEntry', full_name='tensorflow.NodeDef.AttrEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.NodeDef.AttrEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.NodeDef.AttrEntry.value', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=214, serialized_end=280)
A:tensorflow.core.framework.node_def_pb2._NODEDEF->google.protobuf.descriptor.Descriptor(name='NodeDef', full_name='tensorflow.NodeDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.NodeDef.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='op', full_name='tensorflow.NodeDef.op', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='input', full_name='tensorflow.NodeDef.input', index=2, number=3, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='device', full_name='tensorflow.NodeDef.device', index=3, number=4, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='attr', full_name='tensorflow.NodeDef.attr', index=4, number=5, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_NODEDEF_ATTRENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=101, serialized_end=280)
A:tensorflow.core.framework.node_def_pb2.NodeDef->google.protobuf.reflection.GeneratedProtocolMessageType('NodeDef', (_message.Message,), dict(AttrEntry=_reflection.GeneratedProtocolMessageType('AttrEntry', (_message.Message,), dict(DESCRIPTOR=_NODEDEF_ATTRENTRY, __module__='tensorflow.core.framework.node_def_pb2')), DESCRIPTOR=_NODEDEF, __module__='tensorflow.core.framework.node_def_pb2'))
A:tensorflow.core.framework.node_def_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\tNodeProtoP\x01ø\x01\x01'))
A:tensorflow.core.framework.node_def_pb2._NODEDEF_ATTRENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/protobuf/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/protobuf/tensorflow_server_pb2.py----------------------------------------
A:tensorflow.core.protobuf.tensorflow_server_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.protobuf.tensorflow_server_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/protobuf/tensorflow_server.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n0tensorflow/core/protobuf/tensorflow_server.proto\x12\ntensorflow\x1a%tensorflow/core/protobuf/config.proto"r\n\x06JobDef\x12\x0c\n\x04name\x18\x01 \x01(\t\x12,\n\x05tasks\x18\x02 \x03(\x0b2\x1d.tensorflow.JobDef.TasksEntry\x1a,\n\nTasksEntry\x12\x0b\n\x03key\x18\x01 \x01(\x05\x12\r\n\x05value\x18\x02 \x01(\t:\x028\x01"-\n\nClusterDef\x12\x1f\n\x03job\x18\x01 \x03(\x0b2\x12.tensorflow.JobDef"¥\x01\n\tServerDef\x12\'\n\x07cluster\x18\x01 \x01(\x0b2\x16.tensorflow.ClusterDef\x12\x10\n\x08job_name\x18\x02 \x01(\t\x12\x12\n\ntask_index\x18\x03 \x01(\x05\x127\n\x16default_session_config\x18\x04 \x01(\x0b2\x17.tensorflow.ConfigProto\x12\x10\n\x08protocol\x18\x05 \x01(\tB/\n\x1aorg.tensorflow.distruntimeB\x0cServerProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_protobuf_dot_config__pb2.DESCRIPTOR])
A:tensorflow.core.protobuf.tensorflow_server_pb2._JOBDEF_TASKSENTRY->google.protobuf.descriptor.Descriptor(name='TasksEntry', full_name='tensorflow.JobDef.TasksEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.JobDef.TasksEntry.key', index=0, number=1, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.JobDef.TasksEntry.value', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=173, serialized_end=217)
A:tensorflow.core.protobuf.tensorflow_server_pb2._JOBDEF->google.protobuf.descriptor.Descriptor(name='JobDef', full_name='tensorflow.JobDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.JobDef.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tasks', full_name='tensorflow.JobDef.tasks', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_JOBDEF_TASKSENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=103, serialized_end=217)
A:tensorflow.core.protobuf.tensorflow_server_pb2._CLUSTERDEF->google.protobuf.descriptor.Descriptor(name='ClusterDef', full_name='tensorflow.ClusterDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='job', full_name='tensorflow.ClusterDef.job', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=219, serialized_end=264)
A:tensorflow.core.protobuf.tensorflow_server_pb2._SERVERDEF->google.protobuf.descriptor.Descriptor(name='ServerDef', full_name='tensorflow.ServerDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='cluster', full_name='tensorflow.ServerDef.cluster', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='job_name', full_name='tensorflow.ServerDef.job_name', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='task_index', full_name='tensorflow.ServerDef.task_index', index=2, number=3, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='default_session_config', full_name='tensorflow.ServerDef.default_session_config', index=3, number=4, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='protocol', full_name='tensorflow.ServerDef.protocol', index=4, number=5, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=267, serialized_end=432)
A:tensorflow.core.protobuf.tensorflow_server_pb2.JobDef->google.protobuf.reflection.GeneratedProtocolMessageType('JobDef', (_message.Message,), dict(TasksEntry=_reflection.GeneratedProtocolMessageType('TasksEntry', (_message.Message,), dict(DESCRIPTOR=_JOBDEF_TASKSENTRY, __module__='tensorflow.core.protobuf.tensorflow_server_pb2')), DESCRIPTOR=_JOBDEF, __module__='tensorflow.core.protobuf.tensorflow_server_pb2'))
A:tensorflow.core.protobuf.tensorflow_server_pb2.ClusterDef->google.protobuf.reflection.GeneratedProtocolMessageType('ClusterDef', (_message.Message,), dict(DESCRIPTOR=_CLUSTERDEF, __module__='tensorflow.core.protobuf.tensorflow_server_pb2'))
A:tensorflow.core.protobuf.tensorflow_server_pb2.ServerDef->google.protobuf.reflection.GeneratedProtocolMessageType('ServerDef', (_message.Message,), dict(DESCRIPTOR=_SERVERDEF, __module__='tensorflow.core.protobuf.tensorflow_server_pb2'))
A:tensorflow.core.protobuf.tensorflow_server_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x1aorg.tensorflow.distruntimeB\x0cServerProtosP\x01ø\x01\x01'))
A:tensorflow.core.protobuf.tensorflow_server_pb2._JOBDEF_TASKSENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/protobuf/meta_graph_pb2.py----------------------------------------
A:tensorflow.core.protobuf.meta_graph_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.protobuf.meta_graph_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/protobuf/meta_graph.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n)tensorflow/core/protobuf/meta_graph.proto\x12\ntensorflow\x1a\x19google/protobuf/any.proto\x1a%tensorflow/core/framework/graph.proto\x1a&tensorflow/core/framework/op_def.proto\x1a,tensorflow/core/framework/tensor_shape.proto\x1a%tensorflow/core/framework/types.proto\x1a$tensorflow/core/protobuf/saver.proto"Ã\x05\n\x0cMetaGraphDef\x12;\n\rmeta_info_def\x18\x01 \x01(\x0b2$.tensorflow.MetaGraphDef.MetaInfoDef\x12\'\n\tgraph_def\x18\x02 \x01(\x0b2\x14.tensorflow.GraphDef\x12\'\n\tsaver_def\x18\x03 \x01(\x0b2\x14.tensorflow.SaverDef\x12C\n\x0ecollection_def\x18\x04 \x03(\x0b2+.tensorflow.MetaGraphDef.CollectionDefEntry\x12A\n\rsignature_def\x18\x05 \x03(\x0b2*.tensorflow.MetaGraphDef.SignatureDefEntry\x120\n\x0easset_file_def\x18\x06 \x03(\x0b2\x18.tensorflow.AssetFileDef\x1aÉ\x01\n\x0bMetaInfoDef\x12\x1a\n\x12meta_graph_version\x18\x01 \x01(\t\x12,\n\x10stripped_op_list\x18\x02 \x01(\x0b2\x12.tensorflow.OpList\x12&\n\x08any_info\x18\x03 \x01(\x0b2\x14.google.protobuf.Any\x12\x0c\n\x04tags\x18\x04 \x03(\t\x12\x1a\n\x12tensorflow_version\x18\x05 \x01(\t\x12\x1e\n\x16tensorflow_git_version\x18\x06 \x01(\t\x1aO\n\x12CollectionDefEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12(\n\x05value\x18\x02 \x01(\x0b2\x19.tensorflow.CollectionDef:\x028\x01\x1aM\n\x11SignatureDefEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\'\n\x05value\x18\x02 \x01(\x0b2\x18.tensorflow.SignatureDef:\x028\x01"ß\x03\n\rCollectionDef\x127\n\tnode_list\x18\x01 \x01(\x0b2".tensorflow.CollectionDef.NodeListH\x00\x129\n\nbytes_list\x18\x02 \x01(\x0b2#.tensorflow.CollectionDef.BytesListH\x00\x129\n\nint64_list\x18\x03 \x01(\x0b2#.tensorflow.CollectionDef.Int64ListH\x00\x129\n\nfloat_list\x18\x04 \x01(\x0b2#.tensorflow.CollectionDef.FloatListH\x00\x125\n\x08any_list\x18\x05 \x01(\x0b2!.tensorflow.CollectionDef.AnyListH\x00\x1a\x19\n\x08NodeList\x12\r\n\x05value\x18\x01 \x03(\t\x1a\x1a\n\tBytesList\x12\r\n\x05value\x18\x01 \x03(\x0c\x1a\x1e\n\tInt64List\x12\x11\n\x05value\x18\x01 \x03(\x03B\x02\x10\x01\x1a\x1e\n\tFloatList\x12\x11\n\x05value\x18\x01 \x03(\x02B\x02\x10\x01\x1a.\n\x07AnyList\x12#\n\x05value\x18\x01 \x03(\x0b2\x14.google.protobuf.AnyB\x06\n\x04kind"s\n\nTensorInfo\x12\x0c\n\x04name\x18\x01 \x01(\t\x12#\n\x05dtype\x18\x02 \x01(\x0e2\x14.tensorflow.DataType\x122\n\x0ctensor_shape\x18\x03 \x01(\x0b2\x1c.tensorflow.TensorShapeProto"\xa0\x02\n\x0cSignatureDef\x124\n\x06inputs\x18\x01 \x03(\x0b2$.tensorflow.SignatureDef.InputsEntry\x126\n\x07outputs\x18\x02 \x03(\x0b2%.tensorflow.SignatureDef.OutputsEntry\x12\x13\n\x0bmethod_name\x18\x03 \x01(\t\x1aE\n\x0bInputsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12%\n\x05value\x18\x02 \x01(\x0b2\x16.tensorflow.TensorInfo:\x028\x01\x1aF\n\x0cOutputsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12%\n\x05value\x18\x02 \x01(\x0b2\x16.tensorflow.TensorInfo:\x028\x01"M\n\x0cAssetFileDef\x12+\n\x0btensor_info\x18\x01 \x01(\x0b2\x16.tensorflow.TensorInfo\x12\x10\n\x08filename\x18\x02 \x01(\tB0\n\x18org.tensorflow.frameworkB\x0fMetaGraphProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[google_dot_protobuf_dot_any__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_graph__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_op__def__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_tensor__shape__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_types__pb2.DESCRIPTOR, tensorflow_dot_core_dot_protobuf_dot_saver__pb2.DESCRIPTOR])
A:tensorflow.core.protobuf.meta_graph_pb2._METAGRAPHDEF_METAINFODEF->google.protobuf.descriptor.Descriptor(name='MetaInfoDef', full_name='tensorflow.MetaGraphDef.MetaInfoDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='meta_graph_version', full_name='tensorflow.MetaGraphDef.MetaInfoDef.meta_graph_version', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='stripped_op_list', full_name='tensorflow.MetaGraphDef.MetaInfoDef.stripped_op_list', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='any_info', full_name='tensorflow.MetaGraphDef.MetaInfoDef.any_info', index=2, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tags', full_name='tensorflow.MetaGraphDef.MetaInfoDef.tags', index=3, number=4, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tensorflow_version', full_name='tensorflow.MetaGraphDef.MetaInfoDef.tensorflow_version', index=4, number=5, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tensorflow_git_version', full_name='tensorflow.MetaGraphDef.MetaInfoDef.tensorflow_git_version', index=5, number=6, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=633, serialized_end=834)
A:tensorflow.core.protobuf.meta_graph_pb2._METAGRAPHDEF_COLLECTIONDEFENTRY->google.protobuf.descriptor.Descriptor(name='CollectionDefEntry', full_name='tensorflow.MetaGraphDef.CollectionDefEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.MetaGraphDef.CollectionDefEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.MetaGraphDef.CollectionDefEntry.value', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=836, serialized_end=915)
A:tensorflow.core.protobuf.meta_graph_pb2._METAGRAPHDEF_SIGNATUREDEFENTRY->google.protobuf.descriptor.Descriptor(name='SignatureDefEntry', full_name='tensorflow.MetaGraphDef.SignatureDefEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.MetaGraphDef.SignatureDefEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.MetaGraphDef.SignatureDefEntry.value', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=917, serialized_end=994)
A:tensorflow.core.protobuf.meta_graph_pb2._METAGRAPHDEF->google.protobuf.descriptor.Descriptor(name='MetaGraphDef', full_name='tensorflow.MetaGraphDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='meta_info_def', full_name='tensorflow.MetaGraphDef.meta_info_def', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='graph_def', full_name='tensorflow.MetaGraphDef.graph_def', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='saver_def', full_name='tensorflow.MetaGraphDef.saver_def', index=2, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='collection_def', full_name='tensorflow.MetaGraphDef.collection_def', index=3, number=4, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='signature_def', full_name='tensorflow.MetaGraphDef.signature_def', index=4, number=5, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='asset_file_def', full_name='tensorflow.MetaGraphDef.asset_file_def', index=5, number=6, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_METAGRAPHDEF_METAINFODEF, _METAGRAPHDEF_COLLECTIONDEFENTRY, _METAGRAPHDEF_SIGNATUREDEFENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=287, serialized_end=994)
A:tensorflow.core.protobuf.meta_graph_pb2._COLLECTIONDEF_NODELIST->google.protobuf.descriptor.Descriptor(name='NodeList', full_name='tensorflow.CollectionDef.NodeList', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='value', full_name='tensorflow.CollectionDef.NodeList.value', index=0, number=1, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1303, serialized_end=1328)
A:tensorflow.core.protobuf.meta_graph_pb2._COLLECTIONDEF_BYTESLIST->google.protobuf.descriptor.Descriptor(name='BytesList', full_name='tensorflow.CollectionDef.BytesList', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='value', full_name='tensorflow.CollectionDef.BytesList.value', index=0, number=1, type=12, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1330, serialized_end=1356)
A:tensorflow.core.protobuf.meta_graph_pb2._COLLECTIONDEF_INT64LIST->google.protobuf.descriptor.Descriptor(name='Int64List', full_name='tensorflow.CollectionDef.Int64List', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='value', full_name='tensorflow.CollectionDef.Int64List.value', index=0, number=1, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01')))], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1358, serialized_end=1388)
A:tensorflow.core.protobuf.meta_graph_pb2._COLLECTIONDEF_FLOATLIST->google.protobuf.descriptor.Descriptor(name='FloatList', full_name='tensorflow.CollectionDef.FloatList', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='value', full_name='tensorflow.CollectionDef.FloatList.value', index=0, number=1, type=2, cpp_type=6, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01')))], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1390, serialized_end=1420)
A:tensorflow.core.protobuf.meta_graph_pb2._COLLECTIONDEF_ANYLIST->google.protobuf.descriptor.Descriptor(name='AnyList', full_name='tensorflow.CollectionDef.AnyList', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='value', full_name='tensorflow.CollectionDef.AnyList.value', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1422, serialized_end=1468)
A:tensorflow.core.protobuf.meta_graph_pb2._COLLECTIONDEF->google.protobuf.descriptor.Descriptor(name='CollectionDef', full_name='tensorflow.CollectionDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='node_list', full_name='tensorflow.CollectionDef.node_list', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='bytes_list', full_name='tensorflow.CollectionDef.bytes_list', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='int64_list', full_name='tensorflow.CollectionDef.int64_list', index=2, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='float_list', full_name='tensorflow.CollectionDef.float_list', index=3, number=4, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='any_list', full_name='tensorflow.CollectionDef.any_list', index=4, number=5, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_COLLECTIONDEF_NODELIST, _COLLECTIONDEF_BYTESLIST, _COLLECTIONDEF_INT64LIST, _COLLECTIONDEF_FLOATLIST, _COLLECTIONDEF_ANYLIST], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[_descriptor.OneofDescriptor(name='kind', full_name='tensorflow.CollectionDef.kind', index=0, containing_type=None, fields=[])], serialized_start=997, serialized_end=1476)
A:tensorflow.core.protobuf.meta_graph_pb2._TENSORINFO->google.protobuf.descriptor.Descriptor(name='TensorInfo', full_name='tensorflow.TensorInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.TensorInfo.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='dtype', full_name='tensorflow.TensorInfo.dtype', index=1, number=2, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tensor_shape', full_name='tensorflow.TensorInfo.tensor_shape', index=2, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1478, serialized_end=1593)
A:tensorflow.core.protobuf.meta_graph_pb2._SIGNATUREDEF_INPUTSENTRY->google.protobuf.descriptor.Descriptor(name='InputsEntry', full_name='tensorflow.SignatureDef.InputsEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.SignatureDef.InputsEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.SignatureDef.InputsEntry.value', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1743, serialized_end=1812)
A:tensorflow.core.protobuf.meta_graph_pb2._SIGNATUREDEF_OUTPUTSENTRY->google.protobuf.descriptor.Descriptor(name='OutputsEntry', full_name='tensorflow.SignatureDef.OutputsEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.SignatureDef.OutputsEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.SignatureDef.OutputsEntry.value', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1814, serialized_end=1884)
A:tensorflow.core.protobuf.meta_graph_pb2._SIGNATUREDEF->google.protobuf.descriptor.Descriptor(name='SignatureDef', full_name='tensorflow.SignatureDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='inputs', full_name='tensorflow.SignatureDef.inputs', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='outputs', full_name='tensorflow.SignatureDef.outputs', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='method_name', full_name='tensorflow.SignatureDef.method_name', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_SIGNATUREDEF_INPUTSENTRY, _SIGNATUREDEF_OUTPUTSENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1596, serialized_end=1884)
A:tensorflow.core.protobuf.meta_graph_pb2._ASSETFILEDEF->google.protobuf.descriptor.Descriptor(name='AssetFileDef', full_name='tensorflow.AssetFileDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='tensor_info', full_name='tensorflow.AssetFileDef.tensor_info', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='filename', full_name='tensorflow.AssetFileDef.filename', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1886, serialized_end=1963)
A:tensorflow.core.protobuf.meta_graph_pb2.MetaGraphDef->google.protobuf.reflection.GeneratedProtocolMessageType('MetaGraphDef', (_message.Message,), dict(MetaInfoDef=_reflection.GeneratedProtocolMessageType('MetaInfoDef', (_message.Message,), dict(DESCRIPTOR=_METAGRAPHDEF_METAINFODEF, __module__='tensorflow.core.protobuf.meta_graph_pb2')), CollectionDefEntry=_reflection.GeneratedProtocolMessageType('CollectionDefEntry', (_message.Message,), dict(DESCRIPTOR=_METAGRAPHDEF_COLLECTIONDEFENTRY, __module__='tensorflow.core.protobuf.meta_graph_pb2')), SignatureDefEntry=_reflection.GeneratedProtocolMessageType('SignatureDefEntry', (_message.Message,), dict(DESCRIPTOR=_METAGRAPHDEF_SIGNATUREDEFENTRY, __module__='tensorflow.core.protobuf.meta_graph_pb2')), DESCRIPTOR=_METAGRAPHDEF, __module__='tensorflow.core.protobuf.meta_graph_pb2'))
A:tensorflow.core.protobuf.meta_graph_pb2.CollectionDef->google.protobuf.reflection.GeneratedProtocolMessageType('CollectionDef', (_message.Message,), dict(NodeList=_reflection.GeneratedProtocolMessageType('NodeList', (_message.Message,), dict(DESCRIPTOR=_COLLECTIONDEF_NODELIST, __module__='tensorflow.core.protobuf.meta_graph_pb2')), BytesList=_reflection.GeneratedProtocolMessageType('BytesList', (_message.Message,), dict(DESCRIPTOR=_COLLECTIONDEF_BYTESLIST, __module__='tensorflow.core.protobuf.meta_graph_pb2')), Int64List=_reflection.GeneratedProtocolMessageType('Int64List', (_message.Message,), dict(DESCRIPTOR=_COLLECTIONDEF_INT64LIST, __module__='tensorflow.core.protobuf.meta_graph_pb2')), FloatList=_reflection.GeneratedProtocolMessageType('FloatList', (_message.Message,), dict(DESCRIPTOR=_COLLECTIONDEF_FLOATLIST, __module__='tensorflow.core.protobuf.meta_graph_pb2')), AnyList=_reflection.GeneratedProtocolMessageType('AnyList', (_message.Message,), dict(DESCRIPTOR=_COLLECTIONDEF_ANYLIST, __module__='tensorflow.core.protobuf.meta_graph_pb2')), DESCRIPTOR=_COLLECTIONDEF, __module__='tensorflow.core.protobuf.meta_graph_pb2'))
A:tensorflow.core.protobuf.meta_graph_pb2.TensorInfo->google.protobuf.reflection.GeneratedProtocolMessageType('TensorInfo', (_message.Message,), dict(DESCRIPTOR=_TENSORINFO, __module__='tensorflow.core.protobuf.meta_graph_pb2'))
A:tensorflow.core.protobuf.meta_graph_pb2.SignatureDef->google.protobuf.reflection.GeneratedProtocolMessageType('SignatureDef', (_message.Message,), dict(InputsEntry=_reflection.GeneratedProtocolMessageType('InputsEntry', (_message.Message,), dict(DESCRIPTOR=_SIGNATUREDEF_INPUTSENTRY, __module__='tensorflow.core.protobuf.meta_graph_pb2')), OutputsEntry=_reflection.GeneratedProtocolMessageType('OutputsEntry', (_message.Message,), dict(DESCRIPTOR=_SIGNATUREDEF_OUTPUTSENTRY, __module__='tensorflow.core.protobuf.meta_graph_pb2')), DESCRIPTOR=_SIGNATUREDEF, __module__='tensorflow.core.protobuf.meta_graph_pb2'))
A:tensorflow.core.protobuf.meta_graph_pb2.AssetFileDef->google.protobuf.reflection.GeneratedProtocolMessageType('AssetFileDef', (_message.Message,), dict(DESCRIPTOR=_ASSETFILEDEF, __module__='tensorflow.core.protobuf.meta_graph_pb2'))
A:tensorflow.core.protobuf.meta_graph_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x0fMetaGraphProtosP\x01ø\x01\x01'))
A:tensorflow.core.protobuf.meta_graph_pb2._METAGRAPHDEF_COLLECTIONDEFENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))
A:tensorflow.core.protobuf.meta_graph_pb2._METAGRAPHDEF_SIGNATUREDEFENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))
A:tensorflow.core.protobuf.meta_graph_pb2._COLLECTIONDEF_INT64LIST.fields_by_name['value']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.protobuf.meta_graph_pb2._COLLECTIONDEF_FLOATLIST.fields_by_name['value']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.core.protobuf.meta_graph_pb2._SIGNATUREDEF_INPUTSENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))
A:tensorflow.core.protobuf.meta_graph_pb2._SIGNATUREDEF_OUTPUTSENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/protobuf/control_flow_pb2.py----------------------------------------
A:tensorflow.core.protobuf.control_flow_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.protobuf.control_flow_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/protobuf/control_flow.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n+tensorflow/core/protobuf/control_flow.proto\x12\ntensorflow"\x96\x01\n\tValuesDef\x12\x0e\n\x06values\x18\x01 \x03(\t\x12B\n\x0fexternal_values\x18\x02 \x03(\x0b2).tensorflow.ValuesDef.ExternalValuesEntry\x1a5\n\x13ExternalValuesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x028\x01"\x88\x01\n\x0eCondContextDef\x12\x14\n\x0ccontext_name\x18\x01 \x01(\t\x12\x11\n\tpred_name\x18\x02 \x01(\t\x12\x12\n\npivot_name\x18\x03 \x01(\t\x12\x0e\n\x06branch\x18\x04 \x01(\x05\x12)\n\nvalues_def\x18\x05 \x01(\x0b2\x15.tensorflow.ValuesDef"þ\x01\n\x0fWhileContextDef\x12\x14\n\x0ccontext_name\x18\x01 \x01(\t\x12\x1b\n\x13parallel_iterations\x18\x02 \x01(\x05\x12\x11\n\tback_prop\x18\x03 \x01(\x08\x12\x13\n\x0bswap_memory\x18\x04 \x01(\x08\x12\x12\n\npivot_name\x18\x05 \x01(\t\x12\x1b\n\x13pivot_for_pred_name\x18\x06 \x01(\t\x12\x1b\n\x13pivot_for_body_name\x18\x07 \x01(\t\x12\x17\n\x0floop_exit_names\x18\x08 \x03(\t\x12)\n\nvalues_def\x18\t \x01(\x0b2\x15.tensorflow.ValuesDefB2\n\x18org.tensorflow.frameworkB\x11ControlFlowProtosP\x01ø\x01\x01b\x06proto3'))
A:tensorflow.core.protobuf.control_flow_pb2._VALUESDEF_EXTERNALVALUESENTRY->google.protobuf.descriptor.Descriptor(name='ExternalValuesEntry', full_name='tensorflow.ValuesDef.ExternalValuesEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.ValuesDef.ExternalValuesEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.ValuesDef.ExternalValuesEntry.value', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=157, serialized_end=210)
A:tensorflow.core.protobuf.control_flow_pb2._VALUESDEF->google.protobuf.descriptor.Descriptor(name='ValuesDef', full_name='tensorflow.ValuesDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='values', full_name='tensorflow.ValuesDef.values', index=0, number=1, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='external_values', full_name='tensorflow.ValuesDef.external_values', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_VALUESDEF_EXTERNALVALUESENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=60, serialized_end=210)
A:tensorflow.core.protobuf.control_flow_pb2._CONDCONTEXTDEF->google.protobuf.descriptor.Descriptor(name='CondContextDef', full_name='tensorflow.CondContextDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='context_name', full_name='tensorflow.CondContextDef.context_name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='pred_name', full_name='tensorflow.CondContextDef.pred_name', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='pivot_name', full_name='tensorflow.CondContextDef.pivot_name', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='branch', full_name='tensorflow.CondContextDef.branch', index=3, number=4, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='values_def', full_name='tensorflow.CondContextDef.values_def', index=4, number=5, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=213, serialized_end=349)
A:tensorflow.core.protobuf.control_flow_pb2._WHILECONTEXTDEF->google.protobuf.descriptor.Descriptor(name='WhileContextDef', full_name='tensorflow.WhileContextDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='context_name', full_name='tensorflow.WhileContextDef.context_name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='parallel_iterations', full_name='tensorflow.WhileContextDef.parallel_iterations', index=1, number=2, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='back_prop', full_name='tensorflow.WhileContextDef.back_prop', index=2, number=3, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='swap_memory', full_name='tensorflow.WhileContextDef.swap_memory', index=3, number=4, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='pivot_name', full_name='tensorflow.WhileContextDef.pivot_name', index=4, number=5, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='pivot_for_pred_name', full_name='tensorflow.WhileContextDef.pivot_for_pred_name', index=5, number=6, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='pivot_for_body_name', full_name='tensorflow.WhileContextDef.pivot_for_body_name', index=6, number=7, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='loop_exit_names', full_name='tensorflow.WhileContextDef.loop_exit_names', index=7, number=8, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='values_def', full_name='tensorflow.WhileContextDef.values_def', index=8, number=9, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=352, serialized_end=606)
A:tensorflow.core.protobuf.control_flow_pb2.ValuesDef->google.protobuf.reflection.GeneratedProtocolMessageType('ValuesDef', (_message.Message,), dict(ExternalValuesEntry=_reflection.GeneratedProtocolMessageType('ExternalValuesEntry', (_message.Message,), dict(DESCRIPTOR=_VALUESDEF_EXTERNALVALUESENTRY, __module__='tensorflow.core.protobuf.control_flow_pb2')), DESCRIPTOR=_VALUESDEF, __module__='tensorflow.core.protobuf.control_flow_pb2'))
A:tensorflow.core.protobuf.control_flow_pb2.CondContextDef->google.protobuf.reflection.GeneratedProtocolMessageType('CondContextDef', (_message.Message,), dict(DESCRIPTOR=_CONDCONTEXTDEF, __module__='tensorflow.core.protobuf.control_flow_pb2'))
A:tensorflow.core.protobuf.control_flow_pb2.WhileContextDef->google.protobuf.reflection.GeneratedProtocolMessageType('WhileContextDef', (_message.Message,), dict(DESCRIPTOR=_WHILECONTEXTDEF, __module__='tensorflow.core.protobuf.control_flow_pb2'))
A:tensorflow.core.protobuf.control_flow_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x11ControlFlowProtosP\x01ø\x01\x01'))
A:tensorflow.core.protobuf.control_flow_pb2._VALUESDEF_EXTERNALVALUESENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/protobuf/saver_pb2.py----------------------------------------
A:tensorflow.core.protobuf.saver_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.protobuf.saver_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/protobuf/saver.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n$tensorflow/core/protobuf/saver.proto\x12\ntensorflow"\x9e\x02\n\x08SaverDef\x12\x1c\n\x14filename_tensor_name\x18\x01 \x01(\t\x12\x18\n\x10save_tensor_name\x18\x02 \x01(\t\x12\x17\n\x0frestore_op_name\x18\x03 \x01(\t\x12\x13\n\x0bmax_to_keep\x18\x04 \x01(\x05\x12\x0f\n\x07sharded\x18\x05 \x01(\x08\x12%\n\x1dkeep_checkpoint_every_n_hours\x18\x06 \x01(\x02\x12=\n\x07version\x18\x07 \x01(\x0e2,.tensorflow.SaverDef.CheckpointFormatVersion"5\n\x17CheckpointFormatVersion\x12\n\n\x06LEGACY\x10\x00\x12\x06\n\x02V1\x10\x01\x12\x06\n\x02V2\x10\x02B\'\n\x13org.tensorflow.utilB\x0bSaverProtosP\x01ø\x01\x01b\x06proto3'))
A:tensorflow.core.protobuf.saver_pb2._SAVERDEF_CHECKPOINTFORMATVERSION->google.protobuf.descriptor.EnumDescriptor(name='CheckpointFormatVersion', full_name='tensorflow.SaverDef.CheckpointFormatVersion', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='LEGACY', index=0, number=0, options=None, type=None), _descriptor.EnumValueDescriptor(name='V1', index=1, number=1, options=None, type=None), _descriptor.EnumValueDescriptor(name='V2', index=2, number=2, options=None, type=None)], containing_type=None, options=None, serialized_start=286, serialized_end=339)
A:tensorflow.core.protobuf.saver_pb2._SAVERDEF->google.protobuf.descriptor.Descriptor(name='SaverDef', full_name='tensorflow.SaverDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='filename_tensor_name', full_name='tensorflow.SaverDef.filename_tensor_name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='save_tensor_name', full_name='tensorflow.SaverDef.save_tensor_name', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='restore_op_name', full_name='tensorflow.SaverDef.restore_op_name', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='max_to_keep', full_name='tensorflow.SaverDef.max_to_keep', index=3, number=4, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='sharded', full_name='tensorflow.SaverDef.sharded', index=4, number=5, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='keep_checkpoint_every_n_hours', full_name='tensorflow.SaverDef.keep_checkpoint_every_n_hours', index=5, number=6, type=2, cpp_type=6, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='version', full_name='tensorflow.SaverDef.version', index=6, number=7, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[_SAVERDEF_CHECKPOINTFORMATVERSION], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=53, serialized_end=339)
A:tensorflow.core.protobuf.saver_pb2.SaverDef->google.protobuf.reflection.GeneratedProtocolMessageType('SaverDef', (_message.Message,), dict(DESCRIPTOR=_SAVERDEF, __module__='tensorflow.core.protobuf.saver_pb2'))
A:tensorflow.core.protobuf.saver_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x13org.tensorflow.utilB\x0bSaverProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/protobuf/rewriter_config_pb2.py----------------------------------------
A:tensorflow.core.protobuf.rewriter_config_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.protobuf.rewriter_config_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/protobuf/rewriter_config.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n.tensorflow/core/protobuf/rewriter_config.proto\x12\ntensorflow"0\n\x0eRewriterConfig\x12\x1e\n\x16optimize_tensor_layout\x18\x01 \x01(\x08B5\n\x18org.tensorflow.frameworkB\x14RewriterConfigProtosP\x01ø\x01\x01b\x06proto3'))
A:tensorflow.core.protobuf.rewriter_config_pb2._REWRITERCONFIG->google.protobuf.descriptor.Descriptor(name='RewriterConfig', full_name='tensorflow.RewriterConfig', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='optimize_tensor_layout', full_name='tensorflow.RewriterConfig.optimize_tensor_layout', index=0, number=1, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=62, serialized_end=110)
A:tensorflow.core.protobuf.rewriter_config_pb2.RewriterConfig->google.protobuf.reflection.GeneratedProtocolMessageType('RewriterConfig', (_message.Message,), dict(DESCRIPTOR=_REWRITERCONFIG, __module__='tensorflow.core.protobuf.rewriter_config_pb2'))
A:tensorflow.core.protobuf.rewriter_config_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x14RewriterConfigProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/protobuf/debug_pb2.py----------------------------------------
A:tensorflow.core.protobuf.debug_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.protobuf.debug_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/protobuf/debug.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n$tensorflow/core/protobuf/debug.proto\x12\ntensorflow"\x8e\x01\n\x10DebugTensorWatch\x12\x11\n\tnode_name\x18\x01 \x01(\t\x12\x13\n\x0boutput_slot\x18\x02 \x01(\x05\x12\x11\n\tdebug_ops\x18\x03 \x03(\t\x12\x12\n\ndebug_urls\x18\x04 \x03(\t\x12+\n#tolerate_debug_op_creation_failures\x18\x05 \x01(\x08"b\n\x0cDebugOptions\x12=\n\x17debug_tensor_watch_opts\x18\x04 \x03(\x0b2\x1c.tensorflow.DebugTensorWatch\x12\x13\n\x0bglobal_step\x18\n \x01(\x03B,\n\x18org.tensorflow.frameworkB\x0bDebugProtosP\x01ø\x01\x01b\x06proto3'))
A:tensorflow.core.protobuf.debug_pb2._DEBUGTENSORWATCH->google.protobuf.descriptor.Descriptor(name='DebugTensorWatch', full_name='tensorflow.DebugTensorWatch', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='node_name', full_name='tensorflow.DebugTensorWatch.node_name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='output_slot', full_name='tensorflow.DebugTensorWatch.output_slot', index=1, number=2, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='debug_ops', full_name='tensorflow.DebugTensorWatch.debug_ops', index=2, number=3, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='debug_urls', full_name='tensorflow.DebugTensorWatch.debug_urls', index=3, number=4, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tolerate_debug_op_creation_failures', full_name='tensorflow.DebugTensorWatch.tolerate_debug_op_creation_failures', index=4, number=5, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=53, serialized_end=195)
A:tensorflow.core.protobuf.debug_pb2._DEBUGOPTIONS->google.protobuf.descriptor.Descriptor(name='DebugOptions', full_name='tensorflow.DebugOptions', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='debug_tensor_watch_opts', full_name='tensorflow.DebugOptions.debug_tensor_watch_opts', index=0, number=4, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='global_step', full_name='tensorflow.DebugOptions.global_step', index=1, number=10, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=197, serialized_end=295)
A:tensorflow.core.protobuf.debug_pb2.DebugTensorWatch->google.protobuf.reflection.GeneratedProtocolMessageType('DebugTensorWatch', (_message.Message,), dict(DESCRIPTOR=_DEBUGTENSORWATCH, __module__='tensorflow.core.protobuf.debug_pb2'))
A:tensorflow.core.protobuf.debug_pb2.DebugOptions->google.protobuf.reflection.GeneratedProtocolMessageType('DebugOptions', (_message.Message,), dict(DESCRIPTOR=_DEBUGOPTIONS, __module__='tensorflow.core.protobuf.debug_pb2'))
A:tensorflow.core.protobuf.debug_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x0bDebugProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/protobuf/named_tensor_pb2.py----------------------------------------
A:tensorflow.core.protobuf.named_tensor_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.protobuf.named_tensor_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/protobuf/named_tensor.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n+tensorflow/core/protobuf/named_tensor.proto\x12\ntensorflow\x1a&tensorflow/core/framework/tensor.proto"I\n\x10NamedTensorProto\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\'\n\x06tensor\x18\x02 \x01(\x0b2\x17.tensorflow.TensorProtoB2\n\x18org.tensorflow.frameworkB\x11NamedTensorProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_tensor__pb2.DESCRIPTOR])
A:tensorflow.core.protobuf.named_tensor_pb2._NAMEDTENSORPROTO->google.protobuf.descriptor.Descriptor(name='NamedTensorProto', full_name='tensorflow.NamedTensorProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.NamedTensorProto.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tensor', full_name='tensorflow.NamedTensorProto.tensor', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=99, serialized_end=172)
A:tensorflow.core.protobuf.named_tensor_pb2.NamedTensorProto->google.protobuf.reflection.GeneratedProtocolMessageType('NamedTensorProto', (_message.Message,), dict(DESCRIPTOR=_NAMEDTENSORPROTO, __module__='tensorflow.core.protobuf.named_tensor_pb2'))
A:tensorflow.core.protobuf.named_tensor_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x11NamedTensorProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/protobuf/queue_runner_pb2.py----------------------------------------
A:tensorflow.core.protobuf.queue_runner_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.protobuf.queue_runner_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/protobuf/queue_runner.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n+tensorflow/core/protobuf/queue_runner.proto\x12\ntensorflow\x1a*tensorflow/core/lib/core/error_codes.proto"ª\x01\n\x0eQueueRunnerDef\x12\x12\n\nqueue_name\x18\x01 \x01(\t\x12\x17\n\x0fenqueue_op_name\x18\x02 \x03(\t\x12\x15\n\rclose_op_name\x18\x03 \x01(\t\x12\x16\n\x0ecancel_op_name\x18\x04 \x01(\t\x12<\n\x1cqueue_closed_exception_types\x18\x05 \x03(\x0e2\x16.tensorflow.error.CodeB2\n\x18org.tensorflow.frameworkB\x11QueueRunnerProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_lib_dot_core_dot_error__codes__pb2.DESCRIPTOR])
A:tensorflow.core.protobuf.queue_runner_pb2._QUEUERUNNERDEF->google.protobuf.descriptor.Descriptor(name='QueueRunnerDef', full_name='tensorflow.QueueRunnerDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='queue_name', full_name='tensorflow.QueueRunnerDef.queue_name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='enqueue_op_name', full_name='tensorflow.QueueRunnerDef.enqueue_op_name', index=1, number=2, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='close_op_name', full_name='tensorflow.QueueRunnerDef.close_op_name', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='cancel_op_name', full_name='tensorflow.QueueRunnerDef.cancel_op_name', index=3, number=4, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='queue_closed_exception_types', full_name='tensorflow.QueueRunnerDef.queue_closed_exception_types', index=4, number=5, type=14, cpp_type=8, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=104, serialized_end=274)
A:tensorflow.core.protobuf.queue_runner_pb2.QueueRunnerDef->google.protobuf.reflection.GeneratedProtocolMessageType('QueueRunnerDef', (_message.Message,), dict(DESCRIPTOR=_QUEUERUNNERDEF, __module__='tensorflow.core.protobuf.queue_runner_pb2'))
A:tensorflow.core.protobuf.queue_runner_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x11QueueRunnerProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/protobuf/saved_model_pb2.py----------------------------------------
A:tensorflow.core.protobuf.saved_model_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.protobuf.saved_model_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/protobuf/saved_model.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n*tensorflow/core/protobuf/saved_model.proto\x12\ntensorflow\x1a)tensorflow/core/protobuf/meta_graph.proto"_\n\nSavedModel\x12"\n\x1asaved_model_schema_version\x18\x01 \x01(\x03\x12-\n\x0bmeta_graphs\x18\x02 \x03(\x0b2\x18.tensorflow.MetaGraphDefB1\n\x18org.tensorflow.frameworkB\x10SavedModelProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_protobuf_dot_meta__graph__pb2.DESCRIPTOR])
A:tensorflow.core.protobuf.saved_model_pb2._SAVEDMODEL->google.protobuf.descriptor.Descriptor(name='SavedModel', full_name='tensorflow.SavedModel', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='saved_model_schema_version', full_name='tensorflow.SavedModel.saved_model_schema_version', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='meta_graphs', full_name='tensorflow.SavedModel.meta_graphs', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=101, serialized_end=196)
A:tensorflow.core.protobuf.saved_model_pb2.SavedModel->google.protobuf.reflection.GeneratedProtocolMessageType('SavedModel', (_message.Message,), dict(DESCRIPTOR=_SAVEDMODEL, __module__='tensorflow.core.protobuf.saved_model_pb2'))
A:tensorflow.core.protobuf.saved_model_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x10SavedModelProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/protobuf/config_pb2.py----------------------------------------
A:tensorflow.core.protobuf.config_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.protobuf.config_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/protobuf/config.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n%tensorflow/core/protobuf/config.proto\x12\ntensorflow\x1a*tensorflow/core/framework/cost_graph.proto\x1a%tensorflow/core/framework/graph.proto\x1a*tensorflow/core/framework/step_stats.proto\x1a$tensorflow/core/protobuf/debug.proto\x1a.tensorflow/core/protobuf/rewriter_config.proto"ë\x01\n\nGPUOptions\x12\'\n\x1fper_process_gpu_memory_fraction\x18\x01 \x01(\x01\x12\x16\n\x0eallocator_type\x18\x02 \x01(\t\x12\x1f\n\x17deferred_deletion_bytes\x18\x03 \x01(\x03\x12\x14\n\x0callow_growth\x18\x04 \x01(\x08\x12\x1b\n\x13visible_device_list\x18\x05 \x01(\t\x12"\n\x1apolling_active_delay_usecs\x18\x06 \x01(\x05\x12$\n\x1cpolling_inactive_delay_msecs\x18\x07 \x01(\x05"ß\x02\n\x10OptimizerOptions\x12+\n#do_common_subexpression_elimination\x18\x01 \x01(\x08\x12\x1b\n\x13do_constant_folding\x18\x02 \x01(\x08\x12\x1c\n\x14do_function_inlining\x18\x04 \x01(\x08\x125\n\topt_level\x18\x03 \x01(\x0e2".tensorflow.OptimizerOptions.Level\x12E\n\x10global_jit_level\x18\x05 \x01(\x0e2+.tensorflow.OptimizerOptions.GlobalJitLevel" \n\x05Level\x12\x06\n\x02L1\x10\x00\x12\x0f\n\x02L0\x10ÿÿÿÿÿÿÿÿÿ\x01"C\n\x0eGlobalJitLevel\x12\x0b\n\x07DEFAULT\x10\x00\x12\x10\n\x03OFF\x10ÿÿÿÿÿÿÿÿÿ\x01\x12\x08\n\x04ON_1\x10\x01\x12\x08\n\x04ON_2\x10\x02"î\x02\n\x0cGraphOptions\x12\x1e\n\x16enable_recv_scheduling\x18\x02 \x01(\x08\x127\n\x11optimizer_options\x18\x03 \x01(\x0b2\x1c.tensorflow.OptimizerOptions\x12\x18\n\x10build_cost_model\x18\x04 \x01(\x03\x12\x1e\n\x16build_cost_model_after\x18\t \x01(\x03\x12\x14\n\x0cinfer_shapes\x18\x05 \x01(\x08\x12\x1a\n\x12place_pruned_graph\x18\x06 \x01(\x08\x12 \n\x18enable_bfloat16_sendrecv\x18\x07 \x01(\x08\x12\x15\n\rtimeline_step\x18\x08 \x01(\x05\x123\n\x0frewrite_options\x18\n \x01(\x0b2\x1a.tensorflow.RewriterConfigJ\x04\x08\x01\x10\x02R%skip_common_subexpression_elimination",\n\x15ThreadPoolOptionProto\x12\x13\n\x0bnum_threads\x18\x01 \x01(\x05"2\n\nRPCOptions\x12$\n\x1cuse_rpc_for_inprocess_master\x18\x01 \x01(\x08"Ñ\x04\n\x0bConfigProto\x12>\n\x0cdevice_count\x18\x01 \x03(\x0b2(.tensorflow.ConfigProto.DeviceCountEntry\x12$\n\x1cintra_op_parallelism_threads\x18\x02 \x01(\x05\x12$\n\x1cinter_op_parallelism_threads\x18\x05 \x01(\x05\x12\x1f\n\x17use_per_session_threads\x18\t \x01(\x08\x12G\n\x1csession_inter_op_thread_pool\x18\x0c \x03(\x0b2!.tensorflow.ThreadPoolOptionProto\x12\x18\n\x10placement_period\x18\x03 \x01(\x05\x12\x16\n\x0edevice_filters\x18\x04 \x03(\t\x12+\n\x0bgpu_options\x18\x06 \x01(\x0b2\x16.tensorflow.GPUOptions\x12\x1c\n\x14allow_soft_placement\x18\x07 \x01(\x08\x12\x1c\n\x14log_device_placement\x18\x08 \x01(\x08\x12/\n\rgraph_options\x18\n \x01(\x0b2\x18.tensorflow.GraphOptions\x12\x1f\n\x17operation_timeout_in_ms\x18\x0b \x01(\x03\x12+\n\x0brpc_options\x18\r \x01(\x0b2\x16.tensorflow.RPCOptions\x1a2\n\x10DeviceCountEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\x05:\x028\x01"¥\x02\n\nRunOptions\x126\n\x0btrace_level\x18\x01 \x01(\x0e2!.tensorflow.RunOptions.TraceLevel\x12\x15\n\rtimeout_in_ms\x18\x02 \x01(\x03\x12\x1c\n\x14inter_op_thread_pool\x18\x03 \x01(\x05\x12\x1f\n\x17output_partition_graphs\x18\x05 \x01(\x08\x12/\n\rdebug_options\x18\x06 \x01(\x0b2\x18.tensorflow.DebugOptions"R\n\nTraceLevel\x12\x0c\n\x08NO_TRACE\x10\x00\x12\x12\n\x0eSOFTWARE_TRACE\x10\x01\x12\x12\n\x0eHARDWARE_TRACE\x10\x02\x12\x0e\n\nFULL_TRACE\x10\x03J\x04\x08\x04\x10\x05"\x96\x01\n\x0bRunMetadata\x12)\n\nstep_stats\x18\x01 \x01(\x0b2\x15.tensorflow.StepStats\x12,\n\ncost_graph\x18\x02 \x01(\x0b2\x18.tensorflow.CostGraphDef\x12.\n\x10partition_graphs\x18\x03 \x03(\x0b2\x14.tensorflow.GraphDefB-\n\x18org.tensorflow.frameworkB\x0cConfigProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_cost__graph__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_graph__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_step__stats__pb2.DESCRIPTOR, tensorflow_dot_core_dot_protobuf_dot_debug__pb2.DESCRIPTOR, tensorflow_dot_core_dot_protobuf_dot_rewriter__config__pb2.DESCRIPTOR])
A:tensorflow.core.protobuf.config_pb2._OPTIMIZEROPTIONS_LEVEL->google.protobuf.descriptor.EnumDescriptor(name='Level', full_name='tensorflow.OptimizerOptions.Level', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='L1', index=0, number=0, options=None, type=None), _descriptor.EnumValueDescriptor(name='L0', index=1, number=-1, options=None, type=None)], containing_type=None, options=None, serialized_start=755, serialized_end=787)
A:tensorflow.core.protobuf.config_pb2._OPTIMIZEROPTIONS_GLOBALJITLEVEL->google.protobuf.descriptor.EnumDescriptor(name='GlobalJitLevel', full_name='tensorflow.OptimizerOptions.GlobalJitLevel', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='DEFAULT', index=0, number=0, options=None, type=None), _descriptor.EnumValueDescriptor(name='OFF', index=1, number=-1, options=None, type=None), _descriptor.EnumValueDescriptor(name='ON_1', index=2, number=1, options=None, type=None), _descriptor.EnumValueDescriptor(name='ON_2', index=3, number=2, options=None, type=None)], containing_type=None, options=None, serialized_start=789, serialized_end=856)
A:tensorflow.core.protobuf.config_pb2._RUNOPTIONS_TRACELEVEL->google.protobuf.descriptor.EnumDescriptor(name='TraceLevel', full_name='tensorflow.RunOptions.TraceLevel', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='NO_TRACE', index=0, number=0, options=None, type=None), _descriptor.EnumValueDescriptor(name='SOFTWARE_TRACE', index=1, number=1, options=None, type=None), _descriptor.EnumValueDescriptor(name='HARDWARE_TRACE', index=2, number=2, options=None, type=None), _descriptor.EnumValueDescriptor(name='FULL_TRACE', index=3, number=3, options=None, type=None)], containing_type=None, options=None, serialized_start=2127, serialized_end=2209)
A:tensorflow.core.protobuf.config_pb2._GPUOPTIONS->google.protobuf.descriptor.Descriptor(name='GPUOptions', full_name='tensorflow.GPUOptions', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='per_process_gpu_memory_fraction', full_name='tensorflow.GPUOptions.per_process_gpu_memory_fraction', index=0, number=1, type=1, cpp_type=5, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='allocator_type', full_name='tensorflow.GPUOptions.allocator_type', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='deferred_deletion_bytes', full_name='tensorflow.GPUOptions.deferred_deletion_bytes', index=2, number=3, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='allow_growth', full_name='tensorflow.GPUOptions.allow_growth', index=3, number=4, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='visible_device_list', full_name='tensorflow.GPUOptions.visible_device_list', index=4, number=5, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='polling_active_delay_usecs', full_name='tensorflow.GPUOptions.polling_active_delay_usecs', index=5, number=6, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='polling_inactive_delay_msecs', full_name='tensorflow.GPUOptions.polling_inactive_delay_msecs', index=6, number=7, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=267, serialized_end=502)
A:tensorflow.core.protobuf.config_pb2._OPTIMIZEROPTIONS->google.protobuf.descriptor.Descriptor(name='OptimizerOptions', full_name='tensorflow.OptimizerOptions', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='do_common_subexpression_elimination', full_name='tensorflow.OptimizerOptions.do_common_subexpression_elimination', index=0, number=1, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='do_constant_folding', full_name='tensorflow.OptimizerOptions.do_constant_folding', index=1, number=2, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='do_function_inlining', full_name='tensorflow.OptimizerOptions.do_function_inlining', index=2, number=4, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='opt_level', full_name='tensorflow.OptimizerOptions.opt_level', index=3, number=3, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='global_jit_level', full_name='tensorflow.OptimizerOptions.global_jit_level', index=4, number=5, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[_OPTIMIZEROPTIONS_LEVEL, _OPTIMIZEROPTIONS_GLOBALJITLEVEL], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=505, serialized_end=856)
A:tensorflow.core.protobuf.config_pb2._GRAPHOPTIONS->google.protobuf.descriptor.Descriptor(name='GraphOptions', full_name='tensorflow.GraphOptions', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='enable_recv_scheduling', full_name='tensorflow.GraphOptions.enable_recv_scheduling', index=0, number=2, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='optimizer_options', full_name='tensorflow.GraphOptions.optimizer_options', index=1, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='build_cost_model', full_name='tensorflow.GraphOptions.build_cost_model', index=2, number=4, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='build_cost_model_after', full_name='tensorflow.GraphOptions.build_cost_model_after', index=3, number=9, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='infer_shapes', full_name='tensorflow.GraphOptions.infer_shapes', index=4, number=5, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='place_pruned_graph', full_name='tensorflow.GraphOptions.place_pruned_graph', index=5, number=6, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='enable_bfloat16_sendrecv', full_name='tensorflow.GraphOptions.enable_bfloat16_sendrecv', index=6, number=7, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='timeline_step', full_name='tensorflow.GraphOptions.timeline_step', index=7, number=8, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='rewrite_options', full_name='tensorflow.GraphOptions.rewrite_options', index=8, number=10, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=859, serialized_end=1225)
A:tensorflow.core.protobuf.config_pb2._THREADPOOLOPTIONPROTO->google.protobuf.descriptor.Descriptor(name='ThreadPoolOptionProto', full_name='tensorflow.ThreadPoolOptionProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='num_threads', full_name='tensorflow.ThreadPoolOptionProto.num_threads', index=0, number=1, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1227, serialized_end=1271)
A:tensorflow.core.protobuf.config_pb2._RPCOPTIONS->google.protobuf.descriptor.Descriptor(name='RPCOptions', full_name='tensorflow.RPCOptions', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='use_rpc_for_inprocess_master', full_name='tensorflow.RPCOptions.use_rpc_for_inprocess_master', index=0, number=1, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1273, serialized_end=1323)
A:tensorflow.core.protobuf.config_pb2._CONFIGPROTO_DEVICECOUNTENTRY->google.protobuf.descriptor.Descriptor(name='DeviceCountEntry', full_name='tensorflow.ConfigProto.DeviceCountEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.ConfigProto.DeviceCountEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.ConfigProto.DeviceCountEntry.value', index=1, number=2, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1869, serialized_end=1919)
A:tensorflow.core.protobuf.config_pb2._CONFIGPROTO->google.protobuf.descriptor.Descriptor(name='ConfigProto', full_name='tensorflow.ConfigProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='device_count', full_name='tensorflow.ConfigProto.device_count', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='intra_op_parallelism_threads', full_name='tensorflow.ConfigProto.intra_op_parallelism_threads', index=1, number=2, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='inter_op_parallelism_threads', full_name='tensorflow.ConfigProto.inter_op_parallelism_threads', index=2, number=5, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='use_per_session_threads', full_name='tensorflow.ConfigProto.use_per_session_threads', index=3, number=9, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='session_inter_op_thread_pool', full_name='tensorflow.ConfigProto.session_inter_op_thread_pool', index=4, number=12, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='placement_period', full_name='tensorflow.ConfigProto.placement_period', index=5, number=3, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='device_filters', full_name='tensorflow.ConfigProto.device_filters', index=6, number=4, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='gpu_options', full_name='tensorflow.ConfigProto.gpu_options', index=7, number=6, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='allow_soft_placement', full_name='tensorflow.ConfigProto.allow_soft_placement', index=8, number=7, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='log_device_placement', full_name='tensorflow.ConfigProto.log_device_placement', index=9, number=8, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='graph_options', full_name='tensorflow.ConfigProto.graph_options', index=10, number=10, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='operation_timeout_in_ms', full_name='tensorflow.ConfigProto.operation_timeout_in_ms', index=11, number=11, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='rpc_options', full_name='tensorflow.ConfigProto.rpc_options', index=12, number=13, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_CONFIGPROTO_DEVICECOUNTENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1326, serialized_end=1919)
A:tensorflow.core.protobuf.config_pb2._RUNOPTIONS->google.protobuf.descriptor.Descriptor(name='RunOptions', full_name='tensorflow.RunOptions', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='trace_level', full_name='tensorflow.RunOptions.trace_level', index=0, number=1, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='timeout_in_ms', full_name='tensorflow.RunOptions.timeout_in_ms', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='inter_op_thread_pool', full_name='tensorflow.RunOptions.inter_op_thread_pool', index=2, number=3, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='output_partition_graphs', full_name='tensorflow.RunOptions.output_partition_graphs', index=3, number=5, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='debug_options', full_name='tensorflow.RunOptions.debug_options', index=4, number=6, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[_RUNOPTIONS_TRACELEVEL], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1922, serialized_end=2215)
A:tensorflow.core.protobuf.config_pb2._RUNMETADATA->google.protobuf.descriptor.Descriptor(name='RunMetadata', full_name='tensorflow.RunMetadata', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='step_stats', full_name='tensorflow.RunMetadata.step_stats', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='cost_graph', full_name='tensorflow.RunMetadata.cost_graph', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='partition_graphs', full_name='tensorflow.RunMetadata.partition_graphs', index=2, number=3, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=2218, serialized_end=2368)
A:tensorflow.core.protobuf.config_pb2.GPUOptions->google.protobuf.reflection.GeneratedProtocolMessageType('GPUOptions', (_message.Message,), dict(DESCRIPTOR=_GPUOPTIONS, __module__='tensorflow.core.protobuf.config_pb2'))
A:tensorflow.core.protobuf.config_pb2.OptimizerOptions->google.protobuf.reflection.GeneratedProtocolMessageType('OptimizerOptions', (_message.Message,), dict(DESCRIPTOR=_OPTIMIZEROPTIONS, __module__='tensorflow.core.protobuf.config_pb2'))
A:tensorflow.core.protobuf.config_pb2.GraphOptions->google.protobuf.reflection.GeneratedProtocolMessageType('GraphOptions', (_message.Message,), dict(DESCRIPTOR=_GRAPHOPTIONS, __module__='tensorflow.core.protobuf.config_pb2'))
A:tensorflow.core.protobuf.config_pb2.ThreadPoolOptionProto->google.protobuf.reflection.GeneratedProtocolMessageType('ThreadPoolOptionProto', (_message.Message,), dict(DESCRIPTOR=_THREADPOOLOPTIONPROTO, __module__='tensorflow.core.protobuf.config_pb2'))
A:tensorflow.core.protobuf.config_pb2.RPCOptions->google.protobuf.reflection.GeneratedProtocolMessageType('RPCOptions', (_message.Message,), dict(DESCRIPTOR=_RPCOPTIONS, __module__='tensorflow.core.protobuf.config_pb2'))
A:tensorflow.core.protobuf.config_pb2.ConfigProto->google.protobuf.reflection.GeneratedProtocolMessageType('ConfigProto', (_message.Message,), dict(DeviceCountEntry=_reflection.GeneratedProtocolMessageType('DeviceCountEntry', (_message.Message,), dict(DESCRIPTOR=_CONFIGPROTO_DEVICECOUNTENTRY, __module__='tensorflow.core.protobuf.config_pb2')), DESCRIPTOR=_CONFIGPROTO, __module__='tensorflow.core.protobuf.config_pb2'))
A:tensorflow.core.protobuf.config_pb2.RunOptions->google.protobuf.reflection.GeneratedProtocolMessageType('RunOptions', (_message.Message,), dict(DESCRIPTOR=_RUNOPTIONS, __module__='tensorflow.core.protobuf.config_pb2'))
A:tensorflow.core.protobuf.config_pb2.RunMetadata->google.protobuf.reflection.GeneratedProtocolMessageType('RunMetadata', (_message.Message,), dict(DESCRIPTOR=_RUNMETADATA, __module__='tensorflow.core.protobuf.config_pb2'))
A:tensorflow.core.protobuf.config_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x18org.tensorflow.frameworkB\x0cConfigProtosP\x01ø\x01\x01'))
A:tensorflow.core.protobuf.config_pb2._CONFIGPROTO_DEVICECOUNTENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/protobuf/tensor_bundle_pb2.py----------------------------------------
A:tensorflow.core.protobuf.tensor_bundle_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.protobuf.tensor_bundle_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/protobuf/tensor_bundle.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n,tensorflow/core/protobuf/tensor_bundle.proto\x12\ntensorflow\x1a,tensorflow/core/framework/tensor_shape.proto\x1a,tensorflow/core/framework/tensor_slice.proto\x1a%tensorflow/core/framework/types.proto\x1a(tensorflow/core/framework/versions.proto"±\x01\n\x11BundleHeaderProto\x12\x12\n\nnum_shards\x18\x01 \x01(\x05\x12<\n\nendianness\x18\x02 \x01(\x0e2(.tensorflow.BundleHeaderProto.Endianness\x12\'\n\x07version\x18\x03 \x01(\x0b2\x16.tensorflow.VersionDef"!\n\nEndianness\x12\n\n\x06LITTLE\x10\x00\x12\x07\n\x03BIG\x10\x01"Ò\x01\n\x10BundleEntryProto\x12#\n\x05dtype\x18\x01 \x01(\x0e2\x14.tensorflow.DataType\x12+\n\x05shape\x18\x02 \x01(\x0b2\x1c.tensorflow.TensorShapeProto\x12\x10\n\x08shard_id\x18\x03 \x01(\x05\x12\x0e\n\x06offset\x18\x04 \x01(\x03\x12\x0c\n\x04size\x18\x05 \x01(\x03\x12\x0e\n\x06crc32c\x18\x06 \x01(\x07\x12,\n\x06slices\x18\x07 \x03(\x0b2\x1c.tensorflow.TensorSliceProtoB.\n\x13org.tensorflow.utilB\x12TensorBundleProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_tensor__shape__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_tensor__slice__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_types__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_versions__pb2.DESCRIPTOR])
A:tensorflow.core.protobuf.tensor_bundle_pb2._BUNDLEHEADERPROTO_ENDIANNESS->google.protobuf.descriptor.EnumDescriptor(name='Endianness', full_name='tensorflow.BundleHeaderProto.Endianness', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='LITTLE', index=0, number=0, options=None, type=None), _descriptor.EnumValueDescriptor(name='BIG', index=1, number=1, options=None, type=None)], containing_type=None, options=None, serialized_start=378, serialized_end=411)
A:tensorflow.core.protobuf.tensor_bundle_pb2._BUNDLEHEADERPROTO->google.protobuf.descriptor.Descriptor(name='BundleHeaderProto', full_name='tensorflow.BundleHeaderProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='num_shards', full_name='tensorflow.BundleHeaderProto.num_shards', index=0, number=1, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='endianness', full_name='tensorflow.BundleHeaderProto.endianness', index=1, number=2, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='version', full_name='tensorflow.BundleHeaderProto.version', index=2, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[_BUNDLEHEADERPROTO_ENDIANNESS], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=234, serialized_end=411)
A:tensorflow.core.protobuf.tensor_bundle_pb2._BUNDLEENTRYPROTO->google.protobuf.descriptor.Descriptor(name='BundleEntryProto', full_name='tensorflow.BundleEntryProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='dtype', full_name='tensorflow.BundleEntryProto.dtype', index=0, number=1, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='shape', full_name='tensorflow.BundleEntryProto.shape', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='shard_id', full_name='tensorflow.BundleEntryProto.shard_id', index=2, number=3, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='offset', full_name='tensorflow.BundleEntryProto.offset', index=3, number=4, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='size', full_name='tensorflow.BundleEntryProto.size', index=4, number=5, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='crc32c', full_name='tensorflow.BundleEntryProto.crc32c', index=5, number=6, type=7, cpp_type=3, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='slices', full_name='tensorflow.BundleEntryProto.slices', index=6, number=7, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=414, serialized_end=624)
A:tensorflow.core.protobuf.tensor_bundle_pb2.BundleHeaderProto->google.protobuf.reflection.GeneratedProtocolMessageType('BundleHeaderProto', (_message.Message,), dict(DESCRIPTOR=_BUNDLEHEADERPROTO, __module__='tensorflow.core.protobuf.tensor_bundle_pb2'))
A:tensorflow.core.protobuf.tensor_bundle_pb2.BundleEntryProto->google.protobuf.reflection.GeneratedProtocolMessageType('BundleEntryProto', (_message.Message,), dict(DESCRIPTOR=_BUNDLEENTRYPROTO, __module__='tensorflow.core.protobuf.tensor_bundle_pb2'))
A:tensorflow.core.protobuf.tensor_bundle_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x13org.tensorflow.utilB\x12TensorBundleProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/util/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/util/test_log_pb2.py----------------------------------------
A:tensorflow.core.util.test_log_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.util.test_log_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/util/test_log.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n#tensorflow/core/util/test_log.proto\x12\ntensorflow\x1a\x19google/protobuf/any.proto"D\n\nEntryValue\x12\x16\n\x0cdouble_value\x18\x01 \x01(\x01H\x00\x12\x16\n\x0cstring_value\x18\x02 \x01(\tH\x00B\x06\n\x04kind"å\x01\n\x0eBenchmarkEntry\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05iters\x18\x02 \x01(\x03\x12\x10\n\x08cpu_time\x18\x03 \x01(\x01\x12\x11\n\twall_time\x18\x04 \x01(\x01\x12\x12\n\nthroughput\x18\x05 \x01(\x01\x126\n\x06extras\x18\x06 \x03(\x0b2&.tensorflow.BenchmarkEntry.ExtrasEntry\x1aE\n\x0bExtrasEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12%\n\x05value\x18\x02 \x01(\x0b2\x16.tensorflow.EntryValue:\x028\x01"=\n\x10BenchmarkEntries\x12)\n\x05entry\x18\x01 \x03(\x0b2\x1a.tensorflow.BenchmarkEntry"B\n\x12BuildConfiguration\x12\x0c\n\x04mode\x18\x01 \x01(\t\x12\x10\n\x08cc_flags\x18\x02 \x03(\t\x12\x0c\n\x04opts\x18\x03 \x03(\t"J\n\x08CommitId\x12\x14\n\nchangelist\x18\x01 \x01(\x03H\x00\x12\x0e\n\x04hash\x18\x02 \x01(\tH\x00\x12\x10\n\x08snapshot\x18\x03 \x01(\tB\x06\n\x04kind"Þ\x01\n\x07CPUInfo\x12\x11\n\tnum_cores\x18\x01 \x01(\x03\x12\x19\n\x11num_cores_allowed\x18\x02 \x01(\x03\x12\x13\n\x0bmhz_per_cpu\x18\x03 \x01(\x01\x12\x10\n\x08cpu_info\x18\x04 \x01(\t\x12\x14\n\x0ccpu_governor\x18\x05 \x01(\t\x126\n\ncache_size\x18\x06 \x03(\x0b2".tensorflow.CPUInfo.CacheSizeEntry\x1a0\n\x0eCacheSizeEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\x03:\x028\x01".\n\nMemoryInfo\x12\r\n\x05total\x18\x01 \x01(\x03\x12\x11\n\tavailable\x18\x02 \x01(\x03"6\n\x07GPUInfo\x12\r\n\x05model\x18\x01 \x01(\t\x12\x0c\n\x04uuid\x18\x02 \x01(\t\x12\x0e\n\x06bus_id\x18\x03 \x01(\t"p\n\x0cPlatformInfo\x12\x0c\n\x04bits\x18\x01 \x01(\t\x12\x0f\n\x07linkage\x18\x02 \x01(\t\x12\x0f\n\x07machine\x18\x03 \x01(\t\x12\x0f\n\x07release\x18\x04 \x01(\t\x12\x0e\n\x06system\x18\x05 \x01(\t\x12\x0f\n\x07version\x18\x06 \x01(\t"e\n\x13AvailableDeviceInfo\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0c\n\x04type\x18\x02 \x01(\t\x12\x14\n\x0cmemory_limit\x18\x03 \x01(\x03\x12\x1c\n\x14physical_description\x18\x04 \x01(\t"³\x02\n\x14MachineConfiguration\x12\x10\n\x08hostname\x18\x01 \x01(\t\x12\x19\n\x11serial_identifier\x18\x07 \x01(\t\x12/\n\rplatform_info\x18\x02 \x01(\x0b2\x18.tensorflow.PlatformInfo\x12%\n\x08cpu_info\x18\x03 \x01(\x0b2\x13.tensorflow.CPUInfo\x12)\n\x0bdevice_info\x18\x04 \x03(\x0b2\x14.google.protobuf.Any\x12>\n\x15available_device_info\x18\x05 \x03(\x0b2\x1f.tensorflow.AvailableDeviceInfo\x12+\n\x0bmemory_info\x18\x06 \x01(\x0b2\x16.tensorflow.MemoryInfo"$\n\x10RunConfiguration\x12\x10\n\x08argument\x18\x01 \x03(\t"\x82\x04\n\x0bTestResults\x12\x0e\n\x06target\x18\x01 \x01(\t\x12-\n\x07entries\x18\x02 \x01(\x0b2\x1c.tensorflow.BenchmarkEntries\x12;\n\x13build_configuration\x18\x03 \x01(\x0b2\x1e.tensorflow.BuildConfiguration\x12\'\n\tcommit_id\x18\x04 \x01(\x0b2\x14.tensorflow.CommitId\x12\x12\n\nstart_time\x18\x05 \x01(\x03\x12\x10\n\x08run_time\x18\x06 \x01(\x01\x12?\n\x15machine_configuration\x18\x07 \x01(\x0b2 .tensorflow.MachineConfiguration\x127\n\x11run_configuration\x18\x08 \x01(\x0b2\x1c.tensorflow.RunConfiguration\x12\x0c\n\x04name\x18\t \x01(\t\x12=\n\x0ebenchmark_type\x18\n \x01(\x0e2%.tensorflow.TestResults.BenchmarkType"a\n\rBenchmarkType\x12\x0b\n\x07UNKNOWN\x10\x00\x12\x16\n\x12CPP_MICROBENCHMARK\x10\x01\x12\x14\n\x10PYTHON_BENCHMARK\x10\x02\x12\x15\n\x11ANDROID_BENCHMARK\x10\x03B1\n\x1borg.tensorflow.util.testlogB\rTestLogProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[google_dot_protobuf_dot_any__pb2.DESCRIPTOR])
A:tensorflow.core.util.test_log_pb2._TESTRESULTS_BENCHMARKTYPE->google.protobuf.descriptor.EnumDescriptor(name='BenchmarkType', full_name='tensorflow.TestResults.BenchmarkType', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='UNKNOWN', index=0, number=0, options=None, type=None), _descriptor.EnumValueDescriptor(name='CPP_MICROBENCHMARK', index=1, number=1, options=None, type=None), _descriptor.EnumValueDescriptor(name='PYTHON_BENCHMARK', index=2, number=2, options=None, type=None), _descriptor.EnumValueDescriptor(name='ANDROID_BENCHMARK', index=3, number=3, options=None, type=None)], containing_type=None, options=None, serialized_start=1899, serialized_end=1996)
A:tensorflow.core.util.test_log_pb2._ENTRYVALUE->google.protobuf.descriptor.Descriptor(name='EntryValue', full_name='tensorflow.EntryValue', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='double_value', full_name='tensorflow.EntryValue.double_value', index=0, number=1, type=1, cpp_type=5, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='string_value', full_name='tensorflow.EntryValue.string_value', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[_descriptor.OneofDescriptor(name='kind', full_name='tensorflow.EntryValue.kind', index=0, containing_type=None, fields=[])], serialized_start=78, serialized_end=146)
A:tensorflow.core.util.test_log_pb2._BENCHMARKENTRY_EXTRASENTRY->google.protobuf.descriptor.Descriptor(name='ExtrasEntry', full_name='tensorflow.BenchmarkEntry.ExtrasEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.BenchmarkEntry.ExtrasEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.BenchmarkEntry.ExtrasEntry.value', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=309, serialized_end=378)
A:tensorflow.core.util.test_log_pb2._BENCHMARKENTRY->google.protobuf.descriptor.Descriptor(name='BenchmarkEntry', full_name='tensorflow.BenchmarkEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.BenchmarkEntry.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='iters', full_name='tensorflow.BenchmarkEntry.iters', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='cpu_time', full_name='tensorflow.BenchmarkEntry.cpu_time', index=2, number=3, type=1, cpp_type=5, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='wall_time', full_name='tensorflow.BenchmarkEntry.wall_time', index=3, number=4, type=1, cpp_type=5, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='throughput', full_name='tensorflow.BenchmarkEntry.throughput', index=4, number=5, type=1, cpp_type=5, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='extras', full_name='tensorflow.BenchmarkEntry.extras', index=5, number=6, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_BENCHMARKENTRY_EXTRASENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=149, serialized_end=378)
A:tensorflow.core.util.test_log_pb2._BENCHMARKENTRIES->google.protobuf.descriptor.Descriptor(name='BenchmarkEntries', full_name='tensorflow.BenchmarkEntries', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='entry', full_name='tensorflow.BenchmarkEntries.entry', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=380, serialized_end=441)
A:tensorflow.core.util.test_log_pb2._BUILDCONFIGURATION->google.protobuf.descriptor.Descriptor(name='BuildConfiguration', full_name='tensorflow.BuildConfiguration', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='mode', full_name='tensorflow.BuildConfiguration.mode', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='cc_flags', full_name='tensorflow.BuildConfiguration.cc_flags', index=1, number=2, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='opts', full_name='tensorflow.BuildConfiguration.opts', index=2, number=3, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=443, serialized_end=509)
A:tensorflow.core.util.test_log_pb2._COMMITID->google.protobuf.descriptor.Descriptor(name='CommitId', full_name='tensorflow.CommitId', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='changelist', full_name='tensorflow.CommitId.changelist', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='hash', full_name='tensorflow.CommitId.hash', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='snapshot', full_name='tensorflow.CommitId.snapshot', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[_descriptor.OneofDescriptor(name='kind', full_name='tensorflow.CommitId.kind', index=0, containing_type=None, fields=[])], serialized_start=511, serialized_end=585)
A:tensorflow.core.util.test_log_pb2._CPUINFO_CACHESIZEENTRY->google.protobuf.descriptor.Descriptor(name='CacheSizeEntry', full_name='tensorflow.CPUInfo.CacheSizeEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.CPUInfo.CacheSizeEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.CPUInfo.CacheSizeEntry.value', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=762, serialized_end=810)
A:tensorflow.core.util.test_log_pb2._CPUINFO->google.protobuf.descriptor.Descriptor(name='CPUInfo', full_name='tensorflow.CPUInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='num_cores', full_name='tensorflow.CPUInfo.num_cores', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='num_cores_allowed', full_name='tensorflow.CPUInfo.num_cores_allowed', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='mhz_per_cpu', full_name='tensorflow.CPUInfo.mhz_per_cpu', index=2, number=3, type=1, cpp_type=5, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='cpu_info', full_name='tensorflow.CPUInfo.cpu_info', index=3, number=4, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='cpu_governor', full_name='tensorflow.CPUInfo.cpu_governor', index=4, number=5, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='cache_size', full_name='tensorflow.CPUInfo.cache_size', index=5, number=6, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_CPUINFO_CACHESIZEENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=588, serialized_end=810)
A:tensorflow.core.util.test_log_pb2._MEMORYINFO->google.protobuf.descriptor.Descriptor(name='MemoryInfo', full_name='tensorflow.MemoryInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='total', full_name='tensorflow.MemoryInfo.total', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='available', full_name='tensorflow.MemoryInfo.available', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=812, serialized_end=858)
A:tensorflow.core.util.test_log_pb2._GPUINFO->google.protobuf.descriptor.Descriptor(name='GPUInfo', full_name='tensorflow.GPUInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='model', full_name='tensorflow.GPUInfo.model', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='uuid', full_name='tensorflow.GPUInfo.uuid', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='bus_id', full_name='tensorflow.GPUInfo.bus_id', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=860, serialized_end=914)
A:tensorflow.core.util.test_log_pb2._PLATFORMINFO->google.protobuf.descriptor.Descriptor(name='PlatformInfo', full_name='tensorflow.PlatformInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='bits', full_name='tensorflow.PlatformInfo.bits', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='linkage', full_name='tensorflow.PlatformInfo.linkage', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='machine', full_name='tensorflow.PlatformInfo.machine', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='release', full_name='tensorflow.PlatformInfo.release', index=3, number=4, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='system', full_name='tensorflow.PlatformInfo.system', index=4, number=5, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='version', full_name='tensorflow.PlatformInfo.version', index=5, number=6, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=916, serialized_end=1028)
A:tensorflow.core.util.test_log_pb2._AVAILABLEDEVICEINFO->google.protobuf.descriptor.Descriptor(name='AvailableDeviceInfo', full_name='tensorflow.AvailableDeviceInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.AvailableDeviceInfo.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='type', full_name='tensorflow.AvailableDeviceInfo.type', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='memory_limit', full_name='tensorflow.AvailableDeviceInfo.memory_limit', index=2, number=3, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='physical_description', full_name='tensorflow.AvailableDeviceInfo.physical_description', index=3, number=4, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1030, serialized_end=1131)
A:tensorflow.core.util.test_log_pb2._MACHINECONFIGURATION->google.protobuf.descriptor.Descriptor(name='MachineConfiguration', full_name='tensorflow.MachineConfiguration', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='hostname', full_name='tensorflow.MachineConfiguration.hostname', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='serial_identifier', full_name='tensorflow.MachineConfiguration.serial_identifier', index=1, number=7, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='platform_info', full_name='tensorflow.MachineConfiguration.platform_info', index=2, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='cpu_info', full_name='tensorflow.MachineConfiguration.cpu_info', index=3, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='device_info', full_name='tensorflow.MachineConfiguration.device_info', index=4, number=4, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='available_device_info', full_name='tensorflow.MachineConfiguration.available_device_info', index=5, number=5, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='memory_info', full_name='tensorflow.MachineConfiguration.memory_info', index=6, number=6, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1134, serialized_end=1441)
A:tensorflow.core.util.test_log_pb2._RUNCONFIGURATION->google.protobuf.descriptor.Descriptor(name='RunConfiguration', full_name='tensorflow.RunConfiguration', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='argument', full_name='tensorflow.RunConfiguration.argument', index=0, number=1, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1443, serialized_end=1479)
A:tensorflow.core.util.test_log_pb2._TESTRESULTS->google.protobuf.descriptor.Descriptor(name='TestResults', full_name='tensorflow.TestResults', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='target', full_name='tensorflow.TestResults.target', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='entries', full_name='tensorflow.TestResults.entries', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='build_configuration', full_name='tensorflow.TestResults.build_configuration', index=2, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='commit_id', full_name='tensorflow.TestResults.commit_id', index=3, number=4, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='start_time', full_name='tensorflow.TestResults.start_time', index=4, number=5, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='run_time', full_name='tensorflow.TestResults.run_time', index=5, number=6, type=1, cpp_type=5, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='machine_configuration', full_name='tensorflow.TestResults.machine_configuration', index=6, number=7, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='run_configuration', full_name='tensorflow.TestResults.run_configuration', index=7, number=8, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='name', full_name='tensorflow.TestResults.name', index=8, number=9, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='benchmark_type', full_name='tensorflow.TestResults.benchmark_type', index=9, number=10, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[_TESTRESULTS_BENCHMARKTYPE], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1482, serialized_end=1996)
A:tensorflow.core.util.test_log_pb2.EntryValue->google.protobuf.reflection.GeneratedProtocolMessageType('EntryValue', (_message.Message,), dict(DESCRIPTOR=_ENTRYVALUE, __module__='tensorflow.core.util.test_log_pb2'))
A:tensorflow.core.util.test_log_pb2.BenchmarkEntry->google.protobuf.reflection.GeneratedProtocolMessageType('BenchmarkEntry', (_message.Message,), dict(ExtrasEntry=_reflection.GeneratedProtocolMessageType('ExtrasEntry', (_message.Message,), dict(DESCRIPTOR=_BENCHMARKENTRY_EXTRASENTRY, __module__='tensorflow.core.util.test_log_pb2')), DESCRIPTOR=_BENCHMARKENTRY, __module__='tensorflow.core.util.test_log_pb2'))
A:tensorflow.core.util.test_log_pb2.BenchmarkEntries->google.protobuf.reflection.GeneratedProtocolMessageType('BenchmarkEntries', (_message.Message,), dict(DESCRIPTOR=_BENCHMARKENTRIES, __module__='tensorflow.core.util.test_log_pb2'))
A:tensorflow.core.util.test_log_pb2.BuildConfiguration->google.protobuf.reflection.GeneratedProtocolMessageType('BuildConfiguration', (_message.Message,), dict(DESCRIPTOR=_BUILDCONFIGURATION, __module__='tensorflow.core.util.test_log_pb2'))
A:tensorflow.core.util.test_log_pb2.CommitId->google.protobuf.reflection.GeneratedProtocolMessageType('CommitId', (_message.Message,), dict(DESCRIPTOR=_COMMITID, __module__='tensorflow.core.util.test_log_pb2'))
A:tensorflow.core.util.test_log_pb2.CPUInfo->google.protobuf.reflection.GeneratedProtocolMessageType('CPUInfo', (_message.Message,), dict(CacheSizeEntry=_reflection.GeneratedProtocolMessageType('CacheSizeEntry', (_message.Message,), dict(DESCRIPTOR=_CPUINFO_CACHESIZEENTRY, __module__='tensorflow.core.util.test_log_pb2')), DESCRIPTOR=_CPUINFO, __module__='tensorflow.core.util.test_log_pb2'))
A:tensorflow.core.util.test_log_pb2.MemoryInfo->google.protobuf.reflection.GeneratedProtocolMessageType('MemoryInfo', (_message.Message,), dict(DESCRIPTOR=_MEMORYINFO, __module__='tensorflow.core.util.test_log_pb2'))
A:tensorflow.core.util.test_log_pb2.GPUInfo->google.protobuf.reflection.GeneratedProtocolMessageType('GPUInfo', (_message.Message,), dict(DESCRIPTOR=_GPUINFO, __module__='tensorflow.core.util.test_log_pb2'))
A:tensorflow.core.util.test_log_pb2.PlatformInfo->google.protobuf.reflection.GeneratedProtocolMessageType('PlatformInfo', (_message.Message,), dict(DESCRIPTOR=_PLATFORMINFO, __module__='tensorflow.core.util.test_log_pb2'))
A:tensorflow.core.util.test_log_pb2.AvailableDeviceInfo->google.protobuf.reflection.GeneratedProtocolMessageType('AvailableDeviceInfo', (_message.Message,), dict(DESCRIPTOR=_AVAILABLEDEVICEINFO, __module__='tensorflow.core.util.test_log_pb2'))
A:tensorflow.core.util.test_log_pb2.MachineConfiguration->google.protobuf.reflection.GeneratedProtocolMessageType('MachineConfiguration', (_message.Message,), dict(DESCRIPTOR=_MACHINECONFIGURATION, __module__='tensorflow.core.util.test_log_pb2'))
A:tensorflow.core.util.test_log_pb2.RunConfiguration->google.protobuf.reflection.GeneratedProtocolMessageType('RunConfiguration', (_message.Message,), dict(DESCRIPTOR=_RUNCONFIGURATION, __module__='tensorflow.core.util.test_log_pb2'))
A:tensorflow.core.util.test_log_pb2.TestResults->google.protobuf.reflection.GeneratedProtocolMessageType('TestResults', (_message.Message,), dict(DESCRIPTOR=_TESTRESULTS, __module__='tensorflow.core.util.test_log_pb2'))
A:tensorflow.core.util.test_log_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x1borg.tensorflow.util.testlogB\rTestLogProtosP\x01ø\x01\x01'))
A:tensorflow.core.util.test_log_pb2._BENCHMARKENTRY_EXTRASENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))
A:tensorflow.core.util.test_log_pb2._CPUINFO_CACHESIZEENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/util/event_pb2.py----------------------------------------
A:tensorflow.core.util.event_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.util.event_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/util/event.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n tensorflow/core/util/event.proto\x12\ntensorflow\x1a\'tensorflow/core/framework/summary.proto"»\x02\n\x05Event\x12\x11\n\twall_time\x18\x01 \x01(\x01\x12\x0c\n\x04step\x18\x02 \x01(\x03\x12\x16\n\x0cfile_version\x18\x03 \x01(\tH\x00\x12\x13\n\tgraph_def\x18\x04 \x01(\x0cH\x00\x12&\n\x07summary\x18\x05 \x01(\x0b2\x13.tensorflow.SummaryH\x00\x12-\n\x0blog_message\x18\x06 \x01(\x0b2\x16.tensorflow.LogMessageH\x00\x12-\n\x0bsession_log\x18\x07 \x01(\x0b2\x16.tensorflow.SessionLogH\x00\x12<\n\x13tagged_run_metadata\x18\x08 \x01(\x0b2\x1d.tensorflow.TaggedRunMetadataH\x00\x12\x18\n\x0emeta_graph_def\x18\t \x01(\x0cH\x00B\x06\n\x04what"\x99\x01\n\nLogMessage\x12+\n\x05level\x18\x01 \x01(\x0e2\x1c.tensorflow.LogMessage.Level\x12\x0f\n\x07message\x18\x02 \x01(\t"M\n\x05Level\x12\x0b\n\x07UNKNOWN\x10\x00\x12\r\n\tDEBUGGING\x10\n\x12\x08\n\x04INFO\x10\x14\x12\x08\n\x04WARN\x10\x1e\x12\t\n\x05ERROR\x10(\x12\t\n\x05FATAL\x102"¶\x01\n\nSessionLog\x124\n\x06status\x18\x01 \x01(\x0e2$.tensorflow.SessionLog.SessionStatus\x12\x17\n\x0fcheckpoint_path\x18\x02 \x01(\t\x12\x0b\n\x03msg\x18\x03 \x01(\t"L\n\rSessionStatus\x12\x16\n\x12STATUS_UNSPECIFIED\x10\x00\x12\t\n\x05START\x10\x01\x12\x08\n\x04STOP\x10\x02\x12\x0e\n\nCHECKPOINT\x10\x03"6\n\x11TaggedRunMetadata\x12\x0b\n\x03tag\x18\x01 \x01(\t\x12\x14\n\x0crun_metadata\x18\x02 \x01(\x0cB\'\n\x13org.tensorflow.utilB\x0bEventProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_summary__pb2.DESCRIPTOR])
A:tensorflow.core.util.event_pb2._LOGMESSAGE_LEVEL->google.protobuf.descriptor.EnumDescriptor(name='Level', full_name='tensorflow.LogMessage.Level', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='UNKNOWN', index=0, number=0, options=None, type=None), _descriptor.EnumValueDescriptor(name='DEBUGGING', index=1, number=10, options=None, type=None), _descriptor.EnumValueDescriptor(name='INFO', index=2, number=20, options=None, type=None), _descriptor.EnumValueDescriptor(name='WARN', index=3, number=30, options=None, type=None), _descriptor.EnumValueDescriptor(name='ERROR', index=4, number=40, options=None, type=None), _descriptor.EnumValueDescriptor(name='FATAL', index=5, number=50, options=None, type=None)], containing_type=None, options=None, serialized_start=484, serialized_end=561)
A:tensorflow.core.util.event_pb2._SESSIONLOG_SESSIONSTATUS->google.protobuf.descriptor.EnumDescriptor(name='SessionStatus', full_name='tensorflow.SessionLog.SessionStatus', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='STATUS_UNSPECIFIED', index=0, number=0, options=None, type=None), _descriptor.EnumValueDescriptor(name='START', index=1, number=1, options=None, type=None), _descriptor.EnumValueDescriptor(name='STOP', index=2, number=2, options=None, type=None), _descriptor.EnumValueDescriptor(name='CHECKPOINT', index=3, number=3, options=None, type=None)], containing_type=None, options=None, serialized_start=670, serialized_end=746)
A:tensorflow.core.util.event_pb2._EVENT->google.protobuf.descriptor.Descriptor(name='Event', full_name='tensorflow.Event', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='wall_time', full_name='tensorflow.Event.wall_time', index=0, number=1, type=1, cpp_type=5, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='step', full_name='tensorflow.Event.step', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='file_version', full_name='tensorflow.Event.file_version', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='graph_def', full_name='tensorflow.Event.graph_def', index=3, number=4, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='summary', full_name='tensorflow.Event.summary', index=4, number=5, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='log_message', full_name='tensorflow.Event.log_message', index=5, number=6, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='session_log', full_name='tensorflow.Event.session_log', index=6, number=7, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tagged_run_metadata', full_name='tensorflow.Event.tagged_run_metadata', index=7, number=8, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='meta_graph_def', full_name='tensorflow.Event.meta_graph_def', index=8, number=9, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[_descriptor.OneofDescriptor(name='what', full_name='tensorflow.Event.what', index=0, containing_type=None, fields=[])], serialized_start=90, serialized_end=405)
A:tensorflow.core.util.event_pb2._LOGMESSAGE->google.protobuf.descriptor.Descriptor(name='LogMessage', full_name='tensorflow.LogMessage', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='level', full_name='tensorflow.LogMessage.level', index=0, number=1, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='message', full_name='tensorflow.LogMessage.message', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[_LOGMESSAGE_LEVEL], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=408, serialized_end=561)
A:tensorflow.core.util.event_pb2._SESSIONLOG->google.protobuf.descriptor.Descriptor(name='SessionLog', full_name='tensorflow.SessionLog', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='status', full_name='tensorflow.SessionLog.status', index=0, number=1, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='checkpoint_path', full_name='tensorflow.SessionLog.checkpoint_path', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='msg', full_name='tensorflow.SessionLog.msg', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[_SESSIONLOG_SESSIONSTATUS], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=564, serialized_end=746)
A:tensorflow.core.util.event_pb2._TAGGEDRUNMETADATA->google.protobuf.descriptor.Descriptor(name='TaggedRunMetadata', full_name='tensorflow.TaggedRunMetadata', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='tag', full_name='tensorflow.TaggedRunMetadata.tag', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='run_metadata', full_name='tensorflow.TaggedRunMetadata.run_metadata', index=1, number=2, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=748, serialized_end=802)
A:tensorflow.core.util.event_pb2.Event->google.protobuf.reflection.GeneratedProtocolMessageType('Event', (_message.Message,), dict(DESCRIPTOR=_EVENT, __module__='tensorflow.core.util.event_pb2'))
A:tensorflow.core.util.event_pb2.LogMessage->google.protobuf.reflection.GeneratedProtocolMessageType('LogMessage', (_message.Message,), dict(DESCRIPTOR=_LOGMESSAGE, __module__='tensorflow.core.util.event_pb2'))
A:tensorflow.core.util.event_pb2.SessionLog->google.protobuf.reflection.GeneratedProtocolMessageType('SessionLog', (_message.Message,), dict(DESCRIPTOR=_SESSIONLOG, __module__='tensorflow.core.util.event_pb2'))
A:tensorflow.core.util.event_pb2.TaggedRunMetadata->google.protobuf.reflection.GeneratedProtocolMessageType('TaggedRunMetadata', (_message.Message,), dict(DESCRIPTOR=_TAGGEDRUNMETADATA, __module__='tensorflow.core.util.event_pb2'))
A:tensorflow.core.util.event_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x13org.tensorflow.utilB\x0bEventProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/util/memmapped_file_system_pb2.py----------------------------------------
A:tensorflow.core.util.memmapped_file_system_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.util.memmapped_file_system_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/util/memmapped_file_system.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n0tensorflow/core/util/memmapped_file_system.proto\x12\ntensorflow"C\n#MemmappedFileSystemDirectoryElement\x12\x0e\n\x06offset\x18\x01 \x01(\x04\x12\x0c\n\x04name\x18\x02 \x01(\t"`\n\x1cMemmappedFileSystemDirectory\x12@\n\x07element\x18\x01 \x03(\x0b2/.tensorflow.MemmappedFileSystemDirectoryElementB\x03ø\x01\x01b\x06proto3'))
A:tensorflow.core.util.memmapped_file_system_pb2._MEMMAPPEDFILESYSTEMDIRECTORYELEMENT->google.protobuf.descriptor.Descriptor(name='MemmappedFileSystemDirectoryElement', full_name='tensorflow.MemmappedFileSystemDirectoryElement', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='offset', full_name='tensorflow.MemmappedFileSystemDirectoryElement.offset', index=0, number=1, type=4, cpp_type=4, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='name', full_name='tensorflow.MemmappedFileSystemDirectoryElement.name', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=64, serialized_end=131)
A:tensorflow.core.util.memmapped_file_system_pb2._MEMMAPPEDFILESYSTEMDIRECTORY->google.protobuf.descriptor.Descriptor(name='MemmappedFileSystemDirectory', full_name='tensorflow.MemmappedFileSystemDirectory', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='element', full_name='tensorflow.MemmappedFileSystemDirectory.element', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=133, serialized_end=229)
A:tensorflow.core.util.memmapped_file_system_pb2.MemmappedFileSystemDirectoryElement->google.protobuf.reflection.GeneratedProtocolMessageType('MemmappedFileSystemDirectoryElement', (_message.Message,), dict(DESCRIPTOR=_MEMMAPPEDFILESYSTEMDIRECTORYELEMENT, __module__='tensorflow.core.util.memmapped_file_system_pb2'))
A:tensorflow.core.util.memmapped_file_system_pb2.MemmappedFileSystemDirectory->google.protobuf.reflection.GeneratedProtocolMessageType('MemmappedFileSystemDirectory', (_message.Message,), dict(DESCRIPTOR=_MEMMAPPEDFILESYSTEMDIRECTORY, __module__='tensorflow.core.util.memmapped_file_system_pb2'))
A:tensorflow.core.util.memmapped_file_system_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/core/util/saved_tensor_slice_pb2.py----------------------------------------
A:tensorflow.core.util.saved_tensor_slice_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.core.util.saved_tensor_slice_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/core/util/saved_tensor_slice.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n-tensorflow/core/util/saved_tensor_slice.proto\x12\ntensorflow\x1a,tensorflow/core/framework/tensor_shape.proto\x1a,tensorflow/core/framework/tensor_slice.proto\x1a&tensorflow/core/framework/tensor.proto\x1a%tensorflow/core/framework/types.proto\x1a(tensorflow/core/framework/versions.proto"\x9c\x01\n\x0eSavedSliceMeta\x12\x0c\n\x04name\x18\x01 \x01(\t\x12+\n\x05shape\x18\x02 \x01(\x0b2\x1c.tensorflow.TensorShapeProto\x12"\n\x04type\x18\x03 \x01(\x0e2\x14.tensorflow.DataType\x12+\n\x05slice\x18\x04 \x03(\x0b2\x1c.tensorflow.TensorSliceProto"l\n\x14SavedTensorSliceMeta\x12*\n\x06tensor\x18\x01 \x03(\x0b2\x1a.tensorflow.SavedSliceMeta\x12(\n\x08versions\x18\x02 \x01(\x0b2\x16.tensorflow.VersionDef"n\n\nSavedSlice\x12\x0c\n\x04name\x18\x01 \x01(\t\x12+\n\x05slice\x18\x02 \x01(\x0b2\x1c.tensorflow.TensorSliceProto\x12%\n\x04data\x18\x03 \x01(\x0b2\x17.tensorflow.TensorProto"i\n\x11SavedTensorSlices\x12.\n\x04meta\x18\x01 \x01(\x0b2 .tensorflow.SavedTensorSliceMeta\x12$\n\x04data\x18\x02 \x01(\x0b2\x16.tensorflow.SavedSliceB2\n\x13org.tensorflow.utilB\x16SavedTensorSliceProtosP\x01ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_tensor__shape__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_tensor__slice__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_tensor__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_types__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_versions__pb2.DESCRIPTOR])
A:tensorflow.core.util.saved_tensor_slice_pb2._SAVEDSLICEMETA->google.protobuf.descriptor.Descriptor(name='SavedSliceMeta', full_name='tensorflow.SavedSliceMeta', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.SavedSliceMeta.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='shape', full_name='tensorflow.SavedSliceMeta.shape', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='type', full_name='tensorflow.SavedSliceMeta.type', index=2, number=3, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='slice', full_name='tensorflow.SavedSliceMeta.slice', index=3, number=4, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=275, serialized_end=431)
A:tensorflow.core.util.saved_tensor_slice_pb2._SAVEDTENSORSLICEMETA->google.protobuf.descriptor.Descriptor(name='SavedTensorSliceMeta', full_name='tensorflow.SavedTensorSliceMeta', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='tensor', full_name='tensorflow.SavedTensorSliceMeta.tensor', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='versions', full_name='tensorflow.SavedTensorSliceMeta.versions', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=433, serialized_end=541)
A:tensorflow.core.util.saved_tensor_slice_pb2._SAVEDSLICE->google.protobuf.descriptor.Descriptor(name='SavedSlice', full_name='tensorflow.SavedSlice', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.SavedSlice.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='slice', full_name='tensorflow.SavedSlice.slice', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='data', full_name='tensorflow.SavedSlice.data', index=2, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=543, serialized_end=653)
A:tensorflow.core.util.saved_tensor_slice_pb2._SAVEDTENSORSLICES->google.protobuf.descriptor.Descriptor(name='SavedTensorSlices', full_name='tensorflow.SavedTensorSlices', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='meta', full_name='tensorflow.SavedTensorSlices.meta', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='data', full_name='tensorflow.SavedTensorSlices.data', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=655, serialized_end=760)
A:tensorflow.core.util.saved_tensor_slice_pb2.SavedSliceMeta->google.protobuf.reflection.GeneratedProtocolMessageType('SavedSliceMeta', (_message.Message,), dict(DESCRIPTOR=_SAVEDSLICEMETA, __module__='tensorflow.core.util.saved_tensor_slice_pb2'))
A:tensorflow.core.util.saved_tensor_slice_pb2.SavedTensorSliceMeta->google.protobuf.reflection.GeneratedProtocolMessageType('SavedTensorSliceMeta', (_message.Message,), dict(DESCRIPTOR=_SAVEDTENSORSLICEMETA, __module__='tensorflow.core.util.saved_tensor_slice_pb2'))
A:tensorflow.core.util.saved_tensor_slice_pb2.SavedSlice->google.protobuf.reflection.GeneratedProtocolMessageType('SavedSlice', (_message.Message,), dict(DESCRIPTOR=_SAVEDSLICE, __module__='tensorflow.core.util.saved_tensor_slice_pb2'))
A:tensorflow.core.util.saved_tensor_slice_pb2.SavedTensorSlices->google.protobuf.reflection.GeneratedProtocolMessageType('SavedTensorSlices', (_message.Message,), dict(DESCRIPTOR=_SAVEDTENSORSLICES, __module__='tensorflow.core.util.saved_tensor_slice_pb2'))
A:tensorflow.core.util.saved_tensor_slice_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\x13org.tensorflow.utilB\x16SavedTensorSliceProtosP\x01ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/pywrap_tensorflow_internal.py----------------------------------------
A:tensorflow.python.pywrap_tensorflow_internal.(fp, pathname, description)->imp.find_module('_pywrap_tensorflow_internal', [dirname(__file__)])
A:tensorflow.python.pywrap_tensorflow_internal._mod->imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)
A:tensorflow.python.pywrap_tensorflow_internal._pywrap_tensorflow_internal->swig_import_helper()
A:tensorflow.python.pywrap_tensorflow_internal.method->class_type.__swig_getmethods__.get(name, None)
A:tensorflow.python.pywrap_tensorflow_internal.this->swig_import_helper().new_FileStatistics(*args)
A:tensorflow.python.pywrap_tensorflow_internal.New->staticmethod(_pywrap_tensorflow_internal.PyRecordWriter_New)
A:tensorflow.python.pywrap_tensorflow_internal.opts->TF_NewSessionOptions(target=target, config=config)
A:tensorflow.python.pywrap_tensorflow_internal.config_str->config.SerializeToString()
A:tensorflow.python.pywrap_tensorflow_internal.graph->GraphDef()
A:tensorflow.python.pywrap_tensorflow_internal.result_graph_string->DoQuantizeTrainingOnGraphDefHelper(input_graph.SerializeToString(), num_bits, status)
A:tensorflow.python.pywrap_tensorflow_internal.OK->staticmethod(_pywrap_tensorflow_internal.Status_OK)
A:tensorflow.python.pywrap_tensorflow_internal.length->_swig_property(_pywrap_tensorflow_internal.FileStatistics_length_get, _pywrap_tensorflow_internal.FileStatistics_length_set)
A:tensorflow.python.pywrap_tensorflow_internal.mtime_nsec->_swig_property(_pywrap_tensorflow_internal.FileStatistics_mtime_nsec_get, _pywrap_tensorflow_internal.FileStatistics_mtime_nsec_set)
A:tensorflow.python.pywrap_tensorflow_internal.is_directory->_swig_property(_pywrap_tensorflow_internal.FileStatistics_is_directory_get, _pywrap_tensorflow_internal.FileStatistics_is_directory_set)
tensorflow.python.pywrap_tensorflow_internal.AppendToFile(file_content,file,out_status)
tensorflow.python.pywrap_tensorflow_internal.Basename(path)
tensorflow.python.pywrap_tensorflow_internal.BufferedInputStream(self,*args,**kwargs)
tensorflow.python.pywrap_tensorflow_internal.BufferedInputStream.ReadLineAsString(self)
tensorflow.python.pywrap_tensorflow_internal.BufferedInputStream.Seek(self,position)
tensorflow.python.pywrap_tensorflow_internal.BufferedInputStream.Tell(self)
tensorflow.python.pywrap_tensorflow_internal.BufferedInputStream.__init__(self,*args,**kwargs)
tensorflow.python.pywrap_tensorflow_internal.CheckpointReader(self,filepattern,out_status)
tensorflow.python.pywrap_tensorflow_internal.CheckpointReader._HasTensor(self,name)
tensorflow.python.pywrap_tensorflow_internal.CheckpointReader.__init__(self,filepattern,out_status)
tensorflow.python.pywrap_tensorflow_internal.CheckpointReader.debug_string(self)
tensorflow.python.pywrap_tensorflow_internal.CheckpointReader.get_tensor(self,tensor_str)
tensorflow.python.pywrap_tensorflow_internal.CheckpointReader.get_variable_to_shape_map(self)
tensorflow.python.pywrap_tensorflow_internal.CheckpointReader.has_tensor(self,tensor_str)
tensorflow.python.pywrap_tensorflow_internal.CheckpointReader_GetTensor(reader,name,out_status)
tensorflow.python.pywrap_tensorflow_internal.CleanPath(path)
tensorflow.python.pywrap_tensorflow_internal.CopyFile(oldpath,newpath,overwrite,out_status)
tensorflow.python.pywrap_tensorflow_internal.CreateBufferedInputStream(filename,buffer_size,out_status)
tensorflow.python.pywrap_tensorflow_internal.CreateDir(dirname,out_status)
tensorflow.python.pywrap_tensorflow_internal.CreateURI(scheme,host,path)
tensorflow.python.pywrap_tensorflow_internal.CreateWritableFile(filename,mode,out_status)
tensorflow.python.pywrap_tensorflow_internal.CudaSupportsHalfMatMulAndConv()
tensorflow.python.pywrap_tensorflow_internal.DeleteFile(filename,out_status)
tensorflow.python.pywrap_tensorflow_internal.DeleteRecursively(dirname,out_status)
tensorflow.python.pywrap_tensorflow_internal.DeleteStatSummarizer(ss)
tensorflow.python.pywrap_tensorflow_internal.Dirname(path)
tensorflow.python.pywrap_tensorflow_internal.DoQuantizeTrainingOnGraphDefHelper(input_graph,num_bits,out_status)
tensorflow.python.pywrap_tensorflow_internal.EqualGraphDefWrapper(actual,expected)
tensorflow.python.pywrap_tensorflow_internal.EventsWriter(self,file_prefix)
tensorflow.python.pywrap_tensorflow_internal.EventsWriter.Close(self)
tensorflow.python.pywrap_tensorflow_internal.EventsWriter.FileName(self)
tensorflow.python.pywrap_tensorflow_internal.EventsWriter.Flush(self)
tensorflow.python.pywrap_tensorflow_internal.EventsWriter.WriteEvent(self,event)
tensorflow.python.pywrap_tensorflow_internal.EventsWriter._WriteSerializedEvent(self,event_str)
tensorflow.python.pywrap_tensorflow_internal.EventsWriter.__init__(self,file_prefix)
tensorflow.python.pywrap_tensorflow_internal.Extension(path)
tensorflow.python.pywrap_tensorflow_internal.FileExists(filename,out_status)
tensorflow.python.pywrap_tensorflow_internal.FileStatistics(self,*args)
tensorflow.python.pywrap_tensorflow_internal.FileStatistics.__init__(self,*args)
tensorflow.python.pywrap_tensorflow_internal.GetChildren(dir,out_status)
tensorflow.python.pywrap_tensorflow_internal.GetMatchingFiles(filename,out_status)
tensorflow.python.pywrap_tensorflow_internal.GetPythonWrappers(op_wrapper_buf)
tensorflow.python.pywrap_tensorflow_internal.InitializePyTrampoline(trampoline)
tensorflow.python.pywrap_tensorflow_internal.IsAbsolutePath(path)
tensorflow.python.pywrap_tensorflow_internal.IsDirectory(dirname,out_status)
tensorflow.python.pywrap_tensorflow_internal.IsGoogleCudaEnabled()
tensorflow.python.pywrap_tensorflow_internal.ListDevices(out_status)
tensorflow.python.pywrap_tensorflow_internal.NewCheckpointReader(filepattern)
tensorflow.python.pywrap_tensorflow_internal.NewStatSummarizer(unused)
tensorflow.python.pywrap_tensorflow_internal.ParseURI(uri,scheme,host,path)
tensorflow.python.pywrap_tensorflow_internal.PyRecordReader(self,*args,**kwargs)
tensorflow.python.pywrap_tensorflow_internal.PyRecordReader.Close(self)
tensorflow.python.pywrap_tensorflow_internal.PyRecordReader.GetNext(self,status)
tensorflow.python.pywrap_tensorflow_internal.PyRecordReader.__init__(self,*args,**kwargs)
tensorflow.python.pywrap_tensorflow_internal.PyRecordReader.offset(self)
tensorflow.python.pywrap_tensorflow_internal.PyRecordReader.record(self)
tensorflow.python.pywrap_tensorflow_internal.PyRecordReader_New(filename,start_offset,compression_type_string,out_status)
tensorflow.python.pywrap_tensorflow_internal.PyRecordWriter(self,*args,**kwargs)
tensorflow.python.pywrap_tensorflow_internal.PyRecordWriter.Close(self)
tensorflow.python.pywrap_tensorflow_internal.PyRecordWriter.WriteRecord(self,record)
tensorflow.python.pywrap_tensorflow_internal.PyRecordWriter.__init__(self,*args,**kwargs)
tensorflow.python.pywrap_tensorflow_internal.PyRecordWriter_New(filename,compression_type_string,out_status)
tensorflow.python.pywrap_tensorflow_internal.PyServer_Join(in_server,out_status)
tensorflow.python.pywrap_tensorflow_internal.PyServer_New(server_def,out_status)
tensorflow.python.pywrap_tensorflow_internal.PyServer_Start(in_server,out_status)
tensorflow.python.pywrap_tensorflow_internal.PyServer_Stop(in_server,out_status)
tensorflow.python.pywrap_tensorflow_internal.ReadFileToString(filename,out_status)
tensorflow.python.pywrap_tensorflow_internal.ReadFromStream(stream,bytes,out_status)
tensorflow.python.pywrap_tensorflow_internal.RecursivelyCreateDir(dirname,out_status)
tensorflow.python.pywrap_tensorflow_internal.RenameFile(oldname,newname,overwrite,out_status)
tensorflow.python.pywrap_tensorflow_internal.RunCppShapeInference(graph_def_version,serialized_node_def,input_serialized_shapes,input_constant_tensor_values,input_constant_tensor_as_shape_values,out_status)
tensorflow.python.pywrap_tensorflow_internal.ServerInterface(self,*args,**kwargs)
tensorflow.python.pywrap_tensorflow_internal.ServerInterface.__init__(self,*args,**kwargs)
tensorflow.python.pywrap_tensorflow_internal.ServerInterface.target(self)
tensorflow.python.pywrap_tensorflow_internal.Set_TF_Status_from_Status(tf_status,status)
tensorflow.python.pywrap_tensorflow_internal.Stat(filename,stats,out_status)
tensorflow.python.pywrap_tensorflow_internal.StatSummarizer(self,*args)
tensorflow.python.pywrap_tensorflow_internal.StatSummarizer.GetOutputString(self)
tensorflow.python.pywrap_tensorflow_internal.StatSummarizer.PrintStepStats(self)
tensorflow.python.pywrap_tensorflow_internal.StatSummarizer.ProcessStepStats(self,step_stats)
tensorflow.python.pywrap_tensorflow_internal.StatSummarizer.ProcessStepStatsStr(self,step_stats_str)
tensorflow.python.pywrap_tensorflow_internal.StatSummarizer.__init__(self,*args)
tensorflow.python.pywrap_tensorflow_internal.Status(self,*args)
tensorflow.python.pywrap_tensorflow_internal.Status.IgnoreError(self)
tensorflow.python.pywrap_tensorflow_internal.Status.ToString(self)
tensorflow.python.pywrap_tensorflow_internal.Status.Update(self,new_status)
tensorflow.python.pywrap_tensorflow_internal.Status.__eq__(self,x)
tensorflow.python.pywrap_tensorflow_internal.Status.__init__(self,*args)
tensorflow.python.pywrap_tensorflow_internal.Status.__ne__(self,x)
tensorflow.python.pywrap_tensorflow_internal.Status.code(self)
tensorflow.python.pywrap_tensorflow_internal.Status.error_message(self)
tensorflow.python.pywrap_tensorflow_internal.Status.ok(self)
tensorflow.python.pywrap_tensorflow_internal.Status_OK()
tensorflow.python.pywrap_tensorflow_internal.TF_Buffer(self)
tensorflow.python.pywrap_tensorflow_internal.TF_Buffer.__init__(self)
tensorflow.python.pywrap_tensorflow_internal.TF_CloseDeprecatedSession(arg1,status)
tensorflow.python.pywrap_tensorflow_internal.TF_DeleteBuffer(arg1)
tensorflow.python.pywrap_tensorflow_internal.TF_DeleteDeprecatedSession(arg1,status)
tensorflow.python.pywrap_tensorflow_internal.TF_DeleteSessionOptions(arg1)
tensorflow.python.pywrap_tensorflow_internal.TF_DeleteStatus(arg1)
tensorflow.python.pywrap_tensorflow_internal.TF_ExtendGraph(arg1,proto,arg3)
tensorflow.python.pywrap_tensorflow_internal.TF_GetBuffer(buffer)
tensorflow.python.pywrap_tensorflow_internal.TF_GetCode(s)
tensorflow.python.pywrap_tensorflow_internal.TF_GetOpList(lib_handle)
tensorflow.python.pywrap_tensorflow_internal.TF_LoadLibrary(library_filename,status)
tensorflow.python.pywrap_tensorflow_internal.TF_Message(s)
tensorflow.python.pywrap_tensorflow_internal.TF_NewBuffer()
tensorflow.python.pywrap_tensorflow_internal.TF_NewBufferFromString(proto)
tensorflow.python.pywrap_tensorflow_internal.TF_NewDeprecatedSession(arg1,status)
tensorflow.python.pywrap_tensorflow_internal.TF_NewSessionOptions(target=None,config=None)
tensorflow.python.pywrap_tensorflow_internal.TF_NewStatus()
tensorflow.python.pywrap_tensorflow_internal.TF_PRun(session,handle,feed_dict,output_names,out_status)
tensorflow.python.pywrap_tensorflow_internal.TF_PRunSetup(session,input_names,output_names,target_nodes,out_status)
tensorflow.python.pywrap_tensorflow_internal.TF_Reset(target,containers=None,config=None)
tensorflow.python.pywrap_tensorflow_internal.TF_Reset_wrapper(opt,containers,out_status)
tensorflow.python.pywrap_tensorflow_internal.TF_Run(session,run_options,feed_dict,output_names,target_nodes,out_status,run_outputs)
tensorflow.python.pywrap_tensorflow_internal.TfCheckOpHelper(v,msg)
tensorflow.python.pywrap_tensorflow_internal.TfCheckOpHelperOutOfLine(v,msg)
tensorflow.python.pywrap_tensorflow_internal.TransformGraphWithStringInputs(graph_def_string,inputs_string,outputs_string,transforms_string,out_status)
tensorflow.python.pywrap_tensorflow_internal.TryFindKernelClass(serialized_node_def)
tensorflow.python.pywrap_tensorflow_internal.WritableFile(self,*args,**kwargs)
tensorflow.python.pywrap_tensorflow_internal.WritableFile.Close(self)
tensorflow.python.pywrap_tensorflow_internal.WritableFile.Flush(self)
tensorflow.python.pywrap_tensorflow_internal.WritableFile.__init__(self,*args,**kwargs)
tensorflow.python.pywrap_tensorflow_internal.WriteStringToFile(filename,file_content,out_status)
tensorflow.python.pywrap_tensorflow_internal._TF_NewSessionOptions()
tensorflow.python.pywrap_tensorflow_internal._TF_SetConfig(options,proto,status)
tensorflow.python.pywrap_tensorflow_internal._TF_SetTarget(options,target)
tensorflow.python.pywrap_tensorflow_internal.__lshift__(os,x)
tensorflow.python.pywrap_tensorflow_internal._swig_getattr(self,class_type,name)
tensorflow.python.pywrap_tensorflow_internal._swig_getattr_nondynamic(self,class_type,name,static=1)
tensorflow.python.pywrap_tensorflow_internal._swig_repr(self)
tensorflow.python.pywrap_tensorflow_internal._swig_setattr(self,class_type,name,value)
tensorflow.python.pywrap_tensorflow_internal._swig_setattr_nondynamic(self,class_type,name,value,static=1)
tensorflow.python.pywrap_tensorflow_internal.do_quantize_training_on_graphdef(input_graph,num_bits)
tensorflow.python.pywrap_tensorflow_internal.list_devices()
tensorflow.pywrap_tensorflow_internal.AppendToFile(file_content,file,out_status)
tensorflow.pywrap_tensorflow_internal.Basename(path)
tensorflow.pywrap_tensorflow_internal.BufferedInputStream(self,*args,**kwargs)
tensorflow.pywrap_tensorflow_internal.BufferedInputStream.ReadLineAsString(self)
tensorflow.pywrap_tensorflow_internal.BufferedInputStream.Seek(self,position)
tensorflow.pywrap_tensorflow_internal.BufferedInputStream.Tell(self)
tensorflow.pywrap_tensorflow_internal.CheckpointReader(self,filepattern,out_status)
tensorflow.pywrap_tensorflow_internal.CheckpointReader._HasTensor(self,name)
tensorflow.pywrap_tensorflow_internal.CheckpointReader.debug_string(self)
tensorflow.pywrap_tensorflow_internal.CheckpointReader.get_tensor(self,tensor_str)
tensorflow.pywrap_tensorflow_internal.CheckpointReader.get_variable_to_shape_map(self)
tensorflow.pywrap_tensorflow_internal.CheckpointReader.has_tensor(self,tensor_str)
tensorflow.pywrap_tensorflow_internal.CheckpointReader_GetTensor(reader,name,out_status)
tensorflow.pywrap_tensorflow_internal.CleanPath(path)
tensorflow.pywrap_tensorflow_internal.CopyFile(oldpath,newpath,overwrite,out_status)
tensorflow.pywrap_tensorflow_internal.CreateBufferedInputStream(filename,buffer_size,out_status)
tensorflow.pywrap_tensorflow_internal.CreateDir(dirname,out_status)
tensorflow.pywrap_tensorflow_internal.CreateURI(scheme,host,path)
tensorflow.pywrap_tensorflow_internal.CreateWritableFile(filename,mode,out_status)
tensorflow.pywrap_tensorflow_internal.CudaSupportsHalfMatMulAndConv()
tensorflow.pywrap_tensorflow_internal.DeleteFile(filename,out_status)
tensorflow.pywrap_tensorflow_internal.DeleteRecursively(dirname,out_status)
tensorflow.pywrap_tensorflow_internal.DeleteStatSummarizer(ss)
tensorflow.pywrap_tensorflow_internal.Dirname(path)
tensorflow.pywrap_tensorflow_internal.DoQuantizeTrainingOnGraphDefHelper(input_graph,num_bits,out_status)
tensorflow.pywrap_tensorflow_internal.EqualGraphDefWrapper(actual,expected)
tensorflow.pywrap_tensorflow_internal.EventsWriter(self,file_prefix)
tensorflow.pywrap_tensorflow_internal.EventsWriter.Close(self)
tensorflow.pywrap_tensorflow_internal.EventsWriter.FileName(self)
tensorflow.pywrap_tensorflow_internal.EventsWriter.Flush(self)
tensorflow.pywrap_tensorflow_internal.EventsWriter.WriteEvent(self,event)
tensorflow.pywrap_tensorflow_internal.EventsWriter._WriteSerializedEvent(self,event_str)
tensorflow.pywrap_tensorflow_internal.Extension(path)
tensorflow.pywrap_tensorflow_internal.FileExists(filename,out_status)
tensorflow.pywrap_tensorflow_internal.FileStatistics(self,*args)
tensorflow.pywrap_tensorflow_internal.GetChildren(dir,out_status)
tensorflow.pywrap_tensorflow_internal.GetMatchingFiles(filename,out_status)
tensorflow.pywrap_tensorflow_internal.GetPythonWrappers(op_wrapper_buf)
tensorflow.pywrap_tensorflow_internal.InitializePyTrampoline(trampoline)
tensorflow.pywrap_tensorflow_internal.IsAbsolutePath(path)
tensorflow.pywrap_tensorflow_internal.IsDirectory(dirname,out_status)
tensorflow.pywrap_tensorflow_internal.IsGoogleCudaEnabled()
tensorflow.pywrap_tensorflow_internal.ListDevices(out_status)
tensorflow.pywrap_tensorflow_internal.NewCheckpointReader(filepattern)
tensorflow.pywrap_tensorflow_internal.NewStatSummarizer(unused)
tensorflow.pywrap_tensorflow_internal.ParseURI(uri,scheme,host,path)
tensorflow.pywrap_tensorflow_internal.PyRecordReader(self,*args,**kwargs)
tensorflow.pywrap_tensorflow_internal.PyRecordReader.Close(self)
tensorflow.pywrap_tensorflow_internal.PyRecordReader.GetNext(self,status)
tensorflow.pywrap_tensorflow_internal.PyRecordReader.offset(self)
tensorflow.pywrap_tensorflow_internal.PyRecordReader.record(self)
tensorflow.pywrap_tensorflow_internal.PyRecordReader_New(filename,start_offset,compression_type_string,out_status)
tensorflow.pywrap_tensorflow_internal.PyRecordWriter(self,*args,**kwargs)
tensorflow.pywrap_tensorflow_internal.PyRecordWriter.Close(self)
tensorflow.pywrap_tensorflow_internal.PyRecordWriter.WriteRecord(self,record)
tensorflow.pywrap_tensorflow_internal.PyRecordWriter_New(filename,compression_type_string,out_status)
tensorflow.pywrap_tensorflow_internal.PyServer_Join(in_server,out_status)
tensorflow.pywrap_tensorflow_internal.PyServer_New(server_def,out_status)
tensorflow.pywrap_tensorflow_internal.PyServer_Start(in_server,out_status)
tensorflow.pywrap_tensorflow_internal.PyServer_Stop(in_server,out_status)
tensorflow.pywrap_tensorflow_internal.ReadFileToString(filename,out_status)
tensorflow.pywrap_tensorflow_internal.ReadFromStream(stream,bytes,out_status)
tensorflow.pywrap_tensorflow_internal.RecursivelyCreateDir(dirname,out_status)
tensorflow.pywrap_tensorflow_internal.RenameFile(oldname,newname,overwrite,out_status)
tensorflow.pywrap_tensorflow_internal.RunCppShapeInference(graph_def_version,serialized_node_def,input_serialized_shapes,input_constant_tensor_values,input_constant_tensor_as_shape_values,out_status)
tensorflow.pywrap_tensorflow_internal.ServerInterface(self,*args,**kwargs)
tensorflow.pywrap_tensorflow_internal.ServerInterface.target(self)
tensorflow.pywrap_tensorflow_internal.Set_TF_Status_from_Status(tf_status,status)
tensorflow.pywrap_tensorflow_internal.Stat(filename,stats,out_status)
tensorflow.pywrap_tensorflow_internal.StatSummarizer(self,*args)
tensorflow.pywrap_tensorflow_internal.StatSummarizer.GetOutputString(self)
tensorflow.pywrap_tensorflow_internal.StatSummarizer.PrintStepStats(self)
tensorflow.pywrap_tensorflow_internal.StatSummarizer.ProcessStepStats(self,step_stats)
tensorflow.pywrap_tensorflow_internal.StatSummarizer.ProcessStepStatsStr(self,step_stats_str)
tensorflow.pywrap_tensorflow_internal.Status(self,*args)
tensorflow.pywrap_tensorflow_internal.Status.IgnoreError(self)
tensorflow.pywrap_tensorflow_internal.Status.ToString(self)
tensorflow.pywrap_tensorflow_internal.Status.Update(self,new_status)
tensorflow.pywrap_tensorflow_internal.Status.__eq__(self,x)
tensorflow.pywrap_tensorflow_internal.Status.__ne__(self,x)
tensorflow.pywrap_tensorflow_internal.Status.code(self)
tensorflow.pywrap_tensorflow_internal.Status.error_message(self)
tensorflow.pywrap_tensorflow_internal.Status.ok(self)
tensorflow.pywrap_tensorflow_internal.Status_OK()
tensorflow.pywrap_tensorflow_internal.TF_Buffer(self)
tensorflow.pywrap_tensorflow_internal.TF_CloseDeprecatedSession(arg1,status)
tensorflow.pywrap_tensorflow_internal.TF_DeleteBuffer(arg1)
tensorflow.pywrap_tensorflow_internal.TF_DeleteDeprecatedSession(arg1,status)
tensorflow.pywrap_tensorflow_internal.TF_DeleteSessionOptions(arg1)
tensorflow.pywrap_tensorflow_internal.TF_DeleteStatus(arg1)
tensorflow.pywrap_tensorflow_internal.TF_ExtendGraph(arg1,proto,arg3)
tensorflow.pywrap_tensorflow_internal.TF_GetBuffer(buffer)
tensorflow.pywrap_tensorflow_internal.TF_GetCode(s)
tensorflow.pywrap_tensorflow_internal.TF_GetOpList(lib_handle)
tensorflow.pywrap_tensorflow_internal.TF_LoadLibrary(library_filename,status)
tensorflow.pywrap_tensorflow_internal.TF_Message(s)
tensorflow.pywrap_tensorflow_internal.TF_NewBuffer()
tensorflow.pywrap_tensorflow_internal.TF_NewBufferFromString(proto)
tensorflow.pywrap_tensorflow_internal.TF_NewDeprecatedSession(arg1,status)
tensorflow.pywrap_tensorflow_internal.TF_NewSessionOptions(target=None,config=None)
tensorflow.pywrap_tensorflow_internal.TF_NewStatus()
tensorflow.pywrap_tensorflow_internal.TF_PRun(session,handle,feed_dict,output_names,out_status)
tensorflow.pywrap_tensorflow_internal.TF_PRunSetup(session,input_names,output_names,target_nodes,out_status)
tensorflow.pywrap_tensorflow_internal.TF_Reset(target,containers=None,config=None)
tensorflow.pywrap_tensorflow_internal.TF_Reset_wrapper(opt,containers,out_status)
tensorflow.pywrap_tensorflow_internal.TF_Run(session,run_options,feed_dict,output_names,target_nodes,out_status,run_outputs)
tensorflow.pywrap_tensorflow_internal.TfCheckOpHelper(v,msg)
tensorflow.pywrap_tensorflow_internal.TfCheckOpHelperOutOfLine(v,msg)
tensorflow.pywrap_tensorflow_internal.TransformGraphWithStringInputs(graph_def_string,inputs_string,outputs_string,transforms_string,out_status)
tensorflow.pywrap_tensorflow_internal.TryFindKernelClass(serialized_node_def)
tensorflow.pywrap_tensorflow_internal.WritableFile(self,*args,**kwargs)
tensorflow.pywrap_tensorflow_internal.WritableFile.Close(self)
tensorflow.pywrap_tensorflow_internal.WritableFile.Flush(self)
tensorflow.pywrap_tensorflow_internal.WriteStringToFile(filename,file_content,out_status)
tensorflow.pywrap_tensorflow_internal._TF_NewSessionOptions()
tensorflow.pywrap_tensorflow_internal._TF_SetConfig(options,proto,status)
tensorflow.pywrap_tensorflow_internal._TF_SetTarget(options,target)
tensorflow.pywrap_tensorflow_internal.__lshift__(os,x)
tensorflow.pywrap_tensorflow_internal._swig_getattr(self,class_type,name)
tensorflow.pywrap_tensorflow_internal._swig_getattr_nondynamic(self,class_type,name,static=1)
tensorflow.pywrap_tensorflow_internal._swig_repr(self)
tensorflow.pywrap_tensorflow_internal._swig_setattr(self,class_type,name,value)
tensorflow.pywrap_tensorflow_internal._swig_setattr_nondynamic(self,class_type,name,value,static=1)
tensorflow.pywrap_tensorflow_internal.do_quantize_training_on_graphdef(input_graph,num_bits)
tensorflow.pywrap_tensorflow_internal.list_devices()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/__init__.py----------------------------------------
A:tensorflow.python.__init__._exported_dunders->set(['__version__', '__git_version__', '__compiler_version__'])


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/pywrap_tensorflow.py----------------------------------------
A:tensorflow.python.pywrap_tensorflow._default_dlopen_flags->sys.getdlopenflags()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/lib/source_utils.py----------------------------------------
A:tensorflow.python.debug.lib.source_utils.source_file_path->os.path.normpath(source_file_path)
A:tensorflow.python.debug.lib.source_utils.traceback->dump.node_traceback(op.name)
A:tensorflow.python.debug.lib.source_utils.watch_keys->dump.debug_watch_keys(op.name)
A:tensorflow.python.debug.lib.source_utils.items_to_append->list(set(map(_convert_watch_key_to_tensor_name, watch_keys)))
tensorflow.debug.lib.source_utils._convert_watch_key_to_tensor_name(watch_key)
tensorflow.debug.lib.source_utils.annotate_source(dump,source_file_path,do_dumped_tensors=False,file_stack_top=False,min_line=None,max_line=None)
tensorflow.python.debug.lib.source_utils._convert_watch_key_to_tensor_name(watch_key)
tensorflow.python.debug.lib.source_utils.annotate_source(dump,source_file_path,do_dumped_tensors=False,file_stack_top=False,min_line=None,max_line=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/lib/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/lib/session_debug_testlib.py----------------------------------------
A:tensorflow.python.debug.lib.session_debug_testlib.self._w->tensorflow.python.ops.variables.Variable(1.0, dtype=dtypes.float32, name='w')
A:tensorflow.python.debug.lib.session_debug_testlib.self._dump_root->tempfile.mkdtemp()
A:tensorflow.python.debug.lib.session_debug_testlib.u_init_val->numpy.array([[5.0, 3.0], [-1.0, 0.0]])
A:tensorflow.python.debug.lib.session_debug_testlib.v_init_val->numpy.array(2.0)
A:tensorflow.python.debug.lib.session_debug_testlib.u_init->tensorflow.python.framework.constant_op.constant(10.0)
A:tensorflow.python.debug.lib.session_debug_testlib.u->tensorflow.python.ops.variables.Variable(u_init, name='traceback/u')
A:tensorflow.python.debug.lib.session_debug_testlib.v_init->tensorflow.python.framework.constant_op.constant(20.0)
A:tensorflow.python.debug.lib.session_debug_testlib.v->tensorflow.python.ops.variables.Variable(30.0, name='v')
A:tensorflow.python.debug.lib.session_debug_testlib.w->tensorflow.python.ops.math_ops.multiply(u, v, name='traceback/w')
A:tensorflow.python.debug.lib.session_debug_testlib.run_options->tensorflow.core.protobuf.config_pb2.RunOptions(output_partition_graphs=True)
A:tensorflow.python.debug.lib.session_debug_testlib.run_metadata->tensorflow.core.protobuf.config_pb2.RunMetadata()
A:tensorflow.python.debug.lib.session_debug_testlib.dump->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index])
A:tensorflow.python.debug.lib.session_debug_testlib.simple_add_results->collections.namedtuple('SimpleAddResults', ['u_init_val', 'v_init_val', 'u', 'v', 'w', 'u_name', 'v_name', 'w_name', 'dump'])
A:tensorflow.python.debug.lib.session_debug_testlib.results->self._generate_dump_from_simple_addition_graph()
A:tensorflow.python.debug.lib.session_debug_testlib.str1_init_val->numpy.array(b'abc')
A:tensorflow.python.debug.lib.session_debug_testlib.str2_init_val->numpy.array(b'def')
A:tensorflow.python.debug.lib.session_debug_testlib.str1_init->tensorflow.python.framework.constant_op.constant(str1_init_val)
A:tensorflow.python.debug.lib.session_debug_testlib.str2_init->tensorflow.python.framework.constant_op.constant(str2_init_val)
A:tensorflow.python.debug.lib.session_debug_testlib.str1->tensorflow.python.ops.variables.Variable(str1_init, name=str1_name)
A:tensorflow.python.debug.lib.session_debug_testlib.str2->tensorflow.python.ops.variables.Variable(str2_init, name=str2_name)
A:tensorflow.python.debug.lib.session_debug_testlib.str_concat->tensorflow.python.ops.math_ops.add(str1, str2, name='str_concat')
A:tensorflow.python.debug.lib.session_debug_testlib.debug_urls->self._debug_urls()
A:tensorflow.python.debug.lib.session_debug_testlib.s_init->tensorflow.python.framework.constant_op.constant(s_init_val)
A:tensorflow.python.debug.lib.session_debug_testlib.s->tensorflow.python.ops.variables.Variable(s_init, name=s_name)
A:tensorflow.python.debug.lib.session_debug_testlib.u_vals->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).get_tensors(u_name, 0, 'DebugIdentity')
A:tensorflow.python.debug.lib.session_debug_testlib.s_vals->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).get_tensors(s_name, 0, 'DebugIdentity')
A:tensorflow.python.debug.lib.session_debug_testlib.i->tensorflow.python.framework.constant_op.constant(10, name='i')
A:tensorflow.python.debug.lib.session_debug_testlib.new_u->tensorflow.python.ops.state_ops.assign_add(u, v)
A:tensorflow.python.debug.lib.session_debug_testlib.new_i->tensorflow.python.ops.control_flow_ops.with_dependencies([op], new_i)
A:tensorflow.python.debug.lib.session_debug_testlib.op->tensorflow.python.ops.control_flow_ops.group(new_u)
A:tensorflow.python.debug.lib.session_debug_testlib.loop->tensorflow.python.ops.control_flow_ops.while_loop(loop_cond, loop_body, [i])
A:tensorflow.python.debug.lib.session_debug_testlib.r->sess.run(loop, options=run_options, run_metadata=run_metadata)
A:tensorflow.python.debug.lib.session_debug_testlib.u_val_final->sess.run(u)
A:tensorflow.python.debug.lib.session_debug_testlib.while_id_tensors->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).get_tensors('while/Identity', 0, 'DebugIdentity')
A:tensorflow.python.debug.lib.session_debug_testlib.while_id_rel_timestamps->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).get_rel_timestamps('while/Identity', 0, 'DebugIdentity')
A:tensorflow.python.debug.lib.session_debug_testlib.while_id_dump_sizes_bytes->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).get_dump_sizes_bytes('while/Identity', 0, 'DebugIdentity')
A:tensorflow.python.debug.lib.session_debug_testlib.watch_keys->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).debug_watch_keys('while/Identity')
A:tensorflow.python.debug.lib.session_debug_testlib.input_values->numpy.random.randn(time_steps, batch_size, input_size)
A:tensorflow.python.debug.lib.session_debug_testlib.sequence_length->numpy.random.randint(0, time_steps, size=batch_size)
A:tensorflow.python.debug.lib.session_debug_testlib.concat_inputs->tensorflow.python.ops.array_ops.placeholder(dtypes.float32, shape=(time_steps, batch_size, input_size))
A:tensorflow.python.debug.lib.session_debug_testlib.(outputs_dynamic, _)->tensorflow.python.ops.rnn.dynamic_rnn(_RNNCellForTest(input_size, state_size), inputs=concat_inputs, sequence_length=sequence_length, time_major=True, dtype=dtypes.float32)
A:tensorflow.python.debug.lib.session_debug_testlib.toy_loss->tensorflow.python.ops.math_ops.reduce_sum(outputs_dynamic * outputs_dynamic)
A:tensorflow.python.debug.lib.session_debug_testlib.train_op->tensorflow.python.training.gradient_descent.GradientDescentOptimizer(learning_rate=0.1).minimize(w, name='gdo/train')
A:tensorflow.python.debug.lib.session_debug_testlib.x->tensorflow.python.ops.math_ops.add(a, b, name='x')
A:tensorflow.python.debug.lib.session_debug_testlib.y->tensorflow.python.ops.math_ops.divide(x, b, name='y')
A:tensorflow.python.debug.lib.session_debug_testlib.cond->tensorflow.python.ops.control_flow_ops.cond(x > y, lambda : math_ops.add(x, 1), lambda : math_ops.add(y, 1))
A:tensorflow.python.debug.lib.session_debug_testlib.z->tensorflow.python.ops.control_flow_ops.no_op(name='z')
A:tensorflow.python.debug.lib.session_debug_testlib.bad_data->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).find(has_bad_value)
A:tensorflow.python.debug.lib.session_debug_testlib.first_bad_datum->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).find(has_bad_value, first_n=1)
A:tensorflow.python.debug.lib.session_debug_testlib.(u_name, _, _, dump)->self._session_run_for_graph_structure_lookup()
A:tensorflow.python.debug.lib.session_debug_testlib.node_names->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).nodes()
A:tensorflow.python.debug.lib.session_debug_testlib.u_attr->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).node_attributes(u_name)
A:tensorflow.python.debug.lib.session_debug_testlib.(u_name, v_name, w_name, dump)->self._session_run_for_graph_structure_lookup()
A:tensorflow.python.debug.lib.session_debug_testlib.u_data->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).watch_key_to_data(dump.debug_watch_keys(u_name)[0])
A:tensorflow.python.debug.lib.session_debug_testlib.(_, _, _, dump)->self._session_run_for_graph_structure_lookup()
A:tensorflow.python.debug.lib.session_debug_testlib.v_timestamp->int(v_file_path[v_file_path.rindex('_') + 1:])
A:tensorflow.python.debug.lib.session_debug_testlib.w_timestamp->int(w_file_path[w_file_path.rindex('_') + 1:])
A:tensorflow.python.debug.lib.session_debug_testlib.(unique_x, indices, _)->tensorflow.python.ops.array_ops.unique_with_counts(x, name=u_name)
A:tensorflow.python.debug.lib.session_debug_testlib.update_u_data->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).watch_key_to_data('gdo/train/update_gdo/u/ApplyGradientDescent:0:DebugIdentity')
A:tensorflow.python.debug.lib.session_debug_testlib.update_v_data->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).watch_key_to_data('gdo/train/update_gdo/v/ApplyGradientDescent:0:DebugIdentity')
A:tensorflow.python.debug.lib.session_debug_testlib.x_init->tensorflow.python.framework.constant_op.constant([2, 2, 3, 5, 5])
A:tensorflow.python.debug.lib.session_debug_testlib.(unique_x, _)->tensorflow.python.ops.array_ops.unique(x, name='unconnected/unique_x')
A:tensorflow.python.debug.lib.session_debug_testlib.result->sess.run(y, options=run_options, run_metadata=run_metadata)
A:tensorflow.python.debug.lib.session_debug_testlib.unique_x_slot_0_dumps->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).watch_key_to_data('unconnected/unique_x:0:DebugIdentity')
A:tensorflow.python.debug.lib.session_debug_testlib.unique_x_slot_1_dumps->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).watch_key_to_data('unconnected/unique_x:1:DebugIdentity')
A:tensorflow.python.debug.lib.session_debug_testlib.ph->tensorflow.python.ops.array_ops.placeholder(dtypes.float32, name='mismatch/ph')
A:tensorflow.python.debug.lib.session_debug_testlib.dump1->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_root)
A:tensorflow.python.debug.lib.session_debug_testlib.dump2->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_root)
A:tensorflow.python.debug.lib.session_debug_testlib.dump3->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_root)
A:tensorflow.python.debug.lib.session_debug_testlib.m->tensorflow.python.ops.math_ops.add(n, n, name='m')
A:tensorflow.python.debug.lib.session_debug_testlib.m_dumps->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).watch_key_to_data('mismatch/m:0:DebugIdentity')
A:tensorflow.python.debug.lib.session_debug_testlib.x_dumps->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).watch_key_to_data('mismatch/x:0:DebugIdentity')
A:tensorflow.python.debug.lib.session_debug_testlib.a->tensorflow.python.ops.variables.Variable([10.0, 10.0], name='a')
A:tensorflow.python.debug.lib.session_debug_testlib.b->tensorflow.python.ops.variables.Variable([10.0, 2.0], name='b')
A:tensorflow.python.debug.lib.session_debug_testlib.c->tensorflow.python.ops.variables.Variable(0.0, name='c')
A:tensorflow.python.debug.lib.session_debug_testlib.d->tensorflow.python.ops.math_ops.add(a, b, name='d')
A:tensorflow.python.debug.lib.session_debug_testlib.e->tensorflow.python.ops.math_ops.add(d, c, name='e')
A:tensorflow.python.debug.lib.session_debug_testlib.n->tensorflow.python.ops.parsing_ops.string_to_number(e, name='n')
A:tensorflow.python.debug.lib.session_debug_testlib.new_run_options->tensorflow.core.protobuf.config_pb2.RunOptions(output_partition_graphs=True)
A:tensorflow.python.debug.lib.session_debug_testlib.q->tensorflow.python.ops.data_flow_ops.FIFOQueue(3, 'float', name='fifo_queue')
A:tensorflow.python.debug.lib.session_debug_testlib.q_init->tensorflow.python.ops.data_flow_ops.FIFOQueue(3, 'float', name='fifo_queue').enqueue_many(([101.0, 202.0, 303.0],), name='enqueue_many')
A:tensorflow.python.debug.lib.session_debug_testlib.traceback->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).node_traceback('traceback/w:0')
A:tensorflow.python.debug.lib.session_debug_testlib.concurrent_debug_urls->self._get_concurrent_debug_urls()
A:tensorflow.python.debug.lib.session_debug_testlib.inc_thread->threading.Thread(target=functools.partial(inc_job, index))
A:tensorflow.python.debug.lib.session_debug_testlib.v_data->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_roots[index]).get_tensors('v', 0, 'DebugIdentity')
A:tensorflow.python.debug.lib.session_debug_testlib.core_metadata_files->glob.glob(os.path.join(self._dump_roots[index], '_tfdbg_core*'))
A:tensorflow.python.debug.lib.session_debug_testlib.event->tensorflow.core.util.event_pb2.Event()
A:tensorflow.python.debug.lib.session_debug_testlib.core_metadata->tensorflow.python.debug.lib.debug_data.extract_core_metadata_from_event_proto(event)
A:tensorflow.python.debug.lib.session_debug_testlib.executor_step_counts->sorted(executor_step_counts, key=lambda x: x[0])
A:tensorflow.python.debug.lib.session_debug_testlib.session_run_counts->sorted(session_run_counts, key=lambda x: x[0])
tensorflow.debug.lib.session_debug_testlib.DebugConcurrentRunCallsTest(test_util.TensorFlowTestCase)
tensorflow.debug.lib.session_debug_testlib.DebugConcurrentRunCallsTest._get_concurrent_debug_urls(self)
tensorflow.debug.lib.session_debug_testlib.DebugConcurrentRunCallsTest.testDebugConcurrentVariableUpdates(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase(test_util.TensorFlowTestCase)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase._debug_dump_dir(self,run_number=None)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase._debug_urls(self,run_number=None)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase._generate_dump_from_simple_addition_graph(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase._session_run_for_graph_structure_lookup(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.setUp(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.setUpClass(cls)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.tearDown(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.tearDownClass(cls)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testAllowsWatchingUnconnectedOutputTensor(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testCausalityCheckOnDumpsDetectsWrongTemporalOrder(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testConcurrentDumpingToPathsWithOverlappingParentDirsWorks(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugCondWatchingWholeGraphWorks(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugNumericSummaryFailureIsToleratedWhenOrdered(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugNumericSummaryInvalidAttributesStringAreCaught(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugNumericSummaryMuteOnHealthyAndCustomBoundsWork(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugNumericSummaryMuteOnHealthyMutesOnlyHealthyTensorDumps(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugNumericSummaryOnInitializedTensorGivesCorrectResult(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugNumericSummaryOnUninitializedTensorGivesCorrectResult(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugQueueOpsDoesNotoErrorOut(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugTrainingDynamicRNNWorks(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugWhileLoopGeneratesMultipleDumps(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugWhileLoopWatchingWholeGraphWorks(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebuggingDuringOpError(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testDumpStringTensorsWorks(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testDumpUninitializedVariable(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testFindNodesWithBadTensorValues(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testGetOpTypeWorks(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testGraphStructureLookupGivesDebugWatchKeys(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testGraphStructureLookupGivesDevicesAndNodesInfo(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testGraphStructureLookupGivesNodeInputsAndRecipients(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testGraphStructureLookupGivesNodesAndAttributes(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testGraphStructureLookupWithoutPartitionGraphsDoesNotErrorOut(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testLookUpNodePythonTracebackWorks(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testOutputSlotWithoutOutgoingEdgeCanBeWatched(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testSuccessiveDebuggingRunsIncreasesCounters(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testWatchingOnlyOneOfTwoOutputSlotsDoesNotLeadToCausalityFailure(self)
tensorflow.debug.lib.session_debug_testlib.SessionDebugTestBase.testWatchingVariableUpdateOpsSeesUpdatedValues(self)
tensorflow.debug.lib.session_debug_testlib._RNNCellForTest(self,input_output_size,state_size)
tensorflow.debug.lib.session_debug_testlib._RNNCellForTest.output_size(self)
tensorflow.debug.lib.session_debug_testlib._RNNCellForTest.state_size(self)
tensorflow.python.debug.lib.session_debug_testlib.DebugConcurrentRunCallsTest(test_util.TensorFlowTestCase)
tensorflow.python.debug.lib.session_debug_testlib.DebugConcurrentRunCallsTest._get_concurrent_debug_urls(self)
tensorflow.python.debug.lib.session_debug_testlib.DebugConcurrentRunCallsTest.testDebugConcurrentVariableUpdates(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase(test_util.TensorFlowTestCase)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase._debug_dump_dir(self,run_number=None)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase._debug_urls(self,run_number=None)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase._generate_dump_from_simple_addition_graph(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase._session_run_for_graph_structure_lookup(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.setUp(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.setUpClass(cls)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.tearDown(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.tearDownClass(cls)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testAllowsWatchingUnconnectedOutputTensor(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testCausalityCheckOnDumpsDetectsWrongTemporalOrder(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testConcurrentDumpingToPathsWithOverlappingParentDirsWorks(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugCondWatchingWholeGraphWorks(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugNumericSummaryFailureIsToleratedWhenOrdered(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugNumericSummaryInvalidAttributesStringAreCaught(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugNumericSummaryMuteOnHealthyAndCustomBoundsWork(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugNumericSummaryMuteOnHealthyMutesOnlyHealthyTensorDumps(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugNumericSummaryOnInitializedTensorGivesCorrectResult(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugNumericSummaryOnUninitializedTensorGivesCorrectResult(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugQueueOpsDoesNotoErrorOut(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugTrainingDynamicRNNWorks(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugWhileLoopGeneratesMultipleDumps(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebugWhileLoopWatchingWholeGraphWorks(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testDebuggingDuringOpError(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testDumpStringTensorsWorks(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testDumpUninitializedVariable(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testFindNodesWithBadTensorValues(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testGetOpTypeWorks(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testGraphStructureLookupGivesDebugWatchKeys(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testGraphStructureLookupGivesDevicesAndNodesInfo(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testGraphStructureLookupGivesNodeInputsAndRecipients(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testGraphStructureLookupGivesNodesAndAttributes(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testGraphStructureLookupWithoutPartitionGraphsDoesNotErrorOut(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testLookUpNodePythonTracebackWorks(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testOutputSlotWithoutOutgoingEdgeCanBeWatched(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testSuccessiveDebuggingRunsIncreasesCounters(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testWatchingOnlyOneOfTwoOutputSlotsDoesNotLeadToCausalityFailure(self)
tensorflow.python.debug.lib.session_debug_testlib.SessionDebugTestBase.testWatchingVariableUpdateOpsSeesUpdatedValues(self)
tensorflow.python.debug.lib.session_debug_testlib._RNNCellForTest(self,input_output_size,state_size)
tensorflow.python.debug.lib.session_debug_testlib._RNNCellForTest.__init__(self,input_output_size,state_size)
tensorflow.python.debug.lib.session_debug_testlib._RNNCellForTest.output_size(self)
tensorflow.python.debug.lib.session_debug_testlib._RNNCellForTest.state_size(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/lib/debug_data.py----------------------------------------
A:tensorflow.python.debug.lib.debug_data.event->tensorflow.core.util.event_pb2.Event()
A:tensorflow.python.debug.lib.debug_data.tensor_value->tensorflow.python.framework.tensor_util.MakeNdarray(tensor_proto)
A:tensorflow.python.debug.lib.debug_data.output_slot->int(name[name.rfind(':') + 1:])
A:tensorflow.python.debug.lib.debug_data.debug_op_index->int(name[name.rindex('_') + 1:])
A:tensorflow.python.debug.lib.debug_data.watched_output_slot->int(name[name.index(':') + 1:])
A:tensorflow.python.debug.lib.debug_data.json_metadata->json.loads(event.log_message.message)
A:tensorflow.python.debug.lib.debug_data.core_metadata->collections.namedtuple('CoreMetadata', ['global_step', 'session_run_count', 'executor_step_count', 'input_names', 'output_names', 'target_nodes'])
A:tensorflow.python.debug.lib.debug_data.base->os.path.basename(debug_dump_rel_path)
A:tensorflow.python.debug.lib.debug_data.self._timestamp->int(self._extended_timestamp)
A:tensorflow.python.debug.lib.debug_data.self._output_slot->int(base.split('_')[-3])
A:tensorflow.python.debug.lib.debug_data.namespace->os.path.dirname(debug_dump_rel_path).replace('\\', '/')
A:tensorflow.python.debug.lib.debug_data.node_base_name->'_'.join(base.split('_')[:-3])
A:tensorflow.python.debug.lib.debug_data.self._file_path->os.path.join(dump_root, debug_dump_rel_path)
A:tensorflow.python.debug.lib.debug_data.self._debug_watches->collections.defaultdict(lambda : collections.defaultdict(set))
A:tensorflow.python.debug.lib.debug_data.self._run_fetches_info->_load_log_message_from_event_file(os.path.join(root, f))
A:tensorflow.python.debug.lib.debug_data.self._run_feed_keys_info->_load_log_message_from_event_file(os.path.join(root, f))
A:tensorflow.python.debug.lib.debug_data.datum->self._dump_file_name_to_datum(root, f)
A:tensorflow.python.debug.lib.debug_data.self._dump_tensor_data->sorted(self._dump_tensor_data, key=lambda x: x.extended_timestamp)
A:tensorflow.python.debug.lib.debug_data.self._core_metadata->extract_core_metadata_from_event_proto(event)
A:tensorflow.python.debug.lib.debug_data.debug_dump_rel_path->os.path.join(os.path.relpath(dir_name, self._dump_root), file_name)
A:tensorflow.python.debug.lib.debug_data.(watched_node_name, watched_output_slot, _, debug_op)->_parse_debug_node_name(node.name)
A:tensorflow.python.debug.lib.debug_data.inp->get_node_name(inp)
A:tensorflow.python.debug.lib.debug_data.inp_node->get_node_name(inp)
A:tensorflow.python.debug.lib.debug_data.inp_output_slot->get_output_slot(inp)
A:tensorflow.python.debug.lib.debug_data.node->get_node_name(node)
A:tensorflow.python.debug.lib.debug_data.watch_key->_get_tensor_watch_key(node_name, output_slot, debug_op)
A:tensorflow.python.debug.lib.debug_data.node_name->get_node_name(element_name)
tensorflow.debug.DebugDumpDir(self,dump_root,partition_graphs=None,validate=True)
tensorflow.debug.DebugDumpDir._create_tensor_watch_maps(self)
tensorflow.debug.DebugDumpDir._dump_file_name_to_datum(self,dir_name,file_name)
tensorflow.debug.DebugDumpDir._load_core_metadata(self,event_file_path)
tensorflow.debug.DebugDumpDir._load_dumps(self,dump_root)
tensorflow.debug.DebugDumpDir._load_partition_graphs(self,partition_graphs,validate)
tensorflow.debug.DebugDumpDir._populate_recipient_maps(self)
tensorflow.debug.DebugDumpDir._process_partition_graph_node(self,node)
tensorflow.debug.DebugDumpDir._prune_control_edges_of_debug_ops(self)
tensorflow.debug.DebugDumpDir._prune_nodes_from_input_and_recipient_maps(self,nodes_to_prune)
tensorflow.debug.DebugDumpDir._prune_non_control_edges_of_debug_ops(self)
tensorflow.debug.DebugDumpDir._satisfied_at_timestamp(self,pending,timestamp,start_i=0)
tensorflow.debug.DebugDumpDir._validate_dump_with_graphs(self)
tensorflow.debug.DebugDumpDir.core_metadata(self)
tensorflow.debug.DebugDumpDir.debug_watch_keys(self,node_name)
tensorflow.debug.DebugDumpDir.devices(self)
tensorflow.debug.DebugDumpDir.dumped_tensor_data(self)
tensorflow.debug.DebugDumpDir.find(self,predicate,first_n=0)
tensorflow.debug.DebugDumpDir.get_dump_sizes_bytes(self,node_name,output_slot,debug_op)
tensorflow.debug.DebugDumpDir.get_rel_timestamps(self,node_name,output_slot,debug_op)
tensorflow.debug.DebugDumpDir.get_tensor_file_paths(self,node_name,output_slot,debug_op)
tensorflow.debug.DebugDumpDir.get_tensors(self,node_name,output_slot,debug_op)
tensorflow.debug.DebugDumpDir.loaded_partition_graphs(self)
tensorflow.debug.DebugDumpDir.node_attributes(self,node_name)
tensorflow.debug.DebugDumpDir.node_device(self,node_name)
tensorflow.debug.DebugDumpDir.node_exists(self,node_name)
tensorflow.debug.DebugDumpDir.node_inputs(self,node_name,is_control=False)
tensorflow.debug.DebugDumpDir.node_op_type(self,node_name)
tensorflow.debug.DebugDumpDir.node_recipients(self,node_name,is_control=False)
tensorflow.debug.DebugDumpDir.node_traceback(self,element_name)
tensorflow.debug.DebugDumpDir.nodes(self)
tensorflow.debug.DebugDumpDir.partition_graphs(self)
tensorflow.debug.DebugDumpDir.python_graph(self)
tensorflow.debug.DebugDumpDir.run_feed_keys_info(self)
tensorflow.debug.DebugDumpDir.run_fetches_info(self)
tensorflow.debug.DebugDumpDir.set_python_graph(self,python_graph)
tensorflow.debug.DebugDumpDir.size(self)
tensorflow.debug.DebugDumpDir.t0(self)
tensorflow.debug.DebugDumpDir.transitive_inputs(self,node_name,include_control=True)
tensorflow.debug.DebugDumpDir.watch_key_to_data(self,debug_watch_key)
tensorflow.debug.DebugTensorDatum(self,dump_root,debug_dump_rel_path)
tensorflow.debug.DebugTensorDatum.__repr__(self)
tensorflow.debug.DebugTensorDatum.__str__(self)
tensorflow.debug.DebugTensorDatum.debug_op(self)
tensorflow.debug.DebugTensorDatum.dump_size_bytes(self)
tensorflow.debug.DebugTensorDatum.extended_timestamp(self)
tensorflow.debug.DebugTensorDatum.file_path(self)
tensorflow.debug.DebugTensorDatum.get_tensor(self)
tensorflow.debug.DebugTensorDatum.node_name(self)
tensorflow.debug.DebugTensorDatum.output_slot(self)
tensorflow.debug.DebugTensorDatum.tensor_name(self)
tensorflow.debug.DebugTensorDatum.timestamp(self)
tensorflow.debug.DebugTensorDatum.watch_key(self)
tensorflow.debug.has_inf_or_nan(datum,tensor)
tensorflow.debug.lib.debug_data._get_tensor_name(node_name,output_slot)
tensorflow.debug.lib.debug_data._get_tensor_watch_key(node_name,output_slot,debug_op)
tensorflow.debug.lib.debug_data._is_copy_node(node_name)
tensorflow.debug.lib.debug_data._is_core_metadata_file(file_name)
tensorflow.debug.lib.debug_data._is_debug_node(node_name)
tensorflow.debug.lib.debug_data._is_graph_file(file_name)
tensorflow.debug.lib.debug_data._is_run_feed_keys_info_file(file_name)
tensorflow.debug.lib.debug_data._is_run_fetches_info_file(file_name)
tensorflow.debug.lib.debug_data._load_graph_def_from_event_file(event_file_path)
tensorflow.debug.lib.debug_data._load_log_message_from_event_file(event_file_path)
tensorflow.debug.lib.debug_data._parse_debug_node_name(node_name)
tensorflow.debug.lib.debug_data.extract_core_metadata_from_event_proto(event)
tensorflow.debug.lib.debug_data.get_node_name(element_name)
tensorflow.debug.lib.debug_data.get_output_slot(element_name)
tensorflow.debug.lib.debug_data.load_tensor_from_event(event)
tensorflow.debug.lib.debug_data.parse_node_or_tensor_name(name)
tensorflow.debug.load_tensor_from_event_file(event_file_path)
tensorflow.python.debug.lib.debug_data.DebugDumpDir(self,dump_root,partition_graphs=None,validate=True)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.__init__(self,dump_root,partition_graphs=None,validate=True)
tensorflow.python.debug.lib.debug_data.DebugDumpDir._create_tensor_watch_maps(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir._dump_file_name_to_datum(self,dir_name,file_name)
tensorflow.python.debug.lib.debug_data.DebugDumpDir._load_core_metadata(self,event_file_path)
tensorflow.python.debug.lib.debug_data.DebugDumpDir._load_dumps(self,dump_root)
tensorflow.python.debug.lib.debug_data.DebugDumpDir._load_partition_graphs(self,partition_graphs,validate)
tensorflow.python.debug.lib.debug_data.DebugDumpDir._populate_recipient_maps(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir._process_partition_graph_node(self,node)
tensorflow.python.debug.lib.debug_data.DebugDumpDir._prune_control_edges_of_debug_ops(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir._prune_nodes_from_input_and_recipient_maps(self,nodes_to_prune)
tensorflow.python.debug.lib.debug_data.DebugDumpDir._prune_non_control_edges_of_debug_ops(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir._satisfied_at_timestamp(self,pending,timestamp,start_i=0)
tensorflow.python.debug.lib.debug_data.DebugDumpDir._validate_dump_with_graphs(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.core_metadata(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.debug_watch_keys(self,node_name)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.devices(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.dumped_tensor_data(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.find(self,predicate,first_n=0)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.get_dump_sizes_bytes(self,node_name,output_slot,debug_op)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.get_rel_timestamps(self,node_name,output_slot,debug_op)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.get_tensor_file_paths(self,node_name,output_slot,debug_op)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.get_tensors(self,node_name,output_slot,debug_op)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.loaded_partition_graphs(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.node_attributes(self,node_name)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.node_device(self,node_name)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.node_exists(self,node_name)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.node_inputs(self,node_name,is_control=False)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.node_op_type(self,node_name)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.node_recipients(self,node_name,is_control=False)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.node_traceback(self,element_name)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.nodes(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.partition_graphs(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.python_graph(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.run_feed_keys_info(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.run_fetches_info(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.set_python_graph(self,python_graph)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.size(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.t0(self)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.transitive_inputs(self,node_name,include_control=True)
tensorflow.python.debug.lib.debug_data.DebugDumpDir.watch_key_to_data(self,debug_watch_key)
tensorflow.python.debug.lib.debug_data.DebugTensorDatum(self,dump_root,debug_dump_rel_path)
tensorflow.python.debug.lib.debug_data.DebugTensorDatum.__init__(self,dump_root,debug_dump_rel_path)
tensorflow.python.debug.lib.debug_data.DebugTensorDatum.__repr__(self)
tensorflow.python.debug.lib.debug_data.DebugTensorDatum.__str__(self)
tensorflow.python.debug.lib.debug_data.DebugTensorDatum.debug_op(self)
tensorflow.python.debug.lib.debug_data.DebugTensorDatum.dump_size_bytes(self)
tensorflow.python.debug.lib.debug_data.DebugTensorDatum.extended_timestamp(self)
tensorflow.python.debug.lib.debug_data.DebugTensorDatum.file_path(self)
tensorflow.python.debug.lib.debug_data.DebugTensorDatum.get_tensor(self)
tensorflow.python.debug.lib.debug_data.DebugTensorDatum.node_name(self)
tensorflow.python.debug.lib.debug_data.DebugTensorDatum.output_slot(self)
tensorflow.python.debug.lib.debug_data.DebugTensorDatum.tensor_name(self)
tensorflow.python.debug.lib.debug_data.DebugTensorDatum.timestamp(self)
tensorflow.python.debug.lib.debug_data.DebugTensorDatum.watch_key(self)
tensorflow.python.debug.lib.debug_data._get_tensor_name(node_name,output_slot)
tensorflow.python.debug.lib.debug_data._get_tensor_watch_key(node_name,output_slot,debug_op)
tensorflow.python.debug.lib.debug_data._is_copy_node(node_name)
tensorflow.python.debug.lib.debug_data._is_core_metadata_file(file_name)
tensorflow.python.debug.lib.debug_data._is_debug_node(node_name)
tensorflow.python.debug.lib.debug_data._is_graph_file(file_name)
tensorflow.python.debug.lib.debug_data._is_run_feed_keys_info_file(file_name)
tensorflow.python.debug.lib.debug_data._is_run_fetches_info_file(file_name)
tensorflow.python.debug.lib.debug_data._load_graph_def_from_event_file(event_file_path)
tensorflow.python.debug.lib.debug_data._load_log_message_from_event_file(event_file_path)
tensorflow.python.debug.lib.debug_data._parse_debug_node_name(node_name)
tensorflow.python.debug.lib.debug_data.extract_core_metadata_from_event_proto(event)
tensorflow.python.debug.lib.debug_data.get_node_name(element_name)
tensorflow.python.debug.lib.debug_data.get_output_slot(element_name)
tensorflow.python.debug.lib.debug_data.has_inf_or_nan(datum,tensor)
tensorflow.python.debug.lib.debug_data.load_tensor_from_event(event)
tensorflow.python.debug.lib.debug_data.load_tensor_from_event_file(event_file_path)
tensorflow.python.debug.lib.debug_data.parse_node_or_tensor_name(name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/lib/debug_utils.py----------------------------------------
A:tensorflow.python.debug.lib.debug_utils.watch->watch_opts.add()
A:tensorflow.python.debug.lib.debug_utils.ops->graph.get_operations()
tensorflow.debug.add_debug_tensor_watch(run_options,node_name,output_slot=0,debug_ops='DebugIdentity',debug_urls=None,tolerate_debug_op_creation_failures=False,global_step=-1)
tensorflow.debug.watch_graph(run_options,graph,debug_ops='DebugIdentity',debug_urls=None,node_name_regex_whitelist=None,op_type_regex_whitelist=None,tensor_dtype_regex_whitelist=None,tolerate_debug_op_creation_failures=False,global_step=-1)
tensorflow.debug.watch_graph_with_blacklists(run_options,graph,debug_ops='DebugIdentity',debug_urls=None,node_name_regex_blacklist=None,op_type_regex_blacklist=None,tensor_dtype_regex_blacklist=None,tolerate_debug_op_creation_failures=False,global_step=-1)
tensorflow.python.debug.lib.debug_utils.add_debug_tensor_watch(run_options,node_name,output_slot=0,debug_ops='DebugIdentity',debug_urls=None,tolerate_debug_op_creation_failures=False,global_step=-1)
tensorflow.python.debug.lib.debug_utils.watch_graph(run_options,graph,debug_ops='DebugIdentity',debug_urls=None,node_name_regex_whitelist=None,op_type_regex_whitelist=None,tensor_dtype_regex_whitelist=None,tolerate_debug_op_creation_failures=False,global_step=-1)
tensorflow.python.debug.lib.debug_utils.watch_graph_with_blacklists(run_options,graph,debug_ops='DebugIdentity',debug_urls=None,node_name_regex_blacklist=None,op_type_regex_blacklist=None,tensor_dtype_regex_blacklist=None,tolerate_debug_op_creation_failures=False,global_step=-1)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/lib/stepper.py----------------------------------------
A:tensorflow.python.debug.lib.stepper.flattened_fetches->_flatten_fetches(fetches)
A:tensorflow.python.debug.lib.stepper.(self._fetch_names, self._fetch_list)->self._get_fetch_and_name_lists(flattened_fetches)
A:tensorflow.python.debug.lib.stepper.(self._sorted_nodes, self._closure_elements, self._ref_tensor_names)->self._dfs_visit(self._sess.graph, self._fetch_list)
A:tensorflow.python.debug.lib.stepper.self._transitive_closure_set->set(self._sorted_nodes)
A:tensorflow.python.debug.lib.stepper.self._dirty_variables->set()
A:tensorflow.python.debug.lib.stepper.self._dump_session_root->tempfile.mkdtemp(prefix='tfdbg_stepper_')
A:tensorflow.python.debug.lib.stepper.done->set()
A:tensorflow.python.debug.lib.stepper.node_inputs->dict()
A:tensorflow.python.debug.lib.stepper.elem_stack->copy.copy(elem_list)
A:tensorflow.python.debug.lib.stepper.ref_tensor_names->set()
A:tensorflow.python.debug.lib.stepper.curr_elem->copy.copy(elem_list).pop()
A:tensorflow.python.debug.lib.stepper.curr_node->self._get_node(curr_elem)
A:tensorflow.python.debug.lib.stepper.all_inputs->set(non_control_inputs + control_inputs)
A:tensorflow.python.debug.lib.stepper.all_input_nodes->set()
A:tensorflow.python.debug.lib.stepper.self._output_targets[inp.name]->set([curr_elem.name])
A:tensorflow.python.debug.lib.stepper.initializer->graph.as_graph_element(inp.op.name + '/Assign')
A:tensorflow.python.debug.lib.stepper.inp_node->self._get_node(inp)
A:tensorflow.python.debug.lib.stepper.node->self._sess.graph.as_graph_element(node_name)
A:tensorflow.python.debug.lib.stepper.elem->self._sess.graph.as_graph_element(name)
A:tensorflow.python.debug.lib.stepper.node_name->self._get_node_name(graph_element_name)
A:tensorflow.python.debug.lib.stepper.graph_element->self._sess.graph.as_graph_element(graph_element_name)
A:tensorflow.python.debug.lib.stepper.target_node_name->self._get_node_name(target_name)
A:tensorflow.python.debug.lib.stepper.restored_variables->set()
A:tensorflow.python.debug.lib.stepper.self._last_updated->set()
A:tensorflow.python.debug.lib.stepper.fetched->self._sess.graph.as_graph_element(target_name)
A:tensorflow.python.debug.lib.stepper.old_value->self._sess.run(inp)
A:tensorflow.python.debug.lib.stepper.feeds[inp]->self._dumped_intermediate_tensors[inp.name].get_tensor()
A:tensorflow.python.debug.lib.stepper.(dump_path, run_options)->self._prepare_cont_call_dump_path_and_run_options()
A:tensorflow.python.debug.lib.stepper.handles->self._sess.run([session_ops.get_session_handle(tensor) for tensor in tensors_to_get_handles_for], feed_dict=feeds, options=run_options)
A:tensorflow.python.debug.lib.stepper.return_value->self._tensor_handles[target_name].eval()
A:tensorflow.python.debug.lib.stepper.run_options->tensorflow.core.protobuf.config_pb2.RunOptions()
A:tensorflow.python.debug.lib.stepper.dump_path->self._cont_call_dump_path()
A:tensorflow.python.debug.lib.stepper.dump_dir->tensorflow.python.debug.lib.debug_data.DebugDumpDir(dump_path, validate=False)
A:tensorflow.python.debug.lib.stepper.curr_element->stack.pop()
A:tensorflow.python.debug.lib.stepper.self._cached_invalidation_path[curr_element]->set([source_element])
A:tensorflow.python.debug.lib.stepper.targets->self._output_targets.get(curr_element, [])
A:tensorflow.python.debug.lib.stepper.(node_name, _)->tensorflow.python.debug.lib.debug_data.parse_node_or_tensor_name(element.name)
tensorflow.debug.lib.stepper.NodeStepper(self,sess,fetches,feed_dict=None)
tensorflow.debug.lib.stepper.NodeStepper.__enter__(self)
tensorflow.debug.lib.stepper.NodeStepper.__exit__(self,exc_type,exc_value,exc_traceback)
tensorflow.debug.lib.stepper.NodeStepper._cont_call_dump_path(self)
tensorflow.debug.lib.stepper.NodeStepper._dfs_visit(self,graph,elem_list)
tensorflow.debug.lib.stepper.NodeStepper._get_fetch_and_name_lists(self,flattened_fetches)
tensorflow.debug.lib.stepper.NodeStepper._get_node(self,element)
tensorflow.debug.lib.stepper.NodeStepper._get_node_name(self,graph_element_name)
tensorflow.debug.lib.stepper.NodeStepper._invalidate_transitively_outgoing_cache(self,source_element)
tensorflow.debug.lib.stepper.NodeStepper._load_dumped_intermediate_tensors(self,dump_path,target_name)
tensorflow.debug.lib.stepper.NodeStepper._prepare_cont_call_dump_path_and_run_options(self)
tensorflow.debug.lib.stepper.NodeStepper.closure_elements(self)
tensorflow.debug.lib.stepper.NodeStepper.cont(self,target,use_tensor_handles=True,use_dumped_intermediates=True,use_overrides=True,invalidate_from_updated_variables=False,restore_variable_values=False)
tensorflow.debug.lib.stepper.NodeStepper.dirty_variables(self)
tensorflow.debug.lib.stepper.NodeStepper.finalize(self)
tensorflow.debug.lib.stepper.NodeStepper.get_tensor_value(self,tensor_name)
tensorflow.debug.lib.stepper.NodeStepper.handle_names(self)
tensorflow.debug.lib.stepper.NodeStepper.handle_node_names(self)
tensorflow.debug.lib.stepper.NodeStepper.intermediate_tensor_names(self)
tensorflow.debug.lib.stepper.NodeStepper.is_feedable(self,name)
tensorflow.debug.lib.stepper.NodeStepper.is_placeholder(self,graph_element_name)
tensorflow.debug.lib.stepper.NodeStepper.last_feed_types(self)
tensorflow.debug.lib.stepper.NodeStepper.last_updated(self)
tensorflow.debug.lib.stepper.NodeStepper.output_slots_in_closure(self,node_name)
tensorflow.debug.lib.stepper.NodeStepper.override_names(self)
tensorflow.debug.lib.stepper.NodeStepper.override_tensor(self,tensor_name,overriding_val)
tensorflow.debug.lib.stepper.NodeStepper.placeholders(self)
tensorflow.debug.lib.stepper.NodeStepper.remove_override(self,tensor_name)
tensorflow.debug.lib.stepper.NodeStepper.restore_variable_values(self)
tensorflow.debug.lib.stepper.NodeStepper.sorted_nodes(self)
tensorflow.debug.lib.stepper._flatten_fetches(fetches)
tensorflow.python.debug.lib.stepper.NodeStepper(self,sess,fetches,feed_dict=None)
tensorflow.python.debug.lib.stepper.NodeStepper.__enter__(self)
tensorflow.python.debug.lib.stepper.NodeStepper.__exit__(self,exc_type,exc_value,exc_traceback)
tensorflow.python.debug.lib.stepper.NodeStepper.__init__(self,sess,fetches,feed_dict=None)
tensorflow.python.debug.lib.stepper.NodeStepper._cont_call_dump_path(self)
tensorflow.python.debug.lib.stepper.NodeStepper._dfs_visit(self,graph,elem_list)
tensorflow.python.debug.lib.stepper.NodeStepper._get_fetch_and_name_lists(self,flattened_fetches)
tensorflow.python.debug.lib.stepper.NodeStepper._get_node(self,element)
tensorflow.python.debug.lib.stepper.NodeStepper._get_node_name(self,graph_element_name)
tensorflow.python.debug.lib.stepper.NodeStepper._invalidate_transitively_outgoing_cache(self,source_element)
tensorflow.python.debug.lib.stepper.NodeStepper._load_dumped_intermediate_tensors(self,dump_path,target_name)
tensorflow.python.debug.lib.stepper.NodeStepper._prepare_cont_call_dump_path_and_run_options(self)
tensorflow.python.debug.lib.stepper.NodeStepper.closure_elements(self)
tensorflow.python.debug.lib.stepper.NodeStepper.cont(self,target,use_tensor_handles=True,use_dumped_intermediates=True,use_overrides=True,invalidate_from_updated_variables=False,restore_variable_values=False)
tensorflow.python.debug.lib.stepper.NodeStepper.dirty_variables(self)
tensorflow.python.debug.lib.stepper.NodeStepper.finalize(self)
tensorflow.python.debug.lib.stepper.NodeStepper.get_tensor_value(self,tensor_name)
tensorflow.python.debug.lib.stepper.NodeStepper.handle_names(self)
tensorflow.python.debug.lib.stepper.NodeStepper.handle_node_names(self)
tensorflow.python.debug.lib.stepper.NodeStepper.intermediate_tensor_names(self)
tensorflow.python.debug.lib.stepper.NodeStepper.is_feedable(self,name)
tensorflow.python.debug.lib.stepper.NodeStepper.is_placeholder(self,graph_element_name)
tensorflow.python.debug.lib.stepper.NodeStepper.last_feed_types(self)
tensorflow.python.debug.lib.stepper.NodeStepper.last_updated(self)
tensorflow.python.debug.lib.stepper.NodeStepper.output_slots_in_closure(self,node_name)
tensorflow.python.debug.lib.stepper.NodeStepper.override_names(self)
tensorflow.python.debug.lib.stepper.NodeStepper.override_tensor(self,tensor_name,overriding_val)
tensorflow.python.debug.lib.stepper.NodeStepper.placeholders(self)
tensorflow.python.debug.lib.stepper.NodeStepper.remove_override(self,tensor_name)
tensorflow.python.debug.lib.stepper.NodeStepper.restore_variable_values(self)
tensorflow.python.debug.lib.stepper.NodeStepper.sorted_nodes(self)
tensorflow.python.debug.lib.stepper._flatten_fetches(fetches)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/examples/debug_errors.py----------------------------------------
A:tensorflow.python.debug.examples.debug_errors.sess->tensorflow.python.debug.LocalCLIDebugWrapperSession(sess, ui_type=FLAGS.ui_type)
A:tensorflow.python.debug.examples.debug_errors.ph_float->tensorflow.placeholder(tf.float32, name='ph_float')
A:tensorflow.python.debug.examples.debug_errors.x->tensorflow.transpose(ph_float, name='x')
A:tensorflow.python.debug.examples.debug_errors.v->tensorflow.Variable(np.array([[-2.0], [-3.0], [6.0]], dtype=np.float32), name='v')
A:tensorflow.python.debug.examples.debug_errors.m->tensorflow.constant(np.array([[0.0, 1.0, 2.0], [-4.0, -1.0, 0.0]]), dtype=tf.float32, name='m')
A:tensorflow.python.debug.examples.debug_errors.y->tensorflow.matmul(m, x, name='y')
A:tensorflow.python.debug.examples.debug_errors.z->tensorflow.matmul(m, v, name='z')
A:tensorflow.python.debug.examples.debug_errors.parser->argparse.ArgumentParser()
A:tensorflow.python.debug.examples.debug_errors.(FLAGS, unparsed)->argparse.ArgumentParser().parse_known_args()
tensorflow.debug.examples.debug_errors.main(_)
tensorflow.python.debug.examples.debug_errors.main(_)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/examples/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/examples/debug_fibonacci.py----------------------------------------
A:tensorflow.python.debug.examples.debug_fibonacci.sess->tensorflow.python.debug.LocalCLIDebugWrapperSession(sess)
A:tensorflow.python.debug.examples.debug_fibonacci.n0->tensorflow.Variable(np.ones([FLAGS.tensor_size] * 2), dtype=tf.int32, name='node_00')
A:tensorflow.python.debug.examples.debug_fibonacci.n1->tensorflow.Variable(np.ones([FLAGS.tensor_size] * 2), dtype=tf.int32, name='node_01')
A:tensorflow.python.debug.examples.debug_fibonacci.parser->argparse.ArgumentParser()
A:tensorflow.python.debug.examples.debug_fibonacci.(FLAGS, unparsed)->argparse.ArgumentParser().parse_known_args()
tensorflow.debug.examples.debug_fibonacci.main(_)
tensorflow.python.debug.examples.debug_fibonacci.main(_)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/examples/debug_mnist.py----------------------------------------
A:tensorflow.python.debug.examples.debug_mnist.mnist->tensorflow.examples.tutorials.mnist.input_data.read_data_sets(FLAGS.data_dir, one_hot=True, fake_data=FLAGS.fake_data)
A:tensorflow.python.debug.examples.debug_mnist.(xs, ys)->tensorflow.examples.tutorials.mnist.input_data.read_data_sets(FLAGS.data_dir, one_hot=True, fake_data=FLAGS.fake_data).train.next_batch(FLAGS.train_batch_size, fake_data=FLAGS.fake_data)
A:tensorflow.python.debug.examples.debug_mnist.sess->tensorflow.python.debug.LocalCLIDebugWrapperSession(sess, ui_type=FLAGS.ui_type)
A:tensorflow.python.debug.examples.debug_mnist.x->tensorflow.placeholder(tf.float32, [None, IMAGE_SIZE * IMAGE_SIZE], name='x-input')
A:tensorflow.python.debug.examples.debug_mnist.y_->tensorflow.placeholder(tf.float32, [None, NUM_LABELS], name='y-input')
A:tensorflow.python.debug.examples.debug_mnist.initial->tensorflow.constant(0.1, shape=shape)
A:tensorflow.python.debug.examples.debug_mnist.weights->weight_variable([input_dim, output_dim])
A:tensorflow.python.debug.examples.debug_mnist.biases->bias_variable([output_dim])
A:tensorflow.python.debug.examples.debug_mnist.activations->act(preactivate)
A:tensorflow.python.debug.examples.debug_mnist.hidden->nn_layer(x, IMAGE_SIZE ** 2, HIDDEN_SIZE, 'hidden')
A:tensorflow.python.debug.examples.debug_mnist.y->nn_layer(hidden, HIDDEN_SIZE, NUM_LABELS, 'softmax', act=tf.nn.softmax)
A:tensorflow.python.debug.examples.debug_mnist.train_step->tensorflow.train.AdamOptimizer(FLAGS.learning_rate).minimize(cross_entropy)
A:tensorflow.python.debug.examples.debug_mnist.correct_prediction->tensorflow.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
A:tensorflow.python.debug.examples.debug_mnist.accuracy->tensorflow.reduce_mean(tf.cast(correct_prediction, tf.float32))
A:tensorflow.python.debug.examples.debug_mnist.acc->tensorflow.python.debug.LocalCLIDebugWrapperSession(sess, ui_type=FLAGS.ui_type).run(accuracy, feed_dict=feed_dict(False))
A:tensorflow.python.debug.examples.debug_mnist.parser->argparse.ArgumentParser()
A:tensorflow.python.debug.examples.debug_mnist.(FLAGS, unparsed)->argparse.ArgumentParser().parse_known_args()
tensorflow.debug.examples.debug_mnist.main(_)
tensorflow.python.debug.examples.debug_mnist.main(_)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/examples/debug_tflearn_iris.py----------------------------------------
A:tensorflow.python.debug.examples.debug_tflearn_iris.training_data_path->os.path.join(data_dir, os.path.basename(IRIS_TRAINING_DATA_URL))
A:tensorflow.python.debug.examples.debug_tflearn_iris.train_file->open(training_data_path, 'wt')
A:tensorflow.python.debug.examples.debug_tflearn_iris.test_data_path->os.path.join(data_dir, os.path.basename(IRIS_TEST_DATA_URL))
A:tensorflow.python.debug.examples.debug_tflearn_iris.test_file->open(test_data_path, 'wt')
A:tensorflow.python.debug.examples.debug_tflearn_iris.iris->tensorflow.contrib.learn.python.learn.datasets.base.load_iris()
A:tensorflow.python.debug.examples.debug_tflearn_iris.features->tensorflow.reshape(tf.constant(iris.data), [-1, _IRIS_INPUT_DIM])
A:tensorflow.python.debug.examples.debug_tflearn_iris.labels->tensorflow.reshape(tf.constant(iris.target), [-1])
A:tensorflow.python.debug.examples.debug_tflearn_iris.training_set->tensorflow.contrib.learn.datasets.base.load_csv_with_header(filename=training_data_path, target_dtype=np.int, features_dtype=np.float32)
A:tensorflow.python.debug.examples.debug_tflearn_iris.test_set->tensorflow.contrib.learn.datasets.base.load_csv_with_header(filename=test_data_path, target_dtype=np.int, features_dtype=np.float32)
A:tensorflow.python.debug.examples.debug_tflearn_iris.(training_data_path, test_data_path)->maybe_download_data(FLAGS.data_dir)
A:tensorflow.python.debug.examples.debug_tflearn_iris.classifier->tensorflow.contrib.learn.DNNClassifier(feature_columns=feature_columns, hidden_units=[10, 20, 10], n_classes=3, model_dir=model_dir)
A:tensorflow.python.debug.examples.debug_tflearn_iris.debug_hook->tensorflow.python.debug.LocalCLIDebugHook(ui_type=FLAGS.ui_type)
A:tensorflow.python.debug.examples.debug_tflearn_iris.ex->tensorflow.contrib.learn.python.learn.experiment.Experiment(classifier, train_input_fn=iris_input_fn, eval_input_fn=iris_input_fn, train_steps=FLAGS.train_steps, eval_delay_secs=0, eval_steps=1, train_monitors=hooks, eval_hooks=hooks)
A:tensorflow.python.debug.examples.debug_tflearn_iris.parser->argparse.ArgumentParser()
A:tensorflow.python.debug.examples.debug_tflearn_iris.(FLAGS, unparsed)->argparse.ArgumentParser().parse_known_args()
tensorflow.debug.examples.debug_tflearn_iris.iris_input_fn()
tensorflow.debug.examples.debug_tflearn_iris.main(_)
tensorflow.debug.examples.debug_tflearn_iris.maybe_download_data(data_dir)
tensorflow.python.debug.examples.debug_tflearn_iris.iris_input_fn()
tensorflow.python.debug.examples.debug_tflearn_iris.main(_)
tensorflow.python.debug.examples.debug_tflearn_iris.maybe_download_data(data_dir)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/wrappers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/wrappers/framework.py----------------------------------------
A:tensorflow.python.debug.wrappers.framework.response->self.on_session_init(OnSessionInitRequest(self._sess))
A:tensorflow.python.debug.wrappers.framework.run_start_resp->self.on_run_start(OnRunStartRequest(fetches, feed_dict, options, run_metadata, self._run_call_count))
A:tensorflow.python.debug.wrappers.framework.retvals->self._sess.run(fetches, feed_dict=feed_dict, options=options, run_metadata=run_metadata)
A:tensorflow.python.debug.wrappers.framework.run_end_req->OnRunEndRequest(run_start_resp.action)
A:tensorflow.python.debug.wrappers.framework.run_end_resp->self.on_run_end(run_end_req)
A:tensorflow.python.debug.wrappers.framework.(debug_urls, watch_opts)->self._prepare_run_watch_config(request.fetches, request.feed_dict)
A:tensorflow.python.debug.wrappers.framework.debug_urls->self.prepare_run_debug_urls(fetches, feed_dict)
A:tensorflow.python.debug.wrappers.framework.watch_options->WatchOptions(*watch_options)
tensorflow.debug.WatchOptions(self,debug_ops=None,node_name_regex_whitelist=None,op_type_regex_whitelist=None,tensor_dtype_regex_whitelist=None,tolerate_debug_op_creation_failures=False)
tensorflow.debug.WatchOptions.__repr__(self)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession(self,sess)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession.__enter__(self)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession.__exit__(self,exec_type,exec_value,exec_tb)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession._decorate_run_options(self,run_options,debug_urls,debug_ops='DebugIdentity',node_name_regex_whitelist=None,op_type_regex_whitelist=None,tensor_dtype_regex_whitelist=None,tolerate_debug_op_creation_failures=False)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession.as_default(self)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession.close(self)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession.graph(self)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession.graph_def(self)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession.invoke_node_stepper(self,node_stepper,restore_variable_values_on_exit=True)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession.on_run_end(self,request)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession.on_run_start(self,request)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession.on_session_init(self,request)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession.partial_run(self,handle,fetches,feed_dict=None)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession.partial_run_setup(self,fetches,feeds=None)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession.run(self,fetches,feed_dict=None,options=None,run_metadata=None)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession.sess_str(self)
tensorflow.debug.wrappers.framework.BaseDebugWrapperSession.session(self)
tensorflow.debug.wrappers.framework.NonInteractiveDebugWrapperSession(self,sess,watch_fn=None)
tensorflow.debug.wrappers.framework.NonInteractiveDebugWrapperSession._prepare_run_watch_config(self,fetches,feed_dict)
tensorflow.debug.wrappers.framework.NonInteractiveDebugWrapperSession.invoke_node_stepper(self,node_stepper,restore_variable_values_on_exit=True)
tensorflow.debug.wrappers.framework.NonInteractiveDebugWrapperSession.on_run_end(self,request)
tensorflow.debug.wrappers.framework.NonInteractiveDebugWrapperSession.on_run_start(self,request)
tensorflow.debug.wrappers.framework.NonInteractiveDebugWrapperSession.on_session_init(self,request)
tensorflow.debug.wrappers.framework.NonInteractiveDebugWrapperSession.prepare_run_debug_urls(self,fetches,feed_dict)
tensorflow.debug.wrappers.framework.OnRunEndRequest(self,performed_action,run_metadata=None,client_graph_def=None,tf_error=None)
tensorflow.debug.wrappers.framework.OnRunEndResponse(self)
tensorflow.debug.wrappers.framework.OnRunStartAction(object)
tensorflow.debug.wrappers.framework.OnRunStartRequest(self,fetches,feed_dict,run_options,run_metadata,run_call_count)
tensorflow.debug.wrappers.framework.OnRunStartResponse(self,action,debug_urls,debug_ops='DebugIdentity',node_name_regex_whitelist=None,op_type_regex_whitelist=None,tensor_dtype_regex_whitelist=None,tolerate_debug_op_creation_failures=False)
tensorflow.debug.wrappers.framework.OnSessionInitAction(object)
tensorflow.debug.wrappers.framework.OnSessionInitRequest(self,sess)
tensorflow.debug.wrappers.framework.OnSessionInitResponse(self,action)
tensorflow.debug.wrappers.framework._check_type(obj,expected_type)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession(self,sess)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.__enter__(self)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.__exit__(self,exec_type,exec_value,exec_tb)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.__init__(self,sess)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession._decorate_run_options(self,run_options,debug_urls,debug_ops='DebugIdentity',node_name_regex_whitelist=None,op_type_regex_whitelist=None,tensor_dtype_regex_whitelist=None,tolerate_debug_op_creation_failures=False)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.as_default(self)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.close(self)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.graph(self)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.graph_def(self)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.invoke_node_stepper(self,node_stepper,restore_variable_values_on_exit=True)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.on_run_end(self,request)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.on_run_start(self,request)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.on_session_init(self,request)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.partial_run(self,handle,fetches,feed_dict=None)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.partial_run_setup(self,fetches,feeds=None)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.run(self,fetches,feed_dict=None,options=None,run_metadata=None)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.sess_str(self)
tensorflow.python.debug.wrappers.framework.BaseDebugWrapperSession.session(self)
tensorflow.python.debug.wrappers.framework.NonInteractiveDebugWrapperSession(self,sess,watch_fn=None)
tensorflow.python.debug.wrappers.framework.NonInteractiveDebugWrapperSession.__init__(self,sess,watch_fn=None)
tensorflow.python.debug.wrappers.framework.NonInteractiveDebugWrapperSession._prepare_run_watch_config(self,fetches,feed_dict)
tensorflow.python.debug.wrappers.framework.NonInteractiveDebugWrapperSession.invoke_node_stepper(self,node_stepper,restore_variable_values_on_exit=True)
tensorflow.python.debug.wrappers.framework.NonInteractiveDebugWrapperSession.on_run_end(self,request)
tensorflow.python.debug.wrappers.framework.NonInteractiveDebugWrapperSession.on_run_start(self,request)
tensorflow.python.debug.wrappers.framework.NonInteractiveDebugWrapperSession.on_session_init(self,request)
tensorflow.python.debug.wrappers.framework.NonInteractiveDebugWrapperSession.prepare_run_debug_urls(self,fetches,feed_dict)
tensorflow.python.debug.wrappers.framework.OnRunEndRequest(self,performed_action,run_metadata=None,client_graph_def=None,tf_error=None)
tensorflow.python.debug.wrappers.framework.OnRunEndRequest.__init__(self,performed_action,run_metadata=None,client_graph_def=None,tf_error=None)
tensorflow.python.debug.wrappers.framework.OnRunEndResponse(self)
tensorflow.python.debug.wrappers.framework.OnRunEndResponse.__init__(self)
tensorflow.python.debug.wrappers.framework.OnRunStartAction(object)
tensorflow.python.debug.wrappers.framework.OnRunStartRequest(self,fetches,feed_dict,run_options,run_metadata,run_call_count)
tensorflow.python.debug.wrappers.framework.OnRunStartRequest.__init__(self,fetches,feed_dict,run_options,run_metadata,run_call_count)
tensorflow.python.debug.wrappers.framework.OnRunStartResponse(self,action,debug_urls,debug_ops='DebugIdentity',node_name_regex_whitelist=None,op_type_regex_whitelist=None,tensor_dtype_regex_whitelist=None,tolerate_debug_op_creation_failures=False)
tensorflow.python.debug.wrappers.framework.OnRunStartResponse.__init__(self,action,debug_urls,debug_ops='DebugIdentity',node_name_regex_whitelist=None,op_type_regex_whitelist=None,tensor_dtype_regex_whitelist=None,tolerate_debug_op_creation_failures=False)
tensorflow.python.debug.wrappers.framework.OnSessionInitAction(object)
tensorflow.python.debug.wrappers.framework.OnSessionInitRequest(self,sess)
tensorflow.python.debug.wrappers.framework.OnSessionInitRequest.__init__(self,sess)
tensorflow.python.debug.wrappers.framework.OnSessionInitResponse(self,action)
tensorflow.python.debug.wrappers.framework.OnSessionInitResponse.__init__(self,action)
tensorflow.python.debug.wrappers.framework.WatchOptions(self,debug_ops=None,node_name_regex_whitelist=None,op_type_regex_whitelist=None,tensor_dtype_regex_whitelist=None,tolerate_debug_op_creation_failures=False)
tensorflow.python.debug.wrappers.framework.WatchOptions.__init__(self,debug_ops=None,node_name_regex_whitelist=None,op_type_regex_whitelist=None,tensor_dtype_regex_whitelist=None,tolerate_debug_op_creation_failures=False)
tensorflow.python.debug.wrappers.framework.WatchOptions.__repr__(self)
tensorflow.python.debug.wrappers.framework._check_type(obj,expected_type)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/wrappers/grpc_wrapper.py----------------------------------------
tensorflow.debug.wrappers.grpc_wrapper.GrpcDebugWrapperSession(self,sess,grpc_debug_server_addresses,watch_fn=None,log_usage=True)
tensorflow.debug.wrappers.grpc_wrapper.GrpcDebugWrapperSession.prepare_run_debug_urls(self,fetches,feed_dict)
tensorflow.python.debug.wrappers.grpc_wrapper.GrpcDebugWrapperSession(self,sess,grpc_debug_server_addresses,watch_fn=None,log_usage=True)
tensorflow.python.debug.wrappers.grpc_wrapper.GrpcDebugWrapperSession.__init__(self,sess,grpc_debug_server_addresses,watch_fn=None,log_usage=True)
tensorflow.python.debug.wrappers.grpc_wrapper.GrpcDebugWrapperSession.prepare_run_debug_urls(self,fetches,feed_dict)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/wrappers/local_cli_wrapper.py----------------------------------------
A:tensorflow.python.debug.wrappers.local_cli_wrapper.self._dump_root->tempfile.mktemp(prefix=_DUMP_ROOT_PREFIX)
A:tensorflow.python.debug.wrappers.local_cli_wrapper.ap->argparse.ArgumentParser(description='Display information about this Session.run() call.', usage=argparse.SUPPRESS)
A:tensorflow.python.debug.wrappers.local_cli_wrapper.self._run_start_response->self._launch_cli()
A:tensorflow.python.debug.wrappers.local_cli_wrapper.self._run_cli->tensorflow.python.debug.cli.analyzer_cli.create_analyzer_ui(debug_dump, self._tensor_filters, ui_type=self._ui_type)
A:tensorflow.python.debug.wrappers.local_cli_wrapper.help_intro->tensorflow.python.debug.cli.cli_shared.get_error_intro(tf_error)
A:tensorflow.python.debug.wrappers.local_cli_wrapper.debug_dump->tensorflow.python.debug.lib.debug_data.DebugDumpDir(self._dump_root, partition_graphs=partition_graphs)
A:tensorflow.python.debug.wrappers.local_cli_wrapper.response->self._run_cli.run_ui(init_command=self._init_command, title=self._title, title_color=self._title_color)
A:tensorflow.python.debug.wrappers.local_cli_wrapper.output->tensorflow.python.debug.cli.debugger_cli_common.RichTextLines([])
A:tensorflow.python.debug.wrappers.local_cli_wrapper.parsed->self._argparsers['run'].parse_args(args)
A:tensorflow.python.debug.wrappers.local_cli_wrapper.debug_urls->self._get_run_debug_urls()
A:tensorflow.python.debug.wrappers.local_cli_wrapper.self._run_description->tensorflow.python.debug.cli.cli_shared.get_run_short_description(run_call_count, fetches, feed_dict)
A:tensorflow.python.debug.wrappers.local_cli_wrapper.self._run_info->tensorflow.python.debug.cli.cli_shared.get_run_start_intro(run_call_count, fetches, feed_dict, self._tensor_filters)
A:tensorflow.python.debug.wrappers.local_cli_wrapper.stepper->tensorflow.python.debug.cli.stepper_cli.NodeStepperCLI(node_stepper)
A:tensorflow.python.debug.wrappers.local_cli_wrapper.stepper_ui->tensorflow.python.debug.cli.ui_factory.get_ui(self._ui_type, on_ui_exit=node_stepper.restore_variable_values if restore_variable_values_on_exit else None)
tensorflow.debug.LocalCLIDebugWrapperSession(self,sess,dump_root=None,log_usage=True,ui_type='curses')
tensorflow.debug.LocalCLIDebugWrapperSession._get_run_debug_urls(self)
tensorflow.debug.LocalCLIDebugWrapperSession._initialize_argparsers(self)
tensorflow.debug.LocalCLIDebugWrapperSession._launch_cli(self)
tensorflow.debug.LocalCLIDebugWrapperSession._on_run_start_step_handler(self,args,screen_info=None)
tensorflow.debug.LocalCLIDebugWrapperSession._prep_cli_for_run_end(self,debug_dump,tf_error,passed_filter)
tensorflow.debug.LocalCLIDebugWrapperSession._prep_cli_for_run_start(self)
tensorflow.debug.LocalCLIDebugWrapperSession._register_this_run_info(self,curses_cli)
tensorflow.debug.LocalCLIDebugWrapperSession._remove_dump_root(self)
tensorflow.debug.LocalCLIDebugWrapperSession._run_handler(self,args,screen_info=None)
tensorflow.debug.LocalCLIDebugWrapperSession._run_info_handler(self,args,screen_info=None)
tensorflow.debug.LocalCLIDebugWrapperSession._update_run_calls_state(self,run_call_count,fetches,feed_dict)
tensorflow.debug.LocalCLIDebugWrapperSession.add_tensor_filter(self,filter_name,tensor_filter)
tensorflow.debug.LocalCLIDebugWrapperSession.invoke_node_stepper(self,node_stepper,restore_variable_values_on_exit=True)
tensorflow.debug.LocalCLIDebugWrapperSession.on_run_end(self,request)
tensorflow.debug.LocalCLIDebugWrapperSession.on_run_start(self,request)
tensorflow.debug.LocalCLIDebugWrapperSession.on_session_init(self,request)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession(self,sess,dump_root=None,log_usage=True,ui_type='curses')
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession.__init__(self,sess,dump_root=None,log_usage=True,ui_type='curses')
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._get_run_debug_urls(self)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._initialize_argparsers(self)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._launch_cli(self)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._on_run_start_step_handler(self,args,screen_info=None)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._prep_cli_for_run_end(self,debug_dump,tf_error,passed_filter)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._prep_cli_for_run_start(self)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._register_this_run_info(self,curses_cli)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._remove_dump_root(self)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._run_handler(self,args,screen_info=None)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._run_info_handler(self,args,screen_info=None)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._update_run_calls_state(self,run_call_count,fetches,feed_dict)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession.add_tensor_filter(self,filter_name,tensor_filter)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession.invoke_node_stepper(self,node_stepper,restore_variable_values_on_exit=True)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession.on_run_end(self,request)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession.on_run_start(self,request)
tensorflow.python.debug.wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession.on_session_init(self,request)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/wrappers/dumping_wrapper.py----------------------------------------
A:tensorflow.python.debug.wrappers.dumping_wrapper.self._run_counter_lock->threading.Lock()
A:tensorflow.python.debug.wrappers.dumping_wrapper.run_dir->os.path.join(self._session_root, 'run_%d_%d' % (int(time.time() * 1000000.0), self._run_counter))
A:tensorflow.python.debug.wrappers.dumping_wrapper.fetches_event->tensorflow.core.util.event_pb2.Event()
A:tensorflow.python.debug.wrappers.dumping_wrapper.fetches_event.log_message.message->repr(fetches)
A:tensorflow.python.debug.wrappers.dumping_wrapper.fetches_path->os.path.join(run_dir, debug_data.METADATA_FILE_PREFIX + debug_data.FETCHES_INFO_FILE_TAG)
A:tensorflow.python.debug.wrappers.dumping_wrapper.feed_keys_event->tensorflow.core.util.event_pb2.Event()
A:tensorflow.python.debug.wrappers.dumping_wrapper.feed_keys_path->os.path.join(run_dir, debug_data.METADATA_FILE_PREFIX + debug_data.FEED_KEYS_INFO_FILE_TAG)
tensorflow.debug.DumpingDebugWrapperSession(self,sess,session_root,watch_fn=None,log_usage=True)
tensorflow.debug.DumpingDebugWrapperSession.prepare_run_debug_urls(self,fetches,feed_dict)
tensorflow.python.debug.wrappers.dumping_wrapper.DumpingDebugWrapperSession(self,sess,session_root,watch_fn=None,log_usage=True)
tensorflow.python.debug.wrappers.dumping_wrapper.DumpingDebugWrapperSession.__init__(self,sess,session_root,watch_fn=None,log_usage=True)
tensorflow.python.debug.wrappers.dumping_wrapper.DumpingDebugWrapperSession.prepare_run_debug_urls(self,fetches,feed_dict)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/wrappers/hooks.py----------------------------------------
A:tensorflow.python.debug.wrappers.hooks.on_run_start_request->tensorflow.python.debug.wrappers.framework.OnRunStartRequest(run_context.original_args.fetches, run_context.original_args.feed_dict, None, None, self._run_call_count)
A:tensorflow.python.debug.wrappers.hooks.on_run_start_response->self.on_run_start(on_run_start_request)
A:tensorflow.python.debug.wrappers.hooks.run_args->tensorflow.python.training.session_run_hook.SessionRunArgs(None, feed_dict=None, options=run_options)
A:tensorflow.python.debug.wrappers.hooks.on_run_end_request->tensorflow.python.debug.wrappers.framework.OnRunEndRequest(self._performed_action, run_values.run_metadata)
A:tensorflow.python.debug.wrappers.hooks.(debug_urls, watch_options)->self._prepare_run_watch_config(run_context.original_args.fetches, run_context.original_args.feed_dict)
A:tensorflow.python.debug.wrappers.hooks.run_options->tensorflow.core.protobuf.config_pb2.RunOptions()
A:tensorflow.python.debug.wrappers.hooks.self._grpc_debug_wrapper_session->tensorflow.python.debug.wrappers.grpc_wrapper.GrpcDebugWrapperSession(run_context.session, self._grpc_debug_server_addresses, watch_fn=self._watch_fn, log_usage=self._log_usage)
A:tensorflow.python.debug.wrappers.hooks.watch_options->self._watch_fn(fetches, feed_dict)
tensorflow.debug.DumpingDebugHook(self,session_root,watch_fn=None,log_usage=True)
tensorflow.debug.DumpingDebugHook.after_run(self,run_context,run_values)
tensorflow.debug.DumpingDebugHook.before_run(self,run_context)
tensorflow.debug.DumpingDebugHook.begin(self)
tensorflow.debug.LocalCLIDebugHook(self,ui_type='curses')
tensorflow.debug.LocalCLIDebugHook._decorate_options_for_debug(self,options,graph)
tensorflow.debug.LocalCLIDebugHook.add_tensor_filter(self,filter_name,tensor_filter)
tensorflow.debug.LocalCLIDebugHook.after_run(self,run_context,run_values)
tensorflow.debug.LocalCLIDebugHook.before_run(self,run_context)
tensorflow.debug.LocalCLIDebugHook.begin(self)
tensorflow.debug.wrappers.hooks.GrpcDebugHook(self,grpc_debug_server_addresses,watch_fn=None,log_usage=True)
tensorflow.debug.wrappers.hooks.GrpcDebugHook.before_run(self,run_context)
tensorflow.python.debug.wrappers.hooks.DumpingDebugHook(self,session_root,watch_fn=None,log_usage=True)
tensorflow.python.debug.wrappers.hooks.DumpingDebugHook.__init__(self,session_root,watch_fn=None,log_usage=True)
tensorflow.python.debug.wrappers.hooks.DumpingDebugHook.after_run(self,run_context,run_values)
tensorflow.python.debug.wrappers.hooks.DumpingDebugHook.before_run(self,run_context)
tensorflow.python.debug.wrappers.hooks.DumpingDebugHook.begin(self)
tensorflow.python.debug.wrappers.hooks.GrpcDebugHook(self,grpc_debug_server_addresses,watch_fn=None,log_usage=True)
tensorflow.python.debug.wrappers.hooks.GrpcDebugHook.__init__(self,grpc_debug_server_addresses,watch_fn=None,log_usage=True)
tensorflow.python.debug.wrappers.hooks.GrpcDebugHook.before_run(self,run_context)
tensorflow.python.debug.wrappers.hooks.LocalCLIDebugHook(self,ui_type='curses')
tensorflow.python.debug.wrappers.hooks.LocalCLIDebugHook.__init__(self,ui_type='curses')
tensorflow.python.debug.wrappers.hooks.LocalCLIDebugHook._decorate_options_for_debug(self,options,graph)
tensorflow.python.debug.wrappers.hooks.LocalCLIDebugHook.add_tensor_filter(self,filter_name,tensor_filter)
tensorflow.python.debug.wrappers.hooks.LocalCLIDebugHook.after_run(self,run_context,run_values)
tensorflow.python.debug.wrappers.hooks.LocalCLIDebugHook.before_run(self,run_context)
tensorflow.python.debug.wrappers.hooks.LocalCLIDebugHook.begin(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/cli/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/cli/analyzer_cli.py----------------------------------------
A:tensorflow.python.debug.cli.analyzer_cli.menu->tensorflow.python.debug.cli.debugger_cli_common.Menu()
A:tensorflow.python.debug.cli.analyzer_cli.ap->argparse.ArgumentParser(description='Print a Python source file with overlaid debug information, including the nodes (ops) or Tensors created at the source lines.', usage=argparse.SUPPRESS)
A:tensorflow.python.debug.cli.analyzer_cli.parsed->self._arg_parsers['print_source'].parse_args(args)
A:tensorflow.python.debug.cli.analyzer_cli.op_type_regex->re.compile(parsed.op_type_filter)
A:tensorflow.python.debug.cli.analyzer_cli.node_name_regex->re.compile(parsed.node_name_filter)
A:tensorflow.python.debug.cli.analyzer_cli.output->tensorflow.python.debug.cli.debugger_cli_common.RichTextLines(lines, font_attr_segs=font_attr_segs)
A:tensorflow.python.debug.cli.analyzer_cli.filter_callable->self.get_tensor_filter(parsed.tensor_filter)
A:tensorflow.python.debug.cli.analyzer_cli.data_to_show->self._sort_dump_data_by(data_to_show, parsed.sort_by, parsed.reverse)
A:tensorflow.python.debug.cli.analyzer_cli.(max_timestamp_width, max_dump_size_width, max_op_type_width)->self._measure_tensor_list_column_widths(data_to_show)
A:tensorflow.python.debug.cli.analyzer_cli.op_type->self._debug_dump.node_op_type(dump.node_name)
A:tensorflow.python.debug.cli.analyzer_cli.dump_size_str->tensorflow.python.debug.cli.cli_shared.bytes_to_readable_str(dump.dump_size_bytes)
A:tensorflow.python.debug.cli.analyzer_cli.max_timestamp_width->len('[%.3f] ' % max_rel_time_ms)
A:tensorflow.python.debug.cli.analyzer_cli.max_op_type_width->len(op_type)
A:tensorflow.python.debug.cli.analyzer_cli.prev_len->len(row)
A:tensorflow.python.debug.cli.analyzer_cli.(node_name, unused_slot)->tensorflow.python.debug.lib.debug_data.parse_node_or_tensor_name(parsed.node_name)
A:tensorflow.python.debug.cli.analyzer_cli.inputs->self._debug_dump.node_inputs(node_name)
A:tensorflow.python.debug.cli.analyzer_cli.ctrl_inputs->sorted(tracker(node_name, is_control=True))
A:tensorflow.python.debug.cli.analyzer_cli.recs->self._debug_dump.node_recipients(node_name)
A:tensorflow.python.debug.cli.analyzer_cli.ctrl_recs->self._debug_dump.node_recipients(node_name, is_control=True)
A:tensorflow.python.debug.cli.analyzer_cli.node_stack->self._debug_dump.node_traceback(node_name)
A:tensorflow.python.debug.cli.analyzer_cli.line_number_line->RL('  ')
A:tensorflow.python.debug.cli.analyzer_cli.node_name->tensorflow.python.debug.lib.debug_data.get_node_name(parsed.node_name)
A:tensorflow.python.debug.cli.analyzer_cli.highlight_options->tensorflow.python.debug.cli.cli_shared.parse_ranges_highlight(parsed.ranges)
A:tensorflow.python.debug.cli.analyzer_cli.(tensor_name, tensor_slicing)->tensorflow.python.debug.cli.command_parser.parse_tensor_name_with_slicing(parsed.tensor_name)
A:tensorflow.python.debug.cli.analyzer_cli.(node_name, output_slot)->tensorflow.python.debug.lib.debug_data.parse_node_or_tensor_name(tensor_name)
A:tensorflow.python.debug.cli.analyzer_cli.watch_keys->self._debug_dump.debug_watch_keys(node_name)
A:tensorflow.python.debug.cli.analyzer_cli.output_slots->set()
A:tensorflow.python.debug.cli.analyzer_cli.debug_tensor_data->self._debug_dump.watch_key_to_data(watch_key)
A:tensorflow.python.debug.cli.analyzer_cli.source_annotation->tensorflow.python.debug.lib.source_utils.annotate_source(self._debug_dump, parsed.source_file_path, do_dumped_tensors=parsed.tensors, min_line=parsed.line_begin)
A:tensorflow.python.debug.cli.analyzer_cli.source_text->f.read()
A:tensorflow.python.debug.cli.analyzer_cli.source_lines->f.read().split('\n')
A:tensorflow.python.debug.cli.analyzer_cli.num_lines->len(source_lines)
A:tensorflow.python.debug.cli.analyzer_cli.annotated_line->RL('L%d' % (i + parsed.line_begin), 'yellow')
A:tensorflow.python.debug.cli.analyzer_cli.sorted_elements->sorted(source_annotation[i + parsed.line_begin])
A:tensorflow.python.debug.cli.analyzer_cli.label->RL(' ' * 4)
A:tensorflow.python.debug.cli.analyzer_cli.attribute->tensorflow.python.debug.cli.debugger_cli_common.MenuItem('', 'pt %s' % element)
A:tensorflow.python.debug.cli.analyzer_cli.(node_name, _)->tensorflow.python.debug.lib.debug_data.parse_node_or_tensor_name(node_name)
A:tensorflow.python.debug.cli.analyzer_cli.all_inputs->copy.copy(tracker(node_name, is_control=False))
A:tensorflow.python.debug.cli.analyzer_cli.(inp_node_name, _)->tensorflow.python.debug.lib.debug_data.parse_node_or_tensor_name(inp)
A:tensorflow.python.debug.cli.analyzer_cli.attrs->self._debug_dump.node_attributes(node_name)
A:tensorflow.python.debug.cli.analyzer_cli.attr_val_str->repr(attrs[attr_key]).strip().replace('\n', ' ')
A:tensorflow.python.debug.cli.analyzer_cli.output_with_header->tensorflow.python.debug.cli.debugger_cli_common.RichTextLines(['%d dumped tensor(s):' % dump_count, ''])
A:tensorflow.python.debug.cli.analyzer_cli.analyzer->DebugAnalyzer(debug_dump)
A:tensorflow.python.debug.cli.analyzer_cli.cli->tensorflow.python.debug.cli.ui_factory.get_ui(ui_type)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer(self,debug_dump)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer._dfs_from_node(self,lines,attr_segs,node_name,tracker,max_depth,depth,unfinished,include_control=False,show_op_type=False,command_template=None)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer._format_neighbors(self,neighbor_type,non_ctrls,ctrls)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer._list_inputs_or_outputs(self,recursive,node_name,depth,control,op_type,do_outputs=False)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer._list_node_attributes(self,node_name)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer._list_node_dumps(self,node_name)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer._measure_tensor_list_column_widths(self,data)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer._render_node_traceback(self,node_name)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer._sort_dump_data_by(self,data,sort_by,reverse)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer._tensor_list_column_heads(self,parsed,max_timestamp_width,max_dump_size_width,max_op_type_width)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer.add_tensor_filter(self,filter_name,filter_callable)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer.get_help(self,handler_name)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer.get_tensor_filter(self,filter_name)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer.list_inputs(self,args,screen_info=None)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer.list_outputs(self,args,screen_info=None)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer.list_tensors(self,args,screen_info=None)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer.node_info(self,args,screen_info=None)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer.print_source(self,args,screen_info=None)
tensorflow.debug.cli.analyzer_cli.DebugAnalyzer.print_tensor(self,args,screen_info=None)
tensorflow.debug.cli.analyzer_cli._add_main_menu(output,node_name=None,enable_list_tensors=True,enable_node_info=True,enable_print_tensor=True,enable_list_inputs=True,enable_list_outputs=True)
tensorflow.debug.cli.analyzer_cli.create_analyzer_ui(debug_dump,tensor_filters=None,ui_type='curses')
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer(self,debug_dump)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer.__init__(self,debug_dump)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer._dfs_from_node(self,lines,attr_segs,node_name,tracker,max_depth,depth,unfinished,include_control=False,show_op_type=False,command_template=None)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer._format_neighbors(self,neighbor_type,non_ctrls,ctrls)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer._list_inputs_or_outputs(self,recursive,node_name,depth,control,op_type,do_outputs=False)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer._list_node_attributes(self,node_name)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer._list_node_dumps(self,node_name)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer._measure_tensor_list_column_widths(self,data)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer._render_node_traceback(self,node_name)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer._sort_dump_data_by(self,data,sort_by,reverse)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer._tensor_list_column_heads(self,parsed,max_timestamp_width,max_dump_size_width,max_op_type_width)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer.add_tensor_filter(self,filter_name,filter_callable)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer.get_help(self,handler_name)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer.get_tensor_filter(self,filter_name)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer.list_inputs(self,args,screen_info=None)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer.list_outputs(self,args,screen_info=None)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer.list_tensors(self,args,screen_info=None)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer.node_info(self,args,screen_info=None)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer.print_source(self,args,screen_info=None)
tensorflow.python.debug.cli.analyzer_cli.DebugAnalyzer.print_tensor(self,args,screen_info=None)
tensorflow.python.debug.cli.analyzer_cli._add_main_menu(output,node_name=None,enable_list_tensors=True,enable_node_info=True,enable_print_tensor=True,enable_list_inputs=True,enable_list_outputs=True)
tensorflow.python.debug.cli.analyzer_cli.create_analyzer_ui(debug_dump,tensor_filters=None,ui_type='curses')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/cli/stepper_cli.py----------------------------------------
A:tensorflow.python.debug.cli.stepper_cli.ap->argparse.ArgumentParser(description='Inject (override) the value of a Tensor.', usage=argparse.SUPPRESS)
A:tensorflow.python.debug.cli.stepper_cli.self._sorted_nodes->self._node_stepper.sorted_nodes()
A:tensorflow.python.debug.cli.stepper_cli.self._closure_elements->self._node_stepper.closure_elements()
A:tensorflow.python.debug.cli.stepper_cli.self._placeholders->self._node_stepper.placeholders()
A:tensorflow.python.debug.cli.stepper_cli.self._completed_nodes->set()
A:tensorflow.python.debug.cli.stepper_cli.override_names->self._node_stepper.override_names()
A:tensorflow.python.debug.cli.stepper_cli.parsed->self.arg_parsers['inject_value'].parse_args(args)
A:tensorflow.python.debug.cli.stepper_cli.handle_node_names->self._node_stepper.handle_node_names()
A:tensorflow.python.debug.cli.stepper_cli.intermediate_tensor_names->self._node_stepper.intermediate_tensor_names()
A:tensorflow.python.debug.cli.stepper_cli.node_prefix->RL('     ')
A:tensorflow.python.debug.cli.stepper_cli.output->tensorflow.python.debug.cli.debugger_cli_common.rich_text_lines_from_rich_line_list(lines)
A:tensorflow.python.debug.cli.stepper_cli.status->RL()
A:tensorflow.python.debug.cli.stepper_cli.slots->self._node_stepper.output_slots_in_closure(element_name)
A:tensorflow.python.debug.cli.stepper_cli.has_override->any((element_name + ':%d' % slot in override_names for slot in slots))
A:tensorflow.python.debug.cli.stepper_cli.self._next->self._sorted_nodes.index(node_name)
A:tensorflow.python.debug.cli.stepper_cli.cont_result->self._node_stepper.cont(parsed.target_name, invalidate_from_updated_variables=parsed.invalidate_from_updated_variables, restore_variable_values=parsed.restore_variable_values)
A:tensorflow.python.debug.cli.stepper_cli.screen_output->self.cont([self._sorted_nodes[self._next]], screen_info)
A:tensorflow.python.debug.cli.stepper_cli.lower_bound->max(0, self._next - 2)
A:tensorflow.python.debug.cli.stepper_cli.upper_bound->min(len(self._sorted_nodes), self._next + 3)
A:tensorflow.python.debug.cli.stepper_cli.final_output->self.list_sorted_nodes(['-l', str(lower_bound), '-u', str(upper_bound)])
A:tensorflow.python.debug.cli.stepper_cli.feed_types->self._node_stepper.last_feed_types()
A:tensorflow.python.debug.cli.stepper_cli.feed_info->RL('  %s : ' % feed_name)
A:tensorflow.python.debug.cli.stepper_cli.last_updated->self._node_stepper.last_updated()
A:tensorflow.python.debug.cli.stepper_cli.sorted_last_updated->sorted(list(last_updated))
A:tensorflow.python.debug.cli.stepper_cli.highlight_options->tensorflow.python.debug.cli.cli_shared.parse_ranges_highlight(parsed.ranges)
A:tensorflow.python.debug.cli.stepper_cli.(tensor_name, tensor_slicing)->tensorflow.python.debug.cli.command_parser.parse_tensor_name_with_slicing(parsed.tensor_name)
A:tensorflow.python.debug.cli.stepper_cli.tensor_names->self._resolve_tensor_names(parsed.tensor_name)
A:tensorflow.python.debug.cli.stepper_cli.tensor_value->eval(parsed.tensor_value_str)
tensorflow.debug.cli.stepper_cli.NodeStepperCLI(self,node_stepper)
tensorflow.debug.cli.stepper_cli.NodeStepperCLI._calculate_next(self)
tensorflow.debug.cli.stepper_cli.NodeStepperCLI._get_status_labels(self,element_name,handle_node_names,intermediate_tensor_names,override_names,dirty_variable_names)
tensorflow.debug.cli.stepper_cli.NodeStepperCLI._initialize_state(self)
tensorflow.debug.cli.stepper_cli.NodeStepperCLI._node_status_label_legend(self)
tensorflow.debug.cli.stepper_cli.NodeStepperCLI._report_last_feed_types(self)
tensorflow.debug.cli.stepper_cli.NodeStepperCLI._report_last_updated(self)
tensorflow.debug.cli.stepper_cli.NodeStepperCLI._resolve_tensor_names(self,element_name)
tensorflow.debug.cli.stepper_cli.NodeStepperCLI.cont(self,args,screen_info=None)
tensorflow.debug.cli.stepper_cli.NodeStepperCLI.inject_value(self,args,screen_info=None)
tensorflow.debug.cli.stepper_cli.NodeStepperCLI.list_sorted_nodes(self,args,screen_info=None)
tensorflow.debug.cli.stepper_cli.NodeStepperCLI.print_tensor(self,args,screen_info=None)
tensorflow.debug.cli.stepper_cli.NodeStepperCLI.step(self,args,screen_info=None)
tensorflow.python.debug.cli.stepper_cli.NodeStepperCLI(self,node_stepper)
tensorflow.python.debug.cli.stepper_cli.NodeStepperCLI.__init__(self,node_stepper)
tensorflow.python.debug.cli.stepper_cli.NodeStepperCLI._calculate_next(self)
tensorflow.python.debug.cli.stepper_cli.NodeStepperCLI._get_status_labels(self,element_name,handle_node_names,intermediate_tensor_names,override_names,dirty_variable_names)
tensorflow.python.debug.cli.stepper_cli.NodeStepperCLI._initialize_state(self)
tensorflow.python.debug.cli.stepper_cli.NodeStepperCLI._node_status_label_legend(self)
tensorflow.python.debug.cli.stepper_cli.NodeStepperCLI._report_last_feed_types(self)
tensorflow.python.debug.cli.stepper_cli.NodeStepperCLI._report_last_updated(self)
tensorflow.python.debug.cli.stepper_cli.NodeStepperCLI._resolve_tensor_names(self,element_name)
tensorflow.python.debug.cli.stepper_cli.NodeStepperCLI.cont(self,args,screen_info=None)
tensorflow.python.debug.cli.stepper_cli.NodeStepperCLI.inject_value(self,args,screen_info=None)
tensorflow.python.debug.cli.stepper_cli.NodeStepperCLI.list_sorted_nodes(self,args,screen_info=None)
tensorflow.python.debug.cli.stepper_cli.NodeStepperCLI.print_tensor(self,args,screen_info=None)
tensorflow.python.debug.cli.stepper_cli.NodeStepperCLI.step(self,args,screen_info=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/cli/offline_analyzer.py----------------------------------------
A:tensorflow.python.debug.cli.offline_analyzer.debug_dump->tensorflow.python.debug.lib.debug_data.DebugDumpDir(FLAGS.dump_dir, validate=FLAGS.validate_graph)
A:tensorflow.python.debug.cli.offline_analyzer.cli->tensorflow.python.debug.cli.analyzer_cli.create_analyzer_ui(debug_dump, tensor_filters={'has_inf_or_nan': debug_data.has_inf_or_nan}, ui_type=FLAGS.ui_type)
A:tensorflow.python.debug.cli.offline_analyzer.parser->argparse.ArgumentParser()
A:tensorflow.python.debug.cli.offline_analyzer.(FLAGS, unparsed)->argparse.ArgumentParser().parse_known_args()
tensorflow.debug.cli.offline_analyzer.main(_)
tensorflow.python.debug.cli.offline_analyzer.main(_)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/cli/ui_factory.py----------------------------------------
A:tensorflow.python.debug.cli.ui_factory.available_ui_types->copy.deepcopy(SUPPORTED_UI_TYPES)
tensorflow.debug.cli.ui_factory.get_ui(ui_type,on_ui_exit=None,available_ui_types=None)
tensorflow.python.debug.cli.ui_factory.get_ui(ui_type,on_ui_exit=None,available_ui_types=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/cli/curses_ui.py----------------------------------------
A:tensorflow.python.debug.cli.curses_ui.block_y->self._block_y()
A:tensorflow.python.debug.cli.curses_ui.layout->tensorflow.python.debug.cli.debugger_cli_common.RichTextLines([empty_line] * self._scroll_bar_height)
A:tensorflow.python.debug.cli.curses_ui.CLI_TAB_KEY->ord('\t')
A:tensorflow.python.debug.cli.curses_ui.BACKSPACE_KEY->ord('\x08')
A:tensorflow.python.debug.cli.curses_ui._single_instance_lock->threading.Lock()
A:tensorflow.python.debug.cli.curses_ui.self._command_history_store->tensorflow.python.debug.cli.debugger_cli_common.CommandHistory()
A:tensorflow.python.debug.cli.curses_ui.self._nav_history->tensorflow.python.debug.cli.curses_widgets.CursesNavigationHistory(10)
A:tensorflow.python.debug.cli.curses_ui.self.rectangle->collections.namedtuple('rectangle', 'top left bottom right')
A:tensorflow.python.debug.cli.curses_ui.self._candidates_max_lines->int(self._output_num_rows / 2)
A:tensorflow.python.debug.cli.curses_ui.self._output_pad_screen_location->self.rectangle(top=self._output_top_row, left=0, bottom=self._output_top_row + self._output_num_rows, right=self._output_pad_screen_width)
A:tensorflow.python.debug.cli.curses_ui.self._stdscr->curses.initscr()
A:tensorflow.python.debug.cli.curses_ui.self._color_pairs[color_name]->curses.color_pair(color_index)
A:tensorflow.python.debug.cli.curses_ui.self._command_window->curses.newwin(self._command_textbox_height, self._max_x - len(self.CLI_PROMPT), self._max_y - self._command_textbox_height, len(self.CLI_PROMPT))
A:tensorflow.python.debug.cli.curses_ui.exit_token->self._dispatch_command(command)
A:tensorflow.python.debug.cli.curses_ui.self._command_textbox->curses.textpad.Textbox(self._command_window, insert_mode=True)
A:tensorflow.python.debug.cli.curses_ui.(command, terminator, pending_command_changed)->self._get_user_command()
A:tensorflow.python.debug.cli.curses_ui.tab_completed->self._tab_complete(command)
A:tensorflow.python.debug.cli.curses_ui.command->self._fetch_hyperlink_command(mouse_x, mouse_y)
A:tensorflow.python.debug.cli.curses_ui.(self._max_y, self._max_x)->self._stdscr.getmaxyx()
A:tensorflow.python.debug.cli.curses_ui.item->self._nav_history.go_back()
A:tensorflow.python.debug.cli.curses_ui.indices_str->command[1:].strip()
A:tensorflow.python.debug.cli.curses_ui.indices->tensorflow.python.debug.cli.command_parser.parse_indices(indices_str)
A:tensorflow.python.debug.cli.curses_ui.(omitted, line_index, _, _)->tensorflow.python.debug.cli.tensor_format.locate_tensor_element(self._curr_wrapped_output, indices)
A:tensorflow.python.debug.cli.curses_ui.(prefix, args, output_file_path)->self._parse_command(command)
A:tensorflow.python.debug.cli.curses_ui.screen_output->tensorflow.python.debug.cli.debugger_cli_common.RichTextLines([self.ERROR_MESSAGE_PREFIX + 'Invalid command prefix "%s"' % prefix])
A:tensorflow.python.debug.cli.curses_ui.txt->self._command_textbox.gather()
A:tensorflow.python.debug.cli.curses_ui.hist_prefix->self._screen_gather_textbox_str()
A:tensorflow.python.debug.cli.curses_ui.self._active_command_history->self._command_history_store.lookup_prefix(hist_prefix, self._command_history_limit)
A:tensorflow.python.debug.cli.curses_ui.(_, mouse_x, mouse_y, _, mouse_event_type)->self._screen_getmouse()
A:tensorflow.python.debug.cli.curses_ui.scroll_command->self._scroll_bar.get_click_command(mouse_y)
A:tensorflow.python.debug.cli.curses_ui.existing_len->len(self._command_textbox.gather())
A:tensorflow.python.debug.cli.curses_ui.(self._curr_wrapped_output, wrapped_line_indices)->tensorflow.python.debug.cli.debugger_cli_common.wrap_rich_text_lines(output, self._max_x - 2)
A:tensorflow.python.debug.cli.curses_ui.self._curr_wrapped_output->self._curr_wrapped_output.slice(0, self.max_output_lines)
A:tensorflow.python.debug.cli.curses_ui.(self._output_pad, self._output_pad_height, self._output_pad_width)->self._display_lines(self._curr_wrapped_output, self._output_num_rows)
A:tensorflow.python.debug.cli.curses_ui.output->tensorflow.python.debug.cli.debugger_cli_common.regex_find(output, highlight_regex, font_attr=self._SEARCH_HIGHLIGHT_FONT_ATTR)
A:tensorflow.python.debug.cli.curses_ui.wrapped_regex_match_lines->self._screen_display_output(output)
A:tensorflow.python.debug.cli.curses_ui.rows->max(min_num_rows, len(output.lines))
A:tensorflow.python.debug.cli.curses_ui.pad->self._screen_new_output_pad(rows, cols)
A:tensorflow.python.debug.cli.curses_ui.self._nav_bar_pad->self._screen_new_output_pad(1, nav_bar_width)
A:tensorflow.python.debug.cli.curses_ui.self._nav_bar->self._nav_history.render(nav_bar_width, self._NAVIGATION_BACK_COMMAND, self._NAVIGATION_FORWARD_COMMAND)
A:tensorflow.python.debug.cli.curses_ui.self._main_menu->tensorflow.python.debug.cli.debugger_cli_common.regex_find(output, highlight_regex, font_attr=self._SEARCH_HIGHLIGHT_FONT_ATTR).annotations[debugger_cli_common.MAIN_MENU_KEY].format_as_single_line(prefix='| ', divider=' | ', enabled_item_attrs=['underline'])
A:tensorflow.python.debug.cli.curses_ui.self._main_menu_pad->self._screen_new_output_pad(1, self._max_x - 2)
A:tensorflow.python.debug.cli.curses_ui.(wrapped_menu, _)->tensorflow.python.debug.cli.debugger_cli_common.wrap_rich_text_lines(self._main_menu, self._max_x - 3)
A:tensorflow.python.debug.cli.curses_ui.self._scroll_bar->ScrollBar(self._max_x - 2, 2, self._max_x - 1, self._output_num_rows, self._output_pad_row, self._output_pad_height - self._output_pad_screen_height)
A:tensorflow.python.debug.cli.curses_ui.(scroll_pad, _, _)->self._display_lines(self._scroll_bar.layout(), self._output_num_rows - 1)
A:tensorflow.python.debug.cli.curses_ui.self._scroll_info->self._compile_ui_status_summary()
A:tensorflow.python.debug.cli.curses_ui.self._output_array_pointer_indices->self._show_array_indices()
A:tensorflow.python.debug.cli.curses_ui.indices_top->self._show_array_index_at_line(0)
A:tensorflow.python.debug.cli.curses_ui.indices_bottom->self._show_array_index_at_line(bottom_line_index)
A:tensorflow.python.debug.cli.curses_ui.array_indices_str->self._format_indices(indices)
A:tensorflow.python.debug.cli.curses_ui.(context, prefix, except_last_word)->self._analyze_tab_complete_input(command_str)
A:tensorflow.python.debug.cli.curses_ui.(candidates, common_prefix)->self._tab_completion_registry.get_completions(context, prefix)
A:tensorflow.python.debug.cli.curses_ui.candidates_output->tensorflow.python.debug.cli.debugger_cli_common.RichTextLines(candidates_line, font_attr_segs={0: [(len(candidates_prefix), len(candidates_line), 'yellow')]})
A:tensorflow.python.debug.cli.curses_ui.(candidates_output, _)->tensorflow.python.debug.cli.debugger_cli_common.wrap_rich_text_lines(candidates_output, self._max_x - 3)
A:tensorflow.python.debug.cli.curses_ui.candidates_num_rows->min(len(candidates_output.lines), self._candidates_max_lines)
A:tensorflow.python.debug.cli.curses_ui.(pad, _, _)->self._display_lines(debugger_cli_common.RichTextLines(message, font_attr_segs={0: [(0, len(message), color or 'white')]}), 0)
A:tensorflow.python.debug.cli.curses_ui.right_end->min(len(message), self._max_x - 2)
tensorflow.debug.cli.curses_ui.CursesUI(self,on_ui_exit=None)
tensorflow.debug.cli.curses_ui.CursesUI._auto_key_in(self,command,erase_existing=False)
tensorflow.debug.cli.curses_ui.CursesUI._compile_ui_status_summary(self)
tensorflow.debug.cli.curses_ui.CursesUI._dispatch_command(self,command)
tensorflow.debug.cli.curses_ui.CursesUI._display_candidates(self,candidates)
tensorflow.debug.cli.curses_ui.CursesUI._display_lines(self,output,min_num_rows)
tensorflow.debug.cli.curses_ui.CursesUI._display_main_menu(self,output)
tensorflow.debug.cli.curses_ui.CursesUI._display_nav_bar(self)
tensorflow.debug.cli.curses_ui.CursesUI._display_output(self,output,is_refresh=False,highlight_regex=None)
tensorflow.debug.cli.curses_ui.CursesUI._erase_existing_command(self)
tensorflow.debug.cli.curses_ui.CursesUI._error_toast(self,message)
tensorflow.debug.cli.curses_ui.CursesUI._fetch_hyperlink_command(self,mouse_x,mouse_y)
tensorflow.debug.cli.curses_ui.CursesUI._format_indices(self,indices)
tensorflow.debug.cli.curses_ui.CursesUI._get_user_command(self)
tensorflow.debug.cli.curses_ui.CursesUI._info_toast(self,message)
tensorflow.debug.cli.curses_ui.CursesUI._init_layout(self)
tensorflow.debug.cli.curses_ui.CursesUI._interrupt_handler(self,signal_num,frame)
tensorflow.debug.cli.curses_ui.CursesUI._mouse_mode_command_handler(self,args,screen_info=None)
tensorflow.debug.cli.curses_ui.CursesUI._navigate_screen_output(self,command)
tensorflow.debug.cli.curses_ui.CursesUI._on_textbox_keypress(self,x)
tensorflow.debug.cli.curses_ui.CursesUI._redraw_output(self)
tensorflow.debug.cli.curses_ui.CursesUI._screen_add_line_to_output_pad(self,pad,row,txt,color_segments=None)
tensorflow.debug.cli.curses_ui.CursesUI._screen_create_command_textbox(self,existing_command)
tensorflow.debug.cli.curses_ui.CursesUI._screen_create_command_window(self)
tensorflow.debug.cli.curses_ui.CursesUI._screen_display_output(self,output)
tensorflow.debug.cli.curses_ui.CursesUI._screen_draw_text_line(self,row,line,attr=curses.A_NORMAL,color=None)
tensorflow.debug.cli.curses_ui.CursesUI._screen_gather_textbox_str(self)
tensorflow.debug.cli.curses_ui.CursesUI._screen_get_user_command(self)
tensorflow.debug.cli.curses_ui.CursesUI._screen_getmouse(self)
tensorflow.debug.cli.curses_ui.CursesUI._screen_init(self)
tensorflow.debug.cli.curses_ui.CursesUI._screen_launch(self,enable_mouse_on_start)
tensorflow.debug.cli.curses_ui.CursesUI._screen_new_output_pad(self,rows,cols)
tensorflow.debug.cli.curses_ui.CursesUI._screen_refresh(self)
tensorflow.debug.cli.curses_ui.CursesUI._screen_refresh_size(self)
tensorflow.debug.cli.curses_ui.CursesUI._screen_render_menu_pad(self)
tensorflow.debug.cli.curses_ui.CursesUI._screen_render_nav_bar(self)
tensorflow.debug.cli.curses_ui.CursesUI._screen_scroll_output_pad(self,pad,viewport_top,viewport_left,screen_location_top,screen_location_left,screen_location_bottom,screen_location_right)
tensorflow.debug.cli.curses_ui.CursesUI._screen_set_mousemask(self)
tensorflow.debug.cli.curses_ui.CursesUI._screen_terminate(self)
tensorflow.debug.cli.curses_ui.CursesUI._scroll_output(self,direction,line_index=None)
tensorflow.debug.cli.curses_ui.CursesUI._set_mouse_enabled(self,enabled)
tensorflow.debug.cli.curses_ui.CursesUI._show_array_index_at_line(self,line_index)
tensorflow.debug.cli.curses_ui.CursesUI._show_array_indices(self)
tensorflow.debug.cli.curses_ui.CursesUI._strip_terminator(self,command)
tensorflow.debug.cli.curses_ui.CursesUI._tab_complete(self,command_str)
tensorflow.debug.cli.curses_ui.CursesUI._title(self,title,title_color=None)
tensorflow.debug.cli.curses_ui.CursesUI._toast(self,message,color=None,line_index=None)
tensorflow.debug.cli.curses_ui.CursesUI._ui_loop(self)
tensorflow.debug.cli.curses_ui.CursesUI.get_help(self)
tensorflow.debug.cli.curses_ui.CursesUI.run_ui(self,init_command=None,title=None,title_color=None,enable_mouse_on_start=True)
tensorflow.debug.cli.curses_ui.ScrollBar(self,min_x,min_y,max_x,max_y,scroll_position,output_num_rows)
tensorflow.debug.cli.curses_ui.ScrollBar._block_y(self)
tensorflow.debug.cli.curses_ui.ScrollBar.get_click_command(self,mouse_y)
tensorflow.debug.cli.curses_ui.ScrollBar.layout(self)
tensorflow.debug.cli.curses_ui._get_command_from_line_attr_segs(mouse_x,attr_segs)
tensorflow.python.debug.cli.curses_ui.CursesUI(self,on_ui_exit=None)
tensorflow.python.debug.cli.curses_ui.CursesUI.__init__(self,on_ui_exit=None)
tensorflow.python.debug.cli.curses_ui.CursesUI._auto_key_in(self,command,erase_existing=False)
tensorflow.python.debug.cli.curses_ui.CursesUI._compile_ui_status_summary(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._dispatch_command(self,command)
tensorflow.python.debug.cli.curses_ui.CursesUI._display_candidates(self,candidates)
tensorflow.python.debug.cli.curses_ui.CursesUI._display_lines(self,output,min_num_rows)
tensorflow.python.debug.cli.curses_ui.CursesUI._display_main_menu(self,output)
tensorflow.python.debug.cli.curses_ui.CursesUI._display_nav_bar(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._display_output(self,output,is_refresh=False,highlight_regex=None)
tensorflow.python.debug.cli.curses_ui.CursesUI._erase_existing_command(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._error_toast(self,message)
tensorflow.python.debug.cli.curses_ui.CursesUI._fetch_hyperlink_command(self,mouse_x,mouse_y)
tensorflow.python.debug.cli.curses_ui.CursesUI._format_indices(self,indices)
tensorflow.python.debug.cli.curses_ui.CursesUI._get_user_command(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._info_toast(self,message)
tensorflow.python.debug.cli.curses_ui.CursesUI._init_layout(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._interrupt_handler(self,signal_num,frame)
tensorflow.python.debug.cli.curses_ui.CursesUI._mouse_mode_command_handler(self,args,screen_info=None)
tensorflow.python.debug.cli.curses_ui.CursesUI._navigate_screen_output(self,command)
tensorflow.python.debug.cli.curses_ui.CursesUI._on_textbox_keypress(self,x)
tensorflow.python.debug.cli.curses_ui.CursesUI._redraw_output(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_add_line_to_output_pad(self,pad,row,txt,color_segments=None)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_create_command_textbox(self,existing_command)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_create_command_window(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_display_output(self,output)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_draw_text_line(self,row,line,attr=curses.A_NORMAL,color=None)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_gather_textbox_str(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_get_user_command(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_getmouse(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_init(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_launch(self,enable_mouse_on_start)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_new_output_pad(self,rows,cols)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_refresh(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_refresh_size(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_render_menu_pad(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_render_nav_bar(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_scroll_output_pad(self,pad,viewport_top,viewport_left,screen_location_top,screen_location_left,screen_location_bottom,screen_location_right)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_set_mousemask(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._screen_terminate(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._scroll_output(self,direction,line_index=None)
tensorflow.python.debug.cli.curses_ui.CursesUI._set_mouse_enabled(self,enabled)
tensorflow.python.debug.cli.curses_ui.CursesUI._show_array_index_at_line(self,line_index)
tensorflow.python.debug.cli.curses_ui.CursesUI._show_array_indices(self)
tensorflow.python.debug.cli.curses_ui.CursesUI._strip_terminator(self,command)
tensorflow.python.debug.cli.curses_ui.CursesUI._tab_complete(self,command_str)
tensorflow.python.debug.cli.curses_ui.CursesUI._title(self,title,title_color=None)
tensorflow.python.debug.cli.curses_ui.CursesUI._toast(self,message,color=None,line_index=None)
tensorflow.python.debug.cli.curses_ui.CursesUI._ui_loop(self)
tensorflow.python.debug.cli.curses_ui.CursesUI.get_help(self)
tensorflow.python.debug.cli.curses_ui.CursesUI.run_ui(self,init_command=None,title=None,title_color=None,enable_mouse_on_start=True)
tensorflow.python.debug.cli.curses_ui.ScrollBar(self,min_x,min_y,max_x,max_y,scroll_position,output_num_rows)
tensorflow.python.debug.cli.curses_ui.ScrollBar.__init__(self,min_x,min_y,max_x,max_y,scroll_position,output_num_rows)
tensorflow.python.debug.cli.curses_ui.ScrollBar._block_y(self)
tensorflow.python.debug.cli.curses_ui.ScrollBar.get_click_command(self,mouse_y)
tensorflow.python.debug.cli.curses_ui.ScrollBar.layout(self)
tensorflow.python.debug.cli.curses_ui._get_command_from_line_attr_segs(mouse_x,attr_segs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/cli/tensor_format.py----------------------------------------
A:tensorflow.python.debug.cli.tensor_format._NUMBER_REGEX->re.compile('[-+]?([0-9][-+0-9eE\\.]+|nan|inf)(\\s|,|\\])')
A:tensorflow.python.debug.cli.tensor_format.debug_op_len->len(suffix)
A:tensorflow.python.debug.cli.tensor_format.hlines->len(lines)
A:tensorflow.python.debug.cli.tensor_format.array_lines->repr(tensor).split('\n')
A:tensorflow.python.debug.cli.tensor_format.annotations->_annotate_ndarray_lines(array_lines, tensor, np_printoptions=np_printoptions, offset=hlines)
A:tensorflow.python.debug.cli.tensor_format.formatted->tensorflow.python.debug.cli.debugger_cli_common.RichTextLines(lines, font_attr_segs=font_attr_segs, annotations=annotations)
A:tensorflow.python.debug.cli.tensor_format.indices_list->list(np.argwhere(highlight_options.criterion(tensor)))
A:tensorflow.python.debug.cli.tensor_format.total_elements->numpy.size(tensor)
A:tensorflow.python.debug.cli.tensor_format.(are_omitted, rows, start_cols, end_cols)->locate_tensor_element(formatted, indices_list)
A:tensorflow.python.debug.cli.tensor_format.dims->numpy.shape(tensor)
A:tensorflow.python.debug.cli.tensor_format.ndims->len(dims)
A:tensorflow.python.debug.cli.tensor_format.line->array_lines[i].strip()
A:tensorflow.python.debug.cli.tensor_format.num_lbrackets->array_lines[i].strip().count('[')
A:tensorflow.python.debug.cli.tensor_format.num_rbrackets->array_lines[i].strip().count(']')
A:tensorflow.python.debug.cli.tensor_format.num_elements->line_content.count(',')
A:tensorflow.python.debug.cli.tensor_format.batch_size->len(indices_list)
A:tensorflow.python.debug.cli.tensor_format.num_matches->len(matching_indices_list)
A:tensorflow.python.debug.cli.tensor_format.(match_start_columns, match_end_columns)->_locate_elements_in_line(prev_line, matching_indices_list, prev_indices)
A:tensorflow.python.debug.cli.tensor_format.ellipsis_index->len(line)
A:tensorflow.python.debug.cli.tensor_format.matches_iter->re.finditer(_NUMBER_REGEX, line)
A:tensorflow.python.debug.cli.tensor_format.start_columns[batch_pos]->match.start()
tensorflow.debug.cli.tensor_format.HighlightOptions(self,criterion,description=None,font_attr=DEFAULT_TENSOR_ELEMENT_HIGHLIGHT_FONT_ATTR)
tensorflow.debug.cli.tensor_format._annotate_ndarray_lines(array_lines,tensor,np_printoptions=None,offset=0)
tensorflow.debug.cli.tensor_format._locate_elements_in_line(line,indices_list,ref_indices)
tensorflow.debug.cli.tensor_format._validate_indices_list(indices_list,formatted)
tensorflow.debug.cli.tensor_format.format_tensor(tensor,tensor_label,include_metadata=False,np_printoptions=None,highlight_options=None)
tensorflow.debug.cli.tensor_format.locate_tensor_element(formatted,indices)
tensorflow.python.debug.cli.tensor_format.HighlightOptions(self,criterion,description=None,font_attr=DEFAULT_TENSOR_ELEMENT_HIGHLIGHT_FONT_ATTR)
tensorflow.python.debug.cli.tensor_format.HighlightOptions.__init__(self,criterion,description=None,font_attr=DEFAULT_TENSOR_ELEMENT_HIGHLIGHT_FONT_ATTR)
tensorflow.python.debug.cli.tensor_format._annotate_ndarray_lines(array_lines,tensor,np_printoptions=None,offset=0)
tensorflow.python.debug.cli.tensor_format._locate_elements_in_line(line,indices_list,ref_indices)
tensorflow.python.debug.cli.tensor_format._validate_indices_list(indices_list,formatted)
tensorflow.python.debug.cli.tensor_format.format_tensor(tensor,tensor_label,include_metadata=False,np_printoptions=None,highlight_options=None)
tensorflow.python.debug.cli.tensor_format.locate_tensor_element(formatted,indices)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/cli/cli_shared.py----------------------------------------
A:tensorflow.python.debug.cli.cli_shared.r->numpy.logical_or(r, np.logical_and(x >= range_start, x <= range_end))
A:tensorflow.python.debug.cli.cli_shared.ranges->tensorflow.python.debug.cli.command_parser.parse_ranges(ranges_string)
A:tensorflow.python.debug.cli.cli_shared.value->tensorflow.python.debug.cli.command_parser.evaluate_tensor_slice(tensor, tensor_slicing)
A:tensorflow.python.debug.cli.cli_shared.fetch_lines->_get_fetch_names(fetches)
A:tensorflow.python.debug.cli.cli_shared.out->tensorflow.python.debug.cli.debugger_cli_common.rich_text_lines_from_rich_line_list(intro_lines)
A:tensorflow.python.debug.cli.cli_shared.command_menu_node->tensorflow.python.debug.cli.debugger_cli_common.MenuItem('', 'run -f %s' % filter_name)
A:tensorflow.python.debug.cli.cli_shared.menu->tensorflow.python.debug.cli.debugger_cli_common.Menu()
A:tensorflow.python.debug.cli.cli_shared.num_fetches->len(_get_fetch_names(fetches))
tensorflow.debug.cli.cli_shared._get_fetch_name(fetch)
tensorflow.debug.cli.cli_shared._get_fetch_names(fetches)
tensorflow.debug.cli.cli_shared._recommend_command(command,description,indent=2,create_link=False)
tensorflow.debug.cli.cli_shared.bytes_to_readable_str(num_bytes,include_b=False)
tensorflow.debug.cli.cli_shared.error(msg)
tensorflow.debug.cli.cli_shared.format_tensor(tensor,tensor_name,np_printoptions,print_all=False,tensor_slicing=None,highlight_options=None)
tensorflow.debug.cli.cli_shared.get_error_intro(tf_error)
tensorflow.debug.cli.cli_shared.get_run_short_description(run_call_count,fetches,feed_dict)
tensorflow.debug.cli.cli_shared.get_run_start_intro(run_call_count,fetches,feed_dict,tensor_filters)
tensorflow.debug.cli.cli_shared.get_tfdbg_logo()
tensorflow.debug.cli.cli_shared.parse_ranges_highlight(ranges_string)
tensorflow.python.debug.cli.cli_shared._get_fetch_name(fetch)
tensorflow.python.debug.cli.cli_shared._get_fetch_names(fetches)
tensorflow.python.debug.cli.cli_shared._recommend_command(command,description,indent=2,create_link=False)
tensorflow.python.debug.cli.cli_shared.bytes_to_readable_str(num_bytes,include_b=False)
tensorflow.python.debug.cli.cli_shared.error(msg)
tensorflow.python.debug.cli.cli_shared.format_tensor(tensor,tensor_name,np_printoptions,print_all=False,tensor_slicing=None,highlight_options=None)
tensorflow.python.debug.cli.cli_shared.get_error_intro(tf_error)
tensorflow.python.debug.cli.cli_shared.get_run_short_description(run_call_count,fetches,feed_dict)
tensorflow.python.debug.cli.cli_shared.get_run_start_intro(run_call_count,fetches,feed_dict,tensor_filters)
tensorflow.python.debug.cli.cli_shared.get_tfdbg_logo()
tensorflow.python.debug.cli.cli_shared.parse_ranges_highlight(ranges_string)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/cli/readline_ui.py----------------------------------------
A:tensorflow.python.debug.cli.readline_ui.(context, prefix, except_last_word)->self._analyze_tab_complete_input(text)
A:tensorflow.python.debug.cli.readline_ui.(candidates, _)->self._tab_completion_registry.get_completions(context, prefix)
A:tensorflow.python.debug.cli.readline_ui.exit_token->self._dispatch_command(command)
A:tensorflow.python.debug.cli.readline_ui.command->self._get_user_command()
A:tensorflow.python.debug.cli.readline_ui.(prefix, args, output_file_path)->self._parse_command(command)
A:tensorflow.python.debug.cli.readline_ui.screen_output->tensorflow.python.debug.cli.debugger_cli_common.RichTextLines([self.ERROR_MESSAGE_PREFIX + 'Invalid command prefix "%s"' % prefix])
tensorflow.debug.cli.readline_ui.ReadlineUI(self,on_ui_exit=None)
tensorflow.debug.cli.readline_ui.ReadlineUI._dispatch_command(self,command)
tensorflow.debug.cli.readline_ui.ReadlineUI._display_output(self,screen_output)
tensorflow.debug.cli.readline_ui.ReadlineUI._get_user_command(self)
tensorflow.debug.cli.readline_ui.ReadlineUI._init_input(self)
tensorflow.debug.cli.readline_ui.ReadlineUI._readline_complete(self,text,state)
tensorflow.debug.cli.readline_ui.ReadlineUI._ui_loop(self)
tensorflow.debug.cli.readline_ui.ReadlineUI.run_ui(self,init_command=None,title=None,title_color=None,enable_mouse_on_start=True)
tensorflow.python.debug.cli.readline_ui.ReadlineUI(self,on_ui_exit=None)
tensorflow.python.debug.cli.readline_ui.ReadlineUI.__init__(self,on_ui_exit=None)
tensorflow.python.debug.cli.readline_ui.ReadlineUI._dispatch_command(self,command)
tensorflow.python.debug.cli.readline_ui.ReadlineUI._display_output(self,screen_output)
tensorflow.python.debug.cli.readline_ui.ReadlineUI._get_user_command(self)
tensorflow.python.debug.cli.readline_ui.ReadlineUI._init_input(self)
tensorflow.python.debug.cli.readline_ui.ReadlineUI._readline_complete(self,text,state)
tensorflow.python.debug.cli.readline_ui.ReadlineUI._ui_loop(self)
tensorflow.python.debug.cli.readline_ui.ReadlineUI.run_ui(self,init_command=None,title=None,title_color=None,enable_mouse_on_start=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/cli/debugger_cli_common.py----------------------------------------
A:tensorflow.python.debug.cli.debugger_cli_common.ret->RichLine()
A:tensorflow.python.debug.cli.debugger_cli_common.old_len->len(self.text)
A:tensorflow.python.debug.cli.debugger_cli_common.orig_num_lines->self.num_lines()
A:tensorflow.python.debug.cli.debugger_cli_common.other_num_lines->RichTextLines(line).num_lines()
A:tensorflow.python.debug.cli.debugger_cli_common.other->RichTextLines(line)
A:tensorflow.python.debug.cli.debugger_cli_common.new_screen_output->RichTextLines(orig_screen_output.lines, font_attr_segs=copy.deepcopy(orig_screen_output.font_attr_segs), annotations=orig_screen_output.annotations)
A:tensorflow.python.debug.cli.debugger_cli_common.re_prog->re.compile(regex)
A:tensorflow.python.debug.cli.debugger_cli_common.find_it->re.compile(regex).finditer(line)
A:tensorflow.python.debug.cli.debugger_cli_common.new_screen_output.font_attr_segs[i]->sorted(new_screen_output.font_attr_segs[i], key=lambda x: x[0])
A:tensorflow.python.debug.cli.debugger_cli_common.out->RichTextLines([])
A:tensorflow.python.debug.cli.debugger_cli_common.rlim->len(line)
A:tensorflow.python.debug.cli.debugger_cli_common.resolved_prefix->self._resolve_prefix(cmd_prefix)
A:tensorflow.python.debug.cli.debugger_cli_common.output->RichTextLines(lines)
A:tensorflow.python.debug.cli.debugger_cli_common.help_info->RichTextLines([])
A:tensorflow.python.debug.cli.debugger_cli_common.sorted_prefixes->sorted(self._handlers)
A:tensorflow.python.debug.cli.debugger_cli_common.lines->self._get_help_for_command_prefix(cmd_prefix)
A:tensorflow.python.debug.cli.debugger_cli_common.help_lines->self._prefix_to_help[resolved_prefix].split('\n')
A:tensorflow.python.debug.cli.debugger_cli_common.sorted_comp_items->sorted(comp_items)
A:tensorflow.python.debug.cli.debugger_cli_common.self._comp_dict[context_word]->sorted(self._comp_dict[context_word])
A:tensorflow.python.debug.cli.debugger_cli_common.comp_items->sorted([item for item in comp_items if item.startswith(prefix)])
A:tensorflow.python.debug.cli.debugger_cli_common.s1->min(m)
A:tensorflow.python.debug.cli.debugger_cli_common.s2->max(m)
A:tensorflow.python.debug.cli.debugger_cli_common.commands->history_file.readlines()
A:tensorflow.python.debug.cli.debugger_cli_common.captions->self.captions()
tensorflow.debug.cli.debugger_cli_common.CommandHandlerRegistry(self)
tensorflow.debug.cli.debugger_cli_common.CommandHandlerRegistry._get_help_for_command_prefix(self,cmd_prefix)
tensorflow.debug.cli.debugger_cli_common.CommandHandlerRegistry._help_handler(self,args,screen_info=None)
tensorflow.debug.cli.debugger_cli_common.CommandHandlerRegistry._resolve_prefix(self,token)
tensorflow.debug.cli.debugger_cli_common.CommandHandlerRegistry.dispatch_command(self,prefix,argv,screen_info=None)
tensorflow.debug.cli.debugger_cli_common.CommandHandlerRegistry.get_help(self,cmd_prefix=None)
tensorflow.debug.cli.debugger_cli_common.CommandHandlerRegistry.is_registered(self,prefix)
tensorflow.debug.cli.debugger_cli_common.CommandHandlerRegistry.register_command_handler(self,prefix,handler,help_info,prefix_aliases=None)
tensorflow.debug.cli.debugger_cli_common.CommandHandlerRegistry.set_help_intro(self,help_intro)
tensorflow.debug.cli.debugger_cli_common.CommandHistory(self,limit=100,history_file_path=None)
tensorflow.debug.cli.debugger_cli_common.CommandHistory._add_command_to_history_file(self,command)
tensorflow.debug.cli.debugger_cli_common.CommandHistory._get_default_history_file_path(cls)
tensorflow.debug.cli.debugger_cli_common.CommandHistory._load_history_from_file(self)
tensorflow.debug.cli.debugger_cli_common.CommandHistory.add_command(self,command)
tensorflow.debug.cli.debugger_cli_common.CommandHistory.lookup_prefix(self,prefix,n)
tensorflow.debug.cli.debugger_cli_common.CommandHistory.most_recent_n(self,n)
tensorflow.debug.cli.debugger_cli_common.CommandLineExit(self,exit_token=None)
tensorflow.debug.cli.debugger_cli_common.CommandLineExit.exit_token(self)
tensorflow.debug.cli.debugger_cli_common.Menu(self,name=None)
tensorflow.debug.cli.debugger_cli_common.Menu.append(self,item)
tensorflow.debug.cli.debugger_cli_common.Menu.caption_to_item(self,caption)
tensorflow.debug.cli.debugger_cli_common.Menu.captions(self)
tensorflow.debug.cli.debugger_cli_common.Menu.format_as_single_line(self,prefix=None,divider='|',enabled_item_attrs=None,disabled_item_attrs=None)
tensorflow.debug.cli.debugger_cli_common.Menu.insert(self,index,item)
tensorflow.debug.cli.debugger_cli_common.Menu.num_items(self)
tensorflow.debug.cli.debugger_cli_common.MenuItem(self,caption,content,enabled=True)
tensorflow.debug.cli.debugger_cli_common.MenuItem.caption(self)
tensorflow.debug.cli.debugger_cli_common.MenuItem.content(self)
tensorflow.debug.cli.debugger_cli_common.MenuItem.disable(self)
tensorflow.debug.cli.debugger_cli_common.MenuItem.enable(self)
tensorflow.debug.cli.debugger_cli_common.MenuItem.is_enabled(self)
tensorflow.debug.cli.debugger_cli_common.MenuItem.type(self)
tensorflow.debug.cli.debugger_cli_common.RichLine(self,text='',font_attr=None)
tensorflow.debug.cli.debugger_cli_common.RichLine.__add__(self,other)
tensorflow.debug.cli.debugger_cli_common.RichLine.__len__(self)
tensorflow.debug.cli.debugger_cli_common.RichTextLines(self,lines,font_attr_segs=None,annotations=None)
tensorflow.debug.cli.debugger_cli_common.RichTextLines._extend_before(self,other)
tensorflow.debug.cli.debugger_cli_common.RichTextLines.annotations(self)
tensorflow.debug.cli.debugger_cli_common.RichTextLines.append(self,line,font_attr_segs=None)
tensorflow.debug.cli.debugger_cli_common.RichTextLines.append_rich_line(self,rich_line)
tensorflow.debug.cli.debugger_cli_common.RichTextLines.extend(self,other)
tensorflow.debug.cli.debugger_cli_common.RichTextLines.font_attr_segs(self)
tensorflow.debug.cli.debugger_cli_common.RichTextLines.lines(self)
tensorflow.debug.cli.debugger_cli_common.RichTextLines.num_lines(self)
tensorflow.debug.cli.debugger_cli_common.RichTextLines.prepend(self,line,font_attr_segs=None)
tensorflow.debug.cli.debugger_cli_common.RichTextLines.slice(self,begin,end)
tensorflow.debug.cli.debugger_cli_common.RichTextLines.write_to_file(self,file_path)
tensorflow.debug.cli.debugger_cli_common.TabCompletionRegistry(self)
tensorflow.debug.cli.debugger_cli_common.TabCompletionRegistry._common_prefix(self,m)
tensorflow.debug.cli.debugger_cli_common.TabCompletionRegistry.deregister_context(self,context_words)
tensorflow.debug.cli.debugger_cli_common.TabCompletionRegistry.extend_comp_items(self,context_word,new_comp_items)
tensorflow.debug.cli.debugger_cli_common.TabCompletionRegistry.get_completions(self,context_word,prefix)
tensorflow.debug.cli.debugger_cli_common.TabCompletionRegistry.register_tab_comp_context(self,context_words,comp_items)
tensorflow.debug.cli.debugger_cli_common.TabCompletionRegistry.remove_comp_items(self,context_word,comp_items)
tensorflow.debug.cli.debugger_cli_common.regex_find(orig_screen_output,regex,font_attr)
tensorflow.debug.cli.debugger_cli_common.rich_text_lines_from_rich_line_list(rich_text_list)
tensorflow.debug.cli.debugger_cli_common.wrap_rich_text_lines(inp,cols)
tensorflow.python.debug.cli.debugger_cli_common.CommandHandlerRegistry(self)
tensorflow.python.debug.cli.debugger_cli_common.CommandHandlerRegistry.__init__(self)
tensorflow.python.debug.cli.debugger_cli_common.CommandHandlerRegistry._get_help_for_command_prefix(self,cmd_prefix)
tensorflow.python.debug.cli.debugger_cli_common.CommandHandlerRegistry._help_handler(self,args,screen_info=None)
tensorflow.python.debug.cli.debugger_cli_common.CommandHandlerRegistry._resolve_prefix(self,token)
tensorflow.python.debug.cli.debugger_cli_common.CommandHandlerRegistry.dispatch_command(self,prefix,argv,screen_info=None)
tensorflow.python.debug.cli.debugger_cli_common.CommandHandlerRegistry.get_help(self,cmd_prefix=None)
tensorflow.python.debug.cli.debugger_cli_common.CommandHandlerRegistry.is_registered(self,prefix)
tensorflow.python.debug.cli.debugger_cli_common.CommandHandlerRegistry.register_command_handler(self,prefix,handler,help_info,prefix_aliases=None)
tensorflow.python.debug.cli.debugger_cli_common.CommandHandlerRegistry.set_help_intro(self,help_intro)
tensorflow.python.debug.cli.debugger_cli_common.CommandHistory(self,limit=100,history_file_path=None)
tensorflow.python.debug.cli.debugger_cli_common.CommandHistory.__init__(self,limit=100,history_file_path=None)
tensorflow.python.debug.cli.debugger_cli_common.CommandHistory._add_command_to_history_file(self,command)
tensorflow.python.debug.cli.debugger_cli_common.CommandHistory._get_default_history_file_path(cls)
tensorflow.python.debug.cli.debugger_cli_common.CommandHistory._load_history_from_file(self)
tensorflow.python.debug.cli.debugger_cli_common.CommandHistory.add_command(self,command)
tensorflow.python.debug.cli.debugger_cli_common.CommandHistory.lookup_prefix(self,prefix,n)
tensorflow.python.debug.cli.debugger_cli_common.CommandHistory.most_recent_n(self,n)
tensorflow.python.debug.cli.debugger_cli_common.CommandLineExit(self,exit_token=None)
tensorflow.python.debug.cli.debugger_cli_common.CommandLineExit.__init__(self,exit_token=None)
tensorflow.python.debug.cli.debugger_cli_common.CommandLineExit.exit_token(self)
tensorflow.python.debug.cli.debugger_cli_common.Menu(self,name=None)
tensorflow.python.debug.cli.debugger_cli_common.Menu.__init__(self,name=None)
tensorflow.python.debug.cli.debugger_cli_common.Menu.append(self,item)
tensorflow.python.debug.cli.debugger_cli_common.Menu.caption_to_item(self,caption)
tensorflow.python.debug.cli.debugger_cli_common.Menu.captions(self)
tensorflow.python.debug.cli.debugger_cli_common.Menu.format_as_single_line(self,prefix=None,divider='|',enabled_item_attrs=None,disabled_item_attrs=None)
tensorflow.python.debug.cli.debugger_cli_common.Menu.insert(self,index,item)
tensorflow.python.debug.cli.debugger_cli_common.Menu.num_items(self)
tensorflow.python.debug.cli.debugger_cli_common.MenuItem(self,caption,content,enabled=True)
tensorflow.python.debug.cli.debugger_cli_common.MenuItem.__init__(self,caption,content,enabled=True)
tensorflow.python.debug.cli.debugger_cli_common.MenuItem.caption(self)
tensorflow.python.debug.cli.debugger_cli_common.MenuItem.content(self)
tensorflow.python.debug.cli.debugger_cli_common.MenuItem.disable(self)
tensorflow.python.debug.cli.debugger_cli_common.MenuItem.enable(self)
tensorflow.python.debug.cli.debugger_cli_common.MenuItem.is_enabled(self)
tensorflow.python.debug.cli.debugger_cli_common.MenuItem.type(self)
tensorflow.python.debug.cli.debugger_cli_common.RichLine(self,text='',font_attr=None)
tensorflow.python.debug.cli.debugger_cli_common.RichLine.__add__(self,other)
tensorflow.python.debug.cli.debugger_cli_common.RichLine.__init__(self,text='',font_attr=None)
tensorflow.python.debug.cli.debugger_cli_common.RichLine.__len__(self)
tensorflow.python.debug.cli.debugger_cli_common.RichTextLines(self,lines,font_attr_segs=None,annotations=None)
tensorflow.python.debug.cli.debugger_cli_common.RichTextLines.__init__(self,lines,font_attr_segs=None,annotations=None)
tensorflow.python.debug.cli.debugger_cli_common.RichTextLines._extend_before(self,other)
tensorflow.python.debug.cli.debugger_cli_common.RichTextLines.annotations(self)
tensorflow.python.debug.cli.debugger_cli_common.RichTextLines.append(self,line,font_attr_segs=None)
tensorflow.python.debug.cli.debugger_cli_common.RichTextLines.append_rich_line(self,rich_line)
tensorflow.python.debug.cli.debugger_cli_common.RichTextLines.extend(self,other)
tensorflow.python.debug.cli.debugger_cli_common.RichTextLines.font_attr_segs(self)
tensorflow.python.debug.cli.debugger_cli_common.RichTextLines.lines(self)
tensorflow.python.debug.cli.debugger_cli_common.RichTextLines.num_lines(self)
tensorflow.python.debug.cli.debugger_cli_common.RichTextLines.prepend(self,line,font_attr_segs=None)
tensorflow.python.debug.cli.debugger_cli_common.RichTextLines.slice(self,begin,end)
tensorflow.python.debug.cli.debugger_cli_common.RichTextLines.write_to_file(self,file_path)
tensorflow.python.debug.cli.debugger_cli_common.TabCompletionRegistry(self)
tensorflow.python.debug.cli.debugger_cli_common.TabCompletionRegistry.__init__(self)
tensorflow.python.debug.cli.debugger_cli_common.TabCompletionRegistry._common_prefix(self,m)
tensorflow.python.debug.cli.debugger_cli_common.TabCompletionRegistry.deregister_context(self,context_words)
tensorflow.python.debug.cli.debugger_cli_common.TabCompletionRegistry.extend_comp_items(self,context_word,new_comp_items)
tensorflow.python.debug.cli.debugger_cli_common.TabCompletionRegistry.get_completions(self,context_word,prefix)
tensorflow.python.debug.cli.debugger_cli_common.TabCompletionRegistry.register_tab_comp_context(self,context_words,comp_items)
tensorflow.python.debug.cli.debugger_cli_common.TabCompletionRegistry.remove_comp_items(self,context_word,comp_items)
tensorflow.python.debug.cli.debugger_cli_common.regex_find(orig_screen_output,regex,font_attr)
tensorflow.python.debug.cli.debugger_cli_common.rich_text_lines_from_rich_line_list(rich_text_list)
tensorflow.python.debug.cli.debugger_cli_common.wrap_rich_text_lines(inp,cols)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/cli/command_parser.py----------------------------------------
A:tensorflow.python.debug.cli.command_parser._BRACKETS_PATTERN->re.compile('\\[[^\\]]*\\]')
A:tensorflow.python.debug.cli.command_parser._QUOTES_PATTERN->re.compile('\\"[^\\"]*\\"')
A:tensorflow.python.debug.cli.command_parser._WHITESPACE_PATTERN->re.compile('\\s+')
A:tensorflow.python.debug.cli.command_parser.command->command.strip().strip()
A:tensorflow.python.debug.cli.command_parser.gt_index->args[-1].index('>')
A:tensorflow.python.debug.cli.command_parser.indices->slice_string.split(':')
A:tensorflow.python.debug.cli.command_parser.indices_string->re.sub('\\s+', '', indices_string)
A:tensorflow.python.debug.cli.command_parser.range_string->re.sub('inf', repr(sys.float_info.max), range_string)
A:tensorflow.python.debug.cli.command_parser.ranges->ast.literal_eval(range_string)
A:tensorflow.python.debug.cli.command_parser.size_str->size_str.strip().strip()
tensorflow.debug.cli.command_parser._parse_slices(slicing_string)
tensorflow.debug.cli.command_parser.evaluate_tensor_slice(tensor,tensor_slicing)
tensorflow.debug.cli.command_parser.extract_output_file_path(args)
tensorflow.debug.cli.command_parser.parse_command(command)
tensorflow.debug.cli.command_parser.parse_indices(indices_string)
tensorflow.debug.cli.command_parser.parse_ranges(range_string)
tensorflow.debug.cli.command_parser.parse_readable_size_str(size_str)
tensorflow.debug.cli.command_parser.parse_tensor_name_with_slicing(in_str)
tensorflow.debug.cli.command_parser.validate_slicing_string(slicing_string)
tensorflow.python.debug.cli.command_parser._parse_slices(slicing_string)
tensorflow.python.debug.cli.command_parser.evaluate_tensor_slice(tensor,tensor_slicing)
tensorflow.python.debug.cli.command_parser.extract_output_file_path(args)
tensorflow.python.debug.cli.command_parser.parse_command(command)
tensorflow.python.debug.cli.command_parser.parse_indices(indices_string)
tensorflow.python.debug.cli.command_parser.parse_ranges(range_string)
tensorflow.python.debug.cli.command_parser.parse_readable_size_str(size_str)
tensorflow.python.debug.cli.command_parser.parse_tensor_name_with_slicing(in_str)
tensorflow.python.debug.cli.command_parser.validate_slicing_string(slicing_string)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/cli/base_ui.py----------------------------------------
A:tensorflow.python.debug.cli.base_ui.self._command_handler_registry->tensorflow.python.debug.cli.debugger_cli_common.CommandHandlerRegistry()
A:tensorflow.python.debug.cli.base_ui.self._tab_completion_registry->tensorflow.python.debug.cli.debugger_cli_common.TabCompletionRegistry()
A:tensorflow.python.debug.cli.base_ui.command->command.strip().strip()
A:tensorflow.python.debug.cli.base_ui.command_items->tensorflow.python.debug.cli.command_parser.parse_command(command)
A:tensorflow.python.debug.cli.base_ui.(command_items, output_file_path)->tensorflow.python.debug.cli.command_parser.extract_output_file_path(command_items)
A:tensorflow.python.debug.cli.base_ui.text->text.lstrip().lstrip()
A:tensorflow.python.debug.cli.base_ui.items->text.lstrip().lstrip().split(' ')
tensorflow.debug.cli.base_ui.BaseUI(self,on_ui_exit=None)
tensorflow.debug.cli.base_ui.BaseUI._analyze_tab_complete_input(self,text)
tensorflow.debug.cli.base_ui.BaseUI._parse_command(self,command)
tensorflow.debug.cli.base_ui.BaseUI.register_command_handler(self,prefix,handler,help_info,prefix_aliases=None)
tensorflow.debug.cli.base_ui.BaseUI.register_tab_comp_context(self,*args,**kwargs)
tensorflow.debug.cli.base_ui.BaseUI.run_ui(self,init_command=None,title=None,title_color=None,enable_mouse_on_start=True)
tensorflow.debug.cli.base_ui.BaseUI.set_help_intro(self,help_intro)
tensorflow.python.debug.cli.base_ui.BaseUI(self,on_ui_exit=None)
tensorflow.python.debug.cli.base_ui.BaseUI.__init__(self,on_ui_exit=None)
tensorflow.python.debug.cli.base_ui.BaseUI._analyze_tab_complete_input(self,text)
tensorflow.python.debug.cli.base_ui.BaseUI._parse_command(self,command)
tensorflow.python.debug.cli.base_ui.BaseUI.register_command_handler(self,prefix,handler,help_info,prefix_aliases=None)
tensorflow.python.debug.cli.base_ui.BaseUI.register_tab_comp_context(self,*args,**kwargs)
tensorflow.python.debug.cli.base_ui.BaseUI.run_ui(self,init_command=None,title=None,title_color=None,enable_mouse_on_start=True)
tensorflow.python.debug.cli.base_ui.BaseUI.set_help_intro(self,help_intro)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/debug/cli/curses_widgets.py----------------------------------------
A:tensorflow.python.debug.cli.curses_widgets.output->RL('| ')
tensorflow.debug.cli.curses_widgets.CursesNavigationHistory(self,capacity)
tensorflow.debug.cli.curses_widgets.CursesNavigationHistory.add_item(self,command,screen_output,scroll_position)
tensorflow.debug.cli.curses_widgets.CursesNavigationHistory.can_go_back(self)
tensorflow.debug.cli.curses_widgets.CursesNavigationHistory.can_go_forward(self)
tensorflow.debug.cli.curses_widgets.CursesNavigationHistory.go_back(self)
tensorflow.debug.cli.curses_widgets.CursesNavigationHistory.go_forward(self)
tensorflow.debug.cli.curses_widgets.CursesNavigationHistory.pointer(self)
tensorflow.debug.cli.curses_widgets.CursesNavigationHistory.render(self,max_length,backward_command,forward_command,latest_command_attribute='black_on_white',old_command_attribute='magenta_on_white')
tensorflow.debug.cli.curses_widgets.CursesNavigationHistory.size(self)
tensorflow.debug.cli.curses_widgets.CursesNavigationHistory.update_scroll_position(self,new_scroll_position)
tensorflow.debug.cli.curses_widgets.NavigationHistoryItem(self,command,screen_output,scroll_position)
tensorflow.python.debug.cli.curses_widgets.CursesNavigationHistory(self,capacity)
tensorflow.python.debug.cli.curses_widgets.CursesNavigationHistory.__init__(self,capacity)
tensorflow.python.debug.cli.curses_widgets.CursesNavigationHistory.add_item(self,command,screen_output,scroll_position)
tensorflow.python.debug.cli.curses_widgets.CursesNavigationHistory.can_go_back(self)
tensorflow.python.debug.cli.curses_widgets.CursesNavigationHistory.can_go_forward(self)
tensorflow.python.debug.cli.curses_widgets.CursesNavigationHistory.go_back(self)
tensorflow.python.debug.cli.curses_widgets.CursesNavigationHistory.go_forward(self)
tensorflow.python.debug.cli.curses_widgets.CursesNavigationHistory.pointer(self)
tensorflow.python.debug.cli.curses_widgets.CursesNavigationHistory.render(self,max_length,backward_command,forward_command,latest_command_attribute='black_on_white',old_command_attribute='magenta_on_white')
tensorflow.python.debug.cli.curses_widgets.CursesNavigationHistory.size(self)
tensorflow.python.debug.cli.curses_widgets.CursesNavigationHistory.update_scroll_position(self,new_scroll_position)
tensorflow.python.debug.cli.curses_widgets.NavigationHistoryItem(self,command,screen_output,scroll_position)
tensorflow.python.debug.cli.curses_widgets.NavigationHistoryItem.__init__(self,command,screen_output,scroll_position)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/client/device_lib.py----------------------------------------
A:tensorflow.python.client.device_lib.m->tensorflow.core.framework.device_attributes_pb2.DeviceAttributes()
tensorflow.client.device_lib.list_local_devices()
tensorflow.python.client.device_lib.list_local_devices()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/client/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/client/client_lib.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/client/session.py----------------------------------------
A:tensorflow.python.client.session.(fetches, contraction_fn)->fetch_fn(fetch)
A:tensorflow.python.client.session.j->len(seen_fetches)
A:tensorflow.python.client.session.self._fetch_type->type(fetches)
A:tensorflow.python.client.session.(self._unique_fetches, self._value_indices)->_uniquify_fetches(self._mappers)
A:tensorflow.python.client.session.self._keys->fetches.keys()
A:tensorflow.python.client.session.results->self._do_run(handle, final_targets, final_fetches, feed_dict_string, options, run_metadata)
A:tensorflow.python.client.session.results[k]->BaseSession._NODEDEF_NAME_RE.search(message).build_results([values[j] for j in vi])
A:tensorflow.python.client.session.self._fetch_mapper->_FetchMapper.for_fetch(fetches)
A:tensorflow.python.client.session.fetch_name->tensorflow.python.util.compat.as_bytes(fetch.name)
A:tensorflow.python.client.session.value->self._feeds.get(self._fetches[i])
A:tensorflow.python.client.session.dtype->self._fetch_handles.get(self._fetches[i])
A:tensorflow.python.client.session.self._graph->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.client.session.self._extend_lock->threading.Lock()
A:tensorflow.python.client.session.self._target->tensorflow.python.util.compat.as_bytes(target)
A:tensorflow.python.client.session.self._delete_lock->threading.Lock()
A:tensorflow.python.client.session.opts->tensorflow.python.pywrap_tensorflow.TF_NewSessionOptions(target=self._target, config=config)
A:tensorflow.python.client.session.self._session->tensorflow.python.pywrap_tensorflow.TF_NewDeprecatedSession(opts, status)
A:tensorflow.python.client.session.status->tensorflow.python.pywrap_tensorflow.TF_NewStatus()
A:tensorflow.python.client.session.run_metadata_ptr->tensorflow.python.pywrap_tensorflow.TF_NewBuffer()
A:tensorflow.python.client.session.options_ptr->tensorflow.python.pywrap_tensorflow.TF_NewBufferFromString(compat.as_bytes(options.SerializeToString()))
A:tensorflow.python.client.session.result->self._run(None, fetches, feed_dict, options_ptr, run_metadata_ptr)
A:tensorflow.python.client.session.proto_data->tensorflow.python.pywrap_tensorflow.TF_GetBuffer(run_metadata_ptr)
A:tensorflow.python.client.session.is_list_feed->isinstance(feeds, (list, tuple))
A:tensorflow.python.client.session.subfeed_t->self.graph.as_graph_element(subfeed, allow_tensor=True, allow_operation=False)
A:tensorflow.python.client.session.fetch_handler->_FetchHandler(self._graph, fetches, feed_dict_string)
A:tensorflow.python.client.session.feed_dict->tensorflow.python.util.nest.flatten_dict_items(feed_dict)
A:tensorflow.python.client.session.is_tensor_handle_feed->isinstance(subfeed_val, session_ops.TensorHandle)
A:tensorflow.python.client.session.np_val->numpy.array(handle.handle, dtype=np.object)
A:tensorflow.python.client.session.subfeed_name->tensorflow.python.util.compat.as_bytes(subfeed_t.name)
A:tensorflow.python.client.session.movers->self._update_with_movers(feed_dict_string, feed_map)
A:tensorflow.python.client.session.final_fetches->_FetchHandler(self._graph, fetches, feed_dict_string).fetches()
A:tensorflow.python.client.session.final_targets->_FetchHandler(self._graph, fetches, feed_dict_string).targets()
A:tensorflow.python.client.session._NODEDEF_NAME_RE->re.compile('\\[\\[Node: ([^ ]*?) =')
A:tensorflow.python.client.session.message->tensorflow.python.util.compat.as_text(e.message)
A:tensorflow.python.client.session.m->BaseSession._NODEDEF_NAME_RE.search(message)
A:tensorflow.python.client.session.node_name->BaseSession._NODEDEF_NAME_RE.search(message).group(1)
A:tensorflow.python.client.session.op->self._graph.get_operation_by_name(node_name)
A:tensorflow.python.client.session.(graph_def, self._current_version)->self._graph._as_graph_def(from_version=self._current_version, add_shapes=self._add_shapes)
A:tensorflow.python.client.session.(holder, deleter)->tensorflow.python.ops.session_ops._get_handle_deleter(self.graph, tensor_handle)
A:tensorflow.python.client.session.mover->tensorflow.python.ops.session_ops._get_handle_mover(self.graph, *val)
A:tensorflow.python.client.session.handles->self.run(fetches, feed_dict=feeds)
A:tensorflow.python.client.session.self._default_graph_context_manager->self.graph.as_default()
A:tensorflow.python.client.session.self._default_session_context_manager->self.as_default()
A:tensorflow.python.client.session.target->tensorflow.python.util.compat.as_bytes(target)
A:tensorflow.python.client.session.gpu_options->tensorflow.core.protobuf.config_pb2.GPUOptions(allow_growth=True)
A:tensorflow.python.client.session.config->tensorflow.core.protobuf.config_pb2.ConfigProto(gpu_options=gpu_options)
A:tensorflow.python.client.session.self._default_session->self.as_default()
A:tensorflow.python.client.session.self._default_graph->graph.as_default()
tensorflow.client.session.BaseSession(self,target='',graph=None,config=None)
tensorflow.client.session.BaseSession.__del__(self)
tensorflow.client.session.BaseSession._do_call(self,fn,*args)
tensorflow.client.session.BaseSession._do_run(self,handle,target_list,fetch_list,feed_dict,options,run_metadata)
tensorflow.client.session.BaseSession._extend_graph(self)
tensorflow.client.session.BaseSession._register_dead_handle(self,handle)
tensorflow.client.session.BaseSession._run(self,handle,fetches,feed_dict,options,run_metadata)
tensorflow.client.session.BaseSession._update_with_movers(self,feed_dict,feed_map)
tensorflow.client.session.BaseSession.as_default(self)
tensorflow.client.session.BaseSession.close(self)
tensorflow.client.session.BaseSession.graph(self)
tensorflow.client.session.BaseSession.graph_def(self)
tensorflow.client.session.BaseSession.partial_run(self,handle,fetches,feed_dict=None)
tensorflow.client.session.BaseSession.partial_run_setup(self,fetches,feeds=None)
tensorflow.client.session.BaseSession.run(self,fetches,feed_dict=None,options=None,run_metadata=None)
tensorflow.client.session.BaseSession.sess_str(self)
tensorflow.client.session.InteractiveSession(self,target='',graph=None,config=None)
tensorflow.client.session.InteractiveSession.close(self)
tensorflow.client.session.Session(self,target='',graph=None,config=None)
tensorflow.client.session.Session.__enter__(self)
tensorflow.client.session.Session.__exit__(self,exec_type,exec_value,exec_tb)
tensorflow.client.session.Session.reset(target,containers=None,config=None)
tensorflow.client.session.SessionInterface(object)
tensorflow.client.session.SessionInterface.graph(self)
tensorflow.client.session.SessionInterface.partial_run(self,handle,fetches,feed_dict=None)
tensorflow.client.session.SessionInterface.partial_run_setup(self,fetches,feeds=None)
tensorflow.client.session.SessionInterface.run(self,fetches,feed_dict=None,options=None,run_metadata=None)
tensorflow.client.session.SessionInterface.sess_str(self)
tensorflow.client.session._DictFetchMapper(self,fetches)
tensorflow.client.session._DictFetchMapper.build_results(self,values)
tensorflow.client.session._DictFetchMapper.unique_fetches(self)
tensorflow.client.session._ElementFetchMapper(self,fetches,contraction_fn)
tensorflow.client.session._ElementFetchMapper.build_results(self,values)
tensorflow.client.session._ElementFetchMapper.unique_fetches(self)
tensorflow.client.session._FetchHandler(self,graph,fetches,feeds)
tensorflow.client.session._FetchHandler._assert_fetchable(self,graph,op)
tensorflow.client.session._FetchHandler.build_results(self,session,tensor_values)
tensorflow.client.session._FetchHandler.fetches(self)
tensorflow.client.session._FetchHandler.targets(self)
tensorflow.client.session._FetchMapper(object)
tensorflow.client.session._FetchMapper.build_results(self,values)
tensorflow.client.session._FetchMapper.for_fetch(fetch)
tensorflow.client.session._FetchMapper.unique_fetches(self)
tensorflow.client.session._ListFetchMapper(self,fetches)
tensorflow.client.session._ListFetchMapper.build_results(self,values)
tensorflow.client.session._ListFetchMapper.unique_fetches(self)
tensorflow.client.session._get_feeds_for_indexed_slices(feed,feed_val)
tensorflow.client.session._get_indexed_slices_value_from_fetches(fetched_vals)
tensorflow.client.session._uniquify_fetches(fetch_mappers)
tensorflow.client.session.register_session_run_conversion_functions(tensor_type,fetch_function,feed_function=None,feed_function_for_partial_run=None)
tensorflow.python.client.session.BaseSession(self,target='',graph=None,config=None)
tensorflow.python.client.session.BaseSession.__del__(self)
tensorflow.python.client.session.BaseSession.__init__(self,target='',graph=None,config=None)
tensorflow.python.client.session.BaseSession._do_call(self,fn,*args)
tensorflow.python.client.session.BaseSession._do_run(self,handle,target_list,fetch_list,feed_dict,options,run_metadata)
tensorflow.python.client.session.BaseSession._extend_graph(self)
tensorflow.python.client.session.BaseSession._register_dead_handle(self,handle)
tensorflow.python.client.session.BaseSession._run(self,handle,fetches,feed_dict,options,run_metadata)
tensorflow.python.client.session.BaseSession._update_with_movers(self,feed_dict,feed_map)
tensorflow.python.client.session.BaseSession.as_default(self)
tensorflow.python.client.session.BaseSession.close(self)
tensorflow.python.client.session.BaseSession.graph(self)
tensorflow.python.client.session.BaseSession.graph_def(self)
tensorflow.python.client.session.BaseSession.partial_run(self,handle,fetches,feed_dict=None)
tensorflow.python.client.session.BaseSession.partial_run_setup(self,fetches,feeds=None)
tensorflow.python.client.session.BaseSession.run(self,fetches,feed_dict=None,options=None,run_metadata=None)
tensorflow.python.client.session.BaseSession.sess_str(self)
tensorflow.python.client.session.InteractiveSession(self,target='',graph=None,config=None)
tensorflow.python.client.session.InteractiveSession.__init__(self,target='',graph=None,config=None)
tensorflow.python.client.session.InteractiveSession.close(self)
tensorflow.python.client.session.Session(self,target='',graph=None,config=None)
tensorflow.python.client.session.Session.__enter__(self)
tensorflow.python.client.session.Session.__exit__(self,exec_type,exec_value,exec_tb)
tensorflow.python.client.session.Session.__init__(self,target='',graph=None,config=None)
tensorflow.python.client.session.Session.reset(target,containers=None,config=None)
tensorflow.python.client.session.SessionInterface(object)
tensorflow.python.client.session.SessionInterface.graph(self)
tensorflow.python.client.session.SessionInterface.partial_run(self,handle,fetches,feed_dict=None)
tensorflow.python.client.session.SessionInterface.partial_run_setup(self,fetches,feeds=None)
tensorflow.python.client.session.SessionInterface.run(self,fetches,feed_dict=None,options=None,run_metadata=None)
tensorflow.python.client.session.SessionInterface.sess_str(self)
tensorflow.python.client.session._DictFetchMapper(self,fetches)
tensorflow.python.client.session._DictFetchMapper.__init__(self,fetches)
tensorflow.python.client.session._DictFetchMapper.build_results(self,values)
tensorflow.python.client.session._DictFetchMapper.unique_fetches(self)
tensorflow.python.client.session._ElementFetchMapper(self,fetches,contraction_fn)
tensorflow.python.client.session._ElementFetchMapper.__init__(self,fetches,contraction_fn)
tensorflow.python.client.session._ElementFetchMapper.build_results(self,values)
tensorflow.python.client.session._ElementFetchMapper.unique_fetches(self)
tensorflow.python.client.session._FetchHandler(self,graph,fetches,feeds)
tensorflow.python.client.session._FetchHandler.__init__(self,graph,fetches,feeds)
tensorflow.python.client.session._FetchHandler._assert_fetchable(self,graph,op)
tensorflow.python.client.session._FetchHandler.build_results(self,session,tensor_values)
tensorflow.python.client.session._FetchHandler.fetches(self)
tensorflow.python.client.session._FetchHandler.targets(self)
tensorflow.python.client.session._FetchMapper(object)
tensorflow.python.client.session._FetchMapper.build_results(self,values)
tensorflow.python.client.session._FetchMapper.for_fetch(fetch)
tensorflow.python.client.session._FetchMapper.unique_fetches(self)
tensorflow.python.client.session._ListFetchMapper(self,fetches)
tensorflow.python.client.session._ListFetchMapper.__init__(self,fetches)
tensorflow.python.client.session._ListFetchMapper.build_results(self,values)
tensorflow.python.client.session._ListFetchMapper.unique_fetches(self)
tensorflow.python.client.session._get_feeds_for_indexed_slices(feed,feed_val)
tensorflow.python.client.session._get_indexed_slices_value_from_fetches(fetched_vals)
tensorflow.python.client.session._uniquify_fetches(fetch_mappers)
tensorflow.python.client.session.register_session_run_conversion_functions(tensor_type,fetch_function,feed_function=None,feed_function_for_partial_run=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/client/timeline.py----------------------------------------
A:tensorflow.python.client.timeline.event->self._create_event('C', category, name, pid, 0, timestamp)
A:tensorflow.python.client.timeline.event['args']->counters.copy()
A:tensorflow.python.client.timeline.self._chrome_trace->_ChromeTraceFormatter()
A:tensorflow.python.client.timeline.match->re.match('(.*) = (.*)\\((.*)\\)', label)
A:tensorflow.python.client.timeline.(nn, op, inputs)->re.match('(.*) = (.*)\\((.*)\\)', label).groups()
A:tensorflow.python.client.timeline.inputs->inputs.split(', ').split(', ')
A:tensorflow.python.client.timeline.l->len(lanes)
A:tensorflow.python.client.timeline.(_, op, inputs)->self._parse_op_label(nodestats.timeline_label)
A:tensorflow.python.client.timeline.desc->str(value.tensor_description).replace('"', '')
A:tensorflow.python.client.timeline.object_id->len(self._tensors)
A:tensorflow.python.client.timeline.tensor->self._produce_tensor(output_name, start_time, tensors_pid, allocator_name, num_bytes)
A:tensorflow.python.client.timeline.self._allocators_pid->self._alloc_pid()
A:tensorflow.python.client.timeline.device_pid->self._alloc_pid()
A:tensorflow.python.client.timeline.tensors_pid->self._alloc_pid()
A:tensorflow.python.client.timeline.is_gputrace->self._is_gputrace_device(device_name)
A:tensorflow.python.client.timeline.(_, _, inputs)->self._parse_op_label(node_stats.timeline_label)
A:tensorflow.python.client.timeline.index->input_name.rfind('/_')
A:tensorflow.python.client.timeline.flow_id->self._alloc_flow_id()
A:tensorflow.python.client.timeline.alloc_tensor_set->set()
A:tensorflow.python.client.timeline.alloc_maxes[allocator]->AllocationMaximum(timestamp=time, num_bytes=total_bytes, tensors=copy.deepcopy(alloc_tensor_set))
A:tensorflow.python.client.timeline.step_stats_analysis->self.analyze_step_stats(show_dataflow=show_dataflow, show_memory=show_memory)
tensorflow.client.timeline.AllocationMaximum(collections.namedtuple('AllocationMaximum',('timestamp','num_bytes','tensors')))
tensorflow.client.timeline.StepStatsAnalysis(collections.namedtuple('StepStatsAnalysis',('chrome_trace','allocator_maximums')))
tensorflow.client.timeline.Timeline(self,step_stats,graph=None)
tensorflow.client.timeline.Timeline._alloc_flow_id(self)
tensorflow.client.timeline.Timeline._alloc_pid(self)
tensorflow.client.timeline.Timeline._allocate_pids(self)
tensorflow.client.timeline.Timeline._analyze_tensors(self,show_memory)
tensorflow.client.timeline.Timeline._assign_lanes(self)
tensorflow.client.timeline.Timeline._emit_op(self,nodestats,pid,is_gputrace)
tensorflow.client.timeline.Timeline._emit_tensor_snapshot(self,tensor,timestamp,pid,tid,value)
tensorflow.client.timeline.Timeline._is_gputrace_device(self,device_name)
tensorflow.client.timeline.Timeline._parse_op_label(self,label)
tensorflow.client.timeline.Timeline._produce_tensor(self,name,timestamp,tensors_pid,allocator,num_bytes)
tensorflow.client.timeline.Timeline._show_compute(self,show_dataflow)
tensorflow.client.timeline.Timeline._show_memory_counters(self)
tensorflow.client.timeline.Timeline.analyze_step_stats(self,show_dataflow=True,show_memory=True)
tensorflow.client.timeline.Timeline.generate_chrome_trace_format(self,show_dataflow=True,show_memory=False)
tensorflow.client.timeline._ChromeTraceFormatter(self,show_memory=False)
tensorflow.client.timeline._ChromeTraceFormatter._create_event(self,ph,category,name,pid,tid,timestamp)
tensorflow.client.timeline._ChromeTraceFormatter.emit_counter(self,category,name,pid,timestamp,counter,value)
tensorflow.client.timeline._ChromeTraceFormatter.emit_counters(self,category,name,pid,timestamp,counters)
tensorflow.client.timeline._ChromeTraceFormatter.emit_flow_end(self,name,timestamp,pid,tid,flow_id)
tensorflow.client.timeline._ChromeTraceFormatter.emit_flow_start(self,name,timestamp,pid,tid,flow_id)
tensorflow.client.timeline._ChromeTraceFormatter.emit_obj_create(self,category,name,timestamp,pid,tid,object_id)
tensorflow.client.timeline._ChromeTraceFormatter.emit_obj_delete(self,category,name,timestamp,pid,tid,object_id)
tensorflow.client.timeline._ChromeTraceFormatter.emit_obj_snapshot(self,category,name,timestamp,pid,tid,object_id,snapshot)
tensorflow.client.timeline._ChromeTraceFormatter.emit_pid(self,name,pid)
tensorflow.client.timeline._ChromeTraceFormatter.emit_region(self,timestamp,duration,pid,tid,category,name,args)
tensorflow.client.timeline._ChromeTraceFormatter.emit_tid(self,name,pid,tid)
tensorflow.client.timeline._ChromeTraceFormatter.format_to_string(self,pretty=False)
tensorflow.client.timeline._TensorTracker(self,name,object_id,timestamp,pid,allocator,num_bytes)
tensorflow.client.timeline._TensorTracker.add_ref(self,timestamp)
tensorflow.client.timeline._TensorTracker.add_unref(self,timestamp)
tensorflow.client.timeline._TensorTracker.allocator(self)
tensorflow.client.timeline._TensorTracker.create_time(self)
tensorflow.client.timeline._TensorTracker.last_unref(self)
tensorflow.client.timeline._TensorTracker.name(self)
tensorflow.client.timeline._TensorTracker.num_bytes(self)
tensorflow.client.timeline._TensorTracker.object_id(self)
tensorflow.client.timeline._TensorTracker.pid(self)
tensorflow.python.client.timeline.AllocationMaximum(collections.namedtuple('AllocationMaximum',('timestamp','num_bytes','tensors')))
tensorflow.python.client.timeline.StepStatsAnalysis(collections.namedtuple('StepStatsAnalysis',('chrome_trace','allocator_maximums')))
tensorflow.python.client.timeline.Timeline(self,step_stats,graph=None)
tensorflow.python.client.timeline.Timeline.__init__(self,step_stats,graph=None)
tensorflow.python.client.timeline.Timeline._alloc_flow_id(self)
tensorflow.python.client.timeline.Timeline._alloc_pid(self)
tensorflow.python.client.timeline.Timeline._allocate_pids(self)
tensorflow.python.client.timeline.Timeline._analyze_tensors(self,show_memory)
tensorflow.python.client.timeline.Timeline._assign_lanes(self)
tensorflow.python.client.timeline.Timeline._emit_op(self,nodestats,pid,is_gputrace)
tensorflow.python.client.timeline.Timeline._emit_tensor_snapshot(self,tensor,timestamp,pid,tid,value)
tensorflow.python.client.timeline.Timeline._is_gputrace_device(self,device_name)
tensorflow.python.client.timeline.Timeline._parse_op_label(self,label)
tensorflow.python.client.timeline.Timeline._produce_tensor(self,name,timestamp,tensors_pid,allocator,num_bytes)
tensorflow.python.client.timeline.Timeline._show_compute(self,show_dataflow)
tensorflow.python.client.timeline.Timeline._show_memory_counters(self)
tensorflow.python.client.timeline.Timeline.analyze_step_stats(self,show_dataflow=True,show_memory=True)
tensorflow.python.client.timeline.Timeline.generate_chrome_trace_format(self,show_dataflow=True,show_memory=False)
tensorflow.python.client.timeline._ChromeTraceFormatter(self,show_memory=False)
tensorflow.python.client.timeline._ChromeTraceFormatter.__init__(self,show_memory=False)
tensorflow.python.client.timeline._ChromeTraceFormatter._create_event(self,ph,category,name,pid,tid,timestamp)
tensorflow.python.client.timeline._ChromeTraceFormatter.emit_counter(self,category,name,pid,timestamp,counter,value)
tensorflow.python.client.timeline._ChromeTraceFormatter.emit_counters(self,category,name,pid,timestamp,counters)
tensorflow.python.client.timeline._ChromeTraceFormatter.emit_flow_end(self,name,timestamp,pid,tid,flow_id)
tensorflow.python.client.timeline._ChromeTraceFormatter.emit_flow_start(self,name,timestamp,pid,tid,flow_id)
tensorflow.python.client.timeline._ChromeTraceFormatter.emit_obj_create(self,category,name,timestamp,pid,tid,object_id)
tensorflow.python.client.timeline._ChromeTraceFormatter.emit_obj_delete(self,category,name,timestamp,pid,tid,object_id)
tensorflow.python.client.timeline._ChromeTraceFormatter.emit_obj_snapshot(self,category,name,timestamp,pid,tid,object_id,snapshot)
tensorflow.python.client.timeline._ChromeTraceFormatter.emit_pid(self,name,pid)
tensorflow.python.client.timeline._ChromeTraceFormatter.emit_region(self,timestamp,duration,pid,tid,category,name,args)
tensorflow.python.client.timeline._ChromeTraceFormatter.emit_tid(self,name,pid,tid)
tensorflow.python.client.timeline._ChromeTraceFormatter.format_to_string(self,pretty=False)
tensorflow.python.client.timeline._TensorTracker(self,name,object_id,timestamp,pid,allocator,num_bytes)
tensorflow.python.client.timeline._TensorTracker.__init__(self,name,object_id,timestamp,pid,allocator,num_bytes)
tensorflow.python.client.timeline._TensorTracker.add_ref(self,timestamp)
tensorflow.python.client.timeline._TensorTracker.add_unref(self,timestamp)
tensorflow.python.client.timeline._TensorTracker.allocator(self)
tensorflow.python.client.timeline._TensorTracker.create_time(self)
tensorflow.python.client.timeline._TensorTracker.last_unref(self)
tensorflow.python.client.timeline._TensorTracker.name(self)
tensorflow.python.client.timeline._TensorTracker.num_bytes(self)
tensorflow.python.client.timeline._TensorTracker.object_id(self)
tensorflow.python.client.timeline._TensorTracker.pid(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/lib/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/lib/io/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/lib/io/file_io.py----------------------------------------
A:tensorflow.python.lib.io.file_io.mode->mode.replace('b', '').replace('b', '')
A:tensorflow.python.lib.io.file_io.self._read_buf->tensorflow.python.pywrap_tensorflow.CreateBufferedInputStream(compat.as_bytes(self.__name), 1024 * 512, status)
A:tensorflow.python.lib.io.file_io.self._writable_file->tensorflow.python.pywrap_tensorflow.CreateWritableFile(compat.as_bytes(self.__name), compat.as_bytes(self.__mode), status)
A:tensorflow.python.lib.io.file_io.ret_status->self._writable_file.Close()
A:tensorflow.python.lib.io.file_io.s->self.readline()
A:tensorflow.python.lib.io.file_io.retval->self.readline()
A:tensorflow.python.lib.io.file_io.f->FileIO(filename, mode='r')
A:tensorflow.python.lib.io.file_io.status->tensorflow.python.pywrap_tensorflow.TF_NewStatus()
A:tensorflow.python.lib.io.file_io.top->tensorflow.python.util.compat.as_str_any(top)
A:tensorflow.python.lib.io.file_io.listing->list_directory(top)
A:tensorflow.python.lib.io.file_io.full_path->os.path.join(top, item)
A:tensorflow.python.lib.io.file_io.file_statistics->tensorflow.python.pywrap_tensorflow.FileStatistics()
tensorflow.lib.io.file_io.FileIO(self,name,mode)
tensorflow.lib.io.file_io.FileIO.__enter__(self)
tensorflow.lib.io.file_io.FileIO.__exit__(self,unused_type,unused_value,unused_traceback)
tensorflow.lib.io.file_io.FileIO.__iter__(self)
tensorflow.lib.io.file_io.FileIO.__next__(self)
tensorflow.lib.io.file_io.FileIO._prepare_value(self,val)
tensorflow.lib.io.file_io.FileIO._preread_check(self)
tensorflow.lib.io.file_io.FileIO._prewrite_check(self)
tensorflow.lib.io.file_io.FileIO.close(self)
tensorflow.lib.io.file_io.FileIO.flush(self)
tensorflow.lib.io.file_io.FileIO.mode(self)
tensorflow.lib.io.file_io.FileIO.name(self)
tensorflow.lib.io.file_io.FileIO.next(self)
tensorflow.lib.io.file_io.FileIO.read(self,n=-1)
tensorflow.lib.io.file_io.FileIO.readline(self)
tensorflow.lib.io.file_io.FileIO.readlines(self)
tensorflow.lib.io.file_io.FileIO.seek(self,position)
tensorflow.lib.io.file_io.FileIO.size(self)
tensorflow.lib.io.file_io.FileIO.tell(self)
tensorflow.lib.io.file_io.FileIO.write(self,file_content)
tensorflow.lib.io.file_io.atomic_write_string_to_file(filename,contents)
tensorflow.lib.io.file_io.copy(oldpath,newpath,overwrite=False)
tensorflow.lib.io.file_io.create_dir(dirname)
tensorflow.lib.io.file_io.delete_file(filename)
tensorflow.lib.io.file_io.delete_recursively(dirname)
tensorflow.lib.io.file_io.file_exists(filename)
tensorflow.lib.io.file_io.get_matching_files(filename)
tensorflow.lib.io.file_io.is_directory(dirname)
tensorflow.lib.io.file_io.list_directory(dirname)
tensorflow.lib.io.file_io.read_file_to_string(filename,binary_mode=False)
tensorflow.lib.io.file_io.recursive_create_dir(dirname)
tensorflow.lib.io.file_io.rename(oldname,newname,overwrite=False)
tensorflow.lib.io.file_io.stat(filename)
tensorflow.lib.io.file_io.walk(top,in_order=True)
tensorflow.lib.io.file_io.write_string_to_file(filename,file_content)
tensorflow.python.lib.io.file_io.FileIO(self,name,mode)
tensorflow.python.lib.io.file_io.FileIO.__enter__(self)
tensorflow.python.lib.io.file_io.FileIO.__exit__(self,unused_type,unused_value,unused_traceback)
tensorflow.python.lib.io.file_io.FileIO.__init__(self,name,mode)
tensorflow.python.lib.io.file_io.FileIO.__iter__(self)
tensorflow.python.lib.io.file_io.FileIO.__next__(self)
tensorflow.python.lib.io.file_io.FileIO._prepare_value(self,val)
tensorflow.python.lib.io.file_io.FileIO._preread_check(self)
tensorflow.python.lib.io.file_io.FileIO._prewrite_check(self)
tensorflow.python.lib.io.file_io.FileIO.close(self)
tensorflow.python.lib.io.file_io.FileIO.flush(self)
tensorflow.python.lib.io.file_io.FileIO.mode(self)
tensorflow.python.lib.io.file_io.FileIO.name(self)
tensorflow.python.lib.io.file_io.FileIO.next(self)
tensorflow.python.lib.io.file_io.FileIO.read(self,n=-1)
tensorflow.python.lib.io.file_io.FileIO.readline(self)
tensorflow.python.lib.io.file_io.FileIO.readlines(self)
tensorflow.python.lib.io.file_io.FileIO.seek(self,position)
tensorflow.python.lib.io.file_io.FileIO.size(self)
tensorflow.python.lib.io.file_io.FileIO.tell(self)
tensorflow.python.lib.io.file_io.FileIO.write(self,file_content)
tensorflow.python.lib.io.file_io.atomic_write_string_to_file(filename,contents)
tensorflow.python.lib.io.file_io.copy(oldpath,newpath,overwrite=False)
tensorflow.python.lib.io.file_io.create_dir(dirname)
tensorflow.python.lib.io.file_io.delete_file(filename)
tensorflow.python.lib.io.file_io.delete_recursively(dirname)
tensorflow.python.lib.io.file_io.file_exists(filename)
tensorflow.python.lib.io.file_io.get_matching_files(filename)
tensorflow.python.lib.io.file_io.is_directory(dirname)
tensorflow.python.lib.io.file_io.list_directory(dirname)
tensorflow.python.lib.io.file_io.read_file_to_string(filename,binary_mode=False)
tensorflow.python.lib.io.file_io.recursive_create_dir(dirname)
tensorflow.python.lib.io.file_io.rename(oldname,newname,overwrite=False)
tensorflow.python.lib.io.file_io.stat(filename)
tensorflow.python.lib.io.file_io.walk(top,in_order=True)
tensorflow.python.lib.io.file_io.write_string_to_file(filename,file_content)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/lib/io/python_io.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/lib/io/tf_record.py----------------------------------------
A:tensorflow.python.lib.io.tf_record.compression_type->TFRecordOptions.get_compression_type_string(options)
A:tensorflow.python.lib.io.tf_record.reader->tensorflow.python.pywrap_tensorflow.PyRecordReader_New(compat.as_bytes(path), 0, compat.as_bytes(compression_type), status)
A:tensorflow.python.lib.io.tf_record.self._writer->tensorflow.python.pywrap_tensorflow.PyRecordWriter_New(compat.as_bytes(path), compat.as_bytes(compression_type), status)
tensorflow.lib.io.tf_record.TFRecordCompressionType(object)
tensorflow.lib.io.tf_record.TFRecordOptions(self,compression_type)
tensorflow.lib.io.tf_record.TFRecordOptions.get_compression_type_string(cls,options)
tensorflow.lib.io.tf_record.TFRecordWriter(self,path,options=None)
tensorflow.lib.io.tf_record.TFRecordWriter.__enter__(self)
tensorflow.lib.io.tf_record.TFRecordWriter.__exit__(self,unused_type,unused_value,unused_traceback)
tensorflow.lib.io.tf_record.TFRecordWriter.close(self)
tensorflow.lib.io.tf_record.TFRecordWriter.write(self,record)
tensorflow.lib.io.tf_record.tf_record_iterator(path,options=None)
tensorflow.python.lib.io.tf_record.TFRecordCompressionType(object)
tensorflow.python.lib.io.tf_record.TFRecordOptions(self,compression_type)
tensorflow.python.lib.io.tf_record.TFRecordOptions.__init__(self,compression_type)
tensorflow.python.lib.io.tf_record.TFRecordOptions.get_compression_type_string(cls,options)
tensorflow.python.lib.io.tf_record.TFRecordWriter(self,path,options=None)
tensorflow.python.lib.io.tf_record.TFRecordWriter.__enter__(self)
tensorflow.python.lib.io.tf_record.TFRecordWriter.__exit__(self,unused_type,unused_value,unused_traceback)
tensorflow.python.lib.io.tf_record.TFRecordWriter.__init__(self,path,options=None)
tensorflow.python.lib.io.tf_record.TFRecordWriter.close(self)
tensorflow.python.lib.io.tf_record.TFRecordWriter.write(self,record)
tensorflow.python.lib.io.tf_record.tf_record_iterator(path,options=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py----------------------------------------
A:tensorflow.python.estimator.estimator._VALID_MODEL_FN_ARGS->set(['features', 'labels', 'mode', 'params', 'config'])
A:tensorflow.python.estimator.estimator.self._model_dir->tempfile.mkdtemp()
A:tensorflow.python.estimator.estimator.self._config->tensorflow.python.estimator.run_config.RunConfig()
A:tensorflow.python.estimator.estimator.self._device_fn->_get_replica_device_setter(self._config)
A:tensorflow.python.estimator.estimator.start_step->_load_global_step_from_checkpoint_dir(self._model_dir)
A:tensorflow.python.estimator.estimator.hooks->list(hooks or [])
A:tensorflow.python.estimator.estimator.loss->self._train_model(input_fn=input_fn, hooks=hooks)
A:tensorflow.python.estimator.estimator.checkpoint_path->tensorflow.python.training.saver.latest_checkpoint(self._model_dir)
A:tensorflow.python.estimator.estimator.features->self._get_features_from_input_fn(input_fn)
A:tensorflow.python.estimator.estimator.estimator_spec->self._call_model_fn(features, labels, model_fn_lib.ModeKeys.EVAL)
A:tensorflow.python.estimator.estimator.predictions->self._extract_keys(estimator_spec.predictions, predict_keys)
A:tensorflow.python.estimator.estimator.preds_evaluated->mon_sess.run(predictions)
A:tensorflow.python.estimator.estimator.estimator_members->set([m for m in Estimator.__dict__.keys() if not m.startswith('__')])
A:tensorflow.python.estimator.estimator.subclass_members->set(self.__class__.__dict__.keys())
A:tensorflow.python.estimator.estimator.serving_input_receiver->serving_input_receiver_fn()
A:tensorflow.python.estimator.estimator.signature_def_map->build_all_signature_defs(serving_input_receiver.receiver_tensors, estimator_spec.export_outputs)
A:tensorflow.python.estimator.estimator.export_dir->get_timestamped_export_dir(export_dir_base)
A:tensorflow.python.estimator.estimator.builder->tensorflow.python.saved_model.builder.SavedModelBuilder(export_dir)
A:tensorflow.python.estimator.estimator.assets_extra_path->os.path.join(compat.as_bytes(export_dir), compat.as_bytes('assets.extra'))
A:tensorflow.python.estimator.estimator.dest_absolute->os.path.join(compat.as_bytes(assets_extra_path), compat.as_bytes(dest_relative))
A:tensorflow.python.estimator.estimator.dest_path->os.path.dirname(dest_absolute)
A:tensorflow.python.estimator.estimator.result->input_fn()
A:tensorflow.python.estimator.estimator.existing_keys->self._extract_keys(estimator_spec.predictions, predict_keys).keys()
A:tensorflow.python.estimator.estimator.model_fn_results->self._model_fn(features=features, labels=labels, **kwargs)
A:tensorflow.python.estimator.estimator.global_step_tensor->tensorflow.python.training.training.create_global_step(g)
A:tensorflow.python.estimator.estimator.(features, labels)->input_fn()
A:tensorflow.python.estimator.estimator.saver_hook_exists->any([isinstance(h, training.CheckpointSaverHook) for h in all_hooks + chief_hooks + estimator_spec.training_chief_hooks])
A:tensorflow.python.estimator.estimator.(_, loss)->mon_sess.run([estimator_spec.train_op, estimator_spec.loss])
A:tensorflow.python.estimator.estimator.latest_path->tensorflow.python.training.saver.latest_checkpoint(self._model_dir)
A:tensorflow.python.estimator.estimator.eval_dir->os.path.join(self._model_dir, 'eval' if not name else 'eval_' + name)
A:tensorflow.python.estimator.estimator.estimator_spec.eval_metric_ops[model_fn_lib.MetricKeys.LOSS]->tensorflow.python.ops.metrics.mean(estimator_spec.loss)
A:tensorflow.python.estimator.estimator.(update_op, eval_dict)->_extract_metric_update_ops(estimator_spec.eval_metric_ops)
A:tensorflow.python.estimator.estimator.eval_results->tensorflow.python.training.evaluation._evaluate_once(checkpoint_path=checkpoint_path, master=self._config.evaluation_master, scaffold=estimator_spec.scaffold, eval_ops=update_op, final_ops=eval_dict, hooks=hooks, config=config_pb2.ConfigProto(allow_soft_placement=True))
A:tensorflow.python.estimator.estimator.fn_spec->_get_arguments(model_fn)
A:tensorflow.python.estimator.estimator.non_valid_args->list(set(fn_spec.args) - _VALID_MODEL_FN_ARGS)
A:tensorflow.python.estimator.estimator.checkpoint_reader->tensorflow.python.training.training.NewCheckpointReader(training.latest_checkpoint(checkpoint_dir))
A:tensorflow.python.estimator.estimator.update_op->tensorflow.python.ops.control_flow_ops.group(*update_ops)
A:tensorflow.python.estimator.estimator.summary_writer->tensorflow.python.summary.writer.writer_cache.FileWriterCache.get(output_dir)
A:tensorflow.python.estimator.estimator.summary_proto->tensorflow.core.framework.summary_pb2.Summary()
A:tensorflow.python.estimator.estimator.value->tensorflow.core.framework.summary_pb2.Summary().value.add()
A:tensorflow.python.estimator.estimator.value.simple_value->float(dictionary[key])
tensorflow.estimator.estimator.Estimator(self,model_fn,model_dir=None,config=None,params=None)
tensorflow.estimator.estimator.Estimator._assert_members_are_not_overridden(self)
tensorflow.estimator.estimator.Estimator._call_model_fn(self,features,labels,mode)
tensorflow.estimator.estimator.Estimator._evaluate_model(self,input_fn,hooks=None,checkpoint_path=None,name='')
tensorflow.estimator.estimator.Estimator._extract_batch_length(self,preds_evaluated)
tensorflow.estimator.estimator.Estimator._extract_keys(self,predictions,predict_keys)
tensorflow.estimator.estimator.Estimator._get_features_from_input_fn(self,input_fn)
tensorflow.estimator.estimator.Estimator._train_model(self,input_fn,hooks)
tensorflow.estimator.estimator.Estimator._verify_default_metric_key(self,metric_key,eval_dict)
tensorflow.estimator.estimator.Estimator.config(self)
tensorflow.estimator.estimator.Estimator.evaluate(self,input_fn,steps=None,hooks=None,checkpoint_path=None,name=None)
tensorflow.estimator.estimator.Estimator.export_savedmodel(self,export_dir_base,serving_input_receiver_fn,assets_extra=None,as_text=False,checkpoint_path=None)
tensorflow.estimator.estimator.Estimator.model_dir(self)
tensorflow.estimator.estimator.Estimator.params(self)
tensorflow.estimator.estimator.Estimator.predict(self,input_fn,predict_keys=None,hooks=None)
tensorflow.estimator.estimator.Estimator.train(self,input_fn,hooks=None,steps=None,max_steps=None)
tensorflow.estimator.estimator._check_hooks_type(hooks)
tensorflow.estimator.estimator._dict_to_str(dictionary)
tensorflow.estimator.estimator._extract_metric_update_ops(eval_dict)
tensorflow.estimator.estimator._get_arguments(func)
tensorflow.estimator.estimator._get_replica_device_setter(config)
tensorflow.estimator.estimator._load_global_step_from_checkpoint_dir(checkpoint_dir)
tensorflow.estimator.estimator._verify_model_fn_args(model_fn,params)
tensorflow.estimator.estimator._write_dict_to_summary(output_dir,dictionary,current_global_step)
tensorflow.python.estimator.estimator.Estimator(self,model_fn,model_dir=None,config=None,params=None)
tensorflow.python.estimator.estimator.Estimator.__init__(self,model_fn,model_dir=None,config=None,params=None)
tensorflow.python.estimator.estimator.Estimator._assert_members_are_not_overridden(self)
tensorflow.python.estimator.estimator.Estimator._call_model_fn(self,features,labels,mode)
tensorflow.python.estimator.estimator.Estimator._evaluate_model(self,input_fn,hooks=None,checkpoint_path=None,name='')
tensorflow.python.estimator.estimator.Estimator._extract_batch_length(self,preds_evaluated)
tensorflow.python.estimator.estimator.Estimator._extract_keys(self,predictions,predict_keys)
tensorflow.python.estimator.estimator.Estimator._get_features_from_input_fn(self,input_fn)
tensorflow.python.estimator.estimator.Estimator._train_model(self,input_fn,hooks)
tensorflow.python.estimator.estimator.Estimator._verify_default_metric_key(self,metric_key,eval_dict)
tensorflow.python.estimator.estimator.Estimator.config(self)
tensorflow.python.estimator.estimator.Estimator.evaluate(self,input_fn,steps=None,hooks=None,checkpoint_path=None,name=None)
tensorflow.python.estimator.estimator.Estimator.export_savedmodel(self,export_dir_base,serving_input_receiver_fn,assets_extra=None,as_text=False,checkpoint_path=None)
tensorflow.python.estimator.estimator.Estimator.model_dir(self)
tensorflow.python.estimator.estimator.Estimator.params(self)
tensorflow.python.estimator.estimator.Estimator.predict(self,input_fn,predict_keys=None,hooks=None)
tensorflow.python.estimator.estimator.Estimator.train(self,input_fn,hooks=None,steps=None,max_steps=None)
tensorflow.python.estimator.estimator._check_hooks_type(hooks)
tensorflow.python.estimator.estimator._dict_to_str(dictionary)
tensorflow.python.estimator.estimator._extract_metric_update_ops(eval_dict)
tensorflow.python.estimator.estimator._get_arguments(func)
tensorflow.python.estimator.estimator._get_replica_device_setter(config)
tensorflow.python.estimator.estimator._load_global_step_from_checkpoint_dir(checkpoint_dir)
tensorflow.python.estimator.estimator._verify_model_fn_args(model_fn,params)
tensorflow.python.estimator.estimator._write_dict_to_summary(output_dir,dictionary,current_global_step)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/model_fn.py----------------------------------------
A:tensorflow.python.estimator.model_fn.loss->tensorflow.python.ops.array_ops.reshape(loss, [])
A:tensorflow.python.estimator.model_fn.loss_shape->tensorflow.python.ops.array_ops.reshape(loss, []).get_shape()
A:tensorflow.python.estimator.model_fn.predictions->_check_is_tensor(predictions, 'predictions')
A:tensorflow.python.estimator.model_fn.((key, value),)->export_outputs.items()
A:tensorflow.python.estimator.model_fn.default_graph->tensorflow.python.framework.ops.get_default_graph()
tensorflow.estimator.model_fn.EstimatorSpec(cls,mode,predictions=None,loss=None,train_op=None,eval_metric_ops=None,export_outputs=None,training_chief_hooks=None,training_hooks=None,scaffold=None)
tensorflow.estimator.model_fn.MetricKeys(object)
tensorflow.estimator.model_fn.ModeKeys(object)
tensorflow.estimator.model_fn._check_is_tensor(x,tensor_name)
tensorflow.estimator.model_fn._check_is_tensor_or_operation(x,name)
tensorflow.estimator.model_fn._eval_metric_ops_values(eval_metric_ops)
tensorflow.estimator.model_fn._prediction_values(predictions)
tensorflow.python.estimator.model_fn.EstimatorSpec(cls,mode,predictions=None,loss=None,train_op=None,eval_metric_ops=None,export_outputs=None,training_chief_hooks=None,training_hooks=None,scaffold=None)
tensorflow.python.estimator.model_fn.EstimatorSpec.__new__(cls,mode,predictions=None,loss=None,train_op=None,eval_metric_ops=None,export_outputs=None,training_chief_hooks=None,training_hooks=None,scaffold=None)
tensorflow.python.estimator.model_fn.MetricKeys(object)
tensorflow.python.estimator.model_fn.ModeKeys(object)
tensorflow.python.estimator.model_fn._check_is_tensor(x,tensor_name)
tensorflow.python.estimator.model_fn._check_is_tensor_or_operation(x,name)
tensorflow.python.estimator.model_fn._eval_metric_ops_values(eval_metric_ops)
tensorflow.python.estimator.model_fn._prediction_values(predictions)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/estimator_lib.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/checkpoint_utils.py----------------------------------------
A:tensorflow.python.estimator.checkpoint_utils.filename->_get_checkpoint_filename(filepattern)
A:tensorflow.python.estimator.checkpoint_utils.reader->_load_checkpoint(checkpoint_dir)
A:tensorflow.python.estimator.checkpoint_utils.variable_map->_load_checkpoint(checkpoint_dir).get_variable_to_shape_map()
A:tensorflow.python.estimator.checkpoint_utils.names->sorted(variable_map.keys())
tensorflow.estimator.checkpoint_utils._get_checkpoint_filename(filepattern)
tensorflow.estimator.checkpoint_utils._load_checkpoint(filepattern)
tensorflow.estimator.checkpoint_utils.list_variables(checkpoint_dir)
tensorflow.estimator.checkpoint_utils.load_variable(checkpoint_dir,name)
tensorflow.python.estimator.checkpoint_utils._get_checkpoint_filename(filepattern)
tensorflow.python.estimator.checkpoint_utils._load_checkpoint(filepattern)
tensorflow.python.estimator.checkpoint_utils.list_variables(checkpoint_dir)
tensorflow.python.estimator.checkpoint_utils.load_variable(checkpoint_dir,name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/run_config.py----------------------------------------
tensorflow.estimator.run_config.RunConfig(object)
tensorflow.estimator.run_config.RunConfig.cluster_spec(self)
tensorflow.estimator.run_config.RunConfig.evaluation_master(self)
tensorflow.estimator.run_config.RunConfig.is_chief(self)
tensorflow.estimator.run_config.RunConfig.keep_checkpoint_every_n_hours(self)
tensorflow.estimator.run_config.RunConfig.keep_checkpoint_max(self)
tensorflow.estimator.run_config.RunConfig.master(self)
tensorflow.estimator.run_config.RunConfig.num_ps_replicas(self)
tensorflow.estimator.run_config.RunConfig.num_worker_replicas(self)
tensorflow.estimator.run_config.RunConfig.save_checkpoints_secs(self)
tensorflow.estimator.run_config.RunConfig.save_checkpoints_steps(self)
tensorflow.estimator.run_config.RunConfig.save_summary_steps(self)
tensorflow.estimator.run_config.RunConfig.task_id(self)
tensorflow.estimator.run_config.RunConfig.task_type(self)
tensorflow.estimator.run_config.RunConfig.tf_random_seed(self)
tensorflow.estimator.run_config.TaskType(object)
tensorflow.python.estimator.run_config.RunConfig(object)
tensorflow.python.estimator.run_config.RunConfig.cluster_spec(self)
tensorflow.python.estimator.run_config.RunConfig.evaluation_master(self)
tensorflow.python.estimator.run_config.RunConfig.is_chief(self)
tensorflow.python.estimator.run_config.RunConfig.keep_checkpoint_every_n_hours(self)
tensorflow.python.estimator.run_config.RunConfig.keep_checkpoint_max(self)
tensorflow.python.estimator.run_config.RunConfig.master(self)
tensorflow.python.estimator.run_config.RunConfig.num_ps_replicas(self)
tensorflow.python.estimator.run_config.RunConfig.num_worker_replicas(self)
tensorflow.python.estimator.run_config.RunConfig.save_checkpoints_secs(self)
tensorflow.python.estimator.run_config.RunConfig.save_checkpoints_steps(self)
tensorflow.python.estimator.run_config.RunConfig.save_summary_steps(self)
tensorflow.python.estimator.run_config.RunConfig.task_id(self)
tensorflow.python.estimator.run_config.RunConfig.task_type(self)
tensorflow.python.estimator.run_config.RunConfig.tf_random_seed(self)
tensorflow.python.estimator.run_config.TaskType(object)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/export/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/export/export_output.py----------------------------------------
A:tensorflow.python.estimator.export.export_output.((_, examples),)->receiver_tensors.items()
tensorflow.estimator.export.export_output.ClassificationOutput(self,scores=None,classes=None)
tensorflow.estimator.export.export_output.ClassificationOutput.as_signature_def(self,receiver_tensors)
tensorflow.estimator.export.export_output.ClassificationOutput.classes(self)
tensorflow.estimator.export.export_output.ClassificationOutput.scores(self)
tensorflow.estimator.export.export_output.ExportOutput(object)
tensorflow.estimator.export.export_output.ExportOutput.as_signature_def(self,receiver_tensors)
tensorflow.estimator.export.export_output.PredictOutput(self,outputs)
tensorflow.estimator.export.export_output.PredictOutput.as_signature_def(self,receiver_tensors)
tensorflow.estimator.export.export_output.PredictOutput.outputs(self)
tensorflow.estimator.export.export_output.RegressionOutput(self,value)
tensorflow.estimator.export.export_output.RegressionOutput.as_signature_def(self,receiver_tensors)
tensorflow.estimator.export.export_output.RegressionOutput.value(self)
tensorflow.python.estimator.export.export_output.ClassificationOutput(self,scores=None,classes=None)
tensorflow.python.estimator.export.export_output.ClassificationOutput.__init__(self,scores=None,classes=None)
tensorflow.python.estimator.export.export_output.ClassificationOutput.as_signature_def(self,receiver_tensors)
tensorflow.python.estimator.export.export_output.ClassificationOutput.classes(self)
tensorflow.python.estimator.export.export_output.ClassificationOutput.scores(self)
tensorflow.python.estimator.export.export_output.ExportOutput(object)
tensorflow.python.estimator.export.export_output.ExportOutput.as_signature_def(self,receiver_tensors)
tensorflow.python.estimator.export.export_output.PredictOutput(self,outputs)
tensorflow.python.estimator.export.export_output.PredictOutput.__init__(self,outputs)
tensorflow.python.estimator.export.export_output.PredictOutput.as_signature_def(self,receiver_tensors)
tensorflow.python.estimator.export.export_output.PredictOutput.outputs(self)
tensorflow.python.estimator.export.export_output.RegressionOutput(self,value)
tensorflow.python.estimator.export.export_output.RegressionOutput.__init__(self,value)
tensorflow.python.estimator.export.export_output.RegressionOutput.as_signature_def(self,receiver_tensors)
tensorflow.python.estimator.export.export_output.RegressionOutput.value(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/export/export_lib.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/export/export.py----------------------------------------
A:tensorflow.python.estimator.export.export.serialized_tf_example->tensorflow.python.ops.array_ops.placeholder(dtype=dtypes.string, shape=[default_batch_size], name='input_example_tensor')
A:tensorflow.python.estimator.export.export.features->tensorflow.python.ops.parsing_ops.parse_example(serialized_tf_example, feature_spec)
A:tensorflow.python.estimator.export.export.shape_list->t.get_shape().as_list()
A:tensorflow.python.estimator.export.export.shape->tensorflow.python.framework.tensor_shape.TensorShape(shape_list)
A:tensorflow.python.estimator.export.export.receiver_tensors[name]->tensorflow.python.ops.array_ops.placeholder(dtype=t.dtype, shape=shape, name=placeholder_name)
A:tensorflow.python.estimator.export.export.export_timestamp->int(time.time())
A:tensorflow.python.estimator.export.export.export_dir->os.path.join(compat.as_bytes(export_dir_base), compat.as_bytes(str(export_timestamp)))
tensorflow.estimator.export.export.ServingInputReceiver(cls,features,receiver_tensors)
tensorflow.estimator.export.export.build_all_signature_defs(receiver_tensors,export_outputs)
tensorflow.estimator.export.export.build_parsing_serving_input_receiver_fn(feature_spec,default_batch_size=None)
tensorflow.estimator.export.export.build_raw_serving_input_receiver_fn(features,default_batch_size=None)
tensorflow.estimator.export.export.get_timestamped_export_dir(export_dir_base)
tensorflow.python.estimator.export.export.ServingInputReceiver(cls,features,receiver_tensors)
tensorflow.python.estimator.export.export.ServingInputReceiver.__new__(cls,features,receiver_tensors)
tensorflow.python.estimator.export.export.build_all_signature_defs(receiver_tensors,export_outputs)
tensorflow.python.estimator.export.export.build_parsing_serving_input_receiver_fn(feature_spec,default_batch_size=None)
tensorflow.python.estimator.export.export.build_raw_serving_input_receiver_fn(features,default_batch_size=None)
tensorflow.python.estimator.export.export.get_timestamped_export_dir(export_dir_base)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/inputs.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/numpy_io.py----------------------------------------
A:tensorflow.python.estimator.inputs.numpy_io.unique_target_key->_get_unique_target_key(x)
A:tensorflow.python.estimator.inputs.numpy_io.ordered_dict_x->collections.OrderedDict(sorted(x.items(), key=lambda t: t[0]))
A:tensorflow.python.estimator.inputs.numpy_io.queue->tensorflow.python.estimator.inputs.queues.feeding_functions._enqueue_data(ordered_dict_x, queue_capacity, shuffle=shuffle, num_threads=num_threads, enqueue_size=batch_size, num_epochs=num_epochs)
A:tensorflow.python.estimator.inputs.numpy_io.features->dict(zip(ordered_dict_x.keys(), features))
A:tensorflow.python.estimator.inputs.numpy_io.target->dict(zip(ordered_dict_x.keys(), features)).pop(unique_target_key)
tensorflow.estimator.inputs.numpy_io._get_unique_target_key(features)
tensorflow.estimator.inputs.numpy_io.numpy_input_fn(x,y=None,batch_size=128,num_epochs=1,shuffle=None,queue_capacity=1000,num_threads=1)
tensorflow.python.estimator.inputs.numpy_io._get_unique_target_key(features)
tensorflow.python.estimator.inputs.numpy_io.numpy_input_fn(x,y=None,batch_size=128,num_epochs=1,shuffle=None,queue_capacity=1000,num_threads=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/pandas_io.py----------------------------------------
A:tensorflow.python.estimator.inputs.pandas_io.x->x.copy().copy()
A:tensorflow.python.estimator.inputs.pandas_io.queue_capacity->len(x)
A:tensorflow.python.estimator.inputs.pandas_io.min_after_dequeue->max(queue_capacity / 4, 1)
A:tensorflow.python.estimator.inputs.pandas_io.queue->tensorflow.python.estimator.inputs.queues.feeding_functions._enqueue_data(x, queue_capacity, shuffle=shuffle, min_after_dequeue=min_after_dequeue, num_threads=num_threads, enqueue_size=batch_size, num_epochs=num_epochs)
A:tensorflow.python.estimator.inputs.pandas_io.features->dict(zip(list(x.columns), features))
A:tensorflow.python.estimator.inputs.pandas_io.target->dict(zip(list(x.columns), features)).pop(target_column)
tensorflow.estimator.inputs.pandas_io.pandas_input_fn(x,y=None,batch_size=128,num_epochs=1,shuffle=None,queue_capacity=1000,num_threads=1,target_column='target')
tensorflow.python.estimator.inputs.pandas_io.pandas_input_fn(x,y=None,batch_size=128,num_epochs=1,shuffle=None,queue_capacity=1000,num_threads=1,target_column='target')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/queues/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/queues/feeding_queue_runner.py----------------------------------------
A:tensorflow.python.estimator.inputs.queues.feeding_queue_runner.self._runs_per_session[sess]->len(self._enqueue_ops)
tensorflow.estimator.inputs.queues.feeding_queue_runner._FeedingQueueRunner(self,queue=None,enqueue_ops=None,close_op=None,cancel_op=None,feed_fns=None,queue_closed_exception_types=None)
tensorflow.estimator.inputs.queues.feeding_queue_runner._FeedingQueueRunner._init_from_proto(self,queue_runner_def)
tensorflow.estimator.inputs.queues.feeding_queue_runner._FeedingQueueRunner._run(self,sess,enqueue_op,feed_fn,coord=None)
tensorflow.estimator.inputs.queues.feeding_queue_runner._FeedingQueueRunner.create_threads(self,sess,coord=None,daemon=False,start=False)
tensorflow.estimator.inputs.queues.feeding_queue_runner._FeedingQueueRunner.to_proto(self)
tensorflow.python.estimator.inputs.queues.feeding_queue_runner._FeedingQueueRunner(self,queue=None,enqueue_ops=None,close_op=None,cancel_op=None,feed_fns=None,queue_closed_exception_types=None)
tensorflow.python.estimator.inputs.queues.feeding_queue_runner._FeedingQueueRunner.__init__(self,queue=None,enqueue_ops=None,close_op=None,cancel_op=None,feed_fns=None,queue_closed_exception_types=None)
tensorflow.python.estimator.inputs.queues.feeding_queue_runner._FeedingQueueRunner._init_from_proto(self,queue_runner_def)
tensorflow.python.estimator.inputs.queues.feeding_queue_runner._FeedingQueueRunner._run(self,sess,enqueue_op,feed_fn,coord=None)
tensorflow.python.estimator.inputs.queues.feeding_queue_runner._FeedingQueueRunner.create_threads(self,sess,coord=None,daemon=False,start=False)
tensorflow.python.estimator.inputs.queues.feeding_queue_runner._FeedingQueueRunner.to_proto(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/queues/feeding_functions.py----------------------------------------
A:tensorflow.python.estimator.inputs.queues.feeding_functions.self._max->len(dataframe)
A:tensorflow.python.estimator.inputs.queues.feeding_functions.(integer_indexes, self._epoch)->_get_integer_indices_for_next_batch(batch_indices_start=self._trav, batch_size=self._batch_size, epoch_end=self._epoch_end, array_length=self._max, current_epoch=self._epoch, total_epochs=self._num_epochs)
A:tensorflow.python.estimator.inputs.queues.feeding_functions.feed_dict->dict(zip(self._col_placeholders, cols))
A:tensorflow.python.estimator.inputs.queues.feeding_functions.min_after_dequeue->int(capacity / 4 if min_after_dequeue is None else min_after_dequeue)
A:tensorflow.python.estimator.inputs.queues.feeding_functions.queue->tensorflow.python.ops.data_flow_ops.FIFOQueue(capacity, dtypes=types, shapes=queue_shapes)
A:tensorflow.python.estimator.inputs.queues.feeding_functions.runner->tensorflow.python.estimator.inputs.queues.feeding_queue_runner._FeedingQueueRunner(queue=queue, enqueue_ops=enqueue_ops, feed_fns=feed_fns)
tensorflow.estimator.inputs.queues.feeding_functions._ArrayFeedFn(self,placeholders,array,batch_size,random_start=False,seed=None,num_epochs=None)
tensorflow.estimator.inputs.queues.feeding_functions._OrderedDictNumpyFeedFn(self,placeholders,ordered_dict_of_arrays,batch_size,random_start=False,seed=None,num_epochs=None)
tensorflow.estimator.inputs.queues.feeding_functions._PandasFeedFn(self,placeholders,dataframe,batch_size,random_start=False,seed=None,num_epochs=None)
tensorflow.estimator.inputs.queues.feeding_functions._enqueue_data(data,capacity,shuffle=False,min_after_dequeue=None,num_threads=1,seed=None,name='enqueue_input',enqueue_size=1,num_epochs=None)
tensorflow.estimator.inputs.queues.feeding_functions._get_integer_indices_for_next_batch(batch_indices_start,batch_size,epoch_end,array_length,current_epoch,total_epochs)
tensorflow.python.estimator.inputs.queues.feeding_functions._ArrayFeedFn(self,placeholders,array,batch_size,random_start=False,seed=None,num_epochs=None)
tensorflow.python.estimator.inputs.queues.feeding_functions._ArrayFeedFn.__init__(self,placeholders,array,batch_size,random_start=False,seed=None,num_epochs=None)
tensorflow.python.estimator.inputs.queues.feeding_functions._OrderedDictNumpyFeedFn(self,placeholders,ordered_dict_of_arrays,batch_size,random_start=False,seed=None,num_epochs=None)
tensorflow.python.estimator.inputs.queues.feeding_functions._OrderedDictNumpyFeedFn.__init__(self,placeholders,ordered_dict_of_arrays,batch_size,random_start=False,seed=None,num_epochs=None)
tensorflow.python.estimator.inputs.queues.feeding_functions._PandasFeedFn(self,placeholders,dataframe,batch_size,random_start=False,seed=None,num_epochs=None)
tensorflow.python.estimator.inputs.queues.feeding_functions._PandasFeedFn.__init__(self,placeholders,dataframe,batch_size,random_start=False,seed=None,num_epochs=None)
tensorflow.python.estimator.inputs.queues.feeding_functions._enqueue_data(data,capacity,shuffle=False,min_after_dequeue=None,num_threads=1,seed=None,name='enqueue_input',enqueue_size=1,num_epochs=None)
tensorflow.python.estimator.inputs.queues.feeding_functions._get_integer_indices_for_next_batch(batch_indices_start,batch_size,epoch_end,array_length,current_epoch,total_epochs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/tools/strip_unused.py----------------------------------------
A:tensorflow.python.tools.strip_unused.parser->argparse.ArgumentParser()
A:tensorflow.python.tools.strip_unused.(FLAGS, unparsed)->argparse.ArgumentParser().parse_known_args()
tensorflow.python.tools.strip_unused.main(unused_args)
tensorflow.tools.strip_unused.main(unused_args)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/tools/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/tools/print_selective_registration_header.py----------------------------------------
A:tensorflow.python.tools.print_selective_registration_header.graphs->FLAGS.graphs.split(',')
A:tensorflow.python.tools.print_selective_registration_header.parser->argparse.ArgumentParser()
A:tensorflow.python.tools.print_selective_registration_header.(FLAGS, unparsed)->argparse.ArgumentParser().parse_known_args()
tensorflow.python.tools.print_selective_registration_header.main(unused_argv)
tensorflow.tools.print_selective_registration_header.main(unused_argv)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/tools/inspect_checkpoint.py----------------------------------------
A:tensorflow.python.tools.inspect_checkpoint.reader->tensorflow.python.pywrap_tensorflow.NewCheckpointReader(file_name)
A:tensorflow.python.tools.inspect_checkpoint.var_to_shape_map->tensorflow.python.pywrap_tensorflow.NewCheckpointReader(file_name).get_variable_to_shape_map()
A:tensorflow.python.tools.inspect_checkpoint.proposed_file->'.'.join(file_name.split('.')[0:-1])
A:tensorflow.python.tools.inspect_checkpoint.k_v_str->kv_str.split('=', 1)
A:tensorflow.python.tools.inspect_checkpoint.printoptions->numpy.get_printoptions()
A:tensorflow.python.tools.inspect_checkpoint.v_type->type(printoptions[k])
A:tensorflow.python.tools.inspect_checkpoint.parser->argparse.ArgumentParser()
A:tensorflow.python.tools.inspect_checkpoint.(FLAGS, unparsed)->argparse.ArgumentParser().parse_known_args()
tensorflow.python.tools.inspect_checkpoint.main(unused_argv)
tensorflow.python.tools.inspect_checkpoint.parse_numpy_printoption(kv_str)
tensorflow.python.tools.inspect_checkpoint.print_tensors_in_checkpoint_file(file_name,tensor_name,all_tensors)
tensorflow.tools.inspect_checkpoint.main(unused_argv)
tensorflow.tools.inspect_checkpoint.parse_numpy_printoption(kv_str)
tensorflow.tools.inspect_checkpoint.print_tensors_in_checkpoint_file(file_name,tensor_name,all_tensors)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/tools/selective_registration_header_lib.py----------------------------------------
A:tensorflow.python.tools.selective_registration_header_lib.ops->set([op for (op, _) in ops_and_kernels])
A:tensorflow.python.tools.selective_registration_header_lib.file_data->tensorflow.python.platform.gfile.GFile(proto_file, 'rb').read()
A:tensorflow.python.tools.selective_registration_header_lib.graph_def->google.protobuf.text_format.Parse(file_data, graph_pb2.GraphDef())
A:tensorflow.python.tools.selective_registration_header_lib.kernel_class->tensorflow.python.pywrap_tensorflow.TryFindKernelClass(node_def.SerializeToString())
A:tensorflow.python.tools.selective_registration_header_lib.(op, kernel)->s.split(':')
A:tensorflow.python.tools.selective_registration_header_lib.ops_and_kernels->get_ops_and_kernels(proto_fileformat, graphs, default_ops)
tensorflow.python.tools.selective_registration_header_lib.get_header(graphs,proto_fileformat='rawproto',default_ops='NoOp:NoOp,_Recv:RecvOp,_Send:SendOp')
tensorflow.python.tools.selective_registration_header_lib.get_header_from_ops_and_kernels(ops_and_kernels,include_all_ops_and_kernels)
tensorflow.python.tools.selective_registration_header_lib.get_ops_and_kernels(proto_fileformat,proto_files,default_ops_str)
tensorflow.tools.selective_registration_header_lib.get_header(graphs,proto_fileformat='rawproto',default_ops='NoOp:NoOp,_Recv:RecvOp,_Send:SendOp')
tensorflow.tools.selective_registration_header_lib.get_header_from_ops_and_kernels(ops_and_kernels,include_all_ops_and_kernels)
tensorflow.tools.selective_registration_header_lib.get_ops_and_kernels(proto_fileformat,proto_files,default_ops_str)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/tools/strip_unused_lib.py----------------------------------------
A:tensorflow.python.tools.strip_unused_lib.inputs_replaced_graph_def->tensorflow.core.framework.graph_pb2.GraphDef()
A:tensorflow.python.tools.strip_unused_lib.placeholder_node->tensorflow.core.framework.node_def_pb2.NodeDef()
A:tensorflow.python.tools.strip_unused_lib.input_node_index->input_node_names.index(node.name)
A:tensorflow.python.tools.strip_unused_lib.output_graph_def->strip_unused(input_graph_def, input_node_names.split(','), output_node_names.split(','), placeholder_type_enum)
A:tensorflow.python.tools.strip_unused_lib.input_graph_def->tensorflow.core.framework.graph_pb2.GraphDef()
tensorflow.python.tools.strip_unused_lib.strip_unused(input_graph_def,input_node_names,output_node_names,placeholder_type_enum)
tensorflow.python.tools.strip_unused_lib.strip_unused_from_files(input_graph,input_binary,output_graph,output_binary,input_node_names,output_node_names,placeholder_type_enum)
tensorflow.tools.strip_unused_lib.strip_unused(input_graph_def,input_node_names,output_node_names,placeholder_type_enum)
tensorflow.tools.strip_unused_lib.strip_unused_from_files(input_graph,input_binary,output_graph,output_binary,input_node_names,output_node_names,placeholder_type_enum)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/tools/optimize_for_inference.py----------------------------------------
A:tensorflow.python.tools.optimize_for_inference.input_graph_def->tensorflow.core.framework.graph_pb2.GraphDef()
A:tensorflow.python.tools.optimize_for_inference.data->tensorflow.python.platform.gfile.FastGFile(FLAGS.output, 'w').read()
A:tensorflow.python.tools.optimize_for_inference.output_graph_def->tensorflow.python.tools.optimize_for_inference_lib.optimize_for_inference(input_graph_def, FLAGS.input_names.split(','), FLAGS.output_names.split(','), FLAGS.placeholder_type_enum)
A:tensorflow.python.tools.optimize_for_inference.f->tensorflow.python.platform.gfile.FastGFile(FLAGS.output, 'w')
A:tensorflow.python.tools.optimize_for_inference.parser->argparse.ArgumentParser()
A:tensorflow.python.tools.optimize_for_inference.(FLAGS, unparsed)->parse_args()
tensorflow.python.tools.optimize_for_inference.main(unused_args)
tensorflow.python.tools.optimize_for_inference.parse_args()
tensorflow.tools.optimize_for_inference.main(unused_args)
tensorflow.tools.optimize_for_inference.parse_args()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/tools/optimize_for_inference_lib.py----------------------------------------
A:tensorflow.python.tools.optimize_for_inference_lib.optimized_graph_def->fuse_resize_and_conv(optimized_graph_def, output_node_names)
A:tensorflow.python.tools.optimize_for_inference_lib.input_node_name->node_name_from_input(input_name)
A:tensorflow.python.tools.optimize_for_inference_lib.m->re.search('(.*):\\d+$', node_name)
A:tensorflow.python.tools.optimize_for_inference_lib.node_name->re.search('(.*):\\d+$', node_name).group(1)
A:tensorflow.python.tools.optimize_for_inference_lib.stripped_name->node_name_from_input(input_name)
A:tensorflow.python.tools.optimize_for_inference_lib.tensor_value->tensorflow.python.framework.tensor_util.MakeNdarray(input_tensor)
A:tensorflow.python.tools.optimize_for_inference_lib.conv_op->node_from_map(input_node_map, node.input[0])
A:tensorflow.python.tools.optimize_for_inference_lib.weights_op->node_from_map(input_node_map, conv_op.input[1])
A:tensorflow.python.tools.optimize_for_inference_lib.weights->values_from_const(weights_op)
A:tensorflow.python.tools.optimize_for_inference_lib.mean_op->node_from_map(input_node_map, node.input[1])
A:tensorflow.python.tools.optimize_for_inference_lib.mean_value->values_from_const(mean_op)
A:tensorflow.python.tools.optimize_for_inference_lib.var_op->node_from_map(input_node_map, node.input[2])
A:tensorflow.python.tools.optimize_for_inference_lib.var_value->values_from_const(var_op)
A:tensorflow.python.tools.optimize_for_inference_lib.beta_op->node_from_map(input_node_map, node.input[3])
A:tensorflow.python.tools.optimize_for_inference_lib.beta_value->values_from_const(beta_op)
A:tensorflow.python.tools.optimize_for_inference_lib.gamma_op->node_from_map(input_node_map, node.input[4])
A:tensorflow.python.tools.optimize_for_inference_lib.gamma_value->values_from_const(gamma_op)
A:tensorflow.python.tools.optimize_for_inference_lib.scaled_weights->numpy.copy(weights)
A:tensorflow.python.tools.optimize_for_inference_lib.it->numpy.nditer(scaled_weights, flags=['multi_index'], op_flags=['readwrite'])
A:tensorflow.python.tools.optimize_for_inference_lib.scaled_weights_op->tensorflow.core.framework.node_def_pb2.NodeDef()
A:tensorflow.python.tools.optimize_for_inference_lib.new_conv_op->tensorflow.core.framework.node_def_pb2.NodeDef()
A:tensorflow.python.tools.optimize_for_inference_lib.offset_op->tensorflow.core.framework.node_def_pb2.NodeDef()
A:tensorflow.python.tools.optimize_for_inference_lib.bias_add_op->tensorflow.core.framework.node_def_pb2.NodeDef()
A:tensorflow.python.tools.optimize_for_inference_lib.result_graph_def->tensorflow.core.framework.graph_pb2.GraphDef()
A:tensorflow.python.tools.optimize_for_inference_lib.new_node->tensorflow.core.framework.node_def_pb2.NodeDef()
A:tensorflow.python.tools.optimize_for_inference_lib.node_reference_count->collections.defaultdict(int)
A:tensorflow.python.tools.optimize_for_inference_lib.input_op->node_from_map(input_node_map, conv_op.input[0])
A:tensorflow.python.tools.optimize_for_inference_lib.resize_op->node_from_map(input_node_map, mirror_pad_op.input[0])
A:tensorflow.python.tools.optimize_for_inference_lib.fused_conv_op->tensorflow.core.framework.node_def_pb2.NodeDef()
A:tensorflow.python.tools.optimize_for_inference_lib.paddings_op->tensorflow.core.framework.node_def_pb2.NodeDef()
A:tensorflow.python.tools.optimize_for_inference_lib.mirror_paddings_mode->tensorflow.core.framework.attr_value_pb2.AttrValue(s=b'REFLECT')
tensorflow.python.tools.optimize_for_inference_lib.ensure_graph_is_valid(graph_def)
tensorflow.python.tools.optimize_for_inference_lib.fold_batch_norms(input_graph_def)
tensorflow.python.tools.optimize_for_inference_lib.fuse_resize_and_conv(input_graph_def,output_node_names)
tensorflow.python.tools.optimize_for_inference_lib.node_from_map(node_map,name)
tensorflow.python.tools.optimize_for_inference_lib.node_name_from_input(node_name)
tensorflow.python.tools.optimize_for_inference_lib.optimize_for_inference(input_graph_def,input_node_names,output_node_names,placeholder_type_enum)
tensorflow.python.tools.optimize_for_inference_lib.values_from_const(node_def)
tensorflow.tools.optimize_for_inference_lib.ensure_graph_is_valid(graph_def)
tensorflow.tools.optimize_for_inference_lib.fold_batch_norms(input_graph_def)
tensorflow.tools.optimize_for_inference_lib.fuse_resize_and_conv(input_graph_def,output_node_names)
tensorflow.tools.optimize_for_inference_lib.node_from_map(node_map,name)
tensorflow.tools.optimize_for_inference_lib.node_name_from_input(node_name)
tensorflow.tools.optimize_for_inference_lib.optimize_for_inference(input_graph_def,input_node_names,output_node_names,placeholder_type_enum)
tensorflow.tools.optimize_for_inference_lib.values_from_const(node_def)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/tools/freeze_graph.py----------------------------------------
A:tensorflow.python.tools.freeze_graph.input_graph_def->tensorflow.core.framework.graph_pb2.GraphDef()
A:tensorflow.python.tools.freeze_graph._->tensorflow.python.framework.importer.import_graph_def(input_graph_def, name='')
A:tensorflow.python.tools.freeze_graph.saver_def->tensorflow.core.protobuf.saver_pb2.SaverDef()
A:tensorflow.python.tools.freeze_graph.saver->tensorflow.python.training.saver.Saver(var_list=var_list)
A:tensorflow.python.tools.freeze_graph.reader->tensorflow.python.pywrap_tensorflow.NewCheckpointReader(input_checkpoint)
A:tensorflow.python.tools.freeze_graph.var_to_shape_map->tensorflow.python.pywrap_tensorflow.NewCheckpointReader(input_checkpoint).get_variable_to_shape_map()
A:tensorflow.python.tools.freeze_graph.tensor->sess.graph.get_tensor_by_name(key + ':0')
A:tensorflow.python.tools.freeze_graph.output_graph_def->tensorflow.python.framework.graph_util.convert_variables_to_constants(sess, input_graph_def, output_node_names.split(','), variable_names_blacklist=variable_names_blacklist)
A:tensorflow.python.tools.freeze_graph.parser->argparse.ArgumentParser()
A:tensorflow.python.tools.freeze_graph.(FLAGS, unparsed)->argparse.ArgumentParser().parse_known_args()
tensorflow.python.tools.freeze_graph.freeze_graph(input_graph,input_saver,input_binary,input_checkpoint,output_node_names,restore_op_name,filename_tensor_name,output_graph,clear_devices,initializer_nodes,variable_names_blacklist='')
tensorflow.python.tools.freeze_graph.main(unused_args)
tensorflow.tools.freeze_graph.freeze_graph(input_graph,input_saver,input_binary,input_checkpoint,output_node_names,restore_op_name,filename_tensor_name,output_graph,clear_devices,initializer_nodes,variable_names_blacklist='')
tensorflow.tools.freeze_graph.main(unused_args)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/summary/summary.py----------------------------------------
A:tensorflow.python.summary.summary._INVALID_TAG_CHARACTERS->re.compile('[^-/\\w\\.]')
A:tensorflow.python.summary.summary.new_name->new_name.lstrip('/').lstrip('/')
A:tensorflow.python.summary.summary.name->_clean_tag(name)
A:tensorflow.python.summary.summary.val->tensorflow.python.ops.gen_logging_ops._merge_summary(inputs=inputs, name=name)
A:tensorflow.python.summary.summary.sample_rate->tensorflow.python.framework.ops.convert_to_tensor(sample_rate, dtype=_dtypes.float32, name='sample_rate')
A:tensorflow.python.summary.summary.summary_ops->tensorflow.python.framework.ops.get_collection(key)
A:tensorflow.python.summary.summary.description_str->tensorflow.python.util.compat.as_str_any(node_def.attr['description'].s)
A:tensorflow.python.summary.summary.summary_description->SummaryDescription()
tensorflow.python.summary.summary._clean_tag(name)
tensorflow.python.summary.summary._collect(val,collections,default_collections)
tensorflow.python.summary.summary.audio(name,tensor,sample_rate,max_outputs=3,collections=None)
tensorflow.python.summary.summary.get_summary_description(node_def)
tensorflow.python.summary.summary.histogram(name,values,collections=None)
tensorflow.python.summary.summary.image(name,tensor,max_outputs=3,collections=None)
tensorflow.python.summary.summary.merge(inputs,collections=None,name=None)
tensorflow.python.summary.summary.merge_all(key=_ops.GraphKeys.SUMMARIES)
tensorflow.python.summary.summary.scalar(name,tensor,collections=None)
tensorflow.summary._clean_tag(name)
tensorflow.summary._collect(val,collections,default_collections)
tensorflow.summary.audio(name,tensor,sample_rate,max_outputs=3,collections=None)
tensorflow.summary.get_summary_description(node_def)
tensorflow.summary.histogram(name,values,collections=None)
tensorflow.summary.image(name,tensor,max_outputs=3,collections=None)
tensorflow.summary.merge(inputs,collections=None,name=None)
tensorflow.summary.merge_all(key=_ops.GraphKeys.SUMMARIES)
tensorflow.summary.scalar(name,tensor,collections=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/summary/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/summary/plugin_asset.py----------------------------------------
A:tensorflow.python.summary.plugin_asset.graph->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.summary.plugin_asset.container->tensorflow.python.framework.ops.get_default_graph().get_collection(name)
A:tensorflow.python.summary.plugin_asset.instance->plugin_asset_cls()
A:tensorflow.python.summary.plugin_asset.collection->tensorflow.python.framework.ops.get_default_graph().get_collection(_PLUGIN_ASSET_PREFIX + name)
tensorflow.python.summary.plugin_asset.PluginAsset(object)
tensorflow.python.summary.plugin_asset.PluginAsset.assets(self)
tensorflow.python.summary.plugin_asset.get_all_plugin_assets(graph=None)
tensorflow.python.summary.plugin_asset.get_plugin_asset(plugin_asset_cls,graph=None)
tensorflow.summary.plugin_asset.PluginAsset(object)
tensorflow.summary.plugin_asset.PluginAsset.assets(self)
tensorflow.summary.plugin_asset.get_all_plugin_assets(graph=None)
tensorflow.summary.plugin_asset.get_plugin_asset(plugin_asset_cls,graph=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/summary/summary_iterator.py----------------------------------------
A:tensorflow.python.summary.summary_iterator.self._event_queue->six.moves.queue.Queue(max_queue)
A:tensorflow.python.summary.summary_iterator.self._ev_writer->tensorflow.python.pywrap_tensorflow.EventsWriter(compat.as_bytes(os.path.join(self._logdir, 'events')))
A:tensorflow.python.summary.summary_iterator.self._worker->_EventLoggerThread(self._event_queue, self._ev_writer, flush_secs)
A:tensorflow.python.summary.summary_iterator.summ->tensorflow.core.framework.summary_pb2.Summary()
A:tensorflow.python.summary.summary_iterator.event->self._queue.get()
A:tensorflow.python.summary.summary_iterator.event.step->int(global_step)
A:tensorflow.python.summary.summary_iterator.graph_bytes->graph_def.SerializeToString()
A:tensorflow.python.summary.summary_iterator.true_graph_def->graph.as_graph_def(add_shapes=True)
A:tensorflow.python.summary.summary_iterator.tagged_metadata->tensorflow.core.util.event_pb2.TaggedRunMetadata()
A:tensorflow.python.summary.summary_iterator.tagged_metadata.run_metadata->run_metadata.SerializeToString()
A:tensorflow.python.summary.summary_iterator.now->time.time()
A:tensorflow.python.summary.summary_iterator._lock->threading.RLock()
A:tensorflow.python.summary.summary_iterator.SummaryWriterCache._cache[logdir]->SummaryWriter(logdir, graph=ops.get_default_graph())
tensorflow.python.summary.summary_iterator.SummaryWriter(self,logdir,graph=None,max_queue=10,flush_secs=120,graph_def=None)
tensorflow.python.summary.summary_iterator.SummaryWriter.__init__(self,logdir,graph=None,max_queue=10,flush_secs=120,graph_def=None)
tensorflow.python.summary.summary_iterator.SummaryWriter._add_graph_def(self,graph_def,global_step=None)
tensorflow.python.summary.summary_iterator.SummaryWriter.add_event(self,event)
tensorflow.python.summary.summary_iterator.SummaryWriter.add_graph(self,graph,global_step=None,graph_def=None)
tensorflow.python.summary.summary_iterator.SummaryWriter.add_run_metadata(self,run_metadata,tag,global_step=None)
tensorflow.python.summary.summary_iterator.SummaryWriter.add_session_log(self,session_log,global_step=None)
tensorflow.python.summary.summary_iterator.SummaryWriter.add_summary(self,summary,global_step=None)
tensorflow.python.summary.summary_iterator.SummaryWriter.close(self)
tensorflow.python.summary.summary_iterator.SummaryWriter.flush(self)
tensorflow.python.summary.summary_iterator.SummaryWriter.get_logdir(self)
tensorflow.python.summary.summary_iterator.SummaryWriter.reopen(self)
tensorflow.python.summary.summary_iterator.SummaryWriterCache(object)
tensorflow.python.summary.summary_iterator.SummaryWriterCache.clear()
tensorflow.python.summary.summary_iterator.SummaryWriterCache.get(logdir)
tensorflow.python.summary.summary_iterator._EventLoggerThread(self,queue,ev_writer,flush_secs)
tensorflow.python.summary.summary_iterator._EventLoggerThread.__init__(self,queue,ev_writer,flush_secs)
tensorflow.python.summary.summary_iterator._EventLoggerThread.run(self)
tensorflow.python.summary.summary_iterator.summary_iterator(path)
tensorflow.summary_iterator.SummaryWriter(self,logdir,graph=None,max_queue=10,flush_secs=120,graph_def=None)
tensorflow.summary_iterator.SummaryWriter._add_graph_def(self,graph_def,global_step=None)
tensorflow.summary_iterator.SummaryWriter.add_event(self,event)
tensorflow.summary_iterator.SummaryWriter.add_graph(self,graph,global_step=None,graph_def=None)
tensorflow.summary_iterator.SummaryWriter.add_run_metadata(self,run_metadata,tag,global_step=None)
tensorflow.summary_iterator.SummaryWriter.add_session_log(self,session_log,global_step=None)
tensorflow.summary_iterator.SummaryWriter.add_summary(self,summary,global_step=None)
tensorflow.summary_iterator.SummaryWriter.close(self)
tensorflow.summary_iterator.SummaryWriter.flush(self)
tensorflow.summary_iterator.SummaryWriter.get_logdir(self)
tensorflow.summary_iterator.SummaryWriter.reopen(self)
tensorflow.summary_iterator.SummaryWriterCache(object)
tensorflow.summary_iterator.SummaryWriterCache.clear()
tensorflow.summary_iterator.SummaryWriterCache.get(logdir)
tensorflow.summary_iterator._EventLoggerThread(self,queue,ev_writer,flush_secs)
tensorflow.summary_iterator._EventLoggerThread.run(self)
tensorflow.summary_iterator.summary_iterator(path)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/summary/writer/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/summary/writer/event_file_writer.py----------------------------------------
A:tensorflow.python.summary.writer.event_file_writer.self._event_queue->six.moves.queue.Queue(max_queue)
A:tensorflow.python.summary.writer.event_file_writer.self._ev_writer->tensorflow.python.pywrap_tensorflow.EventsWriter(compat.as_bytes(os.path.join(self._logdir, 'events')))
A:tensorflow.python.summary.writer.event_file_writer.self._worker->_EventLoggerThread(self._event_queue, self._ev_writer, flush_secs)
A:tensorflow.python.summary.writer.event_file_writer.event->self._queue.get()
A:tensorflow.python.summary.writer.event_file_writer.now->time.time()
tensorflow.python.summary.writer.event_file_writer.EventFileWriter(self,logdir,max_queue=10,flush_secs=120)
tensorflow.python.summary.writer.event_file_writer.EventFileWriter.__init__(self,logdir,max_queue=10,flush_secs=120)
tensorflow.python.summary.writer.event_file_writer.EventFileWriter.add_event(self,event)
tensorflow.python.summary.writer.event_file_writer.EventFileWriter.close(self)
tensorflow.python.summary.writer.event_file_writer.EventFileWriter.flush(self)
tensorflow.python.summary.writer.event_file_writer.EventFileWriter.get_logdir(self)
tensorflow.python.summary.writer.event_file_writer.EventFileWriter.reopen(self)
tensorflow.python.summary.writer.event_file_writer._EventLoggerThread(self,queue,ev_writer,flush_secs)
tensorflow.python.summary.writer.event_file_writer._EventLoggerThread.__init__(self,queue,ev_writer,flush_secs)
tensorflow.python.summary.writer.event_file_writer._EventLoggerThread.run(self)
tensorflow.summary.writer.event_file_writer.EventFileWriter(self,logdir,max_queue=10,flush_secs=120)
tensorflow.summary.writer.event_file_writer.EventFileWriter.add_event(self,event)
tensorflow.summary.writer.event_file_writer.EventFileWriter.close(self)
tensorflow.summary.writer.event_file_writer.EventFileWriter.flush(self)
tensorflow.summary.writer.event_file_writer.EventFileWriter.get_logdir(self)
tensorflow.summary.writer.event_file_writer.EventFileWriter.reopen(self)
tensorflow.summary.writer.event_file_writer._EventLoggerThread(self,queue,ev_writer,flush_secs)
tensorflow.summary.writer.event_file_writer._EventLoggerThread.run(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/summary/writer/writer_cache.py----------------------------------------
A:tensorflow.python.summary.writer.writer_cache._lock->threading.RLock()
A:tensorflow.python.summary.writer.writer_cache.FileWriterCache._cache[logdir]->FileWriter(logdir, graph=ops.get_default_graph())
tensorflow.python.summary.writer.writer_cache.FileWriterCache(object)
tensorflow.python.summary.writer.writer_cache.FileWriterCache.clear()
tensorflow.python.summary.writer.writer_cache.FileWriterCache.get(logdir)
tensorflow.summary.writer.writer_cache.FileWriterCache(object)
tensorflow.summary.writer.writer_cache.FileWriterCache.clear()
tensorflow.summary.writer.writer_cache.FileWriterCache.get(logdir)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/summary/writer/writer.py----------------------------------------
A:tensorflow.python.summary.writer.writer.summ->tensorflow.core.framework.summary_pb2.Summary()
A:tensorflow.python.summary.writer.writer.event->tensorflow.core.util.event_pb2.Event(tagged_run_metadata=tagged_metadata)
A:tensorflow.python.summary.writer.writer.graph_bytes->graph_def.SerializeToString()
A:tensorflow.python.summary.writer.writer.true_graph_def->graph.as_graph_def(add_shapes=True)
A:tensorflow.python.summary.writer.writer.plugin_assets->tensorflow.python.summary.plugin_asset.get_all_plugin_assets(graph)
A:tensorflow.python.summary.writer.writer.logdir->self.event_writer.get_logdir()
A:tensorflow.python.summary.writer.writer.plugin_dir->os.path.join(logdir, _PLUGINS_DIR, plugin_name)
A:tensorflow.python.summary.writer.writer.assets->asset_container.assets()
A:tensorflow.python.summary.writer.writer.asset_path->os.path.join(plugin_dir, asset_name)
A:tensorflow.python.summary.writer.writer.meta_graph_bytes->meta_graph_def.SerializeToString()
A:tensorflow.python.summary.writer.writer.tagged_metadata->tensorflow.core.util.event_pb2.TaggedRunMetadata()
A:tensorflow.python.summary.writer.writer.tagged_metadata.run_metadata->run_metadata.SerializeToString()
A:tensorflow.python.summary.writer.writer.event.wall_time->time.time()
A:tensorflow.python.summary.writer.writer.event.step->int(step)
A:tensorflow.python.summary.writer.writer.event_writer->EventFileWriter(logdir, max_queue, flush_secs)
tensorflow.python.summary.writer.writer.FileWriter(self,logdir,graph=None,max_queue=10,flush_secs=120,graph_def=None)
tensorflow.python.summary.writer.writer.FileWriter.__init__(self,logdir,graph=None,max_queue=10,flush_secs=120,graph_def=None)
tensorflow.python.summary.writer.writer.FileWriter.add_event(self,event)
tensorflow.python.summary.writer.writer.FileWriter.close(self)
tensorflow.python.summary.writer.writer.FileWriter.flush(self)
tensorflow.python.summary.writer.writer.FileWriter.get_logdir(self)
tensorflow.python.summary.writer.writer.FileWriter.reopen(self)
tensorflow.python.summary.writer.writer.SummaryToEventTransformer(self,event_writer,graph=None,graph_def=None)
tensorflow.python.summary.writer.writer.SummaryToEventTransformer.__init__(self,event_writer,graph=None,graph_def=None)
tensorflow.python.summary.writer.writer.SummaryToEventTransformer._add_event(self,event,step)
tensorflow.python.summary.writer.writer.SummaryToEventTransformer._add_graph_def(self,graph_def,global_step=None)
tensorflow.python.summary.writer.writer.SummaryToEventTransformer._write_plugin_assets(self,graph)
tensorflow.python.summary.writer.writer.SummaryToEventTransformer.add_graph(self,graph,global_step=None,graph_def=None)
tensorflow.python.summary.writer.writer.SummaryToEventTransformer.add_meta_graph(self,meta_graph_def,global_step=None)
tensorflow.python.summary.writer.writer.SummaryToEventTransformer.add_run_metadata(self,run_metadata,tag,global_step=None)
tensorflow.python.summary.writer.writer.SummaryToEventTransformer.add_session_log(self,session_log,global_step=None)
tensorflow.python.summary.writer.writer.SummaryToEventTransformer.add_summary(self,summary,global_step=None)
tensorflow.summary.writer.writer.FileWriter(self,logdir,graph=None,max_queue=10,flush_secs=120,graph_def=None)
tensorflow.summary.writer.writer.FileWriter.add_event(self,event)
tensorflow.summary.writer.writer.FileWriter.close(self)
tensorflow.summary.writer.writer.FileWriter.flush(self)
tensorflow.summary.writer.writer.FileWriter.get_logdir(self)
tensorflow.summary.writer.writer.FileWriter.reopen(self)
tensorflow.summary.writer.writer.SummaryToEventTransformer(self,event_writer,graph=None,graph_def=None)
tensorflow.summary.writer.writer.SummaryToEventTransformer._add_event(self,event,step)
tensorflow.summary.writer.writer.SummaryToEventTransformer._add_graph_def(self,graph_def,global_step=None)
tensorflow.summary.writer.writer.SummaryToEventTransformer._write_plugin_assets(self,graph)
tensorflow.summary.writer.writer.SummaryToEventTransformer.add_graph(self,graph,global_step=None,graph_def=None)
tensorflow.summary.writer.writer.SummaryToEventTransformer.add_meta_graph(self,meta_graph_def,global_step=None)
tensorflow.summary.writer.writer.SummaryToEventTransformer.add_run_metadata(self,run_metadata,tag,global_step=None)
tensorflow.summary.writer.writer.SummaryToEventTransformer.add_session_log(self,session_log,global_step=None)
tensorflow.summary.writer.writer.SummaryToEventTransformer.add_summary(self,summary,global_step=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/user_ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/user_ops/user_ops.py----------------------------------------
tensorflow.python.user_ops.user_ops.my_fact()
tensorflow.user_ops.my_fact()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/saved_model/builder.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/saved_model/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/saved_model/saved_model.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/saved_model/builder_impl.py----------------------------------------
A:tensorflow.python.saved_model.builder_impl.self._saved_model->tensorflow.core.protobuf.saved_model_pb2.SavedModel()
A:tensorflow.python.saved_model.builder_impl.asset_proto->tensorflow.core.protobuf.meta_graph_pb2.AssetFileDef()
A:tensorflow.python.saved_model.builder_impl.asset_any_proto->Any()
A:tensorflow.python.saved_model.builder_impl.asset_source_filepath_list->self._maybe_save_assets(assets_collection_to_add)
A:tensorflow.python.saved_model.builder_impl.assets_destination_dir->os.path.join(compat.as_bytes(self._export_dir), compat.as_bytes(constants.ASSETS_DIRECTORY))
A:tensorflow.python.saved_model.builder_impl.asset_source_filename->os.path.basename(asset_source_filepath)
A:tensorflow.python.saved_model.builder_impl.asset_destination_filepath->os.path.join(compat.as_bytes(assets_destination_dir), compat.as_bytes(asset_source_filename))
A:tensorflow.python.saved_model.builder_impl.asset_source_filepath->self._asset_path_from_tensor(asset_tensor)
A:tensorflow.python.saved_model.builder_impl.proto_meta_graph_def->self._saved_model.meta_graphs.add()
A:tensorflow.python.saved_model.builder_impl.saver->tensorflow.python.training.saver.Saver(variables._all_saveable_objects(), sharded=True, write_version=saver_pb2.SaverDef.V2, allow_empty=True)
A:tensorflow.python.saved_model.builder_impl.meta_graph_def->tensorflow.python.training.saver.Saver(variables._all_saveable_objects(), sharded=True, write_version=saver_pb2.SaverDef.V2, allow_empty=True).export_meta_graph(clear_devices=clear_devices)
A:tensorflow.python.saved_model.builder_impl.variables_dir->os.path.join(compat.as_text(self._export_dir), compat.as_text(constants.VARIABLES_DIRECTORY))
A:tensorflow.python.saved_model.builder_impl.variables_path->os.path.join(compat.as_text(variables_dir), compat.as_text(constants.VARIABLES_FILENAME))
A:tensorflow.python.saved_model.builder_impl.path->os.path.join(compat.as_bytes(self._export_dir), compat.as_bytes(constants.SAVED_MODEL_FILENAME_PB))
tensorflow.python.saved_model.builder_impl.SavedModelBuilder(self,export_dir)
tensorflow.python.saved_model.builder_impl.SavedModelBuilder.__init__(self,export_dir)
tensorflow.python.saved_model.builder_impl.SavedModelBuilder._add_asset_to_collection(self,asset_filename,asset_tensor)
tensorflow.python.saved_model.builder_impl.SavedModelBuilder._add_main_op(self,main_op)
tensorflow.python.saved_model.builder_impl.SavedModelBuilder._asset_path_from_tensor(self,path_tensor)
tensorflow.python.saved_model.builder_impl.SavedModelBuilder._maybe_add_legacy_init_op(self,legacy_init_op=None)
tensorflow.python.saved_model.builder_impl.SavedModelBuilder._maybe_save_assets(self,assets_collection_to_add=None)
tensorflow.python.saved_model.builder_impl.SavedModelBuilder._save_and_write_assets(self,assets_collection_to_add=None)
tensorflow.python.saved_model.builder_impl.SavedModelBuilder._tag_and_add_meta_graph(self,meta_graph_def,tags,signature_def_map)
tensorflow.python.saved_model.builder_impl.SavedModelBuilder._validate_signature_def_map(self,signature_def_map)
tensorflow.python.saved_model.builder_impl.SavedModelBuilder._validate_tensor_info(self,tensor_info)
tensorflow.python.saved_model.builder_impl.SavedModelBuilder.add_meta_graph(self,tags,signature_def_map=None,assets_collection=None,legacy_init_op=None,clear_devices=False,main_op=None)
tensorflow.python.saved_model.builder_impl.SavedModelBuilder.add_meta_graph_and_variables(self,sess,tags,signature_def_map=None,assets_collection=None,legacy_init_op=None,clear_devices=False,main_op=None)
tensorflow.python.saved_model.builder_impl.SavedModelBuilder.save(self,as_text=False)
tensorflow.saved_model.builder_impl.SavedModelBuilder(self,export_dir)
tensorflow.saved_model.builder_impl.SavedModelBuilder._add_asset_to_collection(self,asset_filename,asset_tensor)
tensorflow.saved_model.builder_impl.SavedModelBuilder._add_main_op(self,main_op)
tensorflow.saved_model.builder_impl.SavedModelBuilder._asset_path_from_tensor(self,path_tensor)
tensorflow.saved_model.builder_impl.SavedModelBuilder._maybe_add_legacy_init_op(self,legacy_init_op=None)
tensorflow.saved_model.builder_impl.SavedModelBuilder._maybe_save_assets(self,assets_collection_to_add=None)
tensorflow.saved_model.builder_impl.SavedModelBuilder._save_and_write_assets(self,assets_collection_to_add=None)
tensorflow.saved_model.builder_impl.SavedModelBuilder._tag_and_add_meta_graph(self,meta_graph_def,tags,signature_def_map)
tensorflow.saved_model.builder_impl.SavedModelBuilder._validate_signature_def_map(self,signature_def_map)
tensorflow.saved_model.builder_impl.SavedModelBuilder._validate_tensor_info(self,tensor_info)
tensorflow.saved_model.builder_impl.SavedModelBuilder.add_meta_graph(self,tags,signature_def_map=None,assets_collection=None,legacy_init_op=None,clear_devices=False,main_op=None)
tensorflow.saved_model.builder_impl.SavedModelBuilder.add_meta_graph_and_variables(self,sess,tags,signature_def_map=None,assets_collection=None,legacy_init_op=None,clear_devices=False,main_op=None)
tensorflow.saved_model.builder_impl.SavedModelBuilder.save(self,as_text=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/saved_model/utils.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/saved_model/tag_constants.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/saved_model/signature_constants.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/saved_model/utils_impl.py----------------------------------------
tensorflow.python.saved_model.utils_impl.build_tensor_info(tensor)
tensorflow.saved_model.utils_impl.build_tensor_info(tensor)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/saved_model/signature_def_utils_impl.py----------------------------------------
A:tensorflow.python.saved_model.signature_def_utils_impl.signature_def->build_signature_def(signature_inputs, signature_outputs, signature_constants.PREDICT_METHOD_NAME)
A:tensorflow.python.saved_model.signature_def_utils_impl.input_tensor_info->tensorflow.python.saved_model.utils.build_tensor_info(examples)
A:tensorflow.python.saved_model.signature_def_utils_impl.output_tensor_info->tensorflow.python.saved_model.utils.build_tensor_info(predictions)
A:tensorflow.python.saved_model.signature_def_utils_impl.classes_tensor_info->tensorflow.python.saved_model.utils.build_tensor_info(classes)
A:tensorflow.python.saved_model.signature_def_utils_impl.scores_tensor_info->tensorflow.python.saved_model.utils.build_tensor_info(scores)
A:tensorflow.python.saved_model.signature_def_utils_impl.((_, value),)->outputs.items()
tensorflow.python.saved_model.signature_def_utils_impl.build_signature_def(inputs=None,outputs=None,method_name=None)
tensorflow.python.saved_model.signature_def_utils_impl.classification_signature_def(examples,classes,scores)
tensorflow.python.saved_model.signature_def_utils_impl.predict_signature_def(inputs,outputs)
tensorflow.python.saved_model.signature_def_utils_impl.regression_signature_def(examples,predictions)
tensorflow.saved_model.signature_def_utils_impl.build_signature_def(inputs=None,outputs=None,method_name=None)
tensorflow.saved_model.signature_def_utils_impl.classification_signature_def(examples,classes,scores)
tensorflow.saved_model.signature_def_utils_impl.predict_signature_def(inputs,outputs)
tensorflow.saved_model.signature_def_utils_impl.regression_signature_def(examples,predictions)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/saved_model/main_op.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/saved_model/loader_impl.py----------------------------------------
A:tensorflow.python.saved_model.loader_impl.path_to_pbtxt->os.path.join(compat.as_bytes(export_dir), compat.as_bytes(constants.SAVED_MODEL_FILENAME_PBTXT))
A:tensorflow.python.saved_model.loader_impl.path_to_pb->os.path.join(compat.as_bytes(export_dir), compat.as_bytes(constants.SAVED_MODEL_FILENAME_PB))
A:tensorflow.python.saved_model.loader_impl.saved_model->_parse_saved_model(export_dir)
A:tensorflow.python.saved_model.loader_impl.file_content->tensorflow.python.lib.io.file_io.FileIO(path_to_pbtxt, 'rb').read()
A:tensorflow.python.saved_model.loader_impl.assets_directory->os.path.join(compat.as_bytes(export_dir), compat.as_bytes(constants.ASSETS_DIRECTORY))
A:tensorflow.python.saved_model.loader_impl.asset_proto->tensorflow.core.protobuf.meta_graph_pb2.AssetFileDef()
A:tensorflow.python.saved_model.loader_impl.asset_tensor_dict[asset_proto.tensor_info.name]->os.path.join(compat.as_bytes(assets_directory), compat.as_bytes(asset_proto.filename))
A:tensorflow.python.saved_model.loader_impl.txt_path->os.path.join(export_dir, constants.SAVED_MODEL_FILENAME_PBTXT)
A:tensorflow.python.saved_model.loader_impl.pb_path->os.path.join(export_dir, constants.SAVED_MODEL_FILENAME_PB)
A:tensorflow.python.saved_model.loader_impl.saver->tensorflow.python.training.saver.import_meta_graph(meta_graph_def_to_load, **saver_kwargs)
A:tensorflow.python.saved_model.loader_impl.variables_path->os.path.join(compat.as_bytes(export_dir), compat.as_bytes(constants.VARIABLES_DIRECTORY), compat.as_bytes(constants.VARIABLES_FILENAME))
A:tensorflow.python.saved_model.loader_impl.asset_tensors_dictionary->_get_asset_tensors(export_dir, meta_graph_def_to_load)
A:tensorflow.python.saved_model.loader_impl.main_op_tensor->_get_main_op_tensor(meta_graph_def_to_load)
A:tensorflow.python.saved_model.loader_impl.legacy_init_op_tensor->_get_legacy_init_op_tensor(meta_graph_def_to_load)
tensorflow.python.saved_model.loader_impl._get_asset_tensors(export_dir,meta_graph_def_to_load)
tensorflow.python.saved_model.loader_impl._get_legacy_init_op_tensor(meta_graph_def_to_load)
tensorflow.python.saved_model.loader_impl._get_main_op_tensor(meta_graph_def_to_load)
tensorflow.python.saved_model.loader_impl._parse_saved_model(export_dir)
tensorflow.python.saved_model.loader_impl.load(sess,tags,export_dir,**saver_kwargs)
tensorflow.python.saved_model.loader_impl.maybe_saved_model_directory(export_dir)
tensorflow.saved_model.loader_impl._get_asset_tensors(export_dir,meta_graph_def_to_load)
tensorflow.saved_model.loader_impl._get_legacy_init_op_tensor(meta_graph_def_to_load)
tensorflow.saved_model.loader_impl._get_main_op_tensor(meta_graph_def_to_load)
tensorflow.saved_model.loader_impl._parse_saved_model(export_dir)
tensorflow.saved_model.loader_impl.load(sess,tags,export_dir,**saver_kwargs)
tensorflow.saved_model.loader_impl.maybe_saved_model_directory(export_dir)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/saved_model/constants.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/saved_model/loader.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/saved_model/signature_def_utils.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/saved_model/main_op_impl.py----------------------------------------
A:tensorflow.python.saved_model.main_op_impl.init->tensorflow.python.ops.variables.global_variables_initializer()
A:tensorflow.python.saved_model.main_op_impl.init_local->tensorflow.python.ops.variables.local_variables_initializer()
A:tensorflow.python.saved_model.main_op_impl.init_tables->tensorflow.python.ops.data_flow_ops.tables_initializer()
A:tensorflow.python.saved_model.main_op_impl.main_op_with_restore->tensorflow.python.ops.control_flow_ops.group(restore_op_name)
tensorflow.python.saved_model.main_op_impl.main_op()
tensorflow.python.saved_model.main_op_impl.main_op_with_restore(restore_op_name)
tensorflow.saved_model.main_op_impl.main_op()
tensorflow.saved_model.main_op_impl.main_op_with_restore(restore_op_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/tensor_util.py----------------------------------------
A:tensorflow.python.framework.tensor_util._TENSOR_CONTENT_TYPES->frozenset([dtypes.float32, dtypes.float64, dtypes.int32, dtypes.uint8, dtypes.int16, dtypes.int8, dtypes.int64, dtypes.qint8, dtypes.quint8, dtypes.qint16, dtypes.quint16, dtypes.qint32])
A:tensorflow.python.framework.tensor_util.fn_list->_TF_TO_IS_OK.get(dtype, [_FilterNotTensor])
A:tensorflow.python.framework.tensor_util.mismatch->_FirstNotNone([fn(values) for fn in fn_list])
A:tensorflow.python.framework.tensor_util.dtype->tensorflow.python.framework.dtypes.as_dtype(dtype)
A:tensorflow.python.framework.tensor_util.nparray->nparray.astype(np.float32).astype(np.float32)
A:tensorflow.python.framework.tensor_util.downcasted_array->nparray.astype(np.float32).astype(np.float32).astype(np.int32)
A:tensorflow.python.framework.tensor_util.numpy_dtype->tensorflow.python.framework.dtypes.as_dtype(nparray.dtype)
A:tensorflow.python.framework.tensor_util.shape_size->numpy.prod(shape)
A:tensorflow.python.framework.tensor_util.tensor_proto->tensorflow.core.framework.tensor_pb2.TensorProto(dtype=numpy_dtype.as_datatype_enum, tensor_shape=tensor_shape.as_shape(shape).as_proto())
A:tensorflow.python.framework.tensor_util.tensor_proto.tensor_content->nparray.astype(np.float32).astype(np.float32).tostring()
A:tensorflow.python.framework.tensor_util.proto_values->nparray.astype(np.float32).astype(np.float32).ravel()
A:tensorflow.python.framework.tensor_util.append_fn->GetNumpyAppendFn(proto_values.dtype)
A:tensorflow.python.framework.tensor_util.num_elements->numpy.prod(shape)
A:tensorflow.python.framework.tensor_util.tensor_dtype->tensorflow.python.framework.dtypes.as_dtype(tensor.dtype)
A:tensorflow.python.framework.tensor_util.tmp->numpy.fromiter(tensor.half_val, dtype=np.uint16)
A:tensorflow.python.framework.tensor_util.it->iter(tensor.dcomplex_val)
A:tensorflow.python.framework.tensor_util.input_shape->tensor.op.inputs[0].get_shape()
A:tensorflow.python.framework.tensor_util.start->constant_value(tensor.op.inputs[0])
A:tensorflow.python.framework.tensor_util.limit->constant_value(tensor.op.inputs[1])
A:tensorflow.python.framework.tensor_util.delta->constant_value(tensor.op.inputs[2])
A:tensorflow.python.framework.tensor_util.pre_cast->constant_value(tensor.op.inputs[0])
A:tensorflow.python.framework.tensor_util.cast_dtype->tensorflow.python.framework.dtypes.as_dtype(tensor.op.get_attr('DstT'))
A:tensorflow.python.framework.tensor_util.dim->constant_value(tensor.op.inputs[-1])
A:tensorflow.python.framework.tensor_util.value->constant_value(tensor)
A:tensorflow.python.framework.tensor_util.ret->ret.merge_with(tensor_shape.TensorShape([d if d != -1 else None for d in value])).merge_with(tensor_shape.TensorShape([d if d != -1 else None for d in value]))
A:tensorflow.python.framework.tensor_util.shape->tensor.get_shape().with_rank(1)
A:tensorflow.python.framework.tensor_util.pack_input_val->constant_value(pack_input)
A:tensorflow.python.framework.tensor_util.new_dim->tensorflow.python.framework.tensor_shape.Dimension(pack_input_val)
tensorflow.framework.tensor_util.ExtractBitsFromFloat16(x)
tensorflow.framework.tensor_util.GetFromNumpyDTypeDict(dtype_dict,dtype)
tensorflow.framework.tensor_util.GetNumpyAppendFn(dtype)
tensorflow.framework.tensor_util.MakeNdarray(tensor)
tensorflow.framework.tensor_util.ShapeEquals(tensor_proto,shape)
tensorflow.framework.tensor_util.SlowAppendFloat16ArrayToTensorProto(tensor_proto,proto_values)
tensorflow.framework.tensor_util.TensorShapeProtoToList(shape)
tensorflow.framework.tensor_util._AssertCompatible(values,dtype)
tensorflow.framework.tensor_util._ConstantValue(tensor)
tensorflow.framework.tensor_util._FilterBool(v)
tensorflow.framework.tensor_util._FilterComplex(v)
tensorflow.framework.tensor_util._FilterFloat(v)
tensorflow.framework.tensor_util._FilterInt(v)
tensorflow.framework.tensor_util._FilterNotTensor(v)
tensorflow.framework.tensor_util._FilterStr(v)
tensorflow.framework.tensor_util._FilterTuple(v)
tensorflow.framework.tensor_util._FirstNotNone(l)
tensorflow.framework.tensor_util._FlattenToStrings(nested_strings)
tensorflow.framework.tensor_util._GetDenseDimensions(list_of_lists)
tensorflow.framework.tensor_util._Message(self,message)
tensorflow.framework.tensor_util._Message.__repr__(self)
tensorflow.framework.tensor_util._NotNone(v)
tensorflow.framework.tensor_util.constant_value(tensor)
tensorflow.framework.tensor_util.constant_value_as_shape(tensor)
tensorflow.framework.tensor_util.make_tensor_proto(values,dtype=None,shape=None,verify_shape=False)
tensorflow.python.framework.tensor_util.ExtractBitsFromFloat16(x)
tensorflow.python.framework.tensor_util.GetFromNumpyDTypeDict(dtype_dict,dtype)
tensorflow.python.framework.tensor_util.GetNumpyAppendFn(dtype)
tensorflow.python.framework.tensor_util.MakeNdarray(tensor)
tensorflow.python.framework.tensor_util.ShapeEquals(tensor_proto,shape)
tensorflow.python.framework.tensor_util.SlowAppendFloat16ArrayToTensorProto(tensor_proto,proto_values)
tensorflow.python.framework.tensor_util.TensorShapeProtoToList(shape)
tensorflow.python.framework.tensor_util._AssertCompatible(values,dtype)
tensorflow.python.framework.tensor_util._ConstantValue(tensor)
tensorflow.python.framework.tensor_util._FilterBool(v)
tensorflow.python.framework.tensor_util._FilterComplex(v)
tensorflow.python.framework.tensor_util._FilterFloat(v)
tensorflow.python.framework.tensor_util._FilterInt(v)
tensorflow.python.framework.tensor_util._FilterNotTensor(v)
tensorflow.python.framework.tensor_util._FilterStr(v)
tensorflow.python.framework.tensor_util._FilterTuple(v)
tensorflow.python.framework.tensor_util._FirstNotNone(l)
tensorflow.python.framework.tensor_util._FlattenToStrings(nested_strings)
tensorflow.python.framework.tensor_util._GetDenseDimensions(list_of_lists)
tensorflow.python.framework.tensor_util._Message(self,message)
tensorflow.python.framework.tensor_util._Message.__init__(self,message)
tensorflow.python.framework.tensor_util._Message.__repr__(self)
tensorflow.python.framework.tensor_util._NotNone(v)
tensorflow.python.framework.tensor_util.constant_value(tensor)
tensorflow.python.framework.tensor_util.constant_value_as_shape(tensor)
tensorflow.python.framework.tensor_util.make_tensor_proto(values,dtype=None,shape=None,verify_shape=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/common_shapes.py----------------------------------------
A:tensorflow.python.framework.common_shapes.a_shape->op.inputs[0].get_shape().with_rank(2)
A:tensorflow.python.framework.common_shapes.transpose_a->op.get_attr('transpose_a')
A:tensorflow.python.framework.common_shapes.b_shape->op.inputs[1].get_shape().with_rank(2)
A:tensorflow.python.framework.common_shapes.transpose_b->op.get_attr('transpose_b')
A:tensorflow.python.framework.common_shapes.input_size->tuple([tensor_shape.as_dimension(x).value for x in input_size])
A:tensorflow.python.framework.common_shapes.filter_size->tuple([tensor_shape.as_dimension(x).value for x in filter_size])
A:tensorflow.python.framework.common_shapes.input_shape->op.inputs[0].get_shape().with_rank(4)
A:tensorflow.python.framework.common_shapes.filter_shape->op.inputs[1].get_shape().with_rank(4)
A:tensorflow.python.framework.common_shapes.data_format->op.get_attr('data_format')
A:tensorflow.python.framework.common_shapes.(stride_b, stride_d, stride_r, stride_c)->op.get_attr('strides')
A:tensorflow.python.framework.common_shapes.(stride_b, stride_r, stride_c, stride_d)->op.get_attr('strides')
A:tensorflow.python.framework.common_shapes.padding->op.get_attr('padding')
A:tensorflow.python.framework.common_shapes.(out_rows, out_cols)->get2d_conv_output_size(in_rows, in_cols, ksize_r, ksize_c, stride_r, stride_c, padding)
A:tensorflow.python.framework.common_shapes.depthwise_filter_shape->op.inputs[1].get_shape().merge_with(tensor_shape.TensorShape([None, None, input_shape[3], None]))
A:tensorflow.python.framework.common_shapes.pointwise_filter_shape->op.inputs[2].get_shape().merge_with(tensor_shape.TensorShape([1, 1, pointwise_depth_in, None]))
A:tensorflow.python.framework.common_shapes.(ksize_b, ksize_d, ksize_r, ksize_c)->op.get_attr('ksize')
A:tensorflow.python.framework.common_shapes.(ksize_b, ksize_r, ksize_c, ksize_d)->op.get_attr('ksize')
A:tensorflow.python.framework.common_shapes.broadcasted_dims->reversed(list(six.moves.zip_longest(reversed(shape_x.dims), reversed(shape_y.dims), fillvalue=tensor_shape.Dimension(1))))
A:tensorflow.python.framework.common_shapes.res->_call_cpp_shape_fn_impl(op, input_tensors_needed, input_tensors_as_shapes_needed, debug_python_shape_fn, require_shape_fn)
A:tensorflow.python.framework.common_shapes.p->p.FromString(res['inputs_needed']).FromString(res['inputs_needed'])
A:tensorflow.python.framework.common_shapes.node_def_str->op.node_def.SerializeToString()
A:tensorflow.python.framework.common_shapes.r->tensorflow.python.framework.cpp_shape_inference_pb2.CppShapeInferenceResult()
A:tensorflow.python.framework.common_shapes.v->tensorflow.python.framework.tensor_util.constant_value(op.inputs[idx])
A:tensorflow.python.framework.common_shapes.input_tensors[idx]->numpy.asarray(v)
A:tensorflow.python.framework.common_shapes.serialized_unknown_shape->tensorflow.python.framework.tensor_shape.TensorShape(None).as_proto().SerializeToString()
A:tensorflow.python.framework.common_shapes.s->tensorflow.python.framework.tensor_util.constant_value_as_shape(op.inputs[idx])
A:tensorflow.python.framework.common_shapes.arr[idx]->tensorflow.python.framework.tensor_util.constant_value_as_shape(op.inputs[idx]).as_proto().SerializeToString()
A:tensorflow.python.framework.common_shapes.output->tensorflow.python.pywrap_tensorflow.RunCppShapeInference(graph_def_version, node_def_str, input_shapes, input_tensors, input_tensors_as_shapes, status)
tensorflow.framework.common_shapes._call_cpp_shape_fn_impl(op,input_tensors_needed,input_tensors_as_shapes_needed,debug_python_shape_fn,require_shape_fn)
tensorflow.framework.common_shapes.avg_pool_shape(op)
tensorflow.framework.common_shapes.broadcast_shape(shape_x,shape_y)
tensorflow.framework.common_shapes.call_cpp_shape_fn(op,input_tensors_needed=None,input_tensors_as_shapes_needed=None,debug_python_shape_fn=None,require_shape_fn=True)
tensorflow.framework.common_shapes.conv2d_shape(op)
tensorflow.framework.common_shapes.depthwise_conv2d_native_shape(op)
tensorflow.framework.common_shapes.get2d_conv_output_size(input_height,input_width,filter_height,filter_width,row_stride,col_stride,padding_type)
tensorflow.framework.common_shapes.get_conv_output_size(input_size,filter_size,strides,padding_type)
tensorflow.framework.common_shapes.matmul_shape(op)
tensorflow.framework.common_shapes.max_pool_shape(op)
tensorflow.framework.common_shapes.no_outputs(unused_op)
tensorflow.framework.common_shapes.scalar_shape(unused_op)
tensorflow.framework.common_shapes.separable_conv2d_shape(op)
tensorflow.framework.common_shapes.unchanged_shape(op)
tensorflow.framework.common_shapes.unchanged_shape_with_rank(rank)
tensorflow.framework.common_shapes.unchanged_shape_with_rank_at_least(rank)
tensorflow.framework.common_shapes.unchanged_shape_with_rank_at_most(rank)
tensorflow.framework.common_shapes.unknown_shape(op)
tensorflow.python.framework.common_shapes._call_cpp_shape_fn_impl(op,input_tensors_needed,input_tensors_as_shapes_needed,debug_python_shape_fn,require_shape_fn)
tensorflow.python.framework.common_shapes.avg_pool_shape(op)
tensorflow.python.framework.common_shapes.broadcast_shape(shape_x,shape_y)
tensorflow.python.framework.common_shapes.call_cpp_shape_fn(op,input_tensors_needed=None,input_tensors_as_shapes_needed=None,debug_python_shape_fn=None,require_shape_fn=True)
tensorflow.python.framework.common_shapes.conv2d_shape(op)
tensorflow.python.framework.common_shapes.depthwise_conv2d_native_shape(op)
tensorflow.python.framework.common_shapes.get2d_conv_output_size(input_height,input_width,filter_height,filter_width,row_stride,col_stride,padding_type)
tensorflow.python.framework.common_shapes.get_conv_output_size(input_size,filter_size,strides,padding_type)
tensorflow.python.framework.common_shapes.matmul_shape(op)
tensorflow.python.framework.common_shapes.max_pool_shape(op)
tensorflow.python.framework.common_shapes.no_outputs(unused_op)
tensorflow.python.framework.common_shapes.scalar_shape(unused_op)
tensorflow.python.framework.common_shapes.separable_conv2d_shape(op)
tensorflow.python.framework.common_shapes.unchanged_shape(op)
tensorflow.python.framework.common_shapes.unchanged_shape_with_rank(rank)
tensorflow.python.framework.common_shapes.unchanged_shape_with_rank_at_least(rank)
tensorflow.python.framework.common_shapes.unchanged_shape_with_rank_at_most(rank)
tensorflow.python.framework.common_shapes.unknown_shape(op)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/graph_io.py----------------------------------------
A:tensorflow.python.framework.graph_io.graph_def->graph_or_graph_def.as_graph_def()
A:tensorflow.python.framework.graph_io.path->os.path.join(logdir, name)
tensorflow.framework.graph_io.write_graph(graph_or_graph_def,logdir,name,as_text=True)
tensorflow.python.framework.graph_io.write_graph(graph_or_graph_def,logdir,name,as_text=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/registry.py----------------------------------------
A:tensorflow.python.framework.registry.self._registry->dict()
A:tensorflow.python.framework.registry.stack->traceback.extract_stack()
A:tensorflow.python.framework.registry.name->tensorflow.python.util.compat.as_str(name)
tensorflow.framework.registry.Registry(self,name)
tensorflow.framework.registry.Registry.list(self)
tensorflow.framework.registry.Registry.lookup(self,name)
tensorflow.framework.registry.Registry.register(self,candidate,name=None)
tensorflow.python.framework.registry.Registry(self,name)
tensorflow.python.framework.registry.Registry.__init__(self,name)
tensorflow.python.framework.registry.Registry.list(self)
tensorflow.python.framework.registry.Registry.lookup(self,name)
tensorflow.python.framework.registry.Registry.register(self,candidate,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/graph_util.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/meta_graph.py----------------------------------------
A:tensorflow.python.framework.meta_graph.node_def->_node_def(value.node_def, export_scope, unbound_inputs, clear_devices=clear_devices)
A:tensorflow.python.framework.meta_graph.node_def.input[i]->tensorflow.python.framework.ops.strip_name_scope(v, export_scope)
A:tensorflow.python.framework.meta_graph.node_def.name->tensorflow.python.util.compat.as_bytes(ops.strip_name_scope(from_node_def.name, export_scope))
A:tensorflow.python.framework.meta_graph.graph_def->tensorflow.core.framework.graph_pb2.GraphDef()
A:tensorflow.python.framework.meta_graph.file_content->tensorflow.python.lib.io.file_io.FileIO(filename, 'rb').read()
A:tensorflow.python.framework.meta_graph.used_ops->ops_used_by_graph_def(graph_def)
A:tensorflow.python.framework.meta_graph.fun->functions_to_process.pop()
A:tensorflow.python.framework.meta_graph.registered_ops->tensorflow.python.framework.op_def_registry.get_registered_ops()
A:tensorflow.python.framework.meta_graph.collection_list->graph.get_collection(key)
A:tensorflow.python.framework.meta_graph.to_proto->tensorflow.python.framework.ops.get_to_proto_function(key)
A:tensorflow.python.framework.meta_graph.proto_type->tensorflow.python.framework.ops.get_collection_proto_type(key)
A:tensorflow.python.framework.meta_graph.proto->proto_type()
A:tensorflow.python.framework.meta_graph.kind->col_def.WhichOneof('kind')
A:tensorflow.python.framework.meta_graph.meta_graph_def->read_meta_graph_file(meta_graph_or_file)
A:tensorflow.python.framework.meta_graph.meta_info_def->tensorflow.core.protobuf.meta_graph_pb2.MetaGraphDef.MetaInfoDef()
A:tensorflow.python.framework.meta_graph.clist->graph.get_all_collection_keys()
A:tensorflow.python.framework.meta_graph.field->getattr(col_def, kind)
A:tensorflow.python.framework.meta_graph.from_proto->tensorflow.python.framework.ops.get_from_proto_function(key)
A:tensorflow.python.framework.meta_graph.col_op->graph.as_graph_element(ops.prepend_name_scope(value, import_scope))
A:tensorflow.python.framework.meta_graph.variables->graph.get_collection(ops.GraphKeys.GLOBAL_VARIABLES, scope=export_scope)
A:tensorflow.python.framework.meta_graph.new_graph_def->tensorflow.core.framework.graph_pb2.GraphDef()
A:tensorflow.python.framework.meta_graph.new_node_def->_node_def(node_def, export_scope, unbound_inputs, clear_devices=clear_devices)
A:tensorflow.python.framework.meta_graph.scoped_meta_graph_def->create_meta_graph_def(graph_def=graph_def, graph=graph, export_scope=export_scope, **kwargs)
A:tensorflow.python.framework.meta_graph.(orig_meta_graph, var_list)->export_scoped_meta_graph(export_scope=from_scope, graph=from_graph)
A:tensorflow.python.framework.meta_graph.var_list->import_scoped_meta_graph(orig_meta_graph, graph=to_graph, import_scope=to_scope)
tensorflow.framework.meta_graph._get_kind_name(item)
tensorflow.framework.meta_graph._node_def(from_node_def,export_scope,unbound_inputs,clear_devices=False)
tensorflow.framework.meta_graph._read_file(filename)
tensorflow.framework.meta_graph._should_include_node(node_or_node_name,export_scope)
tensorflow.framework.meta_graph.add_collection_def(meta_graph_def,key,graph=None,export_scope=None)
tensorflow.framework.meta_graph.copy_scoped_meta_graph(from_scope,to_scope,from_graph=None,to_graph=None)
tensorflow.framework.meta_graph.create_meta_graph_def(meta_info_def=None,graph_def=None,saver_def=None,collection_list=None,graph=None,export_scope=None)
tensorflow.framework.meta_graph.export_scoped_meta_graph(filename=None,graph_def=None,graph=None,export_scope=None,as_text=False,unbound_inputs_col_name='unbound_inputs',clear_devices=False,**kwargs)
tensorflow.framework.meta_graph.import_scoped_meta_graph(meta_graph_or_file,clear_devices=False,graph=None,import_scope=None,input_map=None,unbound_inputs_col_name='unbound_inputs')
tensorflow.framework.meta_graph.ops_used_by_graph_def(graph_def)
tensorflow.framework.meta_graph.read_meta_graph_file(filename)
tensorflow.framework.meta_graph.stripped_op_list_for_graph(graph_def)
tensorflow.python.framework.meta_graph._get_kind_name(item)
tensorflow.python.framework.meta_graph._node_def(from_node_def,export_scope,unbound_inputs,clear_devices=False)
tensorflow.python.framework.meta_graph._read_file(filename)
tensorflow.python.framework.meta_graph._should_include_node(node_or_node_name,export_scope)
tensorflow.python.framework.meta_graph.add_collection_def(meta_graph_def,key,graph=None,export_scope=None)
tensorflow.python.framework.meta_graph.copy_scoped_meta_graph(from_scope,to_scope,from_graph=None,to_graph=None)
tensorflow.python.framework.meta_graph.create_meta_graph_def(meta_info_def=None,graph_def=None,saver_def=None,collection_list=None,graph=None,export_scope=None)
tensorflow.python.framework.meta_graph.export_scoped_meta_graph(filename=None,graph_def=None,graph=None,export_scope=None,as_text=False,unbound_inputs_col_name='unbound_inputs',clear_devices=False,**kwargs)
tensorflow.python.framework.meta_graph.import_scoped_meta_graph(meta_graph_or_file,clear_devices=False,graph=None,import_scope=None,input_map=None,unbound_inputs_col_name='unbound_inputs')
tensorflow.python.framework.meta_graph.ops_used_by_graph_def(graph_def)
tensorflow.python.framework.meta_graph.read_meta_graph_file(filename)
tensorflow.python.framework.meta_graph.stripped_op_list_for_graph(graph_def)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py----------------------------------------
A:tensorflow.python.framework.dtypes.type_enum->int(type_enum)
A:tensorflow.python.framework.dtypes.other->as_dtype(other)
A:tensorflow.python.framework.dtypes.resource->DType(types_pb2.DT_RESOURCE)
A:tensorflow.python.framework.dtypes.float16->DType(types_pb2.DT_HALF)
A:tensorflow.python.framework.dtypes.float32->DType(types_pb2.DT_FLOAT)
A:tensorflow.python.framework.dtypes.float64->DType(types_pb2.DT_DOUBLE)
A:tensorflow.python.framework.dtypes.int32->DType(types_pb2.DT_INT32)
A:tensorflow.python.framework.dtypes.uint8->DType(types_pb2.DT_UINT8)
A:tensorflow.python.framework.dtypes.uint16->DType(types_pb2.DT_UINT16)
A:tensorflow.python.framework.dtypes.int16->DType(types_pb2.DT_INT16)
A:tensorflow.python.framework.dtypes.int8->DType(types_pb2.DT_INT8)
A:tensorflow.python.framework.dtypes.string->DType(types_pb2.DT_STRING)
A:tensorflow.python.framework.dtypes.complex64->DType(types_pb2.DT_COMPLEX64)
A:tensorflow.python.framework.dtypes.complex128->DType(types_pb2.DT_COMPLEX128)
A:tensorflow.python.framework.dtypes.int64->DType(types_pb2.DT_INT64)
A:tensorflow.python.framework.dtypes.bool->DType(types_pb2.DT_BOOL)
A:tensorflow.python.framework.dtypes.qint8->DType(types_pb2.DT_QINT8)
A:tensorflow.python.framework.dtypes.quint8->DType(types_pb2.DT_QUINT8)
A:tensorflow.python.framework.dtypes.qint16->DType(types_pb2.DT_QINT16)
A:tensorflow.python.framework.dtypes.quint16->DType(types_pb2.DT_QUINT16)
A:tensorflow.python.framework.dtypes.qint32->DType(types_pb2.DT_QINT32)
A:tensorflow.python.framework.dtypes.resource_ref->DType(types_pb2.DT_RESOURCE_REF)
A:tensorflow.python.framework.dtypes.bfloat16->DType(types_pb2.DT_BFLOAT16)
A:tensorflow.python.framework.dtypes.float16_ref->DType(types_pb2.DT_HALF_REF)
A:tensorflow.python.framework.dtypes.float32_ref->DType(types_pb2.DT_FLOAT_REF)
A:tensorflow.python.framework.dtypes.float64_ref->DType(types_pb2.DT_DOUBLE_REF)
A:tensorflow.python.framework.dtypes.int32_ref->DType(types_pb2.DT_INT32_REF)
A:tensorflow.python.framework.dtypes.uint8_ref->DType(types_pb2.DT_UINT8_REF)
A:tensorflow.python.framework.dtypes.uint16_ref->DType(types_pb2.DT_UINT16_REF)
A:tensorflow.python.framework.dtypes.int16_ref->DType(types_pb2.DT_INT16_REF)
A:tensorflow.python.framework.dtypes.int8_ref->DType(types_pb2.DT_INT8_REF)
A:tensorflow.python.framework.dtypes.string_ref->DType(types_pb2.DT_STRING_REF)
A:tensorflow.python.framework.dtypes.complex64_ref->DType(types_pb2.DT_COMPLEX64_REF)
A:tensorflow.python.framework.dtypes.complex128_ref->DType(types_pb2.DT_COMPLEX128_REF)
A:tensorflow.python.framework.dtypes.int64_ref->DType(types_pb2.DT_INT64_REF)
A:tensorflow.python.framework.dtypes.bool_ref->DType(types_pb2.DT_BOOL_REF)
A:tensorflow.python.framework.dtypes.qint8_ref->DType(types_pb2.DT_QINT8_REF)
A:tensorflow.python.framework.dtypes.quint8_ref->DType(types_pb2.DT_QUINT8_REF)
A:tensorflow.python.framework.dtypes.qint16_ref->DType(types_pb2.DT_QINT16_REF)
A:tensorflow.python.framework.dtypes.quint16_ref->DType(types_pb2.DT_QUINT16_REF)
A:tensorflow.python.framework.dtypes.qint32_ref->DType(types_pb2.DT_QINT32_REF)
A:tensorflow.python.framework.dtypes.bfloat16_ref->DType(types_pb2.DT_BFLOAT16_REF)
A:tensorflow.python.framework.dtypes._np_qint8->numpy.dtype([('qint8', np.int8, 1)])
A:tensorflow.python.framework.dtypes._np_quint8->numpy.dtype([('quint8', np.uint8, 1)])
A:tensorflow.python.framework.dtypes._np_qint16->numpy.dtype([('qint16', np.int16, 1)])
A:tensorflow.python.framework.dtypes._np_quint16->numpy.dtype([('quint16', np.uint16, 1)])
A:tensorflow.python.framework.dtypes._np_qint32->numpy.dtype([('qint32', np.int32, 1)])
A:tensorflow.python.framework.dtypes.np_resource->numpy.dtype([('resource', np.ubyte, 1)])
A:tensorflow.python.framework.dtypes._NP_TO_TF->frozenset([(np.float16, float16), (np.float32, float32), (np.float64, float64), (np.int32, int32), (np.int64, int64), (np.uint8, uint8), (np.uint16, uint16), (np.int16, int16), (np.int8, int8), (np.complex64, complex64), (np.complex128, complex128), (np.object, string), (np.bool, bool), (_np_qint8, qint8), (_np_quint8, quint8), (_np_qint16, qint16), (_np_quint16, quint16), (_np_qint32, qint32)])
A:tensorflow.python.framework.dtypes.QUANTIZED_DTYPES->frozenset([qint8, quint8, qint16, quint16, qint32, qint8_ref, quint8_ref, qint16_ref, quint16_ref, qint32_ref])
tensorflow.framework.dtypes.DType(self,type_enum)
tensorflow.framework.dtypes.DType.__eq__(self,other)
tensorflow.framework.dtypes.DType.__hash__(self)
tensorflow.framework.dtypes.DType.__ne__(self,other)
tensorflow.framework.dtypes.DType.__repr__(self)
tensorflow.framework.dtypes.DType.__str__(self)
tensorflow.framework.dtypes.DType._as_ref(self)
tensorflow.framework.dtypes.DType._is_ref_dtype(self)
tensorflow.framework.dtypes.DType.as_datatype_enum(self)
tensorflow.framework.dtypes.DType.as_numpy_dtype(self)
tensorflow.framework.dtypes.DType.base_dtype(self)
tensorflow.framework.dtypes.DType.is_bool(self)
tensorflow.framework.dtypes.DType.is_compatible_with(self,other)
tensorflow.framework.dtypes.DType.is_complex(self)
tensorflow.framework.dtypes.DType.is_floating(self)
tensorflow.framework.dtypes.DType.is_integer(self)
tensorflow.framework.dtypes.DType.is_numpy_compatible(self)
tensorflow.framework.dtypes.DType.is_quantized(self)
tensorflow.framework.dtypes.DType.is_unsigned(self)
tensorflow.framework.dtypes.DType.limits(self,clip_negative=True)
tensorflow.framework.dtypes.DType.max(self)
tensorflow.framework.dtypes.DType.min(self)
tensorflow.framework.dtypes.DType.name(self)
tensorflow.framework.dtypes.DType.real_dtype(self)
tensorflow.framework.dtypes.DType.size(self)
tensorflow.framework.dtypes.as_dtype(type_value)
tensorflow.python.framework.dtypes.DType(self,type_enum)
tensorflow.python.framework.dtypes.DType.__eq__(self,other)
tensorflow.python.framework.dtypes.DType.__hash__(self)
tensorflow.python.framework.dtypes.DType.__init__(self,type_enum)
tensorflow.python.framework.dtypes.DType.__ne__(self,other)
tensorflow.python.framework.dtypes.DType.__repr__(self)
tensorflow.python.framework.dtypes.DType.__str__(self)
tensorflow.python.framework.dtypes.DType._as_ref(self)
tensorflow.python.framework.dtypes.DType._is_ref_dtype(self)
tensorflow.python.framework.dtypes.DType.as_datatype_enum(self)
tensorflow.python.framework.dtypes.DType.as_numpy_dtype(self)
tensorflow.python.framework.dtypes.DType.base_dtype(self)
tensorflow.python.framework.dtypes.DType.is_bool(self)
tensorflow.python.framework.dtypes.DType.is_compatible_with(self,other)
tensorflow.python.framework.dtypes.DType.is_complex(self)
tensorflow.python.framework.dtypes.DType.is_floating(self)
tensorflow.python.framework.dtypes.DType.is_integer(self)
tensorflow.python.framework.dtypes.DType.is_numpy_compatible(self)
tensorflow.python.framework.dtypes.DType.is_quantized(self)
tensorflow.python.framework.dtypes.DType.is_unsigned(self)
tensorflow.python.framework.dtypes.DType.limits(self,clip_negative=True)
tensorflow.python.framework.dtypes.DType.max(self)
tensorflow.python.framework.dtypes.DType.min(self)
tensorflow.python.framework.dtypes.DType.name(self)
tensorflow.python.framework.dtypes.DType.real_dtype(self)
tensorflow.python.framework.dtypes.DType.size(self)
tensorflow.python.framework.dtypes.as_dtype(type_value)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/subscribe.py----------------------------------------
A:tensorflow.python.framework.subscribe.tensors_type->type(tensors)
A:tensorflow.python.framework.subscribe.control_outputs[control_input]->set()
A:tensorflow.python.framework.subscribe.control_outputs->_ControlOutputCache()
A:tensorflow.python.framework.subscribe.update_control_input->control_cache.get_control_outputs(tensor.op)
A:tensorflow.python.framework.subscribe.out->tensorflow.python.ops.array_ops.identity(tensor)
A:tensorflow.python.framework.subscribe.out_type->type(out)
A:tensorflow.python.framework.subscribe.match->re.match('(?P<prefix_name>^.*?)/subscription/Identity[^/]+', tensor.name)
A:tensorflow.python.framework.subscribe.prefix_name->re.match('(?P<prefix_name>^.*?)/subscription/Identity[^/]+', tensor.name).group('prefix_name')
A:tensorflow.python.framework.subscribe.consumers->tensor.consumers()
A:tensorflow.python.framework.subscribe.result->_recursive_apply(tensors, lambda t: _subscribe(t, side_effects, control_outputs))
tensorflow.framework.subscribe._ControlOutputCache(self)
tensorflow.framework.subscribe._ControlOutputCache.calc_control_outputs(self,graph)
tensorflow.framework.subscribe._ControlOutputCache.get_control_outputs(self,op)
tensorflow.framework.subscribe._is_subscribed_identity(tensor)
tensorflow.framework.subscribe._recursive_apply(tensors,apply_fn)
tensorflow.framework.subscribe._subscribe(tensor,side_effects,control_cache)
tensorflow.framework.subscribe._subscribe_extend(tensor,side_effects)
tensorflow.framework.subscribe._subscribe_new(tensor,side_effects,control_cache)
tensorflow.framework.subscribe.subscribe(tensors,side_effects)
tensorflow.python.framework.subscribe._ControlOutputCache(self)
tensorflow.python.framework.subscribe._ControlOutputCache.__init__(self)
tensorflow.python.framework.subscribe._ControlOutputCache.calc_control_outputs(self,graph)
tensorflow.python.framework.subscribe._ControlOutputCache.get_control_outputs(self,op)
tensorflow.python.framework.subscribe._is_subscribed_identity(tensor)
tensorflow.python.framework.subscribe._recursive_apply(tensors,apply_fn)
tensorflow.python.framework.subscribe._subscribe(tensor,side_effects,control_cache)
tensorflow.python.framework.subscribe._subscribe_extend(tensor,side_effects)
tensorflow.python.framework.subscribe._subscribe_new(tensor,side_effects,control_cache)
tensorflow.python.framework.subscribe.subscribe(tensors,side_effects)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py----------------------------------------
A:tensorflow.python.framework.tensor_shape.self._value->int(value)
A:tensorflow.python.framework.tensor_shape.other->as_shape(other)
A:tensorflow.python.framework.tensor_shape.dims_iter->iter(dims)
tensorflow.framework.tensor_shape.Dimension(self,value)
tensorflow.framework.tensor_shape.Dimension.__add__(self,other)
tensorflow.framework.tensor_shape.Dimension.__div__(self,other)
tensorflow.framework.tensor_shape.Dimension.__eq__(self,other)
tensorflow.framework.tensor_shape.Dimension.__floordiv__(self,other)
tensorflow.framework.tensor_shape.Dimension.__ge__(self,other)
tensorflow.framework.tensor_shape.Dimension.__gt__(self,other)
tensorflow.framework.tensor_shape.Dimension.__index__(self)
tensorflow.framework.tensor_shape.Dimension.__int__(self)
tensorflow.framework.tensor_shape.Dimension.__le__(self,other)
tensorflow.framework.tensor_shape.Dimension.__lt__(self,other)
tensorflow.framework.tensor_shape.Dimension.__mod__(self,other)
tensorflow.framework.tensor_shape.Dimension.__mul__(self,other)
tensorflow.framework.tensor_shape.Dimension.__ne__(self,other)
tensorflow.framework.tensor_shape.Dimension.__repr__(self)
tensorflow.framework.tensor_shape.Dimension.__str__(self)
tensorflow.framework.tensor_shape.Dimension.__sub__(self,other)
tensorflow.framework.tensor_shape.Dimension.assert_is_compatible_with(self,other)
tensorflow.framework.tensor_shape.Dimension.is_compatible_with(self,other)
tensorflow.framework.tensor_shape.Dimension.merge_with(self,other)
tensorflow.framework.tensor_shape.Dimension.value(self)
tensorflow.framework.tensor_shape.TensorShape(self,dims)
tensorflow.framework.tensor_shape.TensorShape.__bool__(self)
tensorflow.framework.tensor_shape.TensorShape.__eq__(self,other)
tensorflow.framework.tensor_shape.TensorShape.__getitem__(self,key)
tensorflow.framework.tensor_shape.TensorShape.__iter__(self)
tensorflow.framework.tensor_shape.TensorShape.__len__(self)
tensorflow.framework.tensor_shape.TensorShape.__ne__(self,other)
tensorflow.framework.tensor_shape.TensorShape.__repr__(self)
tensorflow.framework.tensor_shape.TensorShape.__str__(self)
tensorflow.framework.tensor_shape.TensorShape.as_list(self)
tensorflow.framework.tensor_shape.TensorShape.as_proto(self)
tensorflow.framework.tensor_shape.TensorShape.assert_has_rank(self,rank)
tensorflow.framework.tensor_shape.TensorShape.assert_is_compatible_with(self,other)
tensorflow.framework.tensor_shape.TensorShape.assert_is_fully_defined(self)
tensorflow.framework.tensor_shape.TensorShape.assert_same_rank(self,other)
tensorflow.framework.tensor_shape.TensorShape.concatenate(self,other)
tensorflow.framework.tensor_shape.TensorShape.dims(self)
tensorflow.framework.tensor_shape.TensorShape.is_compatible_with(self,other)
tensorflow.framework.tensor_shape.TensorShape.is_fully_defined(self)
tensorflow.framework.tensor_shape.TensorShape.merge_with(self,other)
tensorflow.framework.tensor_shape.TensorShape.ndims(self)
tensorflow.framework.tensor_shape.TensorShape.num_elements(self)
tensorflow.framework.tensor_shape.TensorShape.with_rank(self,rank)
tensorflow.framework.tensor_shape.TensorShape.with_rank_at_least(self,rank)
tensorflow.framework.tensor_shape.TensorShape.with_rank_at_most(self,rank)
tensorflow.framework.tensor_shape.as_dimension(value)
tensorflow.framework.tensor_shape.as_shape(shape)
tensorflow.framework.tensor_shape.matrix(rows,cols)
tensorflow.framework.tensor_shape.scalar()
tensorflow.framework.tensor_shape.unknown_shape(ndims=None)
tensorflow.framework.tensor_shape.vector(length)
tensorflow.python.framework.tensor_shape.Dimension(self,value)
tensorflow.python.framework.tensor_shape.Dimension.__add__(self,other)
tensorflow.python.framework.tensor_shape.Dimension.__div__(self,other)
tensorflow.python.framework.tensor_shape.Dimension.__eq__(self,other)
tensorflow.python.framework.tensor_shape.Dimension.__floordiv__(self,other)
tensorflow.python.framework.tensor_shape.Dimension.__ge__(self,other)
tensorflow.python.framework.tensor_shape.Dimension.__gt__(self,other)
tensorflow.python.framework.tensor_shape.Dimension.__index__(self)
tensorflow.python.framework.tensor_shape.Dimension.__init__(self,value)
tensorflow.python.framework.tensor_shape.Dimension.__int__(self)
tensorflow.python.framework.tensor_shape.Dimension.__le__(self,other)
tensorflow.python.framework.tensor_shape.Dimension.__lt__(self,other)
tensorflow.python.framework.tensor_shape.Dimension.__mod__(self,other)
tensorflow.python.framework.tensor_shape.Dimension.__mul__(self,other)
tensorflow.python.framework.tensor_shape.Dimension.__ne__(self,other)
tensorflow.python.framework.tensor_shape.Dimension.__repr__(self)
tensorflow.python.framework.tensor_shape.Dimension.__str__(self)
tensorflow.python.framework.tensor_shape.Dimension.__sub__(self,other)
tensorflow.python.framework.tensor_shape.Dimension.assert_is_compatible_with(self,other)
tensorflow.python.framework.tensor_shape.Dimension.is_compatible_with(self,other)
tensorflow.python.framework.tensor_shape.Dimension.merge_with(self,other)
tensorflow.python.framework.tensor_shape.Dimension.value(self)
tensorflow.python.framework.tensor_shape.TensorShape(self,dims)
tensorflow.python.framework.tensor_shape.TensorShape.__bool__(self)
tensorflow.python.framework.tensor_shape.TensorShape.__eq__(self,other)
tensorflow.python.framework.tensor_shape.TensorShape.__getitem__(self,key)
tensorflow.python.framework.tensor_shape.TensorShape.__init__(self,dims)
tensorflow.python.framework.tensor_shape.TensorShape.__iter__(self)
tensorflow.python.framework.tensor_shape.TensorShape.__len__(self)
tensorflow.python.framework.tensor_shape.TensorShape.__ne__(self,other)
tensorflow.python.framework.tensor_shape.TensorShape.__repr__(self)
tensorflow.python.framework.tensor_shape.TensorShape.__str__(self)
tensorflow.python.framework.tensor_shape.TensorShape.as_list(self)
tensorflow.python.framework.tensor_shape.TensorShape.as_proto(self)
tensorflow.python.framework.tensor_shape.TensorShape.assert_has_rank(self,rank)
tensorflow.python.framework.tensor_shape.TensorShape.assert_is_compatible_with(self,other)
tensorflow.python.framework.tensor_shape.TensorShape.assert_is_fully_defined(self)
tensorflow.python.framework.tensor_shape.TensorShape.assert_same_rank(self,other)
tensorflow.python.framework.tensor_shape.TensorShape.concatenate(self,other)
tensorflow.python.framework.tensor_shape.TensorShape.dims(self)
tensorflow.python.framework.tensor_shape.TensorShape.is_compatible_with(self,other)
tensorflow.python.framework.tensor_shape.TensorShape.is_fully_defined(self)
tensorflow.python.framework.tensor_shape.TensorShape.merge_with(self,other)
tensorflow.python.framework.tensor_shape.TensorShape.ndims(self)
tensorflow.python.framework.tensor_shape.TensorShape.num_elements(self)
tensorflow.python.framework.tensor_shape.TensorShape.with_rank(self,rank)
tensorflow.python.framework.tensor_shape.TensorShape.with_rank_at_least(self,rank)
tensorflow.python.framework.tensor_shape.TensorShape.with_rank_at_most(self,rank)
tensorflow.python.framework.tensor_shape.as_dimension(value)
tensorflow.python.framework.tensor_shape.as_shape(shape)
tensorflow.python.framework.tensor_shape.matrix(rows,cols)
tensorflow.python.framework.tensor_shape.scalar()
tensorflow.python.framework.tensor_shape.unknown_shape(ndims=None)
tensorflow.python.framework.tensor_shape.vector(length)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/importer.py----------------------------------------
A:tensorflow.python.framework.importer.types->_ArgToTypesNoRef(node_def, arg_def)
A:tensorflow.python.framework.importer.components->tensor_name.split(':')
A:tensorflow.python.framework.importer.output_index->int(components[1])
A:tensorflow.python.framework.importer.input_name->tensorflow.python.util.compat.as_str(input_name)
A:tensorflow.python.framework.importer.(input_op_name, output_index)->_ParseTensorName(input_name)
A:tensorflow.python.framework.importer.graph_def->tensorflow.core.framework.graph_pb2.GraphDef()
A:tensorflow.python.framework.importer.return_elements->tuple(return_elements)
A:tensorflow.python.framework.importer.used_input_keys->set()
A:tensorflow.python.framework.importer.op_dict->copy.copy(op_dict)
A:tensorflow.python.framework.importer.g->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.framework.importer.functions->tensorflow.python.framework.function._from_library(graph_def.library)
A:tensorflow.python.framework.importer.attr_def->_FindAttrInOpDef(key, producer_op_def)
A:tensorflow.python.framework.importer.output_types->_OutputTypes(node, op_dict)
A:tensorflow.python.framework.importer.name_to_op[node.name]->tensorflow.python.framework.ops.get_default_graph().create_op(node.op, [], output_types, name=node.name, attrs=node.attr, compute_shapes=False, compute_device=False, op_def=op_def)
A:tensorflow.python.framework.importer.input_types->_InputTypes(node, op_dict)
A:tensorflow.python.framework.importer.op_to_bind_to->class_value[5:].decode()
A:tensorflow.python.framework.importer.(operation_name, output_index)->_ParseTensorName(name)
A:tensorflow.python.framework.importer.output_shape->tensorflow.python.framework.tensor_shape.TensorShape(None if dims.unknown_rank else [dim.size if dim.size >= 0 else None for dim in dims.dim])
A:tensorflow.python.framework.importer.unused_input_keys->frozenset(input_map.keys()).difference(used_input_keys)
A:tensorflow.python.framework.importer.name->tensorflow.python.util.compat.as_str(name)
tensorflow.framework.importer._ArgToTypesNoRef(node_def,arg_def)
tensorflow.framework.importer._ArgsToTypes(node_def,arg_list)
tensorflow.framework.importer._CanonicalInputName(input_name)
tensorflow.framework.importer._FindAttrInOpDef(attr_name,op_def)
tensorflow.framework.importer._GetNodeAttr(node_def,attr_name)
tensorflow.framework.importer._InputTypes(node_def,op_dict)
tensorflow.framework.importer._InvalidNodeMessage(node,message)
tensorflow.framework.importer._IsControlInput(input_name)
tensorflow.framework.importer._MaybeDevice(device)
tensorflow.framework.importer._OutputTypes(node_def,op_dict)
tensorflow.framework.importer._ParseTensorName(tensor_name)
tensorflow.framework.importer._SingleArgToTypes(node_def,arg_def)
tensorflow.framework.importer.import_graph_def(graph_def,input_map=None,return_elements=None,name=None,op_dict=None,producer_op_list=None)
tensorflow.python.framework.importer._ArgToTypesNoRef(node_def,arg_def)
tensorflow.python.framework.importer._ArgsToTypes(node_def,arg_list)
tensorflow.python.framework.importer._CanonicalInputName(input_name)
tensorflow.python.framework.importer._FindAttrInOpDef(attr_name,op_def)
tensorflow.python.framework.importer._GetNodeAttr(node_def,attr_name)
tensorflow.python.framework.importer._InputTypes(node_def,op_dict)
tensorflow.python.framework.importer._InvalidNodeMessage(node,message)
tensorflow.python.framework.importer._IsControlInput(input_name)
tensorflow.python.framework.importer._MaybeDevice(device)
tensorflow.python.framework.importer._OutputTypes(node_def,op_dict)
tensorflow.python.framework.importer._ParseTensorName(tensor_name)
tensorflow.python.framework.importer._SingleArgToTypes(node_def,arg_def)
tensorflow.python.framework.importer.import_graph_def(graph_def,input_map=None,return_elements=None,name=None,op_dict=None,producer_op_list=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py----------------------------------------
A:tensorflow.python.framework.errors_impl.curr_traceback_list->traceback.format_list(original_op.traceback)
A:tensorflow.python.framework.errors_impl._EXCEPTION_CLASS_TO_CODE->dict(((class_, code) for (code, class_) in _CODE_TO_EXCEPTION_CLASS.items()))
A:tensorflow.python.framework.errors_impl.exc_type->exception_type_from_error_code(error_code)
A:tensorflow.python.framework.errors_impl.status->tensorflow.python.pywrap_tensorflow.TF_NewStatus()
tensorflow.errors_impl.AbortedError(self,node_def,op,message)
tensorflow.errors_impl.AlreadyExistsError(self,node_def,op,message)
tensorflow.errors_impl.CancelledError(self,node_def,op,message)
tensorflow.errors_impl.DataLossError(self,node_def,op,message)
tensorflow.errors_impl.DeadlineExceededError(self,node_def,op,message)
tensorflow.errors_impl.FailedPreconditionError(self,node_def,op,message)
tensorflow.errors_impl.InternalError(self,node_def,op,message)
tensorflow.errors_impl.InvalidArgumentError(self,node_def,op,message)
tensorflow.errors_impl.NotFoundError(self,node_def,op,message)
tensorflow.errors_impl.OpError(self,node_def,op,message,error_code)
tensorflow.errors_impl.OpError.__str__(self)
tensorflow.errors_impl.OpError.error_code(self)
tensorflow.errors_impl.OpError.message(self)
tensorflow.errors_impl.OpError.node_def(self)
tensorflow.errors_impl.OpError.op(self)
tensorflow.errors_impl.OutOfRangeError(self,node_def,op,message)
tensorflow.errors_impl.PermissionDeniedError(self,node_def,op,message)
tensorflow.errors_impl.ResourceExhaustedError(self,node_def,op,message)
tensorflow.errors_impl.UnauthenticatedError(self,node_def,op,message)
tensorflow.errors_impl.UnavailableError(self,node_def,op,message)
tensorflow.errors_impl.UnimplementedError(self,node_def,op,message)
tensorflow.errors_impl.UnknownError(self,node_def,op,message,error_code=UNKNOWN)
tensorflow.errors_impl._make_specific_exception(node_def,op,message,error_code)
tensorflow.errors_impl.error_code_from_exception_type(cls)
tensorflow.errors_impl.exception_type_from_error_code(error_code)
tensorflow.errors_impl.raise_exception_on_not_ok_status()
tensorflow.python.framework.errors_impl.AbortedError(self,node_def,op,message)
tensorflow.python.framework.errors_impl.AbortedError.__init__(self,node_def,op,message)
tensorflow.python.framework.errors_impl.AlreadyExistsError(self,node_def,op,message)
tensorflow.python.framework.errors_impl.AlreadyExistsError.__init__(self,node_def,op,message)
tensorflow.python.framework.errors_impl.CancelledError(self,node_def,op,message)
tensorflow.python.framework.errors_impl.CancelledError.__init__(self,node_def,op,message)
tensorflow.python.framework.errors_impl.DataLossError(self,node_def,op,message)
tensorflow.python.framework.errors_impl.DataLossError.__init__(self,node_def,op,message)
tensorflow.python.framework.errors_impl.DeadlineExceededError(self,node_def,op,message)
tensorflow.python.framework.errors_impl.DeadlineExceededError.__init__(self,node_def,op,message)
tensorflow.python.framework.errors_impl.FailedPreconditionError(self,node_def,op,message)
tensorflow.python.framework.errors_impl.FailedPreconditionError.__init__(self,node_def,op,message)
tensorflow.python.framework.errors_impl.InternalError(self,node_def,op,message)
tensorflow.python.framework.errors_impl.InternalError.__init__(self,node_def,op,message)
tensorflow.python.framework.errors_impl.InvalidArgumentError(self,node_def,op,message)
tensorflow.python.framework.errors_impl.InvalidArgumentError.__init__(self,node_def,op,message)
tensorflow.python.framework.errors_impl.NotFoundError(self,node_def,op,message)
tensorflow.python.framework.errors_impl.NotFoundError.__init__(self,node_def,op,message)
tensorflow.python.framework.errors_impl.OpError(self,node_def,op,message,error_code)
tensorflow.python.framework.errors_impl.OpError.__init__(self,node_def,op,message,error_code)
tensorflow.python.framework.errors_impl.OpError.__str__(self)
tensorflow.python.framework.errors_impl.OpError.error_code(self)
tensorflow.python.framework.errors_impl.OpError.message(self)
tensorflow.python.framework.errors_impl.OpError.node_def(self)
tensorflow.python.framework.errors_impl.OpError.op(self)
tensorflow.python.framework.errors_impl.OutOfRangeError(self,node_def,op,message)
tensorflow.python.framework.errors_impl.OutOfRangeError.__init__(self,node_def,op,message)
tensorflow.python.framework.errors_impl.PermissionDeniedError(self,node_def,op,message)
tensorflow.python.framework.errors_impl.PermissionDeniedError.__init__(self,node_def,op,message)
tensorflow.python.framework.errors_impl.ResourceExhaustedError(self,node_def,op,message)
tensorflow.python.framework.errors_impl.ResourceExhaustedError.__init__(self,node_def,op,message)
tensorflow.python.framework.errors_impl.UnauthenticatedError(self,node_def,op,message)
tensorflow.python.framework.errors_impl.UnauthenticatedError.__init__(self,node_def,op,message)
tensorflow.python.framework.errors_impl.UnavailableError(self,node_def,op,message)
tensorflow.python.framework.errors_impl.UnavailableError.__init__(self,node_def,op,message)
tensorflow.python.framework.errors_impl.UnimplementedError(self,node_def,op,message)
tensorflow.python.framework.errors_impl.UnimplementedError.__init__(self,node_def,op,message)
tensorflow.python.framework.errors_impl.UnknownError(self,node_def,op,message,error_code=UNKNOWN)
tensorflow.python.framework.errors_impl.UnknownError.__init__(self,node_def,op,message,error_code=UNKNOWN)
tensorflow.python.framework.errors_impl._make_specific_exception(node_def,op,message,error_code)
tensorflow.python.framework.errors_impl.error_code_from_exception_type(cls)
tensorflow.python.framework.errors_impl.exception_type_from_error_code(error_code)
tensorflow.python.framework.errors_impl.raise_exception_on_not_ok_status()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/load_library.py----------------------------------------
A:tensorflow.python.framework.load_library.status->tensorflow.python.pywrap_tensorflow.TF_NewStatus()
A:tensorflow.python.framework.load_library.lib_handle->tensorflow.python.pywrap_tensorflow.TF_LoadLibrary(library_filename, status)
A:tensorflow.python.framework.load_library.error_code->tensorflow.python.pywrap_tensorflow.TF_GetCode(status)
A:tensorflow.python.framework.load_library.error_msg->tensorflow.python.util.compat.as_text(py_tf.TF_Message(status))
A:tensorflow.python.framework.load_library.op_list_str->tensorflow.python.pywrap_tensorflow.TF_GetOpList(lib_handle)
A:tensorflow.python.framework.load_library.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.framework.load_library.wrappers->tensorflow.python.pywrap_tensorflow.GetPythonWrappers(op_list_str)
A:tensorflow.python.framework.load_library.module_name->hashlib.md5(wrappers).hexdigest()
A:tensorflow.python.framework.load_library.module->imp.new_module(module_name)
tensorflow.framework.load_library.load_file_system_library(library_filename)
tensorflow.framework.load_library.load_op_library(library_filename)
tensorflow.python.framework.load_library.load_file_system_library(library_filename)
tensorflow.python.framework.load_library.load_op_library(library_filename)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/test_ops.py----------------------------------------
A:tensorflow.python.framework.test_ops.result->_InitOpDefLibrary().apply_op('TestStringOutput', input=input, name=name)
A:tensorflow.python.framework.test_ops._TestStringOutputOutput->collections.namedtuple('TestStringOutput', _test_string_output_outputs)
A:tensorflow.python.framework.test_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.framework.test_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.framework.test_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.framework.test_ops._InitOpDefLibrary()
tensorflow.framework.test_ops.graph_def_version(name=None)
tensorflow.framework.test_ops.kernel_label(name=None)
tensorflow.framework.test_ops.old(name=None)
tensorflow.framework.test_ops.requires_older_graph_version(name=None)
tensorflow.framework.test_ops.resource_create_op(resource,name=None)
tensorflow.framework.test_ops.resource_initialized_op(resource,name=None)
tensorflow.framework.test_ops.resource_using_op(resource,name=None)
tensorflow.framework.test_ops.stub_resource_handle_op(container=None,shared_name=None,name=None)
tensorflow.framework.test_ops.test_string_output(input,name=None)
tensorflow.python.framework.test_ops._InitOpDefLibrary()
tensorflow.python.framework.test_ops.graph_def_version(name=None)
tensorflow.python.framework.test_ops.kernel_label(name=None)
tensorflow.python.framework.test_ops.old(name=None)
tensorflow.python.framework.test_ops.requires_older_graph_version(name=None)
tensorflow.python.framework.test_ops.resource_create_op(resource,name=None)
tensorflow.python.framework.test_ops.resource_initialized_op(resource,name=None)
tensorflow.python.framework.test_ops.resource_using_op(resource,name=None)
tensorflow.python.framework.test_ops.stub_resource_handle_op(container=None,shared_name=None,name=None)
tensorflow.python.framework.test_ops.test_string_output(input,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/versions.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/constant_op.py----------------------------------------
A:tensorflow.python.framework.constant_op.g->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.framework.constant_op.tensor_value->tensorflow.core.framework.attr_value_pb2.AttrValue()
A:tensorflow.python.framework.constant_op.dtype_value->tensorflow.core.framework.attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)
tensorflow.constant_op._constant_tensor_conversion_function(v,dtype=None,name=None,as_ref=False)
tensorflow.constant_op._dimension_tensor_conversion_function(d,dtype=None,name=None,as_ref=False)
tensorflow.constant_op._tensor_shape_tensor_conversion_function(s,dtype=None,name=None,as_ref=False)
tensorflow.constant_op.constant(value,dtype=None,shape=None,name='Const',verify_shape=False)
tensorflow.python.framework.constant_op._constant_tensor_conversion_function(v,dtype=None,name=None,as_ref=False)
tensorflow.python.framework.constant_op._dimension_tensor_conversion_function(d,dtype=None,name=None,as_ref=False)
tensorflow.python.framework.constant_op._tensor_shape_tensor_conversion_function(s,dtype=None,name=None,as_ref=False)
tensorflow.python.framework.constant_op.constant(value,dtype=None,shape=None,name='Const',verify_shape=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/cpp_shape_inference_pb2.py----------------------------------------
A:tensorflow.python.framework.cpp_shape_inference_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.python.framework.cpp_shape_inference_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/python/framework/cpp_shape_inference.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n5tensorflow/python/framework/cpp_shape_inference.proto\x12\ntensorflow\x1a%tensorflow/core/framework/types.proto\x1a,tensorflow/core/framework/tensor_shape.proto"¦\x01\n\x17CppShapeInferenceResult\x12+\n\x05shape\x18\x01 \x01(\x0b2\x1c.tensorflow.TensorShapeProto\x122\n\x0chandle_shape\x18\x02 \x01(\x0b2\x1c.tensorflow.TensorShapeProto\x12*\n\x0chandle_dtype\x18\x03 \x01(\x0e2\x14.tensorflow.DataType"e\n\x1dCppShapeInferenceInputsNeeded\x12\x1c\n\x14input_tensors_needed\x18\x01 \x03(\x05\x12&\n\x1einput_tensors_as_shapes_needed\x18\x02 \x03(\x05B\x03ø\x01\x01b\x06proto3'), dependencies=[tensorflow_dot_core_dot_framework_dot_types__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_tensor__shape__pb2.DESCRIPTOR])
A:tensorflow.python.framework.cpp_shape_inference_pb2._CPPSHAPEINFERENCERESULT->google.protobuf.descriptor.Descriptor(name='CppShapeInferenceResult', full_name='tensorflow.CppShapeInferenceResult', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='shape', full_name='tensorflow.CppShapeInferenceResult.shape', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='handle_shape', full_name='tensorflow.CppShapeInferenceResult.handle_shape', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='handle_dtype', full_name='tensorflow.CppShapeInferenceResult.handle_dtype', index=2, number=3, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=155, serialized_end=321)
A:tensorflow.python.framework.cpp_shape_inference_pb2._CPPSHAPEINFERENCEINPUTSNEEDED->google.protobuf.descriptor.Descriptor(name='CppShapeInferenceInputsNeeded', full_name='tensorflow.CppShapeInferenceInputsNeeded', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='input_tensors_needed', full_name='tensorflow.CppShapeInferenceInputsNeeded.input_tensors_needed', index=0, number=1, type=5, cpp_type=1, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='input_tensors_as_shapes_needed', full_name='tensorflow.CppShapeInferenceInputsNeeded.input_tensors_as_shapes_needed', index=1, number=2, type=5, cpp_type=1, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=323, serialized_end=424)
A:tensorflow.python.framework.cpp_shape_inference_pb2.CppShapeInferenceResult->google.protobuf.reflection.GeneratedProtocolMessageType('CppShapeInferenceResult', (_message.Message,), dict(DESCRIPTOR=_CPPSHAPEINFERENCERESULT, __module__='tensorflow.python.framework.cpp_shape_inference_pb2'))
A:tensorflow.python.framework.cpp_shape_inference_pb2.CppShapeInferenceInputsNeeded->google.protobuf.reflection.GeneratedProtocolMessageType('CppShapeInferenceInputsNeeded', (_message.Message,), dict(DESCRIPTOR=_CPPSHAPEINFERENCEINPUTSNEEDED, __module__='tensorflow.python.framework.cpp_shape_inference_pb2'))
A:tensorflow.python.framework.cpp_shape_inference_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/device.py----------------------------------------
A:tensorflow.python.framework.device.self.device_type->y[0].upper()
A:tensorflow.python.framework.device.self._job->str(job)
A:tensorflow.python.framework.device.self._replica->int(replica)
A:tensorflow.python.framework.device.self._task->int(task)
A:tensorflow.python.framework.device.ly->len(y)
A:tensorflow.python.framework.device.self.device_index->int(y[2])
A:tensorflow.python.framework.device.device_index_string->str(self.device_index)
A:tensorflow.python.framework.device.device->DeviceSpec.from_string(device)
A:tensorflow.python.framework.device.spec->DeviceSpec.from_string(spec or '')
A:tensorflow.python.framework.device.current_device->DeviceSpec.from_string(node_def.device or '')
A:tensorflow.python.framework.device.copy_spec->copy.copy(spec)
tensorflow.framework.device.DeviceSpec(self,job=None,replica=None,task=None,device_type=None,device_index=None)
tensorflow.framework.device.DeviceSpec._clear(self)
tensorflow.framework.device.DeviceSpec.from_string(spec)
tensorflow.framework.device.DeviceSpec.job(self)
tensorflow.framework.device.DeviceSpec.job(self,job)
tensorflow.framework.device.DeviceSpec.merge_from(self,dev)
tensorflow.framework.device.DeviceSpec.parse_from_string(self,spec)
tensorflow.framework.device.DeviceSpec.replica(self)
tensorflow.framework.device.DeviceSpec.replica(self,replica)
tensorflow.framework.device.DeviceSpec.task(self)
tensorflow.framework.device.DeviceSpec.task(self,task)
tensorflow.framework.device.DeviceSpec.to_string(self)
tensorflow.framework.device.canonical_name(device)
tensorflow.framework.device.check_valid(spec)
tensorflow.framework.device.merge_device(spec)
tensorflow.python.framework.device.DeviceSpec(self,job=None,replica=None,task=None,device_type=None,device_index=None)
tensorflow.python.framework.device.DeviceSpec.__init__(self,job=None,replica=None,task=None,device_type=None,device_index=None)
tensorflow.python.framework.device.DeviceSpec._clear(self)
tensorflow.python.framework.device.DeviceSpec.from_string(spec)
tensorflow.python.framework.device.DeviceSpec.job(self)
tensorflow.python.framework.device.DeviceSpec.job(self,job)
tensorflow.python.framework.device.DeviceSpec.merge_from(self,dev)
tensorflow.python.framework.device.DeviceSpec.parse_from_string(self,spec)
tensorflow.python.framework.device.DeviceSpec.replica(self)
tensorflow.python.framework.device.DeviceSpec.replica(self,replica)
tensorflow.python.framework.device.DeviceSpec.task(self)
tensorflow.python.framework.device.DeviceSpec.task(self,task)
tensorflow.python.framework.device.DeviceSpec.to_string(self)
tensorflow.python.framework.device.canonical_name(device)
tensorflow.python.framework.device.check_valid(spec)
tensorflow.python.framework.device.merge_device(spec)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/random_seed.py----------------------------------------
tensorflow.framework.random_seed._truncate_seed(seed)
tensorflow.framework.random_seed.get_seed(op_seed)
tensorflow.framework.random_seed.set_random_seed(seed)
tensorflow.python.framework.random_seed._truncate_seed(seed)
tensorflow.python.framework.random_seed.get_seed(op_seed)
tensorflow.python.framework.random_seed.set_random_seed(seed)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/errors.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/ops.py----------------------------------------
A:tensorflow.python.framework.ops.existing->getattr(clazz_object, operator, None)
A:tensorflow.python.framework.ops.line->line.strip().strip()
A:tensorflow.python.framework.ops.conv_fn->getattr(obj, '_as_graph_element', None)
A:tensorflow.python.framework.ops._TENSOR_LIKE_TYPES->tuple(list(_TENSOR_LIKE_TYPES) + [tensor_type])
A:tensorflow.python.framework.ops.self._dtype->tensorflow.python.framework.dtypes.as_dtype(dtype)
A:tensorflow.python.framework.ops.self._shape->self._shape.merge_with(shape)
A:tensorflow.python.framework.ops.self._handle_shape->tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto()
A:tensorflow.python.framework.ops.dtype->tensorflow.python.framework.dtypes.as_dtype(dtype)
A:tensorflow.python.framework.ops.ret->self._GetGlobalDefaultGraph()
A:tensorflow.python.framework.ops.IndexedSlicesValue->collections.namedtuple('IndexedSlicesValue', ['values', 'indices', 'dense_shape'])
A:tensorflow.python.framework.ops.node_def->_NodeDef(op_type, name, device=None, attrs=attrs)
A:tensorflow.python.framework.ops.node_def.op->tensorflow.python.util.compat.as_bytes(op_type)
A:tensorflow.python.framework.ops.node_def.name->tensorflow.python.util.compat.as_bytes(name)
A:tensorflow.python.framework.ops.node_def.device->_device_string(device)
A:tensorflow.python.framework.ops._VALID_OP_NAME_REGEX->re.compile('^[A-Za-z0-9.][A-Za-z0-9_.\\-/]*$')
A:tensorflow.python.framework.ops._VALID_SCOPE_NAME_REGEX->re.compile('^[A-Za-z0-9_.\\-/]*$')
A:tensorflow.python.framework.ops.self._node_def->copy.deepcopy(node_def)
A:tensorflow.python.framework.ops.self._inputs->list(inputs)
A:tensorflow.python.framework.ops.self._traceback->_extract_stack()
A:tensorflow.python.framework.ops.self._control_flow_context->_get_graph_from_inputs(values)._get_control_flow_context()
A:tensorflow.python.framework.ops.self._id_value->self._graph._next_id()
A:tensorflow.python.framework.ops.self._node_def.device->_device_string(device)
A:tensorflow.python.framework.ops._gradient_registry->tensorflow.python.framework.registry.Registry('gradient')
A:tensorflow.python.framework.ops.op_type->op.get_attr('_gradient_op_type')
A:tensorflow.python.framework.ops._shape_registry->tensorflow.python.framework.registry.Registry('shape functions')
A:tensorflow.python.framework.ops._default_shape_function_registry->tensorflow.python.framework.registry.Registry('default shape functions')
A:tensorflow.python.framework.ops.shape_func->tensorflow.python.framework.registry.Registry('default shape functions').lookup(op.type)
A:tensorflow.python.framework.ops.shapes->shape_func(op)
A:tensorflow.python.framework.ops._stats_registry->tensorflow.python.framework.registry.Registry('statistical functions')
A:tensorflow.python.framework.ops.stats_func->tensorflow.python.framework.registry.Registry('statistical functions').lookup(node.op + ',' + statistic_type)
A:tensorflow.python.framework.ops.result->OpStats(statistic_type)
A:tensorflow.python.framework.ops.self._lock->threading.Lock()
A:tensorflow.python.framework.ops.self._nodes_by_id->dict()
A:tensorflow.python.framework.ops.self._nodes_by_name->dict()
A:tensorflow.python.framework.ops.self._functions->collections.OrderedDict()
A:tensorflow.python.framework.ops.self._graph_def_versions->tensorflow.core.framework.versions_pb2.VersionDef(producer=versions.GRAPH_DEF_VERSION, min_consumer=versions.GRAPH_DEF_VERSION_MIN_CONSUMER)
A:tensorflow.python.framework.ops.self._unfeedable_tensors->set()
A:tensorflow.python.framework.ops.self._unfetchable_ops->set()
A:tensorflow.python.framework.ops.self._registered_ops->tensorflow.python.framework.op_def_registry.get_registered_ops()
A:tensorflow.python.framework.ops.self._version->max(self._version, op._id)
A:tensorflow.python.framework.ops.graph->tensorflow.core.framework.graph_pb2.GraphDef()
A:tensorflow.python.framework.ops.grad_def->tensorflow.core.framework.function_pb2.GradientDef()
A:tensorflow.python.framework.ops.(result, _)->self._as_graph_def(from_version, add_shapes)
A:tensorflow.python.framework.ops.previous->self._functions.get(name, None)
A:tensorflow.python.framework.ops.name->tensorflow.python.util.compat.as_str(obj)
A:tensorflow.python.framework.ops.value->value(node_def)
A:tensorflow.python.framework.ops.control_inputs->self._control_dependencies_for_inputs(inputs)
A:tensorflow.python.framework.ops.all_colocation_groups->sorted(set(all_colocation_groups))
A:tensorflow.python.framework.ops.temp_obj->_as_graph_element(obj)
A:tensorflow.python.framework.ops.(op_name, out_n)->tensorflow.python.util.compat.as_str(obj).split(':')
A:tensorflow.python.framework.ops.out_n->int(out_n)
A:tensorflow.python.framework.ops.coll_list->self._collections.get(name, None)
A:tensorflow.python.framework.ops.regex->re.compile(scope)
A:tensorflow.python.framework.ops.new_stack->self.unique_name(name)
A:tensorflow.python.framework.ops.i->self._names_in_use.get(name, 0)
A:tensorflow.python.framework.ops.device_function->tensorflow.python.framework.device.merge_device(device_name_or_function)
A:tensorflow.python.framework.ops.self._seen_nodes->set()
A:tensorflow.python.framework.ops.self._old_control_flow_context->self._graph._get_control_flow_context()
A:tensorflow.python.framework.ops.input_ops->set([t.op for t in input_tensors])
A:tensorflow.python.framework.ops.current->self._current_control_dependencies()
A:tensorflow.python.framework.ops.c->self.as_graph_element(c)
A:tensorflow.python.framework.ops._default_session_stack->_DefaultStack()
A:tensorflow.python.framework.ops.session->get_default_session()
A:tensorflow.python.framework.ops.self._global_default_graph->Graph()
A:tensorflow.python.framework.ops._default_graph_stack->_DefaultGraphStack()
A:tensorflow.python.framework.ops.op_input_list->tuple(op_input_list)
A:tensorflow.python.framework.ops.graph_element->_as_graph_element(op_input)
A:tensorflow.python.framework.ops.g->_get_graph_from_inputs(values)
A:tensorflow.python.framework.ops._proto_function_registry->tensorflow.python.framework.registry.Registry('proto functions')
tensorflow.framework.ops.Graph(self)
tensorflow.framework.ops.Graph._ControlDependenciesController(self,graph,control_inputs)
tensorflow.framework.ops.Graph._ControlDependenciesController.__enter__(self)
tensorflow.framework.ops.Graph._ControlDependenciesController.__exit__(self,unused_type,unused_value,unused_traceback)
tensorflow.framework.ops.Graph._ControlDependenciesController.add_op(self,op)
tensorflow.framework.ops.Graph._ControlDependenciesController.control_inputs(self)
tensorflow.framework.ops.Graph._ControlDependenciesController.op_in_group(self,op)
tensorflow.framework.ops.Graph._add_function(self,function)
tensorflow.framework.ops.Graph._add_op(self,op)
tensorflow.framework.ops.Graph._apply_device_functions(self,op)
tensorflow.framework.ops.Graph._as_graph_def(self,from_version=None,add_shapes=False)
tensorflow.framework.ops.Graph._as_graph_element_locked(self,obj,allow_tensor,allow_operation)
tensorflow.framework.ops.Graph._attr_scope(self,attr_map)
tensorflow.framework.ops.Graph._check_not_finalized(self)
tensorflow.framework.ops.Graph._control_dependencies_for_inputs(self,input_tensors)
tensorflow.framework.ops.Graph._current_control_dependencies(self)
tensorflow.framework.ops.Graph._get_control_flow_context(self)
tensorflow.framework.ops.Graph._get_function(self,name)
tensorflow.framework.ops.Graph._is_function(self,name)
tensorflow.framework.ops.Graph._kernel_label_map(self,op_to_kernel_label_map)
tensorflow.framework.ops.Graph._last_id(self)
tensorflow.framework.ops.Graph._next_id(self)
tensorflow.framework.ops.Graph._original_op(self,op)
tensorflow.framework.ops.Graph._pop_control_dependencies_controller(self,controller)
tensorflow.framework.ops.Graph._push_control_dependencies_controller(self,controller)
tensorflow.framework.ops.Graph._record_op_seen_by_control_dependencies(self,op)
tensorflow.framework.ops.Graph._set_control_flow_context(self,context)
tensorflow.framework.ops.Graph._unsafe_unfinalize(self)
tensorflow.framework.ops.Graph.add_to_collection(self,name,value)
tensorflow.framework.ops.Graph.add_to_collections(self,names,value)
tensorflow.framework.ops.Graph.as_default(self)
tensorflow.framework.ops.Graph.as_graph_def(self,from_version=None,add_shapes=False)
tensorflow.framework.ops.Graph.as_graph_element(self,obj,allow_tensor=True,allow_operation=True)
tensorflow.framework.ops.Graph.building_function(self)
tensorflow.framework.ops.Graph.clear_collection(self,name)
tensorflow.framework.ops.Graph.colocate_with(self,op,ignore_existing=False)
tensorflow.framework.ops.Graph.container(self,container_name)
tensorflow.framework.ops.Graph.control_dependencies(self,control_inputs)
tensorflow.framework.ops.Graph.create_op(self,op_type,inputs,dtypes,input_types=None,name=None,attrs=None,op_def=None,compute_shapes=True,compute_device=True)
tensorflow.framework.ops.Graph.device(self,device_name_or_function)
tensorflow.framework.ops.Graph.finalize(self)
tensorflow.framework.ops.Graph.finalized(self)
tensorflow.framework.ops.Graph.get_all_collection_keys(self)
tensorflow.framework.ops.Graph.get_collection(self,name,scope=None)
tensorflow.framework.ops.Graph.get_collection_ref(self,name)
tensorflow.framework.ops.Graph.get_operation_by_name(self,name)
tensorflow.framework.ops.Graph.get_operations(self)
tensorflow.framework.ops.Graph.get_tensor_by_name(self,name)
tensorflow.framework.ops.Graph.gradient_override_map(self,op_type_map)
tensorflow.framework.ops.Graph.graph_def_versions(self)
tensorflow.framework.ops.Graph.is_feedable(self,tensor)
tensorflow.framework.ops.Graph.is_fetchable(self,tensor_or_op)
tensorflow.framework.ops.Graph.name_scope(self,name)
tensorflow.framework.ops.Graph.prevent_feeding(self,tensor)
tensorflow.framework.ops.Graph.prevent_fetching(self,op)
tensorflow.framework.ops.Graph.seed(self)
tensorflow.framework.ops.Graph.seed(self,seed)
tensorflow.framework.ops.Graph.unique_name(self,name,mark_as_used=True)
tensorflow.framework.ops.Graph.version(self)
tensorflow.framework.ops.GraphKeys(object)
tensorflow.framework.ops.GraphKeys.VARIABLES(cls)
tensorflow.framework.ops.IndexedSlices(self,values,indices,dense_shape=None)
tensorflow.framework.ops.IndexedSlices.__neg__(self)
tensorflow.framework.ops.IndexedSlices.__str__(self)
tensorflow.framework.ops.IndexedSlices.dense_shape(self)
tensorflow.framework.ops.IndexedSlices.device(self)
tensorflow.framework.ops.IndexedSlices.dtype(self)
tensorflow.framework.ops.IndexedSlices.graph(self)
tensorflow.framework.ops.IndexedSlices.indices(self)
tensorflow.framework.ops.IndexedSlices.name(self)
tensorflow.framework.ops.IndexedSlices.op(self)
tensorflow.framework.ops.IndexedSlices.values(self)
tensorflow.framework.ops.NotDifferentiable(op_type)
tensorflow.framework.ops.OpStats(self,statistic_type,value=None)
tensorflow.framework.ops.OpStats.__iadd__(self,other)
tensorflow.framework.ops.OpStats.statistic_type(self)
tensorflow.framework.ops.OpStats.statistic_type(self,statistic_type)
tensorflow.framework.ops.OpStats.value(self)
tensorflow.framework.ops.OpStats.value(self,value)
tensorflow.framework.ops.Operation(self,node_def,g,inputs=None,output_types=None,control_inputs=None,input_types=None,original_op=None,op_def=None)
tensorflow.framework.ops.Operation._InputList(self,op)
tensorflow.framework.ops.Operation._InputList.__bool__(self)
tensorflow.framework.ops.Operation._InputList.__getitem__(self,i)
tensorflow.framework.ops.Operation._InputList.__iter__(self)
tensorflow.framework.ops.Operation._InputList.__len__(self)
tensorflow.framework.ops.Operation.__repr__(self)
tensorflow.framework.ops.Operation.__str__(self)
tensorflow.framework.ops.Operation._add_control_input(self,op)
tensorflow.framework.ops.Operation._add_control_inputs(self,ops)
tensorflow.framework.ops.Operation._add_input(self,tensor,dtype=None)
tensorflow.framework.ops.Operation._get_control_flow_context(self)
tensorflow.framework.ops.Operation._id(self)
tensorflow.framework.ops.Operation._input_dtypes(self)
tensorflow.framework.ops.Operation._recompute_node_def(self)
tensorflow.framework.ops.Operation._set_control_flow_context(self,context)
tensorflow.framework.ops.Operation._set_device(self,device)
tensorflow.framework.ops.Operation._update_input(self,index,tensor,dtype=None)
tensorflow.framework.ops.Operation.colocation_groups(self)
tensorflow.framework.ops.Operation.control_inputs(self)
tensorflow.framework.ops.Operation.device(self)
tensorflow.framework.ops.Operation.get_attr(self,name)
tensorflow.framework.ops.Operation.graph(self)
tensorflow.framework.ops.Operation.inputs(self)
tensorflow.framework.ops.Operation.name(self)
tensorflow.framework.ops.Operation.node_def(self)
tensorflow.framework.ops.Operation.op_def(self)
tensorflow.framework.ops.Operation.outputs(self)
tensorflow.framework.ops.Operation.run(self,feed_dict=None,session=None)
tensorflow.framework.ops.Operation.traceback(self)
tensorflow.framework.ops.Operation.type(self)
tensorflow.framework.ops.Operation.values(self)
tensorflow.framework.ops.RegisterGradient(self,op_type)
tensorflow.framework.ops.RegisterShape(self,op_type)
tensorflow.framework.ops.RegisterStatistics(self,op_type,statistic_type)
tensorflow.framework.ops.Tensor(self,op,value_index,dtype)
tensorflow.framework.ops.Tensor.__bool__(self)
tensorflow.framework.ops.Tensor.__eq__(self,other)
tensorflow.framework.ops.Tensor.__hash__(self)
tensorflow.framework.ops.Tensor.__iter__(self)
tensorflow.framework.ops.Tensor.__nonzero__(self)
tensorflow.framework.ops.Tensor.__repr__(self)
tensorflow.framework.ops.Tensor.__str__(self)
tensorflow.framework.ops.Tensor._add_consumer(self,consumer)
tensorflow.framework.ops.Tensor._as_node_def_input(self)
tensorflow.framework.ops.Tensor._override_operator(operator,func)
tensorflow.framework.ops.Tensor._shape_as_list(self)
tensorflow.framework.ops.Tensor.consumers(self)
tensorflow.framework.ops.Tensor.device(self)
tensorflow.framework.ops.Tensor.dtype(self)
tensorflow.framework.ops.Tensor.eval(self,feed_dict=None,session=None)
tensorflow.framework.ops.Tensor.get_shape(self)
tensorflow.framework.ops.Tensor.graph(self)
tensorflow.framework.ops.Tensor.name(self)
tensorflow.framework.ops.Tensor.op(self)
tensorflow.framework.ops.Tensor.set_shape(self,shape)
tensorflow.framework.ops.Tensor.shape(self)
tensorflow.framework.ops.Tensor.value_index(self)
tensorflow.framework.ops._DefaultGraphStack(self)
tensorflow.framework.ops._DefaultGraphStack._GetGlobalDefaultGraph(self)
tensorflow.framework.ops._DefaultGraphStack.get_default(self)
tensorflow.framework.ops._DefaultGraphStack.reset(self)
tensorflow.framework.ops._DefaultStack(self)
tensorflow.framework.ops._DefaultStack.enforce_nesting(self)
tensorflow.framework.ops._DefaultStack.enforce_nesting(self,value)
tensorflow.framework.ops._DefaultStack.get_controller(self,default)
tensorflow.framework.ops._DefaultStack.get_default(self)
tensorflow.framework.ops._DefaultStack.reset(self)
tensorflow.framework.ops._NodeDef(op_type,name,device=None,attrs=None)
tensorflow.framework.ops._TensorLike(object)
tensorflow.framework.ops._TensorTensorConversionFunction(t,dtype=None,name=None,as_ref=False)
tensorflow.framework.ops._as_graph_element(obj)
tensorflow.framework.ops._assert_same_graph(original_item,item)
tensorflow.framework.ops._convert_stack(stack)
tensorflow.framework.ops._device_string(dev_spec)
tensorflow.framework.ops._eval_using_default_session(tensors,feed_dict,graph,session=None)
tensorflow.framework.ops._extract_stack()
tensorflow.framework.ops._get_graph_from_inputs(op_input_list,graph=None)
tensorflow.framework.ops._name_from_scope_name(name)
tensorflow.framework.ops._operation_conversion_error(op,dtype=None,name=None,as_ref=False)
tensorflow.framework.ops._override_helper(clazz_object,operator,func)
tensorflow.framework.ops._run_using_default_session(operation,feed_dict,graph,session=None)
tensorflow.framework.ops._set_call_cpp_shape_fn(call_cpp_shape_fn)
tensorflow.framework.ops.add_to_collection(name,value)
tensorflow.framework.ops.add_to_collections(names,value)
tensorflow.framework.ops.colocate_with(op,ignore_existing=False)
tensorflow.framework.ops.container(container_name)
tensorflow.framework.ops.control_dependencies(control_inputs)
tensorflow.framework.ops.convert_n_to_tensor(values,dtype=None,name=None,preferred_dtype=None)
tensorflow.framework.ops.convert_n_to_tensor_or_indexed_slices(values,dtype=None,name=None)
tensorflow.framework.ops.convert_to_tensor(value,dtype=None,name=None,preferred_dtype=None)
tensorflow.framework.ops.convert_to_tensor_or_indexed_slices(value,dtype=None,name=None)
tensorflow.framework.ops.default_session(session)
tensorflow.framework.ops.device(device_name_or_function)
tensorflow.framework.ops.get_all_collection_keys()
tensorflow.framework.ops.get_collection(key,scope=None)
tensorflow.framework.ops.get_collection_proto_type(collection_name)
tensorflow.framework.ops.get_collection_ref(key)
tensorflow.framework.ops.get_default_graph()
tensorflow.framework.ops.get_default_session()
tensorflow.framework.ops.get_from_proto_function(collection_name)
tensorflow.framework.ops.get_gradient_function(op)
tensorflow.framework.ops.get_stats_for_node_def(graph,node,statistic_type)
tensorflow.framework.ops.get_to_proto_function(collection_name)
tensorflow.framework.ops.internal_convert_n_to_tensor(values,dtype=None,name=None,as_ref=False,preferred_dtype=None)
tensorflow.framework.ops.internal_convert_n_to_tensor_or_indexed_slices(values,dtype=None,name=None,as_ref=False)
tensorflow.framework.ops.internal_convert_to_tensor(value,dtype=None,name=None,as_ref=False,preferred_dtype=None)
tensorflow.framework.ops.internal_convert_to_tensor_or_indexed_slices(value,dtype=None,name=None,as_ref=False)
tensorflow.framework.ops.is_dense_tensor_like(t)
tensorflow.framework.ops.name_scope(name,default_name=None,values=None)
tensorflow.framework.ops.op_scope(values,name,default_name=None)
tensorflow.framework.ops.prepend_name_scope(name,import_scope)
tensorflow.framework.ops.register_dense_tensor_like_type(tensor_type)
tensorflow.framework.ops.register_proto_function(collection_name,proto_type=None,to_proto=None,from_proto=None)
tensorflow.framework.ops.register_tensor_conversion_function(base_type,conversion_func,priority=100)
tensorflow.framework.ops.reset_default_graph()
tensorflow.framework.ops.set_shapes_for_outputs(op)
tensorflow.framework.ops.strip_name_scope(name,export_scope)
tensorflow.python.framework.ops.Graph(self)
tensorflow.python.framework.ops.Graph._ControlDependenciesController(self,graph,control_inputs)
tensorflow.python.framework.ops.Graph._ControlDependenciesController.__enter__(self)
tensorflow.python.framework.ops.Graph._ControlDependenciesController.__exit__(self,unused_type,unused_value,unused_traceback)
tensorflow.python.framework.ops.Graph._ControlDependenciesController.__init__(self,graph,control_inputs)
tensorflow.python.framework.ops.Graph._ControlDependenciesController.add_op(self,op)
tensorflow.python.framework.ops.Graph._ControlDependenciesController.control_inputs(self)
tensorflow.python.framework.ops.Graph._ControlDependenciesController.op_in_group(self,op)
tensorflow.python.framework.ops.Graph.__init__(self)
tensorflow.python.framework.ops.Graph._add_function(self,function)
tensorflow.python.framework.ops.Graph._add_op(self,op)
tensorflow.python.framework.ops.Graph._apply_device_functions(self,op)
tensorflow.python.framework.ops.Graph._as_graph_def(self,from_version=None,add_shapes=False)
tensorflow.python.framework.ops.Graph._as_graph_element_locked(self,obj,allow_tensor,allow_operation)
tensorflow.python.framework.ops.Graph._attr_scope(self,attr_map)
tensorflow.python.framework.ops.Graph._check_not_finalized(self)
tensorflow.python.framework.ops.Graph._control_dependencies_for_inputs(self,input_tensors)
tensorflow.python.framework.ops.Graph._current_control_dependencies(self)
tensorflow.python.framework.ops.Graph._get_control_flow_context(self)
tensorflow.python.framework.ops.Graph._get_function(self,name)
tensorflow.python.framework.ops.Graph._is_function(self,name)
tensorflow.python.framework.ops.Graph._kernel_label_map(self,op_to_kernel_label_map)
tensorflow.python.framework.ops.Graph._last_id(self)
tensorflow.python.framework.ops.Graph._next_id(self)
tensorflow.python.framework.ops.Graph._original_op(self,op)
tensorflow.python.framework.ops.Graph._pop_control_dependencies_controller(self,controller)
tensorflow.python.framework.ops.Graph._push_control_dependencies_controller(self,controller)
tensorflow.python.framework.ops.Graph._record_op_seen_by_control_dependencies(self,op)
tensorflow.python.framework.ops.Graph._set_control_flow_context(self,context)
tensorflow.python.framework.ops.Graph._unsafe_unfinalize(self)
tensorflow.python.framework.ops.Graph.add_to_collection(self,name,value)
tensorflow.python.framework.ops.Graph.add_to_collections(self,names,value)
tensorflow.python.framework.ops.Graph.as_default(self)
tensorflow.python.framework.ops.Graph.as_graph_def(self,from_version=None,add_shapes=False)
tensorflow.python.framework.ops.Graph.as_graph_element(self,obj,allow_tensor=True,allow_operation=True)
tensorflow.python.framework.ops.Graph.building_function(self)
tensorflow.python.framework.ops.Graph.clear_collection(self,name)
tensorflow.python.framework.ops.Graph.colocate_with(self,op,ignore_existing=False)
tensorflow.python.framework.ops.Graph.container(self,container_name)
tensorflow.python.framework.ops.Graph.control_dependencies(self,control_inputs)
tensorflow.python.framework.ops.Graph.create_op(self,op_type,inputs,dtypes,input_types=None,name=None,attrs=None,op_def=None,compute_shapes=True,compute_device=True)
tensorflow.python.framework.ops.Graph.device(self,device_name_or_function)
tensorflow.python.framework.ops.Graph.finalize(self)
tensorflow.python.framework.ops.Graph.finalized(self)
tensorflow.python.framework.ops.Graph.get_all_collection_keys(self)
tensorflow.python.framework.ops.Graph.get_collection(self,name,scope=None)
tensorflow.python.framework.ops.Graph.get_collection_ref(self,name)
tensorflow.python.framework.ops.Graph.get_operation_by_name(self,name)
tensorflow.python.framework.ops.Graph.get_operations(self)
tensorflow.python.framework.ops.Graph.get_tensor_by_name(self,name)
tensorflow.python.framework.ops.Graph.gradient_override_map(self,op_type_map)
tensorflow.python.framework.ops.Graph.graph_def_versions(self)
tensorflow.python.framework.ops.Graph.is_feedable(self,tensor)
tensorflow.python.framework.ops.Graph.is_fetchable(self,tensor_or_op)
tensorflow.python.framework.ops.Graph.name_scope(self,name)
tensorflow.python.framework.ops.Graph.prevent_feeding(self,tensor)
tensorflow.python.framework.ops.Graph.prevent_fetching(self,op)
tensorflow.python.framework.ops.Graph.seed(self)
tensorflow.python.framework.ops.Graph.seed(self,seed)
tensorflow.python.framework.ops.Graph.unique_name(self,name,mark_as_used=True)
tensorflow.python.framework.ops.Graph.version(self)
tensorflow.python.framework.ops.GraphKeys(object)
tensorflow.python.framework.ops.GraphKeys.VARIABLES(cls)
tensorflow.python.framework.ops.IndexedSlices(self,values,indices,dense_shape=None)
tensorflow.python.framework.ops.IndexedSlices.__init__(self,values,indices,dense_shape=None)
tensorflow.python.framework.ops.IndexedSlices.__neg__(self)
tensorflow.python.framework.ops.IndexedSlices.__str__(self)
tensorflow.python.framework.ops.IndexedSlices.dense_shape(self)
tensorflow.python.framework.ops.IndexedSlices.device(self)
tensorflow.python.framework.ops.IndexedSlices.dtype(self)
tensorflow.python.framework.ops.IndexedSlices.graph(self)
tensorflow.python.framework.ops.IndexedSlices.indices(self)
tensorflow.python.framework.ops.IndexedSlices.name(self)
tensorflow.python.framework.ops.IndexedSlices.op(self)
tensorflow.python.framework.ops.IndexedSlices.values(self)
tensorflow.python.framework.ops.NotDifferentiable(op_type)
tensorflow.python.framework.ops.OpStats(self,statistic_type,value=None)
tensorflow.python.framework.ops.OpStats.__iadd__(self,other)
tensorflow.python.framework.ops.OpStats.__init__(self,statistic_type,value=None)
tensorflow.python.framework.ops.OpStats.statistic_type(self)
tensorflow.python.framework.ops.OpStats.statistic_type(self,statistic_type)
tensorflow.python.framework.ops.OpStats.value(self)
tensorflow.python.framework.ops.OpStats.value(self,value)
tensorflow.python.framework.ops.Operation(self,node_def,g,inputs=None,output_types=None,control_inputs=None,input_types=None,original_op=None,op_def=None)
tensorflow.python.framework.ops.Operation._InputList(self,op)
tensorflow.python.framework.ops.Operation._InputList.__bool__(self)
tensorflow.python.framework.ops.Operation._InputList.__getitem__(self,i)
tensorflow.python.framework.ops.Operation._InputList.__init__(self,op)
tensorflow.python.framework.ops.Operation._InputList.__iter__(self)
tensorflow.python.framework.ops.Operation._InputList.__len__(self)
tensorflow.python.framework.ops.Operation.__init__(self,node_def,g,inputs=None,output_types=None,control_inputs=None,input_types=None,original_op=None,op_def=None)
tensorflow.python.framework.ops.Operation.__repr__(self)
tensorflow.python.framework.ops.Operation.__str__(self)
tensorflow.python.framework.ops.Operation._add_control_input(self,op)
tensorflow.python.framework.ops.Operation._add_control_inputs(self,ops)
tensorflow.python.framework.ops.Operation._add_input(self,tensor,dtype=None)
tensorflow.python.framework.ops.Operation._get_control_flow_context(self)
tensorflow.python.framework.ops.Operation._id(self)
tensorflow.python.framework.ops.Operation._input_dtypes(self)
tensorflow.python.framework.ops.Operation._recompute_node_def(self)
tensorflow.python.framework.ops.Operation._set_control_flow_context(self,context)
tensorflow.python.framework.ops.Operation._set_device(self,device)
tensorflow.python.framework.ops.Operation._update_input(self,index,tensor,dtype=None)
tensorflow.python.framework.ops.Operation.colocation_groups(self)
tensorflow.python.framework.ops.Operation.control_inputs(self)
tensorflow.python.framework.ops.Operation.device(self)
tensorflow.python.framework.ops.Operation.get_attr(self,name)
tensorflow.python.framework.ops.Operation.graph(self)
tensorflow.python.framework.ops.Operation.inputs(self)
tensorflow.python.framework.ops.Operation.name(self)
tensorflow.python.framework.ops.Operation.node_def(self)
tensorflow.python.framework.ops.Operation.op_def(self)
tensorflow.python.framework.ops.Operation.outputs(self)
tensorflow.python.framework.ops.Operation.run(self,feed_dict=None,session=None)
tensorflow.python.framework.ops.Operation.traceback(self)
tensorflow.python.framework.ops.Operation.type(self)
tensorflow.python.framework.ops.Operation.values(self)
tensorflow.python.framework.ops.RegisterGradient(self,op_type)
tensorflow.python.framework.ops.RegisterGradient.__init__(self,op_type)
tensorflow.python.framework.ops.RegisterShape(self,op_type)
tensorflow.python.framework.ops.RegisterShape.__init__(self,op_type)
tensorflow.python.framework.ops.RegisterStatistics(self,op_type,statistic_type)
tensorflow.python.framework.ops.RegisterStatistics.__init__(self,op_type,statistic_type)
tensorflow.python.framework.ops.Tensor(self,op,value_index,dtype)
tensorflow.python.framework.ops.Tensor.__bool__(self)
tensorflow.python.framework.ops.Tensor.__eq__(self,other)
tensorflow.python.framework.ops.Tensor.__hash__(self)
tensorflow.python.framework.ops.Tensor.__init__(self,op,value_index,dtype)
tensorflow.python.framework.ops.Tensor.__iter__(self)
tensorflow.python.framework.ops.Tensor.__nonzero__(self)
tensorflow.python.framework.ops.Tensor.__repr__(self)
tensorflow.python.framework.ops.Tensor.__str__(self)
tensorflow.python.framework.ops.Tensor._add_consumer(self,consumer)
tensorflow.python.framework.ops.Tensor._as_node_def_input(self)
tensorflow.python.framework.ops.Tensor._override_operator(operator,func)
tensorflow.python.framework.ops.Tensor._shape_as_list(self)
tensorflow.python.framework.ops.Tensor.consumers(self)
tensorflow.python.framework.ops.Tensor.device(self)
tensorflow.python.framework.ops.Tensor.dtype(self)
tensorflow.python.framework.ops.Tensor.eval(self,feed_dict=None,session=None)
tensorflow.python.framework.ops.Tensor.get_shape(self)
tensorflow.python.framework.ops.Tensor.graph(self)
tensorflow.python.framework.ops.Tensor.name(self)
tensorflow.python.framework.ops.Tensor.op(self)
tensorflow.python.framework.ops.Tensor.set_shape(self,shape)
tensorflow.python.framework.ops.Tensor.shape(self)
tensorflow.python.framework.ops.Tensor.value_index(self)
tensorflow.python.framework.ops._DefaultGraphStack(self)
tensorflow.python.framework.ops._DefaultGraphStack._GetGlobalDefaultGraph(self)
tensorflow.python.framework.ops._DefaultGraphStack.__init__(self)
tensorflow.python.framework.ops._DefaultGraphStack.get_default(self)
tensorflow.python.framework.ops._DefaultGraphStack.reset(self)
tensorflow.python.framework.ops._DefaultStack(self)
tensorflow.python.framework.ops._DefaultStack.__init__(self)
tensorflow.python.framework.ops._DefaultStack.enforce_nesting(self)
tensorflow.python.framework.ops._DefaultStack.enforce_nesting(self,value)
tensorflow.python.framework.ops._DefaultStack.get_controller(self,default)
tensorflow.python.framework.ops._DefaultStack.get_default(self)
tensorflow.python.framework.ops._DefaultStack.reset(self)
tensorflow.python.framework.ops._NodeDef(op_type,name,device=None,attrs=None)
tensorflow.python.framework.ops._TensorLike(object)
tensorflow.python.framework.ops._TensorTensorConversionFunction(t,dtype=None,name=None,as_ref=False)
tensorflow.python.framework.ops._as_graph_element(obj)
tensorflow.python.framework.ops._assert_same_graph(original_item,item)
tensorflow.python.framework.ops._convert_stack(stack)
tensorflow.python.framework.ops._device_string(dev_spec)
tensorflow.python.framework.ops._eval_using_default_session(tensors,feed_dict,graph,session=None)
tensorflow.python.framework.ops._extract_stack()
tensorflow.python.framework.ops._get_graph_from_inputs(op_input_list,graph=None)
tensorflow.python.framework.ops._name_from_scope_name(name)
tensorflow.python.framework.ops._operation_conversion_error(op,dtype=None,name=None,as_ref=False)
tensorflow.python.framework.ops._override_helper(clazz_object,operator,func)
tensorflow.python.framework.ops._run_using_default_session(operation,feed_dict,graph,session=None)
tensorflow.python.framework.ops._set_call_cpp_shape_fn(call_cpp_shape_fn)
tensorflow.python.framework.ops.add_to_collection(name,value)
tensorflow.python.framework.ops.add_to_collections(names,value)
tensorflow.python.framework.ops.colocate_with(op,ignore_existing=False)
tensorflow.python.framework.ops.container(container_name)
tensorflow.python.framework.ops.control_dependencies(control_inputs)
tensorflow.python.framework.ops.convert_n_to_tensor(values,dtype=None,name=None,preferred_dtype=None)
tensorflow.python.framework.ops.convert_n_to_tensor_or_indexed_slices(values,dtype=None,name=None)
tensorflow.python.framework.ops.convert_to_tensor(value,dtype=None,name=None,preferred_dtype=None)
tensorflow.python.framework.ops.convert_to_tensor_or_indexed_slices(value,dtype=None,name=None)
tensorflow.python.framework.ops.default_session(session)
tensorflow.python.framework.ops.device(device_name_or_function)
tensorflow.python.framework.ops.get_all_collection_keys()
tensorflow.python.framework.ops.get_collection(key,scope=None)
tensorflow.python.framework.ops.get_collection_proto_type(collection_name)
tensorflow.python.framework.ops.get_collection_ref(key)
tensorflow.python.framework.ops.get_default_graph()
tensorflow.python.framework.ops.get_default_session()
tensorflow.python.framework.ops.get_from_proto_function(collection_name)
tensorflow.python.framework.ops.get_gradient_function(op)
tensorflow.python.framework.ops.get_stats_for_node_def(graph,node,statistic_type)
tensorflow.python.framework.ops.get_to_proto_function(collection_name)
tensorflow.python.framework.ops.internal_convert_n_to_tensor(values,dtype=None,name=None,as_ref=False,preferred_dtype=None)
tensorflow.python.framework.ops.internal_convert_n_to_tensor_or_indexed_slices(values,dtype=None,name=None,as_ref=False)
tensorflow.python.framework.ops.internal_convert_to_tensor(value,dtype=None,name=None,as_ref=False,preferred_dtype=None)
tensorflow.python.framework.ops.internal_convert_to_tensor_or_indexed_slices(value,dtype=None,name=None,as_ref=False)
tensorflow.python.framework.ops.is_dense_tensor_like(t)
tensorflow.python.framework.ops.name_scope(name,default_name=None,values=None)
tensorflow.python.framework.ops.op_scope(values,name,default_name=None)
tensorflow.python.framework.ops.prepend_name_scope(name,import_scope)
tensorflow.python.framework.ops.register_dense_tensor_like_type(tensor_type)
tensorflow.python.framework.ops.register_proto_function(collection_name,proto_type=None,to_proto=None,from_proto=None)
tensorflow.python.framework.ops.register_tensor_conversion_function(base_type,conversion_func,priority=100)
tensorflow.python.framework.ops.reset_default_graph()
tensorflow.python.framework.ops.set_shapes_for_outputs(op)
tensorflow.python.framework.ops.strip_name_scope(name,export_scope)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py----------------------------------------
A:tensorflow.python.framework.op_def_library.num_type_fields->_NumTypeFields(arg)
A:tensorflow.python.framework.op_def_library.self._ops[op_def.name]->_OpInfo(op_def)
A:tensorflow.python.framework.op_def_library.op_info->self._ops.get(op_type_name, None)
A:tensorflow.python.framework.op_def_library.g->tensorflow.python.framework.ops._get_graph_from_inputs(_Flatten(keywords.values()))
A:tensorflow.python.framework.op_def_library.default_type_attr_map[key]->tensorflow.python.framework.dtypes.as_dtype(attr_def.default_value.type)
A:tensorflow.python.framework.op_def_library.values->tensorflow.python.framework.ops.internal_convert_to_tensor(values, name=input_arg.name, dtype=dtype, as_ref=input_arg.is_ref, preferred_dtype=default_dtype)
A:tensorflow.python.framework.op_def_library.converted_value->tensorflow.python.framework.ops.internal_convert_to_tensor(value, as_ref=input_arg.is_ref)
A:tensorflow.python.framework.op_def_library.observed->', '.join(observed_types)
A:tensorflow.python.framework.op_def_library.attrs[input_arg.number_attr]->len(values)
A:tensorflow.python.framework.op_def_library.num_attr->_Attr(op_def, input_arg.number_attr)
A:tensorflow.python.framework.op_def_library.type_attr->_Attr(op_def, input_arg.type_attr)
A:tensorflow.python.framework.op_def_library.attrs[attr.name]->keywords.pop(attr.name + '_')
A:tensorflow.python.framework.op_def_library.attr_value->tensorflow.core.framework.attr_value_pb2.AttrValue()
A:tensorflow.python.framework.op_def_library.attr_value.s->_MakeStr(value, key)
A:tensorflow.python.framework.op_def_library.attr_value.i->_MakeInt(value, key)
A:tensorflow.python.framework.op_def_library.attr_value.f->_MakeFloat(value, key)
A:tensorflow.python.framework.op_def_library.attr_value.b->_MakeBool(value, key)
A:tensorflow.python.framework.op_def_library.attr_value.type->_MakeType(value, attr_def)
A:tensorflow.python.framework.op_def_library.t->_AttrValue(attr_protos, arg.type_list_attr)
A:tensorflow.python.framework.op_def_library.op->tensorflow.python.framework.ops._get_graph_from_inputs(_Flatten(keywords.values())).create_op(op_type_name, inputs, output_types, name=scope, input_types=input_types, attrs=attr_protos, op_def=op_def)
A:tensorflow.python.framework.op_def_library.res->_Restructure(ops.convert_n_to_tensor(outputs), output_structure)
tensorflow.framework.op_def_library.OpDefLibrary(self)
tensorflow.framework.op_def_library.OpDefLibrary.add_op(self,op_def)
tensorflow.framework.op_def_library.OpDefLibrary.add_op_list(self,op_list)
tensorflow.framework.op_def_library.OpDefLibrary.apply_op(self,op_type_name,name=None,**keywords)
tensorflow.framework.op_def_library._Attr(op_def,name)
tensorflow.framework.op_def_library._AttrValue(attr_protos,name)
tensorflow.framework.op_def_library._Flatten(l)
tensorflow.framework.op_def_library._IsListParameter(arg)
tensorflow.framework.op_def_library._IsListValue(v)
tensorflow.framework.op_def_library._MakeBool(v,arg_name)
tensorflow.framework.op_def_library._MakeFloat(v,arg_name)
tensorflow.framework.op_def_library._MakeInt(v,arg_name)
tensorflow.framework.op_def_library._MakeShape(v,arg_name)
tensorflow.framework.op_def_library._MakeStr(v,arg_name)
tensorflow.framework.op_def_library._MakeTensor(v,arg_name)
tensorflow.framework.op_def_library._MakeType(v,attr_def)
tensorflow.framework.op_def_library._MaybeColocateWith(inputs)
tensorflow.framework.op_def_library._NumTypeFields(arg)
tensorflow.framework.op_def_library._OpInfo(self,op_def)
tensorflow.framework.op_def_library._Restructure(l,structure)
tensorflow.framework.op_def_library._SatisfiesTypeConstraint(dtype,attr_def,param_name)
tensorflow.python.framework.op_def_library.OpDefLibrary(self)
tensorflow.python.framework.op_def_library.OpDefLibrary.__init__(self)
tensorflow.python.framework.op_def_library.OpDefLibrary.add_op(self,op_def)
tensorflow.python.framework.op_def_library.OpDefLibrary.add_op_list(self,op_list)
tensorflow.python.framework.op_def_library.OpDefLibrary.apply_op(self,op_type_name,name=None,**keywords)
tensorflow.python.framework.op_def_library._Attr(op_def,name)
tensorflow.python.framework.op_def_library._AttrValue(attr_protos,name)
tensorflow.python.framework.op_def_library._Flatten(l)
tensorflow.python.framework.op_def_library._IsListParameter(arg)
tensorflow.python.framework.op_def_library._IsListValue(v)
tensorflow.python.framework.op_def_library._MakeBool(v,arg_name)
tensorflow.python.framework.op_def_library._MakeFloat(v,arg_name)
tensorflow.python.framework.op_def_library._MakeInt(v,arg_name)
tensorflow.python.framework.op_def_library._MakeShape(v,arg_name)
tensorflow.python.framework.op_def_library._MakeStr(v,arg_name)
tensorflow.python.framework.op_def_library._MakeTensor(v,arg_name)
tensorflow.python.framework.op_def_library._MakeType(v,attr_def)
tensorflow.python.framework.op_def_library._MaybeColocateWith(inputs)
tensorflow.python.framework.op_def_library._NumTypeFields(arg)
tensorflow.python.framework.op_def_library._OpInfo(self,op_def)
tensorflow.python.framework.op_def_library._OpInfo.__init__(self,op_def)
tensorflow.python.framework.op_def_library._Restructure(l,structure)
tensorflow.python.framework.op_def_library._SatisfiesTypeConstraint(dtype,attr_def,param_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/test_util.py----------------------------------------
A:tensorflow.python.framework.test_util.gd->graph.as_graph_def()
A:tensorflow.python.framework.test_util.diff->numpy.logical_not(same)
A:tensorflow.python.framework.test_util.self._tempdir->tempfile.mkdtemp(dir=googletest.GetTempDir())
A:tensorflow.python.framework.test_util.expected_message->type(message)()
A:tensorflow.python.framework.test_util.config->tensorflow.core.protobuf.config_pb2.ConfigProto().CopyFrom(config)
A:tensorflow.python.framework.test_util.self._cached_session->tensorflow.python.client.session.Session(graph=None, config=prepare_config(config))
A:tensorflow.python.framework.test_util.gpu_name->gpu_device_name()
A:tensorflow.python.framework.test_util.self._thread->threading.Thread(target=self._protected_run)
A:tensorflow.python.framework.test_util.ret->TensorFlowTestCase._CheckedThread(self, target, args, kwargs)
A:tensorflow.python.framework.test_util.a->self._GetNdArray(a)
A:tensorflow.python.framework.test_util.b->self._GetNdArray(b)
A:tensorflow.python.framework.test_util.cond->numpy.logical_or(np.abs(a - b) > atol + rtol * np.abs(b), np.isnan(a) != np.isnan(b))
A:tensorflow.python.framework.test_util.rtol->max(rtol, half_rtol)
A:tensorflow.python.framework.test_util.atol->max(atol, half_atol)
A:tensorflow.python.framework.test_util.same->numpy.logical_or(same, np.logical_and(np.isnan(a), np.isnan(b)))
A:tensorflow.python.framework.test_util.device1->tensorflow.python.framework.device.canonical_name(device1)
A:tensorflow.python.framework.test_util.device2->tensorflow.python.framework.device.canonical_name(device2)
tensorflow.framework.test_util.CudaSupportsHalfMatMulAndConv()
tensorflow.framework.test_util.IsGoogleCudaEnabled()
tensorflow.framework.test_util.TensorFlowTestCase(self,methodName='runTest')
tensorflow.framework.test_util.TensorFlowTestCase._AssertProtoEquals(self,a,b)
tensorflow.framework.test_util.TensorFlowTestCase._CheckedThread(self,testcase,target,args=None,kwargs=None)
tensorflow.framework.test_util.TensorFlowTestCase._CheckedThread._protected_run(self)
tensorflow.framework.test_util.TensorFlowTestCase._CheckedThread.is_alive(self)
tensorflow.framework.test_util.TensorFlowTestCase._CheckedThread.join(self)
tensorflow.framework.test_util.TensorFlowTestCase._CheckedThread.start(self)
tensorflow.framework.test_util.TensorFlowTestCase._ClearCachedSession(self)
tensorflow.framework.test_util.TensorFlowTestCase._GetNdArray(self,a)
tensorflow.framework.test_util.TensorFlowTestCase._NDArrayNear(self,ndarray1,ndarray2,err)
tensorflow.framework.test_util.TensorFlowTestCase.assertAllClose(self,a,b,rtol=1e-06,atol=1e-06)
tensorflow.framework.test_util.TensorFlowTestCase.assertAllCloseAccordingToType(self,a,b,rtol=1e-06,atol=1e-06,float_rtol=1e-06,float_atol=1e-06,half_rtol=0.001,half_atol=0.001)
tensorflow.framework.test_util.TensorFlowTestCase.assertAllEqual(self,a,b)
tensorflow.framework.test_util.TensorFlowTestCase.assertArrayNear(self,farray1,farray2,err)
tensorflow.framework.test_util.TensorFlowTestCase.assertDeviceEqual(self,device1,device2)
tensorflow.framework.test_util.TensorFlowTestCase.assertNDArrayNear(self,ndarray1,ndarray2,err)
tensorflow.framework.test_util.TensorFlowTestCase.assertNear(self,f1,f2,err,msg=None)
tensorflow.framework.test_util.TensorFlowTestCase.assertProtoEquals(self,expected_message_maybe_ascii,message)
tensorflow.framework.test_util.TensorFlowTestCase.assertProtoEqualsVersion(self,expected,actual,producer=versions.GRAPH_DEF_VERSION,min_consumer=versions.GRAPH_DEF_VERSION_MIN_CONSUMER)
tensorflow.framework.test_util.TensorFlowTestCase.assertRaisesOpError(self,expected_err_re_or_predicate)
tensorflow.framework.test_util.TensorFlowTestCase.assertRaisesWithPredicateMatch(self,exception_type,expected_err_re_or_predicate)
tensorflow.framework.test_util.TensorFlowTestCase.assertShapeEqual(self,np_array,tf_tensor)
tensorflow.framework.test_util.TensorFlowTestCase.assertStartsWith(self,actual,expected_start,msg=None)
tensorflow.framework.test_util.TensorFlowTestCase.checkedThread(self,target,args=None,kwargs=None)
tensorflow.framework.test_util.TensorFlowTestCase.get_temp_dir(self)
tensorflow.framework.test_util.TensorFlowTestCase.setUp(self)
tensorflow.framework.test_util.TensorFlowTestCase.tearDown(self)
tensorflow.framework.test_util.TensorFlowTestCase.test_session(self,graph=None,config=None,use_gpu=False,force_gpu=False)
tensorflow.framework.test_util._strip_checkpoint_v2_randomized(graph_def)
tensorflow.framework.test_util.assert_equal_graph_def(actual,expected,checkpoint_v2=False)
tensorflow.framework.test_util.assert_ops_in_graph(expected_ops,graph)
tensorflow.framework.test_util.gpu_device_name()
tensorflow.python.framework.test_util.CudaSupportsHalfMatMulAndConv()
tensorflow.python.framework.test_util.IsGoogleCudaEnabled()
tensorflow.python.framework.test_util.TensorFlowTestCase(self,methodName='runTest')
tensorflow.python.framework.test_util.TensorFlowTestCase._AssertProtoEquals(self,a,b)
tensorflow.python.framework.test_util.TensorFlowTestCase._CheckedThread(self,testcase,target,args=None,kwargs=None)
tensorflow.python.framework.test_util.TensorFlowTestCase._CheckedThread.__init__(self,testcase,target,args=None,kwargs=None)
tensorflow.python.framework.test_util.TensorFlowTestCase._CheckedThread._protected_run(self)
tensorflow.python.framework.test_util.TensorFlowTestCase._CheckedThread.is_alive(self)
tensorflow.python.framework.test_util.TensorFlowTestCase._CheckedThread.join(self)
tensorflow.python.framework.test_util.TensorFlowTestCase._CheckedThread.start(self)
tensorflow.python.framework.test_util.TensorFlowTestCase._ClearCachedSession(self)
tensorflow.python.framework.test_util.TensorFlowTestCase._GetNdArray(self,a)
tensorflow.python.framework.test_util.TensorFlowTestCase._NDArrayNear(self,ndarray1,ndarray2,err)
tensorflow.python.framework.test_util.TensorFlowTestCase.__init__(self,methodName='runTest')
tensorflow.python.framework.test_util.TensorFlowTestCase.assertAllClose(self,a,b,rtol=1e-06,atol=1e-06)
tensorflow.python.framework.test_util.TensorFlowTestCase.assertAllCloseAccordingToType(self,a,b,rtol=1e-06,atol=1e-06,float_rtol=1e-06,float_atol=1e-06,half_rtol=0.001,half_atol=0.001)
tensorflow.python.framework.test_util.TensorFlowTestCase.assertAllEqual(self,a,b)
tensorflow.python.framework.test_util.TensorFlowTestCase.assertArrayNear(self,farray1,farray2,err)
tensorflow.python.framework.test_util.TensorFlowTestCase.assertDeviceEqual(self,device1,device2)
tensorflow.python.framework.test_util.TensorFlowTestCase.assertNDArrayNear(self,ndarray1,ndarray2,err)
tensorflow.python.framework.test_util.TensorFlowTestCase.assertNear(self,f1,f2,err,msg=None)
tensorflow.python.framework.test_util.TensorFlowTestCase.assertProtoEquals(self,expected_message_maybe_ascii,message)
tensorflow.python.framework.test_util.TensorFlowTestCase.assertProtoEqualsVersion(self,expected,actual,producer=versions.GRAPH_DEF_VERSION,min_consumer=versions.GRAPH_DEF_VERSION_MIN_CONSUMER)
tensorflow.python.framework.test_util.TensorFlowTestCase.assertRaisesOpError(self,expected_err_re_or_predicate)
tensorflow.python.framework.test_util.TensorFlowTestCase.assertRaisesWithPredicateMatch(self,exception_type,expected_err_re_or_predicate)
tensorflow.python.framework.test_util.TensorFlowTestCase.assertShapeEqual(self,np_array,tf_tensor)
tensorflow.python.framework.test_util.TensorFlowTestCase.assertStartsWith(self,actual,expected_start,msg=None)
tensorflow.python.framework.test_util.TensorFlowTestCase.checkedThread(self,target,args=None,kwargs=None)
tensorflow.python.framework.test_util.TensorFlowTestCase.get_temp_dir(self)
tensorflow.python.framework.test_util.TensorFlowTestCase.setUp(self)
tensorflow.python.framework.test_util.TensorFlowTestCase.tearDown(self)
tensorflow.python.framework.test_util.TensorFlowTestCase.test_session(self,graph=None,config=None,use_gpu=False,force_gpu=False)
tensorflow.python.framework.test_util._strip_checkpoint_v2_randomized(graph_def)
tensorflow.python.framework.test_util.assert_equal_graph_def(actual,expected,checkpoint_v2=False)
tensorflow.python.framework.test_util.assert_ops_in_graph(expected_ops,graph)
tensorflow.python.framework.test_util.gpu_device_name()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/op_def_registry.py----------------------------------------
tensorflow.framework.op_def_registry.get_registered_ops()
tensorflow.framework.op_def_registry.register_op_list(op_list)
tensorflow.python.framework.op_def_registry.get_registered_ops()
tensorflow.python.framework.op_def_registry.register_op_list(op_list)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/graph_util_impl.py----------------------------------------
A:tensorflow.python.framework.graph_util_impl.n->_node_name(node.name)
A:tensorflow.python.framework.graph_util_impl.nodes_to_keep->set()
A:tensorflow.python.framework.graph_util_impl.nodes_to_keep_list->sorted(list(nodes_to_keep), key=lambda n: node_seq[n])
A:tensorflow.python.framework.graph_util_impl.out->tensorflow.core.framework.graph_pb2.GraphDef()
A:tensorflow.python.framework.graph_util_impl.tensor->graph.get_tensor_by_name(canonical_name)
A:tensorflow.python.framework.graph_util_impl.shape->graph.get_tensor_by_name(canonical_name).get_shape()
A:tensorflow.python.framework.graph_util_impl.inference_graph->extract_sub_graph(input_graph_def, output_node_names)
A:tensorflow.python.framework.graph_util_impl.returned_variables->sess.run(variable_names)
A:tensorflow.python.framework.graph_util_impl.found_variables->dict(zip(variable_dict_names, returned_variables))
A:tensorflow.python.framework.graph_util_impl.output_graph_def->tensorflow.core.framework.graph_pb2.GraphDef()
A:tensorflow.python.framework.graph_util_impl.output_node->tensorflow.core.framework.node_def_pb2.NodeDef()
A:tensorflow.python.framework.graph_util_impl.new_node->tensorflow.core.framework.node_def_pb2.NodeDef()
A:tensorflow.python.framework.graph_util_impl.input_name->re.sub('^\\^', '', full_input_name)
A:tensorflow.python.framework.graph_util_impl.output_graph->tensorflow.core.framework.graph_pb2.GraphDef()
tensorflow.graph_util_impl._is_variable_op(op)
tensorflow.graph_util_impl._node_name(n)
tensorflow.graph_util_impl.convert_variables_to_constants(sess,input_graph_def,output_node_names,variable_names_whitelist=None,variable_names_blacklist=None)
tensorflow.graph_util_impl.extract_sub_graph(graph_def,dest_nodes)
tensorflow.graph_util_impl.must_run_on_cpu(node,pin_variables_on_cpu=False)
tensorflow.graph_util_impl.remove_training_nodes(input_graph)
tensorflow.graph_util_impl.tensor_shape_from_node_def_name(graph,input_name)
tensorflow.python.framework.graph_util_impl._is_variable_op(op)
tensorflow.python.framework.graph_util_impl._node_name(n)
tensorflow.python.framework.graph_util_impl.convert_variables_to_constants(sess,input_graph_def,output_node_names,variable_names_whitelist=None,variable_names_blacklist=None)
tensorflow.python.framework.graph_util_impl.extract_sub_graph(graph_def,dest_nodes)
tensorflow.python.framework.graph_util_impl.must_run_on_cpu(node,pin_variables_on_cpu=False)
tensorflow.python.framework.graph_util_impl.remove_training_nodes(input_graph)
tensorflow.python.framework.graph_util_impl.tensor_shape_from_node_def_name(graph,input_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/function.py----------------------------------------
A:tensorflow.python.framework.function.arg->tensorflow.core.framework.op_def_pb2.OpDef.ArgDef()
A:tensorflow.python.framework.function.arg.name->_make_argname_from_tensor_name(t.name)
A:tensorflow.python.framework.function.op_def->_get_op_def(op)
A:tensorflow.python.framework.function.num->len(self._input_types)
A:tensorflow.python.framework.function.func->tensorflow.core.framework.function_pb2.FunctionDef()
A:tensorflow.python.framework.function.used_names->set()
A:tensorflow.python.framework.function.func_arg_placeholders->set([i.name for i in inputs])
A:tensorflow.python.framework.function.input_dict->_create_input_dict(graph, func_arg_placeholders)
A:tensorflow.python.framework.function.noinline->kwargs.pop('noinline', None)
A:tensorflow.python.framework.function.attrs['_noinline']->tensorflow.core.framework.attr_value_pb2.AttrValue(b=bool(noinline))
A:tensorflow.python.framework.function.compiled->kwargs.pop('compiled', None)
A:tensorflow.python.framework.function.separate_compiled_gradients->kwargs.pop('separate_compiled_gradients', None)
A:tensorflow.python.framework.function.attrs['_XlaCompile']->tensorflow.core.framework.attr_value_pb2.AttrValue(b=bool(compiled))
A:tensorflow.python.framework.function.attrs['_XlaSeparateCompiledGradients']->tensorflow.core.framework.attr_value_pb2.AttrValue(b=bool(separate_compiled_gradients))
A:tensorflow.python.framework.function.attrs['_XlaScope']->tensorflow.core.framework.attr_value_pb2.AttrValue(s=('function_%s' % func_name).encode())
A:tensorflow.python.framework.function.name->'_'.join([name, key])
A:tensorflow.python.framework.function.g->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.framework.function.attrs->_parse_kwargs_as_attrs(func_name, **kwargs)
A:tensorflow.python.framework.function.op->tensorflow.python.framework.ops.get_default_graph().create_op(func_name, list(inputs), output_types, name=name, attrs=attrs, op_def=sig, compute_shapes=False)
A:tensorflow.python.framework.function.ret->tuple(op.outputs)
A:tensorflow.python.framework.function.self._outer_graph->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.framework.function.self._vscope->tensorflow.python.ops.variable_scope.get_variable_scope()
A:tensorflow.python.framework.function.var->self._vscope.get_variable(vs._get_default_variable_store(), name, shape=shape, dtype=dtype, initializer=initializer, trainable=trainable, collections=collections, use_resource=use_resource)
A:tensorflow.python.framework.function.ph->tensorflow.python.ops.array_ops.placeholder(x.dtype, shape=x.get_shape())
A:tensorflow.python.framework.function.self._sub_functions->dict()
A:tensorflow.python.framework.function.temp_graph->_FuncGraph()
A:tensorflow.python.framework.function.argholder->tensorflow.python.ops.array_ops.placeholder(argtype, name=argname)
A:tensorflow.python.framework.function.outputs->self._func(*inputs)
A:tensorflow.python.framework.function.self._definition->_graph_to_function_def(temp_graph, inputs, outputs, out_names=self._out_names)
A:tensorflow.python.framework.function.kwargs_attr->_parse_kwargs_as_attrs(sig_pre_func_name, **self._extra_kwargs)
A:tensorflow.python.framework.function.self._hash_str->self._create_hash_str(self._definition.signature.input_arg, self._definition.signature.output_arg, self._definition.node_def)
A:tensorflow.python.framework.function.self._func_name->kwargs.pop('func_name', None)
A:tensorflow.python.framework.function.hasher->hashlib.sha1()
A:tensorflow.python.framework.function.prev->tensorflow.python.framework.ops.get_default_graph()._get_function(self.name)
A:tensorflow.python.framework.function.(ret, op)->_call(self._definition.signature, *args, **kwargs)
A:tensorflow.python.framework.function.shapes->self._shape_func(op)
A:tensorflow.python.framework.function.input_types->tuple((dtypes.as_dtype(arg.type) for arg in fdef.signature.input_arg))
A:tensorflow.python.framework.function.result->_DefinedFunction(func, argnames, input_types, func_name, grad_func, python_grad_func, out_names)
A:tensorflow.python.framework.function.result._hash_str->_DefinedFunction(func, argnames, input_types, func_name, grad_func, python_grad_func, out_names)._create_hash_str(result._definition.signature.input_arg, result._definition.signature.output_arg, result._definition.node_def)
A:tensorflow.python.framework.function.func_to_grad->collections.defaultdict(lambda : None)
A:tensorflow.python.framework.function.grad_to_funcs->collections.defaultdict(list)
A:tensorflow.python.framework.function.fdef->ready.pop()
A:tensorflow.python.framework.function.grad->initialized.get(func_to_grad[name])
A:tensorflow.python.framework.function.defined_func->_from_definition(fdef, grad_func=grad)
A:tensorflow.python.framework.function.key->_type_list_to_str(input_types)
A:tensorflow.python.framework.function.defined->_DefinedFunction(self._func, self._argnames, input_types, name, None, self._python_grad_func, out_names=self._out_names, **self._extra_kwargs)
A:tensorflow.python.framework.function.defined._grad_func->self._grad_func.instantiate(input_types + output_types)
A:tensorflow.python.framework.function.args->list(args)
A:tensorflow.python.framework.function.x->tensorflow.python.framework.ops.convert_to_tensor(x)
A:tensorflow.python.framework.function.self._grad_func->kwargs.pop('grad_func', None)
A:tensorflow.python.framework.function.self._python_grad_func->kwargs.pop('python_grad_func', None)
A:tensorflow.python.framework.function.self._out_names->kwargs.pop('out_names', None)
A:tensorflow.python.framework.function.argspec->inspect.getargspec(func)
A:tensorflow.python.framework.function.min_args->len(argspec.args)
A:tensorflow.python.framework.function.self._sig->tensorflow.core.framework.op_def_pb2.OpDef()
tensorflow.framework.function.Declare(self,func_name,inputs,outputs)
tensorflow.framework.function.Defun(self,*input_types,**kwargs)
tensorflow.framework.function._DefinedFunction(self,func,argnames,input_types,func_name=None,grad_func=None,python_grad_func=None,out_names=None,shape_func=None,**kwargs)
tensorflow.framework.function._DefinedFunction._create_definition_if_needed(self)
tensorflow.framework.function._DefinedFunction._create_hash_str(self,input_arg,output_arg,node_def)
tensorflow.framework.function._DefinedFunction.add_to_graph(self,g)
tensorflow.framework.function._DefinedFunction.captured_inputs(self)
tensorflow.framework.function._DefinedFunction.declared_input_types(self)
tensorflow.framework.function._DefinedFunction.definition(self)
tensorflow.framework.function._DefinedFunction.grad_func_name(self)
tensorflow.framework.function._DefinedFunction.name(self)
tensorflow.framework.function._DefinedFunction.python_grad_func(self)
tensorflow.framework.function._DefinedFunction.set_grad_func(self,grad_func)
tensorflow.framework.function._FuncGraph(self,*args,**kwargs)
tensorflow.framework.function._FuncGraph.create_op(self,op_type,inputs,data_types,**kwargs)
tensorflow.framework.function._FuncGraph.getvar(self,getter,name,shape=None,dtype=None,initializer=None,trainable=True,collections=None,use_resource=None,**kwargs)
tensorflow.framework.function._OverloadedFunction(self,func,argnames,func_name=None,grad_func=None,python_grad_func=None,out_names=None,**kwargs)
tensorflow.framework.function._OverloadedFunction.instantiate(self,input_types)
tensorflow.framework.function._add_op_node(op,func,input_dict)
tensorflow.framework.function._call(sig,*inputs,**kwargs)
tensorflow.framework.function._create_input_dict(function_graph,func_arg_placeholders)
tensorflow.framework.function._from_definition(fdef,grad_func=None)
tensorflow.framework.function._from_library(lib)
tensorflow.framework.function._get_func_name(func)
tensorflow.framework.function._get_node_def(op)
tensorflow.framework.function._get_op_def(op)
tensorflow.framework.function._graph_to_function_def(graph,inputs,outputs,out_names=None)
tensorflow.framework.function._is_in_placeholders(op,func_arg_placeholders)
tensorflow.framework.function._make_argname_from_tensor_name(name)
tensorflow.framework.function._parse_kwargs_as_attrs(func_name,**kwargs)
tensorflow.framework.function._tensor_to_argdef(t,name=None,used_names=None)
tensorflow.framework.function._type_list_to_str(types)
tensorflow.framework.function.get_extra_args()
tensorflow.framework.function.get_extra_inputs()
tensorflow.framework.function.get_extra_vars()
tensorflow.python.framework.function.Declare(self,func_name,inputs,outputs)
tensorflow.python.framework.function.Declare.__init__(self,func_name,inputs,outputs)
tensorflow.python.framework.function.Defun(self,*input_types,**kwargs)
tensorflow.python.framework.function.Defun.__init__(self,*input_types,**kwargs)
tensorflow.python.framework.function._DefinedFunction(self,func,argnames,input_types,func_name=None,grad_func=None,python_grad_func=None,out_names=None,shape_func=None,**kwargs)
tensorflow.python.framework.function._DefinedFunction.__init__(self,func,argnames,input_types,func_name=None,grad_func=None,python_grad_func=None,out_names=None,shape_func=None,**kwargs)
tensorflow.python.framework.function._DefinedFunction._create_definition_if_needed(self)
tensorflow.python.framework.function._DefinedFunction._create_hash_str(self,input_arg,output_arg,node_def)
tensorflow.python.framework.function._DefinedFunction.add_to_graph(self,g)
tensorflow.python.framework.function._DefinedFunction.captured_inputs(self)
tensorflow.python.framework.function._DefinedFunction.declared_input_types(self)
tensorflow.python.framework.function._DefinedFunction.definition(self)
tensorflow.python.framework.function._DefinedFunction.grad_func_name(self)
tensorflow.python.framework.function._DefinedFunction.name(self)
tensorflow.python.framework.function._DefinedFunction.python_grad_func(self)
tensorflow.python.framework.function._DefinedFunction.set_grad_func(self,grad_func)
tensorflow.python.framework.function._FuncGraph(self,*args,**kwargs)
tensorflow.python.framework.function._FuncGraph.__init__(self,*args,**kwargs)
tensorflow.python.framework.function._FuncGraph.create_op(self,op_type,inputs,data_types,**kwargs)
tensorflow.python.framework.function._FuncGraph.getvar(self,getter,name,shape=None,dtype=None,initializer=None,trainable=True,collections=None,use_resource=None,**kwargs)
tensorflow.python.framework.function._OverloadedFunction(self,func,argnames,func_name=None,grad_func=None,python_grad_func=None,out_names=None,**kwargs)
tensorflow.python.framework.function._OverloadedFunction.__init__(self,func,argnames,func_name=None,grad_func=None,python_grad_func=None,out_names=None,**kwargs)
tensorflow.python.framework.function._OverloadedFunction.instantiate(self,input_types)
tensorflow.python.framework.function._add_op_node(op,func,input_dict)
tensorflow.python.framework.function._call(sig,*inputs,**kwargs)
tensorflow.python.framework.function._create_input_dict(function_graph,func_arg_placeholders)
tensorflow.python.framework.function._from_definition(fdef,grad_func=None)
tensorflow.python.framework.function._from_library(lib)
tensorflow.python.framework.function._get_func_name(func)
tensorflow.python.framework.function._get_node_def(op)
tensorflow.python.framework.function._get_op_def(op)
tensorflow.python.framework.function._graph_to_function_def(graph,inputs,outputs,out_names=None)
tensorflow.python.framework.function._is_in_placeholders(op,func_arg_placeholders)
tensorflow.python.framework.function._make_argname_from_tensor_name(name)
tensorflow.python.framework.function._parse_kwargs_as_attrs(func_name,**kwargs)
tensorflow.python.framework.function._tensor_to_argdef(t,name=None,used_names=None)
tensorflow.python.framework.function._type_list_to_str(types)
tensorflow.python.framework.function.get_extra_args()
tensorflow.python.framework.function.get_extra_inputs()
tensorflow.python.framework.function.get_extra_vars()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/sparse_tensor.py----------------------------------------
A:tensorflow.python.framework.sparse_tensor.indices->tensorflow.python.framework.ops.convert_to_tensor(indices, name='indices', dtype=dtypes.int64)
A:tensorflow.python.framework.sparse_tensor.values->tensorflow.python.framework.ops.internal_convert_to_tensor(values, name='values', as_ref=True)
A:tensorflow.python.framework.sparse_tensor.dense_shape->tensorflow.python.framework.ops.convert_to_tensor(dense_shape, name='dense_shape', dtype=dtypes.int64)
A:tensorflow.python.framework.sparse_tensor.indices_shape->tensorflow.python.framework.ops.convert_to_tensor(indices, name='indices', dtype=dtypes.int64).get_shape().with_rank(2)
A:tensorflow.python.framework.sparse_tensor.values_shape->tensorflow.python.framework.ops.internal_convert_to_tensor(values, name='values', as_ref=True).get_shape().with_rank(1)
A:tensorflow.python.framework.sparse_tensor.dense_shape_shape->tensorflow.python.framework.ops.convert_to_tensor(dense_shape, name='dense_shape', dtype=dtypes.int64).get_shape().with_rank(1)
A:tensorflow.python.framework.sparse_tensor.(indices, values, dense_shape)->_eval_using_default_session([self.indices, self.values, self.dense_shape], feed_dict, self.graph, session)
A:tensorflow.python.framework.sparse_tensor.SparseTensorValue->collections.namedtuple('SparseTensorValue', ['indices', 'values', 'dense_shape'])
A:tensorflow.python.framework.sparse_tensor.dtype->tensorflow.python.framework.dtypes.as_dtype(dtype)
A:tensorflow.python.framework.sparse_tensor.value->SparseTensor.from_value(value)
tensorflow.framework.sparse_tensor.SparseTensor(self,indices,values,dense_shape)
tensorflow.framework.sparse_tensor.SparseTensor.__str__(self)
tensorflow.framework.sparse_tensor.SparseTensor._override_operator(operator,func)
tensorflow.framework.sparse_tensor.SparseTensor.dense_shape(self)
tensorflow.framework.sparse_tensor.SparseTensor.dtype(self)
tensorflow.framework.sparse_tensor.SparseTensor.eval(self,feed_dict=None,session=None)
tensorflow.framework.sparse_tensor.SparseTensor.from_value(cls,sparse_tensor_value)
tensorflow.framework.sparse_tensor.SparseTensor.get_shape(self)
tensorflow.framework.sparse_tensor.SparseTensor.graph(self)
tensorflow.framework.sparse_tensor.SparseTensor.indices(self)
tensorflow.framework.sparse_tensor.SparseTensor.op(self)
tensorflow.framework.sparse_tensor.SparseTensor.values(self)
tensorflow.framework.sparse_tensor.convert_to_tensor_or_sparse_tensor(value,dtype=None,name=None)
tensorflow.python.framework.sparse_tensor.SparseTensor(self,indices,values,dense_shape)
tensorflow.python.framework.sparse_tensor.SparseTensor.__init__(self,indices,values,dense_shape)
tensorflow.python.framework.sparse_tensor.SparseTensor.__str__(self)
tensorflow.python.framework.sparse_tensor.SparseTensor._override_operator(operator,func)
tensorflow.python.framework.sparse_tensor.SparseTensor.dense_shape(self)
tensorflow.python.framework.sparse_tensor.SparseTensor.dtype(self)
tensorflow.python.framework.sparse_tensor.SparseTensor.eval(self,feed_dict=None,session=None)
tensorflow.python.framework.sparse_tensor.SparseTensor.from_value(cls,sparse_tensor_value)
tensorflow.python.framework.sparse_tensor.SparseTensor.get_shape(self)
tensorflow.python.framework.sparse_tensor.SparseTensor.graph(self)
tensorflow.python.framework.sparse_tensor.SparseTensor.indices(self)
tensorflow.python.framework.sparse_tensor.SparseTensor.op(self)
tensorflow.python.framework.sparse_tensor.SparseTensor.values(self)
tensorflow.python.framework.sparse_tensor.convert_to_tensor_or_sparse_tensor(value,dtype=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/framework/framework_lib.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/variables.py----------------------------------------
A:tensorflow.python.ops.variables.init_from_fn->callable(initial_value)
A:tensorflow.python.ops.variables.true_name->tensorflow.python.framework.ops._name_from_scope_name(name)
A:tensorflow.python.ops.variables.attr->tensorflow.core.framework.attr_value_pb2.AttrValue(list=attr_value_pb2.AttrValue.ListValue(s=[compat.as_bytes('loc:@%s' % true_name)]))
A:tensorflow.python.ops.variables.self._initial_value->tensorflow.python.framework.ops.convert_to_tensor(initial_value, name='initial_value', dtype=dtype)
A:tensorflow.python.ops.variables.self._variable->tensorflow.python.framework.ops.get_default_graph().as_graph_element(ops.prepend_name_scope(variable_def.variable_name, import_scope=import_scope))
A:tensorflow.python.ops.variables.initial_value_shape->self._initial_value.get_shape()
A:tensorflow.python.ops.variables.self._snapshot->tensorflow.python.framework.ops.get_default_graph().as_graph_element(ops.prepend_name_scope(variable_def.snapshot_name, import_scope=import_scope))
A:tensorflow.python.ops.variables.g->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.ops.variables.self._initializer_op->tensorflow.python.framework.ops.get_default_graph().as_graph_element(ops.prepend_name_scope(variable_def.initializer_name, import_scope=import_scope))
A:tensorflow.python.ops.variables.self._save_slice_info->Variable.SaveSliceInfo(save_slice_info_def=variable_def.save_slice_info_def)
A:tensorflow.python.ops.variables.var_def->tensorflow.core.framework.variable_pb2.VariableDef()
A:tensorflow.python.ops.variables.var_def.variable_name->tensorflow.python.framework.ops.strip_name_scope(self._variable.name, export_scope)
A:tensorflow.python.ops.variables.var_def.initializer_name->tensorflow.python.framework.ops.strip_name_scope(self.initializer.name, export_scope)
A:tensorflow.python.ops.variables.var_def.snapshot_name->tensorflow.python.framework.ops.strip_name_scope(self._snapshot.name, export_scope)
A:tensorflow.python.ops.variables.self.full_name->tensorflow.python.framework.ops.prepend_name_scope(save_slice_info_def.full_name, import_scope=import_scope)
A:tensorflow.python.ops.variables.sl_spec->':'.join(['%d,%d' % (o, s) for (o, s) in zip(self.var_offset, self.var_shape)])
A:tensorflow.python.ops.variables.save_slice_info_def->tensorflow.core.framework.variable_pb2.SaveSliceInfoDef()
A:tensorflow.python.ops.variables.save_slice_info_def.full_name->tensorflow.python.framework.ops.strip_name_scope(self.full_name, export_scope)
A:tensorflow.python.ops.variables.self._variable_list->sorted(variable_list, key=lambda v: v._get_save_slice_info().var_offset)
A:tensorflow.python.ops.variables.num_partition_axes->len(self._partition_axes())
A:tensorflow.python.ops.variables.partition_axes->self._partition_axes()
A:tensorflow.python.ops.variables.concatenated->tensorflow.python.ops.array_ops.concat(self._variable_list, partition_ix)
A:tensorflow.python.ops.variables.variables_mask->tensorflow.python.ops.math_ops.logical_not(array_ops.stack([state_ops.is_variable_initialized(v) for v in var_list]))
A:tensorflow.python.ops.variables.variable_names_tensor->tensorflow.python.ops.array_ops.constant([s.op.name for s in var_list])
tensorflow.ops.variables.PartitionedVariable(self,name,shape,dtype,variable_list,partitions)
tensorflow.ops.variables.PartitionedVariable.PartitionedVariableIterator(self,partitioned_variable)
tensorflow.ops.variables.PartitionedVariable.PartitionedVariableIterator.__iter__(self)
tensorflow.ops.variables.PartitionedVariable.PartitionedVariableIterator.__next__(self)
tensorflow.ops.variables.PartitionedVariable.PartitionedVariableIterator.next(self)
tensorflow.ops.variables.PartitionedVariable._TensorConversionFunction(v,dtype=None,name=None,as_ref=False)
tensorflow.ops.variables.PartitionedVariable.__iter__(self)
tensorflow.ops.variables.PartitionedVariable.__len__(self)
tensorflow.ops.variables.PartitionedVariable._concat(self)
tensorflow.ops.variables.PartitionedVariable._get_partitions(self)
tensorflow.ops.variables.PartitionedVariable._get_variable_list(self)
tensorflow.ops.variables.PartitionedVariable._partition_axes(self)
tensorflow.ops.variables.PartitionedVariable.as_tensor(self)
tensorflow.ops.variables.PartitionedVariable.assign(self,value,use_locking=False)
tensorflow.ops.variables.PartitionedVariable.dtype(self)
tensorflow.ops.variables.PartitionedVariable.get_shape(self)
tensorflow.ops.variables.PartitionedVariable.name(self)
tensorflow.ops.variables.Variable(self,initial_value=None,trainable=True,collections=None,validate_shape=True,caching_device=None,name=None,variable_def=None,dtype=None,expected_shape=None,import_scope=None)
tensorflow.ops.variables.Variable.SaveSliceInfo(self,full_name=None,full_shape=None,var_offset=None,var_shape=None,save_slice_info_def=None,import_scope=None)
tensorflow.ops.variables.Variable.SaveSliceInfo.spec(self)
tensorflow.ops.variables.Variable.SaveSliceInfo.to_proto(self,export_scope=None)
tensorflow.ops.variables.Variable._AsTensor(self)
tensorflow.ops.variables.Variable._OverloadAllOperators()
tensorflow.ops.variables.Variable._OverloadOperator(operator)
tensorflow.ops.variables.Variable._TensorConversionFunction(v,dtype=None,name=None,as_ref=False)
tensorflow.ops.variables.Variable.__iter__(self)
tensorflow.ops.variables.Variable.__repr__(self)
tensorflow.ops.variables.Variable._as_graph_element(self)
tensorflow.ops.variables.Variable._get_save_slice_info(self)
tensorflow.ops.variables.Variable._init_from_args(self,initial_value=None,trainable=True,collections=None,validate_shape=True,caching_device=None,name=None,dtype=None,expected_shape=None)
tensorflow.ops.variables.Variable._init_from_proto(self,variable_def,import_scope=None)
tensorflow.ops.variables.Variable._ref(self)
tensorflow.ops.variables.Variable._set_save_slice_info(self,save_slice_info)
tensorflow.ops.variables.Variable.assign(self,value,use_locking=False)
tensorflow.ops.variables.Variable.assign_add(self,delta,use_locking=False)
tensorflow.ops.variables.Variable.assign_sub(self,delta,use_locking=False)
tensorflow.ops.variables.Variable.count_up_to(self,limit)
tensorflow.ops.variables.Variable.device(self)
tensorflow.ops.variables.Variable.dtype(self)
tensorflow.ops.variables.Variable.eval(self,session=None)
tensorflow.ops.variables.Variable.from_proto(variable_def,import_scope=None)
tensorflow.ops.variables.Variable.get_shape(self)
tensorflow.ops.variables.Variable.graph(self)
tensorflow.ops.variables.Variable.initial_value(self)
tensorflow.ops.variables.Variable.initialized_value(self)
tensorflow.ops.variables.Variable.initializer(self)
tensorflow.ops.variables.Variable.load(self,value,session=None)
tensorflow.ops.variables.Variable.name(self)
tensorflow.ops.variables.Variable.op(self)
tensorflow.ops.variables.Variable.read_value(self)
tensorflow.ops.variables.Variable.scatter_sub(self,sparse_delta,use_locking=False)
tensorflow.ops.variables.Variable.set_shape(self,shape)
tensorflow.ops.variables.Variable.shape(self)
tensorflow.ops.variables.Variable.to_proto(self,export_scope=None)
tensorflow.ops.variables.Variable.value(self)
tensorflow.ops.variables._all_saveable_objects()
tensorflow.ops.variables.all_variables()
tensorflow.ops.variables.assert_variables_initialized(var_list=None)
tensorflow.ops.variables.global_variables()
tensorflow.ops.variables.global_variables_initializer()
tensorflow.ops.variables.initialize_all_variables()
tensorflow.ops.variables.initialize_local_variables()
tensorflow.ops.variables.initialize_variables(var_list,name='init')
tensorflow.ops.variables.is_variable_initialized(variable)
tensorflow.ops.variables.local_variables()
tensorflow.ops.variables.local_variables_initializer()
tensorflow.ops.variables.model_variables()
tensorflow.ops.variables.moving_average_variables()
tensorflow.ops.variables.report_uninitialized_variables(var_list=None,name='report_uninitialized_variables')
tensorflow.ops.variables.trainable_variables()
tensorflow.ops.variables.variables_initializer(var_list,name='init')
tensorflow.python.ops.variables.PartitionedVariable(self,name,shape,dtype,variable_list,partitions)
tensorflow.python.ops.variables.PartitionedVariable.PartitionedVariableIterator(self,partitioned_variable)
tensorflow.python.ops.variables.PartitionedVariable.PartitionedVariableIterator.__init__(self,partitioned_variable)
tensorflow.python.ops.variables.PartitionedVariable.PartitionedVariableIterator.__iter__(self)
tensorflow.python.ops.variables.PartitionedVariable.PartitionedVariableIterator.__next__(self)
tensorflow.python.ops.variables.PartitionedVariable.PartitionedVariableIterator.next(self)
tensorflow.python.ops.variables.PartitionedVariable._TensorConversionFunction(v,dtype=None,name=None,as_ref=False)
tensorflow.python.ops.variables.PartitionedVariable.__init__(self,name,shape,dtype,variable_list,partitions)
tensorflow.python.ops.variables.PartitionedVariable.__iter__(self)
tensorflow.python.ops.variables.PartitionedVariable.__len__(self)
tensorflow.python.ops.variables.PartitionedVariable._concat(self)
tensorflow.python.ops.variables.PartitionedVariable._get_partitions(self)
tensorflow.python.ops.variables.PartitionedVariable._get_variable_list(self)
tensorflow.python.ops.variables.PartitionedVariable._partition_axes(self)
tensorflow.python.ops.variables.PartitionedVariable.as_tensor(self)
tensorflow.python.ops.variables.PartitionedVariable.assign(self,value,use_locking=False)
tensorflow.python.ops.variables.PartitionedVariable.dtype(self)
tensorflow.python.ops.variables.PartitionedVariable.get_shape(self)
tensorflow.python.ops.variables.PartitionedVariable.name(self)
tensorflow.python.ops.variables.Variable(self,initial_value=None,trainable=True,collections=None,validate_shape=True,caching_device=None,name=None,variable_def=None,dtype=None,expected_shape=None,import_scope=None)
tensorflow.python.ops.variables.Variable.SaveSliceInfo(self,full_name=None,full_shape=None,var_offset=None,var_shape=None,save_slice_info_def=None,import_scope=None)
tensorflow.python.ops.variables.Variable.SaveSliceInfo.__init__(self,full_name=None,full_shape=None,var_offset=None,var_shape=None,save_slice_info_def=None,import_scope=None)
tensorflow.python.ops.variables.Variable.SaveSliceInfo.spec(self)
tensorflow.python.ops.variables.Variable.SaveSliceInfo.to_proto(self,export_scope=None)
tensorflow.python.ops.variables.Variable._AsTensor(self)
tensorflow.python.ops.variables.Variable._OverloadAllOperators()
tensorflow.python.ops.variables.Variable._OverloadOperator(operator)
tensorflow.python.ops.variables.Variable._TensorConversionFunction(v,dtype=None,name=None,as_ref=False)
tensorflow.python.ops.variables.Variable.__init__(self,initial_value=None,trainable=True,collections=None,validate_shape=True,caching_device=None,name=None,variable_def=None,dtype=None,expected_shape=None,import_scope=None)
tensorflow.python.ops.variables.Variable.__iter__(self)
tensorflow.python.ops.variables.Variable.__repr__(self)
tensorflow.python.ops.variables.Variable._as_graph_element(self)
tensorflow.python.ops.variables.Variable._get_save_slice_info(self)
tensorflow.python.ops.variables.Variable._init_from_args(self,initial_value=None,trainable=True,collections=None,validate_shape=True,caching_device=None,name=None,dtype=None,expected_shape=None)
tensorflow.python.ops.variables.Variable._init_from_proto(self,variable_def,import_scope=None)
tensorflow.python.ops.variables.Variable._ref(self)
tensorflow.python.ops.variables.Variable._set_save_slice_info(self,save_slice_info)
tensorflow.python.ops.variables.Variable.assign(self,value,use_locking=False)
tensorflow.python.ops.variables.Variable.assign_add(self,delta,use_locking=False)
tensorflow.python.ops.variables.Variable.assign_sub(self,delta,use_locking=False)
tensorflow.python.ops.variables.Variable.count_up_to(self,limit)
tensorflow.python.ops.variables.Variable.device(self)
tensorflow.python.ops.variables.Variable.dtype(self)
tensorflow.python.ops.variables.Variable.eval(self,session=None)
tensorflow.python.ops.variables.Variable.from_proto(variable_def,import_scope=None)
tensorflow.python.ops.variables.Variable.get_shape(self)
tensorflow.python.ops.variables.Variable.graph(self)
tensorflow.python.ops.variables.Variable.initial_value(self)
tensorflow.python.ops.variables.Variable.initialized_value(self)
tensorflow.python.ops.variables.Variable.initializer(self)
tensorflow.python.ops.variables.Variable.load(self,value,session=None)
tensorflow.python.ops.variables.Variable.name(self)
tensorflow.python.ops.variables.Variable.op(self)
tensorflow.python.ops.variables.Variable.read_value(self)
tensorflow.python.ops.variables.Variable.scatter_sub(self,sparse_delta,use_locking=False)
tensorflow.python.ops.variables.Variable.set_shape(self,shape)
tensorflow.python.ops.variables.Variable.shape(self)
tensorflow.python.ops.variables.Variable.to_proto(self,export_scope=None)
tensorflow.python.ops.variables.Variable.value(self)
tensorflow.python.ops.variables._all_saveable_objects()
tensorflow.python.ops.variables.all_variables()
tensorflow.python.ops.variables.assert_variables_initialized(var_list=None)
tensorflow.python.ops.variables.global_variables()
tensorflow.python.ops.variables.global_variables_initializer()
tensorflow.python.ops.variables.initialize_all_variables()
tensorflow.python.ops.variables.initialize_local_variables()
tensorflow.python.ops.variables.initialize_variables(var_list,name='init')
tensorflow.python.ops.variables.is_variable_initialized(variable)
tensorflow.python.ops.variables.local_variables()
tensorflow.python.ops.variables.local_variables_initializer()
tensorflow.python.ops.variables.model_variables()
tensorflow.python.ops.variables.moving_average_variables()
tensorflow.python.ops.variables.report_uninitialized_variables(var_list=None,name='report_uninitialized_variables')
tensorflow.python.ops.variables.trainable_variables()
tensorflow.python.ops.variables.variables_initializer(var_list,name='init')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/rnn_cell_impl.py----------------------------------------
A:tensorflow.python.ops.rnn_cell_impl.result_state_size->tensorflow.python.framework.tensor_shape.as_shape(state_size).as_list()
A:tensorflow.python.ops.rnn_cell_impl.state_size_flat->tensorflow.python.util.nest.flatten(state_size)
A:tensorflow.python.ops.rnn_cell_impl.zeros->tensorflow.python.ops.array_ops.zeros(array_ops.stack(zeros_size), dtype=dtype)
A:tensorflow.python.ops.rnn_cell_impl.zeros_size->_state_size_with_prefix(state_size, prefix=[batch_size])
tensorflow.ops.rnn_cell_impl._RNNCell(self,inputs,state,scope=None)
tensorflow.ops.rnn_cell_impl._RNNCell.output_size(self)
tensorflow.ops.rnn_cell_impl._RNNCell.state_size(self)
tensorflow.ops.rnn_cell_impl._RNNCell.zero_state(self,batch_size,dtype)
tensorflow.ops.rnn_cell_impl._state_size_with_prefix(state_size,prefix=None)
tensorflow.ops.rnn_cell_impl._zero_state_tensors(state_size,batch_size,dtype)
tensorflow.python.ops.rnn_cell_impl._RNNCell(self,inputs,state,scope=None)
tensorflow.python.ops.rnn_cell_impl._RNNCell.__call__(self,inputs,state,scope=None)
tensorflow.python.ops.rnn_cell_impl._RNNCell.output_size(self)
tensorflow.python.ops.rnn_cell_impl._RNNCell.state_size(self)
tensorflow.python.ops.rnn_cell_impl._RNNCell.zero_state(self,batch_size,dtype)
tensorflow.python.ops.rnn_cell_impl._state_size_with_prefix(state_size,prefix=None)
tensorflow.python.ops.rnn_cell_impl._zero_state_tensors(state_size,batch_size,dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_script_ops.py----------------------------------------
A:tensorflow.python.ops.gen_script_ops.result->_InitOpDefLibrary().apply_op('PyFuncStateless', input=input, token=token, Tout=Tout, name=name)
A:tensorflow.python.ops.gen_script_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_script_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_script_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_script_ops._InitOpDefLibrary()
tensorflow.ops.gen_script_ops._py_func(input,token,Tout,name=None)
tensorflow.ops.gen_script_ops._py_func_stateless(input,token,Tout,name=None)
tensorflow.python.ops.gen_script_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_script_ops._py_func(input,token,Tout,name=None)
tensorflow.python.ops.gen_script_ops._py_func_stateless(input,token,Tout,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/rnn.py----------------------------------------
A:tensorflow.python.ops.rnn.all_same->all([x == inferred_dtypes[0] for x in inferred_dtypes])
A:tensorflow.python.ops.rnn.flat_state->tensorflow.python.util.nest.flatten(state)
A:tensorflow.python.ops.rnn.flat_zero_output->tuple((_create_zero_arrays(output) for output in flat_output_size))
A:tensorflow.python.ops.rnn.(new_output, new_state)->call_cell()
A:tensorflow.python.ops.rnn.flat_new_state->tensorflow.python.util.nest.flatten(new_state)
A:tensorflow.python.ops.rnn.flat_new_output->tensorflow.python.util.nest.flatten(new_output)
A:tensorflow.python.ops.rnn.new_state->tensorflow.python.util.nest.flatten(new_state)
A:tensorflow.python.ops.rnn.new_output->tensorflow.python.util.nest.flatten(new_output)
A:tensorflow.python.ops.rnn.final_output_and_state->tensorflow.python.ops.control_flow_ops.cond(time >= max_sequence_length, empty_update, _maybe_copy_some_through)
A:tensorflow.python.ops.rnn.final_output->tensorflow.python.util.nest.pack_sequence_as(structure=zero_output, flat_sequence=final_output)
A:tensorflow.python.ops.rnn.final_state->tensorflow.python.util.nest.pack_sequence_as(structure=state, flat_sequence=final_state)
A:tensorflow.python.ops.rnn.flat_input_seq->tuple((nest.flatten(input_) for input_ in input_seq))
A:tensorflow.python.ops.rnn.input_shape->tensorflow.python.ops.array_ops.shape(flat_input[0])
A:tensorflow.python.ops.rnn.s_joined->tensorflow.python.ops.array_ops.stack(sequence)
A:tensorflow.python.ops.rnn.lengths->tensorflow.python.ops.math_ops.to_int64(lengths)
A:tensorflow.python.ops.rnn.s_reversed->tensorflow.python.ops.array_ops.reverse_sequence(s_joined, lengths, 0, 1)
A:tensorflow.python.ops.rnn.result->tensorflow.python.ops.array_ops.unstack(s_reversed)
A:tensorflow.python.ops.rnn.(output_fw, output_state_fw)->dynamic_rnn(cell=cell_fw, inputs=inputs, sequence_length=sequence_length, initial_state=initial_state_fw, dtype=dtype, parallel_iterations=parallel_iterations, swap_memory=swap_memory, time_major=time_major, scope=fw_scope)
A:tensorflow.python.ops.rnn.inputs_reverse->_reverse(inputs, seq_lengths=sequence_length, seq_dim=time_dim, batch_dim=batch_dim)
A:tensorflow.python.ops.rnn.(tmp, output_state_bw)->dynamic_rnn(cell=cell_bw, inputs=inputs_reverse, sequence_length=sequence_length, initial_state=initial_state_bw, dtype=dtype, parallel_iterations=parallel_iterations, swap_memory=swap_memory, time_major=time_major, scope=bw_scope)
A:tensorflow.python.ops.rnn.output_bw->_reverse(tmp, seq_lengths=sequence_length, seq_dim=time_dim, batch_dim=batch_dim)
A:tensorflow.python.ops.rnn.flat_input->tensorflow.python.util.nest.flatten(next_input)
A:tensorflow.python.ops.rnn.sequence_length->tensorflow.python.ops.array_ops.identity(sequence_length, name='CheckSeqLen')
A:tensorflow.python.ops.rnn.state->tensorflow.python.util.nest.pack_sequence_as(structure=state, flat_sequence=flat_state)
A:tensorflow.python.ops.rnn.x_shape->tensorflow.python.ops.array_ops.shape(x)
A:tensorflow.python.ops.rnn.packed_shape->tensorflow.python.ops.array_ops.stack(shape)
A:tensorflow.python.ops.rnn.inputs->tensorflow.python.util.nest.pack_sequence_as(structure=inputs, flat_sequence=flat_input)
A:tensorflow.python.ops.rnn.(outputs, final_state)->_dynamic_rnn_loop(cell, inputs, state, parallel_iterations=parallel_iterations, swap_memory=swap_memory, sequence_length=sequence_length, dtype=dtype)
A:tensorflow.python.ops.rnn.flat_output->tensorflow.python.util.nest.flatten(outputs)
A:tensorflow.python.ops.rnn.outputs->tensorflow.python.util.nest.pack_sequence_as(structure=outputs, flat_sequence=flat_output)
A:tensorflow.python.ops.rnn.flat_output_size->tensorflow.python.util.nest.flatten(cell.output_size)
A:tensorflow.python.ops.rnn.inputs_got_shape->tuple((input_.get_shape().with_rank_at_least(3) for input_ in flat_input))
A:tensorflow.python.ops.rnn.size->_state_size_with_prefix(size, prefix=[batch_size])
A:tensorflow.python.ops.rnn.zero_output->tensorflow.python.util.nest.pack_sequence_as(structure=cell.output_size, flat_sequence=flat_zero_output)
A:tensorflow.python.ops.rnn.min_sequence_length->tensorflow.python.ops.math_ops.reduce_min(sequence_length)
A:tensorflow.python.ops.rnn.max_sequence_length->tensorflow.python.ops.math_ops.reduce_max(sequence_length)
A:tensorflow.python.ops.rnn.time->tensorflow.python.framework.constant_op.constant(0, dtype=dtypes.int32)
A:tensorflow.python.ops.rnn.output_ta->tuple((_create_ta('output_%d' % i, _infer_state_dtype(dtype, state)) for i in range(len(flat_output_size))))
A:tensorflow.python.ops.rnn.input_ta->tuple((ta.unstack(input_) for (ta, input_) in zip(input_ta, flat_input)))
A:tensorflow.python.ops.rnn.input_t->tensorflow.python.util.nest.pack_sequence_as(structure=inputs, flat_sequence=input_t)
A:tensorflow.python.ops.rnn.(output, new_state)->call_cell()
A:tensorflow.python.ops.rnn.output->tensorflow.python.util.nest.flatten(output)
A:tensorflow.python.ops.rnn.output_ta_t->tuple((ta.write(time, out) for (ta, out) in zip(output_ta_t, output)))
A:tensorflow.python.ops.rnn.(_, output_final_ta, final_state)->tensorflow.python.ops.control_flow_ops.while_loop(cond=lambda time, *_: time < time_steps, body=_time_step, loop_vars=(time, output_ta, state), parallel_iterations=parallel_iterations, swap_memory=swap_memory)
A:tensorflow.python.ops.rnn.final_outputs->tensorflow.python.util.nest.pack_sequence_as(structure=cell.output_size, flat_sequence=final_outputs)
A:tensorflow.python.ops.rnn.shape->_state_size_with_prefix(output_size, prefix=[const_time_steps, const_batch_size])
A:tensorflow.python.ops.rnn.(elements_finished, next_input, initial_state, emit_structure, init_loop_state)->loop_fn(time, None, None, None)
A:tensorflow.python.ops.rnn.flat_emit_structure->tensorflow.python.util.nest.flatten(emit_structure)
A:tensorflow.python.ops.rnn.flat_emit_size->tensorflow.python.util.nest.flatten(emit_structure)
A:tensorflow.python.ops.rnn.emit_ta->tensorflow.python.util.nest.pack_sequence_as(structure=emit_structure, flat_sequence=emit_ta_flat)
A:tensorflow.python.ops.rnn.zero_emit->tensorflow.python.util.nest.pack_sequence_as(structure=emit_structure, flat_sequence=flat_zero_emit)
A:tensorflow.python.ops.rnn.(next_output, cell_state)->cell(current_input, state)
A:tensorflow.python.ops.rnn.(next_finished, next_input, next_state, emit_output, next_loop_state)->loop_fn(next_time, next_output, cell_state, loop_state)
A:tensorflow.python.ops.rnn.current_flat->tensorflow.python.util.nest.flatten(current)
A:tensorflow.python.ops.rnn.candidate_flat->tensorflow.python.util.nest.flatten(candidate)
A:tensorflow.python.ops.rnn.emit_output->_copy_some_through(zero_emit, emit_output)
A:tensorflow.python.ops.rnn.next_state->_copy_some_through(state, next_state)
A:tensorflow.python.ops.rnn.emit_output_flat->tensorflow.python.util.nest.flatten(emit_output)
A:tensorflow.python.ops.rnn.emit_ta_flat->tensorflow.python.util.nest.flatten(emit_ta)
A:tensorflow.python.ops.rnn.elements_finished->tensorflow.python.ops.math_ops.logical_or(elements_finished, next_finished)
A:tensorflow.python.ops.rnn.returned->tensorflow.python.ops.control_flow_ops.while_loop(condition, body, loop_vars=[time, elements_finished, next_input, emit_ta, state, loop_state], parallel_iterations=parallel_iterations, swap_memory=swap_memory)
tensorflow.ops.rnn._dynamic_rnn_loop(cell,inputs,initial_state,parallel_iterations,swap_memory,sequence_length=None,dtype=None)
tensorflow.ops.rnn._infer_state_dtype(explicit_dtype,state)
tensorflow.ops.rnn._on_device(fn,device)
tensorflow.ops.rnn._reverse_seq(input_seq,lengths)
tensorflow.ops.rnn._rnn_step(time,sequence_length,min_sequence_length,max_sequence_length,zero_output,state,call_cell,state_size,skip_conditionals=False)
tensorflow.ops.rnn.bidirectional_dynamic_rnn(cell_fw,cell_bw,inputs,sequence_length=None,initial_state_fw=None,initial_state_bw=None,dtype=None,parallel_iterations=None,swap_memory=False,time_major=False,scope=None)
tensorflow.ops.rnn.dynamic_rnn(cell,inputs,sequence_length=None,initial_state=None,dtype=None,parallel_iterations=None,swap_memory=False,time_major=False,scope=None)
tensorflow.ops.rnn.raw_rnn(cell,loop_fn,parallel_iterations=None,swap_memory=False,scope=None)
tensorflow.python.ops.rnn._dynamic_rnn_loop(cell,inputs,initial_state,parallel_iterations,swap_memory,sequence_length=None,dtype=None)
tensorflow.python.ops.rnn._infer_state_dtype(explicit_dtype,state)
tensorflow.python.ops.rnn._on_device(fn,device)
tensorflow.python.ops.rnn._reverse_seq(input_seq,lengths)
tensorflow.python.ops.rnn._rnn_step(time,sequence_length,min_sequence_length,max_sequence_length,zero_output,state,call_cell,state_size,skip_conditionals=False)
tensorflow.python.ops.rnn.bidirectional_dynamic_rnn(cell_fw,cell_bw,inputs,sequence_length=None,initial_state_fw=None,initial_state_bw=None,dtype=None,parallel_iterations=None,swap_memory=False,time_major=False,scope=None)
tensorflow.python.ops.rnn.dynamic_rnn(cell,inputs,sequence_length=None,initial_state=None,dtype=None,parallel_iterations=None,swap_memory=False,time_major=False,scope=None)
tensorflow.python.ops.rnn.raw_rnn(cell,loop_fn,parallel_iterations=None,swap_memory=False,scope=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/session_ops.py----------------------------------------
A:tensorflow.python.ops.session_ops.resource_handle->tensorflow.core.framework.resource_handle_pb2.ResourceHandle()
A:tensorflow.python.ops.session_ops.self._resource_handle->decode_resource_handle(handle)
A:tensorflow.python.ops.session_ops.self._handle->tensorflow.python.util.compat.as_str_any(self._resource_handle.name)
A:tensorflow.python.ops.session_ops.(holder, reader)->_get_handle_reader(graph, handle, dtype)
A:tensorflow.python.ops.session_ops.(holder, deleter)->_get_handle_deleter(self._session.graph, self._handle)
A:tensorflow.python.ops.session_ops.handle_str->tensorflow.python.util.compat.as_str_any(handle)
A:tensorflow.python.ops.session_ops.handle_parts->str(handle).split(';')
A:tensorflow.python.ops.session_ops.handle_device->TensorHandle._get_device_name(handle)
A:tensorflow.python.ops.session_ops.holder->tensorflow.python.ops.array_ops.placeholder(dtypes.string)
A:tensorflow.python.ops.session_ops.tensor->tensorflow.python.ops.gen_data_flow_ops._get_session_tensor(holder, dtype, name=name)
A:tensorflow.python.ops.session_ops.deleter->tensorflow.python.ops.gen_data_flow_ops._delete_session_tensor(holder)
A:tensorflow.python.ops.session_ops.graph_key->TensorHandle._get_deleter_key(handle)
A:tensorflow.python.ops.session_ops.result->graph._handle_deleters.get(graph_key)
A:tensorflow.python.ops.session_ops.reader->tensorflow.python.ops.gen_data_flow_ops._get_session_tensor(holder, dtype)
A:tensorflow.python.ops.session_ops.dtype->_get_handle_feeder(graph, feeder)
A:tensorflow.python.ops.session_ops.mover->tensorflow.python.ops.gen_data_flow_ops._get_session_handle_v2(reader)
tensorflow.python.ops.session_ops.TensorHandle(self,handle,dtype,session)
tensorflow.python.ops.session_ops.TensorHandle.__del__(self)
tensorflow.python.ops.session_ops.TensorHandle.__init__(self,handle,dtype,session)
tensorflow.python.ops.session_ops.TensorHandle.__str__(self)
tensorflow.python.ops.session_ops.TensorHandle._get_deleter_key(handle)
tensorflow.python.ops.session_ops.TensorHandle._get_device_name(handle)
tensorflow.python.ops.session_ops.TensorHandle._get_mover_key(feeder,handle)
tensorflow.python.ops.session_ops.TensorHandle._get_reader_key(handle)
tensorflow.python.ops.session_ops.TensorHandle.delete(self)
tensorflow.python.ops.session_ops.TensorHandle.eval(self)
tensorflow.python.ops.session_ops.TensorHandle.get_raw_handle(self)
tensorflow.python.ops.session_ops.TensorHandle.handle(self)
tensorflow.python.ops.session_ops.TensorHandle.resource_handle(self)
tensorflow.python.ops.session_ops.TensorHandle.to_numpy_array(self)
tensorflow.python.ops.session_ops._get_handle_deleter(graph,handle)
tensorflow.python.ops.session_ops._get_handle_feeder(graph,feeder)
tensorflow.python.ops.session_ops._get_handle_mover(graph,feeder,handle)
tensorflow.python.ops.session_ops._get_handle_reader(graph,handle,dtype)
tensorflow.python.ops.session_ops._register_handle_feeder(graph,feeder,dtype)
tensorflow.python.ops.session_ops.decode_resource_handle(encoded)
tensorflow.python.ops.session_ops.delete_session_tensor(handle,name=None)
tensorflow.python.ops.session_ops.encode_resource_handle(resource_handle)
tensorflow.python.ops.session_ops.get_session_handle(data,name=None)
tensorflow.python.ops.session_ops.get_session_tensor(handle,dtype,name=None)
tensorflow.session_ops.TensorHandle(self,handle,dtype,session)
tensorflow.session_ops.TensorHandle.__del__(self)
tensorflow.session_ops.TensorHandle.__str__(self)
tensorflow.session_ops.TensorHandle._get_deleter_key(handle)
tensorflow.session_ops.TensorHandle._get_device_name(handle)
tensorflow.session_ops.TensorHandle._get_mover_key(feeder,handle)
tensorflow.session_ops.TensorHandle._get_reader_key(handle)
tensorflow.session_ops.TensorHandle.delete(self)
tensorflow.session_ops.TensorHandle.eval(self)
tensorflow.session_ops.TensorHandle.get_raw_handle(self)
tensorflow.session_ops.TensorHandle.handle(self)
tensorflow.session_ops.TensorHandle.resource_handle(self)
tensorflow.session_ops.TensorHandle.to_numpy_array(self)
tensorflow.session_ops._get_handle_deleter(graph,handle)
tensorflow.session_ops._get_handle_feeder(graph,feeder)
tensorflow.session_ops._get_handle_mover(graph,feeder,handle)
tensorflow.session_ops._get_handle_reader(graph,handle,dtype)
tensorflow.session_ops._register_handle_feeder(graph,feeder,dtype)
tensorflow.session_ops.decode_resource_handle(encoded)
tensorflow.session_ops.delete_session_tensor(handle,name=None)
tensorflow.session_ops.encode_resource_handle(resource_handle)
tensorflow.session_ops.get_session_handle(data,name=None)
tensorflow.session_ops.get_session_tensor(handle,dtype,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_linalg_ops.py----------------------------------------
A:tensorflow.python.ops.gen_linalg_ops.result->_InitOpDefLibrary().apply_op('Svd', input=input, compute_uv=compute_uv, full_matrices=full_matrices, name=name)
A:tensorflow.python.ops.gen_linalg_ops._BatchSelfAdjointEigV2Output->collections.namedtuple('BatchSelfAdjointEigV2', __batch_self_adjoint_eig_v2_outputs)
A:tensorflow.python.ops.gen_linalg_ops._BatchSvdOutput->collections.namedtuple('BatchSvd', __batch_svd_outputs)
A:tensorflow.python.ops.gen_linalg_ops._QrOutput->collections.namedtuple('Qr', _qr_outputs)
A:tensorflow.python.ops.gen_linalg_ops._SelfAdjointEigV2Output->collections.namedtuple('SelfAdjointEigV2', __self_adjoint_eig_v2_outputs)
A:tensorflow.python.ops.gen_linalg_ops._SvdOutput->collections.namedtuple('Svd', __svd_outputs)
A:tensorflow.python.ops.gen_linalg_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_linalg_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_linalg_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_linalg_ops._InitOpDefLibrary()
tensorflow.ops.gen_linalg_ops._batch_cholesky(input,name=None)
tensorflow.ops.gen_linalg_ops._batch_cholesky_grad(l,grad,name=None)
tensorflow.ops.gen_linalg_ops._batch_matrix_determinant(input,name=None)
tensorflow.ops.gen_linalg_ops._batch_matrix_inverse(input,adjoint=None,name=None)
tensorflow.ops.gen_linalg_ops._batch_matrix_solve(matrix,rhs,adjoint=None,name=None)
tensorflow.ops.gen_linalg_ops._batch_matrix_solve_ls(matrix,rhs,l2_regularizer,fast=None,name=None)
tensorflow.ops.gen_linalg_ops._batch_matrix_triangular_solve(matrix,rhs,lower=None,adjoint=None,name=None)
tensorflow.ops.gen_linalg_ops._batch_self_adjoint_eig(input,name=None)
tensorflow.ops.gen_linalg_ops._batch_self_adjoint_eig_v2(input,compute_v=None,name=None)
tensorflow.ops.gen_linalg_ops._batch_svd(input,compute_uv=None,full_matrices=None,name=None)
tensorflow.ops.gen_linalg_ops._matrix_solve_ls(matrix,rhs,l2_regularizer,fast=None,name=None)
tensorflow.ops.gen_linalg_ops._self_adjoint_eig(input,name=None)
tensorflow.ops.gen_linalg_ops._self_adjoint_eig_v2(input,compute_v=None,name=None)
tensorflow.ops.gen_linalg_ops._svd(input,compute_uv=None,full_matrices=None,name=None)
tensorflow.ops.gen_linalg_ops.cholesky(input,name=None)
tensorflow.ops.gen_linalg_ops.cholesky_grad(l,grad,name=None)
tensorflow.ops.gen_linalg_ops.matrix_determinant(input,name=None)
tensorflow.ops.gen_linalg_ops.matrix_inverse(input,adjoint=None,name=None)
tensorflow.ops.gen_linalg_ops.matrix_solve(matrix,rhs,adjoint=None,name=None)
tensorflow.ops.gen_linalg_ops.matrix_triangular_solve(matrix,rhs,lower=None,adjoint=None,name=None)
tensorflow.ops.gen_linalg_ops.qr(input,full_matrices=None,name=None)
tensorflow.python.ops.gen_linalg_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_linalg_ops._batch_cholesky(input,name=None)
tensorflow.python.ops.gen_linalg_ops._batch_cholesky_grad(l,grad,name=None)
tensorflow.python.ops.gen_linalg_ops._batch_matrix_determinant(input,name=None)
tensorflow.python.ops.gen_linalg_ops._batch_matrix_inverse(input,adjoint=None,name=None)
tensorflow.python.ops.gen_linalg_ops._batch_matrix_solve(matrix,rhs,adjoint=None,name=None)
tensorflow.python.ops.gen_linalg_ops._batch_matrix_solve_ls(matrix,rhs,l2_regularizer,fast=None,name=None)
tensorflow.python.ops.gen_linalg_ops._batch_matrix_triangular_solve(matrix,rhs,lower=None,adjoint=None,name=None)
tensorflow.python.ops.gen_linalg_ops._batch_self_adjoint_eig(input,name=None)
tensorflow.python.ops.gen_linalg_ops._batch_self_adjoint_eig_v2(input,compute_v=None,name=None)
tensorflow.python.ops.gen_linalg_ops._batch_svd(input,compute_uv=None,full_matrices=None,name=None)
tensorflow.python.ops.gen_linalg_ops._matrix_solve_ls(matrix,rhs,l2_regularizer,fast=None,name=None)
tensorflow.python.ops.gen_linalg_ops._self_adjoint_eig(input,name=None)
tensorflow.python.ops.gen_linalg_ops._self_adjoint_eig_v2(input,compute_v=None,name=None)
tensorflow.python.ops.gen_linalg_ops._svd(input,compute_uv=None,full_matrices=None,name=None)
tensorflow.python.ops.gen_linalg_ops.cholesky(input,name=None)
tensorflow.python.ops.gen_linalg_ops.cholesky_grad(l,grad,name=None)
tensorflow.python.ops.gen_linalg_ops.matrix_determinant(input,name=None)
tensorflow.python.ops.gen_linalg_ops.matrix_inverse(input,adjoint=None,name=None)
tensorflow.python.ops.gen_linalg_ops.matrix_solve(matrix,rhs,adjoint=None,name=None)
tensorflow.python.ops.gen_linalg_ops.matrix_triangular_solve(matrix,rhs,lower=None,adjoint=None,name=None)
tensorflow.python.ops.gen_linalg_ops.qr(input,full_matrices=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_spectral_ops.py----------------------------------------
A:tensorflow.python.ops.gen_spectral_ops.result->_InitOpDefLibrary().apply_op('RFFT3D', input=input, fft_length=fft_length, name=name)
A:tensorflow.python.ops.gen_spectral_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_spectral_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_spectral_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_spectral_ops._InitOpDefLibrary()
tensorflow.ops.gen_spectral_ops._batch_fft(input,name=None)
tensorflow.ops.gen_spectral_ops._batch_fft2d(input,name=None)
tensorflow.ops.gen_spectral_ops._batch_fft3d(input,name=None)
tensorflow.ops.gen_spectral_ops._batch_ifft(input,name=None)
tensorflow.ops.gen_spectral_ops._batch_ifft2d(input,name=None)
tensorflow.ops.gen_spectral_ops._batch_ifft3d(input,name=None)
tensorflow.ops.gen_spectral_ops.fft(input,name=None)
tensorflow.ops.gen_spectral_ops.fft2d(input,name=None)
tensorflow.ops.gen_spectral_ops.fft3d(input,name=None)
tensorflow.ops.gen_spectral_ops.ifft(input,name=None)
tensorflow.ops.gen_spectral_ops.ifft2d(input,name=None)
tensorflow.ops.gen_spectral_ops.ifft3d(input,name=None)
tensorflow.ops.gen_spectral_ops.irfft(input,fft_length,name=None)
tensorflow.ops.gen_spectral_ops.irfft2d(input,fft_length,name=None)
tensorflow.ops.gen_spectral_ops.irfft3d(input,fft_length,name=None)
tensorflow.ops.gen_spectral_ops.rfft(input,fft_length,name=None)
tensorflow.ops.gen_spectral_ops.rfft2d(input,fft_length,name=None)
tensorflow.ops.gen_spectral_ops.rfft3d(input,fft_length,name=None)
tensorflow.python.ops.gen_spectral_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_spectral_ops._batch_fft(input,name=None)
tensorflow.python.ops.gen_spectral_ops._batch_fft2d(input,name=None)
tensorflow.python.ops.gen_spectral_ops._batch_fft3d(input,name=None)
tensorflow.python.ops.gen_spectral_ops._batch_ifft(input,name=None)
tensorflow.python.ops.gen_spectral_ops._batch_ifft2d(input,name=None)
tensorflow.python.ops.gen_spectral_ops._batch_ifft3d(input,name=None)
tensorflow.python.ops.gen_spectral_ops.fft(input,name=None)
tensorflow.python.ops.gen_spectral_ops.fft2d(input,name=None)
tensorflow.python.ops.gen_spectral_ops.fft3d(input,name=None)
tensorflow.python.ops.gen_spectral_ops.ifft(input,name=None)
tensorflow.python.ops.gen_spectral_ops.ifft2d(input,name=None)
tensorflow.python.ops.gen_spectral_ops.ifft3d(input,name=None)
tensorflow.python.ops.gen_spectral_ops.irfft(input,fft_length,name=None)
tensorflow.python.ops.gen_spectral_ops.irfft2d(input,fft_length,name=None)
tensorflow.python.ops.gen_spectral_ops.irfft3d(input,fft_length,name=None)
tensorflow.python.ops.gen_spectral_ops.rfft(input,fft_length,name=None)
tensorflow.python.ops.gen_spectral_ops.rfft2d(input,fft_length,name=None)
tensorflow.python.ops.gen_spectral_ops.rfft3d(input,fft_length,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/numerics.py----------------------------------------
A:tensorflow.python.ops.numerics.t->tensorflow.python.framework.ops.convert_to_tensor(t, name='t')
A:tensorflow.python.ops.numerics.verify_input->tensorflow.python.ops.array_ops.check_numerics(t, message=msg)
A:tensorflow.python.ops.numerics.out->tensorflow.python.ops.control_flow_ops.with_dependencies([verify_input], t)
tensorflow.ops.numerics.add_check_numerics_ops()
tensorflow.ops.numerics.verify_tensor_all_finite(t,msg,name=None)
tensorflow.python.ops.numerics.add_check_numerics_ops()
tensorflow.python.ops.numerics.verify_tensor_all_finite(t,msg,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/spectral_ops.py----------------------------------------
A:tensorflow.python.ops.spectral_ops.fft_length->tensorflow.python.framework.ops.convert_to_tensor(fft_length, _dtypes.int32)
A:tensorflow.python.ops.spectral_ops.fft_length[-1]->max(0, 2 * (fft_length[-1] - 1))
A:tensorflow.python.ops.spectral_ops.input_tensor->tensorflow.python.framework.ops.convert_to_tensor(input_tensor, _dtypes.complex64)
A:tensorflow.python.ops.spectral_ops.rfft->_rfft_wrapper(gen_spectral_ops.rfft, 1, 'rfft')
A:tensorflow.python.ops.spectral_ops.irfft->_irfft_wrapper(gen_spectral_ops.irfft, 1, 'irfft')
A:tensorflow.python.ops.spectral_ops.rfft2d->_rfft_wrapper(gen_spectral_ops.rfft2d, 2, 'rfft2d')
A:tensorflow.python.ops.spectral_ops.irfft2d->_irfft_wrapper(gen_spectral_ops.irfft2d, 2, 'irfft2d')
A:tensorflow.python.ops.spectral_ops.rfft3d->_rfft_wrapper(gen_spectral_ops.rfft3d, 3, 'rfft3d')
A:tensorflow.python.ops.spectral_ops.irfft3d->_irfft_wrapper(gen_spectral_ops.irfft3d, 3, 'irfft3d')
tensorflow.python.ops.spectral_ops._infer_fft_length_for_irfft(input_tensor,fft_rank)
tensorflow.python.ops.spectral_ops._infer_fft_length_for_rfft(input_tensor,fft_rank)
tensorflow.python.ops.spectral_ops._irfft_wrapper(ifft_fn,fft_rank,default_name)
tensorflow.python.ops.spectral_ops._rfft_wrapper(fft_fn,fft_rank,default_name)
tensorflow.spectral._infer_fft_length_for_irfft(input_tensor,fft_rank)
tensorflow.spectral._infer_fft_length_for_rfft(input_tensor,fft_rank)
tensorflow.spectral._irfft_wrapper(ifft_fn,fft_rank,default_name)
tensorflow.spectral._rfft_wrapper(fft_fn,fft_rank,default_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_state_ops.py----------------------------------------
A:tensorflow.python.ops.gen_state_ops.result->_InitOpDefLibrary().apply_op('VariableV2', shape=shape, dtype=dtype, container=container, shared_name=shared_name, name=name)
A:tensorflow.python.ops.gen_state_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_state_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_state_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_state_ops._InitOpDefLibrary()
tensorflow.ops.gen_state_ops._destroy_temporary_variable(ref,var_name,name=None)
tensorflow.ops.gen_state_ops._temporary_variable(shape,dtype,var_name=None,name=None)
tensorflow.ops.gen_state_ops._variable(shape,dtype,container=None,shared_name=None,name=None)
tensorflow.ops.gen_state_ops._variable_v2(shape,dtype,container=None,shared_name=None,name=None)
tensorflow.ops.gen_state_ops.assign(ref,value,validate_shape=None,use_locking=None,name=None)
tensorflow.ops.gen_state_ops.assign_add(ref,value,use_locking=None,name=None)
tensorflow.ops.gen_state_ops.assign_sub(ref,value,use_locking=None,name=None)
tensorflow.ops.gen_state_ops.count_up_to(ref,limit,name=None)
tensorflow.ops.gen_state_ops.is_variable_initialized(ref,name=None)
tensorflow.ops.gen_state_ops.scatter_add(ref,indices,updates,use_locking=None,name=None)
tensorflow.ops.gen_state_ops.scatter_div(ref,indices,updates,use_locking=None,name=None)
tensorflow.ops.gen_state_ops.scatter_mul(ref,indices,updates,use_locking=None,name=None)
tensorflow.ops.gen_state_ops.scatter_nd_add(ref,indices,updates,use_locking=None,name=None)
tensorflow.ops.gen_state_ops.scatter_nd_sub(ref,indices,updates,use_locking=None,name=None)
tensorflow.ops.gen_state_ops.scatter_nd_update(ref,indices,updates,use_locking=None,name=None)
tensorflow.ops.gen_state_ops.scatter_sub(ref,indices,updates,use_locking=None,name=None)
tensorflow.ops.gen_state_ops.scatter_update(ref,indices,updates,use_locking=None,name=None)
tensorflow.python.ops.gen_state_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_state_ops._destroy_temporary_variable(ref,var_name,name=None)
tensorflow.python.ops.gen_state_ops._temporary_variable(shape,dtype,var_name=None,name=None)
tensorflow.python.ops.gen_state_ops._variable(shape,dtype,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_state_ops._variable_v2(shape,dtype,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_state_ops.assign(ref,value,validate_shape=None,use_locking=None,name=None)
tensorflow.python.ops.gen_state_ops.assign_add(ref,value,use_locking=None,name=None)
tensorflow.python.ops.gen_state_ops.assign_sub(ref,value,use_locking=None,name=None)
tensorflow.python.ops.gen_state_ops.count_up_to(ref,limit,name=None)
tensorflow.python.ops.gen_state_ops.is_variable_initialized(ref,name=None)
tensorflow.python.ops.gen_state_ops.scatter_add(ref,indices,updates,use_locking=None,name=None)
tensorflow.python.ops.gen_state_ops.scatter_div(ref,indices,updates,use_locking=None,name=None)
tensorflow.python.ops.gen_state_ops.scatter_mul(ref,indices,updates,use_locking=None,name=None)
tensorflow.python.ops.gen_state_ops.scatter_nd_add(ref,indices,updates,use_locking=None,name=None)
tensorflow.python.ops.gen_state_ops.scatter_nd_sub(ref,indices,updates,use_locking=None,name=None)
tensorflow.python.ops.gen_state_ops.scatter_nd_update(ref,indices,updates,use_locking=None,name=None)
tensorflow.python.ops.gen_state_ops.scatter_sub(ref,indices,updates,use_locking=None,name=None)
tensorflow.python.ops.gen_state_ops.scatter_update(ref,indices,updates,use_locking=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/math_grad.py----------------------------------------
A:tensorflow.python.ops.math_grad.axes->tensorflow.python.framework.tensor_util.MakeNdarray(op.inputs[1].op.get_attr('value'))
A:tensorflow.python.ops.math_grad.grad->tensorflow.python.ops.array_ops.tile(grad, tile_scaling)
A:tensorflow.python.ops.math_grad.input_shape->tensorflow.python.ops.array_ops.shape(op.inputs[0])
A:tensorflow.python.ops.math_grad.output_shape_kept_dims->tensorflow.python.ops.math_ops.reduced_shape(input_shape, op.inputs[1])
A:tensorflow.python.ops.math_grad.tile_scaling->_safe_shape_div(input_shape, output_shape_kept_dims)
A:tensorflow.python.ops.math_grad.y->tensorflow.python.ops.math_ops.conj(y)
A:tensorflow.python.ops.math_grad.indicators->tensorflow.python.ops.math_ops.cast(math_ops.equal(y, op.inputs[0]), grad.dtype)
A:tensorflow.python.ops.math_grad.num_selected->tensorflow.python.ops.math_ops.unsorted_segment_sum(math_ops.cast(is_selected, grad.dtype), op.inputs[1], op.inputs[2])
A:tensorflow.python.ops.math_grad.output_shape->tensorflow.python.ops.array_ops.shape(op.outputs[0])
A:tensorflow.python.ops.math_grad.factor->_safe_shape_div(math_ops.reduce_prod(input_shape), math_ops.reduce_prod(output_shape))
A:tensorflow.python.ops.math_grad.reduction_indices->tensorflow.python.ops.array_ops.reshape(op.inputs[1], [-1])
A:tensorflow.python.ops.math_grad.reduced->tensorflow.python.ops.math_ops.cast(reduction_indices, dtypes.int32)
A:tensorflow.python.ops.math_grad.idx->tensorflow.python.ops.math_ops.range(0, array_ops.rank(op.inputs[0]))
A:tensorflow.python.ops.math_grad.(other, _)->tensorflow.python.ops.array_ops.setdiff1d(idx, reduced)
A:tensorflow.python.ops.math_grad.perm->tensorflow.python.ops.array_ops.concat([reduced, other], 0)
A:tensorflow.python.ops.math_grad.reduced_num->tensorflow.python.ops.math_ops.reduce_prod(array_ops.gather(input_shape, reduced))
A:tensorflow.python.ops.math_grad.other_num->tensorflow.python.ops.math_ops.reduce_prod(array_ops.gather(input_shape, other))
A:tensorflow.python.ops.math_grad.permuted->tensorflow.python.ops.array_ops.transpose(op.inputs[0], perm)
A:tensorflow.python.ops.math_grad.permuted_shape->tensorflow.python.ops.array_ops.shape(permuted)
A:tensorflow.python.ops.math_grad.reshaped->tensorflow.python.ops.array_ops.reshape(permuted, (reduced_num, other_num))
A:tensorflow.python.ops.math_grad.left->tensorflow.python.ops.math_ops.cumprod(reshaped, axis=0, exclusive=True)
A:tensorflow.python.ops.math_grad.right->tensorflow.python.ops.math_ops.cumprod(reshaped, axis=0, exclusive=True, reverse=True)
A:tensorflow.python.ops.math_grad.input_rank->tensorflow.python.ops.array_ops.rank(op.inputs[0])
A:tensorflow.python.ops.math_grad.ones_shape->tensorflow.python.ops.array_ops.concat([array_ops.shape(op.inputs[1]), array_ops.fill(array_ops.expand_dims(input_rank - 1, 0), 1)], 0)
A:tensorflow.python.ops.math_grad.ones->tensorflow.python.ops.array_ops.fill(ones_shape, constant_op.constant(1, dtype=grad.dtype))
A:tensorflow.python.ops.math_grad.scaled_grad->tensorflow.python.ops.math_ops.div(grad, math_ops.segment_sum(ones, op.inputs[1]))
A:tensorflow.python.ops.math_grad.zeros->tensorflow.python.ops.array_ops.zeros_like(x)
A:tensorflow.python.ops.math_grad.gathered_outputs->tensorflow.python.ops.array_ops.gather(op.outputs[0], op.inputs[1])
A:tensorflow.python.ops.math_grad.is_selected->tensorflow.python.ops.math_ops.equal(op.inputs[0], gathered_outputs)
A:tensorflow.python.ops.math_grad.weighted_grads->tensorflow.python.ops.math_ops.div(grad, num_selected)
A:tensorflow.python.ops.math_grad.gathered_grads->tensorflow.python.ops.array_ops.gather(weighted_grads, op.inputs[1])
A:tensorflow.python.ops.math_grad.ca->tensorflow.python.ops.math_ops.conj(a)
A:tensorflow.python.ops.math_grad.cg->tensorflow.python.ops.math_ops.conj(grad)
A:tensorflow.python.ops.math_grad.x->tensorflow.python.ops.math_ops.conj(x)
A:tensorflow.python.ops.math_grad.grad_b->tensorflow.python.ops.math_ops.matmul(grad, a, transpose_a=True, transpose_b=True)
A:tensorflow.python.ops.math_grad.a->tensorflow.python.ops.math_ops.conj(op.inputs[0])
A:tensorflow.python.ops.math_grad.b->tensorflow.python.ops.math_ops.conj(op.inputs[1])
A:tensorflow.python.ops.math_grad.two_over_root_pi->tensorflow.python.framework.constant_op.constant(2 / np.sqrt(np.pi), dtype=grad.dtype)
A:tensorflow.python.ops.math_grad.minus_two_over_root_pi->tensorflow.python.framework.constant_op.constant(-2 / np.sqrt(np.pi), dtype=grad.dtype)
A:tensorflow.python.ops.math_grad.sa->tensorflow.python.ops.array_ops.shape(a)
A:tensorflow.python.ops.math_grad.sx->tensorflow.python.ops.array_ops.shape(x)
A:tensorflow.python.ops.math_grad.(unused_ra, rx)->tensorflow.python.ops.gen_array_ops._broadcast_gradient_args(sa, sx)
A:tensorflow.python.ops.math_grad.partial_x->tensorflow.python.ops.math_ops.polygamma(n + 1, x)
A:tensorflow.python.ops.math_grad.sq->tensorflow.python.ops.array_ops.shape(q)
A:tensorflow.python.ops.math_grad.(unused_rx, rq)->tensorflow.python.ops.gen_array_ops._broadcast_gradient_args(sx, sq)
A:tensorflow.python.ops.math_grad.q->tensorflow.python.ops.math_ops.conj(q)
A:tensorflow.python.ops.math_grad.sn->tensorflow.python.ops.array_ops.shape(n)
A:tensorflow.python.ops.math_grad.(unused_rn, rx)->tensorflow.python.ops.gen_array_ops._broadcast_gradient_args(sn, sx)
A:tensorflow.python.ops.math_grad.n->tensorflow.python.ops.math_ops.conj(n)
A:tensorflow.python.ops.math_grad.secx->tensorflow.python.ops.math_ops.reciprocal(math_ops.cos(x))
A:tensorflow.python.ops.math_grad.secx2->tensorflow.python.ops.math_ops.square(secx)
A:tensorflow.python.ops.math_grad.x2->tensorflow.python.ops.math_ops.square(x)
A:tensorflow.python.ops.math_grad.one->tensorflow.python.framework.constant_op.constant(1, dtype=grad.dtype)
A:tensorflow.python.ops.math_grad.den->tensorflow.python.ops.math_ops.sqrt(math_ops.subtract(one, x2))
A:tensorflow.python.ops.math_grad.inv->tensorflow.python.ops.math_ops.reciprocal(math_ops.add(one, x2))
A:tensorflow.python.ops.math_grad.sy->tensorflow.python.ops.array_ops.shape(y)
A:tensorflow.python.ops.math_grad.(rx, ry)->tensorflow.python.ops.gen_array_ops._broadcast_gradient_args(sx, sy)
A:tensorflow.python.ops.math_grad.z->tensorflow.python.ops.math_ops.conj(z)
A:tensorflow.python.ops.math_grad.gx->tensorflow.python.ops.array_ops.reshape(math_ops.reduce_sum(xgrad, rx), sx)
A:tensorflow.python.ops.math_grad.log_x->tensorflow.python.ops.array_ops.where(x > 0, math_ops.log(x), array_ops.zeros_like(x))
A:tensorflow.python.ops.math_grad.gy->tensorflow.python.ops.array_ops.reshape(math_ops.reduce_sum(ygrad, ry), sy)
A:tensorflow.python.ops.math_grad.gradshape->tensorflow.python.ops.array_ops.shape(grad)
A:tensorflow.python.ops.math_grad.xmask->selector_op(x, y)
A:tensorflow.python.ops.math_grad.xgrad->tensorflow.python.ops.array_ops.where(xmask, grad, zeros)
A:tensorflow.python.ops.math_grad.ygrad->tensorflow.python.ops.array_ops.where(math_ops.logical_not(xmask), grad, zeros)
A:tensorflow.python.ops.math_grad.t_a->op.get_attr('transpose_a')
A:tensorflow.python.ops.math_grad.t_b->op.get_attr('transpose_b')
A:tensorflow.python.ops.math_grad.grad_a->tensorflow.python.ops.math_ops.matmul(b, grad, transpose_a=True, transpose_b=True)
A:tensorflow.python.ops.math_grad.t2->tensorflow.python.ops.array_ops.transpose(t2)
A:tensorflow.python.ops.math_grad.prod->tensorflow.python.ops.math_ops.cumprod(x, axis, exclusive=exclusive, reverse=reverse)
A:tensorflow.python.ops.math_grad.adj_x->op.get_attr('adj_x')
A:tensorflow.python.ops.math_grad.adj_y->op.get_attr('adj_y')
A:tensorflow.python.ops.math_grad.grad_x->tensorflow.python.ops.math_ops.matmul(y, grad, adjoint_a=True, adjoint_b=True)
A:tensorflow.python.ops.math_grad.grad_y->tensorflow.python.ops.math_ops.matmul(grad, x, adjoint_a=True, adjoint_b=True)
A:tensorflow.python.ops.math_grad.zero->tensorflow.python.framework.constant_op.constant(0, dtype=grad.dtype)
A:tensorflow.python.ops.math_grad.exclusive->op.get_attr('exclusive')
A:tensorflow.python.ops.math_grad.reverse->op.get_attr('reverse')
A:tensorflow.python.ops.math_grad.out->tensorflow.python.ops.math_ops.cumsum(prod * grad, axis, exclusive=exclusive, reverse=not reverse)
tensorflow.ops.math_grad._AbsGrad(op,grad)
tensorflow.ops.math_grad._AcosGrad(op,grad)
tensorflow.ops.math_grad._AddGrad(op,grad)
tensorflow.ops.math_grad._AddNGrad(op,grad)
tensorflow.ops.math_grad._AsinGrad(op,grad)
tensorflow.ops.math_grad._AtanGrad(op,grad)
tensorflow.ops.math_grad._BatchMatMul(op,grad)
tensorflow.ops.math_grad._CastGrad(op,grad)
tensorflow.ops.math_grad._CeilGrad(_,unused_grad)
tensorflow.ops.math_grad._ComplexAbsGrad(op,grad)
tensorflow.ops.math_grad._ComplexGrad(op,grad)
tensorflow.ops.math_grad._ConjGrad(_,grad)
tensorflow.ops.math_grad._CosGrad(op,grad)
tensorflow.ops.math_grad._CrossGrad(op,grad)
tensorflow.ops.math_grad._CumprodGrad(op,grad)
tensorflow.ops.math_grad._CumsumGrad(op,grad)
tensorflow.ops.math_grad._DigammaGrad(op,grad)
tensorflow.ops.math_grad._DivGrad(op,grad)
tensorflow.ops.math_grad._ErfGrad(op,grad)
tensorflow.ops.math_grad._ErfcGrad(op,grad)
tensorflow.ops.math_grad._ExpGrad(op,grad)
tensorflow.ops.math_grad._Expm1Grad(op,grad)
tensorflow.ops.math_grad._FloorDivGrad(_,unused_grad)
tensorflow.ops.math_grad._FloorGrad(_,unused_grad)
tensorflow.ops.math_grad._IgammaGrad(op,grad)
tensorflow.ops.math_grad._IgammacGrad(op,grad)
tensorflow.ops.math_grad._ImagGrad(_,grad)
tensorflow.ops.math_grad._InvGrad(op,grad)
tensorflow.ops.math_grad._InvGradGrad(op,grad)
tensorflow.ops.math_grad._LgammaGrad(op,grad)
tensorflow.ops.math_grad._Log1pGrad(op,grad)
tensorflow.ops.math_grad._LogGrad(op,grad)
tensorflow.ops.math_grad._MatMulGrad(op,grad)
tensorflow.ops.math_grad._MaxGrad(op,grad)
tensorflow.ops.math_grad._MaximumGrad(op,grad)
tensorflow.ops.math_grad._MaximumMinimumGrad(op,grad,selector_op)
tensorflow.ops.math_grad._MeanGrad(op,grad)
tensorflow.ops.math_grad._MinGrad(op,grad)
tensorflow.ops.math_grad._MinOrMaxGrad(op,grad)
tensorflow.ops.math_grad._MinimumGrad(op,grad)
tensorflow.ops.math_grad._MulGrad(op,grad)
tensorflow.ops.math_grad._NegGrad(_,grad)
tensorflow.ops.math_grad._PolygammaGrad(op,grad)
tensorflow.ops.math_grad._PowGrad(op,grad)
tensorflow.ops.math_grad._ProdGrad(op,grad)
tensorflow.ops.math_grad._RealDivGrad(op,grad)
tensorflow.ops.math_grad._RealGrad(_,grad)
tensorflow.ops.math_grad._ReciprocalGrad(op,grad)
tensorflow.ops.math_grad._ReciprocalGradGrad(op,grad)
tensorflow.ops.math_grad._RintGrad(_,unused_grad)
tensorflow.ops.math_grad._RoundGrad(_,unused_grad)
tensorflow.ops.math_grad._RsqrtGrad(op,grad)
tensorflow.ops.math_grad._RsqrtGradGrad(op,grad)
tensorflow.ops.math_grad._SegmentMaxGrad(op,grad)
tensorflow.ops.math_grad._SegmentMeanGrad(op,grad)
tensorflow.ops.math_grad._SegmentMinGrad(op,grad)
tensorflow.ops.math_grad._SegmentMinOrMaxGrad(op,grad,is_sorted)
tensorflow.ops.math_grad._SegmentSumGrad(op,grad)
tensorflow.ops.math_grad._SelectGrad(op,grad)
tensorflow.ops.math_grad._SigmoidGrad(op,grad)
tensorflow.ops.math_grad._SigmoidGradGrad(op,grad)
tensorflow.ops.math_grad._SignGrad(op,_)
tensorflow.ops.math_grad._SinGrad(op,grad)
tensorflow.ops.math_grad._SparseMatMulGrad(op,grad)
tensorflow.ops.math_grad._SparseSegmentMeanGrad(op,grad)
tensorflow.ops.math_grad._SparseSegmentSqrtNGrad(op,grad)
tensorflow.ops.math_grad._SparseSegmentSumGrad(op,grad)
tensorflow.ops.math_grad._SqrtGrad(op,grad)
tensorflow.ops.math_grad._SqrtGradGrad(op,grad)
tensorflow.ops.math_grad._SquareGrad(op,grad)
tensorflow.ops.math_grad._SquaredDifferenceGrad(op,grad)
tensorflow.ops.math_grad._SubGrad(op,grad)
tensorflow.ops.math_grad._SumGrad(op,grad)
tensorflow.ops.math_grad._TanGrad(op,grad)
tensorflow.ops.math_grad._TanhGrad(op,grad)
tensorflow.ops.math_grad._TanhGradGrad(op,grad)
tensorflow.ops.math_grad._TruncateDivGrad(_,unused_grad)
tensorflow.ops.math_grad._UnsortedSegmentMaxGrad(op,grad)
tensorflow.ops.math_grad._UnsortedSegmentSumGrad(op,grad)
tensorflow.ops.math_grad._ZetaGrad(op,grad)
tensorflow.ops.math_grad._safe_shape_div(x,y)
tensorflow.python.ops.math_grad._AbsGrad(op,grad)
tensorflow.python.ops.math_grad._AcosGrad(op,grad)
tensorflow.python.ops.math_grad._AddGrad(op,grad)
tensorflow.python.ops.math_grad._AddNGrad(op,grad)
tensorflow.python.ops.math_grad._AsinGrad(op,grad)
tensorflow.python.ops.math_grad._AtanGrad(op,grad)
tensorflow.python.ops.math_grad._BatchMatMul(op,grad)
tensorflow.python.ops.math_grad._CastGrad(op,grad)
tensorflow.python.ops.math_grad._CeilGrad(_,unused_grad)
tensorflow.python.ops.math_grad._ComplexAbsGrad(op,grad)
tensorflow.python.ops.math_grad._ComplexGrad(op,grad)
tensorflow.python.ops.math_grad._ConjGrad(_,grad)
tensorflow.python.ops.math_grad._CosGrad(op,grad)
tensorflow.python.ops.math_grad._CrossGrad(op,grad)
tensorflow.python.ops.math_grad._CumprodGrad(op,grad)
tensorflow.python.ops.math_grad._CumsumGrad(op,grad)
tensorflow.python.ops.math_grad._DigammaGrad(op,grad)
tensorflow.python.ops.math_grad._DivGrad(op,grad)
tensorflow.python.ops.math_grad._ErfGrad(op,grad)
tensorflow.python.ops.math_grad._ErfcGrad(op,grad)
tensorflow.python.ops.math_grad._ExpGrad(op,grad)
tensorflow.python.ops.math_grad._Expm1Grad(op,grad)
tensorflow.python.ops.math_grad._FloorDivGrad(_,unused_grad)
tensorflow.python.ops.math_grad._FloorGrad(_,unused_grad)
tensorflow.python.ops.math_grad._IgammaGrad(op,grad)
tensorflow.python.ops.math_grad._IgammacGrad(op,grad)
tensorflow.python.ops.math_grad._ImagGrad(_,grad)
tensorflow.python.ops.math_grad._InvGrad(op,grad)
tensorflow.python.ops.math_grad._InvGradGrad(op,grad)
tensorflow.python.ops.math_grad._LgammaGrad(op,grad)
tensorflow.python.ops.math_grad._Log1pGrad(op,grad)
tensorflow.python.ops.math_grad._LogGrad(op,grad)
tensorflow.python.ops.math_grad._MatMulGrad(op,grad)
tensorflow.python.ops.math_grad._MaxGrad(op,grad)
tensorflow.python.ops.math_grad._MaximumGrad(op,grad)
tensorflow.python.ops.math_grad._MaximumMinimumGrad(op,grad,selector_op)
tensorflow.python.ops.math_grad._MeanGrad(op,grad)
tensorflow.python.ops.math_grad._MinGrad(op,grad)
tensorflow.python.ops.math_grad._MinOrMaxGrad(op,grad)
tensorflow.python.ops.math_grad._MinimumGrad(op,grad)
tensorflow.python.ops.math_grad._MulGrad(op,grad)
tensorflow.python.ops.math_grad._NegGrad(_,grad)
tensorflow.python.ops.math_grad._PolygammaGrad(op,grad)
tensorflow.python.ops.math_grad._PowGrad(op,grad)
tensorflow.python.ops.math_grad._ProdGrad(op,grad)
tensorflow.python.ops.math_grad._RealDivGrad(op,grad)
tensorflow.python.ops.math_grad._RealGrad(_,grad)
tensorflow.python.ops.math_grad._ReciprocalGrad(op,grad)
tensorflow.python.ops.math_grad._ReciprocalGradGrad(op,grad)
tensorflow.python.ops.math_grad._RintGrad(_,unused_grad)
tensorflow.python.ops.math_grad._RoundGrad(_,unused_grad)
tensorflow.python.ops.math_grad._RsqrtGrad(op,grad)
tensorflow.python.ops.math_grad._RsqrtGradGrad(op,grad)
tensorflow.python.ops.math_grad._SegmentMaxGrad(op,grad)
tensorflow.python.ops.math_grad._SegmentMeanGrad(op,grad)
tensorflow.python.ops.math_grad._SegmentMinGrad(op,grad)
tensorflow.python.ops.math_grad._SegmentMinOrMaxGrad(op,grad,is_sorted)
tensorflow.python.ops.math_grad._SegmentSumGrad(op,grad)
tensorflow.python.ops.math_grad._SelectGrad(op,grad)
tensorflow.python.ops.math_grad._SigmoidGrad(op,grad)
tensorflow.python.ops.math_grad._SigmoidGradGrad(op,grad)
tensorflow.python.ops.math_grad._SignGrad(op,_)
tensorflow.python.ops.math_grad._SinGrad(op,grad)
tensorflow.python.ops.math_grad._SparseMatMulGrad(op,grad)
tensorflow.python.ops.math_grad._SparseSegmentMeanGrad(op,grad)
tensorflow.python.ops.math_grad._SparseSegmentSqrtNGrad(op,grad)
tensorflow.python.ops.math_grad._SparseSegmentSumGrad(op,grad)
tensorflow.python.ops.math_grad._SqrtGrad(op,grad)
tensorflow.python.ops.math_grad._SqrtGradGrad(op,grad)
tensorflow.python.ops.math_grad._SquareGrad(op,grad)
tensorflow.python.ops.math_grad._SquaredDifferenceGrad(op,grad)
tensorflow.python.ops.math_grad._SubGrad(op,grad)
tensorflow.python.ops.math_grad._SumGrad(op,grad)
tensorflow.python.ops.math_grad._TanGrad(op,grad)
tensorflow.python.ops.math_grad._TanhGrad(op,grad)
tensorflow.python.ops.math_grad._TanhGradGrad(op,grad)
tensorflow.python.ops.math_grad._TruncateDivGrad(_,unused_grad)
tensorflow.python.ops.math_grad._UnsortedSegmentMaxGrad(op,grad)
tensorflow.python.ops.math_grad._UnsortedSegmentSumGrad(op,grad)
tensorflow.python.ops.math_grad._ZetaGrad(op,grad)
tensorflow.python.ops.math_grad._safe_shape_div(x,y)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/array_ops.py----------------------------------------
A:tensorflow.python.ops.array_ops.input_tensor->tensorflow.python.framework.ops.convert_to_tensor(input)
A:tensorflow.python.ops.array_ops.input_shape->tensorflow.python.framework.ops.convert_to_tensor(input_shape, dtype=dtypes.int32, name='input_shape')
A:tensorflow.python.ops.array_ops.var_empty->constant([], dtype=dtypes.int32)
A:tensorflow.python.ops.array_ops.strides->ones_like(begin)
A:tensorflow.python.ops.array_ops.op->tensorflow.python.ops.gen_array_ops.strided_slice(input=input_, begin=begin, end=end, strides=strides, name=name, begin_mask=begin_mask, end_mask=end_mask, ellipsis_mask=ellipsis_mask, new_axis_mask=new_axis_mask, shrink_axis_mask=shrink_axis_mask)
A:tensorflow.python.ops.array_ops.value_t->tensorflow.python.framework.ops.convert_to_tensor(values[0])
A:tensorflow.python.ops.array_ops.value_shape->tensorflow.python.framework.ops.convert_to_tensor(value).get_shape()
A:tensorflow.python.ops.array_ops.output_shape->output_shape.concatenate(value_shape).concatenate(value_shape)
A:tensorflow.python.ops.array_ops.converted_elem->_autopacking_helper(elem, dtype, str(i))
A:tensorflow.python.ops.array_ops.maybe_dtype->_get_dtype_from_nested_lists(elem)
A:tensorflow.python.ops.array_ops.inferred_dtype->_get_dtype_from_nested_lists(v)
A:tensorflow.python.ops.array_ops.value->tensorflow.python.framework.ops.convert_to_tensor(value)
A:tensorflow.python.ops.array_ops.indices->squeeze(where(mask), squeeze_dims=[1])
A:tensorflow.python.ops.array_ops.tensor->tensorflow.python.framework.ops.convert_to_tensor(tensor, name='tensor')
A:tensorflow.python.ops.array_ops.mask->reshape(mask, [-1])
A:tensorflow.python.ops.array_ops.shape_mask->reshape(mask, [-1]).get_shape()
A:tensorflow.python.ops.array_ops.shape_tensor->tensorflow.python.framework.ops.convert_to_tensor(tensor, name='tensor').get_shape()
A:tensorflow.python.ops.array_ops.leading_size->tensorflow.python.ops.gen_math_ops._prod(shape(tensor)[:ndims_mask], [0])
A:tensorflow.python.ops.array_ops.first_dim->shape_tensor[:ndims_mask].num_elements()
A:tensorflow.python.ops.array_ops.(out_indices, to_gather)->setdiff1d(indices, mask_indices)
A:tensorflow.python.ops.array_ops.out_values->gather(a.values, to_gather, name=name)
A:tensorflow.python.ops.array_ops.size_splits->tensorflow.python.framework.ops.convert_to_tensor(num_or_size_splits)
A:tensorflow.python.ops.array_ops.size_splits_shape->tensorflow.python.framework.ops.convert_to_tensor(num_or_size_splits).get_shape()
A:tensorflow.python.ops.array_ops.rank->tensorflow.python.ops.gen_array_ops.rank(a)
A:tensorflow.python.ops.array_ops.ret->tensorflow.python.ops.gen_array_ops._placeholder(dtype=dtype, shape=dim_list, name=name)
A:tensorflow.python.ops.array_ops.a->tensorflow.python.framework.ops.convert_to_tensor(a, name='a')
A:tensorflow.python.ops.array_ops.a_shape->tensorflow.python.framework.ops.convert_to_tensor(a, name='a').get_shape()
A:tensorflow.python.ops.array_ops.a_rank->rank(a)
A:tensorflow.python.ops.array_ops.perm->concat((gen_math_ops._range(0, a_rank - 2, 1), [a_rank - 1, a_rank - 2]), 0)
A:tensorflow.python.ops.array_ops.shape->placeholder(dtypes.int64, shape=[None], name=shape_name)
A:tensorflow.python.ops.array_ops.output->fill(shape, constant(one, dtype=dtype), name=name)
A:tensorflow.python.ops.array_ops.ones_shape->shape_internal(tensor, optimize=optimize)
A:tensorflow.python.ops.array_ops.dim_list->placeholder(dtypes.int64, shape=[None], name=shape_name).as_list()
A:tensorflow.python.ops.array_ops.mode->mode.upper().upper()
A:tensorflow.python.ops.array_ops.indexing->kwargs.pop('indexing', 'xy')
A:tensorflow.python.ops.array_ops.name->kwargs.pop('name', 'meshgrid')
A:tensorflow.python.ops.array_ops.ndim->len(args)
A:tensorflow.python.ops.array_ops.output[0]->reshape(output[0], (1, -1) + (1,) * (ndim - 2))
A:tensorflow.python.ops.array_ops.output[1]->reshape(output[1], (-1, 1) + (1,) * (ndim - 2))
A:tensorflow.python.ops.array_ops.mult_fact->ones(shapes, output_dtype)
A:tensorflow.python.ops.array_ops.begin->canonical(spec.start, 0)
A:tensorflow.python.ops.array_ops.end->canonical(spec.stop, 1)
A:tensorflow.python.ops.array_ops.multiples_shape->tensorflow.python.ops.gen_array_ops.strided_slice(input=input_, begin=begin, end=end, strides=strides, name=name, begin_mask=begin_mask, end_mask=end_mask, ellipsis_mask=ellipsis_mask, new_axis_mask=new_axis_mask, shrink_axis_mask=shrink_axis_mask).inputs[1].get_shape().with_rank(1)
A:tensorflow.python.ops.array_ops.multiples->tensorflow.python.framework.tensor_util.constant_value_as_shape(op.inputs[1]).with_rank(input_shape.ndims)
A:tensorflow.python.ops.array_ops.block_shape->tensorflow.python.framework.ops.convert_to_tensor(block_shape, dtype=dtypes.int32, name='block_shape')
A:tensorflow.python.ops.array_ops.base_paddings->zeros([num_block_dims, 2], dtypes.int32)
A:tensorflow.python.ops.array_ops.const_block_shape->tensorflow.python.framework.tensor_util.constant_value(block_shape)
A:tensorflow.python.ops.array_ops.const_input_shape->tensorflow.python.framework.tensor_util.constant_value(input_shape)
A:tensorflow.python.ops.array_ops.const_base_paddings->tensorflow.python.framework.tensor_util.constant_value(base_paddings)
A:tensorflow.python.ops.array_ops.result_paddings->stack([[pad_start[i], pad_end[i]] for i in range(num_block_dims)], name='paddings')
A:tensorflow.python.ops.array_ops.result_crops->stack([[0, pad_end_extra[i]] for i in range(num_block_dims)], name='crops')
A:tensorflow.python.ops.array_ops.result->batch_to_space_nd(input, crops=crops, block_shape=np.array([block_size, block_size], dtype=np.int64), name=name)
A:tensorflow.python.ops.array_ops.on_value->tensorflow.python.framework.ops.convert_to_tensor(1, dtype, name='on_value')
A:tensorflow.python.ops.array_ops.off_value->tensorflow.python.framework.ops.convert_to_tensor(0, dtype, name='off_value')
A:tensorflow.python.ops.array_ops.lengths->tensorflow.python.framework.ops.convert_to_tensor(lengths)
A:tensorflow.python.ops.array_ops.maxlen->tensorflow.python.framework.ops.convert_to_tensor(maxlen)
A:tensorflow.python.ops.array_ops.row_vector->tensorflow.python.ops.gen_math_ops._range(constant(0, maxlen.dtype), maxlen, constant(1, maxlen.dtype))
A:tensorflow.python.ops.array_ops.matrix->tensorflow.python.ops.gen_math_ops.cast(expand_dims(lengths, 1), maxlen.dtype)
A:tensorflow.python.ops.array_ops.seq_axis->tensorflow.python.util.deprecation.deprecated_argument_lookup('seq_axis', seq_axis, 'seq_dim', seq_dim)
A:tensorflow.python.ops.array_ops.batch_axis->tensorflow.python.util.deprecation.deprecated_argument_lookup('batch_axis', batch_axis, 'batch_dim', batch_dim)
A:tensorflow.python.ops.array_ops.reverse_sequence.__doc__->tensorflow.python.util.deprecation.rewrite_argument_docstring(deprecation.rewrite_argument_docstring(gen_array_ops.reverse_sequence.__doc__, 'batch_dim', 'batch_axis'), 'seq_dim', 'seq_axis')
tensorflow.array_ops._FakeQuantWithMinMaxArgsGradient(op,grad)
tensorflow.array_ops._FakeQuantWithMinMaxVarsGradient(op,grad)
tensorflow.array_ops._FakeQuantWithMinMaxVarsPerChannelGradient(op,grad)
tensorflow.array_ops._SliceHelper(tensor,slice_spec,var=None)
tensorflow.array_ops._SliceHelperVar(var,slice_spec)
tensorflow.array_ops._TileGradShape(op)
tensorflow.array_ops._autopacking_conversion_function(v,dtype=None,name=None,as_ref=False)
tensorflow.array_ops._autopacking_helper(list_or_tuple,dtype,name)
tensorflow.array_ops._compute_size_of_strided_dim(shrink,spec,size)
tensorflow.array_ops._get_dtype_from_nested_lists(list_or_tuple)
tensorflow.array_ops._normalize_sparse_shape(shape,name)
tensorflow.array_ops.batch_to_space(input,crops,block_size,name=None)
tensorflow.array_ops.boolean_mask(tensor,mask,name='boolean_mask')
tensorflow.array_ops.broadcast_dynamic_shape(shape_x,shape_y)
tensorflow.array_ops.broadcast_static_shape(shape_x,shape_y)
tensorflow.array_ops.concat(values,axis,name='concat')
tensorflow.array_ops.edit_distance(hypothesis,truth,normalize=True,name='edit_distance')
tensorflow.array_ops.expand_dims(input,axis=None,name=None,dim=None)
tensorflow.array_ops.listdiff(x,y,out_idx=None,name=None)
tensorflow.array_ops.matrix_transpose(a,name='matrix_transpose')
tensorflow.array_ops.meshgrid(*args,**kwargs)
tensorflow.array_ops.one_hot(indices,depth,on_value=None,off_value=None,axis=None,dtype=None,name=None)
tensorflow.array_ops.ones(shape,dtype=dtypes.float32,name=None)
tensorflow.array_ops.ones_like(tensor,dtype=None,name=None,optimize=True)
tensorflow.array_ops.pad(tensor,paddings,mode='CONSTANT',name=None)
tensorflow.array_ops.parallel_stack(values,name='parallel_stack')
tensorflow.array_ops.placeholder(dtype,shape=None,name=None)
tensorflow.array_ops.rank(input,name=None)
tensorflow.array_ops.rank_internal(input,name=None,optimize=True)
tensorflow.array_ops.required_space_to_batch_paddings(input_shape,block_shape,base_paddings=None,name=None)
tensorflow.array_ops.reverse(tensor,axis,name=None)
tensorflow.array_ops.reverse_sequence(input,seq_lengths,seq_axis=None,batch_axis=None,name=None,seq_dim=None,batch_dim=None)
tensorflow.array_ops.sequence_mask(lengths,maxlen=None,dtype=dtypes.bool,name=None)
tensorflow.array_ops.setdiff1d(x,y,index_dtype=dtypes.int32,name=None)
tensorflow.array_ops.shape(input,name=None,out_type=dtypes.int32)
tensorflow.array_ops.shape_internal(input,name=None,optimize=True,out_type=dtypes.int32)
tensorflow.array_ops.size(input,name=None,out_type=dtypes.int32)
tensorflow.array_ops.size_internal(input,name=None,optimize=True,out_type=dtypes.int32)
tensorflow.array_ops.slice(input_,begin,size,name=None)
tensorflow.array_ops.space_to_batch(input,paddings,block_size,name=None)
tensorflow.array_ops.sparse_mask(a,mask_indices,name=None)
tensorflow.array_ops.sparse_placeholder(dtype,shape=None,name=None)
tensorflow.array_ops.split(value,num_or_size_splits,axis=0,num=None,name='split')
tensorflow.array_ops.squeeze(input,axis=None,name=None,squeeze_dims=None)
tensorflow.array_ops.stack(values,axis=0,name='stack')
tensorflow.array_ops.strided_slice(input_,begin,end,strides=None,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0,var=None,name=None)
tensorflow.array_ops.transpose(a,perm=None,name='transpose')
tensorflow.array_ops.unstack(value,num=None,axis=0,name='unstack')
tensorflow.array_ops.where(condition,x=None,y=None,name=None)
tensorflow.array_ops.zeros(shape,dtype=dtypes.float32,name=None)
tensorflow.array_ops.zeros_like(tensor,dtype=None,name=None,optimize=True)
tensorflow.python.ops.array_ops._FakeQuantWithMinMaxArgsGradient(op,grad)
tensorflow.python.ops.array_ops._FakeQuantWithMinMaxVarsGradient(op,grad)
tensorflow.python.ops.array_ops._FakeQuantWithMinMaxVarsPerChannelGradient(op,grad)
tensorflow.python.ops.array_ops._SliceHelper(tensor,slice_spec,var=None)
tensorflow.python.ops.array_ops._SliceHelperVar(var,slice_spec)
tensorflow.python.ops.array_ops._TileGradShape(op)
tensorflow.python.ops.array_ops._autopacking_conversion_function(v,dtype=None,name=None,as_ref=False)
tensorflow.python.ops.array_ops._autopacking_helper(list_or_tuple,dtype,name)
tensorflow.python.ops.array_ops._compute_size_of_strided_dim(shrink,spec,size)
tensorflow.python.ops.array_ops._get_dtype_from_nested_lists(list_or_tuple)
tensorflow.python.ops.array_ops._normalize_sparse_shape(shape,name)
tensorflow.python.ops.array_ops.batch_to_space(input,crops,block_size,name=None)
tensorflow.python.ops.array_ops.boolean_mask(tensor,mask,name='boolean_mask')
tensorflow.python.ops.array_ops.broadcast_dynamic_shape(shape_x,shape_y)
tensorflow.python.ops.array_ops.broadcast_static_shape(shape_x,shape_y)
tensorflow.python.ops.array_ops.concat(values,axis,name='concat')
tensorflow.python.ops.array_ops.edit_distance(hypothesis,truth,normalize=True,name='edit_distance')
tensorflow.python.ops.array_ops.expand_dims(input,axis=None,name=None,dim=None)
tensorflow.python.ops.array_ops.listdiff(x,y,out_idx=None,name=None)
tensorflow.python.ops.array_ops.matrix_transpose(a,name='matrix_transpose')
tensorflow.python.ops.array_ops.meshgrid(*args,**kwargs)
tensorflow.python.ops.array_ops.one_hot(indices,depth,on_value=None,off_value=None,axis=None,dtype=None,name=None)
tensorflow.python.ops.array_ops.ones(shape,dtype=dtypes.float32,name=None)
tensorflow.python.ops.array_ops.ones_like(tensor,dtype=None,name=None,optimize=True)
tensorflow.python.ops.array_ops.pad(tensor,paddings,mode='CONSTANT',name=None)
tensorflow.python.ops.array_ops.parallel_stack(values,name='parallel_stack')
tensorflow.python.ops.array_ops.placeholder(dtype,shape=None,name=None)
tensorflow.python.ops.array_ops.rank(input,name=None)
tensorflow.python.ops.array_ops.rank_internal(input,name=None,optimize=True)
tensorflow.python.ops.array_ops.required_space_to_batch_paddings(input_shape,block_shape,base_paddings=None,name=None)
tensorflow.python.ops.array_ops.reverse(tensor,axis,name=None)
tensorflow.python.ops.array_ops.reverse_sequence(input,seq_lengths,seq_axis=None,batch_axis=None,name=None,seq_dim=None,batch_dim=None)
tensorflow.python.ops.array_ops.sequence_mask(lengths,maxlen=None,dtype=dtypes.bool,name=None)
tensorflow.python.ops.array_ops.setdiff1d(x,y,index_dtype=dtypes.int32,name=None)
tensorflow.python.ops.array_ops.shape(input,name=None,out_type=dtypes.int32)
tensorflow.python.ops.array_ops.shape_internal(input,name=None,optimize=True,out_type=dtypes.int32)
tensorflow.python.ops.array_ops.size(input,name=None,out_type=dtypes.int32)
tensorflow.python.ops.array_ops.size_internal(input,name=None,optimize=True,out_type=dtypes.int32)
tensorflow.python.ops.array_ops.slice(input_,begin,size,name=None)
tensorflow.python.ops.array_ops.space_to_batch(input,paddings,block_size,name=None)
tensorflow.python.ops.array_ops.sparse_mask(a,mask_indices,name=None)
tensorflow.python.ops.array_ops.sparse_placeholder(dtype,shape=None,name=None)
tensorflow.python.ops.array_ops.split(value,num_or_size_splits,axis=0,num=None,name='split')
tensorflow.python.ops.array_ops.squeeze(input,axis=None,name=None,squeeze_dims=None)
tensorflow.python.ops.array_ops.stack(values,axis=0,name='stack')
tensorflow.python.ops.array_ops.strided_slice(input_,begin,end,strides=None,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0,var=None,name=None)
tensorflow.python.ops.array_ops.transpose(a,perm=None,name='transpose')
tensorflow.python.ops.array_ops.unstack(value,num=None,axis=0,name='unstack')
tensorflow.python.ops.array_ops.where(condition,x=None,y=None,name=None)
tensorflow.python.ops.array_ops.zeros(shape,dtype=dtypes.float32,name=None)
tensorflow.python.ops.array_ops.zeros_like(tensor,dtype=None,name=None,optimize=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/template.py----------------------------------------
A:tensorflow.python.ops.template.func_->functools.partial(func_, **kwargs)
A:tensorflow.python.ops.template.vars_at_start->len(ops.get_collection(ops.GraphKeys.GLOBAL_VARIABLES))
A:tensorflow.python.ops.template.trainable_at_start->len(ops.get_collection(ops.GraphKeys.TRAINABLE_VARIABLES))
A:tensorflow.python.ops.template.result->self._func(*args, **kwargs)
A:tensorflow.python.ops.template.trainable_variables->tensorflow.python.framework.ops.get_collection(ops.GraphKeys.TRAINABLE_VARIABLES)
A:tensorflow.python.ops.template.variables->tensorflow.python.framework.ops.get_collection(ops.GraphKeys.GLOBAL_VARIABLES)
A:tensorflow.python.ops.template.trace->''.join(_skip_common_stack_elements(self._stacktrace, traceback.format_stack()))
A:tensorflow.python.ops.template.exc.args->tuple(new_args)
tensorflow.ops.template.Template(self,name,func,create_scope_now=False,unique_name=None,custom_getter=None)
tensorflow.ops.template.Template._call_func(self,args,kwargs,check_for_new_variables)
tensorflow.ops.template.Template.var_scope(self)
tensorflow.ops.template.Template.variable_scope(self)
tensorflow.ops.template._skip_common_stack_elements(stacktrace,base_case)
tensorflow.ops.template.make_template(name_,func_,create_scope_now_=False,unique_name_=None,custom_getter_=None,**kwargs)
tensorflow.python.ops.template.Template(self,name,func,create_scope_now=False,unique_name=None,custom_getter=None)
tensorflow.python.ops.template.Template.__init__(self,name,func,create_scope_now=False,unique_name=None,custom_getter=None)
tensorflow.python.ops.template.Template._call_func(self,args,kwargs,check_for_new_variables)
tensorflow.python.ops.template.Template.var_scope(self)
tensorflow.python.ops.template.Template.variable_scope(self)
tensorflow.python.ops.template._skip_common_stack_elements(stacktrace,base_case)
tensorflow.python.ops.template.make_template(name_,func_,create_scope_now_=False,unique_name_=None,custom_getter_=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/nn.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/sparse_grad.py----------------------------------------
A:tensorflow.python.ops.sparse_grad.entry_indices->tensorflow.python.ops.math_ops.range(num_entries)
A:tensorflow.python.ops.sparse_grad.sp_unordered->tensorflow.python.framework.sparse_tensor.SparseTensor(input_indices, entry_indices, input_shape)
A:tensorflow.python.ops.sparse_grad.sp_ordered->tensorflow.python.ops.sparse_ops.sparse_reorder(sp_unordered)
A:tensorflow.python.ops.sparse_grad.inverted_permutation->tensorflow.python.ops.array_ops.invert_permutation(sp_ordered.values)
A:tensorflow.python.ops.sparse_grad.(a_val_grad, b_val_grad)->tensorflow.python.ops.gen_sparse_ops._sparse_add_grad(val_grad, a_indices, b_indices, sum_indices)
A:tensorflow.python.ops.sparse_grad.output_shape_kept_dims->tensorflow.python.ops.math_ops.reduced_shape(sp_shape, op.inputs[3])
A:tensorflow.python.ops.sparse_grad.out_grad_reshaped->tensorflow.python.ops.array_ops.reshape(out_grad, output_shape_kept_dims)
A:tensorflow.python.ops.sparse_grad.sp_t->tensorflow.python.framework.sparse_tensor.SparseTensor(*op.inputs[:3])
A:tensorflow.python.ops.sparse_grad.adj_a->op.get_attr('adjoint_a')
A:tensorflow.python.ops.sparse_grad.adj_b->op.get_attr('adjoint_b')
A:tensorflow.python.ops.sparse_grad.b_grad->tensorflow.python.ops.array_ops.transpose(b_grad)
A:tensorflow.python.ops.sparse_grad.parts_a->tensorflow.python.ops.array_ops.gather(grad, rows if not adj_a else cols)
A:tensorflow.python.ops.sparse_grad.parts_b->tensorflow.python.ops.array_ops.gather(b if not adj_b else array_ops.transpose(b), cols if not adj_a else rows)
A:tensorflow.python.ops.sparse_grad.a_values_grad->tensorflow.python.ops.math_ops.reduce_sum(parts_a * parts_b, reduction_indices=1)
A:tensorflow.python.ops.sparse_grad.y_shape->tensorflow.python.ops.math_ops.to_int64(array_ops.shape(y))
A:tensorflow.python.ops.sparse_grad.num_added_dims->tensorflow.python.ops.array_ops.expand_dims(array_ops.size(x_shape) - array_ops.size(y_shape), 0)
A:tensorflow.python.ops.sparse_grad.augmented_y_shape->tensorflow.python.ops.array_ops.concat([array_ops.ones(num_added_dims, ops.dtypes.int64), y_shape], 0)
A:tensorflow.python.ops.sparse_grad.scaled_indices->tensorflow.python.ops.array_ops.slice(scaled_indices, array_ops.concat([[0], num_added_dims], 0), [-1, -1])
A:tensorflow.python.ops.sparse_grad.dense_vals->tensorflow.python.ops.array_ops.gather_nd(y, scaled_indices)
A:tensorflow.python.ops.sparse_grad.dy->tensorflow.python.ops.sparse_ops.sparse_add(array_ops.zeros_like(y), sparse_tensor.SparseTensor(scaled_indices, dy_val, y_shape))
A:tensorflow.python.ops.sparse_grad.sp_output->tensorflow.python.framework.sparse_tensor.SparseTensor(indices, out_vals, shape)
A:tensorflow.python.ops.sparse_grad.sp_grad->tensorflow.python.framework.sparse_tensor.SparseTensor(indices, grad, shape)
A:tensorflow.python.ops.sparse_grad.sp_product->tensorflow.python.framework.sparse_tensor.SparseTensor(indices, sp_output.values * sp_grad.values, shape)
A:tensorflow.python.ops.sparse_grad.sp_sum->tensorflow.python.ops.sparse_ops.sparse_dense_cwise_add(sp_grad, sum_reduced)
tensorflow.ops.sparse_grad._SparseAddGrad(op,*grads)
tensorflow.ops.sparse_grad._SparseDenseCwiseAddGrad(unused_op,unused_grad)
tensorflow.ops.sparse_grad._SparseDenseCwiseDivGrad(op,grad)
tensorflow.ops.sparse_grad._SparseDenseCwiseMulGrad(op,grad)
tensorflow.ops.sparse_grad._SparseDenseCwiseMulOrDivGrad(op,grad,is_mul)
tensorflow.ops.sparse_grad._SparseReduceSumGrad(op,out_grad)
tensorflow.ops.sparse_grad._SparseReorderGrad(op,unused_output_indices_grad,output_values_grad)
tensorflow.ops.sparse_grad._SparseSoftmaxGrad(op,grad)
tensorflow.ops.sparse_grad._SparseSparseMaximumGrad(unused_op,unused_grad)
tensorflow.ops.sparse_grad._SparseSparseMinimumGrad(unused_op,unused_grad)
tensorflow.ops.sparse_grad._SparseTensorDenseAddGrad(op,out_grad)
tensorflow.ops.sparse_grad._SparseTensorDenseMatMulGrad(op,grad)
tensorflow.python.ops.sparse_grad._SparseAddGrad(op,*grads)
tensorflow.python.ops.sparse_grad._SparseDenseCwiseAddGrad(unused_op,unused_grad)
tensorflow.python.ops.sparse_grad._SparseDenseCwiseDivGrad(op,grad)
tensorflow.python.ops.sparse_grad._SparseDenseCwiseMulGrad(op,grad)
tensorflow.python.ops.sparse_grad._SparseDenseCwiseMulOrDivGrad(op,grad,is_mul)
tensorflow.python.ops.sparse_grad._SparseReduceSumGrad(op,out_grad)
tensorflow.python.ops.sparse_grad._SparseReorderGrad(op,unused_output_indices_grad,output_values_grad)
tensorflow.python.ops.sparse_grad._SparseSoftmaxGrad(op,grad)
tensorflow.python.ops.sparse_grad._SparseSparseMaximumGrad(unused_op,unused_grad)
tensorflow.python.ops.sparse_grad._SparseSparseMinimumGrad(unused_op,unused_grad)
tensorflow.python.ops.sparse_grad._SparseTensorDenseAddGrad(op,out_grad)
tensorflow.python.ops.sparse_grad._SparseTensorDenseMatMulGrad(op,grad)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/confusion_matrix.py----------------------------------------
A:tensorflow.python.ops.confusion_matrix.predictions->tensorflow.python.ops.math_ops.cast(predictions, dtypes.int64)
A:tensorflow.python.ops.confusion_matrix.labels->tensorflow.python.ops.math_ops.cast(labels, dtypes.int64)
A:tensorflow.python.ops.confusion_matrix.predictions_shape->tensorflow.python.ops.math_ops.cast(predictions, dtypes.int64).get_shape()
A:tensorflow.python.ops.confusion_matrix.labels_shape->tensorflow.python.ops.math_ops.cast(labels, dtypes.int64).get_shape()
A:tensorflow.python.ops.confusion_matrix.(labels, predictions)->remove_squeezable_dimensions(ops.convert_to_tensor(labels, name='labels'), ops.convert_to_tensor(predictions, name='predictions'))
A:tensorflow.python.ops.confusion_matrix.weights->tensorflow.python.ops.math_ops.cast(weights, dtype)
A:tensorflow.python.ops.confusion_matrix.shape->tensorflow.python.ops.array_ops.stack([num_classes, num_classes])
A:tensorflow.python.ops.confusion_matrix.indices->tensorflow.python.ops.array_ops.transpose(array_ops.stack([labels, predictions]))
A:tensorflow.python.ops.confusion_matrix.cm_sparse->tensorflow.python.framework.sparse_tensor.SparseTensor(indices=indices, values=values, dense_shape=math_ops.to_int64(shape))
A:tensorflow.python.ops.confusion_matrix.zero_matrix->tensorflow.python.ops.array_ops.zeros(math_ops.to_int32(shape), dtype)
tensorflow.confusion_matrix_m.confusion_matrix(labels,predictions,num_classes=None,dtype=dtypes.int32,name=None,weights=None)
tensorflow.confusion_matrix_m.remove_squeezable_dimensions(labels,predictions,expected_rank_diff=0,name=None)
tensorflow.python.ops.confusion_matrix.confusion_matrix(labels,predictions,num_classes=None,dtype=dtypes.int32,name=None,weights=None)
tensorflow.python.ops.confusion_matrix.remove_squeezable_dimensions(labels,predictions,expected_rank_diff=0,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gradient_checker.py----------------------------------------
A:tensorflow.python.ops.gradient_checker.x_size->_product(x_shape)
A:tensorflow.python.ops.gradient_checker.x_val_size->_product(x_shape[1:])
A:tensorflow.python.ops.gradient_checker.jacobian->numpy.zeros((x_size, y_size), dtype=x_dtype)
A:tensorflow.python.ops.gradient_checker.dy_data->numpy.zeros(dy_shape, dtype=dy.dtype.as_numpy_dtype)
A:tensorflow.python.ops.gradient_checker.dy_data_flat->numpy.zeros(dy_shape, dtype=dy.dtype.as_numpy_dtype).ravel().view(dy.dtype.real_dtype.as_numpy_dtype)
A:tensorflow.python.ops.gradient_checker.sess->tensorflow.python.framework.ops.get_default_session()
A:tensorflow.python.ops.gradient_checker.(backprop_indices, backprop_values)->tensorflow.python.framework.ops.get_default_session().run([dx.indices, dx.values], feed_dict=_extra_feeds(extra_feed_dict, {x: x_data, dy: dy_data}))
A:tensorflow.python.ops.gradient_checker.backprop->tensorflow.python.framework.ops.get_default_session().run(dx, feed_dict=_extra_feeds(extra_feed_dict, {x: x_data, dy: dy_data}))
A:tensorflow.python.ops.gradient_checker.jacobian[:, col]->tensorflow.python.framework.ops.get_default_session().run(dx, feed_dict=_extra_feeds(extra_feed_dict, {x: x_data, dy: dy_data})).ravel().view(jacobian.dtype)
A:tensorflow.python.ops.gradient_checker.x_data->numpy.random.random_sample(x_shape).astype(t.as_numpy_dtype)
A:tensorflow.python.ops.gradient_checker.x_pos->numpy.random.random_sample(x_shape).astype(t.as_numpy_dtype).copy()
A:tensorflow.python.ops.gradient_checker.x_neg->numpy.random.random_sample(x_shape).astype(t.as_numpy_dtype).copy()
A:tensorflow.python.ops.gradient_checker.y_pos->y.eval(feed_dict=_extra_feeds(extra_feed_dict, {x: x_pos}))
A:tensorflow.python.ops.gradient_checker.y_neg->y.eval(feed_dict=_extra_feeds(extra_feed_dict, {x: x_neg}))
A:tensorflow.python.ops.gradient_checker.jacobian[row, :]->diff.ravel().view(y_dtype)
A:tensorflow.python.ops.gradient_checker.dy_orig->tensorflow.python.framework.constant_op.constant(1.0, shape=y_shape, dtype=y.dtype)
A:tensorflow.python.ops.gradient_checker.dy->tensorflow.python.ops.array_ops.identity(dy_orig)
A:tensorflow.python.ops.gradient_checker.grads->tensorflow.python.ops.gradients.gradients(y, x, dy)
A:tensorflow.python.ops.gradient_checker.t->tensorflow.python.framework.dtypes.as_dtype(x.dtype)
A:tensorflow.python.ops.gradient_checker.t2->tensorflow.python.framework.dtypes.as_dtype(y.dtype)
A:tensorflow.python.ops.gradient_checker.i_shape->list(x_init_value.shape)
A:tensorflow.python.ops.gradient_checker.x_data.imag->numpy.random.random_sample(x_shape)
A:tensorflow.python.ops.gradient_checker.jacob_t->_compute_theoretical_jacobian(x, x_shape, x_data, dy, y_shape, dx, extra_feed_dict=extra_feed_dict)
A:tensorflow.python.ops.gradient_checker.jacob_n->_compute_numeric_jacobian(x, x_shape, x_data, y, y_shape, delta, extra_feed_dict=extra_feed_dict)
A:tensorflow.python.ops.gradient_checker.(dx, dy)->_compute_dx_and_dy(x, y, y_shape)
A:tensorflow.python.ops.gradient_checker.ret->_compute_gradient(x, x_shape, dx, y, y_shape, dy, x_init_value, delta, extra_feed_dict=extra_feed_dict)
A:tensorflow.python.ops.gradient_checker.grad->compute_gradient(x, x_shape, y, y_shape, x_init_value, delta, init_targets, extra_feed_dict=extra_feed_dict)
A:tensorflow.python.ops.gradient_checker.error->numpy.maximum(error, np.fabs(j_t - j_n).max())
tensorflow.ops.gradient_checker._compute_dx_and_dy(x,y,y_shape)
tensorflow.ops.gradient_checker._compute_gradient(x,x_shape,dx,y,y_shape,dy,x_init_value=None,delta=0.001,extra_feed_dict=None)
tensorflow.ops.gradient_checker._compute_gradient_list(x,x_shape,y,y_shape,x_init_value=None,delta=0.001,init_targets=None,extra_feed_dict=None)
tensorflow.ops.gradient_checker._compute_numeric_jacobian(x,x_shape,x_data,y,y_shape,delta,extra_feed_dict)
tensorflow.ops.gradient_checker._compute_theoretical_jacobian(x,x_shape,x_data,dy,dy_shape,dx,extra_feed_dict)
tensorflow.ops.gradient_checker._extra_feeds(extra_feed_dict,new_feeds)
tensorflow.ops.gradient_checker._product(t)
tensorflow.ops.gradient_checker.compute_gradient(x,x_shape,y,y_shape,x_init_value=None,delta=0.001,init_targets=None,extra_feed_dict=None)
tensorflow.ops.gradient_checker.compute_gradient_error(x,x_shape,y,y_shape,x_init_value=None,delta=0.001,init_targets=None,extra_feed_dict=None)
tensorflow.python.ops.gradient_checker._compute_dx_and_dy(x,y,y_shape)
tensorflow.python.ops.gradient_checker._compute_gradient(x,x_shape,dx,y,y_shape,dy,x_init_value=None,delta=0.001,extra_feed_dict=None)
tensorflow.python.ops.gradient_checker._compute_gradient_list(x,x_shape,y,y_shape,x_init_value=None,delta=0.001,init_targets=None,extra_feed_dict=None)
tensorflow.python.ops.gradient_checker._compute_numeric_jacobian(x,x_shape,x_data,y,y_shape,delta,extra_feed_dict)
tensorflow.python.ops.gradient_checker._compute_theoretical_jacobian(x,x_shape,x_data,dy,dy_shape,dx,extra_feed_dict)
tensorflow.python.ops.gradient_checker._extra_feeds(extra_feed_dict,new_feeds)
tensorflow.python.ops.gradient_checker._product(t)
tensorflow.python.ops.gradient_checker.compute_gradient(x,x_shape,y,y_shape,x_init_value=None,delta=0.001,init_targets=None,extra_feed_dict=None)
tensorflow.python.ops.gradient_checker.compute_gradient_error(x,x_shape,y,y_shape,x_init_value=None,delta=0.001,init_targets=None,extra_feed_dict=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/image_ops.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_math_ops.py----------------------------------------
A:tensorflow.python.ops.gen_math_ops.result->_InitOpDefLibrary().apply_op('Zeta', x=x, q=q, name=name)
A:tensorflow.python.ops.gen_math_ops._QuantizeDownAndShrinkRangeOutput->collections.namedtuple('QuantizeDownAndShrinkRange', _quantize_down_and_shrink_range_outputs)
A:tensorflow.python.ops.gen_math_ops._QuantizedMatMulOutput->collections.namedtuple('QuantizedMatMul', _quantized_mat_mul_outputs)
A:tensorflow.python.ops.gen_math_ops._QuantizedMulOutput->collections.namedtuple('QuantizedMul', _quantized_mul_outputs)
A:tensorflow.python.ops.gen_math_ops._RequantizationRangeOutput->collections.namedtuple('RequantizationRange', _requantization_range_outputs)
A:tensorflow.python.ops.gen_math_ops._RequantizeOutput->collections.namedtuple('Requantize', _requantize_outputs)
A:tensorflow.python.ops.gen_math_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_math_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_math_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_math_ops._InitOpDefLibrary()
tensorflow.ops.gen_math_ops._abs(x,name=None)
tensorflow.ops.gen_math_ops._add_n(inputs,name=None)
tensorflow.ops.gen_math_ops._all(input,reduction_indices,keep_dims=None,name=None)
tensorflow.ops.gen_math_ops._any(input,reduction_indices,keep_dims=None,name=None)
tensorflow.ops.gen_math_ops._batch_mat_mul(x,y,adj_x=None,adj_y=None,name=None)
tensorflow.ops.gen_math_ops._complex(real,imag,Tout=None,name=None)
tensorflow.ops.gen_math_ops._complex_abs(x,Tout=None,name=None)
tensorflow.ops.gen_math_ops._conj(input,name=None)
tensorflow.ops.gen_math_ops._floor_div(x,y,name=None)
tensorflow.ops.gen_math_ops._floor_mod(x,y,name=None)
tensorflow.ops.gen_math_ops._inv_grad(x,y,name=None)
tensorflow.ops.gen_math_ops._mat_mul(a,b,transpose_a=None,transpose_b=None,name=None)
tensorflow.ops.gen_math_ops._max(input,reduction_indices,keep_dims=None,name=None)
tensorflow.ops.gen_math_ops._mean(input,reduction_indices,keep_dims=None,name=None)
tensorflow.ops.gen_math_ops._min(input,reduction_indices,keep_dims=None,name=None)
tensorflow.ops.gen_math_ops._mul(x,y,name=None)
tensorflow.ops.gen_math_ops._neg(x,name=None)
tensorflow.ops.gen_math_ops._pow(x,y,name=None)
tensorflow.ops.gen_math_ops._prod(input,reduction_indices,keep_dims=None,name=None)
tensorflow.ops.gen_math_ops._range(start,limit,delta,name=None)
tensorflow.ops.gen_math_ops._real_div(x,y,name=None)
tensorflow.ops.gen_math_ops._reciprocal_grad(x,y,name=None)
tensorflow.ops.gen_math_ops._rsqrt_grad(x,y,name=None)
tensorflow.ops.gen_math_ops._select(condition,t,e,name=None)
tensorflow.ops.gen_math_ops._sigmoid(x,name=None)
tensorflow.ops.gen_math_ops._sigmoid_grad(x,y,name=None)
tensorflow.ops.gen_math_ops._sparse_mat_mul(a,b,transpose_a=None,transpose_b=None,a_is_sparse=None,b_is_sparse=None,name=None)
tensorflow.ops.gen_math_ops._sqrt_grad(x,y,name=None)
tensorflow.ops.gen_math_ops._sub(x,y,name=None)
tensorflow.ops.gen_math_ops._sum(input,reduction_indices,keep_dims=None,name=None)
tensorflow.ops.gen_math_ops._tanh(x,name=None)
tensorflow.ops.gen_math_ops._tanh_grad(x,y,name=None)
tensorflow.ops.gen_math_ops._truncate_div(x,y,name=None)
tensorflow.ops.gen_math_ops._truncate_mod(x,y,name=None)
tensorflow.ops.gen_math_ops.acos(x,name=None)
tensorflow.ops.gen_math_ops.add(x,y,name=None)
tensorflow.ops.gen_math_ops.approximate_equal(x,y,tolerance=None,name=None)
tensorflow.ops.gen_math_ops.arg_max(input,dimension,name=None)
tensorflow.ops.gen_math_ops.arg_min(input,dimension,name=None)
tensorflow.ops.gen_math_ops.asin(x,name=None)
tensorflow.ops.gen_math_ops.atan(x,name=None)
tensorflow.ops.gen_math_ops.betainc(a,b,x,name=None)
tensorflow.ops.gen_math_ops.bincount(arr,size,weights,name=None)
tensorflow.ops.gen_math_ops.cast(x,DstT,name=None)
tensorflow.ops.gen_math_ops.ceil(x,name=None)
tensorflow.ops.gen_math_ops.cos(x,name=None)
tensorflow.ops.gen_math_ops.cross(a,b,name=None)
tensorflow.ops.gen_math_ops.cumprod(x,axis,exclusive=None,reverse=None,name=None)
tensorflow.ops.gen_math_ops.cumsum(x,axis,exclusive=None,reverse=None,name=None)
tensorflow.ops.gen_math_ops.digamma(x,name=None)
tensorflow.ops.gen_math_ops.div(x,y,name=None)
tensorflow.ops.gen_math_ops.equal(x,y,name=None)
tensorflow.ops.gen_math_ops.erf(x,name=None)
tensorflow.ops.gen_math_ops.erfc(x,name=None)
tensorflow.ops.gen_math_ops.exp(x,name=None)
tensorflow.ops.gen_math_ops.expm1(x,name=None)
tensorflow.ops.gen_math_ops.floor(x,name=None)
tensorflow.ops.gen_math_ops.greater(x,y,name=None)
tensorflow.ops.gen_math_ops.greater_equal(x,y,name=None)
tensorflow.ops.gen_math_ops.igamma(a,x,name=None)
tensorflow.ops.gen_math_ops.igammac(a,x,name=None)
tensorflow.ops.gen_math_ops.imag(input,Tout=None,name=None)
tensorflow.ops.gen_math_ops.inv(x,name=None)
tensorflow.ops.gen_math_ops.is_finite(x,name=None)
tensorflow.ops.gen_math_ops.is_inf(x,name=None)
tensorflow.ops.gen_math_ops.is_nan(x,name=None)
tensorflow.ops.gen_math_ops.less(x,y,name=None)
tensorflow.ops.gen_math_ops.less_equal(x,y,name=None)
tensorflow.ops.gen_math_ops.lgamma(x,name=None)
tensorflow.ops.gen_math_ops.lin_space(start,stop,num,name=None)
tensorflow.ops.gen_math_ops.log(x,name=None)
tensorflow.ops.gen_math_ops.log1p(x,name=None)
tensorflow.ops.gen_math_ops.logical_and(x,y,name=None)
tensorflow.ops.gen_math_ops.logical_not(x,name=None)
tensorflow.ops.gen_math_ops.logical_or(x,y,name=None)
tensorflow.ops.gen_math_ops.maximum(x,y,name=None)
tensorflow.ops.gen_math_ops.minimum(x,y,name=None)
tensorflow.ops.gen_math_ops.mod(x,y,name=None)
tensorflow.ops.gen_math_ops.not_equal(x,y,name=None)
tensorflow.ops.gen_math_ops.polygamma(a,x,name=None)
tensorflow.ops.gen_math_ops.quantize_down_and_shrink_range(input,input_min,input_max,out_type,name=None)
tensorflow.ops.gen_math_ops.quantized_mat_mul(a,b,min_a,max_a,min_b,max_b,Toutput=None,transpose_a=None,transpose_b=None,Tactivation=None,name=None)
tensorflow.ops.gen_math_ops.quantized_mul(x,y,min_x,max_x,min_y,max_y,Toutput=None,name=None)
tensorflow.ops.gen_math_ops.real(input,Tout=None,name=None)
tensorflow.ops.gen_math_ops.reciprocal(x,name=None)
tensorflow.ops.gen_math_ops.requantization_range(input,input_min,input_max,name=None)
tensorflow.ops.gen_math_ops.requantize(input,input_min,input_max,requested_output_min,requested_output_max,out_type,name=None)
tensorflow.ops.gen_math_ops.rint(x,name=None)
tensorflow.ops.gen_math_ops.round(x,name=None)
tensorflow.ops.gen_math_ops.rsqrt(x,name=None)
tensorflow.ops.gen_math_ops.segment_max(data,segment_ids,name=None)
tensorflow.ops.gen_math_ops.segment_mean(data,segment_ids,name=None)
tensorflow.ops.gen_math_ops.segment_min(data,segment_ids,name=None)
tensorflow.ops.gen_math_ops.segment_prod(data,segment_ids,name=None)
tensorflow.ops.gen_math_ops.segment_sum(data,segment_ids,name=None)
tensorflow.ops.gen_math_ops.sign(x,name=None)
tensorflow.ops.gen_math_ops.sin(x,name=None)
tensorflow.ops.gen_math_ops.sparse_segment_mean(data,indices,segment_ids,name=None)
tensorflow.ops.gen_math_ops.sparse_segment_mean_grad(grad,indices,segment_ids,output_dim0,name=None)
tensorflow.ops.gen_math_ops.sparse_segment_sqrt_n(data,indices,segment_ids,name=None)
tensorflow.ops.gen_math_ops.sparse_segment_sqrt_n_grad(grad,indices,segment_ids,output_dim0,name=None)
tensorflow.ops.gen_math_ops.sparse_segment_sum(data,indices,segment_ids,name=None)
tensorflow.ops.gen_math_ops.sqrt(x,name=None)
tensorflow.ops.gen_math_ops.square(x,name=None)
tensorflow.ops.gen_math_ops.squared_difference(x,y,name=None)
tensorflow.ops.gen_math_ops.tan(x,name=None)
tensorflow.ops.gen_math_ops.unsorted_segment_max(data,segment_ids,num_segments,name=None)
tensorflow.ops.gen_math_ops.unsorted_segment_sum(data,segment_ids,num_segments,name=None)
tensorflow.ops.gen_math_ops.zeta(x,q,name=None)
tensorflow.python.ops.gen_math_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_math_ops._abs(x,name=None)
tensorflow.python.ops.gen_math_ops._add_n(inputs,name=None)
tensorflow.python.ops.gen_math_ops._all(input,reduction_indices,keep_dims=None,name=None)
tensorflow.python.ops.gen_math_ops._any(input,reduction_indices,keep_dims=None,name=None)
tensorflow.python.ops.gen_math_ops._batch_mat_mul(x,y,adj_x=None,adj_y=None,name=None)
tensorflow.python.ops.gen_math_ops._complex(real,imag,Tout=None,name=None)
tensorflow.python.ops.gen_math_ops._complex_abs(x,Tout=None,name=None)
tensorflow.python.ops.gen_math_ops._conj(input,name=None)
tensorflow.python.ops.gen_math_ops._floor_div(x,y,name=None)
tensorflow.python.ops.gen_math_ops._floor_mod(x,y,name=None)
tensorflow.python.ops.gen_math_ops._inv_grad(x,y,name=None)
tensorflow.python.ops.gen_math_ops._mat_mul(a,b,transpose_a=None,transpose_b=None,name=None)
tensorflow.python.ops.gen_math_ops._max(input,reduction_indices,keep_dims=None,name=None)
tensorflow.python.ops.gen_math_ops._mean(input,reduction_indices,keep_dims=None,name=None)
tensorflow.python.ops.gen_math_ops._min(input,reduction_indices,keep_dims=None,name=None)
tensorflow.python.ops.gen_math_ops._mul(x,y,name=None)
tensorflow.python.ops.gen_math_ops._neg(x,name=None)
tensorflow.python.ops.gen_math_ops._pow(x,y,name=None)
tensorflow.python.ops.gen_math_ops._prod(input,reduction_indices,keep_dims=None,name=None)
tensorflow.python.ops.gen_math_ops._range(start,limit,delta,name=None)
tensorflow.python.ops.gen_math_ops._real_div(x,y,name=None)
tensorflow.python.ops.gen_math_ops._reciprocal_grad(x,y,name=None)
tensorflow.python.ops.gen_math_ops._rsqrt_grad(x,y,name=None)
tensorflow.python.ops.gen_math_ops._select(condition,t,e,name=None)
tensorflow.python.ops.gen_math_ops._sigmoid(x,name=None)
tensorflow.python.ops.gen_math_ops._sigmoid_grad(x,y,name=None)
tensorflow.python.ops.gen_math_ops._sparse_mat_mul(a,b,transpose_a=None,transpose_b=None,a_is_sparse=None,b_is_sparse=None,name=None)
tensorflow.python.ops.gen_math_ops._sqrt_grad(x,y,name=None)
tensorflow.python.ops.gen_math_ops._sub(x,y,name=None)
tensorflow.python.ops.gen_math_ops._sum(input,reduction_indices,keep_dims=None,name=None)
tensorflow.python.ops.gen_math_ops._tanh(x,name=None)
tensorflow.python.ops.gen_math_ops._tanh_grad(x,y,name=None)
tensorflow.python.ops.gen_math_ops._truncate_div(x,y,name=None)
tensorflow.python.ops.gen_math_ops._truncate_mod(x,y,name=None)
tensorflow.python.ops.gen_math_ops.acos(x,name=None)
tensorflow.python.ops.gen_math_ops.add(x,y,name=None)
tensorflow.python.ops.gen_math_ops.approximate_equal(x,y,tolerance=None,name=None)
tensorflow.python.ops.gen_math_ops.arg_max(input,dimension,name=None)
tensorflow.python.ops.gen_math_ops.arg_min(input,dimension,name=None)
tensorflow.python.ops.gen_math_ops.asin(x,name=None)
tensorflow.python.ops.gen_math_ops.atan(x,name=None)
tensorflow.python.ops.gen_math_ops.betainc(a,b,x,name=None)
tensorflow.python.ops.gen_math_ops.bincount(arr,size,weights,name=None)
tensorflow.python.ops.gen_math_ops.cast(x,DstT,name=None)
tensorflow.python.ops.gen_math_ops.ceil(x,name=None)
tensorflow.python.ops.gen_math_ops.cos(x,name=None)
tensorflow.python.ops.gen_math_ops.cross(a,b,name=None)
tensorflow.python.ops.gen_math_ops.cumprod(x,axis,exclusive=None,reverse=None,name=None)
tensorflow.python.ops.gen_math_ops.cumsum(x,axis,exclusive=None,reverse=None,name=None)
tensorflow.python.ops.gen_math_ops.digamma(x,name=None)
tensorflow.python.ops.gen_math_ops.div(x,y,name=None)
tensorflow.python.ops.gen_math_ops.equal(x,y,name=None)
tensorflow.python.ops.gen_math_ops.erf(x,name=None)
tensorflow.python.ops.gen_math_ops.erfc(x,name=None)
tensorflow.python.ops.gen_math_ops.exp(x,name=None)
tensorflow.python.ops.gen_math_ops.expm1(x,name=None)
tensorflow.python.ops.gen_math_ops.floor(x,name=None)
tensorflow.python.ops.gen_math_ops.greater(x,y,name=None)
tensorflow.python.ops.gen_math_ops.greater_equal(x,y,name=None)
tensorflow.python.ops.gen_math_ops.igamma(a,x,name=None)
tensorflow.python.ops.gen_math_ops.igammac(a,x,name=None)
tensorflow.python.ops.gen_math_ops.imag(input,Tout=None,name=None)
tensorflow.python.ops.gen_math_ops.inv(x,name=None)
tensorflow.python.ops.gen_math_ops.is_finite(x,name=None)
tensorflow.python.ops.gen_math_ops.is_inf(x,name=None)
tensorflow.python.ops.gen_math_ops.is_nan(x,name=None)
tensorflow.python.ops.gen_math_ops.less(x,y,name=None)
tensorflow.python.ops.gen_math_ops.less_equal(x,y,name=None)
tensorflow.python.ops.gen_math_ops.lgamma(x,name=None)
tensorflow.python.ops.gen_math_ops.lin_space(start,stop,num,name=None)
tensorflow.python.ops.gen_math_ops.log(x,name=None)
tensorflow.python.ops.gen_math_ops.log1p(x,name=None)
tensorflow.python.ops.gen_math_ops.logical_and(x,y,name=None)
tensorflow.python.ops.gen_math_ops.logical_not(x,name=None)
tensorflow.python.ops.gen_math_ops.logical_or(x,y,name=None)
tensorflow.python.ops.gen_math_ops.maximum(x,y,name=None)
tensorflow.python.ops.gen_math_ops.minimum(x,y,name=None)
tensorflow.python.ops.gen_math_ops.mod(x,y,name=None)
tensorflow.python.ops.gen_math_ops.not_equal(x,y,name=None)
tensorflow.python.ops.gen_math_ops.polygamma(a,x,name=None)
tensorflow.python.ops.gen_math_ops.quantize_down_and_shrink_range(input,input_min,input_max,out_type,name=None)
tensorflow.python.ops.gen_math_ops.quantized_mat_mul(a,b,min_a,max_a,min_b,max_b,Toutput=None,transpose_a=None,transpose_b=None,Tactivation=None,name=None)
tensorflow.python.ops.gen_math_ops.quantized_mul(x,y,min_x,max_x,min_y,max_y,Toutput=None,name=None)
tensorflow.python.ops.gen_math_ops.real(input,Tout=None,name=None)
tensorflow.python.ops.gen_math_ops.reciprocal(x,name=None)
tensorflow.python.ops.gen_math_ops.requantization_range(input,input_min,input_max,name=None)
tensorflow.python.ops.gen_math_ops.requantize(input,input_min,input_max,requested_output_min,requested_output_max,out_type,name=None)
tensorflow.python.ops.gen_math_ops.rint(x,name=None)
tensorflow.python.ops.gen_math_ops.round(x,name=None)
tensorflow.python.ops.gen_math_ops.rsqrt(x,name=None)
tensorflow.python.ops.gen_math_ops.segment_max(data,segment_ids,name=None)
tensorflow.python.ops.gen_math_ops.segment_mean(data,segment_ids,name=None)
tensorflow.python.ops.gen_math_ops.segment_min(data,segment_ids,name=None)
tensorflow.python.ops.gen_math_ops.segment_prod(data,segment_ids,name=None)
tensorflow.python.ops.gen_math_ops.segment_sum(data,segment_ids,name=None)
tensorflow.python.ops.gen_math_ops.sign(x,name=None)
tensorflow.python.ops.gen_math_ops.sin(x,name=None)
tensorflow.python.ops.gen_math_ops.sparse_segment_mean(data,indices,segment_ids,name=None)
tensorflow.python.ops.gen_math_ops.sparse_segment_mean_grad(grad,indices,segment_ids,output_dim0,name=None)
tensorflow.python.ops.gen_math_ops.sparse_segment_sqrt_n(data,indices,segment_ids,name=None)
tensorflow.python.ops.gen_math_ops.sparse_segment_sqrt_n_grad(grad,indices,segment_ids,output_dim0,name=None)
tensorflow.python.ops.gen_math_ops.sparse_segment_sum(data,indices,segment_ids,name=None)
tensorflow.python.ops.gen_math_ops.sqrt(x,name=None)
tensorflow.python.ops.gen_math_ops.square(x,name=None)
tensorflow.python.ops.gen_math_ops.squared_difference(x,y,name=None)
tensorflow.python.ops.gen_math_ops.tan(x,name=None)
tensorflow.python.ops.gen_math_ops.unsorted_segment_max(data,segment_ids,num_segments,name=None)
tensorflow.python.ops.gen_math_ops.unsorted_segment_sum(data,segment_ids,num_segments,name=None)
tensorflow.python.ops.gen_math_ops.zeta(x,q,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/partitioned_variables.py----------------------------------------
A:tensorflow.python.ops.partitioned_variables.slices_per_shard->max(1, math.floor(max_shard_bytes / bytes_per_slice))
A:tensorflow.python.ops.partitioned_variables.axis_shards->min(max_shards, axis_shards)
A:tensorflow.python.ops.partitioned_variables.partitions_list[axis]->min(num_shards, shape[axis].value)
A:tensorflow.python.ops.partitioned_variables.partitioned_var->tensorflow.python.ops.variable_scope._get_partitioned_variable(name=None, shape=shape, dtype=dtype, initializer=initializer, trainable=trainable, partitioner=partitioner, collections=collections)
tensorflow.ops.partitioned_variables.create_partitioned_variables(shape,slicing,initializer,dtype=dtypes.float32,trainable=True,collections=None,name=None,reuse=None)
tensorflow.ops.partitioned_variables.fixed_size_partitioner(num_shards,axis=0)
tensorflow.ops.partitioned_variables.min_max_variable_partitioner(max_partitions=1,axis=0,min_slice_size=256<<10,bytes_per_string_element=16)
tensorflow.ops.partitioned_variables.variable_axis_size_partitioner(max_shard_bytes,axis=0,bytes_per_string_element=16,max_shards=None)
tensorflow.python.ops.partitioned_variables.create_partitioned_variables(shape,slicing,initializer,dtype=dtypes.float32,trainable=True,collections=None,name=None,reuse=None)
tensorflow.python.ops.partitioned_variables.fixed_size_partitioner(num_shards,axis=0)
tensorflow.python.ops.partitioned_variables.min_max_variable_partitioner(max_partitions=1,axis=0,min_slice_size=256<<10,bytes_per_string_element=16)
tensorflow.python.ops.partitioned_variables.variable_axis_size_partitioner(max_shard_bytes,axis=0,bytes_per_string_element=16,max_shards=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/state_grad.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/metrics.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_functional_ops.py----------------------------------------
A:tensorflow.python.ops.gen_functional_ops.result->_InitOpDefLibrary().apply_op('SymbolicGradient', input=input, Tout=Tout, f=f, name=name)
A:tensorflow.python.ops.gen_functional_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_functional_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_functional_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_functional_ops._InitOpDefLibrary()
tensorflow.ops.gen_functional_ops._symbolic_gradient(input,Tout,f,name=None)
tensorflow.python.ops.gen_functional_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_functional_ops._symbolic_gradient(input,Tout,f,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/logging_ops.py----------------------------------------
A:tensorflow.python.ops.logging_ops.val->tensorflow.python.ops.gen_logging_ops._scalar_summary(tags=tags, values=values, name=scope)
A:tensorflow.python.ops.logging_ops.sample_rate->tensorflow.python.framework.ops.convert_to_tensor(sample_rate, dtype=dtypes.float32, name='sample_rate')
A:tensorflow.python.ops.logging_ops.summary_ops->tensorflow.python.framework.ops.get_collection(key)
A:tensorflow.python.ops.logging_ops.summary_op->merge_all_summaries()
tensorflow.ops.logging_ops.Print(input_,data,message=None,first_n=None,summarize=None,name=None)
tensorflow.ops.logging_ops._Collect(val,collections,default_collections)
tensorflow.ops.logging_ops._PrintGrad(op,*grad)
tensorflow.ops.logging_ops.audio_summary(tag,tensor,sample_rate,max_outputs=3,collections=None,name=None)
tensorflow.ops.logging_ops.get_summary_op()
tensorflow.ops.logging_ops.histogram_summary(tag,values,collections=None,name=None)
tensorflow.ops.logging_ops.image_summary(tag,tensor,max_images=3,collections=None,name=None)
tensorflow.ops.logging_ops.merge_all_summaries(key=ops.GraphKeys.SUMMARIES)
tensorflow.ops.logging_ops.merge_summary(inputs,collections=None,name=None)
tensorflow.ops.logging_ops.scalar_summary(tags,values,collections=None,name=None)
tensorflow.python.ops.logging_ops.Print(input_,data,message=None,first_n=None,summarize=None,name=None)
tensorflow.python.ops.logging_ops._Collect(val,collections,default_collections)
tensorflow.python.ops.logging_ops._PrintGrad(op,*grad)
tensorflow.python.ops.logging_ops.audio_summary(tag,tensor,sample_rate,max_outputs=3,collections=None,name=None)
tensorflow.python.ops.logging_ops.get_summary_op()
tensorflow.python.ops.logging_ops.histogram_summary(tag,values,collections=None,name=None)
tensorflow.python.ops.logging_ops.image_summary(tag,tensor,max_images=3,collections=None,name=None)
tensorflow.python.ops.logging_ops.merge_all_summaries(key=ops.GraphKeys.SUMMARIES)
tensorflow.python.ops.logging_ops.merge_summary(inputs,collections=None,name=None)
tensorflow.python.ops.logging_ops.scalar_summary(tags,values,collections=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_parsing_ops.py----------------------------------------
A:tensorflow.python.ops.gen_parsing_ops.result->_InitOpDefLibrary().apply_op('StringToNumber', string_tensor=string_tensor, out_type=out_type, name=name)
A:tensorflow.python.ops.gen_parsing_ops._ParseExampleOutput->collections.namedtuple('ParseExample', __parse_example_outputs)
A:tensorflow.python.ops.gen_parsing_ops._ParseSingleSequenceExampleOutput->collections.namedtuple('ParseSingleSequenceExample', __parse_single_sequence_example_outputs)
A:tensorflow.python.ops.gen_parsing_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_parsing_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_parsing_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_parsing_ops._InitOpDefLibrary()
tensorflow.ops.gen_parsing_ops._parse_example(serialized,names,sparse_keys,dense_keys,dense_defaults,sparse_types,dense_shapes,name=None)
tensorflow.ops.gen_parsing_ops._parse_single_sequence_example(serialized,feature_list_dense_missing_assumed_empty,context_sparse_keys,context_dense_keys,feature_list_sparse_keys,feature_list_dense_keys,context_dense_defaults,debug_name,context_sparse_types=None,feature_list_dense_types=None,context_dense_shapes=None,feature_list_sparse_types=None,feature_list_dense_shapes=None,name=None)
tensorflow.ops.gen_parsing_ops.decode_csv(records,record_defaults,field_delim=None,name=None)
tensorflow.ops.gen_parsing_ops.decode_json_example(json_examples,name=None)
tensorflow.ops.gen_parsing_ops.decode_raw(bytes,out_type,little_endian=None,name=None)
tensorflow.ops.gen_parsing_ops.parse_tensor(serialized,out_type,name=None)
tensorflow.ops.gen_parsing_ops.string_to_number(string_tensor,out_type=None,name=None)
tensorflow.python.ops.gen_parsing_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_parsing_ops._parse_example(serialized,names,sparse_keys,dense_keys,dense_defaults,sparse_types,dense_shapes,name=None)
tensorflow.python.ops.gen_parsing_ops._parse_single_sequence_example(serialized,feature_list_dense_missing_assumed_empty,context_sparse_keys,context_dense_keys,feature_list_sparse_keys,feature_list_dense_keys,context_dense_defaults,debug_name,context_sparse_types=None,feature_list_dense_types=None,context_dense_shapes=None,feature_list_sparse_types=None,feature_list_dense_shapes=None,name=None)
tensorflow.python.ops.gen_parsing_ops.decode_csv(records,record_defaults,field_delim=None,name=None)
tensorflow.python.ops.gen_parsing_ops.decode_json_example(json_examples,name=None)
tensorflow.python.ops.gen_parsing_ops.decode_raw(bytes,out_type,little_endian=None,name=None)
tensorflow.python.ops.gen_parsing_ops.parse_tensor(serialized,out_type,name=None)
tensorflow.python.ops.gen_parsing_ops.string_to_number(string_tensor,out_type=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_control_flow_ops.py----------------------------------------
A:tensorflow.python.ops.gen_control_flow_ops.result->_InitOpDefLibrary().apply_op('Switch', data=data, pred=pred, name=name)
A:tensorflow.python.ops.gen_control_flow_ops._MergeOutput->collections.namedtuple('Merge', __merge_outputs)
A:tensorflow.python.ops.gen_control_flow_ops._RefMergeOutput->collections.namedtuple('RefMerge', __ref_merge_outputs)
A:tensorflow.python.ops.gen_control_flow_ops._RefSwitchOutput->collections.namedtuple('RefSwitch', _ref_switch_outputs)
A:tensorflow.python.ops.gen_control_flow_ops._SwitchOutput->collections.namedtuple('Switch', __switch_outputs)
A:tensorflow.python.ops.gen_control_flow_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_control_flow_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_control_flow_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_control_flow_ops._InitOpDefLibrary()
tensorflow.ops.gen_control_flow_ops._exit(data,name=None)
tensorflow.ops.gen_control_flow_ops._merge(inputs,name=None)
tensorflow.ops.gen_control_flow_ops._ref_exit(data,name=None)
tensorflow.ops.gen_control_flow_ops._ref_merge(inputs,name=None)
tensorflow.ops.gen_control_flow_ops._switch(data,pred,name=None)
tensorflow.ops.gen_control_flow_ops.abort(error_msg=None,exit_without_error=None,name=None)
tensorflow.ops.gen_control_flow_ops.control_trigger(name=None)
tensorflow.ops.gen_control_flow_ops.enter(data,frame_name,is_constant=None,parallel_iterations=None,name=None)
tensorflow.ops.gen_control_flow_ops.loop_cond(input,name=None)
tensorflow.ops.gen_control_flow_ops.next_iteration(data,name=None)
tensorflow.ops.gen_control_flow_ops.no_op(name=None)
tensorflow.ops.gen_control_flow_ops.ref_enter(data,frame_name,is_constant=None,parallel_iterations=None,name=None)
tensorflow.ops.gen_control_flow_ops.ref_next_iteration(data,name=None)
tensorflow.ops.gen_control_flow_ops.ref_select(index,inputs,name=None)
tensorflow.ops.gen_control_flow_ops.ref_switch(data,pred,name=None)
tensorflow.python.ops.gen_control_flow_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_control_flow_ops._exit(data,name=None)
tensorflow.python.ops.gen_control_flow_ops._merge(inputs,name=None)
tensorflow.python.ops.gen_control_flow_ops._ref_exit(data,name=None)
tensorflow.python.ops.gen_control_flow_ops._ref_merge(inputs,name=None)
tensorflow.python.ops.gen_control_flow_ops._switch(data,pred,name=None)
tensorflow.python.ops.gen_control_flow_ops.abort(error_msg=None,exit_without_error=None,name=None)
tensorflow.python.ops.gen_control_flow_ops.control_trigger(name=None)
tensorflow.python.ops.gen_control_flow_ops.enter(data,frame_name,is_constant=None,parallel_iterations=None,name=None)
tensorflow.python.ops.gen_control_flow_ops.loop_cond(input,name=None)
tensorflow.python.ops.gen_control_flow_ops.next_iteration(data,name=None)
tensorflow.python.ops.gen_control_flow_ops.no_op(name=None)
tensorflow.python.ops.gen_control_flow_ops.ref_enter(data,frame_name,is_constant=None,parallel_iterations=None,name=None)
tensorflow.python.ops.gen_control_flow_ops.ref_next_iteration(data,name=None)
tensorflow.python.ops.gen_control_flow_ops.ref_select(index,inputs,name=None)
tensorflow.python.ops.gen_control_flow_ops.ref_switch(data,pred,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/weights_broadcast_ops.py----------------------------------------
A:tensorflow.python.ops.weights_broadcast_ops.values_shape_2d->tensorflow.python.ops.array_ops.expand_dims(values_shape, -1)
A:tensorflow.python.ops.weights_broadcast_ops.valid_dims->tensorflow.python.ops.array_ops.concat((values_shape_2d, array_ops.ones_like(values_shape_2d)), axis=1)
A:tensorflow.python.ops.weights_broadcast_ops.weights_shape_2d->tensorflow.python.ops.array_ops.expand_dims(weights_shape, -1)
A:tensorflow.python.ops.weights_broadcast_ops.invalid_dims->tensorflow.python.ops.sets.set_difference(weights_shape_2d, valid_dims)
A:tensorflow.python.ops.weights_broadcast_ops.num_invalid_dims->tensorflow.python.ops.array_ops.size(invalid_dims.values, name='num_invalid_dims')
A:tensorflow.python.ops.weights_broadcast_ops.is_same_rank->tensorflow.python.ops.math_ops.equal(values_rank, weights_rank, name='is_same_rank')
A:tensorflow.python.ops.weights_broadcast_ops.weights->tensorflow.python.framework.ops.convert_to_tensor(weights, dtype=values.dtype.base_dtype, name='weights')
A:tensorflow.python.ops.weights_broadcast_ops.weights_shape->tensorflow.python.framework.ops.convert_to_tensor(weights, dtype=values.dtype.base_dtype, name='weights').get_shape()
A:tensorflow.python.ops.weights_broadcast_ops.weights_rank->tensorflow.python.ops.array_ops.rank(weights, name='rank')
A:tensorflow.python.ops.weights_broadcast_ops.weights_rank_static->tensorflow.python.framework.tensor_util.constant_value(weights_rank)
A:tensorflow.python.ops.weights_broadcast_ops.values->tensorflow.python.framework.ops.convert_to_tensor(values, name='values')
A:tensorflow.python.ops.weights_broadcast_ops.values_shape->tensorflow.python.framework.ops.convert_to_tensor(values, name='values').get_shape()
A:tensorflow.python.ops.weights_broadcast_ops.values_rank->tensorflow.python.ops.array_ops.rank(values, name='rank')
A:tensorflow.python.ops.weights_broadcast_ops.values_rank_static->tensorflow.python.framework.tensor_util.constant_value(values_rank)
A:tensorflow.python.ops.weights_broadcast_ops.weights_shape_static->tensorflow.python.framework.tensor_util.constant_value(weights_shape)
A:tensorflow.python.ops.weights_broadcast_ops.values_shape_static->tensorflow.python.framework.tensor_util.constant_value(values_shape)
A:tensorflow.python.ops.weights_broadcast_ops.ndims->len(values_shape_static)
A:tensorflow.python.ops.weights_broadcast_ops.is_scalar->tensorflow.python.ops.math_ops.equal(0, weights_rank, name='is_scalar')
A:tensorflow.python.ops.weights_broadcast_ops.is_valid_shape->tensorflow.python.ops.control_flow_ops.cond(is_scalar, lambda : is_scalar, lambda : _has_valid_nonscalar_shape(weights_rank, weights_shape, values_rank, values_shape), name='is_valid_shape')
tensorflow.ops.weights_broadcast_ops._has_valid_dims(weights_shape,values_shape)
tensorflow.ops.weights_broadcast_ops._has_valid_nonscalar_shape(weights_rank,weights_shape,values_rank,values_shape)
tensorflow.ops.weights_broadcast_ops.assert_broadcastable(weights,values)
tensorflow.ops.weights_broadcast_ops.broadcast_weights(weights,values)
tensorflow.python.ops.weights_broadcast_ops._has_valid_dims(weights_shape,values_shape)
tensorflow.python.ops.weights_broadcast_ops._has_valid_nonscalar_shape(weights_rank,weights_shape,values_rank,values_shape)
tensorflow.python.ops.weights_broadcast_ops.assert_broadcastable(weights,values)
tensorflow.python.ops.weights_broadcast_ops.broadcast_weights(weights,values)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/metrics_impl.py----------------------------------------
A:tensorflow.python.ops.metrics_impl.predictions->tensorflow.python.ops.math_ops.cast(predictions, dtype=dtypes.bool)
A:tensorflow.python.ops.metrics_impl.(labels, predictions)->tensorflow.python.ops.confusion_matrix.remove_squeezable_dimensions(labels, predictions)
A:tensorflow.python.ops.metrics_impl.weights->tensorflow.python.ops.math_ops.to_double(weights)
A:tensorflow.python.ops.metrics_impl.weights_shape->tensorflow.python.ops.math_ops.to_double(weights).get_shape()
A:tensorflow.python.ops.metrics_impl.predictions_shape->tensorflow.python.ops.math_ops.cast(predictions, dtype=dtypes.bool).get_shape()
A:tensorflow.python.ops.metrics_impl.weights_rank_tensor->tensorflow.python.ops.array_ops.rank(weights)
A:tensorflow.python.ops.metrics_impl.labels->_maybe_expand_labels(labels, predictions)
A:tensorflow.python.ops.metrics_impl.collections->list(collections or [])
A:tensorflow.python.ops.metrics_impl.total_cm->_create_local('total_confusion_matrix', shape=[num_classes, num_classes], dtype=cm_dtype)
A:tensorflow.python.ops.metrics_impl.num_classes->tensorflow.python.ops.math_ops.to_int64(num_classes)
A:tensorflow.python.ops.metrics_impl.current_cm->tensorflow.python.ops.confusion_matrix.confusion_matrix(labels, predictions, num_classes, weights=weights, dtype=cm_dtype)
A:tensorflow.python.ops.metrics_impl.update_op->compute_specificity_at_sensitivity(update_ops['tp'], update_ops['tn'], update_ops['fp'], update_ops['fn'], 'update_op')
A:tensorflow.python.ops.metrics_impl.values->tensorflow.python.ops.math_ops.multiply(values, weights)
A:tensorflow.python.ops.metrics_impl.total->_create_local('total_tensor', shape=values.get_shape())
A:tensorflow.python.ops.metrics_impl.count->_create_local('count', shape=[])
A:tensorflow.python.ops.metrics_impl.num_values->tensorflow.python.ops.math_ops.multiply(num_values, weights)
A:tensorflow.python.ops.metrics_impl.(values, _, weights)->_remove_squeezable_dimensions(predictions=values, labels=None, weights=weights)
A:tensorflow.python.ops.metrics_impl.update_total_op->tensorflow.python.ops.state_ops.assign_add(total, values)
A:tensorflow.python.ops.metrics_impl.update_count_op->tensorflow.python.ops.state_ops.assign_add(count, num_values)
A:tensorflow.python.ops.metrics_impl.mean_t->compute_mean(total, count, 'value')
A:tensorflow.python.ops.metrics_impl.(predictions, labels, weights)->_remove_squeezable_dimensions(predictions=predictions, labels=labels, weights=weights)
A:tensorflow.python.ops.metrics_impl.is_correct->tensorflow.python.ops.math_ops.to_float(math_ops.equal(predictions, labels))
A:tensorflow.python.ops.metrics_impl.num_thresholds->len(thresholds)
A:tensorflow.python.ops.metrics_impl.predictions_2d->tensorflow.python.ops.array_ops.reshape(predictions, [-1, 1])
A:tensorflow.python.ops.metrics_impl.labels_2d->tensorflow.python.ops.array_ops.reshape(math_ops.cast(labels, dtype=dtypes.bool), [1, -1])
A:tensorflow.python.ops.metrics_impl.thresh_tiled->tensorflow.python.ops.array_ops.tile(array_ops.expand_dims(array_ops.constant(thresholds), [1]), array_ops.stack([1, num_predictions]))
A:tensorflow.python.ops.metrics_impl.pred_is_pos->tensorflow.python.ops.math_ops.greater(array_ops.tile(array_ops.transpose(predictions_2d), [num_thresholds, 1]), thresh_tiled)
A:tensorflow.python.ops.metrics_impl.pred_is_neg->tensorflow.python.ops.math_ops.logical_not(pred_is_pos)
A:tensorflow.python.ops.metrics_impl.label_is_pos->tensorflow.python.ops.array_ops.tile(labels_2d, [num_thresholds, 1])
A:tensorflow.python.ops.metrics_impl.label_is_neg->tensorflow.python.ops.math_ops.logical_not(label_is_pos)
A:tensorflow.python.ops.metrics_impl.weights_tiled->tensorflow.python.ops.array_ops.tile(array_ops.reshape(weights, [1, -1]), [num_thresholds, 1])
A:tensorflow.python.ops.metrics_impl.true_p->_create_local('true_positives', shape=[num_thresholds])
A:tensorflow.python.ops.metrics_impl.is_true_positive->tensorflow.python.ops.math_ops.logical_and(math_ops.equal(labels, True), math_ops.equal(predictions, True))
A:tensorflow.python.ops.metrics_impl.update_ops['tp']->tensorflow.python.ops.state_ops.assign_add(true_p, math_ops.reduce_sum(is_true_positive, 1))
A:tensorflow.python.ops.metrics_impl.false_n->_create_local('false_negatives', shape=[num_thresholds])
A:tensorflow.python.ops.metrics_impl.is_false_negative->tensorflow.python.ops.math_ops.logical_and(math_ops.equal(labels, True), math_ops.equal(predictions, False))
A:tensorflow.python.ops.metrics_impl.update_ops['fn']->tensorflow.python.ops.state_ops.assign_add(false_n, math_ops.reduce_sum(is_false_negative, 1))
A:tensorflow.python.ops.metrics_impl.true_n->_create_local('true_negatives', shape=[num_thresholds])
A:tensorflow.python.ops.metrics_impl.is_true_negative->tensorflow.python.ops.math_ops.to_float(math_ops.logical_and(label_is_neg, pred_is_neg))
A:tensorflow.python.ops.metrics_impl.update_ops['tn']->tensorflow.python.ops.state_ops.assign_add(true_n, math_ops.reduce_sum(is_true_negative, 1))
A:tensorflow.python.ops.metrics_impl.false_p->_create_local('false_positives', shape=[num_thresholds])
A:tensorflow.python.ops.metrics_impl.is_false_positive->tensorflow.python.ops.math_ops.logical_and(math_ops.equal(labels, False), math_ops.equal(predictions, True))
A:tensorflow.python.ops.metrics_impl.update_ops['fp']->tensorflow.python.ops.state_ops.assign_add(false_p, math_ops.reduce_sum(is_false_positive, 1))
A:tensorflow.python.ops.metrics_impl.(values, update_ops)->_confusion_matrix_at_thresholds(labels, predictions, thresholds, weights)
A:tensorflow.python.ops.metrics_impl.rec->compute_recall(values['tp'], values['fn'], 'value')
A:tensorflow.python.ops.metrics_impl.fp_rate->tensorflow.python.ops.math_ops.div(fp, fp + tn + epsilon)
A:tensorflow.python.ops.metrics_impl.prec->compute_precision(values['tp'], values['fp'], 'value')
A:tensorflow.python.ops.metrics_impl.auc_value->compute_auc(values['tp'], values['fn'], values['tn'], values['fp'], 'value')
A:tensorflow.python.ops.metrics_impl.absolute_errors->tensorflow.python.ops.math_ops.abs(predictions - labels)
A:tensorflow.python.ops.metrics_impl.radial_diffs->tensorflow.python.ops.math_ops.reduce_sum(radial_diffs, reduction_indices=[dim], keep_dims=True)
A:tensorflow.python.ops.metrics_impl.(mean_distance, update_op)->mean(radial_diffs, weights, None, None, name or 'mean_cosine_distance')
A:tensorflow.python.ops.metrics_impl.mean_distance->tensorflow.python.ops.math_ops.subtract(1.0, mean_distance)
A:tensorflow.python.ops.metrics_impl.(total_cm, update_op)->_streaming_confusion_matrix(labels, predictions, num_classes, weights)
A:tensorflow.python.ops.metrics_impl.per_row_sum->tensorflow.python.ops.math_ops.to_float(math_ops.reduce_sum(total_cm, 1))
A:tensorflow.python.ops.metrics_impl.cm_diag->tensorflow.python.ops.math_ops.to_float(array_ops.diag_part(total_cm))
A:tensorflow.python.ops.metrics_impl.denominator->tensorflow.python.ops.array_ops.where(math_ops.greater(denominator, 0), denominator, array_ops.ones_like(denominator))
A:tensorflow.python.ops.metrics_impl.accuracies->tensorflow.python.ops.math_ops.div(cm_diag, denominator)
A:tensorflow.python.ops.metrics_impl.mean_accuracy_v->compute_mean_accuracy('mean_accuracy')
A:tensorflow.python.ops.metrics_impl.sum_over_row->tensorflow.python.ops.math_ops.to_float(math_ops.reduce_sum(total_cm, 0))
A:tensorflow.python.ops.metrics_impl.sum_over_col->tensorflow.python.ops.math_ops.to_float(math_ops.reduce_sum(total_cm, 1))
A:tensorflow.python.ops.metrics_impl.iou->tensorflow.python.ops.math_ops.div(cm_diag, denominator)
A:tensorflow.python.ops.metrics_impl.mean_iou_v->compute_mean_iou('mean_iou')
A:tensorflow.python.ops.metrics_impl.(predictions, normalizer)->tensorflow.python.ops.confusion_matrix.remove_squeezable_dimensions(predictions, normalizer)
A:tensorflow.python.ops.metrics_impl.relative_errors->tensorflow.python.ops.array_ops.where(math_ops.equal(normalizer, 0.0), array_ops.zeros_like(labels), math_ops.div(math_ops.abs(labels - predictions), normalizer))
A:tensorflow.python.ops.metrics_impl.squared_error->tensorflow.python.ops.math_ops.square(labels - predictions)
A:tensorflow.python.ops.metrics_impl.non_zero_count->tensorflow.python.ops.math_ops.maximum(count, array_ops.ones_like(count), name=name)
A:tensorflow.python.ops.metrics_impl.is_below_threshold->tensorflow.python.ops.math_ops.to_float(math_ops.less(values, threshold))
A:tensorflow.python.ops.metrics_impl.value_tensor->tensorflow.python.ops.array_ops.identity(count)
A:tensorflow.python.ops.metrics_impl.(true_p, true_positives_update_op)->true_positives(labels, predictions, weights, metrics_collections=None, updates_collections=None, name=None)
A:tensorflow.python.ops.metrics_impl.(false_p, false_positives_update_op)->false_positives(labels, predictions, weights, metrics_collections=None, updates_collections=None, name=None)
A:tensorflow.python.ops.metrics_impl.p->compute_precision(true_p, false_p, 'value')
A:tensorflow.python.ops.metrics_impl.(false_n, false_negatives_update_op)->false_negatives(labels, predictions, weights, metrics_collections=None, updates_collections=None, name=None)
A:tensorflow.python.ops.metrics_impl.ids->tensorflow.python.framework.sparse_tensor.convert_to_tensor_or_sparse_tensor(ids)
A:tensorflow.python.ops.metrics_impl.ids_shape->tensorflow.python.ops.array_ops.shape(ids, out_type=dtypes.int64)
A:tensorflow.python.ops.metrics_impl.filled_selected_id_shape->tensorflow.python.ops.math_ops.reduced_shape(ids_shape, array_ops.reshape(ids_last_dim, [1]))
A:tensorflow.python.ops.metrics_impl.filled_selected_id->tensorflow.python.ops.array_ops.fill(filled_selected_id_shape, math_ops.to_int64(selected_id))
A:tensorflow.python.ops.metrics_impl.result->tensorflow.python.ops.sets.set_intersection(filled_selected_id, ids)
A:tensorflow.python.ops.metrics_impl.(labels, predictions_idx)->_maybe_select_class_id(labels, predictions_idx, class_id)
A:tensorflow.python.ops.metrics_impl.tp->_sparse_true_positive_at_k(predictions_idx=predictions_idx, labels=labels, class_id=class_id, weights=weights)
A:tensorflow.python.ops.metrics_impl.batch_total_tp->tensorflow.python.ops.math_ops.to_double(math_ops.reduce_sum(tp))
A:tensorflow.python.ops.metrics_impl.var->_local_variable(array_ops.zeros([], dtype=dtypes.float64), name=scope)
A:tensorflow.python.ops.metrics_impl.fn->_sparse_false_negative_at_k(predictions_idx=predictions_idx, labels=labels, class_id=class_id, weights=weights)
A:tensorflow.python.ops.metrics_impl.batch_total_fn->tensorflow.python.ops.math_ops.to_double(math_ops.reduce_sum(fn))
A:tensorflow.python.ops.metrics_impl.(_, top_k_idx)->tensorflow.python.ops.nn.top_k(predictions, k)
A:tensorflow.python.ops.metrics_impl.top_k_idx->tensorflow.python.ops.math_ops.to_int64(predictions_idx)
A:tensorflow.python.ops.metrics_impl.(tp, tp_update)->_streaming_sparse_true_positive_at_k(predictions_idx=top_k_idx, labels=labels, k=k, class_id=class_id, weights=weights)
A:tensorflow.python.ops.metrics_impl.(fn, fn_update)->_streaming_sparse_false_negative_at_k(predictions_idx=top_k_idx, labels=labels, k=k, class_id=class_id, weights=weights)
A:tensorflow.python.ops.metrics_impl.metric->tensorflow.python.ops.math_ops.div(tp, math_ops.add(tp, fp), name=scope)
A:tensorflow.python.ops.metrics_impl.update->tensorflow.python.ops.math_ops.div(tp_update, math_ops.add(tp_update, fp_update), name='update')
A:tensorflow.python.ops.metrics_impl.(mse, update_mse_op)->mean_squared_error(labels, predictions, weights, None, None, name or 'root_mean_squared_error')
A:tensorflow.python.ops.metrics_impl.rmse->tensorflow.python.ops.math_ops.sqrt(mse)
A:tensorflow.python.ops.metrics_impl.update_rmse_op->tensorflow.python.ops.math_ops.sqrt(update_mse_op)
A:tensorflow.python.ops.metrics_impl.specificities->tensorflow.python.ops.math_ops.div(tn, tn + fp + kepsilon)
A:tensorflow.python.ops.metrics_impl.tf_index->tensorflow.python.ops.math_ops.cast(tf_index, dtypes.int32)
A:tensorflow.python.ops.metrics_impl.sensitivity->compute_sensitivity_at_specificity(values['tp'], values['tn'], values['fp'], values['fn'], 'value')
A:tensorflow.python.ops.metrics_impl.tensor->tensorflow.python.framework.sparse_tensor.convert_to_tensor_or_sparse_tensor(tensor)
A:tensorflow.python.ops.metrics_impl.expand_dims->tensorflow.python.ops.array_ops.reshape(array_ops.size(tensor.dense_shape) + dim, [1])
A:tensorflow.python.ops.metrics_impl.expanded_shape->tensorflow.python.ops.array_ops.concat((array_ops.slice(tensor.dense_shape, [0], expand_dims), [1], array_ops.slice(tensor.dense_shape, expand_dims, [-1])), 0, name='expanded_shape')
A:tensorflow.python.ops.metrics_impl.expanded->tensorflow.python.ops.array_ops.expand_dims(tensor, dim if dim >= 0 else dim - 1, name='expand')
A:tensorflow.python.ops.metrics_impl.ones->tensorflow.python.ops.array_ops.ones_like(array_ops.shape(tensor))
A:tensorflow.python.ops.metrics_impl.tile_multiples->tensorflow.python.ops.array_ops.concat((ones[:dim], (multiple,), ones[dim:]), 0, name='multiples')
A:tensorflow.python.ops.metrics_impl.labels_shape->tensorflow.python.ops.array_ops.shape(labels)
A:tensorflow.python.ops.metrics_impl.num_relevant_scalar->tensorflow.python.ops.math_ops.minimum(labels_size, k)
A:tensorflow.python.ops.metrics_impl.predictions_idx->tensorflow.python.ops.math_ops.to_int64(predictions_idx, name='predictions_idx')
A:tensorflow.python.ops.metrics_impl.predictions_idx_per_k->tensorflow.python.ops.array_ops.expand_dims(predictions_idx, -1, name='predictions_idx_per_k')
A:tensorflow.python.ops.metrics_impl.labels_per_k->_expand_and_tile(labels, multiple=k, dim=-1, name='labels_per_k')
A:tensorflow.python.ops.metrics_impl.relevant_per_k->_sparse_true_positive_at_k(labels_per_k, predictions_idx_per_k, name='relevant_per_k')
A:tensorflow.python.ops.metrics_impl.tp_per_k->tensorflow.python.ops.math_ops.cumsum(relevant_per_k, axis=-1, name='tp_per_k')
A:tensorflow.python.ops.metrics_impl.retrieved_per_k->tensorflow.python.ops.math_ops.cumsum(array_ops.ones_like(relevant_per_k), axis=-1, name='retrieved_per_k')
A:tensorflow.python.ops.metrics_impl.precision_per_k->tensorflow.python.ops.math_ops.div(math_ops.to_double(tp_per_k), math_ops.to_double(retrieved_per_k), name='precision_per_k')
A:tensorflow.python.ops.metrics_impl.relevant_precision_per_k->tensorflow.python.ops.math_ops.multiply(precision_per_k, math_ops.to_double(relevant_per_k), name='relevant_precision_per_k')
A:tensorflow.python.ops.metrics_impl.precision_sum->tensorflow.python.ops.math_ops.reduce_sum(relevant_precision_per_k, reduction_indices=(-1,), name='precision_sum')
A:tensorflow.python.ops.metrics_impl.num_relevant_items->tensorflow.python.ops.math_ops.to_double(_num_relevant(labels, k))
A:tensorflow.python.ops.metrics_impl.average_precision->tensorflow.python.ops.math_ops.multiply(average_precision, weights)
A:tensorflow.python.ops.metrics_impl.max_var->_local_variable(array_ops.zeros([], dtype=dtypes.float64), name=max_scope)
A:tensorflow.python.ops.metrics_impl.batch_max->tensorflow.python.ops.math_ops.reduce_sum(weights, name='batch_max')
A:tensorflow.python.ops.metrics_impl.max_update->tensorflow.python.ops.state_ops.assign_add(max_var, batch_max, name='update')
A:tensorflow.python.ops.metrics_impl.total_var->_local_variable(array_ops.zeros([], dtype=dtypes.float64), name=total_scope)
A:tensorflow.python.ops.metrics_impl.batch_total->tensorflow.python.ops.math_ops.reduce_sum(average_precision, name='batch_total')
A:tensorflow.python.ops.metrics_impl.total_update->tensorflow.python.ops.state_ops.assign_add(total_var, batch_total, name='update')
A:tensorflow.python.ops.metrics_impl.mean_average_precision->_safe_scalar_div(total_var, max_var, name='mean')
A:tensorflow.python.ops.metrics_impl.(_, predictions_idx)->tensorflow.python.ops.nn.top_k(predictions, k)
A:tensorflow.python.ops.metrics_impl.fp->_sparse_false_positive_at_k(predictions_idx=predictions_idx, labels=labels, class_id=class_id, weights=weights)
A:tensorflow.python.ops.metrics_impl.batch_total_fp->tensorflow.python.ops.math_ops.to_double(math_ops.reduce_sum(fp))
A:tensorflow.python.ops.metrics_impl.(fp, fp_update)->_streaming_sparse_false_positive_at_k(predictions_idx=top_k_idx, labels=labels, k=k, class_id=class_id, weights=weights)
A:tensorflow.python.ops.metrics_impl.sensitivities->tensorflow.python.ops.math_ops.div(tp, tp + fn + kepsilon)
A:tensorflow.python.ops.metrics_impl.min_val->tensorflow.python.ops.math_ops.reduce_min(math_ops.abs(sensitivities - sensitivity))
A:tensorflow.python.ops.metrics_impl.indices_at_minval->tensorflow.python.ops.math_ops.cumsum(indices_at_minval)
A:tensorflow.python.ops.metrics_impl.specificity->compute_specificity_at_sensitivity(values['tp'], values['tn'], values['fp'], values['fn'], 'value')
tensorflow.metrics_impl._at_k_name(name,k=None,class_id=None)
tensorflow.metrics_impl._confusion_matrix_at_thresholds(labels,predictions,thresholds,weights=None,includes=None)
tensorflow.metrics_impl._count_condition(values,weights=None,metrics_collections=None,updates_collections=None)
tensorflow.metrics_impl._create_local(name,shape,collections=None,validate_shape=True,dtype=dtypes.float32)
tensorflow.metrics_impl._expand_and_tile(tensor,multiple,dim=0,name=None)
tensorflow.metrics_impl._local_variable(initial_value,validate_shape=True,name=None)
tensorflow.metrics_impl._maybe_expand_labels(labels,predictions)
tensorflow.metrics_impl._maybe_select_class_id(labels,predictions_idx,selected_id=None)
tensorflow.metrics_impl._num_relevant(labels,k)
tensorflow.metrics_impl._remove_squeezable_dimensions(predictions,labels,weights)
tensorflow.metrics_impl._safe_div(numerator,denominator,name)
tensorflow.metrics_impl._safe_scalar_div(numerator,denominator,name)
tensorflow.metrics_impl._select_class_id(ids,selected_id)
tensorflow.metrics_impl._sparse_average_precision_at_top_k(labels,predictions_idx)
tensorflow.metrics_impl._sparse_false_negative_at_k(labels,predictions_idx,class_id=None,weights=None)
tensorflow.metrics_impl._sparse_false_positive_at_k(labels,predictions_idx,class_id=None,weights=None)
tensorflow.metrics_impl._sparse_precision_at_top_k(labels,predictions_idx,k=None,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl._sparse_true_positive_at_k(labels,predictions_idx,class_id=None,weights=None,name=None)
tensorflow.metrics_impl._streaming_confusion_matrix(labels,predictions,num_classes,weights=None)
tensorflow.metrics_impl._streaming_sparse_average_precision_at_top_k(labels,predictions_idx,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl._streaming_sparse_false_negative_at_k(labels,predictions_idx,k,class_id=None,weights=None,name=None)
tensorflow.metrics_impl._streaming_sparse_false_positive_at_k(labels,predictions_idx,k=None,class_id=None,weights=None,name=None)
tensorflow.metrics_impl._streaming_sparse_true_positive_at_k(labels,predictions_idx,k=None,class_id=None,weights=None,name=None)
tensorflow.metrics_impl.accuracy(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.auc(labels,predictions,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,curve='ROC',name=None)
tensorflow.metrics_impl.false_negatives(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.false_positives(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.mean(values,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.mean_absolute_error(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.mean_cosine_distance(labels,predictions,dim,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.mean_iou(labels,predictions,num_classes,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.mean_per_class_accuracy(labels,predictions,num_classes,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.mean_relative_error(labels,predictions,normalizer,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.mean_squared_error(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.mean_tensor(values,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.percentage_below(values,threshold,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.precision(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.precision_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.recall(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.recall_at_k(labels,predictions,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.recall_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.root_mean_squared_error(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.sensitivity_at_specificity(labels,predictions,specificity,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.sparse_average_precision_at_k(labels,predictions,k,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.sparse_precision_at_k(labels,predictions,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.specificity_at_sensitivity(labels,predictions,sensitivity,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)
tensorflow.metrics_impl.true_positives(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl._at_k_name(name,k=None,class_id=None)
tensorflow.python.ops.metrics_impl._confusion_matrix_at_thresholds(labels,predictions,thresholds,weights=None,includes=None)
tensorflow.python.ops.metrics_impl._count_condition(values,weights=None,metrics_collections=None,updates_collections=None)
tensorflow.python.ops.metrics_impl._create_local(name,shape,collections=None,validate_shape=True,dtype=dtypes.float32)
tensorflow.python.ops.metrics_impl._expand_and_tile(tensor,multiple,dim=0,name=None)
tensorflow.python.ops.metrics_impl._local_variable(initial_value,validate_shape=True,name=None)
tensorflow.python.ops.metrics_impl._maybe_expand_labels(labels,predictions)
tensorflow.python.ops.metrics_impl._maybe_select_class_id(labels,predictions_idx,selected_id=None)
tensorflow.python.ops.metrics_impl._num_relevant(labels,k)
tensorflow.python.ops.metrics_impl._remove_squeezable_dimensions(predictions,labels,weights)
tensorflow.python.ops.metrics_impl._safe_div(numerator,denominator,name)
tensorflow.python.ops.metrics_impl._safe_scalar_div(numerator,denominator,name)
tensorflow.python.ops.metrics_impl._select_class_id(ids,selected_id)
tensorflow.python.ops.metrics_impl._sparse_average_precision_at_top_k(labels,predictions_idx)
tensorflow.python.ops.metrics_impl._sparse_false_negative_at_k(labels,predictions_idx,class_id=None,weights=None)
tensorflow.python.ops.metrics_impl._sparse_false_positive_at_k(labels,predictions_idx,class_id=None,weights=None)
tensorflow.python.ops.metrics_impl._sparse_precision_at_top_k(labels,predictions_idx,k=None,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl._sparse_true_positive_at_k(labels,predictions_idx,class_id=None,weights=None,name=None)
tensorflow.python.ops.metrics_impl._streaming_confusion_matrix(labels,predictions,num_classes,weights=None)
tensorflow.python.ops.metrics_impl._streaming_sparse_average_precision_at_top_k(labels,predictions_idx,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl._streaming_sparse_false_negative_at_k(labels,predictions_idx,k,class_id=None,weights=None,name=None)
tensorflow.python.ops.metrics_impl._streaming_sparse_false_positive_at_k(labels,predictions_idx,k=None,class_id=None,weights=None,name=None)
tensorflow.python.ops.metrics_impl._streaming_sparse_true_positive_at_k(labels,predictions_idx,k=None,class_id=None,weights=None,name=None)
tensorflow.python.ops.metrics_impl.accuracy(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.auc(labels,predictions,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,curve='ROC',name=None)
tensorflow.python.ops.metrics_impl.false_negatives(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.false_positives(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.mean(values,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.mean_absolute_error(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.mean_cosine_distance(labels,predictions,dim,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.mean_iou(labels,predictions,num_classes,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.mean_per_class_accuracy(labels,predictions,num_classes,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.mean_relative_error(labels,predictions,normalizer,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.mean_squared_error(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.mean_tensor(values,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.percentage_below(values,threshold,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.precision(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.precision_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.recall(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.recall_at_k(labels,predictions,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.recall_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.root_mean_squared_error(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.sensitivity_at_specificity(labels,predictions,specificity,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.sparse_average_precision_at_k(labels,predictions,k,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.sparse_precision_at_k(labels,predictions,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.specificity_at_sensitivity(labels,predictions,sensitivity,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)
tensorflow.python.ops.metrics_impl.true_positives(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/random_ops.py----------------------------------------
A:tensorflow.python.ops.random_ops.shape_tensor->_ShapeTensor(shape)
A:tensorflow.python.ops.random_ops.mean_tensor->tensorflow.python.framework.ops.convert_to_tensor(mean, dtype=dtype, name='mean')
A:tensorflow.python.ops.random_ops.stddev_tensor->tensorflow.python.framework.ops.convert_to_tensor(stddev, dtype=dtype, name='stddev')
A:tensorflow.python.ops.random_ops.(seed1, seed2)->tensorflow.python.framework.random_seed.get_seed(seed)
A:tensorflow.python.ops.random_ops.rnd->tensorflow.python.ops.gen_random_ops._random_uniform(shape, dtype, seed=seed1, seed2=seed2)
A:tensorflow.python.ops.random_ops.value->tensorflow.python.framework.ops.convert_to_tensor(value, name='value')
A:tensorflow.python.ops.random_ops.means_tensor->tensorflow.python.framework.ops.convert_to_tensor(means, dtype=dtype, name='means')
A:tensorflow.python.ops.random_ops.stddevs_tensor->tensorflow.python.framework.ops.convert_to_tensor(stddevs, dtype=dtype, name='stddevs')
A:tensorflow.python.ops.random_ops.minvals_tensor->tensorflow.python.framework.ops.convert_to_tensor(minvals, dtype=dtype, name='minvals')
A:tensorflow.python.ops.random_ops.maxvals_tensor->tensorflow.python.framework.ops.convert_to_tensor(maxvals, dtype=dtype, name='maxvals')
A:tensorflow.python.ops.random_ops.dtype->tensorflow.python.framework.dtypes.as_dtype(dtype)
A:tensorflow.python.ops.random_ops.shape->tensorflow.python.framework.ops.convert_to_tensor(shape, name='shape', dtype=dtypes.int32)
A:tensorflow.python.ops.random_ops.minval->tensorflow.python.framework.ops.convert_to_tensor(minval, dtype=dtype, name='min')
A:tensorflow.python.ops.random_ops.maxval->tensorflow.python.framework.ops.convert_to_tensor(maxval, dtype=dtype, name='max')
A:tensorflow.python.ops.random_ops.size->tensorflow.python.framework.ops.convert_to_tensor(size, dtype=dtypes.int32, name='size')
A:tensorflow.python.ops.random_ops.check->tensorflow.python.ops.control_flow_ops.Assert(math_ops.reduce_all(shape >= size), ['Need value.shape >= size, got ', shape, size])
A:tensorflow.python.ops.random_ops.logits->tensorflow.python.framework.ops.convert_to_tensor(logits, name='logits')
A:tensorflow.python.ops.random_ops.alpha->tensorflow.python.framework.ops.convert_to_tensor(alpha, name='alpha', dtype=dtype)
A:tensorflow.python.ops.random_ops.beta->tensorflow.python.framework.ops.convert_to_tensor(beta if beta is not None else 1, name='beta', dtype=dtype)
A:tensorflow.python.ops.random_ops.lam->tensorflow.python.framework.ops.convert_to_tensor(lam, name='lam', dtype=dtype)
tensorflow.ops.random_ops._ShapeTensor(shape)
tensorflow.ops.random_ops.multinomial(logits,num_samples,seed=None,name=None)
tensorflow.ops.random_ops.parameterized_truncated_normal(shape,means=0.0,stddevs=1.0,minvals=-2.0,maxvals=2.0,dtype=dtypes.float32,seed=None,name=None)
tensorflow.ops.random_ops.random_crop(value,size,seed=None,name=None)
tensorflow.ops.random_ops.random_gamma(shape,alpha,beta=None,dtype=dtypes.float32,seed=None,name=None)
tensorflow.ops.random_ops.random_normal(shape,mean=0.0,stddev=1.0,dtype=dtypes.float32,seed=None,name=None)
tensorflow.ops.random_ops.random_poisson(lam,shape,dtype=dtypes.float32,seed=None,name=None)
tensorflow.ops.random_ops.random_shuffle(value,seed=None,name=None)
tensorflow.ops.random_ops.random_uniform(shape,minval=0,maxval=None,dtype=dtypes.float32,seed=None,name=None)
tensorflow.ops.random_ops.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=dtypes.float32,seed=None,name=None)
tensorflow.python.ops.random_ops._ShapeTensor(shape)
tensorflow.python.ops.random_ops.multinomial(logits,num_samples,seed=None,name=None)
tensorflow.python.ops.random_ops.parameterized_truncated_normal(shape,means=0.0,stddevs=1.0,minvals=-2.0,maxvals=2.0,dtype=dtypes.float32,seed=None,name=None)
tensorflow.python.ops.random_ops.random_crop(value,size,seed=None,name=None)
tensorflow.python.ops.random_ops.random_gamma(shape,alpha,beta=None,dtype=dtypes.float32,seed=None,name=None)
tensorflow.python.ops.random_ops.random_normal(shape,mean=0.0,stddev=1.0,dtype=dtypes.float32,seed=None,name=None)
tensorflow.python.ops.random_ops.random_poisson(lam,shape,dtype=dtypes.float32,seed=None,name=None)
tensorflow.python.ops.random_ops.random_shuffle(value,seed=None,name=None)
tensorflow.python.ops.random_ops.random_uniform(shape,minval=0,maxval=None,dtype=dtypes.float32,seed=None,name=None)
tensorflow.python.ops.random_ops.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=dtypes.float32,seed=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_sdca_ops.py----------------------------------------
A:tensorflow.python.ops.gen_sdca_ops.result->_InitOpDefLibrary().apply_op('SdcaShrinkL1', weights=weights, l1=l1, l2=l2, name=name)
A:tensorflow.python.ops.gen_sdca_ops._SdcaOptimizerOutput->collections.namedtuple('SdcaOptimizer', __sdca_optimizer_outputs)
A:tensorflow.python.ops.gen_sdca_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_sdca_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_sdca_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_sdca_ops._InitOpDefLibrary()
tensorflow.ops.gen_sdca_ops._sdca_fprint(input,name=None)
tensorflow.ops.gen_sdca_ops._sdca_optimizer(sparse_example_indices,sparse_feature_indices,sparse_feature_values,dense_features,example_weights,example_labels,sparse_indices,sparse_weights,dense_weights,example_state_data,loss_type,l1,l2,num_loss_partitions,num_inner_iterations,adaptative=None,name=None)
tensorflow.ops.gen_sdca_ops._sdca_shrink_l1(weights,l1,l2,name=None)
tensorflow.python.ops.gen_sdca_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_sdca_ops._sdca_fprint(input,name=None)
tensorflow.python.ops.gen_sdca_ops._sdca_optimizer(sparse_example_indices,sparse_feature_indices,sparse_feature_values,dense_features,example_weights,example_labels,sparse_indices,sparse_weights,dense_weights,example_state_data,loss_type,l1,l2,num_loss_partitions,num_inner_iterations,adaptative=None,name=None)
tensorflow.python.ops.gen_sdca_ops._sdca_shrink_l1(weights,l1,l2,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/string_ops.py----------------------------------------
A:tensorflow.python.ops.string_ops.delimiter->tensorflow.python.framework.ops.convert_to_tensor(delimiter, dtype=dtypes.string)
A:tensorflow.python.ops.string_ops.source->tensorflow.python.framework.ops.convert_to_tensor(source, dtype=dtypes.string)
A:tensorflow.python.ops.string_ops.(indices, values, shape)->tensorflow.python.ops.gen_string_ops._string_split(source, delimiter=delimiter)
A:tensorflow.python.ops.string_ops.reduction_indices->_reduce_join_reduction_dims(inputs, axis, reduction_indices)
A:tensorflow.python.ops.string_ops.reduce_join.__doc__->tensorflow.python.util.deprecation.rewrite_argument_docstring(gen_string_ops.reduce_join.__doc__, 'reduction_indices', 'axis')
tensorflow.python.ops.string_ops._reduce_join_reduction_dims(x,axis,reduction_indices)
tensorflow.python.ops.string_ops.reduce_join(inputs,axis=None,keep_dims=False,separator='',name=None,reduction_indices=None)
tensorflow.python.ops.string_ops.string_split(source,delimiter='')
tensorflow.string_ops._reduce_join_reduction_dims(x,axis,reduction_indices)
tensorflow.string_ops.reduce_join(inputs,axis=None,keep_dims=False,separator='',name=None,reduction_indices=None)
tensorflow.string_ops.string_split(source,delimiter='')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/sdca_ops.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/control_flow_ops.py----------------------------------------
A:tensorflow.python.ops.control_flow_ops.xs->tensorflow.python.framework.ops.convert_n_to_tensor(data)
A:tensorflow.python.ops.control_flow_ops.condition->tensorflow.python.framework.ops.convert_to_tensor(condition, name='Condition')
A:tensorflow.python.ops.control_flow_ops.guarded_assert->cond(condition, no_op, true_assert, name='AssertGuard')
A:tensorflow.python.ops.control_flow_ops.data->tensorflow.python.framework.ops.convert_to_tensor_or_indexed_slices(data, name='data')
A:tensorflow.python.ops.control_flow_ops.values->self._ProcessOutputTensor(v.values)
A:tensorflow.python.ops.control_flow_ops.indices->self._ProcessOutputTensor(v.indices)
A:tensorflow.python.ops.control_flow_ops.dense_shape->self._ProcessOutputTensor(v.dense_shape)
A:tensorflow.python.ops.control_flow_ops.result->WhileContext(parallel_iterations, back_prop, swap_memory, name).BuildLoop(cond, body, loop_vars, shape_invariants)
A:tensorflow.python.ops.control_flow_ops.pred->tensorflow.python.ops.math_ops.greater_equal(merge_count, one)
A:tensorflow.python.ops.control_flow_ops.(val_f, val_t)->tensorflow.python.ops.gen_control_flow_ops._switch(val, pred, name=name)
A:tensorflow.python.ops.control_flow_ops.(ind_f, ind_t)->tensorflow.python.ops.gen_control_flow_ops._switch(ind, pred, name='indices')
A:tensorflow.python.ops.control_flow_ops.(dense_shape_f, dense_shape_t)->tensorflow.python.ops.gen_control_flow_ops._switch(data.dense_shape, pred, name='dense_shape')
A:tensorflow.python.ops.control_flow_ops.(values, _)->merge([inp.values for inp in inputs], name=name)
A:tensorflow.python.ops.control_flow_ops.(indices, chosen_index)->tensorflow.python.ops.gen_control_flow_ops._merge([inp.indices for inp in inputs], name='indices')
A:tensorflow.python.ops.control_flow_ops.(dense_shape, _)->tensorflow.python.ops.gen_control_flow_ops._merge([inp.dense_shape for inp in inputs], name='dense_shape')
A:tensorflow.python.ops.control_flow_ops.inputs->tensorflow.python.ops.math_ops._as_indexed_slices_list(inputs, optimize=False)
A:tensorflow.python.ops.control_flow_ops.new_ta->tensorflow.python.ops.tensor_array_ops.TensorArray(dtype=ta.dtype, handle=ta.handle, flow=t_or_flow, infer_shape=ta._infer_shape)
A:tensorflow.python.ops.control_flow_ops.ctxt->_GetOutputContext(x)
A:tensorflow.python.ops.control_flow_ops.flat_shapes->tensorflow.python.util.nest.flatten(shapes)
A:tensorflow.python.ops.control_flow_ops.m_shape->merge_var.get_shape()
A:tensorflow.python.ops.control_flow_ops.n_shape->next_var.get_shape()
A:tensorflow.python.ops.control_flow_ops.m_values_shape->merge_var.values.get_shape()
A:tensorflow.python.ops.control_flow_ops.m_indices_shape->merge_var.indices.get_shape()
A:tensorflow.python.ops.control_flow_ops.m_shape_shape->merge_var.dense_shape.get_shape()
A:tensorflow.python.ops.control_flow_ops.n_values_shape->next_var.values.get_shape()
A:tensorflow.python.ops.control_flow_ops.n_indices_shape->next_var.indices.get_shape()
A:tensorflow.python.ops.control_flow_ops.n_shape_shape->next_var.dense_shape.get_shape()
A:tensorflow.python.ops.control_flow_ops.v->tensorflow.python.framework.ops.convert_to_tensor_or_indexed_slices(v)
A:tensorflow.python.ops.control_flow_ops.self._forward_loop_exits->list(forward_ctxt.loop_exits)
A:tensorflow.python.ops.control_flow_ops.self._pending_exits_count->len(forward_ctxt.loop_exits)
A:tensorflow.python.ops.control_flow_ops.(cnt, forward_index)->forward_ctxt.GetWhileContext().AddForwardLoopCounter(outer_grad_state)
A:tensorflow.python.ops.control_flow_ops.history_cnt->self._map.get(outer_forward_ctxt).AddForwardAccumulator(cnt)
A:tensorflow.python.ops.control_flow_ops.self._grad_context->WhileContext(forward_ctxt.parallel_iterations, forward_ctxt.back_prop, forward_ctxt.swap_memory, forward_ctxt.name, self)
A:tensorflow.python.ops.control_flow_ops.real_cnt->self._map.get(outer_forward_ctxt).AddBackPropAccumulatedValue(history_cnt, cnt)
A:tensorflow.python.ops.control_flow_ops.self._grad_index->self._grad_context.AddBackPropLoopCounter(cnt, outer_grad_state)
A:tensorflow.python.ops.control_flow_ops.self._forward_sync->control_trigger(name='f_sync')
A:tensorflow.python.ops.control_flow_ops.self._grad_sync->control_trigger(name='b_sync')
A:tensorflow.python.ops.control_flow_ops.curr_ctxt->tensorflow.python.framework.ops.get_default_graph()._get_control_flow_context()
A:tensorflow.python.ops.control_flow_ops.acc->tensorflow.python.ops.array_ops.zeros(zeros_shape, grad.dtype)
A:tensorflow.python.ops.control_flow_ops.enter_acc->_Enter(acc, self._name, is_constant=False, parallel_iterations=self._parallel_iterations, name='b_acc')
A:tensorflow.python.ops.control_flow_ops.value_ctxt->value.op._get_control_flow_context()
A:tensorflow.python.ops.control_flow_ops.push->tensorflow.python.ops.gen_data_flow_ops._stack_push(enter_acc, value, swap_memory=swap_enabled)
A:tensorflow.python.ops.control_flow_ops.history_ctxt->cur_grad_state.AddForwardAccumulator(cur_value).op._get_control_flow_context()
A:tensorflow.python.ops.control_flow_ops.pop->tensorflow.python.ops.gen_data_flow_ops._stack_pop(history_value, value.dtype.base_dtype)
A:tensorflow.python.ops.control_flow_ops.real_value->self._grad_context.AddValue(real_value)
A:tensorflow.python.ops.control_flow_ops.enter_op->_GetLoopConstantEnter(cur_value)
A:tensorflow.python.ops.control_flow_ops.history_value->cur_grad_state.AddForwardAccumulator(cur_value)
A:tensorflow.python.ops.control_flow_ops.forward_ctxt->forward_ctxt.GetWhileContext().GetWhileContext()
A:tensorflow.python.ops.control_flow_ops.grad_state->self._map.get(forward_ctxt)
A:tensorflow.python.ops.control_flow_ops.outer_forward_ctxt->outer_forward_ctxt.GetWhileContext().GetWhileContext()
A:tensorflow.python.ops.control_flow_ops.outer_grad_state->self._map.get(outer_forward_ctxt)
A:tensorflow.python.ops.control_flow_ops.val_shape->tensorflow.python.framework.ops.convert_to_tensor(op.outputs[index], name='tensor').get_shape()
A:tensorflow.python.ops.control_flow_ops.shape->grad.get_shape()
A:tensorflow.python.ops.control_flow_ops.history_shape->self._map.get(outer_forward_ctxt).AddForwardAccumulator(shape)
A:tensorflow.python.ops.control_flow_ops.real_shape->self._map.get(outer_forward_ctxt).AddBackPropAccumulatedValue(history_zeros_shape, zeros_shape)
A:tensorflow.python.ops.control_flow_ops.dead_branch->IsSwitch(op)
A:tensorflow.python.ops.control_flow_ops.op_ctxt->_GetOutputContext(op)
A:tensorflow.python.ops.control_flow_ops.val->tensorflow.python.framework.ops.convert_to_tensor(op.outputs[index], name='tensor')
A:tensorflow.python.ops.control_flow_ops.zeros_shape->tensorflow.python.ops.array_ops.shape_internal(value, optimize=False)
A:tensorflow.python.ops.control_flow_ops.history_zeros_shape->self._map.get(outer_forward_ctxt).AddForwardAccumulator(zeros_shape)
A:tensorflow.python.ops.control_flow_ops.grad_val->tensorflow.python.ops.array_ops.zeros(grad_shape)
A:tensorflow.python.ops.control_flow_ops.next_grad_val->_NextIteration(grad_val)
A:tensorflow.python.ops.control_flow_ops.grad_shape->tensorflow.python.ops.array_ops.shape_internal(enter_grad, optimize=False)
A:tensorflow.python.ops.control_flow_ops.loop_state->ControlFlowState()
A:tensorflow.python.ops.control_flow_ops.self._outer_context->tensorflow.python.framework.ops.get_default_graph()._get_control_flow_context()
A:tensorflow.python.ops.control_flow_ops.self._values->set()
A:tensorflow.python.ops.control_flow_ops.g->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.ops.control_flow_ops.self._external_values[k]->tensorflow.python.framework.ops.get_default_graph().as_graph_element(ops.prepend_name_scope(v, import_scope))
A:tensorflow.python.ops.control_flow_ops.op_names->set([op.split(':')[0] for op in self._values - set(self._external_values)])
A:tensorflow.python.ops.control_flow_ops.values_def->tensorflow.core.protobuf.control_flow_pb2.ValuesDef()
A:tensorflow.python.ops.control_flow_ops.values_def.external_values[k]->tensorflow.python.framework.ops.strip_name_scope(v.name, export_scope)
A:tensorflow.python.ops.control_flow_ops.graph->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.ops.control_flow_ops.last_context->self._context_stack.pop()
A:tensorflow.python.ops.control_flow_ops.while_ctxt->self.GetWhileContext()
A:tensorflow.python.ops.control_flow_ops.self._name->tensorflow.python.framework.ops.prepend_name_scope(context_def.context_name, import_scope)
A:tensorflow.python.ops.control_flow_ops.self._pred->tensorflow.python.framework.ops.get_default_graph().as_graph_element(ops.prepend_name_scope(context_def.pred_name, import_scope))
A:tensorflow.python.ops.control_flow_ops.self._pivot->loop_cond(c, name='LoopCond')
A:tensorflow.python.ops.control_flow_ops.context_def->tensorflow.core.protobuf.control_flow_pb2.WhileContextDef()
A:tensorflow.python.ops.control_flow_ops.context_def.context_name->tensorflow.python.framework.ops.strip_name_scope(self.name, export_scope)
A:tensorflow.python.ops.control_flow_ops.context_def.pred_name->tensorflow.python.framework.ops.strip_name_scope(self._pred.name, export_scope)
A:tensorflow.python.ops.control_flow_ops.context_def.pivot_name->tensorflow.python.framework.ops.strip_name_scope(self._pivot.name, export_scope)
A:tensorflow.python.ops.control_flow_ops.real_x->self.AddValue(x)
A:tensorflow.python.ops.control_flow_ops.real_val->grad_ctxt.GetWhileContext().grad_state.GetRealValue(val)
A:tensorflow.python.ops.control_flow_ops.external_val->self._external_values.get(val.name)
A:tensorflow.python.ops.control_flow_ops.r->_convert_tensorarrays_to_flows(r)
A:tensorflow.python.ops.control_flow_ops.real_v->self._ProcessOutputTensor(v)
A:tensorflow.python.ops.control_flow_ops.(p_2, p_1)->switch(pred, pred)
A:tensorflow.python.ops.control_flow_ops.pivot_1->tensorflow.python.ops.array_ops.identity(p_1, name='switch_t')
A:tensorflow.python.ops.control_flow_ops.pivot_2->tensorflow.python.ops.array_ops.identity(p_2, name='switch_f')
A:tensorflow.python.ops.control_flow_ops.context_t->CondContext(pred, pivot_1, branch=1)
A:tensorflow.python.ops.control_flow_ops.(orig_res, res_t)->CondContext(pred, pivot_1, branch=1).BuildCondBranch(fn1)
A:tensorflow.python.ops.control_flow_ops.context_f->CondContext(pred, pivot_2, branch=0)
A:tensorflow.python.ops.control_flow_ops.(_, res_f)->CondContext(pred, pivot_2, branch=0).BuildCondBranch(fn2)
A:tensorflow.python.ops.control_flow_ops.merges->_convert_flows_to_tensorarrays(orig_res, merges)
A:tensorflow.python.ops.control_flow_ops.self._pivot_for_pred->tensorflow.python.framework.ops.get_default_graph().as_graph_element(ops.prepend_name_scope(context_def.pivot_for_pred_name, import_scope))
A:tensorflow.python.ops.control_flow_ops.self._pivot_for_body->tensorflow.python.framework.ops.get_default_graph().as_graph_element(ops.prepend_name_scope(context_def.pivot_for_body_name, import_scope))
A:tensorflow.python.ops.control_flow_ops.context_def.pivot_for_pred_name->tensorflow.python.framework.ops.strip_name_scope(self._pivot_for_pred.name, export_scope)
A:tensorflow.python.ops.control_flow_ops.context_def.pivot_for_body_name->tensorflow.python.framework.ops.strip_name_scope(self._pivot_for_body.name, export_scope)
A:tensorflow.python.ops.control_flow_ops.grad_ctxt->grad_ctxt.GetWhileContext().GetWhileContext()
A:tensorflow.python.ops.control_flow_ops.enter->_Enter(result, self._name, is_constant=True, parallel_iterations=self._parallel_iterations)
A:tensorflow.python.ops.control_flow_ops.actual_val->self._external_values.get(val.name)
A:tensorflow.python.ops.control_flow_ops.op_input_forward_ctxt->_GetWhileContext(op.inputs[0].op)
A:tensorflow.python.ops.control_flow_ops.op_input_ctxt->op.inputs[0].op._get_control_flow_context()
A:tensorflow.python.ops.control_flow_ops.control_inputs->tensorflow.python.framework.ops.get_default_graph()._control_dependencies_for_inputs([inp_op])
A:tensorflow.python.ops.control_flow_ops.n->tensorflow.python.framework.constant_op.constant(0, name='f_count')
A:tensorflow.python.ops.control_flow_ops.enter_n->_Enter(n, self._name, is_constant=False, parallel_iterations=self._parallel_iterations, name='f_count')
A:tensorflow.python.ops.control_flow_ops.switch_n->switch(merge_n, self._pivot)
A:tensorflow.python.ops.control_flow_ops.index->tensorflow.python.ops.math_ops.subtract(switch_count[1], one)
A:tensorflow.python.ops.control_flow_ops.next_n->_NextIteration(index)
A:tensorflow.python.ops.control_flow_ops.total_iterations->exit(switch_n[0], name='f_count')
A:tensorflow.python.ops.control_flow_ops.one->tensorflow.python.framework.constant_op.constant(1, name='b_count')
A:tensorflow.python.ops.control_flow_ops.enter_count->_Enter(count, self._name, is_constant=False, parallel_iterations=self._parallel_iterations, name='b_count')
A:tensorflow.python.ops.control_flow_ops.switch_count->switch(merge_count, self._pivot)
A:tensorflow.python.ops.control_flow_ops.next_count->_NextIteration(index)
A:tensorflow.python.ops.control_flow_ops.final_zero->exit(switch_count[0], name='b_count')
A:tensorflow.python.ops.control_flow_ops.acc._shape->grad.get_shape()
A:tensorflow.python.ops.control_flow_ops.(switch_acc_false, switch_acc_true)->switch(merge_acc, self._pivot)
A:tensorflow.python.ops.control_flow_ops.add_acc->tensorflow.python.ops.math_ops.add(switch_acc_true, grad)
A:tensorflow.python.ops.control_flow_ops.next_acc->_NextIteration(add_acc)
A:tensorflow.python.ops.control_flow_ops.acc_result->exit(switch_acc_false, name='b_acc')
A:tensorflow.python.ops.control_flow_ops.values_shape->tensorflow.python.ops.array_ops.concat([[1], values_shape], 0)
A:tensorflow.python.ops.control_flow_ops.values_acc->tensorflow.python.ops.array_ops.zeros(values_shape, dtype=values.dtype)
A:tensorflow.python.ops.control_flow_ops.indices_acc->tensorflow.python.framework.constant_op.constant([0], indices.dtype)
A:tensorflow.python.ops.control_flow_ops.shape_acc->tensorflow.python.ops.array_ops.zeros_like(array_ops.shape_internal(op.inputs[0], optimize=False), optimize=False)
A:tensorflow.python.ops.control_flow_ops.flat_loop_vars->tensorflow.python.util.nest.flatten(loop_vars)
A:tensorflow.python.ops.control_flow_ops.merge_vars_with_tensor_arrays->_convert_flows_to_tensorarrays(flat_loop_vars, merge_vars)
A:tensorflow.python.ops.control_flow_ops.packed_vars->tensorflow.python.util.nest.pack_sequence_as(structure=original_loop_vars, flat_sequence=merge_vars_with_tensor_arrays)
A:tensorflow.python.ops.control_flow_ops.c->tensorflow.python.framework.ops.convert_to_tensor(pred(*packed_vars))
A:tensorflow.python.ops.control_flow_ops.vars_for_body_with_tensor_arrays->_convert_flows_to_tensorarrays(flat_loop_vars, vars_for_body)
A:tensorflow.python.ops.control_flow_ops.packed_vars_for_body->tensorflow.python.util.nest.pack_sequence_as(structure=original_loop_vars, flat_sequence=vars_for_body_with_tensor_arrays)
A:tensorflow.python.ops.control_flow_ops.body_result->body(*packed_vars_for_body)
A:tensorflow.python.ops.control_flow_ops.flat_result->tensorflow.python.util.nest.flatten(original_body_result)
A:tensorflow.python.ops.control_flow_ops.loop_vars->tensorflow.python.framework.ops.convert_n_to_tensor_or_indexed_slices(loop_vars)
A:tensorflow.python.ops.control_flow_ops.(original_body_result, exit_vars)->self._BuildLoop(pred, body, original_loop_vars, loop_vars, shape_invariants)
A:tensorflow.python.ops.control_flow_ops.exit_vars_with_tensor_arrays->_convert_flows_to_tensorarrays(flat_result, exit_vars)
A:tensorflow.python.ops.control_flow_ops.packed_exit_vars->tensorflow.python.util.nest.pack_sequence_as(structure=original_body_result, flat_sequence=exit_vars_with_tensor_arrays)
A:tensorflow.python.ops.control_flow_ops.context->WhileContext(parallel_iterations, back_prop, swap_memory, name)
A:tensorflow.python.ops.control_flow_ops.output_tensor->tensorflow.python.framework.ops.convert_to_tensor_or_indexed_slices(output_tensor)
A:tensorflow.python.ops.control_flow_ops.name->kwargs.pop('name', None)
A:tensorflow.python.ops.control_flow_ops.((dev, deps),)->ops_on_device.items()
A:tensorflow.python.ops.control_flow_ops.gating_ops->sorted(set(gating_ops), key=lambda op: op._id)
A:tensorflow.python.ops.control_flow_ops.gate->group(*gating_ops)
A:tensorflow.python.ops.control_flow_ops.pfp->pfp.items().items()
A:tensorflow.python.ops.control_flow_ops.(preds, fns)->map(list, zip(*pfp))
A:tensorflow.python.ops.control_flow_ops.dummy_value->default()
A:tensorflow.python.ops.control_flow_ops.dummy_type->type(dummy_value)
A:tensorflow.python.ops.control_flow_ops.prev_case->cond(cp, fn, empty if i == 0 else lambda : prev_case, name='If_%d' % i)
A:tensorflow.python.ops.control_flow_ops.preds_c->tensorflow.python.ops.array_ops.stack(preds, name='preds_c')
A:tensorflow.python.ops.control_flow_ops.num_true_conditions->tensorflow.python.ops.math_ops.reduce_sum(math_ops.cast(preds_c, dtypes.int32), name='num_true_conds')
A:tensorflow.python.ops.control_flow_ops.at_most_one_true_condition->tensorflow.python.ops.math_ops.less(num_true_conditions, constant_op.constant(2, name='two_true_conds'))
A:tensorflow.python.ops.control_flow_ops.case_seq->_build_case()
tensorflow.control_flow_ops.Assert(condition,data,summarize=None,name=None)
tensorflow.control_flow_ops.CondContext(self,pred=None,pivot=None,branch=None,name='cond_text',context_def=None,import_scope=None)
tensorflow.control_flow_ops.CondContext.AddOp(self,op)
tensorflow.control_flow_ops.CondContext.AddValue(self,val)
tensorflow.control_flow_ops.CondContext.BuildCondBranch(self,fn)
tensorflow.control_flow_ops.CondContext.GetControlPivot(self)
tensorflow.control_flow_ops.CondContext._AddOpInternal(self,op)
tensorflow.control_flow_ops.CondContext._ProcessOutputTensor(self,val)
tensorflow.control_flow_ops.CondContext._init_from_proto(self,context_def,import_scope=None)
tensorflow.control_flow_ops.CondContext.back_prop(self)
tensorflow.control_flow_ops.CondContext.branch(self)
tensorflow.control_flow_ops.CondContext.from_proto(context_def,import_scope=None)
tensorflow.control_flow_ops.CondContext.grad_state(self)
tensorflow.control_flow_ops.CondContext.name(self)
tensorflow.control_flow_ops.CondContext.pivot(self)
tensorflow.control_flow_ops.CondContext.pred(self)
tensorflow.control_flow_ops.CondContext.to_proto(self,export_scope=None)
tensorflow.control_flow_ops.ControlFlowContext(self,values_def=None,import_scope=None)
tensorflow.control_flow_ops.ControlFlowContext.AddName(self,name)
tensorflow.control_flow_ops.ControlFlowContext.Enter(self)
tensorflow.control_flow_ops.ControlFlowContext.Exit(self)
tensorflow.control_flow_ops.ControlFlowContext.ExitResult(self,result)
tensorflow.control_flow_ops.ControlFlowContext.GetWhileContext(self)
tensorflow.control_flow_ops.ControlFlowContext._IsInOuterContext(self,op)
tensorflow.control_flow_ops.ControlFlowContext._RemoveExternalControlEdges(self,op)
tensorflow.control_flow_ops.ControlFlowContext._from_proto(values_def,import_scope=None)
tensorflow.control_flow_ops.ControlFlowContext._init_values_from_proto(self,values_def,import_scope=None)
tensorflow.control_flow_ops.ControlFlowContext._to_proto(self,export_scope=None)
tensorflow.control_flow_ops.ControlFlowContext.back_prop(self)
tensorflow.control_flow_ops.ControlFlowContext.grad_state(self)
tensorflow.control_flow_ops.ControlFlowContext.outer_context(self)
tensorflow.control_flow_ops.ControlFlowState(self)
tensorflow.control_flow_ops.ControlFlowState.AddWhileContext(self,op,between_op_list,between_ops)
tensorflow.control_flow_ops.ControlFlowState.EnterGradWhileContext(self,op,before)
tensorflow.control_flow_ops.ControlFlowState.ExitGradWhileContext(self,op,before)
tensorflow.control_flow_ops.ControlFlowState.GetGradState(self,op,before)
tensorflow.control_flow_ops.ControlFlowState.PostProcessing(self)
tensorflow.control_flow_ops.ControlFlowState.ProcessUnusedLoopExits(self,pending_count,to_ops_set)
tensorflow.control_flow_ops.ControlFlowState.ZerosLike(self,op,index)
tensorflow.control_flow_ops.ControlFlowState.ZerosLikeForExit(self,val)
tensorflow.control_flow_ops.GradLoopState(self,forward_ctxt,outer_grad_state)
tensorflow.control_flow_ops.GradLoopState.AddBackPropAccumulatedValue(self,history_value,value,dead_branch=False)
tensorflow.control_flow_ops.GradLoopState.AddForwardAccumulator(self,value,dead_branch=False)
tensorflow.control_flow_ops.GradLoopState.GetRealValue(self,value)
tensorflow.control_flow_ops.GradLoopState.deferred_exits(self)
tensorflow.control_flow_ops.GradLoopState.forward_context(self)
tensorflow.control_flow_ops.GradLoopState.forward_index(self)
tensorflow.control_flow_ops.GradLoopState.forward_loop_exits(self)
tensorflow.control_flow_ops.GradLoopState.forward_sync(self)
tensorflow.control_flow_ops.GradLoopState.grad_context(self)
tensorflow.control_flow_ops.GradLoopState.grad_index(self)
tensorflow.control_flow_ops.GradLoopState.grad_sync(self)
tensorflow.control_flow_ops.GradLoopState.history_map(self)
tensorflow.control_flow_ops.GradLoopState.outer_grad_state(self)
tensorflow.control_flow_ops.GradLoopState.pending_exits_count(self)
tensorflow.control_flow_ops.GradLoopState.pending_exits_count(self,cnt)
tensorflow.control_flow_ops.GradLoopState.switch_map(self)
tensorflow.control_flow_ops.GradLoopState.unused_exits(self)
tensorflow.control_flow_ops.IsLoopExit(op)
tensorflow.control_flow_ops.IsLoopSwitch(op)
tensorflow.control_flow_ops.IsSwitch(op)
tensorflow.control_flow_ops.MaybeCreateControlFlowState(between_op_list,between_ops,colocate_gradients_with_ops)
tensorflow.control_flow_ops.WhileContext(self,parallel_iterations=10,back_prop=True,swap_memory=False,name='while_context',grad_state=None,context_def=None,import_scope=None)
tensorflow.control_flow_ops.WhileContext.AddBackPropAccumulator(self,op,grad)
tensorflow.control_flow_ops.WhileContext.AddBackPropIndexedSlicesAccumulator(self,op,grad)
tensorflow.control_flow_ops.WhileContext.AddBackPropLoopCounter(self,count,outer_grad_state)
tensorflow.control_flow_ops.WhileContext.AddForwardLoopCounter(self,outer_grad_state)
tensorflow.control_flow_ops.WhileContext.AddOp(self,op)
tensorflow.control_flow_ops.WhileContext.AddValue(self,val)
tensorflow.control_flow_ops.WhileContext.BuildLoop(self,pred,body,loop_vars,shape_invariants)
tensorflow.control_flow_ops.WhileContext.GetControlPivot(self)
tensorflow.control_flow_ops.WhileContext.GetWhileContext(self)
tensorflow.control_flow_ops.WhileContext._AddOpInternal(self,op)
tensorflow.control_flow_ops.WhileContext._BuildLoop(self,pred,body,original_loop_vars,loop_vars,shape_invariants)
tensorflow.control_flow_ops.WhileContext._FixControlInputsAndContext(self,enters)
tensorflow.control_flow_ops.WhileContext._InitializeValues(self,values)
tensorflow.control_flow_ops.WhileContext._MaybeAddControlDependency(self,op)
tensorflow.control_flow_ops.WhileContext._init_from_args(self,parallel_iterations,back_prop,swap_memory,name)
tensorflow.control_flow_ops.WhileContext._init_from_proto(self,context_def,import_scope=None)
tensorflow.control_flow_ops.WhileContext.back_prop(self)
tensorflow.control_flow_ops.WhileContext.from_proto(context_def,import_scope=None)
tensorflow.control_flow_ops.WhileContext.grad_state(self)
tensorflow.control_flow_ops.WhileContext.loop_exits(self)
tensorflow.control_flow_ops.WhileContext.name(self)
tensorflow.control_flow_ops.WhileContext.parallel_iterations(self)
tensorflow.control_flow_ops.WhileContext.pivot(self)
tensorflow.control_flow_ops.WhileContext.swap_memory(self)
tensorflow.control_flow_ops.WhileContext.to_proto(self,export_scope=None)
tensorflow.control_flow_ops.ZerosLikeOutsideLoop(op,index)
tensorflow.control_flow_ops._AddNextAndBackEdge(m,v)
tensorflow.control_flow_ops._AsTensorList(x,p)
tensorflow.control_flow_ops._CheckResults(a,b)
tensorflow.control_flow_ops._EnforceShapeInvariant(merge_var,next_var)
tensorflow.control_flow_ops._Enter(data,frame_name,is_constant=False,parallel_iterations=10,use_ref=True,use_input_shape=True,name=None)
tensorflow.control_flow_ops._GetLoopConstantEnter(value)
tensorflow.control_flow_ops._GetOutputContext(op)
tensorflow.control_flow_ops._GetWhileContext(op)
tensorflow.control_flow_ops._GroupControlDeps(dev,deps,name=None)
tensorflow.control_flow_ops._Identity(data,name=None)
tensorflow.control_flow_ops._IsLoopConstantEnter(op)
tensorflow.control_flow_ops._NextIteration(data,name=None)
tensorflow.control_flow_ops._SetShapeInvariants(input_vars,enter_vars,shapes)
tensorflow.control_flow_ops._ShapeLessThanOrEqual(shape1,shape2)
tensorflow.control_flow_ops._SwitchRefOrTensor(data,pred,name='Switch')
tensorflow.control_flow_ops._convert_flows_to_tensorarrays(tensors_or_tensorarrays,tensors_or_flows)
tensorflow.control_flow_ops._convert_tensorarrays_to_flows(tensors_or_tensor_arrays)
tensorflow.control_flow_ops._make_tensor_array(ta,t_or_flow)
tensorflow.control_flow_ops._resource_safe_shape(t)
tensorflow.control_flow_ops.case(pred_fn_pairs,default,exclusive=False,name='case')
tensorflow.control_flow_ops.cond(pred,fn1,fn2,name=None)
tensorflow.control_flow_ops.exit(data,name=None)
tensorflow.control_flow_ops.group(*inputs,**kwargs)
tensorflow.control_flow_ops.merge(inputs,name=None)
tensorflow.control_flow_ops.switch(data,pred,dtype=None,name=None)
tensorflow.control_flow_ops.tuple(tensors,name=None,control_inputs=None)
tensorflow.control_flow_ops.while_loop(cond,body,loop_vars,shape_invariants=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)
tensorflow.control_flow_ops.with_dependencies(dependencies,output_tensor,name=None)
tensorflow.python.ops.control_flow_ops.Assert(condition,data,summarize=None,name=None)
tensorflow.python.ops.control_flow_ops.CondContext(self,pred=None,pivot=None,branch=None,name='cond_text',context_def=None,import_scope=None)
tensorflow.python.ops.control_flow_ops.CondContext.AddOp(self,op)
tensorflow.python.ops.control_flow_ops.CondContext.AddValue(self,val)
tensorflow.python.ops.control_flow_ops.CondContext.BuildCondBranch(self,fn)
tensorflow.python.ops.control_flow_ops.CondContext.GetControlPivot(self)
tensorflow.python.ops.control_flow_ops.CondContext._AddOpInternal(self,op)
tensorflow.python.ops.control_flow_ops.CondContext._ProcessOutputTensor(self,val)
tensorflow.python.ops.control_flow_ops.CondContext.__init__(self,pred=None,pivot=None,branch=None,name='cond_text',context_def=None,import_scope=None)
tensorflow.python.ops.control_flow_ops.CondContext._init_from_proto(self,context_def,import_scope=None)
tensorflow.python.ops.control_flow_ops.CondContext.back_prop(self)
tensorflow.python.ops.control_flow_ops.CondContext.branch(self)
tensorflow.python.ops.control_flow_ops.CondContext.from_proto(context_def,import_scope=None)
tensorflow.python.ops.control_flow_ops.CondContext.grad_state(self)
tensorflow.python.ops.control_flow_ops.CondContext.name(self)
tensorflow.python.ops.control_flow_ops.CondContext.pivot(self)
tensorflow.python.ops.control_flow_ops.CondContext.pred(self)
tensorflow.python.ops.control_flow_ops.CondContext.to_proto(self,export_scope=None)
tensorflow.python.ops.control_flow_ops.ControlFlowContext(self,values_def=None,import_scope=None)
tensorflow.python.ops.control_flow_ops.ControlFlowContext.AddName(self,name)
tensorflow.python.ops.control_flow_ops.ControlFlowContext.Enter(self)
tensorflow.python.ops.control_flow_ops.ControlFlowContext.Exit(self)
tensorflow.python.ops.control_flow_ops.ControlFlowContext.ExitResult(self,result)
tensorflow.python.ops.control_flow_ops.ControlFlowContext.GetWhileContext(self)
tensorflow.python.ops.control_flow_ops.ControlFlowContext._IsInOuterContext(self,op)
tensorflow.python.ops.control_flow_ops.ControlFlowContext._RemoveExternalControlEdges(self,op)
tensorflow.python.ops.control_flow_ops.ControlFlowContext.__init__(self,values_def=None,import_scope=None)
tensorflow.python.ops.control_flow_ops.ControlFlowContext._from_proto(values_def,import_scope=None)
tensorflow.python.ops.control_flow_ops.ControlFlowContext._init_values_from_proto(self,values_def,import_scope=None)
tensorflow.python.ops.control_flow_ops.ControlFlowContext._to_proto(self,export_scope=None)
tensorflow.python.ops.control_flow_ops.ControlFlowContext.back_prop(self)
tensorflow.python.ops.control_flow_ops.ControlFlowContext.grad_state(self)
tensorflow.python.ops.control_flow_ops.ControlFlowContext.outer_context(self)
tensorflow.python.ops.control_flow_ops.ControlFlowState(self)
tensorflow.python.ops.control_flow_ops.ControlFlowState.AddWhileContext(self,op,between_op_list,between_ops)
tensorflow.python.ops.control_flow_ops.ControlFlowState.EnterGradWhileContext(self,op,before)
tensorflow.python.ops.control_flow_ops.ControlFlowState.ExitGradWhileContext(self,op,before)
tensorflow.python.ops.control_flow_ops.ControlFlowState.GetGradState(self,op,before)
tensorflow.python.ops.control_flow_ops.ControlFlowState.PostProcessing(self)
tensorflow.python.ops.control_flow_ops.ControlFlowState.ProcessUnusedLoopExits(self,pending_count,to_ops_set)
tensorflow.python.ops.control_flow_ops.ControlFlowState.ZerosLike(self,op,index)
tensorflow.python.ops.control_flow_ops.ControlFlowState.ZerosLikeForExit(self,val)
tensorflow.python.ops.control_flow_ops.ControlFlowState.__init__(self)
tensorflow.python.ops.control_flow_ops.GradLoopState(self,forward_ctxt,outer_grad_state)
tensorflow.python.ops.control_flow_ops.GradLoopState.AddBackPropAccumulatedValue(self,history_value,value,dead_branch=False)
tensorflow.python.ops.control_flow_ops.GradLoopState.AddForwardAccumulator(self,value,dead_branch=False)
tensorflow.python.ops.control_flow_ops.GradLoopState.GetRealValue(self,value)
tensorflow.python.ops.control_flow_ops.GradLoopState.__init__(self,forward_ctxt,outer_grad_state)
tensorflow.python.ops.control_flow_ops.GradLoopState.deferred_exits(self)
tensorflow.python.ops.control_flow_ops.GradLoopState.forward_context(self)
tensorflow.python.ops.control_flow_ops.GradLoopState.forward_index(self)
tensorflow.python.ops.control_flow_ops.GradLoopState.forward_loop_exits(self)
tensorflow.python.ops.control_flow_ops.GradLoopState.forward_sync(self)
tensorflow.python.ops.control_flow_ops.GradLoopState.grad_context(self)
tensorflow.python.ops.control_flow_ops.GradLoopState.grad_index(self)
tensorflow.python.ops.control_flow_ops.GradLoopState.grad_sync(self)
tensorflow.python.ops.control_flow_ops.GradLoopState.history_map(self)
tensorflow.python.ops.control_flow_ops.GradLoopState.outer_grad_state(self)
tensorflow.python.ops.control_flow_ops.GradLoopState.pending_exits_count(self)
tensorflow.python.ops.control_flow_ops.GradLoopState.pending_exits_count(self,cnt)
tensorflow.python.ops.control_flow_ops.GradLoopState.switch_map(self)
tensorflow.python.ops.control_flow_ops.GradLoopState.unused_exits(self)
tensorflow.python.ops.control_flow_ops.IsLoopExit(op)
tensorflow.python.ops.control_flow_ops.IsLoopSwitch(op)
tensorflow.python.ops.control_flow_ops.IsSwitch(op)
tensorflow.python.ops.control_flow_ops.MaybeCreateControlFlowState(between_op_list,between_ops,colocate_gradients_with_ops)
tensorflow.python.ops.control_flow_ops.WhileContext(self,parallel_iterations=10,back_prop=True,swap_memory=False,name='while_context',grad_state=None,context_def=None,import_scope=None)
tensorflow.python.ops.control_flow_ops.WhileContext.AddBackPropAccumulator(self,op,grad)
tensorflow.python.ops.control_flow_ops.WhileContext.AddBackPropIndexedSlicesAccumulator(self,op,grad)
tensorflow.python.ops.control_flow_ops.WhileContext.AddBackPropLoopCounter(self,count,outer_grad_state)
tensorflow.python.ops.control_flow_ops.WhileContext.AddForwardLoopCounter(self,outer_grad_state)
tensorflow.python.ops.control_flow_ops.WhileContext.AddOp(self,op)
tensorflow.python.ops.control_flow_ops.WhileContext.AddValue(self,val)
tensorflow.python.ops.control_flow_ops.WhileContext.BuildLoop(self,pred,body,loop_vars,shape_invariants)
tensorflow.python.ops.control_flow_ops.WhileContext.GetControlPivot(self)
tensorflow.python.ops.control_flow_ops.WhileContext.GetWhileContext(self)
tensorflow.python.ops.control_flow_ops.WhileContext._AddOpInternal(self,op)
tensorflow.python.ops.control_flow_ops.WhileContext._BuildLoop(self,pred,body,original_loop_vars,loop_vars,shape_invariants)
tensorflow.python.ops.control_flow_ops.WhileContext._FixControlInputsAndContext(self,enters)
tensorflow.python.ops.control_flow_ops.WhileContext._InitializeValues(self,values)
tensorflow.python.ops.control_flow_ops.WhileContext._MaybeAddControlDependency(self,op)
tensorflow.python.ops.control_flow_ops.WhileContext.__init__(self,parallel_iterations=10,back_prop=True,swap_memory=False,name='while_context',grad_state=None,context_def=None,import_scope=None)
tensorflow.python.ops.control_flow_ops.WhileContext._init_from_args(self,parallel_iterations,back_prop,swap_memory,name)
tensorflow.python.ops.control_flow_ops.WhileContext._init_from_proto(self,context_def,import_scope=None)
tensorflow.python.ops.control_flow_ops.WhileContext.back_prop(self)
tensorflow.python.ops.control_flow_ops.WhileContext.from_proto(context_def,import_scope=None)
tensorflow.python.ops.control_flow_ops.WhileContext.grad_state(self)
tensorflow.python.ops.control_flow_ops.WhileContext.loop_exits(self)
tensorflow.python.ops.control_flow_ops.WhileContext.name(self)
tensorflow.python.ops.control_flow_ops.WhileContext.parallel_iterations(self)
tensorflow.python.ops.control_flow_ops.WhileContext.pivot(self)
tensorflow.python.ops.control_flow_ops.WhileContext.swap_memory(self)
tensorflow.python.ops.control_flow_ops.WhileContext.to_proto(self,export_scope=None)
tensorflow.python.ops.control_flow_ops.ZerosLikeOutsideLoop(op,index)
tensorflow.python.ops.control_flow_ops._AddNextAndBackEdge(m,v)
tensorflow.python.ops.control_flow_ops._AsTensorList(x,p)
tensorflow.python.ops.control_flow_ops._CheckResults(a,b)
tensorflow.python.ops.control_flow_ops._EnforceShapeInvariant(merge_var,next_var)
tensorflow.python.ops.control_flow_ops._Enter(data,frame_name,is_constant=False,parallel_iterations=10,use_ref=True,use_input_shape=True,name=None)
tensorflow.python.ops.control_flow_ops._GetLoopConstantEnter(value)
tensorflow.python.ops.control_flow_ops._GetOutputContext(op)
tensorflow.python.ops.control_flow_ops._GetWhileContext(op)
tensorflow.python.ops.control_flow_ops._GroupControlDeps(dev,deps,name=None)
tensorflow.python.ops.control_flow_ops._Identity(data,name=None)
tensorflow.python.ops.control_flow_ops._IsLoopConstantEnter(op)
tensorflow.python.ops.control_flow_ops._NextIteration(data,name=None)
tensorflow.python.ops.control_flow_ops._SetShapeInvariants(input_vars,enter_vars,shapes)
tensorflow.python.ops.control_flow_ops._ShapeLessThanOrEqual(shape1,shape2)
tensorflow.python.ops.control_flow_ops._SwitchRefOrTensor(data,pred,name='Switch')
tensorflow.python.ops.control_flow_ops._convert_flows_to_tensorarrays(tensors_or_tensorarrays,tensors_or_flows)
tensorflow.python.ops.control_flow_ops._convert_tensorarrays_to_flows(tensors_or_tensor_arrays)
tensorflow.python.ops.control_flow_ops._make_tensor_array(ta,t_or_flow)
tensorflow.python.ops.control_flow_ops._resource_safe_shape(t)
tensorflow.python.ops.control_flow_ops.case(pred_fn_pairs,default,exclusive=False,name='case')
tensorflow.python.ops.control_flow_ops.cond(pred,fn1,fn2,name=None)
tensorflow.python.ops.control_flow_ops.exit(data,name=None)
tensorflow.python.ops.control_flow_ops.group(*inputs,**kwargs)
tensorflow.python.ops.control_flow_ops.merge(inputs,name=None)
tensorflow.python.ops.control_flow_ops.switch(data,pred,dtype=None,name=None)
tensorflow.python.ops.control_flow_ops.tuple(tensors,name=None,control_inputs=None)
tensorflow.python.ops.control_flow_ops.while_loop(cond,body,loop_vars,shape_invariants=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)
tensorflow.python.ops.control_flow_ops.with_dependencies(dependencies,output_tensor,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_data_flow_ops.py----------------------------------------
A:tensorflow.python.ops.gen_data_flow_ops.result->_InitOpDefLibrary().apply_op('Unstage', dtypes=dtypes, container=container, shared_name=shared_name, name=name)
A:tensorflow.python.ops.gen_data_flow_ops._BarrierTakeManyOutput->collections.namedtuple('BarrierTakeMany', __barrier_take_many_outputs)
A:tensorflow.python.ops.gen_data_flow_ops._LookupTableExportOutput->collections.namedtuple('LookupTableExport', __lookup_table_export_outputs)
A:tensorflow.python.ops.gen_data_flow_ops._SparseAccumulatorTakeGradientOutput->collections.namedtuple('SparseAccumulatorTakeGradient', _sparse_accumulator_take_gradient_outputs)
A:tensorflow.python.ops.gen_data_flow_ops._TensorArrayConcatOutput->collections.namedtuple('TensorArrayConcat', __tensor_array_concat_outputs)
A:tensorflow.python.ops.gen_data_flow_ops._TensorArrayConcatV2Output->collections.namedtuple('TensorArrayConcatV2', __tensor_array_concat_v2_outputs)
A:tensorflow.python.ops.gen_data_flow_ops._TensorArrayConcatV3Output->collections.namedtuple('TensorArrayConcatV3', __tensor_array_concat_v3_outputs)
A:tensorflow.python.ops.gen_data_flow_ops._TensorArrayGradV3Output->collections.namedtuple('TensorArrayGradV3', __tensor_array_grad_v3_outputs)
A:tensorflow.python.ops.gen_data_flow_ops._TensorArrayV3Output->collections.namedtuple('TensorArrayV3', __tensor_array_v3_outputs)
A:tensorflow.python.ops.gen_data_flow_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_data_flow_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_data_flow_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_data_flow_ops._InitOpDefLibrary()
tensorflow.ops.gen_data_flow_ops._barrier(component_types,shapes=None,capacity=None,container=None,shared_name=None,name=None)
tensorflow.ops.gen_data_flow_ops._barrier_close(handle,cancel_pending_enqueues=None,name=None)
tensorflow.ops.gen_data_flow_ops._barrier_incomplete_size(handle,name=None)
tensorflow.ops.gen_data_flow_ops._barrier_insert_many(handle,keys,values,component_index,name=None)
tensorflow.ops.gen_data_flow_ops._barrier_ready_size(handle,name=None)
tensorflow.ops.gen_data_flow_ops._barrier_take_many(handle,num_elements,component_types,allow_small_batch=None,wait_for_incomplete=None,timeout_ms=None,name=None)
tensorflow.ops.gen_data_flow_ops._delete_session_tensor(handle,name=None)
tensorflow.ops.gen_data_flow_ops._fake_queue(resource,name=None)
tensorflow.ops.gen_data_flow_ops._fifo_queue(component_types,shapes=None,capacity=None,container=None,shared_name=None,name=None)
tensorflow.ops.gen_data_flow_ops._fifo_queue_v2(component_types,shapes=None,capacity=None,container=None,shared_name=None,name=None)
tensorflow.ops.gen_data_flow_ops._get_session_handle(value,name=None)
tensorflow.ops.gen_data_flow_ops._get_session_handle_v2(value,name=None)
tensorflow.ops.gen_data_flow_ops._get_session_tensor(handle,dtype,name=None)
tensorflow.ops.gen_data_flow_ops._hash_table(key_dtype,value_dtype,container=None,shared_name=None,use_node_name_sharing=None,name=None)
tensorflow.ops.gen_data_flow_ops._initialize_table(table_handle,keys,values,name=None)
tensorflow.ops.gen_data_flow_ops._initialize_table_from_text_file(table_handle,filename,key_index,value_index,vocab_size=None,delimiter=None,name=None)
tensorflow.ops.gen_data_flow_ops._lookup_table_export(table_handle,Tkeys,Tvalues,name=None)
tensorflow.ops.gen_data_flow_ops._lookup_table_find(table_handle,keys,default_value,name=None)
tensorflow.ops.gen_data_flow_ops._lookup_table_import(table_handle,keys,values,name=None)
tensorflow.ops.gen_data_flow_ops._lookup_table_insert(table_handle,keys,values,name=None)
tensorflow.ops.gen_data_flow_ops._lookup_table_size(table_handle,name=None)
tensorflow.ops.gen_data_flow_ops._mutable_dense_hash_table(empty_key,value_dtype,container=None,shared_name=None,use_node_name_sharing=None,value_shape=None,initial_num_buckets=None,max_load_factor=None,name=None)
tensorflow.ops.gen_data_flow_ops._mutable_hash_table(key_dtype,value_dtype,container=None,shared_name=None,use_node_name_sharing=None,name=None)
tensorflow.ops.gen_data_flow_ops._mutable_hash_table_of_tensors(key_dtype,value_dtype,container=None,shared_name=None,use_node_name_sharing=None,value_shape=None,name=None)
tensorflow.ops.gen_data_flow_ops._padding_fifo_queue(component_types,shapes=None,capacity=None,container=None,shared_name=None,name=None)
tensorflow.ops.gen_data_flow_ops._padding_fifo_queue_v2(component_types,shapes=None,capacity=None,container=None,shared_name=None,name=None)
tensorflow.ops.gen_data_flow_ops._priority_queue(shapes,component_types=None,capacity=None,container=None,shared_name=None,name=None)
tensorflow.ops.gen_data_flow_ops._priority_queue_v2(shapes,component_types=None,capacity=None,container=None,shared_name=None,name=None)
tensorflow.ops.gen_data_flow_ops._queue_close(handle,cancel_pending_enqueues=None,name=None)
tensorflow.ops.gen_data_flow_ops._queue_close_v2(handle,cancel_pending_enqueues=None,name=None)
tensorflow.ops.gen_data_flow_ops._queue_dequeue(handle,component_types,timeout_ms=None,name=None)
tensorflow.ops.gen_data_flow_ops._queue_dequeue_many(handle,n,component_types,timeout_ms=None,name=None)
tensorflow.ops.gen_data_flow_ops._queue_dequeue_many_v2(handle,n,component_types,timeout_ms=None,name=None)
tensorflow.ops.gen_data_flow_ops._queue_dequeue_up_to(handle,n,component_types,timeout_ms=None,name=None)
tensorflow.ops.gen_data_flow_ops._queue_dequeue_up_to_v2(handle,n,component_types,timeout_ms=None,name=None)
tensorflow.ops.gen_data_flow_ops._queue_dequeue_v2(handle,component_types,timeout_ms=None,name=None)
tensorflow.ops.gen_data_flow_ops._queue_enqueue(handle,components,timeout_ms=None,name=None)
tensorflow.ops.gen_data_flow_ops._queue_enqueue_many(handle,components,timeout_ms=None,name=None)
tensorflow.ops.gen_data_flow_ops._queue_enqueue_many_v2(handle,components,timeout_ms=None,name=None)
tensorflow.ops.gen_data_flow_ops._queue_enqueue_v2(handle,components,timeout_ms=None,name=None)
tensorflow.ops.gen_data_flow_ops._queue_size(handle,name=None)
tensorflow.ops.gen_data_flow_ops._queue_size_v2(handle,name=None)
tensorflow.ops.gen_data_flow_ops._random_shuffle_queue(component_types,shapes=None,capacity=None,min_after_dequeue=None,seed=None,seed2=None,container=None,shared_name=None,name=None)
tensorflow.ops.gen_data_flow_ops._random_shuffle_queue_v2(component_types,shapes=None,capacity=None,min_after_dequeue=None,seed=None,seed2=None,container=None,shared_name=None,name=None)
tensorflow.ops.gen_data_flow_ops._stack(elem_type,stack_name=None,name=None)
tensorflow.ops.gen_data_flow_ops._stack_close(handle,name=None)
tensorflow.ops.gen_data_flow_ops._stack_pop(handle,elem_type,name=None)
tensorflow.ops.gen_data_flow_ops._stack_push(handle,elem,swap_memory=None,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array(size,dtype,dynamic_size=None,clear_after_read=None,tensor_array_name=None,element_shape=None,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_close(handle,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_close_v2(handle,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_close_v3(handle,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_concat(handle,flow_in,dtype,element_shape_except0=None,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_concat_v2(handle,flow_in,dtype,element_shape_except0=None,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_concat_v3(handle,flow_in,dtype,element_shape_except0=None,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_gather(handle,indices,flow_in,dtype,element_shape=None,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_gather_v2(handle,indices,flow_in,dtype,element_shape=None,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_gather_v3(handle,indices,flow_in,dtype,element_shape=None,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_grad(handle,flow_in,source,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_grad_v2(handle,flow_in,source,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_grad_v3(handle,flow_in,source,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_pack(handle,flow_in,dtype,element_shape=None,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_read(handle,index,flow_in,dtype,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_read_v2(handle,index,flow_in,dtype,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_read_v3(handle,index,flow_in,dtype,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_scatter(handle,indices,value,flow_in,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_scatter_v2(handle,indices,value,flow_in,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_scatter_v3(handle,indices,value,flow_in,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_size(handle,flow_in,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_size_v2(handle,flow_in,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_size_v3(handle,flow_in,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_split(handle,value,lengths,flow_in,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_split_v2(handle,value,lengths,flow_in,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_split_v3(handle,value,lengths,flow_in,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_unpack(handle,value,flow_in,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_v2(size,dtype,element_shape=None,dynamic_size=None,clear_after_read=None,tensor_array_name=None,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_v3(size,dtype,element_shape=None,dynamic_size=None,clear_after_read=None,tensor_array_name=None,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_write(handle,index,value,flow_in,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_write_v2(handle,index,value,flow_in,name=None)
tensorflow.ops.gen_data_flow_ops._tensor_array_write_v3(handle,index,value,flow_in,name=None)
tensorflow.ops.gen_data_flow_ops.accumulator_apply_gradient(handle,local_step,gradient,name=None)
tensorflow.ops.gen_data_flow_ops.accumulator_num_accumulated(handle,name=None)
tensorflow.ops.gen_data_flow_ops.accumulator_set_global_step(handle,new_global_step,name=None)
tensorflow.ops.gen_data_flow_ops.accumulator_take_gradient(handle,num_required,dtype,name=None)
tensorflow.ops.gen_data_flow_ops.conditional_accumulator(dtype,shape,container=None,shared_name=None,name=None)
tensorflow.ops.gen_data_flow_ops.dynamic_partition(data,partitions,num_partitions,name=None)
tensorflow.ops.gen_data_flow_ops.dynamic_stitch(indices,data,name=None)
tensorflow.ops.gen_data_flow_ops.record_input(file_pattern,file_random_seed=None,file_shuffle_shift_ratio=None,file_buffer_size=None,file_parallelism=None,batch_size=None,name=None)
tensorflow.ops.gen_data_flow_ops.sparse_accumulator_apply_gradient(handle,local_step,gradient_indices,gradient_values,gradient_shape,has_known_shape,name=None)
tensorflow.ops.gen_data_flow_ops.sparse_accumulator_take_gradient(handle,num_required,dtype,name=None)
tensorflow.ops.gen_data_flow_ops.sparse_conditional_accumulator(dtype,shape,container=None,shared_name=None,name=None)
tensorflow.ops.gen_data_flow_ops.stage(values,container=None,shared_name=None,name=None)
tensorflow.ops.gen_data_flow_ops.unstage(dtypes,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_data_flow_ops._barrier(component_types,shapes=None,capacity=None,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._barrier_close(handle,cancel_pending_enqueues=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._barrier_incomplete_size(handle,name=None)
tensorflow.python.ops.gen_data_flow_ops._barrier_insert_many(handle,keys,values,component_index,name=None)
tensorflow.python.ops.gen_data_flow_ops._barrier_ready_size(handle,name=None)
tensorflow.python.ops.gen_data_flow_ops._barrier_take_many(handle,num_elements,component_types,allow_small_batch=None,wait_for_incomplete=None,timeout_ms=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._delete_session_tensor(handle,name=None)
tensorflow.python.ops.gen_data_flow_ops._fake_queue(resource,name=None)
tensorflow.python.ops.gen_data_flow_ops._fifo_queue(component_types,shapes=None,capacity=None,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._fifo_queue_v2(component_types,shapes=None,capacity=None,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._get_session_handle(value,name=None)
tensorflow.python.ops.gen_data_flow_ops._get_session_handle_v2(value,name=None)
tensorflow.python.ops.gen_data_flow_ops._get_session_tensor(handle,dtype,name=None)
tensorflow.python.ops.gen_data_flow_ops._hash_table(key_dtype,value_dtype,container=None,shared_name=None,use_node_name_sharing=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._initialize_table(table_handle,keys,values,name=None)
tensorflow.python.ops.gen_data_flow_ops._initialize_table_from_text_file(table_handle,filename,key_index,value_index,vocab_size=None,delimiter=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._lookup_table_export(table_handle,Tkeys,Tvalues,name=None)
tensorflow.python.ops.gen_data_flow_ops._lookup_table_find(table_handle,keys,default_value,name=None)
tensorflow.python.ops.gen_data_flow_ops._lookup_table_import(table_handle,keys,values,name=None)
tensorflow.python.ops.gen_data_flow_ops._lookup_table_insert(table_handle,keys,values,name=None)
tensorflow.python.ops.gen_data_flow_ops._lookup_table_size(table_handle,name=None)
tensorflow.python.ops.gen_data_flow_ops._mutable_dense_hash_table(empty_key,value_dtype,container=None,shared_name=None,use_node_name_sharing=None,value_shape=None,initial_num_buckets=None,max_load_factor=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._mutable_hash_table(key_dtype,value_dtype,container=None,shared_name=None,use_node_name_sharing=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._mutable_hash_table_of_tensors(key_dtype,value_dtype,container=None,shared_name=None,use_node_name_sharing=None,value_shape=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._padding_fifo_queue(component_types,shapes=None,capacity=None,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._padding_fifo_queue_v2(component_types,shapes=None,capacity=None,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._priority_queue(shapes,component_types=None,capacity=None,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._priority_queue_v2(shapes,component_types=None,capacity=None,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._queue_close(handle,cancel_pending_enqueues=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._queue_close_v2(handle,cancel_pending_enqueues=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._queue_dequeue(handle,component_types,timeout_ms=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._queue_dequeue_many(handle,n,component_types,timeout_ms=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._queue_dequeue_many_v2(handle,n,component_types,timeout_ms=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._queue_dequeue_up_to(handle,n,component_types,timeout_ms=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._queue_dequeue_up_to_v2(handle,n,component_types,timeout_ms=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._queue_dequeue_v2(handle,component_types,timeout_ms=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._queue_enqueue(handle,components,timeout_ms=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._queue_enqueue_many(handle,components,timeout_ms=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._queue_enqueue_many_v2(handle,components,timeout_ms=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._queue_enqueue_v2(handle,components,timeout_ms=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._queue_size(handle,name=None)
tensorflow.python.ops.gen_data_flow_ops._queue_size_v2(handle,name=None)
tensorflow.python.ops.gen_data_flow_ops._random_shuffle_queue(component_types,shapes=None,capacity=None,min_after_dequeue=None,seed=None,seed2=None,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._random_shuffle_queue_v2(component_types,shapes=None,capacity=None,min_after_dequeue=None,seed=None,seed2=None,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._stack(elem_type,stack_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._stack_close(handle,name=None)
tensorflow.python.ops.gen_data_flow_ops._stack_pop(handle,elem_type,name=None)
tensorflow.python.ops.gen_data_flow_ops._stack_push(handle,elem,swap_memory=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array(size,dtype,dynamic_size=None,clear_after_read=None,tensor_array_name=None,element_shape=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_close(handle,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_close_v2(handle,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_close_v3(handle,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_concat(handle,flow_in,dtype,element_shape_except0=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_concat_v2(handle,flow_in,dtype,element_shape_except0=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_concat_v3(handle,flow_in,dtype,element_shape_except0=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_gather(handle,indices,flow_in,dtype,element_shape=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_gather_v2(handle,indices,flow_in,dtype,element_shape=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_gather_v3(handle,indices,flow_in,dtype,element_shape=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_grad(handle,flow_in,source,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_grad_v2(handle,flow_in,source,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_grad_v3(handle,flow_in,source,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_pack(handle,flow_in,dtype,element_shape=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_read(handle,index,flow_in,dtype,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_read_v2(handle,index,flow_in,dtype,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_read_v3(handle,index,flow_in,dtype,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_scatter(handle,indices,value,flow_in,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_scatter_v2(handle,indices,value,flow_in,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_scatter_v3(handle,indices,value,flow_in,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_size(handle,flow_in,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_size_v2(handle,flow_in,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_size_v3(handle,flow_in,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_split(handle,value,lengths,flow_in,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_split_v2(handle,value,lengths,flow_in,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_split_v3(handle,value,lengths,flow_in,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_unpack(handle,value,flow_in,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_v2(size,dtype,element_shape=None,dynamic_size=None,clear_after_read=None,tensor_array_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_v3(size,dtype,element_shape=None,dynamic_size=None,clear_after_read=None,tensor_array_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_write(handle,index,value,flow_in,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_write_v2(handle,index,value,flow_in,name=None)
tensorflow.python.ops.gen_data_flow_ops._tensor_array_write_v3(handle,index,value,flow_in,name=None)
tensorflow.python.ops.gen_data_flow_ops.accumulator_apply_gradient(handle,local_step,gradient,name=None)
tensorflow.python.ops.gen_data_flow_ops.accumulator_num_accumulated(handle,name=None)
tensorflow.python.ops.gen_data_flow_ops.accumulator_set_global_step(handle,new_global_step,name=None)
tensorflow.python.ops.gen_data_flow_ops.accumulator_take_gradient(handle,num_required,dtype,name=None)
tensorflow.python.ops.gen_data_flow_ops.conditional_accumulator(dtype,shape,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops.dynamic_partition(data,partitions,num_partitions,name=None)
tensorflow.python.ops.gen_data_flow_ops.dynamic_stitch(indices,data,name=None)
tensorflow.python.ops.gen_data_flow_ops.record_input(file_pattern,file_random_seed=None,file_shuffle_shift_ratio=None,file_buffer_size=None,file_parallelism=None,batch_size=None,name=None)
tensorflow.python.ops.gen_data_flow_ops.sparse_accumulator_apply_gradient(handle,local_step,gradient_indices,gradient_values,gradient_shape,has_known_shape,name=None)
tensorflow.python.ops.gen_data_flow_ops.sparse_accumulator_take_gradient(handle,num_required,dtype,name=None)
tensorflow.python.ops.gen_data_flow_ops.sparse_conditional_accumulator(dtype,shape,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops.stage(values,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_data_flow_ops.unstage(dtypes,container=None,shared_name=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/linalg_ops.py----------------------------------------
A:tensorflow.python.ops.linalg_ops.y->tensorflow.python.ops.gen_linalg_ops.matrix_triangular_solve(chol, rhs, adjoint=False, lower=True)
A:tensorflow.python.ops.linalg_ops.x->tensorflow.python.ops.gen_linalg_ops.matrix_triangular_solve(chol, y, adjoint=True, lower=True)
A:tensorflow.python.ops.linalg_ops.batch_shape->tensorflow.python.framework.ops.convert_to_tensor(batch_shape, name='shape', dtype=dtypes.int32)
A:tensorflow.python.ops.linalg_ops.diag_size->tensorflow.python.ops.math_ops.minimum(num_rows, num_columns)
A:tensorflow.python.ops.linalg_ops.diag_shape->tensorflow.python.ops.array_ops.concat((batch_shape, [diag_size]), 0)
A:tensorflow.python.ops.linalg_ops.diag_ones->tensorflow.python.ops.array_ops.ones(diag_shape, dtype=dtype)
A:tensorflow.python.ops.linalg_ops.shape->tensorflow.python.ops.array_ops.concat((batch_shape, [num_rows, num_columns]), 0)
A:tensorflow.python.ops.linalg_ops.zero_matrix->tensorflow.python.ops.array_ops.zeros(shape, dtype=dtype)
A:tensorflow.python.ops.linalg_ops.(e, v)->tensorflow.python.ops.gen_linalg_ops._self_adjoint_eig_v2(tensor, compute_v=True, name=name)
A:tensorflow.python.ops.linalg_ops.(e, _)->tensorflow.python.ops.gen_linalg_ops._self_adjoint_eig_v2(tensor, compute_v=False, name=name)
A:tensorflow.python.ops.linalg_ops.(s, u, v)->tensorflow.python.ops.gen_linalg_ops._svd(tensor, compute_uv=compute_uv, full_matrices=full_matrices)
A:tensorflow.python.ops.linalg_ops.axis->tuple(axis)
A:tensorflow.python.ops.linalg_ops.tensor->tensorflow.python.framework.ops.convert_to_tensor(tensor)
A:tensorflow.python.ops.linalg_ops.result->tensorflow.python.ops.array_ops.squeeze(result, axis)
tensorflow.ops.linalg_ops.cholesky_solve(chol,rhs,name=None)
tensorflow.ops.linalg_ops.eye(num_rows,num_columns=None,batch_shape=None,dtype=dtypes.float32,name=None)
tensorflow.ops.linalg_ops.matrix_solve_ls(matrix,rhs,l2_regularizer=0.0,fast=True,name=None)
tensorflow.ops.linalg_ops.norm(tensor,ord='euclidean',axis=None,keep_dims=False,name=None)
tensorflow.ops.linalg_ops.self_adjoint_eig(tensor,name=None)
tensorflow.ops.linalg_ops.self_adjoint_eigvals(tensor,name=None)
tensorflow.ops.linalg_ops.svd(tensor,full_matrices=False,compute_uv=True,name=None)
tensorflow.python.ops.linalg_ops.cholesky_solve(chol,rhs,name=None)
tensorflow.python.ops.linalg_ops.eye(num_rows,num_columns=None,batch_shape=None,dtype=dtypes.float32,name=None)
tensorflow.python.ops.linalg_ops.matrix_solve_ls(matrix,rhs,l2_regularizer=0.0,fast=True,name=None)
tensorflow.python.ops.linalg_ops.norm(tensor,ord='euclidean',axis=None,keep_dims=False,name=None)
tensorflow.python.ops.linalg_ops.self_adjoint_eig(tensor,name=None)
tensorflow.python.ops.linalg_ops.self_adjoint_eigvals(tensor,name=None)
tensorflow.python.ops.linalg_ops.svd(tensor,full_matrices=False,compute_uv=True,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/tensor_array_grad.py----------------------------------------
A:tensorflow.python.ops.tensor_array_grad.name_tokens->op_or_tensor.name.split('/')
A:tensorflow.python.ops.tensor_array_grad.dtype->op.get_attr('T')
A:tensorflow.python.ops.tensor_array_grad.grad_source->_GetGradSource(flow)
A:tensorflow.python.ops.tensor_array_grad.g->tensorflow.python.ops.tensor_array_ops.TensorArray(dtype=dtype, handle=handle, flow=flow).grad(source=grad_source, flow=flow)
A:tensorflow.python.ops.tensor_array_grad.w_g->tensorflow.python.ops.tensor_array_ops.TensorArray(dtype=dtype, handle=handle, flow=flow).grad(source=grad_source, flow=flow).write(index, grad)
A:tensorflow.python.ops.tensor_array_grad.grad->tensorflow.python.ops.tensor_array_ops.TensorArray(dtype=dtype, handle=handle, flow=flow).grad(source=grad_source, flow=flow).concat()
A:tensorflow.python.ops.tensor_array_grad.u_g->tensorflow.python.ops.tensor_array_ops.TensorArray(dtype=dtype, handle=handle, flow=flow).grad(source=grad_source, flow=flow).split(grad, lengths=lengths)
tensorflow.ops.tensor_array_grad._GetGradSource(op_or_tensor)
tensorflow.ops.tensor_array_grad._TensorArrayConcatGrad(op,grad,unused_lengths_grad)
tensorflow.ops.tensor_array_grad._TensorArrayGatherGrad(op,grad)
tensorflow.ops.tensor_array_grad._TensorArrayReadGrad(op,grad)
tensorflow.ops.tensor_array_grad._TensorArrayScatterGrad(op,flow)
tensorflow.ops.tensor_array_grad._TensorArraySplitGrad(op,flow)
tensorflow.ops.tensor_array_grad._TensorArrayWriteGrad(op,flow)
tensorflow.python.ops.tensor_array_grad._GetGradSource(op_or_tensor)
tensorflow.python.ops.tensor_array_grad._TensorArrayConcatGrad(op,grad,unused_lengths_grad)
tensorflow.python.ops.tensor_array_grad._TensorArrayGatherGrad(op,grad)
tensorflow.python.ops.tensor_array_grad._TensorArrayReadGrad(op,grad)
tensorflow.python.ops.tensor_array_grad._TensorArrayScatterGrad(op,flow)
tensorflow.python.ops.tensor_array_grad._TensorArraySplitGrad(op,flow)
tensorflow.python.ops.tensor_array_grad._TensorArrayWriteGrad(op,flow)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/nn_grad.py----------------------------------------
A:tensorflow.python.ops.nn_grad.softmax->tensorflow.python.ops.nn_ops.softmax(logits)
A:tensorflow.python.ops.nn_grad.data_format->op.get_attr('data_format')
A:tensorflow.python.ops.nn_grad.shape->tensorflow.python.ops.array_ops.shape(op.inputs[0])
A:tensorflow.python.ops.nn_grad.rank->tensorflow.python.ops.array_ops.rank(op.inputs[0])
A:tensorflow.python.ops.nn_grad.bias_shape->tensorflow.python.ops.array_ops.shape(received_grad)
A:tensorflow.python.ops.nn_grad.expanded_shape->tensorflow.python.ops.array_ops.concat([array_ops.ones_like(shape[:-1]), bias_shape], 0)
A:tensorflow.python.ops.nn_grad.tile_mults->tensorflow.python.ops.array_ops.concat([shape[:-1], [1]], 0)
A:tensorflow.python.ops.nn_grad.expanded_grad->tensorflow.python.ops.array_ops.reshape(received_grad, expanded_shape)
A:tensorflow.python.ops.nn_grad.reduction_dim_tensor->tensorflow.python.ops.math_ops.range(array_ops.rank(received_grad) - 1)
A:tensorflow.python.ops.nn_grad.vec->tensorflow.python.ops.array_ops.expand_dims(vec, -1)
A:tensorflow.python.ops.nn_grad.grad->_BroadcastMul(grad_loss, softmax_grad)
A:tensorflow.python.ops.nn_grad.sparse_softmax_grad_without_gradient->tensorflow.python.ops.array_ops.prevent_gradient(op.outputs[1], message="Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation's interaction with tf.gradients()")
A:tensorflow.python.ops.nn_grad.depth_radius->op.get_attr('depth_radius')
A:tensorflow.python.ops.nn_grad.bias->op.get_attr('bias')
A:tensorflow.python.ops.nn_grad.alpha->op.get_attr('alpha')
A:tensorflow.python.ops.nn_grad.beta->op.get_attr('beta')
A:tensorflow.python.ops.nn_grad.(dx, dm, dv, db, dg)->tensorflow.python.ops.gen_nn_ops._batch_norm_with_global_normalization_grad(op.inputs[0], op.inputs[1], op.inputs[2], op.inputs[4], grad, op.get_attr('variance_epsilon'), op.get_attr('scale_after_normalization'))
A:tensorflow.python.ops.nn_grad.in_shape->tensorflow.python.ops.array_ops.shape(op.inputs[0])
A:tensorflow.python.ops.nn_grad.ind_shape->tensorflow.python.ops.array_ops.shape(op.outputs[1])
A:tensorflow.python.ops.nn_grad.ind_lastdim->tensorflow.python.ops.array_ops.gather(ind_shape, array_ops.size(ind_shape) - 1)
A:tensorflow.python.ops.nn_grad.ind_2d->tensorflow.python.ops.array_ops.reshape(op.outputs[1], array_ops.stack([-1, ind_lastdim]))
A:tensorflow.python.ops.nn_grad.in_lastdim->tensorflow.python.ops.array_ops.gather(in_shape, array_ops.size(in_shape) - 1)
A:tensorflow.python.ops.nn_grad.ind->tensorflow.python.ops.array_ops.reshape(ind_2d + array_ops.expand_dims(math_ops.range(0, outerdim * in_lastdim, in_lastdim), -1), [-1])
tensorflow.nn_grad._AvgPool3DGrad(op,grad)
tensorflow.nn_grad._AvgPoolGrad(op,grad)
tensorflow.nn_grad._BatchNormWithGlobalNormalizationGrad(op,grad)
tensorflow.nn_grad._BiasAddGrad(op,received_grad)
tensorflow.nn_grad._BiasAddGradGrad(op,received_grad)
tensorflow.nn_grad._BiasAddGradV1(unused_bias_op,received_grad)
tensorflow.nn_grad._BroadcastMul(vec,mat)
tensorflow.nn_grad._Conv2DBackpropFilterGrad(op,grad)
tensorflow.nn_grad._Conv2DBackpropInputGrad(op,grad)
tensorflow.nn_grad._Conv2DGrad(op,grad)
tensorflow.nn_grad._Conv3DBackpropFilterGrad(op,grad)
tensorflow.nn_grad._Conv3DBackpropInputGrad(op,grad)
tensorflow.nn_grad._Conv3DGrad(op,grad)
tensorflow.nn_grad._DepthwiseConv2dNativeGrad(op,grad)
tensorflow.nn_grad._Dilation2DGrad(op,grad)
tensorflow.nn_grad._EluGrad(op,grad)
tensorflow.nn_grad._EluGradGrad(op,grad)
tensorflow.nn_grad._FractionalAvgPoolGrad(op,grad_0,unused_grad_1,unused_grad_2)
tensorflow.nn_grad._FractionalMaxPoolGrad(op,grad_0,unused_grad_1,unused_grad_2)
tensorflow.nn_grad._FusedBatchNormGrad(op,*grad)
tensorflow.nn_grad._L2LossGrad(op,grad)
tensorflow.nn_grad._LRNGrad(op,grad)
tensorflow.nn_grad._LogSoftmaxGrad(op,grad)
tensorflow.nn_grad._MaxPool3DGrad(op,grad)
tensorflow.nn_grad._MaxPoolGrad(op,grad)
tensorflow.nn_grad._Relu6Grad(op,grad)
tensorflow.nn_grad._ReluGrad(op,grad)
tensorflow.nn_grad._ReluGradGrad(op,grad)
tensorflow.nn_grad._SoftmaxCrossEntropyWithLogitsGrad(op,grad_loss,grad_grad)
tensorflow.nn_grad._SoftmaxGrad(op,grad_softmax)
tensorflow.nn_grad._SoftplusGrad(op,grad)
tensorflow.nn_grad._SoftsignGrad(op,grad)
tensorflow.nn_grad._SparseSoftmaxCrossEntropyWithLogitsGrad(op,grad_0,_)
tensorflow.nn_grad._TopKGrad(op,grad,_)
tensorflow.python.ops.nn_grad._AvgPool3DGrad(op,grad)
tensorflow.python.ops.nn_grad._AvgPoolGrad(op,grad)
tensorflow.python.ops.nn_grad._BatchNormWithGlobalNormalizationGrad(op,grad)
tensorflow.python.ops.nn_grad._BiasAddGrad(op,received_grad)
tensorflow.python.ops.nn_grad._BiasAddGradGrad(op,received_grad)
tensorflow.python.ops.nn_grad._BiasAddGradV1(unused_bias_op,received_grad)
tensorflow.python.ops.nn_grad._BroadcastMul(vec,mat)
tensorflow.python.ops.nn_grad._Conv2DBackpropFilterGrad(op,grad)
tensorflow.python.ops.nn_grad._Conv2DBackpropInputGrad(op,grad)
tensorflow.python.ops.nn_grad._Conv2DGrad(op,grad)
tensorflow.python.ops.nn_grad._Conv3DBackpropFilterGrad(op,grad)
tensorflow.python.ops.nn_grad._Conv3DBackpropInputGrad(op,grad)
tensorflow.python.ops.nn_grad._Conv3DGrad(op,grad)
tensorflow.python.ops.nn_grad._DepthwiseConv2dNativeGrad(op,grad)
tensorflow.python.ops.nn_grad._Dilation2DGrad(op,grad)
tensorflow.python.ops.nn_grad._EluGrad(op,grad)
tensorflow.python.ops.nn_grad._EluGradGrad(op,grad)
tensorflow.python.ops.nn_grad._FractionalAvgPoolGrad(op,grad_0,unused_grad_1,unused_grad_2)
tensorflow.python.ops.nn_grad._FractionalMaxPoolGrad(op,grad_0,unused_grad_1,unused_grad_2)
tensorflow.python.ops.nn_grad._FusedBatchNormGrad(op,*grad)
tensorflow.python.ops.nn_grad._L2LossGrad(op,grad)
tensorflow.python.ops.nn_grad._LRNGrad(op,grad)
tensorflow.python.ops.nn_grad._LogSoftmaxGrad(op,grad)
tensorflow.python.ops.nn_grad._MaxPool3DGrad(op,grad)
tensorflow.python.ops.nn_grad._MaxPoolGrad(op,grad)
tensorflow.python.ops.nn_grad._Relu6Grad(op,grad)
tensorflow.python.ops.nn_grad._ReluGrad(op,grad)
tensorflow.python.ops.nn_grad._ReluGradGrad(op,grad)
tensorflow.python.ops.nn_grad._SoftmaxCrossEntropyWithLogitsGrad(op,grad_loss,grad_grad)
tensorflow.python.ops.nn_grad._SoftmaxGrad(op,grad_softmax)
tensorflow.python.ops.nn_grad._SoftplusGrad(op,grad)
tensorflow.python.ops.nn_grad._SoftsignGrad(op,grad)
tensorflow.python.ops.nn_grad._SparseSoftmaxCrossEntropyWithLogitsGrad(op,grad_0,_)
tensorflow.python.ops.nn_grad._TopKGrad(op,grad,_)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/special_math_ops.py----------------------------------------
A:tensorflow.python.ops.special_math_ops.x->tensorflow.python.framework.ops.convert_to_tensor(x, name='x')
A:tensorflow.python.ops.special_math_ops.log_prod_gamma_x->tensorflow.python.ops.math_ops.reduce_sum(math_ops.lgamma(x), reduction_indices=[-1])
A:tensorflow.python.ops.special_math_ops.sum_x->tensorflow.python.ops.math_ops.reduce_sum(x, axis=[-1])
A:tensorflow.python.ops.special_math_ops.log_gamma_sum_x->tensorflow.python.ops.math_ops.lgamma(sum_x)
A:tensorflow.python.ops.special_math_ops.match->re.match('([a-z,]+)(->[a-z]*)?', equation)
A:tensorflow.python.ops.special_math_ops.inputs->list(inputs)
A:tensorflow.python.ops.special_math_ops.input_axis_labels->re.match('([a-z,]+)(->[a-z]*)?', equation).group(1).split(',')
A:tensorflow.python.ops.special_math_ops.axis_labels->set(''.join(input_axis_labels))
A:tensorflow.python.ops.special_math_ops.indices->''.join(sorted(idx_all))
A:tensorflow.python.ops.special_math_ops.output_axis_labels->''.join(sorted((ax for ax in indices if counts[ax] == 1)))
A:tensorflow.python.ops.special_math_ops.input_count->sum((1 for s in input_axis_labels if a in s))
A:tensorflow.python.ops.special_math_ops.(temp, temp_axis_labels)->_einsum_reduction(temp, temp_axis_labels, inputs[i + 1], input_axis_labels[i + 1], axes_to_sum)
A:tensorflow.python.ops.special_math_ops.temp->tensorflow.python.ops.math_ops.reduce_sum(temp, reduction_indices=reduction_indices)
A:tensorflow.python.ops.special_math_ops.temp_axis_labels->''.join((a for a in temp_axis_labels if a in output_axis_labels))
A:tensorflow.python.ops.special_math_ops.inputs[i]->tensorflow.python.ops.array_ops.transpose(input_, permuted)
A:tensorflow.python.ops.special_math_ops.t0->_reshape_if_necessary(t0, new_shape)
A:tensorflow.python.ops.special_math_ops.t1->_reshape_if_necessary(t1, new_shape)
A:tensorflow.python.ops.special_math_ops.product->_reshape_if_necessary(product, uncompacted_shape)
A:tensorflow.python.ops.special_math_ops.t0_shape->_get_shape(t0)
A:tensorflow.python.ops.special_math_ops.num_broadcast_elements_t0->_total_size(t0_shape[len(preserved_axes):-len(axes_to_sum)])
A:tensorflow.python.ops.special_math_ops.num_summed_elements->_total_size(t0_shape[-len(axes_to_sum):])
A:tensorflow.python.ops.special_math_ops.t1_shape->_get_shape(t1)
A:tensorflow.python.ops.special_math_ops.num_broadcast_elements_t1->_total_size(t1_shape[len(preserved_axes) + len(axes_to_sum):])
A:tensorflow.python.ops.special_math_ops.new_shape->tuple((-1 if x is None else x for x in new_shape))
A:tensorflow.python.ops.special_math_ops.cur_shape->tuple((x.value for x in tensor.get_shape()))
A:tensorflow.python.ops.special_math_ops.shape->tensor.get_shape().as_list()
A:tensorflow.python.ops.special_math_ops.shape_tensor->tensorflow.python.ops.array_ops.shape(tensor)
A:tensorflow.python.ops.special_math_ops.idx_in->re.match('([a-z,]+)(->[a-z]*)?', equation).group(1).split(',')
A:tensorflow.python.ops.special_math_ops.idx_all->set(''.join(idx_in))
A:tensorflow.python.ops.special_math_ops.idx_out->''.join(sorted((ax for ax in indices if counts[ax] == 1)))
A:tensorflow.python.ops.special_math_ops.missing_idx->set(idx_out).difference(idx_all)
A:tensorflow.python.ops.special_math_ops.axis_order[ax]->len(axis_order)
A:tensorflow.python.ops.special_math_ops.sorted_idx->sorted(axes_, key=axis_order.get)
tensorflow.ops.special_math_ops._einsum_reduction(t0,t0_axis_labels,t1,t1_axis_labels,axes_to_sum)
tensorflow.ops.special_math_ops._exponential_space_einsum(equation,*inputs)
tensorflow.ops.special_math_ops._get_shape(tensor)
tensorflow.ops.special_math_ops._reshape_if_necessary(tensor,new_shape)
tensorflow.ops.special_math_ops._total_size(shape_values)
tensorflow.ops.special_math_ops._transpose_if_necessary(tensor,perm)
tensorflow.ops.special_math_ops.einsum(equation,*inputs)
tensorflow.ops.special_math_ops.lbeta(x,name='lbeta')
tensorflow.python.ops.special_math_ops._einsum_reduction(t0,t0_axis_labels,t1,t1_axis_labels,axes_to_sum)
tensorflow.python.ops.special_math_ops._exponential_space_einsum(equation,*inputs)
tensorflow.python.ops.special_math_ops._get_shape(tensor)
tensorflow.python.ops.special_math_ops._reshape_if_necessary(tensor,new_shape)
tensorflow.python.ops.special_math_ops._total_size(shape_values)
tensorflow.python.ops.special_math_ops._transpose_if_necessary(tensor,perm)
tensorflow.python.ops.special_math_ops.einsum(equation,*inputs)
tensorflow.python.ops.special_math_ops.lbeta(x,name='lbeta')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/clip_ops.py----------------------------------------
A:tensorflow.python.ops.clip_ops.t->tensorflow.python.framework.ops.convert_to_tensor(t, name='t')
A:tensorflow.python.ops.clip_ops.t_min->tensorflow.python.ops.math_ops.minimum(t, clip_value_max)
A:tensorflow.python.ops.clip_ops.t_max->tensorflow.python.ops.math_ops.maximum(t_min, clip_value_min, name=name)
A:tensorflow.python.ops.clip_ops.l2norm_inv->tensorflow.python.ops.math_ops.rsqrt(math_ops.reduce_sum(t * t, math_ops.range(array_ops.rank(t))))
A:tensorflow.python.ops.clip_ops.tclip->tensorflow.python.ops.array_ops.identity(t * clip_norm * math_ops.minimum(l2norm_inv * n_element, constant_op.constant(1.0) / clip_norm), name=name)
A:tensorflow.python.ops.clip_ops.t_list->list(t_list)
A:tensorflow.python.ops.clip_ops.half_squared_norm->tensorflow.python.ops.math_ops.reduce_sum(array_ops.stack(half_squared_norms))
A:tensorflow.python.ops.clip_ops.norm->tensorflow.python.ops.math_ops.sqrt(half_squared_norm * constant_op.constant(2.0, dtype=half_squared_norm.dtype), name='global_norm')
A:tensorflow.python.ops.clip_ops.use_norm->global_norm(t_list, name)
A:tensorflow.python.ops.clip_ops.n_element->tensorflow.python.ops.math_ops.cast(array_ops.size(t), dtypes.float32)
tensorflow.ops.clip_ops.clip_by_average_norm(t,clip_norm,name=None)
tensorflow.ops.clip_ops.clip_by_global_norm(t_list,clip_norm,use_norm=None,name=None)
tensorflow.ops.clip_ops.clip_by_norm(t,clip_norm,axes=None,name=None)
tensorflow.ops.clip_ops.clip_by_value(t,clip_value_min,clip_value_max,name=None)
tensorflow.ops.clip_ops.global_norm(t_list,name=None)
tensorflow.python.ops.clip_ops.clip_by_average_norm(t,clip_norm,name=None)
tensorflow.python.ops.clip_ops.clip_by_global_norm(t_list,clip_norm,use_norm=None,name=None)
tensorflow.python.ops.clip_ops.clip_by_norm(t,clip_norm,axes=None,name=None)
tensorflow.python.ops.clip_ops.clip_by_value(t,clip_value_min,clip_value_max,name=None)
tensorflow.python.ops.clip_ops.global_norm(t_list,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py----------------------------------------
A:tensorflow.python.ops.variable_scope.single_slice_dim->self.single_slice_dim(shape)
A:tensorflow.python.ops.variable_scope.shape->tensorflow.python.framework.tensor_shape.as_shape(shape)
A:tensorflow.python.ops.variable_scope.partitions->partitioner(shape=shape, dtype=dtype)
A:tensorflow.python.ops.variable_scope.(slice_dim, slice_shape)->_compute_slice_dim_and_shape(shape.as_list(), partitions)
A:tensorflow.python.ops.variable_scope.partition_info->_PartitionInfo(full_shape=shape.as_list(), var_offset=var_offset)
A:tensorflow.python.ops.variable_scope.(init, initializing_from_value)->self._get_default_initializer(name=name, shape=shape, dtype=dtype)
A:tensorflow.python.ops.variable_scope.init->tensorflow.python.ops.array_ops.slice(init, var_offset, var_shape)
A:tensorflow.python.ops.variable_scope.var->self._get_single_variable(name=var_full_name, shape=init_shape, dtype=dtype, initializer=init, partition_info=partition_info, regularizer=regularizer, reuse=reuse, trainable=trainable, collections=collections, caching_device=caching_device, validate_shape=validate_shape, use_resource=use_resource)
A:tensorflow.python.ops.variable_scope.partitioned_var->tensorflow.python.ops.variables.PartitionedVariable(name=name, shape=shape, dtype=dtype, variable_list=vs, partitions=partitions)
A:tensorflow.python.ops.variable_scope.dtype->tensorflow.python.framework.dtypes.as_dtype(dtype)
A:tensorflow.python.ops.variable_scope.(initializer, initializing_from_value)->self._get_default_initializer(name=name, shape=shape, dtype=dtype)
A:tensorflow.python.ops.variable_scope.initializer->tensorflow.python.ops.init_ops.zeros_initializer()(shape=shape, dtype=dtype.base_dtype)
A:tensorflow.python.ops.variable_scope.v->tensorflow.python.ops.variables.Variable(initial_value=init_val, name=name, trainable=trainable, collections=collections, caching_device=caching_device, dtype=variable_dtype, validate_shape=validate_shape)
A:tensorflow.python.ops.variable_scope.loss->regularizer(v)
A:tensorflow.python.ops.variable_scope.full_name->'/'.join(full_name_list)
A:tensorflow.python.ops.variable_scope.scope->get_variable_scope()
A:tensorflow.python.ops.variable_scope.store->_VariableStore()
A:tensorflow.python.ops.variable_scope.default_varscope->tensorflow.python.framework.ops.get_collection_ref(_VARSCOPE_KEY)
A:tensorflow.python.ops.variable_scope.var_store->_get_default_variable_store()
A:tensorflow.python.ops.variable_scope.old_subscopes->copy.copy(var_store.variable_scopes_count)
A:tensorflow.python.ops.variable_scope.default_varscope[0]->VariableScope(reuse, name=new_name, initializer=old.initializer, regularizer=old.regularizer, caching_device=old.caching_device, partitioner=old.partitioner, dtype=old.dtype, use_resource=old.use_resource, custom_getter=old.custom_getter, name_scope=old_name_scope or name_or_scope)
A:tensorflow.python.ops.variable_scope.current_scope->get_variable_scope()
A:tensorflow.python.ops.variable_scope.g->tensorflow.python.framework.ops._get_graph_from_inputs(values)
A:tensorflow.python.ops.variable_scope.unique_default_name->_get_unique_variable_scope(default_name)
tensorflow.ops.variable_scope.VariableScope(self,reuse,name='',initializer=None,regularizer=None,caching_device=None,partitioner=None,custom_getter=None,name_scope='',dtype=dtypes.float32,use_resource=None)
tensorflow.ops.variable_scope.VariableScope._get_partitioned_variable(self,var_store,name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,partitioner=None,validate_shape=True,use_resource=None)
tensorflow.ops.variable_scope.VariableScope.caching_device(self)
tensorflow.ops.variable_scope.VariableScope.custom_getter(self)
tensorflow.ops.variable_scope.VariableScope.dtype(self)
tensorflow.ops.variable_scope.VariableScope.get_collection(self,name)
tensorflow.ops.variable_scope.VariableScope.get_variable(self,var_store,name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,partitioner=None,validate_shape=True,use_resource=None,custom_getter=None)
tensorflow.ops.variable_scope.VariableScope.global_variables(self)
tensorflow.ops.variable_scope.VariableScope.initializer(self)
tensorflow.ops.variable_scope.VariableScope.name(self)
tensorflow.ops.variable_scope.VariableScope.original_name_scope(self)
tensorflow.ops.variable_scope.VariableScope.partitioner(self)
tensorflow.ops.variable_scope.VariableScope.regularizer(self)
tensorflow.ops.variable_scope.VariableScope.reuse(self)
tensorflow.ops.variable_scope.VariableScope.reuse_variables(self)
tensorflow.ops.variable_scope.VariableScope.set_caching_device(self,caching_device)
tensorflow.ops.variable_scope.VariableScope.set_custom_getter(self,custom_getter)
tensorflow.ops.variable_scope.VariableScope.set_dtype(self,dtype)
tensorflow.ops.variable_scope.VariableScope.set_initializer(self,initializer)
tensorflow.ops.variable_scope.VariableScope.set_partitioner(self,partitioner)
tensorflow.ops.variable_scope.VariableScope.set_regularizer(self,regularizer)
tensorflow.ops.variable_scope.VariableScope.set_use_resource(self,use_resource)
tensorflow.ops.variable_scope.VariableScope.trainable_variables(self)
tensorflow.ops.variable_scope.VariableScope.use_resource(self)
tensorflow.ops.variable_scope._PartitionInfo(self,full_shape,var_offset)
tensorflow.ops.variable_scope._PartitionInfo.full_shape(self)
tensorflow.ops.variable_scope._PartitionInfo.single_offset(self,shape)
tensorflow.ops.variable_scope._PartitionInfo.single_slice_dim(self,shape)
tensorflow.ops.variable_scope._PartitionInfo.var_offset(self)
tensorflow.ops.variable_scope._VariableStore(self)
tensorflow.ops.variable_scope._VariableStore._get_default_initializer(self,name,shape=None,dtype=dtypes.float32)
tensorflow.ops.variable_scope._VariableStore._get_partitioned_variable(self,name,partitioner,shape=None,dtype=dtypes.float32,initializer=None,regularizer=None,reuse=None,trainable=True,collections=None,caching_device=None,validate_shape=True,use_resource=None)
tensorflow.ops.variable_scope._VariableStore._get_single_variable(self,name,shape=None,dtype=dtypes.float32,initializer=None,regularizer=None,partition_info=None,reuse=None,trainable=True,collections=None,caching_device=None,validate_shape=True,use_resource=None)
tensorflow.ops.variable_scope._VariableStore.close_variable_subscopes(self,scope_name)
tensorflow.ops.variable_scope._VariableStore.get_variable(self,name,shape=None,dtype=dtypes.float32,initializer=None,regularizer=None,reuse=None,trainable=True,collections=None,caching_device=None,partitioner=None,validate_shape=True,use_resource=None,custom_getter=None)
tensorflow.ops.variable_scope._VariableStore.open_variable_scope(self,scope_name)
tensorflow.ops.variable_scope._VariableStore.variable_scope_count(self,scope_name)
tensorflow.ops.variable_scope._compute_slice_dim_and_shape(full_shape,slicing)
tensorflow.ops.variable_scope._get_default_variable_store()
tensorflow.ops.variable_scope._get_partitioned_variable(name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,partitioner=None,validate_shape=True,use_resource=None)
tensorflow.ops.variable_scope._get_unique_variable_scope(prefix)
tensorflow.ops.variable_scope._maybe_wrap_custom_getter(custom_getter,old_getter)
tensorflow.ops.variable_scope._pure_variable_scope(name_or_scope,reuse=None,initializer=None,regularizer=None,caching_device=None,partitioner=None,custom_getter=None,old_name_scope=None,dtype=dtypes.float32,use_resource=None)
tensorflow.ops.variable_scope.get_local_variable(*args,**kwargs)
tensorflow.ops.variable_scope.get_variable(name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,partitioner=None,validate_shape=True,use_resource=None,custom_getter=None)
tensorflow.ops.variable_scope.get_variable_scope()
tensorflow.ops.variable_scope.no_regularizer(_)
tensorflow.ops.variable_scope.variable_op_scope(values,name_or_scope,default_name=None,initializer=None,regularizer=None,caching_device=None,partitioner=None,custom_getter=None,reuse=None,dtype=None,use_resource=None)
tensorflow.ops.variable_scope.variable_scope(name_or_scope,default_name=None,values=None,initializer=None,regularizer=None,caching_device=None,partitioner=None,custom_getter=None,reuse=None,dtype=None,use_resource=None)
tensorflow.python.ops.variable_scope.VariableScope(self,reuse,name='',initializer=None,regularizer=None,caching_device=None,partitioner=None,custom_getter=None,name_scope='',dtype=dtypes.float32,use_resource=None)
tensorflow.python.ops.variable_scope.VariableScope.__init__(self,reuse,name='',initializer=None,regularizer=None,caching_device=None,partitioner=None,custom_getter=None,name_scope='',dtype=dtypes.float32,use_resource=None)
tensorflow.python.ops.variable_scope.VariableScope._get_partitioned_variable(self,var_store,name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,partitioner=None,validate_shape=True,use_resource=None)
tensorflow.python.ops.variable_scope.VariableScope.caching_device(self)
tensorflow.python.ops.variable_scope.VariableScope.custom_getter(self)
tensorflow.python.ops.variable_scope.VariableScope.dtype(self)
tensorflow.python.ops.variable_scope.VariableScope.get_collection(self,name)
tensorflow.python.ops.variable_scope.VariableScope.get_variable(self,var_store,name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,partitioner=None,validate_shape=True,use_resource=None,custom_getter=None)
tensorflow.python.ops.variable_scope.VariableScope.global_variables(self)
tensorflow.python.ops.variable_scope.VariableScope.initializer(self)
tensorflow.python.ops.variable_scope.VariableScope.name(self)
tensorflow.python.ops.variable_scope.VariableScope.original_name_scope(self)
tensorflow.python.ops.variable_scope.VariableScope.partitioner(self)
tensorflow.python.ops.variable_scope.VariableScope.regularizer(self)
tensorflow.python.ops.variable_scope.VariableScope.reuse(self)
tensorflow.python.ops.variable_scope.VariableScope.reuse_variables(self)
tensorflow.python.ops.variable_scope.VariableScope.set_caching_device(self,caching_device)
tensorflow.python.ops.variable_scope.VariableScope.set_custom_getter(self,custom_getter)
tensorflow.python.ops.variable_scope.VariableScope.set_dtype(self,dtype)
tensorflow.python.ops.variable_scope.VariableScope.set_initializer(self,initializer)
tensorflow.python.ops.variable_scope.VariableScope.set_partitioner(self,partitioner)
tensorflow.python.ops.variable_scope.VariableScope.set_regularizer(self,regularizer)
tensorflow.python.ops.variable_scope.VariableScope.set_use_resource(self,use_resource)
tensorflow.python.ops.variable_scope.VariableScope.trainable_variables(self)
tensorflow.python.ops.variable_scope.VariableScope.use_resource(self)
tensorflow.python.ops.variable_scope._PartitionInfo(self,full_shape,var_offset)
tensorflow.python.ops.variable_scope._PartitionInfo.__init__(self,full_shape,var_offset)
tensorflow.python.ops.variable_scope._PartitionInfo.full_shape(self)
tensorflow.python.ops.variable_scope._PartitionInfo.single_offset(self,shape)
tensorflow.python.ops.variable_scope._PartitionInfo.single_slice_dim(self,shape)
tensorflow.python.ops.variable_scope._PartitionInfo.var_offset(self)
tensorflow.python.ops.variable_scope._VariableStore(self)
tensorflow.python.ops.variable_scope._VariableStore.__init__(self)
tensorflow.python.ops.variable_scope._VariableStore._get_default_initializer(self,name,shape=None,dtype=dtypes.float32)
tensorflow.python.ops.variable_scope._VariableStore._get_partitioned_variable(self,name,partitioner,shape=None,dtype=dtypes.float32,initializer=None,regularizer=None,reuse=None,trainable=True,collections=None,caching_device=None,validate_shape=True,use_resource=None)
tensorflow.python.ops.variable_scope._VariableStore._get_single_variable(self,name,shape=None,dtype=dtypes.float32,initializer=None,regularizer=None,partition_info=None,reuse=None,trainable=True,collections=None,caching_device=None,validate_shape=True,use_resource=None)
tensorflow.python.ops.variable_scope._VariableStore.close_variable_subscopes(self,scope_name)
tensorflow.python.ops.variable_scope._VariableStore.get_variable(self,name,shape=None,dtype=dtypes.float32,initializer=None,regularizer=None,reuse=None,trainable=True,collections=None,caching_device=None,partitioner=None,validate_shape=True,use_resource=None,custom_getter=None)
tensorflow.python.ops.variable_scope._VariableStore.open_variable_scope(self,scope_name)
tensorflow.python.ops.variable_scope._VariableStore.variable_scope_count(self,scope_name)
tensorflow.python.ops.variable_scope._compute_slice_dim_and_shape(full_shape,slicing)
tensorflow.python.ops.variable_scope._get_default_variable_store()
tensorflow.python.ops.variable_scope._get_partitioned_variable(name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,partitioner=None,validate_shape=True,use_resource=None)
tensorflow.python.ops.variable_scope._get_unique_variable_scope(prefix)
tensorflow.python.ops.variable_scope._maybe_wrap_custom_getter(custom_getter,old_getter)
tensorflow.python.ops.variable_scope._pure_variable_scope(name_or_scope,reuse=None,initializer=None,regularizer=None,caching_device=None,partitioner=None,custom_getter=None,old_name_scope=None,dtype=dtypes.float32,use_resource=None)
tensorflow.python.ops.variable_scope.get_local_variable(*args,**kwargs)
tensorflow.python.ops.variable_scope.get_variable(name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,partitioner=None,validate_shape=True,use_resource=None,custom_getter=None)
tensorflow.python.ops.variable_scope.get_variable_scope()
tensorflow.python.ops.variable_scope.no_regularizer(_)
tensorflow.python.ops.variable_scope.variable_op_scope(values,name_or_scope,default_name=None,initializer=None,regularizer=None,caching_device=None,partitioner=None,custom_getter=None,reuse=None,dtype=None,use_resource=None)
tensorflow.python.ops.variable_scope.variable_scope(name_or_scope,default_name=None,values=None,initializer=None,regularizer=None,caching_device=None,partitioner=None,custom_getter=None,reuse=None,dtype=None,use_resource=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/array_grad.py----------------------------------------
A:tensorflow.python.ops.array_grad.shape_of_shape->tensorflow.python.ops.array_ops.shape(sizes[0])
A:tensorflow.python.ops.array_grad.mask->tensorflow.python.ops.array_ops.concat([array_ops.fill(array_ops.expand_dims(concat_dim, 0), 0), [1], array_ops.fill(shape_of_shape - concat_dim - 1, 0)], 0)
A:tensorflow.python.ops.array_grad.begin->tensorflow.python.ops.array_ops.reshape(pad_before, [-1])
A:tensorflow.python.ops.array_grad.input_shape->tensorflow.python.ops.array_ops.shape(op.inputs[0])
A:tensorflow.python.ops.array_grad.sizes->tensorflow.python.ops.array_ops.shape(x)
A:tensorflow.python.ops.array_grad.out_grads->tensorflow.python.ops.array_ops.split(grad, sizes, non_neg_concat_dim)
A:tensorflow.python.ops.array_grad.offset->tensorflow.python.ops.gen_array_ops._concat_offset(non_neg_concat_dim, sizes)
A:tensorflow.python.ops.array_grad.concat_dim_static->tensorflow.python.framework.tensor_util.constant_value(concat_dim)
A:tensorflow.python.ops.array_grad.rank->tensorflow.python.framework.tensor_util.constant_value(array_ops.rank(input_values[0]))
A:tensorflow.python.ops.array_grad.(mask, begin)->_CreateDenseMaskAndBegin(sizes, non_neg_concat_dim)
A:tensorflow.python.ops.array_grad.new_values->tensorflow.python.ops.array_ops.gather(grad.values, indices_to_select)
A:tensorflow.python.ops.array_grad.start->tensorflow.python.framework.constant_op.constant(0, dtype=grad.indices.dtype)
A:tensorflow.python.ops.array_grad.size_concat_dim->tensorflow.python.ops.math_ops.cast(size_concat_dim, dtype=grad.indices.dtype)
A:tensorflow.python.ops.array_grad.indices_to_select->tensorflow.python.ops.array_ops.squeeze(array_ops.where(math_ops.logical_and(grad.indices >= start, grad.indices < end)), squeeze_dims=[1])
A:tensorflow.python.ops.array_grad.input_rank->tensorflow.python.ops.array_ops.rank(input_vec)
A:tensorflow.python.ops.array_grad.slice_size->tensorflow.python.ops.array_ops.shape(op.outputs[0])
A:tensorflow.python.ops.array_grad.shape->tensorflow.python.ops.array_ops.stack([input_rank, 1])
A:tensorflow.python.ops.array_grad.before_pad->tensorflow.python.ops.array_ops.reshape(begin_vec, shape)
A:tensorflow.python.ops.array_grad.after_pad->tensorflow.python.ops.array_ops.reshape(array_ops.shape(input_vec) - slice_size - begin_vec, shape)
A:tensorflow.python.ops.array_grad.paddings->tensorflow.python.ops.array_ops.concat([before_pad, after_pad], 1)
A:tensorflow.python.ops.array_grad.x->tensorflow.python.ops.array_ops.shape(op.inputs[0])
A:tensorflow.python.ops.array_grad.returnval->tensorflow.python.ops.array_ops.concat(list(grads), op.inputs[2])
A:tensorflow.python.ops.array_grad.diag_shape->tensorflow.python.ops.array_ops.concat([batch_shape, [min_dim]], 0)
A:tensorflow.python.ops.array_grad.batch_shape->tensorflow.python.ops.array_ops.slice(grad_shape, [0], [grad_rank - 2])
A:tensorflow.python.ops.array_grad.grad_shape->tensorflow.python.ops.array_ops.shape(grad)
A:tensorflow.python.ops.array_grad.grad_rank->tensorflow.python.ops.array_ops.rank(grad)
A:tensorflow.python.ops.array_grad.matrix_shape->tensorflow.python.ops.array_ops.slice(grad_shape, [grad_rank - 2], [2])
A:tensorflow.python.ops.array_grad.min_dim->tensorflow.python.ops.math_ops.reduce_min(matrix_shape)
A:tensorflow.python.ops.array_grad.grad_input->tensorflow.python.ops.array_ops.matrix_set_diag(grad, array_ops.zeros(diag_shape, dtype=grad.dtype))
A:tensorflow.python.ops.array_grad.grad_diag->tensorflow.python.ops.array_ops.matrix_diag_part(grad)
A:tensorflow.python.ops.array_grad.params_shape->tensorflow.python.ops.array_ops.shape(params)
A:tensorflow.python.ops.array_grad.size->tensorflow.python.ops.array_ops.expand_dims(array_ops.size(indices), 0)
A:tensorflow.python.ops.array_grad.values_shape->tensorflow.python.ops.array_ops.concat([size, params_shape[1:]], 0)
A:tensorflow.python.ops.array_grad.values->tensorflow.python.ops.array_ops.reshape(grad, values_shape)
A:tensorflow.python.ops.array_grad.indices->tensorflow.python.ops.array_ops.reshape(indices, size)
A:tensorflow.python.ops.array_grad.ref_shape->tensorflow.python.ops.array_ops.shape(ref, out_type=indices.dtype)
A:tensorflow.python.ops.array_grad.ref_grad->tensorflow.python.ops.array_ops.scatter_nd(indices, grad, ref_shape)
A:tensorflow.python.ops.array_grad.split_shape->tensorflow.python.ops.array_ops.reshape(array_ops.transpose(array_ops.stack([op.inputs[1], input_shape])), [-1])
A:tensorflow.python.ops.array_grad.axes->tensorflow.python.ops.math_ops.range(0, array_ops.size(split_shape), 2)
A:tensorflow.python.ops.array_grad.input_grad->tensorflow.python.ops.math_ops.reduce_sum(array_ops.reshape(grad, split_shape), axes)
A:tensorflow.python.ops.array_grad.pad_before->tensorflow.python.ops.array_ops.slice(a, [0, 0], array_ops.stack([array_ops.rank(x), 1]))
A:tensorflow.python.ops.array_grad.block_size->op.get_attr('block_size')
A:tensorflow.python.ops.array_grad.mode->op.get_attr('mode')
A:tensorflow.python.ops.array_grad.input_bhwc->tensorflow.python.ops.array_ops.shape(op.inputs[0])
A:tensorflow.python.ops.array_grad.(_, ksize_r, ksize_c, _)->op.get_attr('ksizes')
A:tensorflow.python.ops.array_grad.(_, stride_r, stride_h, _)->op.get_attr('strides')
A:tensorflow.python.ops.array_grad.(_, rate_r, rate_c, _)->op.get_attr('rates')
A:tensorflow.python.ops.array_grad.padding->op.get_attr('padding')
A:tensorflow.python.ops.array_grad.rows_out->int(ceil((rows_in - ksize_r_eff + 1) / stride_r))
A:tensorflow.python.ops.array_grad.cols_out->int(ceil((cols_in - ksize_c_eff + 1) / stride_h))
A:tensorflow.python.ops.array_grad.grad_expanded->tensorflow.python.ops.array_ops.transpose(array_ops.reshape(grad, (batch_size, rows_out, cols_out, ksize_r, ksize_c, channels)), (1, 2, 3, 4, 0, 5))
A:tensorflow.python.ops.array_grad.grad_flat->tensorflow.python.ops.array_ops.reshape(grad_expanded, (-1, batch_size * channels))
A:tensorflow.python.ops.array_grad.row_steps->range(0, rows_out * stride_r, stride_r)
A:tensorflow.python.ops.array_grad.col_steps->range(0, cols_out * stride_h, stride_h)
A:tensorflow.python.ops.array_grad.sp_mat->tensorflow.python.framework.sparse_tensor.SparseTensor(array_ops.constant(idx, dtype=ops.dtypes.int64), array_ops.ones((len(idx),), dtype=ops.dtypes.float32), sp_shape)
A:tensorflow.python.ops.array_grad.jac->tensorflow.python.ops.sparse_ops.sparse_tensor_dense_matmul(sp_mat, grad_flat)
A:tensorflow.python.ops.array_grad.grad_out->tensorflow.python.ops.array_ops.transpose(grad_out, (2, 0, 1, 3))
A:tensorflow.python.ops.array_grad.updates_grad->tensorflow.python.ops.array_ops.gather_nd(grad, indices)
tensorflow.ops.array_grad._BatchToSpaceGrad(op,grad)
tensorflow.ops.array_grad._BatchToSpaceNDGrad(op,grad)
tensorflow.ops.array_grad._CheckNumericsGrad(_,grad)
tensorflow.ops.array_grad._ConcatGrad(op,grad)
tensorflow.ops.array_grad._ConcatGradHelper(op,grad,start_value_index,end_value_index,dim_index)
tensorflow.ops.array_grad._ConcatGradV2(op,grad)
tensorflow.ops.array_grad._DepthToSpaceGrad(op,grad)
tensorflow.ops.array_grad._DiagGrad(_,grad)
tensorflow.ops.array_grad._DiagPartGrad(_,grad)
tensorflow.ops.array_grad._ExpandDimsGrad(op,grad)
tensorflow.ops.array_grad._ExtractImagePatchesGrad(op,grad)
tensorflow.ops.array_grad._FillGrad(_,grad)
tensorflow.ops.array_grad._GatherGrad(op,grad)
tensorflow.ops.array_grad._GatherNdGrad(op,grad)
tensorflow.ops.array_grad._IdGrad(_,grad)
tensorflow.ops.array_grad._MatrixBandPartGrad(op,grad)
tensorflow.ops.array_grad._MatrixDiagGrad(_,grad)
tensorflow.ops.array_grad._MatrixDiagPartGrad(op,grad)
tensorflow.ops.array_grad._MatrixSetDiagGrad(op,grad)
tensorflow.ops.array_grad._MirrorPadGrad(op,grad)
tensorflow.ops.array_grad._MirrorPadGradGrad(op,grad)
tensorflow.ops.array_grad._PackGrad(op,grad)
tensorflow.ops.array_grad._PadGrad(op,grad)
tensorflow.ops.array_grad._PreventGradientGrad(op,_)
tensorflow.ops.array_grad._QuantizeAndDequantizeGrad(_,grad)
tensorflow.ops.array_grad._QuantizeAndDequantizeV2Grad(_,grad)
tensorflow.ops.array_grad._RefIdGrad(_,grad)
tensorflow.ops.array_grad._ReshapeGrad(op,grad)
tensorflow.ops.array_grad._ReshapeToInput(op,grad)
tensorflow.ops.array_grad._ReverseGrad(op,grad)
tensorflow.ops.array_grad._ReverseSequenceGrad(op,grad)
tensorflow.ops.array_grad._ReverseV2Grad(op,grad)
tensorflow.ops.array_grad._ScatterNdGrad(op,grad)
tensorflow.ops.array_grad._SliceGrad(op,grad)
tensorflow.ops.array_grad._SpaceToBatchGrad(op,grad)
tensorflow.ops.array_grad._SpaceToBatchNDGrad(op,grad)
tensorflow.ops.array_grad._SpaceToDepthGrad(op,grad)
tensorflow.ops.array_grad._SplitGrad(op,*grads)
tensorflow.ops.array_grad._SplitVGrad(op,*grads)
tensorflow.ops.array_grad._SqueezeGrad(op,grad)
tensorflow.ops.array_grad._StridedSliceGrad(op,grad)
tensorflow.ops.array_grad._StridedSliceGradGrad(op,grad)
tensorflow.ops.array_grad._TileGrad(op,grad)
tensorflow.ops.array_grad._TransposeGrad(op,grad)
tensorflow.ops.array_grad._UnpackGrad(op,*grads)
tensorflow.python.ops.array_grad._BatchToSpaceGrad(op,grad)
tensorflow.python.ops.array_grad._BatchToSpaceNDGrad(op,grad)
tensorflow.python.ops.array_grad._CheckNumericsGrad(_,grad)
tensorflow.python.ops.array_grad._ConcatGrad(op,grad)
tensorflow.python.ops.array_grad._ConcatGradHelper(op,grad,start_value_index,end_value_index,dim_index)
tensorflow.python.ops.array_grad._ConcatGradV2(op,grad)
tensorflow.python.ops.array_grad._DepthToSpaceGrad(op,grad)
tensorflow.python.ops.array_grad._DiagGrad(_,grad)
tensorflow.python.ops.array_grad._DiagPartGrad(_,grad)
tensorflow.python.ops.array_grad._ExpandDimsGrad(op,grad)
tensorflow.python.ops.array_grad._ExtractImagePatchesGrad(op,grad)
tensorflow.python.ops.array_grad._FillGrad(_,grad)
tensorflow.python.ops.array_grad._GatherGrad(op,grad)
tensorflow.python.ops.array_grad._GatherNdGrad(op,grad)
tensorflow.python.ops.array_grad._IdGrad(_,grad)
tensorflow.python.ops.array_grad._MatrixBandPartGrad(op,grad)
tensorflow.python.ops.array_grad._MatrixDiagGrad(_,grad)
tensorflow.python.ops.array_grad._MatrixDiagPartGrad(op,grad)
tensorflow.python.ops.array_grad._MatrixSetDiagGrad(op,grad)
tensorflow.python.ops.array_grad._MirrorPadGrad(op,grad)
tensorflow.python.ops.array_grad._MirrorPadGradGrad(op,grad)
tensorflow.python.ops.array_grad._PackGrad(op,grad)
tensorflow.python.ops.array_grad._PadGrad(op,grad)
tensorflow.python.ops.array_grad._PreventGradientGrad(op,_)
tensorflow.python.ops.array_grad._QuantizeAndDequantizeGrad(_,grad)
tensorflow.python.ops.array_grad._QuantizeAndDequantizeV2Grad(_,grad)
tensorflow.python.ops.array_grad._RefIdGrad(_,grad)
tensorflow.python.ops.array_grad._ReshapeGrad(op,grad)
tensorflow.python.ops.array_grad._ReshapeToInput(op,grad)
tensorflow.python.ops.array_grad._ReverseGrad(op,grad)
tensorflow.python.ops.array_grad._ReverseSequenceGrad(op,grad)
tensorflow.python.ops.array_grad._ReverseV2Grad(op,grad)
tensorflow.python.ops.array_grad._ScatterNdGrad(op,grad)
tensorflow.python.ops.array_grad._SliceGrad(op,grad)
tensorflow.python.ops.array_grad._SpaceToBatchGrad(op,grad)
tensorflow.python.ops.array_grad._SpaceToBatchNDGrad(op,grad)
tensorflow.python.ops.array_grad._SpaceToDepthGrad(op,grad)
tensorflow.python.ops.array_grad._SplitGrad(op,*grads)
tensorflow.python.ops.array_grad._SplitVGrad(op,*grads)
tensorflow.python.ops.array_grad._SqueezeGrad(op,grad)
tensorflow.python.ops.array_grad._StridedSliceGrad(op,grad)
tensorflow.python.ops.array_grad._StridedSliceGradGrad(op,grad)
tensorflow.python.ops.array_grad._TileGrad(op,grad)
tensorflow.python.ops.array_grad._TransposeGrad(op,grad)
tensorflow.python.ops.array_grad._UnpackGrad(op,*grads)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_random_ops.py----------------------------------------
A:tensorflow.python.ops.gen_random_ops.result->_InitOpDefLibrary().apply_op('TruncatedNormal', shape=shape, dtype=dtype, seed=seed, seed2=seed2, name=name)
A:tensorflow.python.ops.gen_random_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_random_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_random_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_random_ops._InitOpDefLibrary()
tensorflow.ops.gen_random_ops._parameterized_truncated_normal(shape,means,stdevs,minvals,maxvals,seed=None,seed2=None,name=None)
tensorflow.ops.gen_random_ops._random_gamma(shape,alpha,seed=None,seed2=None,name=None)
tensorflow.ops.gen_random_ops._random_poisson(shape,rate,seed=None,seed2=None,name=None)
tensorflow.ops.gen_random_ops._random_shuffle(value,seed=None,seed2=None,name=None)
tensorflow.ops.gen_random_ops._random_standard_normal(shape,dtype,seed=None,seed2=None,name=None)
tensorflow.ops.gen_random_ops._random_uniform(shape,dtype,seed=None,seed2=None,name=None)
tensorflow.ops.gen_random_ops._random_uniform_int(shape,minval,maxval,seed=None,seed2=None,name=None)
tensorflow.ops.gen_random_ops._truncated_normal(shape,dtype,seed=None,seed2=None,name=None)
tensorflow.ops.gen_random_ops.multinomial(logits,num_samples,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_random_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_random_ops._parameterized_truncated_normal(shape,means,stdevs,minvals,maxvals,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_random_ops._random_gamma(shape,alpha,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_random_ops._random_poisson(shape,rate,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_random_ops._random_shuffle(value,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_random_ops._random_standard_normal(shape,dtype,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_random_ops._random_uniform(shape,dtype,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_random_ops._random_uniform_int(shape,minval,maxval,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_random_ops._truncated_normal(shape,dtype,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_random_ops.multinomial(logits,num_samples,seed=None,seed2=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_candidate_sampling_ops.py----------------------------------------
A:tensorflow.python.ops.gen_candidate_sampling_ops._AllCandidateSamplerOutput->collections.namedtuple('AllCandidateSampler', __all_candidate_sampler_outputs)
A:tensorflow.python.ops.gen_candidate_sampling_ops.result->_InitOpDefLibrary().apply_op('UniformCandidateSampler', true_classes=true_classes, num_true=num_true, num_sampled=num_sampled, unique=unique, range_max=range_max, seed=seed, seed2=seed2, name=name)
A:tensorflow.python.ops.gen_candidate_sampling_ops._ComputeAccidentalHitsOutput->collections.namedtuple('ComputeAccidentalHits', __compute_accidental_hits_outputs)
A:tensorflow.python.ops.gen_candidate_sampling_ops._FixedUnigramCandidateSamplerOutput->collections.namedtuple('FixedUnigramCandidateSampler', __fixed_unigram_candidate_sampler_outputs)
A:tensorflow.python.ops.gen_candidate_sampling_ops._LearnedUnigramCandidateSamplerOutput->collections.namedtuple('LearnedUnigramCandidateSampler', __learned_unigram_candidate_sampler_outputs)
A:tensorflow.python.ops.gen_candidate_sampling_ops._LogUniformCandidateSamplerOutput->collections.namedtuple('LogUniformCandidateSampler', __log_uniform_candidate_sampler_outputs)
A:tensorflow.python.ops.gen_candidate_sampling_ops._ThreadUnsafeUnigramCandidateSamplerOutput->collections.namedtuple('ThreadUnsafeUnigramCandidateSampler', __thread_unsafe_unigram_candidate_sampler_outputs)
A:tensorflow.python.ops.gen_candidate_sampling_ops._UniformCandidateSamplerOutput->collections.namedtuple('UniformCandidateSampler', __uniform_candidate_sampler_outputs)
A:tensorflow.python.ops.gen_candidate_sampling_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_candidate_sampling_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_candidate_sampling_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_candidate_sampling_ops._InitOpDefLibrary()
tensorflow.ops.gen_candidate_sampling_ops._all_candidate_sampler(true_classes,num_true,num_sampled,unique,seed=None,seed2=None,name=None)
tensorflow.ops.gen_candidate_sampling_ops._compute_accidental_hits(true_classes,sampled_candidates,num_true,seed=None,seed2=None,name=None)
tensorflow.ops.gen_candidate_sampling_ops._fixed_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,vocab_file=None,distortion=None,num_reserved_ids=None,num_shards=None,shard=None,unigrams=None,seed=None,seed2=None,name=None)
tensorflow.ops.gen_candidate_sampling_ops._learned_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,seed2=None,name=None)
tensorflow.ops.gen_candidate_sampling_ops._log_uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,seed2=None,name=None)
tensorflow.ops.gen_candidate_sampling_ops._thread_unsafe_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,seed2=None,name=None)
tensorflow.ops.gen_candidate_sampling_ops._uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_candidate_sampling_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_candidate_sampling_ops._all_candidate_sampler(true_classes,num_true,num_sampled,unique,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_candidate_sampling_ops._compute_accidental_hits(true_classes,sampled_candidates,num_true,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_candidate_sampling_ops._fixed_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,vocab_file=None,distortion=None,num_reserved_ids=None,num_shards=None,shard=None,unigrams=None,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_candidate_sampling_ops._learned_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_candidate_sampling_ops._log_uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_candidate_sampling_ops._thread_unsafe_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_candidate_sampling_ops._uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,seed2=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/embedding_ops.py----------------------------------------
A:tensorflow.python.ops.embedding_ops.params->list(params)
A:tensorflow.python.ops.embedding_ops.ndims->tensorflow.python.ops.array_ops.size(array_ops.shape(x))
A:tensorflow.python.ops.embedding_ops.np->len(params)
A:tensorflow.python.ops.embedding_ops.ids->tensorflow.python.framework.ops.convert_to_tensor(ids, name='ids')
A:tensorflow.python.ops.embedding_ops.flat_ids->tensorflow.python.ops.array_ops.reshape(ids, [-1])
A:tensorflow.python.ops.embedding_ops.original_indices->tensorflow.python.ops.math_ops.range(array_ops.size(flat_ids))
A:tensorflow.python.ops.embedding_ops.num_total_ids->tensorflow.python.ops.math_ops.reduce_sum(math_ops.cast(array_ops.stack(dim_0_sizes), flat_ids.dtype))
A:tensorflow.python.ops.embedding_ops.p_assignments->tensorflow.python.ops.math_ops.cast(p_assignments, dtypes.int32)
A:tensorflow.python.ops.embedding_ops.is_in_first_extras_partitions->tensorflow.python.ops.math_ops.cast(p_assignments < extras, flat_ids.dtype)
A:tensorflow.python.ops.embedding_ops.gather_ids->tensorflow.python.ops.data_flow_ops.dynamic_partition(new_ids, p_assignments, np)
A:tensorflow.python.ops.embedding_ops.pindices->tensorflow.python.ops.data_flow_ops.dynamic_partition(original_indices, p_assignments, np)
A:tensorflow.python.ops.embedding_ops.ret->tensorflow.python.ops.array_ops.reshape(ret, array_ops.concat([array_ops.shape(ids), array_ops.slice(params_shape, [1], [-1])], 0))
A:tensorflow.python.ops.embedding_ops.element_shape->element_shape.merge_with(p.get_shape()[1:]).merge_with(p.get_shape()[1:])
A:tensorflow.python.ops.embedding_ops.params_shape->tensorflow.python.ops.array_ops.shape(params[0])
A:tensorflow.python.ops.embedding_ops.segment_ids->tensorflow.python.ops.math_ops.cast(segment_ids, dtypes.int32)
A:tensorflow.python.ops.embedding_ops.(ids, idx)->tensorflow.python.ops.array_ops.unique(ids)
A:tensorflow.python.ops.embedding_ops.embeddings->tensorflow.python.ops.math_ops.sparse_segment_sqrt_n(embeddings, idx, segment_ids, name=name)
A:tensorflow.python.ops.embedding_ops.weights->tensorflow.python.ops.array_ops.reshape(weights, bcast_weights_shape)
A:tensorflow.python.ops.embedding_ops.ones->tensorflow.python.ops.array_ops.fill(array_ops.expand_dims(array_ops.rank(embeddings) - 1, 0), 1)
A:tensorflow.python.ops.embedding_ops.bcast_weights_shape->tensorflow.python.ops.array_ops.concat([array_ops.shape(weights), ones], 0)
A:tensorflow.python.ops.embedding_ops.orig_weights_shape->tensorflow.python.ops.array_ops.reshape(weights, bcast_weights_shape).get_shape()
A:tensorflow.python.ops.embedding_ops.weight_sum->tensorflow.python.ops.math_ops.segment_sum(weights_squared, segment_ids)
A:tensorflow.python.ops.embedding_ops.weights_squared->tensorflow.python.ops.math_ops.pow(weights, 2)
A:tensorflow.python.ops.embedding_ops.weight_sum_sqrt->tensorflow.python.ops.math_ops.sqrt(weight_sum)
tensorflow.ops.embedding_ops._do_gather(params,ids,validate_indices=True,name=None)
tensorflow.ops.embedding_ops.embedding_lookup(params,ids,partition_strategy='mod',name=None,validate_indices=True,max_norm=None)
tensorflow.ops.embedding_ops.embedding_lookup_sparse(params,sp_ids,sp_weights,partition_strategy='mod',name=None,combiner=None,max_norm=None)
tensorflow.python.ops.embedding_ops._do_gather(params,ids,validate_indices=True,name=None)
tensorflow.python.ops.embedding_ops.embedding_lookup(params,ids,partition_strategy='mod',name=None,validate_indices=True,max_norm=None)
tensorflow.python.ops.embedding_ops.embedding_lookup_sparse(params,sp_ids,sp_weights,partition_strategy='mod',name=None,combiner=None,max_norm=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py----------------------------------------
A:tensorflow.python.ops.gradients_impl.dense_shape_value->tensorflow.python.framework.tensor_util.constant_value(value.dense_shape)
A:tensorflow.python.ops.gradients_impl.num_elements->numpy.prod(dense_shape_value)
A:tensorflow.python.ops.gradients_impl.queue->collections.deque()
A:tensorflow.python.ops.gradients_impl.op->collections.deque().popleft()
A:tensorflow.python.ops.gradients_impl.loop_state->tensorflow.python.ops.control_flow_ops.MaybeCreateControlFlowState(between_op_list, between_ops, colocate_gradients_with_ops)
A:tensorflow.python.ops.gradients_impl.grad_ys->_DefaultGradYs(grad_ys, ys, colocate_gradients_with_ops)
A:tensorflow.python.ops.gradients_impl.grad_ys[i]->tensorflow.python.ops.array_ops.fill(array_ops.shape(y), constant_op.constant(1, dtype=y.dtype))
A:tensorflow.python.ops.gradients_impl.dtype->tensorflow.python.framework.dtypes.as_dtype(tensor.dtype)
A:tensorflow.python.ops.gradients_impl.stop_ops->_StopOps(from_ops, pending_count)
A:tensorflow.python.ops.gradients_impl.f->tensorflow.core.framework.attr_value_pb2.NameAttrList()
A:tensorflow.python.ops.gradients_impl.in_grads->tensorflow.python.ops.control_flow_ops.tuple(in_grads)
A:tensorflow.python.ops.gradients_impl.scope->scope.rstrip('/').replace('/', '_').rstrip('/').replace('/', '_')
A:tensorflow.python.ops.gradients_impl.xla_scope->collections.deque().popleft().get_attr('_XlaScope').decode()
A:tensorflow.python.ops.gradients_impl.xla_compile->collections.deque().popleft().get_attr('_XlaCompile')
A:tensorflow.python.ops.gradients_impl.xla_separate_compiled_gradients->collections.deque().popleft().get_attr('_XlaSeparateCompiledGradients')
A:tensorflow.python.ops.gradients_impl.ys->tensorflow.python.framework.ops.convert_n_to_tensor_or_indexed_slices(ys, name='y')
A:tensorflow.python.ops.gradients_impl.xs->_AsList(xs)
A:tensorflow.python.ops.gradients_impl.(pending_count, loop_state)->_PendingCount(ops.get_default_graph(), to_ops, from_ops, colocate_gradients_with_ops)
A:tensorflow.python.ops.gradients_impl.to_ops_set->set()
A:tensorflow.python.ops.gradients_impl.loop_exits->tensorflow.python.ops.control_flow_ops.MaybeCreateControlFlowState(between_op_list, between_ops, colocate_gradients_with_ops).ProcessUnusedLoopExits(pending_count, to_ops_set)
A:tensorflow.python.ops.gradients_impl.out_grads->_GetGrads(grads, op)
A:tensorflow.python.ops.gradients_impl.is_func_call->tensorflow.python.framework.ops.get_default_graph()._is_function(op.type)
A:tensorflow.python.ops.gradients_impl.has_out_grads->any((isinstance(g, ops.Tensor) or g for g in out_grads))
A:tensorflow.python.ops.gradients_impl.func_call->tensorflow.python.framework.ops.get_default_graph()._get_function(op.type)
A:tensorflow.python.ops.gradients_impl.grad_fn->tensorflow.python.framework.ops.get_gradient_function(op)
A:tensorflow.python.ops.gradients_impl.out_grads[i]->tensorflow.python.framework.ops.IndexedSlices(array_ops.concat([x.values for x in out_grad], 0), array_ops.concat([x.indices for x in out_grad], 0), out_grad[0].dense_shape)
A:tensorflow.python.ops.gradients_impl.grad_state->tensorflow.python.ops.control_flow_ops.MaybeCreateControlFlowState(between_op_list, between_ops, colocate_gradients_with_ops).GetGradState(x.op, before=False)
A:tensorflow.python.ops.gradients_impl.op_grads->gradients(ys, xs).get(op)
A:tensorflow.python.ops.gradients_impl.g->_HandleNestedIndexedSlices(grad.values)
A:tensorflow.python.ops.gradients_impl.shape->shape.merge_with(i.get_shape()).merge_with(i.get_shape())
A:tensorflow.python.ops.gradients_impl.tensors_on_device->collections.defaultdict(lambda : [])
A:tensorflow.python.ops.gradients_impl.tensor_shape->_AccumulatorShape(out_grad)
A:tensorflow.python.ops.gradients_impl.running_sum->tensorflow.python.ops.math_ops.add_n([running_sum, grad])
A:tensorflow.python.ops.gradients_impl.out_grad->tensorflow.python.ops.math_ops._as_indexed_slices_list([g for g in out_grad if g is not None])
A:tensorflow.python.ops.gradients_impl.length->len(xs)
A:tensorflow.python.ops.gradients_impl.grads->gradients(ys, xs)
A:tensorflow.python.ops.gradients_impl._gradients->tensorflow.python.ops.array_ops.unstack(_gradients)
tensorflow.ops.gradients_impl.AggregationMethod(object)
tensorflow.ops.gradients_impl._AccumulatorShape(inputs)
tensorflow.ops.gradients_impl._AggregatedGrads(grads,op,loop_state,aggregation_method=None)
tensorflow.ops.gradients_impl._AsList(x)
tensorflow.ops.gradients_impl._DefaultGradYs(grad_ys,ys,colocate_gradients_with_ops)
tensorflow.ops.gradients_impl._GatherInputs(to_ops,reached_ops)
tensorflow.ops.gradients_impl._GetGrad(grads,t)
tensorflow.ops.gradients_impl._GetGrads(grads,op)
tensorflow.ops.gradients_impl._HandleNestedIndexedSlices(grad)
tensorflow.ops.gradients_impl._HasAnyNotNoneGrads(grads,op)
tensorflow.ops.gradients_impl._IndexedSlicesToTensor(value,dtype=None,name=None,as_ref=False)
tensorflow.ops.gradients_impl._IsTrainable(tensor)
tensorflow.ops.gradients_impl._LogOpGradients(op,out_grads,in_grads)
tensorflow.ops.gradients_impl._MarkReachedOps(from_ops,reached_ops)
tensorflow.ops.gradients_impl._MaybeCompile(scope,op,func,grad_fn)
tensorflow.ops.gradients_impl._MultiDeviceAddN(tensor_list)
tensorflow.ops.gradients_impl._PendingCount(graph,to_ops,from_ops,colocate_gradients_with_ops)
tensorflow.ops.gradients_impl._SetGrad(grads,t,grad)
tensorflow.ops.gradients_impl._StopOps(from_ops,pending_count)
tensorflow.ops.gradients_impl._SymGrad(op,out_grads)
tensorflow.ops.gradients_impl._UpdatePendingAndEnqueueReady(grads,op,queue,pending_count,loop_state)
tensorflow.ops.gradients_impl._VerifyGeneratedGradients(grads,op)
tensorflow.ops.gradients_impl._hessian_vector_product(ys,xs,v)
tensorflow.ops.gradients_impl._maybe_colocate_with(op,colocate_gradients_with_ops)
tensorflow.ops.gradients_impl.gradients(ys,xs,grad_ys=None,name='gradients',colocate_gradients_with_ops=False,gate_gradients=False,aggregation_method=None)
tensorflow.ops.gradients_impl.hessians(ys,xs,name='hessians',colocate_gradients_with_ops=False,gate_gradients=False,aggregation_method=None)
tensorflow.python.ops.gradients_impl.AggregationMethod(object)
tensorflow.python.ops.gradients_impl._AccumulatorShape(inputs)
tensorflow.python.ops.gradients_impl._AggregatedGrads(grads,op,loop_state,aggregation_method=None)
tensorflow.python.ops.gradients_impl._AsList(x)
tensorflow.python.ops.gradients_impl._DefaultGradYs(grad_ys,ys,colocate_gradients_with_ops)
tensorflow.python.ops.gradients_impl._GatherInputs(to_ops,reached_ops)
tensorflow.python.ops.gradients_impl._GetGrad(grads,t)
tensorflow.python.ops.gradients_impl._GetGrads(grads,op)
tensorflow.python.ops.gradients_impl._HandleNestedIndexedSlices(grad)
tensorflow.python.ops.gradients_impl._HasAnyNotNoneGrads(grads,op)
tensorflow.python.ops.gradients_impl._IndexedSlicesToTensor(value,dtype=None,name=None,as_ref=False)
tensorflow.python.ops.gradients_impl._IsTrainable(tensor)
tensorflow.python.ops.gradients_impl._LogOpGradients(op,out_grads,in_grads)
tensorflow.python.ops.gradients_impl._MarkReachedOps(from_ops,reached_ops)
tensorflow.python.ops.gradients_impl._MaybeCompile(scope,op,func,grad_fn)
tensorflow.python.ops.gradients_impl._MultiDeviceAddN(tensor_list)
tensorflow.python.ops.gradients_impl._PendingCount(graph,to_ops,from_ops,colocate_gradients_with_ops)
tensorflow.python.ops.gradients_impl._SetGrad(grads,t,grad)
tensorflow.python.ops.gradients_impl._StopOps(from_ops,pending_count)
tensorflow.python.ops.gradients_impl._SymGrad(op,out_grads)
tensorflow.python.ops.gradients_impl._UpdatePendingAndEnqueueReady(grads,op,queue,pending_count,loop_state)
tensorflow.python.ops.gradients_impl._VerifyGeneratedGradients(grads,op)
tensorflow.python.ops.gradients_impl._hessian_vector_product(ys,xs,v)
tensorflow.python.ops.gradients_impl._maybe_colocate_with(op,colocate_gradients_with_ops)
tensorflow.python.ops.gradients_impl.gradients(ys,xs,grad_ys=None,name='gradients',colocate_gradients_with_ops=False,gate_gradients=False,aggregation_method=None)
tensorflow.python.ops.gradients_impl.hessians(ys,xs,name='hessians',colocate_gradients_with_ops=False,gate_gradients=False,aggregation_method=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/standard_ops.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/resources.py----------------------------------------
A:tensorflow.python.ops.resources._Resource->collections.namedtuple('_Resource', ['handle', 'create', 'is_initialized'])
A:tensorflow.python.ops.resources.resource->_Resource(handle, create_op, is_initialized_op)
A:tensorflow.python.ops.resources.variables_mask->tensorflow.python.ops.math_ops.logical_not(array_ops.stack([r.is_initialized for r in resource_list]))
A:tensorflow.python.ops.resources.variable_names_tensor->tensorflow.python.ops.array_ops.constant([s.handle.name for s in resource_list])
tensorflow.ops.resources.initialize_resources(resource_list,name='init')
tensorflow.ops.resources.local_resources()
tensorflow.ops.resources.register_resource(handle,create_op,is_initialized_op,is_shared=True)
tensorflow.ops.resources.report_uninitialized_resources(resource_list=None,name='report_uninitialized_resources')
tensorflow.ops.resources.shared_resources()
tensorflow.python.ops.resources.initialize_resources(resource_list,name='init')
tensorflow.python.ops.resources.local_resources()
tensorflow.python.ops.resources.register_resource(handle,create_op,is_initialized_op,is_shared=True)
tensorflow.python.ops.resources.report_uninitialized_resources(resource_list=None,name='report_uninitialized_resources')
tensorflow.python.ops.resources.shared_resources()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/script_ops.py----------------------------------------
A:tensorflow.python.ops.script_ops.self._lock->threading.Lock()
A:tensorflow.python.ops.script_ops.token->FuncRegistry().insert(func)
A:tensorflow.python.ops.script_ops.result->tensorflow.python.ops.gen_script_ops._py_func_stateless(input=inp, token=token, Tout=Tout, name=name)
A:tensorflow.python.ops.script_ops.ret->func(*args)
A:tensorflow.python.ops.script_ops._py_funcs->FuncRegistry()
A:tensorflow.python.ops.script_ops.cleanup->CleanupFunc(token)
A:tensorflow.python.ops.script_ops.g->tensorflow.python.framework.ops.get_default_graph()
tensorflow.python.ops.script_ops.CleanupFunc(self,token)
tensorflow.python.ops.script_ops.CleanupFunc.__del__(self)
tensorflow.python.ops.script_ops.CleanupFunc.__init__(self,token)
tensorflow.python.ops.script_ops.FuncRegistry(self)
tensorflow.python.ops.script_ops.FuncRegistry.__init__(self)
tensorflow.python.ops.script_ops.FuncRegistry._convert(value)
tensorflow.python.ops.script_ops.FuncRegistry._next_unique_token(self)
tensorflow.python.ops.script_ops.FuncRegistry.insert(self,func)
tensorflow.python.ops.script_ops.FuncRegistry.remove(self,token)
tensorflow.python.ops.script_ops.FuncRegistry.size(self)
tensorflow.python.ops.script_ops.py_func(func,inp,Tout,stateful=True,name=None)
tensorflow.script_ops.CleanupFunc(self,token)
tensorflow.script_ops.CleanupFunc.__del__(self)
tensorflow.script_ops.FuncRegistry(self)
tensorflow.script_ops.FuncRegistry._convert(value)
tensorflow.script_ops.FuncRegistry._next_unique_token(self)
tensorflow.script_ops.FuncRegistry.insert(self,func)
tensorflow.script_ops.FuncRegistry.remove(self,token)
tensorflow.script_ops.FuncRegistry.size(self)
tensorflow.script_ops.py_func(func,inp,Tout,stateful=True,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/resource_variable_ops.py----------------------------------------
A:tensorflow.python.ops.resource_variable_ops.init_from_fn->callable(initial_value)
A:tensorflow.python.ops.resource_variable_ops.true_name->tensorflow.python.framework.ops._name_from_scope_name(name)
A:tensorflow.python.ops.resource_variable_ops.attr->tensorflow.core.framework.attr_value_pb2.AttrValue(list=attr_value_pb2.AttrValue.ListValue(s=[compat.as_bytes('loc:@%s' % true_name)]))
A:tensorflow.python.ops.resource_variable_ops.self._initial_value->tensorflow.python.framework.ops.convert_to_tensor(initial_value, name='initial_value', dtype=dtype)
A:tensorflow.python.ops.resource_variable_ops.self._handle->tensorflow.python.framework.ops.get_default_graph().as_graph_element(ops.prepend_name_scope(variable_def.variable_name, import_scope=import_scope))
A:tensorflow.python.ops.resource_variable_ops.self._is_initialized_op->tensorflow.python.ops.gen_resource_variable_ops.var_is_initialized_op(self._handle)
A:tensorflow.python.ops.resource_variable_ops.self._initialize_op->tensorflow.python.framework.ops.get_default_graph().as_graph_element(ops.prepend_name_scope(variable_def.initializer_name, import_scope=import_scope))
A:tensorflow.python.ops.resource_variable_ops.value->tensorflow.python.ops.gen_resource_variable_ops.resource_gather(self._handle, indices, dtype=self._dtype, name=name)
A:tensorflow.python.ops.resource_variable_ops.self._cached_value->tensorflow.python.framework.ops.get_default_graph().as_graph_element(ops.prepend_name_scope(variable_def.snapshot_name, import_scope=import_scope))
A:tensorflow.python.ops.resource_variable_ops.g->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.ops.resource_variable_ops.self._save_slice_info->tensorflow.python.ops.variables.Variable.SaveSliceInfo(save_slice_info_def=variable_def.save_slice_info_def)
A:tensorflow.python.ops.resource_variable_ops.self._dtype->self._handle.op.get_attr('dtype')
A:tensorflow.python.ops.resource_variable_ops.var_def->tensorflow.core.framework.variable_pb2.VariableDef()
A:tensorflow.python.ops.resource_variable_ops.var_def.variable_name->tensorflow.python.framework.ops.strip_name_scope(self.handle.name, export_scope)
A:tensorflow.python.ops.resource_variable_ops.var_def.initializer_name->tensorflow.python.framework.ops.strip_name_scope(self.initializer.name, export_scope)
A:tensorflow.python.ops.resource_variable_ops.var_def.snapshot_name->tensorflow.python.framework.ops.strip_name_scope(self._cached_value.name, export_scope)
A:tensorflow.python.ops.resource_variable_ops.params_shape->tensorflow.python.framework.ops.convert_to_tensor(tensor_shape.TensorShape(handle.op.get_attr('shape')))
A:tensorflow.python.ops.resource_variable_ops.size->tensorflow.python.ops.array_ops.expand_dims(array_ops.size(indices), 0)
A:tensorflow.python.ops.resource_variable_ops.values_shape->tensorflow.python.ops.array_ops.concat([size, params_shape[1:]], 0)
A:tensorflow.python.ops.resource_variable_ops.values->tensorflow.python.ops.array_ops.reshape(grad, values_shape)
A:tensorflow.python.ops.resource_variable_ops.indices->tensorflow.python.ops.array_ops.reshape(indices, size)
tensorflow.ops.resource_variable_ops.ResourceVariable(self,initial_value=None,trainable=True,collections=None,validate_shape=True,caching_device=None,name=None,dtype=None,variable_def=None,import_scope=None)
tensorflow.ops.resource_variable_ops.ResourceVariable._AsTensor(self)
tensorflow.ops.resource_variable_ops.ResourceVariable._OverloadAllOperators()
tensorflow.ops.resource_variable_ops.ResourceVariable._OverloadOperator(operator)
tensorflow.ops.resource_variable_ops.ResourceVariable._as_graph_element(self)
tensorflow.ops.resource_variable_ops.ResourceVariable._get_save_slice_info(self)
tensorflow.ops.resource_variable_ops.ResourceVariable._init_from_args(self,initial_value=None,trainable=True,collections=None,validate_shape=True,caching_device=None,name=None,dtype=None)
tensorflow.ops.resource_variable_ops.ResourceVariable._init_from_proto(self,variable_def,import_scope=None)
tensorflow.ops.resource_variable_ops.ResourceVariable._set_save_slice_info(self,save_slice_info)
tensorflow.ops.resource_variable_ops.ResourceVariable.assign(self,value,use_locking=None,name=None)
tensorflow.ops.resource_variable_ops.ResourceVariable.assign_add(self,delta,use_locking=None,name=None)
tensorflow.ops.resource_variable_ops.ResourceVariable.assign_sub(self,delta,use_locking=None,name=None)
tensorflow.ops.resource_variable_ops.ResourceVariable.create(self)
tensorflow.ops.resource_variable_ops.ResourceVariable.device(self)
tensorflow.ops.resource_variable_ops.ResourceVariable.dtype(self)
tensorflow.ops.resource_variable_ops.ResourceVariable.eval(self,session=None)
tensorflow.ops.resource_variable_ops.ResourceVariable.from_proto(variable_def,import_scope=None)
tensorflow.ops.resource_variable_ops.ResourceVariable.get_shape(self)
tensorflow.ops.resource_variable_ops.ResourceVariable.handle(self)
tensorflow.ops.resource_variable_ops.ResourceVariable.initializer(self)
tensorflow.ops.resource_variable_ops.ResourceVariable.name(self)
tensorflow.ops.resource_variable_ops.ResourceVariable.op(self)
tensorflow.ops.resource_variable_ops.ResourceVariable.read_value(self)
tensorflow.ops.resource_variable_ops.ResourceVariable.sparse_read(self,indices,name=None)
tensorflow.ops.resource_variable_ops.ResourceVariable.to_proto(self,export_scope=None)
tensorflow.ops.resource_variable_ops.ResourceVariable.value(self)
tensorflow.ops.resource_variable_ops._GatherGrad(op,grad)
tensorflow.ops.resource_variable_ops._ReadGrad(_,grad)
tensorflow.ops.resource_variable_ops._dense_var_to_tensor(var,dtype=None,name=None,as_ref=False)
tensorflow.ops.resource_variable_ops._from_proto_fn(v,import_scope=None)
tensorflow.ops.resource_variable_ops._to_proto_fn(v,export_scope=None)
tensorflow.python.ops.resource_variable_ops.ResourceVariable(self,initial_value=None,trainable=True,collections=None,validate_shape=True,caching_device=None,name=None,dtype=None,variable_def=None,import_scope=None)
tensorflow.python.ops.resource_variable_ops.ResourceVariable._AsTensor(self)
tensorflow.python.ops.resource_variable_ops.ResourceVariable._OverloadAllOperators()
tensorflow.python.ops.resource_variable_ops.ResourceVariable._OverloadOperator(operator)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.__init__(self,initial_value=None,trainable=True,collections=None,validate_shape=True,caching_device=None,name=None,dtype=None,variable_def=None,import_scope=None)
tensorflow.python.ops.resource_variable_ops.ResourceVariable._as_graph_element(self)
tensorflow.python.ops.resource_variable_ops.ResourceVariable._get_save_slice_info(self)
tensorflow.python.ops.resource_variable_ops.ResourceVariable._init_from_args(self,initial_value=None,trainable=True,collections=None,validate_shape=True,caching_device=None,name=None,dtype=None)
tensorflow.python.ops.resource_variable_ops.ResourceVariable._init_from_proto(self,variable_def,import_scope=None)
tensorflow.python.ops.resource_variable_ops.ResourceVariable._set_save_slice_info(self,save_slice_info)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.assign(self,value,use_locking=None,name=None)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.assign_add(self,delta,use_locking=None,name=None)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.assign_sub(self,delta,use_locking=None,name=None)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.create(self)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.device(self)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.dtype(self)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.eval(self,session=None)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.from_proto(variable_def,import_scope=None)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.get_shape(self)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.handle(self)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.initializer(self)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.name(self)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.op(self)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.read_value(self)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.sparse_read(self,indices,name=None)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.to_proto(self,export_scope=None)
tensorflow.python.ops.resource_variable_ops.ResourceVariable.value(self)
tensorflow.python.ops.resource_variable_ops._GatherGrad(op,grad)
tensorflow.python.ops.resource_variable_ops._ReadGrad(_,grad)
tensorflow.python.ops.resource_variable_ops._dense_var_to_tensor(var,dtype=None,name=None,as_ref=False)
tensorflow.python.ops.resource_variable_ops._from_proto_fn(v,import_scope=None)
tensorflow.python.ops.resource_variable_ops._to_proto_fn(v,export_scope=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_set_ops.py----------------------------------------
A:tensorflow.python.ops.gen_set_ops._DenseToDenseSetOperationOutput->collections.namedtuple('DenseToDenseSetOperation', _dense_to_dense_set_operation_outputs)
A:tensorflow.python.ops.gen_set_ops.result->_InitOpDefLibrary().apply_op('SparseToSparseSetOperation', set1_indices=set1_indices, set1_values=set1_values, set1_shape=set1_shape, set2_indices=set2_indices, set2_values=set2_values, set2_shape=set2_shape, set_operation=set_operation, validate_indices=validate_indices, name=name)
A:tensorflow.python.ops.gen_set_ops._DenseToSparseSetOperationOutput->collections.namedtuple('DenseToSparseSetOperation', _dense_to_sparse_set_operation_outputs)
A:tensorflow.python.ops.gen_set_ops._SparseToSparseSetOperationOutput->collections.namedtuple('SparseToSparseSetOperation', _sparse_to_sparse_set_operation_outputs)
A:tensorflow.python.ops.gen_set_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_set_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_set_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_set_ops._InitOpDefLibrary()
tensorflow.ops.gen_set_ops.dense_to_dense_set_operation(set1,set2,set_operation,validate_indices=None,name=None)
tensorflow.ops.gen_set_ops.dense_to_sparse_set_operation(set1,set2_indices,set2_values,set2_shape,set_operation,validate_indices=None,name=None)
tensorflow.ops.gen_set_ops.set_size(set_indices,set_values,set_shape,validate_indices=None,name=None)
tensorflow.ops.gen_set_ops.sparse_to_sparse_set_operation(set1_indices,set1_values,set1_shape,set2_indices,set2_values,set2_shape,set_operation,validate_indices=None,name=None)
tensorflow.python.ops.gen_set_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_set_ops.dense_to_dense_set_operation(set1,set2,set_operation,validate_indices=None,name=None)
tensorflow.python.ops.gen_set_ops.dense_to_sparse_set_operation(set1,set2_indices,set2_values,set2_shape,set_operation,validate_indices=None,name=None)
tensorflow.python.ops.gen_set_ops.set_size(set_indices,set_values,set_shape,validate_indices=None,name=None)
tensorflow.python.ops.gen_set_ops.sparse_to_sparse_set_operation(set1_indices,set1_values,set1_shape,set2_indices,set2_values,set2_shape,set_operation,validate_indices=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/nn_impl.py----------------------------------------
A:tensorflow.python.ops.nn_impl.log_input->tensorflow.python.framework.ops.convert_to_tensor(log_input, name='log_input')
A:tensorflow.python.ops.nn_impl.targets->tensorflow.python.framework.ops.convert_to_tensor(targets, name='targets')
A:tensorflow.python.ops.nn_impl.point_five->tensorflow.python.framework.constant_op.constant(0.5, dtype=targets.dtype)
A:tensorflow.python.ops.nn_impl.two_pi->tensorflow.python.framework.constant_op.constant(2 * math.pi, dtype=targets.dtype)
A:tensorflow.python.ops.nn_impl.zeros->tensorflow.python.ops.array_ops.zeros_like(logits, dtype=logits.dtype)
A:tensorflow.python.ops.nn_impl.ones->tensorflow.python.ops.array_ops.ones(ones_shape, x.dtype)
A:tensorflow.python.ops.nn_impl.cond->tensorflow.python.ops.math_ops.logical_and(targets >= zeros, targets <= ones)
A:tensorflow.python.ops.nn_impl.logits->tensorflow.python.framework.ops.convert_to_tensor(logits, name='logits')
A:tensorflow.python.ops.nn_impl.labels->tensorflow.python.ops.math_ops.cast(labels, dtypes.int64)
A:tensorflow.python.ops.nn_impl.relu_logits->tensorflow.python.ops.array_ops.where(cond, logits, zeros)
A:tensorflow.python.ops.nn_impl.neg_abs_logits->tensorflow.python.ops.array_ops.where(cond, -logits, logits)
A:tensorflow.python.ops.nn_impl.x->tensorflow.python.framework.ops.convert_to_tensor(x, name='input')
A:tensorflow.python.ops.nn_impl.weights->list(weights)
A:tensorflow.python.ops.nn_impl.biases->tensorflow.python.framework.ops.convert_to_tensor(biases, name='biases')
A:tensorflow.python.ops.nn_impl.xw_plus_b->tensorflow.python.ops.nn_ops.bias_add(math_ops.matmul(x, weights), biases)
A:tensorflow.python.ops.nn_impl.square_sum->tensorflow.python.ops.math_ops.reduce_sum(math_ops.square(x), dim, keep_dims=True)
A:tensorflow.python.ops.nn_impl.x_inv_norm->tensorflow.python.ops.math_ops.rsqrt(math_ops.maximum(square_sum, epsilon))
A:tensorflow.python.ops.nn_impl.value->tensorflow.python.framework.ops.convert_to_tensor(value, name='value')
A:tensorflow.python.ops.nn_impl.zero->tensorflow.python.framework.constant_op.constant(0, dtype=value.dtype, name='zero')
A:tensorflow.python.ops.nn_impl.input->tensorflow.python.framework.ops.convert_to_tensor(input, name='tensor_in')
A:tensorflow.python.ops.nn_impl.filter->tensorflow.python.framework.ops.convert_to_tensor(filter, name='filter_in')
A:tensorflow.python.ops.nn_impl.depthwise_filter->tensorflow.python.framework.ops.convert_to_tensor(depthwise_filter, name='depthwise_filter')
A:tensorflow.python.ops.nn_impl.pointwise_filter->tensorflow.python.framework.ops.convert_to_tensor(pointwise_filter, name='pointwise_filter')
A:tensorflow.python.ops.nn_impl.pointwise_filter_shape->tensorflow.python.framework.ops.convert_to_tensor(pointwise_filter, name='pointwise_filter').get_shape().with_rank(4)
A:tensorflow.python.ops.nn_impl.depthwise->tensorflow.python.ops.nn_ops.with_space_to_batch(input=input, filter_shape=array_ops.shape(depthwise_filter), dilation_rate=rate, padding=padding, data_format=data_format, op=op)
A:tensorflow.python.ops.nn_impl.axes->list(set(axes))
A:tensorflow.python.ops.nn_impl.x_shape->tensorflow.python.framework.ops.convert_to_tensor(x, name='input').get_shape()
A:tensorflow.python.ops.nn_impl.counts->tensorflow.python.ops.math_ops.reduce_prod(x_dims, name='count')
A:tensorflow.python.ops.nn_impl.x_dims->tensorflow.python.ops.array_ops.gather(math_ops.cast(array_ops.shape(x), x.dtype), axes)
A:tensorflow.python.ops.nn_impl.shift->tensorflow.python.ops.array_ops.reshape(shift, array_ops.shape(m_ss))
A:tensorflow.python.ops.nn_impl.m_ss->tensorflow.python.ops.math_ops.reduce_sum(m_ss, axes, keep_dims=keep_dims, name='mean_ss')
A:tensorflow.python.ops.nn_impl.v_ss->tensorflow.python.ops.math_ops.reduce_sum(v_ss, axes, keep_dims=keep_dims, name='var_ss')
A:tensorflow.python.ops.nn_impl.divisor->tensorflow.python.ops.math_ops.reciprocal(sum_of_weights, name='inv_weight_sum')
A:tensorflow.python.ops.nn_impl.shifted_mean->tensorflow.python.ops.math_ops.multiply(mean_ss, divisor, name='mean')
A:tensorflow.python.ops.nn_impl.mean->tensorflow.python.framework.constant_op.constant([])
A:tensorflow.python.ops.nn_impl.variance->tensorflow.python.framework.constant_op.constant([])
A:tensorflow.python.ops.nn_impl.(counts, m_ss, v_ss, shift)->sufficient_statistics(y, axes, shift=shift, keep_dims=keep_dims, name=name)
A:tensorflow.python.ops.nn_impl.(mean, variance)->normalize_moments(counts, m_ss, v_ss, shift, name=name)
A:tensorflow.python.ops.nn_impl.frequency_weights->tensorflow.python.ops.math_ops.cast(frequency_weights, x.dtype)
A:tensorflow.python.ops.nn_impl.weighted_input_sum->tensorflow.python.ops.math_ops.reduce_sum(frequency_weights * x, axes, name='weighted_input_sum', keep_dims=True)
A:tensorflow.python.ops.nn_impl.sum_of_weights->tensorflow.python.ops.math_ops.reduce_sum(broadcasted_weights, axes, name='sum_of_weights', keep_dims=True)
A:tensorflow.python.ops.nn_impl.weighted_mean->tensorflow.python.ops.math_ops.cast(weighted_mean, dtypes.float16)
A:tensorflow.python.ops.nn_impl.weighted_distsq->tensorflow.python.ops.math_ops.reduce_sum(frequency_weights * math_ops.squared_difference(x, weighted_mean), axes, name='weighted_distsq', keep_dims=True)
A:tensorflow.python.ops.nn_impl.weighted_variance->tensorflow.python.ops.math_ops.cast(weighted_variance, dtypes.float16)
A:tensorflow.python.ops.nn_impl.inv->tensorflow.python.ops.math_ops.rsqrt(variance + variance_epsilon)
A:tensorflow.python.ops.nn_impl.scale->tensorflow.python.framework.ops.convert_to_tensor(scale, name='scale')
A:tensorflow.python.ops.nn_impl.offset->tensorflow.python.framework.ops.convert_to_tensor(offset, name='offset')
A:tensorflow.python.ops.nn_impl.(y, batch_mean, batch_var, _, _)->tensorflow.python.ops.gen_nn_ops._fused_batch_norm(x, scale, offset, mean, variance, epsilon=epsilon, data_format=data_format, is_training=is_training, name=name)
A:tensorflow.python.ops.nn_impl.ones_shape->tensorflow.python.ops.array_ops.stack([cols, 1])
A:tensorflow.python.ops.nn_impl.labels_flat->tensorflow.python.ops.array_ops.reshape(labels, [-1])
A:tensorflow.python.ops.nn_impl.sampled_values->tensorflow.python.ops.candidate_sampling_ops.log_uniform_candidate_sampler(true_classes=labels, num_true=num_true, num_sampled=num_sampled, unique=True, range_max=num_classes)
A:tensorflow.python.ops.nn_impl.sampled->tensorflow.python.ops.math_ops.cast(sampled, dtypes.int64)
A:tensorflow.python.ops.nn_impl.all_ids->tensorflow.python.ops.array_ops.concat([labels_flat, sampled], 0)
A:tensorflow.python.ops.nn_impl.all_w->tensorflow.python.ops.embedding_ops.embedding_lookup(weights, all_ids, partition_strategy=partition_strategy)
A:tensorflow.python.ops.nn_impl.all_b->tensorflow.python.ops.embedding_ops.embedding_lookup(biases, all_ids)
A:tensorflow.python.ops.nn_impl.true_w->tensorflow.python.ops.array_ops.slice(all_w, [0, 0], array_ops.stack([array_ops.shape(labels_flat)[0], -1]))
A:tensorflow.python.ops.nn_impl.true_b->tensorflow.python.ops.array_ops.reshape(true_b, [-1, num_true])
A:tensorflow.python.ops.nn_impl.new_true_w_shape->tensorflow.python.ops.array_ops.concat([[-1, num_true], dim], 0)
A:tensorflow.python.ops.nn_impl.row_wise_dots->tensorflow.python.ops.math_ops.multiply(array_ops.expand_dims(inputs, 1), array_ops.reshape(true_w, new_true_w_shape))
A:tensorflow.python.ops.nn_impl.dots_as_matrix->tensorflow.python.ops.array_ops.reshape(row_wise_dots, array_ops.concat([[-1], dim], 0))
A:tensorflow.python.ops.nn_impl.true_logits->tensorflow.python.ops.array_ops.reshape(_sum_rows(dots_as_matrix), [-1, num_true])
A:tensorflow.python.ops.nn_impl.sampled_w->tensorflow.python.ops.array_ops.slice(all_w, array_ops.stack([array_ops.shape(labels_flat)[0], 0]), [-1, -1])
A:tensorflow.python.ops.nn_impl.sampled_b->tensorflow.python.ops.array_ops.slice(all_b, array_ops.shape(labels_flat), [-1])
A:tensorflow.python.ops.nn_impl.acc_hits->tensorflow.python.ops.candidate_sampling_ops.compute_accidental_hits(labels, sampled, num_true=num_true)
A:tensorflow.python.ops.nn_impl.acc_indices_2d->tensorflow.python.ops.array_ops.reshape(acc_indices, [-1, 1])
A:tensorflow.python.ops.nn_impl.acc_ids_2d_int32->tensorflow.python.ops.array_ops.reshape(math_ops.cast(acc_ids, dtypes.int32), [-1, 1])
A:tensorflow.python.ops.nn_impl.sparse_indices->tensorflow.python.ops.array_ops.concat([acc_indices_2d, acc_ids_2d_int32], 1, 'sparse_indices')
A:tensorflow.python.ops.nn_impl.sampled_logits_shape->tensorflow.python.ops.array_ops.concat([array_ops.shape(labels)[:1], array_ops.expand_dims(num_sampled, 0)], 0)
A:tensorflow.python.ops.nn_impl.acc_weights->tensorflow.python.ops.math_ops.cast(acc_weights, sampled_logits.dtype)
A:tensorflow.python.ops.nn_impl.out_logits->tensorflow.python.ops.array_ops.concat([true_logits, sampled_logits], 1)
A:tensorflow.python.ops.nn_impl.out_labels->tensorflow.python.ops.array_ops.concat([array_ops.ones_like(true_logits) / num_true, array_ops.zeros_like(sampled_logits)], 1)
A:tensorflow.python.ops.nn_impl.(logits, labels)->_compute_sampled_logits(weights=weights, biases=biases, labels=labels, inputs=inputs, num_sampled=num_sampled, num_classes=num_classes, num_true=num_true, sampled_values=sampled_values, subtract_log_q=True, remove_accidental_hits=remove_accidental_hits, partition_strategy=partition_strategy, name=name)
A:tensorflow.python.ops.nn_impl.sampled_losses->tensorflow.python.ops.nn_ops.softmax_cross_entropy_with_logits(labels=labels, logits=logits)
tensorflow.nn_impl._compute_sampled_logits(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,subtract_log_q=True,remove_accidental_hits=False,partition_strategy='mod',name=None)
tensorflow.nn_impl._sum_rows(x)
tensorflow.nn_impl.batch_norm_with_global_normalization(t,m,v,beta,gamma,variance_epsilon,scale_after_normalization,name=None)
tensorflow.nn_impl.batch_normalization(x,mean,variance,offset,scale,variance_epsilon,name=None)
tensorflow.nn_impl.depthwise_conv2d(input,filter,strides,padding,rate=None,name=None,data_format=None)
tensorflow.nn_impl.fused_batch_norm(x,scale,offset,mean=None,variance=None,epsilon=0.001,data_format='NHWC',is_training=True,name=None)
tensorflow.nn_impl.l2_normalize(x,dim,epsilon=1e-12,name=None)
tensorflow.nn_impl.log_poisson_loss(targets,log_input,compute_full_loss=False,name=None)
tensorflow.nn_impl.moments(x,axes,shift=None,name=None,keep_dims=False)
tensorflow.nn_impl.nce_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=False,partition_strategy='mod',name='nce_loss')
tensorflow.nn_impl.normalize_moments(counts,mean_ss,variance_ss,shift,name=None)
tensorflow.nn_impl.relu_layer(x,weights,biases,name=None)
tensorflow.nn_impl.sampled_softmax_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=True,partition_strategy='mod',name='sampled_softmax_loss')
tensorflow.nn_impl.separable_conv2d(input,depthwise_filter,pointwise_filter,strides,padding,rate=None,name=None,data_format=None)
tensorflow.nn_impl.sigmoid_cross_entropy_with_logits(_sentinel=None,labels=None,logits=None,name=None)
tensorflow.nn_impl.sufficient_statistics(x,axes,shift=None,keep_dims=False,name=None)
tensorflow.nn_impl.weighted_cross_entropy_with_logits(targets,logits,pos_weight,name=None)
tensorflow.nn_impl.weighted_moments(x,axes,frequency_weights,name=None,keep_dims=False)
tensorflow.nn_impl.zero_fraction(value,name=None)
tensorflow.python.ops.nn_impl._compute_sampled_logits(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,subtract_log_q=True,remove_accidental_hits=False,partition_strategy='mod',name=None)
tensorflow.python.ops.nn_impl._sum_rows(x)
tensorflow.python.ops.nn_impl.batch_norm_with_global_normalization(t,m,v,beta,gamma,variance_epsilon,scale_after_normalization,name=None)
tensorflow.python.ops.nn_impl.batch_normalization(x,mean,variance,offset,scale,variance_epsilon,name=None)
tensorflow.python.ops.nn_impl.depthwise_conv2d(input,filter,strides,padding,rate=None,name=None,data_format=None)
tensorflow.python.ops.nn_impl.fused_batch_norm(x,scale,offset,mean=None,variance=None,epsilon=0.001,data_format='NHWC',is_training=True,name=None)
tensorflow.python.ops.nn_impl.l2_normalize(x,dim,epsilon=1e-12,name=None)
tensorflow.python.ops.nn_impl.log_poisson_loss(targets,log_input,compute_full_loss=False,name=None)
tensorflow.python.ops.nn_impl.moments(x,axes,shift=None,name=None,keep_dims=False)
tensorflow.python.ops.nn_impl.nce_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=False,partition_strategy='mod',name='nce_loss')
tensorflow.python.ops.nn_impl.normalize_moments(counts,mean_ss,variance_ss,shift,name=None)
tensorflow.python.ops.nn_impl.relu_layer(x,weights,biases,name=None)
tensorflow.python.ops.nn_impl.sampled_softmax_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=True,partition_strategy='mod',name='sampled_softmax_loss')
tensorflow.python.ops.nn_impl.separable_conv2d(input,depthwise_filter,pointwise_filter,strides,padding,rate=None,name=None,data_format=None)
tensorflow.python.ops.nn_impl.sigmoid_cross_entropy_with_logits(_sentinel=None,labels=None,logits=None,name=None)
tensorflow.python.ops.nn_impl.sufficient_statistics(x,axes,shift=None,keep_dims=False,name=None)
tensorflow.python.ops.nn_impl.weighted_cross_entropy_with_logits(targets,logits,pos_weight,name=None)
tensorflow.python.ops.nn_impl.weighted_moments(x,axes,frequency_weights,name=None,keep_dims=False)
tensorflow.python.ops.nn_impl.zero_fraction(value,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/control_flow_grad.py----------------------------------------
A:tensorflow.python.ops.control_flow_grad.graph->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.ops.control_flow_grad.op_ctxt->tensorflow.python.ops.control_flow_ops._GetOutputContext(input_op)
A:tensorflow.python.ops.control_flow_grad.grad_ctxt->tensorflow.python.framework.ops.get_default_graph()._get_control_flow_context()
A:tensorflow.python.ops.control_flow_grad.merge_grad->tensorflow.python.framework.ops.get_default_graph()._get_control_flow_context().grad_state.switch_map.get(op)
A:tensorflow.python.ops.control_flow_grad.real_pred->grad_state.AddBackPropAccumulatedValue(history_pred, pred)
A:tensorflow.python.ops.control_flow_grad.history_pred->grad_state.AddForwardAccumulator(pred)
A:tensorflow.python.ops.control_flow_grad.num_inputs->len(op.inputs)
A:tensorflow.python.ops.control_flow_grad.result->exit(grad)
tensorflow.ops.control_flow_grad._EnterGrad(op,grad)
tensorflow.ops.control_flow_grad._ExitGrad(op,grad)
tensorflow.ops.control_flow_grad._LoopCondGrad(_)
tensorflow.ops.control_flow_grad._MergeGrad(op,grad,_)
tensorflow.ops.control_flow_grad._NextIterationGrad(_,grad)
tensorflow.ops.control_flow_grad._RefEnterGrad(op,grad)
tensorflow.ops.control_flow_grad._RefMergeGrad(op,grad,_)
tensorflow.ops.control_flow_grad._RefNextIterationGrad(_,grad)
tensorflow.ops.control_flow_grad._SwitchGrad(op,*grad)
tensorflow.python.ops.control_flow_grad._EnterGrad(op,grad)
tensorflow.python.ops.control_flow_grad._ExitGrad(op,grad)
tensorflow.python.ops.control_flow_grad._LoopCondGrad(_)
tensorflow.python.ops.control_flow_grad._MergeGrad(op,grad,_)
tensorflow.python.ops.control_flow_grad._NextIterationGrad(_,grad)
tensorflow.python.ops.control_flow_grad._RefEnterGrad(op,grad)
tensorflow.python.ops.control_flow_grad._RefMergeGrad(op,grad,_)
tensorflow.python.ops.control_flow_grad._RefNextIterationGrad(_,grad)
tensorflow.python.ops.control_flow_grad._SwitchGrad(op,*grad)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/init_ops.py----------------------------------------
A:tensorflow.python.ops.init_ops.self.dtype->_assert_float_dtype(dtype)
A:tensorflow.python.ops.init_ops.input_size->max(input_size, 1.0)
A:tensorflow.python.ops.init_ops.distribution->distribution.lower().lower()
A:tensorflow.python.ops.init_ops.(fan_in, fan_out)->_compute_fans(scale_shape)
A:tensorflow.python.ops.init_ops.stddev->math.sqrt(scale)
A:tensorflow.python.ops.init_ops.limit->math.sqrt(3.0 * scale)
A:tensorflow.python.ops.init_ops.a->tensorflow.python.ops.random_ops.random_uniform(flat_shape, dtype=dtype, seed=self.seed)
A:tensorflow.python.ops.init_ops.(_, u, v)->tensorflow.python.ops.linalg_ops.svd(a, full_matrices=False)
A:tensorflow.python.ops.init_ops.q->tensorflow.python.ops.array_ops.transpose(v)
tensorflow.ops.init_ops.Constant(self,value=0,dtype=dtypes.float32,verify_shape=False)
tensorflow.ops.init_ops.Initializer(self,shape,dtype=None,partition_info=None)
tensorflow.ops.init_ops.Ones(self,dtype=dtypes.float32)
tensorflow.ops.init_ops.Orthogonal(self,gain=1.0,dtype=dtypes.float32,seed=None)
tensorflow.ops.init_ops.RandomNormal(self,mean=0.0,stddev=1.0,seed=None,dtype=dtypes.float32)
tensorflow.ops.init_ops.RandomUniform(self,minval=0,maxval=None,seed=None,dtype=dtypes.float32)
tensorflow.ops.init_ops.TruncatedNormal(self,mean=0.0,stddev=1.0,seed=None,dtype=dtypes.float32)
tensorflow.ops.init_ops.UniformUnitScaling(self,factor=1.0,seed=None,dtype=dtypes.float32)
tensorflow.ops.init_ops.VarianceScaling(self,scale=1.0,mode='fan_in',distribution='normal',seed=None,dtype=dtypes.float32)
tensorflow.ops.init_ops.Zeros(self,dtype=dtypes.float32)
tensorflow.ops.init_ops._assert_float_dtype(dtype)
tensorflow.ops.init_ops._compute_fans(shape)
tensorflow.ops.init_ops.glorot_normal_initializer(seed=None,dtype=dtypes.float32)
tensorflow.ops.init_ops.glorot_uniform_initializer(seed=None,dtype=dtypes.float32)
tensorflow.python.ops.init_ops.Constant(self,value=0,dtype=dtypes.float32,verify_shape=False)
tensorflow.python.ops.init_ops.Constant.__init__(self,value=0,dtype=dtypes.float32,verify_shape=False)
tensorflow.python.ops.init_ops.Initializer(self,shape,dtype=None,partition_info=None)
tensorflow.python.ops.init_ops.Initializer.__call__(self,shape,dtype=None,partition_info=None)
tensorflow.python.ops.init_ops.Ones(self,dtype=dtypes.float32)
tensorflow.python.ops.init_ops.Ones.__init__(self,dtype=dtypes.float32)
tensorflow.python.ops.init_ops.Orthogonal(self,gain=1.0,dtype=dtypes.float32,seed=None)
tensorflow.python.ops.init_ops.Orthogonal.__init__(self,gain=1.0,dtype=dtypes.float32,seed=None)
tensorflow.python.ops.init_ops.RandomNormal(self,mean=0.0,stddev=1.0,seed=None,dtype=dtypes.float32)
tensorflow.python.ops.init_ops.RandomNormal.__init__(self,mean=0.0,stddev=1.0,seed=None,dtype=dtypes.float32)
tensorflow.python.ops.init_ops.RandomUniform(self,minval=0,maxval=None,seed=None,dtype=dtypes.float32)
tensorflow.python.ops.init_ops.RandomUniform.__init__(self,minval=0,maxval=None,seed=None,dtype=dtypes.float32)
tensorflow.python.ops.init_ops.TruncatedNormal(self,mean=0.0,stddev=1.0,seed=None,dtype=dtypes.float32)
tensorflow.python.ops.init_ops.TruncatedNormal.__init__(self,mean=0.0,stddev=1.0,seed=None,dtype=dtypes.float32)
tensorflow.python.ops.init_ops.UniformUnitScaling(self,factor=1.0,seed=None,dtype=dtypes.float32)
tensorflow.python.ops.init_ops.UniformUnitScaling.__init__(self,factor=1.0,seed=None,dtype=dtypes.float32)
tensorflow.python.ops.init_ops.VarianceScaling(self,scale=1.0,mode='fan_in',distribution='normal',seed=None,dtype=dtypes.float32)
tensorflow.python.ops.init_ops.VarianceScaling.__init__(self,scale=1.0,mode='fan_in',distribution='normal',seed=None,dtype=dtypes.float32)
tensorflow.python.ops.init_ops.Zeros(self,dtype=dtypes.float32)
tensorflow.python.ops.init_ops.Zeros.__init__(self,dtype=dtypes.float32)
tensorflow.python.ops.init_ops._assert_float_dtype(dtype)
tensorflow.python.ops.init_ops._compute_fans(shape)
tensorflow.python.ops.init_ops.glorot_normal_initializer(seed=None,dtype=dtypes.float32)
tensorflow.python.ops.init_ops.glorot_uniform_initializer(seed=None,dtype=dtypes.float32)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_array_ops.py----------------------------------------
A:tensorflow.python.ops.gen_array_ops.result->_InitOpDefLibrary().apply_op('ZerosLike', x=x, name=name)
A:tensorflow.python.ops.gen_array_ops._BroadcastGradientArgsOutput->collections.namedtuple('BroadcastGradientArgs', __broadcast_gradient_args_outputs)
A:tensorflow.python.ops.gen_array_ops._FakeQuantWithMinMaxVarsGradientOutput->collections.namedtuple('FakeQuantWithMinMaxVarsGradient', _fake_quant_with_min_max_vars_gradient_outputs)
A:tensorflow.python.ops.gen_array_ops._FakeQuantWithMinMaxVarsPerChannelGradientOutput->collections.namedtuple('FakeQuantWithMinMaxVarsPerChannelGradient', _fake_quant_with_min_max_vars_per_channel_gradient_outputs)
A:tensorflow.python.ops.gen_array_ops._ListDiffOutput->collections.namedtuple('ListDiff', __list_diff_outputs)
A:tensorflow.python.ops.gen_array_ops._QuantizeV2Output->collections.namedtuple('QuantizeV2', _quantize_v2_outputs)
A:tensorflow.python.ops.gen_array_ops._QuantizedConcatOutput->collections.namedtuple('QuantizedConcat', _quantized_concat_outputs)
A:tensorflow.python.ops.gen_array_ops._QuantizedInstanceNormOutput->collections.namedtuple('QuantizedInstanceNorm', _quantized_instance_norm_outputs)
A:tensorflow.python.ops.gen_array_ops._QuantizedReshapeOutput->collections.namedtuple('QuantizedReshape', _quantized_reshape_outputs)
A:tensorflow.python.ops.gen_array_ops._UniqueOutput->collections.namedtuple('Unique', _unique_outputs)
A:tensorflow.python.ops.gen_array_ops._UniqueWithCountsOutput->collections.namedtuple('UniqueWithCounts', _unique_with_counts_outputs)
A:tensorflow.python.ops.gen_array_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_array_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_array_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_array_ops._InitOpDefLibrary()
tensorflow.ops.gen_array_ops._batch_to_space(input,crops,block_size,name=None)
tensorflow.ops.gen_array_ops._broadcast_args(s0,s1,name=None)
tensorflow.ops.gen_array_ops._broadcast_gradient_args(s0,s1,name=None)
tensorflow.ops.gen_array_ops._concat(concat_dim,values,name=None)
tensorflow.ops.gen_array_ops._concat_offset(concat_dim,shape,name=None)
tensorflow.ops.gen_array_ops._concat_v2(values,axis,name=None)
tensorflow.ops.gen_array_ops._const(value,dtype,name=None)
tensorflow.ops.gen_array_ops._edit_distance(hypothesis_indices,hypothesis_values,hypothesis_shape,truth_indices,truth_values,truth_shape,normalize=None,name=None)
tensorflow.ops.gen_array_ops._expand_dims(input,dim,name=None)
tensorflow.ops.gen_array_ops._list_diff(x,y,out_idx=None,name=None)
tensorflow.ops.gen_array_ops._mirror_pad(input,paddings,mode,name=None)
tensorflow.ops.gen_array_ops._mirror_pad_grad(input,paddings,mode,name=None)
tensorflow.ops.gen_array_ops._one_hot(indices,depth,on_value,off_value,axis=None,name=None)
tensorflow.ops.gen_array_ops._pack(values,axis=None,name=None)
tensorflow.ops.gen_array_ops._pad(input,paddings,name=None)
tensorflow.ops.gen_array_ops._parallel_concat(values,shape,name=None)
tensorflow.ops.gen_array_ops._placeholder(dtype,shape=None,name=None)
tensorflow.ops.gen_array_ops._ref_identity(input,name=None)
tensorflow.ops.gen_array_ops._reverse(tensor,dims,name=None)
tensorflow.ops.gen_array_ops._slice(input,begin,size,name=None)
tensorflow.ops.gen_array_ops._space_to_batch(input,paddings,block_size,name=None)
tensorflow.ops.gen_array_ops._split(split_dim,value,num_split,name=None)
tensorflow.ops.gen_array_ops._split_v(value,size_splits,split_dim,num_split,name=None)
tensorflow.ops.gen_array_ops._squeeze(input,squeeze_dims=None,name=None)
tensorflow.ops.gen_array_ops._tile_grad(input,multiples,name=None)
tensorflow.ops.gen_array_ops._unpack(value,num,axis=None,name=None)
tensorflow.ops.gen_array_ops._zeros_like(x,name=None)
tensorflow.ops.gen_array_ops.batch_matrix_band_part(input,num_lower,num_upper,name=None)
tensorflow.ops.gen_array_ops.batch_matrix_diag(diagonal,name=None)
tensorflow.ops.gen_array_ops.batch_matrix_diag_part(input,name=None)
tensorflow.ops.gen_array_ops.batch_matrix_set_diag(input,diagonal,name=None)
tensorflow.ops.gen_array_ops.batch_to_space_nd(input,block_shape,crops,name=None)
tensorflow.ops.gen_array_ops.bitcast(input,type,name=None)
tensorflow.ops.gen_array_ops.check_numerics(tensor,message,name=None)
tensorflow.ops.gen_array_ops.depth_to_space(input,block_size,name=None)
tensorflow.ops.gen_array_ops.dequantize(input,min_range,max_range,mode=None,name=None)
tensorflow.ops.gen_array_ops.diag(diagonal,name=None)
tensorflow.ops.gen_array_ops.diag_part(input,name=None)
tensorflow.ops.gen_array_ops.extract_image_patches(images,ksizes,strides,rates,padding,name=None)
tensorflow.ops.gen_array_ops.fake_quant_with_min_max_args(inputs,min=None,max=None,name=None)
tensorflow.ops.gen_array_ops.fake_quant_with_min_max_args_gradient(gradients,inputs,min=None,max=None,name=None)
tensorflow.ops.gen_array_ops.fake_quant_with_min_max_vars(inputs,min,max,name=None)
tensorflow.ops.gen_array_ops.fake_quant_with_min_max_vars_gradient(gradients,inputs,min,max,name=None)
tensorflow.ops.gen_array_ops.fake_quant_with_min_max_vars_per_channel(inputs,min,max,name=None)
tensorflow.ops.gen_array_ops.fake_quant_with_min_max_vars_per_channel_gradient(gradients,inputs,min,max,name=None)
tensorflow.ops.gen_array_ops.fill(dims,value,name=None)
tensorflow.ops.gen_array_ops.gather(params,indices,validate_indices=None,name=None)
tensorflow.ops.gen_array_ops.gather_nd(params,indices,name=None)
tensorflow.ops.gen_array_ops.identity(input,name=None)
tensorflow.ops.gen_array_ops.immutable_const(dtype,shape,memory_region_name,name=None)
tensorflow.ops.gen_array_ops.invert_permutation(x,name=None)
tensorflow.ops.gen_array_ops.matrix_band_part(input,num_lower,num_upper,name=None)
tensorflow.ops.gen_array_ops.matrix_diag(diagonal,name=None)
tensorflow.ops.gen_array_ops.matrix_diag_part(input,name=None)
tensorflow.ops.gen_array_ops.matrix_set_diag(input,diagonal,name=None)
tensorflow.ops.gen_array_ops.placeholder_v2(dtype,shape,name=None)
tensorflow.ops.gen_array_ops.placeholder_with_default(input,shape,name=None)
tensorflow.ops.gen_array_ops.prevent_gradient(input,message=None,name=None)
tensorflow.ops.gen_array_ops.quantize_and_dequantize(input,signed_input=None,num_bits=None,range_given=None,input_min=None,input_max=None,name=None)
tensorflow.ops.gen_array_ops.quantize_and_dequantize_v2(input,input_min,input_max,signed_input=None,num_bits=None,range_given=None,name=None)
tensorflow.ops.gen_array_ops.quantize_v2(input,min_range,max_range,T,mode=None,name=None)
tensorflow.ops.gen_array_ops.quantized_concat(concat_dim,values,input_mins,input_maxes,name=None)
tensorflow.ops.gen_array_ops.quantized_instance_norm(x,x_min,x_max,output_range_given=None,given_y_min=None,given_y_max=None,variance_epsilon=None,min_separation=None,name=None)
tensorflow.ops.gen_array_ops.quantized_reshape(tensor,shape,input_min,input_max,name=None)
tensorflow.ops.gen_array_ops.rank(input,name=None)
tensorflow.ops.gen_array_ops.reshape(tensor,shape,name=None)
tensorflow.ops.gen_array_ops.reverse_sequence(input,seq_lengths,seq_dim,batch_dim=None,name=None)
tensorflow.ops.gen_array_ops.reverse_v2(tensor,axis,name=None)
tensorflow.ops.gen_array_ops.scatter_nd(indices,updates,shape,name=None)
tensorflow.ops.gen_array_ops.shape(input,out_type=None,name=None)
tensorflow.ops.gen_array_ops.shape_n(input,out_type=None,name=None)
tensorflow.ops.gen_array_ops.size(input,out_type=None,name=None)
tensorflow.ops.gen_array_ops.space_to_batch_nd(input,block_shape,paddings,name=None)
tensorflow.ops.gen_array_ops.space_to_depth(input,block_size,name=None)
tensorflow.ops.gen_array_ops.stop_gradient(input,name=None)
tensorflow.ops.gen_array_ops.strided_slice(input,begin,end,strides,begin_mask=None,end_mask=None,ellipsis_mask=None,new_axis_mask=None,shrink_axis_mask=None,name=None)
tensorflow.ops.gen_array_ops.strided_slice_assign(ref,begin,end,strides,value,begin_mask=None,end_mask=None,ellipsis_mask=None,new_axis_mask=None,shrink_axis_mask=None,name=None)
tensorflow.ops.gen_array_ops.strided_slice_grad(shape,begin,end,strides,dy,begin_mask=None,end_mask=None,ellipsis_mask=None,new_axis_mask=None,shrink_axis_mask=None,name=None)
tensorflow.ops.gen_array_ops.tile(input,multiples,name=None)
tensorflow.ops.gen_array_ops.transpose(x,perm,name=None)
tensorflow.ops.gen_array_ops.unique(x,out_idx=None,name=None)
tensorflow.ops.gen_array_ops.unique_with_counts(x,out_idx=None,name=None)
tensorflow.ops.gen_array_ops.where(input,name=None)
tensorflow.python.ops.gen_array_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_array_ops._batch_to_space(input,crops,block_size,name=None)
tensorflow.python.ops.gen_array_ops._broadcast_args(s0,s1,name=None)
tensorflow.python.ops.gen_array_ops._broadcast_gradient_args(s0,s1,name=None)
tensorflow.python.ops.gen_array_ops._concat(concat_dim,values,name=None)
tensorflow.python.ops.gen_array_ops._concat_offset(concat_dim,shape,name=None)
tensorflow.python.ops.gen_array_ops._concat_v2(values,axis,name=None)
tensorflow.python.ops.gen_array_ops._const(value,dtype,name=None)
tensorflow.python.ops.gen_array_ops._edit_distance(hypothesis_indices,hypothesis_values,hypothesis_shape,truth_indices,truth_values,truth_shape,normalize=None,name=None)
tensorflow.python.ops.gen_array_ops._expand_dims(input,dim,name=None)
tensorflow.python.ops.gen_array_ops._list_diff(x,y,out_idx=None,name=None)
tensorflow.python.ops.gen_array_ops._mirror_pad(input,paddings,mode,name=None)
tensorflow.python.ops.gen_array_ops._mirror_pad_grad(input,paddings,mode,name=None)
tensorflow.python.ops.gen_array_ops._one_hot(indices,depth,on_value,off_value,axis=None,name=None)
tensorflow.python.ops.gen_array_ops._pack(values,axis=None,name=None)
tensorflow.python.ops.gen_array_ops._pad(input,paddings,name=None)
tensorflow.python.ops.gen_array_ops._parallel_concat(values,shape,name=None)
tensorflow.python.ops.gen_array_ops._placeholder(dtype,shape=None,name=None)
tensorflow.python.ops.gen_array_ops._ref_identity(input,name=None)
tensorflow.python.ops.gen_array_ops._reverse(tensor,dims,name=None)
tensorflow.python.ops.gen_array_ops._slice(input,begin,size,name=None)
tensorflow.python.ops.gen_array_ops._space_to_batch(input,paddings,block_size,name=None)
tensorflow.python.ops.gen_array_ops._split(split_dim,value,num_split,name=None)
tensorflow.python.ops.gen_array_ops._split_v(value,size_splits,split_dim,num_split,name=None)
tensorflow.python.ops.gen_array_ops._squeeze(input,squeeze_dims=None,name=None)
tensorflow.python.ops.gen_array_ops._tile_grad(input,multiples,name=None)
tensorflow.python.ops.gen_array_ops._unpack(value,num,axis=None,name=None)
tensorflow.python.ops.gen_array_ops._zeros_like(x,name=None)
tensorflow.python.ops.gen_array_ops.batch_matrix_band_part(input,num_lower,num_upper,name=None)
tensorflow.python.ops.gen_array_ops.batch_matrix_diag(diagonal,name=None)
tensorflow.python.ops.gen_array_ops.batch_matrix_diag_part(input,name=None)
tensorflow.python.ops.gen_array_ops.batch_matrix_set_diag(input,diagonal,name=None)
tensorflow.python.ops.gen_array_ops.batch_to_space_nd(input,block_shape,crops,name=None)
tensorflow.python.ops.gen_array_ops.bitcast(input,type,name=None)
tensorflow.python.ops.gen_array_ops.check_numerics(tensor,message,name=None)
tensorflow.python.ops.gen_array_ops.depth_to_space(input,block_size,name=None)
tensorflow.python.ops.gen_array_ops.dequantize(input,min_range,max_range,mode=None,name=None)
tensorflow.python.ops.gen_array_ops.diag(diagonal,name=None)
tensorflow.python.ops.gen_array_ops.diag_part(input,name=None)
tensorflow.python.ops.gen_array_ops.extract_image_patches(images,ksizes,strides,rates,padding,name=None)
tensorflow.python.ops.gen_array_ops.fake_quant_with_min_max_args(inputs,min=None,max=None,name=None)
tensorflow.python.ops.gen_array_ops.fake_quant_with_min_max_args_gradient(gradients,inputs,min=None,max=None,name=None)
tensorflow.python.ops.gen_array_ops.fake_quant_with_min_max_vars(inputs,min,max,name=None)
tensorflow.python.ops.gen_array_ops.fake_quant_with_min_max_vars_gradient(gradients,inputs,min,max,name=None)
tensorflow.python.ops.gen_array_ops.fake_quant_with_min_max_vars_per_channel(inputs,min,max,name=None)
tensorflow.python.ops.gen_array_ops.fake_quant_with_min_max_vars_per_channel_gradient(gradients,inputs,min,max,name=None)
tensorflow.python.ops.gen_array_ops.fill(dims,value,name=None)
tensorflow.python.ops.gen_array_ops.gather(params,indices,validate_indices=None,name=None)
tensorflow.python.ops.gen_array_ops.gather_nd(params,indices,name=None)
tensorflow.python.ops.gen_array_ops.identity(input,name=None)
tensorflow.python.ops.gen_array_ops.immutable_const(dtype,shape,memory_region_name,name=None)
tensorflow.python.ops.gen_array_ops.invert_permutation(x,name=None)
tensorflow.python.ops.gen_array_ops.matrix_band_part(input,num_lower,num_upper,name=None)
tensorflow.python.ops.gen_array_ops.matrix_diag(diagonal,name=None)
tensorflow.python.ops.gen_array_ops.matrix_diag_part(input,name=None)
tensorflow.python.ops.gen_array_ops.matrix_set_diag(input,diagonal,name=None)
tensorflow.python.ops.gen_array_ops.placeholder_v2(dtype,shape,name=None)
tensorflow.python.ops.gen_array_ops.placeholder_with_default(input,shape,name=None)
tensorflow.python.ops.gen_array_ops.prevent_gradient(input,message=None,name=None)
tensorflow.python.ops.gen_array_ops.quantize_and_dequantize(input,signed_input=None,num_bits=None,range_given=None,input_min=None,input_max=None,name=None)
tensorflow.python.ops.gen_array_ops.quantize_and_dequantize_v2(input,input_min,input_max,signed_input=None,num_bits=None,range_given=None,name=None)
tensorflow.python.ops.gen_array_ops.quantize_v2(input,min_range,max_range,T,mode=None,name=None)
tensorflow.python.ops.gen_array_ops.quantized_concat(concat_dim,values,input_mins,input_maxes,name=None)
tensorflow.python.ops.gen_array_ops.quantized_instance_norm(x,x_min,x_max,output_range_given=None,given_y_min=None,given_y_max=None,variance_epsilon=None,min_separation=None,name=None)
tensorflow.python.ops.gen_array_ops.quantized_reshape(tensor,shape,input_min,input_max,name=None)
tensorflow.python.ops.gen_array_ops.rank(input,name=None)
tensorflow.python.ops.gen_array_ops.reshape(tensor,shape,name=None)
tensorflow.python.ops.gen_array_ops.reverse_sequence(input,seq_lengths,seq_dim,batch_dim=None,name=None)
tensorflow.python.ops.gen_array_ops.reverse_v2(tensor,axis,name=None)
tensorflow.python.ops.gen_array_ops.scatter_nd(indices,updates,shape,name=None)
tensorflow.python.ops.gen_array_ops.shape(input,out_type=None,name=None)
tensorflow.python.ops.gen_array_ops.shape_n(input,out_type=None,name=None)
tensorflow.python.ops.gen_array_ops.size(input,out_type=None,name=None)
tensorflow.python.ops.gen_array_ops.space_to_batch_nd(input,block_shape,paddings,name=None)
tensorflow.python.ops.gen_array_ops.space_to_depth(input,block_size,name=None)
tensorflow.python.ops.gen_array_ops.stop_gradient(input,name=None)
tensorflow.python.ops.gen_array_ops.strided_slice(input,begin,end,strides,begin_mask=None,end_mask=None,ellipsis_mask=None,new_axis_mask=None,shrink_axis_mask=None,name=None)
tensorflow.python.ops.gen_array_ops.strided_slice_assign(ref,begin,end,strides,value,begin_mask=None,end_mask=None,ellipsis_mask=None,new_axis_mask=None,shrink_axis_mask=None,name=None)
tensorflow.python.ops.gen_array_ops.strided_slice_grad(shape,begin,end,strides,dy,begin_mask=None,end_mask=None,ellipsis_mask=None,new_axis_mask=None,shrink_axis_mask=None,name=None)
tensorflow.python.ops.gen_array_ops.tile(input,multiples,name=None)
tensorflow.python.ops.gen_array_ops.transpose(x,perm,name=None)
tensorflow.python.ops.gen_array_ops.unique(x,out_idx=None,name=None)
tensorflow.python.ops.gen_array_ops.unique_with_counts(x,out_idx=None,name=None)
tensorflow.python.ops.gen_array_ops.where(input,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/histogram_ops.py----------------------------------------
A:tensorflow.python.ops.histogram_ops.values->tensorflow.python.ops.array_ops.reshape(values, [-1])
A:tensorflow.python.ops.histogram_ops.value_range->tensorflow.python.framework.ops.convert_to_tensor(value_range, name='value_range')
A:tensorflow.python.ops.histogram_ops.nbins->tensorflow.python.framework.ops.convert_to_tensor(nbins, dtype=dtypes.int32, name='nbins')
A:tensorflow.python.ops.histogram_ops.nbins_float->tensorflow.python.ops.math_ops.cast(nbins, values.dtype)
A:tensorflow.python.ops.histogram_ops.scaled_values->tensorflow.python.ops.math_ops.truediv(values - value_range[0], value_range[1] - value_range[0], name='scaled_values')
A:tensorflow.python.ops.histogram_ops.indices->tensorflow.python.ops.math_ops.cast(clip_ops.clip_by_value(indices, 0, nbins_float - 1), dtypes.int32)
tensorflow.histogram_ops.histogram_fixed_width(values,value_range,nbins=100,dtype=dtypes.int32,name=None)
tensorflow.python.ops.histogram_ops.histogram_fixed_width(values,value_range,nbins=100,dtype=dtypes.int32,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/sparse_ops.py----------------------------------------
A:tensorflow.python.ops.sparse_ops.axis->tensorflow.python.util.deprecation.deprecated_argument_lookup('axis', axis, 'split_dim', split_dim)
A:tensorflow.python.ops.sparse_ops.sp_inputs->_convert_to_sparse_tensors(sp_inputs)
A:tensorflow.python.ops.sparse_ops.max_shape->tensorflow.python.ops.math_ops.reduce_max(array_ops.concat([array_ops.reshape(shape, [1, -1]) for shape in shapes], 0), 0)
A:tensorflow.python.ops.sparse_ops.(output_ind, output_val, output_shape)->tensorflow.python.ops.gen_sparse_ops.sparse_reduce_sum_sparse(sp_input.indices, sp_input.values, sp_input.dense_shape, math_ops._ReductionDims(sp_input, axis, reduction_axes), keep_dims)
A:tensorflow.python.ops.sparse_ops.a->_convert_to_sparse_tensor(a)
A:tensorflow.python.ops.sparse_ops.thresh->tensorflow.python.framework.ops.convert_to_tensor(thresh, dtype=a.values.dtype.real_dtype, name='thresh')
A:tensorflow.python.ops.sparse_ops.result->tensorflow.python.framework.sparse_tensor.SparseTensor(new_indices, new_values, new_shape)
A:tensorflow.python.ops.sparse_ops.sp_input->_convert_to_sparse_tensor(sp_input)
A:tensorflow.python.ops.sparse_ops.(reordered_ind, reordered_val)->tensorflow.python.ops.gen_sparse_ops._sparse_reorder(sp_input.indices, sp_input.values, sp_input.dense_shape, name=name)
A:tensorflow.python.ops.sparse_ops.(reshaped_ind, reshaped_shape)->tensorflow.python.ops.gen_sparse_ops._sparse_reshape(sp_input.indices, sp_input.dense_shape, shape, name=name)
A:tensorflow.python.ops.sparse_ops.(output_inds, output_vals, output_shapes)->tensorflow.python.ops.gen_sparse_ops._sparse_split(axis, sp_input.indices, sp_input.values, sp_input.dense_shape, num_split, name=name)
A:tensorflow.python.ops.sparse_ops.new_values->tensorflow.python.ops.array_ops.gather(sp_input.values, where_true)
A:tensorflow.python.ops.sparse_ops.sp_values->_convert_to_sparse_tensor(sp_values)
A:tensorflow.python.ops.sparse_ops.sp_new->sparse_merge(sp_input, sp_values, vocab_size, name)
A:tensorflow.python.ops.sparse_ops.ids_dim->tensorflow.python.ops.math_ops.cast(ids_dim, dtypes.int64)
A:tensorflow.python.ops.sparse_ops.new_indices->tensorflow.python.ops.array_ops.gather(sp_input.indices, where_true)
A:tensorflow.python.ops.sparse_ops.new_shape->tensorflow.python.ops.array_ops.concat([sp_ids[0].dense_shape[:-1], vocab_size], 0)
A:tensorflow.python.ops.sparse_ops.to_retain->tensorflow.python.framework.ops.convert_to_tensor(to_retain)
A:tensorflow.python.ops.sparse_ops.retain_shape->tensorflow.python.framework.ops.convert_to_tensor(to_retain).get_shape()
A:tensorflow.python.ops.sparse_ops.where_true->tensorflow.python.ops.array_ops.reshape(array_ops.where(to_retain), [-1])
A:tensorflow.python.ops.sparse_ops.in_indices->tensorflow.python.ops.array_ops.identity(sp_input.indices)
A:tensorflow.python.ops.sparse_ops.in_values->tensorflow.python.ops.array_ops.identity(sp_input.values)
A:tensorflow.python.ops.sparse_ops.in_shape->tensorflow.python.ops.array_ops.identity(sp_input.dense_shape)
A:tensorflow.python.ops.sparse_ops.dim_low_bound->tensorflow.python.ops.math_ops.reduce_max(in_indices, 0)
A:tensorflow.python.ops.sparse_ops.output_shape_tensor->tensorflow.python.ops.control_flow_ops.with_dependencies([check_ops.assert_less_equal(in_shape, output_shape_tensor)], output_shape_tensor)
A:tensorflow.python.ops.sparse_ops.default_value->tensorflow.python.framework.ops.convert_to_tensor(default_value, dtype=sp_input.values.dtype)
A:tensorflow.python.ops.sparse_ops.num_rows->tensorflow.python.ops.math_ops.cast(sp_input.dense_shape[0], dtypes.int32)
A:tensorflow.python.ops.sparse_ops.all_row_indices->tensorflow.python.ops.math_ops.cast(math_ops.range(num_rows), dtypes.int64)
A:tensorflow.python.ops.sparse_ops.(empty_row_indices, _)->tensorflow.python.ops.array_ops.setdiff1d(all_row_indices, sp_input.indices[:, 0])
A:tensorflow.python.ops.sparse_ops.empty_row_indicator->sparse_to_dense(empty_row_indices, array_ops.expand_dims(sp_input.dense_shape[0], -1), True, False)
A:tensorflow.python.ops.sparse_ops.empty_row_indices_as_column->tensorflow.python.ops.array_ops.reshape(empty_row_indices, [-1, 1])
A:tensorflow.python.ops.sparse_ops.additional_indices->tensorflow.python.ops.array_ops.concat([empty_row_indices_as_column, array_ops.zeros_like(empty_row_indices_as_column)], 1)
A:tensorflow.python.ops.sparse_ops.additional_values->tensorflow.python.ops.array_ops.fill(array_ops.shape(empty_row_indices), default_value)
A:tensorflow.python.ops.sparse_ops.all_indices_unordered->tensorflow.python.ops.array_ops.concat([sp_input.indices, additional_indices], 0)
A:tensorflow.python.ops.sparse_ops.all_values_unordered->tensorflow.python.ops.array_ops.concat([sp_input.values, additional_values], 0)
A:tensorflow.python.ops.sparse_ops.sp_unordered_output->tensorflow.python.framework.sparse_tensor.SparseTensor(all_indices_unordered, all_values_unordered, sp_input.dense_shape)
A:tensorflow.python.ops.sparse_ops.sp_ordered_output->sparse_reorder(sp_unordered_output)
A:tensorflow.python.ops.sparse_ops.(output_indices, output_values, output_shape)->tensorflow.python.ops.gen_sparse_ops._take_many_sparse_from_tensors_map(sparse_handles, dtype=sparse_map_op.get_attr('T'), container=sparse_map_op.get_attr('container'), shared_name=shared_name, name=name)
A:tensorflow.python.ops.sparse_ops.sp_a->_convert_to_sparse_tensor(sp_a)
A:tensorflow.python.ops.sparse_ops.b->tensorflow.python.framework.ops.convert_to_tensor(b, name='b')
A:tensorflow.python.ops.sparse_ops.out_vals->tensorflow.python.ops.gen_sparse_ops.sparse_softmax(sp_input.indices, sp_input.values, sp_input.dense_shape)
A:tensorflow.python.ops.sparse_ops.(out_indices, out_values)->tensorflow.python.ops.gen_sparse_ops.sparse_sparse_minimum(sp_a.indices, sp_a.values, sp_a.dense_shape, sp_b.indices, sp_b.values, sp_b.dense_shape, name=name)
A:tensorflow.python.ops.sparse_ops.rank->tensorflow.python.ops.array_ops.rank(sp_input)
A:tensorflow.python.ops.sparse_ops.transposed_indices->tensorflow.python.ops.array_ops.transpose(array_ops.gather(array_ops.transpose(indices), perm))
A:tensorflow.python.ops.sparse_ops.transposed_dense_shape->tensorflow.python.ops.array_ops.gather(dense_shape, perm)
A:tensorflow.python.ops.sparse_ops.transposed_st->sparse_reorder(transposed_st)
tensorflow.python.ops.sparse_ops.KeywordRequired(object)
tensorflow.python.ops.sparse_ops.KeywordRequired.__repr__(self)
tensorflow.python.ops.sparse_ops._add_many_sparse_to_tensors_map(sp_input,container=None,shared_name=None,name=None)
tensorflow.python.ops.sparse_ops._add_sparse_to_tensors_map(sp_input,container=None,shared_name=None,name=None)
tensorflow.python.ops.sparse_ops._convert_to_sparse_tensor(sp_input)
tensorflow.python.ops.sparse_ops._convert_to_sparse_tensors(sp_inputs)
tensorflow.python.ops.sparse_ops._take_many_sparse_from_tensors_map(sparse_map_op,sparse_handles,rank=None,name=None)
tensorflow.python.ops.sparse_ops.deserialize_many_sparse(serialized_sparse,dtype,rank=None,name=None)
tensorflow.python.ops.sparse_ops.serialize_many_sparse(sp_input,name=None)
tensorflow.python.ops.sparse_ops.serialize_sparse(sp_input,name=None)
tensorflow.python.ops.sparse_ops.sparse_add(a,b,thresh=0)
tensorflow.python.ops.sparse_ops.sparse_concat(axis,sp_inputs,name=None,expand_nonconcat_dim=False,concat_dim=None)
tensorflow.python.ops.sparse_ops.sparse_dense_cwise_add(sp_t,dense_t)
tensorflow.python.ops.sparse_ops.sparse_fill_empty_rows(sp_input,default_value,name=None)
tensorflow.python.ops.sparse_ops.sparse_maximum(sp_a,sp_b,name=None)
tensorflow.python.ops.sparse_ops.sparse_merge(sp_ids,sp_values,vocab_size,name=None,already_sorted=False)
tensorflow.python.ops.sparse_ops.sparse_minimum(sp_a,sp_b,name=None)
tensorflow.python.ops.sparse_ops.sparse_reduce_sum(sp_input,axis=None,keep_dims=False,reduction_axes=None)
tensorflow.python.ops.sparse_ops.sparse_reduce_sum_sparse(sp_input,axis=None,keep_dims=False,reduction_axes=None)
tensorflow.python.ops.sparse_ops.sparse_reorder(sp_input,name=None)
tensorflow.python.ops.sparse_ops.sparse_reset_shape(sp_input,new_shape=None)
tensorflow.python.ops.sparse_ops.sparse_reshape(sp_input,shape,name=None)
tensorflow.python.ops.sparse_ops.sparse_retain(sp_input,to_retain)
tensorflow.python.ops.sparse_ops.sparse_softmax(sp_input,name=None)
tensorflow.python.ops.sparse_ops.sparse_split(keyword_required=KeywordRequired(),sp_input=None,num_split=None,axis=None,name=None,split_dim=None)
tensorflow.python.ops.sparse_ops.sparse_tensor_dense_matmul(sp_a,b,adjoint_a=False,adjoint_b=False,name=None)
tensorflow.python.ops.sparse_ops.sparse_tensor_to_dense(sp_input,default_value=0,validate_indices=True,name=None)
tensorflow.python.ops.sparse_ops.sparse_to_dense(sparse_indices,output_shape,sparse_values,default_value=0,validate_indices=True,name=None)
tensorflow.python.ops.sparse_ops.sparse_to_indicator(sp_input,vocab_size,name=None)
tensorflow.python.ops.sparse_ops.sparse_transpose(sp_input,perm=None,name=None)
tensorflow.sparse_ops.KeywordRequired(object)
tensorflow.sparse_ops.KeywordRequired.__repr__(self)
tensorflow.sparse_ops._add_many_sparse_to_tensors_map(sp_input,container=None,shared_name=None,name=None)
tensorflow.sparse_ops._add_sparse_to_tensors_map(sp_input,container=None,shared_name=None,name=None)
tensorflow.sparse_ops._convert_to_sparse_tensor(sp_input)
tensorflow.sparse_ops._convert_to_sparse_tensors(sp_inputs)
tensorflow.sparse_ops._take_many_sparse_from_tensors_map(sparse_map_op,sparse_handles,rank=None,name=None)
tensorflow.sparse_ops.deserialize_many_sparse(serialized_sparse,dtype,rank=None,name=None)
tensorflow.sparse_ops.serialize_many_sparse(sp_input,name=None)
tensorflow.sparse_ops.serialize_sparse(sp_input,name=None)
tensorflow.sparse_ops.sparse_add(a,b,thresh=0)
tensorflow.sparse_ops.sparse_concat(axis,sp_inputs,name=None,expand_nonconcat_dim=False,concat_dim=None)
tensorflow.sparse_ops.sparse_dense_cwise_add(sp_t,dense_t)
tensorflow.sparse_ops.sparse_fill_empty_rows(sp_input,default_value,name=None)
tensorflow.sparse_ops.sparse_maximum(sp_a,sp_b,name=None)
tensorflow.sparse_ops.sparse_merge(sp_ids,sp_values,vocab_size,name=None,already_sorted=False)
tensorflow.sparse_ops.sparse_minimum(sp_a,sp_b,name=None)
tensorflow.sparse_ops.sparse_reduce_sum(sp_input,axis=None,keep_dims=False,reduction_axes=None)
tensorflow.sparse_ops.sparse_reduce_sum_sparse(sp_input,axis=None,keep_dims=False,reduction_axes=None)
tensorflow.sparse_ops.sparse_reorder(sp_input,name=None)
tensorflow.sparse_ops.sparse_reset_shape(sp_input,new_shape=None)
tensorflow.sparse_ops.sparse_reshape(sp_input,shape,name=None)
tensorflow.sparse_ops.sparse_retain(sp_input,to_retain)
tensorflow.sparse_ops.sparse_softmax(sp_input,name=None)
tensorflow.sparse_ops.sparse_split(keyword_required=KeywordRequired(),sp_input=None,num_split=None,axis=None,name=None,split_dim=None)
tensorflow.sparse_ops.sparse_tensor_dense_matmul(sp_a,b,adjoint_a=False,adjoint_b=False,name=None)
tensorflow.sparse_ops.sparse_tensor_to_dense(sp_input,default_value=0,validate_indices=True,name=None)
tensorflow.sparse_ops.sparse_to_dense(sparse_indices,output_shape,sparse_values,default_value=0,validate_indices=True,name=None)
tensorflow.sparse_ops.sparse_to_indicator(sp_input,vocab_size,name=None)
tensorflow.sparse_ops.sparse_transpose(sp_input,perm=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/functional_ops.py----------------------------------------
A:tensorflow.python.ops.functional_ops.varscope->tensorflow.python.ops.variable_scope.get_variable_scope()
A:tensorflow.python.ops.functional_ops.elems->tensorflow.python.framework.ops.convert_to_tensor(elems, name='elems')
A:tensorflow.python.ops.functional_ops.elems_ta->elems_ta.unstack(elems).unstack(elems)
A:tensorflow.python.ops.functional_ops.a->fn(a, elems_ta.read(i))
A:tensorflow.python.ops.functional_ops.i->tensorflow.python.framework.constant_op.constant(0)
A:tensorflow.python.ops.functional_ops.(_, r_a)->tensorflow.python.ops.control_flow_ops.while_loop(lambda i, _: i < n, compute, (i, accs_ta), parallel_iterations=parallel_iterations, back_prop=back_prop, swap_memory=swap_memory)
A:tensorflow.python.ops.functional_ops.input_is_sequence->tensorflow.python.util.nest.is_sequence(elems)
A:tensorflow.python.ops.functional_ops.output_is_sequence->tensorflow.python.util.nest.is_sequence(initializer)
A:tensorflow.python.ops.functional_ops.elems_flat->input_flatten(elems)
A:tensorflow.python.ops.functional_ops.dtype_flat->output_flatten(dtype)
A:tensorflow.python.ops.functional_ops.packed_values->input_pack([elem_ta.read(i) for elem_ta in elems_ta])
A:tensorflow.python.ops.functional_ops.packed_fn_values->fn(packed_values)
A:tensorflow.python.ops.functional_ops.flat_fn_values->output_flatten(packed_fn_values)
A:tensorflow.python.ops.functional_ops.initializer_flat->output_flatten(initializer)
A:tensorflow.python.ops.functional_ops.packed_elems->input_pack([elem_ta.read(i) for elem_ta in elems_ta])
A:tensorflow.python.ops.functional_ops.packed_a->output_pack(a_flat)
A:tensorflow.python.ops.functional_ops.a_out->fn(packed_a, packed_elems)
A:tensorflow.python.ops.functional_ops.flat_a_out->output_flatten(a_out)
A:tensorflow.python.ops.functional_ops.(_, _, r_a)->tensorflow.python.ops.control_flow_ops.while_loop(lambda i, _1, _2: i < n, compute, (i, a_flat, accs_ta), parallel_iterations=parallel_iterations, back_prop=back_prop, swap_memory=swap_memory)
tensorflow.functional_ops.foldl(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)
tensorflow.functional_ops.foldr(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)
tensorflow.functional_ops.map_fn(fn,elems,dtype=None,parallel_iterations=10,back_prop=True,swap_memory=False,infer_shape=True,name=None)
tensorflow.functional_ops.scan(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,infer_shape=True,name=None)
tensorflow.python.ops.functional_ops.foldl(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)
tensorflow.python.ops.functional_ops.foldr(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)
tensorflow.python.ops.functional_ops.map_fn(fn,elems,dtype=None,parallel_iterations=10,back_prop=True,swap_memory=False,infer_shape=True,name=None)
tensorflow.python.ops.functional_ops.scan(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,infer_shape=True,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_string_ops.py----------------------------------------
A:tensorflow.python.ops.gen_string_ops.result->_InitOpDefLibrary().apply_op('Substr', input=input, pos=pos, len=len, name=name)
A:tensorflow.python.ops.gen_string_ops._StringSplitOutput->collections.namedtuple('StringSplit', __string_split_outputs)
A:tensorflow.python.ops.gen_string_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_string_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_string_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_string_ops._InitOpDefLibrary()
tensorflow.ops.gen_string_ops._string_split(input,delimiter,name=None)
tensorflow.ops.gen_string_ops.as_string(input,precision=None,scientific=None,shortest=None,width=None,fill=None,name=None)
tensorflow.ops.gen_string_ops.decode_base64(input,name=None)
tensorflow.ops.gen_string_ops.encode_base64(input,pad=None,name=None)
tensorflow.ops.gen_string_ops.reduce_join(inputs,reduction_indices,keep_dims=None,separator=None,name=None)
tensorflow.ops.gen_string_ops.string_join(inputs,separator=None,name=None)
tensorflow.ops.gen_string_ops.string_to_hash_bucket(string_tensor,num_buckets,name=None)
tensorflow.ops.gen_string_ops.string_to_hash_bucket_fast(input,num_buckets,name=None)
tensorflow.ops.gen_string_ops.string_to_hash_bucket_strong(input,num_buckets,key,name=None)
tensorflow.ops.gen_string_ops.substr(input,pos,len,name=None)
tensorflow.python.ops.gen_string_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_string_ops._string_split(input,delimiter,name=None)
tensorflow.python.ops.gen_string_ops.as_string(input,precision=None,scientific=None,shortest=None,width=None,fill=None,name=None)
tensorflow.python.ops.gen_string_ops.decode_base64(input,name=None)
tensorflow.python.ops.gen_string_ops.encode_base64(input,pad=None,name=None)
tensorflow.python.ops.gen_string_ops.reduce_join(inputs,reduction_indices,keep_dims=None,separator=None,name=None)
tensorflow.python.ops.gen_string_ops.string_join(inputs,separator=None,name=None)
tensorflow.python.ops.gen_string_ops.string_to_hash_bucket(string_tensor,num_buckets,name=None)
tensorflow.python.ops.gen_string_ops.string_to_hash_bucket_fast(input,num_buckets,name=None)
tensorflow.python.ops.gen_string_ops.string_to_hash_bucket_strong(input,num_buckets,key,name=None)
tensorflow.python.ops.gen_string_ops.substr(input,pos,len,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/summary_ops.py----------------------------------------
A:tensorflow.python.ops.summary_ops.summary_description->tensorflow.core.framework.summary_pb2.SummaryDescription()
A:tensorflow.python.ops.summary_ops.description->google.protobuf.json_format.MessageToJson(summary_description)
A:tensorflow.python.ops.summary_ops.val->tensorflow.python.ops.gen_logging_ops._tensor_summary(tensor=tensor, description=description, name=scope)
tensorflow.ops.summary_ops._Collect(val,collections,default_collections)
tensorflow.ops.summary_ops.tensor_summary(name,tensor,summary_description=None,collections=None)
tensorflow.python.ops.summary_ops._Collect(val,collections,default_collections)
tensorflow.python.ops.summary_ops.tensor_summary(name,tensor,summary_description=None,collections=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/image_ops_impl.py----------------------------------------
A:tensorflow.python.ops.image_ops_impl.static_shape->tensorflow.python.framework.ops.convert_to_tensor(image, name='image').get_shape().with_rank(rank).as_list()
A:tensorflow.python.ops.image_ops_impl.dynamic_shape->tensorflow.python.ops.array_ops.unstack(array_ops.shape(image), rank)
A:tensorflow.python.ops.image_ops_impl.image_shape->tensorflow.python.framework.ops.convert_to_tensor(image, name='image').get_shape()
A:tensorflow.python.ops.image_ops_impl.image->tensorflow.python.framework.ops.convert_to_tensor(image, name='image')
A:tensorflow.python.ops.image_ops_impl.uniform_random->tensorflow.python.ops.random_ops.random_uniform([], 0, 1.0, seed=seed)
A:tensorflow.python.ops.image_ops_impl.mirror_cond->tensorflow.python.ops.math_ops.less(uniform_random, 0.5)
A:tensorflow.python.ops.image_ops_impl.result->tensorflow.python.ops.control_flow_ops.cond(mirror_cond, lambda : array_ops.reverse(image, [1]), lambda : image)
A:tensorflow.python.ops.image_ops_impl.k->tensorflow.python.ops.math_ops.mod(k, 4)
A:tensorflow.python.ops.image_ops_impl.ret->tensorflow.python.ops.control_flow_ops.case(cases, default=lambda : image, exclusive=True, name=scope)
A:tensorflow.python.ops.image_ops_impl.img_shape->tensorflow.python.ops.array_ops.shape(image)
A:tensorflow.python.ops.image_ops_impl.fraction_offset->int(1 / ((1 - central_fraction) / 2.0))
A:tensorflow.python.ops.image_ops_impl.bbox_h_start->tensorflow.python.ops.math_ops.div(img_shape[0], fraction_offset)
A:tensorflow.python.ops.image_ops_impl.bbox_w_start->tensorflow.python.ops.math_ops.div(img_shape[1], fraction_offset)
A:tensorflow.python.ops.image_ops_impl.bbox_begin->tensorflow.python.ops.array_ops.stack([bbox_h_start, bbox_w_start, 0])
A:tensorflow.python.ops.image_ops_impl.bbox_size->tensorflow.python.ops.array_ops.stack([bbox_h_size, bbox_w_size, -1])
A:tensorflow.python.ops.image_ops_impl.(batch, height, width, depth)->_ImageDimensions(image, rank=4)
A:tensorflow.python.ops.image_ops_impl.paddings->tensorflow.python.ops.array_ops.reshape(array_ops.stack([0, 0, offset_height, after_padding_height, offset_width, after_padding_width, 0, 0]), [4, 2])
A:tensorflow.python.ops.image_ops_impl.padded->tensorflow.python.ops.array_ops.squeeze(padded, squeeze_dims=[0])
A:tensorflow.python.ops.image_ops_impl.cropped->crop_to_bounding_box(image, offset_crop_height, offset_crop_width, min_(target_height, height), min_(target_width, width))
A:tensorflow.python.ops.image_ops_impl.target_height->tensorflow.python.ops.control_flow_ops.with_dependencies(assert_ops, target_height)
A:tensorflow.python.ops.image_ops_impl.target_width->tensorflow.python.ops.control_flow_ops.with_dependencies(assert_ops, target_width)
A:tensorflow.python.ops.image_ops_impl.(_, height, width, _)->tensorflow.python.framework.ops.convert_to_tensor(images, name='images').get_shape().as_list()
A:tensorflow.python.ops.image_ops_impl.offset_crop_width->max_(-width_diff // 2, 0)
A:tensorflow.python.ops.image_ops_impl.offset_pad_width->max_(width_diff // 2, 0)
A:tensorflow.python.ops.image_ops_impl.offset_crop_height->max_(-height_diff // 2, 0)
A:tensorflow.python.ops.image_ops_impl.offset_pad_height->max_(height_diff // 2, 0)
A:tensorflow.python.ops.image_ops_impl.resized->tensorflow.python.ops.array_ops.squeeze(resized, squeeze_dims=[0])
A:tensorflow.python.ops.image_ops_impl.(_, resized_height, resized_width, _)->_ImageDimensions(resized, rank=4)
A:tensorflow.python.ops.image_ops_impl.images->tensorflow.python.framework.ops.convert_to_tensor(images, name='images')
A:tensorflow.python.ops.image_ops_impl.size->tensorflow.python.framework.ops.convert_to_tensor(size, dtypes.int32, name='size')
A:tensorflow.python.ops.image_ops_impl.size_const_as_shape->tensorflow.python.framework.tensor_util.constant_value_as_shape(size)
A:tensorflow.python.ops.image_ops_impl.num_pixels->tensorflow.python.ops.math_ops.reduce_prod(array_ops.shape(image))
A:tensorflow.python.ops.image_ops_impl.image_mean->tensorflow.python.ops.math_ops.reduce_mean(image)
A:tensorflow.python.ops.image_ops_impl.variance->tensorflow.python.ops.gen_nn_ops.relu(variance)
A:tensorflow.python.ops.image_ops_impl.stddev->tensorflow.python.ops.math_ops.sqrt(variance)
A:tensorflow.python.ops.image_ops_impl.min_stddev->tensorflow.python.ops.math_ops.rsqrt(math_ops.cast(num_pixels, dtypes.float32))
A:tensorflow.python.ops.image_ops_impl.pixel_value_scale->tensorflow.python.ops.math_ops.maximum(stddev, min_stddev)
A:tensorflow.python.ops.image_ops_impl.delta->tensorflow.python.ops.random_ops.random_uniform([], -max_delta, max_delta, seed=seed)
A:tensorflow.python.ops.image_ops_impl.contrast_factor->tensorflow.python.ops.random_ops.random_uniform([], lower, upper, seed=seed)
A:tensorflow.python.ops.image_ops_impl.flt_image->convert_image_dtype(image, dtypes.float32)
A:tensorflow.python.ops.image_ops_impl.adjusted->tensorflow.python.ops.gen_image_ops._adjust_contrastv2(flt_images, contrast_factor=contrast_factor, name=name)
A:tensorflow.python.ops.image_ops_impl.flt_images->convert_image_dtype(images, dtypes.float32)
A:tensorflow.python.ops.image_ops_impl.img->tensorflow.python.framework.ops.convert_to_tensor(image, name='img', dtype=dtypes.float32)
A:tensorflow.python.ops.image_ops_impl.scale->tensorflow.python.framework.constant_op.constant(image.dtype.limits[1] - image.dtype.limits[0], dtype=dtypes.float32)
A:tensorflow.python.ops.image_ops_impl.scaled->tensorflow.python.ops.math_ops.multiply(image, scale)
A:tensorflow.python.ops.image_ops_impl.cast->tensorflow.python.ops.math_ops.cast(image, dtype)
A:tensorflow.python.ops.image_ops_impl.rank_1->tensorflow.python.ops.array_ops.expand_dims(array_ops.rank(images) - 1, 0)
A:tensorflow.python.ops.image_ops_impl.gray_float->tensorflow.python.ops.math_ops.reduce_sum(flt_image * rgb_weights, rank_1, keep_dims=True)
A:tensorflow.python.ops.image_ops_impl.multiples->tensorflow.python.ops.array_ops.concat(shape_list, 0)
A:tensorflow.python.ops.image_ops_impl.rgb->tensorflow.python.ops.array_ops.tile(images, multiples, name=name)
A:tensorflow.python.ops.image_ops_impl.fused->os.environ.get('TF_ADJUST_SATURATION_FUSED', '')
A:tensorflow.python.ops.image_ops_impl.hsv->tensorflow.python.ops.gen_image_ops.rgb_to_hsv(flt_image)
A:tensorflow.python.ops.image_ops_impl.hue->tensorflow.python.ops.array_ops.slice(hsv, [0, 0, 0], [-1, -1, 1])
A:tensorflow.python.ops.image_ops_impl.saturation->tensorflow.python.ops.clip_ops.clip_by_value(saturation, 0.0, 1.0)
A:tensorflow.python.ops.image_ops_impl.value->tensorflow.python.ops.array_ops.slice(hsv, [0, 0, 2], [-1, -1, 1])
A:tensorflow.python.ops.image_ops_impl.hsv_altered->tensorflow.python.ops.array_ops.concat([hue, saturation, value], 2)
A:tensorflow.python.ops.image_ops_impl.rgb_altered->tensorflow.python.ops.gen_image_ops.hsv_to_rgb(hsv_altered)
A:tensorflow.python.ops.image_ops_impl.saturation_factor->tensorflow.python.ops.random_ops.random_uniform([], lower, upper, seed=seed)
A:tensorflow.python.ops.image_ops_impl.substr->tensorflow.python.ops.string_ops.substr(contents, 0, 4)
A:tensorflow.python.ops.image_ops_impl.is_gif->tensorflow.python.ops.math_ops.equal(substr, b'GIF8', name='is_gif')
A:tensorflow.python.ops.image_ops_impl.assert_decode->tensorflow.python.ops.control_flow_ops.Assert(is_gif, [decode_msg])
A:tensorflow.python.ops.image_ops_impl.good_channels->tensorflow.python.ops.math_ops.not_equal(gif_channels, 1, name='check_channels')
A:tensorflow.python.ops.image_ops_impl.assert_channels->tensorflow.python.ops.control_flow_ops.Assert(good_channels, [channels_msg])
A:tensorflow.python.ops.image_ops_impl.is_png->tensorflow.python.ops.math_ops.equal(substr, b'\x89PNG', name='is_png')
A:tensorflow.python.ops.image_ops_impl.is_jpeg->tensorflow.python.ops.math_ops.equal(substr, b'\xff\xd8\xff\xe0', name='is_jpeg')
tensorflow.image_impl.ResizeMethod(object)
tensorflow.image_impl._Check3DImage(image,require_static=True)
tensorflow.image_impl._CheckAtLeast3DImage(image,require_static=True)
tensorflow.image_impl._ImageDimensions(image,rank)
tensorflow.image_impl._assert(cond,ex_type,msg)
tensorflow.image_impl._is_tensor(x)
tensorflow.image_impl.adjust_brightness(image,delta)
tensorflow.image_impl.adjust_contrast(images,contrast_factor)
tensorflow.image_impl.adjust_gamma(image,gamma=1,gain=1)
tensorflow.image_impl.adjust_hue(image,delta,name=None)
tensorflow.image_impl.adjust_saturation(image,saturation_factor,name=None)
tensorflow.image_impl.central_crop(image,central_fraction)
tensorflow.image_impl.convert_image_dtype(image,dtype,saturate=False,name=None)
tensorflow.image_impl.crop_to_bounding_box(image,offset_height,offset_width,target_height,target_width)
tensorflow.image_impl.decode_image(contents,channels=None,name=None)
tensorflow.image_impl.fix_image_flip_shape(image,result)
tensorflow.image_impl.flip_left_right(image)
tensorflow.image_impl.flip_up_down(image)
tensorflow.image_impl.grayscale_to_rgb(images,name=None)
tensorflow.image_impl.pad_to_bounding_box(image,offset_height,offset_width,target_height,target_width)
tensorflow.image_impl.per_image_standardization(image)
tensorflow.image_impl.random_brightness(image,max_delta,seed=None)
tensorflow.image_impl.random_contrast(image,lower,upper,seed=None)
tensorflow.image_impl.random_flip_left_right(image,seed=None)
tensorflow.image_impl.random_flip_up_down(image,seed=None)
tensorflow.image_impl.random_hue(image,max_delta,seed=None)
tensorflow.image_impl.random_saturation(image,lower,upper,seed=None)
tensorflow.image_impl.resize_image_with_crop_or_pad(image,target_height,target_width)
tensorflow.image_impl.resize_images(images,size,method=ResizeMethod.BILINEAR,align_corners=False)
tensorflow.image_impl.rgb_to_grayscale(images,name=None)
tensorflow.image_impl.rot90(image,k=1,name=None)
tensorflow.image_impl.total_variation(images,name=None)
tensorflow.image_impl.transpose_image(image)
tensorflow.python.ops.image_ops_impl.ResizeMethod(object)
tensorflow.python.ops.image_ops_impl._Check3DImage(image,require_static=True)
tensorflow.python.ops.image_ops_impl._CheckAtLeast3DImage(image,require_static=True)
tensorflow.python.ops.image_ops_impl._ImageDimensions(image,rank)
tensorflow.python.ops.image_ops_impl._assert(cond,ex_type,msg)
tensorflow.python.ops.image_ops_impl._is_tensor(x)
tensorflow.python.ops.image_ops_impl.adjust_brightness(image,delta)
tensorflow.python.ops.image_ops_impl.adjust_contrast(images,contrast_factor)
tensorflow.python.ops.image_ops_impl.adjust_gamma(image,gamma=1,gain=1)
tensorflow.python.ops.image_ops_impl.adjust_hue(image,delta,name=None)
tensorflow.python.ops.image_ops_impl.adjust_saturation(image,saturation_factor,name=None)
tensorflow.python.ops.image_ops_impl.central_crop(image,central_fraction)
tensorflow.python.ops.image_ops_impl.convert_image_dtype(image,dtype,saturate=False,name=None)
tensorflow.python.ops.image_ops_impl.crop_to_bounding_box(image,offset_height,offset_width,target_height,target_width)
tensorflow.python.ops.image_ops_impl.decode_image(contents,channels=None,name=None)
tensorflow.python.ops.image_ops_impl.fix_image_flip_shape(image,result)
tensorflow.python.ops.image_ops_impl.flip_left_right(image)
tensorflow.python.ops.image_ops_impl.flip_up_down(image)
tensorflow.python.ops.image_ops_impl.grayscale_to_rgb(images,name=None)
tensorflow.python.ops.image_ops_impl.pad_to_bounding_box(image,offset_height,offset_width,target_height,target_width)
tensorflow.python.ops.image_ops_impl.per_image_standardization(image)
tensorflow.python.ops.image_ops_impl.random_brightness(image,max_delta,seed=None)
tensorflow.python.ops.image_ops_impl.random_contrast(image,lower,upper,seed=None)
tensorflow.python.ops.image_ops_impl.random_flip_left_right(image,seed=None)
tensorflow.python.ops.image_ops_impl.random_flip_up_down(image,seed=None)
tensorflow.python.ops.image_ops_impl.random_hue(image,max_delta,seed=None)
tensorflow.python.ops.image_ops_impl.random_saturation(image,lower,upper,seed=None)
tensorflow.python.ops.image_ops_impl.resize_image_with_crop_or_pad(image,target_height,target_width)
tensorflow.python.ops.image_ops_impl.resize_images(images,size,method=ResizeMethod.BILINEAR,align_corners=False)
tensorflow.python.ops.image_ops_impl.rgb_to_grayscale(images,name=None)
tensorflow.python.ops.image_ops_impl.rot90(image,k=1,name=None)
tensorflow.python.ops.image_ops_impl.total_variation(images,name=None)
tensorflow.python.ops.image_ops_impl.transpose_image(image)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/sets_impl.py----------------------------------------
A:tensorflow.python.ops.sets_impl._VALID_DTYPES->set([dtypes.int8, dtypes.int16, dtypes.int32, dtypes.int64, dtypes.uint8, dtypes.uint16, dtypes.string])
A:tensorflow.python.ops.sets_impl.a->tensorflow.python.framework.sparse_tensor.convert_to_tensor_or_sparse_tensor(a, name='a')
A:tensorflow.python.ops.sets_impl.b->tensorflow.python.framework.sparse_tensor.convert_to_tensor_or_sparse_tensor(b, name='b')
A:tensorflow.python.ops.sets_impl.(indices, values, shape)->tensorflow.python.ops.gen_set_ops.dense_to_dense_set_operation(a, b, set_operation, validate_indices)
A:tensorflow.python.ops.sets_impl.(a, b, _)->_convert_to_tensors_or_sparse_tensors(a, b)
A:tensorflow.python.ops.sets_impl.(a, b, flipped)->_convert_to_tensors_or_sparse_tensors(a, b)
tensorflow.python.ops.sets_impl._convert_to_tensors_or_sparse_tensors(a,b)
tensorflow.python.ops.sets_impl._set_operation(a,b,set_operation,validate_indices=True)
tensorflow.python.ops.sets_impl.set_difference(a,b,aminusb=True,validate_indices=True)
tensorflow.python.ops.sets_impl.set_intersection(a,b,validate_indices=True)
tensorflow.python.ops.sets_impl.set_size(a,validate_indices=True)
tensorflow.python.ops.sets_impl.set_union(a,b,validate_indices=True)
tensorflow.sets_impl._convert_to_tensors_or_sparse_tensors(a,b)
tensorflow.sets_impl._set_operation(a,b,set_operation,validate_indices=True)
tensorflow.sets_impl.set_difference(a,b,aminusb=True,validate_indices=True)
tensorflow.sets_impl.set_intersection(a,b,validate_indices=True)
tensorflow.sets_impl.set_size(a,validate_indices=True)
tensorflow.sets_impl.set_union(a,b,validate_indices=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/candidate_sampling_ops.py----------------------------------------
A:tensorflow.python.ops.candidate_sampling_ops.(seed1, seed2)->tensorflow.python.framework.random_seed.get_seed(seed)
tensorflow.ops.candidate_sampling_ops.all_candidate_sampler(true_classes,num_true,num_sampled,unique,seed=None,name=None)
tensorflow.ops.candidate_sampling_ops.compute_accidental_hits(true_classes,sampled_candidates,num_true,seed=None,name=None)
tensorflow.ops.candidate_sampling_ops.fixed_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,vocab_file='',distortion=1.0,num_reserved_ids=0,num_shards=1,shard=0,unigrams=(),seed=None,name=None)
tensorflow.ops.candidate_sampling_ops.learned_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)
tensorflow.ops.candidate_sampling_ops.log_uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)
tensorflow.ops.candidate_sampling_ops.uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)
tensorflow.python.ops.candidate_sampling_ops.all_candidate_sampler(true_classes,num_true,num_sampled,unique,seed=None,name=None)
tensorflow.python.ops.candidate_sampling_ops.compute_accidental_hits(true_classes,sampled_candidates,num_true,seed=None,name=None)
tensorflow.python.ops.candidate_sampling_ops.fixed_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,vocab_file='',distortion=1.0,num_reserved_ids=0,num_shards=1,shard=0,unigrams=(),seed=None,name=None)
tensorflow.python.ops.candidate_sampling_ops.learned_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)
tensorflow.python.ops.candidate_sampling_ops.log_uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)
tensorflow.python.ops.candidate_sampling_ops.uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_nn_ops.py----------------------------------------
A:tensorflow.python.ops.gen_nn_ops.result->_InitOpDefLibrary().apply_op('TopKV2', input=input, k=k, sorted=sorted, name=name)
A:tensorflow.python.ops.gen_nn_ops._BatchNormWithGlobalNormalizationGradOutput->collections.namedtuple('BatchNormWithGlobalNormalizationGrad', __batch_norm_with_global_normalization_grad_outputs)
A:tensorflow.python.ops.gen_nn_ops._FractionalAvgPoolOutput->collections.namedtuple('FractionalAvgPool', _fractional_avg_pool_outputs)
A:tensorflow.python.ops.gen_nn_ops._FractionalMaxPoolOutput->collections.namedtuple('FractionalMaxPool', _fractional_max_pool_outputs)
A:tensorflow.python.ops.gen_nn_ops._FusedBatchNormOutput->collections.namedtuple('FusedBatchNorm', __fused_batch_norm_outputs)
A:tensorflow.python.ops.gen_nn_ops._FusedBatchNormGradOutput->collections.namedtuple('FusedBatchNormGrad', _fused_batch_norm_grad_outputs)
A:tensorflow.python.ops.gen_nn_ops._MaxPoolWithArgmaxOutput->collections.namedtuple('MaxPoolWithArgmax', _max_pool_with_argmax_outputs)
A:tensorflow.python.ops.gen_nn_ops._QuantizedAvgPoolOutput->collections.namedtuple('QuantizedAvgPool', _quantized_avg_pool_outputs)
A:tensorflow.python.ops.gen_nn_ops._QuantizedBatchNormWithGlobalNormalizationOutput->collections.namedtuple('QuantizedBatchNormWithGlobalNormalization', _quantized_batch_norm_with_global_normalization_outputs)
A:tensorflow.python.ops.gen_nn_ops._QuantizedBiasAddOutput->collections.namedtuple('QuantizedBiasAdd', _quantized_bias_add_outputs)
A:tensorflow.python.ops.gen_nn_ops._QuantizedConv2DOutput->collections.namedtuple('QuantizedConv2D', _quantized_conv2d_outputs)
A:tensorflow.python.ops.gen_nn_ops._QuantizedMaxPoolOutput->collections.namedtuple('QuantizedMaxPool', _quantized_max_pool_outputs)
A:tensorflow.python.ops.gen_nn_ops._QuantizedReluOutput->collections.namedtuple('QuantizedRelu', _quantized_relu_outputs)
A:tensorflow.python.ops.gen_nn_ops._QuantizedRelu6Output->collections.namedtuple('QuantizedRelu6', _quantized_relu6_outputs)
A:tensorflow.python.ops.gen_nn_ops._QuantizedReluXOutput->collections.namedtuple('QuantizedReluX', _quantized_relu_x_outputs)
A:tensorflow.python.ops.gen_nn_ops._SoftmaxCrossEntropyWithLogitsOutput->collections.namedtuple('SoftmaxCrossEntropyWithLogits', __softmax_cross_entropy_with_logits_outputs)
A:tensorflow.python.ops.gen_nn_ops._SparseSoftmaxCrossEntropyWithLogitsOutput->collections.namedtuple('SparseSoftmaxCrossEntropyWithLogits', __sparse_softmax_cross_entropy_with_logits_outputs)
A:tensorflow.python.ops.gen_nn_ops._TopKOutput->collections.namedtuple('TopK', __top_k_outputs)
A:tensorflow.python.ops.gen_nn_ops._TopKV2Output->collections.namedtuple('TopKV2', __top_kv2_outputs)
A:tensorflow.python.ops.gen_nn_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_nn_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_nn_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_nn_ops._InitOpDefLibrary()
tensorflow.ops.gen_nn_ops._avg_pool(value,ksize,strides,padding,data_format=None,name=None)
tensorflow.ops.gen_nn_ops._avg_pool_grad(orig_input_shape,grad,ksize,strides,padding,data_format=None,name=None)
tensorflow.ops.gen_nn_ops._batch_norm_with_global_normalization(t,m,v,beta,gamma,variance_epsilon,scale_after_normalization,name=None)
tensorflow.ops.gen_nn_ops._batch_norm_with_global_normalization_grad(t,m,v,gamma,backprop,variance_epsilon,scale_after_normalization,name=None)
tensorflow.ops.gen_nn_ops._bias_add(value,bias,data_format=None,name=None)
tensorflow.ops.gen_nn_ops._bias_add_v1(value,bias,name=None)
tensorflow.ops.gen_nn_ops._elu_grad(gradients,outputs,name=None)
tensorflow.ops.gen_nn_ops._fractional_avg_pool_grad(orig_input_tensor_shape,out_backprop,row_pooling_sequence,col_pooling_sequence,overlapping=None,name=None)
tensorflow.ops.gen_nn_ops._fractional_max_pool_grad(orig_input,orig_output,out_backprop,row_pooling_sequence,col_pooling_sequence,overlapping=None,name=None)
tensorflow.ops.gen_nn_ops._fused_batch_norm(x,scale,offset,mean,variance,epsilon=None,data_format=None,is_training=None,name=None)
tensorflow.ops.gen_nn_ops._log_softmax(logits,name=None)
tensorflow.ops.gen_nn_ops._lrn_grad(input_grads,input_image,output_image,depth_radius=None,bias=None,alpha=None,beta=None,name=None)
tensorflow.ops.gen_nn_ops._max_pool(input,ksize,strides,padding,data_format=None,name=None)
tensorflow.ops.gen_nn_ops._max_pool_grad(orig_input,orig_output,grad,ksize,strides,padding,data_format=None,name=None)
tensorflow.ops.gen_nn_ops._max_pool_grad_with_argmax(input,grad,argmax,ksize,strides,padding,name=None)
tensorflow.ops.gen_nn_ops._relu6(features,name=None)
tensorflow.ops.gen_nn_ops._relu6_grad(gradients,features,name=None)
tensorflow.ops.gen_nn_ops._relu_grad(gradients,features,name=None)
tensorflow.ops.gen_nn_ops._softmax(logits,name=None)
tensorflow.ops.gen_nn_ops._softmax_cross_entropy_with_logits(features,labels,name=None)
tensorflow.ops.gen_nn_ops._softplus_grad(gradients,features,name=None)
tensorflow.ops.gen_nn_ops._softsign_grad(gradients,features,name=None)
tensorflow.ops.gen_nn_ops._sparse_softmax_cross_entropy_with_logits(features,labels,name=None)
tensorflow.ops.gen_nn_ops._top_k(input,k,sorted=None,name=None)
tensorflow.ops.gen_nn_ops._top_kv2(input,k,sorted=None,name=None)
tensorflow.ops.gen_nn_ops.avg_pool3d(input,ksize,strides,padding,name=None)
tensorflow.ops.gen_nn_ops.avg_pool3d_grad(orig_input_shape,grad,ksize,strides,padding,name=None)
tensorflow.ops.gen_nn_ops.bias_add_grad(out_backprop,data_format=None,name=None)
tensorflow.ops.gen_nn_ops.conv2d(input,filter,strides,padding,use_cudnn_on_gpu=None,data_format=None,name=None)
tensorflow.ops.gen_nn_ops.conv2d_backprop_filter(input,filter_sizes,out_backprop,strides,padding,use_cudnn_on_gpu=None,data_format=None,name=None)
tensorflow.ops.gen_nn_ops.conv2d_backprop_input(input_sizes,filter,out_backprop,strides,padding,use_cudnn_on_gpu=None,data_format=None,name=None)
tensorflow.ops.gen_nn_ops.conv3d(input,filter,strides,padding,name=None)
tensorflow.ops.gen_nn_ops.conv3d_backprop_filter(input,filter,out_backprop,strides,padding,name=None)
tensorflow.ops.gen_nn_ops.conv3d_backprop_filter_v2(input,filter_sizes,out_backprop,strides,padding,name=None)
tensorflow.ops.gen_nn_ops.conv3d_backprop_input(input,filter,out_backprop,strides,padding,name=None)
tensorflow.ops.gen_nn_ops.conv3d_backprop_input_v2(input_sizes,filter,out_backprop,strides,padding,name=None)
tensorflow.ops.gen_nn_ops.depthwise_conv2d_native(input,filter,strides,padding,data_format=None,name=None)
tensorflow.ops.gen_nn_ops.depthwise_conv2d_native_backprop_filter(input,filter_sizes,out_backprop,strides,padding,data_format=None,name=None)
tensorflow.ops.gen_nn_ops.depthwise_conv2d_native_backprop_input(input_sizes,filter,out_backprop,strides,padding,data_format=None,name=None)
tensorflow.ops.gen_nn_ops.dilation2d(input,filter,strides,rates,padding,name=None)
tensorflow.ops.gen_nn_ops.dilation2d_backprop_filter(input,filter,out_backprop,strides,rates,padding,name=None)
tensorflow.ops.gen_nn_ops.dilation2d_backprop_input(input,filter,out_backprop,strides,rates,padding,name=None)
tensorflow.ops.gen_nn_ops.elu(features,name=None)
tensorflow.ops.gen_nn_ops.fractional_avg_pool(value,pooling_ratio,pseudo_random=None,overlapping=None,deterministic=None,seed=None,seed2=None,name=None)
tensorflow.ops.gen_nn_ops.fractional_max_pool(value,pooling_ratio,pseudo_random=None,overlapping=None,deterministic=None,seed=None,seed2=None,name=None)
tensorflow.ops.gen_nn_ops.fused_batch_norm_grad(y_backprop,x,scale,reserve_space_1,reserve_space_2,epsilon=None,data_format=None,is_training=None,name=None)
tensorflow.ops.gen_nn_ops.fused_pad_conv2d(input,paddings,filter,mode,strides,padding,name=None)
tensorflow.ops.gen_nn_ops.fused_resize_and_pad_conv2d(input,size,paddings,filter,mode,strides,padding,resize_align_corners=None,name=None)
tensorflow.ops.gen_nn_ops.in_top_k(predictions,targets,k,name=None)
tensorflow.ops.gen_nn_ops.l2_loss(t,name=None)
tensorflow.ops.gen_nn_ops.lrn(input,depth_radius=None,bias=None,alpha=None,beta=None,name=None)
tensorflow.ops.gen_nn_ops.max_pool3d(input,ksize,strides,padding,name=None)
tensorflow.ops.gen_nn_ops.max_pool3d_grad(orig_input,orig_output,grad,ksize,strides,padding,name=None)
tensorflow.ops.gen_nn_ops.max_pool_with_argmax(input,ksize,strides,padding,Targmax=None,name=None)
tensorflow.ops.gen_nn_ops.quantized_avg_pool(input,min_input,max_input,ksize,strides,padding,name=None)
tensorflow.ops.gen_nn_ops.quantized_batch_norm_with_global_normalization(t,t_min,t_max,m,m_min,m_max,v,v_min,v_max,beta,beta_min,beta_max,gamma,gamma_min,gamma_max,out_type,variance_epsilon,scale_after_normalization,name=None)
tensorflow.ops.gen_nn_ops.quantized_bias_add(input,bias,min_input,max_input,min_bias,max_bias,out_type,name=None)
tensorflow.ops.gen_nn_ops.quantized_conv2d(input,filter,min_input,max_input,min_filter,max_filter,strides,padding,out_type=None,name=None)
tensorflow.ops.gen_nn_ops.quantized_max_pool(input,min_input,max_input,ksize,strides,padding,name=None)
tensorflow.ops.gen_nn_ops.quantized_relu(features,min_features,max_features,out_type=None,name=None)
tensorflow.ops.gen_nn_ops.quantized_relu6(features,min_features,max_features,out_type=None,name=None)
tensorflow.ops.gen_nn_ops.quantized_relu_x(features,max_value,min_features,max_features,out_type=None,name=None)
tensorflow.ops.gen_nn_ops.relu(features,name=None)
tensorflow.ops.gen_nn_ops.softplus(features,name=None)
tensorflow.ops.gen_nn_ops.softsign(features,name=None)
tensorflow.python.ops.gen_nn_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_nn_ops._avg_pool(value,ksize,strides,padding,data_format=None,name=None)
tensorflow.python.ops.gen_nn_ops._avg_pool_grad(orig_input_shape,grad,ksize,strides,padding,data_format=None,name=None)
tensorflow.python.ops.gen_nn_ops._batch_norm_with_global_normalization(t,m,v,beta,gamma,variance_epsilon,scale_after_normalization,name=None)
tensorflow.python.ops.gen_nn_ops._batch_norm_with_global_normalization_grad(t,m,v,gamma,backprop,variance_epsilon,scale_after_normalization,name=None)
tensorflow.python.ops.gen_nn_ops._bias_add(value,bias,data_format=None,name=None)
tensorflow.python.ops.gen_nn_ops._bias_add_v1(value,bias,name=None)
tensorflow.python.ops.gen_nn_ops._elu_grad(gradients,outputs,name=None)
tensorflow.python.ops.gen_nn_ops._fractional_avg_pool_grad(orig_input_tensor_shape,out_backprop,row_pooling_sequence,col_pooling_sequence,overlapping=None,name=None)
tensorflow.python.ops.gen_nn_ops._fractional_max_pool_grad(orig_input,orig_output,out_backprop,row_pooling_sequence,col_pooling_sequence,overlapping=None,name=None)
tensorflow.python.ops.gen_nn_ops._fused_batch_norm(x,scale,offset,mean,variance,epsilon=None,data_format=None,is_training=None,name=None)
tensorflow.python.ops.gen_nn_ops._log_softmax(logits,name=None)
tensorflow.python.ops.gen_nn_ops._lrn_grad(input_grads,input_image,output_image,depth_radius=None,bias=None,alpha=None,beta=None,name=None)
tensorflow.python.ops.gen_nn_ops._max_pool(input,ksize,strides,padding,data_format=None,name=None)
tensorflow.python.ops.gen_nn_ops._max_pool_grad(orig_input,orig_output,grad,ksize,strides,padding,data_format=None,name=None)
tensorflow.python.ops.gen_nn_ops._max_pool_grad_with_argmax(input,grad,argmax,ksize,strides,padding,name=None)
tensorflow.python.ops.gen_nn_ops._relu6(features,name=None)
tensorflow.python.ops.gen_nn_ops._relu6_grad(gradients,features,name=None)
tensorflow.python.ops.gen_nn_ops._relu_grad(gradients,features,name=None)
tensorflow.python.ops.gen_nn_ops._softmax(logits,name=None)
tensorflow.python.ops.gen_nn_ops._softmax_cross_entropy_with_logits(features,labels,name=None)
tensorflow.python.ops.gen_nn_ops._softplus_grad(gradients,features,name=None)
tensorflow.python.ops.gen_nn_ops._softsign_grad(gradients,features,name=None)
tensorflow.python.ops.gen_nn_ops._sparse_softmax_cross_entropy_with_logits(features,labels,name=None)
tensorflow.python.ops.gen_nn_ops._top_k(input,k,sorted=None,name=None)
tensorflow.python.ops.gen_nn_ops._top_kv2(input,k,sorted=None,name=None)
tensorflow.python.ops.gen_nn_ops.avg_pool3d(input,ksize,strides,padding,name=None)
tensorflow.python.ops.gen_nn_ops.avg_pool3d_grad(orig_input_shape,grad,ksize,strides,padding,name=None)
tensorflow.python.ops.gen_nn_ops.bias_add_grad(out_backprop,data_format=None,name=None)
tensorflow.python.ops.gen_nn_ops.conv2d(input,filter,strides,padding,use_cudnn_on_gpu=None,data_format=None,name=None)
tensorflow.python.ops.gen_nn_ops.conv2d_backprop_filter(input,filter_sizes,out_backprop,strides,padding,use_cudnn_on_gpu=None,data_format=None,name=None)
tensorflow.python.ops.gen_nn_ops.conv2d_backprop_input(input_sizes,filter,out_backprop,strides,padding,use_cudnn_on_gpu=None,data_format=None,name=None)
tensorflow.python.ops.gen_nn_ops.conv3d(input,filter,strides,padding,name=None)
tensorflow.python.ops.gen_nn_ops.conv3d_backprop_filter(input,filter,out_backprop,strides,padding,name=None)
tensorflow.python.ops.gen_nn_ops.conv3d_backprop_filter_v2(input,filter_sizes,out_backprop,strides,padding,name=None)
tensorflow.python.ops.gen_nn_ops.conv3d_backprop_input(input,filter,out_backprop,strides,padding,name=None)
tensorflow.python.ops.gen_nn_ops.conv3d_backprop_input_v2(input_sizes,filter,out_backprop,strides,padding,name=None)
tensorflow.python.ops.gen_nn_ops.depthwise_conv2d_native(input,filter,strides,padding,data_format=None,name=None)
tensorflow.python.ops.gen_nn_ops.depthwise_conv2d_native_backprop_filter(input,filter_sizes,out_backprop,strides,padding,data_format=None,name=None)
tensorflow.python.ops.gen_nn_ops.depthwise_conv2d_native_backprop_input(input_sizes,filter,out_backprop,strides,padding,data_format=None,name=None)
tensorflow.python.ops.gen_nn_ops.dilation2d(input,filter,strides,rates,padding,name=None)
tensorflow.python.ops.gen_nn_ops.dilation2d_backprop_filter(input,filter,out_backprop,strides,rates,padding,name=None)
tensorflow.python.ops.gen_nn_ops.dilation2d_backprop_input(input,filter,out_backprop,strides,rates,padding,name=None)
tensorflow.python.ops.gen_nn_ops.elu(features,name=None)
tensorflow.python.ops.gen_nn_ops.fractional_avg_pool(value,pooling_ratio,pseudo_random=None,overlapping=None,deterministic=None,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_nn_ops.fractional_max_pool(value,pooling_ratio,pseudo_random=None,overlapping=None,deterministic=None,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_nn_ops.fused_batch_norm_grad(y_backprop,x,scale,reserve_space_1,reserve_space_2,epsilon=None,data_format=None,is_training=None,name=None)
tensorflow.python.ops.gen_nn_ops.fused_pad_conv2d(input,paddings,filter,mode,strides,padding,name=None)
tensorflow.python.ops.gen_nn_ops.fused_resize_and_pad_conv2d(input,size,paddings,filter,mode,strides,padding,resize_align_corners=None,name=None)
tensorflow.python.ops.gen_nn_ops.in_top_k(predictions,targets,k,name=None)
tensorflow.python.ops.gen_nn_ops.l2_loss(t,name=None)
tensorflow.python.ops.gen_nn_ops.lrn(input,depth_radius=None,bias=None,alpha=None,beta=None,name=None)
tensorflow.python.ops.gen_nn_ops.max_pool3d(input,ksize,strides,padding,name=None)
tensorflow.python.ops.gen_nn_ops.max_pool3d_grad(orig_input,orig_output,grad,ksize,strides,padding,name=None)
tensorflow.python.ops.gen_nn_ops.max_pool_with_argmax(input,ksize,strides,padding,Targmax=None,name=None)
tensorflow.python.ops.gen_nn_ops.quantized_avg_pool(input,min_input,max_input,ksize,strides,padding,name=None)
tensorflow.python.ops.gen_nn_ops.quantized_batch_norm_with_global_normalization(t,t_min,t_max,m,m_min,m_max,v,v_min,v_max,beta,beta_min,beta_max,gamma,gamma_min,gamma_max,out_type,variance_epsilon,scale_after_normalization,name=None)
tensorflow.python.ops.gen_nn_ops.quantized_bias_add(input,bias,min_input,max_input,min_bias,max_bias,out_type,name=None)
tensorflow.python.ops.gen_nn_ops.quantized_conv2d(input,filter,min_input,max_input,min_filter,max_filter,strides,padding,out_type=None,name=None)
tensorflow.python.ops.gen_nn_ops.quantized_max_pool(input,min_input,max_input,ksize,strides,padding,name=None)
tensorflow.python.ops.gen_nn_ops.quantized_relu(features,min_features,max_features,out_type=None,name=None)
tensorflow.python.ops.gen_nn_ops.quantized_relu6(features,min_features,max_features,out_type=None,name=None)
tensorflow.python.ops.gen_nn_ops.quantized_relu_x(features,max_value,min_features,max_features,out_type=None,name=None)
tensorflow.python.ops.gen_nn_ops.relu(features,name=None)
tensorflow.python.ops.gen_nn_ops.softplus(features,name=None)
tensorflow.python.ops.gen_nn_ops.softsign(features,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_resource_variable_ops.py----------------------------------------
A:tensorflow.python.ops.gen_resource_variable_ops.result->_InitOpDefLibrary().apply_op('VarIsInitializedOp', resource=resource, name=name)
A:tensorflow.python.ops.gen_resource_variable_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_resource_variable_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_resource_variable_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_resource_variable_ops._InitOpDefLibrary()
tensorflow.ops.gen_resource_variable_ops.assign_add_variable_op(resource,value,name=None)
tensorflow.ops.gen_resource_variable_ops.assign_sub_variable_op(resource,value,name=None)
tensorflow.ops.gen_resource_variable_ops.assign_variable_op(resource,value,name=None)
tensorflow.ops.gen_resource_variable_ops.destroy_resource_op(resource,ignore_lookup_error=None,name=None)
tensorflow.ops.gen_resource_variable_ops.read_variable_op(resource,dtype,name=None)
tensorflow.ops.gen_resource_variable_ops.resource_gather(resource,indices,dtype,validate_indices=None,name=None)
tensorflow.ops.gen_resource_variable_ops.resource_scatter_add(resource,indices,updates,name=None)
tensorflow.ops.gen_resource_variable_ops.var_handle_op(dtype,shape,container=None,shared_name=None,name=None)
tensorflow.ops.gen_resource_variable_ops.var_is_initialized_op(resource,name=None)
tensorflow.python.ops.gen_resource_variable_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_resource_variable_ops.assign_add_variable_op(resource,value,name=None)
tensorflow.python.ops.gen_resource_variable_ops.assign_sub_variable_op(resource,value,name=None)
tensorflow.python.ops.gen_resource_variable_ops.assign_variable_op(resource,value,name=None)
tensorflow.python.ops.gen_resource_variable_ops.destroy_resource_op(resource,ignore_lookup_error=None,name=None)
tensorflow.python.ops.gen_resource_variable_ops.read_variable_op(resource,dtype,name=None)
tensorflow.python.ops.gen_resource_variable_ops.resource_gather(resource,indices,dtype,validate_indices=None,name=None)
tensorflow.python.ops.gen_resource_variable_ops.resource_scatter_add(resource,indices,updates,name=None)
tensorflow.python.ops.gen_resource_variable_ops.var_handle_op(dtype,shape,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_resource_variable_ops.var_is_initialized_op(resource,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/state_ops.py----------------------------------------
A:tensorflow.python.ops.state_ops.shape->tensorflow.python.framework.tensor_shape.unknown_shape()
A:tensorflow.python.ops.state_ops.ret->tensorflow.python.ops.gen_state_ops._variable(shape=shape, dtype=dtype, name=name, container=container, shared_name=shared_name)
A:tensorflow.python.ops.state_ops.value->tensorflow.python.framework.ops.convert_to_tensor(value, name='value')
A:tensorflow.python.ops.state_ops.init->tensorflow.python.framework.ops.convert_to_tensor(init, name='init')
tensorflow.python.ops.state_ops.assign(ref,value,validate_shape=None,use_locking=None,name=None)
tensorflow.python.ops.state_ops.assign_add(ref,value,use_locking=None,name=None)
tensorflow.python.ops.state_ops.assign_sub(ref,value,use_locking=None,name=None)
tensorflow.python.ops.state_ops.init_variable(v,init,name='init')
tensorflow.python.ops.state_ops.is_variable_initialized(ref,name=None)
tensorflow.python.ops.state_ops.variable_op(shape,dtype,name='Variable',set_shape=True,container='',shared_name='')
tensorflow.python.ops.state_ops.variable_op_v2(shape,dtype,name='Variable',container='',shared_name='')
tensorflow.state_ops.assign(ref,value,validate_shape=None,use_locking=None,name=None)
tensorflow.state_ops.assign_add(ref,value,use_locking=None,name=None)
tensorflow.state_ops.assign_sub(ref,value,use_locking=None,name=None)
tensorflow.state_ops.init_variable(v,init,name='init')
tensorflow.state_ops.is_variable_initialized(ref,name=None)
tensorflow.state_ops.variable_op(shape,dtype,name='Variable',set_shape=True,container='',shared_name='')
tensorflow.state_ops.variable_op_v2(shape,dtype,name='Variable',container='',shared_name='')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/math_ops.py----------------------------------------
A:tensorflow.python.ops.math_ops.argmax.__doc__->tensorflow.python.ops.gen_math_ops.arg_max.__doc__.replace('dimensions', 'axes').replace('dimension', 'axis')
A:tensorflow.python.ops.math_ops.argmin.__doc__->tensorflow.python.ops.gen_math_ops.arg_min.__doc__.replace('dimensions', 'axes').replace('dimension', 'axis')
A:tensorflow.python.ops.math_ops.x_abs->tensorflow.python.ops.gen_math_ops._abs(x.values, name=name)
A:tensorflow.python.ops.math_ops.x->tensorflow.python.framework.ops.convert_to_tensor(x, name='x')
A:tensorflow.python.ops.math_ops.multiply.__doc__->tensorflow.python.ops.gen_math_ops._mul.__doc__.replace('Mul', '`tf.multiply`')
A:tensorflow.python.ops.math_ops.subtract.__doc__->tensorflow.python.ops.gen_math_ops._sub.__doc__.replace('`Sub`', '`tf.subtract`')
A:tensorflow.python.ops.math_ops.x_neg->tensorflow.python.ops.gen_math_ops._neg(x.values, name=name)
A:tensorflow.python.ops.math_ops.x_sign->tensorflow.python.ops.gen_math_ops.sign(x.values, name=name)
A:tensorflow.python.ops.math_ops.x_square->tensorflow.python.ops.gen_math_ops.square(x.values, name=name)
A:tensorflow.python.ops.math_ops.x_sqrt->tensorflow.python.ops.gen_math_ops.sqrt(x.values, name=name)
A:tensorflow.python.ops.math_ops.x_erf->tensorflow.python.ops.gen_math_ops.erf(x.values, name=name)
A:tensorflow.python.ops.math_ops.scalar->tensorflow.python.framework.ops.convert_to_tensor(scalar, dtype=x.dtype.base_dtype, name='scalar')
A:tensorflow.python.ops.math_ops.shape->shape.merge_with(input_tensor.get_shape()).merge_with(input_tensor.get_shape())
A:tensorflow.python.ops.math_ops.real->tensorflow.python.framework.ops.convert_to_tensor(real, name='real')
A:tensorflow.python.ops.math_ops.imag->tensorflow.python.framework.ops.convert_to_tensor(imag, name='imag')
A:tensorflow.python.ops.math_ops.values_cast->cast(x.values, base_type, name=name)
A:tensorflow.python.ops.math_ops.value->tensorflow.python.ops.gen_math_ops.minimum(value, ops.convert_to_tensor(dtype.max, dtype=value.dtype, name='max'))
A:tensorflow.python.ops.math_ops.y->tensorflow.python.framework.ops.convert_to_tensor(y, name='y', dtype=x.dtype.base_dtype)
A:tensorflow.python.ops.math_ops.sp_values->cast(sp_values, dtype)
A:tensorflow.python.ops.math_ops.is_tensor_y->isinstance(y, ops.Tensor)
A:tensorflow.python.ops.math_ops.new_vals->tensorflow.python.ops.gen_sparse_ops.sparse_dense_cwise_mul(y.indices, y.values, y.dense_shape, x, name)
A:tensorflow.python.ops.math_ops.start->cast(start, inferred_dtype)
A:tensorflow.python.ops.math_ops.limit->cast(limit, inferred_dtype)
A:tensorflow.python.ops.math_ops.delta->cast(delta, inferred_dtype)
A:tensorflow.python.ops.math_ops.inferred_dtype->max([arg.dtype for arg in [start, limit, delta]], key=dtype_hierarchy.index)
A:tensorflow.python.ops.math_ops.input_tensor->tensorflow.python.framework.ops.convert_to_tensor(input_tensor, name='input_tensor')
A:tensorflow.python.ops.math_ops.zero->tensorflow.python.framework.ops.convert_to_tensor(input_tensor, name='input_tensor').dtype.as_numpy_dtype()
A:tensorflow.python.ops.math_ops.my_max->tensorflow.python.ops.array_ops.stop_gradient(reduce_max(input_tensor, axis=axis, reduction_indices=reduction_indices, keep_dims=True))
A:tensorflow.python.ops.math_ops.result->tensorflow.python.ops.array_ops.squeeze(result, axis)
A:tensorflow.python.ops.math_ops.a->tensorflow.python.framework.ops.convert_to_tensor(a, name='a')
A:tensorflow.python.ops.math_ops.b->tensorflow.python.framework.ops.convert_to_tensor(b, name='b')
A:tensorflow.python.ops.math_ops.a_shape->tensorflow.python.framework.ops.convert_to_tensor(a, name='a').get_shape()
A:tensorflow.python.ops.math_ops.b_shape->tensorflow.python.framework.ops.convert_to_tensor(b, name='b').get_shape()
A:tensorflow.python.ops.math_ops.k->int(a_shape[1])
A:tensorflow.python.ops.math_ops.output_shape->tensorflow.python.framework.graph_util.tensor_shape_from_node_def_name(graph, node.name)
A:tensorflow.python.ops.math_ops.output_count->numpy.prod(output_shape.as_list())
A:tensorflow.python.ops.math_ops.x_shape->tensorflow.python.ops.array_ops.shape_internal(x, optimize=optimize)
A:tensorflow.python.ops.math_ops.inputs->tensorflow.python.framework.ops.convert_n_to_tensor_or_indexed_slices(inputs)
A:tensorflow.python.ops.math_ops.var->tensorflow.python.ops.gen_state_ops._temporary_variable(shape=tensor_shape.vector(0), dtype=tensor_dtype)
A:tensorflow.python.ops.math_ops.zeros->tensorflow.python.ops.array_ops.zeros_like(gen_control_flow_ops._merge(inputs)[0])
A:tensorflow.python.ops.math_ops.ref->tensorflow.python.ops.state_ops.assign(var, zeros, validate_shape=False)
A:tensorflow.python.ops.math_ops.x_tanh->tensorflow.python.ops.gen_math_ops._tanh(x.values, name=name)
A:tensorflow.python.ops.math_ops.arr->tensorflow.python.framework.ops.convert_to_tensor(arr, name='arr', dtype=dtypes.int32)
A:tensorflow.python.ops.math_ops.minlength->tensorflow.python.framework.ops.convert_to_tensor(minlength, name='minlength', dtype=dtypes.int32)
A:tensorflow.python.ops.math_ops.output_size->tensorflow.python.ops.gen_math_ops.minimum(maxlength, output_size)
A:tensorflow.python.ops.math_ops.maxlength->tensorflow.python.framework.ops.convert_to_tensor(maxlength, name='maxlength', dtype=dtypes.int32)
A:tensorflow.python.ops.math_ops.input_shape->to_int32(input_shape)
A:tensorflow.python.ops.math_ops.axes->tensorflow.python.framework.ops.convert_to_tensor(axes, name='axes', dtype=dtypes.int32)
A:tensorflow.python.ops.math_ops.input_rank->tensorflow.python.ops.array_ops.size(input_shape)
A:tensorflow.python.ops.math_ops.axes_shape->tensorflow.python.ops.array_ops.shape(axes)
A:tensorflow.python.ops.math_ops.shape_a->tensorflow.python.ops.array_ops.shape(a)
A:tensorflow.python.ops.math_ops.prod_free->int(np.prod([shape_a[i] for i in free]))
A:tensorflow.python.ops.math_ops.prod_axes->int(np.prod([shape_a[i] for i in axes]))
A:tensorflow.python.ops.math_ops.reshaped_a->tensorflow.python.ops.array_ops.reshape(array_ops.transpose(a, perm), new_shape)
A:tensorflow.python.ops.math_ops.rank_a->tensorflow.python.ops.array_ops.rank(a)
A:tensorflow.python.ops.math_ops.(free, _)->tensorflow.python.ops.array_ops.setdiff1d(range(rank_a), axes)
A:tensorflow.python.ops.math_ops.free_dims->tensorflow.python.ops.array_ops.gather(shape_a, free)
A:tensorflow.python.ops.math_ops.axes_dims->tensorflow.python.ops.array_ops.gather(shape_a, axes)
A:tensorflow.python.ops.math_ops.prod_free_dims->reduce_prod(free_dims)
A:tensorflow.python.ops.math_ops.prod_axes_dims->reduce_prod(axes_dims)
A:tensorflow.python.ops.math_ops.perm->tensorflow.python.ops.array_ops.concat([free, axes], 0)
A:tensorflow.python.ops.math_ops.new_shape->tensorflow.python.ops.array_ops.stack([prod_free_dims, prod_axes_dims])
A:tensorflow.python.ops.math_ops.rank->tensorflow.python.ops.array_ops.rank(a)
A:tensorflow.python.ops.math_ops.(a_axes, b_axes)->_tensordot_axes(a, axes)
A:tensorflow.python.ops.math_ops.(a_reshape, a_free_dims, a_free_dims_static)->_tensordot_reshape(a, a_axes)
A:tensorflow.python.ops.math_ops.(b_reshape, b_free_dims, b_free_dims_static)->_tensordot_reshape(b, b_axes, True)
A:tensorflow.python.ops.math_ops.ab_matmul->matmul(a_reshape, b_reshape)
A:tensorflow.python.ops.math_ops.a_free_dims->tensorflow.python.framework.ops.convert_to_tensor(a_free_dims, dtype=dtypes.int32)
A:tensorflow.python.ops.math_ops.b_free_dims->tensorflow.python.framework.ops.convert_to_tensor(b_free_dims, dtype=dtypes.int32)
A:tensorflow.python.ops.math_ops.product->tensorflow.python.ops.array_ops.reshape(ab_matmul, array_ops.concat([a_free_dims, b_free_dims], 0), name=name)
tensorflow.math_ops.DivideDelegateWithName(self,x,name)
tensorflow.math_ops.DivideDelegateWithName.__div__(self,y)
tensorflow.math_ops.DivideDelegateWithName.__floordiv__(self,y)
tensorflow.math_ops.DivideDelegateWithName.__truediv__(self,y)
tensorflow.math_ops._BroadcastShape(op)
tensorflow.math_ops._OverrideBinaryOperatorHelper(func,op_name,clazz_object=ops.Tensor)
tensorflow.math_ops._ReductionDims(x,axis,reduction_indices)
tensorflow.math_ops._as_indexed_slices(x,optimize=True)
tensorflow.math_ops._as_indexed_slices_list(inputs,optimize=True)
tensorflow.math_ops._calc_mat_mul_flops(graph,node)
tensorflow.math_ops._div_python2(x,y,name=None)
tensorflow.math_ops._mul(x,y,name=None)
tensorflow.math_ops._mul_dispatch(x,y,name=None)
tensorflow.math_ops._neg(x,name=None)
tensorflow.math_ops._sparse_dense_truediv(sp_indices,sp_values,sp_shape,y,name=None)
tensorflow.math_ops._sub(x,y,name=None)
tensorflow.math_ops._truediv_python3(x,y,name=None)
tensorflow.math_ops.abs(x,name=None)
tensorflow.math_ops.accumulate_n(inputs,shape=None,tensor_dtype=None,name=None)
tensorflow.math_ops.add_n(inputs,name=None)
tensorflow.math_ops.argmax(input,axis=None,name=None,dimension=None)
tensorflow.math_ops.argmin(input,axis=None,name=None,dimension=None)
tensorflow.math_ops.bincount(arr,weights=None,minlength=None,maxlength=None,dtype=dtypes.int32)
tensorflow.math_ops.cast(x,dtype,name=None)
tensorflow.math_ops.complex(real,imag,name=None)
tensorflow.math_ops.conj(x,name=None)
tensorflow.math_ops.count_nonzero(input_tensor,axis=None,keep_dims=False,dtype=dtypes.int64,name=None,reduction_indices=None)
tensorflow.math_ops.cumprod(x,axis=0,exclusive=False,reverse=False,name=None)
tensorflow.math_ops.cumsum(x,axis=0,exclusive=False,reverse=False,name=None)
tensorflow.math_ops.div(x,y,name=None)
tensorflow.math_ops.divide(x,y,name=None)
tensorflow.math_ops.erf(x,name=None)
tensorflow.math_ops.floordiv(x,y,name=None)
tensorflow.math_ops.imag(input,name=None)
tensorflow.math_ops.logical_xor(x,y,name='LogicalXor')
tensorflow.math_ops.matmul(a,b,transpose_a=False,transpose_b=False,adjoint_a=False,adjoint_b=False,a_is_sparse=False,b_is_sparse=False,name=None)
tensorflow.math_ops.multiply(x,y,name=None)
tensorflow.math_ops.negative(x,name=None)
tensorflow.math_ops.pow(x,y,name=None)
tensorflow.math_ops.range(start,limit=None,delta=1,dtype=None,name='range')
tensorflow.math_ops.real(input,name=None)
tensorflow.math_ops.reduce_all(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.math_ops.reduce_any(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.math_ops.reduce_logsumexp(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.math_ops.reduce_max(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.math_ops.reduce_mean(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.math_ops.reduce_min(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.math_ops.reduce_prod(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.math_ops.reduce_sum(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.math_ops.reduced_shape(input_shape,axes)
tensorflow.math_ops.round(x,name=None)
tensorflow.math_ops.saturate_cast(value,dtype,name=None)
tensorflow.math_ops.scalar_mul(scalar,x)
tensorflow.math_ops.sigmoid(x,name=None)
tensorflow.math_ops.sign(x,name=None)
tensorflow.math_ops.sqrt(x,name=None)
tensorflow.math_ops.square(x,name=None)
tensorflow.math_ops.subtract(x,y,name=None)
tensorflow.math_ops.tanh(x,name=None)
tensorflow.math_ops.tensordot(a,b,axes,name=None)
tensorflow.math_ops.to_bfloat16(x,name='ToBFloat16')
tensorflow.math_ops.to_double(x,name='ToDouble')
tensorflow.math_ops.to_float(x,name='ToFloat')
tensorflow.math_ops.to_int32(x,name='ToInt32')
tensorflow.math_ops.to_int64(x,name='ToInt64')
tensorflow.math_ops.trace(x,name=None)
tensorflow.math_ops.truediv(x,y,name=None)
tensorflow.python.ops.math_ops.DivideDelegateWithName(self,x,name)
tensorflow.python.ops.math_ops.DivideDelegateWithName.__div__(self,y)
tensorflow.python.ops.math_ops.DivideDelegateWithName.__floordiv__(self,y)
tensorflow.python.ops.math_ops.DivideDelegateWithName.__init__(self,x,name)
tensorflow.python.ops.math_ops.DivideDelegateWithName.__truediv__(self,y)
tensorflow.python.ops.math_ops._BroadcastShape(op)
tensorflow.python.ops.math_ops._OverrideBinaryOperatorHelper(func,op_name,clazz_object=ops.Tensor)
tensorflow.python.ops.math_ops._ReductionDims(x,axis,reduction_indices)
tensorflow.python.ops.math_ops._as_indexed_slices(x,optimize=True)
tensorflow.python.ops.math_ops._as_indexed_slices_list(inputs,optimize=True)
tensorflow.python.ops.math_ops._calc_mat_mul_flops(graph,node)
tensorflow.python.ops.math_ops._div_python2(x,y,name=None)
tensorflow.python.ops.math_ops._mul(x,y,name=None)
tensorflow.python.ops.math_ops._mul_dispatch(x,y,name=None)
tensorflow.python.ops.math_ops._neg(x,name=None)
tensorflow.python.ops.math_ops._sparse_dense_truediv(sp_indices,sp_values,sp_shape,y,name=None)
tensorflow.python.ops.math_ops._sub(x,y,name=None)
tensorflow.python.ops.math_ops._truediv_python3(x,y,name=None)
tensorflow.python.ops.math_ops.abs(x,name=None)
tensorflow.python.ops.math_ops.accumulate_n(inputs,shape=None,tensor_dtype=None,name=None)
tensorflow.python.ops.math_ops.add_n(inputs,name=None)
tensorflow.python.ops.math_ops.argmax(input,axis=None,name=None,dimension=None)
tensorflow.python.ops.math_ops.argmin(input,axis=None,name=None,dimension=None)
tensorflow.python.ops.math_ops.bincount(arr,weights=None,minlength=None,maxlength=None,dtype=dtypes.int32)
tensorflow.python.ops.math_ops.cast(x,dtype,name=None)
tensorflow.python.ops.math_ops.complex(real,imag,name=None)
tensorflow.python.ops.math_ops.conj(x,name=None)
tensorflow.python.ops.math_ops.count_nonzero(input_tensor,axis=None,keep_dims=False,dtype=dtypes.int64,name=None,reduction_indices=None)
tensorflow.python.ops.math_ops.cumprod(x,axis=0,exclusive=False,reverse=False,name=None)
tensorflow.python.ops.math_ops.cumsum(x,axis=0,exclusive=False,reverse=False,name=None)
tensorflow.python.ops.math_ops.div(x,y,name=None)
tensorflow.python.ops.math_ops.divide(x,y,name=None)
tensorflow.python.ops.math_ops.erf(x,name=None)
tensorflow.python.ops.math_ops.floordiv(x,y,name=None)
tensorflow.python.ops.math_ops.imag(input,name=None)
tensorflow.python.ops.math_ops.logical_xor(x,y,name='LogicalXor')
tensorflow.python.ops.math_ops.matmul(a,b,transpose_a=False,transpose_b=False,adjoint_a=False,adjoint_b=False,a_is_sparse=False,b_is_sparse=False,name=None)
tensorflow.python.ops.math_ops.multiply(x,y,name=None)
tensorflow.python.ops.math_ops.negative(x,name=None)
tensorflow.python.ops.math_ops.pow(x,y,name=None)
tensorflow.python.ops.math_ops.range(start,limit=None,delta=1,dtype=None,name='range')
tensorflow.python.ops.math_ops.real(input,name=None)
tensorflow.python.ops.math_ops.reduce_all(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.python.ops.math_ops.reduce_any(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.python.ops.math_ops.reduce_logsumexp(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.python.ops.math_ops.reduce_max(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.python.ops.math_ops.reduce_mean(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.python.ops.math_ops.reduce_min(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.python.ops.math_ops.reduce_prod(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.python.ops.math_ops.reduce_sum(input_tensor,axis=None,keep_dims=False,name=None,reduction_indices=None)
tensorflow.python.ops.math_ops.reduced_shape(input_shape,axes)
tensorflow.python.ops.math_ops.round(x,name=None)
tensorflow.python.ops.math_ops.saturate_cast(value,dtype,name=None)
tensorflow.python.ops.math_ops.scalar_mul(scalar,x)
tensorflow.python.ops.math_ops.sigmoid(x,name=None)
tensorflow.python.ops.math_ops.sign(x,name=None)
tensorflow.python.ops.math_ops.sqrt(x,name=None)
tensorflow.python.ops.math_ops.square(x,name=None)
tensorflow.python.ops.math_ops.subtract(x,y,name=None)
tensorflow.python.ops.math_ops.tanh(x,name=None)
tensorflow.python.ops.math_ops.tensordot(a,b,axes,name=None)
tensorflow.python.ops.math_ops.to_bfloat16(x,name='ToBFloat16')
tensorflow.python.ops.math_ops.to_double(x,name='ToDouble')
tensorflow.python.ops.math_ops.to_float(x,name='ToFloat')
tensorflow.python.ops.math_ops.to_int32(x,name='ToInt32')
tensorflow.python.ops.math_ops.to_int64(x,name='ToInt64')
tensorflow.python.ops.math_ops.trace(x,name=None)
tensorflow.python.ops.math_ops.truediv(x,y,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/linalg_grad.py----------------------------------------
A:tensorflow.python.ops.linalg_grad.a_adj_inv->tensorflow.python.ops.linalg_ops.matrix_inverse(a, adjoint=True)
A:tensorflow.python.ops.linalg_grad.multipliers->tensorflow.python.ops.array_ops.reshape(grad * c, array_ops.concat([array_ops.shape(c), [1, 1]], 0))
A:tensorflow.python.ops.linalg_grad.adjoint_a->op.get_attr('adjoint')
A:tensorflow.python.ops.linalg_grad.grad_b->tensorflow.python.ops.linalg_ops.matrix_triangular_solve(a, grad, lower=lower_a, adjoint=not adjoint_a)
A:tensorflow.python.ops.linalg_grad.l2_regularizer->tensorflow.python.ops.math_ops.cast(op.inputs[2], a.dtype.base_dtype)
A:tensorflow.python.ops.linalg_grad.a_shape->tensorflow.python.ops.array_ops.shape(a)
A:tensorflow.python.ops.linalg_grad.identity->tensorflow.python.ops.linalg_ops.eye(m, batch_shape=batch_shape, dtype=a.dtype)
A:tensorflow.python.ops.linalg_grad.chol->tensorflow.python.ops.linalg_ops.cholesky(gramian)
A:tensorflow.python.ops.linalg_grad.z->tensorflow.python.ops.linalg_ops.cholesky_solve(chol, grad)
A:tensorflow.python.ops.linalg_grad.xzt->tensorflow.python.ops.math_ops.matmul(x, z, adjoint_b=True)
A:tensorflow.python.ops.linalg_grad.tmp->tensorflow.python.ops.linalg_ops.cholesky_solve(chol, b)
A:tensorflow.python.ops.linalg_grad.a1->tensorflow.python.ops.math_ops.matmul(tmp, a, adjoint_a=True)
A:tensorflow.python.ops.linalg_grad.a2->tensorflow.python.ops.math_ops.matmul(tmp, a2, adjoint_b=True)
A:tensorflow.python.ops.linalg_grad.fast->op.get_attr('fast')
A:tensorflow.python.ops.linalg_grad.lower_a->op.get_attr('lower')
A:tensorflow.python.ops.linalg_grad.grad_a->tensorflow.python.ops.array_ops.matrix_set_diag(grad_a, 0.5 * array_ops.matrix_diag_part(grad_a))
A:tensorflow.python.ops.linalg_grad.f->tensorflow.python.ops.array_ops.matrix_set_diag(math_ops.reciprocal(array_ops.expand_dims(e, -2) - array_ops.expand_dims(e, -1)), array_ops.zeros_like(e))
tensorflow.ops.linalg_grad._CholeskyGrad(op,grad)
tensorflow.ops.linalg_grad._MatrixDeterminantGrad(op,grad)
tensorflow.ops.linalg_grad._MatrixInverseGrad(op,grad)
tensorflow.ops.linalg_grad._MatrixSolveGrad(op,grad)
tensorflow.ops.linalg_grad._MatrixSolveLsGrad(op,grad)
tensorflow.ops.linalg_grad._MatrixTriangularSolveGrad(op,grad)
tensorflow.ops.linalg_grad._SelfAdjointEigV2Grad(op,grad_e,grad_v)
tensorflow.python.ops.linalg_grad._CholeskyGrad(op,grad)
tensorflow.python.ops.linalg_grad._MatrixDeterminantGrad(op,grad)
tensorflow.python.ops.linalg_grad._MatrixInverseGrad(op,grad)
tensorflow.python.ops.linalg_grad._MatrixSolveGrad(op,grad)
tensorflow.python.ops.linalg_grad._MatrixSolveLsGrad(op,grad)
tensorflow.python.ops.linalg_grad._MatrixTriangularSolveGrad(op,grad)
tensorflow.python.ops.linalg_grad._SelfAdjointEigV2Grad(op,grad_e,grad_v)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/data_flow_ops.py----------------------------------------
A:tensorflow.python.ops.data_flow_ops.s1->tensorflow.python.framework.tensor_shape.TensorShape(s1)
A:tensorflow.python.ops.data_flow_ops.s2->tensorflow.python.framework.tensor_shape.TensorShape(s2)
A:tensorflow.python.ops.data_flow_ops.queue_refs->tensorflow.python.ops.array_ops.stack([x.queue_ref for x in queues])
A:tensorflow.python.ops.data_flow_ops.selected_queue->tensorflow.python.ops.array_ops.gather(queue_refs, index)
A:tensorflow.python.ops.data_flow_ops.vals->self._check_put_dtypes(values)
A:tensorflow.python.ops.data_flow_ops.batch_dim->tensorflow.python.framework.tensor_shape.Dimension(tensor_util.constant_value(op.inputs[1]))
A:tensorflow.python.ops.data_flow_ops.ret->tensorflow.python.ops.gen_data_flow_ops.unstage(dtypes=self._dtypes, shared_name=self._name, name=name)
A:tensorflow.python.ops.data_flow_ops.dtypes->_as_type_list(dtypes)
A:tensorflow.python.ops.data_flow_ops.shapes->_as_shape_list(shapes, self._types)
A:tensorflow.python.ops.data_flow_ops.names->_as_name_list(names, dtypes)
A:tensorflow.python.ops.data_flow_ops.(seed1, seed2)->tensorflow.python.framework.random_seed.get_seed(seed)
A:tensorflow.python.ops.data_flow_ops.string->(str(seed1) + shared_name).encode('utf-8')
A:tensorflow.python.ops.data_flow_ops.queue_ref->tensorflow.python.ops.gen_data_flow_ops._priority_queue_v2(component_types=types, shapes=shapes, capacity=capacity, shared_name=shared_name, name=name)
A:tensorflow.python.ops.data_flow_ops.types->_as_type_list(types)
A:tensorflow.python.ops.data_flow_ops.self._types->_as_type_list(types)
A:tensorflow.python.ops.data_flow_ops.self._barrier_ref->tensorflow.python.ops.gen_data_flow_ops._barrier(component_types=self._types, shapes=self._shapes, shared_name=shared_name, name=name)
A:tensorflow.python.ops.data_flow_ops.initializers->tensorflow.python.framework.ops.get_collection(ops.GraphKeys.TABLE_INITIALIZERS)
A:tensorflow.python.ops.data_flow_ops.self._shape->tensorflow.python.framework.tensor_shape.unknown_shape()
A:tensorflow.python.ops.data_flow_ops.accumulator_ref->tensorflow.python.ops.gen_data_flow_ops.sparse_conditional_accumulator(dtype=dtype, shape=shape, shared_name=shared_name, name=name)
A:tensorflow.python.ops.data_flow_ops.grad->tensorflow.python.framework.ops.convert_to_tensor(grad, self._dtype)
A:tensorflow.python.ops.data_flow_ops.local_step->tensorflow.python.ops.math_ops.to_int64(ops.convert_to_tensor(local_step))
A:tensorflow.python.ops.data_flow_ops.return_val->tensorflow.python.ops.gen_data_flow_ops.sparse_accumulator_take_gradient(self._accumulator_ref, num_required, dtype=self._dtype, name=name)
A:tensorflow.python.ops.data_flow_ops._lock->threading.Lock()
A:tensorflow.python.ops.data_flow_ops.self._name->tensorflow.python.framework.ops.get_default_graph().unique_name('StagingArea')
A:tensorflow.python.ops.data_flow_ops.self._coloc_op->tensorflow.python.ops.control_flow_ops.no_op()
A:tensorflow.python.ops.data_flow_ops.op->tensorflow.python.ops.gen_data_flow_ops.stage(values=vals, shared_name=self._name, name=scope)
A:tensorflow.python.ops.data_flow_ops.ret[i]->tensorflow.python.ops.array_ops.identity(ret[i])
tensorflow.ops.data_flow_ops.Barrier(self,types,shapes=None,shared_name=None,name='barrier')
tensorflow.ops.data_flow_ops.Barrier.barrier_ref(self)
tensorflow.ops.data_flow_ops.Barrier.close(self,cancel_pending_enqueues=False,name=None)
tensorflow.ops.data_flow_ops.Barrier.incomplete_size(self,name=None)
tensorflow.ops.data_flow_ops.Barrier.insert_many(self,component_index,keys,values,name=None)
tensorflow.ops.data_flow_ops.Barrier.name(self)
tensorflow.ops.data_flow_ops.Barrier.ready_size(self,name=None)
tensorflow.ops.data_flow_ops.Barrier.take_many(self,num_elements,allow_small_batch=False,timeout=None,name=None)
tensorflow.ops.data_flow_ops.ConditionalAccumulator(self,dtype,shape=None,shared_name=None,name='conditional_accumulator')
tensorflow.ops.data_flow_ops.ConditionalAccumulator.apply_grad(self,grad,local_step=0,name=None)
tensorflow.ops.data_flow_ops.ConditionalAccumulator.take_grad(self,num_required,name=None)
tensorflow.ops.data_flow_ops.ConditionalAccumulatorBase(self,dtype,shape,accumulator_ref)
tensorflow.ops.data_flow_ops.ConditionalAccumulatorBase.accumulator_ref(self)
tensorflow.ops.data_flow_ops.ConditionalAccumulatorBase.dtype(self)
tensorflow.ops.data_flow_ops.ConditionalAccumulatorBase.name(self)
tensorflow.ops.data_flow_ops.ConditionalAccumulatorBase.num_accumulated(self,name=None)
tensorflow.ops.data_flow_ops.ConditionalAccumulatorBase.set_global_step(self,new_global_step,name=None)
tensorflow.ops.data_flow_ops.FIFOQueue(self,capacity,dtypes,shapes=None,names=None,shared_name=None,name='fifo_queue')
tensorflow.ops.data_flow_ops.PaddingFIFOQueue(self,capacity,dtypes,shapes,names=None,shared_name=None,name='padding_fifo_queue')
tensorflow.ops.data_flow_ops.PriorityQueue(self,capacity,types,shapes=None,names=None,shared_name=None,name='priority_queue')
tensorflow.ops.data_flow_ops.QueueBase(self,dtypes,shapes,names,queue_ref)
tensorflow.ops.data_flow_ops.QueueBase._check_enqueue_dtypes(self,vals)
tensorflow.ops.data_flow_ops.QueueBase._dequeue_return_value(self,tensors)
tensorflow.ops.data_flow_ops.QueueBase._scope_vals(self,vals)
tensorflow.ops.data_flow_ops.QueueBase.close(self,cancel_pending_enqueues=False,name=None)
tensorflow.ops.data_flow_ops.QueueBase.dequeue(self,name=None)
tensorflow.ops.data_flow_ops.QueueBase.dequeue_many(self,n,name=None)
tensorflow.ops.data_flow_ops.QueueBase.dequeue_up_to(self,n,name=None)
tensorflow.ops.data_flow_ops.QueueBase.dtypes(self)
tensorflow.ops.data_flow_ops.QueueBase.enqueue(self,vals,name=None)
tensorflow.ops.data_flow_ops.QueueBase.enqueue_many(self,vals,name=None)
tensorflow.ops.data_flow_ops.QueueBase.from_list(index,queues)
tensorflow.ops.data_flow_ops.QueueBase.name(self)
tensorflow.ops.data_flow_ops.QueueBase.names(self)
tensorflow.ops.data_flow_ops.QueueBase.queue_ref(self)
tensorflow.ops.data_flow_ops.QueueBase.shapes(self)
tensorflow.ops.data_flow_ops.QueueBase.size(self,name=None)
tensorflow.ops.data_flow_ops.RandomShuffleQueue(self,capacity,min_after_dequeue,dtypes,shapes=None,names=None,seed=None,shared_name=None,name='random_shuffle_queue')
tensorflow.ops.data_flow_ops.RecordInput(self,file_pattern,batch_size=1,buffer_size=1,parallelism=1,shift_ratio=0,seed=0,name=None)
tensorflow.ops.data_flow_ops.RecordInput.get_yield_op(self)
tensorflow.ops.data_flow_ops.SparseConditionalAccumulator(self,dtype,shape=None,shared_name=None,name='sparse_conditional_accumulator')
tensorflow.ops.data_flow_ops.SparseConditionalAccumulator.apply_grad(self,grad_indices,grad_values,grad_shape=None,local_step=0,name=None)
tensorflow.ops.data_flow_ops.SparseConditionalAccumulator.apply_indexed_slices_grad(self,grad,local_step=0,name=None)
tensorflow.ops.data_flow_ops.SparseConditionalAccumulator.take_grad(self,num_required,name=None)
tensorflow.ops.data_flow_ops.SparseConditionalAccumulator.take_indexed_slices_grad(self,num_required,name=None)
tensorflow.ops.data_flow_ops.StagingArea(self,dtypes,shapes=None,names=None,shared_name=None)
tensorflow.ops.data_flow_ops.StagingArea._check_put_dtypes(self,vals)
tensorflow.ops.data_flow_ops.StagingArea._get_return_value(self,tensors)
tensorflow.ops.data_flow_ops.StagingArea._scope_vals(self,vals)
tensorflow.ops.data_flow_ops.StagingArea.dtypes(self)
tensorflow.ops.data_flow_ops.StagingArea.get(self,name=None)
tensorflow.ops.data_flow_ops.StagingArea.name(self)
tensorflow.ops.data_flow_ops.StagingArea.names(self)
tensorflow.ops.data_flow_ops.StagingArea.put(self,values,name=None)
tensorflow.ops.data_flow_ops.StagingArea.shapes(self)
tensorflow.ops.data_flow_ops._as_name_list(names,dtypes)
tensorflow.ops.data_flow_ops._as_shape_list(shapes,dtypes,unknown_dim_allowed=False,unknown_rank_allowed=False)
tensorflow.ops.data_flow_ops._as_type_list(dtypes)
tensorflow.ops.data_flow_ops._shape_common(s1,s2)
tensorflow.ops.data_flow_ops.initialize_all_tables(name='init_all_tables')
tensorflow.ops.data_flow_ops.tables_initializer(name='init_all_tables')
tensorflow.python.ops.data_flow_ops.Barrier(self,types,shapes=None,shared_name=None,name='barrier')
tensorflow.python.ops.data_flow_ops.Barrier.__init__(self,types,shapes=None,shared_name=None,name='barrier')
tensorflow.python.ops.data_flow_ops.Barrier.barrier_ref(self)
tensorflow.python.ops.data_flow_ops.Barrier.close(self,cancel_pending_enqueues=False,name=None)
tensorflow.python.ops.data_flow_ops.Barrier.incomplete_size(self,name=None)
tensorflow.python.ops.data_flow_ops.Barrier.insert_many(self,component_index,keys,values,name=None)
tensorflow.python.ops.data_flow_ops.Barrier.name(self)
tensorflow.python.ops.data_flow_ops.Barrier.ready_size(self,name=None)
tensorflow.python.ops.data_flow_ops.Barrier.take_many(self,num_elements,allow_small_batch=False,timeout=None,name=None)
tensorflow.python.ops.data_flow_ops.ConditionalAccumulator(self,dtype,shape=None,shared_name=None,name='conditional_accumulator')
tensorflow.python.ops.data_flow_ops.ConditionalAccumulator.__init__(self,dtype,shape=None,shared_name=None,name='conditional_accumulator')
tensorflow.python.ops.data_flow_ops.ConditionalAccumulator.apply_grad(self,grad,local_step=0,name=None)
tensorflow.python.ops.data_flow_ops.ConditionalAccumulator.take_grad(self,num_required,name=None)
tensorflow.python.ops.data_flow_ops.ConditionalAccumulatorBase(self,dtype,shape,accumulator_ref)
tensorflow.python.ops.data_flow_ops.ConditionalAccumulatorBase.__init__(self,dtype,shape,accumulator_ref)
tensorflow.python.ops.data_flow_ops.ConditionalAccumulatorBase.accumulator_ref(self)
tensorflow.python.ops.data_flow_ops.ConditionalAccumulatorBase.dtype(self)
tensorflow.python.ops.data_flow_ops.ConditionalAccumulatorBase.name(self)
tensorflow.python.ops.data_flow_ops.ConditionalAccumulatorBase.num_accumulated(self,name=None)
tensorflow.python.ops.data_flow_ops.ConditionalAccumulatorBase.set_global_step(self,new_global_step,name=None)
tensorflow.python.ops.data_flow_ops.FIFOQueue(self,capacity,dtypes,shapes=None,names=None,shared_name=None,name='fifo_queue')
tensorflow.python.ops.data_flow_ops.FIFOQueue.__init__(self,capacity,dtypes,shapes=None,names=None,shared_name=None,name='fifo_queue')
tensorflow.python.ops.data_flow_ops.PaddingFIFOQueue(self,capacity,dtypes,shapes,names=None,shared_name=None,name='padding_fifo_queue')
tensorflow.python.ops.data_flow_ops.PaddingFIFOQueue.__init__(self,capacity,dtypes,shapes,names=None,shared_name=None,name='padding_fifo_queue')
tensorflow.python.ops.data_flow_ops.PriorityQueue(self,capacity,types,shapes=None,names=None,shared_name=None,name='priority_queue')
tensorflow.python.ops.data_flow_ops.PriorityQueue.__init__(self,capacity,types,shapes=None,names=None,shared_name=None,name='priority_queue')
tensorflow.python.ops.data_flow_ops.QueueBase(self,dtypes,shapes,names,queue_ref)
tensorflow.python.ops.data_flow_ops.QueueBase.__init__(self,dtypes,shapes,names,queue_ref)
tensorflow.python.ops.data_flow_ops.QueueBase._check_enqueue_dtypes(self,vals)
tensorflow.python.ops.data_flow_ops.QueueBase._dequeue_return_value(self,tensors)
tensorflow.python.ops.data_flow_ops.QueueBase._scope_vals(self,vals)
tensorflow.python.ops.data_flow_ops.QueueBase.close(self,cancel_pending_enqueues=False,name=None)
tensorflow.python.ops.data_flow_ops.QueueBase.dequeue(self,name=None)
tensorflow.python.ops.data_flow_ops.QueueBase.dequeue_many(self,n,name=None)
tensorflow.python.ops.data_flow_ops.QueueBase.dequeue_up_to(self,n,name=None)
tensorflow.python.ops.data_flow_ops.QueueBase.dtypes(self)
tensorflow.python.ops.data_flow_ops.QueueBase.enqueue(self,vals,name=None)
tensorflow.python.ops.data_flow_ops.QueueBase.enqueue_many(self,vals,name=None)
tensorflow.python.ops.data_flow_ops.QueueBase.from_list(index,queues)
tensorflow.python.ops.data_flow_ops.QueueBase.name(self)
tensorflow.python.ops.data_flow_ops.QueueBase.names(self)
tensorflow.python.ops.data_flow_ops.QueueBase.queue_ref(self)
tensorflow.python.ops.data_flow_ops.QueueBase.shapes(self)
tensorflow.python.ops.data_flow_ops.QueueBase.size(self,name=None)
tensorflow.python.ops.data_flow_ops.RandomShuffleQueue(self,capacity,min_after_dequeue,dtypes,shapes=None,names=None,seed=None,shared_name=None,name='random_shuffle_queue')
tensorflow.python.ops.data_flow_ops.RandomShuffleQueue.__init__(self,capacity,min_after_dequeue,dtypes,shapes=None,names=None,seed=None,shared_name=None,name='random_shuffle_queue')
tensorflow.python.ops.data_flow_ops.RecordInput(self,file_pattern,batch_size=1,buffer_size=1,parallelism=1,shift_ratio=0,seed=0,name=None)
tensorflow.python.ops.data_flow_ops.RecordInput.__init__(self,file_pattern,batch_size=1,buffer_size=1,parallelism=1,shift_ratio=0,seed=0,name=None)
tensorflow.python.ops.data_flow_ops.RecordInput.get_yield_op(self)
tensorflow.python.ops.data_flow_ops.SparseConditionalAccumulator(self,dtype,shape=None,shared_name=None,name='sparse_conditional_accumulator')
tensorflow.python.ops.data_flow_ops.SparseConditionalAccumulator.__init__(self,dtype,shape=None,shared_name=None,name='sparse_conditional_accumulator')
tensorflow.python.ops.data_flow_ops.SparseConditionalAccumulator.apply_grad(self,grad_indices,grad_values,grad_shape=None,local_step=0,name=None)
tensorflow.python.ops.data_flow_ops.SparseConditionalAccumulator.apply_indexed_slices_grad(self,grad,local_step=0,name=None)
tensorflow.python.ops.data_flow_ops.SparseConditionalAccumulator.take_grad(self,num_required,name=None)
tensorflow.python.ops.data_flow_ops.SparseConditionalAccumulator.take_indexed_slices_grad(self,num_required,name=None)
tensorflow.python.ops.data_flow_ops.StagingArea(self,dtypes,shapes=None,names=None,shared_name=None)
tensorflow.python.ops.data_flow_ops.StagingArea.__init__(self,dtypes,shapes=None,names=None,shared_name=None)
tensorflow.python.ops.data_flow_ops.StagingArea._check_put_dtypes(self,vals)
tensorflow.python.ops.data_flow_ops.StagingArea._get_return_value(self,tensors)
tensorflow.python.ops.data_flow_ops.StagingArea._scope_vals(self,vals)
tensorflow.python.ops.data_flow_ops.StagingArea.dtypes(self)
tensorflow.python.ops.data_flow_ops.StagingArea.get(self,name=None)
tensorflow.python.ops.data_flow_ops.StagingArea.name(self)
tensorflow.python.ops.data_flow_ops.StagingArea.names(self)
tensorflow.python.ops.data_flow_ops.StagingArea.put(self,values,name=None)
tensorflow.python.ops.data_flow_ops.StagingArea.shapes(self)
tensorflow.python.ops.data_flow_ops._as_name_list(names,dtypes)
tensorflow.python.ops.data_flow_ops._as_shape_list(shapes,dtypes,unknown_dim_allowed=False,unknown_rank_allowed=False)
tensorflow.python.ops.data_flow_ops._as_type_list(dtypes)
tensorflow.python.ops.data_flow_ops._shape_common(s1,s2)
tensorflow.python.ops.data_flow_ops.initialize_all_tables(name='init_all_tables')
tensorflow.python.ops.data_flow_ops.tables_initializer(name='init_all_tables')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/check_ops.py----------------------------------------
A:tensorflow.python.ops.check_ops.NUMERIC_TYPES->frozenset([dtypes.float32, dtypes.float64, dtypes.int8, dtypes.int16, dtypes.int32, dtypes.int64, dtypes.uint8, dtypes.qint8, dtypes.qint32, dtypes.quint8, dtypes.complex64])
A:tensorflow.python.ops.check_ops.x->tensorflow.python.ops.array_ops.reshape(x, [-1])
A:tensorflow.python.ops.check_ops.zero->tensorflow.python.framework.ops.convert_to_tensor(0, dtype=diff.dtype)
A:tensorflow.python.ops.check_ops.y->tensorflow.python.framework.ops.convert_to_tensor(y, name='y')
A:tensorflow.python.ops.check_ops.condition->tensorflow.python.ops.control_flow_ops.with_dependencies([rank_check], condition)
A:tensorflow.python.ops.check_ops.rank_static->tensorflow.python.framework.tensor_util.constant_value(rank)
A:tensorflow.python.ops.check_ops.rank_check->assert_rank(rank, 0, data=this_data)
A:tensorflow.python.ops.check_ops.rank->tensorflow.python.framework.ops.convert_to_tensor(rank, name='rank')
A:tensorflow.python.ops.check_ops.assert_op->_assert_ranks_condition(x, ranks, _static_rank_in, _dynamic_rank_in, data, summarize)
A:tensorflow.python.ops.check_ops.result->tensorflow.python.ops.math_ops.logical_or(result, math_ops.equal(given_rank, actual_rank))
A:tensorflow.python.ops.check_ops.ranks_static->tuple([tensor_util.constant_value(rank) for rank in ranks])
A:tensorflow.python.ops.check_ops.ranks->tuple([ops.convert_to_tensor(rank, name='rank') for rank in ranks])
A:tensorflow.python.ops.check_ops.tensor->tensorflow.python.framework.ops.convert_to_tensor(tensor, name='tensor')
A:tensorflow.python.ops.check_ops.is_shorter_than_two->tensorflow.python.ops.math_ops.less(array_ops.size(x), 2)
A:tensorflow.python.ops.check_ops.diff->_get_diff_for_monotonic_comparison(x)
tensorflow.check_ops._assert_rank_condition(x,rank,static_condition,dynamic_condition,data,summarize)
tensorflow.check_ops._assert_ranks_condition(x,ranks,static_condition,dynamic_condition,data,summarize)
tensorflow.check_ops._dynamic_rank_in(actual_rank,given_ranks)
tensorflow.check_ops._get_diff_for_monotonic_comparison(x)
tensorflow.check_ops._static_rank_in(actual_rank,given_ranks)
tensorflow.check_ops.assert_equal(x,y,data=None,summarize=None,message=None,name=None)
tensorflow.check_ops.assert_greater(x,y,data=None,summarize=None,message=None,name=None)
tensorflow.check_ops.assert_greater_equal(x,y,data=None,summarize=None,message=None,name=None)
tensorflow.check_ops.assert_integer(x,message=None,name=None)
tensorflow.check_ops.assert_less(x,y,data=None,summarize=None,message=None,name=None)
tensorflow.check_ops.assert_less_equal(x,y,data=None,summarize=None,message=None,name=None)
tensorflow.check_ops.assert_negative(x,data=None,summarize=None,message=None,name=None)
tensorflow.check_ops.assert_non_negative(x,data=None,summarize=None,message=None,name=None)
tensorflow.check_ops.assert_non_positive(x,data=None,summarize=None,message=None,name=None)
tensorflow.check_ops.assert_none_equal(x,y,data=None,summarize=None,message=None,name=None)
tensorflow.check_ops.assert_positive(x,data=None,summarize=None,message=None,name=None)
tensorflow.check_ops.assert_proper_iterable(values)
tensorflow.check_ops.assert_rank(x,rank,data=None,summarize=None,message=None,name=None)
tensorflow.check_ops.assert_rank_at_least(x,rank,data=None,summarize=None,message=None,name=None)
tensorflow.check_ops.assert_rank_in(x,ranks,data=None,summarize=None,message=None,name=None)
tensorflow.check_ops.assert_type(tensor,tf_type,message=None,name=None)
tensorflow.check_ops.is_non_decreasing(x,name=None)
tensorflow.check_ops.is_numeric_tensor(tensor)
tensorflow.check_ops.is_strictly_increasing(x,name=None)
tensorflow.python.ops.check_ops._assert_rank_condition(x,rank,static_condition,dynamic_condition,data,summarize)
tensorflow.python.ops.check_ops._assert_ranks_condition(x,ranks,static_condition,dynamic_condition,data,summarize)
tensorflow.python.ops.check_ops._dynamic_rank_in(actual_rank,given_ranks)
tensorflow.python.ops.check_ops._get_diff_for_monotonic_comparison(x)
tensorflow.python.ops.check_ops._static_rank_in(actual_rank,given_ranks)
tensorflow.python.ops.check_ops.assert_equal(x,y,data=None,summarize=None,message=None,name=None)
tensorflow.python.ops.check_ops.assert_greater(x,y,data=None,summarize=None,message=None,name=None)
tensorflow.python.ops.check_ops.assert_greater_equal(x,y,data=None,summarize=None,message=None,name=None)
tensorflow.python.ops.check_ops.assert_integer(x,message=None,name=None)
tensorflow.python.ops.check_ops.assert_less(x,y,data=None,summarize=None,message=None,name=None)
tensorflow.python.ops.check_ops.assert_less_equal(x,y,data=None,summarize=None,message=None,name=None)
tensorflow.python.ops.check_ops.assert_negative(x,data=None,summarize=None,message=None,name=None)
tensorflow.python.ops.check_ops.assert_non_negative(x,data=None,summarize=None,message=None,name=None)
tensorflow.python.ops.check_ops.assert_non_positive(x,data=None,summarize=None,message=None,name=None)
tensorflow.python.ops.check_ops.assert_none_equal(x,y,data=None,summarize=None,message=None,name=None)
tensorflow.python.ops.check_ops.assert_positive(x,data=None,summarize=None,message=None,name=None)
tensorflow.python.ops.check_ops.assert_proper_iterable(values)
tensorflow.python.ops.check_ops.assert_rank(x,rank,data=None,summarize=None,message=None,name=None)
tensorflow.python.ops.check_ops.assert_rank_at_least(x,rank,data=None,summarize=None,message=None,name=None)
tensorflow.python.ops.check_ops.assert_rank_in(x,ranks,data=None,summarize=None,message=None,name=None)
tensorflow.python.ops.check_ops.assert_type(tensor,tf_type,message=None,name=None)
tensorflow.python.ops.check_ops.is_non_decreasing(x,name=None)
tensorflow.python.ops.check_ops.is_numeric_tensor(tensor)
tensorflow.python.ops.check_ops.is_strictly_increasing(x,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/tensor_array_ops.py----------------------------------------
A:tensorflow.python.ops.tensor_array_ops.(self._handle, self._flow)->tensorflow.python.ops.gen_data_flow_ops._tensor_array_v3(dtype=dtype, size=size, element_shape=element_shape, dynamic_size=dynamic_size, clear_after_read=clear_after_read, tensor_array_name=tensor_array_name, name=scope)
A:tensorflow.python.ops.tensor_array_ops.self._element_shape[0]->self._element_shape[0].merge_with(shape)
A:tensorflow.python.ops.tensor_array_ops.flow->tensorflow.python.ops.array_ops.identity(flow, name='gradient_flow')
A:tensorflow.python.ops.tensor_array_ops.ta->TensorArray(dtype=self._dtype, handle=self._handle, flow=flow_out)
A:tensorflow.python.ops.tensor_array_ops.(g_handle, unused_flow)->tensorflow.python.ops.gen_data_flow_ops._tensor_array_grad_v3(handle=self._handle, source=source, flow_in=flow, name=name)
A:tensorflow.python.ops.tensor_array_ops.g->TensorArray(dtype=self._dtype, handle=g_handle, flow=flow, infer_shape=self._infer_shape)
A:tensorflow.python.ops.tensor_array_ops.value->tensorflow.python.framework.ops.convert_to_tensor(value, name='value')
A:tensorflow.python.ops.tensor_array_ops.flow_out->tensorflow.python.ops.gen_data_flow_ops._tensor_array_split_v3(handle=self._handle, value=value, lengths=lengths_64, flow_in=self._flow, name=name)
A:tensorflow.python.ops.tensor_array_ops.element_shape->tensorflow.python.framework.tensor_shape.TensorShape([clengths[0]] + val_shape.dims[1:])
A:tensorflow.python.ops.tensor_array_ops.element_shape_except0->tensorflow.python.framework.tensor_shape.TensorShape(None)
A:tensorflow.python.ops.tensor_array_ops.(value, _)->tensorflow.python.ops.gen_data_flow_ops._tensor_array_concat_v3(handle=self._handle, flow_in=self._flow, dtype=self._dtype, name=name, element_shape_except0=element_shape_except0)
A:tensorflow.python.ops.tensor_array_ops.val_shape->tensorflow.python.ops.gen_data_flow_ops._tensor_array_split_v3(handle=self._handle, value=value, lengths=lengths_64, flow_in=self._flow, name=name).op.inputs[1].get_shape()
A:tensorflow.python.ops.tensor_array_ops.lengths_64->tensorflow.python.ops.math_ops.to_int64(lengths)
A:tensorflow.python.ops.tensor_array_ops.clengths->tensorflow.python.framework.tensor_util.constant_value(flow_out.op.inputs[2])
tensorflow.python.ops.tensor_array_ops.TensorArray(self,dtype,size=None,dynamic_size=None,clear_after_read=None,tensor_array_name=None,handle=None,flow=None,infer_shape=True,element_shape=None,name=None)
tensorflow.python.ops.tensor_array_ops.TensorArray.__init__(self,dtype,size=None,dynamic_size=None,clear_after_read=None,tensor_array_name=None,handle=None,flow=None,infer_shape=True,element_shape=None,name=None)
tensorflow.python.ops.tensor_array_ops.TensorArray._merge_element_shape(self,shape)
tensorflow.python.ops.tensor_array_ops.TensorArray.close(self,name=None)
tensorflow.python.ops.tensor_array_ops.TensorArray.concat(self,name=None)
tensorflow.python.ops.tensor_array_ops.TensorArray.dtype(self)
tensorflow.python.ops.tensor_array_ops.TensorArray.flow(self)
tensorflow.python.ops.tensor_array_ops.TensorArray.gather(self,indices,name=None)
tensorflow.python.ops.tensor_array_ops.TensorArray.grad(self,source,flow=None,name=None)
tensorflow.python.ops.tensor_array_ops.TensorArray.handle(self)
tensorflow.python.ops.tensor_array_ops.TensorArray.identity(self)
tensorflow.python.ops.tensor_array_ops.TensorArray.read(self,index,name=None)
tensorflow.python.ops.tensor_array_ops.TensorArray.scatter(self,indices,value,name=None)
tensorflow.python.ops.tensor_array_ops.TensorArray.size(self,name=None)
tensorflow.python.ops.tensor_array_ops.TensorArray.split(self,value,lengths,name=None)
tensorflow.python.ops.tensor_array_ops.TensorArray.stack(self,name=None)
tensorflow.python.ops.tensor_array_ops.TensorArray.unstack(self,value,name=None)
tensorflow.python.ops.tensor_array_ops.TensorArray.write(self,index,value,name=None)
tensorflow.python.ops.tensor_array_ops._maybe_set_device(handle_op,value_t)
tensorflow.tensor_array_ops.TensorArray(self,dtype,size=None,dynamic_size=None,clear_after_read=None,tensor_array_name=None,handle=None,flow=None,infer_shape=True,element_shape=None,name=None)
tensorflow.tensor_array_ops.TensorArray._merge_element_shape(self,shape)
tensorflow.tensor_array_ops.TensorArray.close(self,name=None)
tensorflow.tensor_array_ops.TensorArray.concat(self,name=None)
tensorflow.tensor_array_ops.TensorArray.dtype(self)
tensorflow.tensor_array_ops.TensorArray.flow(self)
tensorflow.tensor_array_ops.TensorArray.gather(self,indices,name=None)
tensorflow.tensor_array_ops.TensorArray.grad(self,source,flow=None,name=None)
tensorflow.tensor_array_ops.TensorArray.handle(self)
tensorflow.tensor_array_ops.TensorArray.identity(self)
tensorflow.tensor_array_ops.TensorArray.read(self,index,name=None)
tensorflow.tensor_array_ops.TensorArray.scatter(self,indices,value,name=None)
tensorflow.tensor_array_ops.TensorArray.size(self,name=None)
tensorflow.tensor_array_ops.TensorArray.split(self,value,lengths,name=None)
tensorflow.tensor_array_ops.TensorArray.stack(self,name=None)
tensorflow.tensor_array_ops.TensorArray.unstack(self,value,name=None)
tensorflow.tensor_array_ops.TensorArray.write(self,index,value,name=None)
tensorflow.tensor_array_ops._maybe_set_device(handle_op,value_t)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_user_ops.py----------------------------------------
A:tensorflow.python.ops.gen_user_ops.result->_InitOpDefLibrary().apply_op('Fact', name=name)
A:tensorflow.python.ops.gen_user_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_user_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_user_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_user_ops._InitOpDefLibrary()
tensorflow.ops.gen_user_ops._fact(name=None)
tensorflow.python.ops.gen_user_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_user_ops._fact(name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/spectral_grad.py----------------------------------------
A:tensorflow.python.ops.spectral_grad.size->tensorflow.python.ops.math_ops.cast(_FFTSizeForGrad(grad, 3), dtypes.float32)
A:tensorflow.python.ops.spectral_grad.input_shape->tensorflow.python.ops.array_ops.shape(op.inputs[0])
A:tensorflow.python.ops.spectral_grad.is_even->tensorflow.python.ops.math_ops.cast(1 - fft_length[-1] % 2, dtypes.complex64)
A:tensorflow.python.ops.spectral_grad.expanded->tensorflow.python.ops.array_ops.reshape(matrix, array_ops.concat([array_ops.ones([array_ops.rank(t) - 2], dtypes.int32), array_ops.shape(matrix)], 0))
A:tensorflow.python.ops.spectral_grad.a->tensorflow.python.ops.array_ops.tile(array_ops.expand_dims(math_ops.range(length), 0), (length, 1))
A:tensorflow.python.ops.spectral_grad.b->tensorflow.python.ops.array_ops.transpose(a, [1, 0])
A:tensorflow.python.ops.spectral_grad.base_mask->_MaskMatrix(input_shape[-2])
A:tensorflow.python.ops.spectral_grad.tiled_mask->_TileForBroadcasting(base_mask, y0)
A:tensorflow.python.ops.spectral_grad.y0_term->tensorflow.python.ops.math_ops.matmul(tiled_mask, math_ops.conj(y0))
A:tensorflow.python.ops.spectral_grad.ym_term->tensorflow.python.ops.math_ops.matmul(tiled_mask, math_ops.conj(ym))
A:tensorflow.python.ops.spectral_grad.input_size->tensorflow.python.ops.math_ops.to_float(_FFTSizeForGrad(op.inputs[0], rank))
A:tensorflow.python.ops.spectral_grad.irfft->irfft_fn(grad, fft_length)
A:tensorflow.python.ops.spectral_grad.is_odd->tensorflow.python.ops.math_ops.mod(fft_length[-1], 2)
A:tensorflow.python.ops.spectral_grad.mask->tensorflow.python.ops.array_ops.concat([[1.0], 2.0 * array_ops.ones([input_last_dimension - 2 + is_odd]), array_ops.ones([1 - is_odd])], 0)
A:tensorflow.python.ops.spectral_grad.rsize->tensorflow.python.ops.math_ops.reciprocal(math_ops.to_float(_FFTSizeForGrad(grad, rank)))
A:tensorflow.python.ops.spectral_grad.rfft->rfft_fn(grad, fft_length)
tensorflow.ops.spectral_grad._FFT2DGrad(_,grad)
tensorflow.ops.spectral_grad._FFT3DGrad(_,grad)
tensorflow.ops.spectral_grad._FFTGrad(_,grad)
tensorflow.ops.spectral_grad._FFTSizeForGrad(grad,rank)
tensorflow.ops.spectral_grad._IFFT2DGrad(_,grad)
tensorflow.ops.spectral_grad._IFFT3DGrad(_,grad)
tensorflow.ops.spectral_grad._IFFTGrad(_,grad)
tensorflow.ops.spectral_grad._IRFFTGradHelper(rank,rfft_fn)
tensorflow.ops.spectral_grad._RFFTGradHelper(rank,irfft_fn)
tensorflow.python.ops.spectral_grad._FFT2DGrad(_,grad)
tensorflow.python.ops.spectral_grad._FFT3DGrad(_,grad)
tensorflow.python.ops.spectral_grad._FFTGrad(_,grad)
tensorflow.python.ops.spectral_grad._FFTSizeForGrad(grad,rank)
tensorflow.python.ops.spectral_grad._IFFT2DGrad(_,grad)
tensorflow.python.ops.spectral_grad._IFFT3DGrad(_,grad)
tensorflow.python.ops.spectral_grad._IFFTGrad(_,grad)
tensorflow.python.ops.spectral_grad._IRFFTGradHelper(rank,rfft_fn)
tensorflow.python.ops.spectral_grad._RFFTGradHelper(rank,irfft_fn)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/data_flow_grad.py----------------------------------------
A:tensorflow.python.ops.data_flow_grad.num_partitions->op.get_attr('num_partitions')
A:tensorflow.python.ops.data_flow_grad.prefix_shape->tensorflow.python.ops.array_ops.shape(indices)
A:tensorflow.python.ops.data_flow_grad.original_indices->tensorflow.python.ops.array_ops.reshape(math_ops.range(math_ops.reduce_prod(prefix_shape)), prefix_shape)
A:tensorflow.python.ops.data_flow_grad.partitioned_indices->tensorflow.python.ops.data_flow_ops.dynamic_partition(original_indices, indices, num_partitions)
A:tensorflow.python.ops.data_flow_grad.reconstructed->tensorflow.python.ops.array_ops.reshape(reconstructed, array_ops.shape(data))
A:tensorflow.python.ops.data_flow_grad.output_shape->tensorflow.python.ops.array_ops.shape(op.outputs[0])
A:tensorflow.python.ops.data_flow_grad.grad->tensorflow.python.ops.math_ops.unsorted_segment_sum(grad.values, grad.indices, output_rows)
tensorflow.ops.data_flow_grad._DynamicPartitionGrads(op,*grads)
tensorflow.ops.data_flow_grad._DynamicStitchGrads(op,grad)
tensorflow.python.ops.data_flow_grad._DynamicPartitionGrads(op,*grads)
tensorflow.python.ops.data_flow_grad._DynamicStitchGrads(op,grad)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_image_ops.py----------------------------------------
A:tensorflow.python.ops.gen_image_ops.result->_InitOpDefLibrary().apply_op('SampleDistortedBoundingBox', image_size=image_size, bounding_boxes=bounding_boxes, seed=seed, seed2=seed2, min_object_covered=min_object_covered, aspect_ratio_range=aspect_ratio_range, area_range=area_range, max_attempts=max_attempts, use_image_if_no_bounding_boxes=use_image_if_no_bounding_boxes, name=name)
A:tensorflow.python.ops.gen_image_ops._SampleDistortedBoundingBoxOutput->collections.namedtuple('SampleDistortedBoundingBox', _sample_distorted_bounding_box_outputs)
A:tensorflow.python.ops.gen_image_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_image_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_image_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_image_ops._InitOpDefLibrary()
tensorflow.ops.gen_image_ops._adjust_contrastv2(images,contrast_factor,name=None)
tensorflow.ops.gen_image_ops._random_crop(image,size,seed=None,seed2=None,name=None)
tensorflow.ops.gen_image_ops._resize_bilinear_grad(grads,original_image,align_corners=None,name=None)
tensorflow.ops.gen_image_ops._resize_nearest_neighbor_grad(grads,size,align_corners=None,name=None)
tensorflow.ops.gen_image_ops.adjust_contrast(images,contrast_factor,min_value,max_value,name=None)
tensorflow.ops.gen_image_ops.adjust_hue(images,delta,name=None)
tensorflow.ops.gen_image_ops.adjust_saturation(images,scale,name=None)
tensorflow.ops.gen_image_ops.crop_and_resize(image,boxes,box_ind,crop_size,method=None,extrapolation_value=None,name=None)
tensorflow.ops.gen_image_ops.crop_and_resize_grad_boxes(grads,image,boxes,box_ind,method=None,name=None)
tensorflow.ops.gen_image_ops.crop_and_resize_grad_image(grads,boxes,box_ind,image_size,T,method=None,name=None)
tensorflow.ops.gen_image_ops.decode_gif(contents,name=None)
tensorflow.ops.gen_image_ops.decode_jpeg(contents,channels=None,ratio=None,fancy_upscaling=None,try_recover_truncated=None,acceptable_fraction=None,dct_method=None,name=None)
tensorflow.ops.gen_image_ops.decode_png(contents,channels=None,dtype=None,name=None)
tensorflow.ops.gen_image_ops.draw_bounding_boxes(images,boxes,name=None)
tensorflow.ops.gen_image_ops.encode_jpeg(image,format=None,quality=None,progressive=None,optimize_size=None,chroma_downsampling=None,density_unit=None,x_density=None,y_density=None,xmp_metadata=None,name=None)
tensorflow.ops.gen_image_ops.encode_png(image,compression=None,name=None)
tensorflow.ops.gen_image_ops.extract_glimpse(input,size,offsets,centered=None,normalized=None,uniform_noise=None,name=None)
tensorflow.ops.gen_image_ops.hsv_to_rgb(images,name=None)
tensorflow.ops.gen_image_ops.non_max_suppression(boxes,scores,max_output_size,iou_threshold=None,name=None)
tensorflow.ops.gen_image_ops.resize_area(images,size,align_corners=None,name=None)
tensorflow.ops.gen_image_ops.resize_bicubic(images,size,align_corners=None,name=None)
tensorflow.ops.gen_image_ops.resize_bilinear(images,size,align_corners=None,name=None)
tensorflow.ops.gen_image_ops.resize_nearest_neighbor(images,size,align_corners=None,name=None)
tensorflow.ops.gen_image_ops.rgb_to_hsv(images,name=None)
tensorflow.ops.gen_image_ops.sample_distorted_bounding_box(image_size,bounding_boxes,seed=None,seed2=None,min_object_covered=None,aspect_ratio_range=None,area_range=None,max_attempts=None,use_image_if_no_bounding_boxes=None,name=None)
tensorflow.python.ops.gen_image_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_image_ops._adjust_contrastv2(images,contrast_factor,name=None)
tensorflow.python.ops.gen_image_ops._random_crop(image,size,seed=None,seed2=None,name=None)
tensorflow.python.ops.gen_image_ops._resize_bilinear_grad(grads,original_image,align_corners=None,name=None)
tensorflow.python.ops.gen_image_ops._resize_nearest_neighbor_grad(grads,size,align_corners=None,name=None)
tensorflow.python.ops.gen_image_ops.adjust_contrast(images,contrast_factor,min_value,max_value,name=None)
tensorflow.python.ops.gen_image_ops.adjust_hue(images,delta,name=None)
tensorflow.python.ops.gen_image_ops.adjust_saturation(images,scale,name=None)
tensorflow.python.ops.gen_image_ops.crop_and_resize(image,boxes,box_ind,crop_size,method=None,extrapolation_value=None,name=None)
tensorflow.python.ops.gen_image_ops.crop_and_resize_grad_boxes(grads,image,boxes,box_ind,method=None,name=None)
tensorflow.python.ops.gen_image_ops.crop_and_resize_grad_image(grads,boxes,box_ind,image_size,T,method=None,name=None)
tensorflow.python.ops.gen_image_ops.decode_gif(contents,name=None)
tensorflow.python.ops.gen_image_ops.decode_jpeg(contents,channels=None,ratio=None,fancy_upscaling=None,try_recover_truncated=None,acceptable_fraction=None,dct_method=None,name=None)
tensorflow.python.ops.gen_image_ops.decode_png(contents,channels=None,dtype=None,name=None)
tensorflow.python.ops.gen_image_ops.draw_bounding_boxes(images,boxes,name=None)
tensorflow.python.ops.gen_image_ops.encode_jpeg(image,format=None,quality=None,progressive=None,optimize_size=None,chroma_downsampling=None,density_unit=None,x_density=None,y_density=None,xmp_metadata=None,name=None)
tensorflow.python.ops.gen_image_ops.encode_png(image,compression=None,name=None)
tensorflow.python.ops.gen_image_ops.extract_glimpse(input,size,offsets,centered=None,normalized=None,uniform_noise=None,name=None)
tensorflow.python.ops.gen_image_ops.hsv_to_rgb(images,name=None)
tensorflow.python.ops.gen_image_ops.non_max_suppression(boxes,scores,max_output_size,iou_threshold=None,name=None)
tensorflow.python.ops.gen_image_ops.resize_area(images,size,align_corners=None,name=None)
tensorflow.python.ops.gen_image_ops.resize_bicubic(images,size,align_corners=None,name=None)
tensorflow.python.ops.gen_image_ops.resize_bilinear(images,size,align_corners=None,name=None)
tensorflow.python.ops.gen_image_ops.resize_nearest_neighbor(images,size,align_corners=None,name=None)
tensorflow.python.ops.gen_image_ops.rgb_to_hsv(images,name=None)
tensorflow.python.ops.gen_image_ops.sample_distorted_bounding_box(image_size,bounding_boxes,seed=None,seed2=None,min_object_covered=None,aspect_ratio_range=None,area_range=None,max_attempts=None,use_image_if_no_bounding_boxes=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/image_grad.py----------------------------------------
A:tensorflow.python.ops.image_grad.grads->tensorflow.python.ops.gen_image_ops._resize_nearest_neighbor_grad(grad, image_shape, align_corners=op.get_attr('align_corners'))
A:tensorflow.python.ops.image_grad.grad0->tensorflow.python.ops.gen_image_ops.crop_and_resize_grad_image(grad, op.inputs[1], op.inputs[2], image_shape, T=op.get_attr('T'))
A:tensorflow.python.ops.image_grad.image_shape->tensorflow.python.ops.array_ops.shape(image)
A:tensorflow.python.ops.image_grad.grad1->tensorflow.python.ops.gen_image_ops.crop_and_resize_grad_boxes(grad, op.inputs[0], op.inputs[1], op.inputs[2])
tensorflow.ops.image_grad._CropAndResizeGrad(op,grad)
tensorflow.ops.image_grad._ResizeBilinearGrad(op,grad)
tensorflow.ops.image_grad._ResizeNearestNeighborGrad(op,grad)
tensorflow.python.ops.image_grad._CropAndResizeGrad(op,grad)
tensorflow.python.ops.image_grad._ResizeBilinearGrad(op,grad)
tensorflow.python.ops.image_grad._ResizeNearestNeighborGrad(op,grad)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_sparse_ops.py----------------------------------------
A:tensorflow.python.ops.gen_sparse_ops.result->_InitOpDefLibrary().apply_op('TakeManySparseFromTensorsMap', sparse_handles=sparse_handles, dtype=dtype, container=container, shared_name=shared_name, name=name)
A:tensorflow.python.ops.gen_sparse_ops._DeserializeManySparseOutput->collections.namedtuple('DeserializeManySparse', __deserialize_many_sparse_outputs)
A:tensorflow.python.ops.gen_sparse_ops._SparseAddOutput->collections.namedtuple('SparseAdd', __sparse_add_outputs)
A:tensorflow.python.ops.gen_sparse_ops._SparseAddGradOutput->collections.namedtuple('SparseAddGrad', __sparse_add_grad_outputs)
A:tensorflow.python.ops.gen_sparse_ops._SparseConcatOutput->collections.namedtuple('SparseConcat', __sparse_concat_outputs)
A:tensorflow.python.ops.gen_sparse_ops._SparseReduceSumSparseOutput->collections.namedtuple('SparseReduceSumSparse', _sparse_reduce_sum_sparse_outputs)
A:tensorflow.python.ops.gen_sparse_ops._SparseReorderOutput->collections.namedtuple('SparseReorder', __sparse_reorder_outputs)
A:tensorflow.python.ops.gen_sparse_ops._SparseReshapeOutput->collections.namedtuple('SparseReshape', __sparse_reshape_outputs)
A:tensorflow.python.ops.gen_sparse_ops._SparseSparseMaximumOutput->collections.namedtuple('SparseSparseMaximum', _sparse_sparse_maximum_outputs)
A:tensorflow.python.ops.gen_sparse_ops._SparseSparseMinimumOutput->collections.namedtuple('SparseSparseMinimum', _sparse_sparse_minimum_outputs)
A:tensorflow.python.ops.gen_sparse_ops._SparseSplitOutput->collections.namedtuple('SparseSplit', __sparse_split_outputs)
A:tensorflow.python.ops.gen_sparse_ops._TakeManySparseFromTensorsMapOutput->collections.namedtuple('TakeManySparseFromTensorsMap', __take_many_sparse_from_tensors_map_outputs)
A:tensorflow.python.ops.gen_sparse_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_sparse_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_sparse_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_sparse_ops._InitOpDefLibrary()
tensorflow.ops.gen_sparse_ops._add_many_sparse_to_tensors_map(sparse_indices,sparse_values,sparse_shape,container=None,shared_name=None,name=None)
tensorflow.ops.gen_sparse_ops._add_sparse_to_tensors_map(sparse_indices,sparse_values,sparse_shape,container=None,shared_name=None,name=None)
tensorflow.ops.gen_sparse_ops._deserialize_many_sparse(serialized_sparse,dtype,name=None)
tensorflow.ops.gen_sparse_ops._serialize_many_sparse(sparse_indices,sparse_values,sparse_shape,name=None)
tensorflow.ops.gen_sparse_ops._serialize_sparse(sparse_indices,sparse_values,sparse_shape,name=None)
tensorflow.ops.gen_sparse_ops._sparse_add(a_indices,a_values,a_shape,b_indices,b_values,b_shape,thresh,name=None)
tensorflow.ops.gen_sparse_ops._sparse_add_grad(backprop_val_grad,a_indices,b_indices,sum_indices,name=None)
tensorflow.ops.gen_sparse_ops._sparse_concat(indices,values,shapes,concat_dim,name=None)
tensorflow.ops.gen_sparse_ops._sparse_reorder(input_indices,input_values,input_shape,name=None)
tensorflow.ops.gen_sparse_ops._sparse_reshape(input_indices,input_shape,new_shape,name=None)
tensorflow.ops.gen_sparse_ops._sparse_split(split_dim,indices,values,shape,num_split,name=None)
tensorflow.ops.gen_sparse_ops._sparse_tensor_dense_add(a_indices,a_values,a_shape,b,name=None)
tensorflow.ops.gen_sparse_ops._sparse_tensor_dense_mat_mul(a_indices,a_values,a_shape,b,adjoint_a=None,adjoint_b=None,name=None)
tensorflow.ops.gen_sparse_ops._sparse_to_dense(sparse_indices,output_shape,sparse_values,default_value,validate_indices=None,name=None)
tensorflow.ops.gen_sparse_ops._take_many_sparse_from_tensors_map(sparse_handles,dtype,container=None,shared_name=None,name=None)
tensorflow.ops.gen_sparse_ops.sparse_dense_cwise_add(sp_indices,sp_values,sp_shape,dense,name=None)
tensorflow.ops.gen_sparse_ops.sparse_dense_cwise_div(sp_indices,sp_values,sp_shape,dense,name=None)
tensorflow.ops.gen_sparse_ops.sparse_dense_cwise_mul(sp_indices,sp_values,sp_shape,dense,name=None)
tensorflow.ops.gen_sparse_ops.sparse_reduce_sum(input_indices,input_values,input_shape,reduction_axes,keep_dims=None,name=None)
tensorflow.ops.gen_sparse_ops.sparse_reduce_sum_sparse(input_indices,input_values,input_shape,reduction_axes,keep_dims=None,name=None)
tensorflow.ops.gen_sparse_ops.sparse_softmax(sp_indices,sp_values,sp_shape,name=None)
tensorflow.ops.gen_sparse_ops.sparse_sparse_maximum(a_indices,a_values,a_shape,b_indices,b_values,b_shape,name=None)
tensorflow.ops.gen_sparse_ops.sparse_sparse_minimum(a_indices,a_values,a_shape,b_indices,b_values,b_shape,name=None)
tensorflow.python.ops.gen_sparse_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_sparse_ops._add_many_sparse_to_tensors_map(sparse_indices,sparse_values,sparse_shape,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_sparse_ops._add_sparse_to_tensors_map(sparse_indices,sparse_values,sparse_shape,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_sparse_ops._deserialize_many_sparse(serialized_sparse,dtype,name=None)
tensorflow.python.ops.gen_sparse_ops._serialize_many_sparse(sparse_indices,sparse_values,sparse_shape,name=None)
tensorflow.python.ops.gen_sparse_ops._serialize_sparse(sparse_indices,sparse_values,sparse_shape,name=None)
tensorflow.python.ops.gen_sparse_ops._sparse_add(a_indices,a_values,a_shape,b_indices,b_values,b_shape,thresh,name=None)
tensorflow.python.ops.gen_sparse_ops._sparse_add_grad(backprop_val_grad,a_indices,b_indices,sum_indices,name=None)
tensorflow.python.ops.gen_sparse_ops._sparse_concat(indices,values,shapes,concat_dim,name=None)
tensorflow.python.ops.gen_sparse_ops._sparse_reorder(input_indices,input_values,input_shape,name=None)
tensorflow.python.ops.gen_sparse_ops._sparse_reshape(input_indices,input_shape,new_shape,name=None)
tensorflow.python.ops.gen_sparse_ops._sparse_split(split_dim,indices,values,shape,num_split,name=None)
tensorflow.python.ops.gen_sparse_ops._sparse_tensor_dense_add(a_indices,a_values,a_shape,b,name=None)
tensorflow.python.ops.gen_sparse_ops._sparse_tensor_dense_mat_mul(a_indices,a_values,a_shape,b,adjoint_a=None,adjoint_b=None,name=None)
tensorflow.python.ops.gen_sparse_ops._sparse_to_dense(sparse_indices,output_shape,sparse_values,default_value,validate_indices=None,name=None)
tensorflow.python.ops.gen_sparse_ops._take_many_sparse_from_tensors_map(sparse_handles,dtype,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_sparse_ops.sparse_dense_cwise_add(sp_indices,sp_values,sp_shape,dense,name=None)
tensorflow.python.ops.gen_sparse_ops.sparse_dense_cwise_div(sp_indices,sp_values,sp_shape,dense,name=None)
tensorflow.python.ops.gen_sparse_ops.sparse_dense_cwise_mul(sp_indices,sp_values,sp_shape,dense,name=None)
tensorflow.python.ops.gen_sparse_ops.sparse_reduce_sum(input_indices,input_values,input_shape,reduction_axes,keep_dims=None,name=None)
tensorflow.python.ops.gen_sparse_ops.sparse_reduce_sum_sparse(input_indices,input_values,input_shape,reduction_axes,keep_dims=None,name=None)
tensorflow.python.ops.gen_sparse_ops.sparse_softmax(sp_indices,sp_values,sp_shape,name=None)
tensorflow.python.ops.gen_sparse_ops.sparse_sparse_maximum(a_indices,a_values,a_shape,b_indices,b_values,b_shape,name=None)
tensorflow.python.ops.gen_sparse_ops.sparse_sparse_minimum(a_indices,a_values,a_shape,b_indices,b_values,b_shape,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_logging_ops.py----------------------------------------
A:tensorflow.python.ops.gen_logging_ops.result->_InitOpDefLibrary().apply_op('TensorSummary', tensor=tensor, description=description, labels=labels, display_name=display_name, name=name)
A:tensorflow.python.ops.gen_logging_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_logging_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_logging_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_logging_ops._InitOpDefLibrary()
tensorflow.ops.gen_logging_ops._assert(condition,data,summarize=None,name=None)
tensorflow.ops.gen_logging_ops._audio_summary(tag,tensor,sample_rate,max_outputs=None,name=None)
tensorflow.ops.gen_logging_ops._audio_summary_v2(tag,tensor,sample_rate,max_outputs=None,name=None)
tensorflow.ops.gen_logging_ops._histogram_summary(tag,values,name=None)
tensorflow.ops.gen_logging_ops._image_summary(tag,tensor,max_images=None,bad_color=None,name=None)
tensorflow.ops.gen_logging_ops._merge_summary(inputs,name=None)
tensorflow.ops.gen_logging_ops._print(input,data,message=None,first_n=None,summarize=None,name=None)
tensorflow.ops.gen_logging_ops._scalar_summary(tags,values,name=None)
tensorflow.ops.gen_logging_ops._tensor_summary(tensor,description=None,labels=None,display_name=None,name=None)
tensorflow.python.ops.gen_logging_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_logging_ops._assert(condition,data,summarize=None,name=None)
tensorflow.python.ops.gen_logging_ops._audio_summary(tag,tensor,sample_rate,max_outputs=None,name=None)
tensorflow.python.ops.gen_logging_ops._audio_summary_v2(tag,tensor,sample_rate,max_outputs=None,name=None)
tensorflow.python.ops.gen_logging_ops._histogram_summary(tag,values,name=None)
tensorflow.python.ops.gen_logging_ops._image_summary(tag,tensor,max_images=None,bad_color=None,name=None)
tensorflow.python.ops.gen_logging_ops._merge_summary(inputs,name=None)
tensorflow.python.ops.gen_logging_ops._print(input,data,message=None,first_n=None,summarize=None,name=None)
tensorflow.python.ops.gen_logging_ops._scalar_summary(tags,values,name=None)
tensorflow.python.ops.gen_logging_ops._tensor_summary(tensor,description=None,labels=None,display_name=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/parsing_ops.py----------------------------------------
A:tensorflow.python.ops.parsing_ops.feature_tensor_shape->tensorflow.python.framework.tensor_shape.as_shape(feature.shape)
A:tensorflow.python.ops.parsing_ops.tensor_dict->dict(tensor_dict)
A:tensorflow.python.ops.parsing_ops.tensor_dict[key]->tensorflow.python.ops.sparse_ops.sparse_merge(sp_ids, sp_values, vocab_size=feature.size, already_sorted=feature.already_sorted)
A:tensorflow.python.ops.parsing_ops.modified_features->dict(features)
A:tensorflow.python.ops.parsing_ops.modified_features[key]->FixedLenSequenceFeature([None] + list(feature.shape), feature.dtype, feature.allow_missing, feature.default_value)
A:tensorflow.python.ops.parsing_ops.(sparse_keys, sparse_types, dense_keys, dense_types, dense_defaults, dense_shapes)->_features_to_raw_params(features, [VarLenFeature, FixedLenFeature, SparseFeature])
A:tensorflow.python.ops.parsing_ops.outputs->tensorflow.python.ops.gen_parsing_ops._parse_single_sequence_example(serialized=serialized, debug_name=debug_name, context_dense_defaults=context_dense_defaults_vec, context_sparse_keys=context_sparse_keys, context_sparse_types=context_sparse_types, context_dense_keys=context_dense_keys, context_dense_shapes=context_dense_shapes, feature_list_sparse_keys=feature_list_sparse_keys, feature_list_sparse_types=feature_list_sparse_types, feature_list_dense_keys=feature_list_dense_keys, feature_list_dense_types=feature_list_dense_types, feature_list_dense_shapes=feature_list_dense_shapes, feature_list_dense_missing_assumed_empty=feature_list_dense_missing_assumed_empty, name=name)
A:tensorflow.python.ops.parsing_ops.num_dense->len(dense_keys)
A:tensorflow.python.ops.parsing_ops.num_sparse->len(sparse_keys)
A:tensorflow.python.ops.parsing_ops.default_value->tensorflow.python.ops.array_ops.reshape(default_value, context_dense_shapes[i])
A:tensorflow.python.ops.parsing_ops.serialized->tensorflow.python.ops.array_ops.expand_dims(serialized, 0)
A:tensorflow.python.ops.parsing_ops.serialized_shape->tensorflow.python.ops.array_ops.expand_dims(serialized, 0).get_shape()
A:tensorflow.python.ops.parsing_ops.names->tensorflow.python.ops.array_ops.expand_dims(names, 0)
A:tensorflow.python.ops.parsing_ops.names_shape->tensorflow.python.ops.array_ops.expand_dims(names, 0).get_shape()
A:tensorflow.python.ops.parsing_ops.d_name->re.sub('[^A-Za-z0-9_.\\-/]', '_', d)
A:tensorflow.python.ops.parsing_ops.outputs[d]->tensorflow.python.ops.array_ops.squeeze(outputs[d], [0], name='Squeeze_%s' % d_name)
A:tensorflow.python.ops.parsing_ops.s_name->re.sub('[^A-Za-z0-9_.\\-/]', '_', s)
A:tensorflow.python.ops.parsing_ops.outputs[s]->tensorflow.python.framework.sparse_tensor.SparseTensor(array_ops.slice(outputs[s].indices, [0, 1], [-1, -1], name='Slice_Indices_%s' % s_name), outputs[s].values, array_ops.slice(outputs[s].dense_shape, [1], [-1], name='Squeeze_Shape_%s' % s_name))
A:tensorflow.python.ops.parsing_ops.(context_sparse_keys, context_sparse_types, context_dense_keys, context_dense_types, context_dense_defaults, context_dense_shapes)->_features_to_raw_params(context_features, [VarLenFeature, FixedLenFeature])
A:tensorflow.python.ops.parsing_ops.(feature_list_sparse_keys, feature_list_sparse_types, feature_list_dense_keys, feature_list_dense_types, feature_list_dense_defaults, feature_list_dense_shapes)->_features_to_raw_params(sequence_features, [VarLenFeature, FixedLenSequenceFeature])
A:tensorflow.python.ops.parsing_ops.num_context_dense->len(context_dense_keys)
A:tensorflow.python.ops.parsing_ops.num_feature_list_dense->len(feature_list_dense_keys)
A:tensorflow.python.ops.parsing_ops.num_context_sparse->len(context_sparse_keys)
A:tensorflow.python.ops.parsing_ops.num_feature_list_sparse->len(feature_list_sparse_keys)
A:tensorflow.python.ops.parsing_ops.context_output->dict(zip(context_sparse_keys + context_dense_keys, context_sparse_tensors + context_dense_values))
A:tensorflow.python.ops.parsing_ops.feature_list_output->dict(zip(feature_list_sparse_keys + feature_list_dense_keys, feature_list_sparse_tensors + feature_list_dense_values))
tensorflow.ops.parsing_ops.FixedLenFeature(collections.namedtuple('FixedLenFeature',['shape','dtype','default_value']))
tensorflow.ops.parsing_ops.FixedLenSequenceFeature(collections.namedtuple('FixedLenSequenceFeature',['shape','dtype','allow_missing','default_value']))
tensorflow.ops.parsing_ops.SparseFeature(collections.namedtuple('SparseFeature',['index_key','value_key','dtype','size','already_sorted']))
tensorflow.ops.parsing_ops.VarLenFeature(collections.namedtuple('VarLenFeature',['dtype']))
tensorflow.ops.parsing_ops._construct_sparse_tensors_for_sparse_features(features,tensor_dict)
tensorflow.ops.parsing_ops._features_to_raw_params(features,types)
tensorflow.ops.parsing_ops._parse_example_raw(serialized,names=None,sparse_keys=None,sparse_types=None,dense_keys=None,dense_types=None,dense_defaults=None,dense_shapes=None,name=None)
tensorflow.ops.parsing_ops._parse_single_example_raw(serialized,names=None,sparse_keys=None,sparse_types=None,dense_keys=None,dense_types=None,dense_defaults=None,dense_shapes=None,name=None)
tensorflow.ops.parsing_ops._parse_single_sequence_example_raw(serialized,context_sparse_keys=None,context_sparse_types=None,context_dense_keys=None,context_dense_types=None,context_dense_defaults=None,context_dense_shapes=None,feature_list_sparse_keys=None,feature_list_sparse_types=None,feature_list_dense_keys=None,feature_list_dense_types=None,feature_list_dense_shapes=None,feature_list_dense_defaults=None,debug_name=None,name=None)
tensorflow.ops.parsing_ops.parse_example(serialized,features,name=None,example_names=None)
tensorflow.ops.parsing_ops.parse_single_example(serialized,features,name=None,example_names=None)
tensorflow.ops.parsing_ops.parse_single_sequence_example(serialized,context_features=None,sequence_features=None,example_name=None,name=None)
tensorflow.python.ops.parsing_ops.FixedLenFeature(collections.namedtuple('FixedLenFeature',['shape','dtype','default_value']))
tensorflow.python.ops.parsing_ops.FixedLenSequenceFeature(collections.namedtuple('FixedLenSequenceFeature',['shape','dtype','allow_missing','default_value']))
tensorflow.python.ops.parsing_ops.SparseFeature(collections.namedtuple('SparseFeature',['index_key','value_key','dtype','size','already_sorted']))
tensorflow.python.ops.parsing_ops.VarLenFeature(collections.namedtuple('VarLenFeature',['dtype']))
tensorflow.python.ops.parsing_ops._construct_sparse_tensors_for_sparse_features(features,tensor_dict)
tensorflow.python.ops.parsing_ops._features_to_raw_params(features,types)
tensorflow.python.ops.parsing_ops._parse_example_raw(serialized,names=None,sparse_keys=None,sparse_types=None,dense_keys=None,dense_types=None,dense_defaults=None,dense_shapes=None,name=None)
tensorflow.python.ops.parsing_ops._parse_single_example_raw(serialized,names=None,sparse_keys=None,sparse_types=None,dense_keys=None,dense_types=None,dense_defaults=None,dense_shapes=None,name=None)
tensorflow.python.ops.parsing_ops._parse_single_sequence_example_raw(serialized,context_sparse_keys=None,context_sparse_types=None,context_dense_keys=None,context_dense_types=None,context_dense_defaults=None,context_dense_shapes=None,feature_list_sparse_keys=None,feature_list_sparse_types=None,feature_list_dense_keys=None,feature_list_dense_types=None,feature_list_dense_shapes=None,feature_list_dense_defaults=None,debug_name=None,name=None)
tensorflow.python.ops.parsing_ops.parse_example(serialized,features,name=None,example_names=None)
tensorflow.python.ops.parsing_ops.parse_single_example(serialized,features,name=None,example_names=None)
tensorflow.python.ops.parsing_ops.parse_single_sequence_example(serialized,context_features=None,sequence_features=None,example_name=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gradients.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/sets.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/io_ops.py----------------------------------------
A:tensorflow.python.ops.io_ops.old_queue_op->tensorflow.python.ops.gen_data_flow_ops._fake_queue(queue_ref)
A:tensorflow.python.ops.io_ops.rr->tensorflow.python.ops.gen_io_ops._identity_reader_v2(name=name)
A:tensorflow.python.ops.io_ops.compression_type->tensorflow.python.lib.io.python_io.TFRecordOptions.get_compression_type_string(options)
tensorflow.io_ops.FixedLengthRecordReader(self,record_bytes,header_bytes=None,footer_bytes=None,name=None)
tensorflow.io_ops.IdentityReader(self,name=None)
tensorflow.io_ops.ReaderBase(self,reader_ref,supports_serialize=False)
tensorflow.io_ops.ReaderBase.num_records_produced(self,name=None)
tensorflow.io_ops.ReaderBase.num_work_units_completed(self,name=None)
tensorflow.io_ops.ReaderBase.read(self,queue,name=None)
tensorflow.io_ops.ReaderBase.read_up_to(self,queue,num_records,name=None)
tensorflow.io_ops.ReaderBase.reader_ref(self)
tensorflow.io_ops.ReaderBase.reset(self,name=None)
tensorflow.io_ops.ReaderBase.restore_state(self,state,name=None)
tensorflow.io_ops.ReaderBase.serialize_state(self,name=None)
tensorflow.io_ops.ReaderBase.supports_serialize(self)
tensorflow.io_ops.TFRecordReader(self,name=None,options=None)
tensorflow.io_ops.TextLineReader(self,skip_header_lines=None,name=None)
tensorflow.io_ops.WholeFileReader(self,name=None)
tensorflow.io_ops._restore_slice(file_pattern,tensor_name,shape_and_slice,tensor_type,name='restore_slice',preferred_shard=-1)
tensorflow.io_ops._save(filename,tensor_names,tensors,tensor_slices=None,name='save')
tensorflow.python.ops.io_ops.FixedLengthRecordReader(self,record_bytes,header_bytes=None,footer_bytes=None,name=None)
tensorflow.python.ops.io_ops.FixedLengthRecordReader.__init__(self,record_bytes,header_bytes=None,footer_bytes=None,name=None)
tensorflow.python.ops.io_ops.IdentityReader(self,name=None)
tensorflow.python.ops.io_ops.IdentityReader.__init__(self,name=None)
tensorflow.python.ops.io_ops.ReaderBase(self,reader_ref,supports_serialize=False)
tensorflow.python.ops.io_ops.ReaderBase.__init__(self,reader_ref,supports_serialize=False)
tensorflow.python.ops.io_ops.ReaderBase.num_records_produced(self,name=None)
tensorflow.python.ops.io_ops.ReaderBase.num_work_units_completed(self,name=None)
tensorflow.python.ops.io_ops.ReaderBase.read(self,queue,name=None)
tensorflow.python.ops.io_ops.ReaderBase.read_up_to(self,queue,num_records,name=None)
tensorflow.python.ops.io_ops.ReaderBase.reader_ref(self)
tensorflow.python.ops.io_ops.ReaderBase.reset(self,name=None)
tensorflow.python.ops.io_ops.ReaderBase.restore_state(self,state,name=None)
tensorflow.python.ops.io_ops.ReaderBase.serialize_state(self,name=None)
tensorflow.python.ops.io_ops.ReaderBase.supports_serialize(self)
tensorflow.python.ops.io_ops.TFRecordReader(self,name=None,options=None)
tensorflow.python.ops.io_ops.TFRecordReader.__init__(self,name=None,options=None)
tensorflow.python.ops.io_ops.TextLineReader(self,skip_header_lines=None,name=None)
tensorflow.python.ops.io_ops.TextLineReader.__init__(self,skip_header_lines=None,name=None)
tensorflow.python.ops.io_ops.WholeFileReader(self,name=None)
tensorflow.python.ops.io_ops.WholeFileReader.__init__(self,name=None)
tensorflow.python.ops.io_ops._restore_slice(file_pattern,tensor_name,shape_and_slice,tensor_type,name='restore_slice',preferred_shard=-1)
tensorflow.python.ops.io_ops._save(filename,tensor_names,tensors,tensor_slices=None,name='save')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_ctc_ops.py----------------------------------------
A:tensorflow.python.ops.gen_ctc_ops._CTCBeamSearchDecoderOutput->collections.namedtuple('CTCBeamSearchDecoder', __ctc_beam_search_decoder_outputs)
A:tensorflow.python.ops.gen_ctc_ops.result->_InitOpDefLibrary().apply_op('CTCLoss', inputs=inputs, labels_indices=labels_indices, labels_values=labels_values, sequence_length=sequence_length, preprocess_collapse_repeated=preprocess_collapse_repeated, ctc_merge_repeated=ctc_merge_repeated, name=name)
A:tensorflow.python.ops.gen_ctc_ops._CTCGreedyDecoderOutput->collections.namedtuple('CTCGreedyDecoder', __ctc_greedy_decoder_outputs)
A:tensorflow.python.ops.gen_ctc_ops._CTCLossOutput->collections.namedtuple('CTCLoss', __ctc_loss_outputs)
A:tensorflow.python.ops.gen_ctc_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_ctc_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_ctc_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_ctc_ops._InitOpDefLibrary()
tensorflow.ops.gen_ctc_ops._ctc_beam_search_decoder(inputs,sequence_length,beam_width,top_paths,merge_repeated=None,name=None)
tensorflow.ops.gen_ctc_ops._ctc_greedy_decoder(inputs,sequence_length,merge_repeated=None,name=None)
tensorflow.ops.gen_ctc_ops._ctc_loss(inputs,labels_indices,labels_values,sequence_length,preprocess_collapse_repeated=None,ctc_merge_repeated=None,name=None)
tensorflow.python.ops.gen_ctc_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_ctc_ops._ctc_beam_search_decoder(inputs,sequence_length,beam_width,top_paths,merge_repeated=None,name=None)
tensorflow.python.ops.gen_ctc_ops._ctc_greedy_decoder(inputs,sequence_length,merge_repeated=None,name=None)
tensorflow.python.ops.gen_ctc_ops._ctc_loss(inputs,labels_indices,labels_values,sequence_length,preprocess_collapse_repeated=None,ctc_merge_repeated=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/nn_ops.py----------------------------------------
A:tensorflow.python.ops.nn_ops.input->tensorflow.python.framework.ops.convert_to_tensor(input, name='input')
A:tensorflow.python.ops.nn_ops.filter->tensorflow.python.framework.ops.convert_to_tensor(filter, name='filter')
A:tensorflow.python.ops.nn_ops.filter_shape->tensorflow.python.framework.graph_util.tensor_shape_from_node_def_name(graph, node.input[1])
A:tensorflow.python.ops.nn_ops.input_shape->tensorflow.python.framework.graph_util.tensor_shape_from_node_def_name(graph, node.input[0])
A:tensorflow.python.ops.nn_ops.dilation_rate->numpy.array(dilation_rate, dtype=np.int32)
A:tensorflow.python.ops.nn_ops.rate_shape->numpy.array(dilation_rate, dtype=np.int32).get_shape().with_rank(1)
A:tensorflow.python.ops.nn_ops.spatial_dims->range(2, num_spatial_dims + 2)
A:tensorflow.python.ops.nn_ops.orig_spatial_dims->list(spatial_dims)
A:tensorflow.python.ops.nn_ops.const_rate->tensorflow.python.framework.tensor_util.constant_value(dilation_rate)
A:tensorflow.python.ops.nn_ops.const_filter_shape->tensorflow.python.framework.tensor_util.constant_value(filter_shape)
A:tensorflow.python.ops.nn_ops.base_paddings->numpy.zeros([num_spatial_dims, 2], np.int32)
A:tensorflow.python.ops.nn_ops.input_shape_list->tensorflow.python.framework.ops.convert_to_tensor(input, name='input').get_shape().as_list()
A:tensorflow.python.ops.nn_ops.input_spatial_shape->tensorflow.python.ops.array_ops.gather(array_ops.shape(input), spatial_dims)
A:tensorflow.python.ops.nn_ops.(paddings, crops)->tensorflow.python.ops.array_ops.required_space_to_batch_paddings(input_shape=input_spatial_shape, base_paddings=base_paddings, block_shape=dilation_rate)
A:tensorflow.python.ops.nn_ops.const_orig->tensorflow.python.framework.tensor_util.constant_value(orig)
A:tensorflow.python.ops.nn_ops.paddings->adjust(paddings, 0)
A:tensorflow.python.ops.nn_ops.crops->adjust(crops, 0)
A:tensorflow.python.ops.nn_ops.input_converted->tensorflow.python.ops.array_ops.space_to_batch_nd(input=input, block_shape=dilation_rate, paddings=paddings)
A:tensorflow.python.ops.nn_ops.result->tensorflow.python.ops.gen_nn_ops.conv2d(value, filters, strides, padding, use_cudnn_on_gpu=use_cudnn_on_gpu, data_format=data_format)
A:tensorflow.python.ops.nn_ops.result_converted->tensorflow.python.ops.array_ops.batch_to_space_nd(input=result, block_shape=dilation_rate, crops=crops)
A:tensorflow.python.ops.nn_ops.strides->numpy.array(strides, dtype=np.int32)
A:tensorflow.python.ops.nn_ops.(strides, dilation_rate)->_get_strides_and_dilation_rate(num_spatial_dims, strides, dilation_rate)
A:tensorflow.python.ops.nn_ops.num_spatial_dims->len(window_shape)
A:tensorflow.python.ops.nn_ops.data_format_kwargs->dict(data_format=data_format)
A:tensorflow.python.ops.nn_ops.converted_input->tensorflow.python.ops.array_ops.expand_dims(converted_input, spatial_dims[0])
A:tensorflow.python.ops.nn_ops.value->tensorflow.python.ops.array_ops.expand_dims(value, spatial_start_dim)
A:tensorflow.python.ops.nn_ops.filters->tensorflow.python.ops.array_ops.expand_dims(filters, 0)
A:tensorflow.python.ops.nn_ops.value_shape->tensorflow.python.ops.array_ops.shape(value)
A:tensorflow.python.ops.nn_ops.output_shape_->tensorflow.python.framework.ops.convert_to_tensor(output_shape, name='output_shape')
A:tensorflow.python.ops.nn_ops.bias->tensorflow.python.framework.ops.convert_to_tensor(bias, dtype=value.dtype, name='bias')
A:tensorflow.python.ops.nn_ops.features->tensorflow.python.framework.ops.convert_to_tensor(features, name='features')
A:tensorflow.python.ops.nn_ops.c->tensorflow.python.ops.array_ops.concat([features, -features], -1, name=name)
A:tensorflow.python.ops.nn_ops.rank->tensorflow.python.ops.array_ops.rank(logits)
A:tensorflow.python.ops.nn_ops.last_dim_size->tensorflow.python.ops.array_ops.slice(array_ops.shape(logits), [math_ops.subtract(rank, 1)], [1])
A:tensorflow.python.ops.nn_ops.output->_swap_axis(output, dim, math_ops.subtract(input_rank, 1))
A:tensorflow.python.ops.nn_ops.shape->shape.as_list().as_list()
A:tensorflow.python.ops.nn_ops.logits->tensorflow.python.framework.ops.convert_to_tensor(logits)
A:tensorflow.python.ops.nn_ops.input_rank->tensorflow.python.ops.array_ops.rank(precise_logits)
A:tensorflow.python.ops.nn_ops.shape_after_swap->tensorflow.python.ops.array_ops.shape(logits)
A:tensorflow.python.ops.nn_ops.labels->tensorflow.python.ops.array_ops.reshape(labels, [-1])
A:tensorflow.python.ops.nn_ops.precise_logits->tensorflow.python.ops.array_ops.reshape(precise_logits, [-1, num_classes])
A:tensorflow.python.ops.nn_ops.(cost, unused_backprop)->tensorflow.python.ops.gen_nn_ops._softmax_cross_entropy_with_logits(precise_logits, labels, name=name)
A:tensorflow.python.ops.nn_ops.output_shape->tensorflow.python.framework.graph_util.tensor_shape_from_node_def_name(graph, node.name)
A:tensorflow.python.ops.nn_ops.cost->tensorflow.python.ops.array_ops.reshape(cost, labels_shape)
A:tensorflow.python.ops.nn_ops.labels_static_shape->tensorflow.python.ops.array_ops.reshape(labels, [-1]).get_shape()
A:tensorflow.python.ops.nn_ops.labels_shape->tensorflow.python.ops.array_ops.shape(labels)
A:tensorflow.python.ops.nn_ops.(cost, _)->tensorflow.python.ops.gen_nn_ops._sparse_softmax_cross_entropy_with_logits(precise_logits, labels, name=name)
A:tensorflow.python.ops.nn_ops.filter_height->int(filter_shape[0])
A:tensorflow.python.ops.nn_ops.filter_width->int(filter_shape[1])
A:tensorflow.python.ops.nn_ops.filter_in_depth->int(filter_shape[2])
A:tensorflow.python.ops.nn_ops.output_count->numpy.prod(output_shape.as_list())
A:tensorflow.python.ops.nn_ops.input_count->numpy.prod(input_shape.as_list())
A:tensorflow.python.ops.nn_ops.x->tensorflow.python.framework.ops.convert_to_tensor(x, name='x')
A:tensorflow.python.ops.nn_ops.weights->tensorflow.python.framework.ops.convert_to_tensor(weights, name='weights')
A:tensorflow.python.ops.nn_ops.biases->tensorflow.python.framework.ops.convert_to_tensor(biases, name='biases')
A:tensorflow.python.ops.nn_ops.mm->tensorflow.python.ops.math_ops.matmul(x, weights)
A:tensorflow.python.ops.nn_ops.keep_prob->tensorflow.python.framework.ops.convert_to_tensor(keep_prob, dtype=x.dtype, name='keep_prob')
A:tensorflow.python.ops.nn_ops.binary_tensor->tensorflow.python.ops.math_ops.floor(random_tensor)
tensorflow.nn_ops._calc_bias_add_flops(graph,node)
tensorflow.nn_ops._calc_conv_flops(graph,node)
tensorflow.nn_ops._calc_depthwise_conv_flops(graph,node)
tensorflow.nn_ops._calc_dilation2d_flops(graph,node)
tensorflow.nn_ops._ensure_xent_args(name,sentinel,labels,logits)
tensorflow.nn_ops._flatten_outer_dims(logits)
tensorflow.nn_ops._get_strides_and_dilation_rate(num_spatial_dims,strides,dilation_rate)
tensorflow.nn_ops._non_atrous_convolution(input,filter,padding,data_format=None,strides=None,name=None)
tensorflow.nn_ops._softmax(logits,compute_op,dim=-1,name=None)
tensorflow.nn_ops.atrous_conv2d(value,filters,rate,padding,name=None)
tensorflow.nn_ops.atrous_conv2d_transpose(value,filters,output_shape,rate,padding,name=None)
tensorflow.nn_ops.avg_pool(value,ksize,strides,padding,data_format='NHWC',name=None)
tensorflow.nn_ops.bias_add(value,bias,data_format=None,name=None)
tensorflow.nn_ops.bias_add_v1(value,bias,name=None)
tensorflow.nn_ops.conv1d(value,filters,stride,padding,use_cudnn_on_gpu=None,data_format=None,name=None)
tensorflow.nn_ops.conv2d_transpose(value,filter,output_shape,strides,padding='SAME',data_format='NHWC',name=None)
tensorflow.nn_ops.conv3d_transpose(value,filter,output_shape,strides,padding='SAME',name=None)
tensorflow.nn_ops.convolution(input,filter,padding,strides=None,dilation_rate=None,name=None,data_format=None)
tensorflow.nn_ops.crelu(features,name=None)
tensorflow.nn_ops.dropout(x,keep_prob,noise_shape=None,seed=None,name=None)
tensorflow.nn_ops.erosion2d(value,kernel,strides,rates,padding,name=None)
tensorflow.nn_ops.log_softmax(logits,dim=-1,name=None)
tensorflow.nn_ops.max_pool(value,ksize,strides,padding,data_format='NHWC',name=None)
tensorflow.nn_ops.pool(input,window_shape,pooling_type,padding,dilation_rate=None,strides=None,name=None,data_format=None)
tensorflow.nn_ops.relu6(features,name=None)
tensorflow.nn_ops.softmax(logits,dim=-1,name=None)
tensorflow.nn_ops.softmax_cross_entropy_with_logits(_sentinel=None,labels=None,logits=None,dim=-1,name=None)
tensorflow.nn_ops.sparse_softmax_cross_entropy_with_logits(_sentinel=None,labels=None,logits=None,name=None)
tensorflow.nn_ops.top_k(input,k=1,sorted=True,name=None)
tensorflow.nn_ops.with_space_to_batch(input,dilation_rate,padding,op,filter_shape=None,spatial_dims=None,data_format=None)
tensorflow.nn_ops.xw_plus_b(x,weights,biases,name=None)
tensorflow.nn_ops.xw_plus_b_v1(x,weights,biases,name=None)
tensorflow.python.ops.nn_ops._calc_bias_add_flops(graph,node)
tensorflow.python.ops.nn_ops._calc_conv_flops(graph,node)
tensorflow.python.ops.nn_ops._calc_depthwise_conv_flops(graph,node)
tensorflow.python.ops.nn_ops._calc_dilation2d_flops(graph,node)
tensorflow.python.ops.nn_ops._ensure_xent_args(name,sentinel,labels,logits)
tensorflow.python.ops.nn_ops._flatten_outer_dims(logits)
tensorflow.python.ops.nn_ops._get_strides_and_dilation_rate(num_spatial_dims,strides,dilation_rate)
tensorflow.python.ops.nn_ops._non_atrous_convolution(input,filter,padding,data_format=None,strides=None,name=None)
tensorflow.python.ops.nn_ops._softmax(logits,compute_op,dim=-1,name=None)
tensorflow.python.ops.nn_ops.atrous_conv2d(value,filters,rate,padding,name=None)
tensorflow.python.ops.nn_ops.atrous_conv2d_transpose(value,filters,output_shape,rate,padding,name=None)
tensorflow.python.ops.nn_ops.avg_pool(value,ksize,strides,padding,data_format='NHWC',name=None)
tensorflow.python.ops.nn_ops.bias_add(value,bias,data_format=None,name=None)
tensorflow.python.ops.nn_ops.bias_add_v1(value,bias,name=None)
tensorflow.python.ops.nn_ops.conv1d(value,filters,stride,padding,use_cudnn_on_gpu=None,data_format=None,name=None)
tensorflow.python.ops.nn_ops.conv2d_transpose(value,filter,output_shape,strides,padding='SAME',data_format='NHWC',name=None)
tensorflow.python.ops.nn_ops.conv3d_transpose(value,filter,output_shape,strides,padding='SAME',name=None)
tensorflow.python.ops.nn_ops.convolution(input,filter,padding,strides=None,dilation_rate=None,name=None,data_format=None)
tensorflow.python.ops.nn_ops.crelu(features,name=None)
tensorflow.python.ops.nn_ops.dropout(x,keep_prob,noise_shape=None,seed=None,name=None)
tensorflow.python.ops.nn_ops.erosion2d(value,kernel,strides,rates,padding,name=None)
tensorflow.python.ops.nn_ops.log_softmax(logits,dim=-1,name=None)
tensorflow.python.ops.nn_ops.max_pool(value,ksize,strides,padding,data_format='NHWC',name=None)
tensorflow.python.ops.nn_ops.pool(input,window_shape,pooling_type,padding,dilation_rate=None,strides=None,name=None,data_format=None)
tensorflow.python.ops.nn_ops.relu6(features,name=None)
tensorflow.python.ops.nn_ops.softmax(logits,dim=-1,name=None)
tensorflow.python.ops.nn_ops.softmax_cross_entropy_with_logits(_sentinel=None,labels=None,logits=None,dim=-1,name=None)
tensorflow.python.ops.nn_ops.sparse_softmax_cross_entropy_with_logits(_sentinel=None,labels=None,logits=None,name=None)
tensorflow.python.ops.nn_ops.top_k(input,k=1,sorted=True,name=None)
tensorflow.python.ops.nn_ops.with_space_to_batch(input,dilation_rate,padding,op,filter_shape=None,spatial_dims=None,data_format=None)
tensorflow.python.ops.nn_ops.xw_plus_b(x,weights,biases,name=None)
tensorflow.python.ops.nn_ops.xw_plus_b_v1(x,weights,biases,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/ctc_ops.py----------------------------------------
A:tensorflow.python.ops.ctc_ops.inputs->tensorflow.python.ops.array_ops.transpose(inputs, [1, 0, 2])
A:tensorflow.python.ops.ctc_ops.(loss, _)->tensorflow.python.ops.gen_ctc_ops._ctc_loss(inputs, labels.indices, labels.values, sequence_length, preprocess_collapse_repeated=preprocess_collapse_repeated, ctc_merge_repeated=ctc_merge_repeated)
A:tensorflow.python.ops.ctc_ops.grad_without_gradient->tensorflow.python.ops.array_ops.prevent_gradient(op.outputs[1], message="Currently there is no way to take the second  derivative of ctc_loss due to the fused implementation's interaction  with tf.gradients()")
A:tensorflow.python.ops.ctc_ops.outputs->tensorflow.python.ops.gen_ctc_ops._ctc_greedy_decoder(inputs, sequence_length, merge_repeated=merge_repeated)
A:tensorflow.python.ops.ctc_ops.(decoded_ixs, decoded_vals, decoded_shapes, log_probabilities)->tensorflow.python.ops.gen_ctc_ops._ctc_beam_search_decoder(inputs, sequence_length, beam_width=beam_width, top_paths=top_paths, merge_repeated=merge_repeated)
tensorflow.ops.ctc_ops._CTCLossGrad(op,grad_loss,_)
tensorflow.ops.ctc_ops.ctc_beam_search_decoder(inputs,sequence_length,beam_width=100,top_paths=1,merge_repeated=True)
tensorflow.ops.ctc_ops.ctc_greedy_decoder(inputs,sequence_length,merge_repeated=True)
tensorflow.ops.ctc_ops.ctc_loss(labels,inputs,sequence_length,preprocess_collapse_repeated=False,ctc_merge_repeated=True,time_major=True)
tensorflow.python.ops.ctc_ops._CTCLossGrad(op,grad_loss,_)
tensorflow.python.ops.ctc_ops.ctc_beam_search_decoder(inputs,sequence_length,beam_width=100,top_paths=1,merge_repeated=True)
tensorflow.python.ops.ctc_ops.ctc_greedy_decoder(inputs,sequence_length,merge_repeated=True)
tensorflow.python.ops.ctc_ops.ctc_loss(labels,inputs,sequence_length,preprocess_collapse_repeated=False,ctc_merge_repeated=True,time_major=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/gen_io_ops.py----------------------------------------
A:tensorflow.python.ops.gen_io_ops.result->_InitOpDefLibrary().apply_op('WriteFile', filename=filename, contents=contents, name=name)
A:tensorflow.python.ops.gen_io_ops._ReaderReadOutput->collections.namedtuple('ReaderRead', __reader_read_outputs)
A:tensorflow.python.ops.gen_io_ops._ReaderReadUpToOutput->collections.namedtuple('ReaderReadUpTo', __reader_read_up_to_outputs)
A:tensorflow.python.ops.gen_io_ops._ReaderReadUpToV2Output->collections.namedtuple('ReaderReadUpToV2', __reader_read_up_to_v2_outputs)
A:tensorflow.python.ops.gen_io_ops._ReaderReadV2Output->collections.namedtuple('ReaderReadV2', __reader_read_v2_outputs)
A:tensorflow.python.ops.gen_io_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.ops.gen_io_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.ops.gen_io_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.ops.gen_io_ops._InitOpDefLibrary()
tensorflow.ops.gen_io_ops._fixed_length_record_reader(record_bytes,header_bytes=None,footer_bytes=None,container=None,shared_name=None,name=None)
tensorflow.ops.gen_io_ops._fixed_length_record_reader_v2(record_bytes,header_bytes=None,footer_bytes=None,container=None,shared_name=None,name=None)
tensorflow.ops.gen_io_ops._identity_reader(container=None,shared_name=None,name=None)
tensorflow.ops.gen_io_ops._identity_reader_v2(container=None,shared_name=None,name=None)
tensorflow.ops.gen_io_ops._reader_num_records_produced(reader_handle,name=None)
tensorflow.ops.gen_io_ops._reader_num_records_produced_v2(reader_handle,name=None)
tensorflow.ops.gen_io_ops._reader_num_work_units_completed(reader_handle,name=None)
tensorflow.ops.gen_io_ops._reader_num_work_units_completed_v2(reader_handle,name=None)
tensorflow.ops.gen_io_ops._reader_read(reader_handle,queue_handle,name=None)
tensorflow.ops.gen_io_ops._reader_read_up_to(reader_handle,queue_handle,num_records,name=None)
tensorflow.ops.gen_io_ops._reader_read_up_to_v2(reader_handle,queue_handle,num_records,name=None)
tensorflow.ops.gen_io_ops._reader_read_v2(reader_handle,queue_handle,name=None)
tensorflow.ops.gen_io_ops._reader_reset(reader_handle,name=None)
tensorflow.ops.gen_io_ops._reader_reset_v2(reader_handle,name=None)
tensorflow.ops.gen_io_ops._reader_restore_state(reader_handle,state,name=None)
tensorflow.ops.gen_io_ops._reader_restore_state_v2(reader_handle,state,name=None)
tensorflow.ops.gen_io_ops._reader_serialize_state(reader_handle,name=None)
tensorflow.ops.gen_io_ops._reader_serialize_state_v2(reader_handle,name=None)
tensorflow.ops.gen_io_ops._restore(file_pattern,tensor_name,dt,preferred_shard=None,name=None)
tensorflow.ops.gen_io_ops._restore_slice(file_pattern,tensor_name,shape_and_slice,dt,preferred_shard=None,name=None)
tensorflow.ops.gen_io_ops._save(filename,tensor_names,data,name=None)
tensorflow.ops.gen_io_ops._save_slices(filename,tensor_names,shapes_and_slices,data,name=None)
tensorflow.ops.gen_io_ops._sharded_filename(basename,shard,num_shards,name=None)
tensorflow.ops.gen_io_ops._sharded_filespec(basename,num_shards,name=None)
tensorflow.ops.gen_io_ops._text_line_reader(skip_header_lines=None,container=None,shared_name=None,name=None)
tensorflow.ops.gen_io_ops._text_line_reader_v2(skip_header_lines=None,container=None,shared_name=None,name=None)
tensorflow.ops.gen_io_ops._tf_record_reader(container=None,shared_name=None,compression_type=None,name=None)
tensorflow.ops.gen_io_ops._tf_record_reader_v2(container=None,shared_name=None,compression_type=None,name=None)
tensorflow.ops.gen_io_ops._whole_file_reader(container=None,shared_name=None,name=None)
tensorflow.ops.gen_io_ops._whole_file_reader_v2(container=None,shared_name=None,name=None)
tensorflow.ops.gen_io_ops.matching_files(pattern,name=None)
tensorflow.ops.gen_io_ops.merge_v2_checkpoints(checkpoint_prefixes,destination_prefix,delete_old_dirs=None,name=None)
tensorflow.ops.gen_io_ops.read_file(filename,name=None)
tensorflow.ops.gen_io_ops.restore_v2(prefix,tensor_names,shape_and_slices,dtypes,name=None)
tensorflow.ops.gen_io_ops.save_v2(prefix,tensor_names,shape_and_slices,tensors,name=None)
tensorflow.ops.gen_io_ops.write_file(filename,contents,name=None)
tensorflow.python.ops.gen_io_ops._InitOpDefLibrary()
tensorflow.python.ops.gen_io_ops._fixed_length_record_reader(record_bytes,header_bytes=None,footer_bytes=None,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_io_ops._fixed_length_record_reader_v2(record_bytes,header_bytes=None,footer_bytes=None,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_io_ops._identity_reader(container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_io_ops._identity_reader_v2(container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_io_ops._reader_num_records_produced(reader_handle,name=None)
tensorflow.python.ops.gen_io_ops._reader_num_records_produced_v2(reader_handle,name=None)
tensorflow.python.ops.gen_io_ops._reader_num_work_units_completed(reader_handle,name=None)
tensorflow.python.ops.gen_io_ops._reader_num_work_units_completed_v2(reader_handle,name=None)
tensorflow.python.ops.gen_io_ops._reader_read(reader_handle,queue_handle,name=None)
tensorflow.python.ops.gen_io_ops._reader_read_up_to(reader_handle,queue_handle,num_records,name=None)
tensorflow.python.ops.gen_io_ops._reader_read_up_to_v2(reader_handle,queue_handle,num_records,name=None)
tensorflow.python.ops.gen_io_ops._reader_read_v2(reader_handle,queue_handle,name=None)
tensorflow.python.ops.gen_io_ops._reader_reset(reader_handle,name=None)
tensorflow.python.ops.gen_io_ops._reader_reset_v2(reader_handle,name=None)
tensorflow.python.ops.gen_io_ops._reader_restore_state(reader_handle,state,name=None)
tensorflow.python.ops.gen_io_ops._reader_restore_state_v2(reader_handle,state,name=None)
tensorflow.python.ops.gen_io_ops._reader_serialize_state(reader_handle,name=None)
tensorflow.python.ops.gen_io_ops._reader_serialize_state_v2(reader_handle,name=None)
tensorflow.python.ops.gen_io_ops._restore(file_pattern,tensor_name,dt,preferred_shard=None,name=None)
tensorflow.python.ops.gen_io_ops._restore_slice(file_pattern,tensor_name,shape_and_slice,dt,preferred_shard=None,name=None)
tensorflow.python.ops.gen_io_ops._save(filename,tensor_names,data,name=None)
tensorflow.python.ops.gen_io_ops._save_slices(filename,tensor_names,shapes_and_slices,data,name=None)
tensorflow.python.ops.gen_io_ops._sharded_filename(basename,shard,num_shards,name=None)
tensorflow.python.ops.gen_io_ops._sharded_filespec(basename,num_shards,name=None)
tensorflow.python.ops.gen_io_ops._text_line_reader(skip_header_lines=None,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_io_ops._text_line_reader_v2(skip_header_lines=None,container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_io_ops._tf_record_reader(container=None,shared_name=None,compression_type=None,name=None)
tensorflow.python.ops.gen_io_ops._tf_record_reader_v2(container=None,shared_name=None,compression_type=None,name=None)
tensorflow.python.ops.gen_io_ops._whole_file_reader(container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_io_ops._whole_file_reader_v2(container=None,shared_name=None,name=None)
tensorflow.python.ops.gen_io_ops.matching_files(pattern,name=None)
tensorflow.python.ops.gen_io_ops.merge_v2_checkpoints(checkpoint_prefixes,destination_prefix,delete_old_dirs=None,name=None)
tensorflow.python.ops.gen_io_ops.read_file(filename,name=None)
tensorflow.python.ops.gen_io_ops.restore_v2(prefix,tensor_names,shape_and_slices,dtypes,name=None)
tensorflow.python.ops.gen_io_ops.save_v2(prefix,tensor_names,shape_and_slices,tensors,name=None)
tensorflow.python.ops.gen_io_ops.write_file(filename,contents,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/losses/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/losses/losses.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/losses/losses_impl.py----------------------------------------
A:tensorflow.python.ops.losses.losses_impl.weighted_losses->tensorflow.python.ops.math_ops.multiply(losses, weights)
A:tensorflow.python.ops.losses.losses_impl.total_loss->_scale_losses(losses, weights)
A:tensorflow.python.ops.losses.losses_impl.weights->tensorflow.python.ops.control_flow_ops.cond(math_ops.equal(1, rank_diff), lambda : array_ops.squeeze(weights, [-1]), lambda : weights)
A:tensorflow.python.ops.losses.losses_impl.present->tensorflow.python.ops.weights_broadcast_ops.broadcast_weights(present, losses)
A:tensorflow.python.ops.losses.losses_impl.losses->tensorflow.python.ops.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits, name='xentropy')
A:tensorflow.python.ops.losses.losses_impl.num_present->_num_present(losses, weights)
A:tensorflow.python.ops.losses.losses_impl.mean_loss->tensorflow.python.ops.array_ops.where(math_ops.reduce_sum(num_present_per_batch) > 0, loss, array_ops.zeros_like(loss), name='value')
A:tensorflow.python.ops.losses.losses_impl.predictions->tensorflow.python.ops.math_ops.to_float(predictions)
A:tensorflow.python.ops.losses.losses_impl.labels->tensorflow.python.ops.math_ops.to_float(labels)
A:tensorflow.python.ops.losses.losses_impl.radial_diffs->tensorflow.python.ops.math_ops.multiply(predictions, labels)
A:tensorflow.python.ops.losses.losses_impl.logits->tensorflow.python.framework.ops.convert_to_tensor(logits)
A:tensorflow.python.ops.losses.losses_impl.all_ones->tensorflow.python.ops.array_ops.ones_like(labels)
A:tensorflow.python.ops.losses.losses_impl.diffs->tensorflow.python.ops.math_ops.subtract(predictions, labels)
A:tensorflow.python.ops.losses.losses_impl.reduction_indices->tensorflow.python.ops.math_ops.range(1, array_ops.rank(diffs))
A:tensorflow.python.ops.losses.losses_impl.sum_squares_diff_per_batch->tensorflow.python.ops.math_ops.reduce_sum(math_ops.square(diffs), reduction_indices=reduction_indices, keep_dims=True)
A:tensorflow.python.ops.losses.losses_impl.num_present_per_batch->_num_present(diffs, weights, per_batch=True)
A:tensorflow.python.ops.losses.losses_impl.sum_diff->tensorflow.python.ops.math_ops.reduce_sum(diffs, reduction_indices=reduction_indices, keep_dims=True)
A:tensorflow.python.ops.losses.losses_impl.loss->_scale_losses(term1 - term2, weights)
A:tensorflow.python.ops.losses.losses_impl.multi_class_labels->tensorflow.python.ops.math_ops.cast(multi_class_labels, logits.dtype)
A:tensorflow.python.ops.losses.losses_impl.onehot_labels->tensorflow.python.ops.math_ops.cast(onehot_labels, logits.dtype)
A:tensorflow.python.ops.losses.losses_impl.num_classes->tensorflow.python.ops.math_ops.cast(array_ops.shape(onehot_labels)[1], logits.dtype)
A:tensorflow.python.ops.losses.losses_impl.(labels, predictions)->tensorflow.python.ops.confusion_matrix.remove_squeezable_dimensions(labels, predictions, expected_rank_diff=expected_rank_diff)
A:tensorflow.python.ops.losses.losses_impl.weights_shape->tensorflow.python.ops.control_flow_ops.cond(math_ops.equal(1, rank_diff), lambda : array_ops.squeeze(weights, [-1]), lambda : weights).get_shape()
A:tensorflow.python.ops.losses.losses_impl.(labels, logits, weights)->_remove_squeezable_dimensions(labels, logits, weights, expected_rank_diff=1)
tensorflow.losses_impl._num_present(losses,weights,per_batch=False)
tensorflow.losses_impl._remove_squeezable_dimensions(labels,predictions,weights=None,expected_rank_diff=0)
tensorflow.losses_impl._safe_div(numerator,denominator,name='value')
tensorflow.losses_impl._safe_mean(losses,num_present)
tensorflow.losses_impl._scale_losses(losses,weights)
tensorflow.losses_impl.absolute_difference(labels,predictions,weights=1.0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.losses_impl.compute_weighted_loss(losses,weights=1.0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.losses_impl.cosine_distance(labels,predictions,dim=None,weights=1.0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.losses_impl.hinge_loss(labels,logits,weights=1.0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.losses_impl.log_loss(labels,predictions,weights=1.0,epsilon=1e-07,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.losses_impl.mean_pairwise_squared_error(labels,predictions,weights=1.0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.losses_impl.mean_squared_error(labels,predictions,weights=1.0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.losses_impl.sigmoid_cross_entropy(multi_class_labels,logits,weights=1.0,label_smoothing=0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.losses_impl.softmax_cross_entropy(onehot_labels,logits,weights=1.0,label_smoothing=0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.losses_impl.sparse_softmax_cross_entropy(labels,logits,weights=1.0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.python.ops.losses.losses_impl._num_present(losses,weights,per_batch=False)
tensorflow.python.ops.losses.losses_impl._remove_squeezable_dimensions(labels,predictions,weights=None,expected_rank_diff=0)
tensorflow.python.ops.losses.losses_impl._safe_div(numerator,denominator,name='value')
tensorflow.python.ops.losses.losses_impl._safe_mean(losses,num_present)
tensorflow.python.ops.losses.losses_impl._scale_losses(losses,weights)
tensorflow.python.ops.losses.losses_impl.absolute_difference(labels,predictions,weights=1.0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.python.ops.losses.losses_impl.compute_weighted_loss(losses,weights=1.0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.python.ops.losses.losses_impl.cosine_distance(labels,predictions,dim=None,weights=1.0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.python.ops.losses.losses_impl.hinge_loss(labels,logits,weights=1.0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.python.ops.losses.losses_impl.log_loss(labels,predictions,weights=1.0,epsilon=1e-07,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.python.ops.losses.losses_impl.mean_pairwise_squared_error(labels,predictions,weights=1.0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.python.ops.losses.losses_impl.mean_squared_error(labels,predictions,weights=1.0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.python.ops.losses.losses_impl.sigmoid_cross_entropy(multi_class_labels,logits,weights=1.0,label_smoothing=0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.python.ops.losses.losses_impl.softmax_cross_entropy(onehot_labels,logits,weights=1.0,label_smoothing=0,scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.python.ops.losses.losses_impl.sparse_softmax_cross_entropy(labels,logits,weights=1.0,scope=None,loss_collection=ops.GraphKeys.LOSSES)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/ops/losses/util.py----------------------------------------
A:tensorflow.python.ops.losses.util.losses->get_losses()
tensorflow.ops.losses.util.add_loss(loss,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.ops.losses.util.get_losses(scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.ops.losses.util.get_regularization_loss(scope=None,name='total_regularization_loss')
tensorflow.ops.losses.util.get_regularization_losses(scope=None)
tensorflow.ops.losses.util.get_total_loss(add_regularization_losses=True,name='total_loss')
tensorflow.python.ops.losses.util.add_loss(loss,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.python.ops.losses.util.get_losses(scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.python.ops.losses.util.get_regularization_loss(scope=None,name='total_regularization_loss')
tensorflow.python.ops.losses.util.get_regularization_losses(scope=None)
tensorflow.python.ops.losses.util.get_total_loss(add_regularization_losses=True,name='total_loss')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/layers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/layers/layers.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/layers/core.py----------------------------------------
A:tensorflow.python.layers.core.input_shape->input_shape.with_rank_at_least(2).with_rank_at_least(2)
A:tensorflow.python.layers.core.self.kernel->tensorflow.python.ops.variable_scope.get_variable('kernel', shape=[input_shape[-1].value, self.units], initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, dtype=self.dtype, trainable=True)
A:tensorflow.python.layers.core.self.bias->tensorflow.python.ops.variable_scope.get_variable('bias', shape=[self.units], initializer=self.bias_initializer, regularizer=self.bias_regularizer, dtype=self.dtype, trainable=True)
A:tensorflow.python.layers.core.shape->inputs.get_shape().as_list()
A:tensorflow.python.layers.core.outputs->tensorflow.python.ops.nn.bias_add(outputs, self.bias)
A:tensorflow.python.layers.core.layer->Dropout(rate, noise_shape=noise_shape, seed=seed, name=name)
tensorflow.layers.core.Dense(self,units,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.layers.core.Dense._compute_output_shape(self,input_shape)
tensorflow.layers.core.Dense.build(self,input_shape)
tensorflow.layers.core.Dense.call(self,inputs)
tensorflow.layers.core.Dropout(self,rate=0.5,noise_shape=None,seed=None,name=None,**kwargs)
tensorflow.layers.core.Dropout.call(self,inputs,training=False)
tensorflow.layers.core.dense(inputs,units,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,reuse=None)
tensorflow.layers.core.dropout(inputs,rate=0.5,noise_shape=None,seed=None,training=False,name=None)
tensorflow.python.layers.core.Dense(self,units,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.core.Dense.__init__(self,units,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.core.Dense._compute_output_shape(self,input_shape)
tensorflow.python.layers.core.Dense.build(self,input_shape)
tensorflow.python.layers.core.Dense.call(self,inputs)
tensorflow.python.layers.core.Dropout(self,rate=0.5,noise_shape=None,seed=None,name=None,**kwargs)
tensorflow.python.layers.core.Dropout.__init__(self,rate=0.5,noise_shape=None,seed=None,name=None,**kwargs)
tensorflow.python.layers.core.Dropout.call(self,inputs,training=False)
tensorflow.python.layers.core.dense(inputs,units,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,reuse=None)
tensorflow.python.layers.core.dropout(inputs,rate=0.5,noise_shape=None,seed=None,training=False,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/layers/utils.py----------------------------------------
A:tensorflow.python.layers.utils.value_tuple->tuple(value)
A:tensorflow.python.layers.utils.data_format->value.lower()
A:tensorflow.python.layers.utils.padding->value.lower()
A:tensorflow.python.layers.utils.pred_value->tensorflow.python.framework.tensor_util.constant_value(pred)
tensorflow.layers.utils.constant_value(pred)
tensorflow.layers.utils.convert_data_format(data_format,ndim)
tensorflow.layers.utils.normalize_data_format(value)
tensorflow.layers.utils.normalize_padding(value)
tensorflow.layers.utils.normalize_tuple(value,n,name)
tensorflow.layers.utils.smart_cond(pred,fn1,fn2,name=None)
tensorflow.python.layers.utils.constant_value(pred)
tensorflow.python.layers.utils.convert_data_format(data_format,ndim)
tensorflow.python.layers.utils.normalize_data_format(value)
tensorflow.python.layers.utils.normalize_padding(value)
tensorflow.python.layers.utils.normalize_tuple(value,n,name)
tensorflow.python.layers.utils.smart_cond(pred,fn1,fn2,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/layers/pooling.py----------------------------------------
A:tensorflow.python.layers.pooling.self.pool_size->tensorflow.python.layers.utils.normalize_tuple(pool_size, 3, 'pool_size')
A:tensorflow.python.layers.pooling.self.strides->tensorflow.python.layers.utils.normalize_tuple(strides, 3, 'strides')
A:tensorflow.python.layers.pooling.self.padding->tensorflow.python.layers.utils.normalize_padding(padding)
A:tensorflow.python.layers.pooling.self.data_format->tensorflow.python.layers.utils.normalize_data_format(data_format)
A:tensorflow.python.layers.pooling.inputs->tensorflow.python.ops.array_ops.transpose(inputs, (0, 2, 3, 4, 1))
A:tensorflow.python.layers.pooling.outputs->tensorflow.python.ops.array_ops.transpose(outputs, (0, 4, 1, 2, 3))
A:tensorflow.python.layers.pooling.layer->MaxPooling3D(pool_size=pool_size, strides=strides, padding=padding, data_format=data_format, name=name)
tensorflow.layers.pooling.AveragePooling1D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.layers.pooling.AveragePooling2D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.layers.pooling.AveragePooling3D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.layers.pooling.MaxPooling1D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.layers.pooling.MaxPooling2D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.layers.pooling.MaxPooling3D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.layers.pooling._Pooling1D(self,pool_function,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.layers.pooling._Pooling1D.build(self,input_shape)
tensorflow.layers.pooling._Pooling1D.call(self,inputs)
tensorflow.layers.pooling._Pooling2D(self,pool_function,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.layers.pooling._Pooling2D.build(self,input_shape)
tensorflow.layers.pooling._Pooling2D.call(self,inputs)
tensorflow.layers.pooling._Pooling3D(self,pool_function,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.layers.pooling._Pooling3D.build(self,input_shape)
tensorflow.layers.pooling._Pooling3D.call(self,inputs)
tensorflow.layers.pooling.average_pooling1d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tensorflow.layers.pooling.average_pooling2d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tensorflow.layers.pooling.average_pooling3d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tensorflow.layers.pooling.max_pooling1d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tensorflow.layers.pooling.max_pooling2d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tensorflow.layers.pooling.max_pooling3d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tensorflow.python.layers.pooling.AveragePooling1D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling.AveragePooling1D.__init__(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling.AveragePooling2D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling.AveragePooling2D.__init__(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling.AveragePooling3D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling.AveragePooling3D.__init__(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling.MaxPooling1D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling.MaxPooling1D.__init__(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling.MaxPooling2D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling.MaxPooling2D.__init__(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling.MaxPooling3D(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling.MaxPooling3D.__init__(self,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling._Pooling1D(self,pool_function,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling._Pooling1D.__init__(self,pool_function,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling._Pooling1D.build(self,input_shape)
tensorflow.python.layers.pooling._Pooling1D.call(self,inputs)
tensorflow.python.layers.pooling._Pooling2D(self,pool_function,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling._Pooling2D.__init__(self,pool_function,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling._Pooling2D.build(self,input_shape)
tensorflow.python.layers.pooling._Pooling2D.call(self,inputs)
tensorflow.python.layers.pooling._Pooling3D(self,pool_function,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling._Pooling3D.__init__(self,pool_function,pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tensorflow.python.layers.pooling._Pooling3D.build(self,input_shape)
tensorflow.python.layers.pooling._Pooling3D.call(self,inputs)
tensorflow.python.layers.pooling.average_pooling1d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tensorflow.python.layers.pooling.average_pooling2d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tensorflow.python.layers.pooling.average_pooling3d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tensorflow.python.layers.pooling.max_pooling1d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tensorflow.python.layers.pooling.max_pooling2d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tensorflow.python.layers.pooling.max_pooling3d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/layers/convolutional.py----------------------------------------
A:tensorflow.python.layers.convolutional.self.kernel_size->tensorflow.python.layers.utils.normalize_tuple(kernel_size, rank, 'kernel_size')
A:tensorflow.python.layers.convolutional.self.strides->tensorflow.python.layers.utils.normalize_tuple(strides, rank, 'strides')
A:tensorflow.python.layers.convolutional.self.padding->tensorflow.python.layers.utils.normalize_padding(padding)
A:tensorflow.python.layers.convolutional.self.data_format->tensorflow.python.layers.utils.normalize_data_format(data_format)
A:tensorflow.python.layers.convolutional.self.dilation_rate->tensorflow.python.layers.utils.normalize_tuple(dilation_rate, rank, 'dilation_rate')
A:tensorflow.python.layers.convolutional.self.kernel->tensorflow.python.ops.variable_scope.get_variable('kernel', shape=kernel_shape, initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, trainable=True, dtype=self.dtype)
A:tensorflow.python.layers.convolutional.self.bias->tensorflow.python.ops.variable_scope.get_variable('bias', shape=(self.filters,), initializer=self.bias_initializer, regularizer=self.bias_regularizer, trainable=True, dtype=self.dtype)
A:tensorflow.python.layers.convolutional.outputs->tensorflow.python.ops.nn.bias_add(outputs, self.bias, data_format=utils.convert_data_format(self.data_format, ndim=4))
A:tensorflow.python.layers.convolutional.bias->tensorflow.python.ops.array_ops.reshape(self.bias, (1, self.filters, 1, 1))
A:tensorflow.python.layers.convolutional.layer->Conv2DTranspose(filters=filters, kernel_size=kernel_size, strides=strides, padding=padding, data_format=data_format, activation=activation, use_bias=use_bias, kernel_initializer=kernel_initializer, bias_initializer=bias_initializer, kernel_regularizer=kernel_regularizer, bias_regularizer=bias_regularizer, activity_regularizer=activity_regularizer, trainable=trainable, name=name, _reuse=reuse, _scope=name)
A:tensorflow.python.layers.convolutional.input_dim->int(input_shape[channel_axis])
A:tensorflow.python.layers.convolutional.self.depthwise_kernel->tensorflow.python.ops.variable_scope.get_variable('depthwise_kernel', shape=depthwise_kernel_shape, initializer=self.depthwise_initializer, regularizer=self.depthwise_regularizer, trainable=True, dtype=self.dtype)
A:tensorflow.python.layers.convolutional.self.pointwise_kernel->tensorflow.python.ops.variable_scope.get_variable('pointwise_kernel', shape=pointwise_kernel_shape, initializer=self.pointwise_initializer, regularizer=self.pointwise_regularizer, trainable=True, dtype=self.dtype)
A:tensorflow.python.layers.convolutional.inputs->tensorflow.python.ops.array_ops.transpose(inputs, (0, 2, 3, 1))
A:tensorflow.python.layers.convolutional.inputs_shape->tensorflow.python.ops.array_ops.shape(inputs)
A:tensorflow.python.layers.convolutional.dim_size->tensorflow.python.ops.math_ops.multiply(dim_size, stride_size)
A:tensorflow.python.layers.convolutional.out_height->get_deconv_dim(height, stride_h, kernel_h, self.padding)
A:tensorflow.python.layers.convolutional.out_width->get_deconv_dim(width, stride_w, kernel_w, self.padding)
A:tensorflow.python.layers.convolutional.output_shape_tensor->tensorflow.python.ops.array_ops.stack(output_shape)
A:tensorflow.python.layers.convolutional.out_shape->tensorflow.python.ops.array_ops.transpose(inputs, (0, 2, 3, 1)).get_shape().as_list()
A:tensorflow.python.layers.convolutional.out_shape[h_axis]->get_deconv_dim(out_shape[h_axis], stride_h, kernel_h, self.padding)
A:tensorflow.python.layers.convolutional.out_shape[w_axis]->get_deconv_dim(out_shape[w_axis], stride_w, kernel_w, self.padding)
tensorflow.layers.convolutional.Conv1D(self,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.layers.convolutional.Conv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.layers.convolutional.Conv2DTranspose(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.layers.convolutional.Conv2DTranspose.build(self,input_shape)
tensorflow.layers.convolutional.Conv2DTranspose.call(self,inputs)
tensorflow.layers.convolutional.Conv3D(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.layers.convolutional.SeparableConv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=init_ops.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.layers.convolutional.SeparableConv2D.build(self,input_shape)
tensorflow.layers.convolutional.SeparableConv2D.call(self,inputs)
tensorflow.layers.convolutional._Conv(self,rank,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.layers.convolutional._Conv.build(self,input_shape)
tensorflow.layers.convolutional._Conv.call(self,inputs)
tensorflow.layers.convolutional.conv1d(inputs,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,reuse=None)
tensorflow.layers.convolutional.conv2d(inputs,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,reuse=None)
tensorflow.layers.convolutional.conv2d_transpose(inputs,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,reuse=None)
tensorflow.layers.convolutional.conv3d(inputs,filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,reuse=None)
tensorflow.layers.convolutional.separable_conv2d(inputs,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=init_ops.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,reuse=None)
tensorflow.python.layers.convolutional.Conv1D(self,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.convolutional.Conv1D.__init__(self,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.convolutional.Conv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.convolutional.Conv2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.convolutional.Conv2DTranspose(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.convolutional.Conv2DTranspose.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.convolutional.Conv2DTranspose.build(self,input_shape)
tensorflow.python.layers.convolutional.Conv2DTranspose.call(self,inputs)
tensorflow.python.layers.convolutional.Conv3D(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.convolutional.Conv3D.__init__(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.convolutional.SeparableConv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=init_ops.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.convolutional.SeparableConv2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=init_ops.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.convolutional.SeparableConv2D.build(self,input_shape)
tensorflow.python.layers.convolutional.SeparableConv2D.call(self,inputs)
tensorflow.python.layers.convolutional._Conv(self,rank,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.convolutional._Conv.__init__(self,rank,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.convolutional._Conv.build(self,input_shape)
tensorflow.python.layers.convolutional._Conv.call(self,inputs)
tensorflow.python.layers.convolutional.conv1d(inputs,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,reuse=None)
tensorflow.python.layers.convolutional.conv2d(inputs,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,reuse=None)
tensorflow.python.layers.convolutional.conv2d_transpose(inputs,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,reuse=None)
tensorflow.python.layers.convolutional.conv3d(inputs,filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=init_ops.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,reuse=None)
tensorflow.python.layers.convolutional.separable_conv2d(inputs,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=init_ops.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,trainable=True,name=None,reuse=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/layers/normalization.py----------------------------------------
A:tensorflow.python.layers.normalization.input_shape->inputs.get_shape()
A:tensorflow.python.layers.normalization.ndim->len(input_shape)
A:tensorflow.python.layers.normalization.self.beta->tensorflow.python.ops.variable_scope.get_variable('beta', shape=(param_dim,), initializer=self.beta_initializer, regularizer=self.beta_regularizer, trainable=True)
A:tensorflow.python.layers.normalization.self.gamma->tensorflow.python.ops.variable_scope.get_variable('gamma', shape=(param_dim,), initializer=self.gamma_initializer, regularizer=self.gamma_regularizer, trainable=True)
A:tensorflow.python.layers.normalization.self.moving_mean->tensorflow.python.ops.variable_scope.get_variable('moving_mean', shape=(param_dim,), initializer=self.moving_mean_initializer, trainable=False)
A:tensorflow.python.layers.normalization.self.moving_variance->tensorflow.python.ops.variable_scope.get_variable('moving_variance', shape=(param_dim,), initializer=self.moving_variance_initializer, trainable=False)
A:tensorflow.python.layers.normalization.reduction_axes->list(range(len(input_shape)))
A:tensorflow.python.layers.normalization.training_value->tensorflow.python.layers.utils.constant_value(training)
A:tensorflow.python.layers.normalization.broadcast_beta->tensorflow.python.ops.array_ops.reshape(self.beta, broadcast_shape)
A:tensorflow.python.layers.normalization.broadcast_gamma->tensorflow.python.ops.array_ops.reshape(self.gamma, broadcast_shape)
A:tensorflow.python.layers.normalization.(broadcast_mean, broadcast_variance)->tensorflow.python.ops.nn.moments(inputs, reduction_axes, keep_dims=True)
A:tensorflow.python.layers.normalization.mean->tensorflow.python.ops.array_ops.reshape(broadcast_mean, [-1])
A:tensorflow.python.layers.normalization.variance->tensorflow.python.ops.array_ops.reshape(broadcast_variance, [-1])
A:tensorflow.python.layers.normalization.(mean, variance)->tensorflow.python.ops.nn.moments(inputs, reduction_axes)
A:tensorflow.python.layers.normalization.mean_update->tensorflow.python.training.moving_averages.assign_moving_average(self.moving_mean, mean, self.momentum, zero_debias=False)
A:tensorflow.python.layers.normalization.variance_update->tensorflow.python.training.moving_averages.assign_moving_average(self.moving_variance, variance, self.momentum, zero_debias=False)
A:tensorflow.python.layers.normalization.broadcast_moving_mean->tensorflow.python.ops.array_ops.reshape(self.moving_mean, broadcast_shape)
A:tensorflow.python.layers.normalization.broadcast_moving_variance->tensorflow.python.ops.array_ops.reshape(self.moving_variance, broadcast_shape)
A:tensorflow.python.layers.normalization.layer->BatchNormalization(axis=axis, momentum=momentum, epsilon=epsilon, center=center, scale=scale, beta_initializer=beta_initializer, gamma_initializer=gamma_initializer, moving_mean_initializer=moving_mean_initializer, moving_variance_initializer=moving_variance_initializer, beta_regularizer=beta_regularizer, gamma_regularizer=gamma_regularizer, trainable=trainable, name=name, _reuse=reuse, _scope=name)
tensorflow.layers.normalization.BatchNormalization(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer=init_ops.zeros_initializer(),gamma_initializer=init_ops.ones_initializer(),moving_mean_initializer=init_ops.zeros_initializer(),moving_variance_initializer=init_ops.ones_initializer(),beta_regularizer=None,gamma_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.layers.normalization.BatchNormalization.build(self,input_shape)
tensorflow.layers.normalization.BatchNormalization.call(self,inputs,training=False)
tensorflow.layers.normalization.batch_normalization(inputs,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer=init_ops.zeros_initializer(),gamma_initializer=init_ops.ones_initializer(),moving_mean_initializer=init_ops.zeros_initializer(),moving_variance_initializer=init_ops.ones_initializer(),beta_regularizer=None,gamma_regularizer=None,training=False,trainable=True,name=None,reuse=None)
tensorflow.python.layers.normalization.BatchNormalization(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer=init_ops.zeros_initializer(),gamma_initializer=init_ops.ones_initializer(),moving_mean_initializer=init_ops.zeros_initializer(),moving_variance_initializer=init_ops.ones_initializer(),beta_regularizer=None,gamma_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.normalization.BatchNormalization.__init__(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer=init_ops.zeros_initializer(),gamma_initializer=init_ops.ones_initializer(),moving_mean_initializer=init_ops.zeros_initializer(),moving_variance_initializer=init_ops.ones_initializer(),beta_regularizer=None,gamma_regularizer=None,trainable=True,name=None,**kwargs)
tensorflow.python.layers.normalization.BatchNormalization.build(self,input_shape)
tensorflow.python.layers.normalization.BatchNormalization.call(self,inputs,training=False)
tensorflow.python.layers.normalization.batch_normalization(inputs,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer=init_ops.zeros_initializer(),gamma_initializer=init_ops.ones_initializer(),moving_mean_initializer=init_ops.zeros_initializer(),moving_variance_initializer=init_ops.ones_initializer(),beta_regularizer=None,gamma_regularizer=None,training=False,trainable=True,name=None,reuse=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/layers/base.py----------------------------------------
A:tensorflow.python.layers.base.self._reuse->kwargs.get('_reuse')
A:tensorflow.python.layers.base.base_name->_to_snake_case(self.__class__.__name__)
A:tensorflow.python.layers.base.scope->kwargs.get('_scope')
A:tensorflow.python.layers.base.self._scope->next(vs.variable_scope(None, default_name=base_name).gen)
A:tensorflow.python.layers.base.existing_variables->set(tf_variables.global_variables())
A:tensorflow.python.layers.base.variable->variable_getter(name, shape=shape, initializer=initializer, dtype=dtype, trainable=trainable and self.trainable)
A:tensorflow.python.layers.base.regularization->regularizer(variable)
A:tensorflow.python.layers.base.input_list->_to_list(inputs)
A:tensorflow.python.layers.base.outputs->self.call(inputs, **kwargs)
A:tensorflow.python.layers.base.output_list->_to_list(outputs)
A:tensorflow.python.layers.base.activity_regularization->self.activity_regularizer(output)
A:tensorflow.python.layers.base.intermediate->re.sub('(.)([A-Z][a-z0-9]+)', '\\1_\\2', name)
A:tensorflow.python.layers.base.insecure->re.sub('([a-z])([A-Z])', '\\1_\\2', intermediate).lower()
A:tensorflow.python.layers.base.elements->_to_list(elements)
A:tensorflow.python.layers.base.collections->_to_list(collections)
A:tensorflow.python.layers.base.collection->tensorflow.python.framework.ops.get_collection_ref(name)
A:tensorflow.python.layers.base.collection_set->set(collection)
tensorflow.layers.base._Layer(self,trainable=True,name=None,dtype=dtypes.float32,**kwargs)
tensorflow.layers.base._Layer.__setattr__(self,name,value)
tensorflow.layers.base._Layer._add_variable(self,name,shape,dtype=None,initializer=None,regularizer=None,trainable=True,variable_getter=vs.get_variable)
tensorflow.layers.base._Layer._compute_output_shape(self,input_shape)
tensorflow.layers.base._Layer.apply(self,inputs,**kwargs)
tensorflow.layers.base._Layer.build(self,_)
tensorflow.layers.base._Layer.built(self)
tensorflow.layers.base._Layer.call(self,inputs,**kwargs)
tensorflow.layers.base._Layer.losses(self)
tensorflow.layers.base._Layer.non_trainable_variables(self)
tensorflow.layers.base._Layer.non_trainable_weights(self)
tensorflow.layers.base._Layer.trainable(self)
tensorflow.layers.base._Layer.trainable_variables(self)
tensorflow.layers.base._Layer.trainable_weights(self)
tensorflow.layers.base._Layer.updates(self)
tensorflow.layers.base._Layer.variables(self)
tensorflow.layers.base._Layer.weights(self)
tensorflow.layers.base._add_elements_to_collection(elements,collections)
tensorflow.layers.base._to_list(x)
tensorflow.layers.base._to_snake_case(name)
tensorflow.python.layers.base._Layer(self,trainable=True,name=None,dtype=dtypes.float32,**kwargs)
tensorflow.python.layers.base._Layer.__init__(self,trainable=True,name=None,dtype=dtypes.float32,**kwargs)
tensorflow.python.layers.base._Layer.__setattr__(self,name,value)
tensorflow.python.layers.base._Layer._add_variable(self,name,shape,dtype=None,initializer=None,regularizer=None,trainable=True,variable_getter=vs.get_variable)
tensorflow.python.layers.base._Layer._compute_output_shape(self,input_shape)
tensorflow.python.layers.base._Layer.apply(self,inputs,**kwargs)
tensorflow.python.layers.base._Layer.build(self,_)
tensorflow.python.layers.base._Layer.built(self)
tensorflow.python.layers.base._Layer.call(self,inputs,**kwargs)
tensorflow.python.layers.base._Layer.losses(self)
tensorflow.python.layers.base._Layer.non_trainable_variables(self)
tensorflow.python.layers.base._Layer.non_trainable_weights(self)
tensorflow.python.layers.base._Layer.trainable(self)
tensorflow.python.layers.base._Layer.trainable_variables(self)
tensorflow.python.layers.base._Layer.trainable_weights(self)
tensorflow.python.layers.base._Layer.updates(self)
tensorflow.python.layers.base._Layer.variables(self)
tensorflow.python.layers.base._Layer.weights(self)
tensorflow.python.layers.base._add_elements_to_collection(elements,collections)
tensorflow.python.layers.base._to_list(x)
tensorflow.python.layers.base._to_snake_case(name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/platform/gfile.py----------------------------------------
tensorflow.gfile.FastGFile(self,name,mode='r')
tensorflow.gfile.GFile(self,name,mode='r')
tensorflow.python.platform.gfile.FastGFile(self,name,mode='r')
tensorflow.python.platform.gfile.FastGFile.__init__(self,name,mode='r')
tensorflow.python.platform.gfile.GFile(self,name,mode='r')
tensorflow.python.platform.gfile.GFile.__init__(self,name,mode='r')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/platform/resource_loader.py----------------------------------------
A:tensorflow.python.platform.resource_loader.tensorflow_root->os.path.join(_os.path.dirname(__file__), _os.pardir, _os.pardir)
A:tensorflow.python.platform.resource_loader.path->os.path.abspath(path)
A:tensorflow.python.platform.resource_loader.script_dir->get_data_files_path()
A:tensorflow.python.platform.resource_loader.current_directory->os.path.basename(candidate_dir)
A:tensorflow.python.platform.resource_loader.new_candidate_dir->os.path.dirname(candidate_dir)
A:tensorflow.python.platform.resource_loader.data_files_path->os.path.dirname(_inspect.getfile(_sys._getframe(1)))
tensorflow.python.platform.resource_loader.get_data_files_path()
tensorflow.python.platform.resource_loader.get_path_to_datafile(path)
tensorflow.python.platform.resource_loader.get_root_dir_with_all_resources()
tensorflow.python.platform.resource_loader.load_resource(path)
tensorflow.python.platform.resource_loader.readahead_file_path(path,unused_readahead=None)
tensorflow.resource_loader.get_data_files_path()
tensorflow.resource_loader.get_path_to_datafile(path)
tensorflow.resource_loader.get_root_dir_with_all_resources()
tensorflow.resource_loader.load_resource(path)
tensorflow.resource_loader.readahead_file_path(path,unused_readahead=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/platform/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/platform/flags.py----------------------------------------
A:tensorflow.python.platform.flags._global_parser->argparse.ArgumentParser()
A:tensorflow.python.platform.flags.(result, unparsed)->argparse.ArgumentParser().parse_known_args(args=args)
A:tensorflow.python.platform.flags.FLAGS->_FlagValues()
tensorflow.flags.DEFINE_boolean(flag_name,default_value,docstring)
tensorflow.flags.DEFINE_float(flag_name,default_value,docstring)
tensorflow.flags.DEFINE_integer(flag_name,default_value,docstring)
tensorflow.flags.DEFINE_string(flag_name,default_value,docstring)
tensorflow.flags._FlagValues(self)
tensorflow.flags._FlagValues.__getattr__(self,name)
tensorflow.flags._FlagValues.__setattr__(self,name,value)
tensorflow.flags._FlagValues._parse_flags(self,args=None)
tensorflow.flags._define_helper(flag_name,default_value,docstring,flagtype)
tensorflow.python.platform.flags.DEFINE_boolean(flag_name,default_value,docstring)
tensorflow.python.platform.flags.DEFINE_float(flag_name,default_value,docstring)
tensorflow.python.platform.flags.DEFINE_integer(flag_name,default_value,docstring)
tensorflow.python.platform.flags.DEFINE_string(flag_name,default_value,docstring)
tensorflow.python.platform.flags._FlagValues(self)
tensorflow.python.platform.flags._FlagValues.__getattr__(self,name)
tensorflow.python.platform.flags._FlagValues.__init__(self)
tensorflow.python.platform.flags._FlagValues.__setattr__(self,name,value)
tensorflow.python.platform.flags._FlagValues._parse_flags(self,args=None)
tensorflow.python.platform.flags._define_helper(flag_name,default_value,docstring,flagtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/platform/control_imports.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/platform/googletest.py----------------------------------------
A:tensorflow.python.platform.googletest.f->open(os.environ['TEST_SHARD_STATUS_FILE'], 'w')
A:tensorflow.python.platform.googletest.total_shards->int(os.environ['TEST_TOTAL_SHARDS'])
A:tensorflow.python.platform.googletest.shard_index->int(os.environ['TEST_SHARD_INDEX'])
A:tensorflow.python.platform.googletest.base_loader->TestLoader()
A:tensorflow.python.platform.googletest.bucket_iterator->itertools.cycle(range(total_shards))
A:tensorflow.python.platform.googletest.bucket->next(bucket_iterator)
A:tensorflow.python.platform.googletest.temp_dir->temp_dir.rstrip('.py').rstrip('.py')
A:tensorflow.python.platform.googletest.orig_attr->staticmethod(orig_attr)
A:tensorflow.python.platform.googletest.mro->list(inspect.getmro(obj))
A:tensorflow.python.platform.googletest.old_attribute->parent.__dict__.get(child_name)
A:tensorflow.python.platform.googletest.old_child->staticmethod(old_child)
tensorflow.platform.googletest.GetTempDir()
tensorflow.platform.googletest.StatefulSessionAvailable()
tensorflow.platform.googletest.StubOutForTesting(self)
tensorflow.platform.googletest.StubOutForTesting.CleanUp(self)
tensorflow.platform.googletest.StubOutForTesting.Set(self,parent,child_name,new_child)
tensorflow.platform.googletest.StubOutForTesting.SmartSet(self,obj,attr_name,new_attr)
tensorflow.platform.googletest.StubOutForTesting.SmartUnsetAll(self)
tensorflow.platform.googletest.StubOutForTesting.UnsetAll(self)
tensorflow.platform.googletest.StubOutForTesting.__del__(self)
tensorflow.platform.googletest.StubOutForTesting.__enter__(self)
tensorflow.platform.googletest.StubOutForTesting.__exit__(self,unused_exc_type,unused_exc_value,unused_tb)
tensorflow.platform.googletest.g_main(argv)
tensorflow.platform.googletest.main(argv=None)
tensorflow.platform.googletest.test_src_dir_path(relative_path)
tensorflow.python.platform.googletest.GetTempDir()
tensorflow.python.platform.googletest.StatefulSessionAvailable()
tensorflow.python.platform.googletest.StubOutForTesting(self)
tensorflow.python.platform.googletest.StubOutForTesting.CleanUp(self)
tensorflow.python.platform.googletest.StubOutForTesting.Set(self,parent,child_name,new_child)
tensorflow.python.platform.googletest.StubOutForTesting.SmartSet(self,obj,attr_name,new_attr)
tensorflow.python.platform.googletest.StubOutForTesting.SmartUnsetAll(self)
tensorflow.python.platform.googletest.StubOutForTesting.UnsetAll(self)
tensorflow.python.platform.googletest.StubOutForTesting.__del__(self)
tensorflow.python.platform.googletest.StubOutForTesting.__enter__(self)
tensorflow.python.platform.googletest.StubOutForTesting.__exit__(self,unused_exc_type,unused_exc_value,unused_tb)
tensorflow.python.platform.googletest.StubOutForTesting.__init__(self)
tensorflow.python.platform.googletest.g_main(argv)
tensorflow.python.platform.googletest.main(argv=None)
tensorflow.python.platform.googletest.test_src_dir_path(relative_path)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/platform/app.py----------------------------------------
A:tensorflow.python.platform.app.flags_passthrough->f._parse_flags(args=args)
tensorflow.app._benchmark_tests_can_log_memory()
tensorflow.app.run(main=None,argv=None)
tensorflow.python.platform.app._benchmark_tests_can_log_memory()
tensorflow.python.platform.app.run(main=None,argv=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/platform/tf_logging.py----------------------------------------
A:tensorflow.python.platform.tf_logging._logger->logging.getLogger('tensorflow')
A:tensorflow.python.platform.tf_logging._handler->logging.StreamHandler(_logging_target)
A:tensorflow.python.platform.tf_logging.count->_GetNextLogCountPerToken(_GetFileAndLine())
A:tensorflow.python.platform.tf_logging.f->sys._getframe()
A:tensorflow.python.platform.tf_logging.now_tuple->time.localtime(now)
A:tensorflow.python.platform.tf_logging.now_microsecond->int(1000000.0 * (now % 1.0))
A:tensorflow.python.platform.tf_logging.basename->os.path.basename(filename)
A:tensorflow.python.platform.tf_logging.thread_id->six.moves._thread.get_ident()
tensorflow.logging.TaskLevelStatusMessage(msg)
tensorflow.logging._GetFileAndLine()
tensorflow.logging._GetNextLogCountPerToken(token)
tensorflow.logging._get_thread_id()
tensorflow.logging.flush()
tensorflow.logging.get_verbosity()
tensorflow.logging.google2_log_prefix(level,timestamp=None,file_and_line=None)
tensorflow.logging.log_every_n(level,msg,n,*args)
tensorflow.logging.log_first_n(level,msg,n,*args)
tensorflow.logging.log_if(level,msg,condition,*args)
tensorflow.logging.set_verbosity(verbosity)
tensorflow.logging.vlog(level,msg,*args,**kwargs)
tensorflow.python.platform.tf_logging.TaskLevelStatusMessage(msg)
tensorflow.python.platform.tf_logging._GetFileAndLine()
tensorflow.python.platform.tf_logging._GetNextLogCountPerToken(token)
tensorflow.python.platform.tf_logging._get_thread_id()
tensorflow.python.platform.tf_logging.flush()
tensorflow.python.platform.tf_logging.get_verbosity()
tensorflow.python.platform.tf_logging.google2_log_prefix(level,timestamp=None,file_and_line=None)
tensorflow.python.platform.tf_logging.log_every_n(level,msg,n,*args)
tensorflow.python.platform.tf_logging.log_first_n(level,msg,n,*args)
tensorflow.python.platform.tf_logging.log_if(level,msg,condition,*args)
tensorflow.python.platform.tf_logging.set_verbosity(verbosity)
tensorflow.python.platform.tf_logging.vlog(level,msg,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/platform/status_bar.py----------------------------------------
tensorflow.platform.status_bar.SetupStatusBarInsideGoogle(unused_link_text,unused_port)
tensorflow.python.platform.status_bar.SetupStatusBarInsideGoogle(unused_link_text,unused_port)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/platform/benchmark.py----------------------------------------
A:tensorflow.python.platform.benchmark.GLOBAL_BENCHMARK_REGISTRY->set()
A:tensorflow.python.platform.benchmark.test_env->os.environ.get(TEST_REPORTER_TEST_ENV, None)
A:tensorflow.python.platform.benchmark.entries->tensorflow.core.util.test_log_pb2.BenchmarkEntries()
A:tensorflow.python.platform.benchmark.entry->tensorflow.core.util.test_log_pb2.BenchmarkEntries().entry.add()
A:tensorflow.python.platform.benchmark.entry.extras[k].string_value->str(v)
A:tensorflow.python.platform.benchmark.serialized_entry->tensorflow.core.util.test_log_pb2.BenchmarkEntries().SerializeToString()
A:tensorflow.python.platform.benchmark.mangled_name->self._get_name(overwrite_name=name).replace('/', '__')
A:tensorflow.python.platform.benchmark.newclass->super(mcs, _BenchmarkRegistrar).__new__(mcs, clsname, base, attrs)
A:tensorflow.python.platform.benchmark.stack->inspect.stack()
A:tensorflow.python.platform.benchmark.f_self->f_locals.get('self', None)
A:tensorflow.python.platform.benchmark.name->self._get_name(overwrite_name=name)
A:tensorflow.python.platform.benchmark.start_time->time.time()
A:tensorflow.python.platform.benchmark.end_time->time.time()
A:tensorflow.python.platform.benchmark.run_options->tensorflow.core.protobuf.config_pb2.RunOptions(trace_level=config_pb2.RunOptions.FULL_TRACE)
A:tensorflow.python.platform.benchmark.run_metadata->tensorflow.core.protobuf.config_pb2.RunMetadata()
A:tensorflow.python.platform.benchmark.tl->tensorflow.python.client.timeline.Timeline(run_metadata.step_stats)
A:tensorflow.python.platform.benchmark.extras['full_trace_chrome_format']->tensorflow.python.client.timeline.Timeline(run_metadata.step_stats).generate_chrome_trace_format()
A:tensorflow.python.platform.benchmark.step_stats_analysis->tensorflow.python.client.timeline.Timeline(run_metadata.step_stats).analyze_step_stats(show_memory=True)
A:tensorflow.python.platform.benchmark.s->sorted(x)
A:tensorflow.python.platform.benchmark.l->len(x)
A:tensorflow.python.platform.benchmark.median_delta->_median(deltas)
A:tensorflow.python.platform.benchmark.registry->list(GLOBAL_BENCHMARK_REGISTRY)
A:tensorflow.python.platform.benchmark.attrs->dir(benchmark)
A:tensorflow.python.platform.benchmark.candidate_benchmark_fn->getattr(benchmark, attr)
A:tensorflow.python.platform.benchmark.instance_benchmark_fn->getattr(benchmark_instance, attr)
tensorflow.platform.benchmark.Benchmark(six.with_metaclass(_BenchmarkRegistrar,object))
tensorflow.platform.benchmark.Benchmark._get_name(self,overwrite_name=None)
tensorflow.platform.benchmark.Benchmark.is_abstract(cls)
tensorflow.platform.benchmark.Benchmark.report_benchmark(self,iters=None,cpu_time=None,wall_time=None,throughput=None,extras=None,name=None)
tensorflow.platform.benchmark.TensorFlowBenchmark(Benchmark)
tensorflow.platform.benchmark.TensorFlowBenchmark.is_abstract(cls)
tensorflow.platform.benchmark.TensorFlowBenchmark.run_op_benchmark(self,sess,op_or_tensor,feed_dict=None,burn_iters=2,min_iters=10,store_trace=False,store_memory_usage=True,name=None,extras=None,mbs=0)
tensorflow.platform.benchmark._BenchmarkRegistrar(mcs,clsname,base,attrs)
tensorflow.platform.benchmark._global_report_benchmark(name,iters=None,cpu_time=None,wall_time=None,throughput=None,extras=None)
tensorflow.platform.benchmark._run_benchmarks(regex)
tensorflow.platform.benchmark.benchmarks_main(true_main,argv=None)
tensorflow.python.platform.benchmark.Benchmark(six.with_metaclass(_BenchmarkRegistrar,object))
tensorflow.python.platform.benchmark.Benchmark._get_name(self,overwrite_name=None)
tensorflow.python.platform.benchmark.Benchmark.is_abstract(cls)
tensorflow.python.platform.benchmark.Benchmark.report_benchmark(self,iters=None,cpu_time=None,wall_time=None,throughput=None,extras=None,name=None)
tensorflow.python.platform.benchmark.TensorFlowBenchmark(Benchmark)
tensorflow.python.platform.benchmark.TensorFlowBenchmark.is_abstract(cls)
tensorflow.python.platform.benchmark.TensorFlowBenchmark.run_op_benchmark(self,sess,op_or_tensor,feed_dict=None,burn_iters=2,min_iters=10,store_trace=False,store_memory_usage=True,name=None,extras=None,mbs=0)
tensorflow.python.platform.benchmark._BenchmarkRegistrar(mcs,clsname,base,attrs)
tensorflow.python.platform.benchmark._BenchmarkRegistrar.__new__(mcs,clsname,base,attrs)
tensorflow.python.platform.benchmark._global_report_benchmark(name,iters=None,cpu_time=None,wall_time=None,throughput=None,extras=None)
tensorflow.python.platform.benchmark._run_benchmarks(regex)
tensorflow.python.platform.benchmark.benchmarks_main(true_main,argv=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/platform/parameterized.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/platform/test.py----------------------------------------
tensorflow.python.platform.test.get_temp_dir()
tensorflow.python.platform.test.is_built_with_cuda()
tensorflow.python.platform.test.is_gpu_available(cuda_only=False)
tensorflow.python.platform.test.main(argv=None)
tensorflow.python.platform.test.test_src_dir_path(relative_path)
tensorflow.test.get_temp_dir()
tensorflow.test.is_built_with_cuda()
tensorflow.test.is_gpu_available(cuda_only=False)
tensorflow.test.main(argv=None)
tensorflow.test.test_src_dir_path(relative_path)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/platform/sysconfig.py----------------------------------------
tensorflow.python.platform.sysconfig.get_include()
tensorflow.python.platform.sysconfig.get_lib()
tensorflow.sysconfig.get_include()
tensorflow.sysconfig.get_lib()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/queue_runner.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/summary_io.py----------------------------------------
tensorflow.python.training.summary_io.SummaryWriter(self,logdir,graph=None,max_queue=10,flush_secs=120,graph_def=None)
tensorflow.python.training.summary_io.SummaryWriter.__init__(self,logdir,graph=None,max_queue=10,flush_secs=120,graph_def=None)
tensorflow.training.summary_io.SummaryWriter(self,logdir,graph=None,max_queue=10,flush_secs=120,graph_def=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/evaluation.py----------------------------------------
A:tensorflow.python.training.evaluation.graph->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.training.evaluation.eval_steps->tensorflow.python.framework.ops.get_default_graph().get_collection(ops.GraphKeys.EVAL_STEP)
A:tensorflow.python.training.evaluation.counter->tensorflow.python.ops.variable_scope.get_variable('eval_step', shape=[], dtype=dtypes.int64, initializer=init_ops.zeros_initializer(), trainable=False, collections=[ops.GraphKeys.LOCAL_VARIABLES, ops.GraphKeys.EVAL_STEP])
A:tensorflow.python.training.evaluation.eval_step->_get_or_create_eval_step()
A:tensorflow.python.training.evaluation.update_eval_step->tensorflow.python.ops.state_ops.assign_add(eval_step, 1)
A:tensorflow.python.training.evaluation.session_creator->tensorflow.python.training.monitored_session.ChiefSessionCreator(scaffold=scaffold, checkpoint_filename_with_path=checkpoint_path, master=master, config=config)
A:tensorflow.python.training.evaluation.final_ops_hook->tensorflow.python.training.basic_session_run_hooks.FinalOpsHook(final_ops, final_ops_feed_dict)
tensorflow.python.training.evaluation._StopAfterNEvalsHook(self,num_evals,log_progress=True)
tensorflow.python.training.evaluation._StopAfterNEvalsHook.__init__(self,num_evals,log_progress=True)
tensorflow.python.training.evaluation._StopAfterNEvalsHook._set_evals_completed_tensor(self,updated_eval_step)
tensorflow.python.training.evaluation._StopAfterNEvalsHook.after_run(self,run_context,run_values)
tensorflow.python.training.evaluation._StopAfterNEvalsHook.before_run(self,run_context)
tensorflow.python.training.evaluation._evaluate_once(checkpoint_path,master='',scaffold=None,eval_ops=None,feed_dict=None,final_ops=None,final_ops_feed_dict=None,hooks=None,config=None)
tensorflow.python.training.evaluation._get_or_create_eval_step()
tensorflow.training.evaluation._StopAfterNEvalsHook(self,num_evals,log_progress=True)
tensorflow.training.evaluation._StopAfterNEvalsHook._set_evals_completed_tensor(self,updated_eval_step)
tensorflow.training.evaluation._StopAfterNEvalsHook.after_run(self,run_context,run_values)
tensorflow.training.evaluation._StopAfterNEvalsHook.before_run(self,run_context)
tensorflow.training.evaluation._evaluate_once(checkpoint_path,master='',scaffold=None,eval_ops=None,feed_dict=None,final_ops=None,final_ops_feed_dict=None,hooks=None,config=None)
tensorflow.training.evaluation._get_or_create_eval_step()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/optimizer.py----------------------------------------
A:tensorflow.python.training.optimizer.(unique_indices, new_index_positions)->tensorflow.python.ops.array_ops.unique(indices)
A:tensorflow.python.training.optimizer.summed_values->tensorflow.python.ops.math_ops.unsorted_segment_sum(values, new_index_positions, array_ops.shape(unique_indices)[0])
A:tensorflow.python.training.optimizer.grads_and_vars->tuple(grads_and_vars)
A:tensorflow.python.training.optimizer.var_list->tensorflow.python.util.nest.flatten(var_list)
A:tensorflow.python.training.optimizer.grads->tensorflow.python.ops.control_flow_ops.tuple(grads)
A:tensorflow.python.training.optimizer.g->tensorflow.python.framework.ops.convert_to_tensor_or_indexed_slices(g)
A:tensorflow.python.training.optimizer.p->_get_processor(v)
A:tensorflow.python.training.optimizer.converted_grads_and_vars->tuple(converted_grads_and_vars)
A:tensorflow.python.training.optimizer.apply_updates->self._finish(update_ops, name)
A:tensorflow.python.training.optimizer.train_op->tensorflow.python.framework.ops.get_collection_ref(ops.GraphKeys.TRAIN_OP)
A:tensorflow.python.training.optimizer.named_slots->self._slot_dict(slot_name)
A:tensorflow.python.training.optimizer.valid_dtypes->self._valid_dtypes()
A:tensorflow.python.training.optimizer.(summed_grad, unique_indices)->_deduplicate_indexed_slices(values=grad, indices=indices)
A:tensorflow.python.training.optimizer.(summed_values, unique_indices)->_deduplicate_indexed_slices(values=grad.values, indices=grad.indices)
A:tensorflow.python.training.optimizer.gradient_no_duplicate_indices->tensorflow.python.framework.ops.IndexedSlices(indices=unique_indices, values=summed_values, dense_shape=grad.dense_shape)
A:tensorflow.python.training.optimizer.named_slots[_var_key(var)]->tensorflow.python.training.slot_creator.create_zeros_slot(var, op_name)
tensorflow.python.training.optimizer.Optimizer(self,use_locking,name)
tensorflow.python.training.optimizer.Optimizer.__init__(self,use_locking,name)
tensorflow.python.training.optimizer.Optimizer._apply_dense(self,grad,var)
tensorflow.python.training.optimizer.Optimizer._apply_sparse(self,grad,var)
tensorflow.python.training.optimizer.Optimizer._apply_sparse_duplicate_indices(self,grad,var)
tensorflow.python.training.optimizer.Optimizer._assert_valid_dtypes(self,tensors)
tensorflow.python.training.optimizer.Optimizer._create_slots(self,var_list)
tensorflow.python.training.optimizer.Optimizer._finish(self,update_ops,name_scope)
tensorflow.python.training.optimizer.Optimizer._get_or_make_slot(self,var,val,slot_name,op_name)
tensorflow.python.training.optimizer.Optimizer._get_or_make_slot_with_initializer(self,var,initializer,shape,dtype,slot_name,op_name)
tensorflow.python.training.optimizer.Optimizer._prepare(self)
tensorflow.python.training.optimizer.Optimizer._resource_apply_dense(self,grad,handle)
tensorflow.python.training.optimizer.Optimizer._resource_apply_sparse(self,grad,handle,indices)
tensorflow.python.training.optimizer.Optimizer._resource_apply_sparse_duplicate_indices(self,grad,handle,indices)
tensorflow.python.training.optimizer.Optimizer._slot_dict(self,slot_name)
tensorflow.python.training.optimizer.Optimizer._valid_dtypes(self)
tensorflow.python.training.optimizer.Optimizer._zeros_slot(self,var,slot_name,op_name)
tensorflow.python.training.optimizer.Optimizer.apply_gradients(self,grads_and_vars,global_step=None,name=None)
tensorflow.python.training.optimizer.Optimizer.compute_gradients(self,loss,var_list=None,gate_gradients=GATE_OP,aggregation_method=None,colocate_gradients_with_ops=False,grad_loss=None)
tensorflow.python.training.optimizer.Optimizer.get_name(self)
tensorflow.python.training.optimizer.Optimizer.get_slot(self,var,name)
tensorflow.python.training.optimizer.Optimizer.get_slot_names(self)
tensorflow.python.training.optimizer.Optimizer.minimize(self,loss,global_step=None,var_list=None,gate_gradients=GATE_OP,aggregation_method=None,colocate_gradients_with_ops=False,name=None,grad_loss=None)
tensorflow.python.training.optimizer._DenseReadResourceVariableProcessor(self,v)
tensorflow.python.training.optimizer._DenseReadResourceVariableProcessor.__init__(self,v)
tensorflow.python.training.optimizer._DenseReadResourceVariableProcessor.target(self)
tensorflow.python.training.optimizer._DenseReadResourceVariableProcessor.update_op(self,optimizer,g)
tensorflow.python.training.optimizer._DenseResourceVariableProcessor(self,v)
tensorflow.python.training.optimizer._DenseResourceVariableProcessor.__init__(self,v)
tensorflow.python.training.optimizer._DenseResourceVariableProcessor.target(self)
tensorflow.python.training.optimizer._DenseResourceVariableProcessor.update_op(self,optimizer,g)
tensorflow.python.training.optimizer._OptimizableVariable(object)
tensorflow.python.training.optimizer._OptimizableVariable.target(self)
tensorflow.python.training.optimizer._OptimizableVariable.update_op(self,optimizer,g)
tensorflow.python.training.optimizer._RefVariableProcessor(self,v)
tensorflow.python.training.optimizer._RefVariableProcessor.__init__(self,v)
tensorflow.python.training.optimizer._RefVariableProcessor.target(self)
tensorflow.python.training.optimizer._RefVariableProcessor.update_op(self,optimizer,g)
tensorflow.python.training.optimizer._StreamingModelPortProcessor(self,v)
tensorflow.python.training.optimizer._StreamingModelPortProcessor.__init__(self,v)
tensorflow.python.training.optimizer._StreamingModelPortProcessor.target(self)
tensorflow.python.training.optimizer._StreamingModelPortProcessor.update_op(self,optimizer,g)
tensorflow.python.training.optimizer._deduplicate_indexed_slices(values,indices)
tensorflow.python.training.optimizer._get_processor(v)
tensorflow.python.training.optimizer._get_variable_for(v)
tensorflow.python.training.optimizer._var_key(var)
tensorflow.training.optimizer.Optimizer(self,use_locking,name)
tensorflow.training.optimizer.Optimizer._apply_dense(self,grad,var)
tensorflow.training.optimizer.Optimizer._apply_sparse(self,grad,var)
tensorflow.training.optimizer.Optimizer._apply_sparse_duplicate_indices(self,grad,var)
tensorflow.training.optimizer.Optimizer._assert_valid_dtypes(self,tensors)
tensorflow.training.optimizer.Optimizer._create_slots(self,var_list)
tensorflow.training.optimizer.Optimizer._finish(self,update_ops,name_scope)
tensorflow.training.optimizer.Optimizer._get_or_make_slot(self,var,val,slot_name,op_name)
tensorflow.training.optimizer.Optimizer._get_or_make_slot_with_initializer(self,var,initializer,shape,dtype,slot_name,op_name)
tensorflow.training.optimizer.Optimizer._prepare(self)
tensorflow.training.optimizer.Optimizer._resource_apply_dense(self,grad,handle)
tensorflow.training.optimizer.Optimizer._resource_apply_sparse(self,grad,handle,indices)
tensorflow.training.optimizer.Optimizer._resource_apply_sparse_duplicate_indices(self,grad,handle,indices)
tensorflow.training.optimizer.Optimizer._slot_dict(self,slot_name)
tensorflow.training.optimizer.Optimizer._valid_dtypes(self)
tensorflow.training.optimizer.Optimizer._zeros_slot(self,var,slot_name,op_name)
tensorflow.training.optimizer.Optimizer.apply_gradients(self,grads_and_vars,global_step=None,name=None)
tensorflow.training.optimizer.Optimizer.compute_gradients(self,loss,var_list=None,gate_gradients=GATE_OP,aggregation_method=None,colocate_gradients_with_ops=False,grad_loss=None)
tensorflow.training.optimizer.Optimizer.get_name(self)
tensorflow.training.optimizer.Optimizer.get_slot(self,var,name)
tensorflow.training.optimizer.Optimizer.get_slot_names(self)
tensorflow.training.optimizer.Optimizer.minimize(self,loss,global_step=None,var_list=None,gate_gradients=GATE_OP,aggregation_method=None,colocate_gradients_with_ops=False,name=None,grad_loss=None)
tensorflow.training.optimizer._DenseReadResourceVariableProcessor(self,v)
tensorflow.training.optimizer._DenseReadResourceVariableProcessor.target(self)
tensorflow.training.optimizer._DenseReadResourceVariableProcessor.update_op(self,optimizer,g)
tensorflow.training.optimizer._DenseResourceVariableProcessor(self,v)
tensorflow.training.optimizer._DenseResourceVariableProcessor.target(self)
tensorflow.training.optimizer._DenseResourceVariableProcessor.update_op(self,optimizer,g)
tensorflow.training.optimizer._OptimizableVariable(object)
tensorflow.training.optimizer._OptimizableVariable.target(self)
tensorflow.training.optimizer._OptimizableVariable.update_op(self,optimizer,g)
tensorflow.training.optimizer._RefVariableProcessor(self,v)
tensorflow.training.optimizer._RefVariableProcessor.target(self)
tensorflow.training.optimizer._RefVariableProcessor.update_op(self,optimizer,g)
tensorflow.training.optimizer._StreamingModelPortProcessor(self,v)
tensorflow.training.optimizer._StreamingModelPortProcessor.target(self)
tensorflow.training.optimizer._StreamingModelPortProcessor.update_op(self,optimizer,g)
tensorflow.training.optimizer._deduplicate_indexed_slices(values,indices)
tensorflow.training.optimizer._get_processor(v)
tensorflow.training.optimizer._get_variable_for(v)
tensorflow.training.optimizer._var_key(var)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/input.py----------------------------------------
A:tensorflow.python.training.input.zero64->tensorflow.python.framework.constant_op.constant(0, dtype=dtypes.int64)
A:tensorflow.python.training.input.epochs->tensorflow.python.ops.variables.Variable(zero64, name='epochs', trainable=False, collections=[ops.GraphKeys.LOCAL_VARIABLES])
A:tensorflow.python.training.input.counter->tensorflow.python.ops.variables.Variable(zero64, name='epochs', trainable=False, collections=[ops.GraphKeys.LOCAL_VARIABLES]).count_up_to(num_epochs)
A:tensorflow.python.training.input.input_tensor->limit_epochs(input_tensor, num_epochs)
A:tensorflow.python.training.input.element_shape->limit_epochs(input_tensor, num_epochs).get_shape()[1:].merge_with(element_shape)
A:tensorflow.python.training.input.q->tensorflow.python.ops.data_flow_ops.FIFOQueue(capacity=capacity, dtypes=[input_tensor.dtype.base_dtype], shapes=[element_shape], shared_name=shared_name, name=name)
A:tensorflow.python.training.input.enq->tensorflow.python.ops.data_flow_ops.FIFOQueue(capacity=capacity, dtypes=[input_tensor.dtype.base_dtype], shapes=[element_shape], shared_name=shared_name, name=name).enqueue_many([input_tensor])
A:tensorflow.python.training.input.string_tensor->tensorflow.python.ops.array_ops.identity(string_tensor)
A:tensorflow.python.training.input.range_tensor->tensorflow.python.ops.math_ops.range(limit)
A:tensorflow.python.training.input.tensor_list->_validate(tensor_list)
A:tensorflow.python.training.input.queue->tensorflow.python.ops.data_flow_ops.RandomShuffleQueue(capacity=capacity, min_after_dequeue=min_after_dequeue, seed=seed, dtypes=types, shapes=shapes, shared_name=shared_name)
A:tensorflow.python.training.input.index->tensorflow.python.ops.data_flow_ops.RandomShuffleQueue(capacity=capacity, min_after_dequeue=min_after_dequeue, seed=seed, dtypes=types, shapes=shapes, shared_name=shared_name).dequeue()
A:tensorflow.python.training.input.expected_keys->set(tensors_list[0].keys())
A:tensorflow.python.training.input.pred->tensorflow.python.framework.ops.convert_to_tensor(pred)
A:tensorflow.python.training.input.static_pred->tensorflow.python.framework.tensor_util.constant_value(pred)
A:tensorflow.python.training.input.out_tensor->_smart_cond(keep_input, lambda : _store_many_sparse(t, shared_name=map_op_name), lambda : -1 * array_ops.ones(array_ops.shape(t)[0:1], dtypes.int64))
A:tensorflow.python.training.input.t->tensorflow.python.ops.sparse_ops.sparse_retain(t, keep_input)
A:tensorflow.python.training.input.(s0, sparse_info_list)->_store_sparse_tensors(tensor_list_list[0], enqueue_many, keep_input)
A:tensorflow.python.training.input.(s, sparse_info_candidate)->_store_sparse_tensors(tensor_list, enqueue_many, keep_input, [st.map_op for st in sparse_info_list])
A:tensorflow.python.training.input.received_sequence->isinstance(stored_list, collections.Sequence)
A:tensorflow.python.training.input.keep_input->_validate_keep_input(keep_input, enqueue_many)
A:tensorflow.python.training.input.len0->len(tensor_list_list[0])
A:tensorflow.python.training.input.select_i->tensorflow.python.ops.math_ops.cast(keep_input, dtypes.int32)
A:tensorflow.python.training.input.(tensor_list, sparse_info)->_store_sparse_tensors(tensor_list, enqueue_many, keep_input)
A:tensorflow.python.training.input.types->_dtypes(tensor_list_list)
A:tensorflow.python.training.input.shapes->_shapes(tensor_list_list, shapes, enqueue_many)
A:tensorflow.python.training.input.dequeued->_restore_sparse_tensors(dequeued, sparse_info)
A:tensorflow.python.training.input.tensor_list_list->_validate_join(tensor_list_list)
A:tensorflow.python.training.input.(tensor_list_list, sparse_info)->_store_sparse_tensors_join(tensor_list_list, enqueue_many, keep_input)
tensorflow.python.training.input._SparseMetaData(self,sparse,map_op,rank)
tensorflow.python.training.input._SparseMetaData.__eq__(self,other)
tensorflow.python.training.input._SparseMetaData.__init__(self,sparse,map_op,rank)
tensorflow.python.training.input._SparseMetaData.__ne__(self,other)
tensorflow.python.training.input._SparseMetaData.__str__(self)
tensorflow.python.training.input._SparseMetaData.map_op(self)
tensorflow.python.training.input._SparseMetaData.merge_with(self,other)
tensorflow.python.training.input._SparseMetaData.rank(self)
tensorflow.python.training.input._SparseMetaData.sparse(self)
tensorflow.python.training.input._as_original_type(original_tensors,tensor_list)
tensorflow.python.training.input._as_tensor_list(tensors)
tensorflow.python.training.input._as_tensor_list_list(tensors_list)
tensorflow.python.training.input._batch(tensors,batch_size,keep_input,num_threads=1,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.python.training.input._batch_join(tensors_list,batch_size,keep_input,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.python.training.input._dtypes(tensor_list_list)
tensorflow.python.training.input._enqueue(queue,tensor_list,threads,enqueue_many,keep_input)
tensorflow.python.training.input._enqueue_join(queue,tensor_list_list,enqueue_many,keep_input)
tensorflow.python.training.input._flatten(tensor_list_list)
tensorflow.python.training.input._merge_shapes(shape_list,enqueue_many)
tensorflow.python.training.input._restore_sparse_tensors(stored_list,sparse_info_list)
tensorflow.python.training.input._select_which_to_enqueue(tensor_list,keep_input)
tensorflow.python.training.input._shapes(tensor_list_list,shapes,enqueue_many)
tensorflow.python.training.input._shuffle_batch(tensors,batch_size,capacity,min_after_dequeue,keep_input,num_threads=1,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.python.training.input._shuffle_batch_join(tensors_list,batch_size,capacity,min_after_dequeue,keep_input,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.python.training.input._smart_cond(pred,if_true,if_false)
tensorflow.python.training.input._store_sparse_tensors(tensor_list,enqueue_many,keep_input,shared_map_ops=None)
tensorflow.python.training.input._store_sparse_tensors_join(tensor_list_list,enqueue_many,keep_input)
tensorflow.python.training.input._validate(tensor_list)
tensorflow.python.training.input._validate_join(tensor_list_list)
tensorflow.python.training.input._validate_keep_input(keep_input,enqueue_many)
tensorflow.python.training.input._which_queue(dynamic_pad)
tensorflow.python.training.input.batch(tensors,batch_size,num_threads=1,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.python.training.input.batch_join(tensors_list,batch_size,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.python.training.input.input_producer(input_tensor,element_shape=None,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,summary_name=None,name=None,cancel_op=None)
tensorflow.python.training.input.limit_epochs(tensor,num_epochs=None,name=None)
tensorflow.python.training.input.match_filenames_once(pattern,name=None)
tensorflow.python.training.input.maybe_batch(tensors,keep_input,batch_size,num_threads=1,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.python.training.input.maybe_batch_join(tensors_list,keep_input,batch_size,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.python.training.input.maybe_shuffle_batch(tensors,batch_size,capacity,min_after_dequeue,keep_input,num_threads=1,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.python.training.input.maybe_shuffle_batch_join(tensors_list,batch_size,capacity,min_after_dequeue,keep_input,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.python.training.input.range_input_producer(limit,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,name=None)
tensorflow.python.training.input.shuffle_batch(tensors,batch_size,capacity,min_after_dequeue,num_threads=1,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.python.training.input.shuffle_batch_join(tensors_list,batch_size,capacity,min_after_dequeue,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.python.training.input.slice_input_producer(tensor_list,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,name=None)
tensorflow.python.training.input.string_input_producer(string_tensor,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,name=None,cancel_op=None)
tensorflow.training.input._SparseMetaData(self,sparse,map_op,rank)
tensorflow.training.input._SparseMetaData.__eq__(self,other)
tensorflow.training.input._SparseMetaData.__ne__(self,other)
tensorflow.training.input._SparseMetaData.__str__(self)
tensorflow.training.input._SparseMetaData.map_op(self)
tensorflow.training.input._SparseMetaData.merge_with(self,other)
tensorflow.training.input._SparseMetaData.rank(self)
tensorflow.training.input._SparseMetaData.sparse(self)
tensorflow.training.input._as_original_type(original_tensors,tensor_list)
tensorflow.training.input._as_tensor_list(tensors)
tensorflow.training.input._as_tensor_list_list(tensors_list)
tensorflow.training.input._batch(tensors,batch_size,keep_input,num_threads=1,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.training.input._batch_join(tensors_list,batch_size,keep_input,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.training.input._dtypes(tensor_list_list)
tensorflow.training.input._enqueue(queue,tensor_list,threads,enqueue_many,keep_input)
tensorflow.training.input._enqueue_join(queue,tensor_list_list,enqueue_many,keep_input)
tensorflow.training.input._flatten(tensor_list_list)
tensorflow.training.input._merge_shapes(shape_list,enqueue_many)
tensorflow.training.input._restore_sparse_tensors(stored_list,sparse_info_list)
tensorflow.training.input._select_which_to_enqueue(tensor_list,keep_input)
tensorflow.training.input._shapes(tensor_list_list,shapes,enqueue_many)
tensorflow.training.input._shuffle_batch(tensors,batch_size,capacity,min_after_dequeue,keep_input,num_threads=1,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.training.input._shuffle_batch_join(tensors_list,batch_size,capacity,min_after_dequeue,keep_input,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.training.input._smart_cond(pred,if_true,if_false)
tensorflow.training.input._store_sparse_tensors(tensor_list,enqueue_many,keep_input,shared_map_ops=None)
tensorflow.training.input._store_sparse_tensors_join(tensor_list_list,enqueue_many,keep_input)
tensorflow.training.input._validate(tensor_list)
tensorflow.training.input._validate_join(tensor_list_list)
tensorflow.training.input._validate_keep_input(keep_input,enqueue_many)
tensorflow.training.input._which_queue(dynamic_pad)
tensorflow.training.input.batch(tensors,batch_size,num_threads=1,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.training.input.batch_join(tensors_list,batch_size,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.training.input.input_producer(input_tensor,element_shape=None,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,summary_name=None,name=None,cancel_op=None)
tensorflow.training.input.limit_epochs(tensor,num_epochs=None,name=None)
tensorflow.training.input.match_filenames_once(pattern,name=None)
tensorflow.training.input.maybe_batch(tensors,keep_input,batch_size,num_threads=1,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.training.input.maybe_batch_join(tensors_list,keep_input,batch_size,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.training.input.maybe_shuffle_batch(tensors,batch_size,capacity,min_after_dequeue,keep_input,num_threads=1,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.training.input.maybe_shuffle_batch_join(tensors_list,batch_size,capacity,min_after_dequeue,keep_input,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.training.input.range_input_producer(limit,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,name=None)
tensorflow.training.input.shuffle_batch(tensors,batch_size,capacity,min_after_dequeue,num_threads=1,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.training.input.shuffle_batch_join(tensors_list,batch_size,capacity,min_after_dequeue,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tensorflow.training.input.slice_input_producer(tensor_list,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,name=None)
tensorflow.training.input.string_input_producer(string_tensor,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,name=None,cancel_op=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/ftrl.py----------------------------------------
A:tensorflow.python.training.ftrl.val->tensorflow.python.framework.constant_op.constant(self._initial_accumulator_value, dtype=v.dtype, shape=v.get_shape())
A:tensorflow.python.training.ftrl.self._learning_rate_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._learning_rate, name='learning_rate')
A:tensorflow.python.training.ftrl.self._l1_regularization_strength_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._l1_regularization_strength, name='l1_regularization_strength')
A:tensorflow.python.training.ftrl.self._l2_regularization_strength_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._l2_regularization_strength, name='l2_regularization_strength')
A:tensorflow.python.training.ftrl.self._learning_rate_power_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._learning_rate_power, name='learning_rate_power')
A:tensorflow.python.training.ftrl.accum->self.get_slot(var, 'accum')
A:tensorflow.python.training.ftrl.linear->self.get_slot(var, 'linear')
tensorflow.python.training.ftrl.FtrlOptimizer(self,learning_rate,learning_rate_power=-0.5,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='Ftrl')
tensorflow.python.training.ftrl.FtrlOptimizer.__init__(self,learning_rate,learning_rate_power=-0.5,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='Ftrl')
tensorflow.python.training.ftrl.FtrlOptimizer._apply_dense(self,grad,var)
tensorflow.python.training.ftrl.FtrlOptimizer._apply_sparse(self,grad,var)
tensorflow.python.training.ftrl.FtrlOptimizer._create_slots(self,var_list)
tensorflow.python.training.ftrl.FtrlOptimizer._prepare(self)
tensorflow.python.training.ftrl.FtrlOptimizer._resource_apply_dense(self,grad,var)
tensorflow.python.training.ftrl.FtrlOptimizer._resource_apply_sparse(self,grad,var,indices)
tensorflow.training.ftrl.FtrlOptimizer(self,learning_rate,learning_rate_power=-0.5,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='Ftrl')
tensorflow.training.ftrl.FtrlOptimizer._apply_dense(self,grad,var)
tensorflow.training.ftrl.FtrlOptimizer._apply_sparse(self,grad,var)
tensorflow.training.ftrl.FtrlOptimizer._create_slots(self,var_list)
tensorflow.training.ftrl.FtrlOptimizer._prepare(self)
tensorflow.training.ftrl.FtrlOptimizer._resource_apply_dense(self,grad,var)
tensorflow.training.ftrl.FtrlOptimizer._resource_apply_sparse(self,grad,var,indices)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/saver_test_utils.py----------------------------------------
A:tensorflow.python.training.saver_test_utils.self.table_ref->tensorflow.python.ops.gen_data_flow_ops._mutable_hash_table(key_dtype=dtypes.string, value_dtype=dtypes.float32, name=name)
A:tensorflow.python.training.saver_test_utils.self._saveable->CheckpointedOp.CustomSaveable(self, name)
A:tensorflow.python.training.saver_test_utils.tensors->table._export()
tensorflow.python.training.saver_test_utils.CheckpointedOp(self,name,table_ref=None)
tensorflow.python.training.saver_test_utils.CheckpointedOp.CustomSaveable(self,table,name)
tensorflow.python.training.saver_test_utils.CheckpointedOp.CustomSaveable.__init__(self,table,name)
tensorflow.python.training.saver_test_utils.CheckpointedOp.CustomSaveable.restore(self,restore_tensors,shapes)
tensorflow.python.training.saver_test_utils.CheckpointedOp.__init__(self,name,table_ref=None)
tensorflow.python.training.saver_test_utils.CheckpointedOp._export(self)
tensorflow.python.training.saver_test_utils.CheckpointedOp.insert(self,keys,values)
tensorflow.python.training.saver_test_utils.CheckpointedOp.keys(self)
tensorflow.python.training.saver_test_utils.CheckpointedOp.lookup(self,keys,default)
tensorflow.python.training.saver_test_utils.CheckpointedOp.name(self)
tensorflow.python.training.saver_test_utils.CheckpointedOp.saveable(self)
tensorflow.python.training.saver_test_utils.CheckpointedOp.values(self)
tensorflow.training.saver_test_utils.CheckpointedOp(self,name,table_ref=None)
tensorflow.training.saver_test_utils.CheckpointedOp.CustomSaveable(self,table,name)
tensorflow.training.saver_test_utils.CheckpointedOp.CustomSaveable.restore(self,restore_tensors,shapes)
tensorflow.training.saver_test_utils.CheckpointedOp._export(self)
tensorflow.training.saver_test_utils.CheckpointedOp.insert(self,keys,values)
tensorflow.training.saver_test_utils.CheckpointedOp.keys(self)
tensorflow.training.saver_test_utils.CheckpointedOp.lookup(self,keys,default)
tensorflow.training.saver_test_utils.CheckpointedOp.name(self)
tensorflow.training.saver_test_utils.CheckpointedOp.saveable(self)
tensorflow.training.saver_test_utils.CheckpointedOp.values(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/device_setter.py----------------------------------------
A:tensorflow.python.training.device_setter.current_device->tensorflow.python.framework.device.DeviceSpec.from_string(op.device or '')
A:tensorflow.python.training.device_setter.spec->tensorflow.python.framework.device.DeviceSpec.from_string(self._worker_device)
A:tensorflow.python.training.device_setter.cluster_spec->tensorflow.python.training.server_lib.ClusterSpec(cluster).as_dict()
A:tensorflow.python.training.device_setter.ps_tasks->len(cluster_spec[ps_job_name])
A:tensorflow.python.training.device_setter.ps_strategy->_RoundRobinStrategy(ps_tasks)
A:tensorflow.python.training.device_setter.chooser->_ReplicaDeviceChooser(ps_tasks, ps_device, worker_device, merge_devices, ps_ops, ps_strategy)
tensorflow.python.training.device_setter._ReplicaDeviceChooser(self,ps_tasks,ps_device,worker_device,merge_devices,ps_ops,ps_strategy)
tensorflow.python.training.device_setter._ReplicaDeviceChooser.__init__(self,ps_tasks,ps_device,worker_device,merge_devices,ps_ops,ps_strategy)
tensorflow.python.training.device_setter._ReplicaDeviceChooser.device_function(self,op)
tensorflow.python.training.device_setter._RoundRobinStrategy(self,num_tasks)
tensorflow.python.training.device_setter._RoundRobinStrategy.__init__(self,num_tasks)
tensorflow.python.training.device_setter.replica_device_setter(ps_tasks=0,ps_device='/job:ps',worker_device='/job:worker',merge_devices=True,cluster=None,ps_ops=None,ps_strategy=None)
tensorflow.training.device_setter._ReplicaDeviceChooser(self,ps_tasks,ps_device,worker_device,merge_devices,ps_ops,ps_strategy)
tensorflow.training.device_setter._ReplicaDeviceChooser.device_function(self,op)
tensorflow.training.device_setter._RoundRobinStrategy(self,num_tasks)
tensorflow.training.device_setter.replica_device_setter(ps_tasks=0,ps_device='/job:ps',worker_device='/job:worker',merge_devices=True,cluster=None,ps_ops=None,ps_strategy=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/sync_replicas_optimizer.py----------------------------------------
A:tensorflow.python.training.sync_replicas_optimizer.self._tokens_per_step->max(total_num_replicas, replicas_to_aggregate)
A:tensorflow.python.training.sync_replicas_optimizer.self._local_step->tensorflow.python.ops.variables.Variable(initial_value=0, trainable=False, collections=[ops.GraphKeys.LOCAL_VARIABLES], dtype=global_step.dtype.base_dtype, name='sync_rep_local_step')
A:tensorflow.python.training.sync_replicas_optimizer.self.local_step_init_op->tensorflow.python.ops.state_ops.assign(self._local_step, global_step)
A:tensorflow.python.training.sync_replicas_optimizer.self.ready_for_local_init_op->tensorflow.python.ops.variables.report_uninitialized_variables(variables.global_variables())
A:tensorflow.python.training.sync_replicas_optimizer.grad_accum->tensorflow.python.ops.data_flow_ops.SparseConditionalAccumulator(grad.dtype, shape=(), shared_name=var.name + '/grad_accum')
A:tensorflow.python.training.sync_replicas_optimizer.aggregated_grads_and_vars->zip(aggregated_grad, var_list)
A:tensorflow.python.training.sync_replicas_optimizer.update_op->self._opt.apply_gradients(aggregated_grads_and_vars, global_step)
A:tensorflow.python.training.sync_replicas_optimizer.sync_token_queue->tensorflow.python.ops.data_flow_ops.FIFOQueue(-1, global_step.dtype.base_dtype, shapes=(), name='sync_token_q', shared_name='sync_token_q')
A:tensorflow.python.training.sync_replicas_optimizer.dummy_queue->tensorflow.python.ops.data_flow_ops.FIFOQueue(1, types_pb2.DT_INT32, shapes=(), name='dummy_queue', shared_name='dummy_queue')
A:tensorflow.python.training.sync_replicas_optimizer.token->tensorflow.python.ops.data_flow_ops.FIFOQueue(-1, global_step.dtype.base_dtype, shapes=(), name='sync_token_q', shared_name='sync_token_q').dequeue()
A:tensorflow.python.training.sync_replicas_optimizer.train_op->tensorflow.python.ops.state_ops.assign(self._local_step, token)
A:tensorflow.python.training.sync_replicas_optimizer.tokens->tensorflow.python.ops.array_ops.fill([num_tokens], self._global_step)
A:tensorflow.python.training.sync_replicas_optimizer.sync_op->self._variable_averages.apply(self._variables_to_average)
A:tensorflow.python.training.sync_replicas_optimizer.self._chief_queue_runner->tensorflow.python.training.queue_runner.QueueRunner(dummy_queue, [sync_op])
A:tensorflow.python.training.sync_replicas_optimizer.self.chief_init_op->tensorflow.python.ops.control_flow_ops.group(*chief_init_ops)
A:tensorflow.python.training.sync_replicas_optimizer.init_tokens->tensorflow.python.ops.control_flow_ops.no_op(name='no_init_tokens')
A:tensorflow.python.training.sync_replicas_optimizer.self._q_runner->self._sync_optimizer.get_chief_queue_runner()
A:tensorflow.python.training.sync_replicas_optimizer.self._init_tokens_op->self._sync_optimizer.get_init_tokens_op(self._num_tokens)
A:tensorflow.python.training.sync_replicas_optimizer.(local_init_success, msg)->tensorflow.python.training.session_manager._ready(self._ready_for_local_init_op, session, 'Model is not ready for SyncReplicasOptimizer local init.')
tensorflow.python.training.sync_replicas_optimizer.SyncReplicasOptimizer(self,opt,replicas_to_aggregate,total_num_replicas=None,variable_averages=None,variables_to_average=None,use_locking=False,name='sync_replicas')
tensorflow.python.training.sync_replicas_optimizer.SyncReplicasOptimizer.__init__(self,opt,replicas_to_aggregate,total_num_replicas=None,variable_averages=None,variables_to_average=None,use_locking=False,name='sync_replicas')
tensorflow.python.training.sync_replicas_optimizer.SyncReplicasOptimizer.apply_gradients(self,grads_and_vars,global_step=None,name=None)
tensorflow.python.training.sync_replicas_optimizer.SyncReplicasOptimizer.compute_gradients(self,*args,**kwargs)
tensorflow.python.training.sync_replicas_optimizer.SyncReplicasOptimizer.get_chief_queue_runner(self)
tensorflow.python.training.sync_replicas_optimizer.SyncReplicasOptimizer.get_init_tokens_op(self,num_tokens=-1)
tensorflow.python.training.sync_replicas_optimizer.SyncReplicasOptimizer.get_slot(self,*args,**kwargs)
tensorflow.python.training.sync_replicas_optimizer.SyncReplicasOptimizer.get_slot_names(self,*args,**kwargs)
tensorflow.python.training.sync_replicas_optimizer.SyncReplicasOptimizer.make_session_run_hook(self,is_chief,num_tokens=-1)
tensorflow.python.training.sync_replicas_optimizer._SyncReplicasOptimizerHook(self,sync_optimizer,is_chief,num_tokens)
tensorflow.python.training.sync_replicas_optimizer._SyncReplicasOptimizerHook.__init__(self,sync_optimizer,is_chief,num_tokens)
tensorflow.python.training.sync_replicas_optimizer._SyncReplicasOptimizerHook.after_create_session(self,session,coord)
tensorflow.python.training.sync_replicas_optimizer._SyncReplicasOptimizerHook.begin(self)
tensorflow.training.sync_replicas_optimizer.SyncReplicasOptimizer(self,opt,replicas_to_aggregate,total_num_replicas=None,variable_averages=None,variables_to_average=None,use_locking=False,name='sync_replicas')
tensorflow.training.sync_replicas_optimizer.SyncReplicasOptimizer.apply_gradients(self,grads_and_vars,global_step=None,name=None)
tensorflow.training.sync_replicas_optimizer.SyncReplicasOptimizer.compute_gradients(self,*args,**kwargs)
tensorflow.training.sync_replicas_optimizer.SyncReplicasOptimizer.get_chief_queue_runner(self)
tensorflow.training.sync_replicas_optimizer.SyncReplicasOptimizer.get_init_tokens_op(self,num_tokens=-1)
tensorflow.training.sync_replicas_optimizer.SyncReplicasOptimizer.get_slot(self,*args,**kwargs)
tensorflow.training.sync_replicas_optimizer.SyncReplicasOptimizer.get_slot_names(self,*args,**kwargs)
tensorflow.training.sync_replicas_optimizer.SyncReplicasOptimizer.make_session_run_hook(self,is_chief,num_tokens=-1)
tensorflow.training.sync_replicas_optimizer._SyncReplicasOptimizerHook(self,sync_optimizer,is_chief,num_tokens)
tensorflow.training.sync_replicas_optimizer._SyncReplicasOptimizerHook.after_create_session(self,session,coord)
tensorflow.training.sync_replicas_optimizer._SyncReplicasOptimizerHook.begin(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/session_manager.py----------------------------------------
A:tensorflow.python.training.session_manager.graph->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.training.session_manager.sess->tensorflow.python.client.session.Session(self._target, graph=self._graph, config=config)
A:tensorflow.python.training.session_manager.ckpt->tensorflow.python.training.saver.get_checkpoint_state(checkpoint_dir)
A:tensorflow.python.training.session_manager.(sess, is_loaded_from_checkpoint)->self._restore_checkpoint(master, saver, checkpoint_dir=checkpoint_dir, checkpoint_filename_with_path=checkpoint_filename_with_path, wait_for_checkpoint=wait_for_checkpoint, max_wait_secs=max_wait_secs, config=config)
A:tensorflow.python.training.session_manager.(local_init_success, msg)->self._try_run_local_init_op(sess)
A:tensorflow.python.training.session_manager.(is_ready, msg)->self._model_ready(sess)
A:tensorflow.python.training.session_manager.max_wait_secs->float('Inf')
A:tensorflow.python.training.session_manager.timer->_CountDownTimer(max_wait_secs)
A:tensorflow.python.training.session_manager.(local_init_success, not_ready_local_msg)->self._try_run_local_init_op(sess)
A:tensorflow.python.training.session_manager.(is_ready, not_ready_msg)->self._model_ready(sess)
A:tensorflow.python.training.session_manager.(is_ready_for_local_init, msg)->self._model_ready_for_local_init(sess)
A:tensorflow.python.training.session_manager.ready_value->tensorflow.python.client.session.Session(self._target, graph=self._graph, config=config).run(op)
A:tensorflow.python.training.session_manager.non_initialized_varnames->', '.join([i.decode('utf-8') for i in ready_value])
A:tensorflow.python.training.session_manager.self._start_time_secs->time.time()
tensorflow.python.training.session_manager.SessionManager(self,local_init_op=None,ready_op=None,ready_for_local_init_op=None,graph=None,recovery_wait_secs=30)
tensorflow.python.training.session_manager.SessionManager.__init__(self,local_init_op=None,ready_op=None,ready_for_local_init_op=None,graph=None,recovery_wait_secs=30)
tensorflow.python.training.session_manager.SessionManager._model_ready(self,sess)
tensorflow.python.training.session_manager.SessionManager._model_ready_for_local_init(self,sess)
tensorflow.python.training.session_manager.SessionManager._restore_checkpoint(self,master,saver=None,checkpoint_dir=None,checkpoint_filename_with_path=None,wait_for_checkpoint=False,max_wait_secs=7200,config=None)
tensorflow.python.training.session_manager.SessionManager._safe_close(self,sess)
tensorflow.python.training.session_manager.SessionManager._try_run_local_init_op(self,sess)
tensorflow.python.training.session_manager.SessionManager.prepare_session(self,master,init_op=None,saver=None,checkpoint_dir=None,checkpoint_filename_with_path=None,wait_for_checkpoint=False,max_wait_secs=7200,config=None,init_feed_dict=None,init_fn=None)
tensorflow.python.training.session_manager.SessionManager.recover_session(self,master,saver=None,checkpoint_dir=None,checkpoint_filename_with_path=None,wait_for_checkpoint=False,max_wait_secs=7200,config=None)
tensorflow.python.training.session_manager.SessionManager.wait_for_session(self,master,config=None,max_wait_secs=float('Inf'))
tensorflow.python.training.session_manager._CountDownTimer(self,duration_secs)
tensorflow.python.training.session_manager._CountDownTimer.__init__(self,duration_secs)
tensorflow.python.training.session_manager._CountDownTimer.secs_remaining(self)
tensorflow.python.training.session_manager._ready(op,sess,msg)
tensorflow.training.session_manager.SessionManager(self,local_init_op=None,ready_op=None,ready_for_local_init_op=None,graph=None,recovery_wait_secs=30)
tensorflow.training.session_manager.SessionManager._model_ready(self,sess)
tensorflow.training.session_manager.SessionManager._model_ready_for_local_init(self,sess)
tensorflow.training.session_manager.SessionManager._restore_checkpoint(self,master,saver=None,checkpoint_dir=None,checkpoint_filename_with_path=None,wait_for_checkpoint=False,max_wait_secs=7200,config=None)
tensorflow.training.session_manager.SessionManager._safe_close(self,sess)
tensorflow.training.session_manager.SessionManager._try_run_local_init_op(self,sess)
tensorflow.training.session_manager.SessionManager.prepare_session(self,master,init_op=None,saver=None,checkpoint_dir=None,checkpoint_filename_with_path=None,wait_for_checkpoint=False,max_wait_secs=7200,config=None,init_feed_dict=None,init_fn=None)
tensorflow.training.session_manager.SessionManager.recover_session(self,master,saver=None,checkpoint_dir=None,checkpoint_filename_with_path=None,wait_for_checkpoint=False,max_wait_secs=7200,config=None)
tensorflow.training.session_manager.SessionManager.wait_for_session(self,master,config=None,max_wait_secs=float('Inf'))
tensorflow.training.session_manager._CountDownTimer(self,duration_secs)
tensorflow.training.session_manager._CountDownTimer.secs_remaining(self)
tensorflow.training.session_manager._ready(op,sess,msg)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/checkpoint_state_pb2.py----------------------------------------
A:tensorflow.python.training.checkpoint_state_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.python.training.checkpoint_state_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/python/training/checkpoint_state.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n1tensorflow/python/training/checkpoint_state.proto\x12\ntensorflow"T\n\x0fCheckpointState\x12\x1d\n\x15model_checkpoint_path\x18\x01 \x01(\t\x12"\n\x1aall_model_checkpoint_paths\x18\x02 \x03(\tB\x03ø\x01\x01b\x06proto3'))
A:tensorflow.python.training.checkpoint_state_pb2._CHECKPOINTSTATE->google.protobuf.descriptor.Descriptor(name='CheckpointState', full_name='tensorflow.CheckpointState', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='model_checkpoint_path', full_name='tensorflow.CheckpointState.model_checkpoint_path', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='all_model_checkpoint_paths', full_name='tensorflow.CheckpointState.all_model_checkpoint_paths', index=1, number=2, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=65, serialized_end=149)
A:tensorflow.python.training.checkpoint_state_pb2.CheckpointState->google.protobuf.reflection.GeneratedProtocolMessageType('CheckpointState', (_message.Message,), dict(DESCRIPTOR=_CHECKPOINTSTATE, __module__='tensorflow.python.training.checkpoint_state_pb2'))
A:tensorflow.python.training.checkpoint_state_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('ø\x01\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/moving_averages.py----------------------------------------
A:tensorflow.python.training.moving_averages.decay->tensorflow.python.ops.math_ops.minimum(decay, (1.0 + num_updates) / (10.0 + num_updates))
A:tensorflow.python.training.moving_averages.update_delta->_zero_debias(variable, value, decay)
A:tensorflow.python.training.moving_averages.value_x_weight_var->tensorflow.python.ops.variable_scope.get_variable('value_x_weight', shape=value.get_shape(), dtype=value.dtype, initializer=init_ops.zeros_initializer(), trainable=False, collections=collections)
A:tensorflow.python.training.moving_averages.weight_var->tensorflow.python.ops.variable_scope.get_variable('weight', shape=weight.get_shape(), dtype=weight.dtype, initializer=init_ops.zeros_initializer(), trainable=False, collections=collections)
A:tensorflow.python.training.moving_averages.numerator->assign_moving_average(value_x_weight_var, value * weight, decay, zero_debias=False)
A:tensorflow.python.training.moving_averages.denominator->assign_moving_average(weight_var, weight, decay, zero_debias=False)
A:tensorflow.python.training.moving_averages.biased_initializer->tensorflow.python.ops.init_ops.zeros_initializer(dtype=unbiased_var.dtype)(unbiased_var.get_shape())
A:tensorflow.python.training.moving_averages.local_step_initializer->tensorflow.python.ops.init_ops.zeros_initializer()
A:tensorflow.python.training.moving_averages.biased_var->tensorflow.python.ops.variable_scope.get_variable('biased', initializer=biased_initializer, trainable=False)
A:tensorflow.python.training.moving_averages.local_step->tensorflow.python.ops.variable_scope.get_variable('local_step', shape=[], dtype=unbiased_var.dtype, initializer=local_step_initializer, trainable=False)
A:tensorflow.python.training.moving_averages.update_biased->tensorflow.python.ops.state_ops.assign_sub(biased_var, (biased_var - value) * decay, name=scope.name)
A:tensorflow.python.training.moving_averages.update_local_step->tensorflow.python.ops.variable_scope.get_variable('local_step', shape=[], dtype=unbiased_var.dtype, initializer=local_step_initializer, trainable=False).assign_add(1)
A:tensorflow.python.training.moving_averages.var_list->tensorflow.python.ops.variables.trainable_variables()
A:tensorflow.python.training.moving_averages.zero_debias_true->set()
A:tensorflow.python.training.moving_averages.avg->tensorflow.python.training.slot_creator.create_zeros_slot(var, self._name, colocate_with_primary=var.op.type in ['Variable', 'VariableV2'])
A:tensorflow.python.training.moving_averages.num_updates->tensorflow.python.ops.math_ops.cast(self._num_updates, dtypes.float32, name='num_updates')
A:tensorflow.python.training.moving_averages.moving_avg_variables->set(moving_avg_variables)
tensorflow.python.training.moving_averages.ExponentialMovingAverage(self,decay,num_updates=None,zero_debias=False,name='ExponentialMovingAverage')
tensorflow.python.training.moving_averages.ExponentialMovingAverage.__init__(self,decay,num_updates=None,zero_debias=False,name='ExponentialMovingAverage')
tensorflow.python.training.moving_averages.ExponentialMovingAverage.apply(self,var_list=None)
tensorflow.python.training.moving_averages.ExponentialMovingAverage.average(self,var)
tensorflow.python.training.moving_averages.ExponentialMovingAverage.average_name(self,var)
tensorflow.python.training.moving_averages.ExponentialMovingAverage.variables_to_restore(self,moving_avg_variables=None)
tensorflow.python.training.moving_averages._zero_debias(unbiased_var,value,decay)
tensorflow.python.training.moving_averages.assign_moving_average(variable,value,decay,zero_debias=True,name=None)
tensorflow.python.training.moving_averages.weighted_moving_average(value,decay,weight,truediv=True,collections=None,name=None)
tensorflow.training.moving_averages.ExponentialMovingAverage(self,decay,num_updates=None,zero_debias=False,name='ExponentialMovingAverage')
tensorflow.training.moving_averages.ExponentialMovingAverage.apply(self,var_list=None)
tensorflow.training.moving_averages.ExponentialMovingAverage.average(self,var)
tensorflow.training.moving_averages.ExponentialMovingAverage.average_name(self,var)
tensorflow.training.moving_averages.ExponentialMovingAverage.variables_to_restore(self,moving_avg_variables=None)
tensorflow.training.moving_averages._zero_debias(unbiased_var,value,decay)
tensorflow.training.moving_averages.assign_moving_average(variable,value,decay,zero_debias=True,name=None)
tensorflow.training.moving_averages.weighted_moving_average(value,decay,weight,truediv=True,collections=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/basic_loops.py----------------------------------------
tensorflow.python.training.basic_loops.basic_train_loop(supervisor,train_step_fn,args=None,kwargs=None,master='')
tensorflow.training.basic_loops.basic_train_loop(supervisor,train_step_fn,args=None,kwargs=None,master='')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/learning_rate_decay.py----------------------------------------
A:tensorflow.python.training.learning_rate_decay.learning_rate->tensorflow.python.framework.ops.convert_to_tensor(learning_rate, name='learning_rate')
A:tensorflow.python.training.learning_rate_decay.global_step->tensorflow.python.ops.math_ops.cast(global_step, dtype)
A:tensorflow.python.training.learning_rate_decay.decay_steps->tensorflow.python.ops.math_ops.cast(decay_steps, dtype)
A:tensorflow.python.training.learning_rate_decay.decay_rate->tensorflow.python.ops.math_ops.cast(decay_rate, dtype)
A:tensorflow.python.training.learning_rate_decay.p->tensorflow.python.ops.math_ops.floor(p)
A:tensorflow.python.training.learning_rate_decay.x->tensorflow.python.framework.ops.convert_to_tensor(x)
A:tensorflow.python.training.learning_rate_decay.boundaries->tensorflow.python.framework.ops.convert_n_to_tensor(boundaries)
A:tensorflow.python.training.learning_rate_decay.values->tensorflow.python.framework.ops.convert_n_to_tensor(values)
A:tensorflow.python.training.learning_rate_decay.end_learning_rate->tensorflow.python.ops.math_ops.cast(end_learning_rate, dtype)
A:tensorflow.python.training.learning_rate_decay.power->tensorflow.python.ops.math_ops.cast(power, dtype)
A:tensorflow.python.training.learning_rate_decay.exponent->tensorflow.python.ops.math_ops.exp(math_ops.multiply(math_ops.negative(decay_rate), p))
A:tensorflow.python.training.learning_rate_decay.const->tensorflow.python.ops.math_ops.cast(constant_op.constant(1), learning_rate.dtype)
A:tensorflow.python.training.learning_rate_decay.denom->tensorflow.python.ops.math_ops.add(const, math_ops.multiply(decay_rate, p))
tensorflow.python.training.learning_rate_decay.exponential_decay(learning_rate,global_step,decay_steps,decay_rate,staircase=False,name=None)
tensorflow.python.training.learning_rate_decay.inverse_time_decay(learning_rate,global_step,decay_steps,decay_rate,staircase=False,name=None)
tensorflow.python.training.learning_rate_decay.natural_exp_decay(learning_rate,global_step,decay_steps,decay_rate,staircase=False,name=None)
tensorflow.python.training.learning_rate_decay.piecewise_constant(x,boundaries,values,name=None)
tensorflow.python.training.learning_rate_decay.polynomial_decay(learning_rate,global_step,decay_steps,end_learning_rate=0.0001,power=1.0,cycle=False,name=None)
tensorflow.training.learning_rate_decay.exponential_decay(learning_rate,global_step,decay_steps,decay_rate,staircase=False,name=None)
tensorflow.training.learning_rate_decay.inverse_time_decay(learning_rate,global_step,decay_steps,decay_rate,staircase=False,name=None)
tensorflow.training.learning_rate_decay.natural_exp_decay(learning_rate,global_step,decay_steps,decay_rate,staircase=False,name=None)
tensorflow.training.learning_rate_decay.piecewise_constant(x,boundaries,values,name=None)
tensorflow.training.learning_rate_decay.polynomial_decay(learning_rate,global_step,decay_steps,end_learning_rate=0.0001,power=1.0,cycle=False,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/adagrad.py----------------------------------------
A:tensorflow.python.training.adagrad.init->tensorflow.python.ops.init_ops.constant_initializer(self._initial_accumulator_value, dtype=dtype)
A:tensorflow.python.training.adagrad.self._learning_rate_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._learning_rate, name='learning_rate')
A:tensorflow.python.training.adagrad.acc->self.get_slot(var, 'accumulator')
tensorflow.python.training.adagrad.AdagradOptimizer(self,learning_rate,initial_accumulator_value=0.1,use_locking=False,name='Adagrad')
tensorflow.python.training.adagrad.AdagradOptimizer.__init__(self,learning_rate,initial_accumulator_value=0.1,use_locking=False,name='Adagrad')
tensorflow.python.training.adagrad.AdagradOptimizer._apply_dense(self,grad,var)
tensorflow.python.training.adagrad.AdagradOptimizer._apply_sparse(self,grad,var)
tensorflow.python.training.adagrad.AdagradOptimizer._create_slots(self,var_list)
tensorflow.python.training.adagrad.AdagradOptimizer._prepare(self)
tensorflow.python.training.adagrad.AdagradOptimizer._resource_apply_dense(self,grad,var)
tensorflow.python.training.adagrad.AdagradOptimizer._resource_apply_sparse(self,grad,var,indices)
tensorflow.training.adagrad.AdagradOptimizer(self,learning_rate,initial_accumulator_value=0.1,use_locking=False,name='Adagrad')
tensorflow.training.adagrad.AdagradOptimizer._apply_dense(self,grad,var)
tensorflow.training.adagrad.AdagradOptimizer._apply_sparse(self,grad,var)
tensorflow.training.adagrad.AdagradOptimizer._create_slots(self,var_list)
tensorflow.training.adagrad.AdagradOptimizer._prepare(self)
tensorflow.training.adagrad.AdagradOptimizer._resource_apply_dense(self,grad,var)
tensorflow.training.adagrad.AdagradOptimizer._resource_apply_sparse(self,grad,var,indices)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/adagrad_da.py----------------------------------------
A:tensorflow.python.training.adagrad_da.g_val->tensorflow.python.framework.constant_op.constant(0.0, shape=v.get_shape(), dtype=v.dtype.base_dtype)
A:tensorflow.python.training.adagrad_da.gg_val->tensorflow.python.framework.constant_op.constant(self._initial_gradient_squared_accumulator_value, shape=v.get_shape(), dtype=v.dtype.base_dtype)
A:tensorflow.python.training.adagrad_da.self._learning_rate_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._learning_rate, name='learning_rate')
A:tensorflow.python.training.adagrad_da.g_acc->self.get_slot(var, 'gradient_accumulator')
A:tensorflow.python.training.adagrad_da.gg_acc->self.get_slot(var, 'gradient_squared_accumulator')
tensorflow.python.training.adagrad_da.AdagradDAOptimizer(self,learning_rate,global_step,initial_gradient_squared_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='AdagradDA')
tensorflow.python.training.adagrad_da.AdagradDAOptimizer.__init__(self,learning_rate,global_step,initial_gradient_squared_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='AdagradDA')
tensorflow.python.training.adagrad_da.AdagradDAOptimizer._apply_dense(self,grad,var)
tensorflow.python.training.adagrad_da.AdagradDAOptimizer._apply_sparse(self,grad,var)
tensorflow.python.training.adagrad_da.AdagradDAOptimizer._create_slots(self,var_list)
tensorflow.python.training.adagrad_da.AdagradDAOptimizer._prepare(self)
tensorflow.python.training.adagrad_da.AdagradDAOptimizer._resource_apply_dense(self,grad,var)
tensorflow.python.training.adagrad_da.AdagradDAOptimizer._resource_apply_sparse(self,grad,var,indices)
tensorflow.training.adagrad_da.AdagradDAOptimizer(self,learning_rate,global_step,initial_gradient_squared_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='AdagradDA')
tensorflow.training.adagrad_da.AdagradDAOptimizer._apply_dense(self,grad,var)
tensorflow.training.adagrad_da.AdagradDAOptimizer._apply_sparse(self,grad,var)
tensorflow.training.adagrad_da.AdagradDAOptimizer._create_slots(self,var_list)
tensorflow.training.adagrad_da.AdagradDAOptimizer._prepare(self)
tensorflow.training.adagrad_da.AdagradDAOptimizer._resource_apply_dense(self,grad,var)
tensorflow.training.adagrad_da.AdagradDAOptimizer._resource_apply_sparse(self,grad,var,indices)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/supervisor.py----------------------------------------
A:tensorflow.python.training.supervisor.graph->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.training.supervisor.self._meta_graph_def->tensorflow.python.framework.meta_graph.create_meta_graph_def(graph_def=graph.as_graph_def(add_shapes=True), saver_def=self._saver.saver_def if self._saver else None)
A:tensorflow.python.training.supervisor.self._coord->tensorflow.python.training.coordinator.Coordinator()
A:tensorflow.python.training.supervisor.self._save_path->os.path.join(self._logdir, checkpoint_basename)
A:tensorflow.python.training.supervisor.self._summary_writer->tensorflow.python.summary.summary.FileWriter(self._logdir)
A:tensorflow.python.training.supervisor.self._session_manager->tensorflow.python.training.session_manager.SessionManager(local_init_op=self._local_init_op, ready_op=self._ready_op, ready_for_local_init_op=self._ready_for_local_init_op, graph=self._graph, recovery_wait_secs=self._recovery_wait_secs)
A:tensorflow.python.training.supervisor.op_list->tensorflow.python.framework.ops.get_collection(key)
A:tensorflow.python.training.supervisor.ready_op->tensorflow.python.ops.variables.report_uninitialized_variables()
A:tensorflow.python.training.supervisor.ready_for_local_init_op->self._get_first_op_from_collection(ops.GraphKeys.READY_FOR_LOCAL_INIT_OP)
A:tensorflow.python.training.supervisor.init_op->tensorflow.python.ops.variables.global_variables_initializer()
A:tensorflow.python.training.supervisor.local_init_op->tensorflow.python.ops.control_flow_ops.group(*op_list)
A:tensorflow.python.training.supervisor.saver->tensorflow.python.training.saver.Saver()
A:tensorflow.python.training.supervisor.summary_op->tensorflow.python.summary.summary.merge_all()
A:tensorflow.python.training.supervisor.global_step->tensorflow.python.training.training_util.global_step(sess, self.global_step)
A:tensorflow.python.training.supervisor.current_step->tensorflow.python.training.training_util.global_step(self._sess, self._sv.global_step)
A:tensorflow.python.training.supervisor.sess->self.prepare_or_wait_for_session(master=master, config=config, start_standard_services=start_standard_services)
A:tensorflow.python.training.supervisor.queue_runners->self._graph.get_collection(ops.GraphKeys.QUEUE_RUNNERS)
A:tensorflow.python.training.supervisor.looper->tensorflow.python.training.coordinator.LooperThread(self._coord, timer_interval_secs, target=target, args=args, kwargs=kwargs)
A:tensorflow.python.training.supervisor.gs->tensorflow.python.framework.ops.get_default_graph().get_tensor_by_name('global_step:0')
A:tensorflow.python.training.supervisor.(summary_strs, global_step)->self._sess.run([self._sv.summary_op, self._sv.global_step])
A:tensorflow.python.training.supervisor.summary_strs->self._sess.run(self._sv.summary_op)
A:tensorflow.python.training.supervisor.self._last_time->time.time()
A:tensorflow.python.training.supervisor.self._last_step->tensorflow.python.training.training_util.global_step(self._sess, self._sv.global_step)
A:tensorflow.python.training.supervisor.current_time->time.time()
A:tensorflow.python.training.supervisor.summary->Summary(value=[Summary.Value(tag=self._summary_tag, simple_value=steps_per_sec)])
tensorflow.python.training.supervisor.SVStepCounterThread(self,sv,sess)
tensorflow.python.training.supervisor.SVStepCounterThread.__init__(self,sv,sess)
tensorflow.python.training.supervisor.SVStepCounterThread.run_loop(self)
tensorflow.python.training.supervisor.SVStepCounterThread.start_loop(self)
tensorflow.python.training.supervisor.SVSummaryThread(self,sv,sess)
tensorflow.python.training.supervisor.SVSummaryThread.__init__(self,sv,sess)
tensorflow.python.training.supervisor.SVSummaryThread.run_loop(self)
tensorflow.python.training.supervisor.SVTimerCheckpointThread(self,sv,sess)
tensorflow.python.training.supervisor.SVTimerCheckpointThread.__init__(self,sv,sess)
tensorflow.python.training.supervisor.SVTimerCheckpointThread.run_loop(self)
tensorflow.python.training.supervisor.Supervisor(self,graph=None,ready_op=USE_DEFAULT,ready_for_local_init_op=USE_DEFAULT,is_chief=True,init_op=USE_DEFAULT,init_feed_dict=None,local_init_op=USE_DEFAULT,logdir=None,summary_op=USE_DEFAULT,saver=USE_DEFAULT,global_step=USE_DEFAULT,save_summaries_secs=120,save_model_secs=600,recovery_wait_secs=30,stop_grace_secs=120,checkpoint_basename='model.ckpt',session_manager=None,summary_writer=USE_DEFAULT,init_fn=None)
tensorflow.python.training.supervisor.Supervisor.__init__(self,graph=None,ready_op=USE_DEFAULT,ready_for_local_init_op=USE_DEFAULT,is_chief=True,init_op=USE_DEFAULT,init_feed_dict=None,local_init_op=USE_DEFAULT,logdir=None,summary_op=USE_DEFAULT,saver=USE_DEFAULT,global_step=USE_DEFAULT,save_summaries_secs=120,save_model_secs=600,recovery_wait_secs=30,stop_grace_secs=120,checkpoint_basename='model.ckpt',session_manager=None,summary_writer=USE_DEFAULT,init_fn=None)
tensorflow.python.training.supervisor.Supervisor._default_global_step_tensor(self)
tensorflow.python.training.supervisor.Supervisor._get_first_op_from_collection(self,key)
tensorflow.python.training.supervisor.Supervisor._init_global_step(self,global_step=USE_DEFAULT)
tensorflow.python.training.supervisor.Supervisor._init_init_op(self,init_op=USE_DEFAULT,init_feed_dict=None)
tensorflow.python.training.supervisor.Supervisor._init_local_init_op(self,local_init_op=USE_DEFAULT)
tensorflow.python.training.supervisor.Supervisor._init_ready_op(self,ready_op=USE_DEFAULT,ready_for_local_init_op=USE_DEFAULT)
tensorflow.python.training.supervisor.Supervisor._init_saver(self,saver=USE_DEFAULT)
tensorflow.python.training.supervisor.Supervisor._init_session_manager(self,session_manager=None)
tensorflow.python.training.supervisor.Supervisor._init_summary_op(self,summary_op=USE_DEFAULT)
tensorflow.python.training.supervisor.Supervisor._verify_setup(self)
tensorflow.python.training.supervisor.Supervisor._write_graph(self)
tensorflow.python.training.supervisor.Supervisor.coord(self)
tensorflow.python.training.supervisor.Supervisor.global_step(self)
tensorflow.python.training.supervisor.Supervisor.init_feed_dict(self)
tensorflow.python.training.supervisor.Supervisor.init_op(self)
tensorflow.python.training.supervisor.Supervisor.is_chief(self)
tensorflow.python.training.supervisor.Supervisor.loop(self,timer_interval_secs,target,args=None,kwargs=None)
tensorflow.python.training.supervisor.Supervisor.managed_session(self,master='',config=None,start_standard_services=True,close_summary_writer=True)
tensorflow.python.training.supervisor.Supervisor.prepare_or_wait_for_session(self,master='',config=None,wait_for_checkpoint=False,max_wait_secs=7200,start_standard_services=True)
tensorflow.python.training.supervisor.Supervisor.ready_for_local_init_op(self)
tensorflow.python.training.supervisor.Supervisor.ready_op(self)
tensorflow.python.training.supervisor.Supervisor.request_stop(self,ex=None)
tensorflow.python.training.supervisor.Supervisor.save_model_secs(self)
tensorflow.python.training.supervisor.Supervisor.save_path(self)
tensorflow.python.training.supervisor.Supervisor.save_summaries_secs(self)
tensorflow.python.training.supervisor.Supervisor.saver(self)
tensorflow.python.training.supervisor.Supervisor.session_manager(self)
tensorflow.python.training.supervisor.Supervisor.should_stop(self)
tensorflow.python.training.supervisor.Supervisor.start_queue_runners(self,sess,queue_runners=None)
tensorflow.python.training.supervisor.Supervisor.start_standard_services(self,sess)
tensorflow.python.training.supervisor.Supervisor.stop(self,threads=None,close_summary_writer=True)
tensorflow.python.training.supervisor.Supervisor.stop_on_exception(self)
tensorflow.python.training.supervisor.Supervisor.summary_computed(self,sess,summary,global_step=None)
tensorflow.python.training.supervisor.Supervisor.summary_op(self)
tensorflow.python.training.supervisor.Supervisor.summary_writer(self)
tensorflow.python.training.supervisor.Supervisor.wait_for_stop(self)
tensorflow.training.supervisor.SVStepCounterThread(self,sv,sess)
tensorflow.training.supervisor.SVStepCounterThread.run_loop(self)
tensorflow.training.supervisor.SVStepCounterThread.start_loop(self)
tensorflow.training.supervisor.SVSummaryThread(self,sv,sess)
tensorflow.training.supervisor.SVSummaryThread.run_loop(self)
tensorflow.training.supervisor.SVTimerCheckpointThread(self,sv,sess)
tensorflow.training.supervisor.SVTimerCheckpointThread.run_loop(self)
tensorflow.training.supervisor.Supervisor(self,graph=None,ready_op=USE_DEFAULT,ready_for_local_init_op=USE_DEFAULT,is_chief=True,init_op=USE_DEFAULT,init_feed_dict=None,local_init_op=USE_DEFAULT,logdir=None,summary_op=USE_DEFAULT,saver=USE_DEFAULT,global_step=USE_DEFAULT,save_summaries_secs=120,save_model_secs=600,recovery_wait_secs=30,stop_grace_secs=120,checkpoint_basename='model.ckpt',session_manager=None,summary_writer=USE_DEFAULT,init_fn=None)
tensorflow.training.supervisor.Supervisor._default_global_step_tensor(self)
tensorflow.training.supervisor.Supervisor._get_first_op_from_collection(self,key)
tensorflow.training.supervisor.Supervisor._init_global_step(self,global_step=USE_DEFAULT)
tensorflow.training.supervisor.Supervisor._init_init_op(self,init_op=USE_DEFAULT,init_feed_dict=None)
tensorflow.training.supervisor.Supervisor._init_local_init_op(self,local_init_op=USE_DEFAULT)
tensorflow.training.supervisor.Supervisor._init_ready_op(self,ready_op=USE_DEFAULT,ready_for_local_init_op=USE_DEFAULT)
tensorflow.training.supervisor.Supervisor._init_saver(self,saver=USE_DEFAULT)
tensorflow.training.supervisor.Supervisor._init_session_manager(self,session_manager=None)
tensorflow.training.supervisor.Supervisor._init_summary_op(self,summary_op=USE_DEFAULT)
tensorflow.training.supervisor.Supervisor._verify_setup(self)
tensorflow.training.supervisor.Supervisor._write_graph(self)
tensorflow.training.supervisor.Supervisor.coord(self)
tensorflow.training.supervisor.Supervisor.global_step(self)
tensorflow.training.supervisor.Supervisor.init_feed_dict(self)
tensorflow.training.supervisor.Supervisor.init_op(self)
tensorflow.training.supervisor.Supervisor.is_chief(self)
tensorflow.training.supervisor.Supervisor.loop(self,timer_interval_secs,target,args=None,kwargs=None)
tensorflow.training.supervisor.Supervisor.managed_session(self,master='',config=None,start_standard_services=True,close_summary_writer=True)
tensorflow.training.supervisor.Supervisor.prepare_or_wait_for_session(self,master='',config=None,wait_for_checkpoint=False,max_wait_secs=7200,start_standard_services=True)
tensorflow.training.supervisor.Supervisor.ready_for_local_init_op(self)
tensorflow.training.supervisor.Supervisor.ready_op(self)
tensorflow.training.supervisor.Supervisor.request_stop(self,ex=None)
tensorflow.training.supervisor.Supervisor.save_model_secs(self)
tensorflow.training.supervisor.Supervisor.save_path(self)
tensorflow.training.supervisor.Supervisor.save_summaries_secs(self)
tensorflow.training.supervisor.Supervisor.saver(self)
tensorflow.training.supervisor.Supervisor.session_manager(self)
tensorflow.training.supervisor.Supervisor.should_stop(self)
tensorflow.training.supervisor.Supervisor.start_queue_runners(self,sess,queue_runners=None)
tensorflow.training.supervisor.Supervisor.start_standard_services(self,sess)
tensorflow.training.supervisor.Supervisor.stop(self,threads=None,close_summary_writer=True)
tensorflow.training.supervisor.Supervisor.stop_on_exception(self)
tensorflow.training.supervisor.Supervisor.summary_computed(self,sess,summary,global_step=None)
tensorflow.training.supervisor.Supervisor.summary_op(self)
tensorflow.training.supervisor.Supervisor.summary_writer(self)
tensorflow.training.supervisor.Supervisor.wait_for_stop(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/monitored_session.py----------------------------------------
A:tensorflow.python.training.monitored_session.self._init_op->Scaffold.get_or_default('init_op', ops.GraphKeys.INIT_OP, default_init_op)
A:tensorflow.python.training.monitored_session.self._ready_op->Scaffold.get_or_default('ready_op', ops.GraphKeys.READY_OP, default_ready_op)
A:tensorflow.python.training.monitored_session.self._ready_for_local_init_op->Scaffold.get_or_default('ready_for_local_init_op', ops.GraphKeys.READY_FOR_LOCAL_INIT_OP, default_ready_for_local_init_op)
A:tensorflow.python.training.monitored_session.self._local_init_op->Scaffold.get_or_default('local_init_op', ops.GraphKeys.LOCAL_INIT_OP, Scaffold._default_local_init_op)
A:tensorflow.python.training.monitored_session.self._summary_op->Scaffold.get_or_default('summary_op', ops.GraphKeys.SUMMARY_OP, summary.merge_all)
A:tensorflow.python.training.monitored_session.self._saver->Scaffold.get_or_default('saver', ops.GraphKeys.SAVERS, lambda : training_saver.Saver(sharded=True, allow_empty=True, write_version=saver_pb2.SaverDef.V2))
A:tensorflow.python.training.monitored_session.elements->tensorflow.python.framework.ops.get_collection(collection_key)
A:tensorflow.python.training.monitored_session.op->default_constructor()
A:tensorflow.python.training.monitored_session.session_creator->ChiefSessionCreator(scaffold=scaffold, master=master, config=config, checkpoint_dir=checkpoint_dir)
A:tensorflow.python.training.monitored_session.self._session_manager->tensorflow.python.training.session_manager.SessionManager(local_init_op=self._scaffold.local_init_op, ready_op=self._scaffold.ready_op, ready_for_local_init_op=self._scaffold.ready_for_local_init_op, graph=ops.get_default_graph())
A:tensorflow.python.training.monitored_session.self._coordinated_creator->self._CoordinatedSessionCreator(session_creator=session_creator or ChiefSessionCreator(), hooks=self._hooks, stop_grace_period_secs=stop_grace_period_secs)
A:tensorflow.python.training.monitored_session.self._sess->self._create_session()
A:tensorflow.python.training.monitored_session.self.tf_sess->self._session_creator.create_session()
A:tensorflow.python.training.monitored_session.self.coord->tensorflow.python.training.coordinator.Coordinator(clean_stop_exception_types=[])
A:tensorflow.python.training.monitored_session.self._wrapped_is_stoppable->isinstance(self._sess, _WrappedSession)
A:tensorflow.python.training.monitored_session.run_context->tensorflow.python.training.session_run_hook.SessionRunContext(original_args=session_run_hook.SessionRunArgs(fetches, feed_dict), session=self._sess)
A:tensorflow.python.training.monitored_session.feed_dict->self._call_hook_before_run(run_context, actual_fetches, feed_dict, options)
A:tensorflow.python.training.monitored_session.outputs->_WrappedSession.run(self, fetches=actual_fetches, feed_dict=feed_dict, options=options, run_metadata=run_metadata)
A:tensorflow.python.training.monitored_session.request->hook.before_run(run_context)
A:tensorflow.python.training.monitored_session.options.trace_level->max(options.trace_level, incoming_options.trace_level)
A:tensorflow.python.training.monitored_session.options.timeout_in_ms->max(options.timeout_in_ms, incoming_options.timeout_in_ms)
A:tensorflow.python.training.monitored_session.options.inter_op_thread_pool->max(options.inter_op_thread_pool, incoming_options.inter_op_thread_pool)
A:tensorflow.python.training.monitored_session.options.output_partition_graphs->max(options.output_partition_graphs, incoming_options.output_partition_graphs)
tensorflow.python.training.monitored_session.ChiefSessionCreator(self,scaffold=None,master='',config=None,checkpoint_dir=None,checkpoint_filename_with_path=None)
tensorflow.python.training.monitored_session.ChiefSessionCreator.__init__(self,scaffold=None,master='',config=None,checkpoint_dir=None,checkpoint_filename_with_path=None)
tensorflow.python.training.monitored_session.ChiefSessionCreator._get_session_manager(self)
tensorflow.python.training.monitored_session.ChiefSessionCreator.create_session(self)
tensorflow.python.training.monitored_session.MonitoredSession(self,session_creator=None,hooks=None,stop_grace_period_secs=120)
tensorflow.python.training.monitored_session.MonitoredSession.__init__(self,session_creator=None,hooks=None,stop_grace_period_secs=120)
tensorflow.python.training.monitored_session.MonitoredTrainingSession(master='',is_chief=True,checkpoint_dir=None,scaffold=None,hooks=None,chief_only_hooks=None,save_checkpoint_secs=600,save_summaries_steps=100,save_summaries_secs=None,config=None,stop_grace_period_secs=120)
tensorflow.python.training.monitored_session.Scaffold(self,init_op=None,init_feed_dict=None,init_fn=None,ready_op=None,ready_for_local_init_op=None,local_init_op=None,summary_op=None,saver=None)
tensorflow.python.training.monitored_session.Scaffold.__init__(self,init_op=None,init_feed_dict=None,init_fn=None,ready_op=None,ready_for_local_init_op=None,local_init_op=None,summary_op=None,saver=None)
tensorflow.python.training.monitored_session.Scaffold._default_local_init_op()
tensorflow.python.training.monitored_session.Scaffold.finalize(self)
tensorflow.python.training.monitored_session.Scaffold.get_or_default(arg_name,collection_key,default_constructor)
tensorflow.python.training.monitored_session.Scaffold.init_feed_dict(self)
tensorflow.python.training.monitored_session.Scaffold.init_fn(self)
tensorflow.python.training.monitored_session.Scaffold.init_op(self)
tensorflow.python.training.monitored_session.Scaffold.local_init_op(self)
tensorflow.python.training.monitored_session.Scaffold.ready_for_local_init_op(self)
tensorflow.python.training.monitored_session.Scaffold.ready_op(self)
tensorflow.python.training.monitored_session.Scaffold.saver(self)
tensorflow.python.training.monitored_session.Scaffold.summary_op(self)
tensorflow.python.training.monitored_session.SessionCreator(object)
tensorflow.python.training.monitored_session.SessionCreator.create_session(self)
tensorflow.python.training.monitored_session.SingularMonitoredSession(self,hooks=None,scaffold=None,master='',config=None,checkpoint_dir=None,stop_grace_period_secs=120)
tensorflow.python.training.monitored_session.SingularMonitoredSession.__init__(self,hooks=None,scaffold=None,master='',config=None,checkpoint_dir=None,stop_grace_period_secs=120)
tensorflow.python.training.monitored_session.SingularMonitoredSession.raw_session(self)
tensorflow.python.training.monitored_session.WorkerSessionCreator(self,scaffold=None,master='',config=None)
tensorflow.python.training.monitored_session.WorkerSessionCreator.__init__(self,scaffold=None,master='',config=None)
tensorflow.python.training.monitored_session.WorkerSessionCreator._get_session_manager(self)
tensorflow.python.training.monitored_session.WorkerSessionCreator.create_session(self)
tensorflow.python.training.monitored_session._CoordinatedSession(self,sess,coord,stop_grace_period_secs=120)
tensorflow.python.training.monitored_session._CoordinatedSession.__init__(self,sess,coord,stop_grace_period_secs=120)
tensorflow.python.training.monitored_session._CoordinatedSession._check_stop(self)
tensorflow.python.training.monitored_session._CoordinatedSession.close(self)
tensorflow.python.training.monitored_session._HookedSession(self,sess,hooks)
tensorflow.python.training.monitored_session._HookedSession.__init__(self,sess,hooks)
tensorflow.python.training.monitored_session._HookedSession._call_hook_before_run(self,run_context,fetch_dict,user_feed_dict,options)
tensorflow.python.training.monitored_session._HookedSession._check_stop(self)
tensorflow.python.training.monitored_session._HookedSession._merge_run_options(self,options,incoming_options)
tensorflow.python.training.monitored_session._HookedSession._raise_if_feeds_intersects(self,feeds1,feeds2,message)
tensorflow.python.training.monitored_session._HookedSession.run(self,fetches,feed_dict=None,options=None,run_metadata=None)
tensorflow.python.training.monitored_session._MonitoredSession(self,session_creator,hooks,should_recover,stop_grace_period_secs=120)
tensorflow.python.training.monitored_session._MonitoredSession._CoordinatedSessionCreator(self,session_creator,hooks,stop_grace_period_secs)
tensorflow.python.training.monitored_session._MonitoredSession._CoordinatedSessionCreator.__init__(self,session_creator,hooks,stop_grace_period_secs)
tensorflow.python.training.monitored_session._MonitoredSession._CoordinatedSessionCreator.create_session(self)
tensorflow.python.training.monitored_session._MonitoredSession.__enter__(self)
tensorflow.python.training.monitored_session._MonitoredSession.__exit__(self,exception_type,exception_value,traceback)
tensorflow.python.training.monitored_session._MonitoredSession.__init__(self,session_creator,hooks,should_recover,stop_grace_period_secs=120)
tensorflow.python.training.monitored_session._MonitoredSession._close_internal(self,exception_type=None)
tensorflow.python.training.monitored_session._MonitoredSession._is_closed(self)
tensorflow.python.training.monitored_session._MonitoredSession._tf_sess(self)
tensorflow.python.training.monitored_session._MonitoredSession.close(self)
tensorflow.python.training.monitored_session._MonitoredSession.graph(self)
tensorflow.python.training.monitored_session._MonitoredSession.run(self,fetches,feed_dict=None,options=None,run_metadata=None)
tensorflow.python.training.monitored_session._MonitoredSession.should_stop(self)
tensorflow.python.training.monitored_session._RecoverableSession(self,sess_creator)
tensorflow.python.training.monitored_session._RecoverableSession.__init__(self,sess_creator)
tensorflow.python.training.monitored_session._RecoverableSession._create_session(self)
tensorflow.python.training.monitored_session._RecoverableSession.run(self,fetches,feed_dict=None,options=None,run_metadata=None)
tensorflow.python.training.monitored_session._WrappedSession(self,sess)
tensorflow.python.training.monitored_session._WrappedSession.__init__(self,sess)
tensorflow.python.training.monitored_session._WrappedSession._check_stop(self)
tensorflow.python.training.monitored_session._WrappedSession.close(self)
tensorflow.python.training.monitored_session._WrappedSession.graph(self)
tensorflow.python.training.monitored_session._WrappedSession.run(self,*args,**kwargs)
tensorflow.python.training.monitored_session._WrappedSession.sess_str(self)
tensorflow.python.training.monitored_session._WrappedSession.should_stop(self)
tensorflow.training.monitored_session.ChiefSessionCreator(self,scaffold=None,master='',config=None,checkpoint_dir=None,checkpoint_filename_with_path=None)
tensorflow.training.monitored_session.ChiefSessionCreator._get_session_manager(self)
tensorflow.training.monitored_session.ChiefSessionCreator.create_session(self)
tensorflow.training.monitored_session.MonitoredSession(self,session_creator=None,hooks=None,stop_grace_period_secs=120)
tensorflow.training.monitored_session.MonitoredTrainingSession(master='',is_chief=True,checkpoint_dir=None,scaffold=None,hooks=None,chief_only_hooks=None,save_checkpoint_secs=600,save_summaries_steps=100,save_summaries_secs=None,config=None,stop_grace_period_secs=120)
tensorflow.training.monitored_session.Scaffold(self,init_op=None,init_feed_dict=None,init_fn=None,ready_op=None,ready_for_local_init_op=None,local_init_op=None,summary_op=None,saver=None)
tensorflow.training.monitored_session.Scaffold._default_local_init_op()
tensorflow.training.monitored_session.Scaffold.finalize(self)
tensorflow.training.monitored_session.Scaffold.get_or_default(arg_name,collection_key,default_constructor)
tensorflow.training.monitored_session.Scaffold.init_feed_dict(self)
tensorflow.training.monitored_session.Scaffold.init_fn(self)
tensorflow.training.monitored_session.Scaffold.init_op(self)
tensorflow.training.monitored_session.Scaffold.local_init_op(self)
tensorflow.training.monitored_session.Scaffold.ready_for_local_init_op(self)
tensorflow.training.monitored_session.Scaffold.ready_op(self)
tensorflow.training.monitored_session.Scaffold.saver(self)
tensorflow.training.monitored_session.Scaffold.summary_op(self)
tensorflow.training.monitored_session.SessionCreator(object)
tensorflow.training.monitored_session.SessionCreator.create_session(self)
tensorflow.training.monitored_session.SingularMonitoredSession(self,hooks=None,scaffold=None,master='',config=None,checkpoint_dir=None,stop_grace_period_secs=120)
tensorflow.training.monitored_session.SingularMonitoredSession.raw_session(self)
tensorflow.training.monitored_session.WorkerSessionCreator(self,scaffold=None,master='',config=None)
tensorflow.training.monitored_session.WorkerSessionCreator._get_session_manager(self)
tensorflow.training.monitored_session.WorkerSessionCreator.create_session(self)
tensorflow.training.monitored_session._CoordinatedSession(self,sess,coord,stop_grace_period_secs=120)
tensorflow.training.monitored_session._CoordinatedSession._check_stop(self)
tensorflow.training.monitored_session._CoordinatedSession.close(self)
tensorflow.training.monitored_session._HookedSession(self,sess,hooks)
tensorflow.training.monitored_session._HookedSession._call_hook_before_run(self,run_context,fetch_dict,user_feed_dict,options)
tensorflow.training.monitored_session._HookedSession._check_stop(self)
tensorflow.training.monitored_session._HookedSession._merge_run_options(self,options,incoming_options)
tensorflow.training.monitored_session._HookedSession._raise_if_feeds_intersects(self,feeds1,feeds2,message)
tensorflow.training.monitored_session._HookedSession.run(self,fetches,feed_dict=None,options=None,run_metadata=None)
tensorflow.training.monitored_session._MonitoredSession(self,session_creator,hooks,should_recover,stop_grace_period_secs=120)
tensorflow.training.monitored_session._MonitoredSession._CoordinatedSessionCreator(self,session_creator,hooks,stop_grace_period_secs)
tensorflow.training.monitored_session._MonitoredSession._CoordinatedSessionCreator.create_session(self)
tensorflow.training.monitored_session._MonitoredSession.__enter__(self)
tensorflow.training.monitored_session._MonitoredSession.__exit__(self,exception_type,exception_value,traceback)
tensorflow.training.monitored_session._MonitoredSession._close_internal(self,exception_type=None)
tensorflow.training.monitored_session._MonitoredSession._is_closed(self)
tensorflow.training.monitored_session._MonitoredSession._tf_sess(self)
tensorflow.training.monitored_session._MonitoredSession.close(self)
tensorflow.training.monitored_session._MonitoredSession.graph(self)
tensorflow.training.monitored_session._MonitoredSession.run(self,fetches,feed_dict=None,options=None,run_metadata=None)
tensorflow.training.monitored_session._MonitoredSession.should_stop(self)
tensorflow.training.monitored_session._RecoverableSession(self,sess_creator)
tensorflow.training.monitored_session._RecoverableSession._create_session(self)
tensorflow.training.monitored_session._RecoverableSession.run(self,fetches,feed_dict=None,options=None,run_metadata=None)
tensorflow.training.monitored_session._WrappedSession(self,sess)
tensorflow.training.monitored_session._WrappedSession._check_stop(self)
tensorflow.training.monitored_session._WrappedSession.close(self)
tensorflow.training.monitored_session._WrappedSession.graph(self)
tensorflow.training.monitored_session._WrappedSession.run(self,*args,**kwargs)
tensorflow.training.monitored_session._WrappedSession.sess_str(self)
tensorflow.training.monitored_session._WrappedSession.should_stop(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/training.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/proximal_gradient_descent.py----------------------------------------
A:tensorflow.python.training.proximal_gradient_descent.self._learning_rate_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._learning_rate, name='learning_rate')
A:tensorflow.python.training.proximal_gradient_descent.self._l1_regularization_strength_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._l1_regularization_strength, name='l1_regularization_strength')
A:tensorflow.python.training.proximal_gradient_descent.self._l2_regularization_strength_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._l2_regularization_strength, name='l2_regularization_strength')
tensorflow.python.training.proximal_gradient_descent.ProximalGradientDescentOptimizer(self,learning_rate,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='ProximalGradientDescent')
tensorflow.python.training.proximal_gradient_descent.ProximalGradientDescentOptimizer.__init__(self,learning_rate,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='ProximalGradientDescent')
tensorflow.python.training.proximal_gradient_descent.ProximalGradientDescentOptimizer._apply_dense(self,grad,var)
tensorflow.python.training.proximal_gradient_descent.ProximalGradientDescentOptimizer._apply_sparse(self,grad,var)
tensorflow.python.training.proximal_gradient_descent.ProximalGradientDescentOptimizer._prepare(self)
tensorflow.python.training.proximal_gradient_descent.ProximalGradientDescentOptimizer._resource_apply_dense(self,grad,var)
tensorflow.python.training.proximal_gradient_descent.ProximalGradientDescentOptimizer._resource_apply_sparse(self,grad,var,indices)
tensorflow.training.proximal_gradient_descent.ProximalGradientDescentOptimizer(self,learning_rate,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='ProximalGradientDescent')
tensorflow.training.proximal_gradient_descent.ProximalGradientDescentOptimizer._apply_dense(self,grad,var)
tensorflow.training.proximal_gradient_descent.ProximalGradientDescentOptimizer._apply_sparse(self,grad,var)
tensorflow.training.proximal_gradient_descent.ProximalGradientDescentOptimizer._prepare(self)
tensorflow.training.proximal_gradient_descent.ProximalGradientDescentOptimizer._resource_apply_dense(self,grad,var)
tensorflow.training.proximal_gradient_descent.ProximalGradientDescentOptimizer._resource_apply_sparse(self,grad,var,indices)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/queue_runner_impl.py----------------------------------------
A:tensorflow.python.training.queue_runner_impl.self._lock->threading.Lock()
A:tensorflow.python.training.queue_runner_impl.self._runs_per_session->weakref.WeakKeyDictionary()
A:tensorflow.python.training.queue_runner_impl.self._close_op->tensorflow.python.framework.ops.get_default_graph().as_graph_element(ops.prepend_name_scope(queue_runner_def.close_op_name, import_scope))
A:tensorflow.python.training.queue_runner_impl.self._cancel_op->tensorflow.python.framework.ops.get_default_graph().as_graph_element(ops.prepend_name_scope(queue_runner_def.cancel_op_name, import_scope))
A:tensorflow.python.training.queue_runner_impl.self._queue_closed_exception_types->tuple((errors.exception_type_from_error_code(code) for code in queue_runner_def.queue_closed_exception_types))
A:tensorflow.python.training.queue_runner_impl.g->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.training.queue_runner_impl.self._queue->tensorflow.python.framework.ops.get_default_graph().as_graph_element(ops.prepend_name_scope(queue_runner_def.queue_name, import_scope))
A:tensorflow.python.training.queue_runner_impl.self._runs_per_session[sess]->len(self._enqueue_ops)
A:tensorflow.python.training.queue_runner_impl.queue_runner_def->tensorflow.core.protobuf.queue_runner_pb2.QueueRunnerDef()
A:tensorflow.python.training.queue_runner_impl.queue_runner_def.queue_name->tensorflow.python.framework.ops.strip_name_scope(self.queue.name, export_scope)
A:tensorflow.python.training.queue_runner_impl.queue_runner_def.close_op_name->tensorflow.python.framework.ops.strip_name_scope(self.close_op.name, export_scope)
A:tensorflow.python.training.queue_runner_impl.queue_runner_def.cancel_op_name->tensorflow.python.framework.ops.strip_name_scope(self.cancel_op.name, export_scope)
A:tensorflow.python.training.queue_runner_impl.sess->tensorflow.python.framework.ops.get_default_session()
tensorflow.python.training.queue_runner_impl.QueueRunner(self,queue=None,enqueue_ops=None,close_op=None,cancel_op=None,queue_closed_exception_types=None,queue_runner_def=None,import_scope=None)
tensorflow.python.training.queue_runner_impl.QueueRunner.__init__(self,queue=None,enqueue_ops=None,close_op=None,cancel_op=None,queue_closed_exception_types=None,queue_runner_def=None,import_scope=None)
tensorflow.python.training.queue_runner_impl.QueueRunner._close_on_stop(self,sess,cancel_op,coord)
tensorflow.python.training.queue_runner_impl.QueueRunner._init_from_args(self,queue=None,enqueue_ops=None,close_op=None,cancel_op=None,queue_closed_exception_types=None)
tensorflow.python.training.queue_runner_impl.QueueRunner._init_from_proto(self,queue_runner_def,import_scope=None)
tensorflow.python.training.queue_runner_impl.QueueRunner._run(self,sess,enqueue_op,coord=None)
tensorflow.python.training.queue_runner_impl.QueueRunner.cancel_op(self)
tensorflow.python.training.queue_runner_impl.QueueRunner.close_op(self)
tensorflow.python.training.queue_runner_impl.QueueRunner.create_threads(self,sess,coord=None,daemon=False,start=False)
tensorflow.python.training.queue_runner_impl.QueueRunner.enqueue_ops(self)
tensorflow.python.training.queue_runner_impl.QueueRunner.exceptions_raised(self)
tensorflow.python.training.queue_runner_impl.QueueRunner.from_proto(queue_runner_def,import_scope=None)
tensorflow.python.training.queue_runner_impl.QueueRunner.name(self)
tensorflow.python.training.queue_runner_impl.QueueRunner.queue(self)
tensorflow.python.training.queue_runner_impl.QueueRunner.queue_closed_exception_types(self)
tensorflow.python.training.queue_runner_impl.QueueRunner.to_proto(self,export_scope=None)
tensorflow.python.training.queue_runner_impl.add_queue_runner(qr,collection=ops.GraphKeys.QUEUE_RUNNERS)
tensorflow.python.training.queue_runner_impl.start_queue_runners(sess=None,coord=None,daemon=True,start=True,collection=ops.GraphKeys.QUEUE_RUNNERS)
tensorflow.training.queue_runner_impl.QueueRunner(self,queue=None,enqueue_ops=None,close_op=None,cancel_op=None,queue_closed_exception_types=None,queue_runner_def=None,import_scope=None)
tensorflow.training.queue_runner_impl.QueueRunner._close_on_stop(self,sess,cancel_op,coord)
tensorflow.training.queue_runner_impl.QueueRunner._init_from_args(self,queue=None,enqueue_ops=None,close_op=None,cancel_op=None,queue_closed_exception_types=None)
tensorflow.training.queue_runner_impl.QueueRunner._init_from_proto(self,queue_runner_def,import_scope=None)
tensorflow.training.queue_runner_impl.QueueRunner._run(self,sess,enqueue_op,coord=None)
tensorflow.training.queue_runner_impl.QueueRunner.cancel_op(self)
tensorflow.training.queue_runner_impl.QueueRunner.close_op(self)
tensorflow.training.queue_runner_impl.QueueRunner.create_threads(self,sess,coord=None,daemon=False,start=False)
tensorflow.training.queue_runner_impl.QueueRunner.enqueue_ops(self)
tensorflow.training.queue_runner_impl.QueueRunner.exceptions_raised(self)
tensorflow.training.queue_runner_impl.QueueRunner.from_proto(queue_runner_def,import_scope=None)
tensorflow.training.queue_runner_impl.QueueRunner.name(self)
tensorflow.training.queue_runner_impl.QueueRunner.queue(self)
tensorflow.training.queue_runner_impl.QueueRunner.queue_closed_exception_types(self)
tensorflow.training.queue_runner_impl.QueueRunner.to_proto(self,export_scope=None)
tensorflow.training.queue_runner_impl.add_queue_runner(qr,collection=ops.GraphKeys.QUEUE_RUNNERS)
tensorflow.training.queue_runner_impl.start_queue_runners(sess=None,coord=None,daemon=True,start=True,collection=ops.GraphKeys.QUEUE_RUNNERS)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/gradient_descent.py----------------------------------------
A:tensorflow.python.training.gradient_descent.delta->tensorflow.python.framework.ops.IndexedSlices(grad.values * math_ops.cast(self._learning_rate_tensor, var.dtype.base_dtype), grad.indices, grad.dense_shape)
A:tensorflow.python.training.gradient_descent.self._learning_rate_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._learning_rate, name='learning_rate')
tensorflow.python.training.gradient_descent.GradientDescentOptimizer(self,learning_rate,use_locking=False,name='GradientDescent')
tensorflow.python.training.gradient_descent.GradientDescentOptimizer.__init__(self,learning_rate,use_locking=False,name='GradientDescent')
tensorflow.python.training.gradient_descent.GradientDescentOptimizer._apply_dense(self,grad,var)
tensorflow.python.training.gradient_descent.GradientDescentOptimizer._apply_sparse_duplicate_indices(self,grad,var)
tensorflow.python.training.gradient_descent.GradientDescentOptimizer._prepare(self)
tensorflow.python.training.gradient_descent.GradientDescentOptimizer._resource_apply_dense(self,grad,handle)
tensorflow.python.training.gradient_descent.GradientDescentOptimizer._resource_apply_sparse_duplicate_indices(self,grad,handle,indices)
tensorflow.training.gradient_descent.GradientDescentOptimizer(self,learning_rate,use_locking=False,name='GradientDescent')
tensorflow.training.gradient_descent.GradientDescentOptimizer._apply_dense(self,grad,var)
tensorflow.training.gradient_descent.GradientDescentOptimizer._apply_sparse_duplicate_indices(self,grad,var)
tensorflow.training.gradient_descent.GradientDescentOptimizer._prepare(self)
tensorflow.training.gradient_descent.GradientDescentOptimizer._resource_apply_dense(self,grad,handle)
tensorflow.training.gradient_descent.GradientDescentOptimizer._resource_apply_sparse_duplicate_indices(self,grad,handle,indices)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/basic_session_run_hooks.py----------------------------------------
A:tensorflow.python.training.basic_session_run_hooks.current_time->time.time()
A:tensorflow.python.training.basic_session_run_hooks.self._tag_order->tensors.keys()
A:tensorflow.python.training.basic_session_run_hooks.self._timer->SecondOrStepTimer(every_secs=save_secs, every_steps=save_steps)
A:tensorflow.python.training.basic_session_run_hooks.self._should_trigger->self._timer.should_trigger_for_step(self._iter_count)
A:tensorflow.python.training.basic_session_run_hooks.original->numpy.get_printoptions()
A:tensorflow.python.training.basic_session_run_hooks.(elapsed_secs, _)->self._timer.update_last_triggered_step(self._iter_count)
A:tensorflow.python.training.basic_session_run_hooks.self._global_step_tensor->tensorflow.python.training.training_util.get_global_step()
A:tensorflow.python.training.basic_session_run_hooks.self._save_path->os.path.join(checkpoint_dir, checkpoint_basename)
A:tensorflow.python.training.basic_session_run_hooks.self._summary_writer->tensorflow.python.training.summary_io.SummaryWriterCache.get(self._output_dir)
A:tensorflow.python.training.basic_session_run_hooks.graph->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.python.training.basic_session_run_hooks.meta_graph_def->tensorflow.python.framework.meta_graph.create_meta_graph_def(graph_def=graph.as_graph_def(add_shapes=True), saver_def=saver_def)
A:tensorflow.python.training.basic_session_run_hooks.last_step->session.run(training_util.get_global_step())
A:tensorflow.python.training.basic_session_run_hooks.(elapsed_time, elapsed_steps)->self._timer.update_last_triggered_step(global_step)
A:tensorflow.python.training.basic_session_run_hooks.summary->Summary(value=[Summary.Value(tag=self._summary_tag, simple_value=steps_per_sec)])
A:tensorflow.python.training.basic_session_run_hooks.requests['summary']->self._get_summary_op()
A:tensorflow.python.training.basic_session_run_hooks.current_step->run_context.session.run(self._global_step_tensor)
A:tensorflow.python.training.basic_session_run_hooks.self._final_ops_values->session.run(self._final_ops, feed_dict=self._final_ops_feed_dict)
A:tensorflow.python.training.basic_session_run_hooks.element->tensorflow.python.framework.ops.get_default_graph().as_graph_element(obj + ':0')
tensorflow.python.training.basic_session_run_hooks.CheckpointSaverHook(self,checkpoint_dir,save_secs=None,save_steps=None,saver=None,checkpoint_basename='model.ckpt',scaffold=None,listeners=None)
tensorflow.python.training.basic_session_run_hooks.CheckpointSaverHook.__init__(self,checkpoint_dir,save_secs=None,save_steps=None,saver=None,checkpoint_basename='model.ckpt',scaffold=None,listeners=None)
tensorflow.python.training.basic_session_run_hooks.CheckpointSaverHook._get_saver(self)
tensorflow.python.training.basic_session_run_hooks.CheckpointSaverHook._save(self,step,session)
tensorflow.python.training.basic_session_run_hooks.CheckpointSaverHook.after_run(self,run_context,run_values)
tensorflow.python.training.basic_session_run_hooks.CheckpointSaverHook.before_run(self,run_context)
tensorflow.python.training.basic_session_run_hooks.CheckpointSaverHook.begin(self)
tensorflow.python.training.basic_session_run_hooks.CheckpointSaverHook.end(self,session)
tensorflow.python.training.basic_session_run_hooks.CheckpointSaverListener(object)
tensorflow.python.training.basic_session_run_hooks.CheckpointSaverListener.after_save(self,session,global_step_value)
tensorflow.python.training.basic_session_run_hooks.CheckpointSaverListener.before_save(self,session,global_step_value)
tensorflow.python.training.basic_session_run_hooks.CheckpointSaverListener.begin(self)
tensorflow.python.training.basic_session_run_hooks.CheckpointSaverListener.end(self,session,global_step_value)
tensorflow.python.training.basic_session_run_hooks.FeedFnHook(self,feed_fn)
tensorflow.python.training.basic_session_run_hooks.FeedFnHook.__init__(self,feed_fn)
tensorflow.python.training.basic_session_run_hooks.FeedFnHook.before_run(self,run_context)
tensorflow.python.training.basic_session_run_hooks.FinalOpsHook(self,final_ops,final_ops_feed_dict=None)
tensorflow.python.training.basic_session_run_hooks.FinalOpsHook.__init__(self,final_ops,final_ops_feed_dict=None)
tensorflow.python.training.basic_session_run_hooks.FinalOpsHook.end(self,session)
tensorflow.python.training.basic_session_run_hooks.FinalOpsHook.final_ops_values(self)
tensorflow.python.training.basic_session_run_hooks.GlobalStepWaiterHook(self,wait_until_step)
tensorflow.python.training.basic_session_run_hooks.GlobalStepWaiterHook.__init__(self,wait_until_step)
tensorflow.python.training.basic_session_run_hooks.GlobalStepWaiterHook.before_run(self,run_context)
tensorflow.python.training.basic_session_run_hooks.GlobalStepWaiterHook.begin(self)
tensorflow.python.training.basic_session_run_hooks.LoggingTensorHook(self,tensors,every_n_iter=None,every_n_secs=None,formatter=None)
tensorflow.python.training.basic_session_run_hooks.LoggingTensorHook.__init__(self,tensors,every_n_iter=None,every_n_secs=None,formatter=None)
tensorflow.python.training.basic_session_run_hooks.LoggingTensorHook.after_run(self,run_context,run_values)
tensorflow.python.training.basic_session_run_hooks.LoggingTensorHook.before_run(self,run_context)
tensorflow.python.training.basic_session_run_hooks.LoggingTensorHook.begin(self)
tensorflow.python.training.basic_session_run_hooks.NanLossDuringTrainingError(RuntimeError)
tensorflow.python.training.basic_session_run_hooks.NanLossDuringTrainingError.__str__(self)
tensorflow.python.training.basic_session_run_hooks.NanTensorHook(self,loss_tensor,fail_on_nan_loss=True)
tensorflow.python.training.basic_session_run_hooks.NanTensorHook.__init__(self,loss_tensor,fail_on_nan_loss=True)
tensorflow.python.training.basic_session_run_hooks.NanTensorHook.after_run(self,run_context,run_values)
tensorflow.python.training.basic_session_run_hooks.NanTensorHook.before_run(self,run_context)
tensorflow.python.training.basic_session_run_hooks.SecondOrStepTimer(self,every_secs=None,every_steps=None)
tensorflow.python.training.basic_session_run_hooks.SecondOrStepTimer.__init__(self,every_secs=None,every_steps=None)
tensorflow.python.training.basic_session_run_hooks.SecondOrStepTimer.last_triggered_step(self)
tensorflow.python.training.basic_session_run_hooks.SecondOrStepTimer.should_trigger_for_step(self,step)
tensorflow.python.training.basic_session_run_hooks.SecondOrStepTimer.update_last_triggered_step(self,step)
tensorflow.python.training.basic_session_run_hooks.StepCounterHook(self,every_n_steps=100,every_n_secs=None,output_dir=None,summary_writer=None)
tensorflow.python.training.basic_session_run_hooks.StepCounterHook.__init__(self,every_n_steps=100,every_n_secs=None,output_dir=None,summary_writer=None)
tensorflow.python.training.basic_session_run_hooks.StepCounterHook.after_run(self,run_context,run_values)
tensorflow.python.training.basic_session_run_hooks.StepCounterHook.before_run(self,run_context)
tensorflow.python.training.basic_session_run_hooks.StepCounterHook.begin(self)
tensorflow.python.training.basic_session_run_hooks.StopAtStepHook(self,num_steps=None,last_step=None)
tensorflow.python.training.basic_session_run_hooks.StopAtStepHook.__init__(self,num_steps=None,last_step=None)
tensorflow.python.training.basic_session_run_hooks.StopAtStepHook.after_run(self,run_context,run_values)
tensorflow.python.training.basic_session_run_hooks.StopAtStepHook.before_run(self,run_context)
tensorflow.python.training.basic_session_run_hooks.StopAtStepHook.begin(self)
tensorflow.python.training.basic_session_run_hooks.SummarySaverHook(self,save_steps=None,save_secs=None,output_dir=None,summary_writer=None,scaffold=None,summary_op=None)
tensorflow.python.training.basic_session_run_hooks.SummarySaverHook.__init__(self,save_steps=None,save_secs=None,output_dir=None,summary_writer=None,scaffold=None,summary_op=None)
tensorflow.python.training.basic_session_run_hooks.SummarySaverHook._get_summary_op(self)
tensorflow.python.training.basic_session_run_hooks.SummarySaverHook.after_run(self,run_context,run_values)
tensorflow.python.training.basic_session_run_hooks.SummarySaverHook.before_run(self,run_context)
tensorflow.python.training.basic_session_run_hooks.SummarySaverHook.begin(self)
tensorflow.python.training.basic_session_run_hooks.SummarySaverHook.end(self,session=None)
tensorflow.python.training.basic_session_run_hooks._as_graph_element(obj)
tensorflow.training.basic_session_run_hooks.CheckpointSaverHook(self,checkpoint_dir,save_secs=None,save_steps=None,saver=None,checkpoint_basename='model.ckpt',scaffold=None,listeners=None)
tensorflow.training.basic_session_run_hooks.CheckpointSaverHook._get_saver(self)
tensorflow.training.basic_session_run_hooks.CheckpointSaverHook._save(self,step,session)
tensorflow.training.basic_session_run_hooks.CheckpointSaverHook.after_run(self,run_context,run_values)
tensorflow.training.basic_session_run_hooks.CheckpointSaverHook.before_run(self,run_context)
tensorflow.training.basic_session_run_hooks.CheckpointSaverHook.begin(self)
tensorflow.training.basic_session_run_hooks.CheckpointSaverHook.end(self,session)
tensorflow.training.basic_session_run_hooks.CheckpointSaverListener(object)
tensorflow.training.basic_session_run_hooks.CheckpointSaverListener.after_save(self,session,global_step_value)
tensorflow.training.basic_session_run_hooks.CheckpointSaverListener.before_save(self,session,global_step_value)
tensorflow.training.basic_session_run_hooks.CheckpointSaverListener.begin(self)
tensorflow.training.basic_session_run_hooks.CheckpointSaverListener.end(self,session,global_step_value)
tensorflow.training.basic_session_run_hooks.FeedFnHook(self,feed_fn)
tensorflow.training.basic_session_run_hooks.FeedFnHook.before_run(self,run_context)
tensorflow.training.basic_session_run_hooks.FinalOpsHook(self,final_ops,final_ops_feed_dict=None)
tensorflow.training.basic_session_run_hooks.FinalOpsHook.end(self,session)
tensorflow.training.basic_session_run_hooks.FinalOpsHook.final_ops_values(self)
tensorflow.training.basic_session_run_hooks.GlobalStepWaiterHook(self,wait_until_step)
tensorflow.training.basic_session_run_hooks.GlobalStepWaiterHook.before_run(self,run_context)
tensorflow.training.basic_session_run_hooks.GlobalStepWaiterHook.begin(self)
tensorflow.training.basic_session_run_hooks.LoggingTensorHook(self,tensors,every_n_iter=None,every_n_secs=None,formatter=None)
tensorflow.training.basic_session_run_hooks.LoggingTensorHook.after_run(self,run_context,run_values)
tensorflow.training.basic_session_run_hooks.LoggingTensorHook.before_run(self,run_context)
tensorflow.training.basic_session_run_hooks.LoggingTensorHook.begin(self)
tensorflow.training.basic_session_run_hooks.NanLossDuringTrainingError(RuntimeError)
tensorflow.training.basic_session_run_hooks.NanLossDuringTrainingError.__str__(self)
tensorflow.training.basic_session_run_hooks.NanTensorHook(self,loss_tensor,fail_on_nan_loss=True)
tensorflow.training.basic_session_run_hooks.NanTensorHook.after_run(self,run_context,run_values)
tensorflow.training.basic_session_run_hooks.NanTensorHook.before_run(self,run_context)
tensorflow.training.basic_session_run_hooks.SecondOrStepTimer(self,every_secs=None,every_steps=None)
tensorflow.training.basic_session_run_hooks.SecondOrStepTimer.last_triggered_step(self)
tensorflow.training.basic_session_run_hooks.SecondOrStepTimer.should_trigger_for_step(self,step)
tensorflow.training.basic_session_run_hooks.SecondOrStepTimer.update_last_triggered_step(self,step)
tensorflow.training.basic_session_run_hooks.StepCounterHook(self,every_n_steps=100,every_n_secs=None,output_dir=None,summary_writer=None)
tensorflow.training.basic_session_run_hooks.StepCounterHook.after_run(self,run_context,run_values)
tensorflow.training.basic_session_run_hooks.StepCounterHook.before_run(self,run_context)
tensorflow.training.basic_session_run_hooks.StepCounterHook.begin(self)
tensorflow.training.basic_session_run_hooks.StopAtStepHook(self,num_steps=None,last_step=None)
tensorflow.training.basic_session_run_hooks.StopAtStepHook.after_run(self,run_context,run_values)
tensorflow.training.basic_session_run_hooks.StopAtStepHook.before_run(self,run_context)
tensorflow.training.basic_session_run_hooks.StopAtStepHook.begin(self)
tensorflow.training.basic_session_run_hooks.SummarySaverHook(self,save_steps=None,save_secs=None,output_dir=None,summary_writer=None,scaffold=None,summary_op=None)
tensorflow.training.basic_session_run_hooks.SummarySaverHook._get_summary_op(self)
tensorflow.training.basic_session_run_hooks.SummarySaverHook.after_run(self,run_context,run_values)
tensorflow.training.basic_session_run_hooks.SummarySaverHook.before_run(self,run_context)
tensorflow.training.basic_session_run_hooks.SummarySaverHook.begin(self)
tensorflow.training.basic_session_run_hooks.SummarySaverHook.end(self,session=None)
tensorflow.training.basic_session_run_hooks._as_graph_element(obj)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/tensorboard_logging.py----------------------------------------
A:tensorflow.python.training.tensorboard_logging._sentinel_summary_writer->object()
A:tensorflow.python.training.tensorboard_logging.log_message->tensorflow.core.util.event_pb2.LogMessage(level=proto_level, message=message % args)
A:tensorflow.python.training.tensorboard_logging.event->tensorflow.core.util.event_pb2.Event(wall_time=time.time(), log_message=log_message)
tensorflow.python.training.tensorboard_logging._check_verbosity(verbosity)
tensorflow.python.training.tensorboard_logging._clear_summary_writer()
tensorflow.python.training.tensorboard_logging.debug(message,*args)
tensorflow.python.training.tensorboard_logging.error(message,*args)
tensorflow.python.training.tensorboard_logging.fatal(message,*args)
tensorflow.python.training.tensorboard_logging.get_verbosity()
tensorflow.python.training.tensorboard_logging.info(message,*args)
tensorflow.python.training.tensorboard_logging.log(level,message,*args)
tensorflow.python.training.tensorboard_logging.set_summary_writer(summary_writer)
tensorflow.python.training.tensorboard_logging.set_verbosity(verbosity)
tensorflow.python.training.tensorboard_logging.warn(message,*args)
tensorflow.training.tensorboard_logging._check_verbosity(verbosity)
tensorflow.training.tensorboard_logging._clear_summary_writer()
tensorflow.training.tensorboard_logging.debug(message,*args)
tensorflow.training.tensorboard_logging.error(message,*args)
tensorflow.training.tensorboard_logging.fatal(message,*args)
tensorflow.training.tensorboard_logging.get_verbosity()
tensorflow.training.tensorboard_logging.info(message,*args)
tensorflow.training.tensorboard_logging.log(level,message,*args)
tensorflow.training.tensorboard_logging.set_summary_writer(summary_writer)
tensorflow.training.tensorboard_logging.set_verbosity(verbosity)
tensorflow.training.tensorboard_logging.warn(message,*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/gen_training_ops.py----------------------------------------
A:tensorflow.python.training.gen_training_ops.result->_InitOpDefLibrary().apply_op('SparseApplyRMSProp', var=var, ms=ms, mom=mom, lr=lr, rho=rho, momentum=momentum, epsilon=epsilon, grad=grad, indices=indices, use_locking=use_locking, name=name)
A:tensorflow.python.training.gen_training_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.python.training.gen_training_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.python.training.gen_training_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.python.training.gen_training_ops._InitOpDefLibrary()
tensorflow.python.training.gen_training_ops.apply_adadelta(var,accum,accum_update,lr,rho,epsilon,grad,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.apply_adagrad(var,accum,lr,grad,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.apply_adagrad_da(var,gradient_accumulator,gradient_squared_accumulator,grad,lr,l1,l2,global_step,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.apply_adam(var,m,v,beta1_power,beta2_power,lr,beta1,beta2,epsilon,grad,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.apply_centered_rms_prop(var,mg,ms,mom,lr,rho,momentum,epsilon,grad,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.apply_ftrl(var,accum,linear,grad,lr,l1,l2,lr_power,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.apply_gradient_descent(var,alpha,delta,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.apply_momentum(var,accum,lr,grad,momentum,use_locking=None,use_nesterov=None,name=None)
tensorflow.python.training.gen_training_ops.apply_proximal_adagrad(var,accum,lr,l1,l2,grad,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.apply_proximal_gradient_descent(var,alpha,l1,l2,delta,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.apply_rms_prop(var,ms,mom,lr,rho,momentum,epsilon,grad,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_apply_adadelta(var,accum,accum_update,lr,rho,epsilon,grad,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_apply_adagrad(var,accum,lr,grad,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_apply_adagrad_da(var,gradient_accumulator,gradient_squared_accumulator,grad,lr,l1,l2,global_step,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_apply_adam(var,m,v,beta1_power,beta2_power,lr,beta1,beta2,epsilon,grad,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_apply_centered_rms_prop(var,mg,ms,mom,lr,rho,momentum,epsilon,grad,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_apply_ftrl(var,accum,linear,grad,lr,l1,l2,lr_power,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_apply_gradient_descent(var,alpha,delta,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_apply_momentum(var,accum,lr,grad,momentum,use_locking=None,use_nesterov=None,name=None)
tensorflow.python.training.gen_training_ops.resource_apply_proximal_adagrad(var,accum,lr,l1,l2,grad,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_apply_proximal_gradient_descent(var,alpha,l1,l2,delta,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_apply_rms_prop(var,ms,mom,lr,rho,momentum,epsilon,grad,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_sparse_apply_adadelta(var,accum,accum_update,lr,rho,epsilon,grad,indices,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_sparse_apply_adagrad(var,accum,lr,grad,indices,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_sparse_apply_adagrad_da(var,gradient_accumulator,gradient_squared_accumulator,grad,indices,lr,l1,l2,global_step,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_sparse_apply_centered_rms_prop(var,mg,ms,mom,lr,rho,momentum,epsilon,grad,indices,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_sparse_apply_ftrl(var,accum,linear,grad,indices,lr,l1,l2,lr_power,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_sparse_apply_momentum(var,accum,lr,grad,indices,momentum,use_locking=None,use_nesterov=None,name=None)
tensorflow.python.training.gen_training_ops.resource_sparse_apply_proximal_adagrad(var,accum,lr,l1,l2,grad,indices,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_sparse_apply_proximal_gradient_descent(var,alpha,l1,l2,grad,indices,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.resource_sparse_apply_rms_prop(var,ms,mom,lr,rho,momentum,epsilon,grad,indices,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.sparse_apply_adadelta(var,accum,accum_update,lr,rho,epsilon,grad,indices,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.sparse_apply_adagrad(var,accum,lr,grad,indices,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.sparse_apply_adagrad_da(var,gradient_accumulator,gradient_squared_accumulator,grad,indices,lr,l1,l2,global_step,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.sparse_apply_centered_rms_prop(var,mg,ms,mom,lr,rho,momentum,epsilon,grad,indices,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.sparse_apply_ftrl(var,accum,linear,grad,indices,lr,l1,l2,lr_power,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.sparse_apply_momentum(var,accum,lr,grad,indices,momentum,use_locking=None,use_nesterov=None,name=None)
tensorflow.python.training.gen_training_ops.sparse_apply_proximal_adagrad(var,accum,lr,l1,l2,grad,indices,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.sparse_apply_proximal_gradient_descent(var,alpha,l1,l2,grad,indices,use_locking=None,name=None)
tensorflow.python.training.gen_training_ops.sparse_apply_rms_prop(var,ms,mom,lr,rho,momentum,epsilon,grad,indices,use_locking=None,name=None)
tensorflow.training.gen_training_ops._InitOpDefLibrary()
tensorflow.training.gen_training_ops.apply_adadelta(var,accum,accum_update,lr,rho,epsilon,grad,use_locking=None,name=None)
tensorflow.training.gen_training_ops.apply_adagrad(var,accum,lr,grad,use_locking=None,name=None)
tensorflow.training.gen_training_ops.apply_adagrad_da(var,gradient_accumulator,gradient_squared_accumulator,grad,lr,l1,l2,global_step,use_locking=None,name=None)
tensorflow.training.gen_training_ops.apply_adam(var,m,v,beta1_power,beta2_power,lr,beta1,beta2,epsilon,grad,use_locking=None,name=None)
tensorflow.training.gen_training_ops.apply_centered_rms_prop(var,mg,ms,mom,lr,rho,momentum,epsilon,grad,use_locking=None,name=None)
tensorflow.training.gen_training_ops.apply_ftrl(var,accum,linear,grad,lr,l1,l2,lr_power,use_locking=None,name=None)
tensorflow.training.gen_training_ops.apply_gradient_descent(var,alpha,delta,use_locking=None,name=None)
tensorflow.training.gen_training_ops.apply_momentum(var,accum,lr,grad,momentum,use_locking=None,use_nesterov=None,name=None)
tensorflow.training.gen_training_ops.apply_proximal_adagrad(var,accum,lr,l1,l2,grad,use_locking=None,name=None)
tensorflow.training.gen_training_ops.apply_proximal_gradient_descent(var,alpha,l1,l2,delta,use_locking=None,name=None)
tensorflow.training.gen_training_ops.apply_rms_prop(var,ms,mom,lr,rho,momentum,epsilon,grad,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_apply_adadelta(var,accum,accum_update,lr,rho,epsilon,grad,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_apply_adagrad(var,accum,lr,grad,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_apply_adagrad_da(var,gradient_accumulator,gradient_squared_accumulator,grad,lr,l1,l2,global_step,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_apply_adam(var,m,v,beta1_power,beta2_power,lr,beta1,beta2,epsilon,grad,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_apply_centered_rms_prop(var,mg,ms,mom,lr,rho,momentum,epsilon,grad,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_apply_ftrl(var,accum,linear,grad,lr,l1,l2,lr_power,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_apply_gradient_descent(var,alpha,delta,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_apply_momentum(var,accum,lr,grad,momentum,use_locking=None,use_nesterov=None,name=None)
tensorflow.training.gen_training_ops.resource_apply_proximal_adagrad(var,accum,lr,l1,l2,grad,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_apply_proximal_gradient_descent(var,alpha,l1,l2,delta,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_apply_rms_prop(var,ms,mom,lr,rho,momentum,epsilon,grad,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_sparse_apply_adadelta(var,accum,accum_update,lr,rho,epsilon,grad,indices,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_sparse_apply_adagrad(var,accum,lr,grad,indices,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_sparse_apply_adagrad_da(var,gradient_accumulator,gradient_squared_accumulator,grad,indices,lr,l1,l2,global_step,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_sparse_apply_centered_rms_prop(var,mg,ms,mom,lr,rho,momentum,epsilon,grad,indices,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_sparse_apply_ftrl(var,accum,linear,grad,indices,lr,l1,l2,lr_power,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_sparse_apply_momentum(var,accum,lr,grad,indices,momentum,use_locking=None,use_nesterov=None,name=None)
tensorflow.training.gen_training_ops.resource_sparse_apply_proximal_adagrad(var,accum,lr,l1,l2,grad,indices,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_sparse_apply_proximal_gradient_descent(var,alpha,l1,l2,grad,indices,use_locking=None,name=None)
tensorflow.training.gen_training_ops.resource_sparse_apply_rms_prop(var,ms,mom,lr,rho,momentum,epsilon,grad,indices,use_locking=None,name=None)
tensorflow.training.gen_training_ops.sparse_apply_adadelta(var,accum,accum_update,lr,rho,epsilon,grad,indices,use_locking=None,name=None)
tensorflow.training.gen_training_ops.sparse_apply_adagrad(var,accum,lr,grad,indices,use_locking=None,name=None)
tensorflow.training.gen_training_ops.sparse_apply_adagrad_da(var,gradient_accumulator,gradient_squared_accumulator,grad,indices,lr,l1,l2,global_step,use_locking=None,name=None)
tensorflow.training.gen_training_ops.sparse_apply_centered_rms_prop(var,mg,ms,mom,lr,rho,momentum,epsilon,grad,indices,use_locking=None,name=None)
tensorflow.training.gen_training_ops.sparse_apply_ftrl(var,accum,linear,grad,indices,lr,l1,l2,lr_power,use_locking=None,name=None)
tensorflow.training.gen_training_ops.sparse_apply_momentum(var,accum,lr,grad,indices,momentum,use_locking=None,use_nesterov=None,name=None)
tensorflow.training.gen_training_ops.sparse_apply_proximal_adagrad(var,accum,lr,l1,l2,grad,indices,use_locking=None,name=None)
tensorflow.training.gen_training_ops.sparse_apply_proximal_gradient_descent(var,alpha,l1,l2,grad,indices,use_locking=None,name=None)
tensorflow.training.gen_training_ops.sparse_apply_rms_prop(var,ms,mom,lr,rho,momentum,epsilon,grad,indices,use_locking=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/training_util.py----------------------------------------
A:tensorflow.python.training.training_util.global_step_tensors->graph.get_collection(ops.GraphKeys.GLOBAL_STEP)
A:tensorflow.python.training.training_util.global_step_tensor->create_global_step(graph)
tensorflow.python.training.training_util.assert_global_step(global_step_tensor)
tensorflow.python.training.training_util.create_global_step(graph=None)
tensorflow.python.training.training_util.get_global_step(graph=None)
tensorflow.python.training.training_util.get_or_create_global_step(graph=None)
tensorflow.python.training.training_util.global_step(sess,global_step_tensor)
tensorflow.train_util.assert_global_step(global_step_tensor)
tensorflow.train_util.create_global_step(graph=None)
tensorflow.train_util.get_global_step(graph=None)
tensorflow.train_util.get_or_create_global_step(graph=None)
tensorflow.train_util.global_step(sess,global_step_tensor)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/saver.py----------------------------------------
A:tensorflow.python.training.saver._VARIABLE_OPS->set(['Variable', 'VariableV2', 'AutoReloadVariable', 'VarHandleOp', 'ReadVariableOp'])
A:tensorflow.python.training.saver.parsed_device->tensorflow.python.framework.device.DeviceSpec.from_string(device_string)
A:tensorflow.python.training.saver.spec->BaseSaverBuilder.SaveSpec(var, slice_spec, name)
A:tensorflow.python.training.saver.restored_tensor->tensorflow.python.ops.array_ops.reshape(restored_tensor, restored_shapes[0])
A:tensorflow.python.training.saver.save->self.save_op(filename_tensor, saveables)
A:tensorflow.python.training.saver.tmp_checkpoint_prefix->tensorflow.python.ops.string_ops.string_join([checkpoint_prefix, _SHARDED_SUFFIX])
A:tensorflow.python.training.saver.num_shards->len(per_device)
A:tensorflow.python.training.saver.num_shards_tensor->tensorflow.python.framework.constant_op.constant(num_shards, name='num_shards')
A:tensorflow.python.training.saver.sharded_filename->self.sharded_filename(filename_tensor, shard, num_shards_tensor)
A:tensorflow.python.training.saver.merge_step->tensorflow.python.ops.gen_io_ops.merge_v2_checkpoints(sharded_prefixes, checkpoint_prefix, delete_old_dirs=True)
A:tensorflow.python.training.saver.tensors->self.restore_op(filename_tensor, saveable, preferred_shard)
A:tensorflow.python.training.saver.shape->tensorflow.python.ops.array_ops.shape(v)
A:tensorflow.python.training.saver.per_device->self._GroupByDevices(saveables)
A:tensorflow.python.training.saver.canonical_device->set((pydev.canonical_name(spec.tensor.device) for spec in saveable.specs))
A:tensorflow.python.training.saver.op_list->set(op_list)
A:tensorflow.python.training.saver.var->tensorflow.python.framework.ops.internal_convert_to_tensor(var, as_ref=True)
A:tensorflow.python.training.saver.names_to_saveables->BaseSaverBuilder.OpListToDict(names_to_saveables)
A:tensorflow.python.training.saver.seen_ops->set()
A:tensorflow.python.training.saver.op->list(op)
A:tensorflow.python.training.saver.saveable->BaseSaverBuilder.ResourceVariableSaveable(variable, '', name)
A:tensorflow.python.training.saver.variable->tensorflow.python.framework.ops.internal_convert_to_tensor(op, as_ref=True)
A:tensorflow.python.training.saver.saveables->self._ValidateAndSliceInputs(names_to_saveables)
A:tensorflow.python.training.saver.filename_tensor->tensorflow.python.framework.constant_op.constant(filename)
A:tensorflow.python.training.saver.save_tensor->self._AddSaveOps(filename_tensor, saveables)
A:tensorflow.python.training.saver.restore_op->self._AddRestoreOps(filename_tensor, saveables, restore_sequentially, reshape)
A:tensorflow.python.training.saver.model_checkpoint_path->tensorflow.python.util.compat.as_str(model_checkpoint_path)
A:tensorflow.python.training.saver.all_model_checkpoint_paths[i]->os.path.relpath(p, save_dir)
A:tensorflow.python.training.saver.coord_checkpoint_proto->CheckpointState(model_checkpoint_path=model_checkpoint_path, all_model_checkpoint_paths=all_model_checkpoint_paths)
A:tensorflow.python.training.saver.coord_checkpoint_filename->_GetCheckpointFilename(checkpoint_dir, latest_filename)
A:tensorflow.python.training.saver.ckpt->get_checkpoint_state(checkpoint_dir, latest_filename)
A:tensorflow.python.training.saver.file_content->tensorflow.python.lib.io.file_io.read_file_to_string(coord_checkpoint_filename)
A:tensorflow.python.training.saver.ckpt.model_checkpoint_path->os.path.join(checkpoint_dir, ckpt.model_checkpoint_path)
A:tensorflow.python.training.saver.ckpt.all_model_checkpoint_paths[i]->os.path.join(checkpoint_dir, p)
A:tensorflow.python.training.saver.self._builder->BaseSaverBuilder(self._write_version)
A:tensorflow.python.training.saver.self._var_list->tensorflow.python.ops.variables._all_saveable_objects()
A:tensorflow.python.training.saver.self.saver_def->self._builder.build(self._var_list, reshape=self._reshape, sharded=self._sharded, max_to_keep=self._max_to_keep, keep_checkpoint_every_n_hours=self._keep_checkpoint_every_n_hours, name=self._name, restore_sequentially=self._restore_sequentially)
A:tensorflow.python.training.saver.self.saver_def.filename_tensor_name->tensorflow.python.framework.ops.prepend_name_scope(self.saver_def.filename_tensor_name, self._name)
A:tensorflow.python.training.saver.self.saver_def.save_tensor_name->tensorflow.python.framework.ops.prepend_name_scope(self.saver_def.save_tensor_name, self._name)
A:tensorflow.python.training.saver.self.saver_def.restore_op_name->tensorflow.python.framework.ops.prepend_name_scope(self.saver_def.restore_op_name, self._name)
A:tensorflow.python.training.saver.basename->re.sub('-[\\d\\?]+-of-\\d+$', '', checkpoint_filename)
A:tensorflow.python.training.saver.meta_graph_filename->self._MetaGraphFilename(checkpoint_file, meta_graph_suffix=meta_graph_suffix)
A:tensorflow.python.training.saver.p->self._last_checkpoints.pop(0)
A:tensorflow.python.training.saver.checkpoint_prefix->self._CheckpointFilename(p)
A:tensorflow.python.training.saver.saver_def->tensorflow.core.protobuf.saver_pb2.SaverDef()
A:tensorflow.python.training.saver.saver_def.filename_tensor_name->tensorflow.python.framework.ops.strip_name_scope(saver_def.filename_tensor_name, export_scope)
A:tensorflow.python.training.saver.saver_def.save_tensor_name->tensorflow.python.framework.ops.strip_name_scope(saver_def.save_tensor_name, export_scope)
A:tensorflow.python.training.saver.saver_def.restore_op_name->tensorflow.python.framework.ops.strip_name_scope(saver_def.restore_op_name, export_scope)
A:tensorflow.python.training.saver.mtimes->get_checkpoint_mtimes(checkpoint_paths)
A:tensorflow.python.training.saver.global_step->tensorflow.python.training.training_util.global_step(sess, global_step)
A:tensorflow.python.training.saver.save_path->os.path.dirname(save_path)
A:tensorflow.python.training.saver.v2_path->_prefix_to_checkpoint_path(ckpt.model_checkpoint_path, saver_pb2.SaverDef.V2)
A:tensorflow.python.training.saver.v1_path->_prefix_to_checkpoint_path(ckpt.model_checkpoint_path, saver_pb2.SaverDef.V1)
A:tensorflow.python.training.saver.meta_graph_def->tensorflow.python.framework.meta_graph.read_meta_graph_file(meta_graph_or_file)
A:tensorflow.python.training.saver.(meta_graph_def, _)->tensorflow.python.framework.meta_graph.export_scoped_meta_graph(filename=filename, meta_info_def=meta_info_def, graph_def=graph_def, saver_def=saver_def, collection_list=collection_list, as_text=as_text, graph=graph, export_scope=export_scope, clear_devices=clear_devices, **kwargs)
A:tensorflow.python.training.saver.pathname->_prefix_to_checkpoint_path(checkpoint_prefix, saver_pb2.SaverDef.V2)
A:tensorflow.python.training.saver.fnames->tensorflow.python.lib.io.file_io.get_matching_files(pathname)
tensorflow.python.training.saver.BaseSaverBuilder(self,write_version=saver_pb2.SaverDef.V2)
tensorflow.python.training.saver.BaseSaverBuilder.OpListToDict(op_list)
tensorflow.python.training.saver.BaseSaverBuilder.ResourceVariableSaveable(self,var,slice_spec,name)
tensorflow.python.training.saver.BaseSaverBuilder.ResourceVariableSaveable.__init__(self,var,slice_spec,name)
tensorflow.python.training.saver.BaseSaverBuilder.ResourceVariableSaveable.restore(self,restored_tensors,restored_shapes)
tensorflow.python.training.saver.BaseSaverBuilder.SaveSpec(self,tensor,slice_spec,name)
tensorflow.python.training.saver.BaseSaverBuilder.SaveSpec.__init__(self,tensor,slice_spec,name)
tensorflow.python.training.saver.BaseSaverBuilder.SaveableObject(self,op,specs,name)
tensorflow.python.training.saver.BaseSaverBuilder.SaveableObject.__init__(self,op,specs,name)
tensorflow.python.training.saver.BaseSaverBuilder.SaveableObject.restore(self,restored_tensors,restored_shapes)
tensorflow.python.training.saver.BaseSaverBuilder.VariableSaveable(self,var,slice_spec,name)
tensorflow.python.training.saver.BaseSaverBuilder.VariableSaveable.__init__(self,var,slice_spec,name)
tensorflow.python.training.saver.BaseSaverBuilder.VariableSaveable.restore(self,restored_tensors,restored_shapes)
tensorflow.python.training.saver.BaseSaverBuilder._AddRestoreOps(self,filename_tensor,saveables,restore_sequentially,reshape,preferred_shard=-1,name='restore_all')
tensorflow.python.training.saver.BaseSaverBuilder._AddSaveOps(self,filename_tensor,saveables)
tensorflow.python.training.saver.BaseSaverBuilder._AddSaveable(self,saveables,seen_ops,saveable)
tensorflow.python.training.saver.BaseSaverBuilder._AddShardedRestoreOps(self,filename_tensor,per_device,restore_sequentially,reshape)
tensorflow.python.training.saver.BaseSaverBuilder._AddShardedSaveOps(self,filename_tensor,per_device)
tensorflow.python.training.saver.BaseSaverBuilder._AddShardedSaveOpsForV2(self,checkpoint_prefix,per_device)
tensorflow.python.training.saver.BaseSaverBuilder._GroupByDevices(self,saveables)
tensorflow.python.training.saver.BaseSaverBuilder._IsVariable(v)
tensorflow.python.training.saver.BaseSaverBuilder._ValidateAndSliceInputs(self,names_to_saveables)
tensorflow.python.training.saver.BaseSaverBuilder.__init__(self,write_version=saver_pb2.SaverDef.V2)
tensorflow.python.training.saver.BaseSaverBuilder.build(self,names_to_saveables,reshape=False,sharded=False,max_to_keep=5,keep_checkpoint_every_n_hours=10000.0,name=None,restore_sequentially=False,filename='model')
tensorflow.python.training.saver.BaseSaverBuilder.restore_op(self,filename_tensor,saveable,preferred_shard)
tensorflow.python.training.saver.BaseSaverBuilder.save_op(self,filename_tensor,saveables)
tensorflow.python.training.saver.BaseSaverBuilder.sharded_filename(self,filename_tensor,shard,num_shards)
tensorflow.python.training.saver.Saver(self,var_list=None,reshape=False,sharded=False,max_to_keep=5,keep_checkpoint_every_n_hours=10000.0,name=None,restore_sequentially=False,saver_def=None,builder=None,defer_build=False,allow_empty=False,write_version=saver_pb2.SaverDef.V2,pad_step_number=False)
tensorflow.python.training.saver.Saver._CheckpointFilename(self,p)
tensorflow.python.training.saver.Saver._MaybeDeleteOldCheckpoints(self,latest_save_path,meta_graph_suffix='meta')
tensorflow.python.training.saver.Saver._MetaGraphFilename(self,checkpoint_filename,meta_graph_suffix='meta')
tensorflow.python.training.saver.Saver.__init__(self,var_list=None,reshape=False,sharded=False,max_to_keep=5,keep_checkpoint_every_n_hours=10000.0,name=None,restore_sequentially=False,saver_def=None,builder=None,defer_build=False,allow_empty=False,write_version=saver_pb2.SaverDef.V2,pad_step_number=False)
tensorflow.python.training.saver.Saver._add_collection_def(meta_graph_def,key,export_scope=None)
tensorflow.python.training.saver.Saver._check_saver_def(self)
tensorflow.python.training.saver.Saver._delete_file_if_exists(self,filespec)
tensorflow.python.training.saver.Saver.as_saver_def(self)
tensorflow.python.training.saver.Saver.build(self)
tensorflow.python.training.saver.Saver.export_meta_graph(self,filename=None,collection_list=None,as_text=False,export_scope=None,clear_devices=False)
tensorflow.python.training.saver.Saver.from_proto(saver_def,import_scope=None)
tensorflow.python.training.saver.Saver.last_checkpoints(self)
tensorflow.python.training.saver.Saver.recover_last_checkpoints(self,checkpoint_paths)
tensorflow.python.training.saver.Saver.restore(self,sess,save_path)
tensorflow.python.training.saver.Saver.save(self,sess,save_path,global_step=None,latest_filename=None,meta_graph_suffix='meta',write_meta_graph=True,write_state=True)
tensorflow.python.training.saver.Saver.set_last_checkpoints(self,last_checkpoints)
tensorflow.python.training.saver.Saver.set_last_checkpoints_with_time(self,last_checkpoints_with_time)
tensorflow.python.training.saver.Saver.to_proto(self,export_scope=None)
tensorflow.python.training.saver._GetCheckpointFilename(save_dir,latest_filename)
tensorflow.python.training.saver._prefix_to_checkpoint_path(prefix,format_version)
tensorflow.python.training.saver._set_cpu0(device_string)
tensorflow.python.training.saver.checkpoint_exists(checkpoint_prefix)
tensorflow.python.training.saver.export_meta_graph(filename=None,meta_info_def=None,graph_def=None,saver_def=None,collection_list=None,as_text=False,graph=None,export_scope=None,clear_devices=False,**kwargs)
tensorflow.python.training.saver.generate_checkpoint_state_proto(save_dir,model_checkpoint_path,all_model_checkpoint_paths=None)
tensorflow.python.training.saver.get_checkpoint_mtimes(checkpoint_prefixes)
tensorflow.python.training.saver.get_checkpoint_state(checkpoint_dir,latest_filename=None)
tensorflow.python.training.saver.import_meta_graph(meta_graph_or_file,clear_devices=False,import_scope=None,**kwargs)
tensorflow.python.training.saver.latest_checkpoint(checkpoint_dir,latest_filename=None)
tensorflow.python.training.saver.update_checkpoint_state(save_dir,model_checkpoint_path,all_model_checkpoint_paths=None,latest_filename=None)
tensorflow.training.saver.BaseSaverBuilder(self,write_version=saver_pb2.SaverDef.V2)
tensorflow.training.saver.BaseSaverBuilder.OpListToDict(op_list)
tensorflow.training.saver.BaseSaverBuilder.ResourceVariableSaveable(self,var,slice_spec,name)
tensorflow.training.saver.BaseSaverBuilder.ResourceVariableSaveable.restore(self,restored_tensors,restored_shapes)
tensorflow.training.saver.BaseSaverBuilder.SaveSpec(self,tensor,slice_spec,name)
tensorflow.training.saver.BaseSaverBuilder.SaveableObject(self,op,specs,name)
tensorflow.training.saver.BaseSaverBuilder.SaveableObject.restore(self,restored_tensors,restored_shapes)
tensorflow.training.saver.BaseSaverBuilder.VariableSaveable(self,var,slice_spec,name)
tensorflow.training.saver.BaseSaverBuilder.VariableSaveable.restore(self,restored_tensors,restored_shapes)
tensorflow.training.saver.BaseSaverBuilder._AddRestoreOps(self,filename_tensor,saveables,restore_sequentially,reshape,preferred_shard=-1,name='restore_all')
tensorflow.training.saver.BaseSaverBuilder._AddSaveOps(self,filename_tensor,saveables)
tensorflow.training.saver.BaseSaverBuilder._AddSaveable(self,saveables,seen_ops,saveable)
tensorflow.training.saver.BaseSaverBuilder._AddShardedRestoreOps(self,filename_tensor,per_device,restore_sequentially,reshape)
tensorflow.training.saver.BaseSaverBuilder._AddShardedSaveOps(self,filename_tensor,per_device)
tensorflow.training.saver.BaseSaverBuilder._AddShardedSaveOpsForV2(self,checkpoint_prefix,per_device)
tensorflow.training.saver.BaseSaverBuilder._GroupByDevices(self,saveables)
tensorflow.training.saver.BaseSaverBuilder._IsVariable(v)
tensorflow.training.saver.BaseSaverBuilder._ValidateAndSliceInputs(self,names_to_saveables)
tensorflow.training.saver.BaseSaverBuilder.build(self,names_to_saveables,reshape=False,sharded=False,max_to_keep=5,keep_checkpoint_every_n_hours=10000.0,name=None,restore_sequentially=False,filename='model')
tensorflow.training.saver.BaseSaverBuilder.restore_op(self,filename_tensor,saveable,preferred_shard)
tensorflow.training.saver.BaseSaverBuilder.save_op(self,filename_tensor,saveables)
tensorflow.training.saver.BaseSaverBuilder.sharded_filename(self,filename_tensor,shard,num_shards)
tensorflow.training.saver.Saver(self,var_list=None,reshape=False,sharded=False,max_to_keep=5,keep_checkpoint_every_n_hours=10000.0,name=None,restore_sequentially=False,saver_def=None,builder=None,defer_build=False,allow_empty=False,write_version=saver_pb2.SaverDef.V2,pad_step_number=False)
tensorflow.training.saver.Saver._CheckpointFilename(self,p)
tensorflow.training.saver.Saver._MaybeDeleteOldCheckpoints(self,latest_save_path,meta_graph_suffix='meta')
tensorflow.training.saver.Saver._MetaGraphFilename(self,checkpoint_filename,meta_graph_suffix='meta')
tensorflow.training.saver.Saver._add_collection_def(meta_graph_def,key,export_scope=None)
tensorflow.training.saver.Saver._check_saver_def(self)
tensorflow.training.saver.Saver._delete_file_if_exists(self,filespec)
tensorflow.training.saver.Saver.as_saver_def(self)
tensorflow.training.saver.Saver.build(self)
tensorflow.training.saver.Saver.export_meta_graph(self,filename=None,collection_list=None,as_text=False,export_scope=None,clear_devices=False)
tensorflow.training.saver.Saver.from_proto(saver_def,import_scope=None)
tensorflow.training.saver.Saver.last_checkpoints(self)
tensorflow.training.saver.Saver.recover_last_checkpoints(self,checkpoint_paths)
tensorflow.training.saver.Saver.restore(self,sess,save_path)
tensorflow.training.saver.Saver.save(self,sess,save_path,global_step=None,latest_filename=None,meta_graph_suffix='meta',write_meta_graph=True,write_state=True)
tensorflow.training.saver.Saver.set_last_checkpoints(self,last_checkpoints)
tensorflow.training.saver.Saver.set_last_checkpoints_with_time(self,last_checkpoints_with_time)
tensorflow.training.saver.Saver.to_proto(self,export_scope=None)
tensorflow.training.saver._GetCheckpointFilename(save_dir,latest_filename)
tensorflow.training.saver._prefix_to_checkpoint_path(prefix,format_version)
tensorflow.training.saver._set_cpu0(device_string)
tensorflow.training.saver.checkpoint_exists(checkpoint_prefix)
tensorflow.training.saver.export_meta_graph(filename=None,meta_info_def=None,graph_def=None,saver_def=None,collection_list=None,as_text=False,graph=None,export_scope=None,clear_devices=False,**kwargs)
tensorflow.training.saver.generate_checkpoint_state_proto(save_dir,model_checkpoint_path,all_model_checkpoint_paths=None)
tensorflow.training.saver.get_checkpoint_mtimes(checkpoint_prefixes)
tensorflow.training.saver.get_checkpoint_state(checkpoint_dir,latest_filename=None)
tensorflow.training.saver.import_meta_graph(meta_graph_or_file,clear_devices=False,import_scope=None,**kwargs)
tensorflow.training.saver.latest_checkpoint(checkpoint_dir,latest_filename=None)
tensorflow.training.saver.update_checkpoint_state(save_dir,model_checkpoint_path,all_model_checkpoint_paths=None,latest_filename=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/coordinator.py----------------------------------------
A:tensorflow.python.training.coordinator.self._clean_stop_exception_types->tuple(clean_stop_exception_types)
A:tensorflow.python.training.coordinator.self._lock->threading.Lock()
A:tensorflow.python.training.coordinator.self._stop_event->threading.Event()
A:tensorflow.python.training.coordinator.self._registered_threads->set()
A:tensorflow.python.training.coordinator.ex->self._filter_exception(ex)
A:tensorflow.python.training.coordinator.self._exc_info_to_raise->sys.exc_info()
A:tensorflow.python.training.coordinator.threads->list(threads)
A:tensorflow.python.training.coordinator.stop_wait_secs->max(min(stop_wait_secs, stop_grace_period_secs), 0.001)
A:tensorflow.python.training.coordinator.looper->LooperThread(coord, timer_interval_secs, target=target, args=args, kwargs=kwargs)
A:tensorflow.python.training.coordinator.next_timer_time->time.time()
tensorflow.python.training.coordinator.Coordinator(self,clean_stop_exception_types=None)
tensorflow.python.training.coordinator.Coordinator.__init__(self,clean_stop_exception_types=None)
tensorflow.python.training.coordinator.Coordinator._filter_exception(self,ex)
tensorflow.python.training.coordinator.Coordinator.clear_stop(self)
tensorflow.python.training.coordinator.Coordinator.join(self,threads=None,stop_grace_period_secs=120,ignore_live_threads=False)
tensorflow.python.training.coordinator.Coordinator.joined(self)
tensorflow.python.training.coordinator.Coordinator.raise_requested_exception(self)
tensorflow.python.training.coordinator.Coordinator.register_thread(self,thread)
tensorflow.python.training.coordinator.Coordinator.request_stop(self,ex=None)
tensorflow.python.training.coordinator.Coordinator.should_stop(self)
tensorflow.python.training.coordinator.Coordinator.stop_on_exception(self)
tensorflow.python.training.coordinator.Coordinator.wait_for_stop(self,timeout=None)
tensorflow.python.training.coordinator.LooperThread(self,coord,timer_interval_secs,target=None,args=None,kwargs=None)
tensorflow.python.training.coordinator.LooperThread.__init__(self,coord,timer_interval_secs,target=None,args=None,kwargs=None)
tensorflow.python.training.coordinator.LooperThread.loop(coord,timer_interval_secs,target,args=None,kwargs=None)
tensorflow.python.training.coordinator.LooperThread.run(self)
tensorflow.python.training.coordinator.LooperThread.run_loop(self)
tensorflow.python.training.coordinator.LooperThread.start_loop(self)
tensorflow.python.training.coordinator.LooperThread.stop_loop(self)
tensorflow.training.coordinator.Coordinator(self,clean_stop_exception_types=None)
tensorflow.training.coordinator.Coordinator._filter_exception(self,ex)
tensorflow.training.coordinator.Coordinator.clear_stop(self)
tensorflow.training.coordinator.Coordinator.join(self,threads=None,stop_grace_period_secs=120,ignore_live_threads=False)
tensorflow.training.coordinator.Coordinator.joined(self)
tensorflow.training.coordinator.Coordinator.raise_requested_exception(self)
tensorflow.training.coordinator.Coordinator.register_thread(self,thread)
tensorflow.training.coordinator.Coordinator.request_stop(self,ex=None)
tensorflow.training.coordinator.Coordinator.should_stop(self)
tensorflow.training.coordinator.Coordinator.stop_on_exception(self)
tensorflow.training.coordinator.Coordinator.wait_for_stop(self,timeout=None)
tensorflow.training.coordinator.LooperThread(self,coord,timer_interval_secs,target=None,args=None,kwargs=None)
tensorflow.training.coordinator.LooperThread.loop(coord,timer_interval_secs,target,args=None,kwargs=None)
tensorflow.training.coordinator.LooperThread.run(self)
tensorflow.training.coordinator.LooperThread.run_loop(self)
tensorflow.training.coordinator.LooperThread.start_loop(self)
tensorflow.training.coordinator.LooperThread.stop_loop(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/training_ops.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/slot_creator.py----------------------------------------
A:tensorflow.python.training.slot_creator.slot->tensorflow.python.ops.variable_scope.get_variable(scope, initializer=val, trainable=False, use_resource=_is_resource(primary), shape=shape, dtype=dtype, validate_shape=validate_shape)
A:tensorflow.python.training.slot_creator.validate_shape->shape.is_fully_defined()
A:tensorflow.python.training.slot_creator.slot_shape->primary.get_shape()
A:tensorflow.python.training.slot_creator.initializer->tensorflow.python.ops.init_ops.zeros_initializer(dtype)
A:tensorflow.python.training.slot_creator.val->tensorflow.python.ops.array_ops.zeros(slot_shape, dtype=dtype)
tensorflow.python.training.slot_creator._create_slot_var(primary,val,scope,validate_shape,shape,dtype)
tensorflow.python.training.slot_creator._is_resource(v)
tensorflow.python.training.slot_creator.create_slot(primary,val,name,colocate_with_primary=True)
tensorflow.python.training.slot_creator.create_slot_with_initializer(primary,initializer,shape,dtype,name,colocate_with_primary=True)
tensorflow.python.training.slot_creator.create_zeros_slot(primary,name,dtype=None,colocate_with_primary=True)
tensorflow.training.slot_creator._create_slot_var(primary,val,scope,validate_shape,shape,dtype)
tensorflow.training.slot_creator._is_resource(v)
tensorflow.training.slot_creator.create_slot(primary,val,name,colocate_with_primary=True)
tensorflow.training.slot_creator.create_slot_with_initializer(primary,initializer,shape,dtype,name,colocate_with_primary=True)
tensorflow.training.slot_creator.create_zeros_slot(primary,name,dtype=None,colocate_with_primary=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/server_lib.py----------------------------------------
A:tensorflow.python.training.server_lib.server_def->tensorflow.core.protobuf.tensorflow_server_pb2.ServerDef(cluster=cluster_spec.as_cluster_def(), job_name=job_name, task_index=task_index, protocol=protocol)
A:tensorflow.python.training.server_lib.cluster_spec->ClusterSpec(server_or_cluster_def)
A:tensorflow.python.training.server_lib.task_indices->self.task_indices(job)
A:tensorflow.python.training.server_lib.self._server_def->_make_server_def(server_or_cluster_def, job_name, task_index, protocol, config)
A:tensorflow.python.training.server_lib.self._server->tensorflow.python.pywrap_tensorflow.PyServer_New(self._server_def.SerializeToString(), status)
A:tensorflow.python.training.server_lib.self._cluster_def->tensorflow.core.protobuf.tensorflow_server_pb2.ClusterDef()
A:tensorflow.python.training.server_lib.ret[job]->self.job_tasks(job)
A:tensorflow.python.training.server_lib.job_name->tensorflow.python.util.compat.as_bytes(job_name)
A:tensorflow.python.training.server_lib.job_def->self._cluster_def.job.add()
A:tensorflow.python.training.server_lib.task_address->tensorflow.python.util.compat.as_bytes(task_address)
tensorflow.python.training.server_lib.ClusterSpec(self,cluster)
tensorflow.python.training.server_lib.ClusterSpec.__eq__(self,other)
tensorflow.python.training.server_lib.ClusterSpec.__init__(self,cluster)
tensorflow.python.training.server_lib.ClusterSpec.__ne__(self,other)
tensorflow.python.training.server_lib.ClusterSpec.__nonzero__(self)
tensorflow.python.training.server_lib.ClusterSpec._make_cluster_def(self)
tensorflow.python.training.server_lib.ClusterSpec.as_cluster_def(self)
tensorflow.python.training.server_lib.ClusterSpec.as_dict(self)
tensorflow.python.training.server_lib.ClusterSpec.job_tasks(self,job_name)
tensorflow.python.training.server_lib.ClusterSpec.jobs(self)
tensorflow.python.training.server_lib.ClusterSpec.num_tasks(self,job_name)
tensorflow.python.training.server_lib.ClusterSpec.task_address(self,job_name,task_index)
tensorflow.python.training.server_lib.ClusterSpec.task_indices(self,job_name)
tensorflow.python.training.server_lib.Server(self,server_or_cluster_def,job_name=None,task_index=None,protocol=None,config=None,start=True)
tensorflow.python.training.server_lib.Server.__init__(self,server_or_cluster_def,job_name=None,task_index=None,protocol=None,config=None,start=True)
tensorflow.python.training.server_lib.Server.create_local_server(config=None,start=True)
tensorflow.python.training.server_lib.Server.join(self)
tensorflow.python.training.server_lib.Server.server_def(self)
tensorflow.python.training.server_lib.Server.start(self)
tensorflow.python.training.server_lib.Server.target(self)
tensorflow.python.training.server_lib._make_server_def(server_or_cluster_def,job_name,task_index,protocol,config)
tensorflow.training.server_lib.ClusterSpec(self,cluster)
tensorflow.training.server_lib.ClusterSpec.__eq__(self,other)
tensorflow.training.server_lib.ClusterSpec.__ne__(self,other)
tensorflow.training.server_lib.ClusterSpec.__nonzero__(self)
tensorflow.training.server_lib.ClusterSpec._make_cluster_def(self)
tensorflow.training.server_lib.ClusterSpec.as_cluster_def(self)
tensorflow.training.server_lib.ClusterSpec.as_dict(self)
tensorflow.training.server_lib.ClusterSpec.job_tasks(self,job_name)
tensorflow.training.server_lib.ClusterSpec.jobs(self)
tensorflow.training.server_lib.ClusterSpec.num_tasks(self,job_name)
tensorflow.training.server_lib.ClusterSpec.task_address(self,job_name,task_index)
tensorflow.training.server_lib.ClusterSpec.task_indices(self,job_name)
tensorflow.training.server_lib.Server(self,server_or_cluster_def,job_name=None,task_index=None,protocol=None,config=None,start=True)
tensorflow.training.server_lib.Server.create_local_server(config=None,start=True)
tensorflow.training.server_lib.Server.join(self)
tensorflow.training.server_lib.Server.server_def(self)
tensorflow.training.server_lib.Server.start(self)
tensorflow.training.server_lib.Server.target(self)
tensorflow.training.server_lib._make_server_def(server_or_cluster_def,job_name,task_index,protocol,config)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/momentum.py----------------------------------------
A:tensorflow.python.training.momentum.self._learning_rate_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._learning_rate, name='learning_rate')
A:tensorflow.python.training.momentum.self._momentum_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._momentum, name='momentum')
A:tensorflow.python.training.momentum.mom->self.get_slot(var, 'momentum')
tensorflow.python.training.momentum.MomentumOptimizer(self,learning_rate,momentum,use_locking=False,name='Momentum',use_nesterov=False)
tensorflow.python.training.momentum.MomentumOptimizer.__init__(self,learning_rate,momentum,use_locking=False,name='Momentum',use_nesterov=False)
tensorflow.python.training.momentum.MomentumOptimizer._apply_dense(self,grad,var)
tensorflow.python.training.momentum.MomentumOptimizer._apply_sparse(self,grad,var)
tensorflow.python.training.momentum.MomentumOptimizer._create_slots(self,var_list)
tensorflow.python.training.momentum.MomentumOptimizer._prepare(self)
tensorflow.python.training.momentum.MomentumOptimizer._resource_apply_dense(self,grad,var)
tensorflow.python.training.momentum.MomentumOptimizer._resource_apply_sparse(self,grad,var,indices)
tensorflow.training.momentum.MomentumOptimizer(self,learning_rate,momentum,use_locking=False,name='Momentum',use_nesterov=False)
tensorflow.training.momentum.MomentumOptimizer._apply_dense(self,grad,var)
tensorflow.training.momentum.MomentumOptimizer._apply_sparse(self,grad,var)
tensorflow.training.momentum.MomentumOptimizer._create_slots(self,var_list)
tensorflow.training.momentum.MomentumOptimizer._prepare(self)
tensorflow.training.momentum.MomentumOptimizer._resource_apply_dense(self,grad,var)
tensorflow.training.momentum.MomentumOptimizer._resource_apply_sparse(self,grad,var,indices)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/proximal_adagrad.py----------------------------------------
A:tensorflow.python.training.proximal_adagrad.val->tensorflow.python.framework.constant_op.constant(self._initial_accumulator_value, shape=v.get_shape(), dtype=v.dtype.base_dtype)
A:tensorflow.python.training.proximal_adagrad.self._learning_rate_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._learning_rate, name='learning_rate')
A:tensorflow.python.training.proximal_adagrad.self._l1_regularization_strength_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._l1_regularization_strength, name='l1_regularization_strength')
A:tensorflow.python.training.proximal_adagrad.self._l2_regularization_strength_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._l2_regularization_strength, name='l2_regularization_strength')
A:tensorflow.python.training.proximal_adagrad.acc->self.get_slot(var, 'accumulator')
tensorflow.python.training.proximal_adagrad.ProximalAdagradOptimizer(self,learning_rate,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='ProximalAdagrad')
tensorflow.python.training.proximal_adagrad.ProximalAdagradOptimizer.__init__(self,learning_rate,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='ProximalAdagrad')
tensorflow.python.training.proximal_adagrad.ProximalAdagradOptimizer._apply_dense(self,grad,var)
tensorflow.python.training.proximal_adagrad.ProximalAdagradOptimizer._apply_sparse(self,grad,var)
tensorflow.python.training.proximal_adagrad.ProximalAdagradOptimizer._create_slots(self,var_list)
tensorflow.python.training.proximal_adagrad.ProximalAdagradOptimizer._prepare(self)
tensorflow.python.training.proximal_adagrad.ProximalAdagradOptimizer._resource_apply_dense(self,grad,var)
tensorflow.python.training.proximal_adagrad.ProximalAdagradOptimizer._resource_apply_sparse(self,grad,var,indices)
tensorflow.training.proximal_adagrad.ProximalAdagradOptimizer(self,learning_rate,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='ProximalAdagrad')
tensorflow.training.proximal_adagrad.ProximalAdagradOptimizer._apply_dense(self,grad,var)
tensorflow.training.proximal_adagrad.ProximalAdagradOptimizer._apply_sparse(self,grad,var)
tensorflow.training.proximal_adagrad.ProximalAdagradOptimizer._create_slots(self,var_list)
tensorflow.training.proximal_adagrad.ProximalAdagradOptimizer._prepare(self)
tensorflow.training.proximal_adagrad.ProximalAdagradOptimizer._resource_apply_dense(self,grad,var)
tensorflow.training.proximal_adagrad.ProximalAdagradOptimizer._resource_apply_sparse(self,grad,var,indices)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/rmsprop.py----------------------------------------
A:tensorflow.python.training.rmsprop.val_rms->tensorflow.python.framework.constant_op.constant(1.0, dtype=v.dtype, shape=v.get_shape())
A:tensorflow.python.training.rmsprop.val_mg->tensorflow.python.framework.constant_op.constant(0.0, dtype=v.dtype, shape=v.get_shape())
A:tensorflow.python.training.rmsprop.self._learning_rate_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._learning_rate, name='learning_rate')
A:tensorflow.python.training.rmsprop.self._decay_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._decay, name='decay')
A:tensorflow.python.training.rmsprop.self._momentum_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._momentum, name='momentum')
A:tensorflow.python.training.rmsprop.self._epsilon_tensor->tensorflow.python.framework.ops.convert_to_tensor(self._epsilon, name='epsilon')
A:tensorflow.python.training.rmsprop.rms->self.get_slot(var, 'rms')
A:tensorflow.python.training.rmsprop.mom->self.get_slot(var, 'momentum')
A:tensorflow.python.training.rmsprop.mg->self.get_slot(var, 'mg')
tensorflow.python.training.rmsprop.RMSPropOptimizer(self,learning_rate,decay=0.9,momentum=0.0,epsilon=1e-10,use_locking=False,centered=False,name='RMSProp')
tensorflow.python.training.rmsprop.RMSPropOptimizer.__init__(self,learning_rate,decay=0.9,momentum=0.0,epsilon=1e-10,use_locking=False,centered=False,name='RMSProp')
tensorflow.python.training.rmsprop.RMSPropOptimizer._apply_dense(self,grad,var)
tensorflow.python.training.rmsprop.RMSPropOptimizer._apply_sparse(self,grad,var)
tensorflow.python.training.rmsprop.RMSPropOptimizer._create_slots(self,var_list)
tensorflow.python.training.rmsprop.RMSPropOptimizer._prepare(self)
tensorflow.python.training.rmsprop.RMSPropOptimizer._resource_apply_dense(self,grad,var)
tensorflow.python.training.rmsprop.RMSPropOptimizer._resource_apply_sparse(self,grad,var,indices)
tensorflow.training.rmsprop.RMSPropOptimizer(self,learning_rate,decay=0.9,momentum=0.0,epsilon=1e-10,use_locking=False,centered=False,name='RMSProp')
tensorflow.training.rmsprop.RMSPropOptimizer._apply_dense(self,grad,var)
tensorflow.training.rmsprop.RMSPropOptimizer._apply_sparse(self,grad,var)
tensorflow.training.rmsprop.RMSPropOptimizer._create_slots(self,var_list)
tensorflow.training.rmsprop.RMSPropOptimizer._prepare(self)
tensorflow.training.rmsprop.RMSPropOptimizer._resource_apply_dense(self,grad,var)
tensorflow.training.rmsprop.RMSPropOptimizer._resource_apply_sparse(self,grad,var,indices)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/session_run_hook.py----------------------------------------
tensorflow.python.training.session_run_hook.SessionRunArgs(cls,fetches,feed_dict=None,options=None)
tensorflow.python.training.session_run_hook.SessionRunArgs.__new__(cls,fetches,feed_dict=None,options=None)
tensorflow.python.training.session_run_hook.SessionRunContext(self,original_args,session)
tensorflow.python.training.session_run_hook.SessionRunContext.__init__(self,original_args,session)
tensorflow.python.training.session_run_hook.SessionRunContext.original_args(self)
tensorflow.python.training.session_run_hook.SessionRunContext.request_stop(self)
tensorflow.python.training.session_run_hook.SessionRunContext.session(self)
tensorflow.python.training.session_run_hook.SessionRunContext.stop_requested(self)
tensorflow.python.training.session_run_hook.SessionRunHook(object)
tensorflow.python.training.session_run_hook.SessionRunHook.after_create_session(self,session,coord)
tensorflow.python.training.session_run_hook.SessionRunHook.after_run(self,run_context,run_values)
tensorflow.python.training.session_run_hook.SessionRunHook.before_run(self,run_context)
tensorflow.python.training.session_run_hook.SessionRunHook.begin(self)
tensorflow.python.training.session_run_hook.SessionRunHook.end(self,session)
tensorflow.python.training.session_run_hook.SessionRunValues(collections.namedtuple('SessionRunValues',['results','options','run_metadata']))
tensorflow.training.session_run_hook.SessionRunArgs(cls,fetches,feed_dict=None,options=None)
tensorflow.training.session_run_hook.SessionRunContext(self,original_args,session)
tensorflow.training.session_run_hook.SessionRunContext.original_args(self)
tensorflow.training.session_run_hook.SessionRunContext.request_stop(self)
tensorflow.training.session_run_hook.SessionRunContext.session(self)
tensorflow.training.session_run_hook.SessionRunContext.stop_requested(self)
tensorflow.training.session_run_hook.SessionRunHook(object)
tensorflow.training.session_run_hook.SessionRunHook.after_create_session(self,session,coord)
tensorflow.training.session_run_hook.SessionRunHook.after_run(self,run_context,run_values)
tensorflow.training.session_run_hook.SessionRunHook.before_run(self,run_context)
tensorflow.training.session_run_hook.SessionRunHook.begin(self)
tensorflow.training.session_run_hook.SessionRunHook.end(self,session)
tensorflow.training.session_run_hook.SessionRunValues(collections.namedtuple('SessionRunValues',['results','options','run_metadata']))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/adadelta.py----------------------------------------
A:tensorflow.python.training.adadelta.self._lr_t->tensorflow.python.framework.ops.convert_to_tensor(self._lr, name='lr')
A:tensorflow.python.training.adadelta.self._rho_t->tensorflow.python.framework.ops.convert_to_tensor(self._rho, name='rho')
A:tensorflow.python.training.adadelta.self._epsilon_t->tensorflow.python.framework.ops.convert_to_tensor(self._epsilon, name='epsilon')
A:tensorflow.python.training.adadelta.accum->self.get_slot(var, 'accum')
A:tensorflow.python.training.adadelta.accum_update->self.get_slot(var, 'accum_update')
tensorflow.python.training.adadelta.AdadeltaOptimizer(self,learning_rate=0.001,rho=0.95,epsilon=1e-08,use_locking=False,name='Adadelta')
tensorflow.python.training.adadelta.AdadeltaOptimizer.__init__(self,learning_rate=0.001,rho=0.95,epsilon=1e-08,use_locking=False,name='Adadelta')
tensorflow.python.training.adadelta.AdadeltaOptimizer._apply_dense(self,grad,var)
tensorflow.python.training.adadelta.AdadeltaOptimizer._apply_sparse(self,grad,var)
tensorflow.python.training.adadelta.AdadeltaOptimizer._create_slots(self,var_list)
tensorflow.python.training.adadelta.AdadeltaOptimizer._prepare(self)
tensorflow.python.training.adadelta.AdadeltaOptimizer._resource_apply_dense(self,grad,var)
tensorflow.python.training.adadelta.AdadeltaOptimizer._resource_apply_sparse(self,grad,var,indices)
tensorflow.training.adadelta.AdadeltaOptimizer(self,learning_rate=0.001,rho=0.95,epsilon=1e-08,use_locking=False,name='Adadelta')
tensorflow.training.adadelta.AdadeltaOptimizer._apply_dense(self,grad,var)
tensorflow.training.adadelta.AdadeltaOptimizer._apply_sparse(self,grad,var)
tensorflow.training.adadelta.AdadeltaOptimizer._create_slots(self,var_list)
tensorflow.training.adadelta.AdadeltaOptimizer._prepare(self)
tensorflow.training.adadelta.AdadeltaOptimizer._resource_apply_dense(self,grad,var)
tensorflow.training.adadelta.AdadeltaOptimizer._resource_apply_sparse(self,grad,var,indices)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/training/adam.py----------------------------------------
A:tensorflow.python.training.adam.self._beta1_power->tensorflow.python.ops.variables.Variable(self._beta1, name='beta1_power', trainable=False)
A:tensorflow.python.training.adam.self._beta2_power->tensorflow.python.ops.variables.Variable(self._beta2, name='beta2_power', trainable=False)
A:tensorflow.python.training.adam.self._lr_t->tensorflow.python.framework.ops.convert_to_tensor(self._lr, name='learning_rate')
A:tensorflow.python.training.adam.self._beta1_t->tensorflow.python.framework.ops.convert_to_tensor(self._beta1, name='beta1')
A:tensorflow.python.training.adam.self._beta2_t->tensorflow.python.framework.ops.convert_to_tensor(self._beta2, name='beta2')
A:tensorflow.python.training.adam.self._epsilon_t->tensorflow.python.framework.ops.convert_to_tensor(self._epsilon, name='epsilon')
A:tensorflow.python.training.adam.m->self.get_slot(var, 'm')
A:tensorflow.python.training.adam.v->self.get_slot(var, 'v')
A:tensorflow.python.training.adam.beta1_power->tensorflow.python.ops.math_ops.cast(self._beta1_power, var.dtype.base_dtype)
A:tensorflow.python.training.adam.beta2_power->tensorflow.python.ops.math_ops.cast(self._beta2_power, var.dtype.base_dtype)
A:tensorflow.python.training.adam.lr_t->tensorflow.python.ops.math_ops.cast(self._lr_t, var.dtype.base_dtype)
A:tensorflow.python.training.adam.beta1_t->tensorflow.python.ops.math_ops.cast(self._beta1_t, var.dtype.base_dtype)
A:tensorflow.python.training.adam.beta2_t->tensorflow.python.ops.math_ops.cast(self._beta2_t, var.dtype.base_dtype)
A:tensorflow.python.training.adam.epsilon_t->tensorflow.python.ops.math_ops.cast(self._epsilon_t, var.dtype.base_dtype)
A:tensorflow.python.training.adam.m_t->tensorflow.python.ops.state_ops.scatter_add(m_t, grad.indices, m_scaled_g_values, use_locking=self._use_locking)
A:tensorflow.python.training.adam.v_t->tensorflow.python.ops.state_ops.scatter_add(v_t, grad.indices, v_scaled_g_values, use_locking=self._use_locking)
A:tensorflow.python.training.adam.v_sqrt->tensorflow.python.ops.math_ops.sqrt(v_t)
A:tensorflow.python.training.adam.var_update->tensorflow.python.ops.state_ops.assign_sub(var, lr * m_t / (v_sqrt + epsilon_t), use_locking=self._use_locking)
A:tensorflow.python.training.adam.update_beta1->self._beta1_power.assign(self._beta1_power * self._beta1_t, use_locking=self._use_locking)
A:tensorflow.python.training.adam.update_beta2->self._beta2_power.assign(self._beta2_power * self._beta2_t, use_locking=self._use_locking)
tensorflow.python.training.adam.AdamOptimizer(self,learning_rate=0.001,beta1=0.9,beta2=0.999,epsilon=1e-08,use_locking=False,name='Adam')
tensorflow.python.training.adam.AdamOptimizer.__init__(self,learning_rate=0.001,beta1=0.9,beta2=0.999,epsilon=1e-08,use_locking=False,name='Adam')
tensorflow.python.training.adam.AdamOptimizer._apply_dense(self,grad,var)
tensorflow.python.training.adam.AdamOptimizer._apply_sparse(self,grad,var)
tensorflow.python.training.adam.AdamOptimizer._create_slots(self,var_list)
tensorflow.python.training.adam.AdamOptimizer._finish(self,update_ops,name_scope)
tensorflow.python.training.adam.AdamOptimizer._get_beta_accumulators(self)
tensorflow.python.training.adam.AdamOptimizer._prepare(self)
tensorflow.python.training.adam.AdamOptimizer._resource_apply_dense(self,grad,var)
tensorflow.training.adam.AdamOptimizer(self,learning_rate=0.001,beta1=0.9,beta2=0.999,epsilon=1e-08,use_locking=False,name='Adam')
tensorflow.training.adam.AdamOptimizer._apply_dense(self,grad,var)
tensorflow.training.adam.AdamOptimizer._apply_sparse(self,grad,var)
tensorflow.training.adam.AdamOptimizer._create_slots(self,var_list)
tensorflow.training.adam.AdamOptimizer._finish(self,update_ops,name_scope)
tensorflow.training.adam.AdamOptimizer._get_beta_accumulators(self)
tensorflow.training.adam.AdamOptimizer._prepare(self)
tensorflow.training.adam.AdamOptimizer._resource_apply_dense(self,grad,var)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/util/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/util/future_api.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/util/all_util.py----------------------------------------
A:tensorflow.python.util.all_util._reference_pattern->re.compile('^@@(\\w+)$', flags=_re.MULTILINE)
A:tensorflow.python.util.all_util.cur_members->set([name for (name, _) in _inspect.getmembers(_sys.modules[module_name])])
A:tensorflow.python.util.all_util.results->set()
A:tensorflow.python.util.all_util.current_symbols->set(dir(_sys.modules[module_name]))
A:tensorflow.python.util.all_util.should_have->make_all(module_name, doc_string_modules)
tensorflow.make_all(module_name,doc_string_modules=None)
tensorflow.python.util.all_util.make_all(module_name,doc_string_modules=None)
tensorflow.python.util.all_util.remove_undocumented(module_name,allowed_exception_list=None,doc_string_modules=None)
tensorflow.python.util.all_util.reveal_undocumented(symbol_name,target_module=None)
tensorflow.remove_undocumented(module_name,allowed_exception_list=None,doc_string_modules=None)
tensorflow.util.all_util.reveal_undocumented(symbol_name,target_module=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/util/nest.py----------------------------------------
A:tensorflow.python.util.nest.is_sequence_nest1->is_sequence(nest1)
A:tensorflow.python.util.nest.type_nest1->type(nest1)
A:tensorflow.python.util.nest.type_nest2->type(nest2)
A:tensorflow.python.util.nest.flat_i->flatten(i)
A:tensorflow.python.util.nest.flat_v->flatten(v)
A:tensorflow.python.util.nest.(new_index, child)->_packed_nest_with_indices(s, flat, index)
A:tensorflow.python.util.nest.flat_structure->flatten(structure)
A:tensorflow.python.util.nest.(_, packed)->_packed_nest_with_indices(structure, flat_sequence, 0)
A:tensorflow.python.util.nest.entries->zip(*flat_structure)
tensorflow.python.util.nest._packed_nest_with_indices(structure,flat,index)
tensorflow.python.util.nest._recursive_assert_same_structure(nest1,nest2)
tensorflow.python.util.nest._sequence_like(instance,args)
tensorflow.python.util.nest._yield_flat_nest(nest)
tensorflow.python.util.nest._yield_flat_up_to(shallow_tree,input_tree)
tensorflow.python.util.nest.assert_same_structure(nest1,nest2)
tensorflow.python.util.nest.assert_shallow_structure(shallow_tree,input_tree)
tensorflow.python.util.nest.flatten(nest)
tensorflow.python.util.nest.flatten_dict_items(dictionary)
tensorflow.python.util.nest.flatten_up_to(shallow_tree,input_tree)
tensorflow.python.util.nest.is_sequence(seq)
tensorflow.python.util.nest.map_structure(func,*structure)
tensorflow.python.util.nest.map_structure_up_to(shallow_tree,func,*inputs)
tensorflow.python.util.nest.pack_sequence_as(structure,flat_sequence)
tensorflow.util.nest._packed_nest_with_indices(structure,flat,index)
tensorflow.util.nest._recursive_assert_same_structure(nest1,nest2)
tensorflow.util.nest._sequence_like(instance,args)
tensorflow.util.nest._yield_flat_nest(nest)
tensorflow.util.nest._yield_flat_up_to(shallow_tree,input_tree)
tensorflow.util.nest.assert_same_structure(nest1,nest2)
tensorflow.util.nest.assert_shallow_structure(shallow_tree,input_tree)
tensorflow.util.nest.flatten(nest)
tensorflow.util.nest.flatten_dict_items(dictionary)
tensorflow.util.nest.flatten_up_to(shallow_tree,input_tree)
tensorflow.util.nest.is_sequence(seq)
tensorflow.util.nest.map_structure(func,*structure)
tensorflow.util.nest.map_structure_up_to(shallow_tree,func,*inputs)
tensorflow.util.nest.pack_sequence_as(structure,flat_sequence)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/util/compat.py----------------------------------------
tensorflow.compat.as_bytes(bytes_or_text,encoding='utf-8')
tensorflow.compat.as_str_any(value)
tensorflow.compat.as_text(bytes_or_text,encoding='utf-8')
tensorflow.python.util.compat.as_bytes(bytes_or_text,encoding='utf-8')
tensorflow.python.util.compat.as_str_any(value)
tensorflow.python.util.compat.as_text(bytes_or_text,encoding='utf-8')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py----------------------------------------
A:tensorflow.python.util.deprecation.frame->inspect.currentframe()
A:tensorflow.python.util.deprecation.stack->inspect.stack(0)
A:tensorflow.python.util.deprecation.new_func.__doc__->_add_deprecated_arg_notice_to_docstring(func.__doc__, date, instructions)
A:tensorflow.python.util.deprecation.DeprecatedArgSpec->collections.namedtuple('DeprecatedArgSpec', ['position', 'has_ok_value', 'ok_value'])
A:tensorflow.python.util.deprecation.d[name_or_tuple[0]]->DeprecatedArgSpec(-1, True, name_or_tuple[1])
A:tensorflow.python.util.deprecation.d[name_or_tuple]->DeprecatedArgSpec(-1, False, None)
A:tensorflow.python.util.deprecation.arg_name_to_pos->dict(((name, pos) for (pos, name) in enumerate(arg_spec.args)))
A:tensorflow.python.util.deprecation.deprecated_positional_args[arg_name]->DeprecatedArgSpec(pos, spec.has_ok_value, spec.ok_value)
A:tensorflow.python.util.deprecation.deprecated_arg_names->_get_arg_names_to_ok_vals()
A:tensorflow.python.util.deprecation.arg_spec->inspect.getargspec(func)
A:tensorflow.python.util.deprecation.deprecated_positions->_get_deprecated_positional_arguments(deprecated_arg_names, arg_spec)
A:tensorflow.python.util.deprecation.named_args->inspect.getcallargs(func, *args, **kwargs)
tensorflow.python.util.deprecation._add_deprecated_arg_notice_to_docstring(doc,date,instructions)
tensorflow.python.util.deprecation._add_deprecated_function_notice_to_docstring(doc,date,instructions)
tensorflow.python.util.deprecation._call_location()
tensorflow.python.util.deprecation._validate_deprecation_args(date,instructions)
tensorflow.python.util.deprecation.deprecated(date,instructions)
tensorflow.python.util.deprecation.deprecated_arg_values(date,instructions,**deprecated_kwargs)
tensorflow.python.util.deprecation.deprecated_args(date,instructions,*deprecated_arg_names_or_tuples)
tensorflow.python.util.deprecation.deprecated_argument_lookup(new_name,new_value,old_name,old_value)
tensorflow.python.util.deprecation.rewrite_argument_docstring(old_doc,old_argument,new_argument)
tensorflow.util.deprecation._add_deprecated_arg_notice_to_docstring(doc,date,instructions)
tensorflow.util.deprecation._add_deprecated_function_notice_to_docstring(doc,date,instructions)
tensorflow.util.deprecation._call_location()
tensorflow.util.deprecation._validate_deprecation_args(date,instructions)
tensorflow.util.deprecation.deprecated(date,instructions)
tensorflow.util.deprecation.deprecated_arg_values(date,instructions,**deprecated_kwargs)
tensorflow.util.deprecation.deprecated_args(date,instructions,*deprecated_arg_names_or_tuples)
tensorflow.util.deprecation.deprecated_argument_lookup(new_name,new_value,old_name,old_value)
tensorflow.util.deprecation.rewrite_argument_docstring(old_doc,old_argument,new_argument)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/util/decorator_utils.py----------------------------------------
A:tensorflow.python.util.decorator_utils.lines->_normalize_docstring(doc).splitlines()
A:tensorflow.python.util.decorator_utils.stripped->line.lstrip()
A:tensorflow.python.util.decorator_utils.indent->min(indent, len(line) - len(stripped))
tensorflow.python.util.decorator_utils._normalize_docstring(docstring)
tensorflow.python.util.decorator_utils.add_notice_to_docstring(doc,instructions,no_doc_str,suffix_str,notice)
tensorflow.python.util.decorator_utils.classproperty(self,func)
tensorflow.python.util.decorator_utils.classproperty.__get__(self,owner_self,owner_cls)
tensorflow.python.util.decorator_utils.classproperty.__init__(self,func)
tensorflow.python.util.decorator_utils.get_qualified_name(function)
tensorflow.python.util.decorator_utils.validate_callable(func,decorator_name)
tensorflow.util.decorator_utils._normalize_docstring(docstring)
tensorflow.util.decorator_utils.add_notice_to_docstring(doc,instructions,no_doc_str,suffix_str,notice)
tensorflow.util.decorator_utils.classproperty(self,func)
tensorflow.util.decorator_utils.classproperty.__get__(self,owner_self,owner_cls)
tensorflow.util.decorator_utils.get_qualified_name(function)
tensorflow.util.decorator_utils.validate_callable(func,decorator_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/util/keyword_args.py----------------------------------------
tensorflow.python.util.keyword_args.keyword_args_only(func)
tensorflow.util.keyword_args.keyword_args_only(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/util/example_parser_configuration.py----------------------------------------
A:tensorflow.python.util.example_parser_configuration.config->tensorflow.core.example.example_parser_configuration_pb2.ExampleParserConfiguration()
A:tensorflow.python.util.example_parser_configuration.num_sparse->parse_example_op.get_attr('Nsparse')
A:tensorflow.python.util.example_parser_configuration.num_dense->parse_example_op.get_attr('Ndense')
A:tensorflow.python.util.example_parser_configuration.sparse_types->parse_example_op.get_attr('sparse_types')
A:tensorflow.python.util.example_parser_configuration.dense_types->parse_example_op.get_attr('Tdense')
A:tensorflow.python.util.example_parser_configuration.dense_shapes->parse_example_op.get_attr('dense_shapes')
A:tensorflow.python.util.example_parser_configuration.fetched->sess.run(fetch_list)
tensorflow.python.util.example_parser_configuration.extract_example_parser_configuration(parse_example_op,sess)
tensorflow.util.example_parser_configuration.extract_example_parser_configuration(parse_example_op,sess)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/util/protobuf/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/python/util/protobuf/compare.py----------------------------------------
A:tensorflow.python.util.protobuf.compare.pool->google.protobuf.descriptor_pool.Default()
A:tensorflow.python.util.protobuf.compare.a->google.protobuf.text_format.Merge(a, b.__class__(), descriptor_pool=pool)
A:tensorflow.python.util.protobuf.compare.errors->pb.FindInitializationErrors()
tensorflow.python.util.protobuf.compare.NormalizeNumberFields(pb)
tensorflow.python.util.protobuf.compare.ProtoAssertions(object)
tensorflow.python.util.protobuf.compare.ProtoAssertions.assertProtoEqual(self,*args,**kwargs)
tensorflow.python.util.protobuf.compare.ProtoEq(a,b)
tensorflow.python.util.protobuf.compare._IsMap(value)
tensorflow.python.util.protobuf.compare._IsRepeatedContainer(value)
tensorflow.python.util.protobuf.compare.assertProtoEqual(self,a,b,check_initialized=True,normalize_numbers=False,msg=None)
tensorflow.util.protobuf.compare.NormalizeNumberFields(pb)
tensorflow.util.protobuf.compare.ProtoAssertions(object)
tensorflow.util.protobuf.compare.ProtoAssertions.assertProtoEqual(self,*args,**kwargs)
tensorflow.util.protobuf.compare.ProtoEq(a,b)
tensorflow.util.protobuf.compare._IsMap(value)
tensorflow.util.protobuf.compare._IsRepeatedContainer(value)
tensorflow.util.protobuf.compare.assertProtoEqual(self,a,b,check_initialized=True,normalize_numbers=False,msg=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/examples/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/examples/tutorials/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/examples/tutorials/mnist/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/examples/tutorials/mnist/mnist.py----------------------------------------
A:tensorflow.examples.tutorials.mnist.mnist.weights->tensorflow.Variable(tf.truncated_normal([hidden2_units, NUM_CLASSES], stddev=1.0 / math.sqrt(float(hidden2_units))), name='weights')
A:tensorflow.examples.tutorials.mnist.mnist.biases->tensorflow.Variable(tf.zeros([NUM_CLASSES]), name='biases')
A:tensorflow.examples.tutorials.mnist.mnist.hidden1->tensorflow.nn.relu(tf.matmul(images, weights) + biases)
A:tensorflow.examples.tutorials.mnist.mnist.hidden2->tensorflow.nn.relu(tf.matmul(hidden1, weights) + biases)
A:tensorflow.examples.tutorials.mnist.mnist.labels->tensorflow.to_int64(labels)
A:tensorflow.examples.tutorials.mnist.mnist.cross_entropy->tensorflow.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits, name='xentropy')
A:tensorflow.examples.tutorials.mnist.mnist.optimizer->tensorflow.train.GradientDescentOptimizer(learning_rate)
A:tensorflow.examples.tutorials.mnist.mnist.global_step->tensorflow.Variable(0, name='global_step', trainable=False)
A:tensorflow.examples.tutorials.mnist.mnist.train_op->tensorflow.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
A:tensorflow.examples.tutorials.mnist.mnist.correct->tensorflow.nn.in_top_k(logits, labels, 1)
tensorflow.examples.tutorials.mnist.mnist.evaluation(logits,labels)
tensorflow.examples.tutorials.mnist.mnist.inference(images,hidden1_units,hidden2_units)
tensorflow.examples.tutorials.mnist.mnist.loss(logits,labels)
tensorflow.examples.tutorials.mnist.mnist.training(loss,learning_rate)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/examples/tutorials/mnist/input_data.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tools/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tools/pip_package/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tools/pip_package/setup.py----------------------------------------
A:tensorflow.tools.pip_package.setup.project_name_idx->sys.argv.index('--project_name')
A:tensorflow.tools.pip_package.setup.ret->setuptools.command.install.install.finalize_options(self)
A:tensorflow.tools.pip_package.setup.self.install_headers->os.path.join(self.install_purelib, 'tensorflow', 'include')
A:tensorflow.tools.pip_package.setup.install_dir->re.sub('/google/protobuf/src', '', install_dir)
A:tensorflow.tools.pip_package.setup.extra_dir->re.sub('/google/protobuf/src', '', install_dir).replace('external/eigen_archive', '')
A:tensorflow.tools.pip_package.setup.(out, _)->self.mkdir_and_copy_file(header)
tensorflow.tools.pip_package.setup.BinaryDistribution(Distribution)
tensorflow.tools.pip_package.setup.BinaryDistribution.has_ext_modules(self)
tensorflow.tools.pip_package.setup.InstallCommand(InstallCommandBase)
tensorflow.tools.pip_package.setup.InstallCommand.finalize_options(self)
tensorflow.tools.pip_package.setup.InstallHeaders(Command)
tensorflow.tools.pip_package.setup.InstallHeaders.finalize_options(self)
tensorflow.tools.pip_package.setup.InstallHeaders.get_inputs(self)
tensorflow.tools.pip_package.setup.InstallHeaders.get_outputs(self)
tensorflow.tools.pip_package.setup.InstallHeaders.initialize_options(self)
tensorflow.tools.pip_package.setup.InstallHeaders.mkdir_and_copy_file(self,header)
tensorflow.tools.pip_package.setup.InstallHeaders.run(self)
tensorflow.tools.pip_package.setup.find_files(pattern,root)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tools/pip_package/simple_console.py----------------------------------------
tensorflow.tools.pip_package.simple_console.main(_)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tools/tfprof/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tools/tfprof/tfprof_output_pb2.py----------------------------------------
A:tensorflow.tools.tfprof.tfprof_output_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.tools.tfprof.tfprof_output_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/tools/tfprof/tfprof_output.proto', package='tensorflow.tfprof', syntax='proto2', serialized_pb=_b('\n+tensorflow/tools/tfprof/tfprof_output.proto\x12\x11tensorflow.tfprof\x1a,tensorflow/core/framework/tensor_shape.proto\x1a%tensorflow/core/framework/types.proto"v\n\x11TFProfTensorProto\x12#\n\x05dtype\x18\x01 \x01(\x0e2\x14.tensorflow.DataType\x12\x14\n\x0cvalue_double\x18\x02 \x03(\x01\x12\x13\n\x0bvalue_int64\x18\x03 \x03(\x03\x12\x11\n\tvalue_str\x18\x04 \x03(\t"\xad\x03\n\nTFProfNode\x12\x0c\n\x04name\x18\x01 \x01(\t\x12:\n\x0ctensor_value\x18\x0f \x01(\x0b2$.tensorflow.tfprof.TFProfTensorProto\x12\x13\n\x0bexec_micros\x18\x02 \x01(\x03\x12\x17\n\x0frequested_bytes\x18\x03 \x01(\x03\x12\x12\n\nparameters\x18\x04 \x01(\x03\x12\x11\n\tfloat_ops\x18\r \x01(\x03\x12\x0e\n\x06inputs\x18\x05 \x01(\x03\x12\x0e\n\x06device\x18\n \x01(\t\x12\x19\n\x11total_exec_micros\x18\x06 \x01(\x03\x12\x1d\n\x15total_requested_bytes\x18\x07 \x01(\x03\x12\x18\n\x10total_parameters\x18\x08 \x01(\x03\x12\x17\n\x0ftotal_float_ops\x18\x0e \x01(\x03\x12\x14\n\x0ctotal_inputs\x18\t \x01(\x03\x12,\n\x06shapes\x18\x0b \x03(\x0b2\x1c.tensorflow.TensorShapeProto\x12/\n\x08children\x18\x0c \x03(\x0b2\x1d.tensorflow.tfprof.TFProfNode'), dependencies=[tensorflow_dot_core_dot_framework_dot_tensor__shape__pb2.DESCRIPTOR, tensorflow_dot_core_dot_framework_dot_types__pb2.DESCRIPTOR])
A:tensorflow.tools.tfprof.tfprof_output_pb2._TFPROFTENSORPROTO->google.protobuf.descriptor.Descriptor(name='TFProfTensorProto', full_name='tensorflow.tfprof.TFProfTensorProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='dtype', full_name='tensorflow.tfprof.TFProfTensorProto.dtype', index=0, number=1, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value_double', full_name='tensorflow.tfprof.TFProfTensorProto.value_double', index=1, number=2, type=1, cpp_type=5, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value_int64', full_name='tensorflow.tfprof.TFProfTensorProto.value_int64', index=2, number=3, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value_str', full_name='tensorflow.tfprof.TFProfTensorProto.value_str', index=3, number=4, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto2', extension_ranges=[], oneofs=[], serialized_start=151, serialized_end=269)
A:tensorflow.tools.tfprof.tfprof_output_pb2._TFPROFNODE->google.protobuf.descriptor.Descriptor(name='TFProfNode', full_name='tensorflow.tfprof.TFProfNode', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.tfprof.TFProfNode.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tensor_value', full_name='tensorflow.tfprof.TFProfNode.tensor_value', index=1, number=15, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='exec_micros', full_name='tensorflow.tfprof.TFProfNode.exec_micros', index=2, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='requested_bytes', full_name='tensorflow.tfprof.TFProfNode.requested_bytes', index=3, number=3, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='parameters', full_name='tensorflow.tfprof.TFProfNode.parameters', index=4, number=4, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='float_ops', full_name='tensorflow.tfprof.TFProfNode.float_ops', index=5, number=13, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='inputs', full_name='tensorflow.tfprof.TFProfNode.inputs', index=6, number=5, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='device', full_name='tensorflow.tfprof.TFProfNode.device', index=7, number=10, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='total_exec_micros', full_name='tensorflow.tfprof.TFProfNode.total_exec_micros', index=8, number=6, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='total_requested_bytes', full_name='tensorflow.tfprof.TFProfNode.total_requested_bytes', index=9, number=7, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='total_parameters', full_name='tensorflow.tfprof.TFProfNode.total_parameters', index=10, number=8, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='total_float_ops', full_name='tensorflow.tfprof.TFProfNode.total_float_ops', index=11, number=14, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='total_inputs', full_name='tensorflow.tfprof.TFProfNode.total_inputs', index=12, number=9, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='shapes', full_name='tensorflow.tfprof.TFProfNode.shapes', index=13, number=11, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='children', full_name='tensorflow.tfprof.TFProfNode.children', index=14, number=12, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto2', extension_ranges=[], oneofs=[], serialized_start=272, serialized_end=701)
A:tensorflow.tools.tfprof.tfprof_output_pb2.TFProfTensorProto->google.protobuf.reflection.GeneratedProtocolMessageType('TFProfTensorProto', (_message.Message,), dict(DESCRIPTOR=_TFPROFTENSORPROTO, __module__='tensorflow.tools.tfprof.tfprof_output_pb2'))
A:tensorflow.tools.tfprof.tfprof_output_pb2.TFProfNode->google.protobuf.reflection.GeneratedProtocolMessageType('TFProfNode', (_message.Message,), dict(DESCRIPTOR=_TFPROFNODE, __module__='tensorflow.tools.tfprof.tfprof_output_pb2'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tools/tfprof/tfprof_log_pb2.py----------------------------------------
A:tensorflow.tools.tfprof.tfprof_log_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.tools.tfprof.tfprof_log_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/tools/tfprof/tfprof_log.proto', package='tensorflow.tfprof', syntax='proto2', serialized_pb=_b('\n(tensorflow/tools/tfprof/tfprof_log.proto\x12\x11tensorflow.tfprof"<\n\nOpLogEntry\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x11\n\tfloat_ops\x18\x02 \x01(\x03\x12\r\n\x05types\x18\x03 \x03(\t";\n\x05OpLog\x122\n\x0blog_entries\x18\x01 \x03(\x0b2\x1d.tensorflow.tfprof.OpLogEntry'))
A:tensorflow.tools.tfprof.tfprof_log_pb2._OPLOGENTRY->google.protobuf.descriptor.Descriptor(name='OpLogEntry', full_name='tensorflow.tfprof.OpLogEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.tfprof.OpLogEntry.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='float_ops', full_name='tensorflow.tfprof.OpLogEntry.float_ops', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='types', full_name='tensorflow.tfprof.OpLogEntry.types', index=2, number=3, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto2', extension_ranges=[], oneofs=[], serialized_start=63, serialized_end=123)
A:tensorflow.tools.tfprof.tfprof_log_pb2._OPLOG->google.protobuf.descriptor.Descriptor(name='OpLog', full_name='tensorflow.tfprof.OpLog', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='log_entries', full_name='tensorflow.tfprof.OpLog.log_entries', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto2', extension_ranges=[], oneofs=[], serialized_start=125, serialized_end=184)
A:tensorflow.tools.tfprof.tfprof_log_pb2.OpLogEntry->google.protobuf.reflection.GeneratedProtocolMessageType('OpLogEntry', (_message.Message,), dict(DESCRIPTOR=_OPLOGENTRY, __module__='tensorflow.tools.tfprof.tfprof_log_pb2'))
A:tensorflow.tools.tfprof.tfprof_log_pb2.OpLog->google.protobuf.reflection.GeneratedProtocolMessageType('OpLog', (_message.Message,), dict(DESCRIPTOR=_OPLOG, __module__='tensorflow.tools.tfprof.tfprof_log_pb2'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tools/tfprof/tfprof_options_pb2.py----------------------------------------
A:tensorflow.tools.tfprof.tfprof_options_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.tools.tfprof.tfprof_options_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/tools/tfprof/tfprof_options.proto', package='tensorflow.tfprof', syntax='proto2', serialized_pb=_b('\n,tensorflow/tools/tfprof/tfprof_options.proto\x12\x11tensorflow.tfprof"þ\x02\n\x0cOptionsProto\x12\x11\n\tmax_depth\x18\x01 \x01(\x03\x12\x11\n\tmin_bytes\x18\x02 \x01(\x03\x12\x12\n\nmin_micros\x18\x03 \x01(\x03\x12\x12\n\nmin_params\x18\x04 \x01(\x03\x12\x15\n\rmin_float_ops\x18\x05 \x01(\x03\x12\x16\n\x0edevice_regexes\x18\x06 \x03(\t\x12\x10\n\x08order_by\x18\x07 \x01(\t\x12\x1c\n\x14account_type_regexes\x18\x08 \x03(\t\x12\x1a\n\x12start_name_regexes\x18\t \x03(\t\x12\x19\n\x11trim_name_regexes\x18\n \x03(\t\x12\x19\n\x11show_name_regexes\x18\x0b \x03(\t\x12\x19\n\x11hide_name_regexes\x18\x0c \x03(\t\x12!\n\x19account_displayed_op_only\x18\r \x01(\x08\x12\x0e\n\x06select\x18\x0e \x03(\t\x12\x0b\n\x03viz\x18\x0f \x01(\x08\x12\x14\n\x0cdump_to_file\x18\x10 \x01(\t'))
A:tensorflow.tools.tfprof.tfprof_options_pb2._OPTIONSPROTO->google.protobuf.descriptor.Descriptor(name='OptionsProto', full_name='tensorflow.tfprof.OptionsProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='max_depth', full_name='tensorflow.tfprof.OptionsProto.max_depth', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='min_bytes', full_name='tensorflow.tfprof.OptionsProto.min_bytes', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='min_micros', full_name='tensorflow.tfprof.OptionsProto.min_micros', index=2, number=3, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='min_params', full_name='tensorflow.tfprof.OptionsProto.min_params', index=3, number=4, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='min_float_ops', full_name='tensorflow.tfprof.OptionsProto.min_float_ops', index=4, number=5, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='device_regexes', full_name='tensorflow.tfprof.OptionsProto.device_regexes', index=5, number=6, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='order_by', full_name='tensorflow.tfprof.OptionsProto.order_by', index=6, number=7, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='account_type_regexes', full_name='tensorflow.tfprof.OptionsProto.account_type_regexes', index=7, number=8, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='start_name_regexes', full_name='tensorflow.tfprof.OptionsProto.start_name_regexes', index=8, number=9, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='trim_name_regexes', full_name='tensorflow.tfprof.OptionsProto.trim_name_regexes', index=9, number=10, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='show_name_regexes', full_name='tensorflow.tfprof.OptionsProto.show_name_regexes', index=10, number=11, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='hide_name_regexes', full_name='tensorflow.tfprof.OptionsProto.hide_name_regexes', index=11, number=12, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='account_displayed_op_only', full_name='tensorflow.tfprof.OptionsProto.account_displayed_op_only', index=12, number=13, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='select', full_name='tensorflow.tfprof.OptionsProto.select', index=13, number=14, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='viz', full_name='tensorflow.tfprof.OptionsProto.viz', index=14, number=15, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='dump_to_file', full_name='tensorflow.tfprof.OptionsProto.dump_to_file', index=15, number=16, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto2', extension_ranges=[], oneofs=[], serialized_start=68, serialized_end=450)
A:tensorflow.tools.tfprof.tfprof_options_pb2.OptionsProto->google.protobuf.reflection.GeneratedProtocolMessageType('OptionsProto', (_message.Message,), dict(DESCRIPTOR=_OPTIONSPROTO, __module__='tensorflow.tools.tfprof.tfprof_options_pb2'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/__main__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/tensorboard.py----------------------------------------
A:tensorflow.tensorboard.tensorboard.logdir->os.path.expanduser(FLAGS.logdir)
A:tensorflow.tensorboard.tensorboard.server->werkzeug.serving.make_server(FLAGS.host, FLAGS.port, tb_app, threaded=True)
A:tensorflow.tensorboard.tensorboard.event_file->os.path.expanduser(FLAGS.event_file)
A:tensorflow.tensorboard.tensorboard.tb->create_tb_app()
tensorflow.tensorboard.tensorboard.create_tb_app()
tensorflow.tensorboard.tensorboard.main(unused_argv=None)
tensorflow.tensorboard.tensorboard.run_simple_server(tb_app)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/plugins/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/plugins/base_plugin.py----------------------------------------
tensorflow.tensorboard.plugins.base_plugin.TBPlugin(object)
tensorflow.tensorboard.plugins.base_plugin.TBPlugin.get_plugin_apps(self,run_paths,logdir)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/plugins/debugger/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/plugins/debugger/debugger_plugin.py----------------------------------------
A:tensorflow.tensorboard.plugins.debugger.debugger_plugin.node_names->json.loads(jsonified_node_names)
A:tensorflow.tensorboard.plugins.debugger.debugger_plugin.run->request.form.get(_RUN_POST_KEY, _DEFAULT_RUN)
A:tensorflow.tensorboard.plugins.debugger.debugger_plugin.step_string->request.form.get(_STEP_POST_KEY, None)
A:tensorflow.tensorboard.plugins.debugger.debugger_plugin.mapping->collections.defaultdict(list)
A:tensorflow.tensorboard.plugins.debugger.debugger_plugin.events_directory->os.path.join(events_directory, run)
A:tensorflow.tensorboard.plugins.debugger.debugger_plugin.step->int(step_string)
A:tensorflow.tensorboard.plugins.debugger.debugger_plugin.mapping[node_name]->self._event_multiplexer.HealthPills(run, node_name)
A:tensorflow.tensorboard.plugins.debugger.debugger_plugin.pattern->os.path.join(events_directory, _DEBUGGER_EVENTS_GLOB_PATTERN)
A:tensorflow.tensorboard.plugins.debugger.debugger_plugin.file_paths->glob.glob(pattern)
A:tensorflow.tensorboard.plugins.debugger.debugger_plugin.node_name_set->frozenset(node_names)
A:tensorflow.tensorboard.plugins.debugger.debugger_plugin.should_stop->self._process_health_pill_event(node_name_set, mapping, step, file_path)
A:tensorflow.tensorboard.plugins.debugger.debugger_plugin.events_loader->tensorflow.tensorboard.backend.event_processing.event_file_loader.EventFileLoader(file_path)
A:tensorflow.tensorboard.plugins.debugger.debugger_plugin.health_pill->self._process_health_pill_value(node_name_set, event.wall_time, event.step, value)
A:tensorflow.tensorboard.plugins.debugger.debugger_plugin.match->re.match('^(.*):(\\d+):DebugNumericSummary$', value.node_name)
A:tensorflow.tensorboard.plugins.debugger.debugger_plugin.node_name->re.match('^(.*):(\\d+):DebugNumericSummary$', value.node_name).group(1)
tensorflow.tensorboard.plugins.debugger.debugger_plugin.DebuggerPlugin(self,event_multiplexer)
tensorflow.tensorboard.plugins.debugger.debugger_plugin.DebuggerPlugin.__init__(self,event_multiplexer)
tensorflow.tensorboard.plugins.debugger.debugger_plugin.DebuggerPlugin._obtain_health_pills_at_step(self,events_directory,node_names,step)
tensorflow.tensorboard.plugins.debugger.debugger_plugin.DebuggerPlugin._obtain_sampled_health_pills(self,run,node_names)
tensorflow.tensorboard.plugins.debugger.debugger_plugin.DebuggerPlugin._process_health_pill_event(self,node_name_set,mapping,target_step,file_path)
tensorflow.tensorboard.plugins.debugger.debugger_plugin.DebuggerPlugin._process_health_pill_value(self,node_name_set,wall_time,step,value)
tensorflow.tensorboard.plugins.debugger.debugger_plugin.DebuggerPlugin._serve_health_pills_handler(self,request)
tensorflow.tensorboard.plugins.debugger.debugger_plugin.DebuggerPlugin.get_plugin_apps(self,unused_run_paths,logdir)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/plugins/projector/projector_plugin.py----------------------------------------
A:tensorflow.tensorboard.plugins.projector.projector_plugin.config->ProjectorConfig()
A:tensorflow.tensorboard.plugins.projector.projector_plugin.config_fpath->os.path.join(logdir, PROJECTOR_FILENAME)
A:tensorflow.tensorboard.plugins.projector.projector_plugin.file_content->tensorflow.python.lib.io.file_io.read_file_to_string(config_fpath)
A:tensorflow.tensorboard.plugins.projector.projector_plugin.ckpt_path->latest_checkpoint(os.path.join(dir_path, os.pardir))
A:tensorflow.tensorboard.plugins.projector.projector_plugin.param->int(param)
A:tensorflow.tensorboard.plugins.projector.projector_plugin.run_path_pairs->list(self.run_paths.items())
A:tensorflow.tensorboard.plugins.projector.projector_plugin.(self._configs, self.config_fpaths)->self._read_latest_config_files(run_path_pairs)
A:tensorflow.tensorboard.plugins.projector.projector_plugin.num_run_paths->len(list(self.run_paths.keys()))
A:tensorflow.tensorboard.plugins.projector.projector_plugin.tensor->tensor.astype(dtype='float32', copy=False).astype(dtype='float32', copy=False)
A:tensorflow.tensorboard.plugins.projector.projector_plugin.reader->self._get_reader_for_run(run)
A:tensorflow.tensorboard.plugins.projector.projector_plugin.var_map->self._get_reader_for_run(run).get_variable_to_shape_map()
A:tensorflow.tensorboard.plugins.projector.projector_plugin.embedding->self._get_embedding(name, config)
A:tensorflow.tensorboard.plugins.projector.projector_plugin.embedding_info->self._get_embedding(name, config)
A:tensorflow.tensorboard.plugins.projector.projector_plugin.run->request.args.get('run')
A:tensorflow.tensorboard.plugins.projector.projector_plugin.name->request.args.get('name')
A:tensorflow.tensorboard.plugins.projector.projector_plugin.num_rows->_parse_positive_int_param(request, 'num_rows')
A:tensorflow.tensorboard.plugins.projector.projector_plugin.fpath->os.path.expanduser(embedding_info.sprite.image_path)
A:tensorflow.tensorboard.plugins.projector.projector_plugin.data_bytes->tensor.astype(dtype='float32', copy=False).astype(dtype='float32', copy=False).tobytes()
A:tensorflow.tensorboard.plugins.projector.projector_plugin.bookmarks_json->tensorflow.python.lib.io.file_io.FileIO(fpath, 'rb').read()
A:tensorflow.tensorboard.plugins.projector.projector_plugin.f->tensorflow.python.lib.io.file_io.FileIO(fpath, 'rb')
A:tensorflow.tensorboard.plugins.projector.projector_plugin.encoded_image_string->tensorflow.python.lib.io.file_io.FileIO(fpath, 'rb').read()
A:tensorflow.tensorboard.plugins.projector.projector_plugin.image_type->imghdr.what(None, encoded_image_string)
A:tensorflow.tensorboard.plugins.projector.projector_plugin.mime_type->_IMGHDR_TO_MIMETYPE.get(image_type, _DEFAULT_IMAGE_MIMETYPE)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin(self)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin.__init__(self)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin._augment_configs_with_checkpoint_info(self)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin._canonical_tensor_name(self,tensor_name)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin._get_bookmarks_file_for_tensor(self,tensor_name,config)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin._get_embedding(self,tensor_name,config)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin._get_metadata_file_for_tensor(self,tensor_name,config)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin._get_reader_for_run(self,run)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin._read_latest_config_files(self,run_path_pairs)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin._run_paths_changed(self)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin._serve_bookmarks(self,request)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin._serve_config(self,request)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin._serve_metadata(self,request)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin._serve_runs(self,request)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin._serve_sprite_image(self,request)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin._serve_tensor(self,request)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin.configs(self)
tensorflow.tensorboard.plugins.projector.projector_plugin.ProjectorPlugin.get_plugin_apps(self,run_paths,logdir)
tensorflow.tensorboard.plugins.projector.projector_plugin._find_latest_checkpoint(dir_path)
tensorflow.tensorboard.plugins.projector.projector_plugin._latest_checkpoints_changed(configs,run_path_pairs)
tensorflow.tensorboard.plugins.projector.projector_plugin._parse_positive_int_param(request,param_name)
tensorflow.tensorboard.plugins.projector.projector_plugin._read_tensor_file(fpath)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/plugins/projector/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/lib/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/lib/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/lib/python/http_util.py----------------------------------------
A:tensorflow.tensorboard.lib.python.http_util._EXTRACT_MIMETYPE_PATTERN->re.compile('^[^;\\s]*')
A:tensorflow.tensorboard.lib.python.http_util._EXTRACT_CHARSET_PATTERN->re.compile('charset=([-_0-9A-Za-z]+)')
A:tensorflow.tensorboard.lib.python.http_util._ALLOWS_GZIP_PATTERN->re.compile('(?:^|,|\\s)(?:(?:x-)?gzip|\\*)(?!;q=0)(?:\\s|,|$)')
A:tensorflow.tensorboard.lib.python.http_util._TEXTUAL_MIMETYPES->set(['application/javascript', 'application/json', 'application/json+protobuf', 'image/svg+xml', 'text/css', 'text/csv', 'text/html', 'text/plain', 'text/tab-separated-values', 'text/x-protobuf'])
A:tensorflow.tensorboard.lib.python.http_util._JSON_MIMETYPES->set(['application/json', 'application/json+protobuf'])
A:tensorflow.tensorboard.lib.python.http_util.mimetype->re.compile('^[^;\\s]*').search(content_type).group(0)
A:tensorflow.tensorboard.lib.python.http_util.charset_match->re.compile('charset=([-_0-9A-Za-z]+)').search(content_type)
A:tensorflow.tensorboard.lib.python.http_util.content->six.BytesIO().getvalue()
A:tensorflow.tensorboard.lib.python.http_util.out->six.BytesIO()
A:tensorflow.tensorboard.lib.python.http_util.f->gzip.GzipFile(fileobj=out, mode='wb', compresslevel=3)
A:tensorflow.tensorboard.lib.python.http_util.e->wsgiref.handlers.format_date_time(time.time() + float(expires))
tensorflow.tensorboard.lib.http_util.Respond(request,content,content_type,code=200,expires=0,content_encoding=None,encoding='utf-8')
tensorflow.tensorboard.lib.python.http_util.Respond(request,content,content_type,code=200,expires=0,content_encoding=None,encoding='utf-8')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/lib/python/json_util.py----------------------------------------
A:tensorflow.tensorboard.lib.python.json_util._INFINITY->float('inf')
A:tensorflow.tensorboard.lib.python.json_util._NEGATIVE_INFINITY->float('-inf')
tensorflow.tensorboard.lib.json_util.Cleanse(obj,encoding='utf-8')
tensorflow.tensorboard.lib.python.json_util.Cleanse(obj,encoding='utf-8')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/backend/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/backend/application.py----------------------------------------
A:tensorflow.tensorboard.backend.application.image_type->imghdr.what(None, encoded_image_string)
A:tensorflow.tensorboard.backend.application.multiplexer->tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer(size_guidance=DEFAULT_SIZE_GUIDANCE, purge_orphaned_data=purge_orphaned_data)
A:tensorflow.tensorboard.backend.application.self.tag->get_tensorboard_tag()
A:tensorflow.tensorboard.backend.application.path_to_run->parse_event_files_spec(self._logdir)
A:tensorflow.tensorboard.backend.application.plugin_apps->plugin.get_plugin_apps(self._multiplexer.RunPaths(), self._logdir)
A:tensorflow.tensorboard.backend.application.base->os.path.abspath(os.curdir)
A:tensorflow.tensorboard.backend.application.absolute_path->os.path.abspath(path)
A:tensorflow.tensorboard.backend.application.prefix->os.path.commonprefix([base, absolute_path])
A:tensorflow.tensorboard.backend.application.tag->tensorflow.python.platform.resource_loader.load_resource('tensorboard/TAG').strip()
A:tensorflow.tensorboard.backend.application.run->werkzeug.wrappers.Request(environ).args.get('run')
A:tensorflow.tensorboard.backend.application.values->self._multiplexer.Histograms(run, tag)
A:tensorflow.tensorboard.backend.application.string_io->StringIO()
A:tensorflow.tensorboard.backend.application.writer->csv.writer(string_io)
A:tensorflow.tensorboard.backend.application.graph->self._multiplexer.Graph(run)
A:tensorflow.tensorboard.backend.application.limit_attr_size->int(limit_attr_size)
A:tensorflow.tensorboard.backend.application.large_attrs_key->werkzeug.wrappers.Request(environ).args.get('large_attrs_key', None)
A:tensorflow.tensorboard.backend.application.run_metadata->self._multiplexer.RunMetadata(run, tag)
A:tensorflow.tensorboard.backend.application.compressed_histograms->self._multiplexer.CompressedHistograms(run, tag)
A:tensorflow.tensorboard.backend.application.bucket_count->len(compressed_histograms[0].compressed_histogram_values)
A:tensorflow.tensorboard.backend.application.images->self._multiplexer.Images(run, tag)
A:tensorflow.tensorboard.backend.application.response->self._audio_response_for_run(audio_list, run, tag)
A:tensorflow.tensorboard.backend.application.index->int(request.args.get('index'))
A:tensorflow.tensorboard.backend.application.content_type->_content_type_for_image(encoded_image_string)
A:tensorflow.tensorboard.backend.application.query_string->six.moves.urllib.parse.urlencode({'run': run, 'tag': tag, 'index': index})
A:tensorflow.tensorboard.backend.application.audio_list->self._multiplexer.Audio(run, tag)
A:tensorflow.tensorboard.backend.application.runs->self._multiplexer.Runs()
A:tensorflow.tensorboard.backend.application.run_data['firstEventTimestamp']->self._multiplexer.FirstEventTimestamp(run_name)
A:tensorflow.tensorboard.backend.application.orig_path->os.path.realpath(path).lstrip('/')
A:tensorflow.tensorboard.backend.application.path->os.path.realpath(path)
A:tensorflow.tensorboard.backend.application.contents->tensorflow.python.platform.resource_loader.load_resource(path)
A:tensorflow.tensorboard.backend.application.components->os.path.realpath(path).split('/')
A:tensorflow.tensorboard.backend.application.components[0]->components[0].replace('-', '_').replace('-', '_')
A:tensorflow.tensorboard.backend.application.(mimetype, content_encoding)->mimetypes.guess_type(path)
A:tensorflow.tensorboard.backend.application.request->werkzeug.wrappers.Request(environ)
A:tensorflow.tensorboard.backend.application.parsed_url->six.moves.urllib.parse.urlparse(request.path)
A:tensorflow.tensorboard.backend.application.uri_pattern->re.compile('[a-zA-Z][0-9a-zA-Z.]*://.*')
A:tensorflow.tensorboard.backend.application.(run_name, _, path)->specification.partition(':')
A:tensorflow.tensorboard.backend.application.start->time.time()
A:tensorflow.tensorboard.backend.application.thread->threading.Thread(target=_reload_forever)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp(self,logdir,plugins,multiplexer,reload_interval)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp.__init__(self,logdir,plugins,multiplexer,reload_interval)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._audio_response_for_run(self,run_audio,run,tag)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._image_response_for_run(self,run_images,run,tag)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._path_is_safe(self,path)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._query_for_individual_audio(self,run,tag,index)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._query_for_individual_image(self,run,tag,index)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._serve_audio(self,request)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._serve_compressed_histograms(self,request)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._serve_graph(self,request)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._serve_histograms(self,request)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._serve_image(self,request)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._serve_images(self,request)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._serve_index(self,request)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._serve_individual_audio(self,request)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._serve_js(self,request)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._serve_logdir(self,request)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._serve_run_metadata(self,request)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._serve_runs(self,request)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._serve_scalars(self,request)
tensorflow.tensorboard.backend.application.TensorBoardWSGIApp._serve_static_file(self,request,path)
tensorflow.tensorboard.backend.application._OutputFormat(object)
tensorflow.tensorboard.backend.application._content_type_for_image(encoded_image_string)
tensorflow.tensorboard.backend.application.get_tensorboard_tag()
tensorflow.tensorboard.backend.application.parse_event_files_spec(logdir)
tensorflow.tensorboard.backend.application.reload_multiplexer(multiplexer,path_to_run)
tensorflow.tensorboard.backend.application.standard_tensorboard_wsgi(logdir,purge_orphaned_data,reload_interval)
tensorflow.tensorboard.backend.application.start_reloading_multiplexer(multiplexer,path_to_run,load_interval)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/backend/process_graph.py----------------------------------------
A:tensorflow.tensorboard.backend.process_graph.keys->list(node.attr.keys())
A:tensorflow.tensorboard.backend.process_graph.size->node.attr[key].ByteSize()
tensorflow.tensorboard.backend.process_graph.prepare_graph_for_ui(graph,limit_attr_size=1024,large_attrs_key='_too_large_attrs')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/backend/event_processing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/backend/event_processing/event_accumulator.py----------------------------------------
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.ScalarEvent->namedtuple('ScalarEvent', ['wall_time', 'step', 'value'])
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.HealthPillEvent->namedtuple('HealthPillEvent', ['wall_time', 'step', 'node_name', 'output_slot', 'value'])
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.CompressedHistogramEvent->namedtuple('CompressedHistogramEvent', ['wall_time', 'step', 'compressed_histogram_values'])
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.CompressedHistogramValue->namedtuple('CompressedHistogramValue', ['basis_point', 'value'])
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.HistogramEvent->namedtuple('HistogramEvent', ['wall_time', 'step', 'histogram_value'])
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.HistogramValue->namedtuple('HistogramValue', ['min', 'max', 'num', 'sum', 'sum_squares', 'bucket_limit', 'bucket'])
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.ImageEvent->namedtuple('ImageEvent', ['wall_time', 'step', 'encoded_image_string', 'width', 'height'])
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.AudioEvent->namedtuple('AudioEvent', ['wall_time', 'step', 'encoded_audio_string', 'content_type', 'sample_rate', 'length_frames'])
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.TensorEvent->namedtuple('TensorEvent', ['wall_time', 'step', 'tensor_proto'])
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.self._scalars->tensorflow.tensorboard.backend.event_processing.reservoir.Reservoir(size=sizes[SCALARS])
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.self._health_pills->tensorflow.tensorboard.backend.event_processing.reservoir.Reservoir(size=sizes[HEALTH_PILLS])
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.self._histograms->tensorflow.tensorboard.backend.event_processing.reservoir.Reservoir(size=sizes[HISTOGRAMS])
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.self._compressed_histograms->tensorflow.tensorboard.backend.event_processing.reservoir.Reservoir(size=sizes[COMPRESSED_HISTOGRAMS], always_keep_last=False)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.self._images->tensorflow.tensorboard.backend.event_processing.reservoir.Reservoir(size=sizes[IMAGES])
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.self._audio->tensorflow.tensorboard.backend.event_processing.reservoir.Reservoir(size=sizes[AUDIO])
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.self._tensors->tensorflow.tensorboard.backend.event_processing.reservoir.Reservoir(size=sizes[TENSORS])
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.self._generator_mutex->threading.Lock()
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.self._generator->_GeneratorFromPath(path)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.event->AudioEvent(wall_time=wall_time, step=step, encoded_audio_string=audio.encoded_audio_string, content_type=audio.content_type, sample_rate=audio.sample_rate, length_frames=audio.length_frames)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.new_file_version->_ParseFileVersion(event.file_version)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.meta_graph->tensorflow.core.protobuf.meta_graph_pb2.MetaGraphDef()
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.self._graph->tensorflow.core.protobuf.meta_graph_pb2.MetaGraphDef().graph_def.SerializeToString()
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.datum->getattr(value, summary_type)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.elements->tensorflow.python.framework.tensor_util.MakeNdarray(value.tensor)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.match->re.match('^(.*):(\\d+):DebugNumericSummary$', value.node_name)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.node_name->re.match('^(.*):(\\d+):DebugNumericSummary$', value.node_name).group(1)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.output_slot->int(match.group(2))
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.graph->tensorflow.core.framework.graph_pb2.GraphDef()
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.run_metadata->RunMetadata()
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.histo->self._ConvertHistogramProtoToTuple(histo)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.histo_ev->HistogramEvent(wall_time, step, histo)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.sv->ScalarEvent(wall_time=wall_time, step=step, value=scalar)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.tv->TensorEvent(wall_time=wall_time, step=step, tensor_proto=tensor)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.purge_msg->_GetPurgeMessage(self.most_recent_step, self.most_recent_wall_time, event.step, event.wall_time, *expired_per_type)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.tokens->file_version.split('brain.Event:')
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.bucket->numpy.array(histo.bucket)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.weights->(bucket * bps[-1] / (bucket.sum() or 1.0)).cumsum()
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.i->numpy.searchsorted(weights, bps[j], side='right')
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.lhs->max(histo.bucket_limit[i - 1], histo.min)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.rhs->min(histo.bucket_limit[i], histo.max)
A:tensorflow.tensorboard.backend.event_processing.event_accumulator.weight->_Remap(bps[j], cumsum_prev, cumsum, lhs, rhs)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator(self,path,size_guidance=DEFAULT_SIZE_GUIDANCE,compression_bps=NORMAL_HISTOGRAM_BPS,purge_orphaned_data=True)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Audio(self,tag)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.CompressedHistograms(self,tag)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.FirstEventTimestamp(self)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Graph(self)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.HealthPills(self,node_name)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Histograms(self,tag)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Images(self,tag)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.MetaGraph(self)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.PluginAssets(self,plugin_name)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Reload(self)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.RetrievePluginAsset(self,plugin_name,asset_name)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.RunMetadata(self,tag)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Scalars(self,tag)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Tags(self)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Tensors(self,tag)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator._CheckForOutOfOrderStepAndMaybePurge(self,event)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator._CheckForRestartAndMaybePurge(self,event)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator._ConvertHistogramProtoToTuple(self,histo)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator._MaybePurgeOrphanedData(self,event)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator._ProcessAudio(self,tag,wall_time,step,audio)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator._ProcessEvent(self,event)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator._ProcessHealthPill(self,wall_time,step,node_name,output_slot,elements)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator._ProcessHealthPillSummary(self,value,event)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator._ProcessHistogram(self,tag,wall_time,step,histo)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator._ProcessImage(self,tag,wall_time,step,image)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator._ProcessScalar(self,tag,wall_time,step,scalar)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator._ProcessTensor(self,tag,wall_time,step,tensor)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator._Purge(self,event,by_tags)
tensorflow.tensorboard.backend.event_processing.event_accumulator.EventAccumulator.__init__(self,path,size_guidance=DEFAULT_SIZE_GUIDANCE,compression_bps=NORMAL_HISTOGRAM_BPS,purge_orphaned_data=True)
tensorflow.tensorboard.backend.event_processing.event_accumulator.IsTensorFlowEventsFile(path)
tensorflow.tensorboard.backend.event_processing.event_accumulator._CompressHistogram(histo_ev,bps)
tensorflow.tensorboard.backend.event_processing.event_accumulator._GeneratorFromPath(path)
tensorflow.tensorboard.backend.event_processing.event_accumulator._GetPurgeMessage(most_recent_step,most_recent_wall_time,event_step,event_wall_time,num_expired_scalars,num_expired_histos,num_expired_comp_histos,num_expired_images,num_expired_audio)
tensorflow.tensorboard.backend.event_processing.event_accumulator._ParseFileVersion(file_version)
tensorflow.tensorboard.backend.event_processing.event_accumulator._Remap(x,x0,x1,y0,y1)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/backend/event_processing/plugin_asset_util.py----------------------------------------
A:tensorflow.tensorboard.backend.event_processing.plugin_asset_util.plugins_dir->os.path.join(logdir, _PLUGINS_DIR)
A:tensorflow.tensorboard.backend.event_processing.plugin_asset_util.entries->tensorflow.python.platform.gfile.ListDirectory(plugin_dir)
A:tensorflow.tensorboard.backend.event_processing.plugin_asset_util.plugin_dir->os.path.join(logdir, _PLUGINS_DIR, plugin_name)
A:tensorflow.tensorboard.backend.event_processing.plugin_asset_util.asset_path->os.path.join(logdir, _PLUGINS_DIR, plugin_name, asset_name)
tensorflow.tensorboard.backend.event_processing.plugin_asset_util.ListAssets(logdir,plugin_name)
tensorflow.tensorboard.backend.event_processing.plugin_asset_util.ListPlugins(logdir)
tensorflow.tensorboard.backend.event_processing.plugin_asset_util.RetrieveAsset(logdir,plugin_name,asset_name)
tensorflow.tensorboard.backend.event_processing.plugin_asset_util._IsDirectory(parent,item)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/backend/event_processing/reservoir.py----------------------------------------
A:tensorflow.tensorboard.backend.event_processing.reservoir.self._buckets->collections.defaultdict(lambda : _ReservoirBucket(size, random.Random(seed), always_keep_last))
A:tensorflow.tensorboard.backend.event_processing.reservoir.self._mutex->threading.Lock()
A:tensorflow.tensorboard.backend.event_processing.reservoir.self._random->random.Random(0)
A:tensorflow.tensorboard.backend.event_processing.reservoir.r->self._random.randint(0, self._num_items_seen)
A:tensorflow.tensorboard.backend.event_processing.reservoir.self.items[-1]->f(item)
A:tensorflow.tensorboard.backend.event_processing.reservoir.size_before->len(self.items)
A:tensorflow.tensorboard.backend.event_processing.reservoir.self.items->list(filter(filterFn, self.items))
A:tensorflow.tensorboard.backend.event_processing.reservoir.self._num_items_seen->int(round(self._num_items_seen * prop_remaining))
tensorflow.tensorboard.backend.event_processing.reservoir.Reservoir(self,size,seed=0,always_keep_last=True)
tensorflow.tensorboard.backend.event_processing.reservoir.Reservoir.AddItem(self,key,item,f=lambdax:x)
tensorflow.tensorboard.backend.event_processing.reservoir.Reservoir.FilterItems(self,filterFn,key=None)
tensorflow.tensorboard.backend.event_processing.reservoir.Reservoir.Items(self,key)
tensorflow.tensorboard.backend.event_processing.reservoir.Reservoir.Keys(self)
tensorflow.tensorboard.backend.event_processing.reservoir.Reservoir.__init__(self,size,seed=0,always_keep_last=True)
tensorflow.tensorboard.backend.event_processing.reservoir._ReservoirBucket(self,_max_size,_random=None,always_keep_last=True)
tensorflow.tensorboard.backend.event_processing.reservoir._ReservoirBucket.AddItem(self,item,f=lambdax:x)
tensorflow.tensorboard.backend.event_processing.reservoir._ReservoirBucket.FilterItems(self,filterFn)
tensorflow.tensorboard.backend.event_processing.reservoir._ReservoirBucket.Items(self)
tensorflow.tensorboard.backend.event_processing.reservoir._ReservoirBucket.__init__(self,_max_size,_random=None,always_keep_last=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/backend/event_processing/event_multiplexer.py----------------------------------------
A:tensorflow.tensorboard.backend.event_processing.event_multiplexer.self._accumulators_mutex->threading.Lock()
A:tensorflow.tensorboard.backend.event_processing.event_multiplexer.accumulator->self._GetAccumulator(run)
A:tensorflow.tensorboard.backend.event_processing.event_multiplexer.rpath->os.path.relpath(subdir, path)
A:tensorflow.tensorboard.backend.event_processing.event_multiplexer.items->list(six.iteritems(self._accumulators))
A:tensorflow.tensorboard.backend.event_processing.event_multiplexer.names_to_delete->set()
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer(self,run_path_map=None,size_guidance=event_accumulator.DEFAULT_SIZE_GUIDANCE,purge_orphaned_data=True)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.AddRun(self,path,name=None)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.AddRunsFromDirectory(self,path,name=None)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.Audio(self,run,tag)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.CompressedHistograms(self,run,tag)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.FirstEventTimestamp(self,run)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.Graph(self,run)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.HealthPills(self,run,node_name)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.Histograms(self,run,tag)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.Images(self,run,tag)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.MetaGraph(self,run)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.PluginAssets(self,plugin_name)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.Reload(self)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.RetrievePluginAsset(self,run,plugin_name,asset_name)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.RunMetadata(self,run,tag)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.RunPaths(self)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.Runs(self)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.Scalars(self,run,tag)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.Tensors(self,run,tag)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer._GetAccumulator(self,run)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.EventMultiplexer.__init__(self,run_path_map=None,size_guidance=event_accumulator.DEFAULT_SIZE_GUIDANCE,purge_orphaned_data=True)
tensorflow.tensorboard.backend.event_processing.event_multiplexer.GetLogdirSubdirectories(path)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/backend/event_processing/io_wrapper.py----------------------------------------
tensorflow.tensorboard.backend.event_processing.io_wrapper.IsGCSPath(path)
tensorflow.tensorboard.backend.event_processing.io_wrapper.ListDirectoryAbsolute(directory)
tensorflow.tensorboard.backend.event_processing.io_wrapper.ListRecursively(top)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/backend/event_processing/event_file_loader.py----------------------------------------
A:tensorflow.tensorboard.backend.event_processing.event_file_loader.file_path->tensorflow.python.platform.resource_loader.readahead_file_path(file_path)
A:tensorflow.tensorboard.backend.event_processing.event_file_loader.self._reader->tensorflow.python.pywrap_tensorflow.PyRecordReader_New(compat.as_bytes(file_path), 0, compat.as_bytes(''), status)
A:tensorflow.tensorboard.backend.event_processing.event_file_loader.event->tensorflow.core.util.event_pb2.Event()
A:tensorflow.tensorboard.backend.event_processing.event_file_loader.loader->EventFileLoader(argv[1])
tensorflow.tensorboard.backend.event_processing.event_file_loader.EventFileLoader(self,file_path)
tensorflow.tensorboard.backend.event_processing.event_file_loader.EventFileLoader.Load(self)
tensorflow.tensorboard.backend.event_processing.event_file_loader.EventFileLoader.__init__(self,file_path)
tensorflow.tensorboard.backend.event_processing.event_file_loader.main(argv)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/backend/event_processing/directory_watcher.py----------------------------------------
A:tensorflow.tensorboard.backend.event_processing.directory_watcher.next_path->self._GetNextPath()
A:tensorflow.tensorboard.backend.event_processing.directory_watcher.path->self._GetNextPath()
A:tensorflow.tensorboard.backend.event_processing.directory_watcher.self._loader->self._loader_factory(path)
A:tensorflow.tensorboard.backend.event_processing.directory_watcher.paths->sorted((path for path in io_wrapper.ListDirectoryAbsolute(self._directory) if self._path_filter(path)))
A:tensorflow.tensorboard.backend.event_processing.directory_watcher.current_path_index->bisect.bisect_left(paths, self._path)
A:tensorflow.tensorboard.backend.event_processing.directory_watcher.ooo_check_start->max(0, current_path_index - self._OOO_WRITE_CHECK_COUNT)
A:tensorflow.tensorboard.backend.event_processing.directory_watcher.next_paths->list((path for path in paths if self._path is None or path > self._path))
A:tensorflow.tensorboard.backend.event_processing.directory_watcher.old_size->self._finalized_sizes.get(path, None)
tensorflow.tensorboard.backend.event_processing.directory_watcher.DirectoryDeletedError(Exception)
tensorflow.tensorboard.backend.event_processing.directory_watcher.DirectoryWatcher(self,directory,loader_factory,path_filter=lambdax:True)
tensorflow.tensorboard.backend.event_processing.directory_watcher.DirectoryWatcher.Load(self)
tensorflow.tensorboard.backend.event_processing.directory_watcher.DirectoryWatcher.OutOfOrderWritesDetected(self)
tensorflow.tensorboard.backend.event_processing.directory_watcher.DirectoryWatcher._GetNextPath(self)
tensorflow.tensorboard.backend.event_processing.directory_watcher.DirectoryWatcher._HasOOOWrite(self,path)
tensorflow.tensorboard.backend.event_processing.directory_watcher.DirectoryWatcher._InitializeLoader(self)
tensorflow.tensorboard.backend.event_processing.directory_watcher.DirectoryWatcher._LoadInternal(self)
tensorflow.tensorboard.backend.event_processing.directory_watcher.DirectoryWatcher._SetPath(self,path)
tensorflow.tensorboard.backend.event_processing.directory_watcher.DirectoryWatcher.__init__(self,directory,loader_factory,path_filter=lambdax:True)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/tensorboard/backend/event_processing/event_file_inspector.py----------------------------------------
A:tensorflow.tensorboard.backend.event_processing.event_file_inspector.TAG_FIELDS->list(SUMMARY_TYPE_TO_FIELD.values())
A:tensorflow.tensorboard.backend.event_processing.event_file_inspector.Observation->collections.namedtuple('Observation', ['step', 'wall_time', 'tag'])
A:tensorflow.tensorboard.backend.event_processing.event_file_inspector.InspectionUnit->collections.namedtuple('InspectionUnit', ['name', 'generator', 'field_to_obs'])
A:tensorflow.tensorboard.backend.event_processing.event_file_inspector.field_to_obs->dict([(t, []) for t in TRACKED_FIELDS])
A:tensorflow.tensorboard.backend.event_processing.event_file_inspector.output[field]->full_steps(steps)
A:tensorflow.tensorboard.backend.event_processing.event_file_inspector.subdirs->tensorflow.tensorboard.backend.event_processing.event_multiplexer.GetLogdirSubdirectories(logdir)
A:tensorflow.tensorboard.backend.event_processing.event_file_inspector.generator->generator_from_event_file(event_file)
A:tensorflow.tensorboard.backend.event_processing.event_file_inspector.inspection_units->get_inspection_units(logdir, event_file, tag)
tensorflow.tensorboard.backend.event_processing.event_file_inspector.generator_from_event_file(event_file)
tensorflow.tensorboard.backend.event_processing.event_file_inspector.generators_from_logdir(logdir)
tensorflow.tensorboard.backend.event_processing.event_file_inspector.get_dict_to_print(field_to_obs)
tensorflow.tensorboard.backend.event_processing.event_file_inspector.get_field_to_observations_map(generator,query_for_tag='')
tensorflow.tensorboard.backend.event_processing.event_file_inspector.get_inspection_units(logdir='',event_file='',tag='')
tensorflow.tensorboard.backend.event_processing.event_file_inspector.get_out_of_order(list_of_numbers)
tensorflow.tensorboard.backend.event_processing.event_file_inspector.get_unique_tags(field_to_obs)
tensorflow.tensorboard.backend.event_processing.event_file_inspector.inspect(logdir='',event_file='',tag='')
tensorflow.tensorboard.backend.event_processing.event_file_inspector.print_dict(d,show_missing=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/labeled_tensor/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/labeled_tensor/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/labeled_tensor/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/labeled_tensor/python/ops/sugar.py----------------------------------------
A:tensorflow.contrib.labeled_tensor.python.ops.sugar.labeled_tensor->tensorflow.contrib.labeled_tensor.python.ops.core.convert_to_labeled_tensor(labeled_tensor)
A:tensorflow.contrib.labeled_tensor.python.ops.sugar.reshape_lt->tensorflow.contrib.labeled_tensor.python.ops.ops.reshape(labeled_tensor, self._existing_axis_names, self._new_axes, name=scope)
tensorflow.contrib.labeled_tensor._sugar.ReshapeCoder(self,existing_axis_names,new_axes,name=None)
tensorflow.contrib.labeled_tensor._sugar.ReshapeCoder.decode(self,labeled_tensor)
tensorflow.contrib.labeled_tensor._sugar.ReshapeCoder.encode(self,labeled_tensor)
tensorflow.contrib.labeled_tensor.python.ops.sugar.ReshapeCoder(self,existing_axis_names,new_axes,name=None)
tensorflow.contrib.labeled_tensor.python.ops.sugar.ReshapeCoder.__init__(self,existing_axis_names,new_axes,name=None)
tensorflow.contrib.labeled_tensor.python.ops.sugar.ReshapeCoder.decode(self,labeled_tensor)
tensorflow.contrib.labeled_tensor.python.ops.sugar.ReshapeCoder.encode(self,labeled_tensor)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/labeled_tensor/python/ops/nn.py----------------------------------------
A:tensorflow.contrib.labeled_tensor.python.ops.nn.relu->tensorflow.contrib.labeled_tensor.python.ops.core.define_unary_op('relu', nn.relu)
A:tensorflow.contrib.labeled_tensor.python.ops.nn.relu6->tensorflow.contrib.labeled_tensor.python.ops.core.define_unary_op('relu6', nn.relu6)
A:tensorflow.contrib.labeled_tensor.python.ops.nn.crelu->tensorflow.contrib.labeled_tensor.python.ops.core.define_unary_op('crelu', nn.crelu)
A:tensorflow.contrib.labeled_tensor.python.ops.nn.elu->tensorflow.contrib.labeled_tensor.python.ops.core.define_unary_op('elu', nn.elu)
A:tensorflow.contrib.labeled_tensor.python.ops.nn.softplus->tensorflow.contrib.labeled_tensor.python.ops.core.define_unary_op('softplus', nn.softplus)
A:tensorflow.contrib.labeled_tensor.python.ops.nn.l2_loss->tensorflow.contrib.labeled_tensor.python.ops.core.define_unary_op('l2_loss', nn.l2_loss)
A:tensorflow.contrib.labeled_tensor.python.ops.nn.sigmoid_cross_entropy_with_logits->tensorflow.contrib.labeled_tensor.python.ops.core.define_binary_op('sigmoid_cross_entropy_with_logits', contrib_nn.deprecated_flipped_sigmoid_cross_entropy_with_logits)
A:tensorflow.contrib.labeled_tensor.python.ops.nn.softmax->tensorflow.contrib.labeled_tensor.python.ops.core.define_unary_op('softmax', nn.softmax)
A:tensorflow.contrib.labeled_tensor.python.ops.nn.log_softmax->tensorflow.contrib.labeled_tensor.python.ops.core.define_unary_op('log_softmax', nn.log_softmax)
A:tensorflow.contrib.labeled_tensor.python.ops.nn.softmax_cross_entropy_with_logits->tensorflow.contrib.labeled_tensor.python.ops.core.define_binary_op('softmax_cross_entropy_with_logits', contrib_nn.deprecated_flipped_softmax_cross_entropy_with_logits)
A:tensorflow.contrib.labeled_tensor.python.ops.nn.sparse_softmax_cross_entropy_with_logits->tensorflow.contrib.labeled_tensor.python.ops.core.define_binary_op('sparse_softmax_cross_entropy_with_logits', contrib_nn.deprecated_flipped_sparse_softmax_cross_entropy_with_logits)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/labeled_tensor/python/ops/core.py----------------------------------------
A:tensorflow.contrib.labeled_tensor.python.ops.core.LabelsLike->tensorflow.contrib.labeled_tensor.python.ops._typecheck.Union(np.ndarray, range, list, tuple)
A:tensorflow.contrib.labeled_tensor.python.ops.core.DimensionLike->tensorflow.contrib.labeled_tensor.python.ops._typecheck.Optional(tc.Union(tensor_shape.Dimension, int))
A:tensorflow.contrib.labeled_tensor.python.ops.core.AxisValue->tensorflow.contrib.labeled_tensor.python.ops._typecheck.Union(LabelsLike, DimensionLike)
A:tensorflow.contrib.labeled_tensor.python.ops.core.Scalar->tensorflow.contrib.labeled_tensor.python.ops._typecheck.Union(numbers.Number, bool, binary_type, text_type)
A:tensorflow.contrib.labeled_tensor.python.ops.core.dimension->tensorflow.python.framework.tensor_shape.Dimension(len(value))
A:tensorflow.contrib.labeled_tensor.python.ops.core.labels->tuple(value)
A:tensorflow.contrib.labeled_tensor.python.ops.core.index->dict(zip(labels, range(len(labels))))
A:tensorflow.contrib.labeled_tensor.python.ops.core.AxisLike->tensorflow.contrib.labeled_tensor.python.ops._typecheck.Union(Axis, tc.Tuple(string_types, AxisValue))
A:tensorflow.contrib.labeled_tensor.python.ops.core.axis->as_axis(axis_data)
A:tensorflow.contrib.labeled_tensor.python.ops.core.self._axes->collections.OrderedDict()
A:tensorflow.contrib.labeled_tensor.python.ops.core.values_repr->(',\n' + ' ' * len(cls_name + '([')).join(values)
A:tensorflow.contrib.labeled_tensor.python.ops.core.shape->elementwise_function(align_0.tensor, align_1.tensor, name=scope).get_shape()
A:tensorflow.contrib.labeled_tensor.python.ops.core.unvalidated_axes->Axes(mutable_axes)
A:tensorflow.contrib.labeled_tensor.python.ops.core.axes_repr->(',\n' + ' ' * len(' axes=[')).join(axes)
A:tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensorLike->tensorflow.contrib.labeled_tensor.python.ops._typecheck.Union(LabeledTensor, ops.Tensor, np.ndarray, Scalar)
A:tensorflow.contrib.labeled_tensor.python.ops.core.axes->sum((len(a) for a in axes)).axes.values()
A:tensorflow.contrib.labeled_tensor.python.ops.core.tensor->elementwise_function(align_0.tensor, align_1.tensor, name=scope)
A:tensorflow.contrib.labeled_tensor.python.ops.core.names->set((a.name for a in axes))
A:tensorflow.contrib.labeled_tensor.python.ops.core.all_have_labels->all((a.labels is not None for a in axes))
A:tensorflow.contrib.labeled_tensor.python.ops.core.any_has_unknown_size->any((a.size is None for a in axes))
A:tensorflow.contrib.labeled_tensor.python.ops.core.value->sum((len(a) for a in axes))
A:tensorflow.contrib.labeled_tensor.python.ops.core.labeled_tensor->convert_to_labeled_tensor(labeled_tensor)
A:tensorflow.contrib.labeled_tensor.python.ops.core.original_order->list(labeled_tensor.axes.keys())
A:tensorflow.contrib.labeled_tensor.python.ops.core.axis_order->_get_valid_axis_order()
A:tensorflow.contrib.labeled_tensor.python.ops.core.axis_names->list(labeled_tensor.axes.keys())
A:tensorflow.contrib.labeled_tensor.python.ops.core.transpose_tensor->tensorflow.python.ops.array_ops.transpose(labeled_tensor.tensor, permutation, name=scope)
A:tensorflow.contrib.labeled_tensor.python.ops.core.reshaped_tensor->tensorflow.python.ops.array_ops.reshape(labeled_tensor.tensor, shape, name=scope)
A:tensorflow.contrib.labeled_tensor.python.ops.core.axis_order_list->tensorflow.python.framework.ops.get_collection_ref(_AXIS_ORDER_KEY)
A:tensorflow.contrib.labeled_tensor.python.ops.core.original_axis_order->get_axis_order()
A:tensorflow.contrib.labeled_tensor.python.ops.core.a_set->set(a)
A:tensorflow.contrib.labeled_tensor.python.ops.core.b_set->set(b)
A:tensorflow.contrib.labeled_tensor.python.ops.core.labeled_tensor_0->expand_dims(labeled_tensor_0, new_axis_names, name=scope + '0')
A:tensorflow.contrib.labeled_tensor.python.ops.core.labeled_tensor_1->expand_dims(labeled_tensor_1, new_axis_names, name=scope + '1')
A:tensorflow.contrib.labeled_tensor.python.ops.core.axis_scope_order->get_axis_order()
A:tensorflow.contrib.labeled_tensor.python.ops.core.new_axis_names->_find_consistent_ordering(list(axes_0), list(axes_1))
A:tensorflow.contrib.labeled_tensor.python.ops.core.result_tensor->elementwise_function(labeled_tensor.tensor, name=scope)
A:tensorflow.contrib.labeled_tensor.python.ops.core.op.__doc__->op.__doc__.format(op_name=op_name)
A:tensorflow.contrib.labeled_tensor.python.ops.core.abs_function->define_unary_op('abs', math_ops.abs)
A:tensorflow.contrib.labeled_tensor.python.ops.core.neg->define_unary_op('neg', math_ops.negative)
A:tensorflow.contrib.labeled_tensor.python.ops.core.sign->define_unary_op('sign', math_ops.sign)
A:tensorflow.contrib.labeled_tensor.python.ops.core.reciprocal->define_unary_op('reciprocal', math_ops.reciprocal)
A:tensorflow.contrib.labeled_tensor.python.ops.core.square->define_unary_op('square', math_ops.square)
A:tensorflow.contrib.labeled_tensor.python.ops.core.round_function->define_unary_op('round', math_ops.round)
A:tensorflow.contrib.labeled_tensor.python.ops.core.sqrt->define_unary_op('sqrt', math_ops.sqrt)
A:tensorflow.contrib.labeled_tensor.python.ops.core.rsqrt->define_unary_op('rsqrt', math_ops.rsqrt)
A:tensorflow.contrib.labeled_tensor.python.ops.core.exp->define_unary_op('exp', math_ops.exp)
A:tensorflow.contrib.labeled_tensor.python.ops.core.log->define_unary_op('log', math_ops.log)
A:tensorflow.contrib.labeled_tensor.python.ops.core.ceil->define_unary_op('ceil', math_ops.ceil)
A:tensorflow.contrib.labeled_tensor.python.ops.core.floor->define_unary_op('floor', math_ops.floor)
A:tensorflow.contrib.labeled_tensor.python.ops.core.cos->define_unary_op('cos', math_ops.cos)
A:tensorflow.contrib.labeled_tensor.python.ops.core.sin->define_unary_op('sin', math_ops.sin)
A:tensorflow.contrib.labeled_tensor.python.ops.core.tan->define_unary_op('tan', math_ops.tan)
A:tensorflow.contrib.labeled_tensor.python.ops.core.acos->define_unary_op('acos', math_ops.acos)
A:tensorflow.contrib.labeled_tensor.python.ops.core.asin->define_unary_op('asin', math_ops.asin)
A:tensorflow.contrib.labeled_tensor.python.ops.core.atan->define_unary_op('atan', math_ops.atan)
A:tensorflow.contrib.labeled_tensor.python.ops.core.lgamma->define_unary_op('lgamma', math_ops.lgamma)
A:tensorflow.contrib.labeled_tensor.python.ops.core.digamma->define_unary_op('digamma', math_ops.digamma)
A:tensorflow.contrib.labeled_tensor.python.ops.core.erf->define_unary_op('erf', math_ops.erf)
A:tensorflow.contrib.labeled_tensor.python.ops.core.erfc->define_unary_op('erfc', math_ops.erfc)
A:tensorflow.contrib.labeled_tensor.python.ops.core.logical_not->define_unary_op('logical_not', math_ops.logical_not)
A:tensorflow.contrib.labeled_tensor.python.ops.core.tanh->define_unary_op('tanh', math_ops.tanh)
A:tensorflow.contrib.labeled_tensor.python.ops.core.sigmoid->define_unary_op('sigmoid', math_ops.sigmoid)
A:tensorflow.contrib.labeled_tensor.python.ops.core.(align_0, align_1, broadcast_axes)->align(labeled_tensor_0, labeled_tensor_1)
A:tensorflow.contrib.labeled_tensor.python.ops.core.add->define_binary_op('add', math_ops.add)
A:tensorflow.contrib.labeled_tensor.python.ops.core.sub->define_binary_op('sub', math_ops.subtract)
A:tensorflow.contrib.labeled_tensor.python.ops.core.mul->define_binary_op('mul', math_ops.multiply)
A:tensorflow.contrib.labeled_tensor.python.ops.core.div->define_binary_op('div', math_ops.div)
A:tensorflow.contrib.labeled_tensor.python.ops.core.mod->define_binary_op('mod', math_ops.mod)
A:tensorflow.contrib.labeled_tensor.python.ops.core.pow_function->define_binary_op('pow', math_ops.pow)
A:tensorflow.contrib.labeled_tensor.python.ops.core.equal->define_binary_op('equal', math_ops.equal)
A:tensorflow.contrib.labeled_tensor.python.ops.core.greater->define_binary_op('greater', math_ops.greater)
A:tensorflow.contrib.labeled_tensor.python.ops.core.greater_equal->define_binary_op('greater_equal', math_ops.greater_equal)
A:tensorflow.contrib.labeled_tensor.python.ops.core.not_equal->define_binary_op('not_equal', math_ops.not_equal)
A:tensorflow.contrib.labeled_tensor.python.ops.core.less->define_binary_op('less', math_ops.less)
A:tensorflow.contrib.labeled_tensor.python.ops.core.less_equal->define_binary_op('less_equal', math_ops.less_equal)
A:tensorflow.contrib.labeled_tensor.python.ops.core.logical_and->define_binary_op('logical_and', math_ops.logical_and)
A:tensorflow.contrib.labeled_tensor.python.ops.core.logical_or->define_binary_op('logical_or', math_ops.logical_or)
A:tensorflow.contrib.labeled_tensor.python.ops.core.logical_xor->define_binary_op('logical_xor', math_ops.logical_xor)
A:tensorflow.contrib.labeled_tensor.python.ops.core.maximum->define_binary_op('maximum', math_ops.maximum)
A:tensorflow.contrib.labeled_tensor.python.ops.core.minimum->define_binary_op('minimum', math_ops.minimum)
A:tensorflow.contrib.labeled_tensor.python.ops.core.squared_difference->define_binary_op('squared_difference', math_ops.squared_difference)
A:tensorflow.contrib.labeled_tensor.python.ops.core.igamma->define_binary_op('igamma', math_ops.igamma)
A:tensorflow.contrib.labeled_tensor.python.ops.core.igammac->define_binary_op('igammac', math_ops.igammac)
A:tensorflow.contrib.labeled_tensor.python.ops.core.zeta->define_binary_op('zeta', math_ops.zeta)
A:tensorflow.contrib.labeled_tensor.python.ops.core.polygamma->define_binary_op('polygamma', math_ops.polygamma)
tensorflow.contrib.labeled_tensor._core.Axes(self,axes)
tensorflow.contrib.labeled_tensor._core.Axes.__contains__(self,name)
tensorflow.contrib.labeled_tensor._core.Axes.__getitem__(self,name)
tensorflow.contrib.labeled_tensor._core.Axes.__hash__(self)
tensorflow.contrib.labeled_tensor._core.Axes.__iter__(self)
tensorflow.contrib.labeled_tensor._core.Axes.__len__(self)
tensorflow.contrib.labeled_tensor._core.Axes.__repr__(self)
tensorflow.contrib.labeled_tensor._core.Axes.remove(self,axis_name)
tensorflow.contrib.labeled_tensor._core.Axis(self,name,value)
tensorflow.contrib.labeled_tensor._core.Axis.__eq__(self,other)
tensorflow.contrib.labeled_tensor._core.Axis.__hash__(self)
tensorflow.contrib.labeled_tensor._core.Axis.__len__(self)
tensorflow.contrib.labeled_tensor._core.Axis.__ne__(self,other)
tensorflow.contrib.labeled_tensor._core.Axis.__repr__(self)
tensorflow.contrib.labeled_tensor._core.Axis.dimension(self)
tensorflow.contrib.labeled_tensor._core.Axis.index(self,value)
tensorflow.contrib.labeled_tensor._core.Axis.labels(self)
tensorflow.contrib.labeled_tensor._core.Axis.name(self)
tensorflow.contrib.labeled_tensor._core.Axis.size(self)
tensorflow.contrib.labeled_tensor._core.Axis.value(self)
tensorflow.contrib.labeled_tensor._core.AxisOrderError(ValueError)
tensorflow.contrib.labeled_tensor._core.LabeledTensor(self,tensor,axes)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__abs__(self)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__add__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__and__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__eq__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__ge__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__getitem__(self,key)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__gt__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__hash__(self)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__invert__(self)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__le__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__lt__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__mod__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__mul__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__ne__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__neg__(self)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__or__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__pos__(self)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__pow__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__radd__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__repr__(self)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__rmod__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__rmul__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__rpow__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__rsub__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__rtruediv__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__sub__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__truediv__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.__xor__(self,other)
tensorflow.contrib.labeled_tensor._core.LabeledTensor._as_graph_element(self)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.axes(self)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.dtype(self)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.get_shape(self)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.name(self)
tensorflow.contrib.labeled_tensor._core.LabeledTensor.tensor(self)
tensorflow.contrib.labeled_tensor._core._convert_labeled_tensor_to_tensor(value,*args,**kwargs)
tensorflow.contrib.labeled_tensor._core._find_consistent_ordering(a,b)
tensorflow.contrib.labeled_tensor._core._get_valid_axis_order()
tensorflow.contrib.labeled_tensor._core._set_axis_order(axis_order)
tensorflow.contrib.labeled_tensor._core.align(labeled_tensor_0,labeled_tensor_1,name=None)
tensorflow.contrib.labeled_tensor._core.as_axis(axis_data)
tensorflow.contrib.labeled_tensor._core.axis_order_scope(axis_order=None)
tensorflow.contrib.labeled_tensor._core.check_axis_order(labeled_tensor,axis_order=None)
tensorflow.contrib.labeled_tensor._core.concat_axes(axes)
tensorflow.contrib.labeled_tensor._core.convert_to_labeled_tensor(value,dtype=None,name=None)
tensorflow.contrib.labeled_tensor._core.define_binary_op(op_name,elementwise_function)
tensorflow.contrib.labeled_tensor._core.define_unary_op(op_name,elementwise_function)
tensorflow.contrib.labeled_tensor._core.expand_dims(labeled_tensor,axes,name=None)
tensorflow.contrib.labeled_tensor._core.get_axis_order()
tensorflow.contrib.labeled_tensor._core.identity(labeled_tensor,name=None)
tensorflow.contrib.labeled_tensor._core.impose_axis_order(labeled_tensor,axis_order=None,name=None)
tensorflow.contrib.labeled_tensor._core.slice_function(labeled_tensor,selection,name=None)
tensorflow.contrib.labeled_tensor._core.transpose(labeled_tensor,axis_order=None,name=None)
tensorflow.contrib.labeled_tensor.python.ops.core.Axes(self,axes)
tensorflow.contrib.labeled_tensor.python.ops.core.Axes.__contains__(self,name)
tensorflow.contrib.labeled_tensor.python.ops.core.Axes.__getitem__(self,name)
tensorflow.contrib.labeled_tensor.python.ops.core.Axes.__hash__(self)
tensorflow.contrib.labeled_tensor.python.ops.core.Axes.__init__(self,axes)
tensorflow.contrib.labeled_tensor.python.ops.core.Axes.__iter__(self)
tensorflow.contrib.labeled_tensor.python.ops.core.Axes.__len__(self)
tensorflow.contrib.labeled_tensor.python.ops.core.Axes.__repr__(self)
tensorflow.contrib.labeled_tensor.python.ops.core.Axes.remove(self,axis_name)
tensorflow.contrib.labeled_tensor.python.ops.core.Axis(self,name,value)
tensorflow.contrib.labeled_tensor.python.ops.core.Axis.__eq__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.Axis.__hash__(self)
tensorflow.contrib.labeled_tensor.python.ops.core.Axis.__init__(self,name,value)
tensorflow.contrib.labeled_tensor.python.ops.core.Axis.__len__(self)
tensorflow.contrib.labeled_tensor.python.ops.core.Axis.__ne__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.Axis.__repr__(self)
tensorflow.contrib.labeled_tensor.python.ops.core.Axis.dimension(self)
tensorflow.contrib.labeled_tensor.python.ops.core.Axis.index(self,value)
tensorflow.contrib.labeled_tensor.python.ops.core.Axis.labels(self)
tensorflow.contrib.labeled_tensor.python.ops.core.Axis.name(self)
tensorflow.contrib.labeled_tensor.python.ops.core.Axis.size(self)
tensorflow.contrib.labeled_tensor.python.ops.core.Axis.value(self)
tensorflow.contrib.labeled_tensor.python.ops.core.AxisOrderError(ValueError)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor(self,tensor,axes)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__abs__(self)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__add__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__and__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__eq__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__ge__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__getitem__(self,key)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__gt__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__hash__(self)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__init__(self,tensor,axes)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__invert__(self)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__le__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__lt__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__mod__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__mul__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__ne__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__neg__(self)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__or__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__pos__(self)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__pow__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__radd__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__repr__(self)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__rmod__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__rmul__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__rpow__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__rsub__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__rtruediv__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__sub__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__truediv__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.__xor__(self,other)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor._as_graph_element(self)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.axes(self)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.dtype(self)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.get_shape(self)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.name(self)
tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor.tensor(self)
tensorflow.contrib.labeled_tensor.python.ops.core._convert_labeled_tensor_to_tensor(value,*args,**kwargs)
tensorflow.contrib.labeled_tensor.python.ops.core._find_consistent_ordering(a,b)
tensorflow.contrib.labeled_tensor.python.ops.core._get_valid_axis_order()
tensorflow.contrib.labeled_tensor.python.ops.core._set_axis_order(axis_order)
tensorflow.contrib.labeled_tensor.python.ops.core.align(labeled_tensor_0,labeled_tensor_1,name=None)
tensorflow.contrib.labeled_tensor.python.ops.core.as_axis(axis_data)
tensorflow.contrib.labeled_tensor.python.ops.core.axis_order_scope(axis_order=None)
tensorflow.contrib.labeled_tensor.python.ops.core.check_axis_order(labeled_tensor,axis_order=None)
tensorflow.contrib.labeled_tensor.python.ops.core.concat_axes(axes)
tensorflow.contrib.labeled_tensor.python.ops.core.convert_to_labeled_tensor(value,dtype=None,name=None)
tensorflow.contrib.labeled_tensor.python.ops.core.define_binary_op(op_name,elementwise_function)
tensorflow.contrib.labeled_tensor.python.ops.core.define_unary_op(op_name,elementwise_function)
tensorflow.contrib.labeled_tensor.python.ops.core.expand_dims(labeled_tensor,axes,name=None)
tensorflow.contrib.labeled_tensor.python.ops.core.get_axis_order()
tensorflow.contrib.labeled_tensor.python.ops.core.identity(labeled_tensor,name=None)
tensorflow.contrib.labeled_tensor.python.ops.core.impose_axis_order(labeled_tensor,axis_order=None,name=None)
tensorflow.contrib.labeled_tensor.python.ops.core.slice_function(labeled_tensor,selection,name=None)
tensorflow.contrib.labeled_tensor.python.ops.core.transpose(labeled_tensor,axis_order=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/labeled_tensor/python/ops/ops.py----------------------------------------
A:tensorflow.contrib.labeled_tensor.python.ops.ops.temp_axes->tensorflow.contrib.labeled_tensor.python.ops.core.Axes([axis] + list(labeled_tensor.axes.remove(axis.name).values()))
A:tensorflow.contrib.labeled_tensor.python.ops.ops.transposed->tensorflow.contrib.labeled_tensor.python.ops.core.transpose(labeled_tensor, temp_axes.keys())
A:tensorflow.contrib.labeled_tensor.python.ops.ops.indexed->tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor(array_ops.gather(transposed.tensor, indexer), temp_axes)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.labeled_tensor->tensorflow.contrib.labeled_tensor.python.ops.core.convert_to_labeled_tensor(labeled_tensor)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.start->list(labeled_tensor.axes.keys()).index(existing_axes[0])
A:tensorflow.contrib.labeled_tensor.python.ops.ops.slices[axis_name]->tensorflow.contrib.labeled_tensor.python.ops.core.as_axis(axis_ref).index(value.item())
A:tensorflow.contrib.labeled_tensor.python.ops.ops.value->numpy.asarray(value)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.indexers[axis_name]->tensorflow.python.framework.ops.convert_to_tensor(indexer, dtype=dtypes.int64)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.((axis_name, indexer),)->indexers.items()
A:tensorflow.contrib.labeled_tensor.python.ops.ops.axis->tensorflow.contrib.labeled_tensor.python.ops.core.as_axis(axis_ref)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.axis_names->list(labeled_tensor.axes.keys())
A:tensorflow.contrib.labeled_tensor.python.ops.ops.shared_axes->axes_0.remove(axis_name)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.current_shared_axes->tensorflow.contrib.labeled_tensor.python.ops.core.convert_to_labeled_tensor(labeled_tensor).axes.remove(axis_name)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.concat_axis->tensorflow.contrib.labeled_tensor.python.ops.core.concat_axes(concat_axis_list)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.concat_dimension->list(labeled_tensor.axes.keys()).index(axis_name)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.concat_tensor->tensorflow.python.ops.array_ops.concat(tensors, concat_dimension, name=scope)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.values->list(axes_0.values())
A:tensorflow.contrib.labeled_tensor.python.ops.ops.pack_op->tensorflow.python.ops.array_ops.stack([t.tensor for t in labeled_tensors], axis=axis_position, name=scope)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.axes->axes.values().values()
A:tensorflow.contrib.labeled_tensor.python.ops.ops.unpack_ops->tensorflow.python.ops.array_ops.unstack(labeled_tensor.tensor, axis=axis, name=scope)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.original_axis_names->list(labeled_tensor.axes.keys())
A:tensorflow.contrib.labeled_tensor.python.ops.ops.existing_axes->list(existing_axes)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.original_values->list(labeled_tensor.axes.values())
A:tensorflow.contrib.labeled_tensor.python.ops.ops.reshaped_tensor->tensorflow.python.ops.array_ops.reshape(labeled_tensor.tensor, shape, name=scope)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.new_axis->tensorflow.contrib.labeled_tensor.python.ops.core.Axis(new_name, labeled_tensor.axes[existing_name].value)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.batch_ops->batch_fn([t.tensor for t in labeled_tensors], scope)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.culled_axes->axes.values().values().remove('batch')
A:tensorflow.contrib.labeled_tensor.python.ops.ops.crop_op->tensorflow.python.ops.random_ops.random_crop(labeled_tensor.tensor, shape, seed=seed, name=scope)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.unpack_lts->unpack(labeled_tensor)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.first_map_lt->fn(unpack_lts[0])
A:tensorflow.contrib.labeled_tensor.python.ops.ops.tensor_lt->tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor(tensor, original_axes)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.map_op->tensorflow.python.ops.functional_ops.map_fn(tf_fn, labeled_tensor.tensor)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.map_lt->tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor(map_op, final_axes)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.initial_value->tensorflow.contrib.labeled_tensor.python.ops.core.convert_to_labeled_tensor(initial_value)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.accumulator_lt->tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor(accumulator, initial_value.axes)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.next_element_lt->tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor(next_element, list(labeled_tensor.axes.values())[1:])
A:tensorflow.contrib.labeled_tensor.python.ops.ops.foldl_op->tensorflow.python.ops.functional_ops.foldl(tf_fn, labeled_tensor.tensor, initializer=initial_value.tensor)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.foldl_lt->tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor(foldl_op, initial_value.axes)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.squeeze_op->tensorflow.python.ops.array_ops.identity(labeled_tensor.tensor, name=scope)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.ReduceAxis->tensorflow.contrib.labeled_tensor.python.ops._typecheck.Union(string_types, tc.Tuple(string_types, collections.Hashable))
A:tensorflow.contrib.labeled_tensor.python.ops.ops.ReduceAxes->tensorflow.contrib.labeled_tensor.python.ops._typecheck.Optional(tc.Union(ReduceAxis, tc.Collection(ReduceAxis)))
A:tensorflow.contrib.labeled_tensor.python.ops.ops.a->tensorflow.contrib.labeled_tensor.python.ops.core.convert_to_labeled_tensor(a)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.b->tensorflow.contrib.labeled_tensor.python.ops.core.convert_to_labeled_tensor(b)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.axis_scope_order->tensorflow.contrib.labeled_tensor.python.ops.core.get_axis_order()
A:tensorflow.contrib.labeled_tensor.python.ops.ops.a_tensor->tensorflow.python.ops.array_ops.reshape(a.tensor, (1, -1))
A:tensorflow.contrib.labeled_tensor.python.ops.ops.b_tensor->tensorflow.python.ops.array_ops.reshape(b.tensor, (-1, 1))
A:tensorflow.contrib.labeled_tensor.python.ops.ops.result_op->tensorflow.python.ops.array_ops.identity(result_op, name=scope)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.reduce_op->reduce_fn(labeled_tensor.tensor, reduction_dimensions, keep_dims=True)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.reduce_lt->tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor(reduce_op, intermediate_axes)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.op.__doc__->tensorflow.python.ops.array_ops.where(condition.tensor, x.tensor, y.tensor, name=scope).__doc__.format(op_name=op_name)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.reduce_all->define_reduce_op('reduce_all', math_ops.reduce_all)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.reduce_any->define_reduce_op('reduce_any', math_ops.reduce_any)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.reduce_logsumexp->define_reduce_op('reduce_logsumexp', math_ops.reduce_logsumexp)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.reduce_max->define_reduce_op('reduce_max', math_ops.reduce_max)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.reduce_mean->define_reduce_op('reduce_mean', math_ops.reduce_mean)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.reduce_min->define_reduce_op('reduce_min', math_ops.reduce_min)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.reduce_prod->define_reduce_op('reduce_prod', math_ops.reduce_prod)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.reduce_sum->define_reduce_op('reduce_sum', math_ops.reduce_sum)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.tile_op->tensorflow.python.ops.array_ops.tile(labeled_tensor.tensor, multiples_list, name=scope)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.axis_before->tensorflow.contrib.labeled_tensor.python.ops.core.Axis(name, padding_before)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.axis_after->tensorflow.contrib.labeled_tensor.python.ops.core.Axis(name, padding_after)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.pad_op->tensorflow.python.ops.array_ops.pad(labeled_tensor.tensor, padding_pairs, mode, name=scope)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.op->tensorflow.python.ops.array_ops.where(condition.tensor, x.tensor, y.tensor, name=scope)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.mask->tensorflow.contrib.labeled_tensor.python.ops.core.convert_to_labeled_tensor(mask)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.condition->tensorflow.contrib.labeled_tensor.python.ops.core.convert_to_labeled_tensor(condition)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.x->tensorflow.contrib.labeled_tensor.python.ops.core.convert_to_labeled_tensor(x)
A:tensorflow.contrib.labeled_tensor.python.ops.ops.y->tensorflow.contrib.labeled_tensor.python.ops.core.convert_to_labeled_tensor(y)
tensorflow.contrib.labeled_tensor._ops._batch_helper(default_name,batch_fn,batch_size,enqueue_many,labeled_tensors,allow_smaller_final_batch,name=None)
tensorflow.contrib.labeled_tensor._ops._gather_1d_on_axis(labeled_tensor,indexer,axis,name=None)
tensorflow.contrib.labeled_tensor._ops.batch(labeled_tensors,batch_size,num_threads=1,capacity=32,enqueue_many=False,allow_smaller_final_batch=False,name=None)
tensorflow.contrib.labeled_tensor._ops.boolean_mask(labeled_tensor,mask,name=None)
tensorflow.contrib.labeled_tensor._ops.cast(labeled_tensor,dtype=None,name=None)
tensorflow.contrib.labeled_tensor._ops.concat(labeled_tensors,axis_name,name=None)
tensorflow.contrib.labeled_tensor._ops.constant(value,dtype=None,axes=None,name=None)
tensorflow.contrib.labeled_tensor._ops.define_reduce_op(op_name,reduce_fn)
tensorflow.contrib.labeled_tensor._ops.foldl(fn,labeled_tensor,initial_value,name=None)
tensorflow.contrib.labeled_tensor._ops.map_fn(fn,labeled_tensor,name=None)
tensorflow.contrib.labeled_tensor._ops.matmul(a,b,name=None)
tensorflow.contrib.labeled_tensor._ops.ones_like(labeled_tensor,dtype=None,name=None)
tensorflow.contrib.labeled_tensor._ops.pack(labeled_tensors,new_axis,axis_position=0,name=None)
tensorflow.contrib.labeled_tensor._ops.pad(labeled_tensor,paddings,mode='CONSTANT',name=None)
tensorflow.contrib.labeled_tensor._ops.random_crop(labeled_tensor,shape_map,seed=None,name=None)
tensorflow.contrib.labeled_tensor._ops.rename_axis(labeled_tensor,existing_name,new_name,name=None)
tensorflow.contrib.labeled_tensor._ops.reshape(labeled_tensor,existing_axes,new_axes,name=None)
tensorflow.contrib.labeled_tensor._ops.select(labeled_tensor,selection,name=None)
tensorflow.contrib.labeled_tensor._ops.shuffle_batch(labeled_tensors,batch_size,num_threads=1,capacity=32,enqueue_many=False,min_after_dequeue=0,seed=None,allow_smaller_final_batch=False,name=None)
tensorflow.contrib.labeled_tensor._ops.squeeze(labeled_tensor,axis_names=None,name=None)
tensorflow.contrib.labeled_tensor._ops.tile(labeled_tensor,multiples,name=None)
tensorflow.contrib.labeled_tensor._ops.unpack(labeled_tensor,axis_name=None,name=None)
tensorflow.contrib.labeled_tensor._ops.verify_tensor_all_finite(labeled_tensor,message,name=None)
tensorflow.contrib.labeled_tensor._ops.where(condition,x,y,name=None)
tensorflow.contrib.labeled_tensor._ops.zeros_like(labeled_tensor,dtype=None,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops._batch_helper(default_name,batch_fn,batch_size,enqueue_many,labeled_tensors,allow_smaller_final_batch,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops._gather_1d_on_axis(labeled_tensor,indexer,axis,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.batch(labeled_tensors,batch_size,num_threads=1,capacity=32,enqueue_many=False,allow_smaller_final_batch=False,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.boolean_mask(labeled_tensor,mask,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.cast(labeled_tensor,dtype=None,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.concat(labeled_tensors,axis_name,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.constant(value,dtype=None,axes=None,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.define_reduce_op(op_name,reduce_fn)
tensorflow.contrib.labeled_tensor.python.ops.ops.foldl(fn,labeled_tensor,initial_value,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.map_fn(fn,labeled_tensor,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.matmul(a,b,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.ones_like(labeled_tensor,dtype=None,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.pack(labeled_tensors,new_axis,axis_position=0,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.pad(labeled_tensor,paddings,mode='CONSTANT',name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.random_crop(labeled_tensor,shape_map,seed=None,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.rename_axis(labeled_tensor,existing_name,new_name,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.reshape(labeled_tensor,existing_axes,new_axes,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.select(labeled_tensor,selection,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.shuffle_batch(labeled_tensors,batch_size,num_threads=1,capacity=32,enqueue_many=False,min_after_dequeue=0,seed=None,allow_smaller_final_batch=False,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.squeeze(labeled_tensor,axis_names=None,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.tile(labeled_tensor,multiples,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.unpack(labeled_tensor,axis_name=None,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.verify_tensor_all_finite(labeled_tensor,message,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.where(condition,x,y,name=None)
tensorflow.contrib.labeled_tensor.python.ops.ops.zeros_like(labeled_tensor,dtype=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/labeled_tensor/python/ops/test_util.py----------------------------------------
A:tensorflow.contrib.labeled_tensor.python.ops.test_util.coord->tensorflow.python.training.coordinator.Coordinator()
A:tensorflow.contrib.labeled_tensor.python.ops.test_util.threads->tensorflow.python.training.queue_runner_impl.start_queue_runners(sess=sess, coord=coord)
A:tensorflow.contrib.labeled_tensor.python.ops.test_util.results->sess.run(tensors)
A:tensorflow.contrib.labeled_tensor.python.ops.test_util.[tensor_0_eval, tensor_1_eval]->self.eval([tensor_0, tensor_1])
tensorflow.contrib.labeled_tensor.ops.test_util.Base(test.TestCase)
tensorflow.contrib.labeled_tensor.ops.test_util.Base.assertLabeledTensorsEqual(self,tensor_0,tensor_1)
tensorflow.contrib.labeled_tensor.ops.test_util.Base.assertTensorsEqual(self,tensor_0,tensor_1)
tensorflow.contrib.labeled_tensor.ops.test_util.Base.eval(self,tensors)
tensorflow.contrib.labeled_tensor.python.ops.test_util.Base(test.TestCase)
tensorflow.contrib.labeled_tensor.python.ops.test_util.Base.assertLabeledTensorsEqual(self,tensor_0,tensor_1)
tensorflow.contrib.labeled_tensor.python.ops.test_util.Base.assertTensorsEqual(self,tensor_0,tensor_1)
tensorflow.contrib.labeled_tensor.python.ops.test_util.Base.eval(self,tensors)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/labeled_tensor/python/ops/io_ops.py----------------------------------------
A:tensorflow.contrib.labeled_tensor.python.ops.io_ops.unlabeled_features[name]->tensorflow.python.ops.parsing_ops.FixedLenFeature(shape, dtype, default_value)
A:tensorflow.contrib.labeled_tensor.python.ops.io_ops.serialized->tensorflow.contrib.labeled_tensor.python.ops.core.convert_to_labeled_tensor(serialized)
A:tensorflow.contrib.labeled_tensor.python.ops.io_ops.unlabeled_features->_labeled_to_unlabeled_features(features)
A:tensorflow.contrib.labeled_tensor.python.ops.io_ops.unlabeled_parsed->tensorflow.python.ops.parsing_ops.parse_single_example(serialized.tensor, unlabeled_features, name, example_names)
A:tensorflow.contrib.labeled_tensor.python.ops.io_ops.parsed[name]->tensorflow.contrib.labeled_tensor.python.ops.core.LabeledTensor(parsed_feature, features[name].axes)
A:tensorflow.contrib.labeled_tensor.python.ops.io_ops.axes->tensorflow.contrib.labeled_tensor.python.ops.core.Axes([(axis, None) if isinstance(axis, string_types) else axis for axis in axes])
A:tensorflow.contrib.labeled_tensor.python.ops.io_ops.tensor->tensorflow.python.ops.array_ops.placeholder(dtype, shape, name=scope)
tensorflow.contrib.labeled_tensor._io_ops.FixedLenFeature(self,axes,dtype,default_value=None)
tensorflow.contrib.labeled_tensor._io_ops.FixedLenFeature.axes(self)
tensorflow.contrib.labeled_tensor._io_ops.FixedLenFeature.default_value(self)
tensorflow.contrib.labeled_tensor._io_ops.FixedLenFeature.dtype(self)
tensorflow.contrib.labeled_tensor._io_ops._labeled_to_unlabeled_features(features)
tensorflow.contrib.labeled_tensor._io_ops.parse_example(serialized,features,name=None,example_names=None)
tensorflow.contrib.labeled_tensor._io_ops.parse_single_example(serialized,features,name=None,example_names=None)
tensorflow.contrib.labeled_tensor._io_ops.placeholder(dtype,axes,name=None)
tensorflow.contrib.labeled_tensor.python.ops.io_ops.FixedLenFeature(self,axes,dtype,default_value=None)
tensorflow.contrib.labeled_tensor.python.ops.io_ops.FixedLenFeature.__init__(self,axes,dtype,default_value=None)
tensorflow.contrib.labeled_tensor.python.ops.io_ops.FixedLenFeature.axes(self)
tensorflow.contrib.labeled_tensor.python.ops.io_ops.FixedLenFeature.default_value(self)
tensorflow.contrib.labeled_tensor.python.ops.io_ops.FixedLenFeature.dtype(self)
tensorflow.contrib.labeled_tensor.python.ops.io_ops._labeled_to_unlabeled_features(features)
tensorflow.contrib.labeled_tensor.python.ops.io_ops.parse_example(serialized,features,name=None,example_names=None)
tensorflow.contrib.labeled_tensor.python.ops.io_ops.parse_single_example(serialized,features,name=None,example_names=None)
tensorflow.contrib.labeled_tensor.python.ops.io_ops.placeholder(dtype,axes,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/labeled_tensor/python/ops/_typecheck.py----------------------------------------
A:tensorflow.contrib.labeled_tensor.python.ops._typecheck.args_repr->', '.join((repr(t) for t in self._types))
A:tensorflow.contrib.labeled_tensor.python.ops._typecheck.string->re.sub('typecheck\\.(\\w+)', '\\1', string)
A:tensorflow.contrib.labeled_tensor.python.ops._typecheck.spec->inspect.getargspec(f)
A:tensorflow.contrib.labeled_tensor.python.ops._typecheck.num_function_arguments->len(spec.args)
A:tensorflow.contrib.labeled_tensor.python.ops._typecheck.num_defaults->len(spec.defaults)
A:tensorflow.contrib.labeled_tensor.python.ops._typecheck.allowed_type->_replace_forward_references(t, f.__globals__)
A:tensorflow.contrib.labeled_tensor.python.ops._typecheck.return_value->f(*args, **kwds)
tensorflow.contrib.labeled_tensor.ops._typecheck.Collection(_SingleArgumentType)
tensorflow.contrib.labeled_tensor.ops._typecheck.Collection.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.ops._typecheck.Dict(Mapping)
tensorflow.contrib.labeled_tensor.ops._typecheck.Dict.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.ops._typecheck.Error(TypeError)
tensorflow.contrib.labeled_tensor.ops._typecheck.List(_SingleArgumentType)
tensorflow.contrib.labeled_tensor.ops._typecheck.List.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.ops._typecheck.Mapping(_TwoArgumentType)
tensorflow.contrib.labeled_tensor.ops._typecheck.Mapping.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.ops._typecheck.Optional(_SingleArgumentType)
tensorflow.contrib.labeled_tensor.ops._typecheck.Optional.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.ops._typecheck.Sequence(_SingleArgumentType)
tensorflow.contrib.labeled_tensor.ops._typecheck.Sequence.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.ops._typecheck.Tuple(Type)
tensorflow.contrib.labeled_tensor.ops._typecheck.Tuple.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.ops._typecheck.Type(self,*types)
tensorflow.contrib.labeled_tensor.ops._typecheck.Type.__repr__(self)
tensorflow.contrib.labeled_tensor.ops._typecheck.Union(Type)
tensorflow.contrib.labeled_tensor.ops._typecheck.Union.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.ops._typecheck._SingleArgumentType(self,tpe)
tensorflow.contrib.labeled_tensor.ops._typecheck._SingleArgumentType._type(self)
tensorflow.contrib.labeled_tensor.ops._typecheck._TwoArgumentType(self,first_type,second_type)
tensorflow.contrib.labeled_tensor.ops._typecheck._replace_forward_references(t,context)
tensorflow.contrib.labeled_tensor.ops._typecheck._type_repr(t)
tensorflow.contrib.labeled_tensor.ops._typecheck.accepts(*types)
tensorflow.contrib.labeled_tensor.ops._typecheck.register_type_abbreviation(name,alias)
tensorflow.contrib.labeled_tensor.ops._typecheck.returns(*types)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Collection(_SingleArgumentType)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Collection.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Dict(Mapping)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Dict.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Error(TypeError)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.List(_SingleArgumentType)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.List.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Mapping(_TwoArgumentType)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Mapping.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Optional(_SingleArgumentType)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Optional.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Sequence(_SingleArgumentType)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Sequence.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Tuple(Type)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Tuple.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Type(self,*types)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Type.__init__(self,*types)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Type.__repr__(self)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Union(Type)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.Union.__instancecheck__(self,instance)
tensorflow.contrib.labeled_tensor.python.ops._typecheck._SingleArgumentType(self,tpe)
tensorflow.contrib.labeled_tensor.python.ops._typecheck._SingleArgumentType.__init__(self,tpe)
tensorflow.contrib.labeled_tensor.python.ops._typecheck._SingleArgumentType._type(self)
tensorflow.contrib.labeled_tensor.python.ops._typecheck._TwoArgumentType(self,first_type,second_type)
tensorflow.contrib.labeled_tensor.python.ops._typecheck._TwoArgumentType.__init__(self,first_type,second_type)
tensorflow.contrib.labeled_tensor.python.ops._typecheck._replace_forward_references(t,context)
tensorflow.contrib.labeled_tensor.python.ops._typecheck._type_repr(t)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.accepts(*types)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.register_type_abbreviation(name,alias)
tensorflow.contrib.labeled_tensor.python.ops._typecheck.returns(*types)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/input_pipeline/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/input_pipeline/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/input_pipeline/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/input_pipeline/python/ops/input_pipeline_ops.py----------------------------------------
A:tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops._input_pipeline_ops->tensorflow.contrib.util.loader.load_op_library(resource_loader.get_path_to_datafile('_input_pipeline_ops.so'))
A:tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops.expanded_list->_create_list(string_list, shuffle, seed, num_epochs)
A:tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops.counter->tensorflow.python.ops.variable_scope.get_variable(name='obtain_next_counter', initializer=constant_op.constant(-1, dtype=dtypes.int64), dtype=dtypes.int64)
A:tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops.string_tensor->tensorflow.python.ops.variable_scope.get_variable(name='obtain_next_expanded_list', initializer=constant_op.constant(expanded_list), dtype=dtypes.string)
A:tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops.filename_counter->tensorflow.python.ops.variable_scope.get_variable(name='obtain_next_filename_counter', initializer=constant_op.constant(0, dtype=dtypes.int64), dtype=dtypes.int64)
A:tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops.c->tensorflow.python.ops.variable_scope.get_variable(name='obtain_next_filename_counter', initializer=constant_op.constant(0, dtype=dtypes.int64), dtype=dtypes.int64).count_up_to(len(expanded_list))
tensorflow.contrib.input_pipeline.obtain_next(string_list_tensor,counter)
tensorflow.contrib.input_pipeline.ops.input_pipeline_ops._create_list(string_list,shuffle,seed,num_epochs)
tensorflow.contrib.input_pipeline.ops.input_pipeline_ops._maybe_randomize_list(string_list,shuffle)
tensorflow.contrib.input_pipeline.ops.input_pipeline_ops.seek_next(string_list,shuffle=False,seed=None,num_epochs=None)
tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops._create_list(string_list,shuffle,seed,num_epochs)
tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops._maybe_randomize_list(string_list,shuffle)
tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops.obtain_next(string_list_tensor,counter)
tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops.seek_next(string_list,shuffle=False,seed=None,num_epochs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/input_pipeline/python/ops/input_pipeline_ops_test.py----------------------------------------
A:tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops_test.var->tensorflow.python.ops.state_ops.variable_op([], dtypes.int64)
A:tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops_test.c->tensorflow.python.framework.constant_op.constant(['a', 'b'])
A:tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops_test.sample1->tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops.obtain_next(c, var)
A:tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops_test.sample2->tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops.obtain_next(c, var)
A:tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops_test.sample3->tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops.obtain_next(c, var)
A:tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops_test.elem->tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops.seek_next(string_list, num_epochs=2)
tensorflow.contrib.input_pipeline.ops.input_pipeline_ops_test.InputPipelineOpsTest(test.TestCase)
tensorflow.contrib.input_pipeline.ops.input_pipeline_ops_test.InputPipelineOpsTest._assert_output(self,expected_list,session,op)
tensorflow.contrib.input_pipeline.ops.input_pipeline_ops_test.InputPipelineOpsTest.testObtainNext(self)
tensorflow.contrib.input_pipeline.ops.input_pipeline_ops_test.InputPipelineOpsTest.testSeekNext(self)
tensorflow.contrib.input_pipeline.ops.input_pipeline_ops_test.InputPipelineOpsTest.testSeekNextLimitEpochs(self)
tensorflow.contrib.input_pipeline.ops.input_pipeline_ops_test.InputPipelineOpsTest.testSeekNextLimitEpochsTwo(self)
tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops_test.InputPipelineOpsTest(test.TestCase)
tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops_test.InputPipelineOpsTest._assert_output(self,expected_list,session,op)
tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops_test.InputPipelineOpsTest.testObtainNext(self)
tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops_test.InputPipelineOpsTest.testSeekNext(self)
tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops_test.InputPipelineOpsTest.testSeekNextLimitEpochs(self)
tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops_test.InputPipelineOpsTest.testSeekNextLimitEpochsTwo(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/input_pipeline/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/input_pipeline/ops/gen_input_pipeline_ops.py----------------------------------------
A:tensorflow.contrib.input_pipeline.ops.gen_input_pipeline_ops.result->_InitOpDefLibrary().apply_op('ObtainNext', list=list, counter=counter, name=name)
A:tensorflow.contrib.input_pipeline.ops.gen_input_pipeline_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.input_pipeline.ops.gen_input_pipeline_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.input_pipeline.ops.gen_input_pipeline_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.input_pipeline.ops.gen_input_pipeline_ops._InitOpDefLibrary()
tensorflow.contrib.input_pipeline.ops.gen_input_pipeline_ops.obtain_next(list,counter,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/solvers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/solvers/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/solvers/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/solvers/python/ops/lanczos.py----------------------------------------
A:tensorflow.contrib.solvers.python.ops.lanczos.lanzcos_bidiag_state->collections.namedtuple('LanczosBidiagState', ['u', 'v', 'alpha', 'beta'])
A:tensorflow.contrib.solvers.python.ops.lanczos.v_shape->v.get_shape()
A:tensorflow.contrib.solvers.python.ops.lanczos.basis_vec->read_colvec(basis, j)
A:tensorflow.contrib.solvers.python.ops.lanczos.j->tensorflow.python.framework.constant_op.constant(0, dtype=dtypes.int32)
A:tensorflow.contrib.solvers.python.ops.lanczos.(_, _, v)->tensorflow.python.ops.control_flow_ops.while_loop(lambda j, basis, v: j < i, gram_schmidt_step, [j, basis, v])
A:tensorflow.contrib.solvers.python.ops.lanczos.v_norm->tensorflow.contrib.solvers.python.ops.util.l2norm(v)
A:tensorflow.contrib.solvers.python.ops.lanczos.(v_new, v_new_norm)->orthogonalize_once(i, basis, v)
A:tensorflow.contrib.solvers.python.ops.lanczos.u->read_colvec(ls.u, i)
A:tensorflow.contrib.solvers.python.ops.lanczos.r->tensorflow.python.ops.control_flow_ops.cond(i > 0, lambda : r - ls.beta.read(i - 1) * read_colvec(ls.v, i - 1), lambda : r)
A:tensorflow.contrib.solvers.python.ops.lanczos.r_shape->tensorflow.python.ops.control_flow_ops.cond(i > 0, lambda : r - ls.beta.read(i - 1) * read_colvec(ls.v, i - 1), lambda : r).get_shape()
A:tensorflow.contrib.solvers.python.ops.lanczos.(v, alpha)->tensorflow.contrib.solvers.python.ops.util.l2normalize(r)
A:tensorflow.contrib.solvers.python.ops.lanczos.(u, beta)->tensorflow.contrib.solvers.python.ops.util.l2normalize(p)
A:tensorflow.contrib.solvers.python.ops.lanczos.starting_vector->tensorflow.python.ops.random_ops.random_uniform(operator.shape[:1], -1, 1, dtype=dtype)
A:tensorflow.contrib.solvers.python.ops.lanczos.(u0, _)->tensorflow.contrib.solvers.python.ops.util.l2normalize(starting_vector)
A:tensorflow.contrib.solvers.python.ops.lanczos.ls->lanzcos_bidiag_state(u=write_colvec(tarray(k + 1, dtype, 'u'), u0, 0), v=tarray(k, dtype, 'v'), alpha=tarray(k, dtype, 'alpha'), beta=tarray(k, dtype, 'beta'))
A:tensorflow.contrib.solvers.python.ops.lanczos.i->tensorflow.python.framework.constant_op.constant(0, dtype=dtypes.int32)
A:tensorflow.contrib.solvers.python.ops.lanczos.(_, ls)->tensorflow.python.ops.control_flow_ops.while_loop(stopping_criterion, lanczos_bidiag_step, [i, ls])
A:tensorflow.contrib.solvers.python.ops.lanczos.alpha->tensorflow.python.ops.array_ops.expand_dims(alpha, 0)
A:tensorflow.contrib.solvers.python.ops.lanczos.beta->tensorflow.python.ops.array_ops.expand_dims(beta[:-1], 0)
A:tensorflow.contrib.solvers.python.ops.lanczos.shape->tensorflow.python.ops.array_ops.shape(matrix)
A:tensorflow.contrib.solvers.python.ops.lanczos.zero_column->tensorflow.python.ops.array_ops.expand_dims(array_ops.zeros(shape[:1], dtype=matrix.dtype), 1)
tensorflow.contrib.solvers.lanczos.bidiag_matmul(matrix,alpha,beta,adjoint_b=False,name='bidiag_matmul')
tensorflow.contrib.solvers.lanczos.lanczos_bidiag(operator,k,orthogonalize=True,starting_vector=None,name='lanczos_bidiag')
tensorflow.contrib.solvers.python.ops.lanczos.bidiag_matmul(matrix,alpha,beta,adjoint_b=False,name='bidiag_matmul')
tensorflow.contrib.solvers.python.ops.lanczos.lanczos_bidiag(operator,k,orthogonalize=True,starting_vector=None,name='lanczos_bidiag')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/solvers/python/ops/linear_equations.py----------------------------------------
A:tensorflow.contrib.solvers.python.ops.linear_equations.cg_state->collections.namedtuple('CGState', ['i', 'x', 'r', 'p', 'gamma'])
A:tensorflow.contrib.solvers.python.ops.linear_equations.z->operator.apply(state.p)
A:tensorflow.contrib.solvers.python.ops.linear_equations.gamma->tensorflow.contrib.solvers.python.ops.util.l2norm_squared(r)
A:tensorflow.contrib.solvers.python.ops.linear_equations.rhs->tensorflow.python.ops.array_ops.expand_dims(rhs, -1)
A:tensorflow.contrib.solvers.python.ops.linear_equations.gamma0->tensorflow.contrib.solvers.python.ops.util.l2norm_squared(rhs)
A:tensorflow.contrib.solvers.python.ops.linear_equations.x->tensorflow.python.ops.array_ops.expand_dims(array_ops.zeros(n, dtype=rhs.dtype.base_dtype), -1)
A:tensorflow.contrib.solvers.python.ops.linear_equations.i->tensorflow.python.framework.constant_op.constant(0, dtype=dtypes.int32)
A:tensorflow.contrib.solvers.python.ops.linear_equations.state->cg_state(i=i, x=x, r=rhs, p=rhs, gamma=gamma0)
A:tensorflow.contrib.solvers.python.ops.linear_equations.(_, state)->tensorflow.python.ops.control_flow_ops.while_loop(stopping_criterion, cg_step, [i, state])
tensorflow.contrib.solvers.linear_equations.conjugate_gradient(operator,rhs,tol=0.0001,max_iter=20,name='conjugate_gradient')
tensorflow.contrib.solvers.python.ops.linear_equations.conjugate_gradient(operator,rhs,tol=0.0001,max_iter=20,name='conjugate_gradient')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/solvers/python/ops/least_squares.py----------------------------------------
A:tensorflow.contrib.solvers.python.ops.least_squares.cgls_state->collections.namedtuple('CGLSState', ['i', 'x', 'r', 'p', 'gamma'])
A:tensorflow.contrib.solvers.python.ops.least_squares.q->operator.apply(state.p)
A:tensorflow.contrib.solvers.python.ops.least_squares.s->operator.apply_adjoint(r)
A:tensorflow.contrib.solvers.python.ops.least_squares.gamma->tensorflow.contrib.solvers.python.ops.util.l2norm_squared(s)
A:tensorflow.contrib.solvers.python.ops.least_squares.rhs->tensorflow.python.ops.array_ops.expand_dims(rhs, -1)
A:tensorflow.contrib.solvers.python.ops.least_squares.s0->operator.apply_adjoint(rhs)
A:tensorflow.contrib.solvers.python.ops.least_squares.gamma0->tensorflow.contrib.solvers.python.ops.util.l2norm_squared(s0)
A:tensorflow.contrib.solvers.python.ops.least_squares.x->tensorflow.python.ops.array_ops.expand_dims(array_ops.zeros(n, dtype=rhs.dtype.base_dtype), -1)
A:tensorflow.contrib.solvers.python.ops.least_squares.i->tensorflow.python.framework.constant_op.constant(0, dtype=dtypes.int32)
A:tensorflow.contrib.solvers.python.ops.least_squares.state->cgls_state(i=i, x=x, r=rhs, p=s0, gamma=gamma0)
A:tensorflow.contrib.solvers.python.ops.least_squares.(_, state)->tensorflow.python.ops.control_flow_ops.while_loop(stopping_criterion, cgls_step, [i, state])
tensorflow.contrib.solvers.least_squares.cgls(operator,rhs,tol=1e-06,max_iter=20,name='cgls')
tensorflow.contrib.solvers.python.ops.least_squares.cgls(operator,rhs,tol=1e-06,max_iter=20,name='cgls')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/solvers/python/ops/util.py----------------------------------------
A:tensorflow.contrib.solvers.python.ops.util.linear_operator->collections.namedtuple('LinearOperator', ['shape', 'dtype', 'apply', 'apply_adjoint'])
A:tensorflow.contrib.solvers.python.ops.util.shape->tensorflow.python.ops.array_ops.shape(matrix)
A:tensorflow.contrib.solvers.python.ops.util.norm->l2norm(v)
tensorflow.contrib.solvers.python.ops.util.create_operator(matrix)
tensorflow.contrib.solvers.python.ops.util.dot(x,y)
tensorflow.contrib.solvers.python.ops.util.l2norm(v)
tensorflow.contrib.solvers.python.ops.util.l2norm_squared(v)
tensorflow.contrib.solvers.python.ops.util.l2normalize(v)
tensorflow.contrib.solvers.util.create_operator(matrix)
tensorflow.contrib.solvers.util.dot(x,y)
tensorflow.contrib.solvers.util.l2norm(v)
tensorflow.contrib.solvers.util.l2norm_squared(v)
tensorflow.contrib.solvers.util.l2normalize(v)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/rnn/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/rnn/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.py----------------------------------------
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.output->self._dropout(output, 'output', self._recurrent_output_noise, self._output_keep_prob)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.value->sigmoid(_linear([inputs, state], 2 * self._num_units, True, 1.0))
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.(r, u)->tensorflow.python.ops.array_ops.split(value=value, num_or_size_splits=2, axis=1)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.c->tensorflow.python.ops.clip_ops.clip_by_value(c, -self._cell_clip, self._cell_clip)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl._LSTMStateTuple->collections.namedtuple('LSTMStateTuple', ('c', 'h'))
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.(c, h)->tensorflow.python.ops.array_ops.split(value=state, num_or_size_splits=2, axis=1)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.concat->_linear([inputs, h], 4 * self._num_units, True)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.(i, j, f, o)->tensorflow.python.ops.array_ops.split(value=lstm_matrix, num_or_size_splits=4, axis=1)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.new_state->self._dropout(new_state, 'state', self._recurrent_state_noise, self._state_keep_prob)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.c_prev->tensorflow.python.ops.array_ops.slice(state, [0, 0], [-1, self._num_units])
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.m_prev->tensorflow.python.ops.array_ops.slice(state, [0, self._num_units], [-1, num_proj])
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.lstm_matrix->_linear([inputs, m_prev], 4 * self._num_units, bias=True)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.w_f_diag->tensorflow.python.ops.variable_scope.get_variable('w_f_diag', shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.w_i_diag->tensorflow.python.ops.variable_scope.get_variable('w_i_diag', shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.w_o_diag->tensorflow.python.ops.variable_scope.get_variable('w_o_diag', shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.m->tensorflow.python.ops.clip_ops.clip_by_value(m, -self._proj_clip, self._proj_clip)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.(output, res_state)->self._cell(inputs, state)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.projected->_linear(inputs, self._num_proj, True)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.r->map_fn(ix[0], *inner_args, **inner_kwargs)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.tensor_value->tensorflow.python.framework.ops.convert_to_tensor(v)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.const_value->tensorflow.python.framework.tensor_util.constant_value(tensor_value)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.(tensor_prob, const_prob)->tensor_and_const_value(prob)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.shape->convert_to_batch_shape(s)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.self._recurrent_input_noise->_enumerated_map_structure(lambda i, s: batch_noise(s, inner_seed=self._gen_seed('input', i)), input_size)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.self._recurrent_state_noise->_enumerated_map_structure(lambda i, s: batch_noise(s, inner_seed=self._gen_seed('state', i)), cell.state_size)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.self._recurrent_output_noise->_enumerated_map_structure(lambda i, s: batch_noise(s, inner_seed=self._gen_seed('output', i)), cell.output_size)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.string->(str(self._seed) + salt).encode('utf-8')
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.binary_tensor->tensorflow.python.ops.math_ops.floor(random_tensor)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.inputs->self._dropout(inputs, 'input', self._recurrent_input_noise, self._input_keep_prob)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.(output, new_state)->self._cell(inputs, state, scope)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.(outputs, new_state)->self._cell(inputs, state, scope=scope)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.res_outputs->tensorflow.python.util.nest.map_structure(lambda inp, out: inp + out, inputs, outputs)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.sqrt3->math.sqrt(3)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.initializer->tensorflow.python.ops.init_ops.random_uniform_initializer(-sqrt3, sqrt3)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.embedding->tensorflow.python.ops.variable_scope.get_variable('embedding', [self._embedding_classes, self._embedding_size], initializer=initializer, dtype=data_type)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.embedded->tensorflow.python.ops.embedding_ops.embedding_lookup(embedding, array_ops.reshape(inputs, [-1]))
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.cur_state->tensorflow.python.ops.array_ops.slice(state, [0, cur_state_pos], [-1, cell.state_size])
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.(cur_inp, new_state)->cell(cur_inp, cur_state)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.(init_output, init_state)->self._cell_fn(None, None)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.output_shape->init_output.get_shape()
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.state_shape->init_state.get_shape()
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.(output, state)->self._cell_fn(inputs, state, scope=scope)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.scope->tensorflow.python.ops.variable_scope.get_variable_scope()
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.weights->tensorflow.python.ops.variable_scope.get_variable(_WEIGHTS_VARIABLE_NAME, [total_arg_size, output_size], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.res->tensorflow.python.ops.math_ops.matmul(array_ops.concat(args, 1), weights)
A:tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.biases->tensorflow.python.ops.variable_scope.get_variable(_BIAS_VARIABLE_NAME, [output_size], dtype=dtype, initializer=init_ops.constant_initializer(bias_start, dtype=dtype))
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.BasicLSTMCell(self,num_units,forget_bias=1.0,input_size=None,state_is_tuple=True,activation=tanh,reuse=None)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.BasicLSTMCell.output_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.BasicLSTMCell.state_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.BasicRNNCell(self,num_units,input_size=None,activation=tanh,reuse=None)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.BasicRNNCell.output_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.BasicRNNCell.state_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.DeviceWrapper(self,cell,device)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.DeviceWrapper.output_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.DeviceWrapper.state_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.DeviceWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.DropoutWrapper(self,cell,input_keep_prob=1.0,output_keep_prob=1.0,state_keep_prob=1.0,variational_recurrent=False,input_size=None,dtype=None,seed=None)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.DropoutWrapper._dropout(self,values,salt_prefix,recurrent_noise,keep_prob)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.DropoutWrapper._gen_seed(self,salt_prefix,index)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.DropoutWrapper._variational_recurrent_dropout_value(self,index,value,noise,keep_prob)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.DropoutWrapper.output_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.DropoutWrapper.state_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.DropoutWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.EmbeddingWrapper(self,cell,embedding_classes,embedding_size,initializer=None,reuse=None)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.EmbeddingWrapper.output_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.EmbeddingWrapper.state_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.EmbeddingWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.GRUCell(self,num_units,input_size=None,activation=tanh,reuse=None)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.GRUCell.output_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.GRUCell.state_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.InputProjectionWrapper(self,cell,num_proj,input_size=None)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.InputProjectionWrapper.output_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.InputProjectionWrapper.state_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.InputProjectionWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.LSTMCell(self,num_units,input_size=None,use_peepholes=False,cell_clip=None,initializer=None,num_proj=None,proj_clip=None,num_unit_shards=None,num_proj_shards=None,forget_bias=1.0,state_is_tuple=True,activation=tanh,reuse=None)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.LSTMCell.output_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.LSTMCell.state_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.LSTMStateTuple(_LSTMStateTuple)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.LSTMStateTuple.dtype(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.MultiRNNCell(self,cells,state_is_tuple=True)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.MultiRNNCell.output_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.MultiRNNCell.state_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.MultiRNNCell.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.OutputProjectionWrapper(self,cell,output_size,reuse=None)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.OutputProjectionWrapper.output_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.OutputProjectionWrapper.state_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.OutputProjectionWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.ResidualWrapper(self,cell)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.ResidualWrapper.output_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.ResidualWrapper.state_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl.ResidualWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl._SlimRNNCell(self,cell_fn)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl._SlimRNNCell.output_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl._SlimRNNCell.state_size(self)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl._checked_scope(cell,scope,reuse=None,**kwargs)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl._enumerated_map_structure(map_fn,*args,**kwargs)
tensorflow.contrib.rnn.ops.core_rnn_cell_impl._linear(args,output_size,bias,bias_start=0.0)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.BasicLSTMCell(self,num_units,forget_bias=1.0,input_size=None,state_is_tuple=True,activation=tanh,reuse=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.BasicLSTMCell.__init__(self,num_units,forget_bias=1.0,input_size=None,state_is_tuple=True,activation=tanh,reuse=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.BasicLSTMCell.output_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.BasicLSTMCell.state_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.BasicRNNCell(self,num_units,input_size=None,activation=tanh,reuse=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.BasicRNNCell.__init__(self,num_units,input_size=None,activation=tanh,reuse=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.BasicRNNCell.output_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.BasicRNNCell.state_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.DeviceWrapper(self,cell,device)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.DeviceWrapper.__init__(self,cell,device)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.DeviceWrapper.output_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.DeviceWrapper.state_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.DeviceWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.DropoutWrapper(self,cell,input_keep_prob=1.0,output_keep_prob=1.0,state_keep_prob=1.0,variational_recurrent=False,input_size=None,dtype=None,seed=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.DropoutWrapper.__init__(self,cell,input_keep_prob=1.0,output_keep_prob=1.0,state_keep_prob=1.0,variational_recurrent=False,input_size=None,dtype=None,seed=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.DropoutWrapper._dropout(self,values,salt_prefix,recurrent_noise,keep_prob)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.DropoutWrapper._gen_seed(self,salt_prefix,index)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.DropoutWrapper._variational_recurrent_dropout_value(self,index,value,noise,keep_prob)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.DropoutWrapper.output_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.DropoutWrapper.state_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.DropoutWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.EmbeddingWrapper(self,cell,embedding_classes,embedding_size,initializer=None,reuse=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.EmbeddingWrapper.__init__(self,cell,embedding_classes,embedding_size,initializer=None,reuse=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.EmbeddingWrapper.output_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.EmbeddingWrapper.state_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.EmbeddingWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.GRUCell(self,num_units,input_size=None,activation=tanh,reuse=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.GRUCell.__init__(self,num_units,input_size=None,activation=tanh,reuse=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.GRUCell.output_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.GRUCell.state_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.InputProjectionWrapper(self,cell,num_proj,input_size=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.InputProjectionWrapper.__init__(self,cell,num_proj,input_size=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.InputProjectionWrapper.output_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.InputProjectionWrapper.state_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.InputProjectionWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.LSTMCell(self,num_units,input_size=None,use_peepholes=False,cell_clip=None,initializer=None,num_proj=None,proj_clip=None,num_unit_shards=None,num_proj_shards=None,forget_bias=1.0,state_is_tuple=True,activation=tanh,reuse=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.LSTMCell.__init__(self,num_units,input_size=None,use_peepholes=False,cell_clip=None,initializer=None,num_proj=None,proj_clip=None,num_unit_shards=None,num_proj_shards=None,forget_bias=1.0,state_is_tuple=True,activation=tanh,reuse=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.LSTMCell.output_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.LSTMCell.state_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.LSTMStateTuple(_LSTMStateTuple)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.LSTMStateTuple.dtype(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.MultiRNNCell(self,cells,state_is_tuple=True)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.MultiRNNCell.__init__(self,cells,state_is_tuple=True)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.MultiRNNCell.output_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.MultiRNNCell.state_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.MultiRNNCell.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.OutputProjectionWrapper(self,cell,output_size,reuse=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.OutputProjectionWrapper.__init__(self,cell,output_size,reuse=None)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.OutputProjectionWrapper.output_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.OutputProjectionWrapper.state_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.OutputProjectionWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.ResidualWrapper(self,cell)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.ResidualWrapper.__init__(self,cell)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.ResidualWrapper.output_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.ResidualWrapper.state_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.ResidualWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl._SlimRNNCell(self,cell_fn)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl._SlimRNNCell.__init__(self,cell_fn)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl._SlimRNNCell.output_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl._SlimRNNCell.state_size(self)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl._checked_scope(cell,scope,reuse=None,**kwargs)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl._enumerated_map_structure(map_fn,*args,**kwargs)
tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl._linear(args,output_size,bias,bias_start=0.0)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/rnn/python/ops/rnn.py----------------------------------------
A:tensorflow.contrib.rnn.python.ops.rnn.(prev_layer, state_fw, state_bw)->tensorflow.contrib.rnn.python.ops.core_rnn.static_bidirectional_rnn(cell_fw, cell_bw, prev_layer, initial_state_fw=initial_state_fw, initial_state_bw=initial_state_bw, sequence_length=sequence_length, dtype=dtype, scope=cell_scope)
A:tensorflow.contrib.rnn.python.ops.rnn.(outputs, (state_fw, state_bw))->tensorflow.python.ops.rnn.bidirectional_dynamic_rnn(cell_fw, cell_bw, prev_layer, initial_state_fw=initial_state_fw, initial_state_bw=initial_state_bw, sequence_length=sequence_length, parallel_iterations=parallel_iterations, dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn.prev_layer->tensorflow.python.ops.array_ops.concat(outputs, 2)
tensorflow.contrib.rnn.python.ops.rnn.stack_bidirectional_dynamic_rnn(cells_fw,cells_bw,inputs,initial_states_fw=None,initial_states_bw=None,dtype=None,sequence_length=None,parallel_iterations=None,scope=None)
tensorflow.contrib.rnn.python.ops.rnn.stack_bidirectional_rnn(cells_fw,cells_bw,inputs,initial_states_fw=None,initial_states_bw=None,dtype=None,sequence_length=None,scope=None)
tensorflow.contrib.rnn.stack_bidirectional_dynamic_rnn(cells_fw,cells_bw,inputs,initial_states_fw=None,initial_states_bw=None,dtype=None,sequence_length=None,parallel_iterations=None,scope=None)
tensorflow.contrib.rnn.stack_bidirectional_rnn(cells_fw,cells_bw,inputs,initial_states_fw=None,initial_states_bw=None,dtype=None,sequence_length=None,scope=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/rnn/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/rnn/python/ops/gru_ops.py----------------------------------------
A:tensorflow.contrib.rnn.python.ops.gru_ops._gru_ops_so->tensorflow.contrib.util.loader.load_op_library(resource_loader.get_path_to_datafile('_gru_ops.so'))
A:tensorflow.contrib.rnn.python.ops.gru_ops.(d_x, d_h_prev, d_c_bar, d_r_bar_u_bar)->tensorflow.contrib.rnn.ops.gen_gru_ops.gru_block_cell_grad(x, h_prev, w_ru, w_c, b_ru, b_c, r, u, c, d_h)
A:tensorflow.contrib.rnn.python.ops.gru_ops.x_h_prev->tensorflow.python.ops.array_ops.concat([x, h_prev], 1)
A:tensorflow.contrib.rnn.python.ops.gru_ops.d_w_ru->tensorflow.python.ops.math_ops.matmul(x_h_prev, d_r_bar_u_bar, transpose_a=True)
A:tensorflow.contrib.rnn.python.ops.gru_ops.d_b_ru->tensorflow.python.ops.nn_ops.bias_add_grad(d_r_bar_u_bar)
A:tensorflow.contrib.rnn.python.ops.gru_ops.x_h_prevr->tensorflow.python.ops.array_ops.concat([x, h_prev * r], 1)
A:tensorflow.contrib.rnn.python.ops.gru_ops.d_w_c->tensorflow.python.ops.math_ops.matmul(x_h_prevr, d_c_bar, transpose_a=True)
A:tensorflow.contrib.rnn.python.ops.gru_ops.d_b_c->tensorflow.python.ops.nn_ops.bias_add_grad(d_c_bar)
A:tensorflow.contrib.rnn.python.ops.gru_ops.w_ru->tensorflow.python.ops.variable_scope.get_variable('w_ru', [input_size + self._cell_size, self._cell_size * 2])
A:tensorflow.contrib.rnn.python.ops.gru_ops.b_ru->tensorflow.python.ops.variable_scope.get_variable('b_ru', [self._cell_size * 2], initializer=init_ops.constant_initializer(1.0))
A:tensorflow.contrib.rnn.python.ops.gru_ops.w_c->tensorflow.python.ops.variable_scope.get_variable('w_c', [input_size + self._cell_size, self._cell_size])
A:tensorflow.contrib.rnn.python.ops.gru_ops.b_c->tensorflow.python.ops.variable_scope.get_variable('b_c', [self._cell_size], initializer=init_ops.constant_initializer(0.0))
A:tensorflow.contrib.rnn.python.ops.gru_ops.(_, _, _, new_h)->_gru_block_cell(x=x, h_prev=h_prev, w_ru=w_ru, w_c=w_c, b_ru=b_ru, b_c=b_c)
tensorflow.contrib.rnn.GRUBlockCell(self,cell_size)
tensorflow.contrib.rnn.GRUBlockCell.output_size(self)
tensorflow.contrib.rnn.GRUBlockCell.state_size(self)
tensorflow.contrib.rnn._GRUBlockCellGrad(op,*grad)
tensorflow.contrib.rnn.python.ops.gru_ops.GRUBlockCell(self,cell_size)
tensorflow.contrib.rnn.python.ops.gru_ops.GRUBlockCell.__init__(self,cell_size)
tensorflow.contrib.rnn.python.ops.gru_ops.GRUBlockCell.output_size(self)
tensorflow.contrib.rnn.python.ops.gru_ops.GRUBlockCell.state_size(self)
tensorflow.contrib.rnn.python.ops.gru_ops._GRUBlockCellGrad(op,*grad)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/rnn/python/ops/rnn_cell.py----------------------------------------
A:tensorflow.contrib.rnn.python.ops.rnn_cell.sharded_variable->_get_sharded_variable(name, shape, dtype, num_shards)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.concat_variable->tensorflow.python.ops.array_ops.concat(sharded_variable, 0, name=concat_name)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.unit_shard_size->int(math.floor(shape[0] / num_shards))
A:tensorflow.contrib.rnn.python.ops.rnn_cell.c_prev->tensorflow.python.ops.array_ops.slice(state, [0, 2 * fq * self._num_units], [-1, self._num_units])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.m_prev->tensorflow.python.ops.array_ops.slice(state, [0, (2 * fq + 1) * self._num_units], [-1, self._num_units])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.concat_w->_get_concat_variable('W', [actual_input_size + 2 * self._num_units, 4 * self._num_units], dtype, self._num_unit_shards)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.b->tensorflow.python.ops.variable_scope.get_variable('bias', shape=[8 * self._num_units], initializer=init_ops.zeros_initializer(), dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.cell_inputs->tensorflow.python.ops.array_ops.concat([freq_inputs[freq_index], m_prev_time, m_prev_freq], 1)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.lstm_matrix->tensorflow.python.ops.nn_ops.bias_add(math_ops.matmul(cell_inputs, concat_w), b)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.(j, f, o)->tensorflow.python.ops.array_ops.split(value=lstm_matrix, num_or_size_splits=3, axis=1)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.w_f_diag->tensorflow.python.ops.variable_scope.get_variable('W_F_diag', shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.w_o_diag->tensorflow.python.ops.variable_scope.get_variable('W_O_diag', shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.f_act->sigmoid(f + self._forget_bias)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.concat_w_proj->tensorflow.python.ops.variable_scope.get_variable('projection_weights', [self._num_units, self._num_proj], dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.m->tensorflow.python.ops.clip_ops.clip_by_value(m, -self._proj_clip, self._proj_clip)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.freq_inputs->self._make_tf_features(inputs)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.w_i_diag->tensorflow.python.ops.variable_scope.get_variable('W_I_diag', shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.m_prev_freq->tensorflow.python.ops.array_ops.zeros([batch_size, self._num_units], dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.(i, j, f, o)->tensorflow.python.ops.array_ops.split(value=concat, num_or_size_splits=4, axis=1)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.c->tensorflow.python.ops.clip_ops.clip_by_value(c, -self._cell_clip, self._cell_clip)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.state_out->self._state_tuple_type(*fwd_state_out_lst + bwd_state_out_lst)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.m_out->tensorflow.python.ops.array_ops.concat(fwd_m_out_lst + bwd_m_out_lst, 1)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.cur_input->tensorflow.python.ops.array_ops.slice(inputs, [0, start_index + slice_offset + f * self._frequency_skip], [-1, self._feature_size])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.self._state_tuple_type->collections.namedtuple('BidirectionalGridLSTMStateTuple', state_names.strip(','))
A:tensorflow.contrib.rnn.python.ops.rnn_cell.self._state_size->tensorflow.contrib.rnn.python.ops.core_rnn_cell.LSTMStateTuple(num_units, num_units)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.batch_size->int(inputs.get_shape()[0])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.(m_out_lst_current, state_out_lst_current)->self._compute(freq_inputs[block], block, state, batch_size, state_is_tuple=self._state_is_tuple)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.concat_w_f->_get_concat_variable('W_f_%d' % block, [actual_input_size + 2 * self._num_units, num_gates * self._num_units], dtype, self._num_unit_shards)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.b_f->tensorflow.python.ops.variable_scope.get_variable('B_f_%d' % block, shape=[num_gates * self._num_units], initializer=init_ops.zeros_initializer(), dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.concat_w_t->_get_concat_variable('W_t_%d' % block, [actual_input_size + 2 * self._num_units, num_gates * self._num_units], dtype, self._num_unit_shards)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.b_t->tensorflow.python.ops.variable_scope.get_variable('B_t_%d' % block, shape=[num_gates * self._num_units], initializer=init_ops.zeros_initializer(), dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.w_f_diag_freqf->tensorflow.python.ops.variable_scope.get_variable('W_F_diag_freqf_%d' % block, shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.w_f_diag_freqt->tensorflow.python.ops.variable_scope.get_variable('W_F_diag_freqt_%d' % block, shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.w_i_diag_freqf->tensorflow.python.ops.variable_scope.get_variable('W_I_diag_freqf_%d' % block, shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.w_i_diag_freqt->tensorflow.python.ops.variable_scope.get_variable('W_I_diag_freqt_%d' % block, shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.w_o_diag_freqf->tensorflow.python.ops.variable_scope.get_variable('W_O_diag_freqf_%d' % block, shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.w_o_diag_freqt->tensorflow.python.ops.variable_scope.get_variable('W_O_diag_freqt_%d' % block, shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.w_f_diag_timef->tensorflow.python.ops.variable_scope.get_variable('W_F_diag_timef_%d' % block, shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.w_f_diag_timet->tensorflow.python.ops.variable_scope.get_variable('W_F_diag_timet_%d' % block, shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.w_i_diag_timef->tensorflow.python.ops.variable_scope.get_variable('W_I_diag_timef_%d' % block, shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.w_i_diag_timet->tensorflow.python.ops.variable_scope.get_variable('W_I_diag_timet_%d' % block, shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.w_o_diag_timef->tensorflow.python.ops.variable_scope.get_variable('W_O_diag_timef_%d' % block, shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.w_o_diag_timet->tensorflow.python.ops.variable_scope.get_variable('W_O_diag_timet_%d' % block, shape=[self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.c_prev_freq->tensorflow.python.ops.array_ops.zeros([batch_size, self._num_units], dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.c_prev_time->tensorflow.python.ops.array_ops.slice(state, [0, 2 * freq_index * self._num_units], [-1, self._num_units])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.m_prev_time->tensorflow.python.ops.array_ops.slice(state, [0, (2 * freq_index + 1) * self._num_units], [-1, self._num_units])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.lstm_matrix_freq->tensorflow.python.ops.nn_ops.bias_add(math_ops.matmul(cell_inputs, concat_w_f), b_f)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.(i_freq, j_freq, o_freq)->tensorflow.python.ops.array_ops.split(value=lstm_matrix_freq, num_or_size_splits=num_gates, axis=1)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.(i_freq, j_freq, f_freq, o_freq)->tensorflow.python.ops.array_ops.split(value=lstm_matrix_freq, num_or_size_splits=num_gates, axis=1)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.lstm_matrix_time->tensorflow.python.ops.nn_ops.bias_add(math_ops.matmul(cell_inputs, concat_w_t), b_t)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.(i_time, j_time, o_time)->tensorflow.python.ops.array_ops.split(value=lstm_matrix_time, num_or_size_splits=num_gates, axis=1)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.(i_time, j_time, f_time, o_time)->tensorflow.python.ops.array_ops.split(value=lstm_matrix_time, num_or_size_splits=num_gates, axis=1)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.i_freq_g->sigmoid(i_freq)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.f_freq_g->sigmoid(f_freq + self._forget_bias)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.c_freq->tensorflow.python.ops.clip_ops.clip_by_value(c_freq, -self._cell_clip, self._cell_clip)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.i_time_g->sigmoid(i_time)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.f_time_g->sigmoid(f_time + self._forget_bias)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.c_time->tensorflow.python.ops.clip_ops.clip_by_value(c_time, -self._cell_clip, self._cell_clip)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.inputs->_linear([inputs, attns], input_size, True)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.self._backward_slice_offset->int(backward_slice_offset)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.fwd_inputs->self._make_tf_features(inputs)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.bwd_inputs->self._make_tf_features(inputs, self._backward_slice_offset)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.(fwd_m_out_lst_current, fwd_state_out_lst_current)->self._compute(fwd_inputs[block], block, state, batch_size, state_prefix='fwd_state', state_is_tuple=True)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.(bwd_m_out_lst_current, bwd_state_out_lst_current)->self._compute(bwd_inputs_reverse, block, state, batch_size, state_prefix='bwd_state', state_is_tuple=True)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.state->tensorflow.python.ops.array_ops.slice(states, [0, 0], [-1, self._cell.state_size])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.attns->tensorflow.python.ops.array_ops.slice(states, [0, self._cell.state_size], [-1, self._attn_size])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.attn_states->tensorflow.python.ops.array_ops.reshape(attn_states, [-1, self._attn_length, self._attn_size])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.(lstm_output, new_state)->self._cell(inputs, state)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.new_state_cat->tensorflow.python.ops.array_ops.concat(nest.flatten(new_state), 1)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.(new_attns, new_attn_states)->self._attention(new_state_cat, attn_states)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.output->_linear([lstm_output, new_attns], self._attn_size, True)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.new_attn_states->tensorflow.python.ops.array_ops.slice(attn_states, [0, 1, 0], [-1, -1, -1])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.new_state->tensorflow.contrib.rnn.python.ops.core_rnn_cell.LSTMStateTuple(new_c, new_m)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.k->tensorflow.python.ops.variable_scope.get_variable('attn_w', [1, 1, self._attn_size, self._attn_vec_size])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.v->tensorflow.python.ops.variable_scope.get_variable('attn_v', [self._attn_vec_size])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.hidden->tensorflow.python.ops.array_ops.reshape(attn_states, [-1, self._attn_length, 1, self._attn_size])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.hidden_features->conv2d(hidden, k, [1, 1, 1, 1], 'SAME')
A:tensorflow.contrib.rnn.python.ops.rnn_cell.y->tensorflow.python.ops.array_ops.reshape(y, [-1, 1, 1, self._attn_vec_size])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.s->reduce_sum(v * tanh(hidden_features + y), [2, 3])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.a->softmax(s)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.d->reduce_sum(array_ops.reshape(a, [-1, self._attn_length, 1, 1]) * hidden, [1, 2])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.new_attns->tensorflow.python.ops.array_ops.reshape(d, [-1, self._attn_size])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.gamma_init->tensorflow.python.ops.init_ops.constant_initializer(self._g)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.beta_init->tensorflow.python.ops.init_ops.constant_initializer(self._b)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.normalized->tensorflow.contrib.layers.python.layers.layers.layer_norm(inp, reuse=True, scope=scope)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.weights->tensorflow.python.ops.variable_scope.get_variable('weights', [proj_size, out_size])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.out->tensorflow.python.ops.nn_ops.bias_add(out, bias)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.bias->tensorflow.python.ops.variable_scope.get_variable('biases', [out_size])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.args->tensorflow.python.ops.array_ops.concat([inputs, h], 1)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.concat->self._linear(args)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.i->self._norm(i, 'input')
A:tensorflow.contrib.rnn.python.ops.rnn_cell.j->self._norm(j, 'transform')
A:tensorflow.contrib.rnn.python.ops.rnn_cell.f->self._norm(f, 'forget')
A:tensorflow.contrib.rnn.python.ops.rnn_cell.o->self._norm(o, 'output')
A:tensorflow.contrib.rnn.python.ops.rnn_cell.g->tensorflow.python.ops.nn_ops.dropout(g, self._keep_prob, seed=self._seed)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.new_c->self._norm(new_c, 'state')
A:tensorflow.contrib.rnn.python.ops.rnn_cell.concat_w_m->tensorflow.python.ops.variable_scope.get_variable('recurrent_weights', [num_proj, 8 * self._num_units], dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.concat_w_inputs->tensorflow.python.ops.variable_scope.get_variable('weights', [input_size.value, 8 * self._num_units], dtype)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.m_matrix->tensorflow.python.ops.nn_ops.bias_add(m_matrix, b)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.inputs_matrix->tensorflow.python.ops.math_ops.matmul(inputs, concat_w_inputs)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.m_matrix_splits->tensorflow.python.ops.array_ops.split(axis=1, num_or_size_splits=8, value=m_matrix)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.inputs_matrix_splits->tensorflow.python.ops.array_ops.split(axis=1, num_or_size_splits=8, value=inputs_matrix)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.layer1_0->sigmoid(inputs_matrix_splits[0] + m_matrix_splits[0])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.layer1_1->relu(inputs_matrix_splits[1] + m_matrix_splits[1])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.layer1_2->sigmoid(inputs_matrix_splits[2] + m_matrix_splits[2])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.layer1_3->relu(inputs_matrix_splits[3] * m_matrix_splits[3])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.layer1_4->tanh(inputs_matrix_splits[4] + m_matrix_splits[4])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.layer1_5->sigmoid(inputs_matrix_splits[5] + m_matrix_splits[5])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.layer1_6->tanh(inputs_matrix_splits[6] + m_matrix_splits[6])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.layer1_7->sigmoid(inputs_matrix_splits[7] + m_matrix_splits[7])
A:tensorflow.contrib.rnn.python.ops.rnn_cell.l2_0->tanh(l2_0 + c_prev)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.l2_1->tanh(layer1_2 + layer1_3)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.l2_2->tanh(layer1_4 * layer1_5)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.l2_3->sigmoid(layer1_6 + layer1_7)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.l3_1->tanh(l2_2 + l2_3)
A:tensorflow.contrib.rnn.python.ops.rnn_cell.new_m->tensorflow.python.ops.math_ops.matmul(new_m, concat_w_proj)
A:tensorflow.contrib.rnn.python.ops.rnn_cell._REGISTERED_OPS->tensorflow.python.framework.op_def_registry.get_registered_ops()
tensorflow.contrib.rnn.AttentionCellWrapper(self,cell,attn_length,attn_size=None,attn_vec_size=None,input_size=None,state_is_tuple=False,reuse=None)
tensorflow.contrib.rnn.AttentionCellWrapper._attention(self,query,attn_states)
tensorflow.contrib.rnn.AttentionCellWrapper.output_size(self)
tensorflow.contrib.rnn.AttentionCellWrapper.state_size(self)
tensorflow.contrib.rnn.BidirectionalGridLSTMCell(self,num_units,use_peepholes=False,share_time_frequency_weights=False,cell_clip=None,initializer=None,num_unit_shards=1,forget_bias=1.0,feature_size=None,frequency_skip=None,num_frequency_blocks=None,start_freqindex_list=None,end_freqindex_list=None,couple_input_forget_gates=False,backward_slice_offset=0,reuse=None)
tensorflow.contrib.rnn.CompiledWrapper(self,cell,compile_stateful=False)
tensorflow.contrib.rnn.CompiledWrapper.output_size(self)
tensorflow.contrib.rnn.CompiledWrapper.state_size(self)
tensorflow.contrib.rnn.CompiledWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.CoupledInputForgetGateLSTMCell(self,num_units,use_peepholes=False,initializer=None,num_proj=None,proj_clip=None,num_unit_shards=1,num_proj_shards=1,forget_bias=1.0,state_is_tuple=False,activation=math_ops.tanh,reuse=None)
tensorflow.contrib.rnn.CoupledInputForgetGateLSTMCell.output_size(self)
tensorflow.contrib.rnn.CoupledInputForgetGateLSTMCell.state_size(self)
tensorflow.contrib.rnn.GridLSTMCell(self,num_units,use_peepholes=False,share_time_frequency_weights=False,cell_clip=None,initializer=None,num_unit_shards=1,forget_bias=1.0,feature_size=None,frequency_skip=None,num_frequency_blocks=None,start_freqindex_list=None,end_freqindex_list=None,couple_input_forget_gates=False,state_is_tuple=False,reuse=None)
tensorflow.contrib.rnn.GridLSTMCell._compute(self,freq_inputs,block,state,batch_size,state_prefix='state',state_is_tuple=True)
tensorflow.contrib.rnn.GridLSTMCell._make_tf_features(self,input_feat,slice_offset=0)
tensorflow.contrib.rnn.GridLSTMCell.output_size(self)
tensorflow.contrib.rnn.GridLSTMCell.state_size(self)
tensorflow.contrib.rnn.GridLSTMCell.state_tuple_type(self)
tensorflow.contrib.rnn.LayerNormBasicLSTMCell(self,num_units,forget_bias=1.0,input_size=None,activation=math_ops.tanh,layer_norm=True,norm_gain=1.0,norm_shift=0.0,dropout_keep_prob=1.0,dropout_prob_seed=None,reuse=None)
tensorflow.contrib.rnn.LayerNormBasicLSTMCell._linear(self,args)
tensorflow.contrib.rnn.LayerNormBasicLSTMCell._norm(self,inp,scope)
tensorflow.contrib.rnn.LayerNormBasicLSTMCell.output_size(self)
tensorflow.contrib.rnn.LayerNormBasicLSTMCell.state_size(self)
tensorflow.contrib.rnn.NASCell(self,num_units,num_proj=None,use_biases=False,reuse=None)
tensorflow.contrib.rnn.NASCell.output_size(self)
tensorflow.contrib.rnn.NASCell.state_size(self)
tensorflow.contrib.rnn.TimeFreqLSTMCell(self,num_units,use_peepholes=False,cell_clip=None,initializer=None,num_unit_shards=1,forget_bias=1.0,feature_size=None,frequency_skip=None,reuse=None)
tensorflow.contrib.rnn.TimeFreqLSTMCell._make_tf_features(self,input_feat)
tensorflow.contrib.rnn.TimeFreqLSTMCell.output_size(self)
tensorflow.contrib.rnn.TimeFreqLSTMCell.state_size(self)
tensorflow.contrib.rnn._get_concat_variable(name,shape,dtype,num_shards)
tensorflow.contrib.rnn._get_sharded_variable(name,shape,dtype,num_shards)
tensorflow.contrib.rnn.python.ops.rnn_cell.AttentionCellWrapper(self,cell,attn_length,attn_size=None,attn_vec_size=None,input_size=None,state_is_tuple=False,reuse=None)
tensorflow.contrib.rnn.python.ops.rnn_cell.AttentionCellWrapper.__init__(self,cell,attn_length,attn_size=None,attn_vec_size=None,input_size=None,state_is_tuple=False,reuse=None)
tensorflow.contrib.rnn.python.ops.rnn_cell.AttentionCellWrapper._attention(self,query,attn_states)
tensorflow.contrib.rnn.python.ops.rnn_cell.AttentionCellWrapper.output_size(self)
tensorflow.contrib.rnn.python.ops.rnn_cell.AttentionCellWrapper.state_size(self)
tensorflow.contrib.rnn.python.ops.rnn_cell.BidirectionalGridLSTMCell(self,num_units,use_peepholes=False,share_time_frequency_weights=False,cell_clip=None,initializer=None,num_unit_shards=1,forget_bias=1.0,feature_size=None,frequency_skip=None,num_frequency_blocks=None,start_freqindex_list=None,end_freqindex_list=None,couple_input_forget_gates=False,backward_slice_offset=0,reuse=None)
tensorflow.contrib.rnn.python.ops.rnn_cell.BidirectionalGridLSTMCell.__init__(self,num_units,use_peepholes=False,share_time_frequency_weights=False,cell_clip=None,initializer=None,num_unit_shards=1,forget_bias=1.0,feature_size=None,frequency_skip=None,num_frequency_blocks=None,start_freqindex_list=None,end_freqindex_list=None,couple_input_forget_gates=False,backward_slice_offset=0,reuse=None)
tensorflow.contrib.rnn.python.ops.rnn_cell.CompiledWrapper(self,cell,compile_stateful=False)
tensorflow.contrib.rnn.python.ops.rnn_cell.CompiledWrapper.__init__(self,cell,compile_stateful=False)
tensorflow.contrib.rnn.python.ops.rnn_cell.CompiledWrapper.output_size(self)
tensorflow.contrib.rnn.python.ops.rnn_cell.CompiledWrapper.state_size(self)
tensorflow.contrib.rnn.python.ops.rnn_cell.CompiledWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.rnn.python.ops.rnn_cell.CoupledInputForgetGateLSTMCell(self,num_units,use_peepholes=False,initializer=None,num_proj=None,proj_clip=None,num_unit_shards=1,num_proj_shards=1,forget_bias=1.0,state_is_tuple=False,activation=math_ops.tanh,reuse=None)
tensorflow.contrib.rnn.python.ops.rnn_cell.CoupledInputForgetGateLSTMCell.__init__(self,num_units,use_peepholes=False,initializer=None,num_proj=None,proj_clip=None,num_unit_shards=1,num_proj_shards=1,forget_bias=1.0,state_is_tuple=False,activation=math_ops.tanh,reuse=None)
tensorflow.contrib.rnn.python.ops.rnn_cell.CoupledInputForgetGateLSTMCell.output_size(self)
tensorflow.contrib.rnn.python.ops.rnn_cell.CoupledInputForgetGateLSTMCell.state_size(self)
tensorflow.contrib.rnn.python.ops.rnn_cell.GridLSTMCell(self,num_units,use_peepholes=False,share_time_frequency_weights=False,cell_clip=None,initializer=None,num_unit_shards=1,forget_bias=1.0,feature_size=None,frequency_skip=None,num_frequency_blocks=None,start_freqindex_list=None,end_freqindex_list=None,couple_input_forget_gates=False,state_is_tuple=False,reuse=None)
tensorflow.contrib.rnn.python.ops.rnn_cell.GridLSTMCell.__init__(self,num_units,use_peepholes=False,share_time_frequency_weights=False,cell_clip=None,initializer=None,num_unit_shards=1,forget_bias=1.0,feature_size=None,frequency_skip=None,num_frequency_blocks=None,start_freqindex_list=None,end_freqindex_list=None,couple_input_forget_gates=False,state_is_tuple=False,reuse=None)
tensorflow.contrib.rnn.python.ops.rnn_cell.GridLSTMCell._compute(self,freq_inputs,block,state,batch_size,state_prefix='state',state_is_tuple=True)
tensorflow.contrib.rnn.python.ops.rnn_cell.GridLSTMCell._make_tf_features(self,input_feat,slice_offset=0)
tensorflow.contrib.rnn.python.ops.rnn_cell.GridLSTMCell.output_size(self)
tensorflow.contrib.rnn.python.ops.rnn_cell.GridLSTMCell.state_size(self)
tensorflow.contrib.rnn.python.ops.rnn_cell.GridLSTMCell.state_tuple_type(self)
tensorflow.contrib.rnn.python.ops.rnn_cell.LayerNormBasicLSTMCell(self,num_units,forget_bias=1.0,input_size=None,activation=math_ops.tanh,layer_norm=True,norm_gain=1.0,norm_shift=0.0,dropout_keep_prob=1.0,dropout_prob_seed=None,reuse=None)
tensorflow.contrib.rnn.python.ops.rnn_cell.LayerNormBasicLSTMCell.__init__(self,num_units,forget_bias=1.0,input_size=None,activation=math_ops.tanh,layer_norm=True,norm_gain=1.0,norm_shift=0.0,dropout_keep_prob=1.0,dropout_prob_seed=None,reuse=None)
tensorflow.contrib.rnn.python.ops.rnn_cell.LayerNormBasicLSTMCell._linear(self,args)
tensorflow.contrib.rnn.python.ops.rnn_cell.LayerNormBasicLSTMCell._norm(self,inp,scope)
tensorflow.contrib.rnn.python.ops.rnn_cell.LayerNormBasicLSTMCell.output_size(self)
tensorflow.contrib.rnn.python.ops.rnn_cell.LayerNormBasicLSTMCell.state_size(self)
tensorflow.contrib.rnn.python.ops.rnn_cell.NASCell(self,num_units,num_proj=None,use_biases=False,reuse=None)
tensorflow.contrib.rnn.python.ops.rnn_cell.NASCell.__init__(self,num_units,num_proj=None,use_biases=False,reuse=None)
tensorflow.contrib.rnn.python.ops.rnn_cell.NASCell.output_size(self)
tensorflow.contrib.rnn.python.ops.rnn_cell.NASCell.state_size(self)
tensorflow.contrib.rnn.python.ops.rnn_cell.TimeFreqLSTMCell(self,num_units,use_peepholes=False,cell_clip=None,initializer=None,num_unit_shards=1,forget_bias=1.0,feature_size=None,frequency_skip=None,reuse=None)
tensorflow.contrib.rnn.python.ops.rnn_cell.TimeFreqLSTMCell.__init__(self,num_units,use_peepholes=False,cell_clip=None,initializer=None,num_unit_shards=1,forget_bias=1.0,feature_size=None,frequency_skip=None,reuse=None)
tensorflow.contrib.rnn.python.ops.rnn_cell.TimeFreqLSTMCell._make_tf_features(self,input_feat)
tensorflow.contrib.rnn.python.ops.rnn_cell.TimeFreqLSTMCell.output_size(self)
tensorflow.contrib.rnn.python.ops.rnn_cell.TimeFreqLSTMCell.state_size(self)
tensorflow.contrib.rnn.python.ops.rnn_cell._get_concat_variable(name,shape,dtype,num_shards)
tensorflow.contrib.rnn.python.ops.rnn_cell._get_sharded_variable(name,shape,dtype,num_shards)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/rnn/python/ops/fused_rnn_cell.py----------------------------------------
A:tensorflow.contrib.rnn.python.ops.fused_rnn_cell.is_list->isinstance(inputs, list)
A:tensorflow.contrib.rnn.python.ops.fused_rnn_cell.inputs->self._reverse(inputs, sequence_length)
A:tensorflow.contrib.rnn.python.ops.fused_rnn_cell.(outputs, state)->self._cell(inputs, initial_state=initial_state, dtype=dtype, sequence_length=sequence_length, scope=scope)
A:tensorflow.contrib.rnn.python.ops.fused_rnn_cell.outputs->self._reverse(outputs, sequence_length)
tensorflow.contrib.rnn.FusedRNNCell(self,inputs,initial_state=None,dtype=None,sequence_length=None,scope=None)
tensorflow.contrib.rnn.FusedRNNCellAdaptor(self,cell,use_dynamic_rnn=False)
tensorflow.contrib.rnn.TimeReversedFusedRNN(self,cell)
tensorflow.contrib.rnn.TimeReversedFusedRNN._reverse(self,t,lengths)
tensorflow.contrib.rnn.python.ops.fused_rnn_cell.FusedRNNCell(self,inputs,initial_state=None,dtype=None,sequence_length=None,scope=None)
tensorflow.contrib.rnn.python.ops.fused_rnn_cell.FusedRNNCell.__call__(self,inputs,initial_state=None,dtype=None,sequence_length=None,scope=None)
tensorflow.contrib.rnn.python.ops.fused_rnn_cell.FusedRNNCellAdaptor(self,cell,use_dynamic_rnn=False)
tensorflow.contrib.rnn.python.ops.fused_rnn_cell.FusedRNNCellAdaptor.__init__(self,cell,use_dynamic_rnn=False)
tensorflow.contrib.rnn.python.ops.fused_rnn_cell.TimeReversedFusedRNN(self,cell)
tensorflow.contrib.rnn.python.ops.fused_rnn_cell.TimeReversedFusedRNN.__init__(self,cell)
tensorflow.contrib.rnn.python.ops.fused_rnn_cell.TimeReversedFusedRNN._reverse(self,t,lengths)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/rnn/python/ops/core_rnn.py----------------------------------------
A:tensorflow.contrib.rnn.python.ops.core_rnn.input_shape->flat_input.get_shape().with_rank_at_least(2)
A:tensorflow.contrib.rnn.python.ops.core_rnn.flat_inputs->tensorflow.python.util.nest.flatten(inputs)
A:tensorflow.contrib.rnn.python.ops.core_rnn.state->cell.zero_state(batch_size, dtype)
A:tensorflow.contrib.rnn.python.ops.core_rnn.sequence_length->tensorflow.python.ops.math_ops.to_int32(sequence_length)
A:tensorflow.contrib.rnn.python.ops.core_rnn.size->_state_size_with_prefix(output_size, prefix=[batch_size])
A:tensorflow.contrib.rnn.python.ops.core_rnn.output->tensorflow.python.ops.array_ops.zeros(array_ops.stack(size), _infer_state_dtype(dtype, state))
A:tensorflow.contrib.rnn.python.ops.core_rnn.shape->_state_size_with_prefix(output_size, prefix=[fixed_batch_size.value])
A:tensorflow.contrib.rnn.python.ops.core_rnn.flat_output_size->tensorflow.python.util.nest.flatten(output_size)
A:tensorflow.contrib.rnn.python.ops.core_rnn.flat_zero_output->tuple((_create_zero_output(size) for size in flat_output_size))
A:tensorflow.contrib.rnn.python.ops.core_rnn.zero_output->tensorflow.python.util.nest.pack_sequence_as(structure=output_size, flat_sequence=flat_zero_output)
A:tensorflow.contrib.rnn.python.ops.core_rnn.min_sequence_length->tensorflow.python.ops.math_ops.reduce_min(sequence_length)
A:tensorflow.contrib.rnn.python.ops.core_rnn.max_sequence_length->tensorflow.python.ops.math_ops.reduce_max(sequence_length)
A:tensorflow.contrib.rnn.python.ops.core_rnn.(output, state)->call_cell()
A:tensorflow.contrib.rnn.python.ops.core_rnn.state_is_tuple->tensorflow.python.util.nest.is_sequence(state_size)
A:tensorflow.contrib.rnn.python.ops.core_rnn.state_name_tuple->tensorflow.python.util.nest.is_sequence(state_name)
A:tensorflow.contrib.rnn.python.ops.core_rnn.state_name_flat->tensorflow.python.util.nest.flatten(state_name)
A:tensorflow.contrib.rnn.python.ops.core_rnn.state_size_flat->tensorflow.python.util.nest.flatten(state_size)
A:tensorflow.contrib.rnn.python.ops.core_rnn.initial_state->state_saver.state(state_name)
A:tensorflow.contrib.rnn.python.ops.core_rnn.(outputs, state)->static_rnn(cell, inputs, initial_state=initial_state, sequence_length=sequence_length, scope=scope)
A:tensorflow.contrib.rnn.python.ops.core_rnn.flat_state->tensorflow.python.util.nest.flatten(state)
A:tensorflow.contrib.rnn.python.ops.core_rnn.state_name->tensorflow.python.util.nest.flatten(state_name)
A:tensorflow.contrib.rnn.python.ops.core_rnn.flat_last_output->tensorflow.python.util.nest.flatten(last_output)
A:tensorflow.contrib.rnn.python.ops.core_rnn.outputs[-1]->tensorflow.python.util.nest.pack_sequence_as(structure=last_output, flat_sequence=flat_last_output)
A:tensorflow.contrib.rnn.python.ops.core_rnn.(output_fw, output_state_fw)->static_rnn(cell_fw, inputs, initial_state_fw, dtype, sequence_length, scope=fw_scope)
A:tensorflow.contrib.rnn.python.ops.core_rnn.reversed_inputs->_reverse_seq(inputs, sequence_length)
A:tensorflow.contrib.rnn.python.ops.core_rnn.(tmp, output_state_bw)->static_rnn(cell_bw, reversed_inputs, initial_state_bw, dtype, sequence_length, scope=bw_scope)
A:tensorflow.contrib.rnn.python.ops.core_rnn.output_bw->_reverse_seq(tmp, sequence_length)
A:tensorflow.contrib.rnn.python.ops.core_rnn.flat_output_fw->tensorflow.python.util.nest.flatten(output_fw)
A:tensorflow.contrib.rnn.python.ops.core_rnn.flat_output_bw->tensorflow.python.util.nest.flatten(output_bw)
A:tensorflow.contrib.rnn.python.ops.core_rnn.flat_outputs->tuple((array_ops.concat([fw, bw], 1) for (fw, bw) in zip(flat_output_fw, flat_output_bw)))
A:tensorflow.contrib.rnn.python.ops.core_rnn.outputs->tensorflow.python.util.nest.pack_sequence_as(structure=output_fw, flat_sequence=flat_outputs)
tensorflow.contrib.rnn.python.ops.core_rnn.static_bidirectional_rnn(cell_fw,cell_bw,inputs,initial_state_fw=None,initial_state_bw=None,dtype=None,sequence_length=None,scope=None)
tensorflow.contrib.rnn.python.ops.core_rnn.static_rnn(cell,inputs,initial_state=None,dtype=None,sequence_length=None,scope=None)
tensorflow.contrib.rnn.python.ops.core_rnn.static_state_saving_rnn(cell,inputs,state_saver,state_name,sequence_length=None,scope=None)
tensorflow.contrib.rnn.static_bidirectional_rnn(cell_fw,cell_bw,inputs,initial_state_fw=None,initial_state_bw=None,dtype=None,sequence_length=None,scope=None)
tensorflow.contrib.rnn.static_rnn(cell,inputs,initial_state=None,dtype=None,sequence_length=None,scope=None)
tensorflow.contrib.rnn.static_state_saving_rnn(cell,inputs,state_saver,state_name,sequence_length=None,scope=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/rnn/python/ops/lstm_ops.py----------------------------------------
A:tensorflow.contrib.rnn.python.ops.lstm_ops._lstm_ops_so->tensorflow.contrib.util.loader.load_op_library(resource_loader.get_path_to_datafile('_lstm_ops.so'))
A:tensorflow.contrib.rnn.python.ops.lstm_ops.wci->tensorflow.python.ops.variable_scope.get_variable('w_i_diag', [self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.zero_state->tensorflow.python.ops.array_ops.constant(0, dtype=dtypes.float32, shape=[batch_size, cell_size])
A:tensorflow.contrib.rnn.python.ops.lstm_ops.(i, cs, f, o, ci, co, h)->tensorflow.contrib.rnn.ops.gen_lstm_ops.block_lstm(seq_len_max=seq_len_max, x=array_ops.stack(x), cs_prev=cs_prev, h_prev=h_prev, w=w, wci=wci, wco=wco, wcf=wcf, b=b, forget_bias=forget_bias, cell_clip=cell_clip, name=name, use_peephole=use_peephole)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.(cs_prev_grad, dicfo, wci_grad, wcf_grad, wco_grad)->tensorflow.contrib.rnn.ops.gen_lstm_ops.lstm_block_cell_grad(x, cs_prev, h_prev, w, wci, wcf, wco, b, i, cs, f, o, ci, co, cs_grad, h_grad, use_peephole=op.get_attr('use_peephole'))
A:tensorflow.contrib.rnn.python.ops.lstm_ops.xh_grad->tensorflow.python.ops.math_ops.matmul(dicfo, w, transpose_b=True)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.x_grad->tensorflow.python.ops.array_ops.slice(xh_grad, (0, 0), (batch_size, input_size))
A:tensorflow.contrib.rnn.python.ops.lstm_ops.h_prev_grad->tensorflow.python.ops.array_ops.slice(xh_grad, (0, input_size), (batch_size, cell_size))
A:tensorflow.contrib.rnn.python.ops.lstm_ops.xh->tensorflow.python.ops.array_ops.concat([x, h_prev], 1)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.w_grad->tensorflow.python.ops.math_ops.matmul(xh, dicfo, transpose_a=True)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.b_grad->tensorflow.python.ops.nn_ops.bias_add_grad(dicfo)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.(x_grad, cs_prev_grad, h_prev_grad, w_grad, wci_grad, wco_grad, wcf_grad, b_grad)->tensorflow.contrib.rnn.ops.gen_lstm_ops.block_lstm_grad(seq_len_max, x, cs_prev, h_prev, w, wci, wco, wcf, b, i, cs, f, o, ci, co, h, cs_grad, h_grad, use_peephole=op.get_attr('use_peephole'))
A:tensorflow.contrib.rnn.python.ops.lstm_ops.x_shape->x.get_shape().with_rank(2)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.w->tensorflow.python.ops.variable_scope.get_variable('weights', [input_size + self._num_units, self._num_units * 4], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.b->tensorflow.python.ops.variable_scope.get_variable('biases', [w.get_shape().with_rank(2)[1]], initializer=init_ops.constant_initializer(0.0), dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.wco->tensorflow.python.ops.variable_scope.get_variable('w_o_diag', [self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.wcf->tensorflow.python.ops.variable_scope.get_variable('w_f_diag', [self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.wciwcowcf->tensorflow.python.ops.array_ops.zeros([self._num_units], dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.(_, cs, _, _, _, _, h)->tensorflow.contrib.rnn.ops.gen_lstm_ops.block_lstm(seq_len_max=max_seq_len, x=inputs, cs_prev=initial_cell_state, h_prev=initial_output, w=w, wci=wci, wco=wco, wcf=wcf, b=b, forget_bias=self._forget_bias, cell_clip=self._cell_clip, use_peephole=self._use_peephole)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.new_state->tensorflow.contrib.rnn.python.ops.core_rnn_cell.LSTMStateTuple(cs, h)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.is_list->isinstance(inputs, list)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.inputs->tensorflow.python.ops.array_ops.stack(inputs)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.inputs_shape->tensorflow.python.ops.array_ops.stack(inputs).get_shape().with_rank(3)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.z->tensorflow.python.ops.array_ops.zeros(array_ops.stack([batch_size, self.num_units]), dtype=dtype)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.sequence_length->tensorflow.python.framework.ops.convert_to_tensor(sequence_length)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.(cell_states, outputs)->self._call_cell(inputs, initial_cell_state, initial_output, dtype, sequence_length)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.mask->tensorflow.python.ops.array_ops.tile(array_ops.expand_dims(mask, [-1]), [1, 1, self.num_units])
A:tensorflow.contrib.rnn.python.ops.lstm_ops.mod_cell_states->tensorflow.python.ops.array_ops.concat([array_ops.expand_dims(initial_cell_state, [0]), cell_states], 0)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.mod_outputs->tensorflow.python.ops.array_ops.concat([array_ops.expand_dims(initial_output, [0]), outputs], 0)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.final_cell_state->self._gather_states(mod_cell_states, sequence_length, batch_size)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.final_output->self._gather_states(mod_outputs, sequence_length, batch_size)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.outputs->tensorflow.python.ops.array_ops.unstack(outputs)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.final_state->tensorflow.contrib.rnn.python.ops.core_rnn_cell.LSTMStateTuple(final_cell_state, final_output)
A:tensorflow.contrib.rnn.python.ops.lstm_ops.max_seq_len->tensorflow.python.ops.math_ops.to_int64(math_ops.reduce_max(sequence_length))
tensorflow.contrib.rnn.LSTMBlockCell(self,num_units,forget_bias=1.0,use_peephole=False)
tensorflow.contrib.rnn.LSTMBlockCell.output_size(self)
tensorflow.contrib.rnn.LSTMBlockCell.state_size(self)
tensorflow.contrib.rnn.LSTMBlockFusedCell(self,num_units,forget_bias=1.0,cell_clip=None,use_peephole=False)
tensorflow.contrib.rnn.LSTMBlockFusedCell._call_cell(self,inputs,initial_cell_state,initial_output,dtype,sequence_length)
tensorflow.contrib.rnn.LSTMBlockFusedCell.num_units(self)
tensorflow.contrib.rnn.LSTMBlockWrapper(self,inputs,initial_state=None,dtype=None,sequence_length=None,scope=None)
tensorflow.contrib.rnn.LSTMBlockWrapper._call_cell(self,inputs,initial_cell_state,initial_output,dtype,sequence_length)
tensorflow.contrib.rnn.LSTMBlockWrapper._gather_states(self,data,indices,batch_size)
tensorflow.contrib.rnn.LSTMBlockWrapper.num_units(self)
tensorflow.contrib.rnn._BlockLSTMGrad(op,*grad)
tensorflow.contrib.rnn._LSTMBlockCellGrad(op,*grad)
tensorflow.contrib.rnn._block_lstm(seq_len_max,x,w,b,cs_prev=None,h_prev=None,wci=None,wcf=None,wco=None,forget_bias=None,cell_clip=None,use_peephole=None,name=None)
tensorflow.contrib.rnn._lstm_block_cell(x,cs_prev,h_prev,w,b,wci=None,wcf=None,wco=None,forget_bias=None,cell_clip=None,use_peephole=None,name=None)
tensorflow.contrib.rnn.python.ops.lstm_ops.LSTMBlockCell(self,num_units,forget_bias=1.0,use_peephole=False)
tensorflow.contrib.rnn.python.ops.lstm_ops.LSTMBlockCell.__init__(self,num_units,forget_bias=1.0,use_peephole=False)
tensorflow.contrib.rnn.python.ops.lstm_ops.LSTMBlockCell.output_size(self)
tensorflow.contrib.rnn.python.ops.lstm_ops.LSTMBlockCell.state_size(self)
tensorflow.contrib.rnn.python.ops.lstm_ops.LSTMBlockFusedCell(self,num_units,forget_bias=1.0,cell_clip=None,use_peephole=False)
tensorflow.contrib.rnn.python.ops.lstm_ops.LSTMBlockFusedCell.__init__(self,num_units,forget_bias=1.0,cell_clip=None,use_peephole=False)
tensorflow.contrib.rnn.python.ops.lstm_ops.LSTMBlockFusedCell._call_cell(self,inputs,initial_cell_state,initial_output,dtype,sequence_length)
tensorflow.contrib.rnn.python.ops.lstm_ops.LSTMBlockFusedCell.num_units(self)
tensorflow.contrib.rnn.python.ops.lstm_ops.LSTMBlockWrapper(self,inputs,initial_state=None,dtype=None,sequence_length=None,scope=None)
tensorflow.contrib.rnn.python.ops.lstm_ops.LSTMBlockWrapper.__call__(self,inputs,initial_state=None,dtype=None,sequence_length=None,scope=None)
tensorflow.contrib.rnn.python.ops.lstm_ops.LSTMBlockWrapper._call_cell(self,inputs,initial_cell_state,initial_output,dtype,sequence_length)
tensorflow.contrib.rnn.python.ops.lstm_ops.LSTMBlockWrapper._gather_states(self,data,indices,batch_size)
tensorflow.contrib.rnn.python.ops.lstm_ops.LSTMBlockWrapper.num_units(self)
tensorflow.contrib.rnn.python.ops.lstm_ops._BlockLSTMGrad(op,*grad)
tensorflow.contrib.rnn.python.ops.lstm_ops._LSTMBlockCellGrad(op,*grad)
tensorflow.contrib.rnn.python.ops.lstm_ops._block_lstm(seq_len_max,x,w,b,cs_prev=None,h_prev=None,wci=None,wcf=None,wco=None,forget_bias=None,cell_clip=None,use_peephole=None,name=None)
tensorflow.contrib.rnn.python.ops.lstm_ops._lstm_block_cell(x,cs_prev,h_prev,w,b,wci=None,wcf=None,wco=None,forget_bias=None,cell_clip=None,use_peephole=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/rnn/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/rnn/ops/gen_lstm_ops.py----------------------------------------
A:tensorflow.contrib.rnn.ops.gen_lstm_ops._BlockLSTMOutput->collections.namedtuple('BlockLSTM', _block_lstm_outputs)
A:tensorflow.contrib.rnn.ops.gen_lstm_ops.result->_InitOpDefLibrary().apply_op('LSTMBlockCellGrad', x=x, cs_prev=cs_prev, h_prev=h_prev, w=w, wci=wci, wcf=wcf, wco=wco, b=b, i=i, cs=cs, f=f, o=o, ci=ci, co=co, cs_grad=cs_grad, h_grad=h_grad, use_peephole=use_peephole, name=name)
A:tensorflow.contrib.rnn.ops.gen_lstm_ops._BlockLSTMGradOutput->collections.namedtuple('BlockLSTMGrad', _block_lstm_grad_outputs)
A:tensorflow.contrib.rnn.ops.gen_lstm_ops._LSTMBlockCellOutput->collections.namedtuple('LSTMBlockCell', _lstm_block_cell_outputs)
A:tensorflow.contrib.rnn.ops.gen_lstm_ops._LSTMBlockCellGradOutput->collections.namedtuple('LSTMBlockCellGrad', _lstm_block_cell_grad_outputs)
A:tensorflow.contrib.rnn.ops.gen_lstm_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.rnn.ops.gen_lstm_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.rnn.ops.gen_lstm_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.rnn.ops.gen_lstm_ops._InitOpDefLibrary()
tensorflow.contrib.rnn.ops.gen_lstm_ops.block_lstm(seq_len_max,x,cs_prev,h_prev,w,wci,wcf,wco,b,forget_bias=None,cell_clip=None,use_peephole=None,name=None)
tensorflow.contrib.rnn.ops.gen_lstm_ops.block_lstm_grad(seq_len_max,x,cs_prev,h_prev,w,wci,wcf,wco,b,i,cs,f,o,ci,co,h,cs_grad,h_grad,use_peephole,name=None)
tensorflow.contrib.rnn.ops.gen_lstm_ops.lstm_block_cell(x,cs_prev,h_prev,w,wci,wcf,wco,b,forget_bias=None,cell_clip=None,use_peephole=None,name=None)
tensorflow.contrib.rnn.ops.gen_lstm_ops.lstm_block_cell_grad(x,cs_prev,h_prev,w,wci,wcf,wco,b,i,cs,f,o,ci,co,cs_grad,h_grad,use_peephole,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/rnn/ops/gen_gru_ops.py----------------------------------------
A:tensorflow.contrib.rnn.ops.gen_gru_ops._GRUBlockCellOutput->collections.namedtuple('GRUBlockCell', _gru_block_cell_outputs)
A:tensorflow.contrib.rnn.ops.gen_gru_ops.result->_InitOpDefLibrary().apply_op('GRUBlockCellGrad', x=x, h_prev=h_prev, w_ru=w_ru, w_c=w_c, b_ru=b_ru, b_c=b_c, r=r, u=u, c=c, d_h=d_h, name=name)
A:tensorflow.contrib.rnn.ops.gen_gru_ops._GRUBlockCellGradOutput->collections.namedtuple('GRUBlockCellGrad', _gru_block_cell_grad_outputs)
A:tensorflow.contrib.rnn.ops.gen_gru_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.rnn.ops.gen_gru_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.rnn.ops.gen_gru_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.rnn.ops.gen_gru_ops._InitOpDefLibrary()
tensorflow.contrib.rnn.ops.gen_gru_ops.gru_block_cell(x,h_prev,w_ru,w_c,b_ru,b_c,name=None)
tensorflow.contrib.rnn.ops.gen_gru_ops.gru_block_cell_grad(x,h_prev,w_ru,w_c,b_ru,b_c,r,u,c,d_h,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/image/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/image/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/image/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/image/python/ops/image_ops.py----------------------------------------
A:tensorflow.contrib.image.python.ops.image_ops._image_ops_so->tensorflow.contrib.util.loader.load_op_library(resource_loader.get_path_to_datafile('_image_ops.so'))
A:tensorflow.contrib.image.python.ops.image_ops._IMAGE_DTYPES->set([dtypes.uint8, dtypes.int32, dtypes.int64, dtypes.float32, dtypes.float64])
A:tensorflow.contrib.image.python.ops.image_ops.image_or_images->tensorflow.python.framework.ops.convert_to_tensor(images, name='images')
A:tensorflow.contrib.image.python.ops.image_ops.output->tensorflow.contrib.image.ops.gen_image_ops.image_projective_transform(images, transforms)
A:tensorflow.contrib.image.python.ops.image_ops.angle_or_angles->tensorflow.python.framework.ops.convert_to_tensor(angles, name='angles', dtype=dtypes.float32)
A:tensorflow.contrib.image.python.ops.image_ops.transform_or_transforms->tensorflow.python.framework.ops.convert_to_tensor(transforms, name='transforms', dtype=dtypes.float32)
A:tensorflow.contrib.image.python.ops.image_ops.composed->tensorflow.python.ops.math_ops.matmul(composed, _flat_transforms_to_matrices(tr))
A:tensorflow.contrib.image.python.ops.image_ops.transforms->tensorflow.python.ops.array_ops.reshape(transform_matrices, constant_op.constant([-1, 9]))
tensorflow.contrib.image.angles_to_projective_transforms(angles,image_height,image_width)
tensorflow.contrib.image.compose_transforms(*transforms)
tensorflow.contrib.image.ops.image_ops._flat_transforms_to_matrices(transforms)
tensorflow.contrib.image.ops.image_ops._transform_matrices_to_flat(transform_matrices)
tensorflow.contrib.image.python.ops.image_ops._flat_transforms_to_matrices(transforms)
tensorflow.contrib.image.python.ops.image_ops._transform_matrices_to_flat(transform_matrices)
tensorflow.contrib.image.python.ops.image_ops.angles_to_projective_transforms(angles,image_height,image_width)
tensorflow.contrib.image.python.ops.image_ops.compose_transforms(*transforms)
tensorflow.contrib.image.python.ops.image_ops.rotate(images,angles)
tensorflow.contrib.image.python.ops.image_ops.transform(images,transforms)
tensorflow.contrib.image.rotate(images,angles)
tensorflow.contrib.image.transform(images,transforms)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/image/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/image/ops/gen_image_ops.py----------------------------------------
A:tensorflow.contrib.image.ops.gen_image_ops.result->_InitOpDefLibrary().apply_op('ImageProjectiveTransform', images=images, transforms=transforms, name=name)
A:tensorflow.contrib.image.ops.gen_image_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.image.ops.gen_image_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.image.ops.gen_image_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.image.ops.gen_image_ops._InitOpDefLibrary()
tensorflow.contrib.image.ops.gen_image_ops.image_projective_transform(images,transforms,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/stat_summarizer/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/metrics/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/metrics/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/metrics/python/metrics/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/metrics/python/metrics/classification.py----------------------------------------
A:tensorflow.contrib.metrics.python.metrics.classification.is_correct->tensorflow.python.ops.math_ops.multiply(is_correct, weights)
A:tensorflow.contrib.metrics.python.metrics.classification.num_values->tensorflow.python.ops.math_ops.multiply(weights, array_ops.ones_like(is_correct))
tensorflow.contrib.metrics.accuracy(predictions,labels,weights=None,name=None)
tensorflow.contrib.metrics.python.metrics.classification.accuracy(predictions,labels,weights=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/metrics/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/metrics/python/ops/metric_ops.py----------------------------------------
A:tensorflow.contrib.metrics.python.ops.metric_ops.collections->list(collections or [])
A:tensorflow.contrib.metrics.python.ops.metric_ops.count->_create_local('count', [])
A:tensorflow.contrib.metrics.python.ops.metric_ops.values->tensorflow.python.ops.math_ops.multiply(values, weights)
A:tensorflow.contrib.metrics.python.ops.metric_ops.weights->tensorflow.python.ops.control_flow_ops.cond(math_ops.equal(array_ops.rank(weights), math_ops.add(array_ops.rank(predictions), 1)), lambda : array_ops.squeeze(weights, [-1]), lambda : weights)
A:tensorflow.contrib.metrics.python.ops.metric_ops.value_tensor->tensorflow.python.ops.array_ops.identity(count)
A:tensorflow.contrib.metrics.python.ops.metric_ops.update_op->_create_local('size', shape=[], dtype=dtypes.int32).assign(new_size)
A:tensorflow.contrib.metrics.python.ops.metric_ops.predictions->tensorflow.python.ops.math_ops.cast(predictions, dtype=dtypes.bool)
A:tensorflow.contrib.metrics.python.ops.metric_ops.labels->tensorflow.python.ops.math_ops.cast(labels, dtype=dtypes.bool)
A:tensorflow.contrib.metrics.python.ops.metric_ops.is_true_negative->tensorflow.python.ops.math_ops.to_float(math_ops.logical_and(label_is_neg, pred_is_neg))
A:tensorflow.contrib.metrics.python.ops.metric_ops.weights_shape->tensorflow.python.ops.control_flow_ops.cond(math_ops.equal(array_ops.rank(weights), math_ops.add(array_ops.rank(predictions), 1)), lambda : array_ops.squeeze(weights, [-1]), lambda : weights).get_shape()
A:tensorflow.contrib.metrics.python.ops.metric_ops.values_shape->tensorflow.python.ops.math_ops.multiply(values, weights).get_shape()
A:tensorflow.contrib.metrics.python.ops.metric_ops.(predictions, labels, weights)->_remove_squeezable_dimensions(predictions, labels, weights)
A:tensorflow.contrib.metrics.python.ops.metric_ops.num_thresholds->len(thresholds)
A:tensorflow.contrib.metrics.python.ops.metric_ops.predictions_2d->tensorflow.python.ops.array_ops.reshape(predictions, [-1, 1])
A:tensorflow.contrib.metrics.python.ops.metric_ops.labels_2d->tensorflow.python.ops.array_ops.reshape(math_ops.cast(labels, dtype=dtypes.bool), [1, -1])
A:tensorflow.contrib.metrics.python.ops.metric_ops.thresh_tiled->tensorflow.python.ops.array_ops.tile(array_ops.expand_dims(array_ops.constant(thresholds), [1]), array_ops.stack([1, num_predictions]))
A:tensorflow.contrib.metrics.python.ops.metric_ops.pred_is_pos->tensorflow.python.ops.math_ops.greater(array_ops.tile(array_ops.transpose(predictions_2d), [num_thresholds, 1]), thresh_tiled)
A:tensorflow.contrib.metrics.python.ops.metric_ops.pred_is_neg->tensorflow.python.ops.math_ops.logical_not(pred_is_pos)
A:tensorflow.contrib.metrics.python.ops.metric_ops.label_is_pos->tensorflow.python.ops.array_ops.tile(labels_2d, [num_thresholds, 1])
A:tensorflow.contrib.metrics.python.ops.metric_ops.label_is_neg->tensorflow.python.ops.math_ops.logical_not(label_is_pos)
A:tensorflow.contrib.metrics.python.ops.metric_ops.broadcast_weights->_broadcast_weights(math_ops.to_float(weights), predictions)
A:tensorflow.contrib.metrics.python.ops.metric_ops.weights_tiled->tensorflow.python.ops.array_ops.tile(array_ops.reshape(broadcast_weights, [1, -1]), [num_thresholds, 1])
A:tensorflow.contrib.metrics.python.ops.metric_ops.true_positives->_create_local('true_positives', shape=[num_thresholds])
A:tensorflow.contrib.metrics.python.ops.metric_ops.is_true_positive->tensorflow.python.ops.math_ops.to_float(math_ops.logical_and(label_is_pos, pred_is_pos))
A:tensorflow.contrib.metrics.python.ops.metric_ops.update_ops['tp']->tensorflow.python.ops.state_ops.assign_add(true_positives, math_ops.reduce_sum(is_true_positive, 1))
A:tensorflow.contrib.metrics.python.ops.metric_ops.false_negatives->_create_local('false_negatives', shape=[num_thresholds])
A:tensorflow.contrib.metrics.python.ops.metric_ops.is_false_negative->tensorflow.python.ops.math_ops.to_float(math_ops.logical_and(label_is_pos, pred_is_neg))
A:tensorflow.contrib.metrics.python.ops.metric_ops.update_ops['fn']->tensorflow.python.ops.state_ops.assign_add(false_negatives, math_ops.reduce_sum(is_false_negative, 1))
A:tensorflow.contrib.metrics.python.ops.metric_ops.true_negatives->_create_local('true_negatives', shape=[num_thresholds])
A:tensorflow.contrib.metrics.python.ops.metric_ops.update_ops['tn']->tensorflow.python.ops.state_ops.assign_add(true_negatives, math_ops.reduce_sum(is_true_negative, 1))
A:tensorflow.contrib.metrics.python.ops.metric_ops.false_positives->_create_local('false_positives', shape=[num_thresholds])
A:tensorflow.contrib.metrics.python.ops.metric_ops.is_false_positive->tensorflow.python.ops.math_ops.to_float(math_ops.logical_and(label_is_neg, pred_is_pos))
A:tensorflow.contrib.metrics.python.ops.metric_ops.update_ops['fp']->tensorflow.python.ops.state_ops.assign_add(false_positives, math_ops.reduce_sum(is_false_positive, 1))
A:tensorflow.contrib.metrics.python.ops.metric_ops.(values, update_ops)->_streaming_confusion_matrix_at_thresholds(predictions, labels, thresholds, weights=weights, includes=('tn',))
A:tensorflow.contrib.metrics.python.ops.metric_ops.in_top_k->tensorflow.python.ops.math_ops.to_float(nn.in_top_k(predictions, labels, k))
A:tensorflow.contrib.metrics.python.ops.metric_ops.default_name->_at_k_name('precision', class_id=class_id)
A:tensorflow.contrib.metrics.python.ops.metric_ops.mean_prediction->_create_local('mean_prediction', [])
A:tensorflow.contrib.metrics.python.ops.metric_ops.mean_label->_create_local('mean_label', [])
A:tensorflow.contrib.metrics.python.ops.metric_ops.comoment->_create_local('comoment', [])
A:tensorflow.contrib.metrics.python.ops.metric_ops.batch_count->tensorflow.python.ops.math_ops.reduce_sum(weights)
A:tensorflow.contrib.metrics.python.ops.metric_ops.weighted_predictions->tensorflow.python.ops.math_ops.multiply(predictions, weights)
A:tensorflow.contrib.metrics.python.ops.metric_ops.weighted_labels->tensorflow.python.ops.math_ops.multiply(labels, weights)
A:tensorflow.contrib.metrics.python.ops.metric_ops.update_count->tensorflow.python.ops.state_ops.assign_add(count, batch_count)
A:tensorflow.contrib.metrics.python.ops.metric_ops.batch_mean_prediction->_safe_div(math_ops.reduce_sum(weighted_predictions), batch_count, 'batch_mean_prediction')
A:tensorflow.contrib.metrics.python.ops.metric_ops.delta_mean_prediction->_safe_div((batch_mean_prediction - mean_prediction) * batch_count, update_count, 'delta_mean_prediction')
A:tensorflow.contrib.metrics.python.ops.metric_ops.update_mean_prediction->tensorflow.python.ops.state_ops.assign_add(mean_prediction, delta_mean_prediction)
A:tensorflow.contrib.metrics.python.ops.metric_ops.batch_mean_label->_safe_div(math_ops.reduce_sum(weighted_labels), batch_count, 'batch_mean_label')
A:tensorflow.contrib.metrics.python.ops.metric_ops.delta_mean_label->_safe_div((batch_mean_label - mean_label) * batch_count, update_count, 'delta_mean_label')
A:tensorflow.contrib.metrics.python.ops.metric_ops.update_mean_label->tensorflow.python.ops.state_ops.assign_add(mean_label, delta_mean_label)
A:tensorflow.contrib.metrics.python.ops.metric_ops.batch_comoment->tensorflow.python.ops.math_ops.reduce_sum(unweighted_batch_coresiduals * weights)
A:tensorflow.contrib.metrics.python.ops.metric_ops.update_comoment->tensorflow.python.ops.state_ops.assign_add(comoment, delta_comoment)
A:tensorflow.contrib.metrics.python.ops.metric_ops.covariance->_safe_div(comoment, count - 1, 'covariance')
A:tensorflow.contrib.metrics.python.ops.metric_ops.(cov, update_cov)->streaming_covariance(predictions, labels, weights=weights, name='covariance')
A:tensorflow.contrib.metrics.python.ops.metric_ops.(var_predictions, update_var_predictions)->streaming_covariance(predictions, predictions, weights=weights, name='variance_predictions')
A:tensorflow.contrib.metrics.python.ops.metric_ops.(var_labels, update_var_labels)->streaming_covariance(labels, labels, weights=weights, name='variance_labels')
A:tensorflow.contrib.metrics.python.ops.metric_ops.pearson_r->_safe_div(cov, math_ops.multiply(math_ops.sqrt(var_predictions), math_ops.sqrt(var_labels)), 'pearson_r')
A:tensorflow.contrib.metrics.python.ops.metric_ops.radial_diffs->tensorflow.python.ops.math_ops.reduce_sum(radial_diffs, reduction_indices=[dim], keep_dims=True)
A:tensorflow.contrib.metrics.python.ops.metric_ops.(mean_distance, update_op)->streaming_mean(radial_diffs, weights, None, None, name or 'mean_cosine_distance')
A:tensorflow.contrib.metrics.python.ops.metric_ops.mean_distance->tensorflow.python.ops.math_ops.subtract(1.0, mean_distance)
A:tensorflow.contrib.metrics.python.ops.metric_ops.exponent->tensorflow.python.ops.math_ops.ceil(math_ops.log(math_ops.cast(required_size, dtypes.float32)) / math_ops.log(math_ops.cast(growth_factor, dtypes.float32)))
A:tensorflow.contrib.metrics.python.ops.metric_ops.ndim->len(values_shape)
A:tensorflow.contrib.metrics.python.ops.metric_ops.array->_create_local('array', shape=init_shape, validate_shape=False, dtype=values.dtype)
A:tensorflow.contrib.metrics.python.ops.metric_ops.size->_create_local('size', shape=[], dtype=dtypes.int32)
A:tensorflow.contrib.metrics.python.ops.metric_ops.value->tensorflow.python.ops.array_ops.transpose(valid_array, perm, name='concat')
A:tensorflow.contrib.metrics.python.ops.metric_ops.batch_size->tensorflow.python.ops.math_ops.minimum(values_size, max_size - size)
A:tensorflow.contrib.metrics.python.ops.metric_ops.next_size->_next_array_size(new_size)
A:tensorflow.contrib.metrics.python.ops.metric_ops.next_shape->tensorflow.python.ops.array_ops.stack([next_size] + fixed_shape)
A:tensorflow.contrib.metrics.python.ops.metric_ops.new_value->tensorflow.python.ops.array_ops.zeros(next_shape, dtype=values.dtype)
A:tensorflow.contrib.metrics.python.ops.metric_ops.old_value->_create_local('array', shape=init_shape, validate_shape=False, dtype=values.dtype).value()
A:tensorflow.contrib.metrics.python.ops.metric_ops.assign_op->tensorflow.python.ops.state_ops.assign(array, new_value, validate_shape=False)
A:tensorflow.contrib.metrics.python.ops.metric_ops.copy_op->array[:size].assign(old_value[:size])
A:tensorflow.contrib.metrics.python.ops.metric_ops.maybe_reallocate_op->tensorflow.python.ops.control_flow_ops.cond(new_size > array_size, reallocate, control_flow_ops.no_op)
A:tensorflow.contrib.metrics.python.ops.metric_ops.append_values_op->array[size:new_size].assign(batch_values)
A:tensorflow.contrib.metrics.python.ops.metric_ops.(value_ops, update_ops)->zip(*names_to_tuples.values())
A:tensorflow.contrib.metrics.python.ops.metric_ops.metric_names->names_to_tuples.keys()
A:tensorflow.contrib.metrics.python.ops.metric_ops.(predictions, labels)->tensorflow.contrib.framework.python.framework.tensor_util.remove_squeezable_dimensions(predictions, labels)
A:tensorflow.contrib.metrics.python.ops.metric_ops.predictions_shape->tensorflow.python.ops.math_ops.cast(predictions, dtype=dtypes.bool).get_shape()
tensorflow.contrib.metrics.aggregate_metric_map(names_to_tuples)
tensorflow.contrib.metrics.aggregate_metrics(*value_update_tuples)
tensorflow.contrib.metrics.ops.metric_ops._assert_weights_rank(weights,values)
tensorflow.contrib.metrics.ops.metric_ops._at_k_name(name,k=None,class_id=None)
tensorflow.contrib.metrics.ops.metric_ops._broadcast_weights(weights,values)
tensorflow.contrib.metrics.ops.metric_ops._count_condition(values,weights=None,metrics_collections=None,updates_collections=None)
tensorflow.contrib.metrics.ops.metric_ops._create_local(name,shape,collections=None,validate_shape=True,dtype=dtypes.float32)
tensorflow.contrib.metrics.ops.metric_ops._next_array_size(required_size,growth_factor=1.5)
tensorflow.contrib.metrics.ops.metric_ops._remove_squeezable_dimensions(predictions,labels,weights)
tensorflow.contrib.metrics.ops.metric_ops._safe_div(numerator,denominator,name)
tensorflow.contrib.metrics.ops.metric_ops._streaming_confusion_matrix_at_thresholds(predictions,labels,thresholds,weights=None,includes=None)
tensorflow.contrib.metrics.python.ops.metric_ops._assert_weights_rank(weights,values)
tensorflow.contrib.metrics.python.ops.metric_ops._at_k_name(name,k=None,class_id=None)
tensorflow.contrib.metrics.python.ops.metric_ops._broadcast_weights(weights,values)
tensorflow.contrib.metrics.python.ops.metric_ops._count_condition(values,weights=None,metrics_collections=None,updates_collections=None)
tensorflow.contrib.metrics.python.ops.metric_ops._create_local(name,shape,collections=None,validate_shape=True,dtype=dtypes.float32)
tensorflow.contrib.metrics.python.ops.metric_ops._next_array_size(required_size,growth_factor=1.5)
tensorflow.contrib.metrics.python.ops.metric_ops._remove_squeezable_dimensions(predictions,labels,weights)
tensorflow.contrib.metrics.python.ops.metric_ops._safe_div(numerator,denominator,name)
tensorflow.contrib.metrics.python.ops.metric_ops._streaming_confusion_matrix_at_thresholds(predictions,labels,thresholds,weights=None,includes=None)
tensorflow.contrib.metrics.python.ops.metric_ops.aggregate_metric_map(names_to_tuples)
tensorflow.contrib.metrics.python.ops.metric_ops.aggregate_metrics(*value_update_tuples)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_accuracy(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_auc(predictions,labels,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,curve='ROC',name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_concat(values,axis=0,max_size=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_covariance(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_false_negatives(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_false_negatives_at_thresholds(predictions,labels,thresholds,weights=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_false_positives(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_false_positives_at_thresholds(predictions,labels,thresholds,weights=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_mean(values,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_mean_absolute_error(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_mean_cosine_distance(predictions,labels,dim,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_mean_iou(predictions,labels,num_classes,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_mean_relative_error(predictions,labels,normalizer,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_mean_squared_error(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_mean_tensor(values,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_pearson_correlation(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_percentage_less(values,threshold,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_precision(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_precision_at_thresholds(predictions,labels,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_recall(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_recall_at_k(predictions,labels,k,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_recall_at_thresholds(predictions,labels,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_root_mean_squared_error(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_sensitivity_at_specificity(predictions,labels,specificity,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_sparse_average_precision_at_k(predictions,labels,k,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_sparse_average_precision_at_top_k(top_k_predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_sparse_precision_at_k(predictions,labels,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_sparse_precision_at_top_k(top_k_predictions,labels,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_sparse_recall_at_k(predictions,labels,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_specificity_at_sensitivity(predictions,labels,sensitivity,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_true_negatives(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_true_negatives_at_thresholds(predictions,labels,thresholds,weights=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_true_positives(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.python.ops.metric_ops.streaming_true_positives_at_thresholds(predictions,labels,thresholds,weights=None)
tensorflow.contrib.metrics.streaming_accuracy(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_auc(predictions,labels,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,curve='ROC',name=None)
tensorflow.contrib.metrics.streaming_concat(values,axis=0,max_size=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_covariance(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_false_negatives(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_false_negatives_at_thresholds(predictions,labels,thresholds,weights=None)
tensorflow.contrib.metrics.streaming_false_positives(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_false_positives_at_thresholds(predictions,labels,thresholds,weights=None)
tensorflow.contrib.metrics.streaming_mean(values,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_mean_absolute_error(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_mean_cosine_distance(predictions,labels,dim,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_mean_iou(predictions,labels,num_classes,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_mean_relative_error(predictions,labels,normalizer,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_mean_squared_error(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_mean_tensor(values,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_pearson_correlation(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_percentage_less(values,threshold,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_precision(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_precision_at_thresholds(predictions,labels,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_recall(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_recall_at_k(predictions,labels,k,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_recall_at_thresholds(predictions,labels,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_root_mean_squared_error(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_sensitivity_at_specificity(predictions,labels,specificity,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_sparse_average_precision_at_k(predictions,labels,k,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_sparse_average_precision_at_top_k(top_k_predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_sparse_precision_at_k(predictions,labels,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_sparse_precision_at_top_k(top_k_predictions,labels,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_sparse_recall_at_k(predictions,labels,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_specificity_at_sensitivity(predictions,labels,sensitivity,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_true_negatives(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_true_negatives_at_thresholds(predictions,labels,thresholds,weights=None)
tensorflow.contrib.metrics.streaming_true_positives(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)
tensorflow.contrib.metrics.streaming_true_positives_at_thresholds(predictions,labels,thresholds,weights=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/metrics/python/ops/histogram_ops.py----------------------------------------
A:tensorflow.contrib.metrics.python.ops.histogram_ops.(scores, boolean_labels)->tensorflow.contrib.framework.python.framework.tensor_util.remove_squeezable_dimensions(scores, boolean_labels)
A:tensorflow.contrib.metrics.python.ops.histogram_ops.score_range->tensorflow.python.framework.ops.convert_to_tensor(score_range, name='score_range')
A:tensorflow.contrib.metrics.python.ops.histogram_ops.(boolean_labels, scores)->_check_labels_and_scores(boolean_labels, scores, check_shape)
A:tensorflow.contrib.metrics.python.ops.histogram_ops.(hist_true, hist_false)->_make_auc_histograms(boolean_labels, scores, score_range, nbins)
A:tensorflow.contrib.metrics.python.ops.histogram_ops.(hist_true_acc, hist_false_acc, update_op)->_auc_hist_accumulate(hist_true, hist_false, nbins, collections)
A:tensorflow.contrib.metrics.python.ops.histogram_ops.auc->_auc_convert_hist_to_auc(hist_true_acc, hist_false_acc, nbins)
A:tensorflow.contrib.metrics.python.ops.histogram_ops.boolean_labels->tensorflow.python.framework.ops.convert_to_tensor(boolean_labels, name='boolean_labels')
A:tensorflow.contrib.metrics.python.ops.histogram_ops.scores->tensorflow.python.framework.ops.convert_to_tensor(scores, name='scores')
A:tensorflow.contrib.metrics.python.ops.histogram_ops.labels_rank_1->tensorflow.python.ops.control_flow_ops.Assert(math_ops.equal(1, array_ops.rank(boolean_labels)), ['Argument boolean_labels should have rank 1.  Found: ', boolean_labels.name, array_ops.shape(boolean_labels)])
A:tensorflow.contrib.metrics.python.ops.histogram_ops.scores_rank_1->tensorflow.python.ops.control_flow_ops.Assert(math_ops.equal(1, array_ops.rank(scores)), ['Argument scores should have rank 1.  Found: ', scores.name, array_ops.shape(scores)])
A:tensorflow.contrib.metrics.python.ops.histogram_ops.hist_true->tensorflow.python.ops.histogram_ops.histogram_fixed_width(array_ops.boolean_mask(scores, boolean_labels), score_range, nbins=nbins, dtype=dtypes.int64, name='hist_true')
A:tensorflow.contrib.metrics.python.ops.histogram_ops.hist_false->tensorflow.python.ops.histogram_ops.histogram_fixed_width(array_ops.boolean_mask(scores, math_ops.logical_not(boolean_labels)), score_range, nbins=nbins, dtype=dtypes.int64, name='hist_false')
A:tensorflow.contrib.metrics.python.ops.histogram_ops.hist_true_acc->tensorflow.python.ops.variable_scope.get_variable('hist_true_acc', shape=[nbins], dtype=hist_true.dtype, initializer=init_ops.zeros_initializer(), collections=collections, trainable=False)
A:tensorflow.contrib.metrics.python.ops.histogram_ops.hist_false_acc->tensorflow.python.ops.variable_scope.get_variable('hist_false_acc', shape=[nbins], dtype=hist_true.dtype, initializer=init_ops.zeros_initializer(), collections=collections, trainable=False)
A:tensorflow.contrib.metrics.python.ops.histogram_ops.update_op->tensorflow.python.ops.control_flow_ops.group(hist_true_acc.assign_add(hist_true), hist_false_acc.assign_add(hist_false), name='update_op')
A:tensorflow.contrib.metrics.python.ops.histogram_ops.normed_hist_true->tensorflow.python.ops.math_ops.truediv(hist_true_acc, math_ops.reduce_sum(hist_true_acc))
A:tensorflow.contrib.metrics.python.ops.histogram_ops.normed_hist_false->tensorflow.python.ops.math_ops.truediv(hist_false_acc, math_ops.reduce_sum(hist_false_acc))
A:tensorflow.contrib.metrics.python.ops.histogram_ops.delta_y_t->tensorflow.python.ops.math_ops.cast(delta_y_t, dtypes.float32)
A:tensorflow.contrib.metrics.python.ops.histogram_ops.delta_x_t->tensorflow.python.ops.math_ops.cast(delta_x_t, dtypes.float32)
A:tensorflow.contrib.metrics.python.ops.histogram_ops.y_t->_strict_1d_cumsum(delta_y_t, nbins)
A:tensorflow.contrib.metrics.python.ops.histogram_ops.x->tensorflow.python.ops.array_ops.reshape(x, (1, -1, 1, 1))
A:tensorflow.contrib.metrics.python.ops.histogram_ops.h->tensorflow.python.ops.array_ops.reshape(h, (-1, 1, 1, 1))
A:tensorflow.contrib.metrics.python.ops.histogram_ops.result->tensorflow.python.ops.nn_ops.conv2d(x, h, [1, 1, 1, 1], 'SAME')
tensorflow.contrib.metrics.auc_using_histogram(boolean_labels,scores,score_range,nbins=100,collections=None,check_shape=True,name=None)
tensorflow.contrib.metrics.ops.histogram_ops._auc_convert_hist_to_auc(hist_true_acc,hist_false_acc,nbins)
tensorflow.contrib.metrics.ops.histogram_ops._auc_hist_accumulate(hist_true,hist_false,nbins,collections)
tensorflow.contrib.metrics.ops.histogram_ops._check_labels_and_scores(boolean_labels,scores,check_shape)
tensorflow.contrib.metrics.ops.histogram_ops._make_auc_histograms(boolean_labels,scores,score_range,nbins)
tensorflow.contrib.metrics.ops.histogram_ops._strict_1d_cumsum(tensor,len_tensor)
tensorflow.contrib.metrics.ops.histogram_ops._strict_conv1d(x,h)
tensorflow.contrib.metrics.python.ops.histogram_ops._auc_convert_hist_to_auc(hist_true_acc,hist_false_acc,nbins)
tensorflow.contrib.metrics.python.ops.histogram_ops._auc_hist_accumulate(hist_true,hist_false,nbins,collections)
tensorflow.contrib.metrics.python.ops.histogram_ops._check_labels_and_scores(boolean_labels,scores,check_shape)
tensorflow.contrib.metrics.python.ops.histogram_ops._make_auc_histograms(boolean_labels,scores,score_range,nbins)
tensorflow.contrib.metrics.python.ops.histogram_ops._strict_1d_cumsum(tensor,len_tensor)
tensorflow.contrib.metrics.python.ops.histogram_ops._strict_conv1d(x,h)
tensorflow.contrib.metrics.python.ops.histogram_ops.auc_using_histogram(boolean_labels,scores,score_range,nbins=100,collections=None,check_shape=True,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/metrics/python/ops/confusion_matrix_ops.py----------------------------------------
tensorflow.contrib.metrics.confusion_matrix(labels,predictions,num_classes=None,dtype=dtypes.int32,name=None,weights=None)
tensorflow.contrib.metrics.python.ops.confusion_matrix_ops.confusion_matrix(labels,predictions,num_classes=None,dtype=dtypes.int32,name=None,weights=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/metrics/python/ops/set_ops.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/grid_rnn/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/grid_rnn/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/grid_rnn/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/grid_rnn/python/ops/grid_rnn_cell.py----------------------------------------
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.self._config->_parse_rnn_config(num_dims, input_dims, output_dims, priority_dims, non_recurrent_dims, non_recurrent_fn or nn.relu, tied, num_units)
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.my_cell_fn->functools.partial(rnn.LSTMCell, num_units=num_units, input_size=cell_input_size, state_is_tuple=False)
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.c_prev[recurrent_dim]->tensorflow.python.ops.array_ops.slice(state, [0, start_idx], [-1, conf.num_units])
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.m_prev[recurrent_dim]->tensorflow.python.ops.array_ops.slice(state, [0, start_idx], [-1, conf.num_units])
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.input_splits->tensorflow.python.ops.array_ops.split(value=inputs, num_or_size_splits=len(conf.inputs), axis=1)
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.input_project_m->tensorflow.python.ops.variable_scope.get_variable('project_m_{}'.format(j), [input_sz, conf.num_units], dtype=dtype)
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.m_prev[j]->tensorflow.python.ops.math_ops.matmul(input_splits[i], input_project_m)
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.input_project_c->tensorflow.python.ops.variable_scope.get_variable('project_c_{}'.format(j), [input_sz, conf.num_units], dtype=dtype)
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.c_prev[j]->tensorflow.python.ops.math_ops.matmul(input_splits[i], input_project_c)
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell._GridRNNDimension->namedtuple('_GridRNNDimension', ['idx', 'is_input', 'is_output', 'is_priority', 'non_recurrent_fn'])
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell._GridRNNConfig->namedtuple('_GridRNNConfig', ['num_dims', 'dims', 'inputs', 'outputs', 'recurrents', 'priority', 'non_priority', 'tied', 'num_units'])
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.ls->sorted(set(ls))
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.input_dims->check_dim_list(ls_input_dims)
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.output_dims->check_dim_list(ls_output_dims)
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.priority_dims->check_dim_list(ls_priority_dims)
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.non_recurrent_dims->check_dim_list(ls_non_recurrent_dims)
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.cell_inputs->tensorflow.python.ops.array_ops.zeros([m_prev[0].get_shape().as_list()[0], 0], m_prev[0].dtype)
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.new_output[d.idx]->tensorflow.contrib.layers.legacy_fully_connected(linear_args, num_output_units=conf.num_units, activation_fn=d.non_recurrent_fn, weight_init=vs.get_variable_scope().initializer or layers.initializers.xavier_initializer)
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.cell_state->tensorflow.python.ops.array_ops.concat([c_prev[i], last_dim_output], 1)
A:tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.(new_output[d.idx], new_state[d.idx])->cell(cell_inputs, cell_state)
tensorflow.contrib.grid_rnn.Grid1BasicLSTMCell(self,num_units,forget_bias=1)
tensorflow.contrib.grid_rnn.Grid1BasicRNNCell(self,num_units)
tensorflow.contrib.grid_rnn.Grid1LSTMCell(self,num_units,use_peepholes=False,forget_bias=1.0)
tensorflow.contrib.grid_rnn.Grid2BasicLSTMCell(self,num_units,tied=False,non_recurrent_fn=None,forget_bias=1)
tensorflow.contrib.grid_rnn.Grid2BasicRNNCell(self,num_units,tied=False,non_recurrent_fn=None)
tensorflow.contrib.grid_rnn.Grid2GRUCell(self,num_units,tied=False,non_recurrent_fn=None)
tensorflow.contrib.grid_rnn.Grid2LSTMCell(self,num_units,tied=False,non_recurrent_fn=None,use_peepholes=False,forget_bias=1.0)
tensorflow.contrib.grid_rnn.Grid3LSTMCell(self,num_units,tied=False,non_recurrent_fn=None,use_peepholes=False,forget_bias=1.0)
tensorflow.contrib.grid_rnn.GridRNNCell(self,num_units,num_dims=1,input_dims=None,output_dims=None,priority_dims=None,non_recurrent_dims=None,tied=False,cell_fn=None,non_recurrent_fn=None)
tensorflow.contrib.grid_rnn.GridRNNCell.input_size(self)
tensorflow.contrib.grid_rnn.GridRNNCell.output_size(self)
tensorflow.contrib.grid_rnn.GridRNNCell.state_size(self)
tensorflow.contrib.grid_rnn._parse_rnn_config(num_dims,ls_input_dims,ls_output_dims,ls_priority_dims,ls_non_recurrent_dims,non_recurrent_fn,tied,num_units)
tensorflow.contrib.grid_rnn._propagate(dim_indices,conf,cells,c_prev,m_prev,new_output,new_state,first_call)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid1BasicLSTMCell(self,num_units,forget_bias=1)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid1BasicLSTMCell.__init__(self,num_units,forget_bias=1)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid1BasicRNNCell(self,num_units)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid1BasicRNNCell.__init__(self,num_units)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid1LSTMCell(self,num_units,use_peepholes=False,forget_bias=1.0)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid1LSTMCell.__init__(self,num_units,use_peepholes=False,forget_bias=1.0)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid2BasicLSTMCell(self,num_units,tied=False,non_recurrent_fn=None,forget_bias=1)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid2BasicLSTMCell.__init__(self,num_units,tied=False,non_recurrent_fn=None,forget_bias=1)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid2BasicRNNCell(self,num_units,tied=False,non_recurrent_fn=None)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid2BasicRNNCell.__init__(self,num_units,tied=False,non_recurrent_fn=None)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid2GRUCell(self,num_units,tied=False,non_recurrent_fn=None)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid2GRUCell.__init__(self,num_units,tied=False,non_recurrent_fn=None)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid2LSTMCell(self,num_units,tied=False,non_recurrent_fn=None,use_peepholes=False,forget_bias=1.0)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid2LSTMCell.__init__(self,num_units,tied=False,non_recurrent_fn=None,use_peepholes=False,forget_bias=1.0)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid3LSTMCell(self,num_units,tied=False,non_recurrent_fn=None,use_peepholes=False,forget_bias=1.0)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.Grid3LSTMCell.__init__(self,num_units,tied=False,non_recurrent_fn=None,use_peepholes=False,forget_bias=1.0)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.GridRNNCell(self,num_units,num_dims=1,input_dims=None,output_dims=None,priority_dims=None,non_recurrent_dims=None,tied=False,cell_fn=None,non_recurrent_fn=None)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.GridRNNCell.__init__(self,num_units,num_dims=1,input_dims=None,output_dims=None,priority_dims=None,non_recurrent_dims=None,tied=False,cell_fn=None,non_recurrent_fn=None)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.GridRNNCell.input_size(self)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.GridRNNCell.output_size(self)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell.GridRNNCell.state_size(self)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell._parse_rnn_config(num_dims,ls_input_dims,ls_output_dims,ls_priority_dims,ls_non_recurrent_dims,non_recurrent_fn,tied,num_units)
tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell._propagate(dim_indices,conf,cells,c_prev,m_prev,new_output,new_state,first_call)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/compiler/jit.py----------------------------------------
A:tensorflow.contrib.compiler.jit.xla_compile->tensorflow.core.framework.attr_value_pb2.AttrValue(b=compile_ops)
A:tensorflow.contrib.compiler.jit.xla_scope_counter->_XlaScope(0, 0)
A:tensorflow.contrib.compiler.jit.attrs['_XlaScope']->tensorflow.core.framework.attr_value_pb2.AttrValue(s=('jit_scope_%d' % xla_scope_counter.count).encode())
tensorflow.contrib.compiler.jit._XlaScope(self,count,depth)
tensorflow.contrib.compiler.jit._XlaScope.__init__(self,count,depth)
tensorflow.contrib.compiler.jit.experimental_jit_scope(compile_ops=True,separate_compiled_gradients=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/compiler/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/client/random_forest.py----------------------------------------
A:tensorflow.contrib.tensor_forest.client.random_forest.tensors->tensors.values().values()
A:tensorflow.contrib.tensor_forest.client.random_forest.weights->features.pop(weights_name)
A:tensorflow.contrib.tensor_forest.client.random_forest.graph_builder->graph_builder_class(params, device_assigner=dev_assn)
A:tensorflow.contrib.tensor_forest.client.random_forest.inference[eval_metrics.INFERENCE_PROB_NAME]->graph_builder_class(params, device_assigner=dev_assn).inference_graph(features)
A:tensorflow.contrib.tensor_forest.client.random_forest.inference[eval_metrics.INFERENCE_PRED_NAME]->tensorflow.python.ops.math_ops.argmax(inference[eval_metrics.INFERENCE_PROB_NAME], 1)
A:tensorflow.contrib.tensor_forest.client.random_forest.inference[eval_metrics.FEATURE_IMPORTANCE_NAME]->graph_builder_class(params, device_assigner=dev_assn).feature_importances()
A:tensorflow.contrib.tensor_forest.client.random_forest.training_graph->tensorflow.python.ops.control_flow_ops.group(graph_builder.training_graph(features, labels, input_weights=weights, num_trainers=num_trainers, trainer_id=trainer_id), state_ops.assign_add(contrib_framework.get_global_step(), 1))
A:tensorflow.contrib.tensor_forest.client.random_forest.training_loss->graph_builder_class(params, device_assigner=dev_assn).training_loss(features, labels, name=LOSS_NAME)
tensorflow.contrib.tensor_forest.client.random_forest.TensorForestEstimator(self,params,device_assigner=None,model_dir=None,graph_builder_class=tensor_forest.RandomForestGraphs,config=None,weights_name=None,feature_engineering_fn=None,early_stopping_rounds=100,num_trainers=1,trainer_id=0,report_feature_importances=False,local_eval=False)
tensorflow.contrib.tensor_forest.client.random_forest.TensorForestEstimator.__init__(self,params,device_assigner=None,model_dir=None,graph_builder_class=tensor_forest.RandomForestGraphs,config=None,weights_name=None,feature_engineering_fn=None,early_stopping_rounds=100,num_trainers=1,trainer_id=0,report_feature_importances=False,local_eval=False)
tensorflow.contrib.tensor_forest.client.random_forest.TensorForestLossHook(self,early_stopping_rounds)
tensorflow.contrib.tensor_forest.client.random_forest.TensorForestLossHook.__init__(self,early_stopping_rounds)
tensorflow.contrib.tensor_forest.client.random_forest.TensorForestLossHook.after_run(self,run_context,run_values)
tensorflow.contrib.tensor_forest.client.random_forest.TensorForestLossHook.before_run(self,run_context)
tensorflow.contrib.tensor_forest.client.random_forest._assert_float32(tensors)
tensorflow.contrib.tensor_forest.client.random_forest.get_model_fn(params,graph_builder_class,device_assigner,weights_name=None,early_stopping_rounds=100,num_trainers=1,trainer_id=0,report_feature_importances=False,local_eval=False)
tensorflow.contrib.tensor_forest.random_forest.TensorForestEstimator(self,params,device_assigner=None,model_dir=None,graph_builder_class=tensor_forest.RandomForestGraphs,config=None,weights_name=None,feature_engineering_fn=None,early_stopping_rounds=100,num_trainers=1,trainer_id=0,report_feature_importances=False,local_eval=False)
tensorflow.contrib.tensor_forest.random_forest.TensorForestLossHook(self,early_stopping_rounds)
tensorflow.contrib.tensor_forest.random_forest.TensorForestLossHook.after_run(self,run_context,run_values)
tensorflow.contrib.tensor_forest.random_forest.TensorForestLossHook.before_run(self,run_context)
tensorflow.contrib.tensor_forest.random_forest._assert_float32(tensors)
tensorflow.contrib.tensor_forest.random_forest.get_model_fn(params,graph_builder_class,device_assigner,weights_name=None,early_stopping_rounds=100,num_trainers=1,trainer_id=0,report_feature_importances=False,local_eval=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/client/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/client/eval_metrics.py----------------------------------------
A:tensorflow.contrib.tensor_forest.client.eval_metrics.targets->tensorflow.python.ops.array_ops.squeeze(targets, squeeze_dims=[1])
A:tensorflow.contrib.tensor_forest.client.eval_metrics.y_mean->tensorflow.python.ops.math_ops.reduce_mean(targets, 0)
A:tensorflow.contrib.tensor_forest.client.eval_metrics.squares_total->tensorflow.python.ops.math_ops.reduce_sum(math_ops.square(targets - y_mean), 0)
A:tensorflow.contrib.tensor_forest.client.eval_metrics.squares_residuals->tensorflow.python.ops.math_ops.reduce_sum(math_ops.square(targets - probabilities), 0)
tensorflow.contrib.tensor_forest.client.eval_metrics._accuracy(predictions,targets,weights=None)
tensorflow.contrib.tensor_forest.client.eval_metrics._class_log_loss(probabilities,targets,weights=None)
tensorflow.contrib.tensor_forest.client.eval_metrics._precision(predictions,targets,weights=None)
tensorflow.contrib.tensor_forest.client.eval_metrics._precision_at_thresholds(predictions,targets,weights=None)
tensorflow.contrib.tensor_forest.client.eval_metrics._predictions(predictions,unused_targets,**unused_kwargs)
tensorflow.contrib.tensor_forest.client.eval_metrics._r2(probabilities,targets,weights=None)
tensorflow.contrib.tensor_forest.client.eval_metrics._recall(predictions,targets,weights=None)
tensorflow.contrib.tensor_forest.client.eval_metrics._recall_at_thresholds(predictions,targets,weights=None)
tensorflow.contrib.tensor_forest.client.eval_metrics._sigmoid_entropy(probabilities,targets,weights=None)
tensorflow.contrib.tensor_forest.client.eval_metrics._softmax_entropy(probabilities,targets,weights=None)
tensorflow.contrib.tensor_forest.client.eval_metrics._squeeze_and_onehot(targets,depth)
tensorflow.contrib.tensor_forest.client.eval_metrics._top_k_generator(k)
tensorflow.contrib.tensor_forest.client.eval_metrics.get_metric(metric_name)
tensorflow.contrib.tensor_forest.client.eval_metrics.get_prediction_key(metric_name)
tensorflow.contrib.tensor_forest.eval_metrics._accuracy(predictions,targets,weights=None)
tensorflow.contrib.tensor_forest.eval_metrics._class_log_loss(probabilities,targets,weights=None)
tensorflow.contrib.tensor_forest.eval_metrics._precision(predictions,targets,weights=None)
tensorflow.contrib.tensor_forest.eval_metrics._precision_at_thresholds(predictions,targets,weights=None)
tensorflow.contrib.tensor_forest.eval_metrics._predictions(predictions,unused_targets,**unused_kwargs)
tensorflow.contrib.tensor_forest.eval_metrics._r2(probabilities,targets,weights=None)
tensorflow.contrib.tensor_forest.eval_metrics._recall(predictions,targets,weights=None)
tensorflow.contrib.tensor_forest.eval_metrics._recall_at_thresholds(predictions,targets,weights=None)
tensorflow.contrib.tensor_forest.eval_metrics._sigmoid_entropy(probabilities,targets,weights=None)
tensorflow.contrib.tensor_forest.eval_metrics._softmax_entropy(probabilities,targets,weights=None)
tensorflow.contrib.tensor_forest.eval_metrics._squeeze_and_onehot(targets,depth)
tensorflow.contrib.tensor_forest.eval_metrics._top_k_generator(k)
tensorflow.contrib.tensor_forest.eval_metrics.get_metric(metric_name)
tensorflow.contrib.tensor_forest.eval_metrics.get_prediction_key(metric_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/hybrid_layer.py----------------------------------------
tensorflow.contrib.tensor_forest.hybrid.hybrid_layer.HybridLayer(self,params,layer_num,device_assigner,*args,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.hybrid_layer.HybridLayer._define_vars(self,params,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.hybrid_layer.HybridLayer.inference_graph(self,data,data_spec=None)
tensorflow.contrib.tensor_forest.hybrid.python.hybrid_layer.HybridLayer(self,params,layer_num,device_assigner,*args,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.hybrid_layer.HybridLayer.__init__(self,params,layer_num,device_assigner,*args,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.hybrid_layer.HybridLayer._define_vars(self,params,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.hybrid_layer.HybridLayer.inference_graph(self,data,data_spec=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/hybrid_model.py----------------------------------------
A:tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.self.optimizer->optimizer_class(self.params.learning_rate)
A:tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.self.regularizer->tensorflow.contrib.layers.l2_regularizer(self.params.regularization_strength)
A:tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.inference_result->self.inference_graph(data, data_spec=data_spec)
A:tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.output->tensorflow.contrib.layers.fully_connected(inference_result, output_size, activation_fn=array_ops.identity)
A:tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.probabilities->tensorflow.python.ops.nn_ops.softmax(inference_result, name='probabilities')
A:tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.mean_squared_error->tensorflow.python.ops.math_ops.reduce_mean(diff * diff)
A:tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.root_mean_squared_error->tensorflow.python.ops.math_ops.sqrt(mean_squared_error, name='loss')
A:tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.loss->tensorflow.python.ops.math_ops.reduce_mean(nn_ops.sparse_softmax_cross_entropy_with_logits(labels=array_ops.squeeze(math_ops.to_int32(labels)), logits=self.training_inference_graph(data)), name='loss')
tensorflow.contrib.tensor_forest.hybrid.hybrid_model.HybridModel(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.hybrid_model.HybridModel._base_inference(self,data,data_spec=None)
tensorflow.contrib.tensor_forest.hybrid.hybrid_model.HybridModel._do_layer_inference(self,layer,data)
tensorflow.contrib.tensor_forest.hybrid.hybrid_model.HybridModel.inference_graph(self,data,data_spec=None)
tensorflow.contrib.tensor_forest.hybrid.hybrid_model.HybridModel.loss(self,data,labels)
tensorflow.contrib.tensor_forest.hybrid.hybrid_model.HybridModel.predict_proba(self,data,data_spec=None)
tensorflow.contrib.tensor_forest.hybrid.hybrid_model.HybridModel.training_graph(self,data,labels,data_spec=None,epoch=None)
tensorflow.contrib.tensor_forest.hybrid.hybrid_model.HybridModel.training_inference_graph(self,data,data_spec=None)
tensorflow.contrib.tensor_forest.hybrid.hybrid_model.HybridModel.training_loss(self,data,labels)
tensorflow.contrib.tensor_forest.hybrid.hybrid_model.HybridModel.validation_loss(self,data,labels)
tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.HybridModel(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.HybridModel.__init__(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.HybridModel._base_inference(self,data,data_spec=None)
tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.HybridModel._do_layer_inference(self,layer,data)
tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.HybridModel.inference_graph(self,data,data_spec=None)
tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.HybridModel.loss(self,data,labels)
tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.HybridModel.predict_proba(self,data,data_spec=None)
tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.HybridModel.training_graph(self,data,labels,data_spec=None,epoch=None)
tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.HybridModel.training_inference_graph(self,data,data_spec=None)
tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.HybridModel.training_loss(self,data,labels)
tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model.HybridModel.validation_loss(self,data,labels)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/ops/training_ops.py----------------------------------------
A:tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops._ops_lock->threading.Lock()
A:tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops.dl_du->tensorflow.python.ops.array_ops.expand_dims(grad, 2)
A:tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops.du_df->tensorflow.python.ops.array_ops.expand_dims(du_df_raw, 2)
A:tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops.df_db->tensorflow.python.ops.array_ops.expand_dims(array_ops.expand_dims(array_ops.ones_like(tree_thresholds_tensor), 0), 2)
A:tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops.dl_dx->tensorflow.python.ops.math_ops.reduce_mean(dl_du * du_df * df_dx, 1)
A:tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops.dl_dt->tensorflow.python.ops.math_ops.reduce_mean(dl_du * du_df * df_dt, 0)
A:tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops.dl_db->tensorflow.python.ops.math_ops.reduce_mean(array_ops.squeeze(dl_du * du_df * df_db, [2]), 0)
A:tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops.(du_df_raw, df_dx_raw, df_dt_raw, df_db_raw)->gradient_op(input_data_tensor, tree_weights_tensor, tree_thresholds_tensor, path_probability_tensor, path_tensor, tree_depth=op.get_attr('tree_depth'))
A:tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops.df_dx->tensorflow.python.ops.array_ops.expand_dims(df_dx_raw, 0)
A:tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops.(du_df_raw, df_dx_raw, df_dt_raw)->gradient_op(input_data_tensor, tree_weights_tensor, tree_thresholds_tensor, routing_function_tensor, layer_num=op.get_attr('layer_num'), random_seed=op.get_attr('random_seed'))
A:tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops.ops_path->tensorflow.python.platform.resource_loader.get_path_to_datafile(TRAINING_OPS_FILE)
A:tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops._training_ops->tensorflow.contrib.util.loader.load_op_library(ops_path)
tensorflow.contrib.tensor_forest.hybrid.ops.training_ops.Load()
tensorflow.contrib.tensor_forest.hybrid.ops.training_ops._KFeatureRoutingFunctionGradient(op,grad)
tensorflow.contrib.tensor_forest.hybrid.ops.training_ops._RoutingFunctionGradient(op,grad)
tensorflow.contrib.tensor_forest.hybrid.ops.training_ops._StochasticHardRoutingFunctionGradient(op,routing_grad,unused_path_grad)
tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops.Load()
tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops._KFeatureRoutingFunctionGradient(op,grad)
tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops._RoutingFunctionGradient(op,grad)
tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops._StochasticHardRoutingFunctionGradient(op,routing_grad,unused_path_grad)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/models/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/models/nn.py----------------------------------------
tensorflow.contrib.tensor_forest.hybrid.models.nn.NN(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.models.nn.NN(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.models.nn.NN.__init__(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/models/stochastic_soft_decisions_to_data_then_nn.py----------------------------------------
tensorflow.contrib.tensor_forest.hybrid.models.stochastic_soft_decisions_to_data_then_nn.StochasticSoftDecisionsToDataThenNN(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.models.stochastic_soft_decisions_to_data_then_nn.StochasticSoftDecisionsToDataThenNN(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.models.stochastic_soft_decisions_to_data_then_nn.StochasticSoftDecisionsToDataThenNN.__init__(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/models/decisions_to_data_then_nn.py----------------------------------------
tensorflow.contrib.tensor_forest.hybrid.models.decisions_to_data_then_nn.DecisionsToDataThenNN(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.models.decisions_to_data_then_nn.DecisionsToDataThenNN(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.models.decisions_to_data_then_nn.DecisionsToDataThenNN.__init__(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/models/hard_decisions_to_data_then_nn.py----------------------------------------
A:tensorflow.contrib.tensor_forest.hybrid.python.models.hard_decisions_to_data_then_nn.inference_result->self._do_layer_inference(layer, inference_result)
A:tensorflow.contrib.tensor_forest.hybrid.python.models.hard_decisions_to_data_then_nn.output->tensorflow.contrib.layers.fully_connected(inference_result, output_size, activation_fn=nn_ops.softmax)
tensorflow.contrib.tensor_forest.hybrid.models.hard_decisions_to_data_then_nn.HardDecisionsToDataThenNN(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.models.hard_decisions_to_data_then_nn.HardDecisionsToDataThenNN._base_inference(self,data,data_spec=None,soft=False)
tensorflow.contrib.tensor_forest.hybrid.models.hard_decisions_to_data_then_nn.HardDecisionsToDataThenNN.inference_graph(self,data,data_spec=None)
tensorflow.contrib.tensor_forest.hybrid.models.hard_decisions_to_data_then_nn.HardDecisionsToDataThenNN.training_inference_graph(self,data,data_spec=None)
tensorflow.contrib.tensor_forest.hybrid.python.models.hard_decisions_to_data_then_nn.HardDecisionsToDataThenNN(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.models.hard_decisions_to_data_then_nn.HardDecisionsToDataThenNN.__init__(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.models.hard_decisions_to_data_then_nn.HardDecisionsToDataThenNN._base_inference(self,data,data_spec=None,soft=False)
tensorflow.contrib.tensor_forest.hybrid.python.models.hard_decisions_to_data_then_nn.HardDecisionsToDataThenNN.inference_graph(self,data,data_spec=None)
tensorflow.contrib.tensor_forest.hybrid.python.models.hard_decisions_to_data_then_nn.HardDecisionsToDataThenNN.training_inference_graph(self,data,data_spec=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/models/k_feature_decisions_to_data_then_nn.py----------------------------------------
tensorflow.contrib.tensor_forest.hybrid.models.k_feature_decisions_to_data_then_nn.KFeatureDecisionsToDataThenNN(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.models.k_feature_decisions_to_data_then_nn.KFeatureDecisionsToDataThenNN(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.models.k_feature_decisions_to_data_then_nn.KFeatureDecisionsToDataThenNN.__init__(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/models/forest_to_data_then_nn.py----------------------------------------
tensorflow.contrib.tensor_forest.hybrid.models.forest_to_data_then_nn.ForestToDataThenNN(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.models.forest_to_data_then_nn.ForestToDataThenNN(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.models.forest_to_data_then_nn.ForestToDataThenNN.__init__(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/models/stochastic_hard_decisions_to_data_then_nn.py----------------------------------------
tensorflow.contrib.tensor_forest.hybrid.models.stochastic_hard_decisions_to_data_then_nn.StochasticHardDecisionsToDataThenNN(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.models.stochastic_hard_decisions_to_data_then_nn.StochasticHardDecisionsToDataThenNN(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.models.stochastic_hard_decisions_to_data_then_nn.StochasticHardDecisionsToDataThenNN.__init__(self,params,device_assigner=None,optimizer_class=adagrad.AdagradOptimizer,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/layers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/layers/fully_connected.py----------------------------------------
A:tensorflow.contrib.tensor_forest.hybrid.python.layers.fully_connected.nn_activations->tensorflow.contrib.layers.fully_connected(data, 1)
A:tensorflow.contrib.tensor_forest.hybrid.python.layers.fully_connected.nn_activations_tensor->tensorflow.python.ops.array_ops.concat(nn_activations, 1, name='flattened_nn_activations')
tensorflow.contrib.tensor_forest.hybrid.layers.fully_connected.FlattenedFullyConnectedLayer(hybrid_layer.HybridLayer)
tensorflow.contrib.tensor_forest.hybrid.layers.fully_connected.FlattenedFullyConnectedLayer._define_vars(self,params)
tensorflow.contrib.tensor_forest.hybrid.layers.fully_connected.FlattenedFullyConnectedLayer.inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.layers.fully_connected.FullyConnectedLayer(hybrid_layer.HybridLayer)
tensorflow.contrib.tensor_forest.hybrid.layers.fully_connected.FullyConnectedLayer._define_vars(self,params)
tensorflow.contrib.tensor_forest.hybrid.layers.fully_connected.FullyConnectedLayer.inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.layers.fully_connected.ManyToOneLayer(hybrid_layer.HybridLayer)
tensorflow.contrib.tensor_forest.hybrid.layers.fully_connected.ManyToOneLayer._define_vars(self,params)
tensorflow.contrib.tensor_forest.hybrid.layers.fully_connected.ManyToOneLayer.inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.python.layers.fully_connected.FlattenedFullyConnectedLayer(hybrid_layer.HybridLayer)
tensorflow.contrib.tensor_forest.hybrid.python.layers.fully_connected.FlattenedFullyConnectedLayer._define_vars(self,params)
tensorflow.contrib.tensor_forest.hybrid.python.layers.fully_connected.FlattenedFullyConnectedLayer.inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.python.layers.fully_connected.FullyConnectedLayer(hybrid_layer.HybridLayer)
tensorflow.contrib.tensor_forest.hybrid.python.layers.fully_connected.FullyConnectedLayer._define_vars(self,params)
tensorflow.contrib.tensor_forest.hybrid.python.layers.fully_connected.FullyConnectedLayer.inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.python.layers.fully_connected.ManyToOneLayer(hybrid_layer.HybridLayer)
tensorflow.contrib.tensor_forest.hybrid.python.layers.fully_connected.ManyToOneLayer._define_vars(self,params)
tensorflow.contrib.tensor_forest.hybrid.python.layers.fully_connected.ManyToOneLayer.inference_graph(self,data)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/python/layers/decisions_to_data.py----------------------------------------
A:tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.self.tree_parameters->tensorflow.python.ops.variable_scope.get_variable(name='stochastic_soft_tree_parameters_%d' % self.layer_num, shape=[params.num_nodes, params.num_features], initializer=init_ops.truncated_normal_initializer(mean=params.weight_init_mean, stddev=params.weight_init_std))
A:tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.self.tree_thresholds->tensorflow.python.ops.variable_scope.get_variable(name='stochastic_soft_tree_thresholds_%d' % self.layer_num, shape=[params.num_nodes], initializer=init_ops.truncated_normal_initializer(mean=params.weight_init_mean, stddev=params.weight_init_std))
A:tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.self._training_ops->tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops.Load()
A:tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.routing_probabilities->tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops.k_feature_routing_function(data, self.tree_parameters, self.tree_thresholds, max_nodes=self.params.num_nodes, num_features_per_node=self.params.num_features_per_node, layer_num=0, random_seed=self.params.base_random_seed)
A:tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.output->tensorflow.python.ops.array_ops.slice(gen_training_ops.unpack_path(path, path_probability), [0, self.params.num_nodes - self.params.num_leaves - 1], [-1, self.params.num_leaves])
A:tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.(path_probability, path)->tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops.hard_routing_function(data, self.tree_parameters, self.tree_thresholds, max_nodes=self.params.num_nodes, tree_depth=self.params.hybrid_tree_depth)
A:tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.routes->tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops.routing_function(data, self.tree_parameters, self.tree_thresholds, max_nodes=self.params.num_nodes)
A:tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.leaf_routes->tensorflow.python.ops.array_ops.slice(routes, [0, self.params.num_nodes - self.params.num_leaves - 1], [-1, self.params.num_leaves])
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.DecisionsToDataLayer(self,params,layer_num,device_assigner,*args,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.DecisionsToDataLayer._define_vars(self,params,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.DecisionsToDataLayer.inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.HardDecisionsToDataLayer(DecisionsToDataLayer)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.HardDecisionsToDataLayer._define_vars(self,params,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.HardDecisionsToDataLayer.inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.HardDecisionsToDataLayer.soft_inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.KFeatureDecisionsToDataLayer(self,params,layer_num,device_assigner,*args,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.KFeatureDecisionsToDataLayer._define_vars(self,params,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.KFeatureDecisionsToDataLayer.inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.StochasticHardDecisionsToDataLayer(HardDecisionsToDataLayer)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.StochasticHardDecisionsToDataLayer._define_vars(self,params,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.StochasticHardDecisionsToDataLayer.inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.StochasticHardDecisionsToDataLayer.soft_inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.StochasticSoftDecisionsToDataLayer(StochasticHardDecisionsToDataLayer)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.StochasticSoftDecisionsToDataLayer._define_vars(self,params,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.layers.decisions_to_data.StochasticSoftDecisionsToDataLayer.inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.DecisionsToDataLayer(self,params,layer_num,device_assigner,*args,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.DecisionsToDataLayer.__init__(self,params,layer_num,device_assigner,*args,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.DecisionsToDataLayer._define_vars(self,params,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.DecisionsToDataLayer.inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.HardDecisionsToDataLayer(DecisionsToDataLayer)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.HardDecisionsToDataLayer._define_vars(self,params,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.HardDecisionsToDataLayer.inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.HardDecisionsToDataLayer.soft_inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.KFeatureDecisionsToDataLayer(self,params,layer_num,device_assigner,*args,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.KFeatureDecisionsToDataLayer.__init__(self,params,layer_num,device_assigner,*args,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.KFeatureDecisionsToDataLayer._define_vars(self,params,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.KFeatureDecisionsToDataLayer.inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.StochasticHardDecisionsToDataLayer(HardDecisionsToDataLayer)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.StochasticHardDecisionsToDataLayer._define_vars(self,params,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.StochasticHardDecisionsToDataLayer.inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.StochasticHardDecisionsToDataLayer.soft_inference_graph(self,data)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.StochasticSoftDecisionsToDataLayer(StochasticHardDecisionsToDataLayer)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.StochasticSoftDecisionsToDataLayer._define_vars(self,params,**kwargs)
tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data.StochasticSoftDecisionsToDataLayer.inference_graph(self,data)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/hybrid/ops/gen_training_ops.py----------------------------------------
A:tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops._HardRoutingFunctionOutput->collections.namedtuple('HardRoutingFunction', _hard_routing_function_outputs)
A:tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops.result->_InitOpDefLibrary().apply_op('UnpackPath', path=path, path_values=path_values, name=name)
A:tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops._KFeatureGradientOutput->collections.namedtuple('KFeatureGradient', _k_feature_gradient_outputs)
A:tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops._StochasticHardRoutingFunctionOutput->collections.namedtuple('StochasticHardRoutingFunction', _stochastic_hard_routing_function_outputs)
A:tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops._StochasticHardRoutingGradientOutput->collections.namedtuple('StochasticHardRoutingGradient', _stochastic_hard_routing_gradient_outputs)
A:tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops._InitOpDefLibrary()
tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops.hard_routing_function(input_data,tree_parameters,tree_biases,max_nodes,tree_depth,name=None)
tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops.k_feature_gradient(input_data,tree_parameters,tree_biases,routes,layer_num,random_seed,name=None)
tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops.k_feature_routing_function(input_data,tree_parameters,tree_biases,layer_num,max_nodes,num_features_per_node,random_seed,name=None)
tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops.routing_function(input_data,tree_parameters,tree_biases,max_nodes,name=None)
tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops.routing_gradient(input_data,tree_parameters,tree_biases,routes,max_nodes,name=None)
tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops.stochastic_hard_routing_function(input_data,tree_parameters,tree_biases,tree_depth,random_seed,name=None)
tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops.stochastic_hard_routing_gradient(input_data,tree_parameters,tree_biases,path_probability,path,tree_depth,name=None)
tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops.unpack_path(path,path_values,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py----------------------------------------
A:tensorflow.contrib.tensor_forest.python.tensor_forest._->getattr(self, 'num_features')
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.bagged_num_features->int(self.feature_bagging_fraction * self.num_features)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.regression->getattr(self, 'regression', False)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.num_split_initializiations_per_input->max(1, int(math.floor(self.num_splits_to_consider / self.split_after_samples)))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.split_initializations_per_input->getattr(self, 'split_initializations_per_input', num_split_initializiations_per_input)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.base_random_seed->getattr(self, 'base_random_seed', 0)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.tree->tensorflow.python.ops.variable_scope.get_variable(name=self.get_tree_name('tree', tree_num), dtype=dtypes.int32, shape=[params.max_nodes, 2], initializer=init_ops.constant_initializer(-2))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.tree_thresholds->tensorflow.python.ops.variable_scope.get_variable(name=self.get_tree_name('tree_thresholds', tree_num), shape=[params.max_nodes], initializer=init_ops.constant_initializer(-1.0))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.end_of_tree->tensorflow.python.ops.variable_scope.get_variable(name=self.get_tree_name('end_of_tree', tree_num), dtype=dtypes.int32, initializer=constant_op.constant([1]))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.start_epoch->tensorflow.python.ops.variable_scope.get_variable(name=self.get_tree_name('start_epoch', tree_num), dtype=dtypes.int32, shape=[params.max_nodes], initializer=init_ops.constant_initializer(0))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.node_to_accumulator_map->tensorflow.python.ops.variable_scope.get_variable(name=self.get_tree_name('node_to_accumulator_map', tree_num), shape=[params.max_nodes], dtype=dtypes.int32, initializer=init_ops.constant_initializer(-1))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.accumulator_to_node_map->tensorflow.python.ops.variable_scope.get_variable(name=self.get_tree_name('accumulator_to_node_map', tree_num), shape=[params.max_fertile_nodes], dtype=dtypes.int32, initializer=init_ops.constant_initializer(-1))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.candidate_split_features->tensorflow.python.ops.variable_scope.get_variable(name=self.get_tree_name('candidate_split_features', tree_num), shape=[params.max_fertile_nodes, params.num_splits_to_consider], dtype=dtypes.int32, initializer=init_ops.constant_initializer(-1))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.candidate_split_thresholds->tensorflow.python.ops.variable_scope.get_variable(name=self.get_tree_name('candidate_split_thresholds', tree_num), shape=[params.max_fertile_nodes, params.num_splits_to_consider], initializer=init_ops.constant_initializer(0.0))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.node_sums->tensorflow.python.ops.variable_scope.get_variable(name=self.get_tree_name('node_sums', tree_num), shape=[params.max_nodes, params.num_output_columns], initializer=init_ops.constant_initializer(0.0))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.candidate_split_sums->tensorflow.python.ops.variable_scope.get_variable(name=self.get_tree_name('candidate_split_sums', tree_num), shape=[params.max_fertile_nodes, params.num_splits_to_consider, params.num_output_columns], initializer=init_ops.constant_initializer(0.0))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.accumulator_sums->tensorflow.python.ops.variable_scope.get_variable(name=self.get_tree_name('accumulator_sums', tree_num), shape=[params.max_fertile_nodes, params.num_output_columns], initializer=init_ops.constant_initializer(-1.0))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.node_squares->tensorflow.python.framework.constant_op.constant(0.0, name=self.get_tree_name('node_squares', tree_num))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.candidate_split_squares->tensorflow.python.framework.constant_op.constant(0.0, name=self.get_tree_name('candidate_split_squares', tree_num))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self.accumulator_squares->tensorflow.python.framework.constant_op.constant(0.0, name=self.get_tree_name('accumulator_squares', tree_num))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.split_data->tensorflow.python.ops.array_ops.split(value=input_data, num_or_size_splits=self.params.num_features, axis=1)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.(processed_dense_features, processed_sparse_features, data_spec)->tensorflow.contrib.tensor_forest.python.ops.data_ops.ParseDataTensorOrDict(input_data)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.labels->tensorflow.contrib.tensor_forest.python.ops.data_ops.ParseLabelTensorOrDict(input_labels)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.tree_start->int(trainer_id * trees_per_trainer)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.tree_end->int((trainer_id + 1) * trees_per_trainer)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.batch_size->tensorflow.python.ops.array_ops.strided_slice(array_ops.shape(processed_dense_features), [0], [1])
A:tensorflow.contrib.tensor_forest.python.tensor_forest.r->tensorflow.python.ops.random_ops.random_uniform(batch_size, seed=seed)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.mask->tensorflow.python.ops.math_ops.less(r, array_ops.ones_like(r) * self.params.bagging_fraction)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.gather_indices->tensorflow.python.ops.array_ops.squeeze(array_ops.where(mask), squeeze_dims=[1])
A:tensorflow.contrib.tensor_forest.python.tensor_forest.tree_data->self._bag_features(i, input_data)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.tree_labels->tensorflow.python.ops.array_ops.gather(labels, gather_indices)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.initialization->self.trees[i].tree_initialization()
A:tensorflow.contrib.tensor_forest.python.tensor_forest.all_predict->tensorflow.python.ops.array_ops.stack(probabilities)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.total_counts->tensorflow.python.ops.math_ops.reduce_sum(array_ops.stack(tree_counts, 0), 0)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.targets->tensorflow.python.ops.array_ops.squeeze(targets, squeeze_dims=[1])
A:tensorflow.contrib.tensor_forest.python.tensor_forest.one_hot_labels->tensorflow.python.ops.array_ops.one_hot(math_ops.to_int32(targets), num_classes, on_value=1.0, off_value=0.0, dtype=dtypes.float32)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.probs->self.inference_graph(features)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.self._loss->tensorflow.python.ops.control_flow_ops.cond(self.average_size() > 0, _average_loss, lambda : constant_op.constant(sys.maxsize, dtype=dtypes.float32))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.loss->self._get_loss(input_data, input_labels)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.sums->tensorflow.python.ops.array_ops.gather(self.variables.node_sums, non_fertile_leaves)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.sum_squares->tensorflow.python.ops.math_ops.reduce_sum(math_ops.square(smoothed), 1)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.total_count->tensorflow.python.ops.array_ops.slice(sums, [0, 0], [-1, 1])
A:tensorflow.contrib.tensor_forest.python.tensor_forest.epoch->tensorflow.python.ops.math_ops.to_int32(get_epoch_variable())
A:tensorflow.contrib.tensor_forest.python.tensor_forest.serialized_input_spec->data_spec.SerializeToString()
A:tensorflow.contrib.tensor_forest.python.tensor_forest.(node_sums, node_squares, splits_indices, splits_sums, splits_squares, totals_indices, totals_sums, totals_squares, input_leaves)->tensorflow.contrib.tensor_forest.python.ops.tensor_forest_ops.count_extremely_random_stats(input_data, sparse_indices, sparse_values, sparse_shape, input_labels, input_weights, self.variables.tree, self.variables.tree_thresholds, self.variables.node_to_accumulator_map, self.variables.candidate_split_features, self.variables.candidate_split_thresholds, self.variables.start_epoch, epoch, input_spec=serialized_input_spec, num_classes=self.params.num_output_columns, regression=self.params.regression)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.(update_indices, feature_updates, threshold_updates)->tensorflow.contrib.tensor_forest.python.ops.tensor_forest_ops.sample_inputs(input_data, sparse_indices, sparse_values, sparse_shape, input_weights, self.variables.node_to_accumulator_map, input_leaves, self.variables.candidate_split_features, self.variables.candidate_split_thresholds, input_spec=serialized_input_spec, split_initializations_per_input=self.params.split_initializations_per_input, split_sampling_random_seed=random_seed)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.update_features_op->tensorflow.python.ops.state_ops.scatter_update(self.variables.candidate_split_features, update_indices, feature_updates)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.update_thresholds_op->tensorflow.python.ops.state_ops.scatter_update(self.variables.candidate_split_thresholds, update_indices, threshold_updates)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.(finished, stale)->tensorflow.contrib.tensor_forest.python.ops.tensor_forest_ops.finished_nodes(input_leaves, self.variables.node_to_accumulator_map, self.variables.candidate_split_sums, self.variables.candidate_split_squares, self.variables.accumulator_sums, self.variables.accumulator_squares, self.variables.start_epoch, epoch, num_split_after_samples=self.params.split_after_samples, min_split_samples=self.params.min_split_samples, dominate_method=self.params.dominate_method, dominate_fraction=self.params.dominate_fraction)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.children->tensorflow.python.ops.array_ops.squeeze(array_ops.slice(self.variables.tree, [0, 0], [-1, 1]), squeeze_dims=[1])
A:tensorflow.contrib.tensor_forest.python.tensor_forest.is_leaf->tensorflow.python.ops.math_ops.equal(constants.LEAF_NODE, children)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.leaves->tensorflow.python.ops.math_ops.to_int32(array_ops.squeeze(array_ops.where(is_leaf), squeeze_dims=[1]))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.non_fertile_leaves->tensorflow.python.ops.array_ops.boolean_mask(leaves, math_ops.less(array_ops.gather(self.variables.node_to_accumulator_map, leaves), 0))
A:tensorflow.contrib.tensor_forest.python.tensor_forest.squares->tensorflow.python.ops.array_ops.gather(self.variables.node_squares, non_fertile_leaves)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.non_fertile_leaf_scores->self._weighted_gini(sums)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.split_indices->tensorflow.contrib.tensor_forest.python.ops.tensor_forest_ops.best_splits(finished, self.variables.node_to_accumulator_map, self.variables.candidate_split_sums, self.variables.candidate_split_squares, self.variables.accumulator_sums, self.variables.accumulator_squares, regression=self.params.regression)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.(tree_update_indices, tree_children_updates, tree_threshold_updates, new_eot)->tensorflow.contrib.tensor_forest.python.ops.tensor_forest_ops.grow_tree(self.variables.end_of_tree, self.variables.node_to_accumulator_map, finished, split_indices, self.variables.candidate_split_features, self.variables.candidate_split_thresholds)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.tree_update_op->tensorflow.python.ops.state_ops.scatter_update(self.variables.tree, tree_update_indices, tree_children_updates)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.thresholds_update_op->tensorflow.python.ops.state_ops.scatter_update(self.variables.tree_thresholds, tree_update_indices, tree_threshold_updates)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.epoch_update_op->tensorflow.python.ops.state_ops.scatter_update(self.variables.start_epoch, tree_update_indices, new_epoch_updates)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.(n2a_map_updates, a2n_map_updates, accumulators_cleared, accumulators_allocated)->tensorflow.contrib.tensor_forest.python.ops.tensor_forest_ops.update_fertile_slots(finished, non_fertile_leaves, non_fertile_leaf_scores, self.variables.end_of_tree, self.variables.accumulator_sums, self.variables.node_to_accumulator_map, stale, self.variables.node_sums, regression=self.params.regression)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.eot_update_op->tensorflow.python.ops.state_ops.assign(self.variables.end_of_tree, new_eot)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.cleared_and_allocated_accumulators->tensorflow.python.ops.array_ops.concat([accumulators_cleared, accumulators_allocated], 0)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.split_values->tensorflow.python.ops.array_ops.tile(array_ops.expand_dims(array_ops.expand_dims(array_ops.zeros_like(cleared_and_allocated_accumulators, dtype=dtypes.float32), 1), 2), [1, self.params.num_splits_to_consider, self.params.num_output_columns])
A:tensorflow.contrib.tensor_forest.python.tensor_forest.total_cleared->tensorflow.python.ops.array_ops.tile(array_ops.expand_dims(math_ops.negative(array_ops.ones_like(accumulators_cleared, dtype=dtypes.float32)), 1), [1, self.params.num_output_columns])
A:tensorflow.contrib.tensor_forest.python.tensor_forest.total_reset->tensorflow.python.ops.array_ops.tile(array_ops.expand_dims(array_ops.zeros_like(accumulators_allocated, dtype=dtypes.float32), 1), [1, self.params.num_output_columns])
A:tensorflow.contrib.tensor_forest.python.tensor_forest.accumulator_updates->tensorflow.python.ops.array_ops.concat([total_cleared, total_reset], 0)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.split_features_updates->tensorflow.python.ops.array_ops.tile(array_ops.expand_dims(math_ops.negative(array_ops.ones_like(cleared_and_allocated_accumulators)), 1), [1, self.params.num_splits_to_consider])
A:tensorflow.contrib.tensor_forest.python.tensor_forest.counts->tensorflow.python.ops.array_ops.gather(self.variables.node_sums, leaves)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.gini->self._weighted_gini(counts)
A:tensorflow.contrib.tensor_forest.python.tensor_forest.features->tensorflow.python.ops.array_ops.slice(self.variables.tree, [0, 1], [-1, 1])
A:tensorflow.contrib.tensor_forest.python.tensor_forest.one_hots->tensorflow.python.ops.array_ops.one_hot(array_ops.squeeze(features), self.params.num_features)
tensorflow.contrib.tensor_forest.python.tensor_forest.ForestHParams(self,num_trees=100,max_nodes=10000,bagging_fraction=1.0,num_splits_to_consider=0,feature_bagging_fraction=1.0,max_fertile_nodes=0,split_after_samples=250,min_split_samples=5,valid_leaf_threshold=1,dominate_method='bootstrap',dominate_fraction=0.99,**kwargs)
tensorflow.contrib.tensor_forest.python.tensor_forest.ForestHParams.__init__(self,num_trees=100,max_nodes=10000,bagging_fraction=1.0,num_splits_to_consider=0,feature_bagging_fraction=1.0,max_fertile_nodes=0,split_after_samples=250,min_split_samples=5,valid_leaf_threshold=1,dominate_method='bootstrap',dominate_fraction=0.99,**kwargs)
tensorflow.contrib.tensor_forest.python.tensor_forest.ForestHParams.fill(self)
tensorflow.contrib.tensor_forest.python.tensor_forest.ForestHParams.values(self)
tensorflow.contrib.tensor_forest.python.tensor_forest.ForestStats(self,tree_stats,params)
tensorflow.contrib.tensor_forest.python.tensor_forest.ForestStats.__init__(self,tree_stats,params)
tensorflow.contrib.tensor_forest.python.tensor_forest.ForestStats.get_average(self,thing)
tensorflow.contrib.tensor_forest.python.tensor_forest.ForestTrainingVariables(self,params,device_assigner,training=True,tree_variables_class=TreeTrainingVariables)
tensorflow.contrib.tensor_forest.python.tensor_forest.ForestTrainingVariables.__getitem__(self,t)
tensorflow.contrib.tensor_forest.python.tensor_forest.ForestTrainingVariables.__init__(self,params,device_assigner,training=True,tree_variables_class=TreeTrainingVariables)
tensorflow.contrib.tensor_forest.python.tensor_forest.ForestTrainingVariables.__setitem__(self,t,val)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomForestGraphs(self,params,device_assigner=None,variables=None,tree_variables_class=TreeTrainingVariables,tree_graphs=None,training=True)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomForestGraphs.__init__(self,params,device_assigner=None,variables=None,tree_variables_class=TreeTrainingVariables,tree_graphs=None,training=True)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomForestGraphs._bag_features(self,tree_num,input_data)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomForestGraphs.average_impurity(self)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomForestGraphs.average_size(self)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomForestGraphs.feature_importances(self)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomForestGraphs.get_stats(self,session)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomForestGraphs.inference_graph(self,input_data,**inference_args)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomForestGraphs.training_graph(self,input_data,input_labels,num_trainers=1,trainer_id=0,**tree_kwargs)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomForestGraphs.training_loss(self,features,labels,name='training_loss')
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomForestGraphs.validation_loss(self,features,labels)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomTreeGraphs(self,variables,params,tree_num)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomTreeGraphs.__init__(self,variables,params,tree_num)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomTreeGraphs._gini(self,class_counts)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomTreeGraphs._variance(self,sums,squares)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomTreeGraphs._weighted_gini(self,class_counts)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomTreeGraphs.average_impurity(self)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomTreeGraphs.feature_usage_counts(self)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomTreeGraphs.finish_iteration(self)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomTreeGraphs.get_stats(self,session)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomTreeGraphs.inference_graph(self,input_data,data_spec,sparse_features=None)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomTreeGraphs.size(self)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomTreeGraphs.training_graph(self,input_data,input_labels,random_seed,data_spec,sparse_features=None,input_weights=None)
tensorflow.contrib.tensor_forest.python.tensor_forest.RandomTreeGraphs.tree_initialization(self)
tensorflow.contrib.tensor_forest.python.tensor_forest.TrainingLossForest(self,params,loss_fn=None,**kwargs)
tensorflow.contrib.tensor_forest.python.tensor_forest.TrainingLossForest.__init__(self,params,loss_fn=None,**kwargs)
tensorflow.contrib.tensor_forest.python.tensor_forest.TrainingLossForest._get_loss(self,features,labels)
tensorflow.contrib.tensor_forest.python.tensor_forest.TrainingLossForest.training_graph(self,input_data,input_labels,**kwargs)
tensorflow.contrib.tensor_forest.python.tensor_forest.TrainingLossForest.training_loss(self,features,labels,name='training_loss')
tensorflow.contrib.tensor_forest.python.tensor_forest.TreeStats(self,num_nodes,num_leaves)
tensorflow.contrib.tensor_forest.python.tensor_forest.TreeStats.__init__(self,num_nodes,num_leaves)
tensorflow.contrib.tensor_forest.python.tensor_forest.TreeTrainingVariables(self,params,tree_num,training)
tensorflow.contrib.tensor_forest.python.tensor_forest.TreeTrainingVariables.__init__(self,params,tree_num,training)
tensorflow.contrib.tensor_forest.python.tensor_forest.TreeTrainingVariables.get_tree_name(self,name,num)
tensorflow.contrib.tensor_forest.python.tensor_forest.get_epoch_variable()
tensorflow.contrib.tensor_forest.python.tensor_forest.one_hot_wrapper(num_classes,loss_fn)
tensorflow.contrib.tensor_forest.tensor_forest.ForestHParams(self,num_trees=100,max_nodes=10000,bagging_fraction=1.0,num_splits_to_consider=0,feature_bagging_fraction=1.0,max_fertile_nodes=0,split_after_samples=250,min_split_samples=5,valid_leaf_threshold=1,dominate_method='bootstrap',dominate_fraction=0.99,**kwargs)
tensorflow.contrib.tensor_forest.tensor_forest.ForestHParams.fill(self)
tensorflow.contrib.tensor_forest.tensor_forest.ForestHParams.values(self)
tensorflow.contrib.tensor_forest.tensor_forest.ForestStats(self,tree_stats,params)
tensorflow.contrib.tensor_forest.tensor_forest.ForestStats.get_average(self,thing)
tensorflow.contrib.tensor_forest.tensor_forest.ForestTrainingVariables(self,params,device_assigner,training=True,tree_variables_class=TreeTrainingVariables)
tensorflow.contrib.tensor_forest.tensor_forest.ForestTrainingVariables.__getitem__(self,t)
tensorflow.contrib.tensor_forest.tensor_forest.ForestTrainingVariables.__setitem__(self,t,val)
tensorflow.contrib.tensor_forest.tensor_forest.RandomForestGraphs(self,params,device_assigner=None,variables=None,tree_variables_class=TreeTrainingVariables,tree_graphs=None,training=True)
tensorflow.contrib.tensor_forest.tensor_forest.RandomForestGraphs._bag_features(self,tree_num,input_data)
tensorflow.contrib.tensor_forest.tensor_forest.RandomForestGraphs.average_impurity(self)
tensorflow.contrib.tensor_forest.tensor_forest.RandomForestGraphs.average_size(self)
tensorflow.contrib.tensor_forest.tensor_forest.RandomForestGraphs.feature_importances(self)
tensorflow.contrib.tensor_forest.tensor_forest.RandomForestGraphs.get_stats(self,session)
tensorflow.contrib.tensor_forest.tensor_forest.RandomForestGraphs.inference_graph(self,input_data,**inference_args)
tensorflow.contrib.tensor_forest.tensor_forest.RandomForestGraphs.training_graph(self,input_data,input_labels,num_trainers=1,trainer_id=0,**tree_kwargs)
tensorflow.contrib.tensor_forest.tensor_forest.RandomForestGraphs.training_loss(self,features,labels,name='training_loss')
tensorflow.contrib.tensor_forest.tensor_forest.RandomForestGraphs.validation_loss(self,features,labels)
tensorflow.contrib.tensor_forest.tensor_forest.RandomTreeGraphs(self,variables,params,tree_num)
tensorflow.contrib.tensor_forest.tensor_forest.RandomTreeGraphs._gini(self,class_counts)
tensorflow.contrib.tensor_forest.tensor_forest.RandomTreeGraphs._variance(self,sums,squares)
tensorflow.contrib.tensor_forest.tensor_forest.RandomTreeGraphs._weighted_gini(self,class_counts)
tensorflow.contrib.tensor_forest.tensor_forest.RandomTreeGraphs.average_impurity(self)
tensorflow.contrib.tensor_forest.tensor_forest.RandomTreeGraphs.feature_usage_counts(self)
tensorflow.contrib.tensor_forest.tensor_forest.RandomTreeGraphs.finish_iteration(self)
tensorflow.contrib.tensor_forest.tensor_forest.RandomTreeGraphs.get_stats(self,session)
tensorflow.contrib.tensor_forest.tensor_forest.RandomTreeGraphs.inference_graph(self,input_data,data_spec,sparse_features=None)
tensorflow.contrib.tensor_forest.tensor_forest.RandomTreeGraphs.size(self)
tensorflow.contrib.tensor_forest.tensor_forest.RandomTreeGraphs.training_graph(self,input_data,input_labels,random_seed,data_spec,sparse_features=None,input_weights=None)
tensorflow.contrib.tensor_forest.tensor_forest.RandomTreeGraphs.tree_initialization(self)
tensorflow.contrib.tensor_forest.tensor_forest.TrainingLossForest(self,params,loss_fn=None,**kwargs)
tensorflow.contrib.tensor_forest.tensor_forest.TrainingLossForest._get_loss(self,features,labels)
tensorflow.contrib.tensor_forest.tensor_forest.TrainingLossForest.training_graph(self,input_data,input_labels,**kwargs)
tensorflow.contrib.tensor_forest.tensor_forest.TrainingLossForest.training_loss(self,features,labels,name='training_loss')
tensorflow.contrib.tensor_forest.tensor_forest.TreeStats(self,num_nodes,num_leaves)
tensorflow.contrib.tensor_forest.tensor_forest.TreeTrainingVariables(self,params,tree_num,training)
tensorflow.contrib.tensor_forest.tensor_forest.TreeTrainingVariables.get_tree_name(self,name,num)
tensorflow.contrib.tensor_forest.tensor_forest.get_epoch_variable()
tensorflow.contrib.tensor_forest.tensor_forest.one_hot_wrapper(num_classes,loss_fn)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/constants.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/ops/gen_tensor_forest_ops.py----------------------------------------
A:tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops.result->_InitOpDefLibrary().apply_op('UpdateFertileSlots', finished=finished, non_fertile_leaves=non_fertile_leaves, non_fertile_leaf_scores=non_fertile_leaf_scores, end_of_tree=end_of_tree, accumulator_sums=accumulator_sums, node_to_accumulator=node_to_accumulator, stale_leaves=stale_leaves, node_sums=node_sums, regression=regression, name=name)
A:tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops._CountExtremelyRandomStatsOutput->collections.namedtuple('CountExtremelyRandomStats', _count_extremely_random_stats_outputs)
A:tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops._FinishedNodesOutput->collections.namedtuple('FinishedNodes', _finished_nodes_outputs)
A:tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops._GrowTreeOutput->collections.namedtuple('GrowTree', _grow_tree_outputs)
A:tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops._SampleInputsOutput->collections.namedtuple('SampleInputs', _sample_inputs_outputs)
A:tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops._TopNInsertOutput->collections.namedtuple('TopNInsert', _top_n_insert_outputs)
A:tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops._TopNRemoveOutput->collections.namedtuple('TopNRemove', _top_n_remove_outputs)
A:tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops._UpdateFertileSlotsOutput->collections.namedtuple('UpdateFertileSlots', _update_fertile_slots_outputs)
A:tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.tensor_forest.ops.gen_tensor_forest_ops._InitOpDefLibrary()
tensorflow.contrib.tensor_forest.ops.gen_tensor_forest_ops.best_splits(finished_nodes,node_to_accumulator,split_sums,split_squares,accumulator_sums,accumulator_sqaures,regression=None,name=None)
tensorflow.contrib.tensor_forest.ops.gen_tensor_forest_ops.count_extremely_random_stats(input_data,sparse_input_indices,sparse_input_values,sparse_input_shape,input_labels,input_weights,tree,tree_thresholds,node_to_accumulator,candidate_split_features,candidate_split_thresholds,birth_epochs,current_epoch,input_spec,num_classes,regression=None,name=None)
tensorflow.contrib.tensor_forest.ops.gen_tensor_forest_ops.finished_nodes(leaves,node_to_accumulator,split_sums,split_squares,accumulator_sums,accumulator_squares,birth_epochs,current_epoch,num_split_after_samples,min_split_samples,regression=None,dominate_fraction=None,dominate_method=None,random_seed=None,check_dominates_every_samples=None,name=None)
tensorflow.contrib.tensor_forest.ops.gen_tensor_forest_ops.grow_tree(end_of_tree,node_to_accumulator,finished_nodes,best_splits,candidate_split_features,candidate_split_thresholds,name=None)
tensorflow.contrib.tensor_forest.ops.gen_tensor_forest_ops.reinterpret_string_to_float(input_data,name=None)
tensorflow.contrib.tensor_forest.ops.gen_tensor_forest_ops.sample_inputs(input_data,sparse_input_indices,sparse_input_values,sparse_input_shape,input_weights,node_to_accumulator,leaves,candidate_split_features,candidate_split_thresholds,input_spec,split_initializations_per_input,split_sampling_random_seed,name=None)
tensorflow.contrib.tensor_forest.ops.gen_tensor_forest_ops.scatter_add_ndim(input,indices,deltas,name=None)
tensorflow.contrib.tensor_forest.ops.gen_tensor_forest_ops.top_n_insert(ids,scores,new_ids,new_scores,name=None)
tensorflow.contrib.tensor_forest.ops.gen_tensor_forest_ops.top_n_remove(ids,remove_ids,name=None)
tensorflow.contrib.tensor_forest.ops.gen_tensor_forest_ops.tree_predictions(input_data,sparse_input_indices,sparse_input_values,sparse_input_shape,tree,tree_thresholds,node_per_class_weights,input_spec,valid_leaf_threshold,name=None)
tensorflow.contrib.tensor_forest.ops.gen_tensor_forest_ops.update_fertile_slots(finished,non_fertile_leaves,non_fertile_leaf_scores,end_of_tree,accumulator_sums,node_to_accumulator,stale_leaves,node_sums,regression=None,name=None)
tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops._InitOpDefLibrary()
tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops.best_splits(finished_nodes,node_to_accumulator,split_sums,split_squares,accumulator_sums,accumulator_sqaures,regression=None,name=None)
tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops.count_extremely_random_stats(input_data,sparse_input_indices,sparse_input_values,sparse_input_shape,input_labels,input_weights,tree,tree_thresholds,node_to_accumulator,candidate_split_features,candidate_split_thresholds,birth_epochs,current_epoch,input_spec,num_classes,regression=None,name=None)
tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops.finished_nodes(leaves,node_to_accumulator,split_sums,split_squares,accumulator_sums,accumulator_squares,birth_epochs,current_epoch,num_split_after_samples,min_split_samples,regression=None,dominate_fraction=None,dominate_method=None,random_seed=None,check_dominates_every_samples=None,name=None)
tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops.grow_tree(end_of_tree,node_to_accumulator,finished_nodes,best_splits,candidate_split_features,candidate_split_thresholds,name=None)
tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops.reinterpret_string_to_float(input_data,name=None)
tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops.sample_inputs(input_data,sparse_input_indices,sparse_input_values,sparse_input_shape,input_weights,node_to_accumulator,leaves,candidate_split_features,candidate_split_thresholds,input_spec,split_initializations_per_input,split_sampling_random_seed,name=None)
tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops.scatter_add_ndim(input,indices,deltas,name=None)
tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops.top_n_insert(ids,scores,new_ids,new_scores,name=None)
tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops.top_n_remove(ids,remove_ids,name=None)
tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops.tree_predictions(input_data,sparse_input_indices,sparse_input_values,sparse_input_shape,tree,tree_thresholds,node_per_class_weights,input_spec,valid_leaf_threshold,name=None)
tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops.update_fertile_slots(finished,non_fertile_leaves,non_fertile_leaf_scores,end_of_tree,accumulator_sums,node_to_accumulator,stale_leaves,node_sums,regression=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/ops/tensor_forest_ops.py----------------------------------------
A:tensorflow.contrib.tensor_forest.python.ops.tensor_forest_ops._tensor_forest_ops->tensorflow.contrib.util.loader.load_op_library(resource_loader.get_path_to_datafile('_tensor_forest_ops.so'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/ops/data_ops.py----------------------------------------
A:tensorflow.contrib.tensor_forest.python.ops.data_ops.self.sparse->DataColumnCollection()
A:tensorflow.contrib.tensor_forest.python.ops.data_ops.self.dense->DataColumnCollection()
A:tensorflow.contrib.tensor_forest.python.ops.data_ops.data_spec->TensorForestDataSpec()
A:tensorflow.contrib.tensor_forest.python.ops.data_ops.is_sparse->isinstance(data[k], sparse_tensor.SparseTensor)
A:tensorflow.contrib.tensor_forest.python.ops.data_ops.col_spec->TensorForestDataSpec().dense.add()
A:tensorflow.contrib.tensor_forest.python.ops.data_ops.shape->data[k].get_shape()
A:tensorflow.contrib.tensor_forest.python.ops.data_ops.processed_dense_features->tensorflow.python.ops.array_ops.concat(dense_features, 1)
A:tensorflow.contrib.tensor_forest.python.ops.data_ops.processed_sparse_features->tensorflow.python.ops.sparse_ops.sparse_concat(1, sparse_features)
A:tensorflow.contrib.tensor_forest.python.ops.data_ops.data->tensorflow.python.framework.ops.convert_to_tensor(data)
tensorflow.contrib.tensor_forest.data_ops.CastToFloat(tensor)
tensorflow.contrib.tensor_forest.data_ops.DataColumn(self)
tensorflow.contrib.tensor_forest.data_ops.DataColumn.SerializeToString(self)
tensorflow.contrib.tensor_forest.data_ops.DataColumnCollection(self)
tensorflow.contrib.tensor_forest.data_ops.DataColumnCollection.SerializeToString(self)
tensorflow.contrib.tensor_forest.data_ops.DataColumnCollection.add(self)
tensorflow.contrib.tensor_forest.data_ops.DataColumnCollection.size(self)
tensorflow.contrib.tensor_forest.data_ops.ParseDataTensorOrDict(data)
tensorflow.contrib.tensor_forest.data_ops.ParseLabelTensorOrDict(labels)
tensorflow.contrib.tensor_forest.data_ops.TensorForestDataSpec(self)
tensorflow.contrib.tensor_forest.data_ops.TensorForestDataSpec.SerializeToString(self)
tensorflow.contrib.tensor_forest.python.ops.data_ops.CastToFloat(tensor)
tensorflow.contrib.tensor_forest.python.ops.data_ops.DataColumn(self)
tensorflow.contrib.tensor_forest.python.ops.data_ops.DataColumn.SerializeToString(self)
tensorflow.contrib.tensor_forest.python.ops.data_ops.DataColumn.__init__(self)
tensorflow.contrib.tensor_forest.python.ops.data_ops.DataColumnCollection(self)
tensorflow.contrib.tensor_forest.python.ops.data_ops.DataColumnCollection.SerializeToString(self)
tensorflow.contrib.tensor_forest.python.ops.data_ops.DataColumnCollection.__init__(self)
tensorflow.contrib.tensor_forest.python.ops.data_ops.DataColumnCollection.add(self)
tensorflow.contrib.tensor_forest.python.ops.data_ops.DataColumnCollection.size(self)
tensorflow.contrib.tensor_forest.python.ops.data_ops.ParseDataTensorOrDict(data)
tensorflow.contrib.tensor_forest.python.ops.data_ops.ParseLabelTensorOrDict(labels)
tensorflow.contrib.tensor_forest.python.ops.data_ops.TensorForestDataSpec(self)
tensorflow.contrib.tensor_forest.python.ops.data_ops.TensorForestDataSpec.SerializeToString(self)
tensorflow.contrib.tensor_forest.python.ops.data_ops.TensorForestDataSpec.__init__(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/cmake/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/cmake/tools/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/cmake/tools/create_def_file.py----------------------------------------
A:tensorflow.contrib.cmake.tools.create_def_file.EXCLUDE_RE->re.compile('deleting destructor|::internal::')
A:tensorflow.contrib.cmake.tools.create_def_file.INCLUDEPRE_RE->re.compile('tensorflow::internal::LogMessage|' + 'tensorflow::internal::CheckOpMessageBuilder')
A:tensorflow.contrib.cmake.tools.create_def_file.INCLUDE_RE->re.compile('^(TF_\\w*)$|' + 'tensorflow::|' + 'functor::|' + 'perftools::gputools')
A:tensorflow.contrib.cmake.tools.create_def_file.parser->argparse.ArgumentParser()
A:tensorflow.contrib.cmake.tools.create_def_file.args->get_args()
A:tensorflow.contrib.cmake.tools.create_def_file.tmpfile->tempfile.NamedTemporaryFile(mode='w', delete=False)
A:tensorflow.contrib.cmake.tools.create_def_file.proc->Popen([UNDNAME, tmpfile.name], stdout=PIPE)
A:tensorflow.contrib.cmake.tools.create_def_file.cols->line.split()
A:tensorflow.contrib.cmake.tools.create_def_file.exit_code->Popen([UNDNAME, tmpfile.name], stdout=PIPE).wait()
A:tensorflow.contrib.cmake.tools.create_def_file.taken->set()
tensorflow.contrib.cmake.tools.create_def_file.get_args()
tensorflow.contrib.cmake.tools.create_def_file.main()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/bayesflow/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/bayesflow/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/bayesflow/python/ops/stochastic_gradient_estimators.py----------------------------------------
A:tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.value->tensorflow.python.framework.ops.convert_to_tensor(value)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.loss->tensorflow.python.framework.ops.convert_to_tensor(loss)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.baseline->tensorflow.python.ops.array_ops.identity(ema.average(reduced_loss))
A:tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.advantage->tensorflow.python.ops.array_ops.stop_gradient(advantage)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.baseline_fn->get_mean_baseline()
A:tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.b->baseline_fn(stochastic_tensor, loss)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.reduced_loss->tensorflow.python.ops.math_ops.reduce_mean(loss)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.ema->tensorflow.python.training.training.ExponentialMovingAverage(decay=ema_decay, zero_debias=True)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.update_op->tensorflow.python.training.training.ExponentialMovingAverage(decay=ema_decay, zero_debias=True).apply([reduced_loss])
A:tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.loss_shape->tensorflow.python.framework.ops.convert_to_tensor(loss).get_shape()
A:tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.n->tensorflow.python.ops.math_ops.cast(loss_num_elements or array_ops.shape(loss)[0], dtype=loss.dtype)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.log_loss->tensorflow.python.ops.math_ops.log(loss)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.log_loss_expanded->tensorflow.python.ops.array_ops.expand_dims(log_loss, [1])
A:tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.log_local_learning_reduction->tensorflow.python.ops.math_ops.reduce_logsumexp(-log_loss_sub, [0])
A:tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.__all__->make_all(__name__)
tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators._logexpm1(x)
tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.get_mean_baseline(ema_decay=0.99,name=None)
tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.get_score_function_with_advantage(advantage_fn=None,name='ScoreFunctionWithAdvantage')
tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.get_score_function_with_baseline(baseline_fn=None,name='ScoreFunction')
tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.get_score_function_with_constant_baseline(baseline,name='ScoreFunction')
tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.get_vimco_advantage_fn(have_log_loss=False)
tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators.score_function(stochastic_tensor,value,loss,baseline=None,name='ScoreFunction')
tensorflow.contrib.bayesflow.stochastic_gradient_estimators._logexpm1(x)
tensorflow.contrib.bayesflow.stochastic_gradient_estimators.get_mean_baseline(ema_decay=0.99,name=None)
tensorflow.contrib.bayesflow.stochastic_gradient_estimators.get_score_function_with_advantage(advantage_fn=None,name='ScoreFunctionWithAdvantage')
tensorflow.contrib.bayesflow.stochastic_gradient_estimators.get_score_function_with_baseline(baseline_fn=None,name='ScoreFunction')
tensorflow.contrib.bayesflow.stochastic_gradient_estimators.get_score_function_with_constant_baseline(baseline,name='ScoreFunction')
tensorflow.contrib.bayesflow.stochastic_gradient_estimators.get_vimco_advantage_fn(have_log_loss=False)
tensorflow.contrib.bayesflow.stochastic_gradient_estimators.score_function(stochastic_tensor,value,loss,baseline=None,name='ScoreFunction')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/bayesflow/python/ops/stochastic_graph_impl.py----------------------------------------
A:tensorflow.contrib.bayesflow.python.ops.stochastic_graph_impl.reverse_map->_stochastic_dependencies_map(tensors)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_graph_impl.upstream->collections.defaultdict(set)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_graph_impl.stoch_value_map->dict(((node.value(), node) for node in stoch_value_collection))
A:tensorflow.contrib.bayesflow.python.ops.stochastic_graph_impl.stoch_dependencies_map->_stochastic_dependencies_map(sample_losses, stochastic_tensors=stochastic_tensors)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_graph_impl.boundary->set([loss])
A:tensorflow.contrib.bayesflow.python.ops.stochastic_graph_impl.edge->set([loss]).pop()
A:tensorflow.contrib.bayesflow.python.ops.stochastic_graph_impl.edge_stoch_node->dict(((node.value(), node) for node in stoch_value_collection)).get(edge, None)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_graph_impl.dependent_losses->list(dependent_losses)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_graph_impl.influenced_loss->_add_n_or_sum(dependent_losses)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_graph_impl.loss_term->stoch_node.loss(array_ops.stop_gradient(influenced_loss))
A:tensorflow.contrib.bayesflow.python.ops.stochastic_graph_impl.shape->terms[0].get_shape()
tensorflow.contrib.bayesflow.python.ops.stochastic_graph_impl._add_n_or_sum(terms)
tensorflow.contrib.bayesflow.python.ops.stochastic_graph_impl._stochastic_dependencies_map(fixed_losses,stochastic_tensors=None)
tensorflow.contrib.bayesflow.python.ops.stochastic_graph_impl._upstream_stochastic_nodes(tensors)
tensorflow.contrib.bayesflow.python.ops.stochastic_graph_impl.surrogate_loss(sample_losses,stochastic_tensors=None,name='SurrogateLoss')
tensorflow.contrib.bayesflow.stochastic_graph_impl._add_n_or_sum(terms)
tensorflow.contrib.bayesflow.stochastic_graph_impl._stochastic_dependencies_map(fixed_losses,stochastic_tensors=None)
tensorflow.contrib.bayesflow.stochastic_graph_impl._upstream_stochastic_nodes(tensors)
tensorflow.contrib.bayesflow.stochastic_graph_impl.surrogate_loss(sample_losses,stochastic_tensors=None,name='SurrogateLoss')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/bayesflow/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/bayesflow/python/ops/stochastic_tensor.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/bayesflow/python/ops/monte_carlo.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/bayesflow/python/ops/stochastic_variables.py----------------------------------------
A:tensorflow.contrib.bayesflow.python.ops.stochastic_variables.param_shapes->dist_cls.param_static_shapes(shape)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_variables.param_names->set(list(param_shapes.keys()) + list(param_initializers.keys()))
A:tensorflow.contrib.bayesflow.python.ops.stochastic_variables.original_initializer->kwargs.pop('initializer', None)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_variables.param_initializer->param_initializers.get(param_name, None)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_variables.param_shape->dist_cls.param_static_shapes(shape).get(param_name, None)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_variables.params[param_name]->getter(name + '_' + param_name, shape=param_shape, initializer=param_initializer, **kwargs)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_variables.sample->tensorflow.contrib.bayesflow.python.ops.stochastic_tensor.StochasticTensor(dist_cls(**dist_kwargs))
A:tensorflow.contrib.bayesflow.python.ops.stochastic_variables.sample_value->tensorflow.contrib.bayesflow.python.ops.stochastic_tensor.StochasticTensor(dist_cls(**dist_kwargs)).value()
A:tensorflow.contrib.bayesflow.python.ops.stochastic_variables.prior->prior(sample_value.get_shape(), sample_value.dtype)
tensorflow.contrib.bayesflow.python.ops.stochastic_variables.get_stochastic_variable(getter,name,shape=None,dist_cls=None,dist_kwargs=None,param_initializers=None,prior=None,**kwargs)
tensorflow.contrib.bayesflow.python.ops.stochastic_variables.make_stochastic_variable_getter(dist_cls,dist_kwargs=None,param_initializers=None,prior=None)
tensorflow.contrib.bayesflow.stochastic_variables.get_stochastic_variable(getter,name,shape=None,dist_cls=None,dist_kwargs=None,param_initializers=None,prior=None,**kwargs)
tensorflow.contrib.bayesflow.stochastic_variables.make_stochastic_variable_getter(dist_cls,dist_kwargs=None,param_initializers=None,prior=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/bayesflow/python/ops/variational_inference_impl.py----------------------------------------
A:tensorflow.contrib.bayesflow.python.ops.variational_inference_impl.model->tensorflow.python.framework.ops.convert_to_tensor(log_joint)
A:tensorflow.contrib.bayesflow.python.ops.variational_inference_impl.variational_with_prior->_find_variational_and_priors(model, variational_with_prior, require_prior=False)
A:tensorflow.contrib.bayesflow.python.ops.variational_inference_impl.kl->tensorflow.contrib.distributions.python.ops.kullback_leibler.kl(q, p)
A:tensorflow.contrib.bayesflow.python.ops.variational_inference_impl.entropy->q.entropy()
A:tensorflow.contrib.bayesflow.python.ops.variational_inference_impl.prior->p.log_prob(z)
A:tensorflow.contrib.bayesflow.python.ops.variational_inference_impl.upstreams->list(upstreams[model])
A:tensorflow.contrib.bayesflow.python.ops.variational_inference_impl.prior_map->dict(ops.get_collection(VI_PRIORS))
A:tensorflow.contrib.bayesflow.python.ops.variational_inference_impl.variational_with_prior[q]->dict(ops.get_collection(VI_PRIORS)).get(q)
tensorflow.contrib.bayesflow.python.ops.variational_inference_impl.ELBOForms(object)
tensorflow.contrib.bayesflow.python.ops.variational_inference_impl.ELBOForms.check_form(form)
tensorflow.contrib.bayesflow.python.ops.variational_inference_impl._ELBOForm(object)
tensorflow.contrib.bayesflow.python.ops.variational_inference_impl._elbo(form,log_likelihood,log_joint,variational_with_prior,keep_batch_dim)
tensorflow.contrib.bayesflow.python.ops.variational_inference_impl._find_variational_and_priors(model,variational_with_prior,require_prior=True)
tensorflow.contrib.bayesflow.python.ops.variational_inference_impl.elbo(log_likelihood,variational_with_prior=None,keep_batch_dim=True,form=None,name='ELBO')
tensorflow.contrib.bayesflow.python.ops.variational_inference_impl.elbo_with_log_joint(log_joint,variational=None,keep_batch_dim=True,form=None,name='ELBO')
tensorflow.contrib.bayesflow.python.ops.variational_inference_impl.register_prior(variational,prior)
tensorflow.contrib.bayesflow.variational_inference_impl.ELBOForms(object)
tensorflow.contrib.bayesflow.variational_inference_impl.ELBOForms.check_form(form)
tensorflow.contrib.bayesflow.variational_inference_impl._ELBOForm(object)
tensorflow.contrib.bayesflow.variational_inference_impl._elbo(form,log_likelihood,log_joint,variational_with_prior,keep_batch_dim)
tensorflow.contrib.bayesflow.variational_inference_impl._find_variational_and_priors(model,variational_with_prior,require_prior=True)
tensorflow.contrib.bayesflow.variational_inference_impl.elbo(log_likelihood,variational_with_prior=None,keep_batch_dim=True,form=None,name='ELBO')
tensorflow.contrib.bayesflow.variational_inference_impl.elbo_with_log_joint(log_joint,variational=None,keep_batch_dim=True,form=None,name='ELBO')
tensorflow.contrib.bayesflow.variational_inference_impl.register_prior(variational,prior)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/bayesflow/python/ops/entropy_impl.py----------------------------------------
A:tensorflow.contrib.bayesflow.python.ops.entropy_impl.z->_get_samples(q, z, n, seed)
A:tensorflow.contrib.bayesflow.python.ops.entropy_impl.entropy->p.entropy()
A:tensorflow.contrib.bayesflow.python.ops.entropy_impl.negative_cross_entropy->_sample_mean(log_p(z))
A:tensorflow.contrib.bayesflow.python.ops.entropy_impl.log_mean_values->_logspace_mean(log_values)
A:tensorflow.contrib.bayesflow.python.ops.entropy_impl.alpha_min->tensorflow.python.framework.ops.convert_to_tensor(alpha_min, name='alpha_min')
A:tensorflow.contrib.bayesflow.python.ops.entropy_impl.alpha_max->tensorflow.python.framework.ops.convert_to_tensor(alpha_max, dtype=dtype, name='alpha_max')
A:tensorflow.contrib.bayesflow.python.ops.entropy_impl.decay_time->tensorflow.python.ops.math_ops.cast(decay_time, dtype)
A:tensorflow.contrib.bayesflow.python.ops.entropy_impl.step->tensorflow.python.ops.math_ops.cast(step, dtype)
A:tensorflow.contrib.bayesflow.python.ops.entropy_impl.theta->tensorflow.python.ops.math_ops.minimum(math_ops.maximum(theta, 0.0), 1.0)
tensorflow.contrib.bayesflow.entropy_impl.elbo_ratio(log_p,q,z=None,n=None,seed=None,form=None,name='elbo_ratio')
tensorflow.contrib.bayesflow.entropy_impl.entropy_shannon(p,z=None,n=None,seed=None,form=None,name='entropy_shannon')
tensorflow.contrib.bayesflow.entropy_impl.renyi_alpha(step,decay_time,alpha_min,alpha_max=0.99999,name='renyi_alpha')
tensorflow.contrib.bayesflow.entropy_impl.renyi_ratio(log_p,q,alpha,z=None,n=None,seed=None,name='renyi_ratio')
tensorflow.contrib.bayesflow.python.ops.entropy_impl.elbo_ratio(log_p,q,z=None,n=None,seed=None,form=None,name='elbo_ratio')
tensorflow.contrib.bayesflow.python.ops.entropy_impl.entropy_shannon(p,z=None,n=None,seed=None,form=None,name='entropy_shannon')
tensorflow.contrib.bayesflow.python.ops.entropy_impl.renyi_alpha(step,decay_time,alpha_min,alpha_max=0.99999,name='renyi_alpha')
tensorflow.contrib.bayesflow.python.ops.entropy_impl.renyi_ratio(log_p,q,alpha,z=None,n=None,seed=None,name='renyi_ratio')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/bayesflow/python/ops/variational_inference.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/bayesflow/python/ops/stochastic_tensor_impl.py----------------------------------------
A:tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl._STOCHASTIC_VALUE_STACK->collections.defaultdict(list)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.self._value_type->get_current_value_type()
A:tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.self._value->tensorflow.python.ops.array_ops.identity(value)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.value_tensor->self._dist.sample(self._value_type.shape)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.dist_shape->self._dist.batch_shape.concatenate(self._dist.event_shape)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.value->tensorflow.python.framework.ops.convert_to_tensor(value)
A:tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.value_shape->tensorflow.python.framework.ops.convert_to_tensor(value).get_shape()
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.BaseStochasticTensor(self)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.BaseStochasticTensor.__init__(self)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.BaseStochasticTensor._tensor_conversion_function(v,dtype=None,name=None,as_ref=False)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.BaseStochasticTensor.dtype(self)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.BaseStochasticTensor.graph(self)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.BaseStochasticTensor.loss(self,sample_loss)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.BaseStochasticTensor.name(self)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.BaseStochasticTensor.value(self,name=None)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.MeanValue(self,stop_gradient=False)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.MeanValue.__init__(self,stop_gradient=False)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.MeanValue.stop_gradient(self)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.NoValueTypeSetError(ValueError)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.ObservedStochasticTensor(self,dist,value,name=None)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.ObservedStochasticTensor.__init__(self,dist,value,name=None)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.ObservedStochasticTensor.loss(self,final_loss,name=None)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.SampleValue(self,shape=(),stop_gradient=False)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.SampleValue.__init__(self,shape=(),stop_gradient=False)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.SampleValue.shape(self)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.SampleValue.stop_gradient(self)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.StochasticTensor(self,dist,name='StochasticTensor',dist_value_type=None,loss_fn=sge.score_function)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.StochasticTensor.__init__(self,dist,name='StochasticTensor',dist_value_type=None,loss_fn=sge.score_function)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.StochasticTensor._create_value(self)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.StochasticTensor.distribution(self)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.StochasticTensor.dtype(self)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.StochasticTensor.entropy(self,name='entropy')
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.StochasticTensor.graph(self)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.StochasticTensor.loss(self,final_loss,name='Loss')
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.StochasticTensor.mean(self,name='mean')
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.StochasticTensor.name(self)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.StochasticTensor.value(self,name='value')
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.StochasticTensor.value_type(self)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl._StochasticValueType(object)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl._StochasticValueType.declare_inputs(self,unused_stochastic_tensor,unused_inputs_dict)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl._StochasticValueType.popped_above(self,unused_value_type)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl._StochasticValueType.pushed_above(self,unused_value_type)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl._StochasticValueType.stop_gradient(self)
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.get_current_value_type()
tensorflow.contrib.bayesflow.python.ops.stochastic_tensor_impl.value_type(dist_value_type)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.BaseStochasticTensor(self)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.BaseStochasticTensor._tensor_conversion_function(v,dtype=None,name=None,as_ref=False)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.BaseStochasticTensor.dtype(self)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.BaseStochasticTensor.graph(self)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.BaseStochasticTensor.loss(self,sample_loss)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.BaseStochasticTensor.name(self)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.BaseStochasticTensor.value(self,name=None)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.MeanValue(self,stop_gradient=False)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.MeanValue.stop_gradient(self)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.NoValueTypeSetError(ValueError)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.ObservedStochasticTensor(self,dist,value,name=None)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.ObservedStochasticTensor.loss(self,final_loss,name=None)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.SampleValue(self,shape=(),stop_gradient=False)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.SampleValue.shape(self)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.SampleValue.stop_gradient(self)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.StochasticTensor(self,dist,name='StochasticTensor',dist_value_type=None,loss_fn=sge.score_function)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.StochasticTensor._create_value(self)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.StochasticTensor.distribution(self)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.StochasticTensor.dtype(self)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.StochasticTensor.entropy(self,name='entropy')
tensorflow.contrib.bayesflow.stochastic_tensor_impl.StochasticTensor.graph(self)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.StochasticTensor.loss(self,final_loss,name='Loss')
tensorflow.contrib.bayesflow.stochastic_tensor_impl.StochasticTensor.mean(self,name='mean')
tensorflow.contrib.bayesflow.stochastic_tensor_impl.StochasticTensor.name(self)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.StochasticTensor.value(self,name='value')
tensorflow.contrib.bayesflow.stochastic_tensor_impl.StochasticTensor.value_type(self)
tensorflow.contrib.bayesflow.stochastic_tensor_impl._StochasticValueType(object)
tensorflow.contrib.bayesflow.stochastic_tensor_impl._StochasticValueType.declare_inputs(self,unused_stochastic_tensor,unused_inputs_dict)
tensorflow.contrib.bayesflow.stochastic_tensor_impl._StochasticValueType.popped_above(self,unused_value_type)
tensorflow.contrib.bayesflow.stochastic_tensor_impl._StochasticValueType.pushed_above(self,unused_value_type)
tensorflow.contrib.bayesflow.stochastic_tensor_impl._StochasticValueType.stop_gradient(self)
tensorflow.contrib.bayesflow.stochastic_tensor_impl.get_current_value_type()
tensorflow.contrib.bayesflow.stochastic_tensor_impl.value_type(dist_value_type)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/bayesflow/python/ops/stochastic_graph.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/bayesflow/python/ops/entropy.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/bayesflow/python/ops/monte_carlo_impl.py----------------------------------------
A:tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl.z->_get_samples(p, z, n, seed)
A:tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl.log_p_z->log_p(z)
A:tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl.q_log_prob_z->q.log_prob(z)
A:tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl.f_z->f(z)
A:tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl.log_f_plus_z->tensorflow.python.ops.math_ops.log(nn.relu(f_z) + 1.0)
A:tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl.log_f_minus_z->tensorflow.python.ops.math_ops.log(nn.relu(-1.0 * f_z) + 1.0)
A:tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl.log_f_plus_integral->_importance_sampler_positive_f(log_f_plus_z)
A:tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl.log_f_minus_integral->_importance_sampler_positive_f(log_f_minus_z)
A:tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl.center->tensorflow.python.ops.array_ops.stop_gradient(_sample_max(log_values))
A:tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl.centered_values->tensorflow.python.ops.math_ops.exp(log_values - center)
tensorflow.contrib.bayesflow.monte_carlo_impl._get_samples(dist,z,n,seed)
tensorflow.contrib.bayesflow.monte_carlo_impl._logspace_mean(log_values)
tensorflow.contrib.bayesflow.monte_carlo_impl._sample_max(values)
tensorflow.contrib.bayesflow.monte_carlo_impl._sample_mean(values)
tensorflow.contrib.bayesflow.monte_carlo_impl.expectation(f,p,z=None,n=None,seed=None,name='expectation')
tensorflow.contrib.bayesflow.monte_carlo_impl.expectation_importance_sampler(f,log_p,sampling_dist_q,z=None,n=None,seed=None,name='expectation_importance_sampler')
tensorflow.contrib.bayesflow.monte_carlo_impl.expectation_importance_sampler_logspace(log_f,log_p,sampling_dist_q,z=None,n=None,seed=None,name='expectation_importance_sampler_logspace')
tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl._get_samples(dist,z,n,seed)
tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl._logspace_mean(log_values)
tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl._sample_max(values)
tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl._sample_mean(values)
tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl.expectation(f,p,z=None,n=None,seed=None,name='expectation')
tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl.expectation_importance_sampler(f,log_p,sampling_dist_q,z=None,n=None,seed=None,name='expectation_importance_sampler')
tensorflow.contrib.bayesflow.python.ops.monte_carlo_impl.expectation_importance_sampler_logspace(log_f,log_p,sampling_dist_q,z=None,n=None,seed=None,name='expectation_importance_sampler_logspace')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/crf/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/crf/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/crf/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/crf/python/ops/crf.py----------------------------------------
A:tensorflow.contrib.crf.python.ops.crf.tiled_ranges->tensorflow.python.ops.array_ops.tile(array_ops.expand_dims(math_ops.range(max_length), 0), [array_ops.shape(lengths)[0], 1])
A:tensorflow.contrib.crf.python.ops.crf.lengths->tensorflow.python.ops.array_ops.expand_dims(lengths, 1)
A:tensorflow.contrib.crf.python.ops.crf.masks->_lengths_to_masks(sequence_lengths, array_ops.shape(tag_indices)[1])
A:tensorflow.contrib.crf.python.ops.crf.unary_scores->tensorflow.python.ops.math_ops.reduce_sum(unary_scores * masks, 1)
A:tensorflow.contrib.crf.python.ops.crf.binary_scores->tensorflow.python.ops.math_ops.reduce_sum(binary_scores * truncated_masks, 1)
A:tensorflow.contrib.crf.python.ops.crf.first_input->tensorflow.python.ops.array_ops.squeeze(first_input, [1])
A:tensorflow.contrib.crf.python.ops.crf.rest_of_input->tensorflow.python.ops.array_ops.slice(inputs, [0, 1, 0], [-1, -1, -1])
A:tensorflow.contrib.crf.python.ops.crf.forward_cell->CrfForwardRnnCell(transition_params)
A:tensorflow.contrib.crf.python.ops.crf.(_, alphas)->tensorflow.python.ops.rnn.dynamic_rnn(cell=forward_cell, inputs=rest_of_input, sequence_length=sequence_lengths - 1, initial_state=first_input, dtype=dtypes.float32)
A:tensorflow.contrib.crf.python.ops.crf.log_norm->crf_log_norm(inputs, sequence_lengths, transition_params)
A:tensorflow.contrib.crf.python.ops.crf.transition_params->tensorflow.python.ops.variable_scope.get_variable('transitions', [num_tags, num_tags])
A:tensorflow.contrib.crf.python.ops.crf.sequence_scores->crf_sequence_score(inputs, tag_indices, sequence_lengths, transition_params)
A:tensorflow.contrib.crf.python.ops.crf.flattened_inputs->tensorflow.python.ops.array_ops.reshape(inputs, [-1])
A:tensorflow.contrib.crf.python.ops.crf.offsets->tensorflow.python.ops.array_ops.expand_dims(math_ops.range(batch_size) * max_seq_len * num_tags, 1)
A:tensorflow.contrib.crf.python.ops.crf.flattened_tag_indices->tensorflow.python.ops.array_ops.reshape(offsets + tag_indices, [-1])
A:tensorflow.contrib.crf.python.ops.crf.start_tag_indices->tensorflow.python.ops.array_ops.slice(tag_indices, [0, 0], [-1, num_transitions])
A:tensorflow.contrib.crf.python.ops.crf.end_tag_indices->tensorflow.python.ops.array_ops.slice(tag_indices, [0, 1], [-1, num_transitions])
A:tensorflow.contrib.crf.python.ops.crf.flattened_transition_params->tensorflow.python.ops.array_ops.reshape(transition_params, [-1])
A:tensorflow.contrib.crf.python.ops.crf.truncated_masks->tensorflow.python.ops.array_ops.slice(masks, [0, 1], [-1, -1])
A:tensorflow.contrib.crf.python.ops.crf.self._transition_params->tensorflow.python.ops.array_ops.expand_dims(transition_params, 0)
A:tensorflow.contrib.crf.python.ops.crf.state->tensorflow.python.ops.array_ops.expand_dims(state, 2)
A:tensorflow.contrib.crf.python.ops.crf.trellis->numpy.zeros_like(score)
A:tensorflow.contrib.crf.python.ops.crf.backpointers->numpy.zeros_like(score, dtype=np.int32)
A:tensorflow.contrib.crf.python.ops.crf.backpointers[t]->numpy.argmax(v, 0)
A:tensorflow.contrib.crf.python.ops.crf.viterbi_score->numpy.max(trellis[-1])
tensorflow.contrib.crf.CrfForwardRnnCell(self,transition_params)
tensorflow.contrib.crf.CrfForwardRnnCell.output_size(self)
tensorflow.contrib.crf.CrfForwardRnnCell.state_size(self)
tensorflow.contrib.crf._lengths_to_masks(lengths,max_length)
tensorflow.contrib.crf.crf_binary_score(tag_indices,sequence_lengths,transition_params)
tensorflow.contrib.crf.crf_log_likelihood(inputs,tag_indices,sequence_lengths,transition_params=None)
tensorflow.contrib.crf.crf_log_norm(inputs,sequence_lengths,transition_params)
tensorflow.contrib.crf.crf_sequence_score(inputs,tag_indices,sequence_lengths,transition_params)
tensorflow.contrib.crf.crf_unary_score(tag_indices,sequence_lengths,inputs)
tensorflow.contrib.crf.python.ops.crf.CrfForwardRnnCell(self,transition_params)
tensorflow.contrib.crf.python.ops.crf.CrfForwardRnnCell.__init__(self,transition_params)
tensorflow.contrib.crf.python.ops.crf.CrfForwardRnnCell.output_size(self)
tensorflow.contrib.crf.python.ops.crf.CrfForwardRnnCell.state_size(self)
tensorflow.contrib.crf.python.ops.crf._lengths_to_masks(lengths,max_length)
tensorflow.contrib.crf.python.ops.crf.crf_binary_score(tag_indices,sequence_lengths,transition_params)
tensorflow.contrib.crf.python.ops.crf.crf_log_likelihood(inputs,tag_indices,sequence_lengths,transition_params=None)
tensorflow.contrib.crf.python.ops.crf.crf_log_norm(inputs,sequence_lengths,transition_params)
tensorflow.contrib.crf.python.ops.crf.crf_sequence_score(inputs,tag_indices,sequence_lengths,transition_params)
tensorflow.contrib.crf.python.ops.crf.crf_unary_score(tag_indices,sequence_lengths,inputs)
tensorflow.contrib.crf.python.ops.crf.viterbi_decode(score,transition_params)
tensorflow.contrib.crf.viterbi_decode(score,transition_params)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/memory_stats/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/memory_stats/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/memory_stats/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/memory_stats/python/ops/memory_stats_ops.py----------------------------------------
A:tensorflow.contrib.memory_stats.python.ops.memory_stats_ops._memory_stats_ops_so->tensorflow.contrib.util.loader.load_op_library(resource_loader.get_path_to_datafile('_memory_stats_ops.so'))
tensorflow.contrib.memory_stats.BytesLimit()
tensorflow.contrib.memory_stats.MaxBytesInUse()
tensorflow.contrib.memory_stats.python.ops.memory_stats_ops.BytesLimit()
tensorflow.contrib.memory_stats.python.ops.memory_stats_ops.MaxBytesInUse()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/memory_stats/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/memory_stats/ops/gen_memory_stats_ops.py----------------------------------------
A:tensorflow.contrib.memory_stats.ops.gen_memory_stats_ops.result->_InitOpDefLibrary().apply_op('MaxBytesInUse', name=name)
A:tensorflow.contrib.memory_stats.ops.gen_memory_stats_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.memory_stats.ops.gen_memory_stats_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.memory_stats.ops.gen_memory_stats_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.memory_stats.ops.gen_memory_stats_ops._InitOpDefLibrary()
tensorflow.contrib.memory_stats.ops.gen_memory_stats_ops.bytes_limit(name=None)
tensorflow.contrib.memory_stats.ops.gen_memory_stats_ops.max_bytes_in_use(name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/specs/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/specs/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/specs/python/summaries.py----------------------------------------
A:tensorflow.contrib.specs.python.summaries.SHORT_NAMES_SRC->'\nBiasAdd biasadd\nConst _\nConv2D conv\nMatMul dot\nPlaceholder _\nSigmoid sig\nVariable var\n'.split()
A:tensorflow.contrib.specs.python.summaries.finished->set()
A:tensorflow.contrib.specs.python.summaries.shape->x.get_shape().as_list()
A:tensorflow.contrib.specs.python.summaries.name->re.sub('/.*', '', name)
A:tensorflow.contrib.specs.python.summaries.(left, right)->tf_left_split(x)
A:tensorflow.contrib.specs.python.summaries.total->sum(totals)
A:tensorflow.contrib.specs.python.summaries.seq->reversed(list(seq))
A:tensorflow.contrib.specs.python.summaries.inputs->tensorflow.python.ops.array_ops.placeholder(input_type, input_shape)
A:tensorflow.contrib.specs.python.summaries.outputs->tensorflow.contrib.specs.python.specs.create_net(spec, inputs)
tensorflow.contrib.specs._combine_filter(x)
tensorflow.contrib.specs._truncate_structure(x)
tensorflow.contrib.specs.python.summaries._combine_filter(x)
tensorflow.contrib.specs.python.summaries._truncate_structure(x)
tensorflow.contrib.specs.python.summaries.tf_left_split(op)
tensorflow.contrib.specs.python.summaries.tf_num_params(x)
tensorflow.contrib.specs.python.summaries.tf_parameter_iter(x)
tensorflow.contrib.specs.python.summaries.tf_parameter_summary(x,printer=print,combine=True)
tensorflow.contrib.specs.python.summaries.tf_print(x,depth=0,finished=None,printer=print)
tensorflow.contrib.specs.python.summaries.tf_spec_print(spec,inputs=None,input_shape=None,input_type=dtypes.float32)
tensorflow.contrib.specs.python.summaries.tf_spec_structure(spec,inputs=None,input_shape=None,input_type=dtypes.float32)
tensorflow.contrib.specs.python.summaries.tf_spec_summary(spec,inputs=None,input_shape=None,input_type=dtypes.float32)
tensorflow.contrib.specs.python.summaries.tf_structure(x,include_shapes=False,finished=None)
tensorflow.contrib.specs.tf_left_split(op)
tensorflow.contrib.specs.tf_num_params(x)
tensorflow.contrib.specs.tf_parameter_iter(x)
tensorflow.contrib.specs.tf_parameter_summary(x,printer=print,combine=True)
tensorflow.contrib.specs.tf_print(x,depth=0,finished=None,printer=print)
tensorflow.contrib.specs.tf_spec_print(spec,inputs=None,input_shape=None,input_type=dtypes.float32)
tensorflow.contrib.specs.tf_spec_structure(spec,inputs=None,input_shape=None,input_type=dtypes.float32)
tensorflow.contrib.specs.tf_spec_summary(spec,inputs=None,input_shape=None,input_type=dtypes.float32)
tensorflow.contrib.specs.tf_structure(x,include_shapes=False,finished=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/specs/python/params_ops.py----------------------------------------
tensorflow.contrib.params_ops.Lf(lo,hi)
tensorflow.contrib.params_ops.Li(lo,hi)
tensorflow.contrib.params_ops.Nt(mu,sigma,limit=3.0)
tensorflow.contrib.params_ops.Uf(lo=0.0,hi=1.0)
tensorflow.contrib.params_ops.Ui(lo,hi)
tensorflow.contrib.specs.python.params_ops.Lf(lo,hi)
tensorflow.contrib.specs.python.params_ops.Li(lo,hi)
tensorflow.contrib.specs.python.params_ops.Nt(mu,sigma,limit=3.0)
tensorflow.contrib.specs.python.params_ops.Uf(lo=0.0,hi=1.0)
tensorflow.contrib.specs.python.params_ops.Ui(lo,hi)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/specs/python/specs.py----------------------------------------
A:tensorflow.contrib.specs.python.specs.bindings->eval_spec(spec, environment)
A:tensorflow.contrib.specs.python.specs.net->eval_spec(spec, environment).get('net', None)
A:tensorflow.contrib.specs.python.specs.names->vars(names)
A:tensorflow.contrib.specs.python.specs.self.frame->inspect.currentframe()
A:tensorflow.contrib.specs.python.specs.ops->LocalImport(specs_ops)
tensorflow.contrib.LocalImport(self,names)
tensorflow.contrib.LocalImport.__enter__(self)
tensorflow.contrib.LocalImport.__exit__(self,some_type,value,traceback)
tensorflow.contrib.create_net(spec,inputs,environment=None)
tensorflow.contrib.create_net_fun(spec,environment=None)
tensorflow.contrib.eval_params(params,environment=None)
tensorflow.contrib.eval_spec(spec,environment=None)
tensorflow.contrib.specs.python.specs.LocalImport(self,names)
tensorflow.contrib.specs.python.specs.LocalImport.__enter__(self)
tensorflow.contrib.specs.python.specs.LocalImport.__exit__(self,some_type,value,traceback)
tensorflow.contrib.specs.python.specs.LocalImport.__init__(self,names)
tensorflow.contrib.specs.python.specs.create_net(spec,inputs,environment=None)
tensorflow.contrib.specs.python.specs.create_net_fun(spec,environment=None)
tensorflow.contrib.specs.python.specs.eval_params(params,environment=None)
tensorflow.contrib.specs.python.specs.eval_spec(spec,environment=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/specs/python/specs_lib.py----------------------------------------
A:tensorflow.contrib.specs.python.specs_lib.QUOTED->re.compile('\n"([^"\\\\]|\\\\.)*" |\n\'([^\'\\\\]|\\\\.)*\'\n', re.VERBOSE)
A:tensorflow.contrib.specs.python.specs_lib.KEYWORDS->re.compile('\\b(import|while|def|exec)\\b')
A:tensorflow.contrib.specs.python.specs_lib.spec->re.sub(QUOTED, '', spec)
A:tensorflow.contrib.specs.python.specs_lib.match->re.search(KEYWORDS, spec)
A:tensorflow.contrib.specs.python.specs_lib.new_args->list(args)
A:tensorflow.contrib.specs.python.specs_lib.index->int(key[1:])
A:tensorflow.contrib.specs.python.specs_lib.result->Composition(result, self)
A:tensorflow.contrib.specs.python.specs_lib.self.args->list(args)
A:tensorflow.contrib.specs.python.specs_lib.new_kw->self.kw.copy()
A:tensorflow.contrib.specs.python.specs_lib.(args, kw)->get_positional(self.args, self.kw)
A:tensorflow.contrib.specs.python.specs_lib.module->importlib.import_module(module_name)
tensorflow.contrib.specs.Callable(self,f)
tensorflow.contrib.specs.Callable.funcall(self,x)
tensorflow.contrib.specs.Composable(object)
tensorflow.contrib.specs.Composable.__add__(self,g)
tensorflow.contrib.specs.Composable.__mul__(self,g)
tensorflow.contrib.specs.Composable.__or__(self,f)
tensorflow.contrib.specs.Composable.__pow__(self,n)
tensorflow.contrib.specs.Composition(self,f,g)
tensorflow.contrib.specs.Composition.funcall(self,x)
tensorflow.contrib.specs.External(module_name,function_name)
tensorflow.contrib.specs.Function(self,f,*args,**kw)
tensorflow.contrib.specs.Function.funcall(self,x)
tensorflow.contrib.specs.Import(statements)
tensorflow.contrib.specs.Operator(self,op,*args)
tensorflow.contrib.specs.Operator.funcall(self,x)
tensorflow.contrib.specs.check_keywords(spec)
tensorflow.contrib.specs.debug(mode=True)
tensorflow.contrib.specs.get_positional(args,kw,kw_overrides=False)
tensorflow.contrib.specs.python.specs_lib.Callable(self,f)
tensorflow.contrib.specs.python.specs_lib.Callable.__init__(self,f)
tensorflow.contrib.specs.python.specs_lib.Callable.funcall(self,x)
tensorflow.contrib.specs.python.specs_lib.Composable(object)
tensorflow.contrib.specs.python.specs_lib.Composable.__add__(self,g)
tensorflow.contrib.specs.python.specs_lib.Composable.__mul__(self,g)
tensorflow.contrib.specs.python.specs_lib.Composable.__or__(self,f)
tensorflow.contrib.specs.python.specs_lib.Composable.__pow__(self,n)
tensorflow.contrib.specs.python.specs_lib.Composition(self,f,g)
tensorflow.contrib.specs.python.specs_lib.Composition.__init__(self,f,g)
tensorflow.contrib.specs.python.specs_lib.Composition.funcall(self,x)
tensorflow.contrib.specs.python.specs_lib.External(module_name,function_name)
tensorflow.contrib.specs.python.specs_lib.Function(self,f,*args,**kw)
tensorflow.contrib.specs.python.specs_lib.Function.__init__(self,f,*args,**kw)
tensorflow.contrib.specs.python.specs_lib.Function.funcall(self,x)
tensorflow.contrib.specs.python.specs_lib.Import(statements)
tensorflow.contrib.specs.python.specs_lib.Operator(self,op,*args)
tensorflow.contrib.specs.python.specs_lib.Operator.__init__(self,op,*args)
tensorflow.contrib.specs.python.specs_lib.Operator.funcall(self,x)
tensorflow.contrib.specs.python.specs_lib.check_keywords(spec)
tensorflow.contrib.specs.python.specs_lib.debug(mode=True)
tensorflow.contrib.specs.python.specs_lib.get_positional(args,kw,kw_overrides=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/specs/python/specs_ops.py----------------------------------------
A:tensorflow.contrib.specs.python.specs_ops.Print->Fun(logging_ops.Print)
A:tensorflow.contrib.specs.python.specs_ops.Id->Fun(array_ops.identity)
A:tensorflow.contrib.specs.python.specs_ops.Cx->Fun(layers.conv2d)
A:tensorflow.contrib.specs.python.specs_ops.Cs->Fun(layers.conv2d, activation_fn=math_ops.sigmoid)
A:tensorflow.contrib.specs.python.specs_ops.Ct->Fun(layers.conv2d, activation_fn=math_ops.tanh)
A:tensorflow.contrib.specs.python.specs_ops.Cr->Fun(layers.conv2d, activation_fn=nn_ops.relu)
A:tensorflow.contrib.specs.python.specs_ops.Cm->Fun(layers.conv2d, activation_fn=nn_ops.softmax)
A:tensorflow.contrib.specs.python.specs_ops.Cl->Fun(layers.conv2d, activation_fn=None)
A:tensorflow.contrib.specs.python.specs_ops.Fx->Fun(layers.fully_connected)
A:tensorflow.contrib.specs.python.specs_ops.Fs->Fun(layers.fully_connected, activation_fn=math_ops.sigmoid)
A:tensorflow.contrib.specs.python.specs_ops.Ft->Fun(layers.fully_connected, activation_fn=math_ops.tanh)
A:tensorflow.contrib.specs.python.specs_ops.Fr->Fun(layers.fully_connected, activation_fn=nn_ops.relu)
A:tensorflow.contrib.specs.python.specs_ops.Fm->Fun(layers.fully_connected, activation_fn=nn_ops.softmax)
A:tensorflow.contrib.specs.python.specs_ops.Fl->Fun(layers.fully_connected, activation_fn=None)
A:tensorflow.contrib.specs.python.specs_ops.Mp->Fun(layers.max_pool2d)
A:tensorflow.contrib.specs.python.specs_ops.Ap->Fun(layers.avg_pool2d)
A:tensorflow.contrib.specs.python.specs_ops.Do->Fun(layers.dropout)
A:tensorflow.contrib.specs.python.specs_ops.Bn->Fun(layers.batch_norm)
A:tensorflow.contrib.specs.python.specs_ops.Lrn->Fun(nn.local_response_normalization)
A:tensorflow.contrib.specs.python.specs_ops.Unit->Fun(layers.unit_norm)
A:tensorflow.contrib.specs.python.specs_ops.Flat->Fun(layers.flatten)
A:tensorflow.contrib.specs.python.specs_ops.Reshape->Fun(array_ops.reshape)
A:tensorflow.contrib.specs.python.specs_ops.Transpose->Fun(array_ops.transpose)
A:tensorflow.contrib.specs.python.specs_ops.Squeeze->Fun(array_ops.squeeze)
A:tensorflow.contrib.specs.python.specs_ops.Expand->Fun(array_ops.expand_dims)
A:tensorflow.contrib.specs.python.specs_ops.Relu->Fun(nn_ops.relu)
A:tensorflow.contrib.specs.python.specs_ops.Sig->Fun(math_ops.sigmoid)
A:tensorflow.contrib.specs.python.specs_ops.Tanh->Fun(math_ops.tanh)
A:tensorflow.contrib.specs.python.specs_ops.Smax->Fun(nn_ops.softmax)
A:tensorflow.contrib.specs.python.specs_ops.Lstm2->Fun(lstm2d.separable_lstm)
A:tensorflow.contrib.specs.python.specs_ops.Lstm2to1->Fun(lstm2d.reduce_to_sequence)
A:tensorflow.contrib.specs.python.specs_ops.Lstm2to0->Fun(lstm2d.reduce_to_final)
A:tensorflow.contrib.specs.python.specs_ops.Lstm1->Fun(lstm1d.ndlstm_base)
A:tensorflow.contrib.specs.python.specs_ops.Lstm1to0->Fun(lstm1d.sequence_to_final)
A:tensorflow.contrib.specs.python.specs_ops.Ssm->Fun(lstm1d.sequence_softmax)
tensorflow.contrib.specs.Clstm2(n,*args,**kw)
tensorflow.contrib.specs.Conc(self,dim,*args)
tensorflow.contrib.specs.Conc.funcall(self,x)
tensorflow.contrib.specs.Dwm(n)
tensorflow.contrib.specs.Dws(n)
tensorflow.contrib.specs.Idx(specs_lib.Composable)
tensorflow.contrib.specs.Idx.funcall(self,x)
tensorflow.contrib.specs.Shared(self,subnet,name=None,scope=None)
tensorflow.contrib.specs.Shared.funcall(self,x)
tensorflow.contrib.specs.Var(name,*args,**kw)
tensorflow.contrib.specs.python.specs_ops.Clstm2(n,*args,**kw)
tensorflow.contrib.specs.python.specs_ops.Conc(self,dim,*args)
tensorflow.contrib.specs.python.specs_ops.Conc.__init__(self,dim,*args)
tensorflow.contrib.specs.python.specs_ops.Conc.funcall(self,x)
tensorflow.contrib.specs.python.specs_ops.Dwm(n)
tensorflow.contrib.specs.python.specs_ops.Dws(n)
tensorflow.contrib.specs.python.specs_ops.Idx(specs_lib.Composable)
tensorflow.contrib.specs.python.specs_ops.Idx.funcall(self,x)
tensorflow.contrib.specs.python.specs_ops.Shared(self,subnet,name=None,scope=None)
tensorflow.contrib.specs.python.specs_ops.Shared.__init__(self,subnet,name=None,scope=None)
tensorflow.contrib.specs.python.specs_ops.Shared.funcall(self,x)
tensorflow.contrib.specs.python.specs_ops.Var(name,*args,**kw)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/sparsemax/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/sparsemax/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/sparsemax/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/sparsemax/python/ops/sparsemax.py----------------------------------------
A:tensorflow.contrib.sparsemax.python.ops.sparsemax.logits->tensorflow.python.framework.ops.convert_to_tensor(logits, name='logits')
A:tensorflow.contrib.sparsemax.python.ops.sparsemax.(z_sorted, _)->tensorflow.python.ops.nn.top_k(z, k=dims)
A:tensorflow.contrib.sparsemax.python.ops.sparsemax.z_cumsum->tensorflow.python.ops.math_ops.cumsum(z_sorted, axis=1)
A:tensorflow.contrib.sparsemax.python.ops.sparsemax.k->tensorflow.python.ops.math_ops.range(1, math_ops.cast(dims, logits.dtype) + 1, dtype=logits.dtype)
A:tensorflow.contrib.sparsemax.python.ops.sparsemax.k_z->tensorflow.python.ops.math_ops.reduce_sum(math_ops.cast(z_check, dtypes.int32), axis=1)
A:tensorflow.contrib.sparsemax.python.ops.sparsemax.indices->tensorflow.python.ops.array_ops.stack([math_ops.range(0, obs), k_z - 1], axis=1)
A:tensorflow.contrib.sparsemax.python.ops.sparsemax.tau_sum->tensorflow.python.ops.array_ops.gather_nd(z_cumsum, indices)
tensorflow.contrib.sparsemax.python.ops.sparsemax.sparsemax(logits,name=None)
tensorflow.contrib.sparsemax.sparsemax(logits,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/sparsemax/python/ops/sparsemax_loss.py----------------------------------------
A:tensorflow.contrib.sparsemax.python.ops.sparsemax_loss.logits->tensorflow.python.framework.ops.convert_to_tensor(logits, name='logits')
A:tensorflow.contrib.sparsemax.python.ops.sparsemax_loss.sparsemax->tensorflow.python.framework.ops.convert_to_tensor(sparsemax, name='sparsemax')
A:tensorflow.contrib.sparsemax.python.ops.sparsemax_loss.labels->tensorflow.python.framework.ops.convert_to_tensor(labels, name='labels')
A:tensorflow.contrib.sparsemax.python.ops.sparsemax_loss.support->tensorflow.python.ops.math_ops.cast(sparsemax > 0, sparsemax.dtype)
tensorflow.contrib.sparsemax.python.ops.sparsemax_loss.sparsemax_loss(logits,sparsemax,labels,name=None)
tensorflow.contrib.sparsemax.sparsemax_loss(logits,sparsemax,labels,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/__init__.py----------------------------------------
A:tensorflow.contrib.slim.__init__.__all__->make_all(__name__)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/nets.py----------------------------------------
A:tensorflow.contrib.slim.nets.__all__->make_all(__name__)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/model_analyzer.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.model_analyzer.sizes->var.get_shape()
tensorflow.contrib.slim.model_analyzer.analyze_ops(graph,print_info=False)
tensorflow.contrib.slim.model_analyzer.analyze_vars(variables,print_info=False)
tensorflow.contrib.slim.model_analyzer.tensor_description(var)
tensorflow.contrib.slim.python.slim.model_analyzer.analyze_ops(graph,print_info=False)
tensorflow.contrib.slim.python.slim.model_analyzer.analyze_vars(variables,print_info=False)
tensorflow.contrib.slim.python.slim.model_analyzer.tensor_description(var)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/learning.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.learning.tmp->tensorflow.python.ops.clip_ops.clip_by_norm(grad.values, max_norm)
A:tensorflow.contrib.slim.python.slim.learning.grad->tensorflow.python.framework.ops.IndexedSlices(tmp, grad.indices, grad.dense_shape)
A:tensorflow.contrib.slim.python.slim.learning.multiplier->tensorflow.python.framework.constant_op.constant(multiplier, dtype=grad.dtype)
A:tensorflow.contrib.slim.python.slim.learning.grads->clip_gradient_norms(grads, clip_gradient_norm)
A:tensorflow.contrib.slim.python.slim.learning.start_time->time.time()
A:tensorflow.contrib.slim.python.slim.learning.trace_run_options->tensorflow.core.protobuf.config_pb2.RunOptions(trace_level=config_pb2.RunOptions.FULL_TRACE)
A:tensorflow.contrib.slim.python.slim.learning.run_metadata->tensorflow.core.protobuf.config_pb2.RunMetadata()
A:tensorflow.contrib.slim.python.slim.learning.(total_loss, np_global_step)->sess.run([train_op, global_step], options=trace_run_options, run_metadata=run_metadata)
A:tensorflow.contrib.slim.python.slim.learning.tl->tensorflow.python.client.timeline.Timeline(run_metadata.step_stats)
A:tensorflow.contrib.slim.python.slim.learning.trace->tensorflow.python.client.timeline.Timeline(run_metadata.step_stats).generate_chrome_trace_format()
A:tensorflow.contrib.slim.python.slim.learning.trace_filename->os.path.join(train_step_kwargs['logdir'], 'tf_trace-%d.json' % np_global_step)
A:tensorflow.contrib.slim.python.slim.learning.should_stop->sess.run(train_step_kwargs['should_stop'])
A:tensorflow.contrib.slim.python.slim.learning.global_step->tensorflow.contrib.framework.python.ops.variables.get_or_create_global_step()
A:tensorflow.contrib.slim.python.slim.learning.init_op->tensorflow.python.ops.variables.global_variables_initializer()
A:tensorflow.contrib.slim.python.slim.learning.ready_op->tensorflow.python.ops.variables.report_uninitialized_variables()
A:tensorflow.contrib.slim.python.slim.learning.local_init_op->tensorflow.python.ops.control_flow_ops.group(tf_variables.local_variables_initializer(), data_flow_ops.tables_initializer())
A:tensorflow.contrib.slim.python.slim.learning.summary_op->tensorflow.python.summary.summary.merge_all()
A:tensorflow.contrib.slim.python.slim.learning.init_tokens_op->sync_optimizer.get_init_tokens_op()
A:tensorflow.contrib.slim.python.slim.learning.chief_queue_runner->sync_optimizer.get_chief_queue_runner()
A:tensorflow.contrib.slim.python.slim.learning.should_stop_op->tensorflow.python.framework.constant_op.constant(False)
A:tensorflow.contrib.slim.python.slim.learning.train_step_kwargs['should_log']->tensorflow.python.ops.math_ops.equal(math_ops.mod(global_step, log_every_n_steps), 0)
A:tensorflow.contrib.slim.python.slim.learning.train_step_kwargs['should_trace']->tensorflow.python.ops.math_ops.equal(math_ops.mod(global_step, trace_every_n_steps), 0)
A:tensorflow.contrib.slim.python.slim.learning.sv->tensorflow.python.training.supervisor.Supervisor(graph=graph, is_chief=is_chief, logdir=logdir, init_op=init_op, init_feed_dict=init_feed_dict, local_init_op=local_init_op, ready_for_local_init_op=ready_for_local_init_op, ready_op=ready_op, summary_op=summary_op, summary_writer=summary_writer, global_step=global_step, saver=saver, save_summaries_secs=save_summaries_secs, save_model_secs=save_interval_secs, init_fn=init_fn)
A:tensorflow.contrib.slim.python.slim.learning.(total_loss, should_stop)->train_step_fn(sess, train_op, global_step, train_step_kwargs)
tensorflow.contrib.slim.learning._wait_for_step(sess,global_step,step)
tensorflow.contrib.slim.learning.add_gradients_summaries(grads_and_vars)
tensorflow.contrib.slim.learning.clip_gradient_norms(gradients_to_variables,max_norm)
tensorflow.contrib.slim.learning.create_train_op(total_loss,optimizer,global_step=_USE_GLOBAL_STEP,update_ops=None,variables_to_train=None,clip_gradient_norm=0,summarize_gradients=False,gate_gradients=tf_optimizer.Optimizer.GATE_OP,aggregation_method=None,colocate_gradients_with_ops=False,gradient_multipliers=None)
tensorflow.contrib.slim.learning.multiply_gradients(grads_and_vars,gradient_multipliers)
tensorflow.contrib.slim.learning.train(train_op,logdir,train_step_fn=train_step,train_step_kwargs=_USE_DEFAULT,log_every_n_steps=1,graph=None,master='',is_chief=True,global_step=None,number_of_steps=None,init_op=_USE_DEFAULT,init_feed_dict=None,local_init_op=_USE_DEFAULT,init_fn=None,ready_op=_USE_DEFAULT,summary_op=_USE_DEFAULT,save_summaries_secs=600,summary_writer=_USE_DEFAULT,startup_delay_steps=0,saver=None,save_interval_secs=600,sync_optimizer=None,session_config=None,trace_every_n_steps=None)
tensorflow.contrib.slim.learning.train_step(sess,train_op,global_step,train_step_kwargs)
tensorflow.contrib.slim.python.slim.learning._wait_for_step(sess,global_step,step)
tensorflow.contrib.slim.python.slim.learning.add_gradients_summaries(grads_and_vars)
tensorflow.contrib.slim.python.slim.learning.clip_gradient_norms(gradients_to_variables,max_norm)
tensorflow.contrib.slim.python.slim.learning.create_train_op(total_loss,optimizer,global_step=_USE_GLOBAL_STEP,update_ops=None,variables_to_train=None,clip_gradient_norm=0,summarize_gradients=False,gate_gradients=tf_optimizer.Optimizer.GATE_OP,aggregation_method=None,colocate_gradients_with_ops=False,gradient_multipliers=None)
tensorflow.contrib.slim.python.slim.learning.multiply_gradients(grads_and_vars,gradient_multipliers)
tensorflow.contrib.slim.python.slim.learning.train(train_op,logdir,train_step_fn=train_step,train_step_kwargs=_USE_DEFAULT,log_every_n_steps=1,graph=None,master='',is_chief=True,global_step=None,number_of_steps=None,init_op=_USE_DEFAULT,init_feed_dict=None,local_init_op=_USE_DEFAULT,init_fn=None,ready_op=_USE_DEFAULT,summary_op=_USE_DEFAULT,save_summaries_secs=600,summary_writer=_USE_DEFAULT,startup_delay_steps=0,saver=None,save_interval_secs=600,sync_optimizer=None,session_config=None,trace_every_n_steps=None)
tensorflow.contrib.slim.python.slim.learning.train_step(sess,train_op,global_step,train_step_kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/evaluation.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.evaluation.summary_op->tensorflow.python.summary.summary.merge_all()
A:tensorflow.contrib.slim.python.slim.evaluation.saver->tensorflow.python.training.saver.Saver(variables_to_restore)
tensorflow.contrib.slim.evaluation.evaluate_once(master,checkpoint_path,logdir,num_evals=1,initial_op=None,initial_op_feed_dict=None,eval_op=None,eval_op_feed_dict=None,final_op=None,final_op_feed_dict=None,summary_op=_USE_DEFAULT,summary_op_feed_dict=None,variables_to_restore=None,session_config=None)
tensorflow.contrib.slim.evaluation.evaluation_loop(master,checkpoint_dir,logdir,num_evals=1,initial_op=None,initial_op_feed_dict=None,eval_op=None,eval_op_feed_dict=None,final_op=None,final_op_feed_dict=None,summary_op=_USE_DEFAULT,summary_op_feed_dict=None,variables_to_restore=None,eval_interval_secs=60,max_number_of_evaluations=None,session_config=None,timeout=None)
tensorflow.contrib.slim.python.slim.evaluation.evaluate_once(master,checkpoint_path,logdir,num_evals=1,initial_op=None,initial_op_feed_dict=None,eval_op=None,eval_op_feed_dict=None,final_op=None,final_op_feed_dict=None,summary_op=_USE_DEFAULT,summary_op_feed_dict=None,variables_to_restore=None,session_config=None)
tensorflow.contrib.slim.python.slim.evaluation.evaluation_loop(master,checkpoint_dir,logdir,num_evals=1,initial_op=None,initial_op_feed_dict=None,eval_op=None,eval_op_feed_dict=None,final_op=None,final_op_feed_dict=None,summary_op=_USE_DEFAULT,summary_op_feed_dict=None,variables_to_restore=None,eval_interval_secs=60,max_number_of_evaluations=None,session_config=None,timeout=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/queues.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.queues._queue_runner_lock->threading.Lock()
A:tensorflow.contrib.slim.python.slim.queues.coord->tensorflow.python.training.coordinator.Coordinator()
tensorflow.contrib.slim.python.slim.queues.NestedQueueRunnerError(Exception)
tensorflow.contrib.slim.python.slim.queues.QueueRunners(session)
tensorflow.contrib.slim.queues.NestedQueueRunnerError(Exception)
tensorflow.contrib.slim.queues.QueueRunners(session)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/data/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/data/data_decoder.py----------------------------------------
tensorflow.contrib.slim.data_decoder.DataDecoder(object)
tensorflow.contrib.slim.data_decoder.DataDecoder.decode(self,data,items)
tensorflow.contrib.slim.data_decoder.DataDecoder.list_items(self)
tensorflow.contrib.slim.python.slim.data.data_decoder.DataDecoder(object)
tensorflow.contrib.slim.python.slim.data.data_decoder.DataDecoder.decode(self,data,items)
tensorflow.contrib.slim.python.slim.data.data_decoder.DataDecoder.list_items(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/data/prefetch_queue.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.data.prefetch_queue.names->list(sorted(tensors.keys()))
A:tensorflow.contrib.slim.python.slim.data.prefetch_queue.tensor_list->list([tensors[n] for n in names])
A:tensorflow.contrib.slim.python.slim.data.prefetch_queue.queue->tensorflow.python.ops.data_flow_ops.FIFOQueue(capacity=capacity, dtypes=dtypes, shapes=shapes, names=names, shared_name=shared_name)
A:tensorflow.contrib.slim.python.slim.data.prefetch_queue.enqueue_op->tensorflow.python.ops.data_flow_ops.FIFOQueue(capacity=capacity, dtypes=dtypes, shapes=shapes, names=names, shared_name=shared_name).enqueue(tensors)
tensorflow.contrib.slim.prefetch_queue.prefetch_queue(tensors,capacity=8,num_threads=1,shared_name=None,name=None)
tensorflow.contrib.slim.python.slim.data.prefetch_queue.prefetch_queue(tensors,capacity=8,num_threads=1,shared_name=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/data/tfexample_decoder.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.data.tfexample_decoder.side->tensorflow.python.ops.array_ops.expand_dims(keys_to_tensors[key].values, 0)
A:tensorflow.contrib.slim.python.slim.data.tfexample_decoder.bounding_box->tensorflow.python.ops.array_ops.concat(sides, 0)
A:tensorflow.contrib.slim.python.slim.data.tfexample_decoder.shape_dim->tensorflow.python.ops.sparse_ops.sparse_tensor_to_dense(shape_dim)
A:tensorflow.contrib.slim.python.slim.data.tfexample_decoder.shape->tensorflow.python.ops.sparse_ops.sparse_tensor_to_dense(shape)
A:tensorflow.contrib.slim.python.slim.data.tfexample_decoder.tensor->tensorflow.python.ops.sparse_ops.sparse_tensor_to_dense(tensor, self._default_value)
A:tensorflow.contrib.slim.python.slim.data.tfexample_decoder.indices_shape->tensorflow.python.ops.array_ops.shape(indices.indices)
A:tensorflow.contrib.slim.python.slim.data.tfexample_decoder.ids->tensorflow.python.ops.math_ops.to_int64(indices.values)
A:tensorflow.contrib.slim.python.slim.data.tfexample_decoder.indices_columns_to_preserve->tensorflow.python.ops.array_ops.slice(indices.indices, [0, 0], array_ops.stack([-1, rank - 1]))
A:tensorflow.contrib.slim.python.slim.data.tfexample_decoder.new_indices->tensorflow.python.ops.array_ops.concat([indices_columns_to_preserve, array_ops.reshape(ids, [-1, 1])], 1)
A:tensorflow.contrib.slim.python.slim.data.tfexample_decoder.image->tensorflow.python.ops.array_ops.reshape(image, self._shape)
A:tensorflow.contrib.slim.python.slim.data.tfexample_decoder.example->tensorflow.python.ops.parsing_ops.parse_single_example(serialized_example, self._keys_to_features)
A:tensorflow.contrib.slim.python.slim.data.tfexample_decoder.example[k]->tensorflow.python.ops.array_ops.reshape(example[k], v.shape)
A:tensorflow.contrib.slim.python.slim.data.tfexample_decoder.items->self._items_to_handlers.keys()
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.BoundingBox(self,keys=None,prefix=None)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.BoundingBox.__init__(self,keys=None,prefix=None)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.BoundingBox.tensors_to_item(self,keys_to_tensors)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.Image(self,image_key=None,format_key=None,shape=None,channels=3)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.Image.__init__(self,image_key=None,format_key=None,shape=None,channels=3)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.Image._decode(self,image_buffer,image_format)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.Image.tensors_to_item(self,keys_to_tensors)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.ItemHandler(self,keys)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.ItemHandler.__init__(self,keys)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.ItemHandler.keys(self)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.ItemHandler.tensors_to_item(self,keys_to_tensors)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.ItemHandlerCallback(self,keys,func)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.ItemHandlerCallback.__init__(self,keys,func)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.ItemHandlerCallback.tensors_to_item(self,keys_to_tensors)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.SparseTensor(self,indices_key=None,values_key=None,shape_key=None,shape=None,densify=False,default_value=0)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.SparseTensor.__init__(self,indices_key=None,values_key=None,shape_key=None,shape=None,densify=False,default_value=0)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.SparseTensor.tensors_to_item(self,keys_to_tensors)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.TFExampleDecoder(self,keys_to_features,items_to_handlers)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.TFExampleDecoder.__init__(self,keys_to_features,items_to_handlers)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.TFExampleDecoder.decode(self,serialized_example,items=None)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.TFExampleDecoder.list_items(self)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.Tensor(self,tensor_key,shape_keys=None,shape=None,default_value=0)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.Tensor.__init__(self,tensor_key,shape_keys=None,shape=None,default_value=0)
tensorflow.contrib.slim.python.slim.data.tfexample_decoder.Tensor.tensors_to_item(self,keys_to_tensors)
tensorflow.contrib.slim.tfexample_decoder.BoundingBox(self,keys=None,prefix=None)
tensorflow.contrib.slim.tfexample_decoder.BoundingBox.tensors_to_item(self,keys_to_tensors)
tensorflow.contrib.slim.tfexample_decoder.Image(self,image_key=None,format_key=None,shape=None,channels=3)
tensorflow.contrib.slim.tfexample_decoder.Image._decode(self,image_buffer,image_format)
tensorflow.contrib.slim.tfexample_decoder.Image.tensors_to_item(self,keys_to_tensors)
tensorflow.contrib.slim.tfexample_decoder.ItemHandler(self,keys)
tensorflow.contrib.slim.tfexample_decoder.ItemHandler.keys(self)
tensorflow.contrib.slim.tfexample_decoder.ItemHandler.tensors_to_item(self,keys_to_tensors)
tensorflow.contrib.slim.tfexample_decoder.ItemHandlerCallback(self,keys,func)
tensorflow.contrib.slim.tfexample_decoder.ItemHandlerCallback.tensors_to_item(self,keys_to_tensors)
tensorflow.contrib.slim.tfexample_decoder.SparseTensor(self,indices_key=None,values_key=None,shape_key=None,shape=None,densify=False,default_value=0)
tensorflow.contrib.slim.tfexample_decoder.SparseTensor.tensors_to_item(self,keys_to_tensors)
tensorflow.contrib.slim.tfexample_decoder.TFExampleDecoder(self,keys_to_features,items_to_handlers)
tensorflow.contrib.slim.tfexample_decoder.TFExampleDecoder.decode(self,serialized_example,items=None)
tensorflow.contrib.slim.tfexample_decoder.TFExampleDecoder.list_items(self)
tensorflow.contrib.slim.tfexample_decoder.Tensor(self,tensor_key,shape_keys=None,shape=None,default_value=0)
tensorflow.contrib.slim.tfexample_decoder.Tensor.tensors_to_item(self,keys_to_tensors)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/data/dataset.py----------------------------------------
tensorflow.contrib.slim.dataset.Dataset(self,data_sources,reader,decoder,num_samples,items_to_descriptions,**kwargs)
tensorflow.contrib.slim.python.slim.data.dataset.Dataset(self,data_sources,reader,decoder,num_samples,items_to_descriptions,**kwargs)
tensorflow.contrib.slim.python.slim.data.dataset.Dataset.__init__(self,data_sources,reader,decoder,num_samples,items_to_descriptions,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/data/data_provider.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.data.data_provider.valid_items->self.list_items()
tensorflow.contrib.slim.data_provider.DataProvider(self,items_to_tensors,num_samples)
tensorflow.contrib.slim.data_provider.DataProvider._validate_items(self,items)
tensorflow.contrib.slim.data_provider.DataProvider.get(self,items)
tensorflow.contrib.slim.data_provider.DataProvider.list_items(self)
tensorflow.contrib.slim.data_provider.DataProvider.num_samples(self)
tensorflow.contrib.slim.python.slim.data.data_provider.DataProvider(self,items_to_tensors,num_samples)
tensorflow.contrib.slim.python.slim.data.data_provider.DataProvider.__init__(self,items_to_tensors,num_samples)
tensorflow.contrib.slim.python.slim.data.data_provider.DataProvider._validate_items(self,items)
tensorflow.contrib.slim.python.slim.data.data_provider.DataProvider.get(self,items)
tensorflow.contrib.slim.python.slim.data.data_provider.DataProvider.list_items(self)
tensorflow.contrib.slim.python.slim.data.data_provider.DataProvider.num_samples(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/data/dataset_data_provider.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.data.dataset_data_provider.(key, data)->tensorflow.contrib.slim.python.slim.data.parallel_reader.parallel_read(dataset.data_sources, reader_class=dataset.reader, num_epochs=num_epochs, num_readers=num_readers, reader_kwargs=reader_kwargs, shuffle=shuffle, capacity=common_queue_capacity, min_after_dequeue=common_queue_min, seed=seed)
A:tensorflow.contrib.slim.python.slim.data.dataset_data_provider.items->dataset.decoder.list_items()
A:tensorflow.contrib.slim.python.slim.data.dataset_data_provider.tensors->dataset.decoder.decode(data, items)
tensorflow.contrib.slim.dataset_data_provider.DatasetDataProvider(self,dataset,num_readers=1,reader_kwargs=None,shuffle=True,num_epochs=None,common_queue_capacity=256,common_queue_min=128,record_key='record_key',seed=None)
tensorflow.contrib.slim.python.slim.data.dataset_data_provider.DatasetDataProvider(self,dataset,num_readers=1,reader_kwargs=None,shuffle=True,num_epochs=None,common_queue_capacity=256,common_queue_min=128,record_key='record_key',seed=None)
tensorflow.contrib.slim.python.slim.data.dataset_data_provider.DatasetDataProvider.__init__(self,dataset,num_readers=1,reader_kwargs=None,shuffle=True,num_epochs=None,common_queue_capacity=256,common_queue_min=128,record_key='record_key',seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/data/parallel_reader.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.data.parallel_reader.data_files->tensorflow.python.platform.gfile.Glob(data_sources)
A:tensorflow.contrib.slim.python.slim.data.parallel_reader.filename_queue->tensorflow.python.training.input.string_input_producer(data_files, num_epochs=1, shuffle=False, capacity=1, name='filenames')
A:tensorflow.contrib.slim.python.slim.data.parallel_reader.common_queue->tensorflow.python.ops.data_flow_ops.FIFOQueue(capacity=capacity, dtypes=dtypes, name='common_queue')
tensorflow.contrib.slim.parallel_reader.ParallelReader(self,reader_class,common_queue,num_readers=4,reader_kwargs=None)
tensorflow.contrib.slim.parallel_reader.ParallelReader.common_queue(self)
tensorflow.contrib.slim.parallel_reader.ParallelReader.num_readers(self)
tensorflow.contrib.slim.parallel_reader.ParallelReader.num_records_produced(self,name=None)
tensorflow.contrib.slim.parallel_reader.ParallelReader.num_work_units_completed(self,name=None)
tensorflow.contrib.slim.parallel_reader.ParallelReader.read(self,queue,name=None)
tensorflow.contrib.slim.parallel_reader.get_data_files(data_sources)
tensorflow.contrib.slim.parallel_reader.parallel_read(data_sources,reader_class,num_epochs=None,num_readers=4,reader_kwargs=None,shuffle=True,dtypes=None,capacity=256,min_after_dequeue=128,seed=None,scope=None)
tensorflow.contrib.slim.parallel_reader.single_pass_read(data_sources,reader_class,reader_kwargs=None,scope=None)
tensorflow.contrib.slim.python.slim.data.parallel_reader.ParallelReader(self,reader_class,common_queue,num_readers=4,reader_kwargs=None)
tensorflow.contrib.slim.python.slim.data.parallel_reader.ParallelReader.__init__(self,reader_class,common_queue,num_readers=4,reader_kwargs=None)
tensorflow.contrib.slim.python.slim.data.parallel_reader.ParallelReader.common_queue(self)
tensorflow.contrib.slim.python.slim.data.parallel_reader.ParallelReader.num_readers(self)
tensorflow.contrib.slim.python.slim.data.parallel_reader.ParallelReader.num_records_produced(self,name=None)
tensorflow.contrib.slim.python.slim.data.parallel_reader.ParallelReader.num_work_units_completed(self,name=None)
tensorflow.contrib.slim.python.slim.data.parallel_reader.ParallelReader.read(self,queue,name=None)
tensorflow.contrib.slim.python.slim.data.parallel_reader.get_data_files(data_sources)
tensorflow.contrib.slim.python.slim.data.parallel_reader.parallel_read(data_sources,reader_class,num_epochs=None,num_readers=4,reader_kwargs=None,shuffle=True,dtypes=None,capacity=256,min_after_dequeue=128,seed=None,scope=None)
tensorflow.contrib.slim.python.slim.data.parallel_reader.single_pass_read(data_sources,reader_class,reader_kwargs=None,scope=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/data/test_utils.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.data.test_utils.encoded->_encoder(image, image_format).eval()
A:tensorflow.contrib.slim.python.slim.data.test_utils.value->value.encode('utf-8').encode('utf-8')
A:tensorflow.contrib.slim.python.slim.data.test_utils.tf_image->tensorflow.python.framework.constant_op.constant(image, dtype=dtypes.uint8)
A:tensorflow.contrib.slim.python.slim.data.test_utils.image->numpy.random.random_integers(0, 255, size=image_shape)
A:tensorflow.contrib.slim.python.slim.data.test_utils.tf_encoded->_encoder(image, image_format)
A:tensorflow.contrib.slim.python.slim.data.test_utils.example->tensorflow.core.example.example_pb2.Example(features=feature_pb2.Features(feature={'image/encoded': _encoded_bytes_feature(tf_encoded), 'image/format': _string_feature(image_format), 'image/class/label': _encoded_int64_feature(np.array(label))}))
A:tensorflow.contrib.slim.python.slim.data.test_utils.path->os.path.join(output_dir, 'flowers.tfrecord-%d-of-%s' % (i, num_files))
A:tensorflow.contrib.slim.python.slim.data.test_utils.writer->tensorflow.python.lib.io.tf_record.TFRecordWriter(path)
A:tensorflow.contrib.slim.python.slim.data.test_utils.(_, example)->generate_image(image_shape=(10, 10, 3))
tensorflow.contrib.slim.python.slim.data.test_utils._encoded_bytes_feature(tf_encoded)
tensorflow.contrib.slim.python.slim.data.test_utils._encoded_int64_feature(ndarray)
tensorflow.contrib.slim.python.slim.data.test_utils._encoder(image,image_format)
tensorflow.contrib.slim.python.slim.data.test_utils._string_feature(value)
tensorflow.contrib.slim.python.slim.data.test_utils.create_tfrecord_files(output_dir,num_files=3,num_records_per_file=10)
tensorflow.contrib.slim.python.slim.data.test_utils.generate_image(image_shape,image_format='jpeg',label=0)
tensorflow.contrib.slim.slim.data.test_utils._encoded_bytes_feature(tf_encoded)
tensorflow.contrib.slim.slim.data.test_utils._encoded_int64_feature(ndarray)
tensorflow.contrib.slim.slim.data.test_utils._encoder(image,image_format)
tensorflow.contrib.slim.slim.data.test_utils._string_feature(value)
tensorflow.contrib.slim.slim.data.test_utils.create_tfrecord_files(output_dir,num_files=3,num_records_per_file=10)
tensorflow.contrib.slim.slim.data.test_utils.generate_image(image_shape,image_format='jpeg',label=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/nets/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/nets/inception_v1.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.nets.inception_v1.net->tensorflow.contrib.layers.python.layers.layers.dropout(net, dropout_keep_prob, scope='Dropout_0b')
A:tensorflow.contrib.slim.python.slim.nets.inception_v1.branch_0->tensorflow.contrib.layers.conv2d(net, 384, [1, 1], scope='Conv2d_0a_1x1')
A:tensorflow.contrib.slim.python.slim.nets.inception_v1.branch_1->tensorflow.contrib.layers.conv2d(branch_1, 384, [3, 3], scope='Conv2d_0b_3x3')
A:tensorflow.contrib.slim.python.slim.nets.inception_v1.branch_2->tensorflow.contrib.layers.conv2d(branch_2, 128, [3, 3], scope='Conv2d_0b_3x3')
A:tensorflow.contrib.slim.python.slim.nets.inception_v1.branch_3->tensorflow.contrib.layers.conv2d(branch_3, 128, [1, 1], scope='Conv2d_0b_1x1')
A:tensorflow.contrib.slim.python.slim.nets.inception_v1.(net, end_points)->inception_v1_base(inputs, scope=scope)
A:tensorflow.contrib.slim.python.slim.nets.inception_v1.logits->tensorflow.python.ops.array_ops.squeeze(logits, [1, 2], name='SpatialSqueeze')
A:tensorflow.contrib.slim.python.slim.nets.inception_v1.end_points['Predictions']->prediction_fn(logits, scope='Predictions')
tensorflow.contrib.slim.python.slim.nets.inception_v1.inception_v1(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.8,prediction_fn=layers_lib.softmax,spatial_squeeze=True,reuse=None,scope='InceptionV1')
tensorflow.contrib.slim.python.slim.nets.inception_v1.inception_v1_arg_scope(weight_decay=4e-05,use_batch_norm=True,batch_norm_var_collection='moving_vars')
tensorflow.contrib.slim.python.slim.nets.inception_v1.inception_v1_base(inputs,final_endpoint='Mixed_5c',scope='InceptionV1')
tensorflow.contrib.slim.slim.nets.inception_v1.inception_v1(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.8,prediction_fn=layers_lib.softmax,spatial_squeeze=True,reuse=None,scope='InceptionV1')
tensorflow.contrib.slim.slim.nets.inception_v1.inception_v1_arg_scope(weight_decay=4e-05,use_batch_norm=True,batch_norm_var_collection='moving_vars')
tensorflow.contrib.slim.slim.nets.inception_v1.inception_v1_base(inputs,final_endpoint='Mixed_5c',scope='InceptionV1')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/nets/inception.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/nets/resnet_utils.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.nets.resnet_utils.inputs->tensorflow.python.ops.array_ops.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])
A:tensorflow.contrib.slim.python.slim.nets.resnet_utils.net->tensorflow.contrib.layers.python.layers.utils.collect_named_outputs(outputs_collections, sc.name, net)
tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block(collections.namedtuple('Block',['scope','unit_fn','args']))
tensorflow.contrib.slim.python.slim.nets.resnet_utils.conv2d_same(inputs,num_outputs,kernel_size,stride,rate=1,scope=None)
tensorflow.contrib.slim.python.slim.nets.resnet_utils.resnet_arg_scope(is_training=True,weight_decay=0.0001,batch_norm_decay=0.997,batch_norm_epsilon=1e-05,batch_norm_scale=True)
tensorflow.contrib.slim.python.slim.nets.resnet_utils.stack_blocks_dense(net,blocks,output_stride=None,outputs_collections=None)
tensorflow.contrib.slim.python.slim.nets.resnet_utils.subsample(inputs,factor,scope=None)
tensorflow.contrib.slim.slim.nets.resnet_utils.Block(collections.namedtuple('Block',['scope','unit_fn','args']))
tensorflow.contrib.slim.slim.nets.resnet_utils.conv2d_same(inputs,num_outputs,kernel_size,stride,rate=1,scope=None)
tensorflow.contrib.slim.slim.nets.resnet_utils.resnet_arg_scope(is_training=True,weight_decay=0.0001,batch_norm_decay=0.997,batch_norm_epsilon=1e-05,batch_norm_scale=True)
tensorflow.contrib.slim.slim.nets.resnet_utils.stack_blocks_dense(net,blocks,output_stride=None,outputs_collections=None)
tensorflow.contrib.slim.slim.nets.resnet_utils.subsample(inputs,factor,scope=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/nets/overfeat.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.nets.overfeat.net->tensorflow.python.ops.array_ops.squeeze(net, [1, 2], name='fc8/squeezed')
A:tensorflow.contrib.slim.python.slim.nets.overfeat.end_points->tensorflow.contrib.layers.python.layers.utils.convert_collection_to_dict(end_points_collection)
tensorflow.contrib.slim.python.slim.nets.overfeat.overfeat(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.5,spatial_squeeze=True,scope='overfeat')
tensorflow.contrib.slim.python.slim.nets.overfeat.overfeat_arg_scope(weight_decay=0.0005)
tensorflow.contrib.slim.slim.nets.overfeat.overfeat(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.5,spatial_squeeze=True,scope='overfeat')
tensorflow.contrib.slim.slim.nets.overfeat.overfeat_arg_scope(weight_decay=0.0005)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/nets/resnet_v2.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.nets.resnet_v2.depth_in->tensorflow.contrib.layers.python.layers.utils.last_dimension(inputs.get_shape(), min_rank=4)
A:tensorflow.contrib.slim.python.slim.nets.resnet_v2.preact->tensorflow.contrib.layers.python.layers.layers.batch_norm(inputs, activation_fn=nn_ops.relu, scope='preact')
A:tensorflow.contrib.slim.python.slim.nets.resnet_v2.shortcut->tensorflow.contrib.layers.conv2d(preact, depth, [1, 1], stride=stride, normalizer_fn=None, activation_fn=None, scope='shortcut')
A:tensorflow.contrib.slim.python.slim.nets.resnet_v2.residual->tensorflow.contrib.layers.conv2d(residual, depth, [1, 1], stride=1, normalizer_fn=None, activation_fn=None, scope='conv3')
A:tensorflow.contrib.slim.python.slim.nets.resnet_v2.net->tensorflow.contrib.layers.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')
A:tensorflow.contrib.slim.python.slim.nets.resnet_v2.end_points->tensorflow.contrib.layers.python.layers.utils.convert_collection_to_dict(end_points_collection)
A:tensorflow.contrib.slim.python.slim.nets.resnet_v2.end_points['predictions']->tensorflow.contrib.layers.python.layers.layers.softmax(net, scope='predictions')
tensorflow.contrib.slim.python.slim.nets.resnet_v2.bottleneck(inputs,depth,depth_bottleneck,stride,rate=1,outputs_collections=None,scope=None)
tensorflow.contrib.slim.python.slim.nets.resnet_v2.resnet_v2(inputs,blocks,num_classes=None,global_pool=True,output_stride=None,include_root_block=True,reuse=None,scope=None)
tensorflow.contrib.slim.python.slim.nets.resnet_v2.resnet_v2_101(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v2_101')
tensorflow.contrib.slim.python.slim.nets.resnet_v2.resnet_v2_152(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v2_152')
tensorflow.contrib.slim.python.slim.nets.resnet_v2.resnet_v2_200(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v2_200')
tensorflow.contrib.slim.python.slim.nets.resnet_v2.resnet_v2_50(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v2_50')
tensorflow.contrib.slim.slim.nets.resnet_v2.bottleneck(inputs,depth,depth_bottleneck,stride,rate=1,outputs_collections=None,scope=None)
tensorflow.contrib.slim.slim.nets.resnet_v2.resnet_v2(inputs,blocks,num_classes=None,global_pool=True,output_stride=None,include_root_block=True,reuse=None,scope=None)
tensorflow.contrib.slim.slim.nets.resnet_v2.resnet_v2_101(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v2_101')
tensorflow.contrib.slim.slim.nets.resnet_v2.resnet_v2_152(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v2_152')
tensorflow.contrib.slim.slim.nets.resnet_v2.resnet_v2_200(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v2_200')
tensorflow.contrib.slim.slim.nets.resnet_v2.resnet_v2_50(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v2_50')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/nets/alexnet.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.nets.alexnet.net->tensorflow.python.ops.array_ops.squeeze(net, [1, 2], name='fc8/squeezed')
A:tensorflow.contrib.slim.python.slim.nets.alexnet.end_points->tensorflow.contrib.layers.python.layers.utils.convert_collection_to_dict(end_points_collection)
tensorflow.contrib.slim.python.slim.nets.alexnet.alexnet_v2(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.5,spatial_squeeze=True,scope='alexnet_v2')
tensorflow.contrib.slim.python.slim.nets.alexnet.alexnet_v2_arg_scope(weight_decay=0.0005)
tensorflow.contrib.slim.slim.nets.alexnet.alexnet_v2(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.5,spatial_squeeze=True,scope='alexnet_v2')
tensorflow.contrib.slim.slim.nets.alexnet.alexnet_v2_arg_scope(weight_decay=0.0005)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/nets/resnet_v1.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.nets.resnet_v1.depth_in->tensorflow.contrib.layers.python.layers.utils.last_dimension(inputs.get_shape(), min_rank=4)
A:tensorflow.contrib.slim.python.slim.nets.resnet_v1.shortcut->tensorflow.contrib.layers.conv2d(inputs, depth, [1, 1], stride=stride, activation_fn=None, scope='shortcut')
A:tensorflow.contrib.slim.python.slim.nets.resnet_v1.residual->tensorflow.contrib.layers.conv2d(residual, depth, [1, 1], stride=1, activation_fn=None, scope='conv3')
A:tensorflow.contrib.slim.python.slim.nets.resnet_v1.output->tensorflow.python.ops.nn_ops.relu(shortcut + residual)
A:tensorflow.contrib.slim.python.slim.nets.resnet_v1.net->tensorflow.contrib.layers.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')
A:tensorflow.contrib.slim.python.slim.nets.resnet_v1.end_points->tensorflow.contrib.layers.python.layers.utils.convert_collection_to_dict(end_points_collection)
A:tensorflow.contrib.slim.python.slim.nets.resnet_v1.end_points['predictions']->tensorflow.contrib.layers.python.layers.layers.softmax(net, scope='predictions')
tensorflow.contrib.slim.python.slim.nets.resnet_v1.bottleneck(inputs,depth,depth_bottleneck,stride,rate=1,outputs_collections=None,scope=None)
tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1(inputs,blocks,num_classes=None,global_pool=True,output_stride=None,include_root_block=True,reuse=None,scope=None)
tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_101(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v1_101')
tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_152(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v1_152')
tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_200(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v1_200')
tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_50(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v1_50')
tensorflow.contrib.slim.slim.nets.resnet_v1.bottleneck(inputs,depth,depth_bottleneck,stride,rate=1,outputs_collections=None,scope=None)
tensorflow.contrib.slim.slim.nets.resnet_v1.resnet_v1(inputs,blocks,num_classes=None,global_pool=True,output_stride=None,include_root_block=True,reuse=None,scope=None)
tensorflow.contrib.slim.slim.nets.resnet_v1.resnet_v1_101(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v1_101')
tensorflow.contrib.slim.slim.nets.resnet_v1.resnet_v1_152(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v1_152')
tensorflow.contrib.slim.slim.nets.resnet_v1.resnet_v1_200(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v1_200')
tensorflow.contrib.slim.slim.nets.resnet_v1.resnet_v1_50(inputs,num_classes=None,global_pool=True,output_stride=None,reuse=None,scope='resnet_v1_50')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/nets/inception_v2.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.nets.inception_v2.depthwise_multiplier->min(int(depth(64) / 3), 8)
A:tensorflow.contrib.slim.python.slim.nets.inception_v2.net->tensorflow.contrib.layers.python.layers.layers.dropout(net, keep_prob=dropout_keep_prob, scope='Dropout_1b')
A:tensorflow.contrib.slim.python.slim.nets.inception_v2.branch_0->tensorflow.contrib.layers.conv2d(net, depth(352), [1, 1], scope='Conv2d_0a_1x1')
A:tensorflow.contrib.slim.python.slim.nets.inception_v2.branch_1->tensorflow.contrib.layers.conv2d(branch_1, depth(320), [3, 3], scope='Conv2d_0b_3x3')
A:tensorflow.contrib.slim.python.slim.nets.inception_v2.branch_2->tensorflow.contrib.layers.conv2d(branch_2, depth(224), [3, 3], scope='Conv2d_0c_3x3')
A:tensorflow.contrib.slim.python.slim.nets.inception_v2.branch_3->tensorflow.contrib.layers.conv2d(branch_3, depth(128), [1, 1], weights_initializer=trunc_normal(0.1), scope='Conv2d_0b_1x1')
A:tensorflow.contrib.slim.python.slim.nets.inception_v2.(net, end_points)->inception_v2_base(inputs, scope=scope, min_depth=min_depth, depth_multiplier=depth_multiplier)
A:tensorflow.contrib.slim.python.slim.nets.inception_v2.kernel_size->_reduced_kernel_size_for_small_input(net, [7, 7])
A:tensorflow.contrib.slim.python.slim.nets.inception_v2.logits->tensorflow.python.ops.array_ops.squeeze(logits, [1, 2], name='SpatialSqueeze')
A:tensorflow.contrib.slim.python.slim.nets.inception_v2.end_points['Predictions']->prediction_fn(logits, scope='Predictions')
A:tensorflow.contrib.slim.python.slim.nets.inception_v2.shape->input_tensor.get_shape().as_list()
tensorflow.contrib.slim.python.slim.nets.inception_v2._reduced_kernel_size_for_small_input(input_tensor,kernel_size)
tensorflow.contrib.slim.python.slim.nets.inception_v2.inception_v2(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.8,min_depth=16,depth_multiplier=1.0,prediction_fn=layers_lib.softmax,spatial_squeeze=True,reuse=None,scope='InceptionV2')
tensorflow.contrib.slim.python.slim.nets.inception_v2.inception_v2_arg_scope(weight_decay=4e-05,batch_norm_var_collection='moving_vars')
tensorflow.contrib.slim.python.slim.nets.inception_v2.inception_v2_base(inputs,final_endpoint='Mixed_5c',min_depth=16,depth_multiplier=1.0,scope=None)
tensorflow.contrib.slim.slim.nets.inception_v2._reduced_kernel_size_for_small_input(input_tensor,kernel_size)
tensorflow.contrib.slim.slim.nets.inception_v2.inception_v2(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.8,min_depth=16,depth_multiplier=1.0,prediction_fn=layers_lib.softmax,spatial_squeeze=True,reuse=None,scope='InceptionV2')
tensorflow.contrib.slim.slim.nets.inception_v2.inception_v2_arg_scope(weight_decay=4e-05,batch_norm_var_collection='moving_vars')
tensorflow.contrib.slim.slim.nets.inception_v2.inception_v2_base(inputs,final_endpoint='Mixed_5c',min_depth=16,depth_multiplier=1.0,scope=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/nets/inception_v3.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.nets.inception_v3.net->tensorflow.contrib.layers.python.layers.layers.dropout(net, keep_prob=dropout_keep_prob, scope='Dropout_1b')
A:tensorflow.contrib.slim.python.slim.nets.inception_v3.branch_0->tensorflow.contrib.layers.conv2d(net, depth(320), [1, 1], scope='Conv2d_0a_1x1')
A:tensorflow.contrib.slim.python.slim.nets.inception_v3.branch_1->tensorflow.python.ops.array_ops.concat([layers.conv2d(branch_1, depth(384), [1, 3], scope='Conv2d_0b_1x3'), layers.conv2d(branch_1, depth(384), [3, 1], scope='Conv2d_0c_3x1')], 3)
A:tensorflow.contrib.slim.python.slim.nets.inception_v3.branch_2->tensorflow.python.ops.array_ops.concat([layers.conv2d(branch_2, depth(384), [1, 3], scope='Conv2d_0c_1x3'), layers.conv2d(branch_2, depth(384), [3, 1], scope='Conv2d_0d_3x1')], 3)
A:tensorflow.contrib.slim.python.slim.nets.inception_v3.branch_3->tensorflow.contrib.layers.conv2d(branch_3, depth(192), [1, 1], scope='Conv2d_0b_1x1')
A:tensorflow.contrib.slim.python.slim.nets.inception_v3.(net, end_points)->inception_v3_base(inputs, scope=scope, min_depth=min_depth, depth_multiplier=depth_multiplier)
A:tensorflow.contrib.slim.python.slim.nets.inception_v3.aux_logits->tensorflow.python.ops.array_ops.squeeze(aux_logits, [1, 2], name='SpatialSqueeze')
A:tensorflow.contrib.slim.python.slim.nets.inception_v3.kernel_size->_reduced_kernel_size_for_small_input(net, [8, 8])
A:tensorflow.contrib.slim.python.slim.nets.inception_v3.logits->tensorflow.python.ops.array_ops.squeeze(logits, [1, 2], name='SpatialSqueeze')
A:tensorflow.contrib.slim.python.slim.nets.inception_v3.end_points['Predictions']->prediction_fn(logits, scope='Predictions')
A:tensorflow.contrib.slim.python.slim.nets.inception_v3.shape->input_tensor.get_shape().as_list()
tensorflow.contrib.slim.python.slim.nets.inception_v3._reduced_kernel_size_for_small_input(input_tensor,kernel_size)
tensorflow.contrib.slim.python.slim.nets.inception_v3.inception_v3(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.8,min_depth=16,depth_multiplier=1.0,prediction_fn=layers_lib.softmax,spatial_squeeze=True,reuse=None,scope='InceptionV3')
tensorflow.contrib.slim.python.slim.nets.inception_v3.inception_v3_arg_scope(weight_decay=4e-05,stddev=0.1,batch_norm_var_collection='moving_vars')
tensorflow.contrib.slim.python.slim.nets.inception_v3.inception_v3_base(inputs,final_endpoint='Mixed_7c',min_depth=16,depth_multiplier=1.0,scope=None)
tensorflow.contrib.slim.slim.nets.inception_v3._reduced_kernel_size_for_small_input(input_tensor,kernel_size)
tensorflow.contrib.slim.slim.nets.inception_v3.inception_v3(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.8,min_depth=16,depth_multiplier=1.0,prediction_fn=layers_lib.softmax,spatial_squeeze=True,reuse=None,scope='InceptionV3')
tensorflow.contrib.slim.slim.nets.inception_v3.inception_v3_arg_scope(weight_decay=4e-05,stddev=0.1,batch_norm_var_collection='moving_vars')
tensorflow.contrib.slim.slim.nets.inception_v3.inception_v3_base(inputs,final_endpoint='Mixed_7c',min_depth=16,depth_multiplier=1.0,scope=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/slim/python/slim/nets/vgg.py----------------------------------------
A:tensorflow.contrib.slim.python.slim.nets.vgg.net->tensorflow.python.ops.array_ops.squeeze(net, [1, 2], name='fc8/squeezed')
A:tensorflow.contrib.slim.python.slim.nets.vgg.end_points->tensorflow.contrib.layers.python.layers.utils.convert_collection_to_dict(end_points_collection)
tensorflow.contrib.slim.python.slim.nets.vgg.vgg_16(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.5,spatial_squeeze=True,scope='vgg_16')
tensorflow.contrib.slim.python.slim.nets.vgg.vgg_19(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.5,spatial_squeeze=True,scope='vgg_19')
tensorflow.contrib.slim.python.slim.nets.vgg.vgg_a(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.5,spatial_squeeze=True,scope='vgg_a')
tensorflow.contrib.slim.python.slim.nets.vgg.vgg_arg_scope(weight_decay=0.0005)
tensorflow.contrib.slim.slim.nets.vgg.vgg_16(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.5,spatial_squeeze=True,scope='vgg_16')
tensorflow.contrib.slim.slim.nets.vgg.vgg_19(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.5,spatial_squeeze=True,scope='vgg_19')
tensorflow.contrib.slim.slim.nets.vgg.vgg_a(inputs,num_classes=1000,is_training=True,dropout_keep_prob=0.5,spatial_squeeze=True,scope='vgg_a')
tensorflow.contrib.slim.slim.nets.vgg.vgg_arg_scope(weight_decay=0.0005)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/integrate/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/integrate/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/integrate/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/integrate/python/ops/odes.py----------------------------------------
A:tensorflow.contrib.integrate.python.ops.odes._ButcherTableau->collections.namedtuple('_ButcherTableau', 'alpha beta c_sol c_mid c_error')
A:tensorflow.contrib.integrate.python.ops.odes._DORMAND_PRINCE_TABLEAU->_ButcherTableau(alpha=[1 / 5, 3 / 10, 4 / 5, 8 / 9, 1.0, 1.0], beta=[[1 / 5], [3 / 40, 9 / 40], [44 / 45, -56 / 15, 32 / 9], [19372 / 6561, -25360 / 2187, 64448 / 6561, -212 / 729], [9017 / 3168, -355 / 33, 46732 / 5247, 49 / 176, -5103 / 18656], [35 / 384, 0, 500 / 1113, 125 / 192, -2187 / 6784, 11 / 84]], c_sol=[35 / 384, 0, 500 / 1113, 125 / 192, -2187 / 6784, 11 / 84, 0], c_mid=[6025192743 / 30085553152 / 2, 0, 51252292925 / 65400821598 / 2, -2691868925 / 45128329728 / 2, 187940372067 / 1594534317056 / 2, -1776094331 / 19743644256 / 2, 11237099 / 235043384 / 2], c_error=[1951 / 21600 - 35 / 384, 0, 22642 / 50085 - 500 / 1113, 451 / 720 - 125 / 192, -12231 / 42400 - -2187 / 6784, 649 / 6300 - 11 / 84, 1 / 60])
A:tensorflow.contrib.integrate.python.ops.odes.y0->tensorflow.python.framework.ops.convert_to_tensor(y0, name='y0')
A:tensorflow.contrib.integrate.python.ops.odes.f0->tensorflow.python.framework.ops.convert_to_tensor(f0, name='f0')
A:tensorflow.contrib.integrate.python.ops.odes.t0->tensorflow.python.framework.ops.convert_to_tensor(t0)
A:tensorflow.contrib.integrate.python.ops.odes.dt->tensorflow.python.ops.math_ops.cast(dt, y0.dtype)
A:tensorflow.contrib.integrate.python.ops.odes.dt_cast->tensorflow.python.ops.math_ops.cast(dt, y0.dtype)
A:tensorflow.contrib.integrate.python.ops.odes.y1->tensorflow.python.ops.array_ops.identity(yi, name='%s/y1' % scope)
A:tensorflow.contrib.integrate.python.ops.odes.f1->tensorflow.python.ops.array_ops.identity(k[-1], name='%s/f1' % scope)
A:tensorflow.contrib.integrate.python.ops.odes.y1_error->_scaled_dot_product(dt_cast, tableau.c_error, k, name='%s/y1_error' % scope)
A:tensorflow.contrib.integrate.python.ops.odes.a->_dot_product([-2 * dt, 2 * dt, -8, -8, 16], [f0, f1, y0, y1, y_mid])
A:tensorflow.contrib.integrate.python.ops.odes.b->_dot_product([5 * dt, -3 * dt, 18, 14, -32], [f0, f1, y0, y1, y_mid])
A:tensorflow.contrib.integrate.python.ops.odes.c->_dot_product([-4 * dt, dt, -11, -5, 16], [f0, f1, y0, y1, y_mid])
A:tensorflow.contrib.integrate.python.ops.odes.t1->tensorflow.python.framework.ops.convert_to_tensor(t1)
A:tensorflow.contrib.integrate.python.ops.odes.t->tensorflow.python.framework.ops.convert_to_tensor(t, preferred_dtype=dtypes.float64, name='t')
A:tensorflow.contrib.integrate.python.ops.odes.assert_op->tensorflow.python.ops.control_flow_ops.Assert((t0 <= t) & (t <= t1), ['invalid interpolation, fails `t0 <= t <= t1`:', t0, t, t1])
A:tensorflow.contrib.integrate.python.ops.odes.x->tensorflow.python.ops.math_ops.cast((t - t0) / (t1 - t0), dtype)
A:tensorflow.contrib.integrate.python.ops.odes.error_ratio->tensorflow.python.ops.math_ops.sqrt(math_ops.reduce_mean(tensor_error_ratio))
A:tensorflow.contrib.integrate.python.ops.odes.exponent->tensorflow.python.ops.math_ops.cast(1 / order, last_step.dtype)
A:tensorflow.contrib.integrate.python.ops.odes.factor->tensorflow.python.ops.math_ops.maximum(1 / ifactor, math_ops.minimum(error_ratio ** exponent / safety, 1 / dfactor))
A:tensorflow.contrib.integrate.python.ops.odes.first_step->tensorflow.python.framework.ops.convert_to_tensor(first_step, dtype=t.dtype, name='first_step')
A:tensorflow.contrib.integrate.python.ops.odes.safety->tensorflow.python.framework.ops.convert_to_tensor(safety, dtype=t.dtype, name='safety')
A:tensorflow.contrib.integrate.python.ops.odes.ifactor->tensorflow.python.framework.ops.convert_to_tensor(ifactor, dtype=t.dtype, name='ifactor')
A:tensorflow.contrib.integrate.python.ops.odes.dfactor->tensorflow.python.framework.ops.convert_to_tensor(dfactor, dtype=t.dtype, name='dfactor')
A:tensorflow.contrib.integrate.python.ops.odes.max_num_steps->tensorflow.python.framework.ops.convert_to_tensor(max_num_steps, dtype=dtypes.int32, name='max_num_steps')
A:tensorflow.contrib.integrate.python.ops.odes.check_underflow->tensorflow.python.ops.control_flow_ops.Assert(t0 + dt > t0, ['underflow in dt', dt])
A:tensorflow.contrib.integrate.python.ops.odes.check_max_num_steps->tensorflow.python.ops.control_flow_ops.Assert(n_steps < max_num_steps, ['max_num_steps exceeded'])
A:tensorflow.contrib.integrate.python.ops.odes.check_numerics->tensorflow.python.ops.control_flow_ops.Assert(math_ops.reduce_all(math_ops.is_finite(abs(y0))), ['non-finite values in state `y`', y0])
A:tensorflow.contrib.integrate.python.ops.odes.(y1, f1, y1_error, k)->_runge_kutta_step(func, y0, f0, t0, dt)
A:tensorflow.contrib.integrate.python.ops.odes.y_next->tensorflow.python.ops.control_flow_ops.cond(accept_step, lambda : y1, lambda : y0)
A:tensorflow.contrib.integrate.python.ops.odes.f_next->tensorflow.python.ops.control_flow_ops.cond(accept_step, lambda : f1, lambda : f0)
A:tensorflow.contrib.integrate.python.ops.odes.t_next->tensorflow.python.ops.control_flow_ops.cond(accept_step, lambda : t0 + dt, lambda : t0)
A:tensorflow.contrib.integrate.python.ops.odes.interp_coeff->tensorflow.python.ops.control_flow_ops.cond(accept_step, lambda : _interp_fit_rk(y0, y1, k, dt), lambda : interp_coeff)
A:tensorflow.contrib.integrate.python.ops.odes.dt_next->_optimal_step_size(dt, error_ratio, safety, ifactor, dfactor)
A:tensorflow.contrib.integrate.python.ops.odes.rk_state->_RungeKuttaState(y0, func(y0, t[0]), t[0], t[0], first_step, interp_coeff=[y0] * 5)
A:tensorflow.contrib.integrate.python.ops.odes.history->_History(integrate_points=tensor_array_ops.TensorArray(t.dtype, size=0, dynamic_size=True), error_ratio=tensor_array_ops.TensorArray(rtol.dtype, size=0, dynamic_size=True))
A:tensorflow.contrib.integrate.python.ops.odes.(rk_state, history, _)->tensorflow.python.ops.control_flow_ops.while_loop(lambda rk_state, *_: t[i] > rk_state.t1, adaptive_runge_kutta_step, (rk_state, history, 0), name='integrate_loop')
A:tensorflow.contrib.integrate.python.ops.odes.y->tensorflow.python.ops.tensor_array_ops.TensorArray(y0.dtype, size=num_times).write(0, y0).stack(name=scope)
A:tensorflow.contrib.integrate.python.ops.odes.solution->tensorflow.python.ops.tensor_array_ops.TensorArray(y0.dtype, size=num_times).write(0, y0)
A:tensorflow.contrib.integrate.python.ops.odes.assert_increasing->tensorflow.python.ops.control_flow_ops.Assert(math_ops.reduce_all(t[1:] > t[:-1]), ['`t` must be monotonic increasing'])
A:tensorflow.contrib.integrate.python.ops.odes.num_times->tensorflow.python.ops.array_ops.size(t)
A:tensorflow.contrib.integrate.python.ops.odes.(solution, history, _, _)->tensorflow.python.ops.control_flow_ops.while_loop(lambda _, __, ___, i: i < num_times, interpolate, (solution, history, rk_state, 1), name='interpolate_loop')
A:tensorflow.contrib.integrate.python.ops.odes.integrate_points->_History(integrate_points=tensor_array_ops.TensorArray(t.dtype, size=0, dynamic_size=True), error_ratio=tensor_array_ops.TensorArray(rtol.dtype, size=0, dynamic_size=True)).integrate_points.stack()
A:tensorflow.contrib.integrate.python.ops.odes.rtol->tensorflow.python.framework.ops.convert_to_tensor(rtol, dtype=error_dtype, name='rtol')
A:tensorflow.contrib.integrate.python.ops.odes.atol->tensorflow.python.framework.ops.convert_to_tensor(atol, dtype=error_dtype, name='atol')
tensorflow.contrib.integrate._History(collections.namedtuple('_History','integrate_points,error_ratio'))
tensorflow.contrib.integrate._RungeKuttaState(collections.namedtuple('_RungeKuttaState','y1,f1,t0,t1,dt,interp_coeff'))
tensorflow.contrib.integrate._abs_square(x)
tensorflow.contrib.integrate._dopri5(func,y0,t,rtol,atol,full_output=False,first_step=None,safety=0.9,ifactor=10.0,dfactor=0.2,max_num_steps=1000,name=None)
tensorflow.contrib.integrate._dot_product(xs,ys,name=None)
tensorflow.contrib.integrate._interp_evaluate(coefficients,t0,t1,t)
tensorflow.contrib.integrate._interp_fit(y0,y1,y_mid,f0,f1,dt)
tensorflow.contrib.integrate._interp_fit_rk(y0,y1,k,dt,tableau=_DORMAND_PRINCE_TABLEAU)
tensorflow.contrib.integrate._optimal_step_size(last_step,error_ratio,safety=0.9,ifactor=10.0,dfactor=0.2,order=5,name=None)
tensorflow.contrib.integrate._possibly_nonzero(x)
tensorflow.contrib.integrate._runge_kutta_step(func,y0,f0,t0,dt,tableau=_DORMAND_PRINCE_TABLEAU,name=None)
tensorflow.contrib.integrate._scaled_dot_product(scale,xs,ys,name=None)
tensorflow.contrib.integrate._ta_append(tensor_array,value)
tensorflow.contrib.integrate.odeint(func,y0,t,rtol=1e-06,atol=1e-12,method=None,options=None,full_output=False,name=None)
tensorflow.contrib.integrate.python.ops.odes._History(collections.namedtuple('_History','integrate_points,error_ratio'))
tensorflow.contrib.integrate.python.ops.odes._RungeKuttaState(collections.namedtuple('_RungeKuttaState','y1,f1,t0,t1,dt,interp_coeff'))
tensorflow.contrib.integrate.python.ops.odes._abs_square(x)
tensorflow.contrib.integrate.python.ops.odes._dopri5(func,y0,t,rtol,atol,full_output=False,first_step=None,safety=0.9,ifactor=10.0,dfactor=0.2,max_num_steps=1000,name=None)
tensorflow.contrib.integrate.python.ops.odes._dot_product(xs,ys,name=None)
tensorflow.contrib.integrate.python.ops.odes._interp_evaluate(coefficients,t0,t1,t)
tensorflow.contrib.integrate.python.ops.odes._interp_fit(y0,y1,y_mid,f0,f1,dt)
tensorflow.contrib.integrate.python.ops.odes._interp_fit_rk(y0,y1,k,dt,tableau=_DORMAND_PRINCE_TABLEAU)
tensorflow.contrib.integrate.python.ops.odes._optimal_step_size(last_step,error_ratio,safety=0.9,ifactor=10.0,dfactor=0.2,order=5,name=None)
tensorflow.contrib.integrate.python.ops.odes._possibly_nonzero(x)
tensorflow.contrib.integrate.python.ops.odes._runge_kutta_step(func,y0,f0,t0,dt,tableau=_DORMAND_PRINCE_TABLEAU,name=None)
tensorflow.contrib.integrate.python.ops.odes._scaled_dot_product(scale,xs,ys,name=None)
tensorflow.contrib.integrate.python.ops.odes._ta_append(tensor_array,value)
tensorflow.contrib.integrate.python.ops.odes.odeint(func,y0,t,rtol=1e-06,atol=1e-12,method=None,options=None,full_output=False,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linalg/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linalg/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linalg/python/ops/linear_operator_util.py----------------------------------------
A:tensorflow.contrib.linalg.python.ops.linear_operator_util.x->tensorflow.python.framework.ops.convert_to_tensor(x, name='x')
A:tensorflow.contrib.linalg.python.ops.linear_operator_util.should_be_nonzero->tensorflow.python.ops.math_ops.abs(x)
A:tensorflow.contrib.linalg.python.ops.linear_operator_util.zero->tensorflow.python.framework.ops.convert_to_tensor(0, dtype=dtype.real_dtype)
A:tensorflow.contrib.linalg.python.ops.linear_operator_util.assert_same_dd->tensorflow.python.ops.check_ops.assert_equal(array_ops.shape(x)[-2], operator.domain_dimension_tensor(), message='Incompatible matrix dimensions.  shape[-2] of argument to be the same as this operator')
tensorflow.contrib.linalg.ops.linear_operator_util.assert_compatible_matrix_dimensions(operator,x)
tensorflow.contrib.linalg.ops.linear_operator_util.assert_no_entries_with_modulus_zero(x,message=None,name='assert_no_entries_with_modulus_zero')
tensorflow.contrib.linalg.ops.linear_operator_util.assert_zero_imag_part(x,message=None,name='assert_zero_imag_part')
tensorflow.contrib.linalg.ops.linear_operator_util.shape_tensor(shape,name=None)
tensorflow.contrib.linalg.python.ops.linear_operator_util.assert_compatible_matrix_dimensions(operator,x)
tensorflow.contrib.linalg.python.ops.linear_operator_util.assert_no_entries_with_modulus_zero(x,message=None,name='assert_no_entries_with_modulus_zero')
tensorflow.contrib.linalg.python.ops.linear_operator_util.assert_zero_imag_part(x,message=None,name='assert_zero_imag_part')
tensorflow.contrib.linalg.python.ops.linear_operator_util.shape_tensor(shape,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linalg/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linalg/python/ops/linear_operator_tril.py----------------------------------------
A:tensorflow.contrib.linalg.python.ops.linear_operator_tril.self._tril->tensorflow.python.ops.array_ops.matrix_band_part(tril, -1, 0)
A:tensorflow.contrib.linalg.python.ops.linear_operator_tril.self._diag->tensorflow.python.ops.array_ops.matrix_diag_part(self._tril)
tensorflow.contrib.linalg.LinearOperatorTriL(self,tril,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,name='LinearOperatorTriL')
tensorflow.contrib.linalg.LinearOperatorTriL._add_to_tensor(self,x)
tensorflow.contrib.linalg.LinearOperatorTriL._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.LinearOperatorTriL._assert_non_singular(self)
tensorflow.contrib.linalg.LinearOperatorTriL._assert_positive_definite(self)
tensorflow.contrib.linalg.LinearOperatorTriL._check_tril(self,tril)
tensorflow.contrib.linalg.LinearOperatorTriL._determinant(self)
tensorflow.contrib.linalg.LinearOperatorTriL._log_abs_determinant(self)
tensorflow.contrib.linalg.LinearOperatorTriL._shape(self)
tensorflow.contrib.linalg.LinearOperatorTriL._shape_tensor(self)
tensorflow.contrib.linalg.LinearOperatorTriL._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.LinearOperatorTriL._to_dense(self)
tensorflow.contrib.linalg.python.ops.linear_operator_tril.LinearOperatorTriL(self,tril,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,name='LinearOperatorTriL')
tensorflow.contrib.linalg.python.ops.linear_operator_tril.LinearOperatorTriL.__init__(self,tril,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,name='LinearOperatorTriL')
tensorflow.contrib.linalg.python.ops.linear_operator_tril.LinearOperatorTriL._add_to_tensor(self,x)
tensorflow.contrib.linalg.python.ops.linear_operator_tril.LinearOperatorTriL._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator_tril.LinearOperatorTriL._assert_non_singular(self)
tensorflow.contrib.linalg.python.ops.linear_operator_tril.LinearOperatorTriL._assert_positive_definite(self)
tensorflow.contrib.linalg.python.ops.linear_operator_tril.LinearOperatorTriL._check_tril(self,tril)
tensorflow.contrib.linalg.python.ops.linear_operator_tril.LinearOperatorTriL._determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator_tril.LinearOperatorTriL._log_abs_determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator_tril.LinearOperatorTriL._shape(self)
tensorflow.contrib.linalg.python.ops.linear_operator_tril.LinearOperatorTriL._shape_tensor(self)
tensorflow.contrib.linalg.python.ops.linear_operator_tril.LinearOperatorTriL._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator_tril.LinearOperatorTriL._to_dense(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linalg/python/ops/linear_operator.py----------------------------------------
A:tensorflow.contrib.linalg.python.ops.linear_operator.self._cached_shape_tensor->self._shape_tensor()
A:tensorflow.contrib.linalg.python.ops.linear_operator.self._cached_batch_shape_tensor->tensorflow.contrib.linalg.python.ops.linear_operator_util.shape_tensor(self.batch_shape.as_list(), name='batch_shape')
A:tensorflow.contrib.linalg.python.ops.linear_operator.self._cached_tensor_rank_tensor->tensorflow.python.ops.array_ops.size(self.shape_tensor())
A:tensorflow.contrib.linalg.python.ops.linear_operator.self._cached_domain_dimension_tensor->tensorflow.python.framework.ops.convert_to_tensor(self.domain_dimension.value)
A:tensorflow.contrib.linalg.python.ops.linear_operator.self._cached_range_dimension_tensor->tensorflow.python.framework.ops.convert_to_tensor(self.range_dimension.value)
A:tensorflow.contrib.linalg.python.ops.linear_operator.x->tensorflow.python.framework.ops.convert_to_tensor(x, name='x')
A:tensorflow.contrib.linalg.python.ops.linear_operator.rhs->tensorflow.python.framework.ops.convert_to_tensor(rhs, name='rhs')
A:tensorflow.contrib.linalg.python.ops.linear_operator.batch_shape->self.batch_shape_tensor()
A:tensorflow.contrib.linalg.python.ops.linear_operator.n->self.domain_dimension_tensor()
A:tensorflow.contrib.linalg.python.ops.linear_operator.eye->tensorflow.python.ops.linalg_ops.eye(num_rows=n, batch_shape=batch_shape, dtype=self.dtype)
tensorflow.contrib.linalg.LinearOperator(self,dtype,graph_parents=None,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)
tensorflow.contrib.linalg.LinearOperator._add_to_tensor(self,x)
tensorflow.contrib.linalg.LinearOperator._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.LinearOperator._assert_non_singular(self)
tensorflow.contrib.linalg.LinearOperator._assert_positive_definite(self)
tensorflow.contrib.linalg.LinearOperator._assert_self_adjoint(self)
tensorflow.contrib.linalg.LinearOperator._check_input_dtype(self,arg)
tensorflow.contrib.linalg.LinearOperator._determinant(self)
tensorflow.contrib.linalg.LinearOperator._diag_part(self)
tensorflow.contrib.linalg.LinearOperator._log_abs_determinant(self)
tensorflow.contrib.linalg.LinearOperator._name_scope(self,name=None,values=None)
tensorflow.contrib.linalg.LinearOperator._shape(self)
tensorflow.contrib.linalg.LinearOperator._shape_tensor(self)
tensorflow.contrib.linalg.LinearOperator._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.LinearOperator._to_dense(self)
tensorflow.contrib.linalg.LinearOperator.add_to_tensor(self,x,name='add_to_tensor')
tensorflow.contrib.linalg.LinearOperator.apply(self,x,adjoint=False,name='apply')
tensorflow.contrib.linalg.LinearOperator.assert_non_singular(self,name='assert_non_singular')
tensorflow.contrib.linalg.LinearOperator.assert_positive_definite(self,name='assert_positive_definite')
tensorflow.contrib.linalg.LinearOperator.assert_self_adjoint(self,name='assert_self_adjoint')
tensorflow.contrib.linalg.LinearOperator.batch_shape(self)
tensorflow.contrib.linalg.LinearOperator.batch_shape_tensor(self,name='batch_shape_tensor')
tensorflow.contrib.linalg.LinearOperator.determinant(self,name='det')
tensorflow.contrib.linalg.LinearOperator.diag_part(self,name='diag_part')
tensorflow.contrib.linalg.LinearOperator.domain_dimension(self)
tensorflow.contrib.linalg.LinearOperator.domain_dimension_tensor(self,name='domain_dimension_tensor')
tensorflow.contrib.linalg.LinearOperator.dtype(self)
tensorflow.contrib.linalg.LinearOperator.graph_parents(self)
tensorflow.contrib.linalg.LinearOperator.is_non_singular(self)
tensorflow.contrib.linalg.LinearOperator.is_positive_definite(self)
tensorflow.contrib.linalg.LinearOperator.is_self_adjoint(self)
tensorflow.contrib.linalg.LinearOperator.is_square(self)
tensorflow.contrib.linalg.LinearOperator.log_abs_determinant(self,name='log_abs_det')
tensorflow.contrib.linalg.LinearOperator.name(self)
tensorflow.contrib.linalg.LinearOperator.range_dimension(self)
tensorflow.contrib.linalg.LinearOperator.range_dimension_tensor(self,name='range_dimension_tensor')
tensorflow.contrib.linalg.LinearOperator.shape(self)
tensorflow.contrib.linalg.LinearOperator.shape_tensor(self,name='shape_tensor')
tensorflow.contrib.linalg.LinearOperator.solve(self,rhs,adjoint=False,name='solve')
tensorflow.contrib.linalg.LinearOperator.tensor_rank(self,name='tensor_rank')
tensorflow.contrib.linalg.LinearOperator.tensor_rank_tensor(self,name='tensor_rank_tensor')
tensorflow.contrib.linalg.LinearOperator.to_dense(self,name='to_dense')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator(self,dtype,graph_parents=None,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.__init__(self,dtype,graph_parents=None,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator._add_to_tensor(self,x)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator._assert_non_singular(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator._assert_positive_definite(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator._assert_self_adjoint(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator._check_input_dtype(self,arg)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator._determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator._diag_part(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator._log_abs_determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator._name_scope(self,name=None,values=None)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator._shape(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator._shape_tensor(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator._to_dense(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.add_to_tensor(self,x,name='add_to_tensor')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.apply(self,x,adjoint=False,name='apply')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.assert_non_singular(self,name='assert_non_singular')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.assert_positive_definite(self,name='assert_positive_definite')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.assert_self_adjoint(self,name='assert_self_adjoint')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.batch_shape(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.batch_shape_tensor(self,name='batch_shape_tensor')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.determinant(self,name='det')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.diag_part(self,name='diag_part')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.domain_dimension(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.domain_dimension_tensor(self,name='domain_dimension_tensor')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.dtype(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.graph_parents(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.is_non_singular(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.is_positive_definite(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.is_self_adjoint(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.is_square(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.log_abs_determinant(self,name='log_abs_det')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.name(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.range_dimension(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.range_dimension_tensor(self,name='range_dimension_tensor')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.shape(self)
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.shape_tensor(self,name='shape_tensor')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.solve(self,rhs,adjoint=False,name='solve')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.tensor_rank(self,name='tensor_rank')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.tensor_rank_tensor(self,name='tensor_rank_tensor')
tensorflow.contrib.linalg.python.ops.linear_operator.LinearOperator.to_dense(self,name='to_dense')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linalg/python/ops/linear_operator_addition.py----------------------------------------
A:tensorflow.contrib.linalg.python.ops.linear_operator_addition.operators->list(reversed(operators))
A:tensorflow.contrib.linalg.python.ops.linear_operator_addition.ops_to_try_at_next_tier->list(operators)
A:tensorflow.contrib.linalg.python.ops.linear_operator_addition.op1->ops_to_try_at_this_tier.pop()
A:tensorflow.contrib.linalg.python.ops.linear_operator_addition.(op2, adder)->_pop_a_match_at_tier(op1, ops_to_try_at_this_tier, tier)
A:tensorflow.contrib.linalg.python.ops.linear_operator_addition.new_operator->adder.add(op1, op2, operator_name)
A:tensorflow.contrib.linalg.python.ops.linear_operator_addition.batch_shape->tensorflow.python.ops.array_ops.broadcast_static_shape(batch_shape, op.batch_shape)
A:tensorflow.contrib.linalg.python.ops.linear_operator_addition.updated_hints->_infer_hints_allowing_override(op1, op2, hints)
A:tensorflow.contrib.linalg.python.ops.linear_operator_addition.multiplier_1->tensorflow.python.ops.array_ops.ones(op1.batch_shape_tensor(), dtype=op1.dtype)
A:tensorflow.contrib.linalg.python.ops.linear_operator_addition.multiplier_2->tensorflow.python.ops.array_ops.ones(op2.batch_shape_tensor(), dtype=op2.dtype)
tensorflow.contrib.linalg._AddAndReturnDiag(_Adder)
tensorflow.contrib.linalg._AddAndReturnDiag._add(self,op1,op2,operator_name,hints)
tensorflow.contrib.linalg._AddAndReturnDiag.can_add(self,op1,op2)
tensorflow.contrib.linalg._AddAndReturnMatrix(_Adder)
tensorflow.contrib.linalg._AddAndReturnMatrix._add(self,op1,op2,operator_name,hints)
tensorflow.contrib.linalg._AddAndReturnMatrix.can_add(self,op1,op2)
tensorflow.contrib.linalg._AddAndReturnScaledIdentity(_Adder)
tensorflow.contrib.linalg._AddAndReturnScaledIdentity._add(self,op1,op2,operator_name,hints)
tensorflow.contrib.linalg._AddAndReturnScaledIdentity.can_add(self,op1,op2)
tensorflow.contrib.linalg._AddAndReturnTriL(_Adder)
tensorflow.contrib.linalg._AddAndReturnTriL._add(self,op1,op2,operator_name,hints)
tensorflow.contrib.linalg._AddAndReturnTriL.can_add(self,op1,op2)
tensorflow.contrib.linalg._Adder(object)
tensorflow.contrib.linalg._Adder._add(self,op1,op2,operator_name,hints)
tensorflow.contrib.linalg._Adder.add(self,op1,op2,operator_name,hints=None)
tensorflow.contrib.linalg._Adder.can_add(self,op1,op2)
tensorflow.contrib.linalg._Adder.name(self)
tensorflow.contrib.linalg._Hints(self,is_non_singular=None,is_positive_definite=None,is_self_adjoint=None)
tensorflow.contrib.linalg._infer_hints_allowing_override(op1,op2,hints)
tensorflow.contrib.linalg._pop_a_match_at_tier(op1,operator_list,tier)
tensorflow.contrib.linalg._static_check_for_broadcastable_batch_shape(operators)
tensorflow.contrib.linalg._static_check_for_same_dimensions(operators)
tensorflow.contrib.linalg._type(operator)
tensorflow.contrib.linalg.add_operators(operators,operator_name=None,addition_tiers=None,name=None)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._AddAndReturnDiag(_Adder)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._AddAndReturnDiag._add(self,op1,op2,operator_name,hints)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._AddAndReturnDiag.can_add(self,op1,op2)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._AddAndReturnMatrix(_Adder)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._AddAndReturnMatrix._add(self,op1,op2,operator_name,hints)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._AddAndReturnMatrix.can_add(self,op1,op2)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._AddAndReturnScaledIdentity(_Adder)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._AddAndReturnScaledIdentity._add(self,op1,op2,operator_name,hints)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._AddAndReturnScaledIdentity.can_add(self,op1,op2)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._AddAndReturnTriL(_Adder)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._AddAndReturnTriL._add(self,op1,op2,operator_name,hints)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._AddAndReturnTriL.can_add(self,op1,op2)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._Adder(object)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._Adder._add(self,op1,op2,operator_name,hints)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._Adder.add(self,op1,op2,operator_name,hints=None)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._Adder.can_add(self,op1,op2)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._Adder.name(self)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._Hints(self,is_non_singular=None,is_positive_definite=None,is_self_adjoint=None)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._Hints.__init__(self,is_non_singular=None,is_positive_definite=None,is_self_adjoint=None)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._infer_hints_allowing_override(op1,op2,hints)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._pop_a_match_at_tier(op1,operator_list,tier)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._static_check_for_broadcastable_batch_shape(operators)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._static_check_for_same_dimensions(operators)
tensorflow.contrib.linalg.python.ops.linear_operator_addition._type(operator)
tensorflow.contrib.linalg.python.ops.linear_operator_addition.add_operators(operators,operator_name=None,addition_tiers=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linalg/python/ops/linear_operator_diag.py----------------------------------------
A:tensorflow.contrib.linalg.python.ops.linear_operator_diag.self._diag->tensorflow.python.framework.ops.convert_to_tensor(diag, name='diag')
A:tensorflow.contrib.linalg.python.ops.linear_operator_diag.d_shape->tensorflow.python.ops.array_ops.shape(self._diag)
A:tensorflow.contrib.linalg.python.ops.linear_operator_diag.diag_mat->tensorflow.python.ops.array_ops.expand_dims(diag_term, -1)
A:tensorflow.contrib.linalg.python.ops.linear_operator_diag.inv_diag_mat->tensorflow.python.ops.array_ops.expand_dims(1.0 / diag_term, -1)
A:tensorflow.contrib.linalg.python.ops.linear_operator_diag.x_diag->tensorflow.python.ops.array_ops.matrix_diag_part(x)
tensorflow.contrib.linalg.LinearOperatorDiag(self,diag,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,name='LinearOperatorDiag')
tensorflow.contrib.linalg.LinearOperatorDiag._add_to_tensor(self,x)
tensorflow.contrib.linalg.LinearOperatorDiag._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.LinearOperatorDiag._assert_non_singular(self)
tensorflow.contrib.linalg.LinearOperatorDiag._assert_positive_definite(self)
tensorflow.contrib.linalg.LinearOperatorDiag._assert_self_adjoint(self)
tensorflow.contrib.linalg.LinearOperatorDiag._check_diag(self,diag)
tensorflow.contrib.linalg.LinearOperatorDiag._determinant(self)
tensorflow.contrib.linalg.LinearOperatorDiag._diag_part(self)
tensorflow.contrib.linalg.LinearOperatorDiag._log_abs_determinant(self)
tensorflow.contrib.linalg.LinearOperatorDiag._shape(self)
tensorflow.contrib.linalg.LinearOperatorDiag._shape_tensor(self)
tensorflow.contrib.linalg.LinearOperatorDiag._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.LinearOperatorDiag._to_dense(self)
tensorflow.contrib.linalg.LinearOperatorDiag.diag(self)
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag(self,diag,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,name='LinearOperatorDiag')
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag.__init__(self,diag,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,name='LinearOperatorDiag')
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag._add_to_tensor(self,x)
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag._assert_non_singular(self)
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag._assert_positive_definite(self)
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag._assert_self_adjoint(self)
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag._check_diag(self,diag)
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag._determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag._diag_part(self)
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag._log_abs_determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag._shape(self)
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag._shape_tensor(self)
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag._to_dense(self)
tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag.diag(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linalg/python/ops/linear_operator_full_matrix.py----------------------------------------
A:tensorflow.contrib.linalg.python.ops.linear_operator_full_matrix.self._matrix->tensorflow.python.framework.ops.convert_to_tensor(matrix, name='matrix')
A:tensorflow.contrib.linalg.python.ops.linear_operator_full_matrix.self._chol->tensorflow.python.ops.linalg_ops.cholesky(self._matrix)
A:tensorflow.contrib.linalg.python.ops.linear_operator_full_matrix.matrix->tensorflow.python.framework.ops.convert_to_tensor(matrix, name='matrix')
A:tensorflow.contrib.linalg.python.ops.linear_operator_full_matrix.diag->tensorflow.python.ops.array_ops.matrix_diag_part(self._chol)
A:tensorflow.contrib.linalg.python.ops.linear_operator_full_matrix.abs_det->tensorflow.python.ops.math_ops.abs(self.determinant())
tensorflow.contrib.linalg.LinearOperatorFullMatrix(self,matrix,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,name='LinearOperatorFullMatrix')
tensorflow.contrib.linalg.LinearOperatorFullMatrix._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.LinearOperatorFullMatrix._check_matrix(self,matrix)
tensorflow.contrib.linalg.LinearOperatorFullMatrix._determinant(self)
tensorflow.contrib.linalg.LinearOperatorFullMatrix._log_abs_determinant(self)
tensorflow.contrib.linalg.LinearOperatorFullMatrix._shape(self)
tensorflow.contrib.linalg.LinearOperatorFullMatrix._shape_tensor(self)
tensorflow.contrib.linalg.LinearOperatorFullMatrix._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.LinearOperatorFullMatrix._to_dense(self)
tensorflow.contrib.linalg.python.ops.linear_operator_full_matrix.LinearOperatorFullMatrix(self,matrix,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,name='LinearOperatorFullMatrix')
tensorflow.contrib.linalg.python.ops.linear_operator_full_matrix.LinearOperatorFullMatrix.__init__(self,matrix,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,name='LinearOperatorFullMatrix')
tensorflow.contrib.linalg.python.ops.linear_operator_full_matrix.LinearOperatorFullMatrix._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator_full_matrix.LinearOperatorFullMatrix._check_matrix(self,matrix)
tensorflow.contrib.linalg.python.ops.linear_operator_full_matrix.LinearOperatorFullMatrix._determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator_full_matrix.LinearOperatorFullMatrix._log_abs_determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator_full_matrix.LinearOperatorFullMatrix._shape(self)
tensorflow.contrib.linalg.python.ops.linear_operator_full_matrix.LinearOperatorFullMatrix._shape_tensor(self)
tensorflow.contrib.linalg.python.ops.linear_operator_full_matrix.LinearOperatorFullMatrix._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator_full_matrix.LinearOperatorFullMatrix._to_dense(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linalg/python/ops/linear_operator_identity.py----------------------------------------
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.self._num_rows->tensorflow.contrib.linalg.python.ops.linear_operator_util.shape_tensor(num_rows, name='num_rows')
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.d_shape->tensorflow.python.ops.array_ops.concat([self.batch_shape_tensor(), [math_ops.reduce_min(self.shape_tensor()[-2:])]], axis=0)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.dtype->tensorflow.python.framework.dtypes.as_dtype(dtype)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.self._num_rows_static->tensorflow.python.framework.tensor_util.constant_value(self._num_rows)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.self._batch_shape_arg->tensorflow.python.ops.control_flow_ops.with_dependencies([check_ops.assert_rank(self._batch_shape_arg, 1, message='Argument batch_shape must be a 1-D Tensor.'), check_ops.assert_non_negative(self._batch_shape_arg, message='Argument batch_shape must be non-negative.')], self._batch_shape_arg)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.self._batch_shape_static->tensorflow.python.framework.tensor_util.constant_value(self._batch_shape_arg)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.matrix_shape->tensorflow.python.ops.array_ops.stack((self._num_rows, self._num_rows), axis=0)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.batch_shape->tensorflow.python.ops.array_ops.shape(self.multiplier)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.special_shape->tensorflow.python.ops.array_ops.concat((self.batch_shape_tensor(), [1, 1]), 0)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.bshape->tensorflow.python.ops.array_ops.broadcast_static_shape(x.get_shape(), special_shape)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.zeros->tensorflow.python.ops.array_ops.zeros(shape=special_shape, dtype=self.dtype)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.aps->tensorflow.contrib.linalg.python.ops.linear_operator_util.assert_compatible_matrix_dimensions(self, rhs)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.x->tensorflow.python.ops.control_flow_ops.with_dependencies([aps], x)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.mat->tensorflow.python.framework.ops.convert_to_tensor(mat, name='mat')
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.mat_diag->tensorflow.python.ops.array_ops.matrix_diag_part(mat)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.self._multiplier->tensorflow.python.framework.ops.convert_to_tensor(multiplier, name='multiplier')
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.self._multiplier_matrix->tensorflow.python.ops.array_ops.expand_dims(array_ops.expand_dims(self.multiplier, -1), -1)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.self._multiplier_matrix_conj->tensorflow.python.ops.math_ops.conj(self._multiplier_matrix)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.self._abs_multiplier->tensorflow.python.ops.math_ops.abs(self.multiplier)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.self._num_rows_cast_to_dtype->tensorflow.python.ops.math_ops.cast(self._num_rows, self.dtype)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.self._num_rows_cast_to_real_dtype->tensorflow.python.ops.math_ops.cast(self._num_rows, self.dtype.real_dtype)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.imag_multiplier->tensorflow.python.ops.math_ops.imag(self.multiplier)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.rhs->tensorflow.python.ops.control_flow_ops.with_dependencies([aps], rhs)
A:tensorflow.contrib.linalg.python.ops.linear_operator_identity.multiplier_vector->tensorflow.python.ops.array_ops.expand_dims(self.multiplier, -1)
tensorflow.contrib.linalg.BaseLinearOperatorIdentity(linear_operator.LinearOperator)
tensorflow.contrib.linalg.BaseLinearOperatorIdentity._check_num_rows_possibly_add_asserts(self)
tensorflow.contrib.linalg.BaseLinearOperatorIdentity._ones_diag(self)
tensorflow.contrib.linalg.LinearOperatorIdentity(self,num_rows,batch_shape=None,dtype=None,is_non_singular=True,is_self_adjoint=True,is_positive_definite=True,assert_proper_shapes=False,name='LinearOperatorIdentity')
tensorflow.contrib.linalg.LinearOperatorIdentity._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.LinearOperatorIdentity._assert_non_singular(self)
tensorflow.contrib.linalg.LinearOperatorIdentity._assert_positive_definite(self)
tensorflow.contrib.linalg.LinearOperatorIdentity._assert_self_adjoint(self)
tensorflow.contrib.linalg.LinearOperatorIdentity._check_batch_shape_possibly_add_asserts(self)
tensorflow.contrib.linalg.LinearOperatorIdentity._check_num_rows_possibly_add_asserts(self)
tensorflow.contrib.linalg.LinearOperatorIdentity._determinant(self)
tensorflow.contrib.linalg.LinearOperatorIdentity._diag_part(self)
tensorflow.contrib.linalg.LinearOperatorIdentity._log_abs_determinant(self)
tensorflow.contrib.linalg.LinearOperatorIdentity._possibly_broadcast_batch_shape(self,x)
tensorflow.contrib.linalg.LinearOperatorIdentity._shape(self)
tensorflow.contrib.linalg.LinearOperatorIdentity._shape_tensor(self)
tensorflow.contrib.linalg.LinearOperatorIdentity._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.LinearOperatorIdentity.add_to_tensor(self,mat,name='add_to_tensor')
tensorflow.contrib.linalg.LinearOperatorScaledIdentity(self,num_rows,multiplier,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,assert_proper_shapes=False,name='LinearOperatorScaledIdentity')
tensorflow.contrib.linalg.LinearOperatorScaledIdentity._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.LinearOperatorScaledIdentity._assert_non_singular(self)
tensorflow.contrib.linalg.LinearOperatorScaledIdentity._assert_positive_definite(self)
tensorflow.contrib.linalg.LinearOperatorScaledIdentity._assert_self_adjoint(self)
tensorflow.contrib.linalg.LinearOperatorScaledIdentity._determinant(self)
tensorflow.contrib.linalg.LinearOperatorScaledIdentity._diag_part(self)
tensorflow.contrib.linalg.LinearOperatorScaledIdentity._log_abs_determinant(self)
tensorflow.contrib.linalg.LinearOperatorScaledIdentity._shape(self)
tensorflow.contrib.linalg.LinearOperatorScaledIdentity._shape_tensor(self)
tensorflow.contrib.linalg.LinearOperatorScaledIdentity._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.LinearOperatorScaledIdentity.add_to_tensor(self,mat,name='add_to_tensor')
tensorflow.contrib.linalg.LinearOperatorScaledIdentity.multiplier(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.BaseLinearOperatorIdentity(linear_operator.LinearOperator)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.BaseLinearOperatorIdentity._check_num_rows_possibly_add_asserts(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.BaseLinearOperatorIdentity._ones_diag(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity(self,num_rows,batch_shape=None,dtype=None,is_non_singular=True,is_self_adjoint=True,is_positive_definite=True,assert_proper_shapes=False,name='LinearOperatorIdentity')
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity.__init__(self,num_rows,batch_shape=None,dtype=None,is_non_singular=True,is_self_adjoint=True,is_positive_definite=True,assert_proper_shapes=False,name='LinearOperatorIdentity')
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity._assert_non_singular(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity._assert_positive_definite(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity._assert_self_adjoint(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity._check_batch_shape_possibly_add_asserts(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity._check_num_rows_possibly_add_asserts(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity._determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity._diag_part(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity._log_abs_determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity._possibly_broadcast_batch_shape(self,x)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity._shape(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity._shape_tensor(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity.add_to_tensor(self,mat,name='add_to_tensor')
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorScaledIdentity(self,num_rows,multiplier,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,assert_proper_shapes=False,name='LinearOperatorScaledIdentity')
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorScaledIdentity.__init__(self,num_rows,multiplier,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,assert_proper_shapes=False,name='LinearOperatorScaledIdentity')
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorScaledIdentity._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorScaledIdentity._assert_non_singular(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorScaledIdentity._assert_positive_definite(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorScaledIdentity._assert_self_adjoint(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorScaledIdentity._determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorScaledIdentity._diag_part(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorScaledIdentity._log_abs_determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorScaledIdentity._shape(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorScaledIdentity._shape_tensor(self)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorScaledIdentity._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorScaledIdentity.add_to_tensor(self,mat,name='add_to_tensor')
tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorScaledIdentity.multiplier(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linalg/python/ops/linear_operator_composition.py----------------------------------------
A:tensorflow.contrib.linalg.python.ops.linear_operator_composition.operators->list(operators)
A:tensorflow.contrib.linalg.python.ops.linear_operator_composition.name->'_o_'.join((operator.name for operator in operators))
A:tensorflow.contrib.linalg.python.ops.linear_operator_composition.matrix_shape->tensorflow.python.ops.array_ops.stack([self.operators[0].range_dimension_tensor(), self.operators[-1].domain_dimension_tensor()])
A:tensorflow.contrib.linalg.python.ops.linear_operator_composition.batch_shape->tensorflow.python.ops.array_ops.shape(zeros)
A:tensorflow.contrib.linalg.python.ops.linear_operator_composition.zeros->tensorflow.python.ops.array_ops.zeros(shape=self.operators[0].batch_shape_tensor())
A:tensorflow.contrib.linalg.python.ops.linear_operator_composition.apply_order_list->list(reversed(self.operators))
A:tensorflow.contrib.linalg.python.ops.linear_operator_composition.result->self.operators[0].log_abs_determinant()
A:tensorflow.contrib.linalg.python.ops.linear_operator_composition.solve_order_list->list(reversed(self.operators))
A:tensorflow.contrib.linalg.python.ops.linear_operator_composition.solution->operator.solve(solution, adjoint=adjoint)
tensorflow.contrib.linalg.LinearOperatorComposition(self,operators,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,name=None)
tensorflow.contrib.linalg.LinearOperatorComposition._add_to_tensor(self,x)
tensorflow.contrib.linalg.LinearOperatorComposition._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.LinearOperatorComposition._determinant(self)
tensorflow.contrib.linalg.LinearOperatorComposition._log_abs_determinant(self)
tensorflow.contrib.linalg.LinearOperatorComposition._shape(self)
tensorflow.contrib.linalg.LinearOperatorComposition._shape_tensor(self)
tensorflow.contrib.linalg.LinearOperatorComposition._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.LinearOperatorComposition.operators(self)
tensorflow.contrib.linalg.python.ops.linear_operator_composition.LinearOperatorComposition(self,operators,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,name=None)
tensorflow.contrib.linalg.python.ops.linear_operator_composition.LinearOperatorComposition.__init__(self,operators,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,name=None)
tensorflow.contrib.linalg.python.ops.linear_operator_composition.LinearOperatorComposition._add_to_tensor(self,x)
tensorflow.contrib.linalg.python.ops.linear_operator_composition.LinearOperatorComposition._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator_composition.LinearOperatorComposition._determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator_composition.LinearOperatorComposition._log_abs_determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator_composition.LinearOperatorComposition._shape(self)
tensorflow.contrib.linalg.python.ops.linear_operator_composition.LinearOperatorComposition._shape_tensor(self)
tensorflow.contrib.linalg.python.ops.linear_operator_composition.LinearOperatorComposition._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator_composition.LinearOperatorComposition.operators(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linalg/python/ops/linear_operator_test_util.py----------------------------------------
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.dtype->tensorflow.python.framework.dtypes.as_dtype(dtype)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.(operator, mat, feed_dict)->self._operator_and_mat_and_feed_dict(shape, dtype, use_placeholder=use_placeholder)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.op_dense->operator.to_dense()
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.(op_dense_v, mat_v)->sess.run([op_dense, mat], feed_dict=feed_dict)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.op_det->operator.determinant()
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.(op_det_v, mat_det_v)->sess.run([op_det, linalg_ops.matrix_determinant(mat)], feed_dict=feed_dict)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.op_log_abs_det->operator.log_abs_determinant()
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.mat_log_abs_det->tensorflow.python.ops.math_ops.log(math_ops.abs(linalg_ops.matrix_determinant(mat)))
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.(op_log_abs_det_v, mat_log_abs_det_v)->sess.run([op_log_abs_det, mat_log_abs_det], feed_dict=feed_dict)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.x->self._make_x(operator, adjoint=adjoint)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.op_apply->operator.apply(x, adjoint=adjoint)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.mat_apply->tensorflow.python.ops.math_ops.matmul(mat, x, adjoint_a=adjoint)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.(op_apply_v, mat_apply_v)->sess.run([op_apply, mat_apply], feed_dict=feed_dict)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.rhs->self._make_rhs(operator, adjoint=adjoint)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.op_solve->operator.solve(rhs, adjoint=adjoint)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.mat_solve->tensorflow.python.ops.linalg_ops.matrix_solve(mat, rhs, adjoint=adjoint)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.(op_solve_v, mat_solve_v)->sess.run([op_solve, mat_solve], feed_dict=feed_dict)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.op_plus_2mat->operator.add_to_tensor(2 * mat)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.(op_plus_2mat_v, mat_v)->sess.run([op_plus_2mat, mat], feed_dict=feed_dict)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.op_diag_part->operator.diag_part()
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.mat_diag_part->tensorflow.python.ops.array_ops.matrix_diag_part(mat)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.(op_diag_part_, mat_diag_part_)->sess.run([op_diag_part, mat_diag_part], feed_dict=feed_dict)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.r->self._get_num_systems(operator)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.batch_shape->operator.batch_shape_tensor()
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.n->operator.domain_dimension_tensor()
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.x_shape->tensorflow.python.ops.array_ops.concat((batch_shape, [n, r]), 0)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.shape->list(shape)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.tril->tensorflow.python.ops.array_ops.matrix_set_diag(tril, diag)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.maxval->tensorflow.python.framework.ops.convert_to_tensor(np.sqrt(2.0), dtype=dtype.real_dtype)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.diag->random_sign_uniform(shape[:-1], dtype=dtype, minval=1.0, maxval=maxval)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.samples->tensorflow.python.ops.math_ops.complex(samples, more_samples)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.more_samples->tensorflow.python.ops.random_ops.random_uniform(shape, dtype=dtype.real_dtype, minval=minval, maxval=maxval, seed=seed)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.unsigned_samples->random_uniform(shape, minval=minval, maxval=maxval, dtype=dtype, seed=seed)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.signs->tensorflow.python.ops.math_ops.sign(random_ops.random_uniform(shape, minval=-1.0, maxval=1.0, seed=seed))
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.smaller_mat->random_normal(smaller_shape, mean=0.0, stddev=stddev_mat, dtype=dtype, seed=seed)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.embedding_mat->random_normal(embedding_mat_shape, dtype=dtype, seed=seed)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.embedded_t->tensorflow.python.ops.math_ops.matmul(embedding_mat, smaller_mat, transpose_b=True)
A:tensorflow.contrib.linalg.python.ops.linear_operator_test_util.embedded->tensorflow.python.ops.array_ops.matrix_transpose(embedded_t)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest(test.TestCase)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest._dtypes_to_test(self)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest._make_rhs(self,operator,adjoint)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest._make_x(self,operator,adjoint)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest._operator_and_mat_and_feed_dict(self,shape,dtype,use_placeholder)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest._shapes_to_test(self)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest._skip_if_tests_to_skip_contains(self,test_name)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest._tests_to_skip(self)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.assertAC(self,x,y)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.test_add_to_tensor(self)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.test_apply(self)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.test_det(self)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.test_diag_part(self)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.test_log_abs_det(self)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.test_solve(self)
tensorflow.contrib.linalg.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.test_to_dense(self)
tensorflow.contrib.linalg.ops.linear_operator_test_util.NonSquareLinearOperatorDerivedClassTest(LinearOperatorDerivedClassTest)
tensorflow.contrib.linalg.ops.linear_operator_test_util.NonSquareLinearOperatorDerivedClassTest._get_num_systems(self,operator)
tensorflow.contrib.linalg.ops.linear_operator_test_util.NonSquareLinearOperatorDerivedClassTest._make_rhs(self,operator,adjoint)
tensorflow.contrib.linalg.ops.linear_operator_test_util.NonSquareLinearOperatorDerivedClassTest._make_x(self,operator,adjoint)
tensorflow.contrib.linalg.ops.linear_operator_test_util.NonSquareLinearOperatorDerivedClassTest._shapes_to_test(self)
tensorflow.contrib.linalg.ops.linear_operator_test_util.NonSquareLinearOperatorDerivedClassTest._tests_to_skip(self)
tensorflow.contrib.linalg.ops.linear_operator_test_util.SquareLinearOperatorDerivedClassTest(LinearOperatorDerivedClassTest)
tensorflow.contrib.linalg.ops.linear_operator_test_util.SquareLinearOperatorDerivedClassTest._get_num_systems(self,operator)
tensorflow.contrib.linalg.ops.linear_operator_test_util.SquareLinearOperatorDerivedClassTest._make_rhs(self,operator,adjoint)
tensorflow.contrib.linalg.ops.linear_operator_test_util.SquareLinearOperatorDerivedClassTest._make_x(self,operator,adjoint)
tensorflow.contrib.linalg.ops.linear_operator_test_util.SquareLinearOperatorDerivedClassTest._shapes_to_test(self)
tensorflow.contrib.linalg.ops.linear_operator_test_util.random_normal(shape,mean=0.0,stddev=1.0,dtype=dtypes.float32,seed=None)
tensorflow.contrib.linalg.ops.linear_operator_test_util.random_normal_correlated_columns(shape,mean=0.0,stddev=1.0,dtype=dtypes.float32,eps=0.0001,seed=None)
tensorflow.contrib.linalg.ops.linear_operator_test_util.random_positive_definite_matrix(shape,dtype,force_well_conditioned=False)
tensorflow.contrib.linalg.ops.linear_operator_test_util.random_sign_uniform(shape,minval=None,maxval=None,dtype=dtypes.float32,seed=None)
tensorflow.contrib.linalg.ops.linear_operator_test_util.random_tril_matrix(shape,dtype,force_well_conditioned=False,remove_upper=True)
tensorflow.contrib.linalg.ops.linear_operator_test_util.random_uniform(shape,minval=None,maxval=None,dtype=dtypes.float32,seed=None)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest(test.TestCase)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest._dtypes_to_test(self)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest._make_rhs(self,operator,adjoint)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest._make_x(self,operator,adjoint)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest._operator_and_mat_and_feed_dict(self,shape,dtype,use_placeholder)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest._shapes_to_test(self)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest._skip_if_tests_to_skip_contains(self,test_name)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest._tests_to_skip(self)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.assertAC(self,x,y)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.test_add_to_tensor(self)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.test_apply(self)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.test_det(self)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.test_diag_part(self)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.test_log_abs_det(self)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.test_solve(self)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.LinearOperatorDerivedClassTest.test_to_dense(self)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.NonSquareLinearOperatorDerivedClassTest(LinearOperatorDerivedClassTest)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.NonSquareLinearOperatorDerivedClassTest._get_num_systems(self,operator)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.NonSquareLinearOperatorDerivedClassTest._make_rhs(self,operator,adjoint)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.NonSquareLinearOperatorDerivedClassTest._make_x(self,operator,adjoint)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.NonSquareLinearOperatorDerivedClassTest._shapes_to_test(self)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.NonSquareLinearOperatorDerivedClassTest._tests_to_skip(self)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.SquareLinearOperatorDerivedClassTest(LinearOperatorDerivedClassTest)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.SquareLinearOperatorDerivedClassTest._get_num_systems(self,operator)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.SquareLinearOperatorDerivedClassTest._make_rhs(self,operator,adjoint)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.SquareLinearOperatorDerivedClassTest._make_x(self,operator,adjoint)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.SquareLinearOperatorDerivedClassTest._shapes_to_test(self)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.random_normal(shape,mean=0.0,stddev=1.0,dtype=dtypes.float32,seed=None)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.random_normal_correlated_columns(shape,mean=0.0,stddev=1.0,dtype=dtypes.float32,eps=0.0001,seed=None)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.random_positive_definite_matrix(shape,dtype,force_well_conditioned=False)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.random_sign_uniform(shape,minval=None,maxval=None,dtype=dtypes.float32,seed=None)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.random_tril_matrix(shape,dtype,force_well_conditioned=False,remove_upper=True)
tensorflow.contrib.linalg.python.ops.linear_operator_test_util.random_uniform(shape,minval=None,maxval=None,dtype=dtypes.float32,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linalg/python/ops/linear_operator_udvh_update.py----------------------------------------
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.self._u->tensorflow.python.framework.ops.convert_to_tensor(u, name='u')
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.self._v->tensorflow.python.framework.ops.convert_to_tensor(v, name='v')
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.self._diag_update->tensorflow.python.framework.ops.convert_to_tensor(diag_update, name='diag_update')
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.self._capacitance->self._make_capacitance()
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.self._chol_capacitance->tensorflow.python.ops.linalg_ops.cholesky(self._capacitance)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.uv_shape->tensorflow.python.ops.array_ops.broadcast_static_shape(self.u.get_shape(), self.v.get_shape())
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.batch_shape->tensorflow.python.ops.array_ops.broadcast_dynamic_shape(self.base_operator.batch_shape_tensor(), array_ops.shape(self.u)[:-2])
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.self._diag_operator->tensorflow.contrib.linalg.python.ops.linear_operator_identity.LinearOperatorIdentity(num_rows=r, dtype=self.dtype)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.self._diag_inv_operator->tensorflow.contrib.linalg.python.ops.linear_operator_diag.LinearOperatorDiag(1.0 / self._diag_update, is_positive_definite=is_diag_update_positive)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.leading_term->l.apply(x, adjoint=adjoint)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.uh_x->tensorflow.python.ops.math_ops.matmul(u, x, adjoint_a=True)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.d_uh_x->d.apply(uh_x, adjoint=adjoint)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.v_d_uh_x->tensorflow.python.ops.math_ops.matmul(v, d_uh_x)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.vh_x->tensorflow.python.ops.math_ops.matmul(v, x, adjoint_a=True)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.d_vh_x->d.apply(vh_x, adjoint=adjoint)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.u_d_vh_x->tensorflow.python.ops.math_ops.matmul(u, d_vh_x)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.det_c->tensorflow.python.ops.linalg_ops.matrix_determinant(self._capacitance)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.det_d->self.diag_operator.determinant()
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.det_l->self.base_operator.determinant()
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.log_abs_det_d->self.diag_operator.log_abs_determinant()
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.log_abs_det_l->self.base_operator.log_abs_determinant()
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.chol_cap_diag->tensorflow.python.ops.array_ops.matrix_diag_part(self._chol_capacitance)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.log_abs_det_c->tensorflow.python.ops.math_ops.log(math_ops.abs(det_c))
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.linv_rhs->l.solve(rhs, adjoint=adjoint)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.vh_linv_rhs->tensorflow.python.ops.math_ops.matmul(v, linv_rhs, adjoint_a=True)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.capinv_vh_linv_rhs->tensorflow.python.ops.linalg_ops.matrix_solve(self._capacitance, vh_linv_rhs, adjoint=adjoint)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.u_capinv_vh_linv_rhs->tensorflow.python.ops.math_ops.matmul(u, capinv_vh_linv_rhs)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.linv_u_capinv_vh_linv_rhs->l.solve(u_capinv_vh_linv_rhs, adjoint=adjoint)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.linv_u->self.base_operator.solve(self.u)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.vh_linv_u->tensorflow.python.ops.math_ops.matmul(self.v, linv_u, adjoint_a=True)
A:tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.capacitance->self._diag_inv_operator.add_to_tensor(vh_linv_u)
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate(self,base_operator,u,diag_update=None,v=None,is_diag_update_positive=None,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorUDVHUpdate')
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate._check_shapes(self)
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate._determinant(self)
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate._log_abs_determinant(self)
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate._make_capacitance(self)
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate._set_diag_operators(self,diag_update,is_diag_update_positive)
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate._shape(self)
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate._shape_tensor(self)
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate.base_operator(self)
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate.diag_operator(self)
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate.diag_update(self)
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate.is_diag_update_positive(self)
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate.u(self)
tensorflow.contrib.linalg.LinearOperatorUDVHUpdate.v(self)
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate(self,base_operator,u,diag_update=None,v=None,is_diag_update_positive=None,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorUDVHUpdate')
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate.__init__(self,base_operator,u,diag_update=None,v=None,is_diag_update_positive=None,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorUDVHUpdate')
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate._apply(self,x,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate._check_shapes(self)
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate._determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate._log_abs_determinant(self)
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate._make_capacitance(self)
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate._set_diag_operators(self,diag_update,is_diag_update_positive)
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate._shape(self)
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate._shape_tensor(self)
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate._solve(self,rhs,adjoint=False)
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate.base_operator(self)
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate.diag_operator(self)
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate.diag_update(self)
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate.is_diag_update_positive(self)
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate.u(self)
tensorflow.contrib.linalg.python.ops.linear_operator_udvh_update.LinearOperatorUDVHUpdate.v(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/opt/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/opt/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/opt/python/training/external_optimizer.py----------------------------------------
A:tensorflow.contrib.opt.python.training.external_optimizer.self._vars->list(var_list)
A:tensorflow.contrib.opt.python.training.external_optimizer.loss_grads->_compute_gradients(loss, self._vars)
A:tensorflow.contrib.opt.python.training.external_optimizer.self._packed_var->self._pack(self._vars)
A:tensorflow.contrib.opt.python.training.external_optimizer.self._packed_loss_grad->self._pack(loss_grads)
A:tensorflow.contrib.opt.python.training.external_optimizer.accumulated_dims->list(_accumulate(dims))
A:tensorflow.contrib.opt.python.training.external_optimizer.loss_grad_func->self._make_eval_func([self._loss, self._packed_loss_grad], session, feed_dict, fetches, loss_callback)
A:tensorflow.contrib.opt.python.training.external_optimizer.equality_funcs->self._make_eval_funcs(self._equalities, session, feed_dict, fetches)
A:tensorflow.contrib.opt.python.training.external_optimizer.equality_grad_funcs->self._make_eval_funcs(self._packed_equality_grads, session, feed_dict, fetches)
A:tensorflow.contrib.opt.python.training.external_optimizer.inequality_funcs->self._make_eval_funcs(self._inequalities, session, feed_dict, fetches)
A:tensorflow.contrib.opt.python.training.external_optimizer.inequality_grad_funcs->self._make_eval_funcs(self._packed_inequality_grads, session, feed_dict, fetches)
A:tensorflow.contrib.opt.python.training.external_optimizer.initial_packed_var_val->session.run(self._packed_var)
A:tensorflow.contrib.opt.python.training.external_optimizer.packed_var_val->self._minimize(initial_val=initial_packed_var_val, loss_grad_func=loss_grad_func, equality_funcs=equality_funcs, equality_grad_funcs=equality_grad_funcs, inequality_funcs=inequality_funcs, inequality_grad_funcs=inequality_grad_funcs, step_callback=step_callback, optimizer_kwargs=self.optimizer_kwargs)
A:tensorflow.contrib.opt.python.training.external_optimizer.num_tensors->len(tensors)
A:tensorflow.contrib.opt.python.training.external_optimizer.augmented_fetch_vals->session.run(augmented_fetches, feed_dict=augmented_feed_dict)
A:tensorflow.contrib.opt.python.training.external_optimizer.(loss, gradient)->loss_grad_func(x)
A:tensorflow.contrib.opt.python.training.external_optimizer.method->optimizer_kwargs.pop('method', self._DEFAULT_METHOD)
A:tensorflow.contrib.opt.python.training.external_optimizer.result->scipy.optimize.minimize(*minimize_args, **minimize_kwargs)
A:tensorflow.contrib.opt.python.training.external_optimizer.grads->tensorflow.python.ops.gradients.gradients(tensor, var_list)
tensorflow.contrib.opt.ExternalOptimizerInterface(self,loss,var_list=None,equalities=None,inequalities=None,**optimizer_kwargs)
tensorflow.contrib.opt.ExternalOptimizerInterface._make_eval_func(self,tensors,session,feed_dict,fetches,callback=None)
tensorflow.contrib.opt.ExternalOptimizerInterface._make_eval_funcs(self,tensors,session,feed_dict,fetches,callback=None)
tensorflow.contrib.opt.ExternalOptimizerInterface._minimize(self,initial_val,loss_grad_func,equality_funcs,equality_grad_funcs,inequality_funcs,inequality_grad_funcs,step_callback,optimizer_kwargs)
tensorflow.contrib.opt.ExternalOptimizerInterface._pack(cls,tensors)
tensorflow.contrib.opt.ExternalOptimizerInterface.minimize(self,session=None,feed_dict=None,fetches=None,step_callback=None,loss_callback=None)
tensorflow.contrib.opt.ScipyOptimizerInterface(ExternalOptimizerInterface)
tensorflow.contrib.opt.ScipyOptimizerInterface._minimize(self,initial_val,loss_grad_func,equality_funcs,equality_grad_funcs,inequality_funcs,inequality_grad_funcs,step_callback,optimizer_kwargs)
tensorflow.contrib.opt._accumulate(list_)
tensorflow.contrib.opt._compute_gradients(tensor,var_list)
tensorflow.contrib.opt._get_shape_tuple(tensor)
tensorflow.contrib.opt._prod(array)
tensorflow.contrib.opt.python.training.external_optimizer.ExternalOptimizerInterface(self,loss,var_list=None,equalities=None,inequalities=None,**optimizer_kwargs)
tensorflow.contrib.opt.python.training.external_optimizer.ExternalOptimizerInterface.__init__(self,loss,var_list=None,equalities=None,inequalities=None,**optimizer_kwargs)
tensorflow.contrib.opt.python.training.external_optimizer.ExternalOptimizerInterface._make_eval_func(self,tensors,session,feed_dict,fetches,callback=None)
tensorflow.contrib.opt.python.training.external_optimizer.ExternalOptimizerInterface._make_eval_funcs(self,tensors,session,feed_dict,fetches,callback=None)
tensorflow.contrib.opt.python.training.external_optimizer.ExternalOptimizerInterface._minimize(self,initial_val,loss_grad_func,equality_funcs,equality_grad_funcs,inequality_funcs,inequality_grad_funcs,step_callback,optimizer_kwargs)
tensorflow.contrib.opt.python.training.external_optimizer.ExternalOptimizerInterface._pack(cls,tensors)
tensorflow.contrib.opt.python.training.external_optimizer.ExternalOptimizerInterface.minimize(self,session=None,feed_dict=None,fetches=None,step_callback=None,loss_callback=None)
tensorflow.contrib.opt.python.training.external_optimizer.ScipyOptimizerInterface(ExternalOptimizerInterface)
tensorflow.contrib.opt.python.training.external_optimizer.ScipyOptimizerInterface._minimize(self,initial_val,loss_grad_func,equality_funcs,equality_grad_funcs,inequality_funcs,inequality_grad_funcs,step_callback,optimizer_kwargs)
tensorflow.contrib.opt.python.training.external_optimizer._accumulate(list_)
tensorflow.contrib.opt.python.training.external_optimizer._compute_gradients(tensor,var_list)
tensorflow.contrib.opt.python.training.external_optimizer._get_shape_tuple(tensor)
tensorflow.contrib.opt.python.training.external_optimizer._prod(array)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/opt/python/training/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/opt/python/training/lazy_adam_optimizer.py----------------------------------------
A:tensorflow.contrib.opt.python.training.lazy_adam_optimizer.beta1_power->tensorflow.python.ops.math_ops.cast(self._beta1_power, var.dtype.base_dtype)
A:tensorflow.contrib.opt.python.training.lazy_adam_optimizer.beta2_power->tensorflow.python.ops.math_ops.cast(self._beta2_power, var.dtype.base_dtype)
A:tensorflow.contrib.opt.python.training.lazy_adam_optimizer.lr_t->tensorflow.python.ops.math_ops.cast(self._lr_t, var.dtype.base_dtype)
A:tensorflow.contrib.opt.python.training.lazy_adam_optimizer.beta1_t->tensorflow.python.ops.math_ops.cast(self._beta1_t, var.dtype.base_dtype)
A:tensorflow.contrib.opt.python.training.lazy_adam_optimizer.beta2_t->tensorflow.python.ops.math_ops.cast(self._beta2_t, var.dtype.base_dtype)
A:tensorflow.contrib.opt.python.training.lazy_adam_optimizer.epsilon_t->tensorflow.python.ops.math_ops.cast(self._epsilon_t, var.dtype.base_dtype)
A:tensorflow.contrib.opt.python.training.lazy_adam_optimizer.m->self.get_slot(var, 'm')
A:tensorflow.contrib.opt.python.training.lazy_adam_optimizer.m_t->tensorflow.python.ops.state_ops.scatter_update(m, grad.indices, beta1_t * array_ops.gather(m, grad.indices) + (1 - beta1_t) * grad.values, use_locking=self._use_locking)
A:tensorflow.contrib.opt.python.training.lazy_adam_optimizer.v->self.get_slot(var, 'v')
A:tensorflow.contrib.opt.python.training.lazy_adam_optimizer.v_t->tensorflow.python.ops.state_ops.scatter_update(v, grad.indices, beta2_t * array_ops.gather(v, grad.indices) + (1 - beta2_t) * math_ops.square(grad.values), use_locking=self._use_locking)
A:tensorflow.contrib.opt.python.training.lazy_adam_optimizer.m_t_slice->tensorflow.python.ops.array_ops.gather(m_t, grad.indices)
A:tensorflow.contrib.opt.python.training.lazy_adam_optimizer.v_t_slice->tensorflow.python.ops.array_ops.gather(v_t, grad.indices)
A:tensorflow.contrib.opt.python.training.lazy_adam_optimizer.var_update->tensorflow.python.ops.state_ops.scatter_sub(var, grad.indices, lr * m_t_slice / denominator_slice, use_locking=self._use_locking)
tensorflow.contrib.opt.LazyAdamOptimizer(adam.AdamOptimizer)
tensorflow.contrib.opt.LazyAdamOptimizer._apply_sparse(self,grad,var)
tensorflow.contrib.opt.python.training.lazy_adam_optimizer.LazyAdamOptimizer(adam.AdamOptimizer)
tensorflow.contrib.opt.python.training.lazy_adam_optimizer.LazyAdamOptimizer._apply_sparse(self,grad,var)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/opt/python/training/variable_clipping_optimizer.py----------------------------------------
A:tensorflow.contrib.opt.python.training.variable_clipping_optimizer.update_op->self._opt.apply_gradients(grads_and_vars, global_step=global_step)
A:tensorflow.contrib.opt.python.training.variable_clipping_optimizer.updated_var_value->var._ref()
A:tensorflow.contrib.opt.python.training.variable_clipping_optimizer.normalized_var->tensorflow.python.ops.clip_ops.clip_by_norm(updated_var_value, self._max_norm, self._vars_to_clip_dims[var])
A:tensorflow.contrib.opt.python.training.variable_clipping_optimizer.var_subset->tensorflow.python.ops.array_ops.gather(var, grad.indices)
A:tensorflow.contrib.opt.python.training.variable_clipping_optimizer.normalized_var_subset->tensorflow.python.ops.clip_ops.clip_by_norm(var_subset, self._max_norm, clip_dims)
A:tensorflow.contrib.opt.python.training.variable_clipping_optimizer.delta->tensorflow.python.framework.ops.IndexedSlices(var_subset - normalized_var_subset, grad.indices, grad.dense_shape)
tensorflow.contrib.opt.VariableClippingOptimizer(self,opt,vars_to_clip_dims,max_norm,use_locking=False,colocate_clip_ops_with_vars=False,name='VariableClipping')
tensorflow.contrib.opt.VariableClippingOptimizer._clip_dense(self,var)
tensorflow.contrib.opt.VariableClippingOptimizer._clip_sparse(self,grad,var)
tensorflow.contrib.opt.VariableClippingOptimizer._maybe_colocate_with(self,var)
tensorflow.contrib.opt.VariableClippingOptimizer.apply_gradients(self,grads_and_vars,global_step=None,name=None)
tensorflow.contrib.opt.VariableClippingOptimizer.compute_gradients(self,*args,**kwargs)
tensorflow.contrib.opt.VariableClippingOptimizer.get_slot(self,*args,**kwargs)
tensorflow.contrib.opt.VariableClippingOptimizer.get_slot_names(self,*args,**kwargs)
tensorflow.contrib.opt.python.training.variable_clipping_optimizer.VariableClippingOptimizer(self,opt,vars_to_clip_dims,max_norm,use_locking=False,colocate_clip_ops_with_vars=False,name='VariableClipping')
tensorflow.contrib.opt.python.training.variable_clipping_optimizer.VariableClippingOptimizer.__init__(self,opt,vars_to_clip_dims,max_norm,use_locking=False,colocate_clip_ops_with_vars=False,name='VariableClipping')
tensorflow.contrib.opt.python.training.variable_clipping_optimizer.VariableClippingOptimizer._clip_dense(self,var)
tensorflow.contrib.opt.python.training.variable_clipping_optimizer.VariableClippingOptimizer._clip_sparse(self,grad,var)
tensorflow.contrib.opt.python.training.variable_clipping_optimizer.VariableClippingOptimizer._maybe_colocate_with(self,var)
tensorflow.contrib.opt.python.training.variable_clipping_optimizer.VariableClippingOptimizer.apply_gradients(self,grads_and_vars,global_step=None,name=None)
tensorflow.contrib.opt.python.training.variable_clipping_optimizer.VariableClippingOptimizer.compute_gradients(self,*args,**kwargs)
tensorflow.contrib.opt.python.training.variable_clipping_optimizer.VariableClippingOptimizer.get_slot(self,*args,**kwargs)
tensorflow.contrib.opt.python.training.variable_clipping_optimizer.VariableClippingOptimizer.get_slot_names(self,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/opt/python/training/moving_average_optimizer.py----------------------------------------
A:tensorflow.contrib.opt.python.training.moving_average_optimizer.self._ema->tensorflow.python.training.moving_averages.ExponentialMovingAverage(average_decay, num_updates=num_updates)
A:tensorflow.contrib.opt.python.training.moving_average_optimizer.train_op->self._optimizer.apply_gradients(grads_and_vars, global_step=global_step, name=name)
A:tensorflow.contrib.opt.python.training.moving_average_optimizer.ma_op->self._ema.apply(var_list)
A:tensorflow.contrib.opt.python.training.moving_average_optimizer.v_avg->self._ema.average(v)
A:tensorflow.contrib.opt.python.training.moving_average_optimizer.var_list->tensorflow.python.training.saver.BaseSaverBuilder.OpListToDict(var_list)
A:tensorflow.contrib.opt.python.training.moving_average_optimizer.v_swap->self._variable_map.get(v.op.name, None)
tensorflow.contrib.opt.MovingAverageOptimizer(self,opt,average_decay=0.9999,num_updates=None,sequential_update=True)
tensorflow.contrib.opt.MovingAverageOptimizer.apply_gradients(self,grads_and_vars,global_step=None,name=None)
tensorflow.contrib.opt.MovingAverageOptimizer.swapping_saver(self,var_list=None,name='swapping_saver',**kwargs)
tensorflow.contrib.opt.python.training.moving_average_optimizer.MovingAverageOptimizer(self,opt,average_decay=0.9999,num_updates=None,sequential_update=True)
tensorflow.contrib.opt.python.training.moving_average_optimizer.MovingAverageOptimizer.__init__(self,opt,average_decay=0.9999,num_updates=None,sequential_update=True)
tensorflow.contrib.opt.python.training.moving_average_optimizer.MovingAverageOptimizer.apply_gradients(self,grads_and_vars,global_step=None,name=None)
tensorflow.contrib.opt.python.training.moving_average_optimizer.MovingAverageOptimizer.swapping_saver(self,var_list=None,name='swapping_saver',**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/testing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/testing/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/testing/python/framework/fake_summary_writer.py----------------------------------------
A:tensorflow.contrib.testing.python.framework.fake_summary_writer.summary_proto->tensorflow.core.framework.summary_pb2.Summary()
tensorflow.contrib.testing.FakeSummaryWriter(self,logdir,graph=None)
tensorflow.contrib.testing.FakeSummaryWriter.add_graph(self,graph,global_step=None,graph_def=None)
tensorflow.contrib.testing.FakeSummaryWriter.add_meta_graph(self,meta_graph_def,global_step=None)
tensorflow.contrib.testing.FakeSummaryWriter.add_session_log(self,session_log,global_step=None)
tensorflow.contrib.testing.FakeSummaryWriter.add_summary(self,summ,current_global_step)
tensorflow.contrib.testing.FakeSummaryWriter.assert_summaries(self,test_case,expected_logdir=None,expected_graph=None,expected_summaries=None,expected_added_graphs=None,expected_added_meta_graphs=None,expected_session_logs=None)
tensorflow.contrib.testing.FakeSummaryWriter.flush(self)
tensorflow.contrib.testing.FakeSummaryWriter.install(cls)
tensorflow.contrib.testing.FakeSummaryWriter.reopen(self)
tensorflow.contrib.testing.FakeSummaryWriter.summaries(self)
tensorflow.contrib.testing.FakeSummaryWriter.uninstall(cls)
tensorflow.contrib.testing.python.framework.fake_summary_writer.FakeSummaryWriter(self,logdir,graph=None)
tensorflow.contrib.testing.python.framework.fake_summary_writer.FakeSummaryWriter.__init__(self,logdir,graph=None)
tensorflow.contrib.testing.python.framework.fake_summary_writer.FakeSummaryWriter.add_graph(self,graph,global_step=None,graph_def=None)
tensorflow.contrib.testing.python.framework.fake_summary_writer.FakeSummaryWriter.add_meta_graph(self,meta_graph_def,global_step=None)
tensorflow.contrib.testing.python.framework.fake_summary_writer.FakeSummaryWriter.add_session_log(self,session_log,global_step=None)
tensorflow.contrib.testing.python.framework.fake_summary_writer.FakeSummaryWriter.add_summary(self,summ,current_global_step)
tensorflow.contrib.testing.python.framework.fake_summary_writer.FakeSummaryWriter.assert_summaries(self,test_case,expected_logdir=None,expected_graph=None,expected_summaries=None,expected_added_graphs=None,expected_added_meta_graphs=None,expected_session_logs=None)
tensorflow.contrib.testing.python.framework.fake_summary_writer.FakeSummaryWriter.flush(self)
tensorflow.contrib.testing.python.framework.fake_summary_writer.FakeSummaryWriter.install(cls)
tensorflow.contrib.testing.python.framework.fake_summary_writer.FakeSummaryWriter.reopen(self)
tensorflow.contrib.testing.python.framework.fake_summary_writer.FakeSummaryWriter.summaries(self)
tensorflow.contrib.testing.python.framework.fake_summary_writer.FakeSummaryWriter.uninstall(cls)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/testing/python/framework/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/testing/python/framework/util_test.py----------------------------------------
A:tensorflow.contrib.testing.python.framework.util_test.actual_tags->set()
A:tensorflow.contrib.testing.python.framework.util_test.expected_tags->set(expected_tags)
A:tensorflow.contrib.testing.python.framework.util_test.summary->tensorflow.core.framework.summary_pb2.Summary()
A:tensorflow.contrib.testing.python.framework.util_test.file_paths->glob.glob(os.path.join(base_dir, 'events.*'))
A:tensorflow.contrib.testing.python.framework.util_test.file_path->latest_event_file(base_dir)
tensorflow.contrib.testing.assert_summary(expected_tags,expected_simple_values,summary_proto)
tensorflow.contrib.testing.latest_event_file(base_dir)
tensorflow.contrib.testing.latest_events(base_dir)
tensorflow.contrib.testing.latest_summaries(base_dir)
tensorflow.contrib.testing.python.framework.util_test.assert_summary(expected_tags,expected_simple_values,summary_proto)
tensorflow.contrib.testing.python.framework.util_test.latest_event_file(base_dir)
tensorflow.contrib.testing.python.framework.util_test.latest_events(base_dir)
tensorflow.contrib.testing.python.framework.util_test.latest_summaries(base_dir)
tensorflow.contrib.testing.python.framework.util_test.simple_values_from_events(events,tags)
tensorflow.contrib.testing.python.framework.util_test.to_summary_proto(summary_str)
tensorflow.contrib.testing.simple_values_from_events(events,tags)
tensorflow.contrib.testing.to_summary_proto(summary_str)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/legacy_seq2seq/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/legacy_seq2seq/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/legacy_seq2seq/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/legacy_seq2seq/python/ops/seq2seq.py----------------------------------------
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.prev->tensorflow.python.ops.nn_ops.xw_plus_b(prev, output_projection[0], output_projection[1])
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.prev_symbol->tensorflow.python.ops.math_ops.argmax(prev, 1)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.emb_prev->tensorflow.python.ops.array_ops.stop_gradient(emb_prev)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.inp->loop_function(prev, i)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.(output, state)->cell(inp, state)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.enc_cell->tensorflow.contrib.rnn.python.ops.core_rnn_cell.EmbeddingWrapper(enc_cell, embedding_classes=num_encoder_symbols, embedding_size=embedding_size)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.(_, enc_state)->tensorflow.contrib.rnn.python.ops.core_rnn.static_rnn(cell, encoder_inputs, dtype=dtype, scope=scope)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.proj_weights->tensorflow.python.framework.ops.convert_to_tensor(output_projection[0], dtype=dtype)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.proj_biases->tensorflow.python.framework.ops.convert_to_tensor(output_projection[1], dtype=dtype)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.embedding->tensorflow.python.ops.variable_scope.get_variable('embedding', [num_symbols, embedding_size])
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.encoder_cell->tensorflow.contrib.rnn.python.ops.core_rnn_cell.EmbeddingWrapper(encoder_cell, embedding_classes=num_encoder_symbols, embedding_size=embedding_size)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.(_, encoder_state)->tensorflow.contrib.rnn.python.ops.core_rnn.static_rnn(enc_cell, encoder_inputs, dtype=dtype)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.cell->tensorflow.contrib.rnn.python.ops.core_rnn_cell.OutputProjectionWrapper(cell, num_decoder_symbols)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.(outputs, state)->embedding_rnn_decoder(decoder_inputs, encoder_state, dec_cell, num_decoder_symbols, embedding_size, feed_previous=feed_previous)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.state_list->tensorflow.python.util.nest.flatten(state)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.outputs_and_state->tensorflow.python.ops.control_flow_ops.cond(feed_previous, lambda : filled_embedding_rnn_decoder(True), lambda : filled_embedding_rnn_decoder(False))
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.outputs_len->len(decoder_inputs)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.state->tensorflow.python.util.nest.pack_sequence_as(structure=encoder_state, flat_sequence=state_list)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.zero_state->tensorflow.contrib.rnn.python.ops.core_rnn_cell.OutputProjectionWrapper(cell, num_decoder_symbols).zero_state(batch_size, dtype)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.hidden->tensorflow.python.ops.array_ops.reshape(attention_states, [-1, attn_length, 1, attn_size])
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.k->tensorflow.python.ops.variable_scope.get_variable('AttnW_%d' % a, [1, 1, attn_size, attention_vec_size])
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.query_list->tensorflow.python.util.nest.flatten(query)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.query->tensorflow.python.ops.array_ops.concat(query_list, 1)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.y->tensorflow.python.ops.array_ops.reshape(y, [-1, 1, 1, attention_vec_size])
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.s->tensorflow.python.ops.math_ops.reduce_sum(v[a] * math_ops.tanh(hidden_features[a] + y), [2, 3])
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.a->tensorflow.python.ops.nn_ops.softmax(s)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.d->tensorflow.python.ops.math_ops.reduce_sum(array_ops.reshape(a, [-1, attn_length, 1, 1]) * hidden, [1, 2])
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.batch_attn_size->tensorflow.python.ops.array_ops.stack([batch_size, attn_size])
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.attns->attention(state)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.x->linear([inp] + attns, input_size, True)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.(cell_output, state)->cell(x, state)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.output->linear([cell_output] + attns, output_size, True)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.(encoder_outputs, encoder_state)->tensorflow.contrib.rnn.python.ops.core_rnn.static_rnn(encoder_cell, encoder_inputs, dtype=dtype)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.attention_states->tensorflow.python.ops.array_ops.concat(top_states, 1)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.dec_cell->tensorflow.contrib.rnn.python.ops.core_rnn_cell.OutputProjectionWrapper(dec_cell, num_decoder_symbols)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.vs->tensorflow.python.ops.variable_scope.get_variable_scope()
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.target->tensorflow.python.ops.array_ops.reshape(target, [-1])
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.crossent->softmax_loss_function(target, logit)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.log_perps->tensorflow.python.ops.math_ops.add_n(log_perp_list)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.total_size->tensorflow.python.ops.math_ops.add_n(weights)
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.cost->tensorflow.python.ops.math_ops.reduce_sum(sequence_loss_by_example(logits, targets, weights, average_across_timesteps=average_across_timesteps, softmax_loss_function=softmax_loss_function))
A:tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.(bucket_outputs, _)->seq2seq(encoder_inputs[:bucket[0]], decoder_inputs[:bucket[1]])
tensorflow.contrib.legacy_seq2seq.attention_decoder(decoder_inputs,initial_state,attention_states,cell,output_size=None,num_heads=1,loop_function=None,dtype=None,scope=None,initial_state_attention=False)
tensorflow.contrib.legacy_seq2seq.basic_rnn_seq2seq(encoder_inputs,decoder_inputs,cell,dtype=dtypes.float32,scope=None)
tensorflow.contrib.legacy_seq2seq.embedding_attention_decoder(decoder_inputs,initial_state,attention_states,cell,num_symbols,embedding_size,num_heads=1,output_size=None,output_projection=None,feed_previous=False,update_embedding_for_previous=True,dtype=None,scope=None,initial_state_attention=False)
tensorflow.contrib.legacy_seq2seq.embedding_attention_seq2seq(encoder_inputs,decoder_inputs,cell,num_encoder_symbols,num_decoder_symbols,embedding_size,num_heads=1,output_projection=None,feed_previous=False,dtype=None,scope=None,initial_state_attention=False)
tensorflow.contrib.legacy_seq2seq.embedding_rnn_decoder(decoder_inputs,initial_state,cell,num_symbols,embedding_size,output_projection=None,feed_previous=False,update_embedding_for_previous=True,scope=None)
tensorflow.contrib.legacy_seq2seq.embedding_rnn_seq2seq(encoder_inputs,decoder_inputs,cell,num_encoder_symbols,num_decoder_symbols,embedding_size,output_projection=None,feed_previous=False,dtype=None,scope=None)
tensorflow.contrib.legacy_seq2seq.embedding_tied_rnn_seq2seq(encoder_inputs,decoder_inputs,cell,num_symbols,embedding_size,num_decoder_symbols=None,output_projection=None,feed_previous=False,dtype=None,scope=None)
tensorflow.contrib.legacy_seq2seq.model_with_buckets(encoder_inputs,decoder_inputs,targets,weights,buckets,seq2seq,softmax_loss_function=None,per_example_loss=False,name=None)
tensorflow.contrib.legacy_seq2seq.one2many_rnn_seq2seq(encoder_inputs,decoder_inputs_dict,enc_cell,dec_cells_dict,num_encoder_symbols,num_decoder_symbols_dict,embedding_size,feed_previous=False,dtype=None,scope=None)
tensorflow.contrib.legacy_seq2seq.ops.seq2seq._extract_argmax_and_embed(embedding,output_projection=None,update_embedding=True)
tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq._extract_argmax_and_embed(embedding,output_projection=None,update_embedding=True)
tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.attention_decoder(decoder_inputs,initial_state,attention_states,cell,output_size=None,num_heads=1,loop_function=None,dtype=None,scope=None,initial_state_attention=False)
tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.basic_rnn_seq2seq(encoder_inputs,decoder_inputs,cell,dtype=dtypes.float32,scope=None)
tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.embedding_attention_decoder(decoder_inputs,initial_state,attention_states,cell,num_symbols,embedding_size,num_heads=1,output_size=None,output_projection=None,feed_previous=False,update_embedding_for_previous=True,dtype=None,scope=None,initial_state_attention=False)
tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.embedding_attention_seq2seq(encoder_inputs,decoder_inputs,cell,num_encoder_symbols,num_decoder_symbols,embedding_size,num_heads=1,output_projection=None,feed_previous=False,dtype=None,scope=None,initial_state_attention=False)
tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.embedding_rnn_decoder(decoder_inputs,initial_state,cell,num_symbols,embedding_size,output_projection=None,feed_previous=False,update_embedding_for_previous=True,scope=None)
tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.embedding_rnn_seq2seq(encoder_inputs,decoder_inputs,cell,num_encoder_symbols,num_decoder_symbols,embedding_size,output_projection=None,feed_previous=False,dtype=None,scope=None)
tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.embedding_tied_rnn_seq2seq(encoder_inputs,decoder_inputs,cell,num_symbols,embedding_size,num_decoder_symbols=None,output_projection=None,feed_previous=False,dtype=None,scope=None)
tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.model_with_buckets(encoder_inputs,decoder_inputs,targets,weights,buckets,seq2seq,softmax_loss_function=None,per_example_loss=False,name=None)
tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.one2many_rnn_seq2seq(encoder_inputs,decoder_inputs_dict,enc_cell,dec_cells_dict,num_encoder_symbols,num_decoder_symbols_dict,embedding_size,feed_previous=False,dtype=None,scope=None)
tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.rnn_decoder(decoder_inputs,initial_state,cell,loop_function=None,scope=None)
tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.sequence_loss(logits,targets,weights,average_across_timesteps=True,average_across_batch=True,softmax_loss_function=None,name=None)
tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.sequence_loss_by_example(logits,targets,weights,average_across_timesteps=True,softmax_loss_function=None,name=None)
tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.tied_rnn_seq2seq(encoder_inputs,decoder_inputs,cell,loop_function=None,dtype=dtypes.float32,scope=None)
tensorflow.contrib.legacy_seq2seq.rnn_decoder(decoder_inputs,initial_state,cell,loop_function=None,scope=None)
tensorflow.contrib.legacy_seq2seq.sequence_loss(logits,targets,weights,average_across_timesteps=True,average_across_batch=True,softmax_loss_function=None,name=None)
tensorflow.contrib.legacy_seq2seq.sequence_loss_by_example(logits,targets,weights,average_across_timesteps=True,softmax_loss_function=None,name=None)
tensorflow.contrib.legacy_seq2seq.tied_rnn_seq2seq(encoder_inputs,decoder_inputs,cell,loop_function=None,dtype=dtypes.float32,scope=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/quantization/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/quantization/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/quantization/python/array_ops.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/quantization/python/math_ops.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/quantization/python/nn_ops.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/hooks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/hooks/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/hooks/python/training/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/hooks/python/training/profiler_hook.py----------------------------------------
A:tensorflow.contrib.hooks.python.training.profiler_hook.self._output_file->os.path.join(output_dir, 'timeline-{}.json')
A:tensorflow.contrib.hooks.python.training.profiler_hook.self._timer->SecondOrStepTimer(every_secs=save_secs, every_steps=save_steps)
A:tensorflow.contrib.hooks.python.training.profiler_hook.self._global_step_tensor->tensorflow.python.training.training_util.get_global_step()
A:tensorflow.contrib.hooks.python.training.profiler_hook.trace->tensorflow.python.client.timeline.Timeline(step_stats)
tensorflow.contrib.hooks.ProfilerHook(self,save_steps=None,save_secs=None,output_dir='',show_dataflow=True,show_memory=False)
tensorflow.contrib.hooks.ProfilerHook._save(self,step,save_path,step_stats)
tensorflow.contrib.hooks.ProfilerHook.after_run(self,run_context,run_values)
tensorflow.contrib.hooks.ProfilerHook.before_run(self,run_context)
tensorflow.contrib.hooks.ProfilerHook.begin(self)
tensorflow.contrib.hooks.python.training.profiler_hook.ProfilerHook(self,save_steps=None,save_secs=None,output_dir='',show_dataflow=True,show_memory=False)
tensorflow.contrib.hooks.python.training.profiler_hook.ProfilerHook.__init__(self,save_steps=None,save_secs=None,output_dir='',show_dataflow=True,show_memory=False)
tensorflow.contrib.hooks.python.training.profiler_hook.ProfilerHook._save(self,step,save_path,step_stats)
tensorflow.contrib.hooks.python.training.profiler_hook.ProfilerHook.after_run(self,run_context,run_values)
tensorflow.contrib.hooks.python.training.profiler_hook.ProfilerHook.before_run(self,run_context)
tensorflow.contrib.hooks.python.training.profiler_hook.ProfilerHook.begin(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/deprecated/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/seq2seq/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/seq2seq/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/seq2seq/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/seq2seq/python/ops/loss.py----------------------------------------
A:tensorflow.contrib.seq2seq.python.ops.loss.probs_flat->tensorflow.python.ops.array_ops.reshape(logits, [-1, num_classes])
A:tensorflow.contrib.seq2seq.python.ops.loss.targets->tensorflow.python.ops.array_ops.reshape(targets, [-1])
A:tensorflow.contrib.seq2seq.python.ops.loss.crossent->tensorflow.python.ops.math_ops.reduce_sum(crossent, axis=[0])
A:tensorflow.contrib.seq2seq.python.ops.loss.total_size->tensorflow.python.ops.math_ops.reduce_sum(weights, axis=[0])
tensorflow.contrib.seq2seq.python.ops.loss.sequence_loss(logits,targets,weights,average_across_timesteps=True,average_across_batch=True,softmax_loss_function=None,name=None)
tensorflow.contrib.seq2seq.sequence_loss(logits,targets,weights,average_across_timesteps=True,average_across_batch=True,softmax_loss_function=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/seq2seq/python/ops/basic_decoder.py----------------------------------------
A:tensorflow.contrib.seq2seq.python.ops.basic_decoder.output_shape_with_unknown_batch->tensorflow.python.util.nest.map_structure(lambda s: tensor_shape.TensorShape([None]).concatenate(s), size)
A:tensorflow.contrib.seq2seq.python.ops.basic_decoder.layer_output_shape->self._output_layer._compute_output_shape(output_shape_with_unknown_batch)
A:tensorflow.contrib.seq2seq.python.ops.basic_decoder.(cell_outputs, cell_state)->self._cell(inputs, state)
A:tensorflow.contrib.seq2seq.python.ops.basic_decoder.cell_outputs->self._output_layer(cell_outputs)
A:tensorflow.contrib.seq2seq.python.ops.basic_decoder.sample_ids->self._helper.sample(time=time, outputs=cell_outputs, state=cell_state)
A:tensorflow.contrib.seq2seq.python.ops.basic_decoder.(finished, next_inputs, next_state)->self._helper.next_inputs(time=time, outputs=cell_outputs, state=cell_state, sample_ids=sample_ids)
A:tensorflow.contrib.seq2seq.python.ops.basic_decoder.outputs->BasicDecoderOutput(cell_outputs, sample_ids)
tensorflow.contrib.seq2seq.BasicDecoder(self,cell,helper,initial_state,output_layer=None)
tensorflow.contrib.seq2seq.BasicDecoder._rnn_output_size(self)
tensorflow.contrib.seq2seq.BasicDecoder.batch_size(self)
tensorflow.contrib.seq2seq.BasicDecoder.initialize(self,name=None)
tensorflow.contrib.seq2seq.BasicDecoder.output_dtype(self)
tensorflow.contrib.seq2seq.BasicDecoder.output_size(self)
tensorflow.contrib.seq2seq.BasicDecoder.step(self,time,inputs,state,name=None)
tensorflow.contrib.seq2seq.BasicDecoderOutput(collections.namedtuple('BasicDecoderOutput',('rnn_output','sample_id')))
tensorflow.contrib.seq2seq.python.ops.basic_decoder.BasicDecoder(self,cell,helper,initial_state,output_layer=None)
tensorflow.contrib.seq2seq.python.ops.basic_decoder.BasicDecoder.__init__(self,cell,helper,initial_state,output_layer=None)
tensorflow.contrib.seq2seq.python.ops.basic_decoder.BasicDecoder._rnn_output_size(self)
tensorflow.contrib.seq2seq.python.ops.basic_decoder.BasicDecoder.batch_size(self)
tensorflow.contrib.seq2seq.python.ops.basic_decoder.BasicDecoder.initialize(self,name=None)
tensorflow.contrib.seq2seq.python.ops.basic_decoder.BasicDecoder.output_dtype(self)
tensorflow.contrib.seq2seq.python.ops.basic_decoder.BasicDecoder.output_size(self)
tensorflow.contrib.seq2seq.python.ops.basic_decoder.BasicDecoder.step(self,time,inputs,state,name=None)
tensorflow.contrib.seq2seq.python.ops.basic_decoder.BasicDecoderOutput(collections.namedtuple('BasicDecoderOutput',('rnn_output','sample_id')))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/seq2seq/python/ops/decoder.py----------------------------------------
A:tensorflow.contrib.seq2seq.python.ops.decoder.x_static_shape->x.get_shape()
A:tensorflow.contrib.seq2seq.python.ops.decoder.x_rank->tensorflow.python.ops.array_ops.rank(x)
A:tensorflow.contrib.seq2seq.python.ops.decoder.x_t->tensorflow.python.ops.array_ops.transpose(x, array_ops.concat(([1, 0], math_ops.range(2, x_rank)), axis=0))
A:tensorflow.contrib.seq2seq.python.ops.decoder.maximum_iterations->tensorflow.python.framework.ops.convert_to_tensor(maximum_iterations, dtype=dtypes.int32, name='maximum_iterations')
A:tensorflow.contrib.seq2seq.python.ops.decoder.(initial_finished, initial_inputs, initial_state)->decoder.initialize()
A:tensorflow.contrib.seq2seq.python.ops.decoder.zero_outputs->_create_zero_outputs(decoder.output_size, decoder.output_dtype, decoder.batch_size)
A:tensorflow.contrib.seq2seq.python.ops.decoder.initial_finished->tensorflow.python.ops.math_ops.logical_or(initial_finished, 0 >= maximum_iterations)
A:tensorflow.contrib.seq2seq.python.ops.decoder.initial_time->tensorflow.python.framework.constant_op.constant(0, dtype=dtypes.int32)
A:tensorflow.contrib.seq2seq.python.ops.decoder.batch_size->tensorflow.python.framework.tensor_util.constant_value(ops.convert_to_tensor(batch_size, name='batch_size'))
A:tensorflow.contrib.seq2seq.python.ops.decoder.initial_outputs_ta->tensorflow.python.util.nest.map_structure(_create_ta, decoder.output_size, decoder.output_dtype)
A:tensorflow.contrib.seq2seq.python.ops.decoder.(next_outputs, decoder_state, next_inputs, decoder_finished)->decoder.step(time, inputs, state)
A:tensorflow.contrib.seq2seq.python.ops.decoder.next_finished->tensorflow.python.ops.math_ops.logical_or(next_finished, time + 1 >= maximum_iterations)
A:tensorflow.contrib.seq2seq.python.ops.decoder.emit->tensorflow.python.util.nest.map_structure(lambda out, zero: array_ops.where(finished, zero, out), next_outputs, zero_outputs)
A:tensorflow.contrib.seq2seq.python.ops.decoder.next_state->tensorflow.python.util.nest.map_structure(_maybe_copy_state, decoder_state, state)
A:tensorflow.contrib.seq2seq.python.ops.decoder.outputs_ta->tensorflow.python.util.nest.map_structure(lambda ta, out: ta.write(time, out), outputs_ta, emit)
A:tensorflow.contrib.seq2seq.python.ops.decoder.res->tensorflow.python.ops.control_flow_ops.while_loop(condition, body, loop_vars=[initial_time, initial_outputs_ta, initial_state, initial_inputs, initial_finished], parallel_iterations=parallel_iterations, swap_memory=swap_memory)
A:tensorflow.contrib.seq2seq.python.ops.decoder.final_outputs->tensorflow.python.util.nest.map_structure(_transpose_batch_time, final_outputs)
tensorflow.contrib.seq2seq.Decoder(object)
tensorflow.contrib.seq2seq.Decoder.batch_size(self)
tensorflow.contrib.seq2seq.Decoder.initialize(self,name=None)
tensorflow.contrib.seq2seq.Decoder.output_dtype(self)
tensorflow.contrib.seq2seq.Decoder.output_size(self)
tensorflow.contrib.seq2seq.Decoder.step(self,time,inputs,state,name=None)
tensorflow.contrib.seq2seq._create_zero_outputs(size,dtype,batch_size)
tensorflow.contrib.seq2seq._transpose_batch_time(x)
tensorflow.contrib.seq2seq.dynamic_decode(decoder,output_time_major=False,impute_finished=False,maximum_iterations=None,parallel_iterations=32,swap_memory=False,scope=None)
tensorflow.contrib.seq2seq.python.ops.decoder.Decoder(object)
tensorflow.contrib.seq2seq.python.ops.decoder.Decoder.batch_size(self)
tensorflow.contrib.seq2seq.python.ops.decoder.Decoder.initialize(self,name=None)
tensorflow.contrib.seq2seq.python.ops.decoder.Decoder.output_dtype(self)
tensorflow.contrib.seq2seq.python.ops.decoder.Decoder.output_size(self)
tensorflow.contrib.seq2seq.python.ops.decoder.Decoder.step(self,time,inputs,state,name=None)
tensorflow.contrib.seq2seq.python.ops.decoder._create_zero_outputs(size,dtype,batch_size)
tensorflow.contrib.seq2seq.python.ops.decoder._transpose_batch_time(x)
tensorflow.contrib.seq2seq.python.ops.decoder.dynamic_decode(decoder,output_time_major=False,impute_finished=False,maximum_iterations=None,parallel_iterations=32,swap_memory=False,scope=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/seq2seq/python/ops/dynamic_attention_wrapper.py----------------------------------------
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.memory->tensorflow.python.util.nest.map_structure(lambda m: ops.convert_to_tensor(m, name='memory'), memory)
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.seq_len_mask->tensorflow.python.ops.array_ops.reshape(seq_len_mask, array_ops.concat((array_ops.shape(seq_len_mask), extra_ones), 0))
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.extra_ones->tensorflow.python.ops.array_ops.ones(rank - 2, dtype=dtypes.int32)
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.self._values->_prepare_memory(memory, memory_sequence_length, check_inner_dims_defined=check_inner_dims_defined)
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.attention_r_initializer->tensorflow.python.framework.ops.convert_to_tensor(attention_r_initializer, dtype=self.values.dtype, name='attention_r_initializer')
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.query->tensorflow.python.ops.array_ops.expand_dims(query, 1)
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.score->self._attention_mechanism(cell_output)
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.g->tensorflow.python.ops.variable_scope.get_variable('attention_g', dtype=dtype, initializer=math.sqrt(1.0 / self._num_units))
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.r->tensorflow.python.ops.variable_scope.get_variable('attention_r', dtype=dtype, initializer=self._attention_r_initializer)
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.processed_query->tensorflow.python.ops.array_ops.expand_dims(processed_query, 1)
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.v->tensorflow.python.ops.variable_scope.get_variable('attention_v', [self._num_units], dtype=dtype)
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.b->tensorflow.python.ops.variable_scope.get_variable('attention_b', [self._num_units], dtype=dtype, initializer=init_ops.zeros_initializer())
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.logits->tensorflow.python.framework.ops.convert_to_tensor(logits, name='logits')
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.self._attention_layer->tensorflow.python.layers.core.Dense(attention_size, bias_initializer=None)
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.cell_inputs->self._cell_input_fn(inputs, state.attention)
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.(cell_output, next_cell_state)->self._cell(cell_inputs, cell_state)
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.alignments->tensorflow.python.ops.array_ops.expand_dims(alignments, 1)
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.context->tensorflow.python.ops.array_ops.squeeze(context, [1])
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.attention->self._attention_layer(array_ops.concat([cell_output, context], 1))
A:tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.next_state->DynamicAttentionWrapperState(cell_state=next_cell_state, attention=attention)
tensorflow.contrib.seq2seq.AttentionMechanism(object)
tensorflow.contrib.seq2seq.BahdanauAttention(self,num_units,memory,memory_sequence_length=None,normalize=False,attention_r_initializer=None,name='BahdanauAttention')
tensorflow.contrib.seq2seq.DynamicAttentionWrapper(self,cell,attention_mechanism,attention_size,cell_input_fn=None,probability_fn=None,output_attention=True,name=None)
tensorflow.contrib.seq2seq.DynamicAttentionWrapper.output_size(self)
tensorflow.contrib.seq2seq.DynamicAttentionWrapper.state_size(self)
tensorflow.contrib.seq2seq.DynamicAttentionWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.seq2seq.DynamicAttentionWrapperState(collections.namedtuple('DynamicAttentionWrapperState',('cell_state','attention')))
tensorflow.contrib.seq2seq.LuongAttention(self,num_units,memory,memory_sequence_length=None,normalize=False,attention_r_initializer=None,name='LuongAttention')
tensorflow.contrib.seq2seq._BaseAttentionMechanism(self,query_layer,memory,memory_sequence_length=None,memory_layer=None,check_inner_dims_defined=True,name=None)
tensorflow.contrib.seq2seq._BaseAttentionMechanism.keys(self)
tensorflow.contrib.seq2seq._BaseAttentionMechanism.memory_layer(self)
tensorflow.contrib.seq2seq._BaseAttentionMechanism.query_layer(self)
tensorflow.contrib.seq2seq._BaseAttentionMechanism.values(self)
tensorflow.contrib.seq2seq._prepare_memory(memory,memory_sequence_length,check_inner_dims_defined)
tensorflow.contrib.seq2seq.hardmax(logits,name=None)
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.AttentionMechanism(object)
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.BahdanauAttention(self,num_units,memory,memory_sequence_length=None,normalize=False,attention_r_initializer=None,name='BahdanauAttention')
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.BahdanauAttention.__init__(self,num_units,memory,memory_sequence_length=None,normalize=False,attention_r_initializer=None,name='BahdanauAttention')
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.DynamicAttentionWrapper(self,cell,attention_mechanism,attention_size,cell_input_fn=None,probability_fn=None,output_attention=True,name=None)
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.DynamicAttentionWrapper.__init__(self,cell,attention_mechanism,attention_size,cell_input_fn=None,probability_fn=None,output_attention=True,name=None)
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.DynamicAttentionWrapper.output_size(self)
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.DynamicAttentionWrapper.state_size(self)
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.DynamicAttentionWrapper.zero_state(self,batch_size,dtype)
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.DynamicAttentionWrapperState(collections.namedtuple('DynamicAttentionWrapperState',('cell_state','attention')))
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.LuongAttention(self,num_units,memory,memory_sequence_length=None,normalize=False,attention_r_initializer=None,name='LuongAttention')
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.LuongAttention.__init__(self,num_units,memory,memory_sequence_length=None,normalize=False,attention_r_initializer=None,name='LuongAttention')
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper._BaseAttentionMechanism(self,query_layer,memory,memory_sequence_length=None,memory_layer=None,check_inner_dims_defined=True,name=None)
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper._BaseAttentionMechanism.__init__(self,query_layer,memory,memory_sequence_length=None,memory_layer=None,check_inner_dims_defined=True,name=None)
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper._BaseAttentionMechanism.keys(self)
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper._BaseAttentionMechanism.memory_layer(self)
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper._BaseAttentionMechanism.query_layer(self)
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper._BaseAttentionMechanism.values(self)
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper._prepare_memory(memory,memory_sequence_length,check_inner_dims_defined)
tensorflow.contrib.seq2seq.python.ops.dynamic_attention_wrapper.hardmax(logits,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/seq2seq/python/ops/helper.py----------------------------------------
A:tensorflow.contrib.seq2seq.python.ops.helper.(finished, next_inputs)->self._initialize_fn()
A:tensorflow.contrib.seq2seq.python.ops.helper.self._batch_size->tensorflow.python.ops.array_ops.size(start_tokens)
A:tensorflow.contrib.seq2seq.python.ops.helper.inputs->tensorflow.python.framework.ops.convert_to_tensor(inputs, name='inputs')
A:tensorflow.contrib.seq2seq.python.ops.helper.self._input_tas->tensorflow.python.util.nest.map_structure(_unstack_ta, inputs)
A:tensorflow.contrib.seq2seq.python.ops.helper.self._sequence_length->tensorflow.python.framework.ops.convert_to_tensor(sequence_length, name='sequence_length')
A:tensorflow.contrib.seq2seq.python.ops.helper.self._zero_inputs->tensorflow.python.util.nest.map_structure(lambda inp: array_ops.zeros_like(inp[0, :]), inputs)
A:tensorflow.contrib.seq2seq.python.ops.helper.finished->tensorflow.python.ops.math_ops.equal(sample_ids, self._end_token)
A:tensorflow.contrib.seq2seq.python.ops.helper.all_finished->tensorflow.python.ops.math_ops.reduce_all(finished)
A:tensorflow.contrib.seq2seq.python.ops.helper.next_inputs->tensorflow.python.ops.control_flow_ops.cond(all_finished, lambda : self._start_inputs, lambda : self._embedding_fn(sample_ids))
A:tensorflow.contrib.seq2seq.python.ops.helper.sample_ids->tensorflow.python.ops.math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)
A:tensorflow.contrib.seq2seq.python.ops.helper.self._sampling_probability->tensorflow.python.framework.ops.convert_to_tensor(sampling_probability, name='sampling_probability')
A:tensorflow.contrib.seq2seq.python.ops.helper.select_sample_noise->tensorflow.python.ops.random_ops.random_uniform([self.batch_size], seed=self._scheduling_seed)
A:tensorflow.contrib.seq2seq.python.ops.helper.sample_id_sampler->tensorflow.contrib.distributions.python.ops.categorical.Categorical(logits=outputs)
A:tensorflow.contrib.seq2seq.python.ops.helper.(finished, base_next_inputs, state)->super(ScheduledOutputTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)
A:tensorflow.contrib.seq2seq.python.ops.helper.where_sampling->tensorflow.python.ops.math_ops.cast(array_ops.where(sample_ids), dtypes.int32)
A:tensorflow.contrib.seq2seq.python.ops.helper.where_not_sampling->tensorflow.python.ops.math_ops.cast(array_ops.where(math_ops.logical_not(sample_ids)), dtypes.int32)
A:tensorflow.contrib.seq2seq.python.ops.helper.where_sampling_flat->tensorflow.python.ops.array_ops.reshape(where_sampling, [-1])
A:tensorflow.contrib.seq2seq.python.ops.helper.where_not_sampling_flat->tensorflow.python.ops.array_ops.reshape(where_not_sampling, [-1])
A:tensorflow.contrib.seq2seq.python.ops.helper.sample_ids_sampling->tensorflow.python.ops.array_ops.gather(sample_ids, where_sampling_flat)
A:tensorflow.contrib.seq2seq.python.ops.helper.inputs_not_sampling->tensorflow.python.ops.array_ops.gather_nd(base_next_inputs, where_not_sampling)
A:tensorflow.contrib.seq2seq.python.ops.helper.sampled_next_inputs->maybe_concatenate_auxiliary_inputs(self._next_input_layer(outputs_sampling), where_sampling)
A:tensorflow.contrib.seq2seq.python.ops.helper.base_shape->tensorflow.python.ops.array_ops.shape(base_next_inputs)
A:tensorflow.contrib.seq2seq.python.ops.helper.auxiliary_inputs->tensorflow.python.ops.array_ops.gather_nd(auxiliary_inputs, indices)
A:tensorflow.contrib.seq2seq.python.ops.helper.maybe_concatenated_inputs->tensorflow.python.util.nest.map_structure(lambda x, y: array_ops.concat((x, y), -1), inputs, auxiliary_inputs)
A:tensorflow.contrib.seq2seq.python.ops.helper.sampler->tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli(probs=self._sampling_probability)
A:tensorflow.contrib.seq2seq.python.ops.helper.outputs_sampling->tensorflow.python.ops.array_ops.gather_nd(outputs, where_sampling)
A:tensorflow.contrib.seq2seq.python.ops.helper.self._start_tokens->tensorflow.python.framework.ops.convert_to_tensor(start_tokens, dtype=dtypes.int32, name='start_tokens')
A:tensorflow.contrib.seq2seq.python.ops.helper.self._end_token->tensorflow.python.framework.ops.convert_to_tensor(end_token, dtype=dtypes.int32, name='end_token')
A:tensorflow.contrib.seq2seq.python.ops.helper.self._start_inputs->self._embedding_fn(self._start_tokens)
tensorflow.contrib.seq2seq.CustomHelper(self,initialize_fn,sample_fn,next_inputs_fn)
tensorflow.contrib.seq2seq.CustomHelper.batch_size(self)
tensorflow.contrib.seq2seq.CustomHelper.initialize(self,name=None)
tensorflow.contrib.seq2seq.CustomHelper.next_inputs(self,time,outputs,state,sample_ids,name=None)
tensorflow.contrib.seq2seq.CustomHelper.sample(self,time,outputs,state,name=None)
tensorflow.contrib.seq2seq.GreedyEmbeddingHelper(self,embedding,start_tokens,end_token)
tensorflow.contrib.seq2seq.GreedyEmbeddingHelper.batch_size(self)
tensorflow.contrib.seq2seq.GreedyEmbeddingHelper.initialize(self,name=None)
tensorflow.contrib.seq2seq.GreedyEmbeddingHelper.next_inputs(self,time,outputs,state,sample_ids,name=None)
tensorflow.contrib.seq2seq.GreedyEmbeddingHelper.sample(self,time,outputs,state,name=None)
tensorflow.contrib.seq2seq.Helper(object)
tensorflow.contrib.seq2seq.Helper.batch_size(self)
tensorflow.contrib.seq2seq.Helper.initialize(self,name=None)
tensorflow.contrib.seq2seq.Helper.next_inputs(self,time,outputs,state,sample_ids,name=None)
tensorflow.contrib.seq2seq.Helper.sample(self,time,outputs,state,name=None)
tensorflow.contrib.seq2seq.ScheduledEmbeddingTrainingHelper(self,inputs,sequence_length,embedding,sampling_probability,time_major=False,seed=None,scheduling_seed=None,name=None)
tensorflow.contrib.seq2seq.ScheduledEmbeddingTrainingHelper.initialize(self,name=None)
tensorflow.contrib.seq2seq.ScheduledEmbeddingTrainingHelper.next_inputs(self,time,outputs,state,sample_ids,name=None)
tensorflow.contrib.seq2seq.ScheduledEmbeddingTrainingHelper.sample(self,time,outputs,state,name=None)
tensorflow.contrib.seq2seq.ScheduledOutputTrainingHelper(self,inputs,sequence_length,sampling_probability,time_major=False,seed=None,next_input_layer=None,auxiliary_inputs=None,name=None)
tensorflow.contrib.seq2seq.ScheduledOutputTrainingHelper.initialize(self,name=None)
tensorflow.contrib.seq2seq.ScheduledOutputTrainingHelper.next_inputs(self,time,outputs,state,sample_ids,name=None)
tensorflow.contrib.seq2seq.ScheduledOutputTrainingHelper.sample(self,time,outputs,state,name=None)
tensorflow.contrib.seq2seq.TrainingHelper(self,inputs,sequence_length,time_major=False,name=None)
tensorflow.contrib.seq2seq.TrainingHelper.batch_size(self)
tensorflow.contrib.seq2seq.TrainingHelper.initialize(self,name=None)
tensorflow.contrib.seq2seq.TrainingHelper.next_inputs(self,time,outputs,state,name=None,**unused_kwargs)
tensorflow.contrib.seq2seq.TrainingHelper.sample(self,time,outputs,name=None,**unused_kwargs)
tensorflow.contrib.seq2seq._unstack_ta(inp)
tensorflow.contrib.seq2seq.python.ops.helper.CustomHelper(self,initialize_fn,sample_fn,next_inputs_fn)
tensorflow.contrib.seq2seq.python.ops.helper.CustomHelper.__init__(self,initialize_fn,sample_fn,next_inputs_fn)
tensorflow.contrib.seq2seq.python.ops.helper.CustomHelper.batch_size(self)
tensorflow.contrib.seq2seq.python.ops.helper.CustomHelper.initialize(self,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.CustomHelper.next_inputs(self,time,outputs,state,sample_ids,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.CustomHelper.sample(self,time,outputs,state,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.GreedyEmbeddingHelper(self,embedding,start_tokens,end_token)
tensorflow.contrib.seq2seq.python.ops.helper.GreedyEmbeddingHelper.__init__(self,embedding,start_tokens,end_token)
tensorflow.contrib.seq2seq.python.ops.helper.GreedyEmbeddingHelper.batch_size(self)
tensorflow.contrib.seq2seq.python.ops.helper.GreedyEmbeddingHelper.initialize(self,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.GreedyEmbeddingHelper.next_inputs(self,time,outputs,state,sample_ids,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.GreedyEmbeddingHelper.sample(self,time,outputs,state,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.Helper(object)
tensorflow.contrib.seq2seq.python.ops.helper.Helper.batch_size(self)
tensorflow.contrib.seq2seq.python.ops.helper.Helper.initialize(self,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.Helper.next_inputs(self,time,outputs,state,sample_ids,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.Helper.sample(self,time,outputs,state,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.ScheduledEmbeddingTrainingHelper(self,inputs,sequence_length,embedding,sampling_probability,time_major=False,seed=None,scheduling_seed=None,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.ScheduledEmbeddingTrainingHelper.__init__(self,inputs,sequence_length,embedding,sampling_probability,time_major=False,seed=None,scheduling_seed=None,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.ScheduledEmbeddingTrainingHelper.initialize(self,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.ScheduledEmbeddingTrainingHelper.next_inputs(self,time,outputs,state,sample_ids,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.ScheduledEmbeddingTrainingHelper.sample(self,time,outputs,state,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.ScheduledOutputTrainingHelper(self,inputs,sequence_length,sampling_probability,time_major=False,seed=None,next_input_layer=None,auxiliary_inputs=None,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.ScheduledOutputTrainingHelper.__init__(self,inputs,sequence_length,sampling_probability,time_major=False,seed=None,next_input_layer=None,auxiliary_inputs=None,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.ScheduledOutputTrainingHelper.initialize(self,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.ScheduledOutputTrainingHelper.next_inputs(self,time,outputs,state,sample_ids,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.ScheduledOutputTrainingHelper.sample(self,time,outputs,state,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.TrainingHelper(self,inputs,sequence_length,time_major=False,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.TrainingHelper.__init__(self,inputs,sequence_length,time_major=False,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.TrainingHelper.batch_size(self)
tensorflow.contrib.seq2seq.python.ops.helper.TrainingHelper.initialize(self,name=None)
tensorflow.contrib.seq2seq.python.ops.helper.TrainingHelper.next_inputs(self,time,outputs,state,name=None,**unused_kwargs)
tensorflow.contrib.seq2seq.python.ops.helper.TrainingHelper.sample(self,time,outputs,name=None,**unused_kwargs)
tensorflow.contrib.seq2seq.python.ops.helper._unstack_ta(inp)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/beta.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.beta.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.beta.self._concentration1->self._maybe_assert_valid_concentration(ops.convert_to_tensor(concentration1, name='concentration1'), validate_args)
A:tensorflow.contrib.distributions.python.ops.beta.self._concentration0->self._maybe_assert_valid_concentration(ops.convert_to_tensor(concentration0, name='concentration0'), validate_args)
A:tensorflow.contrib.distributions.python.ops.beta.gamma1_sample->tensorflow.python.ops.random_ops.random_gamma(shape=[n], alpha=expanded_concentration1, dtype=self.dtype, seed=seed)
A:tensorflow.contrib.distributions.python.ops.beta.gamma2_sample->tensorflow.python.ops.random_ops.random_gamma(shape=[n], alpha=expanded_concentration0, dtype=self.dtype, seed=distribution_util.gen_new_seed(seed, 'beta'))
A:tensorflow.contrib.distributions.python.ops.beta.x->self._maybe_assert_valid_sample(x)
A:tensorflow.contrib.distributions.python.ops.beta.nan->tensorflow.python.ops.array_ops.fill(self.batch_shape_tensor(), np.array(np.nan, dtype=self.dtype.as_numpy_dtype()), name='nan')
A:tensorflow.contrib.distributions.python.ops.beta.is_defined->tensorflow.python.ops.math_ops.logical_and(self.concentration1 > 1.0, self.concentration0 > 1.0)
A:tensorflow.contrib.distributions.python.ops.beta.fn1->getattr(d1, fn)
A:tensorflow.contrib.distributions.python.ops.beta.fn2->getattr(d2, fn)
tensorflow.contrib.distributions.Beta(self,concentration1=None,concentration0=None,validate_args=False,allow_nan_stats=True,name='Beta')
tensorflow.contrib.distributions.Beta._batch_shape(self)
tensorflow.contrib.distributions.Beta._batch_shape_tensor(self)
tensorflow.contrib.distributions.Beta._cdf(self,x)
tensorflow.contrib.distributions.Beta._entropy(self)
tensorflow.contrib.distributions.Beta._event_shape(self)
tensorflow.contrib.distributions.Beta._event_shape_tensor(self)
tensorflow.contrib.distributions.Beta._log_cdf(self,x)
tensorflow.contrib.distributions.Beta._log_normalization(self)
tensorflow.contrib.distributions.Beta._log_prob(self,x)
tensorflow.contrib.distributions.Beta._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.Beta._maybe_assert_valid_concentration(self,concentration,validate_args)
tensorflow.contrib.distributions.Beta._maybe_assert_valid_sample(self,x)
tensorflow.contrib.distributions.Beta._mean(self)
tensorflow.contrib.distributions.Beta._mode(self)
tensorflow.contrib.distributions.Beta._param_shapes(sample_shape)
tensorflow.contrib.distributions.Beta._prob(self,x)
tensorflow.contrib.distributions.Beta._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.Beta._variance(self)
tensorflow.contrib.distributions.Beta.concentration0(self)
tensorflow.contrib.distributions.Beta.concentration1(self)
tensorflow.contrib.distributions.Beta.total_concentration(self)
tensorflow.contrib.distributions.BetaWithSoftplusConcentration(self,concentration1,concentration0,validate_args=False,allow_nan_stats=True,name='BetaWithSoftplusConcentration')
tensorflow.contrib.distributions._kl_beta_beta(d1,d2,name=None)
tensorflow.contrib.distributions.python.ops.beta.Beta(self,concentration1=None,concentration0=None,validate_args=False,allow_nan_stats=True,name='Beta')
tensorflow.contrib.distributions.python.ops.beta.Beta.__init__(self,concentration1=None,concentration0=None,validate_args=False,allow_nan_stats=True,name='Beta')
tensorflow.contrib.distributions.python.ops.beta.Beta._batch_shape(self)
tensorflow.contrib.distributions.python.ops.beta.Beta._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.beta.Beta._cdf(self,x)
tensorflow.contrib.distributions.python.ops.beta.Beta._entropy(self)
tensorflow.contrib.distributions.python.ops.beta.Beta._event_shape(self)
tensorflow.contrib.distributions.python.ops.beta.Beta._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.beta.Beta._log_cdf(self,x)
tensorflow.contrib.distributions.python.ops.beta.Beta._log_normalization(self)
tensorflow.contrib.distributions.python.ops.beta.Beta._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.beta.Beta._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.python.ops.beta.Beta._maybe_assert_valid_concentration(self,concentration,validate_args)
tensorflow.contrib.distributions.python.ops.beta.Beta._maybe_assert_valid_sample(self,x)
tensorflow.contrib.distributions.python.ops.beta.Beta._mean(self)
tensorflow.contrib.distributions.python.ops.beta.Beta._mode(self)
tensorflow.contrib.distributions.python.ops.beta.Beta._param_shapes(sample_shape)
tensorflow.contrib.distributions.python.ops.beta.Beta._prob(self,x)
tensorflow.contrib.distributions.python.ops.beta.Beta._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.beta.Beta._variance(self)
tensorflow.contrib.distributions.python.ops.beta.Beta.concentration0(self)
tensorflow.contrib.distributions.python.ops.beta.Beta.concentration1(self)
tensorflow.contrib.distributions.python.ops.beta.Beta.total_concentration(self)
tensorflow.contrib.distributions.python.ops.beta.BetaWithSoftplusConcentration(self,concentration1,concentration0,validate_args=False,allow_nan_stats=True,name='BetaWithSoftplusConcentration')
tensorflow.contrib.distributions.python.ops.beta.BetaWithSoftplusConcentration.__init__(self,concentration1,concentration0,validate_args=False,allow_nan_stats=True,name='BetaWithSoftplusConcentration')
tensorflow.contrib.distributions.python.ops.beta._kl_beta_beta(d1,d2,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/chi2.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.chi2.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.chi2.self._df->tensorflow.python.framework.ops.convert_to_tensor(df, name='df')
tensorflow.contrib.distributions.Chi2(self,df,validate_args=False,allow_nan_stats=True,name='Chi2')
tensorflow.contrib.distributions.Chi2._param_shapes(sample_shape)
tensorflow.contrib.distributions.Chi2.df(self)
tensorflow.contrib.distributions.Chi2WithAbsDf(self,df,validate_args=False,allow_nan_stats=True,name='Chi2WithAbsDf')
tensorflow.contrib.distributions.python.ops.chi2.Chi2(self,df,validate_args=False,allow_nan_stats=True,name='Chi2')
tensorflow.contrib.distributions.python.ops.chi2.Chi2.__init__(self,df,validate_args=False,allow_nan_stats=True,name='Chi2')
tensorflow.contrib.distributions.python.ops.chi2.Chi2._param_shapes(sample_shape)
tensorflow.contrib.distributions.python.ops.chi2.Chi2.df(self)
tensorflow.contrib.distributions.python.ops.chi2.Chi2WithAbsDf(self,df,validate_args=False,allow_nan_stats=True,name='Chi2WithAbsDf')
tensorflow.contrib.distributions.python.ops.chi2.Chi2WithAbsDf.__init__(self,df,validate_args=False,allow_nan_stats=True,name='Chi2WithAbsDf')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/operator_pd_identity.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.self._dtype->tensorflow.python.framework.dtypes.as_dtype(dtype)
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.shape->tensorflow.python.framework.ops.convert_to_tensor(shape, name='shape')
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.self._get_shape->tensorflow.python.framework.tensor_shape.TensorShape(tensor_util.constant_value(shape))
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.self._shape_arg->self._check_shape(shape)
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.self._scale->self._check_scale(scale, self._dtype)
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.rank->tensorflow.python.ops.array_ops.size(self._shape_arg)
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.assert_matrix->tensorflow.python.ops.check_ops.assert_less_equal(2, rank)
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.last_dim->tensorflow.python.ops.math_ops.cast(array_ops.gather(self._shape_arg, rank - 1), dtype=self.dtype)
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.second_to_last_dim->tensorflow.python.ops.array_ops.gather(shape, rank - 2)
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.assert_square->tensorflow.python.ops.check_ops.assert_equal(last_dim, second_to_last_dim)
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.scale->tensorflow.contrib.framework.python.framework.tensor_util.assert_scalar(scale)
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.x_shape->tensorflow.python.ops.array_ops.matrix_transpose(x).get_shape()
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.self_shape->self.get_shape()
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.mat_diag->tensorflow.python.ops.array_ops.matrix_diag_part(mat)
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.x->tensorflow.python.ops.array_ops.matrix_transpose(x)
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.diag->tensorflow.python.ops.array_ops.ones(self.vector_shape(), dtype=self.dtype)
A:tensorflow.contrib.distributions.python.ops.operator_pd_identity.dense->tensorflow.python.ops.array_ops.matrix_diag(diag)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity(self,shape,dtype,scale=None,verify_pd=True,name='OperatorPDIdentity')
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._add_to_tensor(self,mat)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._batch_log_det(self)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._batch_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._batch_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._batch_sqrt_log_abs_det(self)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._batch_sqrt_log_det(self)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._batch_sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._batch_sqrt_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._check_scale(self,scale,dtype)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._check_shape(self,shape)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._check_x(self,x)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._det(self)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._inv_quadratic_form_on_vectors(self,x)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._shape(self)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._sqrt_to_dense(self)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity._to_dense(self)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity.dtype(self)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity.get_shape(self)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity.inputs(self)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity.name(self)
tensorflow.contrib.distributions.ops.operator_pd_identity.OperatorPDIdentity.verify_pd(self)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity(self,shape,dtype,scale=None,verify_pd=True,name='OperatorPDIdentity')
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity.__init__(self,shape,dtype,scale=None,verify_pd=True,name='OperatorPDIdentity')
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._add_to_tensor(self,mat)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._batch_log_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._batch_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._batch_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._batch_sqrt_log_abs_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._batch_sqrt_log_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._batch_sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._batch_sqrt_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._check_scale(self,scale,dtype)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._check_shape(self,shape)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._check_x(self,x)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._det(self)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._inv_quadratic_form_on_vectors(self,x)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._shape(self)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._sqrt_to_dense(self)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity._to_dense(self)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity.dtype(self)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity.get_shape(self)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity.inputs(self)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity.name(self)
tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity.verify_pd(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/operator_pd_vdvt_update.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.self._v->tensorflow.python.framework.ops.convert_to_tensor(v, name='v')
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.self._diag->tensorflow.python.framework.ops.convert_to_tensor(diag, name='diag')
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.self._diag_operator->self._get_identity_operator(self._v)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.self._diag_inv_operator->tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiag(1 / self._diag, verify_pd=False)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.checked->self._check_shapes_static(operator, self._v, self._diag)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.(self._v, self._diag)->self._check_shapes_dynamic(operator, self._v, self._diag)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.v_shape->tensorflow.python.ops.array_ops.shape(v)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.v_rank->tensorflow.python.ops.array_ops.rank(v)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.v_batch_shape->tensorflow.python.ops.array_ops.strided_slice(v_shape, [0], [v_rank - 2])
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.r->tensorflow.python.ops.array_ops.gather(v_shape, v_rank - 1)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.id_shape->tensorflow.python.ops.array_ops.concat((v_batch_shape, [r, r]), 0)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.s_op->operator.get_shape()
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.s_v->tensorflow.python.ops.array_ops.shape(v)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.s_d->tensorflow.python.ops.array_ops.shape(diag)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.r_op->operator.rank()
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.r_v->tensorflow.python.ops.array_ops.rank(v)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.r_d->tensorflow.python.ops.array_ops.rank(diag)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.v->tensorflow.python.ops.control_flow_ops.with_dependencies(checks, v)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.diag->tensorflow.python.ops.control_flow_ops.with_dependencies(checks, diag)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.abs_diag_chol_c->tensorflow.python.ops.math_ops.abs(array_ops.matrix_diag_part(self._chol_capacitance(batch_mode=True)))
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.minv_v->self._operator.solve(self._v)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.vt_minv_v->tensorflow.python.ops.math_ops.matmul(self._v, minv_v, adjoint_a=True)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.capacitance->self._diag_inv_operator.add_to_tensor(vt_minv_v)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.s_x->self._sqrt_matmul(x, transpose_x=transpose_x)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.mx->m.matmul(x, transpose_x=transpose_x)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.vt_x->tensorflow.python.ops.math_ops.matmul(v, x, transpose_a=True, transpose_b=transpose_x)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.d_vt_x->d.matmul(vt_x)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.v_d_vt_x->tensorflow.python.ops.math_ops.matmul(v, d_vt_x)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.sqrtinv_rhs->self._batch_sqrt_solve(rhs)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.cchol->self._chol_capacitance(batch_mode=True)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.minv_rhs->m.solve(rhs)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.vt_minv_rhs->tensorflow.python.ops.math_ops.matmul(v, minv_rhs, adjoint_a=True)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.cinv_vt_minv_rhs->tensorflow.python.ops.linalg_ops.cholesky_solve(cchol, vt_minv_rhs)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.v_cinv_vt_minv_rhs->tensorflow.python.ops.math_ops.matmul(v, cinv_vt_minv_rhs)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.minv_v_cinv_vt_minv_rhs->m.solve(v_cinv_vt_minv_rhs)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.sqrt->self.sqrt_to_dense()
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.d_vt->d.matmul(v, transpose_x=True)
A:tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.v_d_vt->tensorflow.python.ops.math_ops.matmul(v, d_vt)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate(self,operator,v,diag=None,verify_pd=True,verify_shapes=True,name='OperatorPDSqrtVDVTUpdate')
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._batch_log_det(self)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._batch_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._batch_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._batch_sqrt_log_det(self)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._batch_sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._batch_sqrt_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._check_shapes_dynamic(self,operator,v,diag)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._check_shapes_static(self,operator,v,diag)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._check_types(self,operator,v,diag)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._chol_capacitance(self,batch_mode)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._det(self)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._get_identity_operator(self,v)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._inv_quadratic_form_on_vectors(self,x)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._log_det(self)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._shape(self)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._sqrt_log_det(self)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._sqrt_log_det_core(self,diag_chol_c)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._sqrt_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._sqrt_to_dense(self)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._to_dense(self)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate.dtype(self)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate.get_shape(self)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate.inputs(self)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate.name(self)
tensorflow.contrib.distributions.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate.verify_pd(self)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate(self,operator,v,diag=None,verify_pd=True,verify_shapes=True,name='OperatorPDSqrtVDVTUpdate')
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate.__init__(self,operator,v,diag=None,verify_pd=True,verify_shapes=True,name='OperatorPDSqrtVDVTUpdate')
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._batch_log_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._batch_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._batch_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._batch_sqrt_log_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._batch_sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._batch_sqrt_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._check_shapes_dynamic(self,operator,v,diag)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._check_shapes_static(self,operator,v,diag)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._check_types(self,operator,v,diag)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._chol_capacitance(self,batch_mode)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._det(self)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._get_identity_operator(self,v)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._inv_quadratic_form_on_vectors(self,x)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._log_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._shape(self)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._sqrt_log_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._sqrt_log_det_core(self,diag_chol_c)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._sqrt_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._sqrt_to_dense(self)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate._to_dense(self)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate.dtype(self)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate.get_shape(self)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate.inputs(self)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate.name(self)
tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update.OperatorPDSqrtVDVTUpdate.verify_pd(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/operator_pd_cholesky.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.self._chol->self._check_chol(chol)
A:tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.diag->tensorflow.python.ops.array_ops.matrix_diag_part(chol)
A:tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.chol->tensorflow.python.ops.array_ops.matrix_band_part(self._chol, -1, 0)
A:tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.chol_times_x->tensorflow.python.ops.math_ops.matmul(chol, x, adjoint_a=True, adjoint_b=transpose_x)
A:tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.shape->tensorflow.python.ops.array_ops.shape(chol)
A:tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.rank->tensorflow.python.ops.array_ops.rank(chol)
A:tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.is_matrix->tensorflow.python.ops.check_ops.assert_rank_at_least(chol, 2)
A:tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.is_square->tensorflow.python.ops.check_ops.assert_equal(array_ops.gather(shape, rank - 2), array_ops.gather(shape, rank - 1))
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky(self,chol,verify_pd=True,name='OperatorPDCholesky')
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky._batch_log_det(self)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky._batch_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky._batch_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky._batch_sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky._batch_sqrt_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky._check_chol(self,chol)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky._inv_quadratic_form_on_vectors(self,x)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky._matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky._shape(self)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky._sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky._sqrt_to_dense(self)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky._to_dense(self)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky.dtype(self)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky.get_shape(self)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky.inputs(self)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky.name(self)
tensorflow.contrib.distributions.ops.operator_pd_cholesky.OperatorPDCholesky.verify_pd(self)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky(self,chol,verify_pd=True,name='OperatorPDCholesky')
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky.__init__(self,chol,verify_pd=True,name='OperatorPDCholesky')
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky._batch_log_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky._batch_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky._batch_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky._batch_sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky._batch_sqrt_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky._check_chol(self,chol)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky._inv_quadratic_form_on_vectors(self,x)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky._matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky._shape(self)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky._sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky._sqrt_to_dense(self)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky._to_dense(self)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky.dtype(self)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky.get_shape(self)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky.inputs(self)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky.name(self)
tensorflow.contrib.distributions.python.ops.operator_pd_cholesky.OperatorPDCholesky.verify_pd(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bernoulli.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.bernoulli.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.bernoulli.(self._logits, self._probs)->tensorflow.contrib.distributions.python.ops.distribution_util.get_logits_and_probs(logits=logits, probs=probs, validate_args=validate_args, name=name)
A:tensorflow.contrib.distributions.python.ops.bernoulli.new_shape->tensorflow.python.ops.array_ops.concat([[n], self.batch_shape_tensor()], 0)
A:tensorflow.contrib.distributions.python.ops.bernoulli.uniform->tensorflow.python.ops.random_ops.random_uniform(new_shape, seed=seed, dtype=self.probs.dtype)
A:tensorflow.contrib.distributions.python.ops.bernoulli.sample->tensorflow.python.ops.math_ops.less(uniform, self.probs)
A:tensorflow.contrib.distributions.python.ops.bernoulli.event->tensorflow.python.ops.math_ops.cast(event, self.logits.dtype)
A:tensorflow.contrib.distributions.python.ops.bernoulli.(logits, event)->tensorflow.python.ops.control_flow_ops.cond(distribution_util.same_dynamic_shape(logits, event), lambda : (logits, event), lambda : _broadcast(logits, event))
tensorflow.contrib.distributions.Bernoulli(self,logits=None,probs=None,dtype=dtypes.int32,validate_args=False,allow_nan_stats=True,name='Bernoulli')
tensorflow.contrib.distributions.Bernoulli._batch_shape(self)
tensorflow.contrib.distributions.Bernoulli._batch_shape_tensor(self)
tensorflow.contrib.distributions.Bernoulli._entropy(self)
tensorflow.contrib.distributions.Bernoulli._event_shape(self)
tensorflow.contrib.distributions.Bernoulli._event_shape_tensor(self)
tensorflow.contrib.distributions.Bernoulli._log_prob(self,event)
tensorflow.contrib.distributions.Bernoulli._mean(self)
tensorflow.contrib.distributions.Bernoulli._mode(self)
tensorflow.contrib.distributions.Bernoulli._param_shapes(sample_shape)
tensorflow.contrib.distributions.Bernoulli._prob(self,event)
tensorflow.contrib.distributions.Bernoulli._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.Bernoulli._variance(self)
tensorflow.contrib.distributions.Bernoulli.logits(self)
tensorflow.contrib.distributions.Bernoulli.probs(self)
tensorflow.contrib.distributions.BernoulliWithSigmoidProbs(self,logits=None,dtype=dtypes.int32,validate_args=False,allow_nan_stats=True,name='BernoulliWithSigmoidProbs')
tensorflow.contrib.distributions._kl_bernoulli_bernoulli(a,b,name=None)
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli(self,logits=None,probs=None,dtype=dtypes.int32,validate_args=False,allow_nan_stats=True,name='Bernoulli')
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli.__init__(self,logits=None,probs=None,dtype=dtypes.int32,validate_args=False,allow_nan_stats=True,name='Bernoulli')
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli._batch_shape(self)
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli._entropy(self)
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli._event_shape(self)
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli._log_prob(self,event)
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli._mean(self)
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli._mode(self)
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli._param_shapes(sample_shape)
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli._prob(self,event)
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli._variance(self)
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli.logits(self)
tensorflow.contrib.distributions.python.ops.bernoulli.Bernoulli.probs(self)
tensorflow.contrib.distributions.python.ops.bernoulli.BernoulliWithSigmoidProbs(self,logits=None,dtype=dtypes.int32,validate_args=False,allow_nan_stats=True,name='BernoulliWithSigmoidProbs')
tensorflow.contrib.distributions.python.ops.bernoulli.BernoulliWithSigmoidProbs.__init__(self,logits=None,dtype=dtypes.int32,validate_args=False,allow_nan_stats=True,name='BernoulliWithSigmoidProbs')
tensorflow.contrib.distributions.python.ops.bernoulli._kl_bernoulli_bernoulli(a,b,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/relaxed_onehot_categorical.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.self._temperature->tensorflow.python.ops.array_ops.identity(temperature, name='temperature')
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.self._temperature_2d->tensorflow.python.ops.array_ops.reshape(temperature, [-1, 1], name='temperature_2d')
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.(self._logits, self._probs)->tensorflow.contrib.distributions.python.ops.distribution_util.get_logits_and_probs(name=name, logits=logits, probs=probs, validate_args=validate_args, multidimensional=True)
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.logits_shape_static->self._logits.get_shape().with_rank_at_least(1)
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.self._batch_rank->tensorflow.python.framework.ops.convert_to_tensor(logits_shape_static.ndims - 1, dtype=dtypes.int32, name='batch_rank')
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.sample_shape->tensorflow.python.ops.array_ops.concat([[n], array_ops.shape(self.logits)], 0)
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.logits_2d->tensorflow.python.ops.array_ops.reshape(logits, [-1, self.event_size])
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.uniform->tensorflow.python.ops.random_ops.random_uniform(shape=array_ops.shape(logits_2d), minval=np.finfo(self.dtype.as_numpy_dtype).tiny, maxval=1.0, dtype=self.dtype, seed=seed)
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.noisy_logits->tensorflow.python.ops.math_ops.div(gumbel + logits_2d, self._temperature_2d)
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.samples->tensorflow.python.ops.nn_ops.log_softmax(noisy_logits)
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.ret->tensorflow.python.ops.array_ops.reshape(log_prob, logits_shape)
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.x->self._assert_valid_sample(x)
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.logits_shape->tensorflow.python.ops.array_ops.shape(math_ops.reduce_sum(logits, axis=[-1]))
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.x_2d->tensorflow.python.ops.array_ops.reshape(x, [-1, self.event_size])
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.k->tensorflow.python.ops.math_ops.cast(self.event_size, x.dtype)
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.log_softmax->tensorflow.python.ops.nn_ops.log_softmax(logits_2d - x_2d * self._temperature_2d)
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.log_unnorm_prob->tensorflow.python.ops.math_ops.reduce_sum(log_softmax, [-1], keep_dims=False)
A:tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.dist->ExpRelaxedOneHotCategorical(temperature, logits=logits, probs=probs, dtype=dtype, validate_args=validate_args, allow_nan_stats=allow_nan_stats)
tensorflow.contrib.distributions.ExpRelaxedOneHotCategorical(self,temperature,logits=None,probs=None,dtype=dtypes.float32,validate_args=False,allow_nan_stats=True,name='ExpRelaxedOneHotCategorical')
tensorflow.contrib.distributions.ExpRelaxedOneHotCategorical._assert_valid_sample(self,x)
tensorflow.contrib.distributions.ExpRelaxedOneHotCategorical._batch_shape(self)
tensorflow.contrib.distributions.ExpRelaxedOneHotCategorical._batch_shape_tensor(self)
tensorflow.contrib.distributions.ExpRelaxedOneHotCategorical._event_shape(self)
tensorflow.contrib.distributions.ExpRelaxedOneHotCategorical._event_shape_tensor(self)
tensorflow.contrib.distributions.ExpRelaxedOneHotCategorical._log_prob(self,x)
tensorflow.contrib.distributions.ExpRelaxedOneHotCategorical._prob(self,x)
tensorflow.contrib.distributions.ExpRelaxedOneHotCategorical._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.ExpRelaxedOneHotCategorical.event_size(self)
tensorflow.contrib.distributions.ExpRelaxedOneHotCategorical.logits(self)
tensorflow.contrib.distributions.ExpRelaxedOneHotCategorical.probs(self)
tensorflow.contrib.distributions.ExpRelaxedOneHotCategorical.temperature(self)
tensorflow.contrib.distributions.RelaxedOneHotCategorical(self,temperature,logits=None,probs=None,dtype=dtypes.float32,validate_args=False,allow_nan_stats=True,name='RelaxedOneHotCategorical')
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical(self,temperature,logits=None,probs=None,dtype=dtypes.float32,validate_args=False,allow_nan_stats=True,name='ExpRelaxedOneHotCategorical')
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.__init__(self,temperature,logits=None,probs=None,dtype=dtypes.float32,validate_args=False,allow_nan_stats=True,name='ExpRelaxedOneHotCategorical')
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._assert_valid_sample(self,x)
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._batch_shape(self)
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._event_shape(self)
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._prob(self,x)
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.event_size(self)
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.logits(self)
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.probs(self)
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.temperature(self)
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.RelaxedOneHotCategorical(self,temperature,logits=None,probs=None,dtype=dtypes.float32,validate_args=False,allow_nan_stats=True,name='RelaxedOneHotCategorical')
tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical.RelaxedOneHotCategorical.__init__(self,temperature,logits=None,probs=None,dtype=dtypes.float32,validate_args=False,allow_nan_stats=True,name='RelaxedOneHotCategorical')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/categorical.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.categorical.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.categorical.(self._logits, self._probs)->tensorflow.contrib.distributions.python.ops.distribution_util.get_logits_and_probs(logits=logits, probs=probs, validate_args=validate_args, multidimensional=True, name=name)
A:tensorflow.contrib.distributions.python.ops.categorical.logits_shape_static->self._logits.get_shape().with_rank_at_least(1)
A:tensorflow.contrib.distributions.python.ops.categorical.self._batch_rank->tensorflow.python.framework.ops.convert_to_tensor(logits_shape_static.ndims - 1, dtype=dtypes.int32, name='batch_rank')
A:tensorflow.contrib.distributions.python.ops.categorical.logits_shape->tensorflow.python.ops.array_ops.shape(self._logits, name='logits_shape')
A:tensorflow.contrib.distributions.python.ops.categorical.self._event_size->tensorflow.python.framework.ops.convert_to_tensor(logits_shape_static[-1].value, dtype=dtypes.int32, name='event_size')
A:tensorflow.contrib.distributions.python.ops.categorical.self._batch_shape_val->tensorflow.python.framework.constant_op.constant(logits_shape_static[:-1].as_list(), dtype=dtypes.int32, name='batch_shape')
A:tensorflow.contrib.distributions.python.ops.categorical.logits_2d->tensorflow.python.ops.array_ops.reshape(self.logits, [-1, self.event_size])
A:tensorflow.contrib.distributions.python.ops.categorical.samples->tensorflow.python.ops.math_ops.cast(samples, self.dtype)
A:tensorflow.contrib.distributions.python.ops.categorical.ret->tensorflow.python.ops.math_ops.cast(ret, self.dtype)
A:tensorflow.contrib.distributions.python.ops.categorical.k->tensorflow.python.framework.ops.convert_to_tensor(k, name='k')
tensorflow.contrib.distributions.Categorical(self,logits=None,probs=None,dtype=dtypes.int32,validate_args=False,allow_nan_stats=True,name='Categorical')
tensorflow.contrib.distributions.Categorical._batch_shape(self)
tensorflow.contrib.distributions.Categorical._batch_shape_tensor(self)
tensorflow.contrib.distributions.Categorical._entropy(self)
tensorflow.contrib.distributions.Categorical._event_shape(self)
tensorflow.contrib.distributions.Categorical._event_shape_tensor(self)
tensorflow.contrib.distributions.Categorical._log_prob(self,k)
tensorflow.contrib.distributions.Categorical._mode(self)
tensorflow.contrib.distributions.Categorical._prob(self,k)
tensorflow.contrib.distributions.Categorical._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.Categorical.event_size(self)
tensorflow.contrib.distributions.Categorical.logits(self)
tensorflow.contrib.distributions.Categorical.probs(self)
tensorflow.contrib.distributions._kl_categorical_categorical(a,b,name=None)
tensorflow.contrib.distributions.python.ops.categorical.Categorical(self,logits=None,probs=None,dtype=dtypes.int32,validate_args=False,allow_nan_stats=True,name='Categorical')
tensorflow.contrib.distributions.python.ops.categorical.Categorical.__init__(self,logits=None,probs=None,dtype=dtypes.int32,validate_args=False,allow_nan_stats=True,name='Categorical')
tensorflow.contrib.distributions.python.ops.categorical.Categorical._batch_shape(self)
tensorflow.contrib.distributions.python.ops.categorical.Categorical._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.categorical.Categorical._entropy(self)
tensorflow.contrib.distributions.python.ops.categorical.Categorical._event_shape(self)
tensorflow.contrib.distributions.python.ops.categorical.Categorical._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.categorical.Categorical._log_prob(self,k)
tensorflow.contrib.distributions.python.ops.categorical.Categorical._mode(self)
tensorflow.contrib.distributions.python.ops.categorical.Categorical._prob(self,k)
tensorflow.contrib.distributions.python.ops.categorical.Categorical._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.categorical.Categorical.event_size(self)
tensorflow.contrib.distributions.python.ops.categorical.Categorical.logits(self)
tensorflow.contrib.distributions.python.ops.categorical.Categorical.probs(self)
tensorflow.contrib.distributions.python.ops.categorical._kl_categorical_categorical(a,b,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/mvn_tril.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.mvn_tril.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.mvn_tril.loc->_convert_to_tensor(loc, name='loc')
A:tensorflow.contrib.distributions.python.ops.mvn_tril.scale_tril->tensorflow.python.ops.control_flow_ops.with_dependencies([check_ops.assert_greater(math_ops.abs(array_ops.matrix_diag_part(scale_tril)), array_ops.zeros([], scale_tril.dtype), message='`scale_tril` must have non-zero diagonal')], scale_tril)
A:tensorflow.contrib.distributions.python.ops.mvn_tril.scale->tensorflow.contrib.linalg.LinearOperatorTriL(scale_tril, is_non_singular=True, is_self_adjoint=False, is_positive_definite=False)
tensorflow.contrib.distributions.MultivariateNormalTriL(self,loc=None,scale_tril=None,validate_args=False,allow_nan_stats=True,name='MultivariateNormalTriL')
tensorflow.contrib.distributions.python.ops.mvn_tril.MultivariateNormalTriL(self,loc=None,scale_tril=None,validate_args=False,allow_nan_stats=True,name='MultivariateNormalTriL')
tensorflow.contrib.distributions.python.ops.mvn_tril.MultivariateNormalTriL.__init__(self,loc=None,scale_tril=None,validate_args=False,allow_nan_stats=True,name='MultivariateNormalTriL')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/geometric.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.geometric.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.geometric.(self._logits, self._probs)->tensorflow.contrib.distributions.python.ops.distribution_util.get_logits_and_probs(logits, probs, validate_args=validate_args, name=name)
A:tensorflow.contrib.distributions.python.ops.geometric.self._probs->tensorflow.python.ops.array_ops.identity(self._probs, name='probs')
A:tensorflow.contrib.distributions.python.ops.geometric.sampled->tensorflow.python.ops.random_ops.random_uniform(array_ops.concat([[n], array_ops.shape(self._probs)], 0), minval=np.finfo(self.dtype.as_numpy_dtype).tiny, maxval=1.0, seed=seed, dtype=self.dtype)
A:tensorflow.contrib.distributions.python.ops.geometric.counts->tensorflow.contrib.distributions.python.ops.distribution_util.embed_check_nonnegative_discrete(counts, check_integer=True)
A:tensorflow.contrib.distributions.python.ops.geometric.safe_domain->tensorflow.python.ops.array_ops.where(math_ops.equal(counts, 0.0), array_ops.zeros_like(probs), probs)
A:tensorflow.contrib.distributions.python.ops.geometric.probs->tensorflow.python.ops.control_flow_ops.with_dependencies([check_ops.assert_less(probs, constant_op.constant(1.0, probs.dtype), message='Entropy is undefined when logits = inf or probs = 1.')], probs)
tensorflow.contrib.distributions.Geometric(self,logits=None,probs=None,validate_args=True,allow_nan_stats=False,name='Geometric')
tensorflow.contrib.distributions.Geometric._batch_shape(self)
tensorflow.contrib.distributions.Geometric._batch_shape_tensor(self)
tensorflow.contrib.distributions.Geometric._cdf(self,counts)
tensorflow.contrib.distributions.Geometric._entropy(self)
tensorflow.contrib.distributions.Geometric._event_shape(self)
tensorflow.contrib.distributions.Geometric._event_shape_tensor(self)
tensorflow.contrib.distributions.Geometric._log_prob(self,counts)
tensorflow.contrib.distributions.Geometric._mean(self)
tensorflow.contrib.distributions.Geometric._mode(self)
tensorflow.contrib.distributions.Geometric._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.Geometric._variance(self)
tensorflow.contrib.distributions.Geometric.logits(self)
tensorflow.contrib.distributions.Geometric.probs(self)
tensorflow.contrib.distributions.python.ops.geometric.Geometric(self,logits=None,probs=None,validate_args=True,allow_nan_stats=False,name='Geometric')
tensorflow.contrib.distributions.python.ops.geometric.Geometric.__init__(self,logits=None,probs=None,validate_args=True,allow_nan_stats=False,name='Geometric')
tensorflow.contrib.distributions.python.ops.geometric.Geometric._batch_shape(self)
tensorflow.contrib.distributions.python.ops.geometric.Geometric._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.geometric.Geometric._cdf(self,counts)
tensorflow.contrib.distributions.python.ops.geometric.Geometric._entropy(self)
tensorflow.contrib.distributions.python.ops.geometric.Geometric._event_shape(self)
tensorflow.contrib.distributions.python.ops.geometric.Geometric._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.geometric.Geometric._log_prob(self,counts)
tensorflow.contrib.distributions.python.ops.geometric.Geometric._mean(self)
tensorflow.contrib.distributions.python.ops.geometric.Geometric._mode(self)
tensorflow.contrib.distributions.python.ops.geometric.Geometric._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.geometric.Geometric._variance(self)
tensorflow.contrib.distributions.python.ops.geometric.Geometric.logits(self)
tensorflow.contrib.distributions.python.ops.geometric.Geometric.probs(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/deterministic.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.deterministic.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.deterministic.loc->tensorflow.python.ops.control_flow_ops.with_dependencies([check_ops.assert_rank_at_least(loc, 1, message=msg)], loc)
A:tensorflow.contrib.distributions.python.ops.deterministic.self._atol->self._get_tol(atol)
A:tensorflow.contrib.distributions.python.ops.deterministic.self._rtol->self._get_tol(rtol)
A:tensorflow.contrib.distributions.python.ops.deterministic.tol->tensorflow.python.ops.control_flow_ops.with_dependencies([check_ops.assert_non_negative(tol, message="Argument 'tol' must be non-negative")], tol)
A:tensorflow.contrib.distributions.python.ops.deterministic.n_static->tensorflow.python.framework.tensor_util.constant_value(ops.convert_to_tensor(n))
A:tensorflow.contrib.distributions.python.ops.deterministic.ones->tensorflow.python.ops.array_ops.ones_like(array_ops.shape(self.loc))
A:tensorflow.contrib.distributions.python.ops.deterministic.multiples->tensorflow.python.ops.array_ops.concat(([n], ones), axis=0)
A:tensorflow.contrib.distributions.python.ops.deterministic.is_vector_check->tensorflow.python.ops.check_ops.assert_rank_at_least(x, 1)
A:tensorflow.contrib.distributions.python.ops.deterministic.right_vec_space_check->tensorflow.python.ops.check_ops.assert_equal(self.event_shape_tensor(), array_ops.gather(array_ops.shape(x), array_ops.rank(x) - 1), message="Argument 'x' not defined in the same space R^k as this distribution")
A:tensorflow.contrib.distributions.python.ops.deterministic.x->tensorflow.python.ops.array_ops.identity(x)
tensorflow.contrib.distributions.Deterministic(self,loc,atol=None,rtol=None,validate_args=False,allow_nan_stats=True,name='Deterministic')
tensorflow.contrib.distributions.Deterministic._batch_shape(self)
tensorflow.contrib.distributions.Deterministic._batch_shape_tensor(self)
tensorflow.contrib.distributions.Deterministic._cdf(self,x)
tensorflow.contrib.distributions.Deterministic._event_shape(self)
tensorflow.contrib.distributions.Deterministic._event_shape_tensor(self)
tensorflow.contrib.distributions.Deterministic._prob(self,x)
tensorflow.contrib.distributions.VectorDeterministic(self,loc,atol=None,rtol=None,validate_args=False,allow_nan_stats=True,name='VectorDeterministic')
tensorflow.contrib.distributions.VectorDeterministic._batch_shape(self)
tensorflow.contrib.distributions.VectorDeterministic._batch_shape_tensor(self)
tensorflow.contrib.distributions.VectorDeterministic._event_shape(self)
tensorflow.contrib.distributions.VectorDeterministic._event_shape_tensor(self)
tensorflow.contrib.distributions.VectorDeterministic._prob(self,x)
tensorflow.contrib.distributions._BaseDeterministic(self,loc,atol=None,rtol=None,is_vector=False,validate_args=False,allow_nan_stats=True,name='_BaseDeterministic')
tensorflow.contrib.distributions._BaseDeterministic._get_tol(self,tol)
tensorflow.contrib.distributions._BaseDeterministic._mean(self)
tensorflow.contrib.distributions._BaseDeterministic._mode(self)
tensorflow.contrib.distributions._BaseDeterministic._sample_n(self,n,seed=None)
tensorflow.contrib.distributions._BaseDeterministic._variance(self)
tensorflow.contrib.distributions._BaseDeterministic.atol(self)
tensorflow.contrib.distributions._BaseDeterministic.loc(self)
tensorflow.contrib.distributions._BaseDeterministic.rtol(self)
tensorflow.contrib.distributions.python.ops.deterministic.Deterministic(self,loc,atol=None,rtol=None,validate_args=False,allow_nan_stats=True,name='Deterministic')
tensorflow.contrib.distributions.python.ops.deterministic.Deterministic.__init__(self,loc,atol=None,rtol=None,validate_args=False,allow_nan_stats=True,name='Deterministic')
tensorflow.contrib.distributions.python.ops.deterministic.Deterministic._batch_shape(self)
tensorflow.contrib.distributions.python.ops.deterministic.Deterministic._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.deterministic.Deterministic._cdf(self,x)
tensorflow.contrib.distributions.python.ops.deterministic.Deterministic._event_shape(self)
tensorflow.contrib.distributions.python.ops.deterministic.Deterministic._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.deterministic.Deterministic._prob(self,x)
tensorflow.contrib.distributions.python.ops.deterministic.VectorDeterministic(self,loc,atol=None,rtol=None,validate_args=False,allow_nan_stats=True,name='VectorDeterministic')
tensorflow.contrib.distributions.python.ops.deterministic.VectorDeterministic.__init__(self,loc,atol=None,rtol=None,validate_args=False,allow_nan_stats=True,name='VectorDeterministic')
tensorflow.contrib.distributions.python.ops.deterministic.VectorDeterministic._batch_shape(self)
tensorflow.contrib.distributions.python.ops.deterministic.VectorDeterministic._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.deterministic.VectorDeterministic._event_shape(self)
tensorflow.contrib.distributions.python.ops.deterministic.VectorDeterministic._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.deterministic.VectorDeterministic._prob(self,x)
tensorflow.contrib.distributions.python.ops.deterministic._BaseDeterministic(self,loc,atol=None,rtol=None,is_vector=False,validate_args=False,allow_nan_stats=True,name='_BaseDeterministic')
tensorflow.contrib.distributions.python.ops.deterministic._BaseDeterministic.__init__(self,loc,atol=None,rtol=None,is_vector=False,validate_args=False,allow_nan_stats=True,name='_BaseDeterministic')
tensorflow.contrib.distributions.python.ops.deterministic._BaseDeterministic._get_tol(self,tol)
tensorflow.contrib.distributions.python.ops.deterministic._BaseDeterministic._mean(self)
tensorflow.contrib.distributions.python.ops.deterministic._BaseDeterministic._mode(self)
tensorflow.contrib.distributions.python.ops.deterministic._BaseDeterministic._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.deterministic._BaseDeterministic._variance(self)
tensorflow.contrib.distributions.python.ops.deterministic._BaseDeterministic.atol(self)
tensorflow.contrib.distributions.python.ops.deterministic._BaseDeterministic.loc(self)
tensorflow.contrib.distributions.python.ops.deterministic._BaseDeterministic.rtol(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/normal.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.normal.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.normal.self._loc->tensorflow.python.ops.array_ops.identity(loc, name='loc')
A:tensorflow.contrib.distributions.python.ops.normal.self._scale->tensorflow.python.ops.array_ops.identity(scale, name='scale')
A:tensorflow.contrib.distributions.python.ops.normal.shape->tensorflow.python.ops.array_ops.concat([[n], self.batch_shape_tensor()], 0)
A:tensorflow.contrib.distributions.python.ops.normal.sampled->tensorflow.python.ops.random_ops.random_normal(shape=shape, mean=0.0, stddev=1.0, dtype=self.loc.dtype, seed=seed)
A:tensorflow.contrib.distributions.python.ops.normal.one->tensorflow.python.framework.constant_op.constant(1, dtype=n_a.dtype)
A:tensorflow.contrib.distributions.python.ops.normal.two->tensorflow.python.framework.constant_op.constant(2, dtype=n_a.dtype)
A:tensorflow.contrib.distributions.python.ops.normal.half->tensorflow.python.framework.constant_op.constant(0.5, dtype=n_a.dtype)
A:tensorflow.contrib.distributions.python.ops.normal.s_a_squared->tensorflow.python.ops.math_ops.square(n_a.scale)
A:tensorflow.contrib.distributions.python.ops.normal.s_b_squared->tensorflow.python.ops.math_ops.square(n_b.scale)
tensorflow.contrib.distributions.Normal(self,loc,scale,validate_args=False,allow_nan_stats=True,name='Normal')
tensorflow.contrib.distributions.Normal._batch_shape(self)
tensorflow.contrib.distributions.Normal._batch_shape_tensor(self)
tensorflow.contrib.distributions.Normal._cdf(self,x)
tensorflow.contrib.distributions.Normal._entropy(self)
tensorflow.contrib.distributions.Normal._event_shape(self)
tensorflow.contrib.distributions.Normal._event_shape_tensor(self)
tensorflow.contrib.distributions.Normal._log_cdf(self,x)
tensorflow.contrib.distributions.Normal._log_normalization(self)
tensorflow.contrib.distributions.Normal._log_prob(self,x)
tensorflow.contrib.distributions.Normal._log_survival_function(self,x)
tensorflow.contrib.distributions.Normal._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.Normal._mean(self)
tensorflow.contrib.distributions.Normal._mode(self)
tensorflow.contrib.distributions.Normal._param_shapes(sample_shape)
tensorflow.contrib.distributions.Normal._prob(self,x)
tensorflow.contrib.distributions.Normal._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.Normal._stddev(self)
tensorflow.contrib.distributions.Normal._survival_function(self,x)
tensorflow.contrib.distributions.Normal._z(self,x)
tensorflow.contrib.distributions.Normal.loc(self)
tensorflow.contrib.distributions.Normal.scale(self)
tensorflow.contrib.distributions.NormalWithSoftplusScale(self,loc,scale,validate_args=False,allow_nan_stats=True,name='NormalWithSoftplusScale')
tensorflow.contrib.distributions._kl_normal_normal(n_a,n_b,name=None)
tensorflow.contrib.distributions.python.ops.normal.Normal(self,loc,scale,validate_args=False,allow_nan_stats=True,name='Normal')
tensorflow.contrib.distributions.python.ops.normal.Normal.__init__(self,loc,scale,validate_args=False,allow_nan_stats=True,name='Normal')
tensorflow.contrib.distributions.python.ops.normal.Normal._batch_shape(self)
tensorflow.contrib.distributions.python.ops.normal.Normal._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.normal.Normal._cdf(self,x)
tensorflow.contrib.distributions.python.ops.normal.Normal._entropy(self)
tensorflow.contrib.distributions.python.ops.normal.Normal._event_shape(self)
tensorflow.contrib.distributions.python.ops.normal.Normal._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.normal.Normal._log_cdf(self,x)
tensorflow.contrib.distributions.python.ops.normal.Normal._log_normalization(self)
tensorflow.contrib.distributions.python.ops.normal.Normal._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.normal.Normal._log_survival_function(self,x)
tensorflow.contrib.distributions.python.ops.normal.Normal._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.python.ops.normal.Normal._mean(self)
tensorflow.contrib.distributions.python.ops.normal.Normal._mode(self)
tensorflow.contrib.distributions.python.ops.normal.Normal._param_shapes(sample_shape)
tensorflow.contrib.distributions.python.ops.normal.Normal._prob(self,x)
tensorflow.contrib.distributions.python.ops.normal.Normal._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.normal.Normal._stddev(self)
tensorflow.contrib.distributions.python.ops.normal.Normal._survival_function(self,x)
tensorflow.contrib.distributions.python.ops.normal.Normal._z(self,x)
tensorflow.contrib.distributions.python.ops.normal.Normal.loc(self)
tensorflow.contrib.distributions.python.ops.normal.Normal.scale(self)
tensorflow.contrib.distributions.python.ops.normal.NormalWithSoftplusScale(self,loc,scale,validate_args=False,allow_nan_stats=True,name='NormalWithSoftplusScale')
tensorflow.contrib.distributions.python.ops.normal.NormalWithSoftplusScale.__init__(self,loc,scale,validate_args=False,allow_nan_stats=True,name='NormalWithSoftplusScale')
tensorflow.contrib.distributions.python.ops.normal._kl_normal_normal(n_a,n_b,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/special_math.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.special_math.x->tensorflow.python.framework.ops.convert_to_tensor(x, name='x')
A:tensorflow.contrib.distributions.python.ops.special_math.half_sqrt_2->tensorflow.python.framework.constant_op.constant(0.5 * math.sqrt(2.0), dtype=x.dtype, name='half_sqrt_2')
A:tensorflow.contrib.distributions.python.ops.special_math.z->tensorflow.python.ops.math_ops.abs(w)
A:tensorflow.contrib.distributions.python.ops.special_math.y->tensorflow.python.ops.array_ops.where(math_ops.less(z, half_sqrt_2), 1.0 + math_ops.erf(w), array_ops.where(math_ops.greater(w, 0.0), 2.0 - math_ops.erfc(z), math_ops.erfc(z)))
A:tensorflow.contrib.distributions.python.ops.special_math.x_2->tensorflow.python.ops.math_ops.square(x)
A:tensorflow.contrib.distributions.python.ops.special_math.safe_exp_neg_x->tensorflow.python.ops.math_ops.exp(-math_ops.abs(x))
A:tensorflow.contrib.distributions.python.ops.special_math.upper_solution->tensorflow.python.ops.math_ops.log1p(-0.5 * safe_exp_neg_x)
tensorflow.contrib.distributions.ops.special_math._double_factorial(n)
tensorflow.contrib.distributions.ops.special_math._log_ndtr_asymptotic_series(x,series_order)
tensorflow.contrib.distributions.ops.special_math._log_ndtr_lower(x,series_order)
tensorflow.contrib.distributions.ops.special_math._ndtr(x)
tensorflow.contrib.distributions.ops.special_math.log_cdf_laplace(x,name='log_cdf_laplace')
tensorflow.contrib.distributions.ops.special_math.log_ndtr(x,series_order=3,name='log_ndtr')
tensorflow.contrib.distributions.ops.special_math.ndtr(x,name='ndtr')
tensorflow.contrib.distributions.python.ops.special_math._double_factorial(n)
tensorflow.contrib.distributions.python.ops.special_math._log_ndtr_asymptotic_series(x,series_order)
tensorflow.contrib.distributions.python.ops.special_math._log_ndtr_lower(x,series_order)
tensorflow.contrib.distributions.python.ops.special_math._ndtr(x)
tensorflow.contrib.distributions.python.ops.special_math.log_cdf_laplace(x,name='log_cdf_laplace')
tensorflow.contrib.distributions.python.ops.special_math.log_ndtr(x,series_order=3,name='log_ndtr')
tensorflow.contrib.distributions.python.ops.special_math.ndtr(x,name='ndtr')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/logistic.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.logistic.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.logistic.self._loc->tensorflow.python.ops.array_ops.identity(loc, name='loc')
A:tensorflow.contrib.distributions.python.ops.logistic.self._scale->tensorflow.python.ops.array_ops.identity(scale, name='scale')
A:tensorflow.contrib.distributions.python.ops.logistic.uniform->tensorflow.python.ops.random_ops.random_uniform(shape=array_ops.concat([[n], self.batch_shape_tensor()], 0), minval=np.finfo(self.dtype.as_numpy_dtype).tiny, maxval=1.0, dtype=self.dtype, seed=seed)
A:tensorflow.contrib.distributions.python.ops.logistic.z->self._z(x)
tensorflow.contrib.distributions.Logistic(self,loc,scale,validate_args=False,allow_nan_stats=True,name='Logistic')
tensorflow.contrib.distributions.Logistic._batch_shape(self)
tensorflow.contrib.distributions.Logistic._batch_shape_tensor(self)
tensorflow.contrib.distributions.Logistic._cdf(self,x)
tensorflow.contrib.distributions.Logistic._entropy(self)
tensorflow.contrib.distributions.Logistic._event_shape(self)
tensorflow.contrib.distributions.Logistic._event_shape_tensor(self)
tensorflow.contrib.distributions.Logistic._log_cdf(self,x)
tensorflow.contrib.distributions.Logistic._log_normalization(self)
tensorflow.contrib.distributions.Logistic._log_prob(self,x)
tensorflow.contrib.distributions.Logistic._log_survival_function(self,x)
tensorflow.contrib.distributions.Logistic._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.Logistic._mean(self)
tensorflow.contrib.distributions.Logistic._mode(self)
tensorflow.contrib.distributions.Logistic._param_shapes(sample_shape)
tensorflow.contrib.distributions.Logistic._prob(self,x)
tensorflow.contrib.distributions.Logistic._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.Logistic._stddev(self)
tensorflow.contrib.distributions.Logistic._survival_function(self,x)
tensorflow.contrib.distributions.Logistic._z(self,x)
tensorflow.contrib.distributions.Logistic.loc(self)
tensorflow.contrib.distributions.Logistic.scale(self)
tensorflow.contrib.distributions.python.ops.logistic.Logistic(self,loc,scale,validate_args=False,allow_nan_stats=True,name='Logistic')
tensorflow.contrib.distributions.python.ops.logistic.Logistic.__init__(self,loc,scale,validate_args=False,allow_nan_stats=True,name='Logistic')
tensorflow.contrib.distributions.python.ops.logistic.Logistic._batch_shape(self)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._cdf(self,x)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._entropy(self)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._event_shape(self)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._log_cdf(self,x)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._log_normalization(self)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._log_survival_function(self,x)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._mean(self)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._mode(self)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._param_shapes(sample_shape)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._prob(self,x)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._stddev(self)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._survival_function(self,x)
tensorflow.contrib.distributions.python.ops.logistic.Logistic._z(self,x)
tensorflow.contrib.distributions.python.ops.logistic.Logistic.loc(self)
tensorflow.contrib.distributions.python.ops.logistic.Logistic.scale(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/relaxed_bernoulli.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.relaxed_bernoulli.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.relaxed_bernoulli.self._temperature->tensorflow.python.ops.array_ops.identity(temperature, name='temperature')
A:tensorflow.contrib.distributions.python.ops.relaxed_bernoulli.(self._logits, self._probs)->tensorflow.contrib.distributions.python.ops.distribution_util.get_logits_and_probs(logits=logits, probs=probs, validate_args=validate_args)
tensorflow.contrib.distributions.RelaxedBernoulli(self,temperature,logits=None,probs=None,validate_args=False,allow_nan_stats=True,name='RelaxedBernoulli')
tensorflow.contrib.distributions.RelaxedBernoulli._param_shapes(sample_shape)
tensorflow.contrib.distributions.RelaxedBernoulli.logits(self)
tensorflow.contrib.distributions.RelaxedBernoulli.probs(self)
tensorflow.contrib.distributions.RelaxedBernoulli.temperature(self)
tensorflow.contrib.distributions.python.ops.relaxed_bernoulli.RelaxedBernoulli(self,temperature,logits=None,probs=None,validate_args=False,allow_nan_stats=True,name='RelaxedBernoulli')
tensorflow.contrib.distributions.python.ops.relaxed_bernoulli.RelaxedBernoulli.__init__(self,temperature,logits=None,probs=None,validate_args=False,allow_nan_stats=True,name='RelaxedBernoulli')
tensorflow.contrib.distributions.python.ops.relaxed_bernoulli.RelaxedBernoulli._param_shapes(sample_shape)
tensorflow.contrib.distributions.python.ops.relaxed_bernoulli.RelaxedBernoulli.logits(self)
tensorflow.contrib.distributions.python.ops.relaxed_bernoulli.RelaxedBernoulli.probs(self)
tensorflow.contrib.distributions.python.ops.relaxed_bernoulli.RelaxedBernoulli.temperature(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/distribution_util.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.distribution_util.x->tensorflow.python.ops.array_ops.where(math_ops.logical_or(is_too_small, is_too_large), array_ops.ones_like(x), x)
A:tensorflow.contrib.distributions.python.ops.distribution_util.y->tensorflow.python.ops.array_ops.matrix_band_part(y, -1, 0)
A:tensorflow.contrib.distributions.python.ops.distribution_util.condition->tensorflow.python.ops.math_ops.reduce_all(math_ops.less_equal(math_ops.abs(x - y), tol))
A:tensorflow.contrib.distributions.python.ops.distribution_util.casted_x->tensorflow.python.ops.math_ops.to_int64(x)
A:tensorflow.contrib.distributions.python.ops.distribution_util.matrix_t->tensorflow.python.ops.array_ops.matrix_transpose(matrix)
A:tensorflow.contrib.distributions.python.ops.distribution_util.a->tensorflow.python.framework.ops.convert_to_tensor(a, name='a')
A:tensorflow.contrib.distributions.python.ops.distribution_util.b->tensorflow.python.framework.ops.convert_to_tensor(b, name='b')
A:tensorflow.contrib.distributions.python.ops.distribution_util.logits->tensorflow.python.framework.ops.convert_to_tensor(logits, name='logits')
A:tensorflow.contrib.distributions.python.ops.distribution_util.probs->tensorflow.python.ops.control_flow_ops.with_dependencies(dependencies, probs)
A:tensorflow.contrib.distributions.python.ops.distribution_util.one->tensorflow.python.framework.constant_op.constant(1.0, probs.dtype)
A:tensorflow.contrib.distributions.python.ops.distribution_util.n->tensorflow.python.ops.control_flow_ops.with_dependencies([is_valid_input_shape], n)
A:tensorflow.contrib.distributions.python.ops.distribution_util.counts->tensorflow.python.framework.ops.convert_to_tensor(counts, name='counts')
A:tensorflow.contrib.distributions.python.ops.distribution_util.total_permutations->tensorflow.python.ops.math_ops.lgamma(n + 1)
A:tensorflow.contrib.distributions.python.ops.distribution_util.counts_factorial->tensorflow.python.ops.math_ops.lgamma(counts + 1)
A:tensorflow.contrib.distributions.python.ops.distribution_util.redundant_permutations->tensorflow.python.ops.math_ops.reduce_sum(counts_factorial, axis=[-1])
A:tensorflow.contrib.distributions.python.ops.distribution_util.matrix->tensorflow.python.framework.ops.convert_to_tensor(matrix, name='matrix')
A:tensorflow.contrib.distributions.python.ops.distribution_util.diag->tensorflow.python.ops.array_ops.matrix_diag_part(matrix)
A:tensorflow.contrib.distributions.python.ops.distribution_util.transformed_diag->transform(diag)
A:tensorflow.contrib.distributions.python.ops.distribution_util.transformed_mat->tensorflow.python.ops.array_ops.matrix_set_diag(matrix, transformed_diag)
A:tensorflow.contrib.distributions.python.ops.distribution_util.shift->tensorflow.python.ops.array_ops.where(math_ops.less(shift, 0), math_ops.mod(-shift, ndims), ndims - math_ops.mod(shift, ndims))
A:tensorflow.contrib.distributions.python.ops.distribution_util.shift_value_static->tensorflow.python.framework.tensor_util.constant_value(shift)
A:tensorflow.contrib.distributions.python.ops.distribution_util.perm->tensorflow.python.ops.array_ops.concat([last, first], 0)
A:tensorflow.contrib.distributions.python.ops.distribution_util.ndims->tensorflow.python.ops.array_ops.rank(x)
A:tensorflow.contrib.distributions.python.ops.distribution_util.first->tensorflow.python.ops.math_ops.range(0, shift)
A:tensorflow.contrib.distributions.python.ops.distribution_util.last->tensorflow.python.ops.math_ops.range(shift, ndims)
A:tensorflow.contrib.distributions.python.ops.distribution_util.cond->tensorflow.python.framework.ops.convert_to_tensor(cond, name='cond')
A:tensorflow.contrib.distributions.python.ops.distribution_util.cond_value_static->tensorflow.python.framework.tensor_util.constant_value(cond)
A:tensorflow.contrib.distributions.python.ops.distribution_util.true_vector->tensorflow.python.framework.ops.convert_to_tensor(true_vector, name='true_vector')
A:tensorflow.contrib.distributions.python.ops.distribution_util.false_vector->tensorflow.python.framework.ops.convert_to_tensor(false_vector, name='false_vector')
A:tensorflow.contrib.distributions.python.ops.distribution_util.string->(str(seed) + salt).encode('utf-8')
A:tensorflow.contrib.distributions.python.ops.distribution_util.final_shape->tensorflow.python.ops.array_ops.where(math_ops.logical_or(is_too_small, is_too_large), array_ops.ones_like(x), x).get_shape()[:-1].concatenate(tensor_shape.TensorShape([None, None]))
A:tensorflow.contrib.distributions.python.ops.distribution_util.d->tensorflow.python.ops.math_ops.cast(array_ops.shape(x)[-1], dtype=dtypes.float32)
A:tensorflow.contrib.distributions.python.ops.distribution_util.is_valid_input_shape->tensorflow.python.ops.check_ops.assert_equal(n * (n + 1) / 2, d, message='Input cannot be mapped to a lower triangular.')
A:tensorflow.contrib.distributions.python.ops.distribution_util.ids->tensorflow.python.ops.math_ops.range(n ** 2)
A:tensorflow.contrib.distributions.python.ops.distribution_util.rows->tensorflow.python.ops.math_ops.cast(ids / n, dtype=dtypes.int32)
A:tensorflow.contrib.distributions.python.ops.distribution_util.offset->tensorflow.python.ops.math_ops.cast(rows * (2 * n - rows - 1) / 2, dtype=dtypes.int32)
A:tensorflow.contrib.distributions.python.ops.distribution_util.batch_shape->numpy.asarray(x.get_shape()[:-1].as_list(), dtype=np.int32)
A:tensorflow.contrib.distributions.python.ops.distribution_util.m->tensorflow.python.ops.array_ops.reduce_prod(array_ops.shape(x)[:-1])
A:tensorflow.contrib.distributions.python.ops.distribution_util.batch_ids->tensorflow.python.ops.math_ops.range(m)
A:tensorflow.contrib.distributions.python.ops.distribution_util.idx->tensorflow.python.ops.array_ops.transpose(idx, [1, 2, 0])
A:tensorflow.contrib.distributions.python.ops.distribution_util.is_too_small->tensorflow.python.ops.math_ops.less(x, np.exp(threshold))
A:tensorflow.contrib.distributions.python.ops.distribution_util.is_too_large->tensorflow.python.ops.math_ops.greater(x, -threshold)
A:tensorflow.contrib.distributions.python.ops.distribution_util.too_small_value->tensorflow.python.ops.math_ops.log(x)
A:tensorflow.contrib.distributions.python.ops.distribution_util.loc->_convert_to_tensor(loc, name='loc')
A:tensorflow.contrib.distributions.python.ops.distribution_util.scale_diag->_convert_to_tensor(scale_diag, name='scale_diag')
A:tensorflow.contrib.distributions.python.ops.distribution_util.scale_identity_multiplier->_convert_to_tensor(scale_identity_multiplier, name='scale_identity_multiplier')
A:tensorflow.contrib.distributions.python.ops.distribution_util.num_rows->dimension_size(loc, -1)
A:tensorflow.contrib.distributions.python.ops.distribution_util.value->value.lstrip().lstrip()
tensorflow.contrib.distributions.matrix_diag_transform(matrix,transform=None,name=None)
tensorflow.contrib.distributions.ops.distribution_util.AppendDocstring(self,additional_note='',kwargs_dict=None)
tensorflow.contrib.distributions.ops.distribution_util.assert_close(x,y,data=None,summarize=None,message=None,name='assert_close')
tensorflow.contrib.distributions.ops.distribution_util.assert_integer_form(x,data=None,summarize=None,message=None,name='assert_integer_form')
tensorflow.contrib.distributions.ops.distribution_util.assert_symmetric(matrix)
tensorflow.contrib.distributions.ops.distribution_util.dimension_size(x,axis)
tensorflow.contrib.distributions.ops.distribution_util.embed_check_nonnegative_discrete(x,check_integer=True)
tensorflow.contrib.distributions.ops.distribution_util.fill_lower_triangular(x,validate_args=False,name='fill_lower_triangular')
tensorflow.contrib.distributions.ops.distribution_util.gen_new_seed(seed,salt)
tensorflow.contrib.distributions.ops.distribution_util.get_logits_and_probs(logits=None,probs=None,multidimensional=False,validate_args=False,name='get_logits_and_probs')
tensorflow.contrib.distributions.ops.distribution_util.log_combinations(n,counts,name='log_combinations')
tensorflow.contrib.distributions.ops.distribution_util.make_diag_scale(loc,scale_diag,scale_identity_multiplier,validate_args,assert_positive,name=None)
tensorflow.contrib.distributions.ops.distribution_util.pick_vector(cond,true_vector,false_vector,name='pick_vector')
tensorflow.contrib.distributions.ops.distribution_util.rotate_transpose(x,shift,name='rotate_transpose')
tensorflow.contrib.distributions.ops.distribution_util.same_dynamic_shape(a,b)
tensorflow.contrib.distributions.python.ops.distribution_util.AppendDocstring(self,additional_note='',kwargs_dict=None)
tensorflow.contrib.distributions.python.ops.distribution_util.AppendDocstring.__init__(self,additional_note='',kwargs_dict=None)
tensorflow.contrib.distributions.python.ops.distribution_util.assert_close(x,y,data=None,summarize=None,message=None,name='assert_close')
tensorflow.contrib.distributions.python.ops.distribution_util.assert_integer_form(x,data=None,summarize=None,message=None,name='assert_integer_form')
tensorflow.contrib.distributions.python.ops.distribution_util.assert_symmetric(matrix)
tensorflow.contrib.distributions.python.ops.distribution_util.dimension_size(x,axis)
tensorflow.contrib.distributions.python.ops.distribution_util.embed_check_nonnegative_discrete(x,check_integer=True)
tensorflow.contrib.distributions.python.ops.distribution_util.fill_lower_triangular(x,validate_args=False,name='fill_lower_triangular')
tensorflow.contrib.distributions.python.ops.distribution_util.gen_new_seed(seed,salt)
tensorflow.contrib.distributions.python.ops.distribution_util.get_logits_and_probs(logits=None,probs=None,multidimensional=False,validate_args=False,name='get_logits_and_probs')
tensorflow.contrib.distributions.python.ops.distribution_util.log_combinations(n,counts,name='log_combinations')
tensorflow.contrib.distributions.python.ops.distribution_util.make_diag_scale(loc,scale_diag,scale_identity_multiplier,validate_args,assert_positive,name=None)
tensorflow.contrib.distributions.python.ops.distribution_util.matrix_diag_transform(matrix,transform=None,name=None)
tensorflow.contrib.distributions.python.ops.distribution_util.pick_vector(cond,true_vector,false_vector,name='pick_vector')
tensorflow.contrib.distributions.python.ops.distribution_util.rotate_transpose(x,shift,name='rotate_transpose')
tensorflow.contrib.distributions.python.ops.distribution_util.same_dynamic_shape(a,b)
tensorflow.contrib.distributions.python.ops.distribution_util.softplus_inverse(x,name=None)
tensorflow.contrib.distributions.softplus_inverse(x,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/mvn_diag.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.mvn_diag.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.mvn_diag.scale->tensorflow.contrib.distributions.python.ops.distribution_util.make_diag_scale(loc=loc, scale_diag=scale_diag, scale_identity_multiplier=scale_identity_multiplier, validate_args=validate_args, assert_positive=False)
tensorflow.contrib.distributions.MultivariateNormalDiag(self,loc=None,scale_diag=None,scale_identity_multiplier=None,validate_args=False,allow_nan_stats=True,name='MultivariateNormalDiag')
tensorflow.contrib.distributions.MultivariateNormalDiagWithSoftplusScale(self,loc,scale_diag,validate_args=False,allow_nan_stats=True,name='MultivariateNormalDiagWithSoftplusScale')
tensorflow.contrib.distributions.python.ops.mvn_diag.MultivariateNormalDiag(self,loc=None,scale_diag=None,scale_identity_multiplier=None,validate_args=False,allow_nan_stats=True,name='MultivariateNormalDiag')
tensorflow.contrib.distributions.python.ops.mvn_diag.MultivariateNormalDiag.__init__(self,loc=None,scale_diag=None,scale_identity_multiplier=None,validate_args=False,allow_nan_stats=True,name='MultivariateNormalDiag')
tensorflow.contrib.distributions.python.ops.mvn_diag.MultivariateNormalDiagWithSoftplusScale(self,loc,scale_diag,validate_args=False,allow_nan_stats=True,name='MultivariateNormalDiagWithSoftplusScale')
tensorflow.contrib.distributions.python.ops.mvn_diag.MultivariateNormalDiagWithSoftplusScale.__init__(self,loc,scale_diag,validate_args=False,allow_nan_stats=True,name='MultivariateNormalDiagWithSoftplusScale')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/kullback_leibler.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.kullback_leibler.hierarchy_a->inspect.getmro(type_a)
A:tensorflow.contrib.distributions.python.ops.kullback_leibler.hierarchy_b->inspect.getmro(type_b)
A:tensorflow.contrib.distributions.python.ops.kullback_leibler.candidate_kl_fn->_DIVERGENCES.get((parent_a, parent_b), None)
A:tensorflow.contrib.distributions.python.ops.kullback_leibler.kl_fn->_registered_kl(type(dist_a), type(dist_b))
A:tensorflow.contrib.distributions.python.ops.kullback_leibler.kl_t->tensorflow.python.ops.array_ops.identity(kl_t, name='kl')
tensorflow.contrib.distributions.RegisterKL(self,dist_cls_a,dist_cls_b)
tensorflow.contrib.distributions._registered_kl(type_a,type_b)
tensorflow.contrib.distributions.kl(dist_a,dist_b,allow_nan_stats=True,name=None)
tensorflow.contrib.distributions.python.ops.kullback_leibler.RegisterKL(self,dist_cls_a,dist_cls_b)
tensorflow.contrib.distributions.python.ops.kullback_leibler.RegisterKL.__init__(self,dist_cls_a,dist_cls_b)
tensorflow.contrib.distributions.python.ops.kullback_leibler._registered_kl(type_a,type_b)
tensorflow.contrib.distributions.python.ops.kullback_leibler.kl(dist_a,dist_b,allow_nan_stats=True,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/operator_pd_full.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.operator_pd_full.matrix->tensorflow.contrib.distributions.python.ops.distribution_util.assert_symmetric(matrix)
A:tensorflow.contrib.distributions.python.ops.operator_pd_full.chol->tensorflow.python.ops.linalg_ops.cholesky(matrix)
tensorflow.contrib.distributions.ops.operator_pd_full.OperatorPDFull(self,matrix,verify_pd=True,name='OperatorPDFull')
tensorflow.contrib.distributions.python.ops.operator_pd_full.OperatorPDFull(self,matrix,verify_pd=True,name='OperatorPDFull')
tensorflow.contrib.distributions.python.ops.operator_pd_full.OperatorPDFull.__init__(self,matrix,verify_pd=True,name='OperatorPDFull')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/gumbel.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.gumbel.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.gumbel.self._loc->tensorflow.python.ops.array_ops.identity(loc, name='loc')
A:tensorflow.contrib.distributions.python.ops.gumbel.self._scale->tensorflow.python.ops.array_ops.identity(scale, name='scale')
A:tensorflow.contrib.distributions.python.ops.gumbel.uniform->tensorflow.python.ops.random_ops.random_uniform(shape=array_ops.concat([[n], self.batch_shape_tensor()], 0), minval=np.finfo(self.dtype.as_numpy_dtype).tiny, maxval=1.0, dtype=self.dtype, seed=seed)
A:tensorflow.contrib.distributions.python.ops.gumbel.z->self._z(x)
tensorflow.contrib.distributions.ops.gumbel._Gumbel(self,loc,scale,validate_args=False,allow_nan_stats=True,name='Gumbel')
tensorflow.contrib.distributions.ops.gumbel._Gumbel._batch_shape(self)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._batch_shape_tensor(self)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._cdf(self,x)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._entropy(self)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._event_shape(self)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._event_shape_tensor(self)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._log_cdf(self,x)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._log_normalization(self)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._log_prob(self,x)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._mean(self)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._mode(self)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._param_shapes(sample_shape)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._prob(self,x)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._stddev(self)
tensorflow.contrib.distributions.ops.gumbel._Gumbel._z(self,x)
tensorflow.contrib.distributions.ops.gumbel._Gumbel.loc(self)
tensorflow.contrib.distributions.ops.gumbel._Gumbel.scale(self)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel(self,loc,scale,validate_args=False,allow_nan_stats=True,name='Gumbel')
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel.__init__(self,loc,scale,validate_args=False,allow_nan_stats=True,name='Gumbel')
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._batch_shape(self)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._cdf(self,x)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._entropy(self)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._event_shape(self)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._log_cdf(self,x)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._log_normalization(self)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._mean(self)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._mode(self)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._param_shapes(sample_shape)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._prob(self,x)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._stddev(self)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel._z(self,x)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel.loc(self)
tensorflow.contrib.distributions.python.ops.gumbel._Gumbel.scale(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/transformed_distribution.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.x_->_static_value(x)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.y_->_static_value(y)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.pred_->_static_value(pred)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.self._zero->tensorflow.python.framework.constant_op.constant(0, dtype=dtypes.int32, name='zero')
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.self._empty->tensorflow.python.framework.constant_op.constant([], dtype=dtypes.int32, name='empty')
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.bijector->tensorflow.contrib.distributions.python.ops.bijectors.identity.Identity(validate_args=validate_args)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.self._override_batch_shape->self._maybe_validate_shape_override(batch_shape, distribution.is_scalar_batch(), validate_args, 'batch_shape')
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.self._is_batch_override->_logical_not(_logical_equal(_ndims_from_shape(self._override_batch_shape), self._zero))
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.self._is_maybe_batch_override->bool(tensor_util.constant_value(self._override_batch_shape) is None or tensor_util.constant_value(self._override_batch_shape).size != 0)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.self._override_event_shape->self._maybe_validate_shape_override(event_shape, distribution.is_scalar_event(), validate_args, 'event_shape')
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.self._is_event_override->_logical_not(_logical_equal(_ndims_from_shape(self._override_event_shape), self._zero))
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.self._is_maybe_event_override->bool(tensor_util.constant_value(self._override_event_shape) is None or tensor_util.constant_value(self._override_event_shape).size != 0)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.self._needs_rotation->_logical_and(self._is_event_override, _logical_not(self._is_batch_override), _logical_not(distribution.is_scalar_batch()))
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.override_event_ndims->_ndims_from_shape(self._override_event_shape)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.self._rotate_ndims->_pick_scalar_condition(self._needs_rotation, override_event_ndims, 0)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.self._reduce_event_indices->tensorflow.python.ops.math_ops.range(self._rotate_ndims - override_event_ndims, self._rotate_ndims)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.static_override->tensorflow.python.framework.tensor_util.constant_value(self._override_batch_shape)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.sample_shape->_concat_vectors(distribution_util.pick_vector(self._needs_rotation, self._empty, [n]), self._override_batch_shape, self._override_event_shape, distribution_util.pick_vector(self._needs_rotation, [n], self._empty))
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.x->self.bijector.inverse(y)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.ildj->self.bijector.inverse_log_det_jacobian(y)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.log_prob->tensorflow.python.ops.math_ops.reduce_sum(log_prob, self._reduce_event_indices)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.prob->tensorflow.python.ops.math_ops.reduce_prod(prob, self._reduce_event_indices)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.entropy->tensorflow.python.ops.array_ops.tile(entropy, multiples)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.new_shape->tensorflow.python.ops.array_ops.concat([_ones_like(self._override_batch_shape), self.distribution.batch_shape_tensor()], 0)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.multiples->tensorflow.python.ops.array_ops.concat([self._override_batch_shape, _ones_like(self.distribution.batch_shape_tensor())], 0)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.dummy->tensorflow.python.ops.array_ops.zeros([], self.dtype)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.override_shape->tensorflow.python.framework.ops.convert_to_tensor(override_shape, dtype=dtypes.int32, name=name)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.override_is_scalar->_is_scalar_from_shape(override_shape)
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.is_both_nonscalar->_logical_and(_logical_not(base_is_scalar), _logical_not(override_is_scalar))
A:tensorflow.contrib.distributions.python.ops.transformed_distribution.ndims->tensorflow.python.ops.array_ops.rank(x)
tensorflow.contrib.distributions.TransformedDistribution(self,distribution,bijector=None,batch_shape=None,event_shape=None,validate_args=False,name=None)
tensorflow.contrib.distributions.TransformedDistribution._batch_shape(self)
tensorflow.contrib.distributions.TransformedDistribution._batch_shape_tensor(self)
tensorflow.contrib.distributions.TransformedDistribution._cdf(self,y)
tensorflow.contrib.distributions.TransformedDistribution._entropy(self)
tensorflow.contrib.distributions.TransformedDistribution._event_shape(self)
tensorflow.contrib.distributions.TransformedDistribution._event_shape_tensor(self)
tensorflow.contrib.distributions.TransformedDistribution._log_cdf(self,y)
tensorflow.contrib.distributions.TransformedDistribution._log_prob(self,y)
tensorflow.contrib.distributions.TransformedDistribution._log_survival_function(self,y)
tensorflow.contrib.distributions.TransformedDistribution._maybe_rotate_dims(self,x,rotate_right=False)
tensorflow.contrib.distributions.TransformedDistribution._maybe_validate_shape_override(self,override_shape,base_is_scalar,validate_args,name)
tensorflow.contrib.distributions.TransformedDistribution._prob(self,y)
tensorflow.contrib.distributions.TransformedDistribution._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.TransformedDistribution._survival_function(self,y)
tensorflow.contrib.distributions.TransformedDistribution.bijector(self)
tensorflow.contrib.distributions.TransformedDistribution.distribution(self)
tensorflow.contrib.distributions._concat_vectors(*args)
tensorflow.contrib.distributions._is_scalar_from_shape(shape)
tensorflow.contrib.distributions._logical_and(*args)
tensorflow.contrib.distributions._logical_equal(x,y)
tensorflow.contrib.distributions._logical_not(x)
tensorflow.contrib.distributions._ndims_from_shape(shape)
tensorflow.contrib.distributions._ones_like(x)
tensorflow.contrib.distributions._pick_scalar_condition(pred,cond_true,cond_false)
tensorflow.contrib.distributions._static_value(x)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution(self,distribution,bijector=None,batch_shape=None,event_shape=None,validate_args=False,name=None)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution.__init__(self,distribution,bijector=None,batch_shape=None,event_shape=None,validate_args=False,name=None)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution._batch_shape(self)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution._cdf(self,y)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution._entropy(self)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution._event_shape(self)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution._log_cdf(self,y)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution._log_prob(self,y)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution._log_survival_function(self,y)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution._maybe_rotate_dims(self,x,rotate_right=False)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution._maybe_validate_shape_override(self,override_shape,base_is_scalar,validate_args,name)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution._prob(self,y)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution._survival_function(self,y)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution.bijector(self)
tensorflow.contrib.distributions.python.ops.transformed_distribution.TransformedDistribution.distribution(self)
tensorflow.contrib.distributions.python.ops.transformed_distribution._concat_vectors(*args)
tensorflow.contrib.distributions.python.ops.transformed_distribution._is_scalar_from_shape(shape)
tensorflow.contrib.distributions.python.ops.transformed_distribution._logical_and(*args)
tensorflow.contrib.distributions.python.ops.transformed_distribution._logical_equal(x,y)
tensorflow.contrib.distributions.python.ops.transformed_distribution._logical_not(x)
tensorflow.contrib.distributions.python.ops.transformed_distribution._ndims_from_shape(shape)
tensorflow.contrib.distributions.python.ops.transformed_distribution._ones_like(x)
tensorflow.contrib.distributions.python.ops.transformed_distribution._pick_scalar_condition(pred,cond_true,cond_false)
tensorflow.contrib.distributions.python.ops.transformed_distribution._static_value(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/quantized_distribution.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.low->tensorflow.python.framework.ops.convert_to_tensor(low, name='low')
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.high->tensorflow.python.framework.ops.convert_to_tensor(high, name='high')
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.self._low->self._check_integer(low)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.self._high->self._check_integer(high)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.n->tensorflow.python.framework.ops.convert_to_tensor(n, name='n')
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.x_samps->self.distribution.sample(n, seed=seed)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.ones->tensorflow.python.ops.array_ops.ones_like(x_samps)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.result_so_far->tensorflow.python.ops.array_ops.where(j >= high, array_ops.zeros_like(result_so_far), result_so_far)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.y->self._check_integer(y)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.logsf_y->self.log_survival_function(y)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.logsf_y_minus_1->self.log_survival_function(y - 1)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.logcdf_y->self.log_cdf(y)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.logcdf_y_minus_1->self.log_cdf(y - 1)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.big->tensorflow.python.ops.array_ops.where(logsf_y < logcdf_y, logsf_y_minus_1, logcdf_y)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.small->tensorflow.python.ops.array_ops.where(logsf_y < logcdf_y, logsf_y, logcdf_y_minus_1)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.sf_y->self.survival_function(y)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.sf_y_minus_1->self.survival_function(y - 1)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.cdf_y->self.cdf(y)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.cdf_y_minus_1->self.cdf(y - 1)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.j->tensorflow.python.ops.math_ops.ceil(y)
A:tensorflow.contrib.distributions.python.ops.quantized_distribution.value->tensorflow.python.framework.ops.convert_to_tensor(value, name='value')
tensorflow.contrib.distributions.QuantizedDistribution(self,distribution,low=None,high=None,validate_args=False,name='QuantizedDistribution')
tensorflow.contrib.distributions.QuantizedDistribution._batch_shape(self)
tensorflow.contrib.distributions.QuantizedDistribution._batch_shape_tensor(self)
tensorflow.contrib.distributions.QuantizedDistribution._cdf(self,y)
tensorflow.contrib.distributions.QuantizedDistribution._check_integer(self,value)
tensorflow.contrib.distributions.QuantizedDistribution._event_shape(self)
tensorflow.contrib.distributions.QuantizedDistribution._event_shape_tensor(self)
tensorflow.contrib.distributions.QuantizedDistribution._log_cdf(self,y)
tensorflow.contrib.distributions.QuantizedDistribution._log_prob(self,y)
tensorflow.contrib.distributions.QuantizedDistribution._log_prob_with_logcdf(self,y)
tensorflow.contrib.distributions.QuantizedDistribution._log_prob_with_logsf_and_logcdf(self,y)
tensorflow.contrib.distributions.QuantizedDistribution._log_survival_function(self,y)
tensorflow.contrib.distributions.QuantizedDistribution._prob(self,y)
tensorflow.contrib.distributions.QuantizedDistribution._prob_with_cdf(self,y)
tensorflow.contrib.distributions.QuantizedDistribution._prob_with_sf_and_cdf(self,y)
tensorflow.contrib.distributions.QuantizedDistribution._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.QuantizedDistribution._survival_function(self,y)
tensorflow.contrib.distributions.QuantizedDistribution.distribution(self)
tensorflow.contrib.distributions._logsum_expbig_minus_expsmall(big,small)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution(self,distribution,low=None,high=None,validate_args=False,name='QuantizedDistribution')
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution.__init__(self,distribution,low=None,high=None,validate_args=False,name='QuantizedDistribution')
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._batch_shape(self)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._cdf(self,y)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._check_integer(self,value)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._event_shape(self)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._log_cdf(self,y)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._log_prob(self,y)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._log_prob_with_logcdf(self,y)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._log_prob_with_logsf_and_logcdf(self,y)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._log_survival_function(self,y)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._prob(self,y)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._prob_with_cdf(self,y)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._prob_with_sf_and_cdf(self,y)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution._survival_function(self,y)
tensorflow.contrib.distributions.python.ops.quantized_distribution.QuantizedDistribution.distribution(self)
tensorflow.contrib.distributions.python.ops.quantized_distribution._logsum_expbig_minus_expsmall(big,small)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/conditional_transformed_distribution.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.conditional_transformed_distribution.sample_shape->_concat_vectors(distribution_util.pick_vector(self._needs_rotation, self._empty, [n]), self._override_batch_shape, self._override_event_shape, distribution_util.pick_vector(self._needs_rotation, [n], self._empty))
A:tensorflow.contrib.distributions.python.ops.conditional_transformed_distribution.x->self.bijector.inverse(y, **bijector_kwargs)
A:tensorflow.contrib.distributions.python.ops.conditional_transformed_distribution.ildj->self.bijector.inverse_log_det_jacobian(y, **bijector_kwargs)
A:tensorflow.contrib.distributions.python.ops.conditional_transformed_distribution.log_prob->tensorflow.python.ops.math_ops.reduce_sum(log_prob, self._reduce_event_indices)
A:tensorflow.contrib.distributions.python.ops.conditional_transformed_distribution.prob->tensorflow.python.ops.math_ops.reduce_prod(prob, self._reduce_event_indices)
tensorflow.contrib.distributions.ConditionalTransformedDistribution(conditional_distribution.ConditionalDistribution,transformed_distribution.TransformedDistribution)
tensorflow.contrib.distributions.ConditionalTransformedDistribution._cdf(self,y,bijector_kwargs=None,distribution_kwargs=None)
tensorflow.contrib.distributions.ConditionalTransformedDistribution._log_cdf(self,y,bijector_kwargs=None,distribution_kwargs=None)
tensorflow.contrib.distributions.ConditionalTransformedDistribution._log_prob(self,y,bijector_kwargs=None,distribution_kwargs=None)
tensorflow.contrib.distributions.ConditionalTransformedDistribution._log_survival_function(self,y,bijector_kwargs=None,distribution_kwargs=None)
tensorflow.contrib.distributions.ConditionalTransformedDistribution._prob(self,y,bijector_kwargs=None,distribution_kwargs=None)
tensorflow.contrib.distributions.ConditionalTransformedDistribution._sample_n(self,n,seed=None,bijector_kwargs=None,distribution_kwargs=None)
tensorflow.contrib.distributions.ConditionalTransformedDistribution._survival_function(self,y,bijector_kwargs=None,distribution_kwargs=None)
tensorflow.contrib.distributions.python.ops.conditional_transformed_distribution.ConditionalTransformedDistribution(conditional_distribution.ConditionalDistribution,transformed_distribution.TransformedDistribution)
tensorflow.contrib.distributions.python.ops.conditional_transformed_distribution.ConditionalTransformedDistribution._cdf(self,y,bijector_kwargs=None,distribution_kwargs=None)
tensorflow.contrib.distributions.python.ops.conditional_transformed_distribution.ConditionalTransformedDistribution._log_cdf(self,y,bijector_kwargs=None,distribution_kwargs=None)
tensorflow.contrib.distributions.python.ops.conditional_transformed_distribution.ConditionalTransformedDistribution._log_prob(self,y,bijector_kwargs=None,distribution_kwargs=None)
tensorflow.contrib.distributions.python.ops.conditional_transformed_distribution.ConditionalTransformedDistribution._log_survival_function(self,y,bijector_kwargs=None,distribution_kwargs=None)
tensorflow.contrib.distributions.python.ops.conditional_transformed_distribution.ConditionalTransformedDistribution._prob(self,y,bijector_kwargs=None,distribution_kwargs=None)
tensorflow.contrib.distributions.python.ops.conditional_transformed_distribution.ConditionalTransformedDistribution._sample_n(self,n,seed=None,bijector_kwargs=None,distribution_kwargs=None)
tensorflow.contrib.distributions.python.ops.conditional_transformed_distribution.ConditionalTransformedDistribution._survival_function(self,y,bijector_kwargs=None,distribution_kwargs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/poisson.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.poisson.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.poisson.self._rate->tensorflow.python.ops.array_ops.identity(rate, name='rate')
A:tensorflow.contrib.distributions.python.ops.poisson.x->tensorflow.contrib.distributions.python.ops.distribution_util.embed_check_nonnegative_discrete(x, check_integer=True)
tensorflow.contrib.distributions.Poisson(self,rate,validate_args=False,allow_nan_stats=True,name='Poisson')
tensorflow.contrib.distributions.Poisson._batch_shape(self)
tensorflow.contrib.distributions.Poisson._batch_shape_tensor(self)
tensorflow.contrib.distributions.Poisson._cdf(self,x)
tensorflow.contrib.distributions.Poisson._event_shape(self)
tensorflow.contrib.distributions.Poisson._event_shape_tensor(self)
tensorflow.contrib.distributions.Poisson._log_cdf(self,x)
tensorflow.contrib.distributions.Poisson._log_normalization(self)
tensorflow.contrib.distributions.Poisson._log_prob(self,x)
tensorflow.contrib.distributions.Poisson._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.Poisson._mean(self)
tensorflow.contrib.distributions.Poisson._mode(self)
tensorflow.contrib.distributions.Poisson._prob(self,x)
tensorflow.contrib.distributions.Poisson._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.Poisson._variance(self)
tensorflow.contrib.distributions.Poisson.rate(self)
tensorflow.contrib.distributions.python.ops.poisson.Poisson(self,rate,validate_args=False,allow_nan_stats=True,name='Poisson')
tensorflow.contrib.distributions.python.ops.poisson.Poisson.__init__(self,rate,validate_args=False,allow_nan_stats=True,name='Poisson')
tensorflow.contrib.distributions.python.ops.poisson.Poisson._batch_shape(self)
tensorflow.contrib.distributions.python.ops.poisson.Poisson._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.poisson.Poisson._cdf(self,x)
tensorflow.contrib.distributions.python.ops.poisson.Poisson._event_shape(self)
tensorflow.contrib.distributions.python.ops.poisson.Poisson._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.poisson.Poisson._log_cdf(self,x)
tensorflow.contrib.distributions.python.ops.poisson.Poisson._log_normalization(self)
tensorflow.contrib.distributions.python.ops.poisson.Poisson._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.poisson.Poisson._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.python.ops.poisson.Poisson._mean(self)
tensorflow.contrib.distributions.python.ops.poisson.Poisson._mode(self)
tensorflow.contrib.distributions.python.ops.poisson.Poisson._prob(self,x)
tensorflow.contrib.distributions.python.ops.poisson.Poisson._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.poisson.Poisson._variance(self)
tensorflow.contrib.distributions.python.ops.poisson.Poisson.rate(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/multinomial.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.multinomial.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.multinomial.self._total_count->self._maybe_assert_valid_total_count(ops.convert_to_tensor(total_count, name='total_count'), validate_args)
A:tensorflow.contrib.distributions.python.ops.multinomial.(self._logits, self._probs)->tensorflow.contrib.distributions.python.ops.distribution_util.get_logits_and_probs(logits=logits, probs=probs, multidimensional=True, validate_args=validate_args, name=name)
A:tensorflow.contrib.distributions.python.ops.multinomial.n_draws->tensorflow.python.ops.control_flow_ops.with_dependencies([is_scalar], n_draws)
A:tensorflow.contrib.distributions.python.ops.multinomial.is_scalar->tensorflow.python.ops.check_ops.assert_rank(n_draws, 0, message='Sample only supported for scalar number of draws.')
A:tensorflow.contrib.distributions.python.ops.multinomial.draws->tensorflow.python.ops.array_ops.reshape(draws, shape=[-1, n, n_draws])
A:tensorflow.contrib.distributions.python.ops.multinomial.x->tensorflow.python.ops.array_ops.transpose(x, perm=[1, 0, 2])
A:tensorflow.contrib.distributions.python.ops.multinomial.final_shape->tensorflow.python.ops.array_ops.concat([[n], self.batch_shape_tensor(), [k]], 0)
A:tensorflow.contrib.distributions.python.ops.multinomial.counts->tensorflow.contrib.distributions.python.ops.distribution_util.embed_check_nonnegative_discrete(counts, check_integer=True)
tensorflow.contrib.distributions.Multinomial(self,total_count,logits=None,probs=None,validate_args=False,allow_nan_stats=True,name='Multinomial')
tensorflow.contrib.distributions.Multinomial._batch_shape(self)
tensorflow.contrib.distributions.Multinomial._batch_shape_tensor(self)
tensorflow.contrib.distributions.Multinomial._covariance(self)
tensorflow.contrib.distributions.Multinomial._event_shape(self)
tensorflow.contrib.distributions.Multinomial._event_shape_tensor(self)
tensorflow.contrib.distributions.Multinomial._log_normalization(self,counts)
tensorflow.contrib.distributions.Multinomial._log_prob(self,counts)
tensorflow.contrib.distributions.Multinomial._log_unnormalized_prob(self,counts)
tensorflow.contrib.distributions.Multinomial._maybe_assert_valid_sample(self,counts)
tensorflow.contrib.distributions.Multinomial._maybe_assert_valid_total_count(self,total_count,validate_args)
tensorflow.contrib.distributions.Multinomial._mean(self)
tensorflow.contrib.distributions.Multinomial._prob(self,counts)
tensorflow.contrib.distributions.Multinomial._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.Multinomial._variance(self)
tensorflow.contrib.distributions.Multinomial.logits(self)
tensorflow.contrib.distributions.Multinomial.probs(self)
tensorflow.contrib.distributions.Multinomial.total_count(self)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial(self,total_count,logits=None,probs=None,validate_args=False,allow_nan_stats=True,name='Multinomial')
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial.__init__(self,total_count,logits=None,probs=None,validate_args=False,allow_nan_stats=True,name='Multinomial')
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial._batch_shape(self)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial._covariance(self)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial._event_shape(self)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial._log_normalization(self,counts)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial._log_prob(self,counts)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial._log_unnormalized_prob(self,counts)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial._maybe_assert_valid_sample(self,counts)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial._maybe_assert_valid_total_count(self,total_count,validate_args)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial._mean(self)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial._prob(self,counts)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial._variance(self)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial.logits(self)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial.probs(self)
tensorflow.contrib.distributions.python.ops.multinomial.Multinomial.total_count(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/wishart.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.wishart.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.wishart.self._df->tensorflow.python.ops.control_flow_ops.with_dependencies([assertions], self._df)
A:tensorflow.contrib.distributions.python.ops.wishart.self._dimension->tensorflow.python.framework.ops.convert_to_tensor(self._scale_operator_pd.get_shape()[-1].value, dtype=self._scale_operator_pd.dtype, name='dimension')
A:tensorflow.contrib.distributions.python.ops.wishart.df_val->numpy.asarray(df_val)
A:tensorflow.contrib.distributions.python.ops.wishart.dim_val->tensorflow.python.framework.tensor_util.constant_value(self._dimension)
A:tensorflow.contrib.distributions.python.ops.wishart.assertions->tensorflow.python.ops.check_ops.assert_less_equal(self._dimension, self._df, message='Degrees of freedom (df = %s) cannot be less than dimension of scale matrix (scale.dimension = %s)' % (self._dimension, self._df))
A:tensorflow.contrib.distributions.python.ops.wishart.s->tensorflow.python.ops.array_ops.where(math_ops.less(s, 0.0), constant_op.constant(float('NaN'), dtype=self.dtype, name='nan'), s)
A:tensorflow.contrib.distributions.python.ops.wishart.batch_shape->self.batch_shape_tensor()
A:tensorflow.contrib.distributions.python.ops.wishart.event_shape->self.event_shape_tensor()
A:tensorflow.contrib.distributions.python.ops.wishart.shape->tensorflow.python.ops.array_ops.concat([batch_shape, event_shape, sample_shape], 0)
A:tensorflow.contrib.distributions.python.ops.wishart.x->tensorflow.python.ops.math_ops.matmul(x, x, adjoint_b=True)
A:tensorflow.contrib.distributions.python.ops.wishart.g->tensorflow.python.ops.random_ops.random_gamma(shape=[n], alpha=self._multi_gamma_sequence(0.5 * self.df, self.dimension), beta=0.5, dtype=self.dtype, seed=distribution_util.gen_new_seed(seed, 'wishart'))
A:tensorflow.contrib.distributions.python.ops.wishart.perm->tensorflow.python.ops.array_ops.concat([math_ops.range(ndims - sample_ndims, ndims), math_ops.range(0, ndims - sample_ndims)], 0)
A:tensorflow.contrib.distributions.python.ops.wishart.x_sqrt->tensorflow.python.ops.linalg_ops.cholesky(x)
A:tensorflow.contrib.distributions.python.ops.wishart.ndims->tensorflow.python.ops.array_ops.rank(x_sqrt)
A:tensorflow.contrib.distributions.python.ops.wishart.sample_shape->tensorflow.python.ops.array_ops.strided_slice(array_ops.shape(x_sqrt), [0], [sample_ndims])
A:tensorflow.contrib.distributions.python.ops.wishart.scale_sqrt_inv_x_sqrt->tensorflow.python.ops.array_ops.transpose(scale_sqrt_inv_x_sqrt, perm)
A:tensorflow.contrib.distributions.python.ops.wishart.trace_scale_inv_x->tensorflow.python.ops.math_ops.reduce_sum(math_ops.square(scale_sqrt_inv_x_sqrt), axis=[-2, -1])
A:tensorflow.contrib.distributions.python.ops.wishart.half_log_det_x->tensorflow.python.ops.math_ops.reduce_sum(math_ops.log(array_ops.matrix_diag_part(x_sqrt)), axis=[-1])
A:tensorflow.contrib.distributions.python.ops.wishart.d->tensorflow.python.ops.array_ops.expand_dims(array_ops.matrix_diag_part(x), -1)
A:tensorflow.contrib.distributions.python.ops.wishart.seq->self._multi_gamma_sequence(a, p)
tensorflow.contrib.distributions.WishartCholesky(self,df,scale,cholesky_input_output_matrices=False,validate_args=False,allow_nan_stats=True,name='WishartCholesky')
tensorflow.contrib.distributions.WishartFull(self,df,scale,cholesky_input_output_matrices=False,validate_args=False,allow_nan_stats=True,name='WishartFull')
tensorflow.contrib.distributions._WishartOperatorPD(self,df,scale_operator_pd,cholesky_input_output_matrices=False,validate_args=False,allow_nan_stats=True,name=None)
tensorflow.contrib.distributions._WishartOperatorPD._batch_shape(self)
tensorflow.contrib.distributions._WishartOperatorPD._batch_shape_tensor(self)
tensorflow.contrib.distributions._WishartOperatorPD._entropy(self)
tensorflow.contrib.distributions._WishartOperatorPD._event_shape(self)
tensorflow.contrib.distributions._WishartOperatorPD._event_shape_tensor(self)
tensorflow.contrib.distributions._WishartOperatorPD._log_prob(self,x)
tensorflow.contrib.distributions._WishartOperatorPD._mean(self)
tensorflow.contrib.distributions._WishartOperatorPD._mode(self)
tensorflow.contrib.distributions._WishartOperatorPD._multi_digamma(self,a,p,name='multi_digamma')
tensorflow.contrib.distributions._WishartOperatorPD._multi_gamma_sequence(self,a,p,name='multi_gamma_sequence')
tensorflow.contrib.distributions._WishartOperatorPD._multi_lgamma(self,a,p,name='multi_lgamma')
tensorflow.contrib.distributions._WishartOperatorPD._prob(self,x)
tensorflow.contrib.distributions._WishartOperatorPD._sample_n(self,n,seed)
tensorflow.contrib.distributions._WishartOperatorPD._stddev(self)
tensorflow.contrib.distributions._WishartOperatorPD._variance(self)
tensorflow.contrib.distributions._WishartOperatorPD.cholesky_input_output_matrices(self)
tensorflow.contrib.distributions._WishartOperatorPD.df(self)
tensorflow.contrib.distributions._WishartOperatorPD.dimension(self)
tensorflow.contrib.distributions._WishartOperatorPD.log_normalization(self,name='log_normalization')
tensorflow.contrib.distributions._WishartOperatorPD.mean_log_det(self,name='mean_log_det')
tensorflow.contrib.distributions._WishartOperatorPD.scale(self)
tensorflow.contrib.distributions._WishartOperatorPD.scale_operator_pd(self)
tensorflow.contrib.distributions.python.ops.wishart.WishartCholesky(self,df,scale,cholesky_input_output_matrices=False,validate_args=False,allow_nan_stats=True,name='WishartCholesky')
tensorflow.contrib.distributions.python.ops.wishart.WishartCholesky.__init__(self,df,scale,cholesky_input_output_matrices=False,validate_args=False,allow_nan_stats=True,name='WishartCholesky')
tensorflow.contrib.distributions.python.ops.wishart.WishartFull(self,df,scale,cholesky_input_output_matrices=False,validate_args=False,allow_nan_stats=True,name='WishartFull')
tensorflow.contrib.distributions.python.ops.wishart.WishartFull.__init__(self,df,scale,cholesky_input_output_matrices=False,validate_args=False,allow_nan_stats=True,name='WishartFull')
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD(self,df,scale_operator_pd,cholesky_input_output_matrices=False,validate_args=False,allow_nan_stats=True,name=None)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD.__init__(self,df,scale_operator_pd,cholesky_input_output_matrices=False,validate_args=False,allow_nan_stats=True,name=None)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD._batch_shape(self)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD._entropy(self)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD._event_shape(self)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD._mean(self)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD._mode(self)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD._multi_digamma(self,a,p,name='multi_digamma')
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD._multi_gamma_sequence(self,a,p,name='multi_gamma_sequence')
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD._multi_lgamma(self,a,p,name='multi_lgamma')
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD._prob(self,x)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD._sample_n(self,n,seed)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD._stddev(self)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD._variance(self)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD.cholesky_input_output_matrices(self)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD.df(self)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD.dimension(self)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD.log_normalization(self,name='log_normalization')
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD.mean_log_det(self,name='mean_log_det')
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD.scale(self)
tensorflow.contrib.distributions.python.ops.wishart._WishartOperatorPD.scale_operator_pd(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/mvn_diag_plus_low_rank.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.mvn_diag_plus_low_rank.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.mvn_diag_plus_low_rank.scale->tensorflow.contrib.linalg.LinearOperatorUDVHUpdate(scale, u=scale_perturb_factor, diag_update=scale_perturb_diag, is_diag_update_positive=scale_perturb_diag is None, is_non_singular=True, is_self_adjoint=True, is_positive_definite=True, is_square=True)
A:tensorflow.contrib.distributions.python.ops.mvn_diag_plus_low_rank.scale_perturb_factor->_convert_to_tensor(scale_perturb_factor, name='scale_perturb_factor')
A:tensorflow.contrib.distributions.python.ops.mvn_diag_plus_low_rank.scale_perturb_diag->_convert_to_tensor(scale_perturb_diag, name='scale_perturb_diag')
tensorflow.contrib.distributions.MultivariateNormalDiagPlusLowRank(self,loc=None,scale_diag=None,scale_identity_multiplier=None,scale_perturb_factor=None,scale_perturb_diag=None,validate_args=False,allow_nan_stats=True,name='MultivariateNormalDiagPlusLowRank')
tensorflow.contrib.distributions.python.ops.mvn_diag_plus_low_rank.MultivariateNormalDiagPlusLowRank(self,loc=None,scale_diag=None,scale_identity_multiplier=None,scale_perturb_factor=None,scale_perturb_diag=None,validate_args=False,allow_nan_stats=True,name='MultivariateNormalDiagPlusLowRank')
tensorflow.contrib.distributions.python.ops.mvn_diag_plus_low_rank.MultivariateNormalDiagPlusLowRank.__init__(self,loc=None,scale_diag=None,scale_identity_multiplier=None,scale_perturb_factor=None,scale_perturb_diag=None,validate_args=False,allow_nan_stats=True,name='MultivariateNormalDiagPlusLowRank')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/shape.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.shape.self._batch_ndims->self._assert_non_negative_int32_scalar(ops.convert_to_tensor(batch_ndims, name='batch_ndims'))
A:tensorflow.contrib.distributions.python.ops.shape.(self._batch_ndims_static, self._batch_ndims_is_0)->self._introspect_ndims(self._batch_ndims)
A:tensorflow.contrib.distributions.python.ops.shape.self._event_ndims->self._assert_non_negative_int32_scalar(ops.convert_to_tensor(event_ndims, name='event_ndims'))
A:tensorflow.contrib.distributions.python.ops.shape.(self._event_ndims_static, self._event_ndims_is_0)->self._introspect_ndims(self._event_ndims)
A:tensorflow.contrib.distributions.python.ops.shape.x->tensorflow.python.ops.control_flow_ops.with_dependencies([check_ops.assert_rank(x, 0), check_ops.assert_non_negative(x)], x)
A:tensorflow.contrib.distributions.python.ops.shape.ndims->tensorflow.python.framework.tensor_util.constant_value(ndims)
A:tensorflow.contrib.distributions.python.ops.shape.sample_ndims->self.get_sample_ndims(x, name=name)
A:tensorflow.contrib.distributions.python.ops.shape.start->sum((tensor_util.constant_value(s) for s in start_sum))
A:tensorflow.contrib.distributions.python.ops.shape.slice_->tensorflow.python.ops.control_flow_ops.with_dependencies([check_ops.assert_rank(x, 0), check_ops.assert_non_negative(x)], x).get_shape()[start:stop].as_list()
A:tensorflow.contrib.distributions.python.ops.shape.(sample_shape, batch_shape, event_shape)->self.get_shape(x)
A:tensorflow.contrib.distributions.python.ops.shape.event_shape->tensorflow.contrib.distributions.python.ops.distribution_util.pick_vector(self._event_ndims_is_0, [1], event_shape)
A:tensorflow.contrib.distributions.python.ops.shape.batch_shape->tensorflow.contrib.distributions.python.ops.distribution_util.pick_vector(self._batch_ndims_is_0, [1], batch_shape)
A:tensorflow.contrib.distributions.python.ops.shape.new_shape->tensorflow.python.ops.array_ops.concat([sample_shape, batch_shape, event_shape], 0)
A:tensorflow.contrib.distributions.python.ops.shape.sample_shape->tensorflow.python.framework.ops.convert_to_tensor(sample_shape, name='sample_shape')
A:tensorflow.contrib.distributions.python.ops.shape.(_, batch_shape, event_shape)->self.get_shape(x)
A:tensorflow.contrib.distributions.python.ops.shape.event_start->tensorflow.python.ops.array_ops.where(math_ops.logical_and(expand_batch_dim, self._batch_ndims_is_0), 2, 1 + self.batch_ndims)
A:tensorflow.contrib.distributions.python.ops.shape.x_value_static->tensorflow.python.framework.tensor_util.constant_value(x)
tensorflow.contrib.distributions.ops.shape._DistributionShape(self,batch_ndims=None,event_ndims=None,validate_args=False,name='DistributionShape')
tensorflow.contrib.distributions.ops.shape._DistributionShape._assert_non_negative_int32_scalar(self,x)
tensorflow.contrib.distributions.ops.shape._DistributionShape._introspect_ndims(self,ndims)
tensorflow.contrib.distributions.ops.shape._DistributionShape._is_all_constant_helper(self,*args)
tensorflow.contrib.distributions.ops.shape._DistributionShape._name_scope(self,name=None,values=None)
tensorflow.contrib.distributions.ops.shape._DistributionShape.batch_ndims(self)
tensorflow.contrib.distributions.ops.shape._DistributionShape.event_ndims(self)
tensorflow.contrib.distributions.ops.shape._DistributionShape.get_dims(self,x,name='get_dims')
tensorflow.contrib.distributions.ops.shape._DistributionShape.get_ndims(self,x,name='get_ndims')
tensorflow.contrib.distributions.ops.shape._DistributionShape.get_sample_ndims(self,x,name='get_sample_ndims')
tensorflow.contrib.distributions.ops.shape._DistributionShape.get_shape(self,x,name='get_shape')
tensorflow.contrib.distributions.ops.shape._DistributionShape.make_batch_of_event_sample_matrices(self,x,expand_batch_dim=True,name='make_batch_of_event_sample_matrices')
tensorflow.contrib.distributions.ops.shape._DistributionShape.name(self)
tensorflow.contrib.distributions.ops.shape._DistributionShape.undo_make_batch_of_event_sample_matrices(self,x,sample_shape,expand_batch_dim=True,name='undo_make_batch_of_event_sample_matrices')
tensorflow.contrib.distributions.ops.shape._DistributionShape.validate_args(self)
tensorflow.contrib.distributions.python.ops.shape._DistributionShape(self,batch_ndims=None,event_ndims=None,validate_args=False,name='DistributionShape')
tensorflow.contrib.distributions.python.ops.shape._DistributionShape.__init__(self,batch_ndims=None,event_ndims=None,validate_args=False,name='DistributionShape')
tensorflow.contrib.distributions.python.ops.shape._DistributionShape._assert_non_negative_int32_scalar(self,x)
tensorflow.contrib.distributions.python.ops.shape._DistributionShape._introspect_ndims(self,ndims)
tensorflow.contrib.distributions.python.ops.shape._DistributionShape._is_all_constant_helper(self,*args)
tensorflow.contrib.distributions.python.ops.shape._DistributionShape._name_scope(self,name=None,values=None)
tensorflow.contrib.distributions.python.ops.shape._DistributionShape.batch_ndims(self)
tensorflow.contrib.distributions.python.ops.shape._DistributionShape.event_ndims(self)
tensorflow.contrib.distributions.python.ops.shape._DistributionShape.get_dims(self,x,name='get_dims')
tensorflow.contrib.distributions.python.ops.shape._DistributionShape.get_ndims(self,x,name='get_ndims')
tensorflow.contrib.distributions.python.ops.shape._DistributionShape.get_sample_ndims(self,x,name='get_sample_ndims')
tensorflow.contrib.distributions.python.ops.shape._DistributionShape.get_shape(self,x,name='get_shape')
tensorflow.contrib.distributions.python.ops.shape._DistributionShape.make_batch_of_event_sample_matrices(self,x,expand_batch_dim=True,name='make_batch_of_event_sample_matrices')
tensorflow.contrib.distributions.python.ops.shape._DistributionShape.name(self)
tensorflow.contrib.distributions.python.ops.shape._DistributionShape.undo_make_batch_of_event_sample_matrices(self,x,sample_shape,expand_batch_dim=True,name='undo_make_batch_of_event_sample_matrices')
tensorflow.contrib.distributions.python.ops.shape._DistributionShape.validate_args(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/operator_pd.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.operator_pd.mat->tensorflow.python.framework.ops.convert_to_tensor(mat, name='mat')
A:tensorflow.contrib.distributions.python.ops.operator_pd.x->tensorflow.python.framework.ops.convert_to_tensor(x, name='x')
A:tensorflow.contrib.distributions.python.ops.operator_pd.x_matrix->flip_vector_to_matrix(x, self.batch_shape(), self.get_batch_shape())
A:tensorflow.contrib.distributions.python.ops.operator_pd.soln_matrix->self.solve(x_matrix)
A:tensorflow.contrib.distributions.python.ops.operator_pd.soln->flip_matrix_to_vector(soln_matrix, extract_batch_shape(x, 1), x.get_shape()[:-1])
A:tensorflow.contrib.distributions.python.ops.operator_pd.result->tensorflow.python.ops.math_ops.reduce_sum(x * soln, reduction_indices=[-1])
A:tensorflow.contrib.distributions.python.ops.operator_pd.rhs->tensorflow.python.framework.ops.convert_to_tensor(rhs, name='rhs')
A:tensorflow.contrib.distributions.python.ops.operator_pd.final_shape->tensorflow.python.ops.array_ops.concat((batch_shape, [k]), 0)
A:tensorflow.contrib.distributions.python.ops.operator_pd.mat_with_end_at_beginning->tensorflow.python.ops.array_ops.transpose(mat, perm=perm)
A:tensorflow.contrib.distributions.python.ops.operator_pd.vector->tensorflow.python.ops.array_ops.reshape(mat_with_end_at_beginning, final_shape)
A:tensorflow.contrib.distributions.python.ops.operator_pd.mat_rank->tensorflow.python.ops.array_ops.rank(mat)
A:tensorflow.contrib.distributions.python.ops.operator_pd.k->tensorflow.python.ops.array_ops.gather(vec_shape, vec_rank - 1)
A:tensorflow.contrib.distributions.python.ops.operator_pd.perm->tensorflow.python.ops.array_ops.concat((math_ops.range(m, vec_rank), math_ops.range(0, m)), 0)
A:tensorflow.contrib.distributions.python.ops.operator_pd.vec->tensorflow.python.framework.ops.convert_to_tensor(vec, name='vec')
A:tensorflow.contrib.distributions.python.ops.operator_pd.batch_rank->tensorflow.python.ops.array_ops.size(batch_shape)
A:tensorflow.contrib.distributions.python.ops.operator_pd.vec_shape->tensorflow.python.framework.ops.convert_to_tensor(vec, name='vec').get_shape()
A:tensorflow.contrib.distributions.python.ops.operator_pd.vec_rank->len(vec_shape)
A:tensorflow.contrib.distributions.python.ops.operator_pd.vec_shape_left->tensorflow.python.ops.array_ops.strided_slice(vec_shape, [0], [m])
A:tensorflow.contrib.distributions.python.ops.operator_pd.new_shape->batch_shape.concatenate(k).concatenate(condensed_shape)
A:tensorflow.contrib.distributions.python.ops.operator_pd.x_flipped->tensorflow.python.ops.array_ops.expand_dims(vec, -1)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase(object)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._add_to_tensor(self,mat)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._batch_log_det(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._batch_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._batch_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._batch_sqrt_log_abs_det(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._batch_sqrt_log_det(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._batch_sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._batch_sqrt_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._det(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._dispatch_based_on_batch(self,batch_method,singleton_method,**args)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._inv_quadratic_form_on_vectors(self,x)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._iqfov_via_solve(self,x)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._iqfov_via_sqrt_solve(self,x)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._log_det(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._shape(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._sqrt_log_abs_det(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._sqrt_log_det(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._sqrt_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._sqrt_to_dense(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase._to_dense(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.add_to_tensor(self,mat,name='add_to_tensor')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.batch_shape(self,name='batch_shape')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.det(self,name='det')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.dtype(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.get_batch_shape(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.get_shape(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.get_vector_shape(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.inputs(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.inv_quadratic_form_on_vectors(self,x,name='inv_quadratic_form_on_vectors')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.log_det(self,name='log_det')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.matmul(self,x,transpose_x=False,name='matmul')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.name(self)
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.rank(self,name='rank')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.shape(self,name='shape')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.solve(self,rhs,name='solve')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.sqrt_log_abs_det(self,name='sqrt_log_det')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.sqrt_log_det(self,name='sqrt_log_det')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.sqrt_matmul(self,x,transpose_x=False,name='sqrt_matmul')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.sqrt_solve(self,rhs,name='sqrt_solve')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.sqrt_to_dense(self,name='sqrt_to_dense')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.to_dense(self,name='to_dense')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.vector_shape(self,name='vector_shape')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.vector_space_dimension(self,name='vector_space_dimension')
tensorflow.contrib.distributions.ops.operator_pd.OperatorPDBase.verify_pd(self)
tensorflow.contrib.distributions.ops.operator_pd._flip_matrix_to_vector_dynamic(mat,batch_shape)
tensorflow.contrib.distributions.ops.operator_pd._flip_matrix_to_vector_static(mat,static_batch_shape)
tensorflow.contrib.distributions.ops.operator_pd._flip_vector_to_matrix_dynamic(vec,batch_shape)
tensorflow.contrib.distributions.ops.operator_pd._flip_vector_to_matrix_static(vec,batch_shape)
tensorflow.contrib.distributions.ops.operator_pd.extract_batch_shape(x,num_event_dims,name='extract_batch_shape')
tensorflow.contrib.distributions.ops.operator_pd.flip_matrix_to_vector(mat,batch_shape,static_batch_shape)
tensorflow.contrib.distributions.ops.operator_pd.flip_vector_to_matrix(vec,batch_shape,static_batch_shape)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase(object)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._add_to_tensor(self,mat)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._batch_log_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._batch_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._batch_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._batch_sqrt_log_abs_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._batch_sqrt_log_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._batch_sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._batch_sqrt_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._det(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._dispatch_based_on_batch(self,batch_method,singleton_method,**args)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._inv_quadratic_form_on_vectors(self,x)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._iqfov_via_solve(self,x)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._iqfov_via_sqrt_solve(self,x)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._log_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._shape(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._sqrt_log_abs_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._sqrt_log_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._sqrt_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._sqrt_to_dense(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase._to_dense(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.add_to_tensor(self,mat,name='add_to_tensor')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.batch_shape(self,name='batch_shape')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.det(self,name='det')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.dtype(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.get_batch_shape(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.get_shape(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.get_vector_shape(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.inputs(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.inv_quadratic_form_on_vectors(self,x,name='inv_quadratic_form_on_vectors')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.log_det(self,name='log_det')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.matmul(self,x,transpose_x=False,name='matmul')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.name(self)
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.rank(self,name='rank')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.shape(self,name='shape')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.solve(self,rhs,name='solve')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.sqrt_log_abs_det(self,name='sqrt_log_det')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.sqrt_log_det(self,name='sqrt_log_det')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.sqrt_matmul(self,x,transpose_x=False,name='sqrt_matmul')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.sqrt_solve(self,rhs,name='sqrt_solve')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.sqrt_to_dense(self,name='sqrt_to_dense')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.to_dense(self,name='to_dense')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.vector_shape(self,name='vector_shape')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.vector_space_dimension(self,name='vector_space_dimension')
tensorflow.contrib.distributions.python.ops.operator_pd.OperatorPDBase.verify_pd(self)
tensorflow.contrib.distributions.python.ops.operator_pd._flip_matrix_to_vector_dynamic(mat,batch_shape)
tensorflow.contrib.distributions.python.ops.operator_pd._flip_matrix_to_vector_static(mat,static_batch_shape)
tensorflow.contrib.distributions.python.ops.operator_pd._flip_vector_to_matrix_dynamic(vec,batch_shape)
tensorflow.contrib.distributions.python.ops.operator_pd._flip_vector_to_matrix_static(vec,batch_shape)
tensorflow.contrib.distributions.python.ops.operator_pd.extract_batch_shape(x,num_event_dims,name='extract_batch_shape')
tensorflow.contrib.distributions.python.ops.operator_pd.flip_matrix_to_vector(mat,batch_shape,static_batch_shape)
tensorflow.contrib.distributions.python.ops.operator_pd.flip_vector_to_matrix(vec,batch_shape,static_batch_shape)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/laplace.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.laplace.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.laplace.self._loc->tensorflow.python.ops.array_ops.identity(loc, name='loc')
A:tensorflow.contrib.distributions.python.ops.laplace.self._scale->tensorflow.python.ops.array_ops.identity(scale, name='scale')
A:tensorflow.contrib.distributions.python.ops.laplace.shape->tensorflow.python.ops.array_ops.concat([[n], self.batch_shape_tensor()], 0)
A:tensorflow.contrib.distributions.python.ops.laplace.uniform_samples->tensorflow.python.ops.random_ops.random_uniform(shape=shape, minval=np.nextafter(self.dtype.as_numpy_dtype(-1.0), self.dtype.as_numpy_dtype(0.0)), maxval=1.0, dtype=self.dtype, seed=seed)
A:tensorflow.contrib.distributions.python.ops.laplace.z->self._z(x)
tensorflow.contrib.distributions.Laplace(self,loc,scale,validate_args=False,allow_nan_stats=True,name='Laplace')
tensorflow.contrib.distributions.Laplace._batch_shape(self)
tensorflow.contrib.distributions.Laplace._batch_shape_tensor(self)
tensorflow.contrib.distributions.Laplace._cdf(self,x)
tensorflow.contrib.distributions.Laplace._entropy(self)
tensorflow.contrib.distributions.Laplace._event_shape(self)
tensorflow.contrib.distributions.Laplace._event_shape_tensor(self)
tensorflow.contrib.distributions.Laplace._log_cdf(self,x)
tensorflow.contrib.distributions.Laplace._log_normalization(self)
tensorflow.contrib.distributions.Laplace._log_prob(self,x)
tensorflow.contrib.distributions.Laplace._log_survival_function(self,x)
tensorflow.contrib.distributions.Laplace._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.Laplace._mean(self)
tensorflow.contrib.distributions.Laplace._median(self)
tensorflow.contrib.distributions.Laplace._mode(self)
tensorflow.contrib.distributions.Laplace._param_shapes(sample_shape)
tensorflow.contrib.distributions.Laplace._prob(self,x)
tensorflow.contrib.distributions.Laplace._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.Laplace._stddev(self)
tensorflow.contrib.distributions.Laplace._z(self,x)
tensorflow.contrib.distributions.Laplace.loc(self)
tensorflow.contrib.distributions.Laplace.scale(self)
tensorflow.contrib.distributions.LaplaceWithSoftplusScale(self,loc,scale,validate_args=False,allow_nan_stats=True,name='LaplaceWithSoftplusScale')
tensorflow.contrib.distributions.python.ops.laplace.Laplace(self,loc,scale,validate_args=False,allow_nan_stats=True,name='Laplace')
tensorflow.contrib.distributions.python.ops.laplace.Laplace.__init__(self,loc,scale,validate_args=False,allow_nan_stats=True,name='Laplace')
tensorflow.contrib.distributions.python.ops.laplace.Laplace._batch_shape(self)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._cdf(self,x)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._entropy(self)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._event_shape(self)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._log_cdf(self,x)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._log_normalization(self)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._log_survival_function(self,x)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._mean(self)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._median(self)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._mode(self)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._param_shapes(sample_shape)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._prob(self,x)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._stddev(self)
tensorflow.contrib.distributions.python.ops.laplace.Laplace._z(self,x)
tensorflow.contrib.distributions.python.ops.laplace.Laplace.loc(self)
tensorflow.contrib.distributions.python.ops.laplace.Laplace.scale(self)
tensorflow.contrib.distributions.python.ops.laplace.LaplaceWithSoftplusScale(self,loc,scale,validate_args=False,allow_nan_stats=True,name='LaplaceWithSoftplusScale')
tensorflow.contrib.distributions.python.ops.laplace.LaplaceWithSoftplusScale.__init__(self,loc,scale,validate_args=False,allow_nan_stats=True,name='LaplaceWithSoftplusScale')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/binomial.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.binomial.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.binomial.self._total_count->self._maybe_assert_valid_total_count(ops.convert_to_tensor(total_count, name='total_count'), validate_args)
A:tensorflow.contrib.distributions.python.ops.binomial.(self._logits, self._probs)->tensorflow.contrib.distributions.python.ops.distribution_util.get_logits_and_probs(logits=logits, probs=probs, validate_args=validate_args, name=name)
A:tensorflow.contrib.distributions.python.ops.binomial.counts->tensorflow.contrib.distributions.python.ops.distribution_util.embed_check_nonnegative_discrete(counts, check_integer=check_integer)
tensorflow.contrib.distributions.Binomial(self,total_count,logits=None,probs=None,validate_args=False,allow_nan_stats=True,name='Binomial')
tensorflow.contrib.distributions.Binomial._batch_shape(self)
tensorflow.contrib.distributions.Binomial._batch_shape_tensor(self)
tensorflow.contrib.distributions.Binomial._event_shape(self)
tensorflow.contrib.distributions.Binomial._event_shape_tensor(self)
tensorflow.contrib.distributions.Binomial._log_normalization(self,counts)
tensorflow.contrib.distributions.Binomial._log_prob(self,counts)
tensorflow.contrib.distributions.Binomial._log_unnormalized_prob(self,counts)
tensorflow.contrib.distributions.Binomial._maybe_assert_valid_sample(self,counts,check_integer=True)
tensorflow.contrib.distributions.Binomial._maybe_assert_valid_total_count(self,total_count,validate_args)
tensorflow.contrib.distributions.Binomial._mean(self)
tensorflow.contrib.distributions.Binomial._mode(self)
tensorflow.contrib.distributions.Binomial._prob(self,counts)
tensorflow.contrib.distributions.Binomial._variance(self)
tensorflow.contrib.distributions.Binomial.logits(self)
tensorflow.contrib.distributions.Binomial.probs(self)
tensorflow.contrib.distributions.Binomial.total_count(self)
tensorflow.contrib.distributions.python.ops.binomial.Binomial(self,total_count,logits=None,probs=None,validate_args=False,allow_nan_stats=True,name='Binomial')
tensorflow.contrib.distributions.python.ops.binomial.Binomial.__init__(self,total_count,logits=None,probs=None,validate_args=False,allow_nan_stats=True,name='Binomial')
tensorflow.contrib.distributions.python.ops.binomial.Binomial._batch_shape(self)
tensorflow.contrib.distributions.python.ops.binomial.Binomial._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.binomial.Binomial._event_shape(self)
tensorflow.contrib.distributions.python.ops.binomial.Binomial._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.binomial.Binomial._log_normalization(self,counts)
tensorflow.contrib.distributions.python.ops.binomial.Binomial._log_prob(self,counts)
tensorflow.contrib.distributions.python.ops.binomial.Binomial._log_unnormalized_prob(self,counts)
tensorflow.contrib.distributions.python.ops.binomial.Binomial._maybe_assert_valid_sample(self,counts,check_integer=True)
tensorflow.contrib.distributions.python.ops.binomial.Binomial._maybe_assert_valid_total_count(self,total_count,validate_args)
tensorflow.contrib.distributions.python.ops.binomial.Binomial._mean(self)
tensorflow.contrib.distributions.python.ops.binomial.Binomial._mode(self)
tensorflow.contrib.distributions.python.ops.binomial.Binomial._prob(self,counts)
tensorflow.contrib.distributions.python.ops.binomial.Binomial._variance(self)
tensorflow.contrib.distributions.python.ops.binomial.Binomial.logits(self)
tensorflow.contrib.distributions.python.ops.binomial.Binomial.probs(self)
tensorflow.contrib.distributions.python.ops.binomial.Binomial.total_count(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/dirichlet_multinomial.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.self._total_count->self._maybe_assert_valid_total_count(ops.convert_to_tensor(total_count, name='total_count'), validate_args)
A:tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.self._concentration->self._maybe_assert_valid_concentration(ops.convert_to_tensor(concentration, name='concentration'), validate_args)
A:tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.self._total_concentration->tensorflow.python.ops.math_ops.reduce_sum(self._concentration, -1)
A:tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.n_draws->tensorflow.python.ops.math_ops.cast(self.total_count, dtype=dtypes.int32)
A:tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.unnormalized_logits->tensorflow.python.ops.array_ops.reshape(math_ops.log(random_ops.random_gamma(shape=[n], alpha=self.concentration, dtype=self.dtype, seed=seed)), shape=[-1, k])
A:tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.draws->tensorflow.python.ops.random_ops.multinomial(logits=unnormalized_logits, num_samples=n_draws, seed=distribution_util.gen_new_seed(seed, salt='dirichlet_multinomial'))
A:tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.x->tensorflow.python.ops.math_ops.reduce_sum(array_ops.one_hot(draws, depth=k), -2)
A:tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.final_shape->tensorflow.python.ops.array_ops.concat([[n], self.batch_shape_tensor(), [k]], 0)
A:tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.counts->self._maybe_assert_valid_sample(counts)
A:tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.scale->self._variance_scale_term()
tensorflow.contrib.distributions.DirichletMultinomial(self,total_count,concentration,validate_args=False,allow_nan_stats=True,name='DirichletMultinomial')
tensorflow.contrib.distributions.DirichletMultinomial._batch_shape(self)
tensorflow.contrib.distributions.DirichletMultinomial._batch_shape_tensor(self)
tensorflow.contrib.distributions.DirichletMultinomial._covariance(self)
tensorflow.contrib.distributions.DirichletMultinomial._event_shape(self)
tensorflow.contrib.distributions.DirichletMultinomial._event_shape_tensor(self)
tensorflow.contrib.distributions.DirichletMultinomial._log_prob(self,counts)
tensorflow.contrib.distributions.DirichletMultinomial._maybe_assert_valid_concentration(self,concentration,validate_args)
tensorflow.contrib.distributions.DirichletMultinomial._maybe_assert_valid_sample(self,counts)
tensorflow.contrib.distributions.DirichletMultinomial._maybe_assert_valid_total_count(self,total_count,validate_args)
tensorflow.contrib.distributions.DirichletMultinomial._mean(self)
tensorflow.contrib.distributions.DirichletMultinomial._prob(self,counts)
tensorflow.contrib.distributions.DirichletMultinomial._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.DirichletMultinomial._variance(self)
tensorflow.contrib.distributions.DirichletMultinomial._variance_scale_term(self)
tensorflow.contrib.distributions.DirichletMultinomial.concentration(self)
tensorflow.contrib.distributions.DirichletMultinomial.total_concentration(self)
tensorflow.contrib.distributions.DirichletMultinomial.total_count(self)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial(self,total_count,concentration,validate_args=False,allow_nan_stats=True,name='DirichletMultinomial')
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial.__init__(self,total_count,concentration,validate_args=False,allow_nan_stats=True,name='DirichletMultinomial')
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial._batch_shape(self)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial._covariance(self)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial._event_shape(self)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial._log_prob(self,counts)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial._maybe_assert_valid_concentration(self,concentration,validate_args)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial._maybe_assert_valid_sample(self,counts)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial._maybe_assert_valid_total_count(self,total_count,validate_args)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial._mean(self)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial._prob(self,counts)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial._variance(self)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial._variance_scale_term(self)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial.concentration(self)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial.total_concentration(self)
tensorflow.contrib.distributions.python.ops.dirichlet_multinomial.DirichletMultinomial.total_count(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/distribution.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.distribution.old_str_lines->old_str.split('\n')
A:tensorflow.contrib.distributions.python.ops.distribution.append_str->'\n'.join(('    %s' % line for line in append_str.split('\n')))
A:tensorflow.contrib.distributions.python.ops.distribution.class_attr_value->_copy_fn(base_attr_value)
A:tensorflow.contrib.distributions.python.ops.distribution.base_attr_value->getattr(base, attr, None)
A:tensorflow.contrib.distributions.python.ops.distribution.class_special_attr_value->attrs.get(special_attr, None)
A:tensorflow.contrib.distributions.python.ops.distribution.class_special_attr_docstring->inspect.getdoc(class_special_attr_value)
A:tensorflow.contrib.distributions.python.ops.distribution.class_attr_docstring->inspect.getdoc(base_attr_value)
A:tensorflow.contrib.distributions.python.ops.distribution.class_attr_value.__doc__->_update_docstring(class_attr_value.__doc__, 'Additional documentation from `%s`:\n\n%s' % (classname, class_special_attr_docstring))
A:tensorflow.contrib.distributions.python.ops.distribution.FULLY_REPARAMETERIZED->ReparameterizationType('FULLY_REPARAMETERIZED')
A:tensorflow.contrib.distributions.python.ops.distribution.NOT_REPARAMETERIZED->ReparameterizationType('NOT_REPARAMETERIZED')
A:tensorflow.contrib.distributions.python.ops.distribution.sample_shape->tensorflow.python.framework.tensor_shape.TensorShape(tensor_util.constant_value(sample_shape))
A:tensorflow.contrib.distributions.python.ops.distribution.params->cls.param_shapes(sample_shape)
A:tensorflow.contrib.distributions.python.ops.distribution.static_shape->tensorflow.python.framework.tensor_util.constant_value(shape)
A:tensorflow.contrib.distributions.python.ops.distribution.static_params[name]->tensorflow.python.framework.tensor_shape.TensorShape(static_shape)
A:tensorflow.contrib.distributions.python.ops.distribution.parameters->dict(self.parameters, **override_parameters_kwargs)
A:tensorflow.contrib.distributions.python.ops.distribution.(sample_shape, n)->self._expand_sample_shape_to_vector(sample_shape, 'sample_shape')
A:tensorflow.contrib.distributions.python.ops.distribution.samples->self._set_sample_static_shape(samples, sample_shape)
A:tensorflow.contrib.distributions.python.ops.distribution.final_shape->tensorflow.python.ops.array_ops.concat([sample_shape, batch_event_shape], 0)
A:tensorflow.contrib.distributions.python.ops.distribution.value->tensorflow.python.framework.ops.convert_to_tensor(value, name='value')
A:tensorflow.contrib.distributions.python.ops.distribution.x_static_val->tensorflow.python.framework.tensor_util.constant_value(x)
A:tensorflow.contrib.distributions.python.ops.distribution.prod->numpy.prod(x_static_val, dtype=x.dtype.as_numpy_dtype())
A:tensorflow.contrib.distributions.python.ops.distribution.ndims->tensorflow.python.ops.array_ops.rank(x)
A:tensorflow.contrib.distributions.python.ops.distribution.expanded_shape->tensorflow.contrib.distributions.python.ops.distribution_util.pick_vector(math_ops.equal(ndims, 0), np.array([1], dtype=np.int32), array_ops.shape(x))
A:tensorflow.contrib.distributions.python.ops.distribution.x->tensorflow.python.ops.array_ops.reshape(x, [1])
A:tensorflow.contrib.distributions.python.ops.distribution.shape->dynamic_shape_fn()
tensorflow.contrib.distributions.Distribution(self,dtype,reparameterization_type,validate_args,allow_nan_stats,parameters=None,graph_parents=None,name=None)
tensorflow.contrib.distributions.Distribution._batch_shape(self)
tensorflow.contrib.distributions.Distribution._batch_shape_tensor(self)
tensorflow.contrib.distributions.Distribution._call_cdf(self,value,name,**kwargs)
tensorflow.contrib.distributions.Distribution._call_log_cdf(self,value,name,**kwargs)
tensorflow.contrib.distributions.Distribution._call_log_prob(self,value,name,**kwargs)
tensorflow.contrib.distributions.Distribution._call_log_survival_function(self,value,name,**kwargs)
tensorflow.contrib.distributions.Distribution._call_prob(self,value,name,**kwargs)
tensorflow.contrib.distributions.Distribution._call_sample_n(self,sample_shape,seed,name,**kwargs)
tensorflow.contrib.distributions.Distribution._call_survival_function(self,value,name,**kwargs)
tensorflow.contrib.distributions.Distribution._cdf(self,value)
tensorflow.contrib.distributions.Distribution._covariance(self)
tensorflow.contrib.distributions.Distribution._entropy(self)
tensorflow.contrib.distributions.Distribution._event_shape(self)
tensorflow.contrib.distributions.Distribution._event_shape_tensor(self)
tensorflow.contrib.distributions.Distribution._expand_sample_shape_to_vector(self,x,name)
tensorflow.contrib.distributions.Distribution._is_scalar_helper(self,static_shape,dynamic_shape_fn)
tensorflow.contrib.distributions.Distribution._log_cdf(self,value)
tensorflow.contrib.distributions.Distribution._log_prob(self,value)
tensorflow.contrib.distributions.Distribution._log_survival_function(self,value)
tensorflow.contrib.distributions.Distribution._mean(self)
tensorflow.contrib.distributions.Distribution._mode(self)
tensorflow.contrib.distributions.Distribution._name_scope(self,name=None,values=None)
tensorflow.contrib.distributions.Distribution._param_shapes(sample_shape)
tensorflow.contrib.distributions.Distribution._prob(self,value)
tensorflow.contrib.distributions.Distribution._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.Distribution._set_sample_static_shape(self,x,sample_shape)
tensorflow.contrib.distributions.Distribution._stddev(self)
tensorflow.contrib.distributions.Distribution._survival_function(self,value)
tensorflow.contrib.distributions.Distribution._variance(self)
tensorflow.contrib.distributions.Distribution.allow_nan_stats(self)
tensorflow.contrib.distributions.Distribution.batch_shape(self)
tensorflow.contrib.distributions.Distribution.batch_shape_tensor(self,name='batch_shape_tensor')
tensorflow.contrib.distributions.Distribution.cdf(self,value,name='cdf')
tensorflow.contrib.distributions.Distribution.copy(self,**override_parameters_kwargs)
tensorflow.contrib.distributions.Distribution.covariance(self,name='covariance')
tensorflow.contrib.distributions.Distribution.dtype(self)
tensorflow.contrib.distributions.Distribution.entropy(self,name='entropy')
tensorflow.contrib.distributions.Distribution.event_shape(self)
tensorflow.contrib.distributions.Distribution.event_shape_tensor(self,name='event_shape_tensor')
tensorflow.contrib.distributions.Distribution.is_scalar_batch(self,name='is_scalar_batch')
tensorflow.contrib.distributions.Distribution.is_scalar_event(self,name='is_scalar_event')
tensorflow.contrib.distributions.Distribution.log_cdf(self,value,name='log_cdf')
tensorflow.contrib.distributions.Distribution.log_prob(self,value,name='log_prob')
tensorflow.contrib.distributions.Distribution.log_survival_function(self,value,name='log_survival_function')
tensorflow.contrib.distributions.Distribution.mean(self,name='mean')
tensorflow.contrib.distributions.Distribution.mode(self,name='mode')
tensorflow.contrib.distributions.Distribution.name(self)
tensorflow.contrib.distributions.Distribution.param_shapes(cls,sample_shape,name='DistributionParamShapes')
tensorflow.contrib.distributions.Distribution.param_static_shapes(cls,sample_shape)
tensorflow.contrib.distributions.Distribution.parameters(self)
tensorflow.contrib.distributions.Distribution.prob(self,value,name='prob')
tensorflow.contrib.distributions.Distribution.reparameterization_type(self)
tensorflow.contrib.distributions.Distribution.sample(self,sample_shape=(),seed=None,name='sample')
tensorflow.contrib.distributions.Distribution.stddev(self,name='stddev')
tensorflow.contrib.distributions.Distribution.survival_function(self,value,name='survival_function')
tensorflow.contrib.distributions.Distribution.validate_args(self)
tensorflow.contrib.distributions.Distribution.variance(self,name='variance')
tensorflow.contrib.distributions.ReparameterizationType(self,rep_type)
tensorflow.contrib.distributions.ReparameterizationType.__eq__(self,other)
tensorflow.contrib.distributions.ReparameterizationType.__repr__(self)
tensorflow.contrib.distributions._BaseDistribution(object)
tensorflow.contrib.distributions._DistributionMeta(mcs,classname,baseclasses,attrs)
tensorflow.contrib.distributions._copy_fn(fn)
tensorflow.contrib.distributions._update_docstring(old_str,append_str)
tensorflow.contrib.distributions.python.ops.distribution.Distribution(self,dtype,reparameterization_type,validate_args,allow_nan_stats,parameters=None,graph_parents=None,name=None)
tensorflow.contrib.distributions.python.ops.distribution.Distribution.__init__(self,dtype,reparameterization_type,validate_args,allow_nan_stats,parameters=None,graph_parents=None,name=None)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._batch_shape(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._call_cdf(self,value,name,**kwargs)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._call_log_cdf(self,value,name,**kwargs)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._call_log_prob(self,value,name,**kwargs)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._call_log_survival_function(self,value,name,**kwargs)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._call_prob(self,value,name,**kwargs)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._call_sample_n(self,sample_shape,seed,name,**kwargs)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._call_survival_function(self,value,name,**kwargs)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._cdf(self,value)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._covariance(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._entropy(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._event_shape(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._expand_sample_shape_to_vector(self,x,name)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._is_scalar_helper(self,static_shape,dynamic_shape_fn)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._log_cdf(self,value)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._log_prob(self,value)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._log_survival_function(self,value)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._mean(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._mode(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._name_scope(self,name=None,values=None)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._param_shapes(sample_shape)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._prob(self,value)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._set_sample_static_shape(self,x,sample_shape)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._stddev(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._survival_function(self,value)
tensorflow.contrib.distributions.python.ops.distribution.Distribution._variance(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution.allow_nan_stats(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution.batch_shape(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution.batch_shape_tensor(self,name='batch_shape_tensor')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.cdf(self,value,name='cdf')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.copy(self,**override_parameters_kwargs)
tensorflow.contrib.distributions.python.ops.distribution.Distribution.covariance(self,name='covariance')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.dtype(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution.entropy(self,name='entropy')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.event_shape(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution.event_shape_tensor(self,name='event_shape_tensor')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.is_scalar_batch(self,name='is_scalar_batch')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.is_scalar_event(self,name='is_scalar_event')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.log_cdf(self,value,name='log_cdf')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.log_prob(self,value,name='log_prob')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.log_survival_function(self,value,name='log_survival_function')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.mean(self,name='mean')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.mode(self,name='mode')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.name(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution.param_shapes(cls,sample_shape,name='DistributionParamShapes')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.param_static_shapes(cls,sample_shape)
tensorflow.contrib.distributions.python.ops.distribution.Distribution.parameters(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution.prob(self,value,name='prob')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.reparameterization_type(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution.sample(self,sample_shape=(),seed=None,name='sample')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.stddev(self,name='stddev')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.survival_function(self,value,name='survival_function')
tensorflow.contrib.distributions.python.ops.distribution.Distribution.validate_args(self)
tensorflow.contrib.distributions.python.ops.distribution.Distribution.variance(self,name='variance')
tensorflow.contrib.distributions.python.ops.distribution.ReparameterizationType(self,rep_type)
tensorflow.contrib.distributions.python.ops.distribution.ReparameterizationType.__eq__(self,other)
tensorflow.contrib.distributions.python.ops.distribution.ReparameterizationType.__init__(self,rep_type)
tensorflow.contrib.distributions.python.ops.distribution.ReparameterizationType.__repr__(self)
tensorflow.contrib.distributions.python.ops.distribution._BaseDistribution(object)
tensorflow.contrib.distributions.python.ops.distribution._DistributionMeta(mcs,classname,baseclasses,attrs)
tensorflow.contrib.distributions.python.ops.distribution._DistributionMeta.__new__(mcs,classname,baseclasses,attrs)
tensorflow.contrib.distributions.python.ops.distribution._copy_fn(fn)
tensorflow.contrib.distributions.python.ops.distribution._update_docstring(old_str,append_str)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/negative_binomial.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.negative_binomial.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.negative_binomial.(self._logits, self._probs)->tensorflow.contrib.distributions.python.ops.distribution_util.get_logits_and_probs(logits, probs, validate_args=validate_args, name=name)
A:tensorflow.contrib.distributions.python.ops.negative_binomial.self._total_count->tensorflow.python.ops.array_ops.identity(total_count)
A:tensorflow.contrib.distributions.python.ops.negative_binomial.rate->tensorflow.python.ops.random_ops.random_gamma(shape=[n], alpha=self.total_count, beta=math_ops.exp(-self.logits), dtype=self.dtype, seed=seed)
A:tensorflow.contrib.distributions.python.ops.negative_binomial.positive_counts->tensorflow.contrib.distributions.python.ops.distribution_util.embed_check_nonnegative_discrete(positive_counts, check_integer=True)
A:tensorflow.contrib.distributions.python.ops.negative_binomial.adjusted_count->tensorflow.python.ops.array_ops.where(1.0 < self.total_count, self.total_count - 1.0, array_ops.zeros_like(self.total_count))
tensorflow.contrib.distributions.NegativeBinomial(self,total_count,logits=None,probs=None,validate_args=False,allow_nan_stats=True,name='NegativeBinomial')
tensorflow.contrib.distributions.NegativeBinomial._batch_shape(self)
tensorflow.contrib.distributions.NegativeBinomial._batch_shape_tensor(self)
tensorflow.contrib.distributions.NegativeBinomial._cdf(self,positive_counts)
tensorflow.contrib.distributions.NegativeBinomial._event_shape(self)
tensorflow.contrib.distributions.NegativeBinomial._event_shape_tensor(self)
tensorflow.contrib.distributions.NegativeBinomial._log_normalization(self,positive_counts)
tensorflow.contrib.distributions.NegativeBinomial._log_prob(self,positive_counts)
tensorflow.contrib.distributions.NegativeBinomial._log_unnormalized_prob(self,positive_counts)
tensorflow.contrib.distributions.NegativeBinomial._mean(self)
tensorflow.contrib.distributions.NegativeBinomial._mode(self)
tensorflow.contrib.distributions.NegativeBinomial._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.NegativeBinomial._variance(self)
tensorflow.contrib.distributions.NegativeBinomial.logits(self)
tensorflow.contrib.distributions.NegativeBinomial.probs(self)
tensorflow.contrib.distributions.NegativeBinomial.total_count(self)
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial(self,total_count,logits=None,probs=None,validate_args=False,allow_nan_stats=True,name='NegativeBinomial')
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial.__init__(self,total_count,logits=None,probs=None,validate_args=False,allow_nan_stats=True,name='NegativeBinomial')
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial._batch_shape(self)
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial._cdf(self,positive_counts)
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial._event_shape(self)
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial._log_normalization(self,positive_counts)
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial._log_prob(self,positive_counts)
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial._log_unnormalized_prob(self,positive_counts)
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial._mean(self)
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial._mode(self)
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial._variance(self)
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial.logits(self)
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial.probs(self)
tensorflow.contrib.distributions.python.ops.negative_binomial.NegativeBinomial.total_count(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/exponential.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.exponential.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.exponential.self._rate->tensorflow.python.framework.ops.convert_to_tensor(rate, name='rate')
A:tensorflow.contrib.distributions.python.ops.exponential.shape->tensorflow.python.ops.array_ops.concat([[n], array_ops.shape(self._rate)], 0)
A:tensorflow.contrib.distributions.python.ops.exponential.sampled->tensorflow.python.ops.random_ops.random_uniform(shape, minval=np.finfo(self.dtype.as_numpy_dtype).tiny, maxval=1.0, seed=seed, dtype=self.dtype)
tensorflow.contrib.distributions.Exponential(self,rate,validate_args=False,allow_nan_stats=True,name='Exponential')
tensorflow.contrib.distributions.Exponential._param_shapes(sample_shape)
tensorflow.contrib.distributions.Exponential._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.Exponential.rate(self)
tensorflow.contrib.distributions.ExponentialWithSoftplusRate(self,rate,validate_args=False,allow_nan_stats=True,name='ExponentialWithSoftplusRate')
tensorflow.contrib.distributions.python.ops.exponential.Exponential(self,rate,validate_args=False,allow_nan_stats=True,name='Exponential')
tensorflow.contrib.distributions.python.ops.exponential.Exponential.__init__(self,rate,validate_args=False,allow_nan_stats=True,name='Exponential')
tensorflow.contrib.distributions.python.ops.exponential.Exponential._param_shapes(sample_shape)
tensorflow.contrib.distributions.python.ops.exponential.Exponential._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.exponential.Exponential.rate(self)
tensorflow.contrib.distributions.python.ops.exponential.ExponentialWithSoftplusRate(self,rate,validate_args=False,allow_nan_stats=True,name='ExponentialWithSoftplusRate')
tensorflow.contrib.distributions.python.ops.exponential.ExponentialWithSoftplusRate.__init__(self,rate,validate_args=False,allow_nan_stats=True,name='ExponentialWithSoftplusRate')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/operator_test_util.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.operator_test_util.self._rng->numpy.random.RandomState(42)
A:tensorflow.contrib.distributions.python.ops.operator_test_util.batch_shape->list(batch_shape)
A:tensorflow.contrib.distributions.python.ops.operator_test_util.(operator, mat)->self._build_operator_and_mat(batch_shape, k)
A:tensorflow.contrib.distributions.python.ops.operator_test_util.sqrt->operator.sqrt_to_dense()
A:tensorflow.contrib.distributions.python.ops.operator_test_util.expected_det->tensorflow.python.ops.linalg_ops.matrix_determinant(mat).eval()
A:tensorflow.contrib.distributions.python.ops.operator_test_util.x->self._rng.randn(*batch_shape + (k, 5))
A:tensorflow.contrib.distributions.python.ops.operator_test_util.tensor->tensorflow.python.ops.array_ops.ones_like(mat)
tensorflow.contrib.distributions.ops.operator_test_util.OperatorPDDerivedClassTest(test.TestCase)
tensorflow.contrib.distributions.ops.operator_test_util.OperatorPDDerivedClassTest._build_operator_and_mat(self,batch_shape,k,dtype=np.float64)
tensorflow.contrib.distributions.ops.operator_test_util.OperatorPDDerivedClassTest._compare_results(self,expected,actual,static_shapes=True,atol=1e-05)
tensorflow.contrib.distributions.ops.operator_test_util.OperatorPDDerivedClassTest.setUp(self)
tensorflow.contrib.distributions.ops.operator_test_util.OperatorPDDerivedClassTest.testAddToTensor(self)
tensorflow.contrib.distributions.ops.operator_test_util.OperatorPDDerivedClassTest.testDeterminants(self)
tensorflow.contrib.distributions.ops.operator_test_util.OperatorPDDerivedClassTest.testMatmul(self)
tensorflow.contrib.distributions.ops.operator_test_util.OperatorPDDerivedClassTest.testSolve(self)
tensorflow.contrib.distributions.ops.operator_test_util.OperatorPDDerivedClassTest.testSqrtMatmul(self)
tensorflow.contrib.distributions.ops.operator_test_util.OperatorPDDerivedClassTest.testSqrtSolve(self)
tensorflow.contrib.distributions.ops.operator_test_util.OperatorPDDerivedClassTest.testSqrtToDense(self)
tensorflow.contrib.distributions.ops.operator_test_util.OperatorPDDerivedClassTest.testToDense(self)
tensorflow.contrib.distributions.python.ops.operator_test_util.OperatorPDDerivedClassTest(test.TestCase)
tensorflow.contrib.distributions.python.ops.operator_test_util.OperatorPDDerivedClassTest._build_operator_and_mat(self,batch_shape,k,dtype=np.float64)
tensorflow.contrib.distributions.python.ops.operator_test_util.OperatorPDDerivedClassTest._compare_results(self,expected,actual,static_shapes=True,atol=1e-05)
tensorflow.contrib.distributions.python.ops.operator_test_util.OperatorPDDerivedClassTest.setUp(self)
tensorflow.contrib.distributions.python.ops.operator_test_util.OperatorPDDerivedClassTest.testAddToTensor(self)
tensorflow.contrib.distributions.python.ops.operator_test_util.OperatorPDDerivedClassTest.testDeterminants(self)
tensorflow.contrib.distributions.python.ops.operator_test_util.OperatorPDDerivedClassTest.testMatmul(self)
tensorflow.contrib.distributions.python.ops.operator_test_util.OperatorPDDerivedClassTest.testSolve(self)
tensorflow.contrib.distributions.python.ops.operator_test_util.OperatorPDDerivedClassTest.testSqrtMatmul(self)
tensorflow.contrib.distributions.python.ops.operator_test_util.OperatorPDDerivedClassTest.testSqrtSolve(self)
tensorflow.contrib.distributions.python.ops.operator_test_util.OperatorPDDerivedClassTest.testSqrtToDense(self)
tensorflow.contrib.distributions.python.ops.operator_test_util.OperatorPDDerivedClassTest.testToDense(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/onehot_categorical.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.onehot_categorical.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.onehot_categorical.(self._logits, self._probs)->tensorflow.contrib.distributions.python.ops.distribution_util.get_logits_and_probs(name=name, logits=logits, probs=probs, validate_args=validate_args, multidimensional=True)
A:tensorflow.contrib.distributions.python.ops.onehot_categorical.logits_shape_static->self._logits.get_shape().with_rank_at_least(1)
A:tensorflow.contrib.distributions.python.ops.onehot_categorical.self._batch_rank->tensorflow.python.framework.ops.convert_to_tensor(logits_shape_static.ndims - 1, dtype=dtypes.int32, name='batch_rank')
A:tensorflow.contrib.distributions.python.ops.onehot_categorical.sample_shape->tensorflow.python.ops.array_ops.concat([[n], array_ops.shape(self.logits)], 0)
A:tensorflow.contrib.distributions.python.ops.onehot_categorical.logits_2d->tensorflow.python.ops.array_ops.reshape(logits, [-1, self.event_size])
A:tensorflow.contrib.distributions.python.ops.onehot_categorical.samples->tensorflow.python.ops.array_ops.one_hot(samples, self.event_size, dtype=self.dtype)
A:tensorflow.contrib.distributions.python.ops.onehot_categorical.ret->tensorflow.python.ops.array_ops.one_hot(ret, self.event_size, dtype=self.dtype)
A:tensorflow.contrib.distributions.python.ops.onehot_categorical.x->self._assert_valid_sample(x)
A:tensorflow.contrib.distributions.python.ops.onehot_categorical.logits_shape->tensorflow.python.ops.array_ops.shape(math_ops.reduce_sum(logits, -1))
A:tensorflow.contrib.distributions.python.ops.onehot_categorical.x_2d->tensorflow.python.ops.array_ops.reshape(x, [-1, self.event_size])
tensorflow.contrib.distributions.OneHotCategorical(self,logits=None,probs=None,dtype=dtypes.int32,validate_args=False,allow_nan_stats=True,name='OneHotCategorical')
tensorflow.contrib.distributions.OneHotCategorical._assert_valid_sample(self,x)
tensorflow.contrib.distributions.OneHotCategorical._batch_shape(self)
tensorflow.contrib.distributions.OneHotCategorical._batch_shape_tensor(self)
tensorflow.contrib.distributions.OneHotCategorical._covariance(self)
tensorflow.contrib.distributions.OneHotCategorical._entropy(self)
tensorflow.contrib.distributions.OneHotCategorical._event_shape(self)
tensorflow.contrib.distributions.OneHotCategorical._event_shape_tensor(self)
tensorflow.contrib.distributions.OneHotCategorical._log_prob(self,x)
tensorflow.contrib.distributions.OneHotCategorical._mode(self)
tensorflow.contrib.distributions.OneHotCategorical._prob(self,x)
tensorflow.contrib.distributions.OneHotCategorical._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.OneHotCategorical._variance(self)
tensorflow.contrib.distributions.OneHotCategorical.event_size(self)
tensorflow.contrib.distributions.OneHotCategorical.logits(self)
tensorflow.contrib.distributions.OneHotCategorical.probs(self)
tensorflow.contrib.distributions._kl_categorical_categorical(a,b,name=None)
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical(self,logits=None,probs=None,dtype=dtypes.int32,validate_args=False,allow_nan_stats=True,name='OneHotCategorical')
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical.__init__(self,logits=None,probs=None,dtype=dtypes.int32,validate_args=False,allow_nan_stats=True,name='OneHotCategorical')
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical._assert_valid_sample(self,x)
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical._batch_shape(self)
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical._covariance(self)
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical._entropy(self)
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical._event_shape(self)
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical._mode(self)
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical._prob(self,x)
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical._variance(self)
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical.event_size(self)
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical.logits(self)
tensorflow.contrib.distributions.python.ops.onehot_categorical.OneHotCategorical.probs(self)
tensorflow.contrib.distributions.python.ops.onehot_categorical._kl_categorical_categorical(a,b,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/operator_pd_diag.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.operator_pd_diag.self._diag->self._check_diag(diag)
A:tensorflow.contrib.distributions.python.ops.operator_pd_diag.diag->tensorflow.python.framework.ops.convert_to_tensor(diag, name='diag')
A:tensorflow.contrib.distributions.python.ops.operator_pd_diag.d_shape->tensorflow.python.ops.array_ops.shape(self._diag)
A:tensorflow.contrib.distributions.python.ops.operator_pd_diag.k->tensorflow.python.ops.array_ops.gather(d_shape, array_ops.size(d_shape) - 1)
A:tensorflow.contrib.distributions.python.ops.operator_pd_diag.x->tensorflow.python.ops.array_ops.matrix_transpose(x)
A:tensorflow.contrib.distributions.python.ops.operator_pd_diag.diag_mat->tensorflow.python.ops.array_ops.expand_dims(self._diag, -1)
A:tensorflow.contrib.distributions.python.ops.operator_pd_diag.mat_diag->tensorflow.python.ops.array_ops.matrix_diag_part(mat)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiag(self,diag,verify_pd=True,name='OperatorPDDiag')
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiag._add_to_tensor(self,mat)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiag._batch_log_det(self)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiag._batch_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiag._batch_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiag._batch_sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiag._batch_sqrt_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiag._inv_quadratic_form_on_vectors(self,x)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiag._sqrt_to_dense(self)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiag._to_dense(self)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase(self,diag,verify_pd=True,name='OperatorPDDiagBase')
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase._add_to_tensor(self,mat)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase._batch_log_det(self)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase._batch_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase._batch_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase._batch_sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase._batch_sqrt_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase._check_diag(self,diag)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase._inv_quadratic_form_on_vectors(self,x)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase._shape(self)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase._sqrt_to_dense(self)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase._to_dense(self)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase.dtype(self)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase.get_shape(self)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase.inputs(self)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase.name(self)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDDiagBase.verify_pd(self)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDSqrtDiag(self,diag,verify_pd=True,name='OperatorPDSqrtDiag')
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDSqrtDiag._add_to_tensor(self,mat)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDSqrtDiag._batch_log_det(self)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDSqrtDiag._batch_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDSqrtDiag._batch_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDSqrtDiag._batch_sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDSqrtDiag._batch_sqrt_solve(self,rhs)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDSqrtDiag._inv_quadratic_form_on_vectors(self,x)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDSqrtDiag._sqrt_to_dense(self)
tensorflow.contrib.distributions.ops.operator_pd_diag.OperatorPDSqrtDiag._to_dense(self)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiag(self,diag,verify_pd=True,name='OperatorPDDiag')
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiag.__init__(self,diag,verify_pd=True,name='OperatorPDDiag')
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiag._add_to_tensor(self,mat)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiag._batch_log_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiag._batch_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiag._batch_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiag._batch_sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiag._batch_sqrt_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiag._inv_quadratic_form_on_vectors(self,x)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiag._sqrt_to_dense(self)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiag._to_dense(self)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase(self,diag,verify_pd=True,name='OperatorPDDiagBase')
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase.__init__(self,diag,verify_pd=True,name='OperatorPDDiagBase')
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase._add_to_tensor(self,mat)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase._batch_log_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase._batch_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase._batch_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase._batch_sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase._batch_sqrt_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase._check_diag(self,diag)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase._inv_quadratic_form_on_vectors(self,x)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase._shape(self)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase._sqrt_to_dense(self)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase._to_dense(self)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase.dtype(self)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase.get_shape(self)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase.inputs(self)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase.name(self)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiagBase.verify_pd(self)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDSqrtDiag(self,diag,verify_pd=True,name='OperatorPDSqrtDiag')
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDSqrtDiag.__init__(self,diag,verify_pd=True,name='OperatorPDSqrtDiag')
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDSqrtDiag._add_to_tensor(self,mat)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDSqrtDiag._batch_log_det(self)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDSqrtDiag._batch_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDSqrtDiag._batch_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDSqrtDiag._batch_sqrt_matmul(self,x,transpose_x=False)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDSqrtDiag._batch_sqrt_solve(self,rhs)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDSqrtDiag._inv_quadratic_form_on_vectors(self,x)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDSqrtDiag._sqrt_to_dense(self)
tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDSqrtDiag._to_dense(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/mvn_linear_operator.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.mvn_linear_operator.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.mvn_linear_operator.event_shape->tensorflow.python.framework.tensor_util.constant_value(event_shape)
A:tensorflow.contrib.distributions.python.ops.mvn_linear_operator.shape->tensorflow.python.ops.array_ops.concat([self.batch_shape_tensor(), self.event_shape_tensor()], 0)
A:tensorflow.contrib.distributions.python.ops.mvn_linear_operator.has_static_shape->tensorflow.python.ops.array_ops.concat([self.batch_shape_tensor(), self.event_shape_tensor()], 0).is_fully_defined()
A:tensorflow.contrib.distributions.python.ops.mvn_linear_operator.b_inv_a->b.scale.solve(a.scale.to_dense())
tensorflow.contrib.distributions.ops.mvn_linear_operator.MultivariateNormalLinearOperator(self,loc=None,scale=None,validate_args=False,allow_nan_stats=True,name='MultivariateNormalLinearOperator')
tensorflow.contrib.distributions.ops.mvn_linear_operator.MultivariateNormalLinearOperator._covariance(self)
tensorflow.contrib.distributions.ops.mvn_linear_operator.MultivariateNormalLinearOperator._log_prob(self,x)
tensorflow.contrib.distributions.ops.mvn_linear_operator.MultivariateNormalLinearOperator._mean(self)
tensorflow.contrib.distributions.ops.mvn_linear_operator.MultivariateNormalLinearOperator._mode(self)
tensorflow.contrib.distributions.ops.mvn_linear_operator.MultivariateNormalLinearOperator._prob(self,x)
tensorflow.contrib.distributions.ops.mvn_linear_operator.MultivariateNormalLinearOperator._stddev(self)
tensorflow.contrib.distributions.ops.mvn_linear_operator.MultivariateNormalLinearOperator._variance(self)
tensorflow.contrib.distributions.ops.mvn_linear_operator.MultivariateNormalLinearOperator.det_covariance(self,name='det_covariance')
tensorflow.contrib.distributions.ops.mvn_linear_operator.MultivariateNormalLinearOperator.loc(self)
tensorflow.contrib.distributions.ops.mvn_linear_operator.MultivariateNormalLinearOperator.log_det_covariance(self,name='log_det_covariance')
tensorflow.contrib.distributions.ops.mvn_linear_operator.MultivariateNormalLinearOperator.scale(self)
tensorflow.contrib.distributions.ops.mvn_linear_operator._kl_brute_force(a,b,name=None)
tensorflow.contrib.distributions.python.ops.mvn_linear_operator.MultivariateNormalLinearOperator(self,loc=None,scale=None,validate_args=False,allow_nan_stats=True,name='MultivariateNormalLinearOperator')
tensorflow.contrib.distributions.python.ops.mvn_linear_operator.MultivariateNormalLinearOperator.__init__(self,loc=None,scale=None,validate_args=False,allow_nan_stats=True,name='MultivariateNormalLinearOperator')
tensorflow.contrib.distributions.python.ops.mvn_linear_operator.MultivariateNormalLinearOperator._covariance(self)
tensorflow.contrib.distributions.python.ops.mvn_linear_operator.MultivariateNormalLinearOperator._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.mvn_linear_operator.MultivariateNormalLinearOperator._mean(self)
tensorflow.contrib.distributions.python.ops.mvn_linear_operator.MultivariateNormalLinearOperator._mode(self)
tensorflow.contrib.distributions.python.ops.mvn_linear_operator.MultivariateNormalLinearOperator._prob(self,x)
tensorflow.contrib.distributions.python.ops.mvn_linear_operator.MultivariateNormalLinearOperator._stddev(self)
tensorflow.contrib.distributions.python.ops.mvn_linear_operator.MultivariateNormalLinearOperator._variance(self)
tensorflow.contrib.distributions.python.ops.mvn_linear_operator.MultivariateNormalLinearOperator.det_covariance(self,name='det_covariance')
tensorflow.contrib.distributions.python.ops.mvn_linear_operator.MultivariateNormalLinearOperator.loc(self)
tensorflow.contrib.distributions.python.ops.mvn_linear_operator.MultivariateNormalLinearOperator.log_det_covariance(self,name='log_det_covariance')
tensorflow.contrib.distributions.python.ops.mvn_linear_operator.MultivariateNormalLinearOperator.scale(self)
tensorflow.contrib.distributions.python.ops.mvn_linear_operator._kl_brute_force(a,b,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/conditional_distribution.py----------------------------------------
tensorflow.contrib.distributions.ConditionalDistribution(distribution.Distribution)
tensorflow.contrib.distributions.ConditionalDistribution.cdf(self,value,name='cdf',**condition_kwargs)
tensorflow.contrib.distributions.ConditionalDistribution.log_cdf(self,value,name='log_cdf',**condition_kwargs)
tensorflow.contrib.distributions.ConditionalDistribution.log_prob(self,value,name='log_prob',**condition_kwargs)
tensorflow.contrib.distributions.ConditionalDistribution.log_survival_function(self,value,name='log_survival_function',**condition_kwargs)
tensorflow.contrib.distributions.ConditionalDistribution.prob(self,value,name='prob',**condition_kwargs)
tensorflow.contrib.distributions.ConditionalDistribution.sample(self,sample_shape=(),seed=None,name='sample',**condition_kwargs)
tensorflow.contrib.distributions.ConditionalDistribution.survival_function(self,value,name='survival_function',**condition_kwargs)
tensorflow.contrib.distributions.python.ops.conditional_distribution.ConditionalDistribution(distribution.Distribution)
tensorflow.contrib.distributions.python.ops.conditional_distribution.ConditionalDistribution.cdf(self,value,name='cdf',**condition_kwargs)
tensorflow.contrib.distributions.python.ops.conditional_distribution.ConditionalDistribution.log_cdf(self,value,name='log_cdf',**condition_kwargs)
tensorflow.contrib.distributions.python.ops.conditional_distribution.ConditionalDistribution.log_prob(self,value,name='log_prob',**condition_kwargs)
tensorflow.contrib.distributions.python.ops.conditional_distribution.ConditionalDistribution.log_survival_function(self,value,name='log_survival_function',**condition_kwargs)
tensorflow.contrib.distributions.python.ops.conditional_distribution.ConditionalDistribution.prob(self,value,name='prob',**condition_kwargs)
tensorflow.contrib.distributions.python.ops.conditional_distribution.ConditionalDistribution.sample(self,sample_shape=(),seed=None,name='sample',**condition_kwargs)
tensorflow.contrib.distributions.python.ops.conditional_distribution.ConditionalDistribution.survival_function(self,value,name='survival_function',**condition_kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/dirichlet.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.dirichlet.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.dirichlet.self._concentration->self._maybe_assert_valid_concentration(ops.convert_to_tensor(concentration, name='concentration'), validate_args)
A:tensorflow.contrib.distributions.python.ops.dirichlet.self._total_concentration->tensorflow.python.ops.math_ops.reduce_sum(self._concentration, -1)
A:tensorflow.contrib.distributions.python.ops.dirichlet.gamma_sample->tensorflow.python.ops.random_ops.random_gamma(shape=[n], alpha=self.concentration, dtype=self.dtype, seed=seed)
A:tensorflow.contrib.distributions.python.ops.dirichlet.x->self._maybe_assert_valid_sample(x)
A:tensorflow.contrib.distributions.python.ops.dirichlet.k->tensorflow.python.ops.math_ops.cast(self.event_shape_tensor()[0], self.dtype)
A:tensorflow.contrib.distributions.python.ops.dirichlet.scale->self._variance_scale_term()
A:tensorflow.contrib.distributions.python.ops.dirichlet.nan->tensorflow.python.ops.array_ops.fill(array_ops.shape(mode), np.array(np.nan, dtype=self.dtype.as_numpy_dtype()), name='nan')
tensorflow.contrib.distributions.Dirichlet(self,concentration,validate_args=False,allow_nan_stats=True,name='Dirichlet')
tensorflow.contrib.distributions.Dirichlet._batch_shape(self)
tensorflow.contrib.distributions.Dirichlet._batch_shape_tensor(self)
tensorflow.contrib.distributions.Dirichlet._covariance(self)
tensorflow.contrib.distributions.Dirichlet._entropy(self)
tensorflow.contrib.distributions.Dirichlet._event_shape(self)
tensorflow.contrib.distributions.Dirichlet._event_shape_tensor(self)
tensorflow.contrib.distributions.Dirichlet._log_normalization(self)
tensorflow.contrib.distributions.Dirichlet._log_prob(self,x)
tensorflow.contrib.distributions.Dirichlet._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.Dirichlet._maybe_assert_valid_concentration(self,concentration,validate_args)
tensorflow.contrib.distributions.Dirichlet._maybe_assert_valid_sample(self,x)
tensorflow.contrib.distributions.Dirichlet._mean(self)
tensorflow.contrib.distributions.Dirichlet._mode(self)
tensorflow.contrib.distributions.Dirichlet._prob(self,x)
tensorflow.contrib.distributions.Dirichlet._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.Dirichlet._variance(self)
tensorflow.contrib.distributions.Dirichlet._variance_scale_term(self)
tensorflow.contrib.distributions.Dirichlet.concentration(self)
tensorflow.contrib.distributions.Dirichlet.total_concentration(self)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet(self,concentration,validate_args=False,allow_nan_stats=True,name='Dirichlet')
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet.__init__(self,concentration,validate_args=False,allow_nan_stats=True,name='Dirichlet')
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._batch_shape(self)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._covariance(self)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._entropy(self)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._event_shape(self)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._log_normalization(self)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._maybe_assert_valid_concentration(self,concentration,validate_args)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._maybe_assert_valid_sample(self,x)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._mean(self)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._mode(self)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._prob(self,x)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._variance(self)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet._variance_scale_term(self)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet.concentration(self)
tensorflow.contrib.distributions.python.ops.dirichlet.Dirichlet.total_concentration(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/normal_conjugate_posteriors.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.normal_conjugate_posteriors.n->tensorflow.python.ops.math_ops.cast(n, prior.dtype)
A:tensorflow.contrib.distributions.python.ops.normal_conjugate_posteriors.scale0_2->tensorflow.python.ops.math_ops.square(prior.scale)
A:tensorflow.contrib.distributions.python.ops.normal_conjugate_posteriors.scale_2->tensorflow.python.ops.math_ops.square(scale)
tensorflow.contrib.distributions.normal_conjugates_known_scale_posterior(prior,scale,s,n)
tensorflow.contrib.distributions.normal_conjugates_known_scale_predictive(prior,scale,s,n)
tensorflow.contrib.distributions.python.ops.normal_conjugate_posteriors.normal_conjugates_known_scale_posterior(prior,scale,s,n)
tensorflow.contrib.distributions.python.ops.normal_conjugate_posteriors.normal_conjugates_known_scale_predictive(prior,scale,s,n)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/inverse_gamma.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.inverse_gamma.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.inverse_gamma.self._concentration->tensorflow.python.ops.array_ops.identity(concentration, name='concentration')
A:tensorflow.contrib.distributions.python.ops.inverse_gamma.self._rate->tensorflow.python.ops.array_ops.identity(rate, name='rate')
A:tensorflow.contrib.distributions.python.ops.inverse_gamma.x->self._maybe_assert_valid_sample(x)
A:tensorflow.contrib.distributions.python.ops.inverse_gamma.nan->tensorflow.python.ops.array_ops.fill(self.batch_shape_tensor(), np.array(np.nan, dtype=self.dtype.as_numpy_dtype()), name='nan')
tensorflow.contrib.distributions.InverseGamma(self,concentration,rate,validate_args=False,allow_nan_stats=True,name='InverseGamma')
tensorflow.contrib.distributions.InverseGamma._batch_shape(self)
tensorflow.contrib.distributions.InverseGamma._batch_shape_tensor(self)
tensorflow.contrib.distributions.InverseGamma._cdf(self,x)
tensorflow.contrib.distributions.InverseGamma._entropy(self)
tensorflow.contrib.distributions.InverseGamma._event_shape(self)
tensorflow.contrib.distributions.InverseGamma._event_shape_tensor(self)
tensorflow.contrib.distributions.InverseGamma._log_cdf(self,x)
tensorflow.contrib.distributions.InverseGamma._log_normalization(self)
tensorflow.contrib.distributions.InverseGamma._log_prob(self,x)
tensorflow.contrib.distributions.InverseGamma._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.InverseGamma._maybe_assert_valid_sample(self,x)
tensorflow.contrib.distributions.InverseGamma._mean(self)
tensorflow.contrib.distributions.InverseGamma._mode(self)
tensorflow.contrib.distributions.InverseGamma._param_shapes(sample_shape)
tensorflow.contrib.distributions.InverseGamma._prob(self,x)
tensorflow.contrib.distributions.InverseGamma._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.InverseGamma._variance(self)
tensorflow.contrib.distributions.InverseGamma.concentration(self)
tensorflow.contrib.distributions.InverseGamma.rate(self)
tensorflow.contrib.distributions.InverseGammaWithSoftplusConcentrationRate(self,concentration,rate,validate_args=False,allow_nan_stats=True,name='InverseGammaWithSoftplusConcentrationRate')
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma(self,concentration,rate,validate_args=False,allow_nan_stats=True,name='InverseGamma')
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma.__init__(self,concentration,rate,validate_args=False,allow_nan_stats=True,name='InverseGamma')
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._batch_shape(self)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._cdf(self,x)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._entropy(self)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._event_shape(self)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._log_cdf(self,x)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._log_normalization(self)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._maybe_assert_valid_sample(self,x)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._mean(self)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._mode(self)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._param_shapes(sample_shape)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._prob(self,x)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma._variance(self)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma.concentration(self)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGamma.rate(self)
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGammaWithSoftplusConcentrationRate(self,concentration,rate,validate_args=False,allow_nan_stats=True,name='InverseGammaWithSoftplusConcentrationRate')
tensorflow.contrib.distributions.python.ops.inverse_gamma.InverseGammaWithSoftplusConcentrationRate.__init__(self,concentration,rate,validate_args=False,allow_nan_stats=True,name='InverseGammaWithSoftplusConcentrationRate')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/mixture.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.mixture.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.mixture.static_event_shape->static_event_shape.merge_with(d.event_shape).merge_with(d.event_shape)
A:tensorflow.contrib.distributions.python.ops.mixture.static_batch_shape->static_batch_shape.merge_with(d.batch_shape).merge_with(d.batch_shape)
A:tensorflow.contrib.distributions.python.ops.mixture.static_num_components->int(static_num_components)
A:tensorflow.contrib.distributions.python.ops.mixture.cat_batch_shape->cat.batch_shape_tensor()
A:tensorflow.contrib.distributions.python.ops.mixture.cat_batch_rank->tensorflow.python.ops.array_ops.size(cat_batch_shape)
A:tensorflow.contrib.distributions.python.ops.mixture.self._components->list(components)
A:tensorflow.contrib.distributions.python.ops.mixture.cat_probs->tensorflow.python.ops.array_ops.unstack(cat_probs, num=self.num_components, axis=-1)
A:tensorflow.contrib.distributions.python.ops.mixture.expanded_x->tensorflow.python.ops.array_ops.expand_dims(expanded_x, -1)
A:tensorflow.contrib.distributions.python.ops.mixture.x->tensorflow.python.framework.ops.convert_to_tensor(x, name='x')
A:tensorflow.contrib.distributions.python.ops.mixture.cat_log_probs->self._cat_probs(log_probs=True)
A:tensorflow.contrib.distributions.python.ops.mixture.concat_log_probs->tensorflow.python.ops.array_ops.stack(final_log_probs, 0)
A:tensorflow.contrib.distributions.python.ops.mixture.log_sum_exp->tensorflow.python.ops.math_ops.reduce_logsumexp(concat_log_probs, [0])
A:tensorflow.contrib.distributions.python.ops.mixture.n->tensorflow.python.framework.ops.convert_to_tensor(n, name='n')
A:tensorflow.contrib.distributions.python.ops.mixture.static_n->tensorflow.python.framework.tensor_util.constant_value(n)
A:tensorflow.contrib.distributions.python.ops.mixture.cat_samples->self.cat.sample(n, seed=seed)
A:tensorflow.contrib.distributions.python.ops.mixture.static_samples_shape->self.cat.sample(n, seed=seed).get_shape()
A:tensorflow.contrib.distributions.python.ops.mixture.samples_shape->tensorflow.python.ops.array_ops.shape(cat_samples)
A:tensorflow.contrib.distributions.python.ops.mixture.samples_size->tensorflow.python.ops.array_ops.size(cat_samples)
A:tensorflow.contrib.distributions.python.ops.mixture.batch_shape->self.batch_shape_tensor()
A:tensorflow.contrib.distributions.python.ops.mixture.batch_size->tensorflow.python.ops.math_ops.reduce_prod(batch_shape)
A:tensorflow.contrib.distributions.python.ops.mixture.event_shape->self.event_shape_tensor()
A:tensorflow.contrib.distributions.python.ops.mixture.samples_raw_indices->tensorflow.python.ops.array_ops.reshape(math_ops.range(0, samples_size), samples_shape)
A:tensorflow.contrib.distributions.python.ops.mixture.partitioned_samples_indices->tensorflow.python.ops.data_flow_ops.dynamic_partition(data=samples_raw_indices, partitions=cat_samples, num_partitions=self.num_components)
A:tensorflow.contrib.distributions.python.ops.mixture.batch_raw_indices->tensorflow.python.ops.array_ops.reshape(array_ops.tile(math_ops.range(0, batch_size), [n]), samples_shape)
A:tensorflow.contrib.distributions.python.ops.mixture.partitioned_batch_indices->tensorflow.python.ops.data_flow_ops.dynamic_partition(data=batch_raw_indices, partitions=cat_samples, num_partitions=self.num_components)
A:tensorflow.contrib.distributions.python.ops.mixture.n_class->tensorflow.python.ops.array_ops.size(partitioned_samples_indices[c])
A:tensorflow.contrib.distributions.python.ops.mixture.seed->tensorflow.contrib.distributions.python.ops.distribution_util.gen_new_seed(seed, 'mixture')
A:tensorflow.contrib.distributions.python.ops.mixture.samples_class_c->tensorflow.python.ops.array_ops.gather(samples_class_c, lookup_partitioned_batch_indices, name='samples_class_c_gather')
A:tensorflow.contrib.distributions.python.ops.mixture.lhs_flat_ret->tensorflow.python.ops.data_flow_ops.dynamic_stitch(indices=partitioned_samples_indices, data=samples_class)
A:tensorflow.contrib.distributions.python.ops.mixture.ret->tensorflow.python.ops.array_ops.reshape(lhs_flat_ret, array_ops.concat([samples_shape, self.event_shape_tensor()], 0))
tensorflow.contrib.distributions.Mixture(self,cat,components,validate_args=False,allow_nan_stats=True,name='Mixture')
tensorflow.contrib.distributions.Mixture._batch_shape(self)
tensorflow.contrib.distributions.Mixture._batch_shape_tensor(self)
tensorflow.contrib.distributions.Mixture._cat_probs(self,log_probs)
tensorflow.contrib.distributions.Mixture._event_shape(self)
tensorflow.contrib.distributions.Mixture._event_shape_tensor(self)
tensorflow.contrib.distributions.Mixture._log_prob(self,x)
tensorflow.contrib.distributions.Mixture._mean(self)
tensorflow.contrib.distributions.Mixture._prob(self,x)
tensorflow.contrib.distributions.Mixture._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.Mixture.cat(self)
tensorflow.contrib.distributions.Mixture.components(self)
tensorflow.contrib.distributions.Mixture.entropy_lower_bound(self,name='entropy_lower_bound')
tensorflow.contrib.distributions.Mixture.num_components(self)
tensorflow.contrib.distributions.python.ops.mixture.Mixture(self,cat,components,validate_args=False,allow_nan_stats=True,name='Mixture')
tensorflow.contrib.distributions.python.ops.mixture.Mixture.__init__(self,cat,components,validate_args=False,allow_nan_stats=True,name='Mixture')
tensorflow.contrib.distributions.python.ops.mixture.Mixture._batch_shape(self)
tensorflow.contrib.distributions.python.ops.mixture.Mixture._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.mixture.Mixture._cat_probs(self,log_probs)
tensorflow.contrib.distributions.python.ops.mixture.Mixture._event_shape(self)
tensorflow.contrib.distributions.python.ops.mixture.Mixture._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.mixture.Mixture._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.mixture.Mixture._mean(self)
tensorflow.contrib.distributions.python.ops.mixture.Mixture._prob(self,x)
tensorflow.contrib.distributions.python.ops.mixture.Mixture._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.mixture.Mixture.cat(self)
tensorflow.contrib.distributions.python.ops.mixture.Mixture.components(self)
tensorflow.contrib.distributions.python.ops.mixture.Mixture.entropy_lower_bound(self,name='entropy_lower_bound')
tensorflow.contrib.distributions.python.ops.mixture.Mixture.num_components(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/vector_student_t.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.vector_student_t.batch_shape->tensorflow.python.ops.array_ops.identity(shape[:-1], name='batch_shape')
A:tensorflow.contrib.distributions.python.ops.vector_student_t.event_shape->tensorflow.python.ops.array_ops.identity(shape[-1:], name='event_shape')
A:tensorflow.contrib.distributions.python.ops.vector_student_t.shape->tensorflow.python.ops.array_ops.shape(shift)
A:tensorflow.contrib.distributions.python.ops.vector_student_t.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.vector_student_t.affine->tensorflow.contrib.distributions.python.ops.bijectors.Affine(shift=loc, scale_identity_multiplier=scale_identity_multiplier, scale_diag=scale_diag, scale_tril=scale_tril, scale_perturb_factor=scale_perturb_factor, scale_perturb_diag=scale_perturb_diag, validate_args=validate_args)
A:tensorflow.contrib.distributions.python.ops.vector_student_t.distribution->tensorflow.contrib.distributions.python.ops.student_t.StudentT(df=df, loc=array_ops.zeros([], dtype=affine.dtype), scale=array_ops.ones([], dtype=affine.dtype))
A:tensorflow.contrib.distributions.python.ops.vector_student_t.(batch_shape, override_event_shape)->_infer_shapes(affine.scale, affine.shift)
A:tensorflow.contrib.distributions.python.ops.vector_student_t.override_batch_shape->tensorflow.contrib.distributions.python.ops.distribution_util.pick_vector(distribution.is_scalar_batch(), batch_shape, constant_op.constant([], dtype=dtypes.int32))
tensorflow.contrib.distributions.ops.vector_student_t._VectorStudentT(self,df,loc=None,scale_identity_multiplier=None,scale_diag=None,scale_tril=None,scale_perturb_factor=None,scale_perturb_diag=None,validate_args=False,allow_nan_stats=True,name='VectorStudentT')
tensorflow.contrib.distributions.ops.vector_student_t._VectorStudentT.df(self)
tensorflow.contrib.distributions.ops.vector_student_t._VectorStudentT.loc(self)
tensorflow.contrib.distributions.ops.vector_student_t._VectorStudentT.scale(self)
tensorflow.contrib.distributions.ops.vector_student_t._infer_shapes(scale_oppd,shift)
tensorflow.contrib.distributions.python.ops.vector_student_t._VectorStudentT(self,df,loc=None,scale_identity_multiplier=None,scale_diag=None,scale_tril=None,scale_perturb_factor=None,scale_perturb_diag=None,validate_args=False,allow_nan_stats=True,name='VectorStudentT')
tensorflow.contrib.distributions.python.ops.vector_student_t._VectorStudentT.__init__(self,df,loc=None,scale_identity_multiplier=None,scale_diag=None,scale_tril=None,scale_perturb_factor=None,scale_perturb_diag=None,validate_args=False,allow_nan_stats=True,name='VectorStudentT')
tensorflow.contrib.distributions.python.ops.vector_student_t._VectorStudentT.df(self)
tensorflow.contrib.distributions.python.ops.vector_student_t._VectorStudentT.loc(self)
tensorflow.contrib.distributions.python.ops.vector_student_t._VectorStudentT.scale(self)
tensorflow.contrib.distributions.python.ops.vector_student_t._infer_shapes(scale_oppd,shift)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/gamma.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.gamma.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.gamma.self._concentration->tensorflow.python.ops.array_ops.identity(concentration, name='concentration')
A:tensorflow.contrib.distributions.python.ops.gamma.self._rate->tensorflow.python.ops.array_ops.identity(rate, name='rate')
A:tensorflow.contrib.distributions.python.ops.gamma.x->self._maybe_assert_valid_sample(x)
A:tensorflow.contrib.distributions.python.ops.gamma.nan->tensorflow.python.ops.array_ops.fill(self.batch_shape_tensor(), np.array(np.nan, dtype=self.dtype.as_numpy_dtype()), name='nan')
tensorflow.contrib.distributions.Gamma(self,concentration,rate,validate_args=False,allow_nan_stats=True,name='Gamma')
tensorflow.contrib.distributions.Gamma._batch_shape(self)
tensorflow.contrib.distributions.Gamma._batch_shape_tensor(self)
tensorflow.contrib.distributions.Gamma._cdf(self,x)
tensorflow.contrib.distributions.Gamma._entropy(self)
tensorflow.contrib.distributions.Gamma._event_shape(self)
tensorflow.contrib.distributions.Gamma._event_shape_tensor(self)
tensorflow.contrib.distributions.Gamma._log_cdf(self,x)
tensorflow.contrib.distributions.Gamma._log_normalization(self)
tensorflow.contrib.distributions.Gamma._log_prob(self,x)
tensorflow.contrib.distributions.Gamma._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.Gamma._maybe_assert_valid_sample(self,x)
tensorflow.contrib.distributions.Gamma._mean(self)
tensorflow.contrib.distributions.Gamma._mode(self)
tensorflow.contrib.distributions.Gamma._param_shapes(sample_shape)
tensorflow.contrib.distributions.Gamma._prob(self,x)
tensorflow.contrib.distributions.Gamma._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.Gamma._stddev(self)
tensorflow.contrib.distributions.Gamma._variance(self)
tensorflow.contrib.distributions.Gamma.concentration(self)
tensorflow.contrib.distributions.Gamma.rate(self)
tensorflow.contrib.distributions.GammaWithSoftplusConcentrationRate(self,concentration,rate,validate_args=False,allow_nan_stats=True,name='GammaWithSoftplusConcentrationRate')
tensorflow.contrib.distributions._kl_gamma_gamma(g0,g1,name=None)
tensorflow.contrib.distributions.python.ops.gamma.Gamma(self,concentration,rate,validate_args=False,allow_nan_stats=True,name='Gamma')
tensorflow.contrib.distributions.python.ops.gamma.Gamma.__init__(self,concentration,rate,validate_args=False,allow_nan_stats=True,name='Gamma')
tensorflow.contrib.distributions.python.ops.gamma.Gamma._batch_shape(self)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._cdf(self,x)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._entropy(self)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._event_shape(self)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._log_cdf(self,x)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._log_normalization(self)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._maybe_assert_valid_sample(self,x)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._mean(self)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._mode(self)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._param_shapes(sample_shape)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._prob(self,x)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._stddev(self)
tensorflow.contrib.distributions.python.ops.gamma.Gamma._variance(self)
tensorflow.contrib.distributions.python.ops.gamma.Gamma.concentration(self)
tensorflow.contrib.distributions.python.ops.gamma.Gamma.rate(self)
tensorflow.contrib.distributions.python.ops.gamma.GammaWithSoftplusConcentrationRate(self,concentration,rate,validate_args=False,allow_nan_stats=True,name='GammaWithSoftplusConcentrationRate')
tensorflow.contrib.distributions.python.ops.gamma.GammaWithSoftplusConcentrationRate.__init__(self,concentration,rate,validate_args=False,allow_nan_stats=True,name='GammaWithSoftplusConcentrationRate')
tensorflow.contrib.distributions.python.ops.gamma._kl_gamma_gamma(g0,g1,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/student_t.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.student_t.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.student_t.self._df->tensorflow.python.ops.array_ops.identity(df, name='df')
A:tensorflow.contrib.distributions.python.ops.student_t.self._loc->tensorflow.python.ops.array_ops.identity(loc, name='loc')
A:tensorflow.contrib.distributions.python.ops.student_t.self._scale->tensorflow.python.ops.array_ops.identity(scale, name='scale')
A:tensorflow.contrib.distributions.python.ops.student_t.shape->tensorflow.python.ops.array_ops.concat([[n], self.batch_shape_tensor()], 0)
A:tensorflow.contrib.distributions.python.ops.student_t.normal_sample->tensorflow.python.ops.random_ops.random_normal(shape, dtype=self.dtype, seed=seed)
A:tensorflow.contrib.distributions.python.ops.student_t.gamma_sample->tensorflow.python.ops.random_ops.random_gamma([n], 0.5 * df, beta=0.5, dtype=self.dtype, seed=distribution_util.gen_new_seed(seed, salt='student_t'))
A:tensorflow.contrib.distributions.python.ops.student_t.nan->numpy.array(np.nan, dtype=self.dtype.as_numpy_dtype())
A:tensorflow.contrib.distributions.python.ops.student_t.denom->tensorflow.python.ops.array_ops.where(math_ops.greater(self.df, 2.0), self.df - 2.0, array_ops.ones_like(self.df))
A:tensorflow.contrib.distributions.python.ops.student_t.inf->numpy.array(np.inf, dtype=self.dtype.as_numpy_dtype())
A:tensorflow.contrib.distributions.python.ops.student_t.result_where_defined->tensorflow.python.ops.array_ops.where(self.df > array_ops.fill(self.batch_shape_tensor(), 2.0), var, array_ops.fill(self.batch_shape_tensor(), inf, name='inf'))
tensorflow.contrib.distributions.StudentT(self,df,loc,scale,validate_args=False,allow_nan_stats=True,name='StudentT')
tensorflow.contrib.distributions.StudentT._batch_shape(self)
tensorflow.contrib.distributions.StudentT._batch_shape_tensor(self)
tensorflow.contrib.distributions.StudentT._cdf(self,x)
tensorflow.contrib.distributions.StudentT._entropy(self)
tensorflow.contrib.distributions.StudentT._event_shape(self)
tensorflow.contrib.distributions.StudentT._event_shape_tensor(self)
tensorflow.contrib.distributions.StudentT._log_normalization(self)
tensorflow.contrib.distributions.StudentT._log_prob(self,x)
tensorflow.contrib.distributions.StudentT._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.StudentT._mean(self)
tensorflow.contrib.distributions.StudentT._mode(self)
tensorflow.contrib.distributions.StudentT._param_shapes(sample_shape)
tensorflow.contrib.distributions.StudentT._prob(self,x)
tensorflow.contrib.distributions.StudentT._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.StudentT._variance(self)
tensorflow.contrib.distributions.StudentT.df(self)
tensorflow.contrib.distributions.StudentT.loc(self)
tensorflow.contrib.distributions.StudentT.scale(self)
tensorflow.contrib.distributions.StudentTWithAbsDfSoftplusScale(self,df,loc,scale,validate_args=False,allow_nan_stats=True,name='StudentTWithAbsDfSoftplusScale')
tensorflow.contrib.distributions.python.ops.student_t.StudentT(self,df,loc,scale,validate_args=False,allow_nan_stats=True,name='StudentT')
tensorflow.contrib.distributions.python.ops.student_t.StudentT.__init__(self,df,loc,scale,validate_args=False,allow_nan_stats=True,name='StudentT')
tensorflow.contrib.distributions.python.ops.student_t.StudentT._batch_shape(self)
tensorflow.contrib.distributions.python.ops.student_t.StudentT._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.student_t.StudentT._cdf(self,x)
tensorflow.contrib.distributions.python.ops.student_t.StudentT._entropy(self)
tensorflow.contrib.distributions.python.ops.student_t.StudentT._event_shape(self)
tensorflow.contrib.distributions.python.ops.student_t.StudentT._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.student_t.StudentT._log_normalization(self)
tensorflow.contrib.distributions.python.ops.student_t.StudentT._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.student_t.StudentT._log_unnormalized_prob(self,x)
tensorflow.contrib.distributions.python.ops.student_t.StudentT._mean(self)
tensorflow.contrib.distributions.python.ops.student_t.StudentT._mode(self)
tensorflow.contrib.distributions.python.ops.student_t.StudentT._param_shapes(sample_shape)
tensorflow.contrib.distributions.python.ops.student_t.StudentT._prob(self,x)
tensorflow.contrib.distributions.python.ops.student_t.StudentT._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.student_t.StudentT._variance(self)
tensorflow.contrib.distributions.python.ops.student_t.StudentT.df(self)
tensorflow.contrib.distributions.python.ops.student_t.StudentT.loc(self)
tensorflow.contrib.distributions.python.ops.student_t.StudentT.scale(self)
tensorflow.contrib.distributions.python.ops.student_t.StudentTWithAbsDfSoftplusScale(self,df,loc,scale,validate_args=False,allow_nan_stats=True,name='StudentTWithAbsDfSoftplusScale')
tensorflow.contrib.distributions.python.ops.student_t.StudentTWithAbsDfSoftplusScale.__init__(self,df,loc,scale,validate_args=False,allow_nan_stats=True,name='StudentTWithAbsDfSoftplusScale')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/uniform.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.uniform.parameters->locals()
A:tensorflow.contrib.distributions.python.ops.uniform.self._low->tensorflow.python.ops.array_ops.identity(low, name='low')
A:tensorflow.contrib.distributions.python.ops.uniform.self._high->tensorflow.python.ops.array_ops.identity(high, name='high')
A:tensorflow.contrib.distributions.python.ops.uniform.shape->tensorflow.python.ops.array_ops.concat([[n], self.batch_shape_tensor()], 0)
A:tensorflow.contrib.distributions.python.ops.uniform.samples->tensorflow.python.ops.random_ops.random_uniform(shape=shape, dtype=self.dtype, seed=seed)
A:tensorflow.contrib.distributions.python.ops.uniform.broadcast_shape->tensorflow.python.ops.array_ops.broadcast_dynamic_shape(array_ops.shape(x), self.batch_shape_tensor())
A:tensorflow.contrib.distributions.python.ops.uniform.zeros->tensorflow.python.ops.array_ops.zeros(broadcast_shape, dtype=self.dtype)
A:tensorflow.contrib.distributions.python.ops.uniform.ones->tensorflow.python.ops.array_ops.ones(broadcast_shape, dtype=self.dtype)
A:tensorflow.contrib.distributions.python.ops.uniform.result_if_not_big->tensorflow.python.ops.array_ops.where(x < self.low, zeros, (broadcasted_x - self.low) / self.range())
tensorflow.contrib.distributions.Uniform(self,low=0.0,high=1.0,validate_args=False,allow_nan_stats=True,name='Uniform')
tensorflow.contrib.distributions.Uniform._batch_shape(self)
tensorflow.contrib.distributions.Uniform._batch_shape_tensor(self)
tensorflow.contrib.distributions.Uniform._cdf(self,x)
tensorflow.contrib.distributions.Uniform._entropy(self)
tensorflow.contrib.distributions.Uniform._event_shape(self)
tensorflow.contrib.distributions.Uniform._event_shape_tensor(self)
tensorflow.contrib.distributions.Uniform._log_cdf(self,x)
tensorflow.contrib.distributions.Uniform._log_prob(self,x)
tensorflow.contrib.distributions.Uniform._mean(self)
tensorflow.contrib.distributions.Uniform._param_shapes(sample_shape)
tensorflow.contrib.distributions.Uniform._prob(self,x)
tensorflow.contrib.distributions.Uniform._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.Uniform._stddev(self)
tensorflow.contrib.distributions.Uniform._variance(self)
tensorflow.contrib.distributions.Uniform.high(self)
tensorflow.contrib.distributions.Uniform.low(self)
tensorflow.contrib.distributions.Uniform.range(self,name='range')
tensorflow.contrib.distributions.python.ops.uniform.Uniform(self,low=0.0,high=1.0,validate_args=False,allow_nan_stats=True,name='Uniform')
tensorflow.contrib.distributions.python.ops.uniform.Uniform.__init__(self,low=0.0,high=1.0,validate_args=False,allow_nan_stats=True,name='Uniform')
tensorflow.contrib.distributions.python.ops.uniform.Uniform._batch_shape(self)
tensorflow.contrib.distributions.python.ops.uniform.Uniform._batch_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.uniform.Uniform._cdf(self,x)
tensorflow.contrib.distributions.python.ops.uniform.Uniform._entropy(self)
tensorflow.contrib.distributions.python.ops.uniform.Uniform._event_shape(self)
tensorflow.contrib.distributions.python.ops.uniform.Uniform._event_shape_tensor(self)
tensorflow.contrib.distributions.python.ops.uniform.Uniform._log_cdf(self,x)
tensorflow.contrib.distributions.python.ops.uniform.Uniform._log_prob(self,x)
tensorflow.contrib.distributions.python.ops.uniform.Uniform._mean(self)
tensorflow.contrib.distributions.python.ops.uniform.Uniform._param_shapes(sample_shape)
tensorflow.contrib.distributions.python.ops.uniform.Uniform._prob(self,x)
tensorflow.contrib.distributions.python.ops.uniform.Uniform._sample_n(self,n,seed=None)
tensorflow.contrib.distributions.python.ops.uniform.Uniform._stddev(self)
tensorflow.contrib.distributions.python.ops.uniform.Uniform._variance(self)
tensorflow.contrib.distributions.python.ops.uniform.Uniform.high(self)
tensorflow.contrib.distributions.python.ops.uniform.Uniform.low(self)
tensorflow.contrib.distributions.python.ops.uniform.Uniform.range(self,name='range')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/chain.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/power_transform_impl.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.bijectors.power_transform_impl.power->tensorflow.python.framework.tensor_util.constant_value(ops.convert_to_tensor(power, name='power'))
A:tensorflow.contrib.distributions.python.ops.bijectors.power_transform_impl.x->self._maybe_assert_valid_x(x)
A:tensorflow.contrib.distributions.python.ops.bijectors.power_transform_impl.y->self._maybe_assert_valid_y(y)
A:tensorflow.contrib.distributions.python.ops.bijectors.power_transform_impl.event_dims->self._event_dims_tensor(x)
A:tensorflow.contrib.distributions.python.ops.bijectors.power_transform_impl.is_valid->tensorflow.python.ops.check_ops.assert_positive(y, message='Inverse transformation input must be greater than 0.')
tensorflow.contrib.distributions.power_transform_impl.PowerTransform(self,power=0.0,event_ndims=0,validate_args=False,name='power_transform')
tensorflow.contrib.distributions.power_transform_impl.PowerTransform._forward(self,x)
tensorflow.contrib.distributions.power_transform_impl.PowerTransform._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.power_transform_impl.PowerTransform._inverse(self,y)
tensorflow.contrib.distributions.power_transform_impl.PowerTransform._inverse_log_det_jacobian(self,y)
tensorflow.contrib.distributions.power_transform_impl.PowerTransform._maybe_assert_valid_x(self,x)
tensorflow.contrib.distributions.power_transform_impl.PowerTransform._maybe_assert_valid_y(self,y)
tensorflow.contrib.distributions.power_transform_impl.PowerTransform.power(self)
tensorflow.contrib.distributions.python.ops.bijectors.power_transform_impl.PowerTransform(self,power=0.0,event_ndims=0,validate_args=False,name='power_transform')
tensorflow.contrib.distributions.python.ops.bijectors.power_transform_impl.PowerTransform.__init__(self,power=0.0,event_ndims=0,validate_args=False,name='power_transform')
tensorflow.contrib.distributions.python.ops.bijectors.power_transform_impl.PowerTransform._forward(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.power_transform_impl.PowerTransform._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.power_transform_impl.PowerTransform._inverse(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.power_transform_impl.PowerTransform._inverse_log_det_jacobian(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.power_transform_impl.PowerTransform._maybe_assert_valid_x(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.power_transform_impl.PowerTransform._maybe_assert_valid_y(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.power_transform_impl.PowerTransform.power(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/sigmoid_centered.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/affine.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/softplus.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/conditional_bijector.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/bijector.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/softplus_impl.py----------------------------------------
tensorflow.contrib.distributions.python.ops.bijectors.softplus_impl.Softplus(self,event_ndims=0,validate_args=False,name='softplus')
tensorflow.contrib.distributions.python.ops.bijectors.softplus_impl.Softplus.__init__(self,event_ndims=0,validate_args=False,name='softplus')
tensorflow.contrib.distributions.python.ops.bijectors.softplus_impl.Softplus._forward(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.softplus_impl.Softplus._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.softplus_impl.Softplus._inverse(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.softplus_impl.Softplus._inverse_log_det_jacobian(self,y)
tensorflow.contrib.distributions.softplus_impl.Softplus(self,event_ndims=0,validate_args=False,name='softplus')
tensorflow.contrib.distributions.softplus_impl.Softplus._forward(self,x)
tensorflow.contrib.distributions.softplus_impl.Softplus._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.softplus_impl.Softplus._inverse(self,y)
tensorflow.contrib.distributions.softplus_impl.Softplus._inverse_log_det_jacobian(self,y)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/bijector_test_util.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.sess->tensorflow.python.framework.ops.get_default_session()
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.ten_x_pts->ten_x_pts.astype(bijector.dtype.as_numpy_dtype).astype(bijector.dtype.as_numpy_dtype)
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.forward_on_10_pts->bijector.forward(ten_x_pts)
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.(lower_y, upper_y)->tensorflow.python.framework.ops.get_default_session().run([bijector.forward(lower_x), bijector.forward(upper_x)])
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.uniform_x_samps->tensorflow.contrib.distributions.python.ops.uniform.Uniform(low=lower_x, high=upper_x).sample(n, seed=0)
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.uniform_y_samps->tensorflow.contrib.distributions.python.ops.uniform.Uniform(low=lower_y, high=upper_y).sample(n, seed=1)
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.inverse_forward_x->bijector.inverse(bijector.forward(uniform_x_samps))
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.forward_inverse_y->bijector.forward(bijector.inverse(uniform_y_samps))
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.dy_dx->tensorflow.python.ops.math_ops.exp(bijector.inverse_log_det_jacobian(uniform_y_samps))
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.expectation_of_dy_dx_under_uniform->tensorflow.python.ops.math_ops.reduce_mean(dy_dx)
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.dx_dy->tensorflow.python.ops.math_ops.exp(bijector.forward_log_det_jacobian(bijector.inverse(uniform_y_samps)))
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.[forward_on_10_pts_v, dy_dx_v, dx_dy_v, change_measure_dy_dx_v, uniform_x_samps_v, uniform_y_samps_v, inverse_forward_x_v, forward_inverse_y_v]->tensorflow.python.framework.ops.get_default_session().run([forward_on_10_pts, dy_dx, dx_dy, change_measure_dy_dx, uniform_x_samps, uniform_y_samps, inverse_forward_x, forward_inverse_y])
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.f_x->bijector.forward(x)
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.g_y->bijector.inverse(y)
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.[x_from_x, y_from_y, ildj_f_x, fldj_x, ildj_y, fldj_g_y, f_x_v, g_y_v]->tensorflow.python.framework.ops.get_default_session().run([bijector.inverse(f_x), bijector.forward(g_y), bijector.inverse_log_det_jacobian(f_x), bijector.forward_log_det_jacobian(x), bijector.inverse_log_det_jacobian(y), bijector.forward_log_det_jacobian(g_y), f_x, g_y])
tensorflow.contrib.distributions.bijector_test_util.assert_bijective_and_finite(bijector,x,y,atol=0,rtol=1e-05,sess=None)
tensorflow.contrib.distributions.bijector_test_util.assert_finite(array)
tensorflow.contrib.distributions.bijector_test_util.assert_scalar_congruency(bijector,lower_x,upper_x,n=int(10000.0),rtol=0.01,sess=None)
tensorflow.contrib.distributions.bijector_test_util.assert_strictly_decreasing(array)
tensorflow.contrib.distributions.bijector_test_util.assert_strictly_increasing(array)
tensorflow.contrib.distributions.bijector_test_util.assert_strictly_monotonic(array)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.assert_bijective_and_finite(bijector,x,y,atol=0,rtol=1e-05,sess=None)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.assert_finite(array)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.assert_scalar_congruency(bijector,lower_x,upper_x,n=int(10000.0),rtol=0.01,sess=None)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.assert_strictly_decreasing(array)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.assert_strictly_increasing(array)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_test_util.assert_strictly_monotonic(array)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/identity.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/softmax_centered_impl.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.event_ndims->tensorflow.python.framework.tensor_util.constant_value(event_ndims)
A:tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.ndims->tensorflow.python.ops.control_flow_ops.with_dependencies([is_one], ndims)
A:tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.is_zero_or_one->tensorflow.python.ops.check_ops.assert_equal(ndims, 0 if self._static_event_ndims == 0 else 1, message='event_ndims must be 0 or 1')
A:tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.is_one->tensorflow.python.ops.check_ops.assert_equal(ndims, 1, message='event_ndims must be 1')
A:tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.y->tensorflow.python.ops.array_ops.pad(y, paddings=array_ops.concat((array_ops.zeros((ndims - 1, 2), dtype=dtypes.int32), [[0, 1]]), 0))
A:tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.shape->tensorflow.python.framework.tensor_shape.TensorShape(shape)
A:tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.x->tensorflow.python.ops.array_ops.squeeze(x, squeeze_dims=[ndims - 1])
A:tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.begin->tensorflow.python.ops.array_ops.zeros_like(shape)
A:tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.size->tensorflow.python.ops.array_ops.concat([shape[:-1], [shape[-1] - 1]], 0)
A:tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.log_normalization->tensorflow.python.ops.nn_ops.softplus(math_ops.reduce_logsumexp(x, axis=-1, keep_dims=True))
tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.SoftmaxCentered(self,event_ndims=0,validate_args=False,name='softmax_centered')
tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.SoftmaxCentered.__init__(self,event_ndims=0,validate_args=False,name='softmax_centered')
tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.SoftmaxCentered._forward(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.SoftmaxCentered._forward_event_shape(self,input_shape)
tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.SoftmaxCentered._forward_event_shape_tensor(self,input_shape)
tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.SoftmaxCentered._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.SoftmaxCentered._inverse(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.SoftmaxCentered._inverse_event_shape(self,output_shape)
tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.SoftmaxCentered._inverse_event_shape_tensor(self,output_shape)
tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered_impl.SoftmaxCentered._inverse_log_det_jacobian(self,y)
tensorflow.contrib.distributions.softmax_centered_impl.SoftmaxCentered(self,event_ndims=0,validate_args=False,name='softmax_centered')
tensorflow.contrib.distributions.softmax_centered_impl.SoftmaxCentered._forward(self,x)
tensorflow.contrib.distributions.softmax_centered_impl.SoftmaxCentered._forward_event_shape(self,input_shape)
tensorflow.contrib.distributions.softmax_centered_impl.SoftmaxCentered._forward_event_shape_tensor(self,input_shape)
tensorflow.contrib.distributions.softmax_centered_impl.SoftmaxCentered._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.softmax_centered_impl.SoftmaxCentered._inverse(self,y)
tensorflow.contrib.distributions.softmax_centered_impl.SoftmaxCentered._inverse_event_shape(self,output_shape)
tensorflow.contrib.distributions.softmax_centered_impl.SoftmaxCentered._inverse_event_shape_tensor(self,output_shape)
tensorflow.contrib.distributions.softmax_centered_impl.SoftmaxCentered._inverse_log_det_jacobian(self,y)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/exp.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/sigmoid_centered_impl.py----------------------------------------
tensorflow.contrib.distributions.python.ops.bijectors.sigmoid_centered_impl.SigmoidCentered(self,validate_args=False,name='sigmoid_centered')
tensorflow.contrib.distributions.python.ops.bijectors.sigmoid_centered_impl.SigmoidCentered.__init__(self,validate_args=False,name='sigmoid_centered')
tensorflow.contrib.distributions.sigmoid_centered_impl.SigmoidCentered(self,validate_args=False,name='sigmoid_centered')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/affine_linear_operator_impl.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.event_ndims->tensorflow.python.ops.control_flow_ops.with_dependencies([check_ops.assert_less(event_ndims, 2, message='event_ndims must be 0 or 1')], event_ndims)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.shift->tensorflow.python.framework.ops.convert_to_tensor(shift, name='shift')
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.self._shaper->_DistributionShape(batch_ndims=batch_ndims, event_ndims=event_ndims, validate_args=validate_args)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.(y, sample_shape)->self._shaper.make_batch_of_event_sample_matrices(y, expand_batch_dim=False)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.y->self._shaper.undo_make_batch_of_event_sample_matrices(y, sample_shape, expand_batch_dim=False)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.(x, sample_shape)->self._shaper.make_batch_of_event_sample_matrices(x, expand_batch_dim=False)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.x->self._shaper.undo_make_batch_of_event_sample_matrices(x, sample_shape, expand_batch_dim=False)
tensorflow.contrib.distributions.affine_linear_operator_impl.AffineLinearOperator(self,shift=None,scale=None,event_ndims=1,validate_args=False,name='affine_linear_operator')
tensorflow.contrib.distributions.affine_linear_operator_impl.AffineLinearOperator._forward(self,x)
tensorflow.contrib.distributions.affine_linear_operator_impl.AffineLinearOperator._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.affine_linear_operator_impl.AffineLinearOperator._inverse(self,y)
tensorflow.contrib.distributions.affine_linear_operator_impl.AffineLinearOperator._inverse_log_det_jacobian(self,y)
tensorflow.contrib.distributions.affine_linear_operator_impl.AffineLinearOperator._maybe_collect_assertions(self)
tensorflow.contrib.distributions.affine_linear_operator_impl.AffineLinearOperator.scale(self)
tensorflow.contrib.distributions.affine_linear_operator_impl.AffineLinearOperator.shift(self)
tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.AffineLinearOperator(self,shift=None,scale=None,event_ndims=1,validate_args=False,name='affine_linear_operator')
tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.AffineLinearOperator.__init__(self,shift=None,scale=None,event_ndims=1,validate_args=False,name='affine_linear_operator')
tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.AffineLinearOperator._forward(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.AffineLinearOperator._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.AffineLinearOperator._inverse(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.AffineLinearOperator._inverse_log_det_jacobian(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.AffineLinearOperator._maybe_collect_assertions(self)
tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.AffineLinearOperator.scale(self)
tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator_impl.AffineLinearOperator.shift(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/invert.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/inline_impl.py----------------------------------------
tensorflow.contrib.distributions.inline_impl.Inline(self,forward_fn=None,inverse_fn=None,inverse_log_det_jacobian_fn=None,forward_log_det_jacobian_fn=None,forward_event_shape_fn=None,forward_event_shape_tensor_fn=None,inverse_event_shape_fn=None,inverse_event_shape_tensor_fn=None,is_constant_jacobian=False,validate_args=False,name='inline')
tensorflow.contrib.distributions.inline_impl.Inline._forward(self,x,**kwargs)
tensorflow.contrib.distributions.inline_impl.Inline._forward_event_shape(self,input_shape)
tensorflow.contrib.distributions.inline_impl.Inline._forward_event_shape_tensor(self,input_shape)
tensorflow.contrib.distributions.inline_impl.Inline._forward_log_det_jacobian(self,y,**kwargs)
tensorflow.contrib.distributions.inline_impl.Inline._inverse(self,y,**kwargs)
tensorflow.contrib.distributions.inline_impl.Inline._inverse_event_shape(self,output_shape)
tensorflow.contrib.distributions.inline_impl.Inline._inverse_event_shape_tensor(self,output_shape)
tensorflow.contrib.distributions.inline_impl.Inline._inverse_log_det_jacobian(self,y,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.inline_impl.Inline(self,forward_fn=None,inverse_fn=None,inverse_log_det_jacobian_fn=None,forward_log_det_jacobian_fn=None,forward_event_shape_fn=None,forward_event_shape_tensor_fn=None,inverse_event_shape_fn=None,inverse_event_shape_tensor_fn=None,is_constant_jacobian=False,validate_args=False,name='inline')
tensorflow.contrib.distributions.python.ops.bijectors.inline_impl.Inline.__init__(self,forward_fn=None,inverse_fn=None,inverse_log_det_jacobian_fn=None,forward_log_det_jacobian_fn=None,forward_event_shape_fn=None,forward_event_shape_tensor_fn=None,inverse_event_shape_fn=None,inverse_event_shape_tensor_fn=None,is_constant_jacobian=False,validate_args=False,name='inline')
tensorflow.contrib.distributions.python.ops.bijectors.inline_impl.Inline._forward(self,x,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.inline_impl.Inline._forward_event_shape(self,input_shape)
tensorflow.contrib.distributions.python.ops.bijectors.inline_impl.Inline._forward_event_shape_tensor(self,input_shape)
tensorflow.contrib.distributions.python.ops.bijectors.inline_impl.Inline._forward_log_det_jacobian(self,y,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.inline_impl.Inline._inverse(self,y,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.inline_impl.Inline._inverse_event_shape(self,output_shape)
tensorflow.contrib.distributions.python.ops.bijectors.inline_impl.Inline._inverse_event_shape_tensor(self,output_shape)
tensorflow.contrib.distributions.python.ops.bijectors.inline_impl.Inline._inverse_log_det_jacobian(self,y,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/identity_impl.py----------------------------------------
tensorflow.contrib.distributions.identity_impl.Identity(self,validate_args=False,event_ndims=0,name='identity')
tensorflow.contrib.distributions.identity_impl.Identity._forward(self,x)
tensorflow.contrib.distributions.identity_impl.Identity._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.identity_impl.Identity._inverse(self,y)
tensorflow.contrib.distributions.identity_impl.Identity._inverse_log_det_jacobian(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.identity_impl.Identity(self,validate_args=False,event_ndims=0,name='identity')
tensorflow.contrib.distributions.python.ops.bijectors.identity_impl.Identity.__init__(self,validate_args=False,event_ndims=0,name='identity')
tensorflow.contrib.distributions.python.ops.bijectors.identity_impl.Identity._forward(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.identity_impl.Identity._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.identity_impl.Identity._inverse(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.identity_impl.Identity._inverse_log_det_jacobian(self,y)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/invert_impl.py----------------------------------------
tensorflow.contrib.distributions.invert_impl.Invert(self,bijector,validate_args=False,name=None)
tensorflow.contrib.distributions.invert_impl.Invert._forward(self,x,**kwargs)
tensorflow.contrib.distributions.invert_impl.Invert._forward_event_shape(self,input_shape)
tensorflow.contrib.distributions.invert_impl.Invert._forward_event_shape_tensor(self,input_shape)
tensorflow.contrib.distributions.invert_impl.Invert._forward_log_det_jacobian(self,x,**kwargs)
tensorflow.contrib.distributions.invert_impl.Invert._inverse(self,y,**kwargs)
tensorflow.contrib.distributions.invert_impl.Invert._inverse_event_shape(self,output_shape)
tensorflow.contrib.distributions.invert_impl.Invert._inverse_event_shape_tensor(self,output_shape)
tensorflow.contrib.distributions.invert_impl.Invert._inverse_log_det_jacobian(self,y,**kwargs)
tensorflow.contrib.distributions.invert_impl.Invert.bijector(self)
tensorflow.contrib.distributions.python.ops.bijectors.invert_impl.Invert(self,bijector,validate_args=False,name=None)
tensorflow.contrib.distributions.python.ops.bijectors.invert_impl.Invert.__init__(self,bijector,validate_args=False,name=None)
tensorflow.contrib.distributions.python.ops.bijectors.invert_impl.Invert._forward(self,x,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.invert_impl.Invert._forward_event_shape(self,input_shape)
tensorflow.contrib.distributions.python.ops.bijectors.invert_impl.Invert._forward_event_shape_tensor(self,input_shape)
tensorflow.contrib.distributions.python.ops.bijectors.invert_impl.Invert._forward_log_det_jacobian(self,x,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.invert_impl.Invert._inverse(self,y,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.invert_impl.Invert._inverse_event_shape(self,output_shape)
tensorflow.contrib.distributions.python.ops.bijectors.invert_impl.Invert._inverse_event_shape_tensor(self,output_shape)
tensorflow.contrib.distributions.python.ops.bijectors.invert_impl.Invert._inverse_log_det_jacobian(self,y,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.invert_impl.Invert.bijector(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/sigmoid_impl.py----------------------------------------
tensorflow.contrib.distributions.python.ops.bijectors.sigmoid_impl.Sigmoid(self,validate_args=False,name='sigmoid')
tensorflow.contrib.distributions.python.ops.bijectors.sigmoid_impl.Sigmoid.__init__(self,validate_args=False,name='sigmoid')
tensorflow.contrib.distributions.python.ops.bijectors.sigmoid_impl.Sigmoid._forward(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.sigmoid_impl.Sigmoid._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.sigmoid_impl.Sigmoid._inverse(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.sigmoid_impl.Sigmoid._inverse_log_det_jacobian(self,y)
tensorflow.contrib.distributions.sigmoid_impl.Sigmoid(self,validate_args=False,name='sigmoid')
tensorflow.contrib.distributions.sigmoid_impl.Sigmoid._forward(self,x)
tensorflow.contrib.distributions.sigmoid_impl.Sigmoid._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.sigmoid_impl.Sigmoid._inverse(self,y)
tensorflow.contrib.distributions.sigmoid_impl.Sigmoid._inverse_log_det_jacobian(self,y)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/inline.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/conditional_bijector_impl.py----------------------------------------
tensorflow.contrib.distributions.conditional_bijector_impl.ConditionalBijector(bijector.Bijector)
tensorflow.contrib.distributions.conditional_bijector_impl.ConditionalBijector.forward(self,x,name='forward',**condition_kwargs)
tensorflow.contrib.distributions.conditional_bijector_impl.ConditionalBijector.forward_log_det_jacobian(self,x,name='forward_log_det_jacobian',**condition_kwargs)
tensorflow.contrib.distributions.conditional_bijector_impl.ConditionalBijector.inverse(self,y,name='inverse',**condition_kwargs)
tensorflow.contrib.distributions.conditional_bijector_impl.ConditionalBijector.inverse_log_det_jacobian(self,y,name='inverse_log_det_jacobian',**condition_kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.conditional_bijector_impl.ConditionalBijector(bijector.Bijector)
tensorflow.contrib.distributions.python.ops.bijectors.conditional_bijector_impl.ConditionalBijector.forward(self,x,name='forward',**condition_kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.conditional_bijector_impl.ConditionalBijector.forward_log_det_jacobian(self,x,name='forward_log_det_jacobian',**condition_kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.conditional_bijector_impl.ConditionalBijector.inverse(self,y,name='inverse',**condition_kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.conditional_bijector_impl.ConditionalBijector.inverse_log_det_jacobian(self,y,name='inverse_log_det_jacobian',**condition_kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/exp_impl.py----------------------------------------
tensorflow.contrib.distributions.exp_impl.Exp(self,event_ndims=0,validate_args=False,name='exp')
tensorflow.contrib.distributions.python.ops.bijectors.exp_impl.Exp(self,event_ndims=0,validate_args=False,name='exp')
tensorflow.contrib.distributions.python.ops.bijectors.exp_impl.Exp.__init__(self,event_ndims=0,validate_args=False,name='exp')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/affine_impl.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.self._d->tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity(id_shape, v.dtype, verify_pd=self.validate_args)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.self._d_inv->tensorflow.contrib.distributions.python.ops.operator_pd_diag.OperatorPDDiag(1.0 / diag, verify_pd=validate_args)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.v_shape->tensorflow.python.ops.array_ops.shape(perturb_factor)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.id_shape->tensorflow.python.ops.array_ops.concat([v_shape[:-2], [v_shape[-1], v_shape[-1]]], 0)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.m_x->tensorflow.python.ops.math_ops.matmul(self._m, x)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.vt_x->tensorflow.python.ops.math_ops.matmul(self._v, x, adjoint_a=True)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.d_vt_x->self._d.matmul(vt_x)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.v_d_vt_x->tensorflow.python.ops.math_ops.matmul(self._v, d_vt_x)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.minv_x->tensorflow.python.ops.linalg_ops.matrix_triangular_solve(self._m, x)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.vt_minv_x->tensorflow.python.ops.math_ops.matmul(self._v, minv_x, transpose_a=True)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.cinv_vt_minv_x->tensorflow.python.ops.linalg_ops.matrix_solve(self._woodbury_sandwiched_term(), vt_minv_x)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.v_cinv_vt_minv_x->tensorflow.python.ops.math_ops.matmul(self._v, cinv_vt_minv_x)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.minv_v_cinv_vt_minv_x->tensorflow.python.ops.linalg_ops.matrix_triangular_solve(self._m, v_cinv_vt_minv_x)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.log_det_c->tensorflow.python.ops.math_ops.log(math_ops.abs(linalg_ops.matrix_determinant(self._woodbury_sandwiched_term())))
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.log_det_m->tensorflow.python.ops.math_ops.reduce_sum(math_ops.log(math_ops.abs(array_ops.matrix_diag_part(self._m))), axis=[-1])
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.minv_v->tensorflow.python.ops.linalg_ops.matrix_triangular_solve(self._m, self._v)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.vt_minv_v->tensorflow.python.ops.math_ops.matmul(self._v, minv_v, adjoint_a=True)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.event_ndims->tensorflow.python.ops.control_flow_ops.with_dependencies([is_less_than_two], event_ndims)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.is_less_than_two->tensorflow.python.ops.check_ops.assert_less(event_ndims, 2, message='event_ndims must be 0 or 1')
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.self._shift->_as_tensor(shift, 'shift')
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.self._scale->self._create_scale_operator(identity_multiplier=scale_identity_multiplier, diag=scale_diag, tril=scale_tril, perturb_diag=scale_perturb_diag, perturb_factor=scale_perturb_factor, event_ndims=event_ndims, validate_args=validate_args)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.self._shaper->_DistributionShape(batch_ndims=self._infer_batch_ndims(), event_ndims=event_ndims, validate_args=validate_args)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.identity_multiplier->tensorflow.python.ops.control_flow_ops.with_dependencies([check_ops.assert_positive(identity_multiplier)], identity_multiplier)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.diag->self._preprocess_diag(identity_multiplier, diag, event_ndims)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.tril->tensorflow.python.ops.array_ops.matrix_set_diag(tril, new_diag)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.perturb_diag->self._process_matrix(perturb_diag, min_rank=1, event_ndims=event_ndims)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.perturb_factor->self._process_matrix(perturb_factor, min_rank=2, event_ndims=event_ndims)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.identity_shape->tensorflow.python.ops.array_ops.concat([v_shape[:-1], [v_shape[-2]]], 0)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.scaled_identity->tensorflow.contrib.distributions.python.ops.operator_pd_identity.OperatorPDIdentity(identity_shape, perturb_factor.dtype.base_dtype, scale=identity_multiplier, verify_pd=validate_args)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.new_diag->tensorflow.python.ops.array_ops.matrix_diag_part(tril)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.self._rank_two_event_ndims_one->tensorflow.python.ops.math_ops.logical_and(math_ops.equal(array_ops.rank(matrix), min_rank), math_ops.equal(event_ndims, 1))
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.left->tensorflow.python.ops.array_ops.where(self._rank_two_event_ndims_one, 1, 0)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.pad->tensorflow.python.ops.array_ops.concat([array_ops.ones([left], dtype=dtypes.int32), array_ops.shape(matrix)], 0)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.(y, sample_shape)->self._shaper.make_batch_of_event_sample_matrices(y)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.y->self._shaper.undo_make_batch_of_event_sample_matrices(y, sample_shape)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.(x, sample_shape)->self._shaper.make_batch_of_event_sample_matrices(x)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.x->self._shaper.undo_make_batch_of_event_sample_matrices(x, sample_shape)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.d->tensorflow.python.ops.math_ops.cast(array_ops.shape(x)[-1], dtype=self._scale.dtype)
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.fldj->self._scale.sqrt_log_abs_det()
A:tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.start->tensorflow.python.ops.array_ops.where(self._rank_two_event_ndims_one, 1, 0)
tensorflow.contrib.distributions.affine_impl.Affine(self,shift=None,scale_identity_multiplier=None,scale_diag=None,scale_tril=None,scale_perturb_factor=None,scale_perturb_diag=None,event_ndims=1,validate_args=False,name='affine')
tensorflow.contrib.distributions.affine_impl.Affine._create_scale_operator(self,identity_multiplier,diag,tril,perturb_diag,perturb_factor,event_ndims,validate_args)
tensorflow.contrib.distributions.affine_impl.Affine._forward(self,x)
tensorflow.contrib.distributions.affine_impl.Affine._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.affine_impl.Affine._infer_batch_ndims(self)
tensorflow.contrib.distributions.affine_impl.Affine._inverse(self,y)
tensorflow.contrib.distributions.affine_impl.Affine._inverse_log_det_jacobian(self,y)
tensorflow.contrib.distributions.affine_impl.Affine._maybe_validate_identity_multiplier(self,identity_multiplier,validate_args)
tensorflow.contrib.distributions.affine_impl.Affine._preprocess_diag(self,identity_multiplier,diag,event_ndims)
tensorflow.contrib.distributions.affine_impl.Affine._preprocess_tril(self,identity_multiplier,diag,tril,event_ndims)
tensorflow.contrib.distributions.affine_impl.Affine._process_matrix(self,matrix,min_rank,event_ndims)
tensorflow.contrib.distributions.affine_impl.Affine.scale(self)
tensorflow.contrib.distributions.affine_impl.Affine.shift(self)
tensorflow.contrib.distributions.affine_impl._TriLPlusVDVTLightweightOperatorPD(self,tril,v,diag=None,validate_args=False)
tensorflow.contrib.distributions.affine_impl._TriLPlusVDVTLightweightOperatorPD._woodbury_sandwiched_term(self)
tensorflow.contrib.distributions.affine_impl._TriLPlusVDVTLightweightOperatorPD.dtype(self)
tensorflow.contrib.distributions.affine_impl._TriLPlusVDVTLightweightOperatorPD.inputs(self)
tensorflow.contrib.distributions.affine_impl._TriLPlusVDVTLightweightOperatorPD.rank(self)
tensorflow.contrib.distributions.affine_impl._TriLPlusVDVTLightweightOperatorPD.sqrt_log_abs_det(self)
tensorflow.contrib.distributions.affine_impl._TriLPlusVDVTLightweightOperatorPD.sqrt_matmul(self,x)
tensorflow.contrib.distributions.affine_impl._TriLPlusVDVTLightweightOperatorPD.sqrt_solve(self,x)
tensorflow.contrib.distributions.affine_impl._TriLPlusVDVTLightweightOperatorPD.validate_args(self)
tensorflow.contrib.distributions.affine_impl._as_tensor(x,name)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.Affine(self,shift=None,scale_identity_multiplier=None,scale_diag=None,scale_tril=None,scale_perturb_factor=None,scale_perturb_diag=None,event_ndims=1,validate_args=False,name='affine')
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.Affine.__init__(self,shift=None,scale_identity_multiplier=None,scale_diag=None,scale_tril=None,scale_perturb_factor=None,scale_perturb_diag=None,event_ndims=1,validate_args=False,name='affine')
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.Affine._create_scale_operator(self,identity_multiplier,diag,tril,perturb_diag,perturb_factor,event_ndims,validate_args)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.Affine._forward(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.Affine._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.Affine._infer_batch_ndims(self)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.Affine._inverse(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.Affine._inverse_log_det_jacobian(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.Affine._maybe_validate_identity_multiplier(self,identity_multiplier,validate_args)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.Affine._preprocess_diag(self,identity_multiplier,diag,event_ndims)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.Affine._preprocess_tril(self,identity_multiplier,diag,tril,event_ndims)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.Affine._process_matrix(self,matrix,min_rank,event_ndims)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.Affine.scale(self)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl.Affine.shift(self)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl._TriLPlusVDVTLightweightOperatorPD(self,tril,v,diag=None,validate_args=False)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl._TriLPlusVDVTLightweightOperatorPD.__init__(self,tril,v,diag=None,validate_args=False)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl._TriLPlusVDVTLightweightOperatorPD._woodbury_sandwiched_term(self)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl._TriLPlusVDVTLightweightOperatorPD.dtype(self)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl._TriLPlusVDVTLightweightOperatorPD.inputs(self)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl._TriLPlusVDVTLightweightOperatorPD.rank(self)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl._TriLPlusVDVTLightweightOperatorPD.sqrt_log_abs_det(self)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl._TriLPlusVDVTLightweightOperatorPD.sqrt_matmul(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl._TriLPlusVDVTLightweightOperatorPD.sqrt_solve(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl._TriLPlusVDVTLightweightOperatorPD.validate_args(self)
tensorflow.contrib.distributions.python.ops.bijectors.affine_impl._as_tensor(x,name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/softmax_centered.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/chain_impl.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.dtype->list(set([b.dtype for b in bijectors]))
A:tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.func->getattr(b, func_name, None)
A:tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.new_shape->func(new_shape)
A:tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.y->b.inverse(y, **kwargs.get(b.name, {}))
A:tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.ildj->tensorflow.python.framework.constant_op.constant(0.0, dtype=y.dtype, name='inverse_log_det_jacobian')
A:tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.x->b.forward(x, **kwargs.get(b.name, {}))
A:tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.fldj->tensorflow.python.framework.constant_op.constant(0.0, dtype=x.dtype, name='forward_log_det_jacobian')
tensorflow.contrib.distributions.chain_impl.Chain(self,bijectors=None,validate_args=False,name=None)
tensorflow.contrib.distributions.chain_impl.Chain._forward(self,x,**kwargs)
tensorflow.contrib.distributions.chain_impl.Chain._forward_event_shape(self,input_shape)
tensorflow.contrib.distributions.chain_impl.Chain._forward_event_shape_tensor(self,input_shape)
tensorflow.contrib.distributions.chain_impl.Chain._forward_log_det_jacobian(self,x,**kwargs)
tensorflow.contrib.distributions.chain_impl.Chain._inverse(self,y,**kwargs)
tensorflow.contrib.distributions.chain_impl.Chain._inverse_event_shape(self,output_shape)
tensorflow.contrib.distributions.chain_impl.Chain._inverse_event_shape_tensor(self,output_shape)
tensorflow.contrib.distributions.chain_impl.Chain._inverse_log_det_jacobian(self,y,**kwargs)
tensorflow.contrib.distributions.chain_impl.Chain._shape_helper(self,func_name,input_shape,reverse)
tensorflow.contrib.distributions.chain_impl.Chain.bijectors(self)
tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.Chain(self,bijectors=None,validate_args=False,name=None)
tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.Chain.__init__(self,bijectors=None,validate_args=False,name=None)
tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.Chain._forward(self,x,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.Chain._forward_event_shape(self,input_shape)
tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.Chain._forward_event_shape_tensor(self,input_shape)
tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.Chain._forward_log_det_jacobian(self,x,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.Chain._inverse(self,y,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.Chain._inverse_event_shape(self,output_shape)
tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.Chain._inverse_event_shape_tensor(self,output_shape)
tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.Chain._inverse_log_det_jacobian(self,y,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.Chain._shape_helper(self,func_name,input_shape,reverse)
tensorflow.contrib.distributions.python.ops.bijectors.chain_impl.Chain.bijectors(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/affine_linear_operator.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/power_transform.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/cholesky_outer_product_impl.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.event_ndims->tensorflow.python.framework.tensor_util.constant_value(event_ndims)
A:tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.is_matrix->tensorflow.python.ops.check_ops.assert_rank_at_least(x, 2, message='Input must be a (batch of) matrix.')
A:tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.shape->tensorflow.python.ops.array_ops.shape(x)
A:tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.is_square->tensorflow.python.ops.check_ops.assert_equal(shape[-2], shape[-1], message='Input must be a (batch of) square matrix.')
A:tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.x->tensorflow.python.ops.control_flow_ops.with_dependencies([is_matrix, is_square, is_positive_definite], x)
A:tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.is_positive->tensorflow.python.ops.check_ops.assert_positive(x, message='All elements must be positive.')
A:tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.diag->self._make_columnar(diag)
A:tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.is_positive_definite->tensorflow.python.ops.check_ops.assert_positive(diag, message='Input must be positive definite.')
A:tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.p_float->numpy.array(p_int, dtype=x.dtype.as_numpy_dtype)
A:tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.exponents->tensorflow.python.ops.math_ops.linspace(p_float, 1.0, p_int)
A:tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.sum_weighted_log_diag->tensorflow.python.ops.array_ops.squeeze(math_ops.matmul(math_ops.log(diag), exponents[..., array_ops.newaxis]), squeeze_dims=-1)
A:tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.maybe_expanded_shape->tensorflow.python.ops.array_ops.concat([shape[:-1], distribution_util.pick_vector(math_ops.equal(array_ops.rank(x), 1), [1], np.array([], dtype=np.int32)), shape[-1:]], 0)
tensorflow.contrib.distributions.cholesky_outer_product_impl.CholeskyOuterProduct(self,event_ndims=2,validate_args=False,name='cholesky_outer_product')
tensorflow.contrib.distributions.cholesky_outer_product_impl.CholeskyOuterProduct._forward(self,x)
tensorflow.contrib.distributions.cholesky_outer_product_impl.CholeskyOuterProduct._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.cholesky_outer_product_impl.CholeskyOuterProduct._inverse(self,y)
tensorflow.contrib.distributions.cholesky_outer_product_impl.CholeskyOuterProduct._inverse_log_det_jacobian(self,y)
tensorflow.contrib.distributions.cholesky_outer_product_impl.CholeskyOuterProduct._make_columnar(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.CholeskyOuterProduct(self,event_ndims=2,validate_args=False,name='cholesky_outer_product')
tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.CholeskyOuterProduct.__init__(self,event_ndims=2,validate_args=False,name='cholesky_outer_product')
tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.CholeskyOuterProduct._forward(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.CholeskyOuterProduct._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.CholeskyOuterProduct._inverse(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.CholeskyOuterProduct._inverse_log_det_jacobian(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.cholesky_outer_product_impl.CholeskyOuterProduct._make_columnar(self,x)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/cholesky_outer_product.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/bijector_impl.py----------------------------------------
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.mapping->_Mapping(x=x, y=y, kwargs=kwargs)
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.s1->re.sub('(.)([A-Z][a-z]+)', '\\1_\\2', name)
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.self._name->camel_to_snake(type(self).__name__.lstrip('_'))
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.input_shape->tensorflow.python.framework.ops.convert_to_tensor(input_shape, dtype=dtypes.int32, name='input_shape')
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.output_shape->tensorflow.python.framework.ops.convert_to_tensor(output_shape, dtype=dtypes.int32, name='output_shape')
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.x->tensorflow.python.framework.ops.convert_to_tensor(x, name='x')
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.y->tensorflow.python.framework.ops.convert_to_tensor(y, name='y')
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.ildj->self._inverse_log_det_jacobian(y, **kwargs)
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.static_event_ndims->tensorflow.python.framework.tensor_util.constant_value(self.event_ndims)
A:tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.event_range->tensorflow.python.ops.math_ops.range(-self.event_ndims, 0, dtype=dtypes.int32)
tensorflow.contrib.distributions.bijector_impl.Bijector(self,event_ndims=None,graph_parents=None,is_constant_jacobian=False,validate_args=False,dtype=None,name=None)
tensorflow.contrib.distributions.bijector_impl.Bijector._cache(self,mapping)
tensorflow.contrib.distributions.bijector_impl.Bijector._call_forward(self,x,name,**kwargs)
tensorflow.contrib.distributions.bijector_impl.Bijector._call_forward_log_det_jacobian(self,x,name,**kwargs)
tensorflow.contrib.distributions.bijector_impl.Bijector._call_inverse(self,y,name,**kwargs)
tensorflow.contrib.distributions.bijector_impl.Bijector._call_inverse_log_det_jacobian(self,y,name,**kwargs)
tensorflow.contrib.distributions.bijector_impl.Bijector._event_dims_tensor(self,sample)
tensorflow.contrib.distributions.bijector_impl.Bijector._forward(self,x)
tensorflow.contrib.distributions.bijector_impl.Bijector._forward_event_shape(self,input_shape)
tensorflow.contrib.distributions.bijector_impl.Bijector._forward_event_shape_tensor(self,input_shape)
tensorflow.contrib.distributions.bijector_impl.Bijector._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.bijector_impl.Bijector._inverse(self,y)
tensorflow.contrib.distributions.bijector_impl.Bijector._inverse_event_shape(self,output_shape)
tensorflow.contrib.distributions.bijector_impl.Bijector._inverse_event_shape_tensor(self,output_shape)
tensorflow.contrib.distributions.bijector_impl.Bijector._inverse_log_det_jacobian(self,y)
tensorflow.contrib.distributions.bijector_impl.Bijector._lookup(self,x=None,y=None,kwargs=None)
tensorflow.contrib.distributions.bijector_impl.Bijector._maybe_assert_dtype(self,x)
tensorflow.contrib.distributions.bijector_impl.Bijector._name_scope(self,name=None,values=None)
tensorflow.contrib.distributions.bijector_impl.Bijector.dtype(self)
tensorflow.contrib.distributions.bijector_impl.Bijector.event_ndims(self)
tensorflow.contrib.distributions.bijector_impl.Bijector.forward(self,x,name='forward')
tensorflow.contrib.distributions.bijector_impl.Bijector.forward_event_shape(self,input_shape)
tensorflow.contrib.distributions.bijector_impl.Bijector.forward_event_shape_tensor(self,input_shape,name='forward_event_shape_tensor')
tensorflow.contrib.distributions.bijector_impl.Bijector.forward_log_det_jacobian(self,x,name='forward_log_det_jacobian')
tensorflow.contrib.distributions.bijector_impl.Bijector.graph_parents(self)
tensorflow.contrib.distributions.bijector_impl.Bijector.inverse(self,y,name='inverse')
tensorflow.contrib.distributions.bijector_impl.Bijector.inverse_event_shape(self,output_shape)
tensorflow.contrib.distributions.bijector_impl.Bijector.inverse_event_shape_tensor(self,output_shape,name='inverse_event_shape_tensor')
tensorflow.contrib.distributions.bijector_impl.Bijector.inverse_log_det_jacobian(self,y,name='inverse_log_det_jacobian')
tensorflow.contrib.distributions.bijector_impl.Bijector.is_constant_jacobian(self)
tensorflow.contrib.distributions.bijector_impl.Bijector.name(self)
tensorflow.contrib.distributions.bijector_impl.Bijector.validate_args(self)
tensorflow.contrib.distributions.bijector_impl._Mapping(cls,x=None,y=None,ildj=None,kwargs=None)
tensorflow.contrib.distributions.bijector_impl._Mapping._deep_tuple(self,x)
tensorflow.contrib.distributions.bijector_impl._Mapping._merge(self,old,new)
tensorflow.contrib.distributions.bijector_impl._Mapping.merge(self,x=None,y=None,ildj=None,kwargs=None,mapping=None)
tensorflow.contrib.distributions.bijector_impl._Mapping.x_key(self)
tensorflow.contrib.distributions.bijector_impl._Mapping.y_key(self)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector(self,event_ndims=None,graph_parents=None,is_constant_jacobian=False,validate_args=False,dtype=None,name=None)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector.__init__(self,event_ndims=None,graph_parents=None,is_constant_jacobian=False,validate_args=False,dtype=None,name=None)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._cache(self,mapping)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._call_forward(self,x,name,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._call_forward_log_det_jacobian(self,x,name,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._call_inverse(self,y,name,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._call_inverse_log_det_jacobian(self,y,name,**kwargs)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._event_dims_tensor(self,sample)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._forward(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._forward_event_shape(self,input_shape)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._forward_event_shape_tensor(self,input_shape)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._forward_log_det_jacobian(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._inverse(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._inverse_event_shape(self,output_shape)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._inverse_event_shape_tensor(self,output_shape)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._inverse_log_det_jacobian(self,y)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._lookup(self,x=None,y=None,kwargs=None)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._maybe_assert_dtype(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector._name_scope(self,name=None,values=None)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector.dtype(self)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector.event_ndims(self)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector.forward(self,x,name='forward')
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector.forward_event_shape(self,input_shape)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector.forward_event_shape_tensor(self,input_shape,name='forward_event_shape_tensor')
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector.forward_log_det_jacobian(self,x,name='forward_log_det_jacobian')
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector.graph_parents(self)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector.inverse(self,y,name='inverse')
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector.inverse_event_shape(self,output_shape)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector.inverse_event_shape_tensor(self,output_shape,name='inverse_event_shape_tensor')
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector.inverse_log_det_jacobian(self,y,name='inverse_log_det_jacobian')
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector.is_constant_jacobian(self)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector.name(self)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl.Bijector.validate_args(self)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl._Mapping(cls,x=None,y=None,ildj=None,kwargs=None)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl._Mapping.__new__(cls,x=None,y=None,ildj=None,kwargs=None)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl._Mapping._deep_tuple(self,x)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl._Mapping._merge(self,old,new)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl._Mapping.merge(self,x=None,y=None,ildj=None,kwargs=None,mapping=None)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl._Mapping.x_key(self)
tensorflow.contrib.distributions.python.ops.bijectors.bijector_impl._Mapping.y_key(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/bijectors/sigmoid.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/factorization/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/factorization/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/factorization/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/factorization/python/ops/gmm_ops.py----------------------------------------
A:tensorflow.contrib.factorization.python.ops.gmm_ops.num_points->tensorflow.python.ops.math_ops.to_float(array_ops.shape(x)[0])
A:tensorflow.contrib.factorization.python.ops.gmm_ops.num_data->tensorflow.python.ops.math_ops.add_n([array_ops.shape(inp)[0] for inp in data])
A:tensorflow.contrib.factorization.python.ops.gmm_ops.indices->tensorflow.python.ops.array_ops.concat([array_ops.expand_dims(rows, 1), array_ops.expand_dims(assignments, 1)], 1)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.clusters_init->embedding_lookup(data, indices, partition_strategy='div')
A:tensorflow.contrib.factorization.python.ops.gmm_ops.num_shards->len(data)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.self._means->tensorflow.python.ops.variables.Variable(array_ops.expand_dims(_init_clusters_random(data, self._num_classes, self._random_seed), 1), name=self.CLUSTERS_VARIABLE, validate_shape=False)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.covs->tensorflow.python.ops.array_ops.tile(array_ops.expand_dims(array_ops.diag_part(cov), 0), [self._num_classes, 1])
A:tensorflow.contrib.factorization.python.ops.gmm_ops.self._covs->tensorflow.python.ops.variables.Variable(covs, name=self.CLUSTERS_COVS_VARIABLE, validate_shape=False)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.self._alpha->tensorflow.python.ops.variables.Variable(array_ops.tile([1.0 / self._num_classes], [self._num_classes]), name=self.CLUSTERS_WEIGHT, validate_shape=False)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.shard->tensorflow.python.ops.array_ops.expand_dims(shard, 0)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.cholesky->tensorflow.python.ops.linalg_ops.cholesky(self._covs + self._min_var)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.x_mu_cov->tensorflow.python.ops.math_ops.square(linalg_ops.matrix_triangular_solve(cholesky, array_ops.transpose(diff, perm=[0, 2, 1]), lower=True))
A:tensorflow.contrib.factorization.python.ops.gmm_ops.diag_m->tensorflow.python.ops.array_ops.transpose(math_ops.reduce_sum(x_mu_cov, 1))
A:tensorflow.contrib.factorization.python.ops.gmm_ops.det_expanded->tensorflow.python.ops.math_ops.reduce_sum(math_ops.log(self._covs + 0.001), 1, keep_dims=True)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.x2->tensorflow.python.ops.math_ops.square(diff)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.cov_expanded->tensorflow.python.ops.array_ops.expand_dims(1.0 / (self._covs + 0.001), 2)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.x2_cov->tensorflow.python.ops.array_ops.transpose(array_ops.squeeze(x2_cov, [2]))
A:tensorflow.contrib.factorization.python.ops.gmm_ops.self._prior_probs[shard_id]->tensorflow.python.ops.math_ops.reduce_logsumexp(self._probs[shard_id], axis=1, keep_dims=True)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.probs->tensorflow.python.ops.array_ops.expand_dims(self._probs[shard_id], 0)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.self._w[shard_id]->tensorflow.python.ops.array_ops.reshape(math_ops.exp(probs - self._prior_probs[shard_id]), array_ops.stack([self._num_examples, self._num_classes]))
A:tensorflow.contrib.factorization.python.ops.gmm_ops.self._points_in_k[shard_id]->tensorflow.python.ops.math_ops.reduce_sum(self._w[shard_id], 0, keep_dims=True)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.w_mul_x->tensorflow.python.ops.array_ops.expand_dims(math_ops.matmul(self._w[shard_id], array_ops.squeeze(shard, [0]), transpose_a=True), 1)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.x->tensorflow.python.ops.array_ops.concat([shard for _ in range(self._num_classes)], 0)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.x_trans->tensorflow.python.ops.array_ops.transpose(x, perm=[0, 2, 1])
A:tensorflow.contrib.factorization.python.ops.gmm_ops.x_mul_w->tensorflow.python.ops.array_ops.concat([array_ops.expand_dims(x_trans[k, :, :] * self._w[shard_id][:, k], 0) for k in range(self._num_classes)], 0)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.points_in_k->tensorflow.python.ops.array_ops.squeeze(math_ops.add_n(self._points_in_k), squeeze_dims=[0])
A:tensorflow.contrib.factorization.python.ops.gmm_ops.num_examples->tensorflow.python.ops.math_ops.to_float(math_ops.reduce_sum(final_points_in_k))
A:tensorflow.contrib.factorization.python.ops.gmm_ops.self._alpha_op->tensorflow.python.ops.control_flow_ops.no_op()
A:tensorflow.contrib.factorization.python.ops.gmm_ops.points_in_k_expanded->tensorflow.python.ops.array_ops.reshape(points_in_k, [self._num_classes, 1, 1])
A:tensorflow.contrib.factorization.python.ops.gmm_ops.self._means_op->tensorflow.python.ops.control_flow_ops.no_op()
A:tensorflow.contrib.factorization.python.ops.gmm_ops.square_mean->tensorflow.python.ops.math_ops.matmul(mean, mean, transpose_a=True)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.new_covs->tensorflow.python.ops.array_ops.concat(new_covs, 0)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.cov->tensorflow.python.ops.array_ops.diag(self._covs[c, :])
A:tensorflow.contrib.factorization.python.ops.gmm_ops.inverse->tensorflow.python.ops.linalg_ops.matrix_inverse(cov + self._min_var)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.inv_cov->tensorflow.python.ops.array_ops.tile(array_ops.expand_dims(inverse, 0), array_ops.stack([self._num_examples, 1, 1]))
A:tensorflow.contrib.factorization.python.ops.gmm_ops.diff->tensorflow.python.ops.array_ops.transpose(shard - self._means[c, :, :], perm=[1, 0, 2])
A:tensorflow.contrib.factorization.python.ops.gmm_ops.m_left->tensorflow.python.ops.math_ops.matmul(diff, inv_cov)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.self._all_scores->tensorflow.python.ops.array_ops.concat(self._all_scores, 0)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.assignments->GmmAlgorithm(inp, num_clusters, initial_means, params, covariance_type, random_seed).assignments()
A:tensorflow.contrib.factorization.python.ops.gmm_ops.rows->tensorflow.python.ops.math_ops.to_int64(math_ops.range(0, self._num_examples))
A:tensorflow.contrib.factorization.python.ops.gmm_ops.self._scores->tensorflow.python.ops.array_ops.gather_nd(self._all_scores, indices)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.initial_means->tensorflow.python.framework.constant_op.constant(initial_clusters, dtype=dtypes.float32)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.gmm_tool->GmmAlgorithm(inp, num_clusters, initial_means, params, covariance_type, random_seed)
A:tensorflow.contrib.factorization.python.ops.gmm_ops.training_ops->GmmAlgorithm(inp, num_clusters, initial_means, params, covariance_type, random_seed).training_ops()
A:tensorflow.contrib.factorization.python.ops.gmm_ops.(all_scores, scores)->GmmAlgorithm(inp, num_clusters, initial_means, params, covariance_type, random_seed).scores()
tensorflow.contrib.factorization.GmmAlgorithm(self,data,num_classes,initial_means=None,params='wmc',covariance_type=FULL_COVARIANCE,random_seed=0)
tensorflow.contrib.factorization.GmmAlgorithm._create_variables(self,data,initial_means=None)
tensorflow.contrib.factorization.GmmAlgorithm._define_diag_covariance_probs(self,shard_id,shard)
tensorflow.contrib.factorization.GmmAlgorithm._define_distance_to_clusters(self,data)
tensorflow.contrib.factorization.GmmAlgorithm._define_expectation_operation(self,shard_id)
tensorflow.contrib.factorization.GmmAlgorithm._define_full_covariance_probs(self,shard_id,shard)
tensorflow.contrib.factorization.GmmAlgorithm._define_graph(self,data)
tensorflow.contrib.factorization.GmmAlgorithm._define_log_prob_operation(self,shard_id,shard)
tensorflow.contrib.factorization.GmmAlgorithm._define_loglikelihood_operation(self)
tensorflow.contrib.factorization.GmmAlgorithm._define_maximization_operation(self,num_batches)
tensorflow.contrib.factorization.GmmAlgorithm._define_partial_maximization_operation(self,shard_id,shard)
tensorflow.contrib.factorization.GmmAlgorithm._define_prior_log_prob_operation(self,shard_id)
tensorflow.contrib.factorization.GmmAlgorithm.alphas(self)
tensorflow.contrib.factorization.GmmAlgorithm.assignments(self)
tensorflow.contrib.factorization.GmmAlgorithm.clusters(self)
tensorflow.contrib.factorization.GmmAlgorithm.covariances(self)
tensorflow.contrib.factorization.GmmAlgorithm.scores(self)
tensorflow.contrib.factorization.GmmAlgorithm.training_ops(self)
tensorflow.contrib.factorization._covariance(x,diag)
tensorflow.contrib.factorization._init_clusters_random(data,num_clusters,random_seed)
tensorflow.contrib.factorization.gmm(inp,initial_clusters,num_clusters,random_seed,covariance_type=FULL_COVARIANCE,params='wmc')
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm(self,data,num_classes,initial_means=None,params='wmc',covariance_type=FULL_COVARIANCE,random_seed=0)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm.__init__(self,data,num_classes,initial_means=None,params='wmc',covariance_type=FULL_COVARIANCE,random_seed=0)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm._create_variables(self,data,initial_means=None)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm._define_diag_covariance_probs(self,shard_id,shard)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm._define_distance_to_clusters(self,data)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm._define_expectation_operation(self,shard_id)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm._define_full_covariance_probs(self,shard_id,shard)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm._define_graph(self,data)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm._define_log_prob_operation(self,shard_id,shard)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm._define_loglikelihood_operation(self)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm._define_maximization_operation(self,num_batches)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm._define_partial_maximization_operation(self,shard_id,shard)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm._define_prior_log_prob_operation(self,shard_id)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm.alphas(self)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm.assignments(self)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm.clusters(self)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm.covariances(self)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm.scores(self)
tensorflow.contrib.factorization.python.ops.gmm_ops.GmmAlgorithm.training_ops(self)
tensorflow.contrib.factorization.python.ops.gmm_ops._covariance(x,diag)
tensorflow.contrib.factorization.python.ops.gmm_ops._init_clusters_random(data,num_clusters,random_seed)
tensorflow.contrib.factorization.python.ops.gmm_ops.gmm(inp,initial_clusters,num_clusters,random_seed,covariance_type=FULL_COVARIANCE,params='wmc')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/factorization/python/ops/gen_clustering_ops.py----------------------------------------
A:tensorflow.contrib.factorization.python.ops.gen_clustering_ops.result->_InitOpDefLibrary().apply_op('NearestNeighbors', points=points, centers=centers, k=k, name=name)
A:tensorflow.contrib.factorization.python.ops.gen_clustering_ops._NearestNeighborsOutput->collections.namedtuple('NearestNeighbors', _nearest_neighbors_outputs)
A:tensorflow.contrib.factorization.python.ops.gen_clustering_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.factorization.python.ops.gen_clustering_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.factorization.python.ops.gen_clustering_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.factorization.ops.gen_clustering_ops._InitOpDefLibrary()
tensorflow.contrib.factorization.ops.gen_clustering_ops.kmeans_plus_plus_initialization(points,num_to_sample,seed,num_retries_per_sample,name=None)
tensorflow.contrib.factorization.ops.gen_clustering_ops.nearest_neighbors(points,centers,k,name=None)
tensorflow.contrib.factorization.python.ops.gen_clustering_ops._InitOpDefLibrary()
tensorflow.contrib.factorization.python.ops.gen_clustering_ops.kmeans_plus_plus_initialization(points,num_to_sample,seed,num_retries_per_sample,name=None)
tensorflow.contrib.factorization.python.ops.gen_clustering_ops.nearest_neighbors(points,centers,k,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/factorization/python/ops/gen_factorization_ops.py----------------------------------------
A:tensorflow.contrib.factorization.python.ops.gen_factorization_ops.result->_InitOpDefLibrary().apply_op('WALSComputePartialLhsAndRhs', factors=factors, factor_weights=factor_weights, unobserved_weights=unobserved_weights, input_weights=input_weights, input_indices=input_indices, input_values=input_values, input_block_size=input_block_size, input_is_transpose=input_is_transpose, name=name)
A:tensorflow.contrib.factorization.python.ops.gen_factorization_ops._WALSComputePartialLhsAndRhsOutput->collections.namedtuple('WALSComputePartialLhsAndRhs', _wals_compute_partial_lhs_and_rhs_outputs)
A:tensorflow.contrib.factorization.python.ops.gen_factorization_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.factorization.python.ops.gen_factorization_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.factorization.python.ops.gen_factorization_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.factorization.ops.gen_factorization_ops._InitOpDefLibrary()
tensorflow.contrib.factorization.ops.gen_factorization_ops.masked_matmul(a,b,mask_indices,transpose_a,transpose_b,name=None)
tensorflow.contrib.factorization.ops.gen_factorization_ops.wals_compute_partial_lhs_and_rhs(factors,factor_weights,unobserved_weights,input_weights,input_indices,input_values,input_block_size,input_is_transpose,name=None)
tensorflow.contrib.factorization.python.ops.gen_factorization_ops._InitOpDefLibrary()
tensorflow.contrib.factorization.python.ops.gen_factorization_ops.masked_matmul(a,b,mask_indices,transpose_a,transpose_b,name=None)
tensorflow.contrib.factorization.python.ops.gen_factorization_ops.wals_compute_partial_lhs_and_rhs(factors,factor_weights,unobserved_weights,input_weights,input_indices,input_values,input_block_size,input_is_transpose,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/factorization/python/ops/factorization_ops.py----------------------------------------
A:tensorflow.contrib.factorization.python.ops.factorization_ops._factorization_ops->tensorflow.contrib.util.loader.load_op_library(resource_loader.get_path_to_datafile('_factorization_ops.so'))
A:tensorflow.contrib.factorization.python.ops.factorization_ops.self._row_weights->WALSModel._create_weights(row_weights, self._input_rows, self._num_row_shards, 'row_weights')
A:tensorflow.contrib.factorization.python.ops.factorization_ops.self._col_weights->WALSModel._create_weights(col_weights, self._input_cols, self._num_col_shards, 'col_weights')
A:tensorflow.contrib.factorization.python.ops.factorization_ops.self._row_factors->self._create_factors(self._input_rows, self._n_components, self._num_row_shards, row_init, 'row_factors')
A:tensorflow.contrib.factorization.python.ops.factorization_ops.self._col_factors->self._create_factors(self._input_cols, self._n_components, self._num_col_shards, col_init, 'col_factors')
A:tensorflow.contrib.factorization.python.ops.factorization_ops.self._row_gramian->self._create_gramian(self._n_components, 'row_gramian')
A:tensorflow.contrib.factorization.python.ops.factorization_ops.self._col_gramian->self._create_gramian(self._n_components, 'col_gramian')
A:tensorflow.contrib.factorization.python.ops.factorization_ops.self._row_update_prep_gramian->self._prepare_gramian(self._col_factors, self._col_gramian)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.self._col_update_prep_gramian->self._prepare_gramian(self._row_factors, self._row_gramian)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.(shard_size, residual)->divmod(dims, num_shards)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.init->init()
A:tensorflow.contrib.factorization.python.ops.factorization_ops.sizes->cls._shard_sizes(num_wts, num_shards)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.var_init->make_wt_initializer(i, size)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.cache_init->tensorflow.python.ops.state_ops.assign(c, var[i], validate_shape=False)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.cache_reset->tensorflow.python.ops.control_flow_ops.group(*reset_ops)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.cache->WALSModel._transient_var(name=name)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.(self._row_factors_cache, row_factors_cache_init, row_factors_cache_reset)->self._cached_copy(self._row_factors, 'row_factors_cache', pass_through=not self._use_factors_weights_cache)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.(self._col_factors_cache, col_factors_cache_init, col_factors_cache_reset)->self._cached_copy(self._col_factors, 'col_factors_cache', pass_through=not self._use_factors_weights_cache)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.(self._row_wt_cache, row_wt_cache_init, _)->self._cached_copy(self._row_weights, 'row_wt_cache', pass_through=not self._use_factors_weights_cache)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.(self._col_wt_cache, col_wt_cache_init, _)->self._cached_copy(self._col_weights, 'col_wt_cache', pass_through=not self._use_factors_weights_cache)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.(self._row_gramian_cache, row_gramian_cache_init, row_gramian_cache_reset)->self._cached_copy(self._row_gramian, 'row_gramian_cache', pass_through=False)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.(self._col_gramian_cache, col_gramian_cache_init, col_gramian_cache_reset)->self._cached_copy(self._col_gramian, 'col_gramian_cache', pass_through=False)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.self._row_updates_init->tensorflow.python.ops.control_flow_ops.group(col_factors_cache_init, row_factors_cache_reset, col_gramian_cache_init, row_gramian_cache_reset)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.self._col_updates_init->tensorflow.python.ops.control_flow_ops.group(row_factors_cache_init, col_factors_cache_reset, row_gramian_cache_init, col_gramian_cache_reset)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.self._worker_init->tensorflow.python.ops.control_flow_ops.no_op(name='worker_init')
A:tensorflow.contrib.factorization.python.ops.factorization_ops.assignments->tensorflow.python.ops.math_ops.cast(assignments, dtypes.int32)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.new_ids->tensorflow.python.ops.array_ops.where(assignments < extras, ids % (ids_per_shard + 1), (ids - extras) % ids_per_shard)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.num_shards->len(factor)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.(assignments, new_ids)->sharding_func(indices)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.sharded_ids->tensorflow.python.ops.data_flow_ops.dynamic_partition(new_ids, assignments, num_shards)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.sharded_values->tensorflow.python.ops.data_flow_ops.dynamic_partition(values, assignments, num_shards)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.sharding_func->WALSModel._get_sharding_func(self._input_cols, self._num_col_shards)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.(row_ids, col_ids)->tensorflow.python.ops.array_ops.split(value=sp_input.indices, num_or_size_splits=2, axis=1)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.(update_row_indices, all_row_ids)->tensorflow.python.ops.array_ops.unique(row_ids[:, 0])
A:tensorflow.contrib.factorization.python.ops.factorization_ops.(update_col_indices, all_col_ids)->tensorflow.python.ops.array_ops.unique(col_ids[:, 0])
A:tensorflow.contrib.factorization.python.ops.factorization_ops.col_ids->tensorflow.python.ops.array_ops.expand_dims(math_ops.cast(all_col_ids, dtypes.int64), 1)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.row_ids->tensorflow.python.ops.array_ops.expand_dims(math_ops.cast(all_row_ids, dtypes.int64), 1)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.num_rows->tensorflow.python.ops.math_ops.cast(array_ops.shape(update_indices)[0], dtypes.int64)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.right->tensorflow.python.ops.embedding_ops.embedding_lookup(right_factors, gather_indices, partition_strategy='div')
A:tensorflow.contrib.factorization.python.ops.factorization_ops.new_sp_indices->tensorflow.python.ops.array_ops.concat([row_ids, col_ids], 1)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.new_sp_input->tensorflow.python.framework.sparse_tensor.SparseTensor(indices=new_sp_indices, values=sp_input.values, dense_shape=new_sp_shape)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.new_left_values->tensorflow.python.ops.array_ops.squeeze(linalg_ops.matrix_solve(total_lhs, total_rhs), [2])
A:tensorflow.contrib.factorization.python.ops.factorization_ops.row_weights_slice->tensorflow.python.ops.control_flow_ops.cond(math_ops.equal(array_ops.rank(row_weights), 0), lambda : array_ops.ones([num_indices]) * row_weights, lambda : math_ops.cast(row_weights, dtypes.float32))
A:tensorflow.contrib.factorization.python.ops.factorization_ops.col_weights->tensorflow.python.ops.embedding_ops.embedding_lookup(col_wt, gather_indices, partition_strategy='div')
A:tensorflow.contrib.factorization.python.ops.factorization_ops.(partial_lhs, total_rhs)->tensorflow.contrib.factorization.python.ops.gen_factorization_ops.wals_compute_partial_lhs_and_rhs(right, col_weights, self._unobserved_weight, row_weights_slice, new_sp_input.indices, new_sp_input.values, num_rows, transpose_input, name='wals_compute_partial_lhs_rhs')
A:tensorflow.contrib.factorization.python.ops.factorization_ops.total_rhs->tensorflow.python.ops.array_ops.expand_dims(total_rhs, -1)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.update_op->self.scatter_update(left, update_indices, new_left_values, sharding_func, name=update_op_name)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.sp_approx_vals->tensorflow.contrib.factorization.python.ops.gen_factorization_ops.masked_matmul(new_left_values, right, loss_sp_input.indices, transpose_a=False, transpose_b=True)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.sp_approx->tensorflow.python.framework.sparse_tensor.SparseTensor(loss_sp_input.indices, sp_approx_vals, loss_sp_input.dense_shape)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.sp_approx_sq->tensorflow.python.ops.math_ops.square(sp_approx)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.sp_residual->tensorflow.python.ops.sparse_ops.sparse_add(loss_sp_input, sp_approx * -1)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.sp_residual_sq->tensorflow.python.ops.math_ops.square(sp_residual)
A:tensorflow.contrib.factorization.python.ops.factorization_ops.partial_row_gramian->tensorflow.python.ops.math_ops.matmul(new_left_values, new_left_values, transpose_a=True)
tensorflow.contrib.factorization.WALSModel(self,input_rows,input_cols,n_components,unobserved_weight=0.1,regularization=None,row_init='random',col_init='random',num_row_shards=1,num_col_shards=1,row_weights=1,col_weights=1,use_factors_weights_cache=True)
tensorflow.contrib.factorization.WALSModel._cached_copy(self,var,name,pass_through=False)
tensorflow.contrib.factorization.WALSModel._create_factors(cls,rows,cols,num_shards,init,name)
tensorflow.contrib.factorization.WALSModel._create_gramian(n_components,name)
tensorflow.contrib.factorization.WALSModel._create_transient_vars(self)
tensorflow.contrib.factorization.WALSModel._create_weights(cls,wt_init,num_wts,num_shards,name)
tensorflow.contrib.factorization.WALSModel._get_sharding_func(size,num_shards)
tensorflow.contrib.factorization.WALSModel._prepare_gramian(self,factors,gramian)
tensorflow.contrib.factorization.WALSModel._process_input_helper(self,update_row_factors,sp_input=None,transpose_input=False,row_weights=None)
tensorflow.contrib.factorization.WALSModel._shard_sizes(cls,dims,num_shards)
tensorflow.contrib.factorization.WALSModel._transient_var(name)
tensorflow.contrib.factorization.WALSModel.col_factors(self)
tensorflow.contrib.factorization.WALSModel.col_update_prep_gramian_op(self)
tensorflow.contrib.factorization.WALSModel.col_weights(self)
tensorflow.contrib.factorization.WALSModel.initialize_col_update_op(self)
tensorflow.contrib.factorization.WALSModel.initialize_op(self)
tensorflow.contrib.factorization.WALSModel.initialize_row_update_op(self)
tensorflow.contrib.factorization.WALSModel.project_col_factors(self,sp_input=None,transpose_input=False,projection_weights=None)
tensorflow.contrib.factorization.WALSModel.project_row_factors(self,sp_input=None,transpose_input=False,projection_weights=None)
tensorflow.contrib.factorization.WALSModel.row_factors(self)
tensorflow.contrib.factorization.WALSModel.row_update_prep_gramian_op(self)
tensorflow.contrib.factorization.WALSModel.row_weights(self)
tensorflow.contrib.factorization.WALSModel.scatter_update(cls,factor,indices,values,sharding_func,name=None)
tensorflow.contrib.factorization.WALSModel.update_col_factors(self,sp_input=None,transpose_input=False)
tensorflow.contrib.factorization.WALSModel.update_row_factors(self,sp_input=None,transpose_input=False)
tensorflow.contrib.factorization.WALSModel.worker_init(self)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel(self,input_rows,input_cols,n_components,unobserved_weight=0.1,regularization=None,row_init='random',col_init='random',num_row_shards=1,num_col_shards=1,row_weights=1,col_weights=1,use_factors_weights_cache=True)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.__init__(self,input_rows,input_cols,n_components,unobserved_weight=0.1,regularization=None,row_init='random',col_init='random',num_row_shards=1,num_col_shards=1,row_weights=1,col_weights=1,use_factors_weights_cache=True)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel._cached_copy(self,var,name,pass_through=False)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel._create_factors(cls,rows,cols,num_shards,init,name)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel._create_gramian(n_components,name)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel._create_transient_vars(self)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel._create_weights(cls,wt_init,num_wts,num_shards,name)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel._get_sharding_func(size,num_shards)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel._prepare_gramian(self,factors,gramian)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel._process_input_helper(self,update_row_factors,sp_input=None,transpose_input=False,row_weights=None)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel._shard_sizes(cls,dims,num_shards)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel._transient_var(name)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.col_factors(self)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.col_update_prep_gramian_op(self)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.col_weights(self)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.initialize_col_update_op(self)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.initialize_op(self)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.initialize_row_update_op(self)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.project_col_factors(self,sp_input=None,transpose_input=False,projection_weights=None)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.project_row_factors(self,sp_input=None,transpose_input=False,projection_weights=None)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.row_factors(self)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.row_update_prep_gramian_op(self)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.row_weights(self)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.scatter_update(cls,factor,indices,values,sharding_func,name=None)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.update_col_factors(self,sp_input=None,transpose_input=False)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.update_row_factors(self,sp_input=None,transpose_input=False)
tensorflow.contrib.factorization.python.ops.factorization_ops.WALSModel.worker_init(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/factorization/python/ops/gmm.py----------------------------------------
A:tensorflow.contrib.factorization.python.ops.gmm.sum_metric->tensorflow.contrib.framework.local_variable(constant_op.constant(0.0))
A:tensorflow.contrib.factorization.python.ops.gmm.sum_update->tensorflow.contrib.framework.local_variable(constant_op.constant(0.0)).assign_add(scalar_tensor)
A:tensorflow.contrib.factorization.python.ops.gmm.results->self.evaluate(input_fn=input_fn, batch_size=batch_size, steps=steps)
A:tensorflow.contrib.factorization.python.ops.gmm.clusters->tensorflow.contrib.framework.python.framework.checkpoint_utils.load_variable(self.model_dir, gmm_ops.GmmAlgorithm.CLUSTERS_VARIABLE)
A:tensorflow.contrib.factorization.python.ops.gmm.(all_scores, model_predictions, losses, training_op)->tensorflow.contrib.factorization.python.ops.gmm_ops.gmm(self._parse_tensor_or_dict(features), self._training_initial_clusters, self._num_clusters, self._random_seed, self._covariance_type, self._params)
A:tensorflow.contrib.factorization.python.ops.gmm.incr_step->tensorflow.python.ops.state_ops.assign_add(variables.get_global_step(), 1)
A:tensorflow.contrib.factorization.python.ops.gmm.loss->tensorflow.python.ops.math_ops.reduce_sum(losses)
A:tensorflow.contrib.factorization.python.ops.gmm.training_op->with_dependencies([training_op, incr_step], loss)
tensorflow.contrib.factorization.GMM(self,num_clusters,model_dir=None,random_seed=0,params='wmc',initial_clusters='random',covariance_type='full',config=None)
tensorflow.contrib.factorization.GMM._model_builder(self)
tensorflow.contrib.factorization.GMM._parse_tensor_or_dict(self,features)
tensorflow.contrib.factorization.GMM.clusters(self)
tensorflow.contrib.factorization.GMM.covariances(self)
tensorflow.contrib.factorization.GMM.predict_assignments(self,input_fn=None,batch_size=None,outputs=None)
tensorflow.contrib.factorization.GMM.score(self,input_fn=None,batch_size=None,steps=None)
tensorflow.contrib.factorization.GMM.weights(self)
tensorflow.contrib.factorization._streaming_sum(scalar_tensor)
tensorflow.contrib.factorization.python.ops.gmm.GMM(self,num_clusters,model_dir=None,random_seed=0,params='wmc',initial_clusters='random',covariance_type='full',config=None)
tensorflow.contrib.factorization.python.ops.gmm.GMM.__init__(self,num_clusters,model_dir=None,random_seed=0,params='wmc',initial_clusters='random',covariance_type='full',config=None)
tensorflow.contrib.factorization.python.ops.gmm.GMM._model_builder(self)
tensorflow.contrib.factorization.python.ops.gmm.GMM._parse_tensor_or_dict(self,features)
tensorflow.contrib.factorization.python.ops.gmm.GMM.clusters(self)
tensorflow.contrib.factorization.python.ops.gmm.GMM.covariances(self)
tensorflow.contrib.factorization.python.ops.gmm.GMM.predict_assignments(self,input_fn=None,batch_size=None,outputs=None)
tensorflow.contrib.factorization.python.ops.gmm.GMM.score(self,input_fn=None,batch_size=None,steps=None)
tensorflow.contrib.factorization.python.ops.gmm.GMM.weights(self)
tensorflow.contrib.factorization.python.ops.gmm._streaming_sum(scalar_tensor)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/factorization/python/ops/clustering_ops.py----------------------------------------
A:tensorflow.contrib.factorization.python.ops.clustering_ops._clustering_ops->tensorflow.contrib.util.loader.load_op_library(resource_loader.get_path_to_datafile('_clustering_ops.so'))
A:tensorflow.contrib.factorization.python.ops.clustering_ops.self._mini_batch_steps_per_iteration->int(mini_batch_steps_per_iteration)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.clusters->tensorflow.python.ops.nn_impl.l2_normalize(clusters, dim=1)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.inp->tensorflow.python.ops.nn_impl.l2_normalize(inp, dim=1)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.scores->self._distance_graph(inputs, clusters, self._distance_metric)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.(indices, distances)->tensorflow.contrib.factorization.python.ops.gen_clustering_ops.nearest_neighbors(inp, clusters, 1)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.num_data->tensorflow.python.ops.math_ops.add_n([array_ops.shape(inp)[0] for inp in self._inputs])
A:tensorflow.contrib.factorization.python.ops.clustering_ops.indices->tensorflow.python.ops.random_ops.random_uniform(array_ops.reshape(self._num_clusters, [-1]), minval=0, maxval=math_ops.cast(num_data, dtypes.int64), seed=self._random_seed, dtype=dtypes.int64)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.clusters_init->tensorflow.python.ops.nn_impl.l2_normalize(clusters_init, dim=1)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.initialized->tensorflow.python.ops.control_flow_ops.with_dependencies([clusters_init], array_ops.identity(cluster_centers_initialized))
A:tensorflow.contrib.factorization.python.ops.clustering_ops.assign_centers->tensorflow.python.ops.control_flow_ops.with_dependencies([assign_centers], state_ops.assign(cluster_centers_initialized, True))
A:tensorflow.contrib.factorization.python.ops.clustering_ops.init_value->tensorflow.python.ops.array_ops.constant([], dtype=dtypes.float32)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.cluster_centers->tensorflow.python.ops.nn_impl.l2_normalize(cluster_centers_updated, dim=1)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.cluster_centers_initialized->tensorflow.python.ops.variables.Variable(False, dtype=dtypes.bool, name='initialized')
A:tensorflow.contrib.factorization.python.ops.clustering_ops.cluster_centers_updated->tensorflow.python.ops.variables.Variable(init_value, name='clusters_updated', validate_shape=False)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.update_in_steps->tensorflow.python.ops.variables.Variable(self._mini_batch_steps_per_iteration, dtype=dtypes.int64, name='update_in_steps')
A:tensorflow.contrib.factorization.python.ops.clustering_ops.cluster_counts->tensorflow.python.ops.variables.Variable(array_ops.zeros([self._num_clusters], dtype=dtypes.int64))
A:tensorflow.contrib.factorization.python.ops.clustering_ops.(cluster_centers_var, cluster_centers_initialized, total_counts, cluster_centers_updated, update_in_steps)->self._create_variables()
A:tensorflow.contrib.factorization.python.ops.clustering_ops.init_op->self._initialize_clusters(cluster_centers_var, cluster_centers_initialized, cluster_centers_updated)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.inputs->self._l2_normalize_data(inputs)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.(all_scores, scores, cluster_idx)->self._infer_graph(inputs, cluster_centers)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.sync_updates_op->self._mini_batch_sync_updates_op(update_in_steps, cluster_centers_var, cluster_centers_updated, total_counts)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.training_op->self._full_batch_training_op(inputs, cluster_idx, cluster_centers_var)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.cluster_idx->tensorflow.python.ops.array_ops.reshape(cluster_idx, [-1])
A:tensorflow.contrib.factorization.python.ops.clustering_ops.(unique_ids, unique_idx)->tensorflow.python.ops.array_ops.unique(cluster_idx)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.num_unique_cluster_idx->tensorflow.python.ops.array_ops.size(unique_ids)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.old_counts->tensorflow.python.ops.array_ops.gather(total_counts, unique_ids)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.old_cluster_centers->tensorflow.python.ops.array_ops.gather(cluster_centers, unique_ids)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.count_updates->tensorflow.python.ops.math_ops.unsorted_segment_sum(array_ops.ones_like(unique_idx, dtype=total_counts.dtype), unique_idx, num_unique_cluster_idx)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.cluster_center_updates->tensorflow.python.ops.math_ops.unsorted_segment_sum(inp, unique_idx, num_unique_cluster_idx)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.broadcast_shape->tensorflow.python.ops.array_ops.concat([array_ops.reshape(num_unique_cluster_idx, [1]), array_ops.ones(array_ops.reshape(array_ops.rank(inp) - 1, [1]), dtype=dtypes.int32)], 0)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.learning_rate->tensorflow.python.ops.array_ops.reshape(learning_rate, broadcast_shape)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.update_counts->tensorflow.python.ops.state_ops.scatter_add(total_counts, unique_ids, count_updates)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.update_cluster_centers->tensorflow.python.ops.state_ops.scatter_add(cluster_centers, unique_ids, cluster_center_updates)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.epsilon->tensorflow.python.framework.constant_op.constant(1e-06, dtype=inputs[0].dtype)
A:tensorflow.contrib.factorization.python.ops.clustering_ops.new_clusters_centers->tensorflow.python.ops.nn_impl.l2_normalize(new_clusters_centers, dim=1)
tensorflow.contrib.factorization.KMeans(self,inputs,num_clusters,initial_clusters=RANDOM_INIT,distance_metric=SQUARED_EUCLIDEAN_DISTANCE,use_mini_batch=False,mini_batch_steps_per_iteration=1,random_seed=0,kmeans_plus_plus_num_retries=2)
tensorflow.contrib.factorization.KMeans._clusters_l2_normalized(self)
tensorflow.contrib.factorization.KMeans._compute_cosine_distance(cls,inputs,clusters,inputs_normalized=True)
tensorflow.contrib.factorization.KMeans._compute_euclidean_distance(cls,inputs,clusters)
tensorflow.contrib.factorization.KMeans._create_variables(self)
tensorflow.contrib.factorization.KMeans._distance_graph(cls,inputs,clusters,distance_metric)
tensorflow.contrib.factorization.KMeans._full_batch_training_op(self,inputs,cluster_idx_list,cluster_centers)
tensorflow.contrib.factorization.KMeans._infer_graph(self,inputs,clusters)
tensorflow.contrib.factorization.KMeans._init_clusters_random(self)
tensorflow.contrib.factorization.KMeans._initialize_clusters(self,cluster_centers,cluster_centers_initialized,cluster_centers_updated)
tensorflow.contrib.factorization.KMeans._l2_normalize_data(cls,inputs)
tensorflow.contrib.factorization.KMeans._mini_batch_sync_updates_op(self,update_in_steps,cluster_centers_var,cluster_centers_updated,total_counts)
tensorflow.contrib.factorization.KMeans._mini_batch_training_op(self,inputs,cluster_idx_list,cluster_centers,total_counts)
tensorflow.contrib.factorization.KMeans.training_graph(self)
tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans(self,inputs,num_clusters,initial_clusters=RANDOM_INIT,distance_metric=SQUARED_EUCLIDEAN_DISTANCE,use_mini_batch=False,mini_batch_steps_per_iteration=1,random_seed=0,kmeans_plus_plus_num_retries=2)
tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans.__init__(self,inputs,num_clusters,initial_clusters=RANDOM_INIT,distance_metric=SQUARED_EUCLIDEAN_DISTANCE,use_mini_batch=False,mini_batch_steps_per_iteration=1,random_seed=0,kmeans_plus_plus_num_retries=2)
tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans._clusters_l2_normalized(self)
tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans._compute_cosine_distance(cls,inputs,clusters,inputs_normalized=True)
tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans._compute_euclidean_distance(cls,inputs,clusters)
tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans._create_variables(self)
tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans._distance_graph(cls,inputs,clusters,distance_metric)
tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans._full_batch_training_op(self,inputs,cluster_idx_list,cluster_centers)
tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans._infer_graph(self,inputs,clusters)
tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans._init_clusters_random(self)
tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans._initialize_clusters(self,cluster_centers,cluster_centers_initialized,cluster_centers_updated)
tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans._l2_normalize_data(cls,inputs)
tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans._mini_batch_sync_updates_op(self,update_in_steps,cluster_centers_var,cluster_centers_updated,total_counts)
tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans._mini_batch_training_op(self,inputs,cluster_idx_list,cluster_centers,total_counts)
tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans.training_graph(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/copy_graph/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/copy_graph/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/copy_graph/python/util/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/copy_graph/python/util/copy_elements.py----------------------------------------
A:tensorflow.contrib.copy_graph.python.util.copy_elements.temp_session->Session()
A:tensorflow.contrib.copy_graph.python.util.copy_elements.init_value->Session().run(org_instance.initialized_value())
A:tensorflow.contrib.copy_graph.python.util.copy_elements.new_var->Variable(init_value, trainable, name=new_name, collections=collections, validate_shape=False)
A:tensorflow.contrib.copy_graph.python.util.copy_elements.copied_variables->dict(((x.name, x) for x in variables))
A:tensorflow.contrib.copy_graph.python.util.copy_elements.already_present->to_graph.as_graph_element(new_name, allow_tensor=True, allow_operation=True)
A:tensorflow.contrib.copy_graph.python.util.copy_elements.new_op->tensorflow.python.framework.ops.Operation(new_node_def, to_graph, new_inputs, output_types, new_control_inputs, input_types, new_original_op, op_def)
A:tensorflow.contrib.copy_graph.python.util.copy_elements.output_index->op.outputs.index(org_instance)
A:tensorflow.contrib.copy_graph.python.util.copy_elements.new_original_op->copy_op_to_graph(op._original_op, to_graph, variables, scope)
A:tensorflow.contrib.copy_graph.python.util.copy_elements.new_node_def->deepcopy(op._node_def)
A:tensorflow.contrib.copy_graph.python.util.copy_elements.op_def->deepcopy(op._op_def)
tensorflow.contrib.copy_graph.copy_elements.copy_op_to_graph(org_instance,to_graph,variables,scope='')
tensorflow.contrib.copy_graph.copy_elements.copy_variable_to_graph(org_instance,to_graph,scope='')
tensorflow.contrib.copy_graph.copy_elements.get_copied_op(org_instance,graph,scope='')
tensorflow.contrib.copy_graph.python.util.copy_elements.copy_op_to_graph(org_instance,to_graph,variables,scope='')
tensorflow.contrib.copy_graph.python.util.copy_elements.copy_variable_to_graph(org_instance,to_graph,scope='')
tensorflow.contrib.copy_graph.python.util.copy_elements.get_copied_op(org_instance,graph,scope='')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/cloud/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/cloud/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/cloud/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/cloud/python/ops/bigquery_reader_ops.py----------------------------------------
A:tensorflow.contrib.cloud.python.ops.bigquery_reader_ops.self._columns->list(features.keys())
A:tensorflow.contrib.cloud.python.ops.bigquery_reader_ops.reader->tensorflow.contrib.cloud.python.ops.gen_bigquery_reader_ops.big_query_reader(name=name, project_id=self._project_id, dataset_id=self._dataset_id, table_id=self._table_id, timestamp_millis=self._timestamp_millis, columns=self._columns, test_end_point=self._test_end_point)
tensorflow.contrib.cloud.BigQueryReader(self,project_id,dataset_id,table_id,timestamp_millis,num_partitions,features=None,columns=None,test_end_point=None,name=None)
tensorflow.contrib.cloud.BigQueryReader.partitions(self,name=None)
tensorflow.contrib.cloud.python.ops.bigquery_reader_ops.BigQueryReader(self,project_id,dataset_id,table_id,timestamp_millis,num_partitions,features=None,columns=None,test_end_point=None,name=None)
tensorflow.contrib.cloud.python.ops.bigquery_reader_ops.BigQueryReader.__init__(self,project_id,dataset_id,table_id,timestamp_millis,num_partitions,features=None,columns=None,test_end_point=None,name=None)
tensorflow.contrib.cloud.python.ops.bigquery_reader_ops.BigQueryReader.partitions(self,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/cloud/python/ops/gen_bigquery_reader_ops.py----------------------------------------
A:tensorflow.contrib.cloud.python.ops.gen_bigquery_reader_ops.result->_InitOpDefLibrary().apply_op('GenerateBigQueryReaderPartitions', project_id=project_id, dataset_id=dataset_id, table_id=table_id, columns=columns, timestamp_millis=timestamp_millis, num_partitions=num_partitions, test_end_point=test_end_point, name=name)
A:tensorflow.contrib.cloud.python.ops.gen_bigquery_reader_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.cloud.python.ops.gen_bigquery_reader_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.cloud.python.ops.gen_bigquery_reader_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.cloud.ops.gen_bigquery_reader_ops._InitOpDefLibrary()
tensorflow.contrib.cloud.ops.gen_bigquery_reader_ops.big_query_reader(project_id,dataset_id,table_id,columns,timestamp_millis,container=None,shared_name=None,test_end_point=None,name=None)
tensorflow.contrib.cloud.ops.gen_bigquery_reader_ops.generate_big_query_reader_partitions(project_id,dataset_id,table_id,columns,timestamp_millis,num_partitions,test_end_point=None,name=None)
tensorflow.contrib.cloud.python.ops.gen_bigquery_reader_ops._InitOpDefLibrary()
tensorflow.contrib.cloud.python.ops.gen_bigquery_reader_ops.big_query_reader(project_id,dataset_id,table_id,columns,timestamp_millis,container=None,shared_name=None,test_end_point=None,name=None)
tensorflow.contrib.cloud.python.ops.gen_bigquery_reader_ops.generate_big_query_reader_partitions(project_id,dataset_id,table_id,columns,timestamp_millis,num_partitions,test_end_point=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/ffmpeg/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/ffmpeg/ffmpeg_ops.py----------------------------------------
A:tensorflow.contrib.ffmpeg.ffmpeg_ops._ffmpeg_so->tensorflow.contrib.util.loader.load_op_library(resource_loader.get_path_to_datafile('ffmpeg.so'))
tensorflow.contrib.ffmpeg.decode_audio(contents,file_format=None,samples_per_second=None,channel_count=None)
tensorflow.contrib.ffmpeg.encode_audio(audio,file_format=None,samples_per_second=None)
tensorflow.contrib.ffmpeg.ffmpeg_ops.decode_audio(contents,file_format=None,samples_per_second=None,channel_count=None)
tensorflow.contrib.ffmpeg.ffmpeg_ops.encode_audio(audio,file_format=None,samples_per_second=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/ffmpeg/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/ffmpeg/ops/gen_encode_audio_op_py.py----------------------------------------
A:tensorflow.contrib.ffmpeg.ops.gen_encode_audio_op_py.result->_InitOpDefLibrary().apply_op('EncodeAudio', sampled_audio=sampled_audio, file_format=file_format, samples_per_second=samples_per_second, bits_per_second=bits_per_second, name=name)
A:tensorflow.contrib.ffmpeg.ops.gen_encode_audio_op_py.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.ffmpeg.ops.gen_encode_audio_op_py.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.ffmpeg.ops.gen_encode_audio_op_py._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.ffmpeg.ops.gen_encode_audio_op_py._InitOpDefLibrary()
tensorflow.contrib.ffmpeg.ops.gen_encode_audio_op_py.encode_audio(sampled_audio,file_format,samples_per_second,bits_per_second=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/ffmpeg/ops/gen_decode_audio_op_py.py----------------------------------------
A:tensorflow.contrib.ffmpeg.ops.gen_decode_audio_op_py.result->_InitOpDefLibrary().apply_op('DecodeAudio', contents=contents, file_format=file_format, samples_per_second=samples_per_second, channel_count=channel_count, name=name)
A:tensorflow.contrib.ffmpeg.ops.gen_decode_audio_op_py.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.ffmpeg.ops.gen_decode_audio_op_py.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.ffmpeg.ops.gen_decode_audio_op_py._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.ffmpeg.ops.gen_decode_audio_op_py._InitOpDefLibrary()
tensorflow.contrib.ffmpeg.ops.gen_decode_audio_op_py.decode_audio(contents,file_format,samples_per_second,channel_count,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/saved_model/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/saved_model/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/saved_model/python/saved_model/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/saved_model/python/saved_model/signature_def_utils.py----------------------------------------
tensorflow.contrib.saved_model.python.saved_model.signature_def_utils.get_signature_def_by_key(meta_graph_def,signature_def_key)
tensorflow.contrib.signature_def_utils.get_signature_def_by_key(meta_graph_def,signature_def_key)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/imperative/__init__.py----------------------------------------
A:tensorflow.contrib.imperative.__init__.self.imperative_mode->tensorflow.contrib.imperative.imperative_mode.ImperativeMode(self.target)
A:tensorflow.contrib.imperative.__init__._default_interactive_mode->_InteractiveMode()
tensorflow.contrib.imperative.__init__._InteractiveMode(self,target=None)
tensorflow.contrib.imperative.__init__._InteractiveMode.__init__(self,target=None)
tensorflow.contrib.imperative.__init__._InteractiveMode.new_step(self)
tensorflow.contrib.imperative.__init__.new_step()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/imperative/imperative_graph.py----------------------------------------
A:tensorflow.contrib.imperative.imperative_graph._REF_OPS_WHITELIST->frozenset(['Variable', 'VariableV2', 'Assign', 'AssignAdd', 'AssignSub', 'ScatterAdd', 'ScatterSub', 'ScatterUpdate'])
A:tensorflow.contrib.imperative.imperative_graph._PASS_THROUGH_OPS->frozenset(['Identity'])
A:tensorflow.contrib.imperative.imperative_graph.self._init_variable_names->set()
A:tensorflow.contrib.imperative.imperative_graph.old_init->getattr(variables.Variable, '__init__')
A:tensorflow.contrib.imperative.imperative_graph.output_has_ref->any([dtype._is_ref_dtype for dtype in output_dtypes])
A:tensorflow.contrib.imperative.imperative_graph.ret->super(ImperativeGraph, self).create_op(*args, **kwargs)
A:tensorflow.contrib.imperative.imperative_graph.inited->tensorflow.python.ops.state_ops.is_variable_initialized(op_output_var[0])
A:tensorflow.contrib.imperative.imperative_graph.(v_f, v_t)->tensorflow.python.ops.control_flow_ops.ref_switch(op_output_var[0], inited)
A:tensorflow.contrib.imperative.imperative_graph.v_f_op->tensorflow.python.ops.gen_array_ops._ref_identity(v_f)
A:tensorflow.contrib.imperative.imperative_graph.v_t_op->tensorflow.python.ops.gen_array_ops._ref_identity(v_t)
A:tensorflow.contrib.imperative.imperative_graph.orig_op->self._wrap(super(ImperativeGraph, self).create_op(*args, **kwargs))
A:tensorflow.contrib.imperative.imperative_graph.assign_op->tensorflow.python.ops.state_ops.assign(var, val, validate_shape=False)
A:tensorflow.contrib.imperative.imperative_graph.controls->tensorflow.python.ops.control_flow_ops.tuple(controls)
A:tensorflow.contrib.imperative.imperative_graph.real_val->tensorflow.python.ops.array_ops.identity(val)
A:tensorflow.contrib.imperative.imperative_graph.stored_val->tensorflow.python.ops.array_ops.identity(var)
A:tensorflow.contrib.imperative.imperative_graph.(real_val, _)->tensorflow.python.ops.control_flow_ops.merge([real_val, stored_val])
A:tensorflow.contrib.imperative.imperative_graph.self._gradient_function_map[orig_op.name]->tensorflow.python.framework.ops.get_gradient_function(orig_op)
A:tensorflow.contrib.imperative.imperative_graph.op_name->object.__getattribute__(self, '_name')
A:tensorflow.contrib.imperative.imperative_graph.graph->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.contrib.imperative.imperative_graph.original_graph->object.__getattribute__(self, '_original_graph')
A:tensorflow.contrib.imperative.imperative_graph.op->tensorflow.python.framework.ops.get_default_graph().get_operation_by_name(op_name)
A:tensorflow.contrib.imperative.imperative_graph.sess->getattr(ops.Tensor, 'session', None)
A:tensorflow.contrib.imperative.imperative_graph.tensor_name->object.__getattribute__(self, '_name')
A:tensorflow.contrib.imperative.imperative_graph.tensor->object.__getattribute__(graph.get_tensor_by_name(tensor_name), '_original_tensor')
A:tensorflow.contrib.imperative.imperative_graph.old_session->getattr(typename, 'session', None)
tensorflow.contrib.imperative.imperative_graph.ImperativeGraph(self,parent_graph=None)
tensorflow.contrib.imperative.imperative_graph.ImperativeGraph.__init__(self,parent_graph=None)
tensorflow.contrib.imperative.imperative_graph.ImperativeGraph._wrap(self,op)
tensorflow.contrib.imperative.imperative_graph.ImperativeGraph.add_pending_init(self,init_op)
tensorflow.contrib.imperative.imperative_graph.ImperativeGraph.create_op(self,*args,**kwargs)
tensorflow.contrib.imperative.imperative_graph.ImperativeGraph.is_child_graph(self,child_graph)
tensorflow.contrib.imperative.imperative_graph.ImperativeGraph.op_in_graph(self,op)
tensorflow.contrib.imperative.imperative_graph.ImperativeGraph.record_variable_inits(self)
tensorflow.contrib.imperative.imperative_graph.ImperativeGraph.replace_outputs(self,op)
tensorflow.contrib.imperative.imperative_graph.ImperativeGraph.return_as_is(self)
tensorflow.contrib.imperative.imperative_graph.ImperativeGraph.run_pending_inits(self,session)
tensorflow.contrib.imperative.imperative_graph.MultiOutputOperation(self,outputs)
tensorflow.contrib.imperative.imperative_graph.MultiOutputOperation.__init__(self,outputs)
tensorflow.contrib.imperative.imperative_graph.OperationProxy(self,real_op)
tensorflow.contrib.imperative.imperative_graph.OperationProxy.__getattribute__(self,name)
tensorflow.contrib.imperative.imperative_graph.OperationProxy.__init__(self,real_op)
tensorflow.contrib.imperative.imperative_graph.OperationProxy.__setattr__(self,name,value)
tensorflow.contrib.imperative.imperative_graph.TensorProxy(self,real_tensor)
tensorflow.contrib.imperative.imperative_graph.TensorProxy.__bool__(self)
tensorflow.contrib.imperative.imperative_graph.TensorProxy.__getattribute__(self,name)
tensorflow.contrib.imperative.imperative_graph.TensorProxy.__init__(self,real_tensor)
tensorflow.contrib.imperative.imperative_graph.TensorProxy.__nonzero__(self)
tensorflow.contrib.imperative.imperative_graph.TensorProxy.__repr__(self)
tensorflow.contrib.imperative.imperative_graph.TensorProxy.__str__(self)
tensorflow.contrib.imperative.imperative_graph.add_session_attr(typename,session)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/imperative/imperative_mode.py----------------------------------------
A:tensorflow.contrib.imperative.imperative_mode.self._graph->tensorflow.contrib.imperative.imperative_graph.ImperativeGraph(parent_graph=self._parent_graph)
A:tensorflow.contrib.imperative.imperative_mode.self._default_graph->self._graph.as_default()
A:tensorflow.contrib.imperative.imperative_mode.self._record_variable_inits->self._graph.record_variable_inits()
A:tensorflow.contrib.imperative.imperative_mode.self._session->tensorflow.python.client.session.Session(graph=self._graph, target=self._target)
A:tensorflow.contrib.imperative.imperative_mode.ret->self._old_run(*args, **kwargs)
tensorflow.contrib.imperative.imperative_mode.ImperativeMode(self,target,parent_graph=None)
tensorflow.contrib.imperative.imperative_mode.ImperativeMode.__enter__(self)
tensorflow.contrib.imperative.imperative_mode.ImperativeMode.__exit__(self,exec_type,exec_value,exec_tb)
tensorflow.contrib.imperative.imperative_mode.ImperativeMode.__init__(self,target,parent_graph=None)
tensorflow.contrib.imperative.imperative_mode.ImperativeMode.new_step(self)
tensorflow.contrib.imperative.imperative_mode.ImperativeMode.run(self,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/export_strategy.py----------------------------------------
tensorflow.contrib.ExportStrategy(collections.namedtuple('ExportStrategy',['name','export_fn']))
tensorflow.contrib.ExportStrategy.export(self,estimator,export_path,checkpoint_path=None,eval_result=None)
tensorflow.contrib.learn.python.learn.export_strategy.ExportStrategy(collections.namedtuple('ExportStrategy',['name','export_fn']))
tensorflow.contrib.learn.python.learn.export_strategy.ExportStrategy.export(self,estimator,export_path,checkpoint_path=None,eval_result=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/learn_runner.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.learn_runner.task->getattr(experiment, schedule)
A:tensorflow.contrib.learn.python.learn.learn_runner.experiment->experiment_fn(output_dir=output_dir)
tensorflow.contrib.learn.python.learn.learn_runner._execute_schedule(experiment,schedule)
tensorflow.contrib.learn.python.learn.learn_runner._get_default_schedule(config)
tensorflow.contrib.learn.python.learn.learn_runner._is_distributed(config)
tensorflow.contrib.learn.python.learn.learn_runner.run(experiment_fn,output_dir,schedule=None)
tensorflow.contrib.learn.python.learn.learn_runner.tune(experiment_fn,tuner)
tensorflow.contrib.learn_runner._execute_schedule(experiment,schedule)
tensorflow.contrib.learn_runner._get_default_schedule(config)
tensorflow.contrib.learn_runner._is_distributed(config)
tensorflow.contrib.learn_runner.run(experiment_fn,output_dir,schedule=None)
tensorflow.contrib.learn_runner.tune(experiment_fn,tuner)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/monitors.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.monitors.trainables->tensorflow.python.framework.ops.get_collection(ops.GraphKeys.TRAINABLE_VARIABLES, scope=self._scope)
A:tensorflow.contrib.learn.python.learn.monitors.self._summary_writer->tensorflow.contrib.learn.python.learn.summary_writer_cache.SummaryWriterCache.get(estimator.model_dir)
A:tensorflow.contrib.learn.python.learn.monitors.summary_strs->_extract_output(outputs, self._summary_op)
A:tensorflow.contrib.learn.python.learn.monitors.latest_path->tensorflow.python.training.saver.latest_checkpoint(self._estimator.model_dir)
A:tensorflow.contrib.learn.python.learn.monitors.validation_outputs->self._estimator.evaluate(x=self.x, y=self.y, input_fn=self.input_fn, batch_size=self.batch_size, steps=self.eval_steps, metrics=self.metrics, hooks=self.hooks, name=self.name)
A:tensorflow.contrib.learn.python.learn.monitors.self._var_values[step]->_extract_output(outputs, self._var_name)
A:tensorflow.contrib.learn.python.learn.monitors.graph->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.contrib.learn.python.learn.monitors.graph_def->tensorflow.python.framework.ops.get_default_graph().as_graph_def()
A:tensorflow.contrib.learn.python.learn.monitors.value1->_extract_output(this_output, key)
A:tensorflow.contrib.learn.python.learn.monitors.value2->_extract_output(other_output, key)
A:tensorflow.contrib.learn.python.learn.monitors.self._last_export_dir->self._estimator.export(self.export_dir, exports_to_keep=self.exports_to_keep, signature_fn=self.signature_fn, input_fn=self._input_fn, default_batch_size=self._default_batch_size, input_feature_key=self._input_feature_key, use_deprecated_input_fn=self._use_deprecated_input_fn)
A:tensorflow.contrib.learn.python.learn.monitors.self._save_path->os.path.join(checkpoint_dir, checkpoint_basename)
A:tensorflow.contrib.learn.python.learn.monitors.self._last_saved_time->time.time()
A:tensorflow.contrib.learn.python.learn.monitors.current_time->time.time()
A:tensorflow.contrib.learn.python.learn.monitors.summary->Summary(value=[Summary.Value(tag=self._summary_tag, simple_value=steps_per_sec)])
A:tensorflow.contrib.learn.python.learn.monitors.self._global_step_tensor->tensorflow.contrib.framework.python.ops.variables.get_global_step()
A:tensorflow.contrib.learn.python.learn.monitors.monitor_requests->m.step_begin(self._last_step)
A:tensorflow.contrib.learn.python.learn.monitors.request['monitors']->dict(zip(monitor_fetches, [_as_graph_element(f) for f in monitor_fetches]))
A:tensorflow.contrib.learn.python.learn.monitors.induce_stop->m.step_end(self._last_step, result)
A:tensorflow.contrib.learn.python.learn.monitors.element->tensorflow.python.framework.ops.get_default_graph().as_graph_element(obj + ':0')
tensorflow.contrib.NanLossDuringTrainingError(RuntimeError)
tensorflow.contrib.NanLossDuringTrainingError.__str__(self)
tensorflow.contrib.learn.python.learn.monitors.BaseMonitor(self)
tensorflow.contrib.learn.python.learn.monitors.BaseMonitor.__init__(self)
tensorflow.contrib.learn.python.learn.monitors.BaseMonitor.begin(self,max_steps=None)
tensorflow.contrib.learn.python.learn.monitors.BaseMonitor.end(self,session=None)
tensorflow.contrib.learn.python.learn.monitors.BaseMonitor.epoch_begin(self,epoch)
tensorflow.contrib.learn.python.learn.monitors.BaseMonitor.epoch_end(self,epoch)
tensorflow.contrib.learn.python.learn.monitors.BaseMonitor.post_step(self,step,session)
tensorflow.contrib.learn.python.learn.monitors.BaseMonitor.run_on_all_workers(self)
tensorflow.contrib.learn.python.learn.monitors.BaseMonitor.set_estimator(self,estimator)
tensorflow.contrib.learn.python.learn.monitors.BaseMonitor.step_begin(self,step)
tensorflow.contrib.learn.python.learn.monitors.BaseMonitor.step_end(self,step,output)
tensorflow.contrib.learn.python.learn.monitors.CaptureVariable(self,var_name,every_n=100,first_n=1)
tensorflow.contrib.learn.python.learn.monitors.CaptureVariable.__init__(self,var_name,every_n=100,first_n=1)
tensorflow.contrib.learn.python.learn.monitors.CaptureVariable.every_n_step_begin(self,step)
tensorflow.contrib.learn.python.learn.monitors.CaptureVariable.every_n_step_end(self,step,outputs)
tensorflow.contrib.learn.python.learn.monitors.CaptureVariable.values(self)
tensorflow.contrib.learn.python.learn.monitors.CheckpointSaver(self,checkpoint_dir,save_secs=None,save_steps=None,saver=None,checkpoint_basename='model.ckpt',scaffold=None)
tensorflow.contrib.learn.python.learn.monitors.CheckpointSaver.__init__(self,checkpoint_dir,save_secs=None,save_steps=None,saver=None,checkpoint_basename='model.ckpt',scaffold=None)
tensorflow.contrib.learn.python.learn.monitors.CheckpointSaver._save(self,step,session)
tensorflow.contrib.learn.python.learn.monitors.CheckpointSaver.begin(self,max_steps=None)
tensorflow.contrib.learn.python.learn.monitors.CheckpointSaver.end(self,session=None)
tensorflow.contrib.learn.python.learn.monitors.CheckpointSaver.post_step(self,step,session)
tensorflow.contrib.learn.python.learn.monitors.CheckpointSaver.step_begin(self,step)
tensorflow.contrib.learn.python.learn.monitors.EveryN(self,every_n_steps=100,first_n_steps=1)
tensorflow.contrib.learn.python.learn.monitors.EveryN.__init__(self,every_n_steps=100,first_n_steps=1)
tensorflow.contrib.learn.python.learn.monitors.EveryN.end(self,session=None)
tensorflow.contrib.learn.python.learn.monitors.EveryN.every_n_post_step(self,step,session)
tensorflow.contrib.learn.python.learn.monitors.EveryN.every_n_step_begin(self,step)
tensorflow.contrib.learn.python.learn.monitors.EveryN.every_n_step_end(self,step,outputs)
tensorflow.contrib.learn.python.learn.monitors.EveryN.post_step(self,step,session)
tensorflow.contrib.learn.python.learn.monitors.EveryN.step_begin(self,step)
tensorflow.contrib.learn.python.learn.monitors.EveryN.step_end(self,step,output)
tensorflow.contrib.learn.python.learn.monitors.ExportMonitor(self,every_n_steps,export_dir,input_fn=None,input_feature_key=None,exports_to_keep=5,signature_fn=None,default_batch_size=1)
tensorflow.contrib.learn.python.learn.monitors.ExportMonitor.__init__(self,every_n_steps,export_dir,input_fn=None,input_feature_key=None,exports_to_keep=5,signature_fn=None,default_batch_size=1)
tensorflow.contrib.learn.python.learn.monitors.ExportMonitor.end(self,session=None)
tensorflow.contrib.learn.python.learn.monitors.ExportMonitor.every_n_step_end(self,step,outputs)
tensorflow.contrib.learn.python.learn.monitors.ExportMonitor.export_dir(self)
tensorflow.contrib.learn.python.learn.monitors.ExportMonitor.exports_to_keep(self)
tensorflow.contrib.learn.python.learn.monitors.ExportMonitor.last_export_dir(self)
tensorflow.contrib.learn.python.learn.monitors.ExportMonitor.signature_fn(self)
tensorflow.contrib.learn.python.learn.monitors.GraphDump(self,ignore_ops=None)
tensorflow.contrib.learn.python.learn.monitors.GraphDump.__init__(self,ignore_ops=None)
tensorflow.contrib.learn.python.learn.monitors.GraphDump.begin(self,max_steps=None)
tensorflow.contrib.learn.python.learn.monitors.GraphDump.compare(self,other_dump,step,atol=1e-06)
tensorflow.contrib.learn.python.learn.monitors.GraphDump.data(self)
tensorflow.contrib.learn.python.learn.monitors.GraphDump.step_begin(self,step)
tensorflow.contrib.learn.python.learn.monitors.GraphDump.step_end(self,step,output)
tensorflow.contrib.learn.python.learn.monitors.LoggingTrainable(self,scope=None,every_n=100,first_n=1)
tensorflow.contrib.learn.python.learn.monitors.LoggingTrainable.__init__(self,scope=None,every_n=100,first_n=1)
tensorflow.contrib.learn.python.learn.monitors.LoggingTrainable.every_n_step_begin(self,step)
tensorflow.contrib.learn.python.learn.monitors.LoggingTrainable.every_n_step_end(self,step,outputs)
tensorflow.contrib.learn.python.learn.monitors.NanLoss(self,loss_tensor,every_n_steps=100,fail_on_nan_loss=True)
tensorflow.contrib.learn.python.learn.monitors.NanLoss.__init__(self,loss_tensor,every_n_steps=100,fail_on_nan_loss=True)
tensorflow.contrib.learn.python.learn.monitors.NanLoss.every_n_step_begin(self,step)
tensorflow.contrib.learn.python.learn.monitors.NanLoss.every_n_step_end(self,step,outputs)
tensorflow.contrib.learn.python.learn.monitors.NanLossDuringTrainingError(RuntimeError)
tensorflow.contrib.learn.python.learn.monitors.NanLossDuringTrainingError.__str__(self)
tensorflow.contrib.learn.python.learn.monitors.PrintTensor(self,tensor_names,every_n=100,first_n=1)
tensorflow.contrib.learn.python.learn.monitors.PrintTensor.__init__(self,tensor_names,every_n=100,first_n=1)
tensorflow.contrib.learn.python.learn.monitors.PrintTensor.every_n_step_begin(self,step)
tensorflow.contrib.learn.python.learn.monitors.PrintTensor.every_n_step_end(self,step,outputs)
tensorflow.contrib.learn.python.learn.monitors.RunHookAdapterForMonitors(self,monitors)
tensorflow.contrib.learn.python.learn.monitors.RunHookAdapterForMonitors.__init__(self,monitors)
tensorflow.contrib.learn.python.learn.monitors.RunHookAdapterForMonitors.after_run(self,run_context,run_values)
tensorflow.contrib.learn.python.learn.monitors.RunHookAdapterForMonitors.before_run(self,run_context)
tensorflow.contrib.learn.python.learn.monitors.RunHookAdapterForMonitors.begin(self)
tensorflow.contrib.learn.python.learn.monitors.RunHookAdapterForMonitors.end(self,session)
tensorflow.contrib.learn.python.learn.monitors.StepCounter(self,every_n_steps=100,output_dir=None,summary_writer=None)
tensorflow.contrib.learn.python.learn.monitors.StepCounter.__init__(self,every_n_steps=100,output_dir=None,summary_writer=None)
tensorflow.contrib.learn.python.learn.monitors.StepCounter.every_n_step_end(self,current_step,outputs)
tensorflow.contrib.learn.python.learn.monitors.StepCounter.set_estimator(self,estimator)
tensorflow.contrib.learn.python.learn.monitors.StopAtStep(self,num_steps=None,last_step=None)
tensorflow.contrib.learn.python.learn.monitors.StopAtStep.__init__(self,num_steps=None,last_step=None)
tensorflow.contrib.learn.python.learn.monitors.StopAtStep.run_on_all_workers(self)
tensorflow.contrib.learn.python.learn.monitors.StopAtStep.step_begin(self,step)
tensorflow.contrib.learn.python.learn.monitors.StopAtStep.step_end(self,step,output)
tensorflow.contrib.learn.python.learn.monitors.SummarySaver(self,summary_op,save_steps=100,output_dir=None,summary_writer=None,scaffold=None)
tensorflow.contrib.learn.python.learn.monitors.SummarySaver.__init__(self,summary_op,save_steps=100,output_dir=None,summary_writer=None,scaffold=None)
tensorflow.contrib.learn.python.learn.monitors.SummarySaver.end(self,session=None)
tensorflow.contrib.learn.python.learn.monitors.SummarySaver.every_n_step_begin(self,step)
tensorflow.contrib.learn.python.learn.monitors.SummarySaver.every_n_step_end(self,step,outputs)
tensorflow.contrib.learn.python.learn.monitors.SummarySaver.set_estimator(self,estimator)
tensorflow.contrib.learn.python.learn.monitors.ValidationMonitor(self,x=None,y=None,input_fn=None,batch_size=None,eval_steps=None,every_n_steps=100,metrics=None,hooks=None,early_stopping_rounds=None,early_stopping_metric='loss',early_stopping_metric_minimize=True,name=None)
tensorflow.contrib.learn.python.learn.monitors.ValidationMonitor.__init__(self,x=None,y=None,input_fn=None,batch_size=None,eval_steps=None,every_n_steps=100,metrics=None,hooks=None,early_stopping_rounds=None,early_stopping_metric='loss',early_stopping_metric_minimize=True,name=None)
tensorflow.contrib.learn.python.learn.monitors.ValidationMonitor.best_step(self)
tensorflow.contrib.learn.python.learn.monitors.ValidationMonitor.best_value(self)
tensorflow.contrib.learn.python.learn.monitors.ValidationMonitor.early_stopped(self)
tensorflow.contrib.learn.python.learn.monitors.ValidationMonitor.every_n_step_end(self,step,outputs)
tensorflow.contrib.learn.python.learn.monitors._as_graph_element(obj)
tensorflow.contrib.learn.python.learn.monitors._extract_output(outputs,request)
tensorflow.contrib.learn.python.learn.monitors.get_default_monitors(loss_op=None,summary_op=None,save_summary_steps=100,output_dir=None,summary_writer=None)
tensorflow.contrib.learn.python.learn.monitors.replace_monitors_with_hooks(monitors_or_hooks,estimator)
tensorflow.contrib.monitors.BaseMonitor(self)
tensorflow.contrib.monitors.BaseMonitor.begin(self,max_steps=None)
tensorflow.contrib.monitors.BaseMonitor.end(self,session=None)
tensorflow.contrib.monitors.BaseMonitor.epoch_begin(self,epoch)
tensorflow.contrib.monitors.BaseMonitor.epoch_end(self,epoch)
tensorflow.contrib.monitors.BaseMonitor.post_step(self,step,session)
tensorflow.contrib.monitors.BaseMonitor.run_on_all_workers(self)
tensorflow.contrib.monitors.BaseMonitor.set_estimator(self,estimator)
tensorflow.contrib.monitors.BaseMonitor.step_begin(self,step)
tensorflow.contrib.monitors.BaseMonitor.step_end(self,step,output)
tensorflow.contrib.monitors.CaptureVariable(self,var_name,every_n=100,first_n=1)
tensorflow.contrib.monitors.CaptureVariable.every_n_step_begin(self,step)
tensorflow.contrib.monitors.CaptureVariable.every_n_step_end(self,step,outputs)
tensorflow.contrib.monitors.CaptureVariable.values(self)
tensorflow.contrib.monitors.CheckpointSaver(self,checkpoint_dir,save_secs=None,save_steps=None,saver=None,checkpoint_basename='model.ckpt',scaffold=None)
tensorflow.contrib.monitors.CheckpointSaver._save(self,step,session)
tensorflow.contrib.monitors.CheckpointSaver.begin(self,max_steps=None)
tensorflow.contrib.monitors.CheckpointSaver.end(self,session=None)
tensorflow.contrib.monitors.CheckpointSaver.post_step(self,step,session)
tensorflow.contrib.monitors.CheckpointSaver.step_begin(self,step)
tensorflow.contrib.monitors.EveryN(self,every_n_steps=100,first_n_steps=1)
tensorflow.contrib.monitors.EveryN.end(self,session=None)
tensorflow.contrib.monitors.EveryN.every_n_post_step(self,step,session)
tensorflow.contrib.monitors.EveryN.every_n_step_begin(self,step)
tensorflow.contrib.monitors.EveryN.every_n_step_end(self,step,outputs)
tensorflow.contrib.monitors.EveryN.post_step(self,step,session)
tensorflow.contrib.monitors.EveryN.step_begin(self,step)
tensorflow.contrib.monitors.EveryN.step_end(self,step,output)
tensorflow.contrib.monitors.ExportMonitor(self,every_n_steps,export_dir,input_fn=None,input_feature_key=None,exports_to_keep=5,signature_fn=None,default_batch_size=1)
tensorflow.contrib.monitors.ExportMonitor.end(self,session=None)
tensorflow.contrib.monitors.ExportMonitor.every_n_step_end(self,step,outputs)
tensorflow.contrib.monitors.ExportMonitor.export_dir(self)
tensorflow.contrib.monitors.ExportMonitor.exports_to_keep(self)
tensorflow.contrib.monitors.ExportMonitor.last_export_dir(self)
tensorflow.contrib.monitors.ExportMonitor.signature_fn(self)
tensorflow.contrib.monitors.GraphDump(self,ignore_ops=None)
tensorflow.contrib.monitors.GraphDump.begin(self,max_steps=None)
tensorflow.contrib.monitors.GraphDump.compare(self,other_dump,step,atol=1e-06)
tensorflow.contrib.monitors.GraphDump.data(self)
tensorflow.contrib.monitors.GraphDump.step_begin(self,step)
tensorflow.contrib.monitors.GraphDump.step_end(self,step,output)
tensorflow.contrib.monitors.LoggingTrainable(self,scope=None,every_n=100,first_n=1)
tensorflow.contrib.monitors.LoggingTrainable.every_n_step_begin(self,step)
tensorflow.contrib.monitors.LoggingTrainable.every_n_step_end(self,step,outputs)
tensorflow.contrib.monitors.NanLoss(self,loss_tensor,every_n_steps=100,fail_on_nan_loss=True)
tensorflow.contrib.monitors.NanLoss.every_n_step_begin(self,step)
tensorflow.contrib.monitors.NanLoss.every_n_step_end(self,step,outputs)
tensorflow.contrib.monitors.PrintTensor(self,tensor_names,every_n=100,first_n=1)
tensorflow.contrib.monitors.PrintTensor.every_n_step_begin(self,step)
tensorflow.contrib.monitors.PrintTensor.every_n_step_end(self,step,outputs)
tensorflow.contrib.monitors.RunHookAdapterForMonitors(self,monitors)
tensorflow.contrib.monitors.RunHookAdapterForMonitors.after_run(self,run_context,run_values)
tensorflow.contrib.monitors.RunHookAdapterForMonitors.before_run(self,run_context)
tensorflow.contrib.monitors.RunHookAdapterForMonitors.begin(self)
tensorflow.contrib.monitors.RunHookAdapterForMonitors.end(self,session)
tensorflow.contrib.monitors.StepCounter(self,every_n_steps=100,output_dir=None,summary_writer=None)
tensorflow.contrib.monitors.StepCounter.every_n_step_end(self,current_step,outputs)
tensorflow.contrib.monitors.StepCounter.set_estimator(self,estimator)
tensorflow.contrib.monitors.StopAtStep(self,num_steps=None,last_step=None)
tensorflow.contrib.monitors.StopAtStep.run_on_all_workers(self)
tensorflow.contrib.monitors.StopAtStep.step_begin(self,step)
tensorflow.contrib.monitors.StopAtStep.step_end(self,step,output)
tensorflow.contrib.monitors.SummarySaver(self,summary_op,save_steps=100,output_dir=None,summary_writer=None,scaffold=None)
tensorflow.contrib.monitors.SummarySaver.end(self,session=None)
tensorflow.contrib.monitors.SummarySaver.every_n_step_begin(self,step)
tensorflow.contrib.monitors.SummarySaver.every_n_step_end(self,step,outputs)
tensorflow.contrib.monitors.SummarySaver.set_estimator(self,estimator)
tensorflow.contrib.monitors.ValidationMonitor(self,x=None,y=None,input_fn=None,batch_size=None,eval_steps=None,every_n_steps=100,metrics=None,hooks=None,early_stopping_rounds=None,early_stopping_metric='loss',early_stopping_metric_minimize=True,name=None)
tensorflow.contrib.monitors.ValidationMonitor.best_step(self)
tensorflow.contrib.monitors.ValidationMonitor.best_value(self)
tensorflow.contrib.monitors.ValidationMonitor.early_stopped(self)
tensorflow.contrib.monitors.ValidationMonitor.every_n_step_end(self,step,outputs)
tensorflow.contrib.monitors._as_graph_element(obj)
tensorflow.contrib.monitors._extract_output(outputs,request)
tensorflow.contrib.monitors.get_default_monitors(loss_op=None,summary_op=None,save_summary_steps=100,output_dir=None,summary_writer=None)
tensorflow.contrib.monitors.replace_monitors_with_hooks(monitors_or_hooks,estimator)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/monitored_session.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/summary_writer_cache.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/models.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.models.y_shape->y.get_shape()
A:tensorflow.contrib.learn.python.learn.models.weights->tensorflow.python.ops.variable_scope.get_variable('weights', [x.get_shape()[1], y.get_shape()[-1]], initializer=init_ops.random_normal_initializer(init_mean, init_stddev, dtype=dtype), dtype=dtype)
A:tensorflow.contrib.learn.python.learn.models.bias->tensorflow.python.ops.variable_scope.get_variable('bias', [y.get_shape()[-1]], initializer=init_ops.random_normal_initializer(init_mean, init_stddev, dtype=dtype), dtype=dtype)
A:tensorflow.contrib.learn.python.learn.models.class_weight->tensorflow.python.framework.ops.get_default_graph().get_tensor_by_name('class_weight:0')
A:tensorflow.contrib.learn.python.learn.models.s_joined->tensorflow.python.ops.array_ops.pack(input_seq)
A:tensorflow.contrib.learn.python.learn.models.s_reversed->tensorflow.python.ops.array_ops.reverse_sequence(s_joined, lengths, 0, 1)
A:tensorflow.contrib.learn.python.learn.models.result->tensorflow.python.ops.array_ops.unpack(s_reversed)
A:tensorflow.contrib.learn.python.learn.models.(output_fw, state_fw)->tensorflow.contrib.rnn.static_rnn(cell_fw, inputs, initial_state_fw, dtype, sequence_length)
A:tensorflow.contrib.learn.python.learn.models.(tmp, state_bw)->tensorflow.contrib.rnn.static_rnn(cell_bw, _reverse_seq(inputs, sequence_length), initial_state_bw, dtype, sequence_length)
A:tensorflow.contrib.learn.python.learn.models.output_bw->_reverse_seq(tmp, sequence_length)
A:tensorflow.contrib.learn.python.learn.models.x->input_op_fn(x)
A:tensorflow.contrib.learn.python.learn.models.cell_fn->functools.partial(contrib_rnn.BasicLSTMCell, state_is_tuple=False)
A:tensorflow.contrib.learn.python.learn.models.rnn_fw_cell->tensorflow.contrib.rnn.MultiRNNCell([attn_fw_cell() for _ in range(num_layers)], state_is_tuple=False)
A:tensorflow.contrib.learn.python.learn.models.rnn_bw_cell->tensorflow.contrib.rnn.MultiRNNCell([attn_bw_cell() for _ in range(num_layers)], state_is_tuple=False)
A:tensorflow.contrib.learn.python.learn.models.(_, encoding)->tensorflow.contrib.rnn.static_rnn(cell, x, dtype=dtypes.float32, sequence_length=sequence_length, initial_state=initial_state)
A:tensorflow.contrib.learn.python.learn.models.cell->tensorflow.contrib.rnn.MultiRNNCell([attn_rnn_cell() for _ in range(num_layers)], state_is_tuple=False)
tensorflow.contrib.learn.python.learn.models._reverse_seq(input_seq,lengths)
tensorflow.contrib.learn.python.learn.models.bidirectional_rnn(cell_fw,cell_bw,inputs,initial_state_fw=None,initial_state_bw=None,dtype=None,sequence_length=None,scope=None)
tensorflow.contrib.learn.python.learn.models.get_rnn_model(rnn_size,cell_type,num_layers,input_op_fn,bidirectional,target_predictor_fn,sequence_length,initial_state,attn_length,attn_size,attn_vec_size)
tensorflow.contrib.learn.python.learn.models.linear_regression(x,y,init_mean=None,init_stddev=1.0)
tensorflow.contrib.learn.python.learn.models.linear_regression_zero_init(x,y)
tensorflow.contrib.learn.python.learn.models.logistic_regression(x,y,class_weight=None,init_mean=None,init_stddev=1.0)
tensorflow.contrib.learn.python.learn.models.logistic_regression_zero_init(x,y)
tensorflow.contrib.models._reverse_seq(input_seq,lengths)
tensorflow.contrib.models.bidirectional_rnn(cell_fw,cell_bw,inputs,initial_state_fw=None,initial_state_bw=None,dtype=None,sequence_length=None,scope=None)
tensorflow.contrib.models.get_rnn_model(rnn_size,cell_type,num_layers,input_op_fn,bidirectional,target_predictor_fn,sequence_length,initial_state,attn_length,attn_size,attn_vec_size)
tensorflow.contrib.models.linear_regression(x,y,init_mean=None,init_stddev=1.0)
tensorflow.contrib.models.linear_regression_zero_init(x,y)
tensorflow.contrib.models.logistic_regression(x,y,class_weight=None,init_mean=None,init_stddev=1.0)
tensorflow.contrib.models.logistic_regression_zero_init(x,y)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/basic_session_run_hooks.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/trainable.py----------------------------------------
tensorflow.contrib.Trainable(object)
tensorflow.contrib.Trainable.fit(self,x=None,y=None,input_fn=None,steps=None,batch_size=None,monitors=None,max_steps=None)
tensorflow.contrib.learn.python.learn.trainable.Trainable(object)
tensorflow.contrib.learn.python.learn.trainable.Trainable.fit(self,x=None,y=None,input_fn=None,steps=None,batch_size=None,monitors=None,max_steps=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/session_run_hook.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/metric_spec.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.metric_spec._LABELS_ARGS->set((_CANONICAL_LABELS_ARG, 'label', 'targets', 'target'))
A:tensorflow.contrib.learn.python.learn.metric_spec._PREDICTIONS_ARGS->set((_CANONICAL_PREDICTIONS_ARG, 'prediction', 'logits', 'logit'))
A:tensorflow.contrib.learn.python.learn.metric_spec._WEIGHTS_ARGS->set((_CANONICAL_WEIGHTS_ARG, 'weight'))
A:tensorflow.contrib.learn.python.learn.metric_spec.matching_args->candidate_args.intersection(fn_args)
A:tensorflow.contrib.learn.python.learn.metric_spec.args->_args(metric_fn)
A:tensorflow.contrib.learn.python.learn.metric_spec.labels_arg->_matching_arg(metric_fn_name, args, _LABELS_ARGS, _CANONICAL_LABELS_ARG, is_labels_required)
A:tensorflow.contrib.learn.python.learn.metric_spec.predictions_arg->_matching_arg(metric_fn_name, args, _PREDICTIONS_ARGS, _CANONICAL_PREDICTIONS_ARG)
A:tensorflow.contrib.learn.python.learn.metric_spec.weights_arg->_matching_arg(metric_fn_name, args, _WEIGHTS_ARGS, _CANONICAL_WEIGHTS_ARG, is_weights_required)
A:tensorflow.contrib.learn.python.learn.metric_spec.self._metric_fn_name->_fn_name(metric_fn)
A:tensorflow.contrib.learn.python.learn.metric_spec.self._metric_fn->_adapt_metric_fn(metric_fn=metric_fn, metric_fn_name=self._metric_fn_name, is_labels_required=label_key is not None, is_weights_required=weight_key is not None)
A:tensorflow.contrib.learn.python.learn.metric_spec.prediction->_get_dict('prediction', predictions, self.prediction_key)
A:tensorflow.contrib.learn.python.learn.metric_spec.label->_get_dict('label', labels, self.label_key)
tensorflow.contrib.MetricSpec(self,metric_fn,prediction_key=None,label_key=None,weight_key=None)
tensorflow.contrib.MetricSpec.__str__(self)
tensorflow.contrib.MetricSpec.create_metric_ops(self,inputs,labels,predictions)
tensorflow.contrib.MetricSpec.label_key(self)
tensorflow.contrib.MetricSpec.metric_fn(self)
tensorflow.contrib.MetricSpec.prediction_key(self)
tensorflow.contrib.MetricSpec.weight_key(self)
tensorflow.contrib.learn.python.learn.metric_spec.MetricSpec(self,metric_fn,prediction_key=None,label_key=None,weight_key=None)
tensorflow.contrib.learn.python.learn.metric_spec.MetricSpec.__init__(self,metric_fn,prediction_key=None,label_key=None,weight_key=None)
tensorflow.contrib.learn.python.learn.metric_spec.MetricSpec.__str__(self)
tensorflow.contrib.learn.python.learn.metric_spec.MetricSpec.create_metric_ops(self,inputs,labels,predictions)
tensorflow.contrib.learn.python.learn.metric_spec.MetricSpec.label_key(self)
tensorflow.contrib.learn.python.learn.metric_spec.MetricSpec.metric_fn(self)
tensorflow.contrib.learn.python.learn.metric_spec.MetricSpec.prediction_key(self)
tensorflow.contrib.learn.python.learn.metric_spec.MetricSpec.weight_key(self)
tensorflow.contrib.learn.python.learn.metric_spec._adapt_metric_fn(metric_fn,metric_fn_name,is_labels_required,is_weights_required)
tensorflow.contrib.learn.python.learn.metric_spec._args(fn)
tensorflow.contrib.learn.python.learn.metric_spec._assert_named_args(sentinel)
tensorflow.contrib.learn.python.learn.metric_spec._fn_name(fn)
tensorflow.contrib.learn.python.learn.metric_spec._matching_arg(fn_name,fn_args,candidate_args,canonical_arg,is_required=False)
tensorflow.contrib.metric_spec._adapt_metric_fn(metric_fn,metric_fn_name,is_labels_required,is_weights_required)
tensorflow.contrib.metric_spec._args(fn)
tensorflow.contrib.metric_spec._assert_named_args(sentinel)
tensorflow.contrib.metric_spec._fn_name(fn)
tensorflow.contrib.metric_spec._matching_arg(fn_name,fn_args,candidate_args,canonical_arg,is_required=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/evaluable.py----------------------------------------
tensorflow.contrib.Evaluable(object)
tensorflow.contrib.Evaluable.evaluate(self,x=None,y=None,input_fn=None,feed_fn=None,batch_size=None,steps=None,metrics=None,name=None,checkpoint_path=None,hooks=None)
tensorflow.contrib.Evaluable.model_dir(self)
tensorflow.contrib.learn.python.learn.evaluable.Evaluable(object)
tensorflow.contrib.learn.python.learn.evaluable.Evaluable.evaluate(self,x=None,y=None,input_fn=None,feed_fn=None,batch_size=None,steps=None,metrics=None,name=None,checkpoint_path=None,hooks=None)
tensorflow.contrib.learn.python.learn.evaluable.Evaluable.model_dir(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/experiment.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.experiment.start->time.time()
A:tensorflow.contrib.learn.python.learn.experiment.delay_secs->min(60, task_id * 5)
A:tensorflow.contrib.learn.python.learn.experiment.latest_path->tensorflow.python.training.saver.latest_checkpoint(self._estimator.model_dir)
A:tensorflow.contrib.learn.python.learn.experiment.last_warning_time->time.time()
A:tensorflow.contrib.learn.python.learn.experiment.eval_result->self._estimator.evaluate(input_fn=self._eval_input_fn, steps=1, metrics=self._eval_metrics, name='one_pass')
A:tensorflow.contrib.learn.python.learn.experiment.export_results->self._maybe_export(eval_result)
A:tensorflow.contrib.learn.python.learn.experiment.export_dir_base->os.path.join(compat.as_bytes(self._estimator.model_dir), compat.as_bytes('export'))
A:tensorflow.contrib.learn.python.learn.experiment._->self._maybe_export(eval_result)
A:tensorflow.contrib.learn.python.learn.experiment.server->tensorflow.python.training.server_lib.Server(config.cluster_spec, job_name=config.task_type, task_index=config.task_id, config=config.tf_config, start=False)
A:tensorflow.contrib.learn.python.learn.experiment.saved->getattr(obj, attr)
tensorflow.contrib.Experiment(self,estimator,train_input_fn,eval_input_fn,eval_metrics=None,train_steps=None,eval_steps=100,train_monitors=None,eval_hooks=None,local_eval_frequency=None,eval_delay_secs=120,continuous_eval_throttle_secs=60,min_eval_frequency=1,delay_workers_by_global_step=False,export_strategies=None)
tensorflow.contrib.Experiment._continuous_eval(self,input_fn,name,delay_secs,throttle_delay_secs,evaluate_checkpoint_only_once=True,continuous_eval_predicate_fn=None)
tensorflow.contrib.Experiment._maybe_export(self,eval_result,checkpoint_path=None)
tensorflow.contrib.Experiment._set_export_strategies(self,value)
tensorflow.contrib.Experiment._start_server(self)
tensorflow.contrib.Experiment.continuous_eval(self,delay_secs=None,throttle_delay_secs=None,evaluate_checkpoint_only_once=True,continuous_eval_predicate_fn=None)
tensorflow.contrib.Experiment.continuous_eval_on_train_data(self,delay_secs=None,throttle_delay_secs=None,continuous_eval_predicate_fn=None)
tensorflow.contrib.Experiment.estimator(self)
tensorflow.contrib.Experiment.eval_metrics(self)
tensorflow.contrib.Experiment.eval_steps(self)
tensorflow.contrib.Experiment.evaluate(self,delay_secs=None)
tensorflow.contrib.Experiment.extend_train_hooks(self,additional_hooks)
tensorflow.contrib.Experiment.local_run(self)
tensorflow.contrib.Experiment.reset_export_strategies(self,new_export_strategies=None)
tensorflow.contrib.Experiment.run_std_server(self)
tensorflow.contrib.Experiment.test(self)
tensorflow.contrib.Experiment.train(self,delay_secs=None)
tensorflow.contrib.Experiment.train_and_evaluate(self)
tensorflow.contrib.Experiment.train_steps(self)
tensorflow.contrib.experiment._new_attr_context(obj,attr)
tensorflow.contrib.learn.python.learn.experiment.Experiment(self,estimator,train_input_fn,eval_input_fn,eval_metrics=None,train_steps=None,eval_steps=100,train_monitors=None,eval_hooks=None,local_eval_frequency=None,eval_delay_secs=120,continuous_eval_throttle_secs=60,min_eval_frequency=1,delay_workers_by_global_step=False,export_strategies=None)
tensorflow.contrib.learn.python.learn.experiment.Experiment.__init__(self,estimator,train_input_fn,eval_input_fn,eval_metrics=None,train_steps=None,eval_steps=100,train_monitors=None,eval_hooks=None,local_eval_frequency=None,eval_delay_secs=120,continuous_eval_throttle_secs=60,min_eval_frequency=1,delay_workers_by_global_step=False,export_strategies=None)
tensorflow.contrib.learn.python.learn.experiment.Experiment._continuous_eval(self,input_fn,name,delay_secs,throttle_delay_secs,evaluate_checkpoint_only_once=True,continuous_eval_predicate_fn=None)
tensorflow.contrib.learn.python.learn.experiment.Experiment._maybe_export(self,eval_result,checkpoint_path=None)
tensorflow.contrib.learn.python.learn.experiment.Experiment._set_export_strategies(self,value)
tensorflow.contrib.learn.python.learn.experiment.Experiment._start_server(self)
tensorflow.contrib.learn.python.learn.experiment.Experiment.continuous_eval(self,delay_secs=None,throttle_delay_secs=None,evaluate_checkpoint_only_once=True,continuous_eval_predicate_fn=None)
tensorflow.contrib.learn.python.learn.experiment.Experiment.continuous_eval_on_train_data(self,delay_secs=None,throttle_delay_secs=None,continuous_eval_predicate_fn=None)
tensorflow.contrib.learn.python.learn.experiment.Experiment.estimator(self)
tensorflow.contrib.learn.python.learn.experiment.Experiment.eval_metrics(self)
tensorflow.contrib.learn.python.learn.experiment.Experiment.eval_steps(self)
tensorflow.contrib.learn.python.learn.experiment.Experiment.evaluate(self,delay_secs=None)
tensorflow.contrib.learn.python.learn.experiment.Experiment.extend_train_hooks(self,additional_hooks)
tensorflow.contrib.learn.python.learn.experiment.Experiment.local_run(self)
tensorflow.contrib.learn.python.learn.experiment.Experiment.reset_export_strategies(self,new_export_strategies=None)
tensorflow.contrib.learn.python.learn.experiment.Experiment.run_std_server(self)
tensorflow.contrib.learn.python.learn.experiment.Experiment.test(self)
tensorflow.contrib.learn.python.learn.experiment.Experiment.train(self,delay_secs=None)
tensorflow.contrib.learn.python.learn.experiment.Experiment.train_and_evaluate(self)
tensorflow.contrib.learn.python.learn.experiment.Experiment.train_steps(self)
tensorflow.contrib.learn.python.learn.experiment._new_attr_context(obj,attr)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/graph_actions.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.graph_actions._summary_writer_lock->threading.Lock()
A:tensorflow.contrib.learn.python.learn.graph_actions._graph_action_deprecation->deprecated('2017-02-15', 'graph_actions.py will be deleted. Use tf.train.* utilities instead. You can use learn/estimators/estimator.py as an example.')
A:tensorflow.contrib.learn.python.learn.graph_actions.tensors->list(set(tensors))
A:tensorflow.contrib.learn.python.learn.graph_actions.outputs->dict(zip([t.name if isinstance(t, ops.Tensor) else t for t in tensors], outputs))
A:tensorflow.contrib.learn.python.learn.graph_actions.induce_stop->monitor.step_end(step, outputs)
A:tensorflow.contrib.learn.python.learn.graph_actions.global_step_tensor->tensorflow.contrib.framework.python.ops.variables.assert_or_get_global_step(graph, global_step_tensor)
A:tensorflow.contrib.learn.python.learn.graph_actions.start_step->get_current_step()
A:tensorflow.contrib.learn.python.learn.graph_actions.scaffold->tensorflow.python.training.monitored_session.Scaffold(init_op=init_op, init_feed_dict=init_feed_dict, init_fn=init_fn, saver=monitored_session.Scaffold.get_or_default('saver', ops.GraphKeys.SAVERS, make_saver))
A:tensorflow.contrib.learn.python.learn.graph_actions.session_creator->tensorflow.python.training.monitored_session.ChiefSessionCreator(scaffold=scaffold, checkpoint_dir=output_dir, master=supervisor_master)
A:tensorflow.contrib.learn.python.learn.graph_actions.summary_writer->get_summary_writer(output_dir)
A:tensorflow.contrib.learn.python.learn.graph_actions.(_, loss)->super_sess.run([train_op, loss_op], feed_fn() if feed_fn else None)
A:tensorflow.contrib.learn.python.learn.graph_actions.supervisor->tensorflow.python.training.supervisor.Supervisor(graph, init_op=init_op or tf_supervisor.Supervisor.USE_DEFAULT, init_feed_dict=init_feed_dict, is_chief=supervisor_is_chief, logdir=output_dir, saver=_make_saver(graph, keep_checkpoint_max), global_step=global_step_tensor, summary_op=None, summary_writer=summary_writer, save_model_secs=supervisor_save_model_secs, init_fn=init_fn)
A:tensorflow.contrib.learn.python.learn.graph_actions.session->tensorflow.python.training.supervisor.Supervisor(graph, init_op=init_op or tf_supervisor.Supervisor.USE_DEFAULT, init_feed_dict=init_feed_dict, is_chief=supervisor_is_chief, logdir=output_dir, saver=_make_saver(graph, keep_checkpoint_max), global_step=global_step_tensor, summary_op=None, summary_writer=summary_writer, save_model_secs=supervisor_save_model_secs, init_fn=init_fn).PrepareSession(master=supervisor_master, start_standard_services=True)
A:tensorflow.contrib.learn.python.learn.graph_actions.start_time->time.time()
A:tensorflow.contrib.learn.python.learn.graph_actions.(outputs, should_stop)->_run_with_monitors(session, last_step + 1, [train_op, loss_op], feed_dict, monitors)
A:tensorflow.contrib.learn.python.learn.graph_actions.this_step->get_current_step()
A:tensorflow.contrib.learn.python.learn.graph_actions.excinfo->sys.exc_info()
A:tensorflow.contrib.learn.python.learn.graph_actions.last_step->get_current_step()
A:tensorflow.contrib.learn.python.learn.graph_actions.elements->tensorflow.python.framework.ops.get_collection(collection_name)
A:tensorflow.contrib.learn.python.learn.graph_actions.saver->_get_saver()
A:tensorflow.contrib.learn.python.learn.graph_actions.ready_op->_get_ready_op()
A:tensorflow.contrib.learn.python.learn.graph_actions.local_init_op->_get_local_init_op()
A:tensorflow.contrib.learn.python.learn.graph_actions.summary->tensorflow.core.framework.summary_pb2.Summary()
A:tensorflow.contrib.learn.python.learn.graph_actions.value->tensorflow.core.framework.summary_pb2.Summary().value.add()
A:tensorflow.contrib.learn.python.learn.graph_actions.value.simple_value->float(eval_results[key])
A:tensorflow.contrib.learn.python.learn.graph_actions.ready_for_local_init_op->_get_first_op_from_collection(ops.GraphKeys.READY_FOR_LOCAL_INIT_OP)
A:tensorflow.contrib.learn.python.learn.graph_actions.session_manager->tensorflow.python.training.session_manager.SessionManager(local_init_op=local_init_op, ready_op=ready_op, ready_for_local_init_op=ready_for_local_init_op)
A:tensorflow.contrib.learn.python.learn.graph_actions.(session, initialized)->tensorflow.python.training.session_manager.SessionManager(local_init_op=local_init_op, ready_op=ready_op, ready_for_local_init_op=ready_for_local_init_op).recover_session(master=supervisor_master, saver=saver, checkpoint_dir=checkpoint_path)
A:tensorflow.contrib.learn.python.learn.graph_actions.coord->tensorflow.python.training.coordinator.Coordinator()
A:tensorflow.contrib.learn.python.learn.graph_actions.threads->tensorflow.python.training.queue_runner.start_queue_runners(session, coord=coord)
A:tensorflow.contrib.learn.python.learn.graph_actions.current_global_step->tensorflow.python.training.supervisor.Supervisor(graph, init_op=init_op or tf_supervisor.Supervisor.USE_DEFAULT, init_feed_dict=init_feed_dict, is_chief=supervisor_is_chief, logdir=output_dir, saver=_make_saver(graph, keep_checkpoint_max), global_step=global_step_tensor, summary_op=None, summary_writer=summary_writer, save_model_secs=supervisor_save_model_secs, init_fn=init_fn).PrepareSession(master=supervisor_master, start_standard_services=True).run(global_step_tensor)
A:tensorflow.contrib.learn.python.learn.graph_actions.eval_results->tensorflow.python.training.supervisor.Supervisor(graph, init_op=init_op or tf_supervisor.Supervisor.USE_DEFAULT, init_feed_dict=init_feed_dict, is_chief=supervisor_is_chief, logdir=output_dir, saver=_make_saver(graph, keep_checkpoint_max), global_step=global_step_tensor, summary_op=None, summary_writer=summary_writer, save_model_secs=supervisor_save_model_secs, init_fn=init_fn).PrepareSession(master=supervisor_master, start_standard_services=True).run(eval_dict, feed_dict=feed_dict)
A:tensorflow.contrib.learn.python.learn.graph_actions.graph->tensorflow.contrib.framework.python.ops.ops.get_graph_from_inputs(output_dict.values())
tensorflow.contrib.evaluate(graph,output_dir,checkpoint_path,eval_dict,update_op=None,global_step_tensor=None,supervisor_master='',log_every_steps=10,feed_fn=None,max_steps=None)
tensorflow.contrib.graph_actions._eval_results_to_str(eval_results)
tensorflow.contrib.graph_actions._get_first_op_from_collection(collection_name)
tensorflow.contrib.graph_actions._get_local_init_op()
tensorflow.contrib.graph_actions._get_ready_op()
tensorflow.contrib.graph_actions._get_saver()
tensorflow.contrib.graph_actions._make_saver(graph,keep_checkpoint_max=5)
tensorflow.contrib.graph_actions._monitored_train(graph,output_dir,train_op,loss_op,global_step_tensor=None,init_op=None,init_feed_dict=None,init_fn=None,log_every_steps=10,supervisor_is_chief=True,supervisor_master='',supervisor_save_model_secs=600,supervisor_save_model_steps=None,keep_checkpoint_max=5,keep_checkpoint_every_n_hours=10000.0,supervisor_save_summaries_secs=None,supervisor_save_summaries_steps=100,feed_fn=None,steps=None,fail_on_nan_loss=True,hooks=None,max_steps=None)
tensorflow.contrib.graph_actions._restore_from_checkpoint(session,graph,checkpoint_path,saver=None)
tensorflow.contrib.graph_actions._run_with_monitors(session,step,tensors,feed_dict,monitors)
tensorflow.contrib.graph_actions._train_internal(graph,output_dir,train_op,loss_op,global_step_tensor,init_op,init_feed_dict,init_fn,log_every_steps,supervisor_is_chief,supervisor_master,supervisor_save_model_secs,keep_checkpoint_max,supervisor_save_summaries_steps,feed_fn,steps,fail_on_nan_loss,monitors,max_steps)
tensorflow.contrib.graph_actions._write_summary_results(output_dir,eval_results,current_global_step)
tensorflow.contrib.graph_actions.clear_summary_writers()
tensorflow.contrib.graph_actions.get_summary_writer(logdir)
tensorflow.contrib.infer(restore_checkpoint_path,output_dict,feed_dict=None)
tensorflow.contrib.learn.python.learn.graph_actions._eval_results_to_str(eval_results)
tensorflow.contrib.learn.python.learn.graph_actions._get_first_op_from_collection(collection_name)
tensorflow.contrib.learn.python.learn.graph_actions._get_local_init_op()
tensorflow.contrib.learn.python.learn.graph_actions._get_ready_op()
tensorflow.contrib.learn.python.learn.graph_actions._get_saver()
tensorflow.contrib.learn.python.learn.graph_actions._make_saver(graph,keep_checkpoint_max=5)
tensorflow.contrib.learn.python.learn.graph_actions._monitored_train(graph,output_dir,train_op,loss_op,global_step_tensor=None,init_op=None,init_feed_dict=None,init_fn=None,log_every_steps=10,supervisor_is_chief=True,supervisor_master='',supervisor_save_model_secs=600,supervisor_save_model_steps=None,keep_checkpoint_max=5,keep_checkpoint_every_n_hours=10000.0,supervisor_save_summaries_secs=None,supervisor_save_summaries_steps=100,feed_fn=None,steps=None,fail_on_nan_loss=True,hooks=None,max_steps=None)
tensorflow.contrib.learn.python.learn.graph_actions._restore_from_checkpoint(session,graph,checkpoint_path,saver=None)
tensorflow.contrib.learn.python.learn.graph_actions._run_with_monitors(session,step,tensors,feed_dict,monitors)
tensorflow.contrib.learn.python.learn.graph_actions._train_internal(graph,output_dir,train_op,loss_op,global_step_tensor,init_op,init_feed_dict,init_fn,log_every_steps,supervisor_is_chief,supervisor_master,supervisor_save_model_secs,keep_checkpoint_max,supervisor_save_summaries_steps,feed_fn,steps,fail_on_nan_loss,monitors,max_steps)
tensorflow.contrib.learn.python.learn.graph_actions._write_summary_results(output_dir,eval_results,current_global_step)
tensorflow.contrib.learn.python.learn.graph_actions.clear_summary_writers()
tensorflow.contrib.learn.python.learn.graph_actions.evaluate(graph,output_dir,checkpoint_path,eval_dict,update_op=None,global_step_tensor=None,supervisor_master='',log_every_steps=10,feed_fn=None,max_steps=None)
tensorflow.contrib.learn.python.learn.graph_actions.get_summary_writer(logdir)
tensorflow.contrib.learn.python.learn.graph_actions.infer(restore_checkpoint_path,output_dict,feed_dict=None)
tensorflow.contrib.learn.python.learn.graph_actions.run_feeds(*args,**kwargs)
tensorflow.contrib.learn.python.learn.graph_actions.run_feeds_iter(output_dict,feed_dicts,restore_checkpoint_path=None)
tensorflow.contrib.learn.python.learn.graph_actions.run_n(output_dict,feed_dict=None,restore_checkpoint_path=None,n=1)
tensorflow.contrib.learn.python.learn.graph_actions.train(graph,output_dir,train_op,loss_op,global_step_tensor=None,init_op=None,init_feed_dict=None,init_fn=None,log_every_steps=10,supervisor_is_chief=True,supervisor_master='',supervisor_save_model_secs=600,keep_checkpoint_max=5,supervisor_save_summaries_steps=100,feed_fn=None,steps=None,fail_on_nan_loss=True,monitors=None,max_steps=None)
tensorflow.contrib.run_feeds(*args,**kwargs)
tensorflow.contrib.run_feeds_iter(output_dict,feed_dicts,restore_checkpoint_path=None)
tensorflow.contrib.run_n(output_dict,feed_dict=None,restore_checkpoint_path=None,n=1)
tensorflow.contrib.train(graph,output_dir,train_op,loss_op,global_step_tensor=None,init_op=None,init_feed_dict=None,init_fn=None,log_every_steps=10,supervisor_is_chief=True,supervisor_master='',supervisor_save_model_secs=600,keep_checkpoint_max=5,supervisor_save_summaries_steps=100,feed_fn=None,steps=None,fail_on_nan_loss=True,monitors=None,max_steps=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/tensorflow_dataframe.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.filenames->_expand_file_names(filepatterns)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.names->set(gfile.Glob(filepattern))
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.graph->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.session->tensorflow.python.client.session.Session()
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.self_built->self.build(**kwargs)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.keys->list(self_built.keys())
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.cols->list(self_built.values())
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.coord->tensorflow.python.training.coordinator.Coordinator()
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.threads->tensorflow.python.training.queue_runner.start_queue_runners(sess=session, coord=coord)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.values->tensorflow.python.client.session.Session().run(cols)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.result->type(self)()
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.result[key]->col.select_rows(boolean_series)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.(left_mask,)->tensorflow.contrib.learn.python.learn.dataframe.transforms.split_mask.SplitMask(proportion)(index_series)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.left_rows->left_rows.batch(batch_size=batch_size, shuffle=False).batch(batch_size=batch_size, shuffle=False)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.right_rows->right_rows.batch(batch_size=batch_size, shuffle=False).batch(batch_size=batch_size, shuffle=False)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.m->self.materialize_to_memory(batch_size=base_batch_size)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.left_rows_df->left_rows_df.materialize_to_memory(batch_size=batch_size).materialize_to_memory(batch_size=batch_size)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.right_rows_df->right_rows_df.materialize_to_memory(batch_size=batch_size).materialize_to_memory(batch_size=batch_size)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.unordered_dict_of_arrays->self.run_one_epoch()
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.ordered_dict_of_arrays->collections.OrderedDict(unordered_dict_of_arrays)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.column_names->list(self._columns.keys())
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.batcher->tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.Batch(batch_size, output_names=column_names, num_threads=num_threads, queue_capacity=queue_capacity)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.batched_series->batcher(list(self._columns.values()))
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.dataframe->cls()
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.default_values->get_default_values(column_names)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.(index, value)->tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.TextFileSource(filenames, reader_kwargs=reader_kwargs, enqueue_size=enqueue_size, batch_size=batch_size, queue_capacity=queue_capacity, shuffle=shuffle, min_after_dequeue=min_after_dequeue, num_threads=num_threads, seed=seed)()
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.parser->tensorflow.contrib.learn.python.learn.dataframe.transforms.example_parser.ExampleParser(features)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.parsed->parser(record)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.column_dict->parser(record)._asdict()
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.strip_value->_get_default_value(feature_spec[name])
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.(dataframe[name],)->tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify.Sparsify(strip_value)(dataframe[name])
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.(index, record)->tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource(reader_cls, filenames, enqueue_size=enqueue_size, batch_size=batch_size, queue_capacity=queue_capacity, shuffle=shuffle, min_after_dequeue=min_after_dequeue, num_threads=num_threads, seed=seed)()
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.pandas_source->tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.PandasSource(pandas_dataframe, num_threads=num_threads, enqueue_size=enqueue_size, batch_size=batch_size, queue_capacity=queue_capacity, shuffle=shuffle, min_after_dequeue=min_after_dequeue, seed=seed, data_name=data_name)
A:tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.numpy_source->tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.OrderedDictNumpySource(ordered_dict_of_arrays, num_threads=num_threads, enqueue_size=enqueue_size, batch_size=batch_size, queue_capacity=queue_capacity, shuffle=shuffle, min_after_dequeue=min_after_dequeue, seed=seed, data_name=data_name)
tensorflow.contrib.TensorFlowDataFrame(df.DataFrame)
tensorflow.contrib.TensorFlowDataFrame._from_csv_base(cls,filepatterns,get_default_values,has_header,column_names,num_threads,enqueue_size,batch_size,queue_capacity,min_after_dequeue,shuffle,seed)
tensorflow.contrib.TensorFlowDataFrame.batch(self,batch_size,shuffle=False,num_threads=1,queue_capacity=None,min_after_dequeue=None,seed=None)
tensorflow.contrib.TensorFlowDataFrame.from_csv(cls,filepatterns,default_values,has_header=True,column_names=None,num_threads=1,enqueue_size=None,batch_size=32,queue_capacity=None,min_after_dequeue=None,shuffle=True,seed=None)
tensorflow.contrib.TensorFlowDataFrame.from_csv_with_feature_spec(cls,filepatterns,feature_spec,has_header=True,column_names=None,num_threads=1,enqueue_size=None,batch_size=32,queue_capacity=None,min_after_dequeue=None,shuffle=True,seed=None)
tensorflow.contrib.TensorFlowDataFrame.from_examples(cls,filepatterns,features,reader_cls=io_ops.TFRecordReader,num_threads=1,enqueue_size=None,batch_size=32,queue_capacity=None,min_after_dequeue=None,shuffle=True,seed=None)
tensorflow.contrib.TensorFlowDataFrame.from_numpy(cls,numpy_array,num_threads=None,enqueue_size=None,batch_size=None,queue_capacity=None,min_after_dequeue=None,shuffle=True,seed=None,data_name='numpy_data')
tensorflow.contrib.TensorFlowDataFrame.from_ordereddict(cls,ordered_dict_of_arrays,num_threads=None,enqueue_size=None,batch_size=None,queue_capacity=None,min_after_dequeue=None,shuffle=True,seed=None,data_name='numpy_data')
tensorflow.contrib.TensorFlowDataFrame.from_pandas(cls,pandas_dataframe,num_threads=None,enqueue_size=None,batch_size=None,queue_capacity=None,min_after_dequeue=None,shuffle=True,seed=None,data_name='pandas_data')
tensorflow.contrib.TensorFlowDataFrame.materialize_to_memory(self,batch_size)
tensorflow.contrib.TensorFlowDataFrame.run(self,num_batches=None,graph=None,session=None,start_queues=True,initialize_variables=True,**kwargs)
tensorflow.contrib.TensorFlowDataFrame.run_one_batch(self)
tensorflow.contrib.TensorFlowDataFrame.run_one_epoch(self)
tensorflow.contrib.TensorFlowDataFrame.select_rows(self,boolean_series)
tensorflow.contrib.TensorFlowDataFrame.split(self,index_series,proportion,batch_size=None)
tensorflow.contrib.TensorFlowDataFrame.split_fast(self,index_series,proportion,batch_size,base_batch_size=1000)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame(df.DataFrame)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame._from_csv_base(cls,filepatterns,get_default_values,has_header,column_names,num_threads,enqueue_size,batch_size,queue_capacity,min_after_dequeue,shuffle,seed)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame.batch(self,batch_size,shuffle=False,num_threads=1,queue_capacity=None,min_after_dequeue=None,seed=None)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame.from_csv(cls,filepatterns,default_values,has_header=True,column_names=None,num_threads=1,enqueue_size=None,batch_size=32,queue_capacity=None,min_after_dequeue=None,shuffle=True,seed=None)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame.from_csv_with_feature_spec(cls,filepatterns,feature_spec,has_header=True,column_names=None,num_threads=1,enqueue_size=None,batch_size=32,queue_capacity=None,min_after_dequeue=None,shuffle=True,seed=None)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame.from_examples(cls,filepatterns,features,reader_cls=io_ops.TFRecordReader,num_threads=1,enqueue_size=None,batch_size=32,queue_capacity=None,min_after_dequeue=None,shuffle=True,seed=None)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame.from_numpy(cls,numpy_array,num_threads=None,enqueue_size=None,batch_size=None,queue_capacity=None,min_after_dequeue=None,shuffle=True,seed=None,data_name='numpy_data')
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame.from_ordereddict(cls,ordered_dict_of_arrays,num_threads=None,enqueue_size=None,batch_size=None,queue_capacity=None,min_after_dequeue=None,shuffle=True,seed=None,data_name='numpy_data')
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame.from_pandas(cls,pandas_dataframe,num_threads=None,enqueue_size=None,batch_size=None,queue_capacity=None,min_after_dequeue=None,shuffle=True,seed=None,data_name='pandas_data')
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame.materialize_to_memory(self,batch_size)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame.run(self,num_batches=None,graph=None,session=None,start_queues=True,initialize_variables=True,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame.run_one_batch(self)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame.run_one_epoch(self)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame.select_rows(self,boolean_series)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame.split(self,index_series,proportion,batch_size=None)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe.TensorFlowDataFrame.split_fast(self,index_series,proportion,batch_size,base_batch_size=1000)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe._dtype_to_nan(dtype)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe._expand_file_names(filepatterns)
tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe._get_default_value(feature_spec)
tensorflow.contrib.tensorflow_dataframe._dtype_to_nan(dtype)
tensorflow.contrib.tensorflow_dataframe._expand_file_names(filepatterns)
tensorflow.contrib.tensorflow_dataframe._get_default_value(feature_spec)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/series.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.series.self._repr->TransformedSeries.make_repr(self._input_series, self._transform, self._output_name)
A:tensorflow.contrib.learn.python.learn.dataframe.series.all_outputs->self._transform.build_transitive(self._input_series, cache, **kwargs)
A:tensorflow.contrib.learn.python.learn.dataframe.series.input_series_keys_joined->', '.join(input_series_keys)
tensorflow.contrib.PredefinedSeries(self,name,feature_spec)
tensorflow.contrib.PredefinedSeries.__eq__(self,other)
tensorflow.contrib.PredefinedSeries.__ne__(self,other)
tensorflow.contrib.PredefinedSeries.__repr__(self)
tensorflow.contrib.PredefinedSeries.build(self,cache,**kwargs)
tensorflow.contrib.PredefinedSeries.feature_spec(self)
tensorflow.contrib.PredefinedSeries.name(self)
tensorflow.contrib.PredefinedSeries.required_base_features(self)
tensorflow.contrib.Series(object)
tensorflow.contrib.Series.build(self,cache,**kwargs)
tensorflow.contrib.Series.register_binary_op(cls,series_method_name)
tensorflow.contrib.Series.register_unary_op(cls,series_method_name)
tensorflow.contrib.TransformedSeries(self,input_series,transform,output_name)
tensorflow.contrib.TransformedSeries.__repr__(self)
tensorflow.contrib.TransformedSeries.build(self,cache=None,**kwargs)
tensorflow.contrib.TransformedSeries.make_repr(input_series,transform,output_name)
tensorflow.contrib.TransformedSeries.required_base_features(self)
tensorflow.contrib.learn.python.learn.dataframe.series.PredefinedSeries(self,name,feature_spec)
tensorflow.contrib.learn.python.learn.dataframe.series.PredefinedSeries.__eq__(self,other)
tensorflow.contrib.learn.python.learn.dataframe.series.PredefinedSeries.__init__(self,name,feature_spec)
tensorflow.contrib.learn.python.learn.dataframe.series.PredefinedSeries.__ne__(self,other)
tensorflow.contrib.learn.python.learn.dataframe.series.PredefinedSeries.__repr__(self)
tensorflow.contrib.learn.python.learn.dataframe.series.PredefinedSeries.build(self,cache,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.series.PredefinedSeries.feature_spec(self)
tensorflow.contrib.learn.python.learn.dataframe.series.PredefinedSeries.name(self)
tensorflow.contrib.learn.python.learn.dataframe.series.PredefinedSeries.required_base_features(self)
tensorflow.contrib.learn.python.learn.dataframe.series.Series(object)
tensorflow.contrib.learn.python.learn.dataframe.series.Series.build(self,cache,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.series.Series.register_binary_op(cls,series_method_name)
tensorflow.contrib.learn.python.learn.dataframe.series.Series.register_unary_op(cls,series_method_name)
tensorflow.contrib.learn.python.learn.dataframe.series.TransformedSeries(self,input_series,transform,output_name)
tensorflow.contrib.learn.python.learn.dataframe.series.TransformedSeries.__init__(self,input_series,transform,output_name)
tensorflow.contrib.learn.python.learn.dataframe.series.TransformedSeries.__repr__(self)
tensorflow.contrib.learn.python.learn.dataframe.series.TransformedSeries.build(self,cache=None,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.series.TransformedSeries.make_repr(input_series,transform,output_name)
tensorflow.contrib.learn.python.learn.dataframe.series.TransformedSeries.required_base_features(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/estimator_utils.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.estimator_utils.tensors->dataframe.select_columns(list(base_input_keys) + list(label_keys)).build(**kwargs)
A:tensorflow.contrib.learn.python.learn.dataframe.estimator_utils.feature_specs->_infer_feature_specs(dataframe, base_input_keys_with_defaults)
A:tensorflow.contrib.learn.python.learn.dataframe.estimator_utils.rebuilt_series->tensorflow.contrib.learn.python.learn.dataframe.series.TransformedSeries(rebuilt_inputs, orig_series._transform, orig_series._output_name)
A:tensorflow.contrib.learn.python.learn.dataframe.estimator_utils.base_input_keys->base_input_keys_with_defaults.keys()
A:tensorflow.contrib.learn.python.learn.dataframe.estimator_utils.(new_feature_series_dict, feature_specs)->_build_alternate_universe(dataframe, base_input_keys_with_defaults, feature_keys)
A:tensorflow.contrib.learn.python.learn.dataframe.estimator_utils.limited_dataframe->dataframe.select_columns(list(base_input_keys) + list(label_keys))
tensorflow.contrib.estimator_utils._build_alternate_universe(dataframe,base_input_keys_with_defaults,feature_keys)
tensorflow.contrib.estimator_utils._infer_feature_specs(dataframe,keys_with_defaults)
tensorflow.contrib.estimator_utils._to_feature_spec(tensor,default_value=None)
tensorflow.contrib.estimator_utils.to_feature_columns_and_input_fn(dataframe,base_input_keys_with_defaults,feature_keys,label_keys=None,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.estimator_utils._build_alternate_universe(dataframe,base_input_keys_with_defaults,feature_keys)
tensorflow.contrib.learn.python.learn.dataframe.estimator_utils._infer_feature_specs(dataframe,keys_with_defaults)
tensorflow.contrib.learn.python.learn.dataframe.estimator_utils._to_feature_spec(tensor,default_value=None)
tensorflow.contrib.learn.python.learn.dataframe.estimator_utils.to_feature_columns_and_input_fn(dataframe,base_input_keys_with_defaults,feature_keys,label_keys=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/dataframe.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.dataframe.self._columns[k]->v()
A:tensorflow.contrib.learn.python.learn.dataframe.dataframe.result->type(self)()
tensorflow.contrib.DataFrame(self)
tensorflow.contrib.DataFrame.__delitem__(self,key)
tensorflow.contrib.DataFrame.__getitem__(self,key)
tensorflow.contrib.DataFrame.__len__(self)
tensorflow.contrib.DataFrame.__setitem__(self,key,value)
tensorflow.contrib.DataFrame.assign(self,**kwargs)
tensorflow.contrib.DataFrame.build(self,**kwargs)
tensorflow.contrib.DataFrame.columns(self)
tensorflow.contrib.DataFrame.exclude_columns(self,exclude_keys)
tensorflow.contrib.DataFrame.select_columns(self,keys)
tensorflow.contrib.learn.python.learn.dataframe.dataframe.DataFrame(self)
tensorflow.contrib.learn.python.learn.dataframe.dataframe.DataFrame.__delitem__(self,key)
tensorflow.contrib.learn.python.learn.dataframe.dataframe.DataFrame.__getitem__(self,key)
tensorflow.contrib.learn.python.learn.dataframe.dataframe.DataFrame.__init__(self)
tensorflow.contrib.learn.python.learn.dataframe.dataframe.DataFrame.__len__(self)
tensorflow.contrib.learn.python.learn.dataframe.dataframe.DataFrame.__setitem__(self,key,value)
tensorflow.contrib.learn.python.learn.dataframe.dataframe.DataFrame.assign(self,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.dataframe.DataFrame.build(self,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.dataframe.DataFrame.columns(self)
tensorflow.contrib.learn.python.learn.dataframe.dataframe.DataFrame.exclude_columns(self,exclude_keys)
tensorflow.contrib.learn.python.learn.dataframe.dataframe.DataFrame.select_columns(self,keys)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transform.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.transform.self._return_type->collections.namedtuple(return_type_name, self.output_names)
A:tensorflow.contrib.learn.python.learn.dataframe.transform.parameters_joined->', '.join(parameters_sorted)
A:tensorflow.contrib.learn.python.learn.dataframe.transform.input_series->_make_list_of_series(input_series)
A:tensorflow.contrib.learn.python.learn.dataframe.transform.output_series->self._produce_output_series(input_series)
A:tensorflow.contrib.learn.python.learn.dataframe.transform.result->self.return_type(*output_tensors)
A:tensorflow.contrib.learn.python.learn.dataframe.transform.cache[output_repr]->getattr(result, output_name)
tensorflow.contrib.TensorFlowTransform(Transform)
tensorflow.contrib.TensorFlowTransform._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.TensorFlowTransform._check_output_tensors(self,output_tensors)
tensorflow.contrib.TensorFlowTransform._produce_output_series(self,input_series=None)
tensorflow.contrib.TensorFlowTransform.build_transitive(self,input_series,cache=None,**kwargs)
tensorflow.contrib.Transform(self)
tensorflow.contrib.Transform.__repr__(self)
tensorflow.contrib.Transform.__str__(self)
tensorflow.contrib.Transform._output_names(self)
tensorflow.contrib.Transform._produce_output_series(self,input_series)
tensorflow.contrib.Transform.input_valency(self)
tensorflow.contrib.Transform.name(self)
tensorflow.contrib.Transform.output_names(self)
tensorflow.contrib.Transform.parameters(self)
tensorflow.contrib.Transform.return_type(self)
tensorflow.contrib.learn.python.learn.dataframe.transform.TensorFlowTransform(Transform)
tensorflow.contrib.learn.python.learn.dataframe.transform.TensorFlowTransform._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transform.TensorFlowTransform._check_output_tensors(self,output_tensors)
tensorflow.contrib.learn.python.learn.dataframe.transform.TensorFlowTransform._produce_output_series(self,input_series=None)
tensorflow.contrib.learn.python.learn.dataframe.transform.TensorFlowTransform.build_transitive(self,input_series,cache=None,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transform.Transform(self)
tensorflow.contrib.learn.python.learn.dataframe.transform.Transform.__init__(self)
tensorflow.contrib.learn.python.learn.dataframe.transform.Transform.__repr__(self)
tensorflow.contrib.learn.python.learn.dataframe.transform.Transform.__str__(self)
tensorflow.contrib.learn.python.learn.dataframe.transform.Transform._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transform.Transform._produce_output_series(self,input_series)
tensorflow.contrib.learn.python.learn.dataframe.transform.Transform.input_valency(self)
tensorflow.contrib.learn.python.learn.dataframe.transform.Transform.name(self)
tensorflow.contrib.learn.python.learn.dataframe.transform.Transform.output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transform.Transform.parameters(self)
tensorflow.contrib.learn.python.learn.dataframe.transform.Transform.return_type(self)
tensorflow.contrib.learn.python.learn.dataframe.transform._make_list_of_series(x)
tensorflow.contrib.learn.python.learn.dataframe.transform._make_tuple_of_string(x)
tensorflow.contrib.learn.python.learn.dataframe.transform.parameter(func)
tensorflow.contrib.parameter(func)
tensorflow.contrib.transform._make_list_of_series(x)
tensorflow.contrib.transform._make_tuple_of_string(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/queues/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/queues/feeding_queue_runner.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/queues/feeding_functions.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transforms/csv_parser.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.csv_parser.self._column_names->tuple(column_names)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.csv_parser.parsed_values->tensorflow.python.ops.parsing_ops.decode_csv(input_tensors[0], record_defaults=default_consts)
tensorflow.contrib.learn.python.learn.dataframe.transforms.csv_parser.CSVParser(self,column_names,default_values)
tensorflow.contrib.learn.python.learn.dataframe.transforms.csv_parser.CSVParser.__init__(self,column_names,default_values)
tensorflow.contrib.learn.python.learn.dataframe.transforms.csv_parser.CSVParser._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transforms.csv_parser.CSVParser._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.csv_parser.CSVParser.column_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.csv_parser.CSVParser.default_values(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.csv_parser.CSVParser.input_valency(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.csv_parser.CSVParser.name(self)
tensorflow.contrib.transforms.csv_parser.CSVParser(self,column_names,default_values)
tensorflow.contrib.transforms.csv_parser.CSVParser._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.transforms.csv_parser.CSVParser._output_names(self)
tensorflow.contrib.transforms.csv_parser.CSVParser.column_names(self)
tensorflow.contrib.transforms.csv_parser.CSVParser.default_values(self)
tensorflow.contrib.transforms.csv_parser.CSVParser.input_valency(self)
tensorflow.contrib.transforms.csv_parser.CSVParser.name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transforms/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transforms/example_parser.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.example_parser.self._ordered_features->collections.OrderedDict(features)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.example_parser.parsed_values->tensorflow.python.ops.parsing_ops.parse_example(input_tensors[0], features=self._ordered_features)
tensorflow.contrib.learn.python.learn.dataframe.transforms.example_parser.ExampleParser(self,features)
tensorflow.contrib.learn.python.learn.dataframe.transforms.example_parser.ExampleParser.__init__(self,features)
tensorflow.contrib.learn.python.learn.dataframe.transforms.example_parser.ExampleParser._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transforms.example_parser.ExampleParser._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.example_parser.ExampleParser.feature_definitions(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.example_parser.ExampleParser.input_valency(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.example_parser.ExampleParser.name(self)
tensorflow.contrib.transforms.example_parser.ExampleParser(self,features)
tensorflow.contrib.transforms.example_parser.ExampleParser._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.transforms.example_parser.ExampleParser._output_names(self)
tensorflow.contrib.transforms.example_parser.ExampleParser.feature_definitions(self)
tensorflow.contrib.transforms.example_parser.ExampleParser.input_valency(self)
tensorflow.contrib.transforms.example_parser.ExampleParser.name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transforms/hashes.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.hashes.result->tensorflow.python.ops.string_ops.string_to_hash_bucket_fast(input_tensors[0], self._num_buckets, name=None)
tensorflow.contrib.HashFast(self,num_buckets)
tensorflow.contrib.HashFast._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.HashFast._output_names(self)
tensorflow.contrib.HashFast.input_valency(self)
tensorflow.contrib.HashFast.name(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.hashes.HashFast(self,num_buckets)
tensorflow.contrib.learn.python.learn.dataframe.transforms.hashes.HashFast.__init__(self,num_buckets)
tensorflow.contrib.learn.python.learn.dataframe.transforms.hashes.HashFast._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transforms.hashes.HashFast._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.hashes.HashFast.input_valency(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.hashes.HashFast.name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transforms/boolean_mask.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.boolean_mask.mask->tensorflow.python.ops.array_ops.squeeze(mask)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.boolean_mask.mask_rows->tensorflow.python.ops.array_ops.where(mask)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.boolean_mask.first_indices->tensorflow.python.ops.array_ops.squeeze(array_ops.slice(sparse_tensor.indices, [0, 0], [-1, 1]))
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.boolean_mask.sparse_entry_matches->tensorflow.python.ops.functional_ops.map_fn(lambda x: math_ops.equal(first_indices, x), mask_rows, dtype=dtypes.bool)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.boolean_mask.to_retain->tensorflow.python.ops.array_ops.reshape(functional_ops.foldl(math_ops.logical_or, sparse_entry_matches), [-1])
tensorflow.contrib.BooleanMask(transform.TensorFlowTransform)
tensorflow.contrib.BooleanMask._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.BooleanMask._output_names(self)
tensorflow.contrib.BooleanMask.input_valency(self)
tensorflow.contrib.BooleanMask.name(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.boolean_mask.BooleanMask(transform.TensorFlowTransform)
tensorflow.contrib.learn.python.learn.dataframe.transforms.boolean_mask.BooleanMask._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transforms.boolean_mask.BooleanMask._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.boolean_mask.BooleanMask.input_valency(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.boolean_mask.BooleanMask.name(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.boolean_mask.sparse_boolean_mask(sparse_tensor,mask,name='sparse_boolean_mask')
tensorflow.contrib.transforms.boolean_mask.sparse_boolean_mask(sparse_tensor,mask,name='sparse_boolean_mask')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transforms/difference.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.difference.result->tensorflow.python.ops.sparse_ops.sparse_add(input_tensors[0], _negate_sparse(input_tensors[1]))
tensorflow.contrib.Difference(self)
tensorflow.contrib.Difference._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.Difference._output_names(self)
tensorflow.contrib.Difference.input_valency(self)
tensorflow.contrib.Difference.name(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.difference.Difference(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.difference.Difference.__init__(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.difference.Difference._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transforms.difference.Difference._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.difference.Difference.input_valency(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.difference.Difference.name(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.difference._negate_sparse(st)
tensorflow.contrib.transforms.difference._negate_sparse(st)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transforms/sparsify.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify.strip_hot->tensorflow.python.ops.math_ops.equal(d, array_ops.constant([self.strip_value], dtype=d.dtype))
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify.keep_hot->tensorflow.python.ops.math_ops.logical_not(strip_hot)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify.length->tensorflow.python.ops.array_ops.reshape(array_ops.shape(d), [])
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify.indices->tensorflow.python.ops.array_ops.boolean_mask(math_ops.range(length), keep_hot)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify.values->tensorflow.python.ops.array_ops.boolean_mask(d, keep_hot)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify.sparse_indices->tensorflow.python.ops.array_ops.reshape(math_ops.cast(indices, dtypes.int64), [-1, 1])
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify.shape->tensorflow.python.ops.math_ops.cast(array_ops.shape(d), dtypes.int64)
tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify.Sparsify(self,strip_value)
tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify.Sparsify.__init__(self,strip_value)
tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify.Sparsify._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify.Sparsify._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify.Sparsify.input_valency(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify.Sparsify.name(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify.Sparsify.strip_value(self)
tensorflow.contrib.transforms.sparsify.Sparsify(self,strip_value)
tensorflow.contrib.transforms.sparsify.Sparsify._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.transforms.sparsify.Sparsify._output_names(self)
tensorflow.contrib.transforms.sparsify.Sparsify.input_valency(self)
tensorflow.contrib.transforms.sparsify.Sparsify.name(self)
tensorflow.contrib.transforms.sparsify.Sparsify.strip_value(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transforms/unary_transforms.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.unary_transforms.doc->DOC_FORMAT_STRING.format(operation.__name__, operation.__doc__)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.unary_transforms.result->operation(input_tensor)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.unary_transforms.cls->type(operation.__name__, (transform.TensorFlowTransform,), {'name': name, '__doc__': doc, 'input_valency': input_valency, '_output_names': _output_names, '_apply_transform': _apply_transform})
tensorflow.contrib._ut.register_unary_op(registered_name,operation,ignore_dtype=None)
tensorflow.contrib.learn.python.learn.dataframe.transforms.unary_transforms.register_unary_op(registered_name,operation,ignore_dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transforms/sum.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.sum.result->tensorflow.python.ops.sparse_ops.sparse_add(input_tensors[0], input_tensors[1])
tensorflow.contrib.Sum(self)
tensorflow.contrib.Sum._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.Sum._output_names(self)
tensorflow.contrib.Sum.input_valency(self)
tensorflow.contrib.Sum.name(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.sum.Sum(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.sum.Sum.__init__(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.sum.Sum._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transforms.sum.Sum._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.sum.Sum.input_valency(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.sum.Sum.name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transforms/in_memory_source.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.queue->tensorflow.contrib.learn.python.learn.dataframe.queues.feeding_functions.enqueue_data(self.data, self.queue_capacity, self.shuffle, self.min_after_dequeue, num_threads=self.num_threads, seed=self.seed, name=self.data_name, enqueue_size=self.enqueue_size, num_epochs=kwargs.get('num_epochs'))
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.dequeued->tensorflow.contrib.learn.python.learn.dataframe.queues.feeding_functions.enqueue_data(self.data, self.queue_capacity, self.shuffle, self.min_after_dequeue, num_threads=self.num_threads, seed=self.seed, name=self.data_name, enqueue_size=self.enqueue_size, num_epochs=kwargs.get('num_epochs')).dequeue_many(self.batch_size)
tensorflow.contrib.NumpySource(BaseInMemorySource)
tensorflow.contrib.NumpySource._output_names(self)
tensorflow.contrib.NumpySource.name(self)
tensorflow.contrib.PandasSource(self,dataframe,num_threads=None,enqueue_size=None,batch_size=None,queue_capacity=None,shuffle=False,min_after_dequeue=None,seed=None,data_name='pandas_data')
tensorflow.contrib.PandasSource._output_names(self)
tensorflow.contrib.PandasSource.name(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.BaseInMemorySource(self,data,num_threads=None,enqueue_size=None,batch_size=None,queue_capacity=None,shuffle=False,min_after_dequeue=None,seed=None,data_name='in_memory_data')
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.BaseInMemorySource.__init__(self,data,num_threads=None,enqueue_size=None,batch_size=None,queue_capacity=None,shuffle=False,min_after_dequeue=None,seed=None,data_name='in_memory_data')
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.BaseInMemorySource._apply_transform(self,transform_input,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.BaseInMemorySource.batch_size(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.BaseInMemorySource.data(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.BaseInMemorySource.data_name(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.BaseInMemorySource.enqueue_size(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.BaseInMemorySource.input_valency(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.BaseInMemorySource.min_after_dequeue(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.BaseInMemorySource.num_threads(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.BaseInMemorySource.queue_capacity(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.BaseInMemorySource.seed(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.BaseInMemorySource.shuffle(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.NumpySource(BaseInMemorySource)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.NumpySource._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.NumpySource.name(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.OrderedDictNumpySource(self,ordered_dict_of_arrays,num_threads=None,enqueue_size=None,batch_size=None,queue_capacity=None,shuffle=False,min_after_dequeue=None,seed=None,data_name='pandas_data')
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.OrderedDictNumpySource.__init__(self,ordered_dict_of_arrays,num_threads=None,enqueue_size=None,batch_size=None,queue_capacity=None,shuffle=False,min_after_dequeue=None,seed=None,data_name='pandas_data')
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.OrderedDictNumpySource._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.OrderedDictNumpySource.name(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.PandasSource(self,dataframe,num_threads=None,enqueue_size=None,batch_size=None,queue_capacity=None,shuffle=False,min_after_dequeue=None,seed=None,data_name='pandas_data')
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.PandasSource.__init__(self,dataframe,num_threads=None,enqueue_size=None,batch_size=None,queue_capacity=None,shuffle=False,min_after_dequeue=None,seed=None,data_name='pandas_data')
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.PandasSource._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source.PandasSource.name(self)
tensorflow.contrib.transforms.in_memory_source.BaseInMemorySource(self,data,num_threads=None,enqueue_size=None,batch_size=None,queue_capacity=None,shuffle=False,min_after_dequeue=None,seed=None,data_name='in_memory_data')
tensorflow.contrib.transforms.in_memory_source.BaseInMemorySource._apply_transform(self,transform_input,**kwargs)
tensorflow.contrib.transforms.in_memory_source.BaseInMemorySource.batch_size(self)
tensorflow.contrib.transforms.in_memory_source.BaseInMemorySource.data(self)
tensorflow.contrib.transforms.in_memory_source.BaseInMemorySource.data_name(self)
tensorflow.contrib.transforms.in_memory_source.BaseInMemorySource.enqueue_size(self)
tensorflow.contrib.transforms.in_memory_source.BaseInMemorySource.input_valency(self)
tensorflow.contrib.transforms.in_memory_source.BaseInMemorySource.min_after_dequeue(self)
tensorflow.contrib.transforms.in_memory_source.BaseInMemorySource.num_threads(self)
tensorflow.contrib.transforms.in_memory_source.BaseInMemorySource.queue_capacity(self)
tensorflow.contrib.transforms.in_memory_source.BaseInMemorySource.seed(self)
tensorflow.contrib.transforms.in_memory_source.BaseInMemorySource.shuffle(self)
tensorflow.contrib.transforms.in_memory_source.OrderedDictNumpySource(self,ordered_dict_of_arrays,num_threads=None,enqueue_size=None,batch_size=None,queue_capacity=None,shuffle=False,min_after_dequeue=None,seed=None,data_name='pandas_data')
tensorflow.contrib.transforms.in_memory_source.OrderedDictNumpySource._output_names(self)
tensorflow.contrib.transforms.in_memory_source.OrderedDictNumpySource.name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transforms/batch.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.batched->tensorflow.python.training.input.shuffle_batch(transform_input, batch_size=self.batch_size, capacity=self.queue_capacity, min_after_dequeue=self.min_after_dequeue, num_threads=self.num_threads, seed=self.seed, enqueue_many=True)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.self._min_after_dequeue->int(self.queue_capacity / 4 if min_after_dequeue is None else min_after_dequeue)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.AbstractBatchTransform(self,batch_size,output_names,num_threads=1,queue_capacity=None)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.AbstractBatchTransform.__init__(self,batch_size,output_names,num_threads=1,queue_capacity=None)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.AbstractBatchTransform._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.AbstractBatchTransform.batch_size(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.AbstractBatchTransform.input_valency(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.AbstractBatchTransform.num_threads(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.AbstractBatchTransform.queue_capacity(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.Batch(AbstractBatchTransform)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.Batch._apply_transform(self,transform_input,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.Batch.name(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.ShuffleBatch(self,batch_size,output_names,num_threads=1,queue_capacity=None,min_after_dequeue=None,seed=None)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.ShuffleBatch.__init__(self,batch_size,output_names,num_threads=1,queue_capacity=None,min_after_dequeue=None,seed=None)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.ShuffleBatch._apply_transform(self,transform_input,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.ShuffleBatch.min_after_dequeue(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.ShuffleBatch.name(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.batch.ShuffleBatch.seed(self)
tensorflow.contrib.transforms.batch.AbstractBatchTransform(self,batch_size,output_names,num_threads=1,queue_capacity=None)
tensorflow.contrib.transforms.batch.AbstractBatchTransform._output_names(self)
tensorflow.contrib.transforms.batch.AbstractBatchTransform.batch_size(self)
tensorflow.contrib.transforms.batch.AbstractBatchTransform.input_valency(self)
tensorflow.contrib.transforms.batch.AbstractBatchTransform.num_threads(self)
tensorflow.contrib.transforms.batch.AbstractBatchTransform.queue_capacity(self)
tensorflow.contrib.transforms.batch.Batch(AbstractBatchTransform)
tensorflow.contrib.transforms.batch.Batch._apply_transform(self,transform_input,**kwargs)
tensorflow.contrib.transforms.batch.Batch.name(self)
tensorflow.contrib.transforms.batch.ShuffleBatch(self,batch_size,output_names,num_threads=1,queue_capacity=None,min_after_dequeue=None,seed=None)
tensorflow.contrib.transforms.batch.ShuffleBatch._apply_transform(self,transform_input,**kwargs)
tensorflow.contrib.transforms.batch.ShuffleBatch.min_after_dequeue(self)
tensorflow.contrib.transforms.batch.ShuffleBatch.name(self)
tensorflow.contrib.transforms.batch.ShuffleBatch.seed(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transforms/reader_source.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.enqueue_size->max(1, int(batch_size / num_threads))
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.self._min_after_dequeue->int(self.queue_capacity / 4 if min_after_dequeue is None else min_after_dequeue)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.filename_queue->tensorflow.python.training.input.string_input_producer(self.work_units, num_epochs=kwargs.get('num_epochs'), shuffle=self.shuffle, seed=self.seed)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.reader->self._reader_cls(**self._reader_kwargs)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.dequeued->tensorflow.python.training.input.batch_join(reader_ops, self.batch_size, capacity=self.queue_capacity, enqueue_many=True, dynamic_pad=False, shared_name=None, name=None)
tensorflow.contrib.ReaderSource(self,reader_cls,work_units,reader_kwargs=None,enqueue_size=None,batch_size=1,queue_capacity=None,shuffle=False,min_after_dequeue=None,num_threads=1,seed=None)
tensorflow.contrib.ReaderSource._apply_transform(self,transform_input,**kwargs)
tensorflow.contrib.ReaderSource._output_names(self)
tensorflow.contrib.ReaderSource.batch_size(self)
tensorflow.contrib.ReaderSource.enqueue_size(self)
tensorflow.contrib.ReaderSource.input_valency(self)
tensorflow.contrib.ReaderSource.min_after_dequeue(self)
tensorflow.contrib.ReaderSource.name(self)
tensorflow.contrib.ReaderSource.num_threads(self)
tensorflow.contrib.ReaderSource.queue_capacity(self)
tensorflow.contrib.ReaderSource.reader_cls(self)
tensorflow.contrib.ReaderSource.reader_kwargs(self)
tensorflow.contrib.ReaderSource.seed(self)
tensorflow.contrib.ReaderSource.shuffle(self)
tensorflow.contrib.ReaderSource.work_units(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource(self,reader_cls,work_units,reader_kwargs=None,enqueue_size=None,batch_size=1,queue_capacity=None,shuffle=False,min_after_dequeue=None,num_threads=1,seed=None)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource.__init__(self,reader_cls,work_units,reader_kwargs=None,enqueue_size=None,batch_size=1,queue_capacity=None,shuffle=False,min_after_dequeue=None,num_threads=1,seed=None)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource._apply_transform(self,transform_input,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource.batch_size(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource.enqueue_size(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource.input_valency(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource.min_after_dequeue(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource.name(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource.num_threads(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource.queue_capacity(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource.reader_cls(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource.reader_kwargs(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource.seed(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource.shuffle(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.ReaderSource.work_units(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.TFRecordSource(file_names,reader_kwargs=None,enqueue_size=1,batch_size=1,queue_capacity=None,shuffle=False,min_after_dequeue=None,num_threads=1,seed=None)
tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source.TextFileSource(file_names,reader_kwargs=None,enqueue_size=1,batch_size=1,queue_capacity=None,shuffle=False,min_after_dequeue=None,num_threads=1,seed=None)
tensorflow.contrib.transforms.reader_source.TFRecordSource(file_names,reader_kwargs=None,enqueue_size=1,batch_size=1,queue_capacity=None,shuffle=False,min_after_dequeue=None,num_threads=1,seed=None)
tensorflow.contrib.transforms.reader_source.TextFileSource(file_names,reader_kwargs=None,enqueue_size=1,batch_size=1,queue_capacity=None,shuffle=False,min_after_dequeue=None,num_threads=1,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transforms/densify.py----------------------------------------
tensorflow.contrib.learn.python.learn.dataframe.transforms.densify.Densify(self,default_value)
tensorflow.contrib.learn.python.learn.dataframe.transforms.densify.Densify.__init__(self,default_value)
tensorflow.contrib.learn.python.learn.dataframe.transforms.densify.Densify._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transforms.densify.Densify._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.densify.Densify.default_value(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.densify.Densify.input_valency(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.densify.Densify.name(self)
tensorflow.contrib.transforms.densify.Densify(self,default_value)
tensorflow.contrib.transforms.densify.Densify._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.transforms.densify.Densify._output_names(self)
tensorflow.contrib.transforms.densify.Densify.default_value(self)
tensorflow.contrib.transforms.densify.Densify.input_valency(self)
tensorflow.contrib.transforms.densify.Densify.name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transforms/binary_transforms.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.result->self._apply_op(input_tensor)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.series_doc->_DOC_FORMAT_STRING.format(operation.__name__, operation.__doc__)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.series_transform_cls->type('scalar_{}'.format(operation.__name__), (SeriesBinaryTransform,), {'name': series_name, '__doc__': series_doc, '_apply_op': series_apply_op})
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.scalar_doc->_DOC_FORMAT_STRING.format(operation.__name__, operation.__doc__)
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.scalar_transform_cls->type('scalar_{}'.format(operation.__name__), (ScalarBinaryTransform,), {'name': scalar_name, '__doc__': scalar_doc, '_apply_op': scalar_apply_op})
tensorflow.contrib._bt.ScalarBinaryTransform(self,scalar)
tensorflow.contrib._bt.ScalarBinaryTransform._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib._bt.ScalarBinaryTransform._output_names(self)
tensorflow.contrib._bt.ScalarBinaryTransform.input_valency(self)
tensorflow.contrib._bt.ScalarBinaryTransform.scalar(self)
tensorflow.contrib._bt.SeriesBinaryTransform(transform.TensorFlowTransform)
tensorflow.contrib._bt.SeriesBinaryTransform._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib._bt.SeriesBinaryTransform._output_names(self)
tensorflow.contrib._bt.SeriesBinaryTransform.input_valency(self)
tensorflow.contrib._bt.register_binary_op(method_name,operation)
tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.ScalarBinaryTransform(self,scalar)
tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.ScalarBinaryTransform.__init__(self,scalar)
tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.ScalarBinaryTransform._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.ScalarBinaryTransform._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.ScalarBinaryTransform.input_valency(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.ScalarBinaryTransform.scalar(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.SeriesBinaryTransform(transform.TensorFlowTransform)
tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.SeriesBinaryTransform._apply_transform(self,input_tensors,**kwargs)
tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.SeriesBinaryTransform._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.SeriesBinaryTransform.input_valency(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms.register_binary_op(method_name,operation)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/dataframe/transforms/split_mask.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.split_mask.(hashed_input,)->tensorflow.contrib.learn.python.learn.dataframe.transforms.hashes.HashFast(num_buckets)(input_series[0])
A:tensorflow.contrib.learn.python.learn.dataframe.transforms.split_mask.threshold->int(num_buckets * self._proportion)
tensorflow.contrib.learn.python.learn.dataframe.transforms.split_mask.SplitMask(self,proportion)
tensorflow.contrib.learn.python.learn.dataframe.transforms.split_mask.SplitMask.__init__(self,proportion)
tensorflow.contrib.learn.python.learn.dataframe.transforms.split_mask.SplitMask._output_names(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.split_mask.SplitMask._produce_output_series(self,input_series=None)
tensorflow.contrib.learn.python.learn.dataframe.transforms.split_mask.SplitMask.input_valency(self)
tensorflow.contrib.learn.python.learn.dataframe.transforms.split_mask.SplitMask.name(self)
tensorflow.contrib.transforms.split_mask.SplitMask(self,proportion)
tensorflow.contrib.transforms.split_mask.SplitMask._output_names(self)
tensorflow.contrib.transforms.split_mask.SplitMask._produce_output_series(self,input_series=None)
tensorflow.contrib.transforms.split_mask.SplitMask.input_valency(self)
tensorflow.contrib.transforms.split_mask.SplitMask.name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/preprocessing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/preprocessing/text.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.preprocessing.text.TOKENIZER_RE->re.compile("[A-Z]{2,}(?![a-z])|[A-Z][a-z]+(?=[A-Z])|[\\'\\w\\-]+", re.UNICODE)
A:tensorflow.contrib.learn.python.learn.preprocessing.text.document->document.encode('utf-8').encode('utf-8')
A:tensorflow.contrib.learn.python.learn.preprocessing.text.document_mv->buffer_or_memoryview(document)
A:tensorflow.contrib.learn.python.learn.preprocessing.text.buff->numpy.frombuffer(document_mv[:self.max_document_length], dtype=np.uint8)
A:tensorflow.contrib.learn.python.learn.preprocessing.text.self.vocabulary_->CategoricalVocabulary()
A:tensorflow.contrib.learn.python.learn.preprocessing.text.word_ids->numpy.zeros(self.max_document_length, np.int64)
A:tensorflow.contrib.learn.python.learn.preprocessing.text.word_ids[idx]->self.vocabulary_.get(token)
tensorflow.contrib.learn.python.learn.preprocessing.text.ByteProcessor(self,max_document_length)
tensorflow.contrib.learn.python.learn.preprocessing.text.ByteProcessor.__init__(self,max_document_length)
tensorflow.contrib.learn.python.learn.preprocessing.text.ByteProcessor.fit(self,x)
tensorflow.contrib.learn.python.learn.preprocessing.text.ByteProcessor.fit_transform(self,x)
tensorflow.contrib.learn.python.learn.preprocessing.text.ByteProcessor.reverse(self,x)
tensorflow.contrib.learn.python.learn.preprocessing.text.ByteProcessor.transform(self,x)
tensorflow.contrib.learn.python.learn.preprocessing.text.VocabularyProcessor(self,max_document_length,min_frequency=0,vocabulary=None,tokenizer_fn=None)
tensorflow.contrib.learn.python.learn.preprocessing.text.VocabularyProcessor.__init__(self,max_document_length,min_frequency=0,vocabulary=None,tokenizer_fn=None)
tensorflow.contrib.learn.python.learn.preprocessing.text.VocabularyProcessor.fit(self,raw_documents,unused_y=None)
tensorflow.contrib.learn.python.learn.preprocessing.text.VocabularyProcessor.fit_transform(self,raw_documents,unused_y=None)
tensorflow.contrib.learn.python.learn.preprocessing.text.VocabularyProcessor.restore(cls,filename)
tensorflow.contrib.learn.python.learn.preprocessing.text.VocabularyProcessor.reverse(self,documents)
tensorflow.contrib.learn.python.learn.preprocessing.text.VocabularyProcessor.save(self,filename)
tensorflow.contrib.learn.python.learn.preprocessing.text.VocabularyProcessor.transform(self,raw_documents)
tensorflow.contrib.learn.python.learn.preprocessing.text.tokenizer(iterator)
tensorflow.contrib.preprocessing.ByteProcessor(self,max_document_length)
tensorflow.contrib.preprocessing.ByteProcessor.fit(self,x)
tensorflow.contrib.preprocessing.ByteProcessor.fit_transform(self,x)
tensorflow.contrib.preprocessing.ByteProcessor.reverse(self,x)
tensorflow.contrib.preprocessing.ByteProcessor.transform(self,x)
tensorflow.contrib.preprocessing.VocabularyProcessor(self,max_document_length,min_frequency=0,vocabulary=None,tokenizer_fn=None)
tensorflow.contrib.preprocessing.VocabularyProcessor.fit(self,raw_documents,unused_y=None)
tensorflow.contrib.preprocessing.VocabularyProcessor.fit_transform(self,raw_documents,unused_y=None)
tensorflow.contrib.preprocessing.VocabularyProcessor.restore(cls,filename)
tensorflow.contrib.preprocessing.VocabularyProcessor.reverse(self,documents)
tensorflow.contrib.preprocessing.VocabularyProcessor.save(self,filename)
tensorflow.contrib.preprocessing.VocabularyProcessor.transform(self,raw_documents)
tensorflow.contrib.preprocessing.tokenizer(iterator)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/preprocessing/categorical.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.preprocessing.categorical.x->setup_processor_data_feeder(x)
A:tensorflow.contrib.learn.python.learn.preprocessing.categorical.vocab->categorical_vocabulary.CategoricalVocabulary()
tensorflow.contrib.learn.python.learn.preprocessing.categorical.CategoricalProcessor(self,min_frequency=0,share=False,vocabularies=None)
tensorflow.contrib.learn.python.learn.preprocessing.categorical.CategoricalProcessor.__init__(self,min_frequency=0,share=False,vocabularies=None)
tensorflow.contrib.learn.python.learn.preprocessing.categorical.CategoricalProcessor.fit(self,x,unused_y=None)
tensorflow.contrib.learn.python.learn.preprocessing.categorical.CategoricalProcessor.fit_transform(self,x,unused_y=None)
tensorflow.contrib.learn.python.learn.preprocessing.categorical.CategoricalProcessor.freeze(self,freeze=True)
tensorflow.contrib.learn.python.learn.preprocessing.categorical.CategoricalProcessor.transform(self,x)
tensorflow.contrib.preprocessing.CategoricalProcessor(self,min_frequency=0,share=False,vocabularies=None)
tensorflow.contrib.preprocessing.CategoricalProcessor.fit(self,x,unused_y=None)
tensorflow.contrib.preprocessing.CategoricalProcessor.fit_transform(self,x,unused_y=None)
tensorflow.contrib.preprocessing.CategoricalProcessor.freeze(self,freeze=True)
tensorflow.contrib.preprocessing.CategoricalProcessor.transform(self,x)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/preprocessing/categorical_vocabulary.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.preprocessing.categorical_vocabulary.self._freq->dict(self._freq[:idx - 1])
A:tensorflow.contrib.learn.python.learn.preprocessing.categorical_vocabulary.self._mapping[category]->len(self._mapping)
A:tensorflow.contrib.learn.python.learn.preprocessing.categorical_vocabulary.category_id->self.get(category)
tensorflow.contrib.learn.python.learn.preprocessing.categorical_vocabulary.CategoricalVocabulary(self,unknown_token='<UNK>',support_reverse=True)
tensorflow.contrib.learn.python.learn.preprocessing.categorical_vocabulary.CategoricalVocabulary.__init__(self,unknown_token='<UNK>',support_reverse=True)
tensorflow.contrib.learn.python.learn.preprocessing.categorical_vocabulary.CategoricalVocabulary.__len__(self)
tensorflow.contrib.learn.python.learn.preprocessing.categorical_vocabulary.CategoricalVocabulary.add(self,category,count=1)
tensorflow.contrib.learn.python.learn.preprocessing.categorical_vocabulary.CategoricalVocabulary.freeze(self,freeze=True)
tensorflow.contrib.learn.python.learn.preprocessing.categorical_vocabulary.CategoricalVocabulary.get(self,category)
tensorflow.contrib.learn.python.learn.preprocessing.categorical_vocabulary.CategoricalVocabulary.reverse(self,class_id)
tensorflow.contrib.learn.python.learn.preprocessing.categorical_vocabulary.CategoricalVocabulary.trim(self,min_frequency,max_frequency=-1)
tensorflow.contrib.preprocessing.categorical_vocabulary.CategoricalVocabulary(self,unknown_token='<UNK>',support_reverse=True)
tensorflow.contrib.preprocessing.categorical_vocabulary.CategoricalVocabulary.__len__(self)
tensorflow.contrib.preprocessing.categorical_vocabulary.CategoricalVocabulary.add(self,category,count=1)
tensorflow.contrib.preprocessing.categorical_vocabulary.CategoricalVocabulary.freeze(self,freeze=True)
tensorflow.contrib.preprocessing.categorical_vocabulary.CategoricalVocabulary.get(self,category)
tensorflow.contrib.preprocessing.categorical_vocabulary.CategoricalVocabulary.reverse(self,class_id)
tensorflow.contrib.preprocessing.categorical_vocabulary.CategoricalVocabulary.trim(self,min_frequency,max_frequency=-1)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/preprocessing/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/datasets/produce_small_datasets.py----------------------------------------
tensorflow.contrib.datasets.produce_small_datasets.main(unused_argv)
tensorflow.contrib.learn.python.learn.datasets.produce_small_datasets.main(unused_argv)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/datasets/__init__.py----------------------------------------
tensorflow.contrib.datasets.__init__.load_dataset(name,size='small',test_with_fake_data=False)
tensorflow.contrib.datasets.__init__.make_dataset(name,n_samples=100,noise=None,seed=42,*args,**kwargs)
tensorflow.contrib.learn.python.learn.datasets.__init__.load_dataset(name,size='small',test_with_fake_data=False)
tensorflow.contrib.learn.python.learn.datasets.__init__.make_dataset(name,n_samples=100,noise=None,seed=42,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/datasets/synthetic.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.datasets.synthetic.linspace->numpy.linspace(0, 2 * n_loops * np.pi, n_samples // n_classes)
A:tensorflow.contrib.learn.python.learn.datasets.synthetic.circ_x->numpy.append(circ_x, np.cos(np.random.rand(extras) * 2 * np.pi))
A:tensorflow.contrib.learn.python.learn.datasets.synthetic.circ_y->numpy.append(circ_y, np.sin(np.random.rand(extras) * 2 * np.pi))
A:tensorflow.contrib.learn.python.learn.datasets.synthetic.base_cos->numpy.cos(linspace)
A:tensorflow.contrib.learn.python.learn.datasets.synthetic.base_sin->numpy.sin(linspace)
A:tensorflow.contrib.learn.python.learn.datasets.synthetic.y->numpy.hstack(y)
A:tensorflow.contrib.learn.python.learn.datasets.synthetic.indices->numpy.random.permutation(range(n_samples))
A:tensorflow.contrib.learn.python.learn.datasets.synthetic.spir_x->numpy.append(spir_x, x_extra)
A:tensorflow.contrib.learn.python.learn.datasets.synthetic.spir_y->numpy.append(spir_y, y_extra)
A:tensorflow.contrib.learn.python.learn.datasets.synthetic.(base_cos, base_sin)->_modes[mode](linspace, label * np.pi, *args, **kwargs)
A:tensorflow.contrib.learn.python.learn.datasets.synthetic.(x_exrta, y_extra)->_modes[mode](np.random.rand(extras) * 2 * np.pi, *args, **kwargs)
A:tensorflow.contrib.learn.python.learn.datasets.synthetic.x_norm->numpy.max(np.abs(x))
A:tensorflow.contrib.learn.python.learn.datasets.synthetic.y_norm->numpy.max(np.abs(y))
A:tensorflow.contrib.learn.python.learn.datasets.synthetic.exp_scale->kwargs.pop('exp_scale', 0.1)
tensorflow.contrib.datasets.synthetic._archimedes_spiral(theta,theta_offset=0.0,*args,**kwargs)
tensorflow.contrib.datasets.synthetic._bernoulli_spiral(theta,theta_offset=0.0,*args,**kwargs)
tensorflow.contrib.datasets.synthetic._fermat_spiral(theta,theta_offset=0.0,*args,**kwargs)
tensorflow.contrib.datasets.synthetic.circles(n_samples=100,noise=None,seed=None,factor=0.8,n_classes=2,*args,**kwargs)
tensorflow.contrib.datasets.synthetic.spirals(n_samples=100,noise=None,seed=None,mode='archimedes',n_loops=2,*args,**kwargs)
tensorflow.contrib.learn.python.learn.datasets.synthetic._archimedes_spiral(theta,theta_offset=0.0,*args,**kwargs)
tensorflow.contrib.learn.python.learn.datasets.synthetic._bernoulli_spiral(theta,theta_offset=0.0,*args,**kwargs)
tensorflow.contrib.learn.python.learn.datasets.synthetic._fermat_spiral(theta,theta_offset=0.0,*args,**kwargs)
tensorflow.contrib.learn.python.learn.datasets.synthetic.circles(n_samples=100,noise=None,seed=None,factor=0.8,n_classes=2,*args,**kwargs)
tensorflow.contrib.learn.python.learn.datasets.synthetic.spirals(n_samples=100,noise=None,seed=None,mode='archimedes',n_loops=2,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.datasets.mnist.dt->numpy.dtype(numpy.uint32).newbyteorder('>')
A:tensorflow.contrib.learn.python.learn.datasets.mnist.magic->_read32(bytestream)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.num_images->_read32(bytestream)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.rows->_read32(bytestream)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.cols->_read32(bytestream)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.buf->bytestream.read(num_items)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.data->data.reshape(num_images, rows, cols, 1).reshape(num_images, rows, cols, 1)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.labels_one_hot->numpy.zeros((num_labels, num_classes))
A:tensorflow.contrib.learn.python.learn.datasets.mnist.num_items->_read32(bytestream)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.labels->numpy.frombuffer(buf, dtype=numpy.uint8)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.images->numpy.multiply(images, 1.0 / 255.0)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.perm0->numpy.arange(self._num_examples)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.perm->numpy.arange(self._num_examples)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.train->DataSet(train_images, train_labels, dtype=dtype, reshape=reshape)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.validation->DataSet(validation_images, validation_labels, dtype=dtype, reshape=reshape)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.test->DataSet(test_images, test_labels, dtype=dtype, reshape=reshape)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.local_file->tensorflow.contrib.learn.python.learn.datasets.base.maybe_download(TEST_LABELS, train_dir, SOURCE_URL + TEST_LABELS)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.train_images->extract_images(f)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.train_labels->extract_labels(f, one_hot=one_hot)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.test_images->extract_images(f)
A:tensorflow.contrib.learn.python.learn.datasets.mnist.test_labels->extract_labels(f, one_hot=one_hot)
tensorflow.contrib.datasets.mnist.DataSet(self,images,labels,fake_data=False,one_hot=False,dtype=dtypes.float32,reshape=True)
tensorflow.contrib.datasets.mnist.DataSet.epochs_completed(self)
tensorflow.contrib.datasets.mnist.DataSet.images(self)
tensorflow.contrib.datasets.mnist.DataSet.labels(self)
tensorflow.contrib.datasets.mnist.DataSet.next_batch(self,batch_size,fake_data=False,shuffle=True)
tensorflow.contrib.datasets.mnist.DataSet.num_examples(self)
tensorflow.contrib.datasets.mnist._read32(bytestream)
tensorflow.contrib.datasets.mnist.dense_to_one_hot(labels_dense,num_classes)
tensorflow.contrib.datasets.mnist.extract_images(f)
tensorflow.contrib.datasets.mnist.extract_labels(f,one_hot=False,num_classes=10)
tensorflow.contrib.datasets.mnist.load_mnist(train_dir='MNIST-data')
tensorflow.contrib.datasets.mnist.read_data_sets(train_dir,fake_data=False,one_hot=False,dtype=dtypes.float32,reshape=True,validation_size=5000)
tensorflow.contrib.learn.python.learn.datasets.mnist.DataSet(self,images,labels,fake_data=False,one_hot=False,dtype=dtypes.float32,reshape=True)
tensorflow.contrib.learn.python.learn.datasets.mnist.DataSet.__init__(self,images,labels,fake_data=False,one_hot=False,dtype=dtypes.float32,reshape=True)
tensorflow.contrib.learn.python.learn.datasets.mnist.DataSet.epochs_completed(self)
tensorflow.contrib.learn.python.learn.datasets.mnist.DataSet.images(self)
tensorflow.contrib.learn.python.learn.datasets.mnist.DataSet.labels(self)
tensorflow.contrib.learn.python.learn.datasets.mnist.DataSet.next_batch(self,batch_size,fake_data=False,shuffle=True)
tensorflow.contrib.learn.python.learn.datasets.mnist.DataSet.num_examples(self)
tensorflow.contrib.learn.python.learn.datasets.mnist._read32(bytestream)
tensorflow.contrib.learn.python.learn.datasets.mnist.dense_to_one_hot(labels_dense,num_classes)
tensorflow.contrib.learn.python.learn.datasets.mnist.extract_images(f)
tensorflow.contrib.learn.python.learn.datasets.mnist.extract_labels(f,one_hot=False,num_classes=10)
tensorflow.contrib.learn.python.learn.datasets.mnist.load_mnist(train_dir='MNIST-data')
tensorflow.contrib.learn.python.learn.datasets.mnist.read_data_sets(train_dir,fake_data=False,one_hot=False,dtype=dtypes.float32,reshape=True,validation_size=5000)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/datasets/text_datasets.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.datasets.text_datasets.train_path->os.path.join(module_path, 'data', 'text_train.csv')
A:tensorflow.contrib.learn.python.learn.datasets.text_datasets.test_path->os.path.join(module_path, 'data', 'text_test.csv')
A:tensorflow.contrib.learn.python.learn.datasets.text_datasets.archive_path->tensorflow.contrib.learn.python.learn.datasets.base.maybe_download('dbpedia_csv.tar.gz', data_dir, DBPEDIA_URL)
A:tensorflow.contrib.learn.python.learn.datasets.text_datasets.tfile->tarfile.open(archive_path, 'r:*')
A:tensorflow.contrib.learn.python.learn.datasets.text_datasets.data_dir->os.path.join(os.getenv('TF_EXP_BASE_DIR', ''), 'dbpedia_data')
A:tensorflow.contrib.learn.python.learn.datasets.text_datasets.module_path->os.path.dirname(__file__)
A:tensorflow.contrib.learn.python.learn.datasets.text_datasets.train->tensorflow.contrib.learn.python.learn.datasets.base.load_csv_without_header(train_path, target_dtype=np.int32, features_dtype=np.str, target_column=0)
A:tensorflow.contrib.learn.python.learn.datasets.text_datasets.test->tensorflow.contrib.learn.python.learn.datasets.base.load_csv_without_header(test_path, target_dtype=np.int32, features_dtype=np.str, target_column=0)
tensorflow.contrib.datasets.text_datasets.load_dbpedia(size='small',test_with_fake_data=False)
tensorflow.contrib.datasets.text_datasets.maybe_download_dbpedia(data_dir)
tensorflow.contrib.learn.python.learn.datasets.text_datasets.load_dbpedia(size='small',test_with_fake_data=False)
tensorflow.contrib.learn.python.learn.datasets.text_datasets.maybe_download_dbpedia(data_dir)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/datasets/base.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.datasets.base.Dataset->collections.namedtuple('Dataset', ['data', 'target'])
A:tensorflow.contrib.learn.python.learn.datasets.base.Datasets->collections.namedtuple('Datasets', ['train', 'validation', 'test'])
A:tensorflow.contrib.learn.python.learn.datasets.base.data_file->csv.reader(csv_file)
A:tensorflow.contrib.learn.python.learn.datasets.base.header->next(data_file)
A:tensorflow.contrib.learn.python.learn.datasets.base.n_samples->int(header[0])
A:tensorflow.contrib.learn.python.learn.datasets.base.n_features->int(header[1])
A:tensorflow.contrib.learn.python.learn.datasets.base.data->numpy.array(data)
A:tensorflow.contrib.learn.python.learn.datasets.base.target->numpy.array(target, dtype=target_dtype)
A:tensorflow.contrib.learn.python.learn.datasets.base.target[i]->numpy.asarray(row.pop(target_column), dtype=target_dtype)
A:tensorflow.contrib.learn.python.learn.datasets.base.data[i]->numpy.asarray(row, dtype=features_dtype)
A:tensorflow.contrib.learn.python.learn.datasets.base.filename_small->filename.replace('.', '_small.')
A:tensorflow.contrib.learn.python.learn.datasets.base.writer->csv.writer(csv_file_small)
A:tensorflow.contrib.learn.python.learn.datasets.base.reader->csv.reader(csv_file)
A:tensorflow.contrib.learn.python.learn.datasets.base.module_path->os.path.dirname(__file__)
A:tensorflow.contrib.learn.python.learn.datasets.base.data_path->os.path.join(module_path, 'data', 'boston_house_prices.csv')
A:tensorflow.contrib.learn.python.learn.datasets.base.filepath->os.path.join(work_directory, filename)
A:tensorflow.contrib.learn.python.learn.datasets.base.(temp_file_name, _)->urlretrieve_with_retry(source_url)
A:tensorflow.contrib.learn.python.learn.datasets.base.size->f.size()
tensorflow.contrib.datasets.base._is_retriable(e)
tensorflow.contrib.datasets.base.load_boston(data_path=None)
tensorflow.contrib.datasets.base.load_csv_with_header(filename,target_dtype,features_dtype,target_column=-1)
tensorflow.contrib.datasets.base.load_csv_without_header(filename,target_dtype,features_dtype,target_column=-1)
tensorflow.contrib.datasets.base.load_iris(data_path=None)
tensorflow.contrib.datasets.base.maybe_download(filename,work_directory,source_url)
tensorflow.contrib.datasets.base.retry(initial_delay,max_delay,factor=2.0,jitter=0.25,is_retriable=None)
tensorflow.contrib.datasets.base.shrink_csv(filename,ratio)
tensorflow.contrib.datasets.base.urlretrieve_with_retry(url,filename=None)
tensorflow.contrib.learn.python.learn.datasets.base._is_retriable(e)
tensorflow.contrib.learn.python.learn.datasets.base.load_boston(data_path=None)
tensorflow.contrib.learn.python.learn.datasets.base.load_csv_with_header(filename,target_dtype,features_dtype,target_column=-1)
tensorflow.contrib.learn.python.learn.datasets.base.load_csv_without_header(filename,target_dtype,features_dtype,target_column=-1)
tensorflow.contrib.learn.python.learn.datasets.base.load_iris(data_path=None)
tensorflow.contrib.learn.python.learn.datasets.base.maybe_download(filename,work_directory,source_url)
tensorflow.contrib.learn.python.learn.datasets.base.retry(initial_delay,max_delay,factor=2.0,jitter=0.25,is_retriable=None)
tensorflow.contrib.learn.python.learn.datasets.base.shrink_csv(filename,ratio)
tensorflow.contrib.learn.python.learn.datasets.base.urlretrieve_with_retry(url,filename=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/tests/dataframe/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/tests/dataframe/mocks.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.self._shape->tensorflow.python.framework.tensor_shape.unknown_shape()
A:tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.self.indices->MockTensor('%s indices' % name, dtypes.int32)
A:tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.self.values->MockTensor('%s values' % name, dtype)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.Mock2x2Transform(self,param_one,param_two,param_three)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.Mock2x2Transform.__init__(self,param_one,param_two,param_three)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.Mock2x2Transform._apply_transform(self,input_tensors)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.Mock2x2Transform._output_names(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.Mock2x2Transform.input_valency(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockOneOutputTransform(self,param_one,param_two)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockOneOutputTransform.__init__(self,param_one,param_two)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockOneOutputTransform._apply_transform(self,input_tensors)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockOneOutputTransform._output_names(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockSeries(self,cachekey,mock_tensor)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockSeries.__init__(self,cachekey,mock_tensor)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockSeries.__repr__(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockSeries.build(self,cache)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockSparseTensor(self,name,dtype)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockSparseTensor.__eq__(self,other)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockSparseTensor.__init__(self,name,dtype)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockSparseTensor.__ne__(self,other)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockSparseTensor.__repr__(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockSparseTensor.dtype(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockSparseTensor.get_shape(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockSparseTensor.name(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTensor(self,name,dtype)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTensor.__eq__(self,other)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTensor.__init__(self,name,dtype)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTensor.__ne__(self,other)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTensor.__repr__(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTensor.dtype(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTensor.get_shape(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTensor.name(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTransform(self,param_one,param_two)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTransform.__eq__(self,other)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTransform.__init__(self,param_one,param_two)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTransform.__ne__(self,other)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTransform.input_valency(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTransform.name(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTransform.param_one(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTransform.param_two(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTwoOutputTransform(self,param_one,param_two,param_three)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTwoOutputTransform.__init__(self,param_one,param_two,param_three)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTwoOutputTransform._apply_transform(self,input_tensors)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTwoOutputTransform._output_names(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockTwoOutputTransform.param_three(self)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockZeroOutputTransform(self,param_one,param_two)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockZeroOutputTransform.__init__(self,param_one,param_two)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockZeroOutputTransform._apply_transform(self,input_tensors)
tensorflow.contrib.learn.python.learn.tests.dataframe.mocks.MockZeroOutputTransform._output_names(self)
tensorflow.contrib.tests.dataframe.mocks.Mock2x2Transform(self,param_one,param_two,param_three)
tensorflow.contrib.tests.dataframe.mocks.Mock2x2Transform._apply_transform(self,input_tensors)
tensorflow.contrib.tests.dataframe.mocks.Mock2x2Transform._output_names(self)
tensorflow.contrib.tests.dataframe.mocks.Mock2x2Transform.input_valency(self)
tensorflow.contrib.tests.dataframe.mocks.MockOneOutputTransform(self,param_one,param_two)
tensorflow.contrib.tests.dataframe.mocks.MockOneOutputTransform._apply_transform(self,input_tensors)
tensorflow.contrib.tests.dataframe.mocks.MockOneOutputTransform._output_names(self)
tensorflow.contrib.tests.dataframe.mocks.MockSeries(self,cachekey,mock_tensor)
tensorflow.contrib.tests.dataframe.mocks.MockSeries.__repr__(self)
tensorflow.contrib.tests.dataframe.mocks.MockSeries.build(self,cache)
tensorflow.contrib.tests.dataframe.mocks.MockSparseTensor(self,name,dtype)
tensorflow.contrib.tests.dataframe.mocks.MockSparseTensor.__eq__(self,other)
tensorflow.contrib.tests.dataframe.mocks.MockSparseTensor.__ne__(self,other)
tensorflow.contrib.tests.dataframe.mocks.MockSparseTensor.__repr__(self)
tensorflow.contrib.tests.dataframe.mocks.MockSparseTensor.dtype(self)
tensorflow.contrib.tests.dataframe.mocks.MockSparseTensor.get_shape(self)
tensorflow.contrib.tests.dataframe.mocks.MockSparseTensor.name(self)
tensorflow.contrib.tests.dataframe.mocks.MockTensor(self,name,dtype)
tensorflow.contrib.tests.dataframe.mocks.MockTensor.__eq__(self,other)
tensorflow.contrib.tests.dataframe.mocks.MockTensor.__ne__(self,other)
tensorflow.contrib.tests.dataframe.mocks.MockTensor.__repr__(self)
tensorflow.contrib.tests.dataframe.mocks.MockTensor.dtype(self)
tensorflow.contrib.tests.dataframe.mocks.MockTensor.get_shape(self)
tensorflow.contrib.tests.dataframe.mocks.MockTensor.name(self)
tensorflow.contrib.tests.dataframe.mocks.MockTransform(self,param_one,param_two)
tensorflow.contrib.tests.dataframe.mocks.MockTransform.__eq__(self,other)
tensorflow.contrib.tests.dataframe.mocks.MockTransform.__ne__(self,other)
tensorflow.contrib.tests.dataframe.mocks.MockTransform.input_valency(self)
tensorflow.contrib.tests.dataframe.mocks.MockTransform.name(self)
tensorflow.contrib.tests.dataframe.mocks.MockTransform.param_one(self)
tensorflow.contrib.tests.dataframe.mocks.MockTransform.param_two(self)
tensorflow.contrib.tests.dataframe.mocks.MockTwoOutputTransform(self,param_one,param_two,param_three)
tensorflow.contrib.tests.dataframe.mocks.MockTwoOutputTransform._apply_transform(self,input_tensors)
tensorflow.contrib.tests.dataframe.mocks.MockTwoOutputTransform._output_names(self)
tensorflow.contrib.tests.dataframe.mocks.MockTwoOutputTransform.param_three(self)
tensorflow.contrib.tests.dataframe.mocks.MockZeroOutputTransform(self,param_one,param_two)
tensorflow.contrib.tests.dataframe.mocks.MockZeroOutputTransform._apply_transform(self,input_tensors)
tensorflow.contrib.tests.dataframe.mocks.MockZeroOutputTransform._output_names(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.head.logits->tensorflow.python.ops.array_ops.reshape(array_ops.tile(centered_bias, (batch_size,)), (batch_size, logits_dimension))
A:tensorflow.contrib.learn.python.learn.estimators.head.labels->tensorflow.python.framework.ops.convert_to_tensor(labels)
A:tensorflow.contrib.learn.python.learn.estimators.head.loss->tensorflow.python.ops.nn.sigmoid_cross_entropy_with_logits(labels=math_ops.to_float(labels), logits=logits, name=name)
A:tensorflow.contrib.learn.python.learn.estimators.head.centered_bias->tensorflow.python.ops.variables.Variable(name='centered_bias_weight', initial_value=array_ops.zeros(shape=(logits_dimension,)), trainable=True)
A:tensorflow.contrib.learn.python.learn.estimators.head.predictions->tensorflow.python.framework.ops.convert_to_tensor(predictions)
A:tensorflow.contrib.learn.python.learn.estimators.head.weight_tensor->_weight_tensor(features, weight_column_name)
A:tensorflow.contrib.learn.python.learn.estimators.head.(loss, weighted_average_loss)->loss_fn(labels, logits, weight_tensor)
A:tensorflow.contrib.learn.python.learn.estimators.head.train_op->tensorflow.python.ops.control_flow_ops.group(train_op, centered_bias_step)
A:tensorflow.contrib.learn.python.learn.estimators.head.eval_metric_ops->metrics_fn(weighted_average_loss, predictions, labels, weight_tensor)
A:tensorflow.contrib.learn.python.learn.estimators.head.labels_tensor->_sparse_labels_to_indicator(labels_tensor, self._logits_dimension)
A:tensorflow.contrib.learn.python.learn.estimators.head.two_class_logits->_one_class_to_two_class_logits(logits)
A:tensorflow.contrib.learn.python.learn.estimators.head.metrics[_summary_key(self.head_name, mkey.ACCURACY)]->tensorflow.contrib.metrics.streaming_accuracy(classes, labels, weights)
A:tensorflow.contrib.learn.python.learn.estimators.head.metrics[_summary_key(self.head_name, mkey.PREDICTION_MEAN)]->_predictions_streaming_mean(logistic, weights)
A:tensorflow.contrib.learn.python.learn.estimators.head.metrics[_summary_key(self.head_name, mkey.LABEL_MEAN)]->_indicator_labels_streaming_mean(labels, weights)
A:tensorflow.contrib.learn.python.learn.estimators.head.metrics[_summary_key(self.head_name, mkey.ACCURACY_BASELINE)]->_indicator_labels_streaming_mean(labels, weights)
A:tensorflow.contrib.learn.python.learn.estimators.head.metrics[_summary_key(self.head_name, mkey.AUC)]->_streaming_auc(probabilities, labels, weights)
A:tensorflow.contrib.learn.python.learn.estimators.head.metrics[_summary_key(self.head_name, mkey.ACCURACY_MEAN % threshold)]->_streaming_accuracy_at_threshold(logistic, labels, weights, threshold)
A:tensorflow.contrib.learn.python.learn.estimators.head.metrics[_summary_key(self.head_name, mkey.PRECISION_MEAN % threshold)]->_streaming_precision_at_threshold(logistic, labels, weights, threshold)
A:tensorflow.contrib.learn.python.learn.estimators.head.metrics[_summary_key(self.head_name, mkey.RECALL_MEAN % threshold)]->_streaming_recall_at_threshold(logistic, labels, weights, threshold)
A:tensorflow.contrib.learn.python.learn.estimators.head.self._metric_class_ids->tuple([] if metric_class_ids is None else metric_class_ids)
A:tensorflow.contrib.learn.python.learn.estimators.head.table->tensorflow.contrib.lookup.index_to_string_table_from_tensor(mapping=self._label_keys, name='class_string_lookup')
A:tensorflow.contrib.learn.python.learn.estimators.head.class_ids->tensorflow.python.ops.math_ops.argmax(logits, 1, name=prediction_key.PredictionKey.CLASSES)
A:tensorflow.contrib.learn.python.learn.estimators.head.classes->tensorflow.python.ops.array_ops.tile(input=array_ops.expand_dims(input=math_ops.range(self.logits_dimension), axis=0), multiples=[batch_size, 1])
A:tensorflow.contrib.learn.python.learn.estimators.head.metrics[_summary_key(self.head_name, mkey.CLASS_PREDICTION_MEAN % class_id)]->_predictions_streaming_mean(classes, weights, class_id)
A:tensorflow.contrib.learn.python.learn.estimators.head.metrics[_summary_key(self.head_name, mkey.CLASS_LABEL_MEAN % class_id)]->_indicator_labels_streaming_mean(labels, weights, class_id)
A:tensorflow.contrib.learn.python.learn.estimators.head.metrics[_summary_key(self.head_name, mkey.CLASS_PROBABILITY_MEAN % class_id)]->_predictions_streaming_mean(probabilities, weights, class_id)
A:tensorflow.contrib.learn.python.learn.estimators.head.metrics[_summary_key(self.head_name, mkey.CLASS_LOGITS_MEAN % class_id)]->_predictions_streaming_mean(logits, weights, class_id)
A:tensorflow.contrib.learn.python.learn.estimators.head.metrics[_summary_key(self.head_name, mkey.CLASS_AUC % class_id)]->_streaming_auc(probabilities, labels, weights, class_id)
A:tensorflow.contrib.learn.python.learn.estimators.head.head_logits_pairs->zip(self._heads, self._split_logits(logits))
A:tensorflow.contrib.learn.python.learn.estimators.head.current_logits->tensorflow.python.ops.array_ops.slice(logits, [0, begin], [-1, current_logits_size])
A:tensorflow.contrib.learn.python.learn.estimators.head.weighted_loss->tensorflow.python.ops.math_ops.multiply(array_ops.reshape(loss_unweighted, shape=(-1,)), array_ops.reshape(weight, shape=(-1,)), name=name)
A:tensorflow.contrib.learn.python.learn.estimators.head.weighted_loss_mean->tensorflow.python.ops.math_ops.reduce_mean(weighted_loss, name=name_scope)
A:tensorflow.contrib.learn.python.learn.estimators.head.weighted_loss_normalized->tensorflow.python.ops.math_ops.div(math_ops.reduce_sum(weighted_loss), math_ops.to_float(math_ops.reduce_sum(weight)), name='weighted_average_loss')
A:tensorflow.contrib.learn.python.learn.estimators.head.centered_bias_loss->tensorflow.python.ops.math_ops.reduce_mean(loss_fn(labels, logits, weights), name='training_loss')
A:tensorflow.contrib.learn.python.learn.estimators.head.centered_bias_step->_centered_bias_step(centered_bias=centered_bias, batch_size=batch_size, labels=labels, loss_fn=loss_fn, weights=weights)
A:tensorflow.contrib.learn.python.learn.estimators.head.weights->tensorflow.python.framework.ops.convert_to_tensor(weights)
A:tensorflow.contrib.learn.python.learn.estimators.head.threshold_predictions->tensorflow.python.ops.math_ops.to_float(math_ops.greater_equal(predictions, threshold))
A:tensorflow.contrib.learn.python.learn.estimators.head.(precision_tensor, update_op)->tensorflow.contrib.metrics.streaming_recall_at_thresholds(predictions, labels=labels, thresholds=(threshold,), weights=_float_weights_or_none(weights))
tensorflow.contrib.estimators.Head(object)
tensorflow.contrib.estimators.Head.create_model_fn_ops(self,features,mode,labels=None,train_op_fn=None,logits=None,logits_input=None,scope=None)
tensorflow.contrib.estimators.Head.logits_dimension(self)
tensorflow.contrib.estimators.binary_svm_head(label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None,thresholds=None)
tensorflow.contrib.estimators.head._BinaryLogisticHead(self,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None,loss_fn=None,thresholds=None)
tensorflow.contrib.estimators.head._BinaryLogisticHead._logits_to_predictions(self,logits)
tensorflow.contrib.estimators.head._BinaryLogisticHead._metrics(self,eval_loss,predictions,labels,weights)
tensorflow.contrib.estimators.head._BinaryLogisticHead._transform_labels(self,mode,labels)
tensorflow.contrib.estimators.head._BinaryLogisticHead.create_model_fn_ops(self,features,mode,labels=None,train_op_fn=None,logits=None,logits_input=None,scope=None)
tensorflow.contrib.estimators.head._BinarySvmHead(self,label_name,weight_column_name,enable_centered_bias,head_name,thresholds)
tensorflow.contrib.estimators.head._BinarySvmHead._logits_to_predictions(self,logits)
tensorflow.contrib.estimators.head._BinarySvmHead._metrics(self,eval_loss,predictions,labels,weights)
tensorflow.contrib.estimators.head._BinarySvmHead._transform_labels(self,mode,labels)
tensorflow.contrib.estimators.head._BinarySvmHead.create_model_fn_ops(self,features,mode,labels=None,train_op_fn=None,logits=None,logits_input=None,scope=None)
tensorflow.contrib.estimators.head._MultiClassHead(self,n_classes,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None,loss_fn=None,thresholds=None,metric_class_ids=None,label_keys=None)
tensorflow.contrib.estimators.head._MultiClassHead._create_output_alternatives(self,predictions)
tensorflow.contrib.estimators.head._MultiClassHead._label_ids(self,labels_dict)
tensorflow.contrib.estimators.head._MultiClassHead._labels(self,labels_dict)
tensorflow.contrib.estimators.head._MultiClassHead._logits_to_predictions(self,logits)
tensorflow.contrib.estimators.head._MultiClassHead._metrics(self,eval_loss,predictions,labels,weights)
tensorflow.contrib.estimators.head._MultiClassHead._transform_labels(self,mode,labels)
tensorflow.contrib.estimators.head._MultiClassHead._wrapped_loss_fn(self,labels,logits,weights=None)
tensorflow.contrib.estimators.head._MultiClassHead.create_model_fn_ops(self,features,mode,labels=None,train_op_fn=None,logits=None,logits_input=None,scope=None)
tensorflow.contrib.estimators.head._MultiHead(self,heads,loss_merger)
tensorflow.contrib.estimators.head._MultiHead._merge_eval(self,all_model_fn_ops)
tensorflow.contrib.estimators.head._MultiHead._merge_infer(self,all_model_fn_ops)
tensorflow.contrib.estimators.head._MultiHead._merge_train(self,all_model_fn_ops,train_op_fn)
tensorflow.contrib.estimators.head._MultiHead._split_logits(self,logits)
tensorflow.contrib.estimators.head._MultiHead.create_model_fn_ops(self,features,mode,labels=None,train_op_fn=None,logits=None,logits_input=None,scope=None)
tensorflow.contrib.estimators.head._MultiHead.logits_dimension(self)
tensorflow.contrib.estimators.head._MultiLabelHead(self,n_classes,label_name,weight_column_name,enable_centered_bias,head_name,thresholds,metric_class_ids=None,loss_fn=None)
tensorflow.contrib.estimators.head._MultiLabelHead._logits_to_predictions(self,logits)
tensorflow.contrib.estimators.head._MultiLabelHead._metrics(self,eval_loss,predictions,labels,weights)
tensorflow.contrib.estimators.head._MultiLabelHead._transform_labels(self,mode,labels)
tensorflow.contrib.estimators.head._MultiLabelHead.create_model_fn_ops(self,features,mode,labels=None,train_op_fn=None,logits=None,logits_input=None,scope=None)
tensorflow.contrib.estimators.head._RegressionHead(self,label_dimension,loss_fn,link_fn,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None)
tensorflow.contrib.estimators.head._RegressionHead._logits_to_predictions(self,logits)
tensorflow.contrib.estimators.head._RegressionHead._metrics(self,eval_loss,predictions,labels,weights)
tensorflow.contrib.estimators.head._RegressionHead._transform_labels(self,mode,labels)
tensorflow.contrib.estimators.head._RegressionHead.create_model_fn_ops(self,features,mode,labels=None,train_op_fn=None,logits=None,logits_input=None,scope=None)
tensorflow.contrib.estimators.head._SingleHead(self,problem_type,logits_dimension,label_name=None,weight_column_name=None,head_name=None)
tensorflow.contrib.estimators.head._SingleHead._create_output_alternatives(self,predictions)
tensorflow.contrib.estimators.head._SingleHead.head_name(self)
tensorflow.contrib.estimators.head._SingleHead.label_name(self)
tensorflow.contrib.estimators.head._SingleHead.logits_dimension(self)
tensorflow.contrib.estimators.head._SingleHead.weight_column_name(self)
tensorflow.contrib.estimators.head._assert_class_id(class_id,num_classes=None)
tensorflow.contrib.estimators.head._assert_labels_rank(labels)
tensorflow.contrib.estimators.head._centered_bias(logits_dimension,head_name=None)
tensorflow.contrib.estimators.head._centered_bias_step(centered_bias,batch_size,labels,loss_fn,weights)
tensorflow.contrib.estimators.head._check_mode_valid(mode)
tensorflow.contrib.estimators.head._check_no_sparse_tensor(x)
tensorflow.contrib.estimators.head._class_id_labels_to_indicator(labels,num_classes)
tensorflow.contrib.estimators.head._class_labels_streaming_mean(labels,weights,class_id)
tensorflow.contrib.estimators.head._class_predictions_streaming_mean(predictions,weights,class_id)
tensorflow.contrib.estimators.head._compute_weighted_loss(loss_unweighted,weight,name='loss')
tensorflow.contrib.estimators.head._create_model_fn_ops(features,mode,loss_fn,logits_to_predictions_fn,metrics_fn,create_output_alternatives_fn,labels=None,train_op_fn=None,logits=None,logits_dimension=None,head_name=None,weight_column_name=None,enable_centered_bias=False)
tensorflow.contrib.estimators.head._float_weights_or_none(weights)
tensorflow.contrib.estimators.head._get_arguments(func)
tensorflow.contrib.estimators.head._indicator_labels_streaming_mean(labels,weights=None,class_id=None)
tensorflow.contrib.estimators.head._log_loss_with_two_classes(labels,logits,weights=None)
tensorflow.contrib.estimators.head._logits(logits_input,logits,logits_dimension)
tensorflow.contrib.estimators.head._mean_squared_loss(labels,logits,weights=None)
tensorflow.contrib.estimators.head._one_class_to_two_class_logits(logits)
tensorflow.contrib.estimators.head._poisson_loss(labels,logits,weights=None)
tensorflow.contrib.estimators.head._predictions_streaming_mean(predictions,weights=None,class_id=None)
tensorflow.contrib.estimators.head._sigmoid_cross_entropy_loss(labels,logits,weights=None)
tensorflow.contrib.estimators.head._softmax_cross_entropy_loss(labels,logits,weights=None)
tensorflow.contrib.estimators.head._sparse_labels_to_indicator(labels,num_classes)
tensorflow.contrib.estimators.head._streaming_accuracy_at_threshold(predictions,labels,weights,threshold)
tensorflow.contrib.estimators.head._streaming_auc(predictions,labels,weights=None,class_id=None)
tensorflow.contrib.estimators.head._streaming_precision_at_threshold(predictions,labels,weights,threshold)
tensorflow.contrib.estimators.head._streaming_recall_at_threshold(predictions,labels,weights,threshold)
tensorflow.contrib.estimators.head._summary_key(head_name,val)
tensorflow.contrib.estimators.head._to_labels_tensor(labels,label_name)
tensorflow.contrib.estimators.head._train_op(loss,labels,train_op_fn,centered_bias,batch_size,loss_fn,weights)
tensorflow.contrib.estimators.head._verify_loss_fn_args(loss_fn)
tensorflow.contrib.estimators.head._weight_tensor(features,weight_column_name)
tensorflow.contrib.estimators.head._wrap_custom_loss_fn(loss_fn)
tensorflow.contrib.estimators.multi_class_head(n_classes,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None,thresholds=None,metric_class_ids=None,loss_fn=None,label_keys=None)
tensorflow.contrib.estimators.multi_head(heads,loss_weights=None)
tensorflow.contrib.estimators.multi_label_head(n_classes,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None,thresholds=None,metric_class_ids=None,loss_fn=None)
tensorflow.contrib.estimators.no_op_train_fn(loss)
tensorflow.contrib.estimators.poisson_regression_head(label_name=None,weight_column_name=None,label_dimension=1,enable_centered_bias=False,head_name=None)
tensorflow.contrib.estimators.regression_head(label_name=None,weight_column_name=None,label_dimension=1,enable_centered_bias=False,head_name=None)
tensorflow.contrib.learn.python.learn.estimators.head.Head(object)
tensorflow.contrib.learn.python.learn.estimators.head.Head.create_model_fn_ops(self,features,mode,labels=None,train_op_fn=None,logits=None,logits_input=None,scope=None)
tensorflow.contrib.learn.python.learn.estimators.head.Head.logits_dimension(self)
tensorflow.contrib.learn.python.learn.estimators.head._BinaryLogisticHead(self,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None,loss_fn=None,thresholds=None)
tensorflow.contrib.learn.python.learn.estimators.head._BinaryLogisticHead.__init__(self,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None,loss_fn=None,thresholds=None)
tensorflow.contrib.learn.python.learn.estimators.head._BinaryLogisticHead._logits_to_predictions(self,logits)
tensorflow.contrib.learn.python.learn.estimators.head._BinaryLogisticHead._metrics(self,eval_loss,predictions,labels,weights)
tensorflow.contrib.learn.python.learn.estimators.head._BinaryLogisticHead._transform_labels(self,mode,labels)
tensorflow.contrib.learn.python.learn.estimators.head._BinaryLogisticHead.create_model_fn_ops(self,features,mode,labels=None,train_op_fn=None,logits=None,logits_input=None,scope=None)
tensorflow.contrib.learn.python.learn.estimators.head._BinarySvmHead(self,label_name,weight_column_name,enable_centered_bias,head_name,thresholds)
tensorflow.contrib.learn.python.learn.estimators.head._BinarySvmHead.__init__(self,label_name,weight_column_name,enable_centered_bias,head_name,thresholds)
tensorflow.contrib.learn.python.learn.estimators.head._BinarySvmHead._logits_to_predictions(self,logits)
tensorflow.contrib.learn.python.learn.estimators.head._BinarySvmHead._metrics(self,eval_loss,predictions,labels,weights)
tensorflow.contrib.learn.python.learn.estimators.head._BinarySvmHead._transform_labels(self,mode,labels)
tensorflow.contrib.learn.python.learn.estimators.head._BinarySvmHead.create_model_fn_ops(self,features,mode,labels=None,train_op_fn=None,logits=None,logits_input=None,scope=None)
tensorflow.contrib.learn.python.learn.estimators.head._MultiClassHead(self,n_classes,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None,loss_fn=None,thresholds=None,metric_class_ids=None,label_keys=None)
tensorflow.contrib.learn.python.learn.estimators.head._MultiClassHead.__init__(self,n_classes,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None,loss_fn=None,thresholds=None,metric_class_ids=None,label_keys=None)
tensorflow.contrib.learn.python.learn.estimators.head._MultiClassHead._create_output_alternatives(self,predictions)
tensorflow.contrib.learn.python.learn.estimators.head._MultiClassHead._label_ids(self,labels_dict)
tensorflow.contrib.learn.python.learn.estimators.head._MultiClassHead._labels(self,labels_dict)
tensorflow.contrib.learn.python.learn.estimators.head._MultiClassHead._logits_to_predictions(self,logits)
tensorflow.contrib.learn.python.learn.estimators.head._MultiClassHead._metrics(self,eval_loss,predictions,labels,weights)
tensorflow.contrib.learn.python.learn.estimators.head._MultiClassHead._transform_labels(self,mode,labels)
tensorflow.contrib.learn.python.learn.estimators.head._MultiClassHead._wrapped_loss_fn(self,labels,logits,weights=None)
tensorflow.contrib.learn.python.learn.estimators.head._MultiClassHead.create_model_fn_ops(self,features,mode,labels=None,train_op_fn=None,logits=None,logits_input=None,scope=None)
tensorflow.contrib.learn.python.learn.estimators.head._MultiHead(self,heads,loss_merger)
tensorflow.contrib.learn.python.learn.estimators.head._MultiHead.__init__(self,heads,loss_merger)
tensorflow.contrib.learn.python.learn.estimators.head._MultiHead._merge_eval(self,all_model_fn_ops)
tensorflow.contrib.learn.python.learn.estimators.head._MultiHead._merge_infer(self,all_model_fn_ops)
tensorflow.contrib.learn.python.learn.estimators.head._MultiHead._merge_train(self,all_model_fn_ops,train_op_fn)
tensorflow.contrib.learn.python.learn.estimators.head._MultiHead._split_logits(self,logits)
tensorflow.contrib.learn.python.learn.estimators.head._MultiHead.create_model_fn_ops(self,features,mode,labels=None,train_op_fn=None,logits=None,logits_input=None,scope=None)
tensorflow.contrib.learn.python.learn.estimators.head._MultiHead.logits_dimension(self)
tensorflow.contrib.learn.python.learn.estimators.head._MultiLabelHead(self,n_classes,label_name,weight_column_name,enable_centered_bias,head_name,thresholds,metric_class_ids=None,loss_fn=None)
tensorflow.contrib.learn.python.learn.estimators.head._MultiLabelHead.__init__(self,n_classes,label_name,weight_column_name,enable_centered_bias,head_name,thresholds,metric_class_ids=None,loss_fn=None)
tensorflow.contrib.learn.python.learn.estimators.head._MultiLabelHead._logits_to_predictions(self,logits)
tensorflow.contrib.learn.python.learn.estimators.head._MultiLabelHead._metrics(self,eval_loss,predictions,labels,weights)
tensorflow.contrib.learn.python.learn.estimators.head._MultiLabelHead._transform_labels(self,mode,labels)
tensorflow.contrib.learn.python.learn.estimators.head._MultiLabelHead.create_model_fn_ops(self,features,mode,labels=None,train_op_fn=None,logits=None,logits_input=None,scope=None)
tensorflow.contrib.learn.python.learn.estimators.head._RegressionHead(self,label_dimension,loss_fn,link_fn,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None)
tensorflow.contrib.learn.python.learn.estimators.head._RegressionHead.__init__(self,label_dimension,loss_fn,link_fn,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None)
tensorflow.contrib.learn.python.learn.estimators.head._RegressionHead._logits_to_predictions(self,logits)
tensorflow.contrib.learn.python.learn.estimators.head._RegressionHead._metrics(self,eval_loss,predictions,labels,weights)
tensorflow.contrib.learn.python.learn.estimators.head._RegressionHead._transform_labels(self,mode,labels)
tensorflow.contrib.learn.python.learn.estimators.head._RegressionHead.create_model_fn_ops(self,features,mode,labels=None,train_op_fn=None,logits=None,logits_input=None,scope=None)
tensorflow.contrib.learn.python.learn.estimators.head._SingleHead(self,problem_type,logits_dimension,label_name=None,weight_column_name=None,head_name=None)
tensorflow.contrib.learn.python.learn.estimators.head._SingleHead.__init__(self,problem_type,logits_dimension,label_name=None,weight_column_name=None,head_name=None)
tensorflow.contrib.learn.python.learn.estimators.head._SingleHead._create_output_alternatives(self,predictions)
tensorflow.contrib.learn.python.learn.estimators.head._SingleHead.head_name(self)
tensorflow.contrib.learn.python.learn.estimators.head._SingleHead.label_name(self)
tensorflow.contrib.learn.python.learn.estimators.head._SingleHead.logits_dimension(self)
tensorflow.contrib.learn.python.learn.estimators.head._SingleHead.weight_column_name(self)
tensorflow.contrib.learn.python.learn.estimators.head._assert_class_id(class_id,num_classes=None)
tensorflow.contrib.learn.python.learn.estimators.head._assert_labels_rank(labels)
tensorflow.contrib.learn.python.learn.estimators.head._centered_bias(logits_dimension,head_name=None)
tensorflow.contrib.learn.python.learn.estimators.head._centered_bias_step(centered_bias,batch_size,labels,loss_fn,weights)
tensorflow.contrib.learn.python.learn.estimators.head._check_mode_valid(mode)
tensorflow.contrib.learn.python.learn.estimators.head._check_no_sparse_tensor(x)
tensorflow.contrib.learn.python.learn.estimators.head._class_id_labels_to_indicator(labels,num_classes)
tensorflow.contrib.learn.python.learn.estimators.head._class_labels_streaming_mean(labels,weights,class_id)
tensorflow.contrib.learn.python.learn.estimators.head._class_predictions_streaming_mean(predictions,weights,class_id)
tensorflow.contrib.learn.python.learn.estimators.head._compute_weighted_loss(loss_unweighted,weight,name='loss')
tensorflow.contrib.learn.python.learn.estimators.head._create_model_fn_ops(features,mode,loss_fn,logits_to_predictions_fn,metrics_fn,create_output_alternatives_fn,labels=None,train_op_fn=None,logits=None,logits_dimension=None,head_name=None,weight_column_name=None,enable_centered_bias=False)
tensorflow.contrib.learn.python.learn.estimators.head._float_weights_or_none(weights)
tensorflow.contrib.learn.python.learn.estimators.head._get_arguments(func)
tensorflow.contrib.learn.python.learn.estimators.head._indicator_labels_streaming_mean(labels,weights=None,class_id=None)
tensorflow.contrib.learn.python.learn.estimators.head._log_loss_with_two_classes(labels,logits,weights=None)
tensorflow.contrib.learn.python.learn.estimators.head._logits(logits_input,logits,logits_dimension)
tensorflow.contrib.learn.python.learn.estimators.head._mean_squared_loss(labels,logits,weights=None)
tensorflow.contrib.learn.python.learn.estimators.head._one_class_to_two_class_logits(logits)
tensorflow.contrib.learn.python.learn.estimators.head._poisson_loss(labels,logits,weights=None)
tensorflow.contrib.learn.python.learn.estimators.head._predictions_streaming_mean(predictions,weights=None,class_id=None)
tensorflow.contrib.learn.python.learn.estimators.head._sigmoid_cross_entropy_loss(labels,logits,weights=None)
tensorflow.contrib.learn.python.learn.estimators.head._softmax_cross_entropy_loss(labels,logits,weights=None)
tensorflow.contrib.learn.python.learn.estimators.head._sparse_labels_to_indicator(labels,num_classes)
tensorflow.contrib.learn.python.learn.estimators.head._streaming_accuracy_at_threshold(predictions,labels,weights,threshold)
tensorflow.contrib.learn.python.learn.estimators.head._streaming_auc(predictions,labels,weights=None,class_id=None)
tensorflow.contrib.learn.python.learn.estimators.head._streaming_precision_at_threshold(predictions,labels,weights,threshold)
tensorflow.contrib.learn.python.learn.estimators.head._streaming_recall_at_threshold(predictions,labels,weights,threshold)
tensorflow.contrib.learn.python.learn.estimators.head._summary_key(head_name,val)
tensorflow.contrib.learn.python.learn.estimators.head._to_labels_tensor(labels,label_name)
tensorflow.contrib.learn.python.learn.estimators.head._train_op(loss,labels,train_op_fn,centered_bias,batch_size,loss_fn,weights)
tensorflow.contrib.learn.python.learn.estimators.head._verify_loss_fn_args(loss_fn)
tensorflow.contrib.learn.python.learn.estimators.head._weight_tensor(features,weight_column_name)
tensorflow.contrib.learn.python.learn.estimators.head._wrap_custom_loss_fn(loss_fn)
tensorflow.contrib.learn.python.learn.estimators.head.binary_svm_head(label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None,thresholds=None)
tensorflow.contrib.learn.python.learn.estimators.head.multi_class_head(n_classes,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None,thresholds=None,metric_class_ids=None,loss_fn=None,label_keys=None)
tensorflow.contrib.learn.python.learn.estimators.head.multi_head(heads,loss_weights=None)
tensorflow.contrib.learn.python.learn.estimators.head.multi_label_head(n_classes,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None,thresholds=None,metric_class_ids=None,loss_fn=None)
tensorflow.contrib.learn.python.learn.estimators.head.no_op_train_fn(loss)
tensorflow.contrib.learn.python.learn.estimators.head.poisson_regression_head(label_name=None,weight_column_name=None,label_dimension=1,enable_centered_bias=False,head_name=None)
tensorflow.contrib.learn.python.learn.estimators.head.regression_head(label_name=None,weight_column_name=None,label_dimension=1,enable_centered_bias=False,head_name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator_test_utils.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.estimator_test_utils.attributes->inspect.getmembers(estimator_class)
tensorflow.contrib.estimators.estimator_test_utils.assert_estimator_contract(tester,estimator_class)
tensorflow.contrib.estimators.estimator_test_utils.assert_in_range(min_value,max_value,key,metrics)
tensorflow.contrib.learn.python.learn.estimators.estimator_test_utils.assert_estimator_contract(tester,estimator_class)
tensorflow.contrib.learn.python.learn.estimators.estimator_test_utils.assert_in_range(min_value,max_value,key,metrics)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.embedding->_get_embedding_variable(column, collection_key, input_layer_scope)
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.linear_feature_columns->tuple(linear_feature_columns or [])
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.joint_linear_weights->params.get('joint_linear_weights')
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.dnn_feature_columns->tuple(dnn_feature_columns or [])
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.dnn_hidden_units->params.get('dnn_hidden_units')
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.dnn_dropout->params.get('dnn_dropout')
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.gradient_clip_norm->params.get('gradient_clip_norm')
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.embedding_lr_multipliers->params.get('embedding_lr_multipliers', {})
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.fix_global_step_increment_bug->params.get('fix_global_step_increment_bug', True)
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.features->_get_feature_dict(features)
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.dnn_partitioner->tensorflow.python.ops.partitioned_variables.min_max_variable_partitioner(max_partitions=num_ps_replicas)
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.input_layer_partitioner->tensorflow.python.ops.partitioned_variables.min_max_variable_partitioner(max_partitions=num_ps_replicas, min_slice_size=input_layer_min_slice_size)
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.net->tensorflow.contrib.layers.dropout(net, keep_prob=1.0 - dnn_dropout)
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.dnn_logits->tensorflow.contrib.layers.fully_connected(net, head.logits_dimension, activation_fn=None, variables_collections=[dnn_parent_scope], scope=dnn_logits_scope)
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.linear_partitioner->tensorflow.python.ops.partitioned_variables.min_max_variable_partitioner(max_partitions=num_ps_replicas, min_slice_size=64 << 20)
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.(linear_logits, _, _)->tensorflow.contrib.layers.weighted_sum_from_feature_columns(columns_to_tensors=features, feature_columns=linear_feature_columns, num_outputs=head.logits_dimension, weight_collections=[linear_parent_scope], scope=scope)
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.global_step->tensorflow.python.training.training_util.get_global_step()
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.train_op->tensorflow.python.ops.control_flow_ops.group(*train_ops)
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.head->tensorflow.contrib.learn.python.learn.estimators.head.regression_head(weight_column_name=weight_column_name, label_dimension=label_dimension, enable_centered_bias=enable_centered_bias)
A:tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.preds->super(DNNLinearCombinedRegressor, self).predict(x=x, input_fn=input_fn, batch_size=batch_size, outputs=[key], as_iterable=as_iterable)
tensorflow.contrib.estimators.DNNLinearCombinedClassifier(self,model_dir=None,n_classes=2,weight_column_name=None,linear_feature_columns=None,linear_optimizer=None,_joint_linear_weights=False,dnn_feature_columns=None,dnn_optimizer=None,dnn_hidden_units=None,dnn_activation_fn=nn.relu,dnn_dropout=None,gradient_clip_norm=None,enable_centered_bias=False,config=None,feature_engineering_fn=None,embedding_lr_multipliers=None,input_layer_min_slice_size=None,fix_global_step_increment_bug=False)
tensorflow.contrib.estimators.DNNLinearCombinedClassifier.export(self,export_dir,input_fn=None,input_feature_key=None,use_deprecated_input_fn=True,signature_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.estimators.DNNLinearCombinedClassifier.predict(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.estimators.DNNLinearCombinedClassifier.predict_classes(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.estimators.DNNLinearCombinedClassifier.predict_proba(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.estimators.DNNLinearCombinedEstimator(self,head,model_dir=None,linear_feature_columns=None,linear_optimizer=None,_joint_linear_weights=False,dnn_feature_columns=None,dnn_optimizer=None,dnn_hidden_units=None,dnn_activation_fn=None,dnn_dropout=None,gradient_clip_norm=None,config=None,feature_engineering_fn=None,embedding_lr_multipliers=None,fix_global_step_increment_bug=False)
tensorflow.contrib.estimators.DNNLinearCombinedRegressor(self,model_dir=None,weight_column_name=None,linear_feature_columns=None,linear_optimizer=None,_joint_linear_weights=False,dnn_feature_columns=None,dnn_optimizer=None,dnn_hidden_units=None,dnn_activation_fn=nn.relu,dnn_dropout=None,gradient_clip_norm=None,enable_centered_bias=False,label_dimension=1,config=None,feature_engineering_fn=None,embedding_lr_multipliers=None,input_layer_min_slice_size=None,fix_global_step_increment_bug=False)
tensorflow.contrib.estimators.DNNLinearCombinedRegressor.evaluate(self,x=None,y=None,input_fn=None,feed_fn=None,batch_size=None,steps=None,metrics=None,name=None,checkpoint_path=None,hooks=None)
tensorflow.contrib.estimators.DNNLinearCombinedRegressor.export(self,export_dir,input_fn=None,input_feature_key=None,use_deprecated_input_fn=True,signature_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.estimators.DNNLinearCombinedRegressor.predict(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.estimators.DNNLinearCombinedRegressor.predict_scores(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.estimators.dnn_linear_combined._add_hidden_layer_summary(value,tag)
tensorflow.contrib.estimators.dnn_linear_combined._as_iterable(preds,output)
tensorflow.contrib.estimators.dnn_linear_combined._dnn_linear_combined_model_fn(features,labels,mode,params,config=None)
tensorflow.contrib.estimators.dnn_linear_combined._extract_embedding_lr_multipliers(embedding_lr_multipliers,collection_key,input_layer_scope)
tensorflow.contrib.estimators.dnn_linear_combined._get_embedding_variable(column,collection_key,input_layer_scope)
tensorflow.contrib.estimators.dnn_linear_combined._get_feature_dict(features)
tensorflow.contrib.estimators.dnn_linear_combined._get_optimizer(optimizer)
tensorflow.contrib.estimators.dnn_linear_combined._linear_learning_rate(num_linear_feature_columns)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.DNNLinearCombinedClassifier(self,model_dir=None,n_classes=2,weight_column_name=None,linear_feature_columns=None,linear_optimizer=None,_joint_linear_weights=False,dnn_feature_columns=None,dnn_optimizer=None,dnn_hidden_units=None,dnn_activation_fn=nn.relu,dnn_dropout=None,gradient_clip_norm=None,enable_centered_bias=False,config=None,feature_engineering_fn=None,embedding_lr_multipliers=None,input_layer_min_slice_size=None,fix_global_step_increment_bug=False)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.DNNLinearCombinedClassifier.__init__(self,model_dir=None,n_classes=2,weight_column_name=None,linear_feature_columns=None,linear_optimizer=None,_joint_linear_weights=False,dnn_feature_columns=None,dnn_optimizer=None,dnn_hidden_units=None,dnn_activation_fn=nn.relu,dnn_dropout=None,gradient_clip_norm=None,enable_centered_bias=False,config=None,feature_engineering_fn=None,embedding_lr_multipliers=None,input_layer_min_slice_size=None,fix_global_step_increment_bug=False)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.DNNLinearCombinedClassifier.export(self,export_dir,input_fn=None,input_feature_key=None,use_deprecated_input_fn=True,signature_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.DNNLinearCombinedClassifier.predict(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.DNNLinearCombinedClassifier.predict_classes(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.DNNLinearCombinedClassifier.predict_proba(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.DNNLinearCombinedEstimator(self,head,model_dir=None,linear_feature_columns=None,linear_optimizer=None,_joint_linear_weights=False,dnn_feature_columns=None,dnn_optimizer=None,dnn_hidden_units=None,dnn_activation_fn=None,dnn_dropout=None,gradient_clip_norm=None,config=None,feature_engineering_fn=None,embedding_lr_multipliers=None,fix_global_step_increment_bug=False)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.DNNLinearCombinedEstimator.__init__(self,head,model_dir=None,linear_feature_columns=None,linear_optimizer=None,_joint_linear_weights=False,dnn_feature_columns=None,dnn_optimizer=None,dnn_hidden_units=None,dnn_activation_fn=None,dnn_dropout=None,gradient_clip_norm=None,config=None,feature_engineering_fn=None,embedding_lr_multipliers=None,fix_global_step_increment_bug=False)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.DNNLinearCombinedRegressor(self,model_dir=None,weight_column_name=None,linear_feature_columns=None,linear_optimizer=None,_joint_linear_weights=False,dnn_feature_columns=None,dnn_optimizer=None,dnn_hidden_units=None,dnn_activation_fn=nn.relu,dnn_dropout=None,gradient_clip_norm=None,enable_centered_bias=False,label_dimension=1,config=None,feature_engineering_fn=None,embedding_lr_multipliers=None,input_layer_min_slice_size=None,fix_global_step_increment_bug=False)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.DNNLinearCombinedRegressor.__init__(self,model_dir=None,weight_column_name=None,linear_feature_columns=None,linear_optimizer=None,_joint_linear_weights=False,dnn_feature_columns=None,dnn_optimizer=None,dnn_hidden_units=None,dnn_activation_fn=nn.relu,dnn_dropout=None,gradient_clip_norm=None,enable_centered_bias=False,label_dimension=1,config=None,feature_engineering_fn=None,embedding_lr_multipliers=None,input_layer_min_slice_size=None,fix_global_step_increment_bug=False)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.DNNLinearCombinedRegressor.evaluate(self,x=None,y=None,input_fn=None,feed_fn=None,batch_size=None,steps=None,metrics=None,name=None,checkpoint_path=None,hooks=None)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.DNNLinearCombinedRegressor.export(self,export_dir,input_fn=None,input_feature_key=None,use_deprecated_input_fn=True,signature_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.DNNLinearCombinedRegressor.predict(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined.DNNLinearCombinedRegressor.predict_scores(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined._add_hidden_layer_summary(value,tag)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined._as_iterable(preds,output)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined._dnn_linear_combined_model_fn(features,labels,mode,params,config=None)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined._extract_embedding_lr_multipliers(embedding_lr_multipliers,collection_key,input_layer_scope)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined._get_embedding_variable(column,collection_key,input_layer_scope)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined._get_feature_dict(features)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined._get_optimizer(optimizer)
tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined._linear_learning_rate(num_linear_feature_columns)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.estimator.df->tensorflow.contrib.learn.python.learn.learn_io.data_feeder.setup_train_data_feeder(x, y, n_classes=None, batch_size=batch_size, shuffle=shuffle, epochs=epochs)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.(features, _)->input_fn()
A:tensorflow.contrib.learn.python.learn.estimators.estimator.(input_fn, _)->_get_input_fn(x=x, y=None, input_fn=None, feed_fn=None, batch_size=None)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.result[name]->metric(predictions, labels_tensor_or_dict)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.result[name[0]]->metric(predictions[name[1]], labels_tensor_or_dict)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.summary_writer->tensorflow.python.training.summary_io.SummaryWriterCache.get(output_dir)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.summary_proto->tensorflow.core.framework.summary_pb2.Summary()
A:tensorflow.contrib.learn.python.learn.estimators.estimator.value->tensorflow.core.framework.summary_pb2.Summary().value.add()
A:tensorflow.contrib.learn.python.learn.estimators.estimator.value.simple_value->float(dictionary[key])
A:tensorflow.contrib.learn.python.learn.estimators.estimator.self._config->BaseEstimator._Config()
A:tensorflow.contrib.learn.python.learn.estimators.estimator.self._model_dir->tempfile.mkdtemp()
A:tensorflow.contrib.learn.python.learn.estimators.estimator.self._device_fn->_get_replica_device_setter(self._config)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.start_step->load_variable(self._model_dir, ops.GraphKeys.GLOBAL_STEP)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.hooks->tensorflow.contrib.learn.python.learn.monitors.replace_monitors_with_hooks(monitors, self)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.loss->self._train_model(input_fn=input_fn, hooks=hooks)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.(eval_results, global_step)->self._estimator._evaluate_model(input_fn=input_fn, feed_fn=feed_fn, steps=steps, metrics=metrics, name='score')
A:tensorflow.contrib.learn.python.learn.estimators.estimator.(input_fn, feed_fn)->_get_input_fn(x, None, input_fn=None, feed_fn=None, batch_size=batch_size, shuffle=False, epochs=1)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.self._features_info->tensorflow.contrib.learn.python.learn.estimators.tensor_signature.create_signatures(features)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.self._labels_info->tensorflow.contrib.learn.python.learn.estimators.tensor_signature.create_signatures(labels)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.update_ops->tensorflow.python.ops.control_flow_ops.group(*update_ops)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.latest_path->tensorflow.python.training.saver.latest_checkpoint(self._model_dir)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.eval_dir->os.path.join(self._model_dir, 'eval' if not name else 'eval_' + name)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.global_step->tensorflow.contrib.framework.create_global_step(g)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.(features, labels)->self._feature_engineering_fn(features, labels)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.(update_op, eval_dict)->self._extract_metric_update_ops(eval_dict)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.eval_results->tensorflow.contrib.training.python.training.evaluation.evaluate_once(checkpoint_path=checkpoint_path, master=self._config.evaluation_master, eval_ops=update_op, final_ops=eval_dict, hooks=hooks, config=config_pb2.ConfigProto(allow_soft_placement=True))
A:tensorflow.contrib.learn.python.learn.estimators.estimator.result->input_fn()
A:tensorflow.contrib.learn.python.learn.estimators.estimator.checkpoint_path->tensorflow.python.training.saver.latest_checkpoint(self._model_dir)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.features->self._get_features_from_input_fn(input_fn)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.infer_ops->self._get_predict_ops(features)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.predictions->self._filter_predictions(infer_ops.predictions, outputs)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.mon_sess->tensorflow.python.training.monitored_session.MonitoredSession(session_creator=monitored_session.ChiefSessionCreator(checkpoint_filename_with_path=checkpoint_path, config=config_pb2.ConfigProto(allow_soft_placement=True)))
A:tensorflow.contrib.learn.python.learn.estimators.estimator.preds->tensorflow.python.training.monitored_session.MonitoredSession(session_creator=monitored_session.ChiefSessionCreator(checkpoint_filename_with_path=checkpoint_path, config=config_pb2.ConfigProto(allow_soft_placement=True))).run(predictions, feed_fn() if feed_fn else None)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.existing_keys->self._filter_predictions(infer_ops.predictions, outputs).keys()
A:tensorflow.contrib.learn.python.learn.estimators.estimator.self._graph->tensorflow.python.framework.ops.Graph()
A:tensorflow.contrib.learn.python.learn.estimators.estimator.model_fn_ops->self._call_model_fn(features, None, model_fn_lib.ModeKeys.INFER)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.saver_hook_exists->any([isinstance(h, basic_session_run_hooks.CheckpointSaverHook) for h in all_hooks + model_fn_ops.training_hooks + chief_hooks + model_fn_ops.training_chief_hooks])
A:tensorflow.contrib.learn.python.learn.estimators.estimator.(_, loss)->tensorflow.python.training.monitored_session.MonitoredSession(session_creator=monitored_session.ChiefSessionCreator(checkpoint_filename_with_path=checkpoint_path, config=config_pb2.ConfigProto(allow_soft_placement=True))).run([model_fn_ops.train_op, model_fn_ops.loss])
A:tensorflow.contrib.learn.python.learn.estimators.estimator.model_fn_args->_get_arguments(self._model_fn)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.model_fn_results->self._model_fn(features, labels, **kwargs)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.model_fn_ops.eval_metric_ops[metric_key.MetricKey.LOSS]->tensorflow.contrib.metrics.streaming_mean(model_fn_ops.loss)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.labels->tensorflow.contrib.learn.python.learn.estimators.tensor_signature.create_placeholders_from_signatures(self._labels_info)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.input_ops->serving_input_fn()
A:tensorflow.contrib.learn.python.learn.estimators.estimator.(input_alternatives, features)->tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.get_input_alternatives(input_ops)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.(output_alternatives, actual_default_output_alternative_key)->tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.get_output_alternatives(model_fn_ops, default_output_alternative_key)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.signature_def_map->tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.build_all_signature_defs(input_alternatives, output_alternatives, actual_default_output_alternative_key)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.export_dir->tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.get_timestamped_export_dir(export_dir_base)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.saver_for_restore->tensorflow.python.training.saver.Saver(variables._all_saveable_objects(), sharded=True)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.init_op->tensorflow.python.ops.control_flow_ops.group(variables.local_variables_initializer(), resources.initialize_resources(resources.shared_resources()), data_flow_ops.tables_initializer())
A:tensorflow.contrib.learn.python.learn.estimators.estimator.builder->tensorflow.python.saved_model.builder.SavedModelBuilder(export_dir)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.assets_extra_path->os.path.join(compat.as_bytes(export_dir), compat.as_bytes('assets.extra'))
A:tensorflow.contrib.learn.python.learn.estimators.estimator.dest_absolute->os.path.join(compat.as_bytes(assets_extra_path), compat.as_bytes(dest_relative))
A:tensorflow.contrib.learn.python.learn.estimators.estimator.dest_path->os.path.dirname(dest_absolute)
A:tensorflow.contrib.learn.python.learn.estimators.estimator.results->list(self._estimator._infer_model(input_fn=input_fn, feed_fn=feed_fn, outputs=outputs, as_iterable=True, iterate_batches=True))
tensorflow.contrib.estimators.BaseEstimator(self,model_dir=None,config=None)
tensorflow.contrib.estimators.BaseEstimator._check_inputs(self,features,labels)
tensorflow.contrib.estimators.BaseEstimator._evaluate_model(self,input_fn,steps,feed_fn=None,metrics=None,name='',checkpoint_path=None,hooks=None,log_progress=True)
tensorflow.contrib.estimators.BaseEstimator._extract_metric_update_ops(self,eval_dict)
tensorflow.contrib.estimators.BaseEstimator._filter_predictions(self,predictions,outputs)
tensorflow.contrib.estimators.BaseEstimator._get_eval_ops(self,features,labels,metrics)
tensorflow.contrib.estimators.BaseEstimator._get_feature_ops_from_example(self,examples_batch)
tensorflow.contrib.estimators.BaseEstimator._get_features_from_input_fn(self,input_fn)
tensorflow.contrib.estimators.BaseEstimator._get_predict_ops(self,features)
tensorflow.contrib.estimators.BaseEstimator._get_train_ops(self,features,labels)
tensorflow.contrib.estimators.BaseEstimator._infer_model(self,input_fn,feed_fn=None,outputs=None,as_iterable=True,iterate_batches=False)
tensorflow.contrib.estimators.BaseEstimator._is_input_constant(self,feed_fn,graph)
tensorflow.contrib.estimators.BaseEstimator._predict_generator(self,mon_sess,predictions,feed_fn,iterate_batches)
tensorflow.contrib.estimators.BaseEstimator._train_model(self,input_fn,hooks)
tensorflow.contrib.estimators.BaseEstimator.config(self)
tensorflow.contrib.estimators.BaseEstimator.evaluate(self,x=None,y=None,input_fn=None,feed_fn=None,batch_size=None,steps=None,metrics=None,name=None,checkpoint_path=None,hooks=None,log_progress=True)
tensorflow.contrib.estimators.BaseEstimator.export(self,export_dir,input_fn=export._default_input_fn,input_feature_key=None,use_deprecated_input_fn=True,signature_fn=None,prediction_key=None,default_batch_size=1,exports_to_keep=None,checkpoint_path=None)
tensorflow.contrib.estimators.BaseEstimator.fit(self,x=None,y=None,input_fn=None,steps=None,batch_size=None,monitors=None,max_steps=None)
tensorflow.contrib.estimators.BaseEstimator.get_variable_names(self)
tensorflow.contrib.estimators.BaseEstimator.get_variable_value(self,name)
tensorflow.contrib.estimators.BaseEstimator.model_dir(self)
tensorflow.contrib.estimators.BaseEstimator.partial_fit(self,x=None,y=None,input_fn=None,steps=1,batch_size=None,monitors=None)
tensorflow.contrib.estimators.BaseEstimator.predict(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.estimators.Estimator(self,model_fn=None,model_dir=None,config=None,params=None,feature_engineering_fn=None)
tensorflow.contrib.estimators.Estimator._call_model_fn(self,features,labels,mode)
tensorflow.contrib.estimators.Estimator._get_eval_ops(self,features,labels,metrics)
tensorflow.contrib.estimators.Estimator._get_predict_ops(self,features)
tensorflow.contrib.estimators.Estimator._get_train_ops(self,features,labels)
tensorflow.contrib.estimators.Estimator.export_savedmodel(self,export_dir_base,serving_input_fn,default_output_alternative_key=None,assets_extra=None,as_text=False,checkpoint_path=None)
tensorflow.contrib.estimators.SKCompat(self,estimator)
tensorflow.contrib.estimators.SKCompat.fit(self,x,y,batch_size=128,steps=None,max_steps=None,monitors=None)
tensorflow.contrib.estimators.SKCompat.predict(self,x,batch_size=128,outputs=None)
tensorflow.contrib.estimators.SKCompat.score(self,x,y,batch_size=128,steps=None,metrics=None)
tensorflow.contrib.estimators.estimator._dict_to_str(dictionary)
tensorflow.contrib.estimators.estimator._get_arguments(func)
tensorflow.contrib.estimators.estimator._get_input_fn(x,y,input_fn,feed_fn,batch_size,shuffle=False,epochs=1)
tensorflow.contrib.estimators.estimator._get_replica_device_setter(config)
tensorflow.contrib.estimators.estimator._identity_feature_engineering_fn(features,labels)
tensorflow.contrib.estimators.estimator._make_metrics_ops(metrics,features,labels,predictions)
tensorflow.contrib.estimators.estimator._verify_input_args(x,y,input_fn,feed_fn,batch_size)
tensorflow.contrib.estimators.estimator._write_dict_to_summary(output_dir,dictionary,current_global_step)
tensorflow.contrib.estimators.infer_real_valued_columns_from_input(x)
tensorflow.contrib.estimators.infer_real_valued_columns_from_input_fn(input_fn)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator(self,model_dir=None,config=None)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator.__init__(self,model_dir=None,config=None)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator._check_inputs(self,features,labels)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator._evaluate_model(self,input_fn,steps,feed_fn=None,metrics=None,name='',checkpoint_path=None,hooks=None,log_progress=True)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator._extract_metric_update_ops(self,eval_dict)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator._filter_predictions(self,predictions,outputs)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator._get_eval_ops(self,features,labels,metrics)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator._get_feature_ops_from_example(self,examples_batch)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator._get_features_from_input_fn(self,input_fn)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator._get_predict_ops(self,features)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator._get_train_ops(self,features,labels)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator._infer_model(self,input_fn,feed_fn=None,outputs=None,as_iterable=True,iterate_batches=False)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator._is_input_constant(self,feed_fn,graph)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator._predict_generator(self,mon_sess,predictions,feed_fn,iterate_batches)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator._train_model(self,input_fn,hooks)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator.config(self)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator.evaluate(self,x=None,y=None,input_fn=None,feed_fn=None,batch_size=None,steps=None,metrics=None,name=None,checkpoint_path=None,hooks=None,log_progress=True)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator.export(self,export_dir,input_fn=export._default_input_fn,input_feature_key=None,use_deprecated_input_fn=True,signature_fn=None,prediction_key=None,default_batch_size=1,exports_to_keep=None,checkpoint_path=None)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator.fit(self,x=None,y=None,input_fn=None,steps=None,batch_size=None,monitors=None,max_steps=None)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator.get_variable_names(self)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator.get_variable_value(self,name)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator.model_dir(self)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator.partial_fit(self,x=None,y=None,input_fn=None,steps=1,batch_size=None,monitors=None)
tensorflow.contrib.learn.python.learn.estimators.estimator.BaseEstimator.predict(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.estimator.Estimator(self,model_fn=None,model_dir=None,config=None,params=None,feature_engineering_fn=None)
tensorflow.contrib.learn.python.learn.estimators.estimator.Estimator.__init__(self,model_fn=None,model_dir=None,config=None,params=None,feature_engineering_fn=None)
tensorflow.contrib.learn.python.learn.estimators.estimator.Estimator._call_model_fn(self,features,labels,mode)
tensorflow.contrib.learn.python.learn.estimators.estimator.Estimator._get_eval_ops(self,features,labels,metrics)
tensorflow.contrib.learn.python.learn.estimators.estimator.Estimator._get_predict_ops(self,features)
tensorflow.contrib.learn.python.learn.estimators.estimator.Estimator._get_train_ops(self,features,labels)
tensorflow.contrib.learn.python.learn.estimators.estimator.Estimator.export_savedmodel(self,export_dir_base,serving_input_fn,default_output_alternative_key=None,assets_extra=None,as_text=False,checkpoint_path=None)
tensorflow.contrib.learn.python.learn.estimators.estimator.SKCompat(self,estimator)
tensorflow.contrib.learn.python.learn.estimators.estimator.SKCompat.__init__(self,estimator)
tensorflow.contrib.learn.python.learn.estimators.estimator.SKCompat.fit(self,x,y,batch_size=128,steps=None,max_steps=None,monitors=None)
tensorflow.contrib.learn.python.learn.estimators.estimator.SKCompat.predict(self,x,batch_size=128,outputs=None)
tensorflow.contrib.learn.python.learn.estimators.estimator.SKCompat.score(self,x,y,batch_size=128,steps=None,metrics=None)
tensorflow.contrib.learn.python.learn.estimators.estimator._dict_to_str(dictionary)
tensorflow.contrib.learn.python.learn.estimators.estimator._get_arguments(func)
tensorflow.contrib.learn.python.learn.estimators.estimator._get_input_fn(x,y,input_fn,feed_fn,batch_size,shuffle=False,epochs=1)
tensorflow.contrib.learn.python.learn.estimators.estimator._get_replica_device_setter(config)
tensorflow.contrib.learn.python.learn.estimators.estimator._identity_feature_engineering_fn(features,labels)
tensorflow.contrib.learn.python.learn.estimators.estimator._make_metrics_ops(metrics,features,labels,predictions)
tensorflow.contrib.learn.python.learn.estimators.estimator._verify_input_args(x,y,input_fn,feed_fn,batch_size)
tensorflow.contrib.learn.python.learn.estimators.estimator._write_dict_to_summary(output_dir,dictionary,current_global_step)
tensorflow.contrib.learn.python.learn.estimators.estimator.infer_real_valued_columns_from_input(x)
tensorflow.contrib.learn.python.learn.estimators.estimator.infer_real_valued_columns_from_input_fn(input_fn)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/composable_model.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.composable_model.my_vars->self._get_vars()
A:tensorflow.contrib.learn.python.learn.estimators.composable_model.grads->tensorflow.python.ops.gradients.gradients(loss, my_vars)
A:tensorflow.contrib.learn.python.learn.estimators.composable_model.(grads, _)->tensorflow.python.ops.clip_ops.clip_by_global_norm(grads, self._gradient_clip_norm)
A:tensorflow.contrib.learn.python.learn.estimators.composable_model.optimizer->self._optimizer()
A:tensorflow.contrib.learn.python.learn.estimators.composable_model.values[name]->load_variable(model_dir, name)
A:tensorflow.contrib.learn.python.learn.estimators.composable_model.partitioner->tensorflow.python.ops.partitioned_variables.min_max_variable_partitioner(max_partitions=self._num_ps_replicas, min_slice_size=64 << 20)
A:tensorflow.contrib.learn.python.learn.estimators.composable_model.(logits, _, _)->tensorflow.contrib.layers.weighted_sum_from_feature_columns(columns_to_tensors=features, feature_columns=self._get_feature_columns(), num_outputs=self._num_label_columns, weight_collections=[self._scope], trainable=self._trainable, scope=scope)
A:tensorflow.contrib.learn.python.learn.estimators.composable_model.default_learning_rate->min(0.2, default_learning_rate)
A:tensorflow.contrib.learn.python.learn.estimators.composable_model.input_layer_partitioner->tensorflow.python.ops.partitioned_variables.min_max_variable_partitioner(max_partitions=self._num_ps_replicas, min_slice_size=64 << 20)
A:tensorflow.contrib.learn.python.learn.estimators.composable_model.net->tensorflow.contrib.layers.dropout(net, keep_prob=1.0 - self._dropout)
A:tensorflow.contrib.learn.python.learn.estimators.composable_model.hidden_layer_partitioner->tensorflow.python.ops.partitioned_variables.min_max_variable_partitioner(max_partitions=self._num_ps_replicas)
A:tensorflow.contrib.learn.python.learn.estimators.composable_model.logits->tensorflow.contrib.layers.fully_connected(net, self._num_label_columns, activation_fn=None, variables_collections=[self._scope], trainable=self._trainable, scope=scope)
tensorflow.contrib.estimators.composable_model.DNNComposableModel(self,num_label_columns,hidden_units,optimizer=None,activation_fn=nn.relu,dropout=None,gradient_clip_norm=None,num_ps_replicas=0,scope=None,trainable=True)
tensorflow.contrib.estimators.composable_model.DNNComposableModel._add_hidden_layer_summary(self,value,tag)
tensorflow.contrib.estimators.composable_model.DNNComposableModel._get_default_optimizer(self,optimizer_name=None)
tensorflow.contrib.estimators.composable_model.DNNComposableModel.build_model(self,features,feature_columns,is_training)
tensorflow.contrib.estimators.composable_model.DNNComposableModel.get_bias(self,model_dir)
tensorflow.contrib.estimators.composable_model.DNNComposableModel.get_weights(self,model_dir)
tensorflow.contrib.estimators.composable_model.LinearComposableModel(self,num_label_columns,optimizer=None,_joint_weights=False,gradient_clip_norm=None,num_ps_replicas=0,scope=None,trainable=True)
tensorflow.contrib.estimators.composable_model.LinearComposableModel._get_default_optimizer(self,optimizer_name=None)
tensorflow.contrib.estimators.composable_model.LinearComposableModel.build_model(self,features,feature_columns,is_training)
tensorflow.contrib.estimators.composable_model.LinearComposableModel.get_bias(self,model_dir)
tensorflow.contrib.estimators.composable_model.LinearComposableModel.get_weights(self,model_dir)
tensorflow.contrib.estimators.composable_model._ComposableModel(self,num_label_columns,optimizer,gradient_clip_norm,num_ps_replicas,scope,trainable=True)
tensorflow.contrib.estimators.composable_model._ComposableModel._get_default_optimizer(self,optimizer_name=None)
tensorflow.contrib.estimators.composable_model._ComposableModel._get_feature_columns(self)
tensorflow.contrib.estimators.composable_model._ComposableModel._get_optimizer(self)
tensorflow.contrib.estimators.composable_model._ComposableModel._get_vars(self)
tensorflow.contrib.estimators.composable_model._ComposableModel.build_model(self,features,feature_columns,is_training)
tensorflow.contrib.estimators.composable_model._ComposableModel.get_scope_name(self)
tensorflow.contrib.estimators.composable_model._ComposableModel.get_train_step(self,loss)
tensorflow.contrib.learn.python.learn.estimators.composable_model.DNNComposableModel(self,num_label_columns,hidden_units,optimizer=None,activation_fn=nn.relu,dropout=None,gradient_clip_norm=None,num_ps_replicas=0,scope=None,trainable=True)
tensorflow.contrib.learn.python.learn.estimators.composable_model.DNNComposableModel.__init__(self,num_label_columns,hidden_units,optimizer=None,activation_fn=nn.relu,dropout=None,gradient_clip_norm=None,num_ps_replicas=0,scope=None,trainable=True)
tensorflow.contrib.learn.python.learn.estimators.composable_model.DNNComposableModel._add_hidden_layer_summary(self,value,tag)
tensorflow.contrib.learn.python.learn.estimators.composable_model.DNNComposableModel._get_default_optimizer(self,optimizer_name=None)
tensorflow.contrib.learn.python.learn.estimators.composable_model.DNNComposableModel.build_model(self,features,feature_columns,is_training)
tensorflow.contrib.learn.python.learn.estimators.composable_model.DNNComposableModel.get_bias(self,model_dir)
tensorflow.contrib.learn.python.learn.estimators.composable_model.DNNComposableModel.get_weights(self,model_dir)
tensorflow.contrib.learn.python.learn.estimators.composable_model.LinearComposableModel(self,num_label_columns,optimizer=None,_joint_weights=False,gradient_clip_norm=None,num_ps_replicas=0,scope=None,trainable=True)
tensorflow.contrib.learn.python.learn.estimators.composable_model.LinearComposableModel.__init__(self,num_label_columns,optimizer=None,_joint_weights=False,gradient_clip_norm=None,num_ps_replicas=0,scope=None,trainable=True)
tensorflow.contrib.learn.python.learn.estimators.composable_model.LinearComposableModel._get_default_optimizer(self,optimizer_name=None)
tensorflow.contrib.learn.python.learn.estimators.composable_model.LinearComposableModel.build_model(self,features,feature_columns,is_training)
tensorflow.contrib.learn.python.learn.estimators.composable_model.LinearComposableModel.get_bias(self,model_dir)
tensorflow.contrib.learn.python.learn.estimators.composable_model.LinearComposableModel.get_weights(self,model_dir)
tensorflow.contrib.learn.python.learn.estimators.composable_model._ComposableModel(self,num_label_columns,optimizer,gradient_clip_norm,num_ps_replicas,scope,trainable=True)
tensorflow.contrib.learn.python.learn.estimators.composable_model._ComposableModel.__init__(self,num_label_columns,optimizer,gradient_clip_norm,num_ps_replicas,scope,trainable=True)
tensorflow.contrib.learn.python.learn.estimators.composable_model._ComposableModel._get_default_optimizer(self,optimizer_name=None)
tensorflow.contrib.learn.python.learn.estimators.composable_model._ComposableModel._get_feature_columns(self)
tensorflow.contrib.learn.python.learn.estimators.composable_model._ComposableModel._get_optimizer(self)
tensorflow.contrib.learn.python.learn.estimators.composable_model._ComposableModel._get_vars(self)
tensorflow.contrib.learn.python.learn.estimators.composable_model._ComposableModel.build_model(self,features,feature_columns,is_training)
tensorflow.contrib.learn.python.learn.estimators.composable_model._ComposableModel.get_scope_name(self)
tensorflow.contrib.learn.python.learn.estimators.composable_model._ComposableModel.get_train_step(self,loss)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/prediction_key.py----------------------------------------
tensorflow.contrib.estimators.PredictionKey(object)
tensorflow.contrib.learn.python.learn.estimators.prediction_key.PredictionKey(object)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/logistic_regressor.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.logistic_regressor.(predictions, loss, train_op)->model_fn(features, labels, mode)
A:tensorflow.contrib.learn.python.learn.estimators.logistic_regressor.eval_metric_ops->_make_logistic_eval_metric_ops(labels=labels, predictions=predictions, thresholds=thresholds)
A:tensorflow.contrib.learn.python.learn.estimators.logistic_regressor.metrics[metric_key.MetricKey.PREDICTION_MEAN]->tensorflow.contrib.metrics.streaming_mean(predictions)
A:tensorflow.contrib.learn.python.learn.estimators.logistic_regressor.metrics[metric_key.MetricKey.LABEL_MEAN]->tensorflow.contrib.metrics.streaming_mean(labels_tensor)
A:tensorflow.contrib.learn.python.learn.estimators.logistic_regressor.metrics[metric_key.MetricKey.ACCURACY_BASELINE]->tensorflow.contrib.metrics.streaming_mean(labels_tensor)
A:tensorflow.contrib.learn.python.learn.estimators.logistic_regressor.metrics[metric_key.MetricKey.AUC]->tensorflow.contrib.metrics.streaming_auc(labels=labels_tensor, predictions=predictions)
A:tensorflow.contrib.learn.python.learn.estimators.logistic_regressor.predictions_at_threshold->tensorflow.python.ops.math_ops.to_float(math_ops.greater_equal(predictions, threshold), name='predictions_at_threshold_%f' % threshold)
A:tensorflow.contrib.learn.python.learn.estimators.logistic_regressor.metrics[metric_key.MetricKey.ACCURACY_MEAN % threshold]->tensorflow.contrib.metrics.streaming_accuracy(labels=labels_tensor, predictions=predictions_at_threshold)
A:tensorflow.contrib.learn.python.learn.estimators.logistic_regressor.metrics[metric_key.MetricKey.PRECISION_MEAN % threshold]->tensorflow.contrib.metrics.streaming_precision(labels=labels_tensor, predictions=predictions_at_threshold)
A:tensorflow.contrib.learn.python.learn.estimators.logistic_regressor.metrics[metric_key.MetricKey.RECALL_MEAN % threshold]->tensorflow.contrib.metrics.streaming_recall(labels=labels_tensor, predictions=predictions_at_threshold)
tensorflow.contrib.estimators.LogisticRegressor(model_fn,thresholds=None,model_dir=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.estimators.logistic_regressor._get_model_fn_with_logistic_metrics(model_fn)
tensorflow.contrib.estimators.logistic_regressor._make_logistic_eval_metric_ops(labels,predictions,thresholds)
tensorflow.contrib.learn.python.learn.estimators.logistic_regressor.LogisticRegressor(model_fn,thresholds=None,model_dir=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.learn.python.learn.estimators.logistic_regressor._get_model_fn_with_logistic_metrics(model_fn)
tensorflow.contrib.learn.python.learn.estimators.logistic_regressor._make_logistic_eval_metric_ops(labels,predictions,thresholds)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/metric_key.py----------------------------------------
tensorflow.contrib.estimators.MetricKey(object)
tensorflow.contrib.learn.python.learn.estimators.metric_key.MetricKey(object)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/model_fn.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.model_fn.loss->tensorflow.python.ops.array_ops.reshape(loss, [])
A:tensorflow.contrib.learn.python.learn.estimators.model_fn.loss_shape->tensorflow.python.ops.array_ops.reshape(loss, []).get_shape()
A:tensorflow.contrib.learn.python.learn.estimators.model_fn.predictions->tensorflow.contrib.framework.convert_to_tensor_or_sparse_tensor(predictions)
tensorflow.contrib.estimators.ModeKeys(object)
tensorflow.contrib.estimators.ModelFnOps(cls,mode,predictions=None,loss=None,train_op=None,eval_metric_ops=None,output_alternatives=None,training_chief_hooks=None,training_hooks=None,scaffold=None)
tensorflow.contrib.learn.python.learn.estimators.model_fn.ModeKeys(object)
tensorflow.contrib.learn.python.learn.estimators.model_fn.ModelFnOps(cls,mode,predictions=None,loss=None,train_op=None,eval_metric_ops=None,output_alternatives=None,training_chief_hooks=None,training_hooks=None,scaffold=None)
tensorflow.contrib.learn.python.learn.estimators.model_fn.ModelFnOps.__new__(cls,mode,predictions=None,loss=None,train_op=None,eval_metric_ops=None,output_alternatives=None,training_chief_hooks=None,training_hooks=None,scaffold=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/tensor_signature.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.tensor_signature.other->tensorflow.python.framework.tensor_shape.as_shape(other)
A:tensorflow.contrib.learn.python.learn.estimators.tensor_signature.feature_spec[single_feature_name]->signatures.get_feature_spec()
A:tensorflow.contrib.learn.python.learn.estimators.tensor_signature.features->tensorflow.python.ops.math_ops.cast(features, signatures.dtype)
A:tensorflow.contrib.learn.python.learn.estimators.tensor_signature.features[name]->tensorflow.python.ops.math_ops.cast(features[name], signatures[name].dtype)
tensorflow.contrib.estimators.tensor_signature.TensorSignature(cls,tensor)
tensorflow.contrib.estimators.tensor_signature.TensorSignature.get_feature_spec(self)
tensorflow.contrib.estimators.tensor_signature.TensorSignature.get_placeholder(self)
tensorflow.contrib.estimators.tensor_signature.TensorSignature.is_compatible_with(self,other)
tensorflow.contrib.estimators.tensor_signature.create_example_parser_from_signatures(signatures,examples_batch,single_feature_name='feature')
tensorflow.contrib.estimators.tensor_signature.create_placeholders_from_signatures(signatures)
tensorflow.contrib.estimators.tensor_signature.create_signatures(tensors)
tensorflow.contrib.estimators.tensor_signature.tensors_compatible(tensors,signatures)
tensorflow.contrib.learn.python.learn.estimators.tensor_signature.TensorSignature(cls,tensor)
tensorflow.contrib.learn.python.learn.estimators.tensor_signature.TensorSignature.__new__(cls,tensor)
tensorflow.contrib.learn.python.learn.estimators.tensor_signature.TensorSignature.get_feature_spec(self)
tensorflow.contrib.learn.python.learn.estimators.tensor_signature.TensorSignature.get_placeholder(self)
tensorflow.contrib.learn.python.learn.estimators.tensor_signature.TensorSignature.is_compatible_with(self,other)
tensorflow.contrib.learn.python.learn.estimators.tensor_signature.create_example_parser_from_signatures(signatures,examples_batch,single_feature_name='feature')
tensorflow.contrib.learn.python.learn.estimators.tensor_signature.create_placeholders_from_signatures(signatures)
tensorflow.contrib.learn.python.learn.estimators.tensor_signature.create_signatures(tensors)
tensorflow.contrib.learn.python.learn.estimators.tensor_signature.tensors_compatible(tensors,signatures)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/kmeans.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.kmeans.self._loss_tensor->tensorflow.python.framework.ops.get_default_graph().get_tensor_by_name(KMeansClustering.LOSS_OP_NAME + ':0')
A:tensorflow.contrib.learn.python.learn.estimators.kmeans.keys->sorted(features.keys())
A:tensorflow.contrib.learn.python.learn.estimators.kmeans.features->tensorflow.python.ops.array_ops.concat([features[k] for k in keys], 1)
A:tensorflow.contrib.learn.python.learn.estimators.kmeans.(all_scores, model_predictions, losses, is_initialized, init_op, training_op)->tensorflow.contrib.factorization.python.ops.clustering_ops.KMeans(_parse_tensor_or_dict(features), params.get('num_clusters'), initial_clusters=params.get('training_initial_clusters'), distance_metric=params.get('distance_metric'), use_mini_batch=params.get('use_mini_batch'), mini_batch_steps_per_iteration=params.get('mini_batch_steps_per_iteration'), random_seed=params.get('random_seed'), kmeans_plus_plus_num_retries=params.get('kmeans_plus_plus_num_retries')).training_graph()
A:tensorflow.contrib.learn.python.learn.estimators.kmeans.incr_step->tensorflow.python.ops.state_ops.assign_add(variables.get_global_step(), 1)
A:tensorflow.contrib.learn.python.learn.estimators.kmeans.loss->tensorflow.python.ops.math_ops.reduce_sum(losses, name=KMeansClustering.LOSS_OP_NAME)
A:tensorflow.contrib.learn.python.learn.estimators.kmeans.training_op->with_dependencies([training_op, incr_step], loss)
A:tensorflow.contrib.learn.python.learn.estimators.kmeans.relative_tolerance->params.get('relative_tolerance')
A:tensorflow.contrib.learn.python.learn.estimators.kmeans.results->super(KMeansClustering, self).predict(input_fn=input_fn, outputs=[key], as_iterable=as_iterable)
tensorflow.contrib.estimators.KMeansClustering(self,num_clusters,model_dir=None,initial_clusters=RANDOM_INIT,distance_metric=SQUARED_EUCLIDEAN_DISTANCE,random_seed=0,use_mini_batch=True,mini_batch_steps_per_iteration=1,kmeans_plus_plus_num_retries=2,relative_tolerance=None,config=None)
tensorflow.contrib.estimators.KMeansClustering.clusters(self)
tensorflow.contrib.estimators.KMeansClustering.predict_cluster_idx(self,input_fn=None)
tensorflow.contrib.estimators.KMeansClustering.score(self,input_fn=None,steps=None)
tensorflow.contrib.estimators.KMeansClustering.transform(self,input_fn=None,as_iterable=False)
tensorflow.contrib.estimators.kmeans._InitializeClustersHook(self,init_op,is_initialized_op,is_chief)
tensorflow.contrib.estimators.kmeans._InitializeClustersHook.after_create_session(self,session,_)
tensorflow.contrib.estimators.kmeans._LossRelativeChangeHook(self,tolerance)
tensorflow.contrib.estimators.kmeans._LossRelativeChangeHook.after_run(self,run_context,run_values)
tensorflow.contrib.estimators.kmeans._LossRelativeChangeHook.before_run(self,run_context)
tensorflow.contrib.estimators.kmeans._LossRelativeChangeHook.begin(self)
tensorflow.contrib.estimators.kmeans._kmeans_clustering_model_fn(features,labels,mode,params,config)
tensorflow.contrib.estimators.kmeans._parse_tensor_or_dict(features)
tensorflow.contrib.learn.python.learn.estimators.kmeans.KMeansClustering(self,num_clusters,model_dir=None,initial_clusters=RANDOM_INIT,distance_metric=SQUARED_EUCLIDEAN_DISTANCE,random_seed=0,use_mini_batch=True,mini_batch_steps_per_iteration=1,kmeans_plus_plus_num_retries=2,relative_tolerance=None,config=None)
tensorflow.contrib.learn.python.learn.estimators.kmeans.KMeansClustering.__init__(self,num_clusters,model_dir=None,initial_clusters=RANDOM_INIT,distance_metric=SQUARED_EUCLIDEAN_DISTANCE,random_seed=0,use_mini_batch=True,mini_batch_steps_per_iteration=1,kmeans_plus_plus_num_retries=2,relative_tolerance=None,config=None)
tensorflow.contrib.learn.python.learn.estimators.kmeans.KMeansClustering.clusters(self)
tensorflow.contrib.learn.python.learn.estimators.kmeans.KMeansClustering.predict_cluster_idx(self,input_fn=None)
tensorflow.contrib.learn.python.learn.estimators.kmeans.KMeansClustering.score(self,input_fn=None,steps=None)
tensorflow.contrib.learn.python.learn.estimators.kmeans.KMeansClustering.transform(self,input_fn=None,as_iterable=False)
tensorflow.contrib.learn.python.learn.estimators.kmeans._InitializeClustersHook(self,init_op,is_initialized_op,is_chief)
tensorflow.contrib.learn.python.learn.estimators.kmeans._InitializeClustersHook.__init__(self,init_op,is_initialized_op,is_chief)
tensorflow.contrib.learn.python.learn.estimators.kmeans._InitializeClustersHook.after_create_session(self,session,_)
tensorflow.contrib.learn.python.learn.estimators.kmeans._LossRelativeChangeHook(self,tolerance)
tensorflow.contrib.learn.python.learn.estimators.kmeans._LossRelativeChangeHook.__init__(self,tolerance)
tensorflow.contrib.learn.python.learn.estimators.kmeans._LossRelativeChangeHook.after_run(self,run_context,run_values)
tensorflow.contrib.learn.python.learn.estimators.kmeans._LossRelativeChangeHook.before_run(self,run_context)
tensorflow.contrib.learn.python.learn.estimators.kmeans._LossRelativeChangeHook.begin(self)
tensorflow.contrib.learn.python.learn.estimators.kmeans._kmeans_clustering_model_fn(features,labels,mode,params,config)
tensorflow.contrib.learn.python.learn.estimators.kmeans._parse_tensor_or_dict(features)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/_sklearn.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators._sklearn.out->dict()
A:tensorflow.contrib.learn.python.learn.estimators._sklearn.value->getattr(self, key, None)
A:tensorflow.contrib.learn.python.learn.estimators._sklearn.deep_items->getattr(self, key, None).get_params().items()
A:tensorflow.contrib.learn.python.learn.estimators._sklearn.valid_params->self.get_params(deep=True)
A:tensorflow.contrib.learn.python.learn.estimators._sklearn.split->key.split('__', 1)
A:tensorflow.contrib.learn.python.learn.estimators._sklearn.y_true->numpy.squeeze(y_true)
A:tensorflow.contrib.learn.python.learn.estimators._sklearn.y_pred->numpy.squeeze(y_pred)
A:tensorflow.contrib.learn.python.learn.estimators._sklearn.test_size->options.pop('test_size', None)
A:tensorflow.contrib.learn.python.learn.estimators._sklearn.train_size->int(train_size * args[0].shape[0])
A:tensorflow.contrib.learn.python.learn.estimators._sklearn.random_state->options.pop('random_state', None)
A:tensorflow.contrib.learn.python.learn.estimators._sklearn.indices->numpy.random.permutation(args[0].shape[0])
A:tensorflow.contrib.learn.python.learn.estimators._sklearn.TRY_IMPORT_SKLEARN->os.environ.get('TENSORFLOW_SKLEARN', False)
tensorflow.contrib.estimators.NotFittedError(ValueError,AttributeError)
tensorflow.contrib.estimators._sk_BaseEstimator(object)
tensorflow.contrib.estimators._sk_BaseEstimator.__repr__(self)
tensorflow.contrib.estimators._sk_BaseEstimator.get_params(self,deep=True)
tensorflow.contrib.estimators._sk_BaseEstimator.set_params(self,**params)
tensorflow.contrib.estimators._sk_ClassifierMixin
tensorflow.contrib.estimators._sk_RegressorMixin
tensorflow.contrib.estimators._sk_TransformerMixin
tensorflow.contrib.estimators._sk_accuracy_score(y_true,y_pred)
tensorflow.contrib.estimators._sk_mean_squared_error(y_true,y_pred)
tensorflow.contrib.estimators._sk_pprint(d)
tensorflow.contrib.estimators._sk_train_test_split(*args,**options)
tensorflow.contrib.learn.python.learn.estimators._sklearn.NotFittedError(ValueError,AttributeError)
tensorflow.contrib.learn.python.learn.estimators._sklearn._BaseEstimator(object)
tensorflow.contrib.learn.python.learn.estimators._sklearn._BaseEstimator.__repr__(self)
tensorflow.contrib.learn.python.learn.estimators._sklearn._BaseEstimator.get_params(self,deep=True)
tensorflow.contrib.learn.python.learn.estimators._sklearn._BaseEstimator.set_params(self,**params)
tensorflow.contrib.learn.python.learn.estimators._sklearn._ClassifierMixin
tensorflow.contrib.learn.python.learn.estimators._sklearn._RegressorMixin
tensorflow.contrib.learn.python.learn.estimators._sklearn._TransformerMixin
tensorflow.contrib.learn.python.learn.estimators._sklearn._accuracy_score(y_true,y_pred)
tensorflow.contrib.learn.python.learn.estimators._sklearn._mean_squared_error(y_true,y_pred)
tensorflow.contrib.learn.python.learn.estimators._sklearn._pprint(d)
tensorflow.contrib.learn.python.learn.estimators._sklearn._train_test_split(*args,**options)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/run_config.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.run_config.config->json.loads(os.environ.get('TF_CONFIG') or '{}')
A:tensorflow.contrib.learn.python.learn.estimators.run_config.task_env->json.loads(os.environ.get('TF_CONFIG') or '{}').get('task', {})
A:tensorflow.contrib.learn.python.learn.estimators.run_config.self._task_type->json.loads(os.environ.get('TF_CONFIG') or '{}').get('task', {}).get('type', None)
A:tensorflow.contrib.learn.python.learn.estimators.run_config.self._task_id->self.get_task_id()
A:tensorflow.contrib.learn.python.learn.estimators.run_config.self._cluster_spec->tensorflow.python.training.server_lib.ClusterSpec(config.get('cluster', {}))
A:tensorflow.contrib.learn.python.learn.estimators.run_config.self._environment->json.loads(os.environ.get('TF_CONFIG') or '{}').get('environment', Environment.LOCAL)
A:tensorflow.contrib.learn.python.learn.estimators.run_config.task_index->json.loads(os.environ.get('TF_CONFIG') or '{}').get('task', {}).get('index')
A:tensorflow.contrib.learn.python.learn.estimators.run_config.gpu_options->tensorflow.core.protobuf.config_pb2.GPUOptions(per_process_gpu_memory_fraction=gpu_memory_fraction)
A:tensorflow.contrib.learn.python.learn.estimators.run_config.self._tf_config->tensorflow.core.protobuf.config_pb2.ConfigProto(log_device_placement=log_device_placement, inter_op_parallelism_threads=num_cores, intra_op_parallelism_threads=num_cores, gpu_options=gpu_options)
A:tensorflow.contrib.learn.python.learn.estimators.run_config.new_copy->copy.deepcopy(self)
A:tensorflow.contrib.learn.python.learn.estimators.run_config.addresses->cluster_spec.job_tasks(task_type)
tensorflow.contrib.estimators.ClusterConfig(self,master=None,evaluation_master=None)
tensorflow.contrib.estimators.ClusterConfig.cluster_spec(self)
tensorflow.contrib.estimators.ClusterConfig.environment(self)
tensorflow.contrib.estimators.ClusterConfig.evaluation_master(self)
tensorflow.contrib.estimators.ClusterConfig.get_task_id()
tensorflow.contrib.estimators.ClusterConfig.is_chief(self)
tensorflow.contrib.estimators.ClusterConfig.master(self)
tensorflow.contrib.estimators.ClusterConfig.num_ps_replicas(self)
tensorflow.contrib.estimators.ClusterConfig.num_worker_replicas(self)
tensorflow.contrib.estimators.ClusterConfig.task_id(self)
tensorflow.contrib.estimators.ClusterConfig.task_type(self)
tensorflow.contrib.estimators.Environment(object)
tensorflow.contrib.estimators.RunConfig(self,master=None,num_cores=0,log_device_placement=False,gpu_memory_fraction=1,tf_random_seed=None,save_summary_steps=100,save_checkpoints_secs=600,save_checkpoints_steps=None,keep_checkpoint_max=5,keep_checkpoint_every_n_hours=10000,evaluation_master='',model_dir=None)
tensorflow.contrib.estimators.RunConfig.keep_checkpoint_every_n_hours(self)
tensorflow.contrib.estimators.RunConfig.keep_checkpoint_max(self)
tensorflow.contrib.estimators.RunConfig.model_dir(self)
tensorflow.contrib.estimators.RunConfig.replace(self,**kwargs)
tensorflow.contrib.estimators.RunConfig.save_checkpoints_secs(self)
tensorflow.contrib.estimators.RunConfig.save_checkpoints_steps(self)
tensorflow.contrib.estimators.RunConfig.save_summary_steps(self)
tensorflow.contrib.estimators.RunConfig.tf_config(self)
tensorflow.contrib.estimators.RunConfig.tf_random_seed(self)
tensorflow.contrib.estimators.TaskType(object)
tensorflow.contrib.estimators.run_config._count_ps(cluster_spec)
tensorflow.contrib.estimators.run_config._count_worker(cluster_spec)
tensorflow.contrib.estimators.run_config._get_master(cluster_spec,task_type,task_id)
tensorflow.contrib.learn.python.learn.estimators.run_config.ClusterConfig(self,master=None,evaluation_master=None)
tensorflow.contrib.learn.python.learn.estimators.run_config.ClusterConfig.__init__(self,master=None,evaluation_master=None)
tensorflow.contrib.learn.python.learn.estimators.run_config.ClusterConfig.cluster_spec(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.ClusterConfig.environment(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.ClusterConfig.evaluation_master(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.ClusterConfig.get_task_id()
tensorflow.contrib.learn.python.learn.estimators.run_config.ClusterConfig.is_chief(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.ClusterConfig.master(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.ClusterConfig.num_ps_replicas(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.ClusterConfig.num_worker_replicas(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.ClusterConfig.task_id(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.ClusterConfig.task_type(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.Environment(object)
tensorflow.contrib.learn.python.learn.estimators.run_config.RunConfig(self,master=None,num_cores=0,log_device_placement=False,gpu_memory_fraction=1,tf_random_seed=None,save_summary_steps=100,save_checkpoints_secs=600,save_checkpoints_steps=None,keep_checkpoint_max=5,keep_checkpoint_every_n_hours=10000,evaluation_master='',model_dir=None)
tensorflow.contrib.learn.python.learn.estimators.run_config.RunConfig.__init__(self,master=None,num_cores=0,log_device_placement=False,gpu_memory_fraction=1,tf_random_seed=None,save_summary_steps=100,save_checkpoints_secs=600,save_checkpoints_steps=None,keep_checkpoint_max=5,keep_checkpoint_every_n_hours=10000,evaluation_master='',model_dir=None)
tensorflow.contrib.learn.python.learn.estimators.run_config.RunConfig.keep_checkpoint_every_n_hours(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.RunConfig.keep_checkpoint_max(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.RunConfig.model_dir(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.RunConfig.replace(self,**kwargs)
tensorflow.contrib.learn.python.learn.estimators.run_config.RunConfig.save_checkpoints_secs(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.RunConfig.save_checkpoints_steps(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.RunConfig.save_summary_steps(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.RunConfig.tf_config(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.RunConfig.tf_random_seed(self)
tensorflow.contrib.learn.python.learn.estimators.run_config.TaskType(object)
tensorflow.contrib.learn.python.learn.estimators.run_config._count_ps(cluster_spec)
tensorflow.contrib.learn.python.learn.estimators.run_config._count_worker(cluster_spec)
tensorflow.contrib.learn.python.learn.estimators.run_config._get_master(cluster_spec,task_type,task_id)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/dnn.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.dnn.activation_fn->params.get('activation_fn')
A:tensorflow.contrib.learn.python.learn.estimators.dnn.dropout->params.get('dropout')
A:tensorflow.contrib.learn.python.learn.estimators.dnn.gradient_clip_norm->params.get('gradient_clip_norm')
A:tensorflow.contrib.learn.python.learn.estimators.dnn.embedding_lr_multipliers->params.get('embedding_lr_multipliers', {})
A:tensorflow.contrib.learn.python.learn.estimators.dnn.features->_get_feature_dict(features)
A:tensorflow.contrib.learn.python.learn.estimators.dnn.partitioner->tensorflow.python.ops.partitioned_variables.min_max_variable_partitioner(max_partitions=num_ps_replicas)
A:tensorflow.contrib.learn.python.learn.estimators.dnn.input_layer_partitioner->tensorflow.python.ops.partitioned_variables.min_max_variable_partitioner(max_partitions=num_ps_replicas, min_slice_size=input_layer_min_slice_size)
A:tensorflow.contrib.learn.python.learn.estimators.dnn.net->tensorflow.contrib.layers.dropout(net, keep_prob=1.0 - dropout)
A:tensorflow.contrib.learn.python.learn.estimators.dnn.logits->tensorflow.contrib.layers.fully_connected(net, head.logits_dimension, activation_fn=None, variables_collections=[parent_scope], scope=logits_scope)
A:tensorflow.contrib.learn.python.learn.estimators.dnn.self._feature_columns->tuple(feature_columns or [])
A:tensorflow.contrib.learn.python.learn.estimators.dnn.preds->super(DNNRegressor, self).predict(x=x, input_fn=input_fn, batch_size=batch_size, outputs=[key], as_iterable=as_iterable)
tensorflow.contrib.estimators.DNNClassifier(self,hidden_units,feature_columns,model_dir=None,n_classes=2,weight_column_name=None,optimizer=None,activation_fn=nn.relu,dropout=None,gradient_clip_norm=None,enable_centered_bias=False,config=None,feature_engineering_fn=None,embedding_lr_multipliers=None,input_layer_min_slice_size=None,label_keys=None)
tensorflow.contrib.estimators.DNNClassifier.export(self,export_dir,input_fn=None,input_feature_key=None,use_deprecated_input_fn=True,signature_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.estimators.DNNClassifier.predict(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.estimators.DNNClassifier.predict_classes(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.estimators.DNNClassifier.predict_proba(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.estimators.DNNEstimator(self,head,hidden_units,feature_columns,model_dir=None,optimizer=None,activation_fn=nn.relu,dropout=None,gradient_clip_norm=None,config=None,feature_engineering_fn=None,embedding_lr_multipliers=None,input_layer_min_slice_size=None)
tensorflow.contrib.estimators.DNNRegressor(self,hidden_units,feature_columns,model_dir=None,weight_column_name=None,optimizer=None,activation_fn=nn.relu,dropout=None,gradient_clip_norm=None,enable_centered_bias=False,config=None,feature_engineering_fn=None,label_dimension=1,embedding_lr_multipliers=None,input_layer_min_slice_size=None)
tensorflow.contrib.estimators.DNNRegressor.evaluate(self,x=None,y=None,input_fn=None,feed_fn=None,batch_size=None,steps=None,metrics=None,name=None,checkpoint_path=None,hooks=None)
tensorflow.contrib.estimators.DNNRegressor.export(self,export_dir,input_fn=None,input_feature_key=None,use_deprecated_input_fn=True,signature_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.estimators.DNNRegressor.predict(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.estimators.DNNRegressor.predict_scores(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.estimators.dnn._add_hidden_layer_summary(value,tag)
tensorflow.contrib.estimators.dnn._dnn_model_fn(features,labels,mode,params,config=None)
tensorflow.contrib.estimators.dnn._get_feature_dict(features)
tensorflow.contrib.estimators.dnn._get_optimizer(optimizer)
tensorflow.contrib.learn.python.learn.estimators.dnn.DNNClassifier(self,hidden_units,feature_columns,model_dir=None,n_classes=2,weight_column_name=None,optimizer=None,activation_fn=nn.relu,dropout=None,gradient_clip_norm=None,enable_centered_bias=False,config=None,feature_engineering_fn=None,embedding_lr_multipliers=None,input_layer_min_slice_size=None,label_keys=None)
tensorflow.contrib.learn.python.learn.estimators.dnn.DNNClassifier.__init__(self,hidden_units,feature_columns,model_dir=None,n_classes=2,weight_column_name=None,optimizer=None,activation_fn=nn.relu,dropout=None,gradient_clip_norm=None,enable_centered_bias=False,config=None,feature_engineering_fn=None,embedding_lr_multipliers=None,input_layer_min_slice_size=None,label_keys=None)
tensorflow.contrib.learn.python.learn.estimators.dnn.DNNClassifier.export(self,export_dir,input_fn=None,input_feature_key=None,use_deprecated_input_fn=True,signature_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.learn.python.learn.estimators.dnn.DNNClassifier.predict(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.dnn.DNNClassifier.predict_classes(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.dnn.DNNClassifier.predict_proba(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.dnn.DNNEstimator(self,head,hidden_units,feature_columns,model_dir=None,optimizer=None,activation_fn=nn.relu,dropout=None,gradient_clip_norm=None,config=None,feature_engineering_fn=None,embedding_lr_multipliers=None,input_layer_min_slice_size=None)
tensorflow.contrib.learn.python.learn.estimators.dnn.DNNEstimator.__init__(self,head,hidden_units,feature_columns,model_dir=None,optimizer=None,activation_fn=nn.relu,dropout=None,gradient_clip_norm=None,config=None,feature_engineering_fn=None,embedding_lr_multipliers=None,input_layer_min_slice_size=None)
tensorflow.contrib.learn.python.learn.estimators.dnn.DNNRegressor(self,hidden_units,feature_columns,model_dir=None,weight_column_name=None,optimizer=None,activation_fn=nn.relu,dropout=None,gradient_clip_norm=None,enable_centered_bias=False,config=None,feature_engineering_fn=None,label_dimension=1,embedding_lr_multipliers=None,input_layer_min_slice_size=None)
tensorflow.contrib.learn.python.learn.estimators.dnn.DNNRegressor.__init__(self,hidden_units,feature_columns,model_dir=None,weight_column_name=None,optimizer=None,activation_fn=nn.relu,dropout=None,gradient_clip_norm=None,enable_centered_bias=False,config=None,feature_engineering_fn=None,label_dimension=1,embedding_lr_multipliers=None,input_layer_min_slice_size=None)
tensorflow.contrib.learn.python.learn.estimators.dnn.DNNRegressor.evaluate(self,x=None,y=None,input_fn=None,feed_fn=None,batch_size=None,steps=None,metrics=None,name=None,checkpoint_path=None,hooks=None)
tensorflow.contrib.learn.python.learn.estimators.dnn.DNNRegressor.export(self,export_dir,input_fn=None,input_feature_key=None,use_deprecated_input_fn=True,signature_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.learn.python.learn.estimators.dnn.DNNRegressor.predict(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.dnn.DNNRegressor.predict_scores(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.dnn._add_hidden_layer_summary(value,tag)
tensorflow.contrib.learn.python.learn.estimators.dnn._dnn_model_fn(features,labels,mode,params,config=None)
tensorflow.contrib.learn.python.learn.estimators.dnn._get_feature_dict(features)
tensorflow.contrib.learn.python.learn.estimators.dnn._get_optimizer(optimizer)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/dynamic_rnn_estimator.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.flat_state->tensorflow.python.util.nest.flatten(state)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.state_name->_get_state_name(i)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.flat_state_sizes->tensorflow.python.util.nest.flatten(cell.state_size)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.state_tensor->tensorflow.python.ops.array_ops.identity(state_tensor, name=state_name)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.rank_check->tensorflow.python.ops.check_ops.assert_rank(state_tensor, 2, name='check_state_{}_rank'.format(i))
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.shape_check->tensorflow.python.ops.check_ops.assert_equal(array_ops.shape(state_tensor)[1], state_size, name='check_state_{}_shape'.format(i))
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.dummy_state->tensorflow.contrib.learn.python.learn.estimators.rnn_common.construct_rnn_cell(num_units, cell_type, dropout).zero_state(batch_size=1, dtype=dtypes.bool)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.seq_rank_check->tensorflow.python.ops.check_ops.assert_rank(sequence_input, 3, message='sequence_input must have rank 3', data=[array_ops.shape(sequence_input)])
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.seq_type_check->tensorflow.python.ops.check_ops.assert_type(sequence_input, dtypes.float32, message='sequence_input must have dtype float32; got {}.'.format(sequence_input.dtype))
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.ctx_rank_check->tensorflow.python.ops.check_ops.assert_rank(context_input, 2, message='context_input must have rank 2', data=[array_ops.shape(context_input)])
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.ctx_type_check->tensorflow.python.ops.check_ops.assert_type(context_input, dtypes.float32, message='context_input must have dtype float32; got {}.'.format(context_input.dtype))
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.tiled_context_input->tensorflow.python.ops.array_ops.tile(array_ops.expand_dims(context_input, 1), array_ops.concat([[1], [padded_length], [1]], 0))
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.sequence_input->build_sequence_input(features, sequence_feature_columns, context_feature_columns)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.context_input->tensorflow.contrib.layers.input_from_feature_columns(columns_to_tensors=features, feature_columns=context_feature_columns, weight_collections=weight_collections, scope=scope)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.(rnn_outputs, final_state)->tensorflow.python.ops.rnn.dynamic_rnn(cell=cell, inputs=sequence_input, initial_state=initial_state, dtype=dtype, parallel_iterations=parallel_iterations, swap_memory=swap_memory, time_major=False)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.activations->tensorflow.contrib.layers.fully_connected(inputs=rnn_outputs, num_outputs=num_label_columns, activation_fn=None, trainable=True)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.(mask_predictions, mask_labels)->tensorflow.contrib.learn.python.learn.estimators.rnn_common.mask_activations_and_labels(prediction_dict[prediction_key.PredictionKey.CLASSES], labels, sequence_length)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.eval_metric_ops['accuracy']->tensorflow.contrib.metrics.streaming_accuracy(predictions=prediction_dict[prediction_key.PredictionKey.CLASSES], labels=labels)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.last_activations->tensorflow.contrib.learn.python.learn.estimators.rnn_common.select_last_activations(activations, sequence_length)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.probabilities->tensorflow.contrib.layers.multi_class_target(n_classes=num_classes).logits_to_predictions(last_activations, proba=True)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.predictions->tensorflow.contrib.layers.multi_class_target(n_classes=num_classes).logits_to_predictions(last_activations, proba=False)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.(activations_masked, labels_masked)->tensorflow.contrib.learn.python.learn.estimators.rnn_common.mask_activations_and_labels(activations, labels, sequence_length)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.sequence_length->features.get(sequence_length_key)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.cell->tensorflow.contrib.learn.python.learn.estimators.rnn_common.construct_rnn_cell(num_units, cell_type, dropout)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.initial_state->dict_to_state_tuple(features, cell)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.(rnn_activations, final_state)->construct_rnn(initial_state, sequence_input, cell, target_column.num_label_columns, dtype=dtype, parallel_iterations=parallel_iterations, swap_memory=swap_memory)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.prediction_dict->_single_value_predictions(rnn_activations, sequence_length, target_column, problem_type, predict_probabilities)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.loss->_single_value_loss(rnn_activations, labels, sequence_length, target_column, features)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.state_dict->state_tuple_to_dict(final_state)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.eval_metric_ops->_get_eval_metric_ops(problem_type, prediction_type, sequence_length, prediction_dict, labels)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.train_op->tensorflow.contrib.layers.python.layers.optimizers.optimize_loss(loss=loss, global_step=None, learning_rate=learning_rate, optimizer=optimizer, clip_gradients=gradient_clipping_norm, summaries=optimizers.OPTIMIZER_SUMMARIES)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.output_alternatives->_get_output_alternatives(prediction_type, problem_type, prediction_dict)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.target_column->tensorflow.contrib.layers.multi_class_target(n_classes=num_classes)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.optimizer->tensorflow.python.training.momentum.MomentumOptimizer(learning_rate, momentum)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.dynamic_rnn_model_fn->_get_dynamic_rnn_model_fn(cell_type=cell_type, num_units=num_units, target_column=target_column, problem_type=problem_type, prediction_type=prediction_type, optimizer=optimizer, sequence_feature_columns=sequence_feature_columns, context_feature_columns=context_feature_columns, predict_probabilities=predict_probabilities, learning_rate=learning_rate, gradient_clipping_norm=gradient_clipping_norm, dropout_keep_probabilities=dropout_keep_probabilities, name=name)
A:tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.(dropout_keep_probabilities, num_units)->_get_dropout_and_num_units(cell_type, num_units, num_rnn_layers, input_keep_probability, output_keep_probability)
tensorflow.contrib.estimators.DynamicRnnEstimator(self,problem_type,prediction_type,sequence_feature_columns,context_feature_columns=None,num_classes=None,num_units=None,cell_type='basic_rnn',optimizer='SGD',learning_rate=0.1,predict_probabilities=False,momentum=None,gradient_clipping_norm=5.0,dropout_keep_probabilities=None,model_dir=None,feature_engineering_fn=None,config=None)
tensorflow.contrib.estimators.dynamic_rnn_estimator.PredictionType(object)
tensorflow.contrib.estimators.dynamic_rnn_estimator._concatenate_context_input(sequence_input,context_input)
tensorflow.contrib.estimators.dynamic_rnn_estimator._get_dropout_and_num_units(cell_type,num_units,num_rnn_layers,input_keep_probability,output_keep_probability)
tensorflow.contrib.estimators.dynamic_rnn_estimator._get_dynamic_rnn_model_fn(cell_type,num_units,target_column,problem_type,prediction_type,optimizer,sequence_feature_columns,context_feature_columns=None,predict_probabilities=False,learning_rate=None,gradient_clipping_norm=None,dropout_keep_probabilities=None,sequence_length_key=rnn_common.RNNKeys.SEQUENCE_LENGTH_KEY,dtype=dtypes.float32,parallel_iterations=None,swap_memory=True,name='DynamicRNNModel')
tensorflow.contrib.estimators.dynamic_rnn_estimator._get_eval_metric_ops(problem_type,prediction_type,sequence_length,prediction_dict,labels)
tensorflow.contrib.estimators.dynamic_rnn_estimator._get_output_alternatives(prediction_type,problem_type,prediction_dict)
tensorflow.contrib.estimators.dynamic_rnn_estimator._get_state_name(i)
tensorflow.contrib.estimators.dynamic_rnn_estimator._multi_value_loss(activations,labels,sequence_length,target_column,features)
tensorflow.contrib.estimators.dynamic_rnn_estimator._single_value_loss(activations,labels,sequence_length,target_column,features)
tensorflow.contrib.estimators.dynamic_rnn_estimator._single_value_predictions(activations,sequence_length,target_column,problem_type,predict_probabilities)
tensorflow.contrib.estimators.dynamic_rnn_estimator.build_sequence_input(features,sequence_feature_columns,context_feature_columns,weight_collections=None,scope=None)
tensorflow.contrib.estimators.dynamic_rnn_estimator.construct_rnn(initial_state,sequence_input,cell,num_label_columns,dtype=dtypes.float32,parallel_iterations=32,swap_memory=True)
tensorflow.contrib.estimators.dynamic_rnn_estimator.dict_to_state_tuple(input_dict,cell)
tensorflow.contrib.estimators.dynamic_rnn_estimator.multi_value_rnn_classifier(num_classes,num_units,sequence_feature_columns,context_feature_columns=None,cell_type='basic_rnn',num_rnn_layers=1,optimizer_type='SGD',learning_rate=0.1,predict_probabilities=False,momentum=None,gradient_clipping_norm=5.0,input_keep_probability=None,output_keep_probability=None,model_dir=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.estimators.dynamic_rnn_estimator.multi_value_rnn_regressor(num_units,sequence_feature_columns,context_feature_columns=None,cell_type='basic_rnn',num_rnn_layers=1,optimizer_type='SGD',learning_rate=0.1,momentum=None,gradient_clipping_norm=5.0,input_keep_probability=None,output_keep_probability=None,model_dir=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.estimators.dynamic_rnn_estimator.single_value_rnn_classifier(num_classes,num_units,sequence_feature_columns,context_feature_columns=None,cell_type='basic_rnn',num_rnn_layers=1,optimizer_type='SGD',learning_rate=0.1,predict_probabilities=False,momentum=None,gradient_clipping_norm=5.0,input_keep_probability=None,output_keep_probability=None,model_dir=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.estimators.dynamic_rnn_estimator.single_value_rnn_regressor(num_units,sequence_feature_columns,context_feature_columns=None,cell_type='basic_rnn',num_rnn_layers=1,optimizer_type='SGD',learning_rate=0.1,momentum=None,gradient_clipping_norm=5.0,input_keep_probability=None,output_keep_probability=None,model_dir=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.estimators.dynamic_rnn_estimator.state_tuple_to_dict(state)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.DynamicRnnEstimator(self,problem_type,prediction_type,sequence_feature_columns,context_feature_columns=None,num_classes=None,num_units=None,cell_type='basic_rnn',optimizer='SGD',learning_rate=0.1,predict_probabilities=False,momentum=None,gradient_clipping_norm=5.0,dropout_keep_probabilities=None,model_dir=None,feature_engineering_fn=None,config=None)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.DynamicRnnEstimator.__init__(self,problem_type,prediction_type,sequence_feature_columns,context_feature_columns=None,num_classes=None,num_units=None,cell_type='basic_rnn',optimizer='SGD',learning_rate=0.1,predict_probabilities=False,momentum=None,gradient_clipping_norm=5.0,dropout_keep_probabilities=None,model_dir=None,feature_engineering_fn=None,config=None)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.PredictionType(object)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator._concatenate_context_input(sequence_input,context_input)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator._get_dropout_and_num_units(cell_type,num_units,num_rnn_layers,input_keep_probability,output_keep_probability)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator._get_dynamic_rnn_model_fn(cell_type,num_units,target_column,problem_type,prediction_type,optimizer,sequence_feature_columns,context_feature_columns=None,predict_probabilities=False,learning_rate=None,gradient_clipping_norm=None,dropout_keep_probabilities=None,sequence_length_key=rnn_common.RNNKeys.SEQUENCE_LENGTH_KEY,dtype=dtypes.float32,parallel_iterations=None,swap_memory=True,name='DynamicRNNModel')
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator._get_eval_metric_ops(problem_type,prediction_type,sequence_length,prediction_dict,labels)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator._get_output_alternatives(prediction_type,problem_type,prediction_dict)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator._get_state_name(i)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator._multi_value_loss(activations,labels,sequence_length,target_column,features)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator._single_value_loss(activations,labels,sequence_length,target_column,features)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator._single_value_predictions(activations,sequence_length,target_column,problem_type,predict_probabilities)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.build_sequence_input(features,sequence_feature_columns,context_feature_columns,weight_collections=None,scope=None)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.construct_rnn(initial_state,sequence_input,cell,num_label_columns,dtype=dtypes.float32,parallel_iterations=32,swap_memory=True)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.dict_to_state_tuple(input_dict,cell)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.multi_value_rnn_classifier(num_classes,num_units,sequence_feature_columns,context_feature_columns=None,cell_type='basic_rnn',num_rnn_layers=1,optimizer_type='SGD',learning_rate=0.1,predict_probabilities=False,momentum=None,gradient_clipping_norm=5.0,input_keep_probability=None,output_keep_probability=None,model_dir=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.multi_value_rnn_regressor(num_units,sequence_feature_columns,context_feature_columns=None,cell_type='basic_rnn',num_rnn_layers=1,optimizer_type='SGD',learning_rate=0.1,momentum=None,gradient_clipping_norm=5.0,input_keep_probability=None,output_keep_probability=None,model_dir=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.single_value_rnn_classifier(num_classes,num_units,sequence_feature_columns,context_feature_columns=None,cell_type='basic_rnn',num_rnn_layers=1,optimizer_type='SGD',learning_rate=0.1,predict_probabilities=False,momentum=None,gradient_clipping_norm=5.0,input_keep_probability=None,output_keep_probability=None,model_dir=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.single_value_rnn_regressor(num_units,sequence_feature_columns,context_feature_columns=None,cell_type='basic_rnn',num_rnn_layers=1,optimizer_type='SGD',learning_rate=0.1,momentum=None,gradient_clipping_norm=5.0,input_keep_probability=None,output_keep_probability=None,model_dir=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator.state_tuple_to_dict(state)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/constants.py----------------------------------------
tensorflow.contrib.estimators.ProblemType(object)
tensorflow.contrib.learn.python.learn.estimators.constants.ProblemType(object)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/svm.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.svm.optimizer->tensorflow.contrib.linear_optimizer.python.sdca_optimizer.SDCAOptimizer(example_id_column=example_id_column, num_loss_partitions=num_loss_partitions, symmetric_l1_regularization=l1_regularization, symmetric_l2_regularization=l2_regularization)
A:tensorflow.contrib.learn.python.learn.estimators.svm.chief_hook->tensorflow.contrib.learn.python.learn.estimators.linear._SdcaUpdateWeightsHook()
A:tensorflow.contrib.learn.python.learn.estimators.svm.preds->super(SVM, self).predict(x=x, input_fn=input_fn, batch_size=batch_size, outputs=[key], as_iterable=as_iterable)
tensorflow.contrib.estimators.SVM(self,example_id_column,feature_columns,weight_column_name=None,model_dir=None,l1_regularization=0.0,l2_regularization=0.0,num_loss_partitions=1,kernels=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.estimators.SVM.export(self,export_dir,signature_fn=None,input_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.estimators.SVM.export_with_defaults(self,export_dir,signature_fn=None,input_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.estimators.SVM.predict_classes(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.estimators.SVM.predict_proba(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.estimators.svm._as_iterable(preds,output)
tensorflow.contrib.learn.python.learn.estimators.svm.SVM(self,example_id_column,feature_columns,weight_column_name=None,model_dir=None,l1_regularization=0.0,l2_regularization=0.0,num_loss_partitions=1,kernels=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.learn.python.learn.estimators.svm.SVM.__init__(self,example_id_column,feature_columns,weight_column_name=None,model_dir=None,l1_regularization=0.0,l2_regularization=0.0,num_loss_partitions=1,kernels=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.learn.python.learn.estimators.svm.SVM.export(self,export_dir,signature_fn=None,input_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.learn.python.learn.estimators.svm.SVM.export_with_defaults(self,export_dir,signature_fn=None,input_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.learn.python.learn.estimators.svm.SVM.predict_classes(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.svm.SVM.predict_proba(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.svm._as_iterable(preds,output)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/linear.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.linear.shape->tensorflow.python.framework.tensor_util.constant_value(column.dense_shape)
A:tensorflow.contrib.learn.python.learn.estimators.linear.bias_column->tensorflow.contrib.layers.real_valued_column(bias_column_name)
A:tensorflow.contrib.learn.python.learn.estimators.linear.columns_to_tensors[bias_column]->tensorflow.python.ops.array_ops.ones([batch_size, 1], dtype=dtypes.float32)
A:tensorflow.contrib.learn.python.learn.estimators.linear.gradient_clip_norm->params.get('gradient_clip_norm', None)
A:tensorflow.contrib.learn.python.learn.estimators.linear.joint_weights->params.get('joint_weights', False)
A:tensorflow.contrib.learn.python.learn.estimators.linear.partitioner->tensorflow.python.ops.partitioned_variables.min_max_variable_partitioner(max_partitions=num_ps_replicas, min_slice_size=64 << 20)
A:tensorflow.contrib.learn.python.learn.estimators.linear.(logits, _, _)->layer_fn(columns_to_tensors=features, feature_columns=feature_columns, num_outputs=head.logits_dimension, weight_collections=[parent_scope], scope=scope)
A:tensorflow.contrib.learn.python.learn.estimators.linear.global_step->tensorflow.contrib.framework.python.ops.variables.get_global_step()
A:tensorflow.contrib.learn.python.learn.estimators.linear.my_vars->tensorflow.python.framework.ops.get_collection(parent_scope)
A:tensorflow.contrib.learn.python.learn.estimators.linear.grads->tensorflow.python.ops.gradients.gradients(loss, my_vars)
A:tensorflow.contrib.learn.python.learn.estimators.linear.(grads, _)->tensorflow.python.ops.clip_ops.clip_by_global_norm(grads, gradient_clip_norm)
A:tensorflow.contrib.learn.python.learn.estimators.linear.update_weights_hook->params.get('update_weights_hook', None)
A:tensorflow.contrib.learn.python.learn.estimators.linear.(logits, columns_to_variables, bias)->tensorflow.contrib.layers.weighted_sum_from_feature_columns(columns_to_tensors=features, feature_columns=feature_columns, num_outputs=1, scope=scope)
A:tensorflow.contrib.learn.python.learn.estimators.linear.(sdca_model, train_op)->optimizer.get_train_step(columns_to_variables, weight_column_name, loss_type, features, labels, global_step)
A:tensorflow.contrib.learn.python.learn.estimators.linear.model_fn_ops->tensorflow.contrib.learn.python.learn.estimators.head.regression_head(weight_column_name=weight_column_name, label_dimension=label_dimension, enable_centered_bias=enable_centered_bias).create_model_fn_ops(features=features, labels=labels, mode=mode, train_op_fn=_train_op_fn, logits=logits)
A:tensorflow.contrib.learn.python.learn.estimators.linear.learning_rate->min(_LEARNING_RATE, 1.0 / math.sqrt(len(feature_columns)))
A:tensorflow.contrib.learn.python.learn.estimators.linear.self._update_op->self._sdca_model.update_weights(self._train_op)
A:tensorflow.contrib.learn.python.learn.estimators.linear.self._feature_columns->tuple(feature_columns or [])
A:tensorflow.contrib.learn.python.learn.estimators.linear.head->tensorflow.contrib.learn.python.learn.estimators.head.regression_head(weight_column_name=weight_column_name, label_dimension=label_dimension, enable_centered_bias=enable_centered_bias)
A:tensorflow.contrib.learn.python.learn.estimators.linear.chief_hook->_SdcaUpdateWeightsHook()
A:tensorflow.contrib.learn.python.learn.estimators.linear.preds->super(LinearRegressor, self).predict(x=x, input_fn=input_fn, batch_size=batch_size, outputs=[key], as_iterable=as_iterable)
tensorflow.contrib.estimators.LinearClassifier(self,feature_columns,model_dir=None,n_classes=2,weight_column_name=None,optimizer=None,gradient_clip_norm=None,enable_centered_bias=False,_joint_weight=False,config=None,feature_engineering_fn=None)
tensorflow.contrib.estimators.LinearClassifier.export(self,export_dir,input_fn=None,input_feature_key=None,use_deprecated_input_fn=True,signature_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.estimators.LinearClassifier.predict(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.estimators.LinearClassifier.predict_classes(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.estimators.LinearClassifier.predict_proba(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.estimators.LinearEstimator(self,feature_columns,head,model_dir=None,weight_column_name=None,optimizer=None,gradient_clip_norm=None,_joint_weights=False,config=None,feature_engineering_fn=None)
tensorflow.contrib.estimators.LinearRegressor(self,feature_columns,model_dir=None,weight_column_name=None,optimizer=None,gradient_clip_norm=None,enable_centered_bias=False,label_dimension=1,_joint_weights=False,config=None,feature_engineering_fn=None)
tensorflow.contrib.estimators.LinearRegressor.export(self,export_dir,input_fn=None,input_feature_key=None,use_deprecated_input_fn=True,signature_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.estimators.LinearRegressor.predict(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.estimators.LinearRegressor.predict_scores(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.estimators.linear._SdcaUpdateWeightsHook(self)
tensorflow.contrib.estimators.linear._SdcaUpdateWeightsHook.before_run(self,run_context)
tensorflow.contrib.estimators.linear._SdcaUpdateWeightsHook.begin(self)
tensorflow.contrib.estimators.linear._SdcaUpdateWeightsHook.set_parameters(self,sdca_model,train_op)
tensorflow.contrib.estimators.linear._add_bias_column(feature_columns,columns_to_tensors,bias_variable,columns_to_variables)
tensorflow.contrib.estimators.linear._as_iterable(preds,output)
tensorflow.contrib.estimators.linear._get_default_optimizer(feature_columns)
tensorflow.contrib.estimators.linear._get_optimizer(spec)
tensorflow.contrib.estimators.linear._linear_model_fn(features,labels,mode,params,config=None)
tensorflow.contrib.estimators.linear.sdca_model_fn(features,labels,mode,params)
tensorflow.contrib.learn.python.learn.estimators.linear.LinearClassifier(self,feature_columns,model_dir=None,n_classes=2,weight_column_name=None,optimizer=None,gradient_clip_norm=None,enable_centered_bias=False,_joint_weight=False,config=None,feature_engineering_fn=None)
tensorflow.contrib.learn.python.learn.estimators.linear.LinearClassifier.__init__(self,feature_columns,model_dir=None,n_classes=2,weight_column_name=None,optimizer=None,gradient_clip_norm=None,enable_centered_bias=False,_joint_weight=False,config=None,feature_engineering_fn=None)
tensorflow.contrib.learn.python.learn.estimators.linear.LinearClassifier.export(self,export_dir,input_fn=None,input_feature_key=None,use_deprecated_input_fn=True,signature_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.learn.python.learn.estimators.linear.LinearClassifier.predict(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.linear.LinearClassifier.predict_classes(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.linear.LinearClassifier.predict_proba(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.linear.LinearEstimator(self,feature_columns,head,model_dir=None,weight_column_name=None,optimizer=None,gradient_clip_norm=None,_joint_weights=False,config=None,feature_engineering_fn=None)
tensorflow.contrib.learn.python.learn.estimators.linear.LinearEstimator.__init__(self,feature_columns,head,model_dir=None,weight_column_name=None,optimizer=None,gradient_clip_norm=None,_joint_weights=False,config=None,feature_engineering_fn=None)
tensorflow.contrib.learn.python.learn.estimators.linear.LinearRegressor(self,feature_columns,model_dir=None,weight_column_name=None,optimizer=None,gradient_clip_norm=None,enable_centered_bias=False,label_dimension=1,_joint_weights=False,config=None,feature_engineering_fn=None)
tensorflow.contrib.learn.python.learn.estimators.linear.LinearRegressor.__init__(self,feature_columns,model_dir=None,weight_column_name=None,optimizer=None,gradient_clip_norm=None,enable_centered_bias=False,label_dimension=1,_joint_weights=False,config=None,feature_engineering_fn=None)
tensorflow.contrib.learn.python.learn.estimators.linear.LinearRegressor.export(self,export_dir,input_fn=None,input_feature_key=None,use_deprecated_input_fn=True,signature_fn=None,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.learn.python.learn.estimators.linear.LinearRegressor.predict(self,x=None,input_fn=None,batch_size=None,outputs=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.linear.LinearRegressor.predict_scores(self,x=None,input_fn=None,batch_size=None,as_iterable=True)
tensorflow.contrib.learn.python.learn.estimators.linear._SdcaUpdateWeightsHook(self)
tensorflow.contrib.learn.python.learn.estimators.linear._SdcaUpdateWeightsHook.__init__(self)
tensorflow.contrib.learn.python.learn.estimators.linear._SdcaUpdateWeightsHook.before_run(self,run_context)
tensorflow.contrib.learn.python.learn.estimators.linear._SdcaUpdateWeightsHook.begin(self)
tensorflow.contrib.learn.python.learn.estimators.linear._SdcaUpdateWeightsHook.set_parameters(self,sdca_model,train_op)
tensorflow.contrib.learn.python.learn.estimators.linear._add_bias_column(feature_columns,columns_to_tensors,bias_variable,columns_to_variables)
tensorflow.contrib.learn.python.learn.estimators.linear._as_iterable(preds,output)
tensorflow.contrib.learn.python.learn.estimators.linear._get_default_optimizer(feature_columns)
tensorflow.contrib.learn.python.learn.estimators.linear._get_optimizer(spec)
tensorflow.contrib.learn.python.learn.estimators.linear._linear_model_fn(features,labels,mode,params,config=None)
tensorflow.contrib.learn.python.learn.estimators.linear.sdca_model_fn(features,labels,mode,params)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/state_saving_rnn_estimator.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.(rnn_outputs, final_state)->tensorflow.contrib.rnn.python.ops.core_rnn.static_state_saving_rnn(cell=cell, inputs=inputs, state_saver=state_saver, state_name=state_name, scope=scope)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.rnn_outputs->tensorflow.python.ops.array_ops.stack(rnn_outputs, axis=1)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.activations->tensorflow.contrib.layers.fully_connected(inputs=rnn_outputs, num_outputs=num_label_columns, activation_fn=None, trainable=True)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.final_state->tensorflow.python.ops.array_ops.identity(final_state, name=rnn_common.RNNKeys.FINAL_STATE_KEY)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.(predictions, labels)->tensorflow.contrib.learn.python.learn.estimators.rnn_common.mask_activations_and_labels(predictions, labels, sequence_length)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.default_metrics['accuracy']->tensorflow.contrib.learn.python.learn.metric_spec.MetricSpec(metric_fn=_mask_multivalue(sequence_length, metrics.streaming_accuracy), prediction_key=prediction_key.PredictionKey.CLASSES)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.(activations_masked, labels_masked)->tensorflow.contrib.learn.python.learn.estimators.rnn_common.mask_activations_and_labels(activations, labels, sequence_length)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.parent_columns->tensorflow.contrib.layers.python.layers.feature_column_ops._get_parent_columns(column)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.feature->features.get(name, None)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.values->lstm_cell(num_units, num_rnn_layers, dropout).zero_state(batch_size=1, dtype=dtypes.float32)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.state_names->_get_lstm_state_names(num_rnn_layers)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.states[state_names[i][0]]->tensorflow.python.ops.array_ops.squeeze(values[i][0], axis=0)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.states[state_names[i][1]]->tensorflow.python.ops.array_ops.squeeze(values[i][1], axis=0)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.(sequences, context)->_prepare_features_for_sqss(features, labels, mode, sequence_feature_columns, context_feature_columns)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.flat_state->tensorflow.python.util.nest.flatten(state)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.state_name->_get_lstm_state_names(num_rnn_layers)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.sequence_features->tensorflow.contrib.layers.sequence_input_from_feature_columns(columns_to_tensors=sequence_features, feature_columns=sequence_feature_columns, weight_collections=None, scope=None)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.cell->lstm_cell(num_units, num_rnn_layers, dropout)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.batch->_read_batch(cell=cell, features=features, labels=labels, mode=mode, num_unroll=num_unroll, num_rnn_layers=num_rnn_layers, batch_size=batch_size, sequence_feature_columns=sequence_feature_columns, context_feature_columns=context_feature_columns, num_threads=num_threads, queue_capacity=queue_capacity, seed=seed)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.labels->tensorflow.contrib.layers.sequence_input_from_feature_columns(columns_to_tensors=sequence_features, feature_columns=sequence_feature_columns, weight_collections=None, scope=None).pop(rnn_common.RNNKeys.LABELS_KEY)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.inputs->_prepare_inputs_for_rnn(sequence_features, context_features, sequence_feature_columns, num_unroll)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.(rnn_activations, final_state)->construct_state_saving_rnn(cell=cell, inputs=inputs, num_label_columns=target_column.num_label_columns, state_saver=batch, state_name=state_name)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.prediction_dict->tensorflow.contrib.learn.python.learn.estimators.rnn_common.multi_value_predictions(rnn_activations, target_column, problem_type, predict_probabilities)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.loss->_multi_value_loss(rnn_activations, labels, batch.length, target_column, features)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.default_metrics->_get_default_metrics(problem_type, batch.length)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.eval_metric_ops->tensorflow.contrib.learn.python.learn.estimators.estimator._make_metrics_ops(default_metrics, features, labels, prediction_dict)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.state_dict->state_tuple_to_dict(final_state)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.train_op->tensorflow.contrib.layers.python.layers.optimizers.optimize_loss(loss=loss, global_step=None, learning_rate=learning_rate, optimizer=optimizer, clip_gradients=gradient_clipping_norm, summaries=optimizers.OPTIMIZER_SUMMARIES)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.cells->tensorflow.contrib.learn.python.learn.estimators.rnn_common.apply_dropout(cells, dropout_keep_probabilities)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.target_column->tensorflow.contrib.layers.multi_class_target(n_classes=num_classes)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.optimizer_type->tensorflow.python.training.momentum.MomentumOptimizer(learning_rate, momentum)
A:tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.rnn_model_fn->_get_rnn_model_fn(target_column=target_column, problem_type=problem_type, optimizer=optimizer_type, num_unroll=num_unroll, num_units=num_units, num_rnn_layers=num_rnn_layers, num_threads=num_threads, queue_capacity=queue_capacity, batch_size=batch_size, sequence_feature_columns=sequence_feature_columns, context_feature_columns=context_feature_columns, predict_probabilities=predict_probabilities, learning_rate=learning_rate, gradient_clipping_norm=gradient_clipping_norm, dropout_keep_probabilities=dropout_keep_probabilities, name=name, seed=seed)
tensorflow.contrib.estimators.state_saving_rnn_estimator.StateSavingRnnEstimator(self,problem_type,num_units,num_unroll,batch_size,sequence_feature_columns,context_feature_columns=None,num_classes=None,num_rnn_layers=1,optimizer_type='SGD',learning_rate=0.1,predict_probabilities=False,momentum=None,gradient_clipping_norm=5.0,dropout_keep_probabilities=None,model_dir=None,config=None,feature_engineering_fn=None,num_threads=3,queue_capacity=1000,seed=None)
tensorflow.contrib.estimators.state_saving_rnn_estimator._get_default_metrics(problem_type,sequence_length)
tensorflow.contrib.estimators.state_saving_rnn_estimator._get_lstm_state_names(num_rnn_layers)
tensorflow.contrib.estimators.state_saving_rnn_estimator._get_name_or_parent_names(column)
tensorflow.contrib.estimators.state_saving_rnn_estimator._get_rnn_model_fn(target_column,problem_type,optimizer,num_unroll,num_units,num_rnn_layers,num_threads,queue_capacity,batch_size,sequence_feature_columns,context_feature_columns=None,predict_probabilities=False,learning_rate=None,gradient_clipping_norm=None,dropout_keep_probabilities=None,name='StateSavingRNNModel',seed=None)
tensorflow.contrib.estimators.state_saving_rnn_estimator._get_state_name(i)
tensorflow.contrib.estimators.state_saving_rnn_estimator._mask_multivalue(sequence_length,metric)
tensorflow.contrib.estimators.state_saving_rnn_estimator._multi_value_loss(activations,labels,sequence_length,target_column,features)
tensorflow.contrib.estimators.state_saving_rnn_estimator._prepare_features_for_sqss(features,labels,mode,sequence_feature_columns,context_feature_columns)
tensorflow.contrib.estimators.state_saving_rnn_estimator._prepare_inputs_for_rnn(sequence_features,context_features,sequence_feature_columns,num_unroll)
tensorflow.contrib.estimators.state_saving_rnn_estimator._read_batch(cell,features,labels,mode,num_unroll,num_rnn_layers,batch_size,sequence_feature_columns,context_feature_columns=None,num_threads=3,queue_capacity=1000,seed=None)
tensorflow.contrib.estimators.state_saving_rnn_estimator.construct_state_saving_rnn(cell,inputs,num_label_columns,state_saver,state_name,scope='rnn')
tensorflow.contrib.estimators.state_saving_rnn_estimator.lstm_cell(num_units,num_rnn_layers,dropout_keep_probabilities)
tensorflow.contrib.estimators.state_saving_rnn_estimator.multi_value_rnn_classifier(num_classes,num_units,num_unroll,batch_size,sequence_feature_columns,context_feature_columns=None,num_rnn_layers=1,optimizer_type='SGD',learning_rate=0.1,predict_probabilities=False,momentum=None,gradient_clipping_norm=5.0,dropout_keep_probabilities=None,model_dir=None,config=None,feature_engineering_fn=None,num_threads=3,queue_capacity=1000,seed=None)
tensorflow.contrib.estimators.state_saving_rnn_estimator.multi_value_rnn_regressor(num_units,num_unroll,batch_size,sequence_feature_columns,context_feature_columns=None,num_rnn_layers=1,optimizer_type='SGD',learning_rate=0.1,momentum=None,gradient_clipping_norm=5.0,dropout_keep_probabilities=None,model_dir=None,config=None,feature_engineering_fn=None,num_threads=3,queue_capacity=1000,seed=None)
tensorflow.contrib.estimators.state_saving_rnn_estimator.state_tuple_to_dict(state)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.StateSavingRnnEstimator(self,problem_type,num_units,num_unroll,batch_size,sequence_feature_columns,context_feature_columns=None,num_classes=None,num_rnn_layers=1,optimizer_type='SGD',learning_rate=0.1,predict_probabilities=False,momentum=None,gradient_clipping_norm=5.0,dropout_keep_probabilities=None,model_dir=None,config=None,feature_engineering_fn=None,num_threads=3,queue_capacity=1000,seed=None)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.StateSavingRnnEstimator.__init__(self,problem_type,num_units,num_unroll,batch_size,sequence_feature_columns,context_feature_columns=None,num_classes=None,num_rnn_layers=1,optimizer_type='SGD',learning_rate=0.1,predict_probabilities=False,momentum=None,gradient_clipping_norm=5.0,dropout_keep_probabilities=None,model_dir=None,config=None,feature_engineering_fn=None,num_threads=3,queue_capacity=1000,seed=None)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator._get_default_metrics(problem_type,sequence_length)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator._get_lstm_state_names(num_rnn_layers)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator._get_name_or_parent_names(column)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator._get_rnn_model_fn(target_column,problem_type,optimizer,num_unroll,num_units,num_rnn_layers,num_threads,queue_capacity,batch_size,sequence_feature_columns,context_feature_columns=None,predict_probabilities=False,learning_rate=None,gradient_clipping_norm=None,dropout_keep_probabilities=None,name='StateSavingRNNModel',seed=None)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator._get_state_name(i)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator._mask_multivalue(sequence_length,metric)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator._multi_value_loss(activations,labels,sequence_length,target_column,features)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator._prepare_features_for_sqss(features,labels,mode,sequence_feature_columns,context_feature_columns)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator._prepare_inputs_for_rnn(sequence_features,context_features,sequence_feature_columns,num_unroll)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator._read_batch(cell,features,labels,mode,num_unroll,num_rnn_layers,batch_size,sequence_feature_columns,context_feature_columns=None,num_threads=3,queue_capacity=1000,seed=None)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.construct_state_saving_rnn(cell,inputs,num_label_columns,state_saver,state_name,scope='rnn')
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.lstm_cell(num_units,num_rnn_layers,dropout_keep_probabilities)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.multi_value_rnn_classifier(num_classes,num_units,num_unroll,batch_size,sequence_feature_columns,context_feature_columns=None,num_rnn_layers=1,optimizer_type='SGD',learning_rate=0.1,predict_probabilities=False,momentum=None,gradient_clipping_norm=5.0,dropout_keep_probabilities=None,model_dir=None,config=None,feature_engineering_fn=None,num_threads=3,queue_capacity=1000,seed=None)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.multi_value_rnn_regressor(num_units,num_unroll,batch_size,sequence_feature_columns,context_feature_columns=None,num_rnn_layers=1,optimizer_type='SGD',learning_rate=0.1,momentum=None,gradient_clipping_norm=5.0,dropout_keep_probabilities=None,model_dir=None,config=None,feature_engineering_fn=None,num_threads=3,queue_capacity=1000,seed=None)
tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator.state_tuple_to_dict(state)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/test_data.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.test_data.quantiles->numpy.percentile(np.array(feature_values), [100 * (i + 1.0) / (num_buckets + 1.0) for i in range(num_buckets)])
A:tensorflow.contrib.learn.python.learn.estimators.test_data.iris->prepare_iris_data_for_logistic_regression()
A:tensorflow.contrib.learn.python.learn.estimators.test_data.ids->numpy.where((iris.target == 0) | (iris.target == 1))
tensorflow.contrib.estimators.test_data.get_quantile_based_buckets(feature_values,num_buckets)
tensorflow.contrib.estimators.test_data.iris_input_logistic_fn()
tensorflow.contrib.estimators.test_data.iris_input_multiclass_fn()
tensorflow.contrib.estimators.test_data.prepare_iris_data_for_logistic_regression()
tensorflow.contrib.learn.python.learn.estimators.test_data.get_quantile_based_buckets(feature_values,num_buckets)
tensorflow.contrib.learn.python.learn.estimators.test_data.iris_input_logistic_fn()
tensorflow.contrib.learn.python.learn.estimators.test_data.iris_input_multiclass_fn()
tensorflow.contrib.learn.python.learn.estimators.test_data.prepare_iris_data_for_logistic_regression()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/rnn_common.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.estimators.rnn_common.cell_type->_CELL_TYPES.get(cell_type)
A:tensorflow.contrib.learn.python.learn.estimators.rnn_common.cells->apply_dropout(cells, dropout_keep_probabilities)
A:tensorflow.contrib.learn.python.learn.estimators.rnn_common.activations_shape->tensorflow.python.ops.array_ops.shape(activations)
A:tensorflow.contrib.learn.python.learn.estimators.rnn_common.reshaped_activations->tensorflow.python.ops.array_ops.reshape(activations, [-1, num_label_columns])
A:tensorflow.contrib.learn.python.learn.estimators.rnn_common.last_activations->tensorflow.python.ops.array_ops.gather(reshaped_activations, indices)
A:tensorflow.contrib.learn.python.learn.estimators.rnn_common.labels_shape->tensorflow.python.ops.array_ops.shape(labels)
A:tensorflow.contrib.learn.python.learn.estimators.rnn_common.activations_masked->tensorflow.python.ops.array_ops.boolean_mask(activations, mask)
A:tensorflow.contrib.learn.python.learn.estimators.rnn_common.labels_masked->tensorflow.python.ops.array_ops.boolean_mask(labels, mask)
A:tensorflow.contrib.learn.python.learn.estimators.rnn_common.mask->tensorflow.python.ops.array_ops.sequence_mask(sequence_lengths, padded_length)
A:tensorflow.contrib.learn.python.learn.estimators.rnn_common.flattened_activations->tensorflow.python.ops.array_ops.reshape(activations, [-1, activations_shape[2]])
A:tensorflow.contrib.learn.python.learn.estimators.rnn_common.flat_probabilities->target_column.logits_to_predictions(flattened_activations, proba=True)
A:tensorflow.contrib.learn.python.learn.estimators.rnn_common.flat_predictions->target_column.logits_to_predictions(flattened_activations, proba=False)
A:tensorflow.contrib.learn.python.learn.estimators.rnn_common.probability_shape->tensorflow.python.ops.array_ops.concat([activations_shape[:2], [2]], 0)
A:tensorflow.contrib.learn.python.learn.estimators.rnn_common.probabilities->tensorflow.python.ops.array_ops.reshape(flat_probabilities, probability_shape, name=prediction_key.PredictionKey.PROBABILITIES)
A:tensorflow.contrib.learn.python.learn.estimators.rnn_common.predictions->tensorflow.python.ops.array_ops.reshape(flat_predictions, [activations_shape[0], activations_shape[1]], name=predictions_name)
tensorflow.contrib.estimators.rnn_common.RNNKeys(object)
tensorflow.contrib.estimators.rnn_common._get_single_cell(cell_type,num_units)
tensorflow.contrib.estimators.rnn_common.apply_dropout(cells,dropout_keep_probabilities,random_seed=None)
tensorflow.contrib.estimators.rnn_common.construct_rnn_cell(num_units,cell_type='basic_rnn',dropout_keep_probabilities=None)
tensorflow.contrib.estimators.rnn_common.mask_activations_and_labels(activations,labels,sequence_lengths)
tensorflow.contrib.estimators.rnn_common.multi_value_predictions(activations,target_column,problem_type,predict_probabilities)
tensorflow.contrib.estimators.rnn_common.select_last_activations(activations,sequence_lengths)
tensorflow.contrib.learn.python.learn.estimators.rnn_common.RNNKeys(object)
tensorflow.contrib.learn.python.learn.estimators.rnn_common._get_single_cell(cell_type,num_units)
tensorflow.contrib.learn.python.learn.estimators.rnn_common.apply_dropout(cells,dropout_keep_probabilities,random_seed=None)
tensorflow.contrib.learn.python.learn.estimators.rnn_common.construct_rnn_cell(num_units,cell_type='basic_rnn',dropout_keep_probabilities=None)
tensorflow.contrib.learn.python.learn.estimators.rnn_common.mask_activations_and_labels(activations,labels,sequence_lengths)
tensorflow.contrib.learn.python.learn.estimators.rnn_common.multi_value_predictions(activations,target_column,problem_type,predict_probabilities)
tensorflow.contrib.learn.python.learn.estimators.rnn_common.select_last_activations(activations,sequence_lengths)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/learn_io/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/learn_io/graph_io.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.(_, examples)->read_keyed_batch_examples(file_pattern=file_pattern, batch_size=batch_size, reader=reader, randomize_input=randomize_input, num_epochs=num_epochs, queue_capacity=queue_capacity, num_threads=num_threads, read_batch_size=read_batch_size, parse_fn=parse_fn, name=name, seed=seed)
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.file_names->_get_file_names(file_pattern, randomize_input)
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.(keys, examples_proto)->reader().read(file_name_queue)
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.mask->filter_fn(keys, examples_proto)
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.keys->tensorflow.python.ops.array_ops.boolean_mask(keys, mask)
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.examples_proto->tensorflow.python.ops.array_ops.boolean_mask(examples_proto, mask)
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.parsed_examples->parse_fn(examples_proto)
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.file_name_queue->tensorflow.python.training.input.string_input_producer(constant_op.constant(file_names, name='input'), shuffle=randomize_input, num_epochs=num_epochs, name=file_name_queue_scope, seed=seed)
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.enqueue_op->tensorflow.python.training.input.string_input_producer(constant_op.constant(file_names, name='input'), shuffle=randomize_input, num_epochs=num_epochs, name=file_name_queue_scope, seed=seed).enqueue(input_pipeline_ops.seek_next(file_names, shuffle=randomize_input, num_epochs=num_epochs, seed=seed))
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.example_list->_get_examples(file_name_queue, reader, num_threads, read_batch_size, filter_fn, parse_fn)
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.min_after_dequeue->max(queue_capacity - 3 * batch_size, batch_size)
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.queued_examples_with_keys->tensorflow.python.training.input.batch_join(example_list, batch_size, capacity=queue_capacity, enqueue_many=enqueue_many, name=scope, allow_smaller_final_batch=allow_smaller_final_batch)
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.queued_keys->tensorflow.python.training.input.batch_join(example_list, batch_size, capacity=queue_capacity, enqueue_many=enqueue_many, name=scope, allow_smaller_final_batch=allow_smaller_final_batch).pop(KEY_FEATURE_NAME)
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.(keys, examples)->_read_keyed_batch_examples_shared_queue(file_pattern, batch_size, reader, randomize_input=randomize_input, num_epochs=num_epochs, queue_capacity=queue_capacity, num_threads=reader_num_threads, read_batch_size=batch_size, parse_fn=parse_fn, name=scope)
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.feature_map->tensorflow.python.ops.parsing_ops.parse_example(examples, features)
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.args->list(parsed_features.values())
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.input_queue->tensorflow.python.ops.data_flow_ops.FIFOQueue(feature_queue_capacity, queue_dtypes)
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.dequeued_tensors->tensorflow.python.ops.data_flow_ops.FIFOQueue(feature_queue_capacity, queue_dtypes).dequeue()
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.dequeued_parsed_features[key]->tensorflow.python.framework.sparse_tensor.SparseTensor(dequeued_tensors[index], dequeued_tensors[index + 1], dequeued_tensors[index + 2])
A:tensorflow.contrib.learn.python.learn.learn_io.graph_io.(_, features)->read_keyed_batch_features(file_pattern, batch_size, features, reader, randomize_input=randomize_input, num_epochs=num_epochs, queue_capacity=queue_capacity, feature_queue_capacity=feature_queue_capacity, reader_num_threads=reader_num_threads, parse_fn=parse_fn, name=name)
tensorflow.contrib.io._read_keyed_batch_examples_shared_queue(file_pattern,batch_size,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,num_threads=1,read_batch_size=1,parse_fn=None,name=None,seed=None)
tensorflow.contrib.io._read_keyed_batch_features_shared_queue(file_pattern,batch_size,features,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,reader_num_threads=1,feature_queue_capacity=100,num_queue_runners=2,parse_fn=None,name=None)
tensorflow.contrib.io.graph_io._get_examples(file_name_queue,reader,num_threads,read_batch_size,filter_fn,parse_fn)
tensorflow.contrib.io.graph_io._get_file_names(file_pattern,randomize_input)
tensorflow.contrib.io.graph_io._read_keyed_batch_examples_helper(file_pattern,batch_size,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,num_threads=1,read_batch_size=1,filter_fn=None,parse_fn=None,setup_shared_queue=False,name=None,seed=None)
tensorflow.contrib.io.queue_parsed_features(parsed_features,keys=None,feature_queue_capacity=100,num_enqueue_threads=2,name=None)
tensorflow.contrib.io.read_batch_examples(file_pattern,batch_size,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,num_threads=1,read_batch_size=1,parse_fn=None,name=None,seed=None)
tensorflow.contrib.io.read_batch_features(file_pattern,batch_size,features,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,feature_queue_capacity=100,reader_num_threads=1,parse_fn=None,name=None)
tensorflow.contrib.io.read_batch_record_features(file_pattern,batch_size,features,randomize_input=True,num_epochs=None,queue_capacity=10000,reader_num_threads=1,name='dequeue_record_examples')
tensorflow.contrib.io.read_keyed_batch_examples(file_pattern,batch_size,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,num_threads=1,read_batch_size=1,parse_fn=None,name=None,seed=None)
tensorflow.contrib.io.read_keyed_batch_features(file_pattern,batch_size,features,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,reader_num_threads=1,feature_queue_capacity=100,num_enqueue_threads=2,parse_fn=None,name=None)
tensorflow.contrib.learn.python.learn.learn_io.graph_io._get_examples(file_name_queue,reader,num_threads,read_batch_size,filter_fn,parse_fn)
tensorflow.contrib.learn.python.learn.learn_io.graph_io._get_file_names(file_pattern,randomize_input)
tensorflow.contrib.learn.python.learn.learn_io.graph_io._read_keyed_batch_examples_helper(file_pattern,batch_size,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,num_threads=1,read_batch_size=1,filter_fn=None,parse_fn=None,setup_shared_queue=False,name=None,seed=None)
tensorflow.contrib.learn.python.learn.learn_io.graph_io._read_keyed_batch_examples_shared_queue(file_pattern,batch_size,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,num_threads=1,read_batch_size=1,parse_fn=None,name=None,seed=None)
tensorflow.contrib.learn.python.learn.learn_io.graph_io._read_keyed_batch_features_shared_queue(file_pattern,batch_size,features,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,reader_num_threads=1,feature_queue_capacity=100,num_queue_runners=2,parse_fn=None,name=None)
tensorflow.contrib.learn.python.learn.learn_io.graph_io.queue_parsed_features(parsed_features,keys=None,feature_queue_capacity=100,num_enqueue_threads=2,name=None)
tensorflow.contrib.learn.python.learn.learn_io.graph_io.read_batch_examples(file_pattern,batch_size,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,num_threads=1,read_batch_size=1,parse_fn=None,name=None,seed=None)
tensorflow.contrib.learn.python.learn.learn_io.graph_io.read_batch_features(file_pattern,batch_size,features,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,feature_queue_capacity=100,reader_num_threads=1,parse_fn=None,name=None)
tensorflow.contrib.learn.python.learn.learn_io.graph_io.read_batch_record_features(file_pattern,batch_size,features,randomize_input=True,num_epochs=None,queue_capacity=10000,reader_num_threads=1,name='dequeue_record_examples')
tensorflow.contrib.learn.python.learn.learn_io.graph_io.read_keyed_batch_examples(file_pattern,batch_size,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,num_threads=1,read_batch_size=1,parse_fn=None,name=None,seed=None)
tensorflow.contrib.learn.python.learn.learn_io.graph_io.read_keyed_batch_features(file_pattern,batch_size,features,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,reader_num_threads=1,feature_queue_capacity=100,num_enqueue_threads=2,parse_fn=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/learn_io/data_feeder.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.output_shape->dict([(k, out_el_shape(v, n_classes[k] if n_classes is not None and k in n_classes else None)) for (k, v) in list(y_shape.items())])
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.x->extract_pandas_matrix(x)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.y->numpy.array(y)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.(x, y)->_data_type_filter(x, y)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.x_first_el->six.next(x)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.chunk[k]->numpy.matrix(chunk[k])
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.n_batches->int(math.ceil(float(len(x)) / batch_size))
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.array->numpy.array(array, dtype=dtype, order=None, copy=False)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.(self.input_shape, self.output_shape, self._batch_size)->_get_in_out_shape(x_shape, y_shape, n_classes, batch_size)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.self.indices->numpy.array(range(num_samples))
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.self._epoch_placeholder->tensorflow.python.ops.array_ops.placeholder(dtypes.int32, [1], name='epoch')
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.placeholder[key]->tensorflow.python.ops.array_ops.placeholder(dtypes.as_dtype(dtype[key]), [None] + shape[key][1:], name=name_prepend + '_' + key)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.placeholder->tensorflow.python.ops.array_ops.placeholder(dtypes.as_dtype(dtype), [None] + shape[1:], name=name_prepend)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.self._input_placeholder->get_placeholder(self.input_shape, self._input_dtype, 'input')
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.self._output_placeholder->get_placeholder(self.output_shape, self._output_dtype, 'output')
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.out->out.flatten().flatten()
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.out[i]->_access(data, sample)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.end->min(x_len, self.offset + self._batch_size)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.self._x->itertools.chain([x_first_el], x)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.y_first_el->six.next(y)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.self._y->self._y.rename(columns={y.columns[0]: self._y_columns})
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.x_is_dict->isinstance(x_first_el, dict)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.x_first_el_shape->dict([(k, [1] + list(v.shape)) for (k, v) in list(x_first_el.items())])
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.y_first_el_shape->dict([(k, [1] + list(v.shape)) for (k, v) in list(y_first_el.items())])
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.self._input_dtype->_check_dtype(self._x.dtypes[0])
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.self._output_dtype->_check_dtype(self._y.dtypes[self._y_columns])
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.holder[k]->put_data_array(holder[k], index, data[k], num_classes)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.holder->put_data_array(holder, index, data, n_classes)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.inp->numpy.array(inp, dtype=self._input_dtype)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.next_inp->six.next(self._x)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.next_out->six.next(self._y)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.feed_dict->dict([(self._input_placeholder[k].name, inp[k]) for k in list(self._input_placeholder.keys())])
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.self._x_columns->list(x.columns)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.self._y_columns->list(y.columns)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.self.df->dask.dataframe.multi.concat([self._x, self._y], axis=1)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.sample->self.df.random_split([self.sample_fraction, 1 - self.sample_fraction], random_state=self.random_state)
A:tensorflow.contrib.learn.python.learn.learn_io.data_feeder.encoded_out->numpy.zeros((out.size, out_max + 1), dtype=self._output_dtype)
tensorflow.contrib.io.data_feeder.DaskDataFeeder(self,x,y,n_classes,batch_size,shuffle=True,random_state=None,epochs=None)
tensorflow.contrib.io.data_feeder.DaskDataFeeder.get_feed_dict_fn(self,input_placeholder,output_placeholder)
tensorflow.contrib.io.data_feeder.DaskDataFeeder.get_feed_params(self)
tensorflow.contrib.io.data_feeder.DataFeeder(self,x,y,n_classes,batch_size=None,shuffle=True,random_state=None,epochs=None)
tensorflow.contrib.io.data_feeder.DataFeeder.batch_size(self)
tensorflow.contrib.io.data_feeder.DataFeeder.get_feed_dict_fn(self)
tensorflow.contrib.io.data_feeder.DataFeeder.get_feed_params(self)
tensorflow.contrib.io.data_feeder.DataFeeder.input_builder(self)
tensorflow.contrib.io.data_feeder.DataFeeder.input_dtype(self)
tensorflow.contrib.io.data_feeder.DataFeeder.make_epoch_variable(self)
tensorflow.contrib.io.data_feeder.DataFeeder.output_dtype(self)
tensorflow.contrib.io.data_feeder.DataFeeder.set_placeholders(self,input_placeholder,output_placeholder)
tensorflow.contrib.io.data_feeder.DataFeeder.shuffle(self)
tensorflow.contrib.io.data_feeder.DataFeeder.x(self)
tensorflow.contrib.io.data_feeder.DataFeeder.y(self)
tensorflow.contrib.io.data_feeder.StreamingDataFeeder(self,x,y,n_classes,batch_size)
tensorflow.contrib.io.data_feeder.StreamingDataFeeder.get_feed_dict_fn(self)
tensorflow.contrib.io.data_feeder.StreamingDataFeeder.get_feed_params(self)
tensorflow.contrib.io.data_feeder._access(data,iloc)
tensorflow.contrib.io.data_feeder._batch_data(x,batch_size=None)
tensorflow.contrib.io.data_feeder._check_dtype(dtype)
tensorflow.contrib.io.data_feeder._data_type_filter(x,y)
tensorflow.contrib.io.data_feeder._get_in_out_shape(x_shape,y_shape,n_classes,batch_size=None)
tensorflow.contrib.io.data_feeder._is_iterable(x)
tensorflow.contrib.io.data_feeder.check_array(array,dtype)
tensorflow.contrib.io.data_feeder.setup_predict_data_feeder(x,batch_size=None)
tensorflow.contrib.io.data_feeder.setup_processor_data_feeder(x)
tensorflow.contrib.io.data_feeder.setup_train_data_feeder(x,y,n_classes,batch_size=None,shuffle=True,epochs=None)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DaskDataFeeder(self,x,y,n_classes,batch_size,shuffle=True,random_state=None,epochs=None)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DaskDataFeeder.__init__(self,x,y,n_classes,batch_size,shuffle=True,random_state=None,epochs=None)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DaskDataFeeder.get_feed_dict_fn(self,input_placeholder,output_placeholder)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DaskDataFeeder.get_feed_params(self)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DataFeeder(self,x,y,n_classes,batch_size=None,shuffle=True,random_state=None,epochs=None)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DataFeeder.__init__(self,x,y,n_classes,batch_size=None,shuffle=True,random_state=None,epochs=None)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DataFeeder.batch_size(self)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DataFeeder.get_feed_dict_fn(self)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DataFeeder.get_feed_params(self)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DataFeeder.input_builder(self)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DataFeeder.input_dtype(self)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DataFeeder.make_epoch_variable(self)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DataFeeder.output_dtype(self)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DataFeeder.set_placeholders(self,input_placeholder,output_placeholder)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DataFeeder.shuffle(self)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DataFeeder.x(self)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.DataFeeder.y(self)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.StreamingDataFeeder(self,x,y,n_classes,batch_size)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.StreamingDataFeeder.__init__(self,x,y,n_classes,batch_size)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.StreamingDataFeeder.get_feed_dict_fn(self)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.StreamingDataFeeder.get_feed_params(self)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder._access(data,iloc)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder._batch_data(x,batch_size=None)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder._check_dtype(dtype)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder._data_type_filter(x,y)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder._get_in_out_shape(x_shape,y_shape,n_classes,batch_size=None)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder._is_iterable(x)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.check_array(array,dtype)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.setup_predict_data_feeder(x,batch_size=None)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.setup_processor_data_feeder(x)
tensorflow.contrib.learn.python.learn.learn_io.data_feeder.setup_train_data_feeder(x,y,n_classes,batch_size=None,shuffle=True,epochs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/learn_io/dask_io.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.learn_io.dask_io.df->df.copy().copy()
A:tensorflow.contrib.learn.python.learn.learn_io.dask_io.lengths->df.copy().copy().map_partitions(len).compute()
A:tensorflow.contrib.learn.python.learn.learn_io.dask_io.divisions->_get_divisions(df)
tensorflow.contrib.io.dask_io._add_to_index(df,start)
tensorflow.contrib.io.extract_dask_data(data)
tensorflow.contrib.io.extract_dask_labels(labels)
tensorflow.contrib.learn.io.dask_io._construct_dask_df_with_divisions(df)
tensorflow.contrib.learn.io.dask_io._get_divisions(df)
tensorflow.contrib.learn.python.learn.learn_io.dask_io._add_to_index(df,start)
tensorflow.contrib.learn.python.learn.learn_io.dask_io._construct_dask_df_with_divisions(df)
tensorflow.contrib.learn.python.learn.learn_io.dask_io._get_divisions(df)
tensorflow.contrib.learn.python.learn.learn_io.dask_io.extract_dask_data(data)
tensorflow.contrib.learn.python.learn.learn_io.dask_io.extract_dask_labels(labels)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/learn_io/numpy_io.py----------------------------------------
tensorflow.contrib.io.numpy_input_fn(x,y=None,batch_size=128,num_epochs=1,shuffle=True,queue_capacity=1000,num_threads=1)
tensorflow.contrib.learn.python.learn.learn_io.numpy_io.numpy_input_fn(x,y=None,batch_size=128,num_epochs=1,shuffle=True,queue_capacity=1000,num_threads=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/learn_io/pandas_io.py----------------------------------------
tensorflow.contrib.io.extract_pandas_data(data)
tensorflow.contrib.io.extract_pandas_labels(labels)
tensorflow.contrib.io.extract_pandas_matrix(data)
tensorflow.contrib.io.pandas_input_fn(x,y=None,batch_size=128,num_epochs=1,shuffle=True,queue_capacity=1000,num_threads=1,target_column='target')
tensorflow.contrib.learn.python.learn.learn_io.pandas_io.extract_pandas_data(data)
tensorflow.contrib.learn.python.learn.learn_io.pandas_io.extract_pandas_labels(labels)
tensorflow.contrib.learn.python.learn.learn_io.pandas_io.extract_pandas_matrix(data)
tensorflow.contrib.learn.python.learn.learn_io.pandas_io.pandas_input_fn(x,y=None,batch_size=128,num_epochs=1,shuffle=True,queue_capacity=1000,num_threads=1,target_column='target')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/ops/losses_ops.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.ops.losses_ops.predictions->tensorflow.python.ops.array_ops.squeeze(predictions, squeeze_dims=[1])
A:tensorflow.contrib.learn.python.learn.ops.losses_ops.logits->tensorflow.python.ops.math_ops.multiply(logits, class_weight)
tensorflow.contrib.learn.python.learn.ops.losses_ops.mean_squared_error_regressor(tensor_in,labels,weights,biases,name=None)
tensorflow.contrib.learn.python.learn.ops.losses_ops.softmax_classifier(tensor_in,labels,weights,biases,class_weight=None,name=None)
tensorflow.contrib.ops.mean_squared_error_regressor(tensor_in,labels,weights,biases,name=None)
tensorflow.contrib.ops.softmax_classifier(tensor_in,labels,weights,biases,class_weight=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/ops/embeddings_ops.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.ops.embeddings_ops.params->tensorflow.python.framework.ops.convert_to_tensor(params)
A:tensorflow.contrib.learn.python.learn.ops.embeddings_ops.ids->tensorflow.python.framework.ops.convert_to_tensor(ids)
A:tensorflow.contrib.learn.python.learn.ops.embeddings_ops.shape->tensorflow.python.ops.array_ops.shape(ids)
A:tensorflow.contrib.learn.python.learn.ops.embeddings_ops.ids_flat->tensorflow.python.ops.array_ops.reshape(ids, math_ops.reduce_prod(shape, keep_dims=True))
A:tensorflow.contrib.learn.python.learn.ops.embeddings_ops.embeds_flat->tensorflow.python.ops.nn.embedding_lookup(params, ids_flat, name)
A:tensorflow.contrib.learn.python.learn.ops.embeddings_ops.embed_shape->tensorflow.python.ops.array_ops.concat([shape, [-1]], 0)
A:tensorflow.contrib.learn.python.learn.ops.embeddings_ops.embeds->tensorflow.python.ops.array_ops.reshape(embeds_flat, embed_shape)
A:tensorflow.contrib.learn.python.learn.ops.embeddings_ops.embeddings->tensorflow.python.ops.variable_scope.get_variable(name + '_embeddings', [n_classes, embedding_size])
tensorflow.contrib.learn.python.learn.ops.embeddings_ops.categorical_variable(tensor_in,n_classes,embedding_size,name)
tensorflow.contrib.learn.python.learn.ops.embeddings_ops.embedding_lookup(params,ids,name='embedding_lookup')
tensorflow.contrib.ops.categorical_variable(tensor_in,n_classes,embedding_size,name)
tensorflow.contrib.ops.embedding_lookup(params,ids,name='embedding_lookup')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/ops/seq2seq_ops.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.ops.seq2seq_ops.xent->tensorflow.python.ops.math_ops.add_n(xent_list, name='sequence_loss/xent')
A:tensorflow.contrib.learn.python.learn.ops.seq2seq_ops.loss->tensorflow.python.ops.math_ops.reduce_sum(xent, name='sequence_loss')
A:tensorflow.contrib.learn.python.learn.ops.seq2seq_ops.in_x->tensorflow.python.ops.array_ops.unstack(x, axis=1)
A:tensorflow.contrib.learn.python.learn.ops.seq2seq_ops.y->tensorflow.python.ops.array_ops.unstack(y, axis=1)
A:tensorflow.contrib.learn.python.learn.ops.seq2seq_ops.sentinel_shape->tensorflow.python.ops.array_ops.stack([array_ops.shape(x)[0], y[0].get_shape()[1]])
A:tensorflow.contrib.learn.python.learn.ops.seq2seq_ops.sentinel->tensorflow.python.ops.array_ops.zeros(sentinel_shape)
A:tensorflow.contrib.learn.python.learn.ops.seq2seq_ops.(output, new_state)->cell(inp, states[-1])
A:tensorflow.contrib.learn.python.learn.ops.seq2seq_ops.(sampling_output, sampling_state)->cell(sampling_outputs[-1], sampling_states[-1])
A:tensorflow.contrib.learn.python.learn.ops.seq2seq_ops.(_, last_enc_state)->tensorflow.contrib.rnn.static_rnn(encoder_cell, encoder_inputs, dtype=dtype)
tensorflow.contrib.learn.python.learn.ops.seq2seq_ops.rnn_decoder(decoder_inputs,initial_state,cell,scope=None)
tensorflow.contrib.learn.python.learn.ops.seq2seq_ops.rnn_seq2seq(encoder_inputs,decoder_inputs,encoder_cell,decoder_cell=None,dtype=dtypes.float32,scope=None)
tensorflow.contrib.learn.python.learn.ops.seq2seq_ops.seq2seq_inputs(x,y,input_length,output_length,sentinel=None,name=None)
tensorflow.contrib.learn.python.learn.ops.seq2seq_ops.sequence_classifier(decoding,labels,sampling_decoding=None,name=None)
tensorflow.contrib.ops.rnn_decoder(decoder_inputs,initial_state,cell,scope=None)
tensorflow.contrib.ops.rnn_seq2seq(encoder_inputs,decoder_inputs,encoder_cell,decoder_cell=None,dtype=dtypes.float32,scope=None)
tensorflow.contrib.ops.seq2seq_inputs(x,y,input_length,output_length,sentinel=None,name=None)
tensorflow.contrib.ops.sequence_classifier(decoding,labels,sampling_decoding=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/utils/input_fn_utils.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.utils.input_fn_utils.serialized_tf_example->tensorflow.python.ops.array_ops.placeholder(dtype=dtypes.string, shape=[default_batch_size], name='input_example_tensor')
A:tensorflow.contrib.learn.python.learn.utils.input_fn_utils.features->tensorflow.python.ops.parsing_ops.parse_example(serialized_tf_example, feature_spec)
A:tensorflow.contrib.learn.python.learn.utils.input_fn_utils.shape_list->t.get_shape().as_list()
A:tensorflow.contrib.learn.python.learn.utils.input_fn_utils.shape->tensorflow.python.framework.tensor_shape.TensorShape(shape_list)
A:tensorflow.contrib.learn.python.learn.utils.input_fn_utils.features_placeholders[name]->tensorflow.python.ops.array_ops.placeholder(dtype=t.dtype, shape=shape, name=t.name)
tensorflow.contrib.learn.python.learn.utils.input_fn_utils.InputFnOps(collections.namedtuple('InputFnOps',['features','labels','default_inputs']))
tensorflow.contrib.learn.python.learn.utils.input_fn_utils.build_default_serving_input_fn(features,default_batch_size=None)
tensorflow.contrib.learn.python.learn.utils.input_fn_utils.build_parsing_serving_input_fn(feature_spec,default_batch_size=None)
tensorflow.contrib.utils.InputFnOps(collections.namedtuple('InputFnOps',['features','labels','default_inputs']))
tensorflow.contrib.utils.build_default_serving_input_fn(features,default_batch_size=None)
tensorflow.contrib.utils.build_parsing_serving_input_fn(feature_spec,default_batch_size=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/utils/inspect_checkpoint.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.utils.inspect_checkpoint.variables->tensorflow.contrib.framework.python.framework.checkpoint_utils.list_variables(file_name)
A:tensorflow.contrib.learn.python.learn.utils.inspect_checkpoint.parser->argparse.ArgumentParser()
A:tensorflow.contrib.learn.python.learn.utils.inspect_checkpoint.(FLAGS, unparsed)->argparse.ArgumentParser().parse_known_args()
tensorflow.contrib.learn.python.learn.utils.inspect_checkpoint.main(unused_argv)
tensorflow.contrib.learn.python.learn.utils.inspect_checkpoint.print_tensors_in_checkpoint_file(file_name,tensor_name)
tensorflow.contrib.utils.inspect_checkpoint.main(unused_argv)
tensorflow.contrib.utils.inspect_checkpoint.print_tensors_in_checkpoint_file(file_name,tensor_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/utils/saved_model_export_utils.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.((_, examples),)->input_tensors.items()
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.classes->_get_classification_classes(output_tensors)
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.scores->_get_classification_scores(output_tensors)
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.((_, classes),)->output_tensors.items()
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.((_, predictions),)->output_tensors.items()
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.((actual_default_output_alternative_key, _),)->output_alternatives.items()
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.default_inputs->input_alternatives.get(DEFAULT_INPUT_ALTERNATIVE_KEY)
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.signature_def_map[signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]->build_standardized_signature_def(default_inputs, default_outputs, default_problem_type)
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.export_timestamp->int(time.time())
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.export_dir->os.path.join(compat.as_bytes(export_dir_base), compat.as_bytes(str(export_timestamp)))
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.filename->os.path.basename(path.path)
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.select_filter->tensorflow.contrib.learn.python.learn.utils.gc.largest_export_versions(1)
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.results->select_filter(gc.get_paths(export_dir_base, parser=_export_version_parser))
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.keep_filter->tensorflow.contrib.learn.python.learn.utils.gc.largest_export_versions(exports_to_keep)
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.delete_filter->tensorflow.contrib.learn.python.learn.utils.gc.negation(keep_filter)
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.export_result->estimator.export_savedmodel(export_dir_base, serving_input_fn, default_output_alternative_key=default_output_alternative_key, assets_extra=assets_extra, as_text=as_text, checkpoint_path=checkpoint_path)
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.feature_spec->tensorflow.contrib.layers.python.layers.feature_column.create_feature_spec_for_parsing(feature_columns)
A:tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.serving_input_fn->tensorflow.contrib.learn.python.learn.utils.input_fn_utils.build_parsing_serving_input_fn(feature_spec)
tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils._export_version_parser(path)
tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils._get_classification_classes(output_tensors)
tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils._get_classification_scores(output_tensors)
tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils._is_classification_problem(problem_type,input_tensors,output_tensors)
tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils._is_regression_problem(problem_type,input_tensors,output_tensors)
tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.build_all_signature_defs(input_alternatives,output_alternatives,actual_default_output_alternative_key)
tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.build_standardized_signature_def(input_tensors,output_tensors,problem_type)
tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.garbage_collect_exports(export_dir_base,exports_to_keep)
tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.get_input_alternatives(input_ops)
tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.get_most_recent_export(export_dir_base)
tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.get_output_alternatives(model_fn_ops,default_output_alternative_key=None)
tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.get_timestamped_export_dir(export_dir_base)
tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.make_export_strategy(serving_input_fn,default_output_alternative_key=None,assets_extra=None,as_text=False,exports_to_keep=5)
tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils.make_parsing_export_strategy(feature_columns,exports_to_keep=5)
tensorflow.contrib.utils.make_export_strategy(serving_input_fn,default_output_alternative_key=None,assets_extra=None,as_text=False,exports_to_keep=5)
tensorflow.contrib.utils.saved_model_export_utils._export_version_parser(path)
tensorflow.contrib.utils.saved_model_export_utils._get_classification_classes(output_tensors)
tensorflow.contrib.utils.saved_model_export_utils._get_classification_scores(output_tensors)
tensorflow.contrib.utils.saved_model_export_utils._is_classification_problem(problem_type,input_tensors,output_tensors)
tensorflow.contrib.utils.saved_model_export_utils._is_regression_problem(problem_type,input_tensors,output_tensors)
tensorflow.contrib.utils.saved_model_export_utils.build_all_signature_defs(input_alternatives,output_alternatives,actual_default_output_alternative_key)
tensorflow.contrib.utils.saved_model_export_utils.build_standardized_signature_def(input_tensors,output_tensors,problem_type)
tensorflow.contrib.utils.saved_model_export_utils.garbage_collect_exports(export_dir_base,exports_to_keep)
tensorflow.contrib.utils.saved_model_export_utils.get_input_alternatives(input_ops)
tensorflow.contrib.utils.saved_model_export_utils.get_most_recent_export(export_dir_base)
tensorflow.contrib.utils.saved_model_export_utils.get_output_alternatives(model_fn_ops,default_output_alternative_key=None)
tensorflow.contrib.utils.saved_model_export_utils.get_timestamped_export_dir(export_dir_base)
tensorflow.contrib.utils.saved_model_export_utils.make_parsing_export_strategy(feature_columns,exports_to_keep=5)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/utils/gc.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.utils.gc.Path->collections.namedtuple('Path', 'path export_version')
A:tensorflow.contrib.learn.python.learn.utils.gc.existing->keeper_map.get(interval, None)
A:tensorflow.contrib.learn.python.learn.utils.gc.l->set(paths)
A:tensorflow.contrib.learn.python.learn.utils.gc.r->set(f(paths))
A:tensorflow.contrib.learn.python.learn.utils.gc.raw_paths->tensorflow.python.platform.gfile.ListDirectory(base_dir)
A:tensorflow.contrib.learn.python.learn.utils.gc.p->parser(Path(os.path.join(base_dir, r), None))
tensorflow.contrib.learn.python.learn.utils.gc.get_paths(base_dir,parser)
tensorflow.contrib.learn.python.learn.utils.gc.largest_export_versions(n)
tensorflow.contrib.learn.python.learn.utils.gc.mod_export_version(n)
tensorflow.contrib.learn.python.learn.utils.gc.negation(f)
tensorflow.contrib.learn.python.learn.utils.gc.one_of_every_n_export_versions(n)
tensorflow.contrib.learn.python.learn.utils.gc.union(lf,rf)
tensorflow.contrib.utils.gc.get_paths(base_dir,parser)
tensorflow.contrib.utils.gc.largest_export_versions(n)
tensorflow.contrib.utils.gc.mod_export_version(n)
tensorflow.contrib.utils.gc.negation(f)
tensorflow.contrib.utils.gc.one_of_every_n_export_versions(n)
tensorflow.contrib.utils.gc.union(lf,rf)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/utils/export.py----------------------------------------
A:tensorflow.contrib.learn.python.learn.utils.export.elements->tensorflow.python.framework.ops.get_collection(collection_name)
A:tensorflow.contrib.learn.python.learn.utils.export.saver->tensorflow.python.training.saver.Saver()
A:tensorflow.contrib.learn.python.learn.utils.export.export->tensorflow.contrib.session_bundle.exporter.Exporter(saver)
A:tensorflow.contrib.learn.python.learn.utils.export.default_signature->tensorflow.contrib.session_bundle.exporter.regression_signature(input_tensor=examples, output_tensor=positive_predictions)
A:tensorflow.contrib.learn.python.learn.utils.export.predictions_shape->predictions_tensor.get_shape()
A:tensorflow.contrib.learn.python.learn.utils.export.predictions_rank->len(predictions_shape)
A:tensorflow.contrib.learn.python.learn.utils.export.examples->input_fn(estimator, examples).pop(input_feature_key)
A:tensorflow.contrib.learn.python.learn.utils.export.features->input_fn(estimator, examples)
A:tensorflow.contrib.learn.python.learn.utils.export.(features, _)->input_fn()
A:tensorflow.contrib.learn.python.learn.utils.export.(default_signature, named_graph_signatures)->generic_signature_fn(examples, features, predictions)
A:tensorflow.contrib.learn.python.learn.utils.export.signature_fn->estimator._create_signature_fn()
A:tensorflow.contrib.learn.python.learn.utils.export.exports_to_keep->tensorflow.contrib.session_bundle.gc.largest_export_versions(exports_to_keep)
tensorflow.contrib.learn.python.learn.utils.export._default_input_fn(estimator,examples)
tensorflow.contrib.learn.python.learn.utils.export._export_estimator(estimator,export_dir,signature_fn,input_fn,default_batch_size,exports_to_keep,input_feature_key=None,use_deprecated_input_fn=True,prediction_key=None,checkpoint_path=None)
tensorflow.contrib.learn.python.learn.utils.export._export_graph(graph,saver,checkpoint_path,export_dir,default_graph_signature,named_graph_signatures,exports_to_keep)
tensorflow.contrib.learn.python.learn.utils.export._get_first_op_from_collection(collection_name)
tensorflow.contrib.learn.python.learn.utils.export._get_saver()
tensorflow.contrib.learn.python.learn.utils.export.classification_signature_fn(examples,unused_features,predictions)
tensorflow.contrib.learn.python.learn.utils.export.classification_signature_fn_with_prob(examples,unused_features,predictions)
tensorflow.contrib.learn.python.learn.utils.export.export_estimator(estimator,export_dir,signature_fn=None,input_fn=_default_input_fn,default_batch_size=1,exports_to_keep=None)
tensorflow.contrib.learn.python.learn.utils.export.generic_signature_fn(examples,unused_features,predictions)
tensorflow.contrib.learn.python.learn.utils.export.logistic_regression_signature_fn(examples,unused_features,predictions)
tensorflow.contrib.learn.python.learn.utils.export.regression_signature_fn(examples,unused_features,predictions)
tensorflow.contrib.utils.export._default_input_fn(estimator,examples)
tensorflow.contrib.utils.export._export_estimator(estimator,export_dir,signature_fn,input_fn,default_batch_size,exports_to_keep,input_feature_key=None,use_deprecated_input_fn=True,prediction_key=None,checkpoint_path=None)
tensorflow.contrib.utils.export._export_graph(graph,saver,checkpoint_path,export_dir,default_graph_signature,named_graph_signatures,exports_to_keep)
tensorflow.contrib.utils.export._get_first_op_from_collection(collection_name)
tensorflow.contrib.utils.export._get_saver()
tensorflow.contrib.utils.export.classification_signature_fn(examples,unused_features,predictions)
tensorflow.contrib.utils.export.classification_signature_fn_with_prob(examples,unused_features,predictions)
tensorflow.contrib.utils.export.generic_signature_fn(examples,unused_features,predictions)
tensorflow.contrib.utils.export.logistic_regression_signature_fn(examples,unused_features,predictions)
tensorflow.contrib.utils.export.regression_signature_fn(examples,unused_features,predictions)
tensorflow.contrib.utils.export_estimator(estimator,export_dir,signature_fn=None,input_fn=_default_input_fn,default_batch_size=1,exports_to_keep=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/losses/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/losses/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/losses/python/losses/__init__.py----------------------------------------
A:tensorflow.contrib.losses.python.losses.__init__.__all__->make_all(__name__)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/losses/python/losses/loss_ops.py----------------------------------------
A:tensorflow.contrib.losses.python.losses.loss_ops.start_index->max(0, weights.get_shape().ndims)
A:tensorflow.contrib.losses.python.losses.loss_ops.reduction_indices->list(range(1, diffs.get_shape().ndims))
A:tensorflow.contrib.losses.python.losses.loss_ops.reduced_losses->tensorflow.python.ops.math_ops.multiply(reduced_losses, weights)
A:tensorflow.contrib.losses.python.losses.loss_ops.total_loss->_scale_losses(losses, weights)
A:tensorflow.contrib.losses.python.losses.loss_ops.losses->tensorflow.python.ops.math_ops.square(math_ops.subtract(predictions, labels))
A:tensorflow.contrib.losses.python.losses.loss_ops.weights->tensorflow.python.ops.math_ops.to_float(ops.convert_to_tensor(weights))
A:tensorflow.contrib.losses.python.losses.loss_ops.weights_shape->tensorflow.python.ops.math_ops.to_float(ops.convert_to_tensor(weights)).get_shape()
A:tensorflow.contrib.losses.python.losses.loss_ops.num_present->_num_present(losses, weights)
A:tensorflow.contrib.losses.python.losses.loss_ops.mean_loss->tensorflow.python.ops.array_ops.where(math_ops.reduce_sum(num_present_per_batch) > 0, loss, array_ops.zeros_like(loss), name='value')
A:tensorflow.contrib.losses.python.losses.loss_ops.batch_size->tensorflow.python.ops.array_ops.reshape(array_ops.slice(array_ops.shape(losses), [0], [1]), [])
A:tensorflow.contrib.losses.python.losses.loss_ops.num_per_batch->tensorflow.python.ops.math_ops.multiply(num_nonzero_per_batch, num_to_broadcast)
A:tensorflow.contrib.losses.python.losses.loss_ops.num_nonzero_per_batch->tensorflow.python.ops.math_ops.reduce_sum(math_ops.to_float(math_ops.not_equal(weights, 0)), reduction_indices=reduction_indices)
A:tensorflow.contrib.losses.python.losses.loss_ops.broadcast_dims->tensorflow.python.ops.array_ops.slice(array_ops.shape(losses), [weights.get_shape().ndims], [-1])
A:tensorflow.contrib.losses.python.losses.loss_ops.num_to_broadcast->tensorflow.python.ops.math_ops.to_float(math_ops.reduce_prod(broadcast_dims))
A:tensorflow.contrib.losses.python.losses.loss_ops.predictions->tensorflow.python.ops.math_ops.to_float(predictions)
A:tensorflow.contrib.losses.python.losses.loss_ops.labels->tensorflow.python.ops.math_ops.to_float(labels)
A:tensorflow.contrib.losses.python.losses.loss_ops.multi_class_labels->tensorflow.python.ops.math_ops.cast(multi_class_labels, logits.dtype)
A:tensorflow.contrib.losses.python.losses.loss_ops.onehot_labels->tensorflow.python.ops.math_ops.cast(onehot_labels, logits.dtype)
A:tensorflow.contrib.losses.python.losses.loss_ops.num_classes->tensorflow.python.ops.math_ops.cast(array_ops.shape(onehot_labels)[1], logits.dtype)
A:tensorflow.contrib.losses.python.losses.loss_ops.all_ones->tensorflow.python.ops.array_ops.ones_like(labels)
A:tensorflow.contrib.losses.python.losses.loss_ops.diffs->tensorflow.python.ops.math_ops.subtract(predictions, labels)
A:tensorflow.contrib.losses.python.losses.loss_ops.sum_squares_diff_per_batch->tensorflow.python.ops.math_ops.reduce_sum(math_ops.square(diffs), reduction_indices=reduction_indices)
A:tensorflow.contrib.losses.python.losses.loss_ops.num_present_per_batch->_num_present(diffs, weights, per_batch=True)
A:tensorflow.contrib.losses.python.losses.loss_ops.sum_diff->tensorflow.python.ops.math_ops.reduce_sum(diffs, reduction_indices=reduction_indices)
A:tensorflow.contrib.losses.python.losses.loss_ops.loss->_scale_losses(term1 - term2, weights)
A:tensorflow.contrib.losses.python.losses.loss_ops.radial_diffs->tensorflow.python.ops.math_ops.multiply(predictions, labels)
tensorflow.contrib.losses._num_present(losses,weights,per_batch=False)
tensorflow.contrib.losses._safe_div(numerator,denominator,name='value')
tensorflow.contrib.losses._safe_mean(losses,num_present)
tensorflow.contrib.losses._scale_losses(losses,weights)
tensorflow.contrib.losses.absolute_difference(predictions,labels=None,weights=1.0,scope=None)
tensorflow.contrib.losses.add_loss(loss,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.contrib.losses.compute_weighted_loss(losses,weights=1.0,scope=None)
tensorflow.contrib.losses.cosine_distance(predictions,labels=None,dim=None,weights=1.0,scope=None)
tensorflow.contrib.losses.get_losses(scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.contrib.losses.get_regularization_losses(scope=None)
tensorflow.contrib.losses.get_total_loss(add_regularization_losses=True,name='total_loss')
tensorflow.contrib.losses.hinge_loss(logits,labels=None,scope=None)
tensorflow.contrib.losses.log_loss(predictions,labels=None,weights=1.0,epsilon=1e-07,scope=None)
tensorflow.contrib.losses.mean_pairwise_squared_error(predictions,labels=None,weights=1.0,scope=None)
tensorflow.contrib.losses.mean_squared_error(predictions,labels=None,weights=1.0,scope=None)
tensorflow.contrib.losses.python.losses.loss_ops._num_present(losses,weights,per_batch=False)
tensorflow.contrib.losses.python.losses.loss_ops._safe_div(numerator,denominator,name='value')
tensorflow.contrib.losses.python.losses.loss_ops._safe_mean(losses,num_present)
tensorflow.contrib.losses.python.losses.loss_ops._scale_losses(losses,weights)
tensorflow.contrib.losses.python.losses.loss_ops.absolute_difference(predictions,labels=None,weights=1.0,scope=None)
tensorflow.contrib.losses.python.losses.loss_ops.add_loss(loss,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.contrib.losses.python.losses.loss_ops.compute_weighted_loss(losses,weights=1.0,scope=None)
tensorflow.contrib.losses.python.losses.loss_ops.cosine_distance(predictions,labels=None,dim=None,weights=1.0,scope=None)
tensorflow.contrib.losses.python.losses.loss_ops.get_losses(scope=None,loss_collection=ops.GraphKeys.LOSSES)
tensorflow.contrib.losses.python.losses.loss_ops.get_regularization_losses(scope=None)
tensorflow.contrib.losses.python.losses.loss_ops.get_total_loss(add_regularization_losses=True,name='total_loss')
tensorflow.contrib.losses.python.losses.loss_ops.hinge_loss(logits,labels=None,scope=None)
tensorflow.contrib.losses.python.losses.loss_ops.log_loss(predictions,labels=None,weights=1.0,epsilon=1e-07,scope=None)
tensorflow.contrib.losses.python.losses.loss_ops.mean_pairwise_squared_error(predictions,labels=None,weights=1.0,scope=None)
tensorflow.contrib.losses.python.losses.loss_ops.mean_squared_error(predictions,labels=None,weights=1.0,scope=None)
tensorflow.contrib.losses.python.losses.loss_ops.sigmoid_cross_entropy(logits,multi_class_labels,weights=1.0,label_smoothing=0,scope=None)
tensorflow.contrib.losses.python.losses.loss_ops.softmax_cross_entropy(logits,onehot_labels,weights=1.0,label_smoothing=0,scope=None)
tensorflow.contrib.losses.python.losses.loss_ops.sparse_softmax_cross_entropy(logits,labels,weights=1.0,scope=None)
tensorflow.contrib.losses.sigmoid_cross_entropy(logits,multi_class_labels,weights=1.0,label_smoothing=0,scope=None)
tensorflow.contrib.losses.softmax_cross_entropy(logits,onehot_labels,weights=1.0,label_smoothing=0,scope=None)
tensorflow.contrib.losses.sparse_softmax_cross_entropy(logits,labels,weights=1.0,scope=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/cudnn_rnn/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/cudnn_rnn/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/cudnn_rnn/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/cudnn_rnn/python/ops/cudnn_rnn_ops.py----------------------------------------
A:tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops._cudnn_rnn_ops_so->tensorflow.contrib.util.loader.load_op_library(resource_loader.get_path_to_datafile('_cudnn_rnn_ops.so'))
A:tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.(weights, biases)->tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops.cudnn_rnn_params_to_canonical(num_layers=self._num_layers, num_units=self._num_units, input_size=self._input_size, params=params, num_params=self._num_layers * self._NUM_PARAMS_PER_LAYER, rnn_mode=self._rnn_mode, input_mode=self._input_mode, direction=self._direction)
A:tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.params->self._canonical_to_params(weights, biases)
A:tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.input_c->tensorflow.python.ops.array_ops.constant([], dtype=dtypes.float32)
A:tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.(output, output_h, output_c, _)->tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops.cudnn_rnn(input=input_data, input_h=input_h, input_c=input_c, params=params, rnn_mode=self._rnn_mode, input_mode=self._input_mode, direction=self._direction, dropout=self._dropout, seed=self._seed, seed2=self._seed2, is_training=is_training)
A:tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.(output, output_h, output_c)->super(CudnnLSTM, self).__call__(input_data, input_h, input_c, params, is_training)
A:tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.(output, output_h, _)->super(_CudnnRNNNoInputC, self).__call__(input_data, input_h, None, params, is_training=True)
tensorflow.contrib.cudnn_rnn.CudnnGRU(_CudnnRNNNoInputC)
tensorflow.contrib.cudnn_rnn.CudnnLSTM(self,num_layers,num_units,input_size,input_mode='auto_select',direction='unidirectional',dropout=0.0,seed=0,seed2=0)
tensorflow.contrib.cudnn_rnn.CudnnRNNRelu(_CudnnRNNNoInputC)
tensorflow.contrib.cudnn_rnn.CudnnRNNTanh(_CudnnRNNNoInputC)
tensorflow.contrib.cudnn_rnn.RNNParamsSaveable(self,params_to_canonical,canonical_to_params,name='params_canonical',*param_variables)
tensorflow.contrib.cudnn_rnn.RNNParamsSaveable.restore(self,restored_tensors,restored_shapes)
tensorflow.contrib.cudnn_rnn.ops.cudnn_rnn_ops._CudnnRNN(self,rnn_mode,num_layers,num_units,input_size,input_mode='auto_select',direction='unidirectional',dropout=0.0,seed=0,seed2=0)
tensorflow.contrib.cudnn_rnn.ops.cudnn_rnn_ops._CudnnRNN.canonical_to_params(self,weights,biases)
tensorflow.contrib.cudnn_rnn.ops.cudnn_rnn_ops._CudnnRNN.params_size(self)
tensorflow.contrib.cudnn_rnn.ops.cudnn_rnn_ops._CudnnRNN.params_to_canonical(self,params)
tensorflow.contrib.cudnn_rnn.ops.cudnn_rnn_ops._CudnnRNNNoInputC(self,num_layers,num_units,input_size,input_mode='auto_select',direction='unidirectional',dropout=0.0,seed=0,seed2=0)
tensorflow.contrib.cudnn_rnn.ops.cudnn_rnn_ops._cudnn_rnn_backward(op,*grad)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnGRU(_CudnnRNNNoInputC)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnLSTM(self,num_layers,num_units,input_size,input_mode='auto_select',direction='unidirectional',dropout=0.0,seed=0,seed2=0)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnLSTM.__init__(self,num_layers,num_units,input_size,input_mode='auto_select',direction='unidirectional',dropout=0.0,seed=0,seed2=0)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnRNNRelu(_CudnnRNNNoInputC)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnRNNTanh(_CudnnRNNNoInputC)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.RNNParamsSaveable(self,params_to_canonical,canonical_to_params,name='params_canonical',*param_variables)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.RNNParamsSaveable.__init__(self,params_to_canonical,canonical_to_params,name='params_canonical',*param_variables)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.RNNParamsSaveable.restore(self,restored_tensors,restored_shapes)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops._CudnnRNN(self,rnn_mode,num_layers,num_units,input_size,input_mode='auto_select',direction='unidirectional',dropout=0.0,seed=0,seed2=0)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops._CudnnRNN.__init__(self,rnn_mode,num_layers,num_units,input_size,input_mode='auto_select',direction='unidirectional',dropout=0.0,seed=0,seed2=0)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops._CudnnRNN.canonical_to_params(self,weights,biases)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops._CudnnRNN.params_size(self)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops._CudnnRNN.params_to_canonical(self,params)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops._CudnnRNNNoInputC(self,num_layers,num_units,input_size,input_mode='auto_select',direction='unidirectional',dropout=0.0,seed=0,seed2=0)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops._CudnnRNNNoInputC.__init__(self,num_layers,num_units,input_size,input_mode='auto_select',direction='unidirectional',dropout=0.0,seed=0,seed2=0)
tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops._cudnn_rnn_backward(op,*grad)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/cudnn_rnn/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/cudnn_rnn/ops/gen_cudnn_rnn_ops.py----------------------------------------
A:tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops._CudnnRNNOutput->collections.namedtuple('CudnnRNN', _cudnn_rnn_outputs)
A:tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops.result->_InitOpDefLibrary().apply_op('CudnnRNNParamsToCanonical', num_layers=num_layers, num_units=num_units, input_size=input_size, params=params, num_params=num_params, rnn_mode=rnn_mode, input_mode=input_mode, direction=direction, name=name)
A:tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops._CudnnRNNBackpropOutput->collections.namedtuple('CudnnRNNBackprop', _cudnn_rnn_backprop_outputs)
A:tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops._CudnnRNNParamsToCanonicalOutput->collections.namedtuple('CudnnRNNParamsToCanonical', _cudnn_rnn_params_to_canonical_outputs)
A:tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops._InitOpDefLibrary()
tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops.cudnn_rnn(input,input_h,input_c,params,dropout,rnn_mode=None,input_mode=None,direction=None,seed=None,seed2=None,is_training=None,name=None)
tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops.cudnn_rnn_backprop(input,input_h,input_c,params,output,output_h,output_c,output_backprop,output_h_backprop,output_c_backprop,reserve_space,rnn_mode=None,input_mode=None,direction=None,name=None)
tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops.cudnn_rnn_canonical_to_params(num_layers,num_units,input_size,weights,biases,rnn_mode=None,input_mode=None,direction=None,name=None)
tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops.cudnn_rnn_params_size(num_layers,num_units,input_size,T,S,rnn_mode=None,input_mode=None,direction=None,name=None)
tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops.cudnn_rnn_params_to_canonical(num_layers,num_units,input_size,params,num_params,rnn_mode=None,input_mode=None,direction=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/nn/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/nn/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/nn/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/nn/python/ops/cross_entropy.py----------------------------------------
tensorflow.contrib.nn.deprecated_flipped_sigmoid_cross_entropy_with_logits(logits,targets,name=None)
tensorflow.contrib.nn.deprecated_flipped_softmax_cross_entropy_with_logits(logits,labels,dim=-1,name=None)
tensorflow.contrib.nn.deprecated_flipped_sparse_softmax_cross_entropy_with_logits(logits,labels,name=None)
tensorflow.contrib.nn.python.ops.cross_entropy.deprecated_flipped_sigmoid_cross_entropy_with_logits(logits,targets,name=None)
tensorflow.contrib.nn.python.ops.cross_entropy.deprecated_flipped_softmax_cross_entropy_with_logits(logits,labels,dim=-1,name=None)
tensorflow.contrib.nn.python.ops.cross_entropy.deprecated_flipped_sparse_softmax_cross_entropy_with_logits(logits,labels,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/losses.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.losses.diff->tensorflow.contrib.keras.python.keras.backend.abs((y_true - y_pred) / K.clip(K.abs(y_true), K.epsilon(), None))
A:tensorflow.contrib.keras.python.keras.losses.first_log->tensorflow.contrib.keras.python.keras.backend.log(K.clip(y_pred, K.epsilon(), None) + 1.0)
A:tensorflow.contrib.keras.python.keras.losses.second_log->tensorflow.contrib.keras.python.keras.backend.log(K.clip(y_true, K.epsilon(), None) + 1.0)
A:tensorflow.contrib.keras.python.keras.losses.y_true->tensorflow.contrib.keras.python.keras.backend.l2_normalize(y_true, axis=-1)
A:tensorflow.contrib.keras.python.keras.losses.y_pred->tensorflow.contrib.keras.python.keras.backend.l2_normalize(y_pred, axis=-1)
A:tensorflow.contrib.keras.python.keras.losses.identifier->str(identifier)
tensorflow.contrib.keras.losses.binary_crossentropy(y_true,y_pred)
tensorflow.contrib.keras.losses.categorical_crossentropy(y_true,y_pred)
tensorflow.contrib.keras.losses.cosine_proximity(y_true,y_pred)
tensorflow.contrib.keras.losses.deserialize(name,custom_objects=None)
tensorflow.contrib.keras.losses.get(identifier)
tensorflow.contrib.keras.losses.hinge(y_true,y_pred)
tensorflow.contrib.keras.losses.kullback_leibler_divergence(y_true,y_pred)
tensorflow.contrib.keras.losses.mean_absolute_error(y_true,y_pred)
tensorflow.contrib.keras.losses.mean_absolute_percentage_error(y_true,y_pred)
tensorflow.contrib.keras.losses.mean_squared_error(y_true,y_pred)
tensorflow.contrib.keras.losses.mean_squared_logarithmic_error(y_true,y_pred)
tensorflow.contrib.keras.losses.poisson(y_true,y_pred)
tensorflow.contrib.keras.losses.serialize(loss)
tensorflow.contrib.keras.losses.sparse_categorical_crossentropy(y_true,y_pred)
tensorflow.contrib.keras.losses.squared_hinge(y_true,y_pred)
tensorflow.contrib.keras.python.keras.losses.binary_crossentropy(y_true,y_pred)
tensorflow.contrib.keras.python.keras.losses.categorical_crossentropy(y_true,y_pred)
tensorflow.contrib.keras.python.keras.losses.cosine_proximity(y_true,y_pred)
tensorflow.contrib.keras.python.keras.losses.deserialize(name,custom_objects=None)
tensorflow.contrib.keras.python.keras.losses.get(identifier)
tensorflow.contrib.keras.python.keras.losses.hinge(y_true,y_pred)
tensorflow.contrib.keras.python.keras.losses.kullback_leibler_divergence(y_true,y_pred)
tensorflow.contrib.keras.python.keras.losses.mean_absolute_error(y_true,y_pred)
tensorflow.contrib.keras.python.keras.losses.mean_absolute_percentage_error(y_true,y_pred)
tensorflow.contrib.keras.python.keras.losses.mean_squared_error(y_true,y_pred)
tensorflow.contrib.keras.python.keras.losses.mean_squared_logarithmic_error(y_true,y_pred)
tensorflow.contrib.keras.python.keras.losses.poisson(y_true,y_pred)
tensorflow.contrib.keras.python.keras.losses.serialize(loss)
tensorflow.contrib.keras.python.keras.losses.sparse_categorical_crossentropy(y_true,y_pred)
tensorflow.contrib.keras.python.keras.losses.squared_hinge(y_true,y_pred)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/metrics.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.metrics.identifier->str(identifier)
tensorflow.contrib.keras.metrics.binary_accuracy(y_true,y_pred)
tensorflow.contrib.keras.metrics.categorical_accuracy(y_true,y_pred)
tensorflow.contrib.keras.metrics.deserialize(name,custom_objects=None)
tensorflow.contrib.keras.metrics.get(identifier)
tensorflow.contrib.keras.metrics.serialize(metric)
tensorflow.contrib.keras.metrics.sparse_categorical_accuracy(y_true,y_pred)
tensorflow.contrib.keras.metrics.top_k_categorical_accuracy(y_true,y_pred,k=5)
tensorflow.contrib.keras.python.keras.metrics.binary_accuracy(y_true,y_pred)
tensorflow.contrib.keras.python.keras.metrics.categorical_accuracy(y_true,y_pred)
tensorflow.contrib.keras.python.keras.metrics.deserialize(name,custom_objects=None)
tensorflow.contrib.keras.python.keras.metrics.get(identifier)
tensorflow.contrib.keras.python.keras.metrics.serialize(metric)
tensorflow.contrib.keras.python.keras.metrics.sparse_categorical_accuracy(y_true,y_pred)
tensorflow.contrib.keras.python.keras.metrics.top_k_categorical_accuracy(y_true,y_pred,k=5)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/optimizers.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.optimizers.g->tensorflow.contrib.keras.python.keras.backend.switch(n >= c, g * c / n, g)
A:tensorflow.contrib.keras.python.keras.optimizers.grads->self.optimizer.compute_gradients(loss, params)
A:tensorflow.contrib.keras.python.keras.optimizers.norm->tensorflow.contrib.keras.python.keras.backend.sqrt(sum([K.sum(K.square(g)) for g in grads]))
A:tensorflow.contrib.keras.python.keras.optimizers.param_values->tensorflow.contrib.keras.python.keras.backend.batch_get_value(params)
A:tensorflow.contrib.keras.python.keras.optimizers.self.iterations->tensorflow.contrib.keras.python.keras.backend.variable(0.0, name='iterations')
A:tensorflow.contrib.keras.python.keras.optimizers.self.lr->tensorflow.contrib.keras.python.keras.backend.variable(lr, name='lr')
A:tensorflow.contrib.keras.python.keras.optimizers.self.momentum->tensorflow.contrib.keras.python.keras.backend.variable(momentum, name='momentum')
A:tensorflow.contrib.keras.python.keras.optimizers.self.decay->tensorflow.contrib.keras.python.keras.backend.variable(decay, name='decay')
A:tensorflow.contrib.keras.python.keras.optimizers.new_p->c(new_p)
A:tensorflow.contrib.keras.python.keras.optimizers.base_config->super(Nadam, self).get_config()
A:tensorflow.contrib.keras.python.keras.optimizers.self.rho->tensorflow.contrib.keras.python.keras.backend.variable(rho, name='rho')
A:tensorflow.contrib.keras.python.keras.optimizers.self.beta_1->tensorflow.contrib.keras.python.keras.backend.variable(beta_1, name='beta_1')
A:tensorflow.contrib.keras.python.keras.optimizers.self.beta_2->tensorflow.contrib.keras.python.keras.backend.variable(beta_2, name='beta_2')
A:tensorflow.contrib.keras.python.keras.optimizers.u_t->tensorflow.contrib.keras.python.keras.backend.maximum(self.beta_2 * u, K.abs(g))
A:tensorflow.contrib.keras.python.keras.optimizers.self.m_schedule->tensorflow.contrib.keras.python.keras.backend.variable(1.0, name='m_schedule')
A:tensorflow.contrib.keras.python.keras.optimizers.opt_update->self.optimizer.apply_gradients(grads, global_step=self.iterations)
A:tensorflow.contrib.keras.python.keras.optimizers.config['class_name']->config['class_name'].lower().lower()
tensorflow.contrib.keras.optimizers.Adadelta(self,lr=1.0,rho=0.95,epsilon=1e-08,decay=0.0,**kwargs)
tensorflow.contrib.keras.optimizers.Adadelta.get_config(self)
tensorflow.contrib.keras.optimizers.Adadelta.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.optimizers.Adagrad(self,lr=0.01,epsilon=1e-08,decay=0.0,**kwargs)
tensorflow.contrib.keras.optimizers.Adagrad.get_config(self)
tensorflow.contrib.keras.optimizers.Adagrad.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.optimizers.Adam(self,lr=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-08,decay=0.0,**kwargs)
tensorflow.contrib.keras.optimizers.Adam.get_config(self)
tensorflow.contrib.keras.optimizers.Adam.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.optimizers.Adamax(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=1e-08,decay=0.0,**kwargs)
tensorflow.contrib.keras.optimizers.Adamax.get_config(self)
tensorflow.contrib.keras.optimizers.Adamax.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.optimizers.Nadam(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=1e-08,schedule_decay=0.004,**kwargs)
tensorflow.contrib.keras.optimizers.Nadam.get_config(self)
tensorflow.contrib.keras.optimizers.Nadam.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.optimizers.Optimizer(self,**kwargs)
tensorflow.contrib.keras.optimizers.Optimizer.from_config(cls,config)
tensorflow.contrib.keras.optimizers.Optimizer.get_config(self)
tensorflow.contrib.keras.optimizers.Optimizer.get_gradients(self,loss,params)
tensorflow.contrib.keras.optimizers.Optimizer.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.optimizers.Optimizer.get_weights(self)
tensorflow.contrib.keras.optimizers.Optimizer.set_weights(self,weights)
tensorflow.contrib.keras.optimizers.RMSprop(self,lr=0.001,rho=0.9,epsilon=1e-08,decay=0.0,**kwargs)
tensorflow.contrib.keras.optimizers.RMSprop.get_config(self)
tensorflow.contrib.keras.optimizers.RMSprop.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.optimizers.SGD(self,lr=0.01,momentum=0.0,decay=0.0,nesterov=False,**kwargs)
tensorflow.contrib.keras.optimizers.SGD.get_config(self)
tensorflow.contrib.keras.optimizers.SGD.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.optimizers.TFOptimizer(self,optimizer)
tensorflow.contrib.keras.optimizers.TFOptimizer.from_config(self,config)
tensorflow.contrib.keras.optimizers.TFOptimizer.get_config(self)
tensorflow.contrib.keras.optimizers.TFOptimizer.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.optimizers.TFOptimizer.weights(self)
tensorflow.contrib.keras.optimizers.clip_norm(g,c,n)
tensorflow.contrib.keras.optimizers.deserialize(config,custom_objects=None)
tensorflow.contrib.keras.optimizers.get(identifier)
tensorflow.contrib.keras.optimizers.serialize(optimizer)
tensorflow.contrib.keras.python.keras.optimizers.Adadelta(self,lr=1.0,rho=0.95,epsilon=1e-08,decay=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.Adadelta.__init__(self,lr=1.0,rho=0.95,epsilon=1e-08,decay=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.Adadelta.get_config(self)
tensorflow.contrib.keras.python.keras.optimizers.Adadelta.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.python.keras.optimizers.Adagrad(self,lr=0.01,epsilon=1e-08,decay=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.Adagrad.__init__(self,lr=0.01,epsilon=1e-08,decay=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.Adagrad.get_config(self)
tensorflow.contrib.keras.python.keras.optimizers.Adagrad.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.python.keras.optimizers.Adam(self,lr=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-08,decay=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.Adam.__init__(self,lr=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-08,decay=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.Adam.get_config(self)
tensorflow.contrib.keras.python.keras.optimizers.Adam.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.python.keras.optimizers.Adamax(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=1e-08,decay=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.Adamax.__init__(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=1e-08,decay=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.Adamax.get_config(self)
tensorflow.contrib.keras.python.keras.optimizers.Adamax.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.python.keras.optimizers.Nadam(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=1e-08,schedule_decay=0.004,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.Nadam.__init__(self,lr=0.002,beta_1=0.9,beta_2=0.999,epsilon=1e-08,schedule_decay=0.004,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.Nadam.get_config(self)
tensorflow.contrib.keras.python.keras.optimizers.Nadam.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.python.keras.optimizers.Optimizer(self,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.Optimizer.__init__(self,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.Optimizer.from_config(cls,config)
tensorflow.contrib.keras.python.keras.optimizers.Optimizer.get_config(self)
tensorflow.contrib.keras.python.keras.optimizers.Optimizer.get_gradients(self,loss,params)
tensorflow.contrib.keras.python.keras.optimizers.Optimizer.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.python.keras.optimizers.Optimizer.get_weights(self)
tensorflow.contrib.keras.python.keras.optimizers.Optimizer.set_weights(self,weights)
tensorflow.contrib.keras.python.keras.optimizers.RMSprop(self,lr=0.001,rho=0.9,epsilon=1e-08,decay=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.RMSprop.__init__(self,lr=0.001,rho=0.9,epsilon=1e-08,decay=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.RMSprop.get_config(self)
tensorflow.contrib.keras.python.keras.optimizers.RMSprop.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.python.keras.optimizers.SGD(self,lr=0.01,momentum=0.0,decay=0.0,nesterov=False,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.SGD.__init__(self,lr=0.01,momentum=0.0,decay=0.0,nesterov=False,**kwargs)
tensorflow.contrib.keras.python.keras.optimizers.SGD.get_config(self)
tensorflow.contrib.keras.python.keras.optimizers.SGD.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.python.keras.optimizers.TFOptimizer(self,optimizer)
tensorflow.contrib.keras.python.keras.optimizers.TFOptimizer.__init__(self,optimizer)
tensorflow.contrib.keras.python.keras.optimizers.TFOptimizer.from_config(self,config)
tensorflow.contrib.keras.python.keras.optimizers.TFOptimizer.get_config(self)
tensorflow.contrib.keras.python.keras.optimizers.TFOptimizer.get_updates(self,params,constraints,loss)
tensorflow.contrib.keras.python.keras.optimizers.TFOptimizer.weights(self)
tensorflow.contrib.keras.python.keras.optimizers.clip_norm(g,c,n)
tensorflow.contrib.keras.python.keras.optimizers.deserialize(config,custom_objects=None)
tensorflow.contrib.keras.python.keras.optimizers.get(identifier)
tensorflow.contrib.keras.python.keras.optimizers.serialize(optimizer)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/testing_utils.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.testing_utils.y->layer(x)
A:tensorflow.contrib.keras.python.keras.testing_utils.x->tensorflow.contrib.keras.python.keras.layers.Input(shape=input_shape[1:], dtype=input_dtype)
A:tensorflow.contrib.keras.python.keras.testing_utils.input_data_shape->list(input_shape)
A:tensorflow.contrib.keras.python.keras.testing_utils.input_data_shape[i]->numpy.random.randint(1, 4)
A:tensorflow.contrib.keras.python.keras.testing_utils.input_data->input_data.astype(input_dtype).astype(input_dtype)
A:tensorflow.contrib.keras.python.keras.testing_utils.layer->layer.__class__.from_config(layer_config).__class__.from_config(layer_config)
A:tensorflow.contrib.keras.python.keras.testing_utils.weights->tensorflow.contrib.keras.python.keras.models.Sequential().get_weights()
A:tensorflow.contrib.keras.python.keras.testing_utils.model->tensorflow.contrib.keras.python.keras.models.Sequential()
A:tensorflow.contrib.keras.python.keras.testing_utils.expected_output_shape->tuple(layer._compute_output_shape(input_shape).as_list())
A:tensorflow.contrib.keras.python.keras.testing_utils.actual_output->tensorflow.contrib.keras.python.keras.models.Sequential().predict(input_data)
A:tensorflow.contrib.keras.python.keras.testing_utils.model_config->tensorflow.contrib.keras.python.keras.models.Sequential().get_config()
A:tensorflow.contrib.keras.python.keras.testing_utils.recovered_model->tensorflow.contrib.keras.python.keras.models.Sequential.from_config(model_config)
A:tensorflow.contrib.keras.python.keras.testing_utils.output->tensorflow.contrib.keras.python.keras.models.Sequential.from_config(model_config).predict(input_data)
A:tensorflow.contrib.keras.python.keras.testing_utils.layer_config->layer.__class__.from_config(layer_config).__class__.from_config(layer_config).get_config()
tensorflow.contrib.keras.keras.testing_utils.get_test_data(train_samples,test_samples,input_shape,num_classes)
tensorflow.contrib.keras.keras.testing_utils.layer_test(layer_cls,kwargs=None,input_shape=None,input_dtype=None,input_data=None,expected_output=None,expected_output_dtype=None)
tensorflow.contrib.keras.python.keras.testing_utils.get_test_data(train_samples,test_samples,input_shape,num_classes)
tensorflow.contrib.keras.python.keras.testing_utils.layer_test(layer_cls,kwargs=None,input_shape=None,input_dtype=None,input_data=None,expected_output=None,expected_output_dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/regularizers.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.regularizers.self.l1->tensorflow.contrib.keras.python.keras.backend.cast_to_floatx(l1)
A:tensorflow.contrib.keras.python.keras.regularizers.self.l2->tensorflow.contrib.keras.python.keras.backend.cast_to_floatx(l2)
tensorflow.contrib.keras.python.keras.regularizers.L1L2(self,l1=0.0,l2=0.0)
tensorflow.contrib.keras.python.keras.regularizers.L1L2.__init__(self,l1=0.0,l2=0.0)
tensorflow.contrib.keras.python.keras.regularizers.L1L2.get_config(self)
tensorflow.contrib.keras.python.keras.regularizers.Regularizer(self,x)
tensorflow.contrib.keras.python.keras.regularizers.Regularizer.__call__(self,x)
tensorflow.contrib.keras.python.keras.regularizers.Regularizer.from_config(cls,config)
tensorflow.contrib.keras.python.keras.regularizers.deserialize(config,custom_objects=None)
tensorflow.contrib.keras.python.keras.regularizers.get(identifier)
tensorflow.contrib.keras.python.keras.regularizers.l1(l=0.01)
tensorflow.contrib.keras.python.keras.regularizers.l1_l2(l1=0.01,l2=0.01)
tensorflow.contrib.keras.python.keras.regularizers.l2(l=0.01)
tensorflow.contrib.keras.python.keras.regularizers.serialize(regularizer)
tensorflow.contrib.keras.regularizers.L1L2(self,l1=0.0,l2=0.0)
tensorflow.contrib.keras.regularizers.L1L2.get_config(self)
tensorflow.contrib.keras.regularizers.Regularizer(self,x)
tensorflow.contrib.keras.regularizers.Regularizer.from_config(cls,config)
tensorflow.contrib.keras.regularizers.deserialize(config,custom_objects=None)
tensorflow.contrib.keras.regularizers.get(identifier)
tensorflow.contrib.keras.regularizers.l1(l=0.01)
tensorflow.contrib.keras.regularizers.l1_l2(l1=0.01,l2=0.01)
tensorflow.contrib.keras.regularizers.l2(l=0.01)
tensorflow.contrib.keras.regularizers.serialize(regularizer)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/models.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.models.proceed->ask_to_proceed_with_overwrite(filepath)
A:tensorflow.contrib.keras.python.keras.models.f->h5py.File(filepath, 'w')
A:tensorflow.contrib.keras.python.keras.models.f.attrs['keras_version']->str(keras_version).encode('utf8')
A:tensorflow.contrib.keras.python.keras.models.f.attrs['backend']->tensorflow.contrib.keras.python.keras.backend.backend().encode('utf8')
A:tensorflow.contrib.keras.python.keras.models.f.attrs['model_config']->json.dumps({'class_name': model.__class__.__name__, 'config': model.get_config()}, default=get_json_type).encode('utf8')
A:tensorflow.contrib.keras.python.keras.models.model_weights_group->h5py.File(filepath, 'w').create_group('model_weights')
A:tensorflow.contrib.keras.python.keras.models.f.attrs['training_config']->json.dumps({'optimizer_config': {'class_name': model.optimizer.__class__.__name__, 'config': model.optimizer.get_config()}, 'loss': model.loss, 'metrics': model.metrics, 'sample_weight_mode': model.sample_weight_mode, 'loss_weights': model.loss_weights}, default=get_json_type).encode('utf8')
A:tensorflow.contrib.keras.python.keras.models.symbolic_weights->getattr(model.optimizer, 'weights')
A:tensorflow.contrib.keras.python.keras.models.optimizer_weights_group->h5py.File(filepath, 'w').create_group('optimizer_weights')
A:tensorflow.contrib.keras.python.keras.models.weight_values->tensorflow.contrib.keras.python.keras.backend.batch_get_value(symbolic_weights)
A:tensorflow.contrib.keras.python.keras.models.name->str(w.name)
A:tensorflow.contrib.keras.python.keras.models.param_dset->h5py.File(filepath, 'w').create_group('optimizer_weights').create_dataset(name, val.shape, dtype=val.dtype)
A:tensorflow.contrib.keras.python.keras.models.model_config->json.loads(model_config.decode('utf-8'))
A:tensorflow.contrib.keras.python.keras.models.model->cls()
A:tensorflow.contrib.keras.python.keras.models.training_config->json.loads(training_config.decode('utf-8'))
A:tensorflow.contrib.keras.python.keras.models.optimizer->tensorflow.contrib.keras.python.keras.optimizers.deserialize(optimizer_config, custom_objects=custom_objects)
A:tensorflow.contrib.keras.python.keras.models.loss->convert_custom_objects(training_config['loss'])
A:tensorflow.contrib.keras.python.keras.models.metrics->convert_custom_objects(training_config['metrics'])
A:tensorflow.contrib.keras.python.keras.models.config->json.loads(json_string)
A:tensorflow.contrib.keras.python.keras.models.x->Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, name=layer.name + '_input')
A:tensorflow.contrib.keras.python.keras.models.self.inputs->tensorflow.contrib.keras.python.keras.engine.topology.get_source_inputs(self.outputs[0])
A:tensorflow.contrib.keras.python.keras.models.output_tensor->layer(self.outputs[0])
A:tensorflow.contrib.keras.python.keras.models.self.model->Model(self.inputs, self.outputs[0], name=self.name + '_model')
A:tensorflow.contrib.keras.python.keras.models.weights->self._gather_list_attr('non_trainable_weights')
A:tensorflow.contrib.keras.python.keras.models.trainable_weights->self._gather_list_attr('trainable_weights')
A:tensorflow.contrib.keras.python.keras.models.preds->self.predict(x, batch_size, verbose)
A:tensorflow.contrib.keras.python.keras.models.proba->self.predict(x, batch_size=batch_size, verbose=verbose)
A:tensorflow.contrib.keras.python.keras.models.layer->tensorflow.contrib.keras.python.keras.layers.deserialize(conf)
tensorflow.contrib.keras.models.Sequential(self,layers=None,name=None)
tensorflow.contrib.keras.models.Sequential._gather_list_attr(self,attr)
tensorflow.contrib.keras.models.Sequential.add(self,layer)
tensorflow.contrib.keras.models.Sequential.build(self,input_shape=None)
tensorflow.contrib.keras.models.Sequential.call(self,inputs,mask=None)
tensorflow.contrib.keras.models.Sequential.compile(self,optimizer,loss,metrics=None,sample_weight_mode=None,**kwargs)
tensorflow.contrib.keras.models.Sequential.constraints(self)
tensorflow.contrib.keras.models.Sequential.evaluate(self,x,y,batch_size=32,verbose=1,sample_weight=None)
tensorflow.contrib.keras.models.Sequential.evaluate_generator(self,generator,steps,max_q_size=10,workers=1,pickle_safe=False)
tensorflow.contrib.keras.models.Sequential.fit(self,x,y,batch_size=32,epochs=10,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0)
tensorflow.contrib.keras.models.Sequential.fit_generator(self,generator,steps_per_epoch,epochs=1,verbose=1,callbacks=None,validation_data=None,validation_steps=None,class_weight=None,max_q_size=10,workers=1,pickle_safe=False,initial_epoch=0)
tensorflow.contrib.keras.models.Sequential.from_config(cls,config)
tensorflow.contrib.keras.models.Sequential.get_config(self)
tensorflow.contrib.keras.models.Sequential.get_layer(self,name=None,index=None)
tensorflow.contrib.keras.models.Sequential.get_losses_for(self,inputs)
tensorflow.contrib.keras.models.Sequential.get_updates_for(self,inputs)
tensorflow.contrib.keras.models.Sequential.get_weights(self)
tensorflow.contrib.keras.models.Sequential.load_weights(self,filepath,by_name=False)
tensorflow.contrib.keras.models.Sequential.losses(self)
tensorflow.contrib.keras.models.Sequential.non_trainable_weights(self)
tensorflow.contrib.keras.models.Sequential.pop(self)
tensorflow.contrib.keras.models.Sequential.predict(self,x,batch_size=32,verbose=0)
tensorflow.contrib.keras.models.Sequential.predict_classes(self,x,batch_size=32,verbose=1)
tensorflow.contrib.keras.models.Sequential.predict_generator(self,generator,steps,max_q_size=10,workers=1,pickle_safe=False)
tensorflow.contrib.keras.models.Sequential.predict_on_batch(self,x)
tensorflow.contrib.keras.models.Sequential.predict_proba(self,x,batch_size=32,verbose=1)
tensorflow.contrib.keras.models.Sequential.regularizers(self)
tensorflow.contrib.keras.models.Sequential.save_weights(self,filepath,overwrite=True)
tensorflow.contrib.keras.models.Sequential.set_weights(self,weights)
tensorflow.contrib.keras.models.Sequential.state_updates(self)
tensorflow.contrib.keras.models.Sequential.test_on_batch(self,x,y,sample_weight=None)
tensorflow.contrib.keras.models.Sequential.train_on_batch(self,x,y,class_weight=None,sample_weight=None)
tensorflow.contrib.keras.models.Sequential.trainable(self)
tensorflow.contrib.keras.models.Sequential.trainable(self,value)
tensorflow.contrib.keras.models.Sequential.trainable_weights(self)
tensorflow.contrib.keras.models.Sequential.updates(self)
tensorflow.contrib.keras.models.Sequential.uses_learning_phase(self)
tensorflow.contrib.keras.models.load_model(filepath,custom_objects=None)
tensorflow.contrib.keras.models.model_from_config(config,custom_objects=None)
tensorflow.contrib.keras.models.model_from_json(json_string,custom_objects=None)
tensorflow.contrib.keras.models.model_from_yaml(yaml_string,custom_objects=None)
tensorflow.contrib.keras.models.save_model(model,filepath,overwrite=True,include_optimizer=True)
tensorflow.contrib.keras.python.keras.models.Sequential(self,layers=None,name=None)
tensorflow.contrib.keras.python.keras.models.Sequential.__init__(self,layers=None,name=None)
tensorflow.contrib.keras.python.keras.models.Sequential._gather_list_attr(self,attr)
tensorflow.contrib.keras.python.keras.models.Sequential.add(self,layer)
tensorflow.contrib.keras.python.keras.models.Sequential.build(self,input_shape=None)
tensorflow.contrib.keras.python.keras.models.Sequential.call(self,inputs,mask=None)
tensorflow.contrib.keras.python.keras.models.Sequential.compile(self,optimizer,loss,metrics=None,sample_weight_mode=None,**kwargs)
tensorflow.contrib.keras.python.keras.models.Sequential.constraints(self)
tensorflow.contrib.keras.python.keras.models.Sequential.evaluate(self,x,y,batch_size=32,verbose=1,sample_weight=None)
tensorflow.contrib.keras.python.keras.models.Sequential.evaluate_generator(self,generator,steps,max_q_size=10,workers=1,pickle_safe=False)
tensorflow.contrib.keras.python.keras.models.Sequential.fit(self,x,y,batch_size=32,epochs=10,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0)
tensorflow.contrib.keras.python.keras.models.Sequential.fit_generator(self,generator,steps_per_epoch,epochs=1,verbose=1,callbacks=None,validation_data=None,validation_steps=None,class_weight=None,max_q_size=10,workers=1,pickle_safe=False,initial_epoch=0)
tensorflow.contrib.keras.python.keras.models.Sequential.from_config(cls,config)
tensorflow.contrib.keras.python.keras.models.Sequential.get_config(self)
tensorflow.contrib.keras.python.keras.models.Sequential.get_layer(self,name=None,index=None)
tensorflow.contrib.keras.python.keras.models.Sequential.get_losses_for(self,inputs)
tensorflow.contrib.keras.python.keras.models.Sequential.get_updates_for(self,inputs)
tensorflow.contrib.keras.python.keras.models.Sequential.get_weights(self)
tensorflow.contrib.keras.python.keras.models.Sequential.load_weights(self,filepath,by_name=False)
tensorflow.contrib.keras.python.keras.models.Sequential.losses(self)
tensorflow.contrib.keras.python.keras.models.Sequential.non_trainable_weights(self)
tensorflow.contrib.keras.python.keras.models.Sequential.pop(self)
tensorflow.contrib.keras.python.keras.models.Sequential.predict(self,x,batch_size=32,verbose=0)
tensorflow.contrib.keras.python.keras.models.Sequential.predict_classes(self,x,batch_size=32,verbose=1)
tensorflow.contrib.keras.python.keras.models.Sequential.predict_generator(self,generator,steps,max_q_size=10,workers=1,pickle_safe=False)
tensorflow.contrib.keras.python.keras.models.Sequential.predict_on_batch(self,x)
tensorflow.contrib.keras.python.keras.models.Sequential.predict_proba(self,x,batch_size=32,verbose=1)
tensorflow.contrib.keras.python.keras.models.Sequential.regularizers(self)
tensorflow.contrib.keras.python.keras.models.Sequential.save_weights(self,filepath,overwrite=True)
tensorflow.contrib.keras.python.keras.models.Sequential.set_weights(self,weights)
tensorflow.contrib.keras.python.keras.models.Sequential.state_updates(self)
tensorflow.contrib.keras.python.keras.models.Sequential.test_on_batch(self,x,y,sample_weight=None)
tensorflow.contrib.keras.python.keras.models.Sequential.train_on_batch(self,x,y,class_weight=None,sample_weight=None)
tensorflow.contrib.keras.python.keras.models.Sequential.trainable(self)
tensorflow.contrib.keras.python.keras.models.Sequential.trainable(self,value)
tensorflow.contrib.keras.python.keras.models.Sequential.trainable_weights(self)
tensorflow.contrib.keras.python.keras.models.Sequential.updates(self)
tensorflow.contrib.keras.python.keras.models.Sequential.uses_learning_phase(self)
tensorflow.contrib.keras.python.keras.models.load_model(filepath,custom_objects=None)
tensorflow.contrib.keras.python.keras.models.model_from_config(config,custom_objects=None)
tensorflow.contrib.keras.python.keras.models.model_from_json(json_string,custom_objects=None)
tensorflow.contrib.keras.python.keras.models.model_from_yaml(yaml_string,custom_objects=None)
tensorflow.contrib.keras.python.keras.models.save_model(model,filepath,overwrite=True,include_optimizer=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/backend.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.backend._FLOATX->str(value)
A:tensorflow.contrib.keras.python.keras.backend._IMAGE_DATA_FORMAT->str(data_format)
A:tensorflow.contrib.keras.python.keras.backend.graph->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.contrib.keras.python.keras.backend._GRAPH_UID_DICTS[graph]->defaultdict(int)
A:tensorflow.contrib.keras.python.keras.backend.phase->tensorflow.python.ops.array_ops.placeholder(dtype='bool', name='keras_learning_phase')
A:tensorflow.contrib.keras.python.keras.backend.session->get_session()
A:tensorflow.contrib.keras.python.keras.backend.config->tensorflow.core.protobuf.config_pb2.ConfigProto(intra_op_parallelism_threads=num_thread, allow_soft_placement=True)
A:tensorflow.contrib.keras.python.keras.backend.num_thread->int(os.environ.get('OMP_NUM_THREADS'))
A:tensorflow.contrib.keras.python.keras.backend._SESSION->tensorflow.python.client.session.Session(config=config)
A:tensorflow.contrib.keras.python.keras.backend.x->tensorflow.python.ops.nn.bias_add(x, bias)
A:tensorflow.contrib.keras.python.keras.backend.dtype->floatx()
A:tensorflow.contrib.keras.python.keras.backend.sparse_coo->numpy.asarray(value).tocoo()
A:tensorflow.contrib.keras.python.keras.backend.indices->tensorflow.python.ops.array_ops.transpose(array_ops.reshape(concatenate([batch_ind, label_ind], axis=0), [2, -1]))
A:tensorflow.contrib.keras.python.keras.backend.v->tensorflow.python.ops.variables.Variable(value, dtype=_convert_string_dtype(dtype), name=name)
A:tensorflow.contrib.keras.python.keras.backend.variables->tensorflow.python.ops.variables.global_variables()
A:tensorflow.contrib.keras.python.keras.backend.sess->get_session()
A:tensorflow.contrib.keras.python.keras.backend.shape->tensorflow.python.ops.array_ops.stack(list(shape))
A:tensorflow.contrib.keras.python.keras.backend.tf_dtype->_convert_string_dtype(x.dtype.name.split('_')[0])
A:tensorflow.contrib.keras.python.keras.backend.seed->numpy.random.randint(10000000.0)
A:tensorflow.contrib.keras.python.keras.backend.value->numpy.asarray(value)
A:tensorflow.contrib.keras.python.keras.backend.x_shape->tensorflow.python.ops.nn.bias_add(x, bias).get_shape().as_list()
A:tensorflow.contrib.keras.python.keras.backend.y_shape->tuple(y_shape)
A:tensorflow.contrib.keras.python.keras.backend.y_permute_dim->list(range(ndim(y)))
A:tensorflow.contrib.keras.python.keras.backend.xt->tensorflow.python.ops.array_ops.reshape(x, [-1, x_shape[-1]])
A:tensorflow.contrib.keras.python.keras.backend.yt->tensorflow.python.ops.array_ops.reshape(array_ops.transpose(y, perm=y_permute_dim), [y_shape[-2], -1])
A:tensorflow.contrib.keras.python.keras.backend.out->expand_dims(out, 1)
A:tensorflow.contrib.keras.python.keras.backend.axis->_normalize_axis(axis, ndim(x))
A:tensorflow.contrib.keras.python.keras.backend.m->tensorflow.python.ops.math_ops.reduce_mean(x, reduction_indices=axis, keep_dims=True)
A:tensorflow.contrib.keras.python.keras.backend.devs_squared->tensorflow.python.ops.math_ops.square(x - m)
A:tensorflow.contrib.keras.python.keras.backend.zero->_to_tensor(0.0, x.dtype.base_dtype)
A:tensorflow.contrib.keras.python.keras.backend.inf->_to_tensor(np.inf, x.dtype.base_dtype)
A:tensorflow.contrib.keras.python.keras.backend.min_value->_to_tensor(min_value, x.dtype.base_dtype)
A:tensorflow.contrib.keras.python.keras.backend.max_value->_to_tensor(max_value, x.dtype.base_dtype)
A:tensorflow.contrib.keras.python.keras.backend.(mean, var)->tensorflow.python.ops.nn.moments(x, reduction_axes, shift=None, name=None, keep_dims=False)
A:tensorflow.contrib.keras.python.keras.backend.normed->tensorflow.python.ops.nn.batch_normalization(x, broadcast_mean, broadcast_var, broadcast_beta, broadcast_gamma, epsilon)
A:tensorflow.contrib.keras.python.keras.backend.target_shape->tensorflow.python.ops.array_ops.stack(target_shape)
A:tensorflow.contrib.keras.python.keras.backend.broadcast_mean->tensorflow.python.ops.array_ops.reshape(mean, target_shape)
A:tensorflow.contrib.keras.python.keras.backend.broadcast_var->tensorflow.python.ops.array_ops.reshape(var, target_shape)
A:tensorflow.contrib.keras.python.keras.backend.broadcast_gamma->tensorflow.python.ops.array_ops.reshape(gamma, target_shape)
A:tensorflow.contrib.keras.python.keras.backend.broadcast_beta->tensorflow.python.ops.array_ops.reshape(beta, target_shape)
A:tensorflow.contrib.keras.python.keras.backend.rank->ndim(tensors[0])
A:tensorflow.contrib.keras.python.keras.backend.original_shape->int_shape(x)
A:tensorflow.contrib.keras.python.keras.backend.output->tensorflow.python.ops.math_ops.log(output / (1 - output))
A:tensorflow.contrib.keras.python.keras.backend.splits->tensorflow.python.ops.array_ops.split(value=x, num_or_size_splits=x_shape[axis], axis=axis)
A:tensorflow.contrib.keras.python.keras.backend.pattern->tensorflow.python.ops.array_ops.stack([1, n, 1])
A:tensorflow.contrib.keras.python.keras.backend.result->cast(result, dtype)
A:tensorflow.contrib.keras.python.keras.backend.data_format->image_data_format()
A:tensorflow.contrib.keras.python.keras.backend.assign_placeholder->tensorflow.python.ops.array_ops.placeholder(tf_dtype, shape=value.shape)
A:tensorflow.contrib.keras.python.keras.backend.assign_op->tensorflow.python.ops.nn.bias_add(x, bias).assign(assign_placeholder)
A:tensorflow.contrib.keras.python.keras.backend.self.inputs->list(inputs)
A:tensorflow.contrib.keras.python.keras.backend.self.outputs->list(outputs)
A:tensorflow.contrib.keras.python.keras.backend.self.updates_op->tensorflow.python.ops.control_flow_ops.group(*updates_ops)
A:tensorflow.contrib.keras.python.keras.backend.updated->get_session().run(self.outputs + [self.updates_op], feed_dict=feed_dict)
A:tensorflow.contrib.keras.python.keras.backend.ndim->len(inputs.get_shape())
A:tensorflow.contrib.keras.python.keras.backend.inputs->reverse(inputs, 0)
A:tensorflow.contrib.keras.python.keras.backend.mask->reverse(mask, 0)
A:tensorflow.contrib.keras.python.keras.backend.input_list->tensorflow.python.ops.array_ops.unstack(inputs)
A:tensorflow.contrib.keras.python.keras.backend.mask_list->tensorflow.python.ops.array_ops.unstack(mask)
A:tensorflow.contrib.keras.python.keras.backend.(output, new_states)->step_function(current_input, tuple(states) + tuple(constants))
A:tensorflow.contrib.keras.python.keras.backend.tiled_mask_t->tensorflow.python.ops.array_ops.tile(mask_t, array_ops.stack([1, array_ops.shape(output)[1]]))
A:tensorflow.contrib.keras.python.keras.backend.prev_output->zeros_like(output)
A:tensorflow.contrib.keras.python.keras.backend.outputs->tensorflow.python.ops.array_ops.transpose(outputs, axes)
A:tensorflow.contrib.keras.python.keras.backend.(output, states)->step_function(inp, states + constants)
A:tensorflow.contrib.keras.python.keras.backend.states->tuple(initial_states)
A:tensorflow.contrib.keras.python.keras.backend.(outputs, _)->step_function(inputs[0], initial_states + constants)
A:tensorflow.contrib.keras.python.keras.backend.output_ta->tensorflow.python.ops.tensor_array_ops.TensorArray(dtype=outputs.dtype, size=time_steps, tensor_array_name='output_ta')
A:tensorflow.contrib.keras.python.keras.backend.input_ta->input_ta.unstack(inputs).unstack(inputs)
A:tensorflow.contrib.keras.python.keras.backend.time->tensorflow.python.framework.constant_op.constant(0, dtype='int32', name='time')
A:tensorflow.contrib.keras.python.keras.backend.mask_ta->mask_ta.unstack(mask).unstack(mask)
A:tensorflow.contrib.keras.python.keras.backend.current_input->input_ta.unstack(inputs).unstack(inputs).read(time)
A:tensorflow.contrib.keras.python.keras.backend.mask_t->mask_ta.unstack(mask).unstack(mask).read(time)
A:tensorflow.contrib.keras.python.keras.backend.output_ta_t->output_ta_t.write(time, output).write(time, output)
A:tensorflow.contrib.keras.python.keras.backend.final_outputs->tensorflow.python.ops.control_flow_ops.while_loop(cond=lambda time, *_: time < time_steps, body=_step, loop_vars=(time, output_ta) + states, parallel_iterations=32, swap_memory=True)
A:tensorflow.contrib.keras.python.keras.backend.last_output->tensorflow.python.ops.tensor_array_ops.TensorArray(dtype=outputs.dtype, size=time_steps, tensor_array_name='output_ta').read(last_time - 1)
A:tensorflow.contrib.keras.python.keras.backend.condition->tensorflow.python.ops.math_ops.cast(condition, 'bool')
A:tensorflow.contrib.keras.python.keras.backend.training->learning_phase()
A:tensorflow.contrib.keras.python.keras.backend.negative_part->tensorflow.python.ops.nn.relu(-x)
A:tensorflow.contrib.keras.python.keras.backend.alpha->_to_tensor(alpha, x.dtype.base_dtype)
A:tensorflow.contrib.keras.python.keras.backend.res->tensorflow.python.ops.nn.sparse_softmax_cross_entropy_with_logits(labels=targets, logits=logits)
A:tensorflow.contrib.keras.python.keras.backend.epsilon->_to_tensor(_EPSILON, output.dtype.base_dtype)
A:tensorflow.contrib.keras.python.keras.backend.output_shape->_preprocess_deconv_output_shape(x, output_shape, data_format)
A:tensorflow.contrib.keras.python.keras.backend.targets->cast(flatten(target), 'int64')
A:tensorflow.contrib.keras.python.keras.backend.logits->tensorflow.python.ops.array_ops.reshape(output, [-1, int(output_shape[-1])])
A:tensorflow.contrib.keras.python.keras.backend.one->_to_tensor(1.0, x.dtype.base_dtype)
A:tensorflow.contrib.keras.python.keras.backend.kernel->tensorflow.python.ops.array_ops.transpose(kernel, (2, 3, 4, 1, 0))
A:tensorflow.contrib.keras.python.keras.backend.kernel_shape->tensorflow.python.ops.array_ops.transpose(kernel, (2, 3, 4, 1, 0)).get_shape().as_list()
A:tensorflow.contrib.keras.python.keras.backend.padding->_preprocess_padding(padding)
A:tensorflow.contrib.keras.python.keras.backend.label_shape->tensorflow.python.ops.array_ops.shape(labels)
A:tensorflow.contrib.keras.python.keras.backend.num_batches_tns->tensorflow.python.ops.array_ops.stack([label_shape[0]])
A:tensorflow.contrib.keras.python.keras.backend.max_num_labels_tns->tensorflow.python.ops.array_ops.stack([label_shape[1]])
A:tensorflow.contrib.keras.python.keras.backend.init->tensorflow.python.ops.math_ops.cast(array_ops.fill([1, label_shape[1]], 0), dtypes_module.bool)
A:tensorflow.contrib.keras.python.keras.backend.dense_mask->tensorflow.python.ops.functional_ops.scan(range_less_than, label_lengths, initializer=init, parallel_iterations=1)
A:tensorflow.contrib.keras.python.keras.backend.label_array->tensorflow.python.ops.array_ops.reshape(array_ops.tile(math_ops.range(0, label_shape[1]), num_batches_tns), label_shape)
A:tensorflow.contrib.keras.python.keras.backend.label_ind->tensorflow.python.ops.array_ops.boolean_mask(label_array, dense_mask)
A:tensorflow.contrib.keras.python.keras.backend.batch_array->tensorflow.python.ops.array_ops.transpose(array_ops.reshape(array_ops.tile(math_ops.range(0, label_shape[0]), max_num_labels_tns), reverse(label_shape, 0)))
A:tensorflow.contrib.keras.python.keras.backend.batch_ind->tensorflow.python.ops.array_ops.boolean_mask(batch_array, dense_mask)
A:tensorflow.contrib.keras.python.keras.backend.vals_sparse->tensorflow.python.ops.array_ops.gather_nd(labels, indices)
A:tensorflow.contrib.keras.python.keras.backend.label_length->tensorflow.python.ops.math_ops.to_int32(array_ops.squeeze(label_length))
A:tensorflow.contrib.keras.python.keras.backend.input_length->tensorflow.python.ops.math_ops.to_int32(input_length)
A:tensorflow.contrib.keras.python.keras.backend.sparse_labels->tensorflow.python.ops.math_ops.to_int32(ctc_label_dense_to_sparse(y_true, label_length))
A:tensorflow.contrib.keras.python.keras.backend.y_pred->tensorflow.python.ops.math_ops.log(array_ops.transpose(y_pred, perm=[1, 0, 2]) + 1e-08)
A:tensorflow.contrib.keras.python.keras.backend.(decoded, log_prob)->tensorflow.python.ops.ctc_ops.ctc_beam_search_decoder(inputs=y_pred, sequence_length=input_length, beam_width=beam_width, top_paths=top_paths)
A:tensorflow.contrib.keras.python.keras.backend._keras_base_dir->os.path.expanduser('~')
A:tensorflow.contrib.keras.python.keras.backend._keras_dir->os.path.join(_keras_base_dir, '.keras')
A:tensorflow.contrib.keras.python.keras.backend._config_path->os.path.expanduser(os.path.join(_keras_dir, 'keras.json'))
A:tensorflow.contrib.keras.python.keras.backend._config->json.load(open(_config_path))
A:tensorflow.contrib.keras.python.keras.backend._floatx->json.load(open(_config_path)).get('floatx', floatx())
A:tensorflow.contrib.keras.python.keras.backend._epsilon->json.load(open(_config_path)).get('epsilon', epsilon())
A:tensorflow.contrib.keras.python.keras.backend._image_data_format->json.load(open(_config_path)).get('image_data_format', image_data_format())
tensorflow.contrib.keras.backend.Function(self,inputs,outputs,updates=None)
tensorflow.contrib.keras.backend._convert_string_dtype(dtype)
tensorflow.contrib.keras.backend._initialize_variables()
tensorflow.contrib.keras.backend._normalize_axis(axis,ndim)
tensorflow.contrib.keras.backend._postprocess_conv2d_output(x,data_format)
tensorflow.contrib.keras.backend._postprocess_conv3d_output(x,data_format)
tensorflow.contrib.keras.backend._preprocess_conv2d_input(x,data_format)
tensorflow.contrib.keras.backend._preprocess_conv2d_kernel(kernel,data_format)
tensorflow.contrib.keras.backend._preprocess_conv3d_input(x,data_format)
tensorflow.contrib.keras.backend._preprocess_conv3d_kernel(kernel,data_format)
tensorflow.contrib.keras.backend._preprocess_deconv_output_shape(x,shape,data_format)
tensorflow.contrib.keras.backend._preprocess_padding(padding)
tensorflow.contrib.keras.backend._to_tensor(x,dtype)
tensorflow.contrib.keras.backend.abs(x)
tensorflow.contrib.keras.backend.all(x,axis=None,keepdims=False)
tensorflow.contrib.keras.backend.any(x,axis=None,keepdims=False)
tensorflow.contrib.keras.backend.arange(start,stop=None,step=1,dtype='int32')
tensorflow.contrib.keras.backend.argmax(x,axis=-1)
tensorflow.contrib.keras.backend.argmin(x,axis=-1)
tensorflow.contrib.keras.backend.backend()
tensorflow.contrib.keras.backend.batch_dot(x,y,axes=None)
tensorflow.contrib.keras.backend.batch_flatten(x)
tensorflow.contrib.keras.backend.batch_get_value(tensors)
tensorflow.contrib.keras.backend.batch_normalization(x,mean,var,beta,gamma,epsilon=0.001)
tensorflow.contrib.keras.backend.batch_set_value(tuples)
tensorflow.contrib.keras.backend.bias_add(x,bias,data_format=None)
tensorflow.contrib.keras.backend.binary_crossentropy(output,target,from_logits=False)
tensorflow.contrib.keras.backend.cast(x,dtype)
tensorflow.contrib.keras.backend.cast_to_floatx(x)
tensorflow.contrib.keras.backend.categorical_crossentropy(output,target,from_logits=False)
tensorflow.contrib.keras.backend.clear_session()
tensorflow.contrib.keras.backend.clip(x,min_value,max_value)
tensorflow.contrib.keras.backend.concatenate(tensors,axis=-1)
tensorflow.contrib.keras.backend.constant(value,dtype=None,shape=None,name=None)
tensorflow.contrib.keras.backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
tensorflow.contrib.keras.backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
tensorflow.contrib.keras.backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None)
tensorflow.contrib.keras.backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))
tensorflow.contrib.keras.backend.cos(x)
tensorflow.contrib.keras.backend.count_params(x)
tensorflow.contrib.keras.backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
tensorflow.contrib.keras.backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1)
tensorflow.contrib.keras.backend.ctc_label_dense_to_sparse(labels,label_lengths)
tensorflow.contrib.keras.backend.dot(x,y)
tensorflow.contrib.keras.backend.dropout(x,level,noise_shape=None,seed=None)
tensorflow.contrib.keras.backend.dtype(x)
tensorflow.contrib.keras.backend.elu(x,alpha=1.0)
tensorflow.contrib.keras.backend.epsilon()
tensorflow.contrib.keras.backend.equal(x,y)
tensorflow.contrib.keras.backend.eval(x)
tensorflow.contrib.keras.backend.exp(x)
tensorflow.contrib.keras.backend.expand_dims(x,axis=-1)
tensorflow.contrib.keras.backend.eye(size,dtype=None,name=None)
tensorflow.contrib.keras.backend.flatten(x)
tensorflow.contrib.keras.backend.floatx()
tensorflow.contrib.keras.backend.foldl(fn,elems,initializer=None,name=None)
tensorflow.contrib.keras.backend.foldr(fn,elems,initializer=None,name=None)
tensorflow.contrib.keras.backend.function(inputs,outputs,updates=None,**kwargs)
tensorflow.contrib.keras.backend.gather(reference,indices)
tensorflow.contrib.keras.backend.get_session()
tensorflow.contrib.keras.backend.get_uid(prefix='')
tensorflow.contrib.keras.backend.get_value(x)
tensorflow.contrib.keras.backend.gradients(loss,variables)
tensorflow.contrib.keras.backend.greater(x,y)
tensorflow.contrib.keras.backend.greater_equal(x,y)
tensorflow.contrib.keras.backend.hard_sigmoid(x)
tensorflow.contrib.keras.backend.image_data_format()
tensorflow.contrib.keras.backend.in_test_phase(x,alt,training=None)
tensorflow.contrib.keras.backend.in_top_k(predictions,targets,k)
tensorflow.contrib.keras.backend.in_train_phase(x,alt,training=None)
tensorflow.contrib.keras.backend.int_shape(x)
tensorflow.contrib.keras.backend.is_sparse(tensor)
tensorflow.contrib.keras.backend.l2_normalize(x,axis)
tensorflow.contrib.keras.backend.learning_phase()
tensorflow.contrib.keras.backend.less(x,y)
tensorflow.contrib.keras.backend.less_equal(x,y)
tensorflow.contrib.keras.backend.log(x)
tensorflow.contrib.keras.backend.manual_variable_initialization(value)
tensorflow.contrib.keras.backend.map_fn(fn,elems,name=None)
tensorflow.contrib.keras.backend.max(x,axis=None,keepdims=False)
tensorflow.contrib.keras.backend.maximum(x,y)
tensorflow.contrib.keras.backend.mean(x,axis=None,keepdims=False)
tensorflow.contrib.keras.backend.min(x,axis=None,keepdims=False)
tensorflow.contrib.keras.backend.minimum(x,y)
tensorflow.contrib.keras.backend.moving_average_update(x,value,momentum)
tensorflow.contrib.keras.backend.ndim(x)
tensorflow.contrib.keras.backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
tensorflow.contrib.keras.backend.not_equal(x,y)
tensorflow.contrib.keras.backend.one_hot(indices,num_classes)
tensorflow.contrib.keras.backend.ones(shape,dtype=None,name=None)
tensorflow.contrib.keras.backend.ones_like(x,dtype=None,name=None)
tensorflow.contrib.keras.backend.permute_dimensions(x,pattern)
tensorflow.contrib.keras.backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None)
tensorflow.contrib.keras.backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')
tensorflow.contrib.keras.backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')
tensorflow.contrib.keras.backend.pow(x,a)
tensorflow.contrib.keras.backend.print_tensor(x,message='')
tensorflow.contrib.keras.backend.prod(x,axis=None,keepdims=False)
tensorflow.contrib.keras.backend.random_binomial(shape,p=0.0,dtype=None,seed=None)
tensorflow.contrib.keras.backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
tensorflow.contrib.keras.backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)
tensorflow.contrib.keras.backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
tensorflow.contrib.keras.backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)
tensorflow.contrib.keras.backend.relu(x,alpha=0.0,max_value=None)
tensorflow.contrib.keras.backend.repeat(x,n)
tensorflow.contrib.keras.backend.repeat_elements(x,rep,axis)
tensorflow.contrib.keras.backend.reset_uids()
tensorflow.contrib.keras.backend.reshape(x,shape)
tensorflow.contrib.keras.backend.resize_images(x,height_factor,width_factor,data_format)
tensorflow.contrib.keras.backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
tensorflow.contrib.keras.backend.reverse(x,axes)
tensorflow.contrib.keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False)
tensorflow.contrib.keras.backend.round(x)
tensorflow.contrib.keras.backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
tensorflow.contrib.keras.backend.set_epsilon(value)
tensorflow.contrib.keras.backend.set_floatx(value)
tensorflow.contrib.keras.backend.set_image_data_format(data_format)
tensorflow.contrib.keras.backend.set_learning_phase(value)
tensorflow.contrib.keras.backend.set_session(session)
tensorflow.contrib.keras.backend.set_value(x,value)
tensorflow.contrib.keras.backend.shape(x)
tensorflow.contrib.keras.backend.sigmoid(x)
tensorflow.contrib.keras.backend.sign(x)
tensorflow.contrib.keras.backend.sin(x)
tensorflow.contrib.keras.backend.softmax(x)
tensorflow.contrib.keras.backend.softplus(x)
tensorflow.contrib.keras.backend.softsign(x)
tensorflow.contrib.keras.backend.sparse_categorical_crossentropy(output,target,from_logits=False)
tensorflow.contrib.keras.backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
tensorflow.contrib.keras.backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
tensorflow.contrib.keras.backend.sqrt(x)
tensorflow.contrib.keras.backend.square(x)
tensorflow.contrib.keras.backend.squeeze(x,axis)
tensorflow.contrib.keras.backend.stack(x,axis=0)
tensorflow.contrib.keras.backend.std(x,axis=None,keepdims=False)
tensorflow.contrib.keras.backend.stop_gradient(variables)
tensorflow.contrib.keras.backend.sum(x,axis=None,keepdims=False)
tensorflow.contrib.keras.backend.switch(condition,then_expression,else_expression)
tensorflow.contrib.keras.backend.tanh(x)
tensorflow.contrib.keras.backend.temporal_padding(x,padding=(1,1))
tensorflow.contrib.keras.backend.tile(x,n)
tensorflow.contrib.keras.backend.to_dense(tensor)
tensorflow.contrib.keras.backend.transpose(x)
tensorflow.contrib.keras.backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
tensorflow.contrib.keras.backend.update(x,new_x)
tensorflow.contrib.keras.backend.update_add(x,increment)
tensorflow.contrib.keras.backend.update_sub(x,decrement)
tensorflow.contrib.keras.backend.var(x,axis=None,keepdims=False)
tensorflow.contrib.keras.backend.variable(value,dtype=None,name=None)
tensorflow.contrib.keras.backend.zeros(shape,dtype=None,name=None)
tensorflow.contrib.keras.backend.zeros_like(x,dtype=None,name=None)
tensorflow.contrib.keras.python.keras.backend.Function(self,inputs,outputs,updates=None)
tensorflow.contrib.keras.python.keras.backend.Function.__init__(self,inputs,outputs,updates=None)
tensorflow.contrib.keras.python.keras.backend._convert_string_dtype(dtype)
tensorflow.contrib.keras.python.keras.backend._initialize_variables()
tensorflow.contrib.keras.python.keras.backend._normalize_axis(axis,ndim)
tensorflow.contrib.keras.python.keras.backend._postprocess_conv2d_output(x,data_format)
tensorflow.contrib.keras.python.keras.backend._postprocess_conv3d_output(x,data_format)
tensorflow.contrib.keras.python.keras.backend._preprocess_conv2d_input(x,data_format)
tensorflow.contrib.keras.python.keras.backend._preprocess_conv2d_kernel(kernel,data_format)
tensorflow.contrib.keras.python.keras.backend._preprocess_conv3d_input(x,data_format)
tensorflow.contrib.keras.python.keras.backend._preprocess_conv3d_kernel(kernel,data_format)
tensorflow.contrib.keras.python.keras.backend._preprocess_deconv_output_shape(x,shape,data_format)
tensorflow.contrib.keras.python.keras.backend._preprocess_padding(padding)
tensorflow.contrib.keras.python.keras.backend._to_tensor(x,dtype)
tensorflow.contrib.keras.python.keras.backend.abs(x)
tensorflow.contrib.keras.python.keras.backend.all(x,axis=None,keepdims=False)
tensorflow.contrib.keras.python.keras.backend.any(x,axis=None,keepdims=False)
tensorflow.contrib.keras.python.keras.backend.arange(start,stop=None,step=1,dtype='int32')
tensorflow.contrib.keras.python.keras.backend.argmax(x,axis=-1)
tensorflow.contrib.keras.python.keras.backend.argmin(x,axis=-1)
tensorflow.contrib.keras.python.keras.backend.backend()
tensorflow.contrib.keras.python.keras.backend.batch_dot(x,y,axes=None)
tensorflow.contrib.keras.python.keras.backend.batch_flatten(x)
tensorflow.contrib.keras.python.keras.backend.batch_get_value(tensors)
tensorflow.contrib.keras.python.keras.backend.batch_normalization(x,mean,var,beta,gamma,epsilon=0.001)
tensorflow.contrib.keras.python.keras.backend.batch_set_value(tuples)
tensorflow.contrib.keras.python.keras.backend.bias_add(x,bias,data_format=None)
tensorflow.contrib.keras.python.keras.backend.binary_crossentropy(output,target,from_logits=False)
tensorflow.contrib.keras.python.keras.backend.cast(x,dtype)
tensorflow.contrib.keras.python.keras.backend.cast_to_floatx(x)
tensorflow.contrib.keras.python.keras.backend.categorical_crossentropy(output,target,from_logits=False)
tensorflow.contrib.keras.python.keras.backend.clear_session()
tensorflow.contrib.keras.python.keras.backend.clip(x,min_value,max_value)
tensorflow.contrib.keras.python.keras.backend.concatenate(tensors,axis=-1)
tensorflow.contrib.keras.python.keras.backend.constant(value,dtype=None,shape=None,name=None)
tensorflow.contrib.keras.python.keras.backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)
tensorflow.contrib.keras.python.keras.backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
tensorflow.contrib.keras.python.keras.backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None)
tensorflow.contrib.keras.python.keras.backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))
tensorflow.contrib.keras.python.keras.backend.cos(x)
tensorflow.contrib.keras.python.keras.backend.count_params(x)
tensorflow.contrib.keras.python.keras.backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)
tensorflow.contrib.keras.python.keras.backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1)
tensorflow.contrib.keras.python.keras.backend.ctc_label_dense_to_sparse(labels,label_lengths)
tensorflow.contrib.keras.python.keras.backend.dot(x,y)
tensorflow.contrib.keras.python.keras.backend.dropout(x,level,noise_shape=None,seed=None)
tensorflow.contrib.keras.python.keras.backend.dtype(x)
tensorflow.contrib.keras.python.keras.backend.elu(x,alpha=1.0)
tensorflow.contrib.keras.python.keras.backend.epsilon()
tensorflow.contrib.keras.python.keras.backend.equal(x,y)
tensorflow.contrib.keras.python.keras.backend.eval(x)
tensorflow.contrib.keras.python.keras.backend.exp(x)
tensorflow.contrib.keras.python.keras.backend.expand_dims(x,axis=-1)
tensorflow.contrib.keras.python.keras.backend.eye(size,dtype=None,name=None)
tensorflow.contrib.keras.python.keras.backend.flatten(x)
tensorflow.contrib.keras.python.keras.backend.floatx()
tensorflow.contrib.keras.python.keras.backend.foldl(fn,elems,initializer=None,name=None)
tensorflow.contrib.keras.python.keras.backend.foldr(fn,elems,initializer=None,name=None)
tensorflow.contrib.keras.python.keras.backend.function(inputs,outputs,updates=None,**kwargs)
tensorflow.contrib.keras.python.keras.backend.gather(reference,indices)
tensorflow.contrib.keras.python.keras.backend.get_session()
tensorflow.contrib.keras.python.keras.backend.get_uid(prefix='')
tensorflow.contrib.keras.python.keras.backend.get_value(x)
tensorflow.contrib.keras.python.keras.backend.gradients(loss,variables)
tensorflow.contrib.keras.python.keras.backend.greater(x,y)
tensorflow.contrib.keras.python.keras.backend.greater_equal(x,y)
tensorflow.contrib.keras.python.keras.backend.hard_sigmoid(x)
tensorflow.contrib.keras.python.keras.backend.image_data_format()
tensorflow.contrib.keras.python.keras.backend.in_test_phase(x,alt,training=None)
tensorflow.contrib.keras.python.keras.backend.in_top_k(predictions,targets,k)
tensorflow.contrib.keras.python.keras.backend.in_train_phase(x,alt,training=None)
tensorflow.contrib.keras.python.keras.backend.int_shape(x)
tensorflow.contrib.keras.python.keras.backend.is_sparse(tensor)
tensorflow.contrib.keras.python.keras.backend.l2_normalize(x,axis)
tensorflow.contrib.keras.python.keras.backend.learning_phase()
tensorflow.contrib.keras.python.keras.backend.less(x,y)
tensorflow.contrib.keras.python.keras.backend.less_equal(x,y)
tensorflow.contrib.keras.python.keras.backend.log(x)
tensorflow.contrib.keras.python.keras.backend.manual_variable_initialization(value)
tensorflow.contrib.keras.python.keras.backend.map_fn(fn,elems,name=None)
tensorflow.contrib.keras.python.keras.backend.max(x,axis=None,keepdims=False)
tensorflow.contrib.keras.python.keras.backend.maximum(x,y)
tensorflow.contrib.keras.python.keras.backend.mean(x,axis=None,keepdims=False)
tensorflow.contrib.keras.python.keras.backend.min(x,axis=None,keepdims=False)
tensorflow.contrib.keras.python.keras.backend.minimum(x,y)
tensorflow.contrib.keras.python.keras.backend.moving_average_update(x,value,momentum)
tensorflow.contrib.keras.python.keras.backend.ndim(x)
tensorflow.contrib.keras.python.keras.backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)
tensorflow.contrib.keras.python.keras.backend.not_equal(x,y)
tensorflow.contrib.keras.python.keras.backend.one_hot(indices,num_classes)
tensorflow.contrib.keras.python.keras.backend.ones(shape,dtype=None,name=None)
tensorflow.contrib.keras.python.keras.backend.ones_like(x,dtype=None,name=None)
tensorflow.contrib.keras.python.keras.backend.permute_dimensions(x,pattern)
tensorflow.contrib.keras.python.keras.backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None)
tensorflow.contrib.keras.python.keras.backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')
tensorflow.contrib.keras.python.keras.backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')
tensorflow.contrib.keras.python.keras.backend.pow(x,a)
tensorflow.contrib.keras.python.keras.backend.print_tensor(x,message='')
tensorflow.contrib.keras.python.keras.backend.prod(x,axis=None,keepdims=False)
tensorflow.contrib.keras.python.keras.backend.random_binomial(shape,p=0.0,dtype=None,seed=None)
tensorflow.contrib.keras.python.keras.backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
tensorflow.contrib.keras.python.keras.backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)
tensorflow.contrib.keras.python.keras.backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)
tensorflow.contrib.keras.python.keras.backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)
tensorflow.contrib.keras.python.keras.backend.relu(x,alpha=0.0,max_value=None)
tensorflow.contrib.keras.python.keras.backend.repeat(x,n)
tensorflow.contrib.keras.python.keras.backend.repeat_elements(x,rep,axis)
tensorflow.contrib.keras.python.keras.backend.reset_uids()
tensorflow.contrib.keras.python.keras.backend.reshape(x,shape)
tensorflow.contrib.keras.python.keras.backend.resize_images(x,height_factor,width_factor,data_format)
tensorflow.contrib.keras.python.keras.backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)
tensorflow.contrib.keras.python.keras.backend.reverse(x,axes)
tensorflow.contrib.keras.python.keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False)
tensorflow.contrib.keras.python.keras.backend.round(x)
tensorflow.contrib.keras.python.keras.backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))
tensorflow.contrib.keras.python.keras.backend.set_epsilon(value)
tensorflow.contrib.keras.python.keras.backend.set_floatx(value)
tensorflow.contrib.keras.python.keras.backend.set_image_data_format(data_format)
tensorflow.contrib.keras.python.keras.backend.set_learning_phase(value)
tensorflow.contrib.keras.python.keras.backend.set_session(session)
tensorflow.contrib.keras.python.keras.backend.set_value(x,value)
tensorflow.contrib.keras.python.keras.backend.shape(x)
tensorflow.contrib.keras.python.keras.backend.sigmoid(x)
tensorflow.contrib.keras.python.keras.backend.sign(x)
tensorflow.contrib.keras.python.keras.backend.sin(x)
tensorflow.contrib.keras.python.keras.backend.softmax(x)
tensorflow.contrib.keras.python.keras.backend.softplus(x)
tensorflow.contrib.keras.python.keras.backend.softsign(x)
tensorflow.contrib.keras.python.keras.backend.sparse_categorical_crossentropy(output,target,from_logits=False)
tensorflow.contrib.keras.python.keras.backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)
tensorflow.contrib.keras.python.keras.backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)
tensorflow.contrib.keras.python.keras.backend.sqrt(x)
tensorflow.contrib.keras.python.keras.backend.square(x)
tensorflow.contrib.keras.python.keras.backend.squeeze(x,axis)
tensorflow.contrib.keras.python.keras.backend.stack(x,axis=0)
tensorflow.contrib.keras.python.keras.backend.std(x,axis=None,keepdims=False)
tensorflow.contrib.keras.python.keras.backend.stop_gradient(variables)
tensorflow.contrib.keras.python.keras.backend.sum(x,axis=None,keepdims=False)
tensorflow.contrib.keras.python.keras.backend.switch(condition,then_expression,else_expression)
tensorflow.contrib.keras.python.keras.backend.tanh(x)
tensorflow.contrib.keras.python.keras.backend.temporal_padding(x,padding=(1,1))
tensorflow.contrib.keras.python.keras.backend.tile(x,n)
tensorflow.contrib.keras.python.keras.backend.to_dense(tensor)
tensorflow.contrib.keras.python.keras.backend.transpose(x)
tensorflow.contrib.keras.python.keras.backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)
tensorflow.contrib.keras.python.keras.backend.update(x,new_x)
tensorflow.contrib.keras.python.keras.backend.update_add(x,increment)
tensorflow.contrib.keras.python.keras.backend.update_sub(x,decrement)
tensorflow.contrib.keras.python.keras.backend.var(x,axis=None,keepdims=False)
tensorflow.contrib.keras.python.keras.backend.variable(value,dtype=None,name=None)
tensorflow.contrib.keras.python.keras.backend.zeros(shape,dtype=None,name=None)
tensorflow.contrib.keras.python.keras.backend.zeros_like(x,dtype=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/callbacks.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.callbacks.self._delta_ts_batch_begin->deque([], maxlen=self.queue_length)
A:tensorflow.contrib.keras.python.keras.callbacks.self._delta_ts_batch_end->deque([], maxlen=self.queue_length)
A:tensorflow.contrib.keras.python.keras.callbacks.t_before_callbacks->time.time()
A:tensorflow.contrib.keras.python.keras.callbacks.delta_t_median->numpy.median(self._delta_ts_batch_end)
A:tensorflow.contrib.keras.python.keras.callbacks.self._t_enter_batch->time.time()
A:tensorflow.contrib.keras.python.keras.callbacks.batch_size->logs.get('size', 0)
A:tensorflow.contrib.keras.python.keras.callbacks.self.progbar->Progbar(target=self.target, verbose=self.verbose)
A:tensorflow.contrib.keras.python.keras.callbacks.filepath->self.filepath.format(epoch=epoch, **logs)
A:tensorflow.contrib.keras.python.keras.callbacks.current->logs.get(self.monitor)
A:tensorflow.contrib.keras.python.keras.callbacks.lr->self.schedule(epoch)
A:tensorflow.contrib.keras.python.keras.callbacks.self.sess->tensorflow.contrib.keras.python.keras.backend.get_session()
A:tensorflow.contrib.keras.python.keras.callbacks.w_img->tensorflow.python.ops.array_ops.expand_dims(array_ops.expand_dims(w_img, 0), -1)
A:tensorflow.contrib.keras.python.keras.callbacks.shape->tensorflow.python.ops.array_ops.expand_dims(array_ops.expand_dims(w_img, 0), -1).get_shape()
A:tensorflow.contrib.keras.python.keras.callbacks.self.merged->tensorflow.python.summary.summary.merge_all()
A:tensorflow.contrib.keras.python.keras.callbacks.self.writer->csv.DictWriter(self.csv_file, fieldnames=['epoch'] + self.keys, dialect=CustomDialect)
A:tensorflow.contrib.keras.python.keras.callbacks.self.saver->tensorflow.python.training.saver.Saver()
A:tensorflow.contrib.keras.python.keras.callbacks.config->tensorflow.contrib.tensorboard.plugins.projector.ProjectorConfig()
A:tensorflow.contrib.keras.python.keras.callbacks.embedding->tensorflow.contrib.tensorboard.plugins.projector.ProjectorConfig().embeddings.add()
A:tensorflow.contrib.keras.python.keras.callbacks.cut_v_data->len(self.model.inputs)
A:tensorflow.contrib.keras.python.keras.callbacks.feed_dict->dict(zip(tensors, val_data))
A:tensorflow.contrib.keras.python.keras.callbacks.result->self.sess.run([self.merged], feed_dict=feed_dict)
A:tensorflow.contrib.keras.python.keras.callbacks.summary->tensorflow.python.summary.summary.Summary()
A:tensorflow.contrib.keras.python.keras.callbacks.summary_value->tensorflow.python.summary.summary.Summary().value.add()
A:tensorflow.contrib.keras.python.keras.callbacks.summary_value.simple_value->value.item()
A:tensorflow.contrib.keras.python.keras.callbacks.logs['lr']->tensorflow.contrib.keras.python.keras.backend.get_value(self.model.optimizer.lr)
A:tensorflow.contrib.keras.python.keras.callbacks.old_lr->float(K.get_value(self.model.optimizer.lr))
A:tensorflow.contrib.keras.python.keras.callbacks.new_lr->max(new_lr, self.min_lr)
A:tensorflow.contrib.keras.python.keras.callbacks.self.csv_file->open(self.filename, 'w')
A:tensorflow.contrib.keras.python.keras.callbacks.self.keys->sorted(logs.keys())
A:tensorflow.contrib.keras.python.keras.callbacks.row_dict->OrderedDict({'epoch': epoch})
tensorflow.contrib.keras.callbacks.BaseLogger(Callback)
tensorflow.contrib.keras.callbacks.BaseLogger.on_batch_end(self,batch,logs=None)
tensorflow.contrib.keras.callbacks.BaseLogger.on_epoch_begin(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.BaseLogger.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.CSVLogger(self,filename,separator=',',append=False)
tensorflow.contrib.keras.callbacks.CSVLogger.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.CSVLogger.on_train_begin(self,logs=None)
tensorflow.contrib.keras.callbacks.CSVLogger.on_train_end(self,logs=None)
tensorflow.contrib.keras.callbacks.Callback(self)
tensorflow.contrib.keras.callbacks.Callback.on_batch_begin(self,batch,logs=None)
tensorflow.contrib.keras.callbacks.Callback.on_batch_end(self,batch,logs=None)
tensorflow.contrib.keras.callbacks.Callback.on_epoch_begin(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.Callback.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.Callback.on_train_begin(self,logs=None)
tensorflow.contrib.keras.callbacks.Callback.on_train_end(self,logs=None)
tensorflow.contrib.keras.callbacks.Callback.set_model(self,model)
tensorflow.contrib.keras.callbacks.Callback.set_params(self,params)
tensorflow.contrib.keras.callbacks.CallbackList(self,callbacks=None,queue_length=10)
tensorflow.contrib.keras.callbacks.CallbackList.__iter__(self)
tensorflow.contrib.keras.callbacks.CallbackList.append(self,callback)
tensorflow.contrib.keras.callbacks.CallbackList.on_batch_begin(self,batch,logs=None)
tensorflow.contrib.keras.callbacks.CallbackList.on_batch_end(self,batch,logs=None)
tensorflow.contrib.keras.callbacks.CallbackList.on_epoch_begin(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.CallbackList.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.CallbackList.on_train_begin(self,logs=None)
tensorflow.contrib.keras.callbacks.CallbackList.on_train_end(self,logs=None)
tensorflow.contrib.keras.callbacks.CallbackList.set_model(self,model)
tensorflow.contrib.keras.callbacks.CallbackList.set_params(self,params)
tensorflow.contrib.keras.callbacks.EarlyStopping(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto')
tensorflow.contrib.keras.callbacks.EarlyStopping.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.EarlyStopping.on_train_begin(self,logs=None)
tensorflow.contrib.keras.callbacks.EarlyStopping.on_train_end(self,logs=None)
tensorflow.contrib.keras.callbacks.History(Callback)
tensorflow.contrib.keras.callbacks.History.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.History.on_train_begin(self,logs=None)
tensorflow.contrib.keras.callbacks.LambdaCallback(self,on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)
tensorflow.contrib.keras.callbacks.LearningRateScheduler(self,schedule)
tensorflow.contrib.keras.callbacks.LearningRateScheduler.on_epoch_begin(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.ModelCheckpoint(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',period=1)
tensorflow.contrib.keras.callbacks.ModelCheckpoint.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.ProgbarLogger(self,count_mode='samples')
tensorflow.contrib.keras.callbacks.ProgbarLogger.on_batch_begin(self,batch,logs=None)
tensorflow.contrib.keras.callbacks.ProgbarLogger.on_batch_end(self,batch,logs=None)
tensorflow.contrib.keras.callbacks.ProgbarLogger.on_epoch_begin(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.ProgbarLogger.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.ProgbarLogger.on_train_begin(self,logs=None)
tensorflow.contrib.keras.callbacks.ReduceLROnPlateau(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',epsilon=0.0001,cooldown=0,min_lr=0)
tensorflow.contrib.keras.callbacks.ReduceLROnPlateau._reset(self)
tensorflow.contrib.keras.callbacks.ReduceLROnPlateau.in_cooldown(self)
tensorflow.contrib.keras.callbacks.ReduceLROnPlateau.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.ReduceLROnPlateau.on_train_begin(self,logs=None)
tensorflow.contrib.keras.callbacks.RemoteMonitor(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None)
tensorflow.contrib.keras.callbacks.RemoteMonitor.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.TensorBoard(self,log_dir='./logs',histogram_freq=0,write_graph=True,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None)
tensorflow.contrib.keras.callbacks.TensorBoard.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.callbacks.TensorBoard.on_train_end(self,_)
tensorflow.contrib.keras.callbacks.TensorBoard.set_model(self,model)
tensorflow.contrib.keras.python.keras.callbacks.BaseLogger(Callback)
tensorflow.contrib.keras.python.keras.callbacks.BaseLogger.on_batch_end(self,batch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.BaseLogger.on_epoch_begin(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.BaseLogger.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.CSVLogger(self,filename,separator=',',append=False)
tensorflow.contrib.keras.python.keras.callbacks.CSVLogger.__init__(self,filename,separator=',',append=False)
tensorflow.contrib.keras.python.keras.callbacks.CSVLogger.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.CSVLogger.on_train_begin(self,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.CSVLogger.on_train_end(self,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.Callback(self)
tensorflow.contrib.keras.python.keras.callbacks.Callback.__init__(self)
tensorflow.contrib.keras.python.keras.callbacks.Callback.on_batch_begin(self,batch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.Callback.on_batch_end(self,batch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.Callback.on_epoch_begin(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.Callback.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.Callback.on_train_begin(self,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.Callback.on_train_end(self,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.Callback.set_model(self,model)
tensorflow.contrib.keras.python.keras.callbacks.Callback.set_params(self,params)
tensorflow.contrib.keras.python.keras.callbacks.CallbackList(self,callbacks=None,queue_length=10)
tensorflow.contrib.keras.python.keras.callbacks.CallbackList.__init__(self,callbacks=None,queue_length=10)
tensorflow.contrib.keras.python.keras.callbacks.CallbackList.__iter__(self)
tensorflow.contrib.keras.python.keras.callbacks.CallbackList.append(self,callback)
tensorflow.contrib.keras.python.keras.callbacks.CallbackList.on_batch_begin(self,batch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.CallbackList.on_batch_end(self,batch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.CallbackList.on_epoch_begin(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.CallbackList.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.CallbackList.on_train_begin(self,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.CallbackList.on_train_end(self,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.CallbackList.set_model(self,model)
tensorflow.contrib.keras.python.keras.callbacks.CallbackList.set_params(self,params)
tensorflow.contrib.keras.python.keras.callbacks.EarlyStopping(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto')
tensorflow.contrib.keras.python.keras.callbacks.EarlyStopping.__init__(self,monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto')
tensorflow.contrib.keras.python.keras.callbacks.EarlyStopping.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.EarlyStopping.on_train_begin(self,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.EarlyStopping.on_train_end(self,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.History(Callback)
tensorflow.contrib.keras.python.keras.callbacks.History.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.History.on_train_begin(self,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.LambdaCallback(self,on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)
tensorflow.contrib.keras.python.keras.callbacks.LambdaCallback.__init__(self,on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)
tensorflow.contrib.keras.python.keras.callbacks.LearningRateScheduler(self,schedule)
tensorflow.contrib.keras.python.keras.callbacks.LearningRateScheduler.__init__(self,schedule)
tensorflow.contrib.keras.python.keras.callbacks.LearningRateScheduler.on_epoch_begin(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.ModelCheckpoint(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',period=1)
tensorflow.contrib.keras.python.keras.callbacks.ModelCheckpoint.__init__(self,filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',period=1)
tensorflow.contrib.keras.python.keras.callbacks.ModelCheckpoint.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.ProgbarLogger(self,count_mode='samples')
tensorflow.contrib.keras.python.keras.callbacks.ProgbarLogger.__init__(self,count_mode='samples')
tensorflow.contrib.keras.python.keras.callbacks.ProgbarLogger.on_batch_begin(self,batch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.ProgbarLogger.on_batch_end(self,batch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.ProgbarLogger.on_epoch_begin(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.ProgbarLogger.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.ProgbarLogger.on_train_begin(self,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.ReduceLROnPlateau(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',epsilon=0.0001,cooldown=0,min_lr=0)
tensorflow.contrib.keras.python.keras.callbacks.ReduceLROnPlateau.__init__(self,monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',epsilon=0.0001,cooldown=0,min_lr=0)
tensorflow.contrib.keras.python.keras.callbacks.ReduceLROnPlateau._reset(self)
tensorflow.contrib.keras.python.keras.callbacks.ReduceLROnPlateau.in_cooldown(self)
tensorflow.contrib.keras.python.keras.callbacks.ReduceLROnPlateau.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.ReduceLROnPlateau.on_train_begin(self,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.RemoteMonitor(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None)
tensorflow.contrib.keras.python.keras.callbacks.RemoteMonitor.__init__(self,root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None)
tensorflow.contrib.keras.python.keras.callbacks.RemoteMonitor.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.TensorBoard(self,log_dir='./logs',histogram_freq=0,write_graph=True,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None)
tensorflow.contrib.keras.python.keras.callbacks.TensorBoard.__init__(self,log_dir='./logs',histogram_freq=0,write_graph=True,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None)
tensorflow.contrib.keras.python.keras.callbacks.TensorBoard.on_epoch_end(self,epoch,logs=None)
tensorflow.contrib.keras.python.keras.callbacks.TensorBoard.on_train_end(self,_)
tensorflow.contrib.keras.python.keras.callbacks.TensorBoard.set_model(self,model)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/initializers.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.initializers.mode->mode.lower().lower()
A:tensorflow.contrib.keras.python.keras.initializers.distribution->distribution.lower().lower()
A:tensorflow.contrib.keras.python.keras.initializers.(fan_in, fan_out)->_compute_fans(shape)
A:tensorflow.contrib.keras.python.keras.initializers.stddev->math.sqrt(scale)
A:tensorflow.contrib.keras.python.keras.initializers.limit->math.sqrt(3.0 * scale)
A:tensorflow.contrib.keras.python.keras.initializers.a->numpy.random.normal(0.0, 1.0, flat_shape)
A:tensorflow.contrib.keras.python.keras.initializers.(u, _, v)->numpy.linalg.svd(a, full_matrices=False)
A:tensorflow.contrib.keras.python.keras.initializers.q->q.reshape(shape).reshape(shape)
A:tensorflow.contrib.keras.python.keras.initializers.shape->tensorflow.python.framework.tensor_shape.TensorShape(shape).as_list()
A:tensorflow.contrib.keras.python.keras.initializers.receptive_field_size->numpy.prod(shape[:2])
A:tensorflow.contrib.keras.python.keras.initializers.fan_in->math.sqrt(np.prod(shape))
A:tensorflow.contrib.keras.python.keras.initializers.fan_out->math.sqrt(np.prod(shape))
tensorflow.contrib.keras.initializers.Constant(self,value=0)
tensorflow.contrib.keras.initializers.Constant.get_config(self)
tensorflow.contrib.keras.initializers.Identity(self,gain=1.0)
tensorflow.contrib.keras.initializers.Identity.get_config(self)
tensorflow.contrib.keras.initializers.Initializer(self,shape,dtype=None)
tensorflow.contrib.keras.initializers.Initializer.from_config(cls,config)
tensorflow.contrib.keras.initializers.Initializer.get_config(self)
tensorflow.contrib.keras.initializers.Ones(self,shape,dtype=None)
tensorflow.contrib.keras.initializers.Orthogonal(self,gain=1.0,seed=None)
tensorflow.contrib.keras.initializers.Orthogonal.get_config(self)
tensorflow.contrib.keras.initializers.RandomNormal(self,mean=0.0,stddev=0.05,seed=None)
tensorflow.contrib.keras.initializers.RandomNormal.get_config(self)
tensorflow.contrib.keras.initializers.RandomUniform(self,minval=-0.05,maxval=0.05,seed=None)
tensorflow.contrib.keras.initializers.RandomUniform.get_config(self)
tensorflow.contrib.keras.initializers.TruncatedNormal(self,mean=0.0,stddev=0.05,seed=None)
tensorflow.contrib.keras.initializers.TruncatedNormal.get_config(self)
tensorflow.contrib.keras.initializers.VarianceScaling(self,scale=1.0,mode='fan_in',distribution='normal',seed=None)
tensorflow.contrib.keras.initializers.VarianceScaling.get_config(self)
tensorflow.contrib.keras.initializers.Zeros(self,shape,dtype=None)
tensorflow.contrib.keras.initializers._compute_fans(shape,data_format='channels_last')
tensorflow.contrib.keras.initializers.deserialize(config,custom_objects=None)
tensorflow.contrib.keras.initializers.get(identifier)
tensorflow.contrib.keras.initializers.glorot_normal(seed=None)
tensorflow.contrib.keras.initializers.glorot_uniform(seed=None)
tensorflow.contrib.keras.initializers.he_normal(seed=None)
tensorflow.contrib.keras.initializers.he_uniform(seed=None)
tensorflow.contrib.keras.initializers.lecun_uniform(seed=None)
tensorflow.contrib.keras.initializers.serialize(initializer)
tensorflow.contrib.keras.python.keras.initializers.Constant(self,value=0)
tensorflow.contrib.keras.python.keras.initializers.Constant.__init__(self,value=0)
tensorflow.contrib.keras.python.keras.initializers.Constant.get_config(self)
tensorflow.contrib.keras.python.keras.initializers.Identity(self,gain=1.0)
tensorflow.contrib.keras.python.keras.initializers.Identity.__init__(self,gain=1.0)
tensorflow.contrib.keras.python.keras.initializers.Identity.get_config(self)
tensorflow.contrib.keras.python.keras.initializers.Initializer(self,shape,dtype=None)
tensorflow.contrib.keras.python.keras.initializers.Initializer.__call__(self,shape,dtype=None)
tensorflow.contrib.keras.python.keras.initializers.Initializer.from_config(cls,config)
tensorflow.contrib.keras.python.keras.initializers.Initializer.get_config(self)
tensorflow.contrib.keras.python.keras.initializers.Ones(self,shape,dtype=None)
tensorflow.contrib.keras.python.keras.initializers.Ones.__call__(self,shape,dtype=None)
tensorflow.contrib.keras.python.keras.initializers.Orthogonal(self,gain=1.0,seed=None)
tensorflow.contrib.keras.python.keras.initializers.Orthogonal.__init__(self,gain=1.0,seed=None)
tensorflow.contrib.keras.python.keras.initializers.Orthogonal.get_config(self)
tensorflow.contrib.keras.python.keras.initializers.RandomNormal(self,mean=0.0,stddev=0.05,seed=None)
tensorflow.contrib.keras.python.keras.initializers.RandomNormal.__init__(self,mean=0.0,stddev=0.05,seed=None)
tensorflow.contrib.keras.python.keras.initializers.RandomNormal.get_config(self)
tensorflow.contrib.keras.python.keras.initializers.RandomUniform(self,minval=-0.05,maxval=0.05,seed=None)
tensorflow.contrib.keras.python.keras.initializers.RandomUniform.__init__(self,minval=-0.05,maxval=0.05,seed=None)
tensorflow.contrib.keras.python.keras.initializers.RandomUniform.get_config(self)
tensorflow.contrib.keras.python.keras.initializers.TruncatedNormal(self,mean=0.0,stddev=0.05,seed=None)
tensorflow.contrib.keras.python.keras.initializers.TruncatedNormal.__init__(self,mean=0.0,stddev=0.05,seed=None)
tensorflow.contrib.keras.python.keras.initializers.TruncatedNormal.get_config(self)
tensorflow.contrib.keras.python.keras.initializers.VarianceScaling(self,scale=1.0,mode='fan_in',distribution='normal',seed=None)
tensorflow.contrib.keras.python.keras.initializers.VarianceScaling.__init__(self,scale=1.0,mode='fan_in',distribution='normal',seed=None)
tensorflow.contrib.keras.python.keras.initializers.VarianceScaling.get_config(self)
tensorflow.contrib.keras.python.keras.initializers.Zeros(self,shape,dtype=None)
tensorflow.contrib.keras.python.keras.initializers.Zeros.__call__(self,shape,dtype=None)
tensorflow.contrib.keras.python.keras.initializers._compute_fans(shape,data_format='channels_last')
tensorflow.contrib.keras.python.keras.initializers.deserialize(config,custom_objects=None)
tensorflow.contrib.keras.python.keras.initializers.get(identifier)
tensorflow.contrib.keras.python.keras.initializers.glorot_normal(seed=None)
tensorflow.contrib.keras.python.keras.initializers.glorot_uniform(seed=None)
tensorflow.contrib.keras.python.keras.initializers.he_normal(seed=None)
tensorflow.contrib.keras.python.keras.initializers.he_uniform(seed=None)
tensorflow.contrib.keras.python.keras.initializers.lecun_uniform(seed=None)
tensorflow.contrib.keras.python.keras.initializers.serialize(initializer)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/activations.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.activations.ndim->tensorflow.contrib.keras.python.keras.backend.ndim(x)
A:tensorflow.contrib.keras.python.keras.activations.e->tensorflow.contrib.keras.python.keras.backend.exp(x - K.max(x, axis=-1, keepdims=True))
A:tensorflow.contrib.keras.python.keras.activations.s->tensorflow.contrib.keras.python.keras.backend.sum(e, axis=-1, keepdims=True)
A:tensorflow.contrib.keras.python.keras.activations.identifier->str(identifier)
tensorflow.contrib.keras.activations.deserialize(name,custom_objects=None)
tensorflow.contrib.keras.activations.elu(x,alpha=1.0)
tensorflow.contrib.keras.activations.get(identifier)
tensorflow.contrib.keras.activations.hard_sigmoid(x)
tensorflow.contrib.keras.activations.linear(x)
tensorflow.contrib.keras.activations.relu(x,alpha=0.0,max_value=None)
tensorflow.contrib.keras.activations.serialize(activation)
tensorflow.contrib.keras.activations.sigmoid(x)
tensorflow.contrib.keras.activations.softmax(x)
tensorflow.contrib.keras.activations.softplus(x)
tensorflow.contrib.keras.activations.softsign(x)
tensorflow.contrib.keras.activations.tanh(x)
tensorflow.contrib.keras.python.keras.activations.deserialize(name,custom_objects=None)
tensorflow.contrib.keras.python.keras.activations.elu(x,alpha=1.0)
tensorflow.contrib.keras.python.keras.activations.get(identifier)
tensorflow.contrib.keras.python.keras.activations.hard_sigmoid(x)
tensorflow.contrib.keras.python.keras.activations.linear(x)
tensorflow.contrib.keras.python.keras.activations.relu(x,alpha=0.0,max_value=None)
tensorflow.contrib.keras.python.keras.activations.serialize(activation)
tensorflow.contrib.keras.python.keras.activations.sigmoid(x)
tensorflow.contrib.keras.python.keras.activations.softmax(x)
tensorflow.contrib.keras.python.keras.activations.softplus(x)
tensorflow.contrib.keras.python.keras.activations.softsign(x)
tensorflow.contrib.keras.python.keras.activations.tanh(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/constraints.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.constraints.norms->tensorflow.contrib.keras.python.keras.backend.sqrt(K.sum(K.square(w), axis=self.axis, keepdims=True))
A:tensorflow.contrib.keras.python.keras.constraints.desired->tensorflow.contrib.keras.python.keras.backend.clip(norms, 0, self.max_value)
tensorflow.contrib.keras.constraints.Constraint(self,w)
tensorflow.contrib.keras.constraints.Constraint.get_config(self)
tensorflow.contrib.keras.constraints.MaxNorm(self,max_value=2,axis=0)
tensorflow.contrib.keras.constraints.MaxNorm.get_config(self)
tensorflow.contrib.keras.constraints.MinMaxNorm(self,min_value=0.0,max_value=1.0,rate=1.0,axis=0)
tensorflow.contrib.keras.constraints.MinMaxNorm.get_config(self)
tensorflow.contrib.keras.constraints.NonNeg(self,w)
tensorflow.contrib.keras.constraints.UnitNorm(self,axis=0)
tensorflow.contrib.keras.constraints.UnitNorm.get_config(self)
tensorflow.contrib.keras.constraints.deserialize(config,custom_objects=None)
tensorflow.contrib.keras.constraints.get(identifier)
tensorflow.contrib.keras.constraints.serialize(constraint)
tensorflow.contrib.keras.python.keras.constraints.Constraint(self,w)
tensorflow.contrib.keras.python.keras.constraints.Constraint.__call__(self,w)
tensorflow.contrib.keras.python.keras.constraints.Constraint.get_config(self)
tensorflow.contrib.keras.python.keras.constraints.MaxNorm(self,max_value=2,axis=0)
tensorflow.contrib.keras.python.keras.constraints.MaxNorm.__init__(self,max_value=2,axis=0)
tensorflow.contrib.keras.python.keras.constraints.MaxNorm.get_config(self)
tensorflow.contrib.keras.python.keras.constraints.MinMaxNorm(self,min_value=0.0,max_value=1.0,rate=1.0,axis=0)
tensorflow.contrib.keras.python.keras.constraints.MinMaxNorm.__init__(self,min_value=0.0,max_value=1.0,rate=1.0,axis=0)
tensorflow.contrib.keras.python.keras.constraints.MinMaxNorm.get_config(self)
tensorflow.contrib.keras.python.keras.constraints.NonNeg(self,w)
tensorflow.contrib.keras.python.keras.constraints.NonNeg.__call__(self,w)
tensorflow.contrib.keras.python.keras.constraints.UnitNorm(self,axis=0)
tensorflow.contrib.keras.python.keras.constraints.UnitNorm.__init__(self,axis=0)
tensorflow.contrib.keras.python.keras.constraints.UnitNorm.get_config(self)
tensorflow.contrib.keras.python.keras.constraints.deserialize(config,custom_objects=None)
tensorflow.contrib.keras.python.keras.constraints.get(identifier)
tensorflow.contrib.keras.python.keras.constraints.serialize(constraint)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/preprocessing/image.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.preprocessing.image.rotation_matrix->numpy.array([[np.cos(theta), -np.sin(theta), 0], [np.sin(theta), np.cos(theta), 0], [0, 0, 1]])
A:tensorflow.contrib.keras.python.keras.preprocessing.image.transform_matrix->transform_matrix_offset_center(transform_matrix, h, w)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.x->self.image_data_generator.standardize(x)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.translation_matrix->numpy.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])
A:tensorflow.contrib.keras.python.keras.preprocessing.image.shear->numpy.random.uniform(-self.shear_range, self.shear_range)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.shear_matrix->numpy.array([[1, -np.sin(shear), 0], [0, np.cos(shear), 0], [0, 0, 1]])
A:tensorflow.contrib.keras.python.keras.preprocessing.image.(zx, zy)->numpy.random.uniform(self.zoom_range[0], self.zoom_range[1], 2)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.zoom_matrix->numpy.array([[zx, 0, 0], [0, zy, 0], [0, 0, 1]])
A:tensorflow.contrib.keras.python.keras.preprocessing.image.offset_matrix->numpy.array([[1, 0, o_x], [0, 1, o_y], [0, 0, 1]])
A:tensorflow.contrib.keras.python.keras.preprocessing.image.reset_matrix->numpy.array([[1, 0, -o_x], [0, 1, -o_y], [0, 0, 1]])
A:tensorflow.contrib.keras.python.keras.preprocessing.image.data_format->tensorflow.contrib.keras.python.keras.backend.image_data_format()
A:tensorflow.contrib.keras.python.keras.preprocessing.image.x_max->numpy.max(x)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.img->array_to_img(batch_x[i], self.data_format, scale=True)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.flatx->numpy.reshape(x, x.size)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.whitex->numpy.dot(flatx, self.principal_components)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.shift_matrix->numpy.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])
A:tensorflow.contrib.keras.python.keras.preprocessing.image.ax->numpy.zeros(tuple([rounds * x.shape[0]] + list(x.shape)[1:]), dtype=K.floatx())
A:tensorflow.contrib.keras.python.keras.preprocessing.image.ax[i + r * x.shape[0]]->self.random_transform(x[i])
A:tensorflow.contrib.keras.python.keras.preprocessing.image.self.mean->numpy.reshape(self.mean, broadcast_shape)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.self.std->numpy.reshape(self.std, broadcast_shape)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.flat_x->numpy.reshape(x, (x.shape[0], x.shape[1] * x.shape[2] * x.shape[3]))
A:tensorflow.contrib.keras.python.keras.preprocessing.image.(u, s, _)->scipy.linalg.svd(sigma)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.self.principal_components->numpy.dot(np.dot(u, np.diag(1.0 / np.sqrt(s + 1e-06))), u.T)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.self.lock->threading.Lock()
A:tensorflow.contrib.keras.python.keras.preprocessing.image.self.index_generator->self._flow_index(n, batch_size, shuffle, seed)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.index_array->numpy.random.permutation(n)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.self.x->numpy.asarray(x, dtype=K.floatx())
A:tensorflow.contrib.keras.python.keras.preprocessing.image.self.y->numpy.asarray(y)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.(index_array, current_index, current_batch_size)->next(self.index_generator)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.batch_x->numpy.zeros((current_batch_size,) + self.image_shape, dtype=K.floatx())
A:tensorflow.contrib.keras.python.keras.preprocessing.image.fname->'{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix, index=current_index + i, hash=np.random.randint(10000.0), format=self.save_format)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.self.target_size->tuple(target_size)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.self.num_class->len(classes)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.self.class_indices->dict(zip(classes, range(len(classes))))
A:tensorflow.contrib.keras.python.keras.preprocessing.image.subpath->os.path.join(directory, subdir)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.self.classes->numpy.zeros((self.samples,), dtype='int32')
A:tensorflow.contrib.keras.python.keras.preprocessing.image.absolute_path->os.path.join(root, fname)
A:tensorflow.contrib.keras.python.keras.preprocessing.image.batch_y->numpy.zeros((len(batch_x), self.num_class), dtype=K.floatx())
tensorflow.contrib.keras.preprocessing.image.DirectoryIterator(self,directory,image_data_generator,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='jpeg',follow_links=False)
tensorflow.contrib.keras.preprocessing.image.DirectoryIterator.next(self)
tensorflow.contrib.keras.preprocessing.image.ImageDataGenerator(self,featurewise_center=False,samplewise_center=False,featurewise_std_normalization=False,samplewise_std_normalization=False,zca_whitening=False,rotation_range=0.0,width_shift_range=0.0,height_shift_range=0.0,shear_range=0.0,zoom_range=0.0,channel_shift_range=0.0,fill_mode='nearest',cval=0.0,horizontal_flip=False,vertical_flip=False,rescale=None,preprocessing_function=None,data_format=None)
tensorflow.contrib.keras.preprocessing.image.ImageDataGenerator.fit(self,x,augment=False,rounds=1,seed=None)
tensorflow.contrib.keras.preprocessing.image.ImageDataGenerator.flow(self,x,y=None,batch_size=32,shuffle=True,seed=None,save_to_dir=None,save_prefix='',save_format='jpeg')
tensorflow.contrib.keras.preprocessing.image.ImageDataGenerator.flow_from_directory(self,directory,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,save_to_dir=None,save_prefix='',save_format='jpeg',follow_links=False)
tensorflow.contrib.keras.preprocessing.image.ImageDataGenerator.random_transform(self,x)
tensorflow.contrib.keras.preprocessing.image.ImageDataGenerator.standardize(self,x)
tensorflow.contrib.keras.preprocessing.image.Iterator(self,n,batch_size,shuffle,seed)
tensorflow.contrib.keras.preprocessing.image.Iterator.__iter__(self)
tensorflow.contrib.keras.preprocessing.image.Iterator.__next__(self,*args,**kwargs)
tensorflow.contrib.keras.preprocessing.image.Iterator._flow_index(self,n,batch_size=32,shuffle=False,seed=None)
tensorflow.contrib.keras.preprocessing.image.Iterator.reset(self)
tensorflow.contrib.keras.preprocessing.image.NumpyArrayIterator(self,x,y,image_data_generator,batch_size=32,shuffle=False,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='jpeg')
tensorflow.contrib.keras.preprocessing.image.NumpyArrayIterator.next(self)
tensorflow.contrib.keras.preprocessing.image.apply_transform(x,transform_matrix,channel_axis=0,fill_mode='nearest',cval=0.0)
tensorflow.contrib.keras.preprocessing.image.array_to_img(x,data_format=None,scale=True)
tensorflow.contrib.keras.preprocessing.image.flip_axis(x,axis)
tensorflow.contrib.keras.preprocessing.image.img_to_array(img,data_format=None)
tensorflow.contrib.keras.preprocessing.image.list_pictures(directory,ext='jpg|jpeg|bmp|png')
tensorflow.contrib.keras.preprocessing.image.load_img(path,grayscale=False,target_size=None)
tensorflow.contrib.keras.preprocessing.image.random_channel_shift(x,intensity,channel_axis=0)
tensorflow.contrib.keras.preprocessing.image.random_rotation(x,rg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0)
tensorflow.contrib.keras.preprocessing.image.random_shear(x,intensity,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0)
tensorflow.contrib.keras.preprocessing.image.random_shift(x,wrg,hrg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0)
tensorflow.contrib.keras.preprocessing.image.random_zoom(x,zoom_range,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0)
tensorflow.contrib.keras.preprocessing.image.transform_matrix_offset_center(matrix,x,y)
tensorflow.contrib.keras.python.keras.preprocessing.image.DirectoryIterator(self,directory,image_data_generator,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='jpeg',follow_links=False)
tensorflow.contrib.keras.python.keras.preprocessing.image.DirectoryIterator.__init__(self,directory,image_data_generator,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='jpeg',follow_links=False)
tensorflow.contrib.keras.python.keras.preprocessing.image.DirectoryIterator.next(self)
tensorflow.contrib.keras.python.keras.preprocessing.image.ImageDataGenerator(self,featurewise_center=False,samplewise_center=False,featurewise_std_normalization=False,samplewise_std_normalization=False,zca_whitening=False,rotation_range=0.0,width_shift_range=0.0,height_shift_range=0.0,shear_range=0.0,zoom_range=0.0,channel_shift_range=0.0,fill_mode='nearest',cval=0.0,horizontal_flip=False,vertical_flip=False,rescale=None,preprocessing_function=None,data_format=None)
tensorflow.contrib.keras.python.keras.preprocessing.image.ImageDataGenerator.__init__(self,featurewise_center=False,samplewise_center=False,featurewise_std_normalization=False,samplewise_std_normalization=False,zca_whitening=False,rotation_range=0.0,width_shift_range=0.0,height_shift_range=0.0,shear_range=0.0,zoom_range=0.0,channel_shift_range=0.0,fill_mode='nearest',cval=0.0,horizontal_flip=False,vertical_flip=False,rescale=None,preprocessing_function=None,data_format=None)
tensorflow.contrib.keras.python.keras.preprocessing.image.ImageDataGenerator.fit(self,x,augment=False,rounds=1,seed=None)
tensorflow.contrib.keras.python.keras.preprocessing.image.ImageDataGenerator.flow(self,x,y=None,batch_size=32,shuffle=True,seed=None,save_to_dir=None,save_prefix='',save_format='jpeg')
tensorflow.contrib.keras.python.keras.preprocessing.image.ImageDataGenerator.flow_from_directory(self,directory,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,save_to_dir=None,save_prefix='',save_format='jpeg',follow_links=False)
tensorflow.contrib.keras.python.keras.preprocessing.image.ImageDataGenerator.random_transform(self,x)
tensorflow.contrib.keras.python.keras.preprocessing.image.ImageDataGenerator.standardize(self,x)
tensorflow.contrib.keras.python.keras.preprocessing.image.Iterator(self,n,batch_size,shuffle,seed)
tensorflow.contrib.keras.python.keras.preprocessing.image.Iterator.__init__(self,n,batch_size,shuffle,seed)
tensorflow.contrib.keras.python.keras.preprocessing.image.Iterator.__iter__(self)
tensorflow.contrib.keras.python.keras.preprocessing.image.Iterator.__next__(self,*args,**kwargs)
tensorflow.contrib.keras.python.keras.preprocessing.image.Iterator._flow_index(self,n,batch_size=32,shuffle=False,seed=None)
tensorflow.contrib.keras.python.keras.preprocessing.image.Iterator.reset(self)
tensorflow.contrib.keras.python.keras.preprocessing.image.NumpyArrayIterator(self,x,y,image_data_generator,batch_size=32,shuffle=False,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='jpeg')
tensorflow.contrib.keras.python.keras.preprocessing.image.NumpyArrayIterator.__init__(self,x,y,image_data_generator,batch_size=32,shuffle=False,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='jpeg')
tensorflow.contrib.keras.python.keras.preprocessing.image.NumpyArrayIterator.next(self)
tensorflow.contrib.keras.python.keras.preprocessing.image.apply_transform(x,transform_matrix,channel_axis=0,fill_mode='nearest',cval=0.0)
tensorflow.contrib.keras.python.keras.preprocessing.image.array_to_img(x,data_format=None,scale=True)
tensorflow.contrib.keras.python.keras.preprocessing.image.flip_axis(x,axis)
tensorflow.contrib.keras.python.keras.preprocessing.image.img_to_array(img,data_format=None)
tensorflow.contrib.keras.python.keras.preprocessing.image.list_pictures(directory,ext='jpg|jpeg|bmp|png')
tensorflow.contrib.keras.python.keras.preprocessing.image.load_img(path,grayscale=False,target_size=None)
tensorflow.contrib.keras.python.keras.preprocessing.image.random_channel_shift(x,intensity,channel_axis=0)
tensorflow.contrib.keras.python.keras.preprocessing.image.random_rotation(x,rg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0)
tensorflow.contrib.keras.python.keras.preprocessing.image.random_shear(x,intensity,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0)
tensorflow.contrib.keras.python.keras.preprocessing.image.random_shift(x,wrg,hrg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0)
tensorflow.contrib.keras.python.keras.preprocessing.image.random_zoom(x,zoom_range,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0)
tensorflow.contrib.keras.python.keras.preprocessing.image.transform_matrix_offset_center(matrix,x,y)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/preprocessing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/preprocessing/text.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.preprocessing.text.text->text.translate(maketrans(filters, split * len(filters))).translate(maketrans(filters, split * len(filters)))
A:tensorflow.contrib.keras.python.keras.preprocessing.text.seq->set(seq)
A:tensorflow.contrib.keras.python.keras.preprocessing.text.num_words->kwargs.pop('nb_words')
A:tensorflow.contrib.keras.python.keras.preprocessing.text.wcounts->list(self.word_counts.items())
A:tensorflow.contrib.keras.python.keras.preprocessing.text.self.word_index->dict(list(zip(sorted_voc, list(range(1, len(sorted_voc) + 1)))))
A:tensorflow.contrib.keras.python.keras.preprocessing.text.self.document_count->len(sequences)
A:tensorflow.contrib.keras.python.keras.preprocessing.text.i->self.word_index.get(w)
A:tensorflow.contrib.keras.python.keras.preprocessing.text.sequences->self.texts_to_sequences(texts)
A:tensorflow.contrib.keras.python.keras.preprocessing.text.x->numpy.zeros((len(sequences), num_words))
A:tensorflow.contrib.keras.python.keras.preprocessing.text.idf->numpy.log(1 + self.document_count / (1 + self.index_docs.get(j, 0)))
tensorflow.contrib.keras.preprocessing.text.Tokenizer(self,num_words=None,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='',char_level=False,**kwargs)
tensorflow.contrib.keras.preprocessing.text.Tokenizer.fit_on_sequences(self,sequences)
tensorflow.contrib.keras.preprocessing.text.Tokenizer.fit_on_texts(self,texts)
tensorflow.contrib.keras.preprocessing.text.Tokenizer.sequences_to_matrix(self,sequences,mode='binary')
tensorflow.contrib.keras.preprocessing.text.Tokenizer.texts_to_matrix(self,texts,mode='binary')
tensorflow.contrib.keras.preprocessing.text.Tokenizer.texts_to_sequences(self,texts)
tensorflow.contrib.keras.preprocessing.text.Tokenizer.texts_to_sequences_generator(self,texts)
tensorflow.contrib.keras.preprocessing.text.one_hot(text,n,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='')
tensorflow.contrib.keras.preprocessing.text.text_to_word_sequence(text,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='')
tensorflow.contrib.keras.python.keras.preprocessing.text.Tokenizer(self,num_words=None,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='',char_level=False,**kwargs)
tensorflow.contrib.keras.python.keras.preprocessing.text.Tokenizer.__init__(self,num_words=None,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='',char_level=False,**kwargs)
tensorflow.contrib.keras.python.keras.preprocessing.text.Tokenizer.fit_on_sequences(self,sequences)
tensorflow.contrib.keras.python.keras.preprocessing.text.Tokenizer.fit_on_texts(self,texts)
tensorflow.contrib.keras.python.keras.preprocessing.text.Tokenizer.sequences_to_matrix(self,sequences,mode='binary')
tensorflow.contrib.keras.python.keras.preprocessing.text.Tokenizer.texts_to_matrix(self,texts,mode='binary')
tensorflow.contrib.keras.python.keras.preprocessing.text.Tokenizer.texts_to_sequences(self,texts)
tensorflow.contrib.keras.python.keras.preprocessing.text.Tokenizer.texts_to_sequences_generator(self,texts)
tensorflow.contrib.keras.python.keras.preprocessing.text.one_hot(text,n,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='')
tensorflow.contrib.keras.python.keras.preprocessing.text.text_to_word_sequence(text,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/preprocessing/sequence.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.preprocessing.sequence.num_samples->len(sequences)
A:tensorflow.contrib.keras.python.keras.preprocessing.sequence.maxlen->numpy.max(lengths)
A:tensorflow.contrib.keras.python.keras.preprocessing.sequence.sample_shape->tuple()
A:tensorflow.contrib.keras.python.keras.preprocessing.sequence.x->(np.ones((num_samples, maxlen) + sample_shape) * value).astype(dtype)
A:tensorflow.contrib.keras.python.keras.preprocessing.sequence.trunc->numpy.asarray(trunc, dtype=dtype)
A:tensorflow.contrib.keras.python.keras.preprocessing.sequence.rank->numpy.array(list(range(size)))
A:tensorflow.contrib.keras.python.keras.preprocessing.sequence.window_start->max(0, i - window_size)
A:tensorflow.contrib.keras.python.keras.preprocessing.sequence.window_end->min(len(sequence), i + window_size + 1)
A:tensorflow.contrib.keras.python.keras.preprocessing.sequence.num_negative_samples->int(len(labels) * negative_samples)
A:tensorflow.contrib.keras.python.keras.preprocessing.sequence.seed->random.randint(0, 10000000.0)
tensorflow.contrib.keras.preprocessing.sequence.make_sampling_table(size,sampling_factor=1e-05)
tensorflow.contrib.keras.preprocessing.sequence.pad_sequences(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0)
tensorflow.contrib.keras.preprocessing.sequence.skipgrams(sequence,vocabulary_size,window_size=4,negative_samples=1.0,shuffle=True,categorical=False,sampling_table=None)
tensorflow.contrib.keras.python.keras.preprocessing.sequence.make_sampling_table(size,sampling_factor=1e-05)
tensorflow.contrib.keras.python.keras.preprocessing.sequence.pad_sequences(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0)
tensorflow.contrib.keras.python.keras.preprocessing.sequence.skipgrams(sequence,vocabulary_size,window_size=4,negative_samples=1.0,shuffle=True,categorical=False,sampling_table=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/datasets/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/datasets/cifar.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.datasets.cifar.f->open(fpath, 'rb')
A:tensorflow.contrib.keras.python.keras.datasets.cifar.d->six.moves.cPickle.load(f, encoding='bytes')
A:tensorflow.contrib.keras.python.keras.datasets.cifar.data->data.reshape(data.shape[0], 3, 32, 32).reshape(data.shape[0], 3, 32, 32)
tensorflow.contrib.keras.datasets.cifar.load_batch(fpath,label_key='labels')
tensorflow.contrib.keras.python.keras.datasets.cifar.load_batch(fpath,label_key='labels')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/datasets/reuters.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.datasets.reuters.path->get_file(path, origin='https://s3.amazonaws.com/text-datasets/reuters_word_index.json')
A:tensorflow.contrib.keras.python.keras.datasets.reuters.npzfile->numpy.load(path)
A:tensorflow.contrib.keras.python.keras.datasets.reuters.num_words->max([max(x) for x in xs])
A:tensorflow.contrib.keras.python.keras.datasets.reuters.x_train->numpy.array(xs[:int(len(xs) * (1 - test_split))])
A:tensorflow.contrib.keras.python.keras.datasets.reuters.y_train->numpy.array(labels[:int(len(xs) * (1 - test_split))])
A:tensorflow.contrib.keras.python.keras.datasets.reuters.x_test->numpy.array(xs[int(len(xs) * (1 - test_split)):])
A:tensorflow.contrib.keras.python.keras.datasets.reuters.y_test->numpy.array(labels[int(len(xs) * (1 - test_split)):])
A:tensorflow.contrib.keras.python.keras.datasets.reuters.f->open(path)
A:tensorflow.contrib.keras.python.keras.datasets.reuters.data->json.load(f)
tensorflow.contrib.keras.datasets.reuters.get_word_index(path='reuters_word_index.json')
tensorflow.contrib.keras.datasets.reuters.load_data(path='reuters.npz',num_words=None,skip_top=0,maxlen=None,test_split=0.2,seed=113,start_char=1,oov_char=2,index_from=3)
tensorflow.contrib.keras.python.keras.datasets.reuters.get_word_index(path='reuters_word_index.json')
tensorflow.contrib.keras.python.keras.datasets.reuters.load_data(path='reuters.npz',num_words=None,skip_top=0,maxlen=None,test_split=0.2,seed=113,start_char=1,oov_char=2,index_from=3)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/datasets/cifar100.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.datasets.cifar100.path->get_file(dirname, origin=origin, untar=True)
A:tensorflow.contrib.keras.python.keras.datasets.cifar100.fpath->os.path.join(path, 'test')
A:tensorflow.contrib.keras.python.keras.datasets.cifar100.(x_train, y_train)->load_batch(fpath, label_key=label_mode + '_labels')
A:tensorflow.contrib.keras.python.keras.datasets.cifar100.(x_test, y_test)->load_batch(fpath, label_key=label_mode + '_labels')
A:tensorflow.contrib.keras.python.keras.datasets.cifar100.y_train->numpy.reshape(y_train, (len(y_train), 1))
A:tensorflow.contrib.keras.python.keras.datasets.cifar100.y_test->numpy.reshape(y_test, (len(y_test), 1))
A:tensorflow.contrib.keras.python.keras.datasets.cifar100.x_train->x_train.transpose(0, 2, 3, 1).transpose(0, 2, 3, 1)
A:tensorflow.contrib.keras.python.keras.datasets.cifar100.x_test->x_test.transpose(0, 2, 3, 1).transpose(0, 2, 3, 1)
tensorflow.contrib.keras.datasets.cifar100.load_data(label_mode='fine')
tensorflow.contrib.keras.python.keras.datasets.cifar100.load_data(label_mode='fine')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/datasets/mnist.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.datasets.mnist.path->get_file(path, origin='https://s3.amazonaws.com/img-datasets/mnist.npz')
A:tensorflow.contrib.keras.python.keras.datasets.mnist.f->numpy.load(path)
tensorflow.contrib.keras.datasets.mnist.load_data(path='mnist.npz')
tensorflow.contrib.keras.python.keras.datasets.mnist.load_data(path='mnist.npz')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/datasets/boston_housing.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.datasets.boston_housing.path->get_file(path, origin='https://s3.amazonaws.com/keras-datasets/boston_housing.npz')
A:tensorflow.contrib.keras.python.keras.datasets.boston_housing.f->numpy.load(path)
A:tensorflow.contrib.keras.python.keras.datasets.boston_housing.x_train->numpy.array(x[:int(len(x) * (1 - test_split))])
A:tensorflow.contrib.keras.python.keras.datasets.boston_housing.y_train->numpy.array(y[:int(len(x) * (1 - test_split))])
A:tensorflow.contrib.keras.python.keras.datasets.boston_housing.x_test->numpy.array(x[int(len(x) * (1 - test_split)):])
A:tensorflow.contrib.keras.python.keras.datasets.boston_housing.y_test->numpy.array(y[int(len(x) * (1 - test_split)):])
tensorflow.contrib.keras.datasets.boston_housing.load_data(path='boston_housing.npz',seed=113,test_split=0.2)
tensorflow.contrib.keras.python.keras.datasets.boston_housing.load_data(path='boston_housing.npz',seed=113,test_split=0.2)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/datasets/imdb.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.datasets.imdb.path->get_file(path, origin='https://s3.amazonaws.com/text-datasets/imdb_word_index.json')
A:tensorflow.contrib.keras.python.keras.datasets.imdb.f->open(path)
A:tensorflow.contrib.keras.python.keras.datasets.imdb.xs->numpy.concatenate([x_train, x_test])
A:tensorflow.contrib.keras.python.keras.datasets.imdb.labels->numpy.concatenate([labels_train, labels_test])
A:tensorflow.contrib.keras.python.keras.datasets.imdb.num_words->max([max(x) for x in xs])
A:tensorflow.contrib.keras.python.keras.datasets.imdb.x_train->numpy.array(xs[:len(x_train)])
A:tensorflow.contrib.keras.python.keras.datasets.imdb.y_train->numpy.array(labels[:len(x_train)])
A:tensorflow.contrib.keras.python.keras.datasets.imdb.x_test->numpy.array(xs[len(x_train):])
A:tensorflow.contrib.keras.python.keras.datasets.imdb.y_test->numpy.array(labels[len(x_train):])
A:tensorflow.contrib.keras.python.keras.datasets.imdb.data->json.load(f)
tensorflow.contrib.keras.datasets.imdb.get_word_index(path='imdb_word_index.json')
tensorflow.contrib.keras.datasets.imdb.load_data(path='imdb.npz',num_words=None,skip_top=0,maxlen=None,seed=113,start_char=1,oov_char=2,index_from=3)
tensorflow.contrib.keras.python.keras.datasets.imdb.get_word_index(path='imdb_word_index.json')
tensorflow.contrib.keras.python.keras.datasets.imdb.load_data(path='imdb.npz',num_words=None,skip_top=0,maxlen=None,seed=113,start_char=1,oov_char=2,index_from=3)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/datasets/cifar10.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.datasets.cifar10.path->get_file(dirname, origin=origin, untar=True)
A:tensorflow.contrib.keras.python.keras.datasets.cifar10.x_train->x_train.transpose(0, 2, 3, 1).transpose(0, 2, 3, 1)
A:tensorflow.contrib.keras.python.keras.datasets.cifar10.y_train->numpy.reshape(y_train, (len(y_train), 1))
A:tensorflow.contrib.keras.python.keras.datasets.cifar10.fpath->os.path.join(path, 'test_batch')
A:tensorflow.contrib.keras.python.keras.datasets.cifar10.(data, labels)->load_batch(fpath)
A:tensorflow.contrib.keras.python.keras.datasets.cifar10.(x_test, y_test)->load_batch(fpath)
A:tensorflow.contrib.keras.python.keras.datasets.cifar10.y_test->numpy.reshape(y_test, (len(y_test), 1))
A:tensorflow.contrib.keras.python.keras.datasets.cifar10.x_test->x_test.transpose(0, 2, 3, 1).transpose(0, 2, 3, 1)
tensorflow.contrib.keras.datasets.cifar10.load_data()
tensorflow.contrib.keras.python.keras.datasets.cifar10.load_data()


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/engine/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/engine/training.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.engine.training.array->numpy.expand_dims(array, 1)
A:tensorflow.contrib.keras.python.keras.engine.training.set_x->set(x_lengths)
A:tensorflow.contrib.keras.python.keras.engine.training.set_y->set(y_lengths)
A:tensorflow.contrib.keras.python.keras.engine.training.set_w->set(w_lengths)
A:tensorflow.contrib.keras.python.keras.engine.training.output_metrics->metrics.get(name, [])
A:tensorflow.contrib.keras.python.keras.engine.training.batch_count->int(len(index_array) / batch_size)
A:tensorflow.contrib.keras.python.keras.engine.training.index_array->numpy.arange(samples)
A:tensorflow.contrib.keras.python.keras.engine.training.num_batches->int(np.ceil(size / float(batch_size)))
A:tensorflow.contrib.keras.python.keras.engine.training.start->start.tolist().tolist()
A:tensorflow.contrib.keras.python.keras.engine.training.score_array->fn(y_true, y_pred)
A:tensorflow.contrib.keras.python.keras.engine.training.mask->tensorflow.contrib.keras.python.keras.backend.cast(mask, K.floatx())
A:tensorflow.contrib.keras.python.keras.engine.training.ndim->tensorflow.contrib.keras.python.keras.backend.ndim(score_array)
A:tensorflow.contrib.keras.python.keras.engine.training.weight_ndim->tensorflow.contrib.keras.python.keras.backend.ndim(weights)
A:tensorflow.contrib.keras.python.keras.engine.training.y_classes->numpy.reshape(y, y.shape[0])
A:tensorflow.contrib.keras.python.keras.engine.training.weights->numpy.asarray([class_weight[cls] for cls in y_classes])
A:tensorflow.contrib.keras.python.keras.engine.training.generator_output->GeneratorEnqueuer(generator, pickle_safe=pickle_safe).queue.get()
A:tensorflow.contrib.keras.python.keras.engine.training.self.queue->Queue.Queue()
A:tensorflow.contrib.keras.python.keras.engine.training.self._stop_event->threading.Event()
A:tensorflow.contrib.keras.python.keras.engine.training.thread->threading.Thread(target=data_generator_task)
A:tensorflow.contrib.keras.python.keras.engine.training.self.optimizer->tensorflow.contrib.keras.python.keras.optimizers.get(optimizer)
A:tensorflow.contrib.keras.python.keras.engine.training.loss_function->tensorflow.contrib.keras.python.keras.losses.get(loss)
A:tensorflow.contrib.keras.python.keras.engine.training.masks->self.compute_mask(self.inputs, mask=None)
A:tensorflow.contrib.keras.python.keras.engine.training.weight->tensorflow.contrib.keras.python.keras.backend.placeholder(ndim=1, name=name + '_sample_weights')
A:tensorflow.contrib.keras.python.keras.engine.training.target->tensorflow.contrib.keras.python.keras.backend.placeholder(ndim=len(shape), name=name + '_target', sparse=K.is_sparse(self.outputs[i]), dtype=K.dtype(self.outputs[i]))
A:tensorflow.contrib.keras.python.keras.engine.training.output_loss->weighted_loss(y_true, y_pred, sample_weight, mask)
A:tensorflow.contrib.keras.python.keras.engine.training.nested_metrics->_collect_metrics(metrics, self.output_names)
A:tensorflow.contrib.keras.python.keras.engine.training.masked_fn->_masked_objective(acc_fn)
A:tensorflow.contrib.keras.python.keras.engine.training.metric_fn->tensorflow.contrib.keras.python.keras.metrics.get(metric)
A:tensorflow.contrib.keras.python.keras.engine.training.masked_metric_fn->_masked_objective(metric_fn)
A:tensorflow.contrib.keras.python.keras.engine.training.metric_result->masked_metric_fn(y_true, y_pred, mask=masks[i])
A:tensorflow.contrib.keras.python.keras.engine.training.training_updates->self.optimizer.get_updates(self._collected_trainable_weights, self.constraints, self.total_loss)
A:tensorflow.contrib.keras.python.keras.engine.training.self.train_function->tensorflow.contrib.keras.python.keras.backend.function(inputs, [self.total_loss] + self.metrics_tensors, updates=updates)
A:tensorflow.contrib.keras.python.keras.engine.training.self.test_function->tensorflow.contrib.keras.python.keras.backend.function(inputs, [self.total_loss] + self.metrics_tensors, updates=self.state_updates)
A:tensorflow.contrib.keras.python.keras.engine.training.self.predict_function->tensorflow.contrib.keras.python.keras.backend.function(inputs, self.outputs, updates=self.state_updates)
A:tensorflow.contrib.keras.python.keras.engine.training.self.history->tensorflow.contrib.keras.python.keras.callbacks.History()
A:tensorflow.contrib.keras.python.keras.engine.training.callbacks->tensorflow.contrib.keras.python.keras.callbacks.CallbackList(callbacks)
A:tensorflow.contrib.keras.python.keras.engine.training.batches->_make_batches(samples, batch_size)
A:tensorflow.contrib.keras.python.keras.engine.training.ins_batch->_slice_arrays(ins, batch_ids)
A:tensorflow.contrib.keras.python.keras.engine.training.batch_logs['size']->len(batch_ids)
A:tensorflow.contrib.keras.python.keras.engine.training.outs->self.predict_on_batch(x)
A:tensorflow.contrib.keras.python.keras.engine.training.val_outs->self.evaluate(val_x, val_y, batch_size=batch_size, sample_weight=val_sample_weights, verbose=0)
A:tensorflow.contrib.keras.python.keras.engine.training.progbar->Progbar(target=samples)
A:tensorflow.contrib.keras.python.keras.engine.training.batch_outs->f(ins_batch)
A:tensorflow.contrib.keras.python.keras.engine.training.x->_standardize_input_data(x, self._feed_input_names, self._feed_input_shapes)
A:tensorflow.contrib.keras.python.keras.engine.training.y->_standardize_input_data(y, self._feed_output_names, output_shapes, check_batch_axis=False, exception_prefix='model target')
A:tensorflow.contrib.keras.python.keras.engine.training.sample_weights->_standardize_sample_weights(sample_weight, self._feed_output_names)
A:tensorflow.contrib.keras.python.keras.engine.training.class_weights->_standardize_class_weights(class_weight, self._feed_output_names)
A:tensorflow.contrib.keras.python.keras.engine.training.(x, y, sample_weights)->self._standardize_user_data(x, y, sample_weight=sample_weight, check_batch_axis=True)
A:tensorflow.contrib.keras.python.keras.engine.training.(val_x, val_y, val_sample_weights)->self._standardize_user_data(val_x, val_y, val_sample_weight)
A:tensorflow.contrib.keras.python.keras.engine.training.split_at->int(len(x[0]) * (1.0 - validation_split))
A:tensorflow.contrib.keras.python.keras.engine.training.dup_idx->out_labels[:i].count(label)
A:tensorflow.contrib.keras.python.keras.engine.training.callback_metrics->copy.copy(out_labels)
A:tensorflow.contrib.keras.python.keras.engine.training.outputs->self.predict_function(ins)
A:tensorflow.contrib.keras.python.keras.engine.training.do_validation->bool(validation_data)
A:tensorflow.contrib.keras.python.keras.engine.training.enqueuer->GeneratorEnqueuer(generator, pickle_safe=pickle_safe)
A:tensorflow.contrib.keras.python.keras.engine.training.batch_size->len(x)
tensorflow.contrib.keras.engine.Model(Container)
tensorflow.contrib.keras.engine.Model._fit_loop(self,f,ins,out_labels=None,batch_size=32,epochs=100,verbose=1,callbacks=None,val_f=None,val_ins=None,shuffle=True,callback_metrics=None,initial_epoch=0)
tensorflow.contrib.keras.engine.Model._make_predict_function(self)
tensorflow.contrib.keras.engine.Model._make_test_function(self)
tensorflow.contrib.keras.engine.Model._make_train_function(self)
tensorflow.contrib.keras.engine.Model._predict_loop(self,f,ins,batch_size=32,verbose=0)
tensorflow.contrib.keras.engine.Model._standardize_user_data(self,x,y,sample_weight=None,class_weight=None,check_batch_axis=True,batch_size=None)
tensorflow.contrib.keras.engine.Model._test_loop(self,f,ins,batch_size=32,verbose=0)
tensorflow.contrib.keras.engine.Model.compile(self,optimizer,loss,metrics=None,loss_weights=None,sample_weight_mode=None)
tensorflow.contrib.keras.engine.Model.evaluate(self,x,y,batch_size=32,verbose=1,sample_weight=None)
tensorflow.contrib.keras.engine.Model.evaluate_generator(self,generator,steps,max_q_size=10,workers=1,pickle_safe=False)
tensorflow.contrib.keras.engine.Model.fit(self,x=None,y=None,batch_size=32,epochs=1,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0)
tensorflow.contrib.keras.engine.Model.fit_generator(self,generator,steps_per_epoch,epochs=1,verbose=1,callbacks=None,validation_data=None,validation_steps=None,class_weight=None,max_q_size=10,workers=1,pickle_safe=False,initial_epoch=0)
tensorflow.contrib.keras.engine.Model.predict(self,x,batch_size=32,verbose=0)
tensorflow.contrib.keras.engine.Model.predict_generator(self,generator,steps,max_q_size=10,workers=1,pickle_safe=False)
tensorflow.contrib.keras.engine.Model.predict_on_batch(self,x)
tensorflow.contrib.keras.engine.Model.test_on_batch(self,x,y,sample_weight=None)
tensorflow.contrib.keras.engine.Model.train_on_batch(self,x,y,sample_weight=None,class_weight=None)
tensorflow.contrib.keras.engine.training.GeneratorEnqueuer(self,generator,pickle_safe=False)
tensorflow.contrib.keras.engine.training.GeneratorEnqueuer.is_running(self)
tensorflow.contrib.keras.engine.training.GeneratorEnqueuer.start(self,workers=1,max_q_size=10,wait_time=0.05)
tensorflow.contrib.keras.engine.training.GeneratorEnqueuer.stop(self,timeout=None)
tensorflow.contrib.keras.engine.training._batch_shuffle(index_array,batch_size)
tensorflow.contrib.keras.engine.training._check_array_lengths(inputs,targets,weights)
tensorflow.contrib.keras.engine.training._check_loss_and_target_compatibility(targets,loss_fns,output_shapes)
tensorflow.contrib.keras.engine.training._collect_metrics(metrics,output_names)
tensorflow.contrib.keras.engine.training._make_batches(size,batch_size)
tensorflow.contrib.keras.engine.training._masked_objective(fn)
tensorflow.contrib.keras.engine.training._slice_arrays(arrays,start=None,stop=None)
tensorflow.contrib.keras.engine.training._standardize_class_weights(class_weight,output_names)
tensorflow.contrib.keras.engine.training._standardize_input_data(data,names,shapes=None,check_batch_axis=True,exception_prefix='')
tensorflow.contrib.keras.engine.training._standardize_sample_or_class_weights(x_weight,output_names,weight_type)
tensorflow.contrib.keras.engine.training._standardize_sample_weights(sample_weight,output_names)
tensorflow.contrib.keras.engine.training._standardize_weights(y,sample_weight=None,class_weight=None,sample_weight_mode=None)
tensorflow.contrib.keras.engine.training._weighted_masked_objective(fn)
tensorflow.contrib.keras.python.keras.engine.training.GeneratorEnqueuer(self,generator,pickle_safe=False)
tensorflow.contrib.keras.python.keras.engine.training.GeneratorEnqueuer.__init__(self,generator,pickle_safe=False)
tensorflow.contrib.keras.python.keras.engine.training.GeneratorEnqueuer.is_running(self)
tensorflow.contrib.keras.python.keras.engine.training.GeneratorEnqueuer.start(self,workers=1,max_q_size=10,wait_time=0.05)
tensorflow.contrib.keras.python.keras.engine.training.GeneratorEnqueuer.stop(self,timeout=None)
tensorflow.contrib.keras.python.keras.engine.training.Model(Container)
tensorflow.contrib.keras.python.keras.engine.training.Model._fit_loop(self,f,ins,out_labels=None,batch_size=32,epochs=100,verbose=1,callbacks=None,val_f=None,val_ins=None,shuffle=True,callback_metrics=None,initial_epoch=0)
tensorflow.contrib.keras.python.keras.engine.training.Model._make_predict_function(self)
tensorflow.contrib.keras.python.keras.engine.training.Model._make_test_function(self)
tensorflow.contrib.keras.python.keras.engine.training.Model._make_train_function(self)
tensorflow.contrib.keras.python.keras.engine.training.Model._predict_loop(self,f,ins,batch_size=32,verbose=0)
tensorflow.contrib.keras.python.keras.engine.training.Model._standardize_user_data(self,x,y,sample_weight=None,class_weight=None,check_batch_axis=True,batch_size=None)
tensorflow.contrib.keras.python.keras.engine.training.Model._test_loop(self,f,ins,batch_size=32,verbose=0)
tensorflow.contrib.keras.python.keras.engine.training.Model.compile(self,optimizer,loss,metrics=None,loss_weights=None,sample_weight_mode=None)
tensorflow.contrib.keras.python.keras.engine.training.Model.evaluate(self,x,y,batch_size=32,verbose=1,sample_weight=None)
tensorflow.contrib.keras.python.keras.engine.training.Model.evaluate_generator(self,generator,steps,max_q_size=10,workers=1,pickle_safe=False)
tensorflow.contrib.keras.python.keras.engine.training.Model.fit(self,x=None,y=None,batch_size=32,epochs=1,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0)
tensorflow.contrib.keras.python.keras.engine.training.Model.fit_generator(self,generator,steps_per_epoch,epochs=1,verbose=1,callbacks=None,validation_data=None,validation_steps=None,class_weight=None,max_q_size=10,workers=1,pickle_safe=False,initial_epoch=0)
tensorflow.contrib.keras.python.keras.engine.training.Model.predict(self,x,batch_size=32,verbose=0)
tensorflow.contrib.keras.python.keras.engine.training.Model.predict_generator(self,generator,steps,max_q_size=10,workers=1,pickle_safe=False)
tensorflow.contrib.keras.python.keras.engine.training.Model.predict_on_batch(self,x)
tensorflow.contrib.keras.python.keras.engine.training.Model.test_on_batch(self,x,y,sample_weight=None)
tensorflow.contrib.keras.python.keras.engine.training.Model.train_on_batch(self,x,y,sample_weight=None,class_weight=None)
tensorflow.contrib.keras.python.keras.engine.training._batch_shuffle(index_array,batch_size)
tensorflow.contrib.keras.python.keras.engine.training._check_array_lengths(inputs,targets,weights)
tensorflow.contrib.keras.python.keras.engine.training._check_loss_and_target_compatibility(targets,loss_fns,output_shapes)
tensorflow.contrib.keras.python.keras.engine.training._collect_metrics(metrics,output_names)
tensorflow.contrib.keras.python.keras.engine.training._make_batches(size,batch_size)
tensorflow.contrib.keras.python.keras.engine.training._masked_objective(fn)
tensorflow.contrib.keras.python.keras.engine.training._slice_arrays(arrays,start=None,stop=None)
tensorflow.contrib.keras.python.keras.engine.training._standardize_class_weights(class_weight,output_names)
tensorflow.contrib.keras.python.keras.engine.training._standardize_input_data(data,names,shapes=None,check_batch_axis=True,exception_prefix='')
tensorflow.contrib.keras.python.keras.engine.training._standardize_sample_or_class_weights(x_weight,output_names,weight_type)
tensorflow.contrib.keras.python.keras.engine.training._standardize_sample_weights(sample_weight,output_names)
tensorflow.contrib.keras.python.keras.engine.training._standardize_weights(y,sample_weight=None,class_weight=None,sample_weight_mode=None)
tensorflow.contrib.keras.python.keras.engine.training._weighted_masked_objective(fn)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/engine/topology.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.engine.topology.self.ndim->len(shape)
A:tensorflow.contrib.keras.python.keras.engine.topology.name->str(w.name)
A:tensorflow.contrib.keras.python.keras.engine.topology.self.trainable->kwargs.get('trainable', True)
A:tensorflow.contrib.keras.python.keras.engine.topology.batch_input_shape->tuple(batch_input_shape)
A:tensorflow.contrib.keras.python.keras.engine.topology.dtype->tensorflow.contrib.keras.python.keras.backend.dtype(input_tensor)
A:tensorflow.contrib.keras.python.keras.engine.topology.trainable->getattr(self, 'trainable', True)
A:tensorflow.contrib.keras.python.keras.engine.topology.shape->tuple(tensor_shape.TensorShape(shape).as_list())
A:tensorflow.contrib.keras.python.keras.engine.topology.initializer->tensorflow.contrib.keras.python.keras.initializers.get(initializer)
A:tensorflow.contrib.keras.python.keras.engine.topology.weight->tensorflow.contrib.keras.python.keras.backend.variable(initializer(shape), dtype=K.floatx(), name=name)
A:tensorflow.contrib.keras.python.keras.engine.topology.input_spec->_to_list(self.input_spec)
A:tensorflow.contrib.keras.python.keras.engine.topology.inputs->_to_list(inputs)
A:tensorflow.contrib.keras.python.keras.engine.topology.ndim->tensorflow.contrib.keras.python.keras.backend.ndim(x)
A:tensorflow.contrib.keras.python.keras.engine.topology.x_shape->tensorflow.contrib.keras.python.keras.backend.int_shape(x)
A:tensorflow.contrib.keras.python.keras.engine.topology.previous_mask->_collect_previous_mask(inputs)
A:tensorflow.contrib.keras.python.keras.engine.topology.user_kwargs->copy.copy(kwargs)
A:tensorflow.contrib.keras.python.keras.engine.topology.output->self.call(inputs, **kwargs)
A:tensorflow.contrib.keras.python.keras.engine.topology.output_mask->self.compute_mask(inputs, previous_mask)
A:tensorflow.contrib.keras.python.keras.engine.topology.input_tensors->_to_list(input_tensors)
A:tensorflow.contrib.keras.python.keras.engine.topology.output_tensors->_to_list(layer.call(computed_tensors, **kwargs))
A:tensorflow.contrib.keras.python.keras.engine.topology.input_masks->_to_list(input_masks)
A:tensorflow.contrib.keras.python.keras.engine.topology.output_masks->_to_list(layer.compute_mask(computed_tensors, computed_masks))
A:tensorflow.contrib.keras.python.keras.engine.topology.uses_lp->any([getattr(x, '_uses_learning_phase', False) for x in input_tensors])
A:tensorflow.contrib.keras.python.keras.engine.topology.values->getattr(self.inbound_nodes[node_index], attr)
A:tensorflow.contrib.keras.python.keras.engine.topology.all_input_shapes->set([str(node.input_shapes) for node in self.inbound_nodes])
A:tensorflow.contrib.keras.python.keras.engine.topology.all_output_shapes->set([str(node.output_shapes) for node in self.inbound_nodes])
A:tensorflow.contrib.keras.python.keras.engine.topology.losses->_to_list(losses)
A:tensorflow.contrib.keras.python.keras.engine.topology.inputs_hash->_object_list_uid(inputs)
A:tensorflow.contrib.keras.python.keras.engine.topology.updates->_to_list(updates)
A:tensorflow.contrib.keras.python.keras.engine.topology.param_values->tensorflow.contrib.keras.python.keras.backend.batch_get_value(params)
A:tensorflow.contrib.keras.python.keras.engine.topology.input_tensor->tensorflow.contrib.keras.python.keras.backend.placeholder(shape=batch_input_shape, dtype=dtype, sparse=self.sparse, name=self.name)
A:tensorflow.contrib.keras.python.keras.engine.topology.input_layer->InputLayer(batch_input_shape=batch_shape, name=name, dtype=dtype, sparse=sparse, input_tensor=tensor)
A:tensorflow.contrib.keras.python.keras.engine.topology.prefix->self.__class__.__name__.lower()
A:tensorflow.contrib.keras.python.keras.engine.topology.self.inputs->list(inputs)
A:tensorflow.contrib.keras.python.keras.engine.topology.self.outputs->list(outputs)
A:tensorflow.contrib.keras.python.keras.engine.topology.inputs_set->set(self.inputs)
A:tensorflow.contrib.keras.python.keras.engine.topology.mask_cache_key->','.join([str(id(x)) for x in self.inputs])
A:tensorflow.contrib.keras.python.keras.engine.topology.container_nodes->set()
A:tensorflow.contrib.keras.python.keras.engine.topology.node_depth->nodes_depths.get(node)
A:tensorflow.contrib.keras.python.keras.engine.topology.nodes_depths[node]->max(depth, node_depth)
A:tensorflow.contrib.keras.python.keras.engine.topology.previously_seen_depth->layers_depths.get(layer)
A:tensorflow.contrib.keras.python.keras.engine.topology.current_depth->max(depth, previously_seen_depth)
A:tensorflow.contrib.keras.python.keras.engine.topology.layer_indices[layer]->len(layer_indices)
A:tensorflow.contrib.keras.python.keras.engine.topology.node_marker->make_node_marker(next_node, current_depth + 1)
A:tensorflow.contrib.keras.python.keras.engine.topology.seen_nodes->set()
A:tensorflow.contrib.keras.python.keras.engine.topology.depth_keys->list(self.nodes_by_depth.keys())
A:tensorflow.contrib.keras.python.keras.engine.topology.num_param->len(layer.weights)
A:tensorflow.contrib.keras.python.keras.engine.topology.masks->_to_list(mask)
A:tensorflow.contrib.keras.python.keras.engine.topology.cache_key->','.join([str(x) for x in input_shapes])
A:tensorflow.contrib.keras.python.keras.engine.topology.(output_tensors, _, _)->self.run_internal_graph(inputs, masks)
A:tensorflow.contrib.keras.python.keras.engine.topology.(_, output_masks, _)->self.run_internal_graph(inputs, masks)
A:tensorflow.contrib.keras.python.keras.engine.topology.output_shape->deserialize_layer(layer_data, custom_objects=custom_objects)._compute_output_shape(input_shapes)
A:tensorflow.contrib.keras.python.keras.engine.topology.node_index->deserialize_layer(layer_data, custom_objects=custom_objects).inbound_nodes.index(node)
A:tensorflow.contrib.keras.python.keras.engine.topology.uses_learning_phase->any([getattr(x, '_uses_learning_phase', False) for x in computed_tensors])
A:tensorflow.contrib.keras.python.keras.engine.topology.layer_config->deserialize_layer(layer_data, custom_objects=custom_objects).get_config()
A:tensorflow.contrib.keras.python.keras.engine.topology.new_node_index->node_conversion_map.get(node_key, 0)
A:tensorflow.contrib.keras.python.keras.engine.topology.layer->deserialize_layer(layer_data, custom_objects=custom_objects)
A:tensorflow.contrib.keras.python.keras.engine.topology.proceed->ask_to_proceed_with_overwrite(filepath)
A:tensorflow.contrib.keras.python.keras.engine.topology.f->h5py.File(filepath, mode='r')
A:tensorflow.contrib.keras.python.keras.engine.topology.config->self.get_config()
A:tensorflow.contrib.keras.python.keras.engine.topology.model_config->self._updated_config()
A:tensorflow.contrib.keras.python.keras.engine.topology.previous_sources->get_source_inputs(x, layer, node_index)
A:tensorflow.contrib.keras.python.keras.engine.topology.object_list->_to_list(object_list)
A:tensorflow.contrib.keras.python.keras.engine.topology.intermediate->re.sub('(.)([A-Z][a-z0-9]+)', '\\1_\\2', name)
A:tensorflow.contrib.keras.python.keras.engine.topology.insecure->re.sub('([a-z])([A-Z])', '\\1_\\2', intermediate).lower()
A:tensorflow.contrib.keras.python.keras.engine.topology.f.attrs['backend']->tensorflow.contrib.keras.python.keras.backend.backend().encode('utf8')
A:tensorflow.contrib.keras.python.keras.engine.topology.f.attrs['keras_version']->str(keras_version).encode('utf8')
A:tensorflow.contrib.keras.python.keras.engine.topology.g->h5py.File(filepath, mode='r').create_group(layer.name)
A:tensorflow.contrib.keras.python.keras.engine.topology.weight_values->preprocess_weights_for_loading(layer, weight_values, original_keras_version, original_backend)
A:tensorflow.contrib.keras.python.keras.engine.topology.param_dset->h5py.File(filepath, mode='r').create_group(layer.name).create_dataset(name, val.shape, dtype=val.dtype)
A:tensorflow.contrib.keras.python.keras.engine.topology.weights[0]->tensorflow.contrib.keras.python.keras.utils.conv_utils.convert_kernel(weights[0])
A:tensorflow.contrib.keras.python.keras.engine.topology.kernel->numpy.transpose(kernel, (2, 3, 1, 0))
A:tensorflow.contrib.keras.python.keras.engine.topology.recurrent_kernel->numpy.transpose(recurrent_kernel, (2, 3, 1, 0))
A:tensorflow.contrib.keras.python.keras.engine.topology.bias->numpy.concatenate([weights[2], weights[8], weights[5], weights[11]], axis=-1)
A:tensorflow.contrib.keras.python.keras.engine.topology.weights[1]->tensorflow.contrib.keras.python.keras.utils.conv_utils.convert_kernel(weights[1])
A:tensorflow.contrib.keras.python.keras.engine.topology.original_keras_version->h5py.File(filepath, mode='r').attrs['keras_version'].decode('utf8')
A:tensorflow.contrib.keras.python.keras.engine.topology.original_backend->h5py.File(filepath, mode='r').attrs['backend'].decode('utf8')
tensorflow.contrib.keras.engine.Input(shape=None,batch_shape=None,name=None,dtype=K.floatx(),sparse=False,tensor=None)
tensorflow.contrib.keras.engine.InputLayer(self,input_shape=None,batch_size=None,batch_input_shape=None,dtype=None,input_tensor=None,sparse=False,name=None)
tensorflow.contrib.keras.engine.InputLayer.get_config(self)
tensorflow.contrib.keras.engine.InputSpec(self,dtype=None,shape=None,ndim=None,max_ndim=None,min_ndim=None,axes=None)
tensorflow.contrib.keras.engine.Layer(self,**kwargs)
tensorflow.contrib.keras.engine.Layer._add_inbound_node(self,input_tensors,output_tensors,input_masks,output_masks,arguments=None)
tensorflow.contrib.keras.engine.Layer._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.engine.Layer._get_node_attribute_at_index(self,node_index,attr,attr_name)
tensorflow.contrib.keras.engine.Layer.add_loss(self,losses,inputs=None)
tensorflow.contrib.keras.engine.Layer.add_update(self,updates,inputs=None)
tensorflow.contrib.keras.engine.Layer.add_weight(self,shape,initializer,name=None,trainable=True,regularizer=None,constraint=None)
tensorflow.contrib.keras.engine.Layer.assert_input_compatibility(self,inputs)
tensorflow.contrib.keras.engine.Layer.build(self,input_shape)
tensorflow.contrib.keras.engine.Layer.built(self)
tensorflow.contrib.keras.engine.Layer.built(self,value)
tensorflow.contrib.keras.engine.Layer.call(self,inputs)
tensorflow.contrib.keras.engine.Layer.compute_mask(self,inputs,mask=None)
tensorflow.contrib.keras.engine.Layer.constraints(self)
tensorflow.contrib.keras.engine.Layer.constraints(self,constraints)
tensorflow.contrib.keras.engine.Layer.count_params(self)
tensorflow.contrib.keras.engine.Layer.from_config(cls,config)
tensorflow.contrib.keras.engine.Layer.get_config(self)
tensorflow.contrib.keras.engine.Layer.get_input_at(self,node_index)
tensorflow.contrib.keras.engine.Layer.get_input_mask_at(self,node_index)
tensorflow.contrib.keras.engine.Layer.get_input_shape_at(self,node_index)
tensorflow.contrib.keras.engine.Layer.get_losses_for(self,inputs)
tensorflow.contrib.keras.engine.Layer.get_output_at(self,node_index)
tensorflow.contrib.keras.engine.Layer.get_output_mask_at(self,node_index)
tensorflow.contrib.keras.engine.Layer.get_output_shape_at(self,node_index)
tensorflow.contrib.keras.engine.Layer.get_updates_for(self,inputs)
tensorflow.contrib.keras.engine.Layer.get_weights(self)
tensorflow.contrib.keras.engine.Layer.input(self)
tensorflow.contrib.keras.engine.Layer.input_mask(self)
tensorflow.contrib.keras.engine.Layer.input_shape(self)
tensorflow.contrib.keras.engine.Layer.losses(self)
tensorflow.contrib.keras.engine.Layer.non_trainable_weights(self)
tensorflow.contrib.keras.engine.Layer.non_trainable_weights(self,weights)
tensorflow.contrib.keras.engine.Layer.output(self)
tensorflow.contrib.keras.engine.Layer.output_mask(self)
tensorflow.contrib.keras.engine.Layer.output_shape(self)
tensorflow.contrib.keras.engine.Layer.set_weights(self,weights)
tensorflow.contrib.keras.engine.Layer.trainable_weights(self)
tensorflow.contrib.keras.engine.Layer.trainable_weights(self,weights)
tensorflow.contrib.keras.engine.Layer.updates(self)
tensorflow.contrib.keras.engine.Layer.weights(self)
tensorflow.contrib.keras.engine.get_source_inputs(tensor,layer=None,node_index=None)
tensorflow.contrib.keras.engine.topology.Container(self,inputs,outputs,name=None)
tensorflow.contrib.keras.engine.topology.Container._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.engine.topology.Container._updated_config(self)
tensorflow.contrib.keras.engine.topology.Container.call(self,inputs,mask=None)
tensorflow.contrib.keras.engine.topology.Container.compute_mask(self,inputs,mask)
tensorflow.contrib.keras.engine.topology.Container.constraints(self)
tensorflow.contrib.keras.engine.topology.Container.from_config(cls,config,custom_objects=None)
tensorflow.contrib.keras.engine.topology.Container.get_config(self)
tensorflow.contrib.keras.engine.topology.Container.get_layer(self,name=None,index=None)
tensorflow.contrib.keras.engine.topology.Container.get_weights(self)
tensorflow.contrib.keras.engine.topology.Container.input_spec(self)
tensorflow.contrib.keras.engine.topology.Container.load_weights(self,filepath,by_name=False)
tensorflow.contrib.keras.engine.topology.Container.losses(self)
tensorflow.contrib.keras.engine.topology.Container.non_trainable_weights(self)
tensorflow.contrib.keras.engine.topology.Container.reset_states(self)
tensorflow.contrib.keras.engine.topology.Container.run_internal_graph(self,inputs,masks=None)
tensorflow.contrib.keras.engine.topology.Container.save(self,filepath,overwrite=True,include_optimizer=True)
tensorflow.contrib.keras.engine.topology.Container.save_weights(self,filepath,overwrite=True)
tensorflow.contrib.keras.engine.topology.Container.set_weights(self,weights)
tensorflow.contrib.keras.engine.topology.Container.state_updates(self)
tensorflow.contrib.keras.engine.topology.Container.stateful(self)
tensorflow.contrib.keras.engine.topology.Container.summary(self,line_length=None,positions=None)
tensorflow.contrib.keras.engine.topology.Container.to_json(self,**kwargs)
tensorflow.contrib.keras.engine.topology.Container.to_yaml(self,**kwargs)
tensorflow.contrib.keras.engine.topology.Container.trainable_weights(self)
tensorflow.contrib.keras.engine.topology.Container.updates(self)
tensorflow.contrib.keras.engine.topology.Container.uses_learning_phase(self)
tensorflow.contrib.keras.engine.topology.Node(self,outbound_layer,inbound_layers,node_indices,tensor_indices,input_tensors,output_tensors,input_masks,output_masks,arguments=None)
tensorflow.contrib.keras.engine.topology.Node.get_config(self)
tensorflow.contrib.keras.engine.topology._collect_input_shape(input_tensors)
tensorflow.contrib.keras.engine.topology._collect_previous_mask(input_tensors)
tensorflow.contrib.keras.engine.topology._is_all_none(iterable_or_element)
tensorflow.contrib.keras.engine.topology._object_list_uid(object_list)
tensorflow.contrib.keras.engine.topology._to_list(x)
tensorflow.contrib.keras.engine.topology._to_snake_case(name)
tensorflow.contrib.keras.engine.topology.load_weights_from_hdf5_group(f,layers)
tensorflow.contrib.keras.engine.topology.load_weights_from_hdf5_group_by_name(f,layers)
tensorflow.contrib.keras.engine.topology.preprocess_weights_for_loading(layer,weights,original_keras_version=None,original_backend=None)
tensorflow.contrib.keras.engine.topology.save_weights_to_hdf5_group(f,layers)
tensorflow.contrib.keras.python.keras.engine.topology.Container(self,inputs,outputs,name=None)
tensorflow.contrib.keras.python.keras.engine.topology.Container.__init__(self,inputs,outputs,name=None)
tensorflow.contrib.keras.python.keras.engine.topology.Container._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.engine.topology.Container._updated_config(self)
tensorflow.contrib.keras.python.keras.engine.topology.Container.call(self,inputs,mask=None)
tensorflow.contrib.keras.python.keras.engine.topology.Container.compute_mask(self,inputs,mask)
tensorflow.contrib.keras.python.keras.engine.topology.Container.constraints(self)
tensorflow.contrib.keras.python.keras.engine.topology.Container.from_config(cls,config,custom_objects=None)
tensorflow.contrib.keras.python.keras.engine.topology.Container.get_config(self)
tensorflow.contrib.keras.python.keras.engine.topology.Container.get_layer(self,name=None,index=None)
tensorflow.contrib.keras.python.keras.engine.topology.Container.get_weights(self)
tensorflow.contrib.keras.python.keras.engine.topology.Container.input_spec(self)
tensorflow.contrib.keras.python.keras.engine.topology.Container.load_weights(self,filepath,by_name=False)
tensorflow.contrib.keras.python.keras.engine.topology.Container.losses(self)
tensorflow.contrib.keras.python.keras.engine.topology.Container.non_trainable_weights(self)
tensorflow.contrib.keras.python.keras.engine.topology.Container.reset_states(self)
tensorflow.contrib.keras.python.keras.engine.topology.Container.run_internal_graph(self,inputs,masks=None)
tensorflow.contrib.keras.python.keras.engine.topology.Container.save(self,filepath,overwrite=True,include_optimizer=True)
tensorflow.contrib.keras.python.keras.engine.topology.Container.save_weights(self,filepath,overwrite=True)
tensorflow.contrib.keras.python.keras.engine.topology.Container.set_weights(self,weights)
tensorflow.contrib.keras.python.keras.engine.topology.Container.state_updates(self)
tensorflow.contrib.keras.python.keras.engine.topology.Container.stateful(self)
tensorflow.contrib.keras.python.keras.engine.topology.Container.summary(self,line_length=None,positions=None)
tensorflow.contrib.keras.python.keras.engine.topology.Container.to_json(self,**kwargs)
tensorflow.contrib.keras.python.keras.engine.topology.Container.to_yaml(self,**kwargs)
tensorflow.contrib.keras.python.keras.engine.topology.Container.trainable_weights(self)
tensorflow.contrib.keras.python.keras.engine.topology.Container.updates(self)
tensorflow.contrib.keras.python.keras.engine.topology.Container.uses_learning_phase(self)
tensorflow.contrib.keras.python.keras.engine.topology.Input(shape=None,batch_shape=None,name=None,dtype=K.floatx(),sparse=False,tensor=None)
tensorflow.contrib.keras.python.keras.engine.topology.InputLayer(self,input_shape=None,batch_size=None,batch_input_shape=None,dtype=None,input_tensor=None,sparse=False,name=None)
tensorflow.contrib.keras.python.keras.engine.topology.InputLayer.__init__(self,input_shape=None,batch_size=None,batch_input_shape=None,dtype=None,input_tensor=None,sparse=False,name=None)
tensorflow.contrib.keras.python.keras.engine.topology.InputLayer.get_config(self)
tensorflow.contrib.keras.python.keras.engine.topology.InputSpec(self,dtype=None,shape=None,ndim=None,max_ndim=None,min_ndim=None,axes=None)
tensorflow.contrib.keras.python.keras.engine.topology.InputSpec.__init__(self,dtype=None,shape=None,ndim=None,max_ndim=None,min_ndim=None,axes=None)
tensorflow.contrib.keras.python.keras.engine.topology.Layer(self,**kwargs)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.__init__(self,**kwargs)
tensorflow.contrib.keras.python.keras.engine.topology.Layer._add_inbound_node(self,input_tensors,output_tensors,input_masks,output_masks,arguments=None)
tensorflow.contrib.keras.python.keras.engine.topology.Layer._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.engine.topology.Layer._get_node_attribute_at_index(self,node_index,attr,attr_name)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.add_loss(self,losses,inputs=None)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.add_update(self,updates,inputs=None)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.add_weight(self,shape,initializer,name=None,trainable=True,regularizer=None,constraint=None)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.assert_input_compatibility(self,inputs)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.build(self,input_shape)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.built(self)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.built(self,value)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.call(self,inputs)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.compute_mask(self,inputs,mask=None)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.constraints(self)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.constraints(self,constraints)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.count_params(self)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.from_config(cls,config)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.get_config(self)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.get_input_at(self,node_index)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.get_input_mask_at(self,node_index)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.get_input_shape_at(self,node_index)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.get_losses_for(self,inputs)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.get_output_at(self,node_index)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.get_output_mask_at(self,node_index)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.get_output_shape_at(self,node_index)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.get_updates_for(self,inputs)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.get_weights(self)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.input(self)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.input_mask(self)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.input_shape(self)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.losses(self)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.non_trainable_weights(self)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.non_trainable_weights(self,weights)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.output(self)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.output_mask(self)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.output_shape(self)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.set_weights(self,weights)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.trainable_weights(self)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.trainable_weights(self,weights)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.updates(self)
tensorflow.contrib.keras.python.keras.engine.topology.Layer.weights(self)
tensorflow.contrib.keras.python.keras.engine.topology.Node(self,outbound_layer,inbound_layers,node_indices,tensor_indices,input_tensors,output_tensors,input_masks,output_masks,arguments=None)
tensorflow.contrib.keras.python.keras.engine.topology.Node.__init__(self,outbound_layer,inbound_layers,node_indices,tensor_indices,input_tensors,output_tensors,input_masks,output_masks,arguments=None)
tensorflow.contrib.keras.python.keras.engine.topology.Node.get_config(self)
tensorflow.contrib.keras.python.keras.engine.topology._collect_input_shape(input_tensors)
tensorflow.contrib.keras.python.keras.engine.topology._collect_previous_mask(input_tensors)
tensorflow.contrib.keras.python.keras.engine.topology._is_all_none(iterable_or_element)
tensorflow.contrib.keras.python.keras.engine.topology._object_list_uid(object_list)
tensorflow.contrib.keras.python.keras.engine.topology._to_list(x)
tensorflow.contrib.keras.python.keras.engine.topology._to_snake_case(name)
tensorflow.contrib.keras.python.keras.engine.topology.get_source_inputs(tensor,layer=None,node_index=None)
tensorflow.contrib.keras.python.keras.engine.topology.load_weights_from_hdf5_group(f,layers)
tensorflow.contrib.keras.python.keras.engine.topology.load_weights_from_hdf5_group_by_name(f,layers)
tensorflow.contrib.keras.python.keras.engine.topology.preprocess_weights_for_loading(layer,weights,original_keras_version=None,original_backend=None)
tensorflow.contrib.keras.python.keras.engine.topology.save_weights_to_hdf5_group(f,layers)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/applications/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/applications/vgg16.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.applications.vgg16.input_shape->_obtain_input_shape(input_shape, default_size=224, min_size=48, data_format=K.image_data_format(), include_top=include_top)
A:tensorflow.contrib.keras.python.keras.applications.vgg16.img_input->Input(tensor=input_tensor, shape=input_shape)
A:tensorflow.contrib.keras.python.keras.applications.vgg16.x->GlobalMaxPooling2D()(x)
A:tensorflow.contrib.keras.python.keras.applications.vgg16.inputs->get_source_inputs(input_tensor)
A:tensorflow.contrib.keras.python.keras.applications.vgg16.model->Model(inputs, x, name='vgg16')
A:tensorflow.contrib.keras.python.keras.applications.vgg16.weights_path->get_file('vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5', WEIGHTS_PATH_NO_TOP, cache_subdir='models')
A:tensorflow.contrib.keras.python.keras.applications.vgg16.maxpool->Model(inputs, x, name='vgg16').get_layer(name='block5_pool')
A:tensorflow.contrib.keras.python.keras.applications.vgg16.dense->Model(inputs, x, name='vgg16').get_layer(name='fc1')
tensorflow.contrib.keras.applications.VGG16(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tensorflow.contrib.keras.python.keras.applications.vgg16.VGG16(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/applications/imagenet_utils.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.applications.imagenet_utils.data_format->tensorflow.contrib.keras.python.keras.backend.image_data_format()
A:tensorflow.contrib.keras.python.keras.applications.imagenet_utils.fpath->get_file('imagenet_class_index.json', CLASS_INDEX_PATH, cache_subdir='models')
A:tensorflow.contrib.keras.python.keras.applications.imagenet_utils.CLASS_INDEX->json.load(open(fpath))
tensorflow.contrib.keras.applications.imagenet_utils._obtain_input_shape(input_shape,default_size,min_size,data_format,include_top)
tensorflow.contrib.keras.applications.imagenet_utils.decode_predictions(preds,top=5)
tensorflow.contrib.keras.applications.imagenet_utils.preprocess_input(x,data_format=None)
tensorflow.contrib.keras.python.keras.applications.imagenet_utils._obtain_input_shape(input_shape,default_size,min_size,data_format,include_top)
tensorflow.contrib.keras.python.keras.applications.imagenet_utils.decode_predictions(preds,top=5)
tensorflow.contrib.keras.python.keras.applications.imagenet_utils.preprocess_input(x,data_format=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/applications/xception.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.applications.xception.input_shape->_obtain_input_shape(input_shape, default_size=299, min_size=71, data_format=K.image_data_format(), include_top=include_top)
A:tensorflow.contrib.keras.python.keras.applications.xception.img_input->Input(tensor=input_tensor, shape=input_shape)
A:tensorflow.contrib.keras.python.keras.applications.xception.x->GlobalMaxPooling2D()(x)
A:tensorflow.contrib.keras.python.keras.applications.xception.residual->BatchNormalization()(residual)
A:tensorflow.contrib.keras.python.keras.applications.xception.inputs->get_source_inputs(input_tensor)
A:tensorflow.contrib.keras.python.keras.applications.xception.model->Model(inputs, x, name='xception')
A:tensorflow.contrib.keras.python.keras.applications.xception.weights_path->get_file('xception_weights_tf_dim_ordering_tf_kernels_notop.h5', TF_WEIGHTS_PATH_NO_TOP, cache_subdir='models')
tensorflow.contrib.keras.applications.Xception(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tensorflow.contrib.keras.applications.xception.preprocess_input(x)
tensorflow.contrib.keras.python.keras.applications.xception.Xception(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tensorflow.contrib.keras.python.keras.applications.xception.preprocess_input(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/applications/resnet50.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.applications.resnet50.x->GlobalMaxPooling2D()(x)
A:tensorflow.contrib.keras.python.keras.applications.resnet50.shortcut->BatchNormalization(axis=bn_axis, name=bn_name_base + '1')(shortcut)
A:tensorflow.contrib.keras.python.keras.applications.resnet50.input_shape->_obtain_input_shape(input_shape, default_size=224, min_size=197, data_format=K.image_data_format(), include_top=include_top)
A:tensorflow.contrib.keras.python.keras.applications.resnet50.img_input->Input(tensor=input_tensor, shape=input_shape)
A:tensorflow.contrib.keras.python.keras.applications.resnet50.inputs->get_source_inputs(input_tensor)
A:tensorflow.contrib.keras.python.keras.applications.resnet50.model->Model(inputs, x, name='resnet50')
A:tensorflow.contrib.keras.python.keras.applications.resnet50.weights_path->get_file('resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5', WEIGHTS_PATH_NO_TOP, cache_subdir='models', md5_hash='a268eb855778b3df3c7506639542a6af')
A:tensorflow.contrib.keras.python.keras.applications.resnet50.maxpool->Model(inputs, x, name='resnet50').get_layer(name='avg_pool')
A:tensorflow.contrib.keras.python.keras.applications.resnet50.dense->Model(inputs, x, name='resnet50').get_layer(name='fc1000')
tensorflow.contrib.keras.applications.ResNet50(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tensorflow.contrib.keras.applications.resnet50.conv_block(input_tensor,kernel_size,filters,stage,block,strides=(2,2))
tensorflow.contrib.keras.applications.resnet50.identity_block(input_tensor,kernel_size,filters,stage,block)
tensorflow.contrib.keras.python.keras.applications.resnet50.ResNet50(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tensorflow.contrib.keras.python.keras.applications.resnet50.conv_block(input_tensor,kernel_size,filters,stage,block,strides=(2,2))
tensorflow.contrib.keras.python.keras.applications.resnet50.identity_block(input_tensor,kernel_size,filters,stage,block)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/applications/vgg19.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.applications.vgg19.input_shape->_obtain_input_shape(input_shape, default_size=224, min_size=48, data_format=K.image_data_format(), include_top=include_top)
A:tensorflow.contrib.keras.python.keras.applications.vgg19.img_input->Input(tensor=input_tensor, shape=input_shape)
A:tensorflow.contrib.keras.python.keras.applications.vgg19.x->GlobalMaxPooling2D()(x)
A:tensorflow.contrib.keras.python.keras.applications.vgg19.inputs->get_source_inputs(input_tensor)
A:tensorflow.contrib.keras.python.keras.applications.vgg19.model->Model(inputs, x, name='vgg19')
A:tensorflow.contrib.keras.python.keras.applications.vgg19.weights_path->get_file('vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5', WEIGHTS_PATH_NO_TOP, cache_subdir='models')
A:tensorflow.contrib.keras.python.keras.applications.vgg19.maxpool->Model(inputs, x, name='vgg19').get_layer(name='block5_pool')
A:tensorflow.contrib.keras.python.keras.applications.vgg19.dense->Model(inputs, x, name='vgg19').get_layer(name='fc1')
tensorflow.contrib.keras.applications.VGG19(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tensorflow.contrib.keras.python.keras.applications.vgg19.VGG19(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/applications/inception_v3.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.x->GlobalMaxPooling2D()(x)
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.input_shape->_obtain_input_shape(input_shape, default_size=299, min_size=139, data_format=K.image_data_format(), include_top=include_top)
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.img_input->Input(tensor=input_tensor, shape=input_shape)
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.branch1x1->conv2d_bn(x, 320, 1, 1)
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.branch5x5->conv2d_bn(branch5x5, 64, 5, 5)
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.branch3x3dbl->tensorflow.contrib.keras.python.keras.layers.concatenate([branch3x3dbl_1, branch3x3dbl_2], axis=channel_axis)
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.branch_pool->conv2d_bn(branch_pool, 192, 1, 1)
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.branch3x3->tensorflow.contrib.keras.python.keras.layers.concatenate([branch3x3_1, branch3x3_2], axis=channel_axis, name='mixed9_' + str(i))
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.branch7x7->conv2d_bn(branch7x7, 192, 7, 1)
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.branch7x7dbl->conv2d_bn(branch7x7dbl, 192, 1, 7)
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.branch7x7x3->conv2d_bn(branch7x7x3, 192, 3, 3, strides=(2, 2), padding='valid')
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.branch3x3_1->conv2d_bn(branch3x3, 384, 1, 3)
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.branch3x3_2->conv2d_bn(branch3x3, 384, 3, 1)
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.branch3x3dbl_1->conv2d_bn(branch3x3dbl, 384, 1, 3)
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.branch3x3dbl_2->conv2d_bn(branch3x3dbl, 384, 3, 1)
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.inputs->get_source_inputs(input_tensor)
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.model->Model(inputs, x, name='inception_v3')
A:tensorflow.contrib.keras.python.keras.applications.inception_v3.weights_path->get_file('inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5', WEIGHTS_PATH_NO_TOP, cache_subdir='models', md5_hash='bcbd6486424b2319ff4ef7d526e38f63')
tensorflow.contrib.keras.applications.InceptionV3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tensorflow.contrib.keras.applications.inception_v3.conv2d_bn(x,filters,num_row,num_col,padding='same',strides=(1,1),name=None)
tensorflow.contrib.keras.applications.inception_v3.preprocess_input(x)
tensorflow.contrib.keras.python.keras.applications.inception_v3.InceptionV3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tensorflow.contrib.keras.python.keras.applications.inception_v3.conv2d_bn(x,filters,num_row,num_col,padding='same',strides=(1,1),name=None)
tensorflow.contrib.keras.python.keras.applications.inception_v3.preprocess_input(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/wrappers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/wrappers/scikit_learn.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.legal_params->set(legal_params)
A:tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.res->copy.deepcopy(self.sk_params)
A:tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.self.model->self.build_fn(**self.filter_sk_params(self.build_fn))
A:tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.y->to_categorical(y)
A:tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.fit_args->copy.deepcopy(self.filter_sk_params(Sequential.fit))
A:tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.history->self.model.fit(x, y, **fit_args)
A:tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.kwargs->self.filter_sk_params(Sequential.evaluate, kwargs)
A:tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.probs->numpy.hstack([1 - probs, probs])
A:tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.outputs->self.model.evaluate(x, y, **kwargs)
A:tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.loss->self.model.evaluate(x, y, **kwargs)
tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.BaseWrapper(self,build_fn=None,**sk_params)
tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.BaseWrapper.__init__(self,build_fn=None,**sk_params)
tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.BaseWrapper.check_params(self,params)
tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.BaseWrapper.filter_sk_params(self,fn,override=None)
tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.BaseWrapper.fit(self,x,y,**kwargs)
tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.BaseWrapper.get_params(self,**params)
tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.BaseWrapper.set_params(self,**params)
tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.KerasClassifier(BaseWrapper)
tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.KerasClassifier.predict(self,x,**kwargs)
tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.KerasClassifier.predict_proba(self,x,**kwargs)
tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.KerasClassifier.score(self,x,y,**kwargs)
tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.KerasRegressor(BaseWrapper)
tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.KerasRegressor.predict(self,x,**kwargs)
tensorflow.contrib.keras.python.keras.wrappers.scikit_learn.KerasRegressor.score(self,x,y,**kwargs)
tensorflow.contrib.keras.wrappers.scikit_learn.BaseWrapper(self,build_fn=None,**sk_params)
tensorflow.contrib.keras.wrappers.scikit_learn.BaseWrapper.check_params(self,params)
tensorflow.contrib.keras.wrappers.scikit_learn.BaseWrapper.filter_sk_params(self,fn,override=None)
tensorflow.contrib.keras.wrappers.scikit_learn.BaseWrapper.fit(self,x,y,**kwargs)
tensorflow.contrib.keras.wrappers.scikit_learn.BaseWrapper.get_params(self,**params)
tensorflow.contrib.keras.wrappers.scikit_learn.BaseWrapper.set_params(self,**params)
tensorflow.contrib.keras.wrappers.scikit_learn.KerasClassifier(BaseWrapper)
tensorflow.contrib.keras.wrappers.scikit_learn.KerasClassifier.predict(self,x,**kwargs)
tensorflow.contrib.keras.wrappers.scikit_learn.KerasClassifier.predict_proba(self,x,**kwargs)
tensorflow.contrib.keras.wrappers.scikit_learn.KerasClassifier.score(self,x,y,**kwargs)
tensorflow.contrib.keras.wrappers.scikit_learn.KerasRegressor(BaseWrapper)
tensorflow.contrib.keras.wrappers.scikit_learn.KerasRegressor.predict(self,x,**kwargs)
tensorflow.contrib.keras.wrappers.scikit_learn.KerasRegressor.score(self,x,y,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/utils/vis_utils.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.utils.vis_utils.dot->model_to_dot(model, show_shapes, show_layer_names)
A:tensorflow.contrib.keras.python.keras.utils.vis_utils.layer_id->str(id(layer))
A:tensorflow.contrib.keras.python.keras.utils.vis_utils.layer_name->'{}({})'.format(layer_name, layer.layer.name)
A:tensorflow.contrib.keras.python.keras.utils.vis_utils.class_name->'{}({})'.format(class_name, child_class_name)
A:tensorflow.contrib.keras.python.keras.utils.vis_utils.label->'{}: {}'.format(layer_name, class_name)
A:tensorflow.contrib.keras.python.keras.utils.vis_utils.outputlabels->str(layer.output_shape)
A:tensorflow.contrib.keras.python.keras.utils.vis_utils.inputlabels->', '.join([str(ishape) for ishape in layer.input_shapes])
A:tensorflow.contrib.keras.python.keras.utils.vis_utils.node->pydot.Node(layer_id, label=label)
A:tensorflow.contrib.keras.python.keras.utils.vis_utils.inbound_layer_id->str(id(inbound_layer))
A:tensorflow.contrib.keras.python.keras.utils.vis_utils.(_, extension)->os.path.splitext(to_file)
tensorflow.contrib.keras.python.keras.utils.vis_utils._check_pydot()
tensorflow.contrib.keras.python.keras.utils.vis_utils.model_to_dot(model,show_shapes=False,show_layer_names=True)
tensorflow.contrib.keras.python.keras.utils.vis_utils.plot_model(model,to_file='model.png',show_shapes=False,show_layer_names=True)
tensorflow.contrib.keras.utils.plot_model(model,to_file='model.png',show_shapes=False,show_layer_names=True)
tensorflow.contrib.keras.utils.vis_utils._check_pydot()
tensorflow.contrib.keras.utils.vis_utils.model_to_dot(model,show_shapes=False,show_layer_names=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/utils/generic_utils.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.utils.generic_utils.self.backup->_GLOBAL_CUSTOM_OBJECTS.copy()
A:tensorflow.contrib.keras.python.keras.utils.generic_utils.cls->module_objects.get(class_name)
A:tensorflow.contrib.keras.python.keras.utils.generic_utils.arg_spec->inspect.getargspec(cls.from_config)
A:tensorflow.contrib.keras.python.keras.utils.generic_utils.fn->module_objects.get(function_name)
A:tensorflow.contrib.keras.python.keras.utils.generic_utils.code->marshal.loads(code.encode('raw_unicode_escape'))
A:tensorflow.contrib.keras.python.keras.utils.generic_utils.closure->tuple((c.cell_contents for c in func.__closure__))
A:tensorflow.contrib.keras.python.keras.utils.generic_utils.globs->globals()
A:tensorflow.contrib.keras.python.keras.utils.generic_utils.self.start->time.time()
A:tensorflow.contrib.keras.python.keras.utils.generic_utils.now->time.time()
A:tensorflow.contrib.keras.python.keras.utils.generic_utils.prog_width->int(self.width * prog)
A:tensorflow.contrib.keras.python.keras.utils.generic_utils.self.total_width->len(bar)
tensorflow.contrib.keras.python.keras.utils.generic_utils.CustomObjectScope(self,*args)
tensorflow.contrib.keras.python.keras.utils.generic_utils.CustomObjectScope.__enter__(self)
tensorflow.contrib.keras.python.keras.utils.generic_utils.CustomObjectScope.__exit__(self,*args,**kwargs)
tensorflow.contrib.keras.python.keras.utils.generic_utils.CustomObjectScope.__init__(self,*args)
tensorflow.contrib.keras.python.keras.utils.generic_utils.Progbar(self,target,width=30,verbose=1,interval=0.05)
tensorflow.contrib.keras.python.keras.utils.generic_utils.Progbar.__init__(self,target,width=30,verbose=1,interval=0.05)
tensorflow.contrib.keras.python.keras.utils.generic_utils.Progbar.add(self,n,values=None)
tensorflow.contrib.keras.python.keras.utils.generic_utils.Progbar.update(self,current,values=None,force=False)
tensorflow.contrib.keras.python.keras.utils.generic_utils.custom_object_scope(*args)
tensorflow.contrib.keras.python.keras.utils.generic_utils.deserialize_keras_object(identifier,module_objects=None,custom_objects=None,printable_module_name='object')
tensorflow.contrib.keras.python.keras.utils.generic_utils.func_dump(func)
tensorflow.contrib.keras.python.keras.utils.generic_utils.func_load(code,defaults=None,closure=None,globs=None)
tensorflow.contrib.keras.python.keras.utils.generic_utils.get_custom_objects()
tensorflow.contrib.keras.python.keras.utils.generic_utils.make_tuple(*args)
tensorflow.contrib.keras.python.keras.utils.generic_utils.serialize_keras_object(instance)
tensorflow.contrib.keras.utils.CustomObjectScope(self,*args)
tensorflow.contrib.keras.utils.CustomObjectScope.__enter__(self)
tensorflow.contrib.keras.utils.CustomObjectScope.__exit__(self,*args,**kwargs)
tensorflow.contrib.keras.utils.Progbar(self,target,width=30,verbose=1,interval=0.05)
tensorflow.contrib.keras.utils.Progbar.add(self,n,values=None)
tensorflow.contrib.keras.utils.Progbar.update(self,current,values=None,force=False)
tensorflow.contrib.keras.utils.custom_object_scope(*args)
tensorflow.contrib.keras.utils.deserialize_keras_object(identifier,module_objects=None,custom_objects=None,printable_module_name='object')
tensorflow.contrib.keras.utils.generic_utils.func_dump(func)
tensorflow.contrib.keras.utils.generic_utils.func_load(code,defaults=None,closure=None,globs=None)
tensorflow.contrib.keras.utils.generic_utils.make_tuple(*args)
tensorflow.contrib.keras.utils.get_custom_objects()
tensorflow.contrib.keras.utils.serialize_keras_object(instance)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/utils/io_utils.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.utils.io_utils.refs->defaultdict(int)
A:tensorflow.contrib.keras.python.keras.utils.io_utils.f->h5py.File(datapath)
A:tensorflow.contrib.keras.python.keras.utils.io_utils.idx->(self.start + key).tolist()
A:tensorflow.contrib.keras.python.keras.utils.io_utils.overwrite->get_input('Enter "y" (overwrite) or "n" (cancel).')
tensorflow.contrib.keras.python.keras.utils.io_utils.HDF5Matrix(self,datapath,dataset,start=0,end=None,normalizer=None)
tensorflow.contrib.keras.python.keras.utils.io_utils.HDF5Matrix.__getitem__(self,key)
tensorflow.contrib.keras.python.keras.utils.io_utils.HDF5Matrix.__init__(self,datapath,dataset,start=0,end=None,normalizer=None)
tensorflow.contrib.keras.python.keras.utils.io_utils.HDF5Matrix.__len__(self)
tensorflow.contrib.keras.python.keras.utils.io_utils.HDF5Matrix.shape(self)
tensorflow.contrib.keras.python.keras.utils.io_utils.ask_to_proceed_with_overwrite(filepath)
tensorflow.contrib.keras.utils.HDF5Matrix(self,datapath,dataset,start=0,end=None,normalizer=None)
tensorflow.contrib.keras.utils.HDF5Matrix.__getitem__(self,key)
tensorflow.contrib.keras.utils.HDF5Matrix.__len__(self)
tensorflow.contrib.keras.utils.HDF5Matrix.shape(self)
tensorflow.contrib.keras.utils.io_utils.ask_to_proceed_with_overwrite(filepath)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/utils/layer_utils.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.utils.layer_utils.(trainable_count, non_trainable_count)->count_total_params(layers, layer_set=None)
A:tensorflow.contrib.keras.python.keras.utils.layer_utils.layer_set->set()
A:tensorflow.contrib.keras.python.keras.utils.layer_utils.(t, nt)->count_total_params(layer.layers, layer_set)
A:tensorflow.contrib.keras.python.keras.utils.layer_utils.original_kernel->tensorflow.contrib.keras.python.keras.backend.get_value(layer.kernel)
A:tensorflow.contrib.keras.python.keras.utils.layer_utils.converted_kernel->convert_kernel(original_kernel)
A:tensorflow.contrib.keras.python.keras.utils.layer_utils.(kernel, bias)->dense.get_weights()
A:tensorflow.contrib.keras.python.keras.utils.layer_utils.ki->numpy.transpose(ki, (1, 2, 0))
A:tensorflow.contrib.keras.python.keras.utils.layer_utils.kernel[:, i]->numpy.reshape(ki, (np.prod(previous_feature_map_shape),))
tensorflow.contrib.keras.python.keras.utils.layer_utils.convert_all_kernels_in_model(model)
tensorflow.contrib.keras.python.keras.utils.layer_utils.convert_dense_weights_data_format(dense,previous_feature_map_shape,target_data_format='channels_first')
tensorflow.contrib.keras.python.keras.utils.layer_utils.count_total_params(layers,layer_set=None)
tensorflow.contrib.keras.python.keras.utils.layer_utils.print_summary(model,line_length=None,positions=None)
tensorflow.contrib.keras.utils.convert_all_kernels_in_model(model)
tensorflow.contrib.keras.utils.layer_utils.convert_dense_weights_data_format(dense,previous_feature_map_shape,target_data_format='channels_first')
tensorflow.contrib.keras.utils.layer_utils.count_total_params(layers,layer_set=None)
tensorflow.contrib.keras.utils.layer_utils.print_summary(model,line_length=None,positions=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/utils/data_utils.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.utils.data_utils.total_size->int(total_size)
A:tensorflow.contrib.keras.python.keras.utils.data_utils.chunk->urlopen(url, data).read(chunk_size)
A:tensorflow.contrib.keras.python.keras.utils.data_utils.response->urlopen(url, data)
A:tensorflow.contrib.keras.python.keras.utils.data_utils.cache_dir->os.path.expanduser(os.path.join('~', '.keras'))
A:tensorflow.contrib.keras.python.keras.utils.data_utils.datadir_base->os.path.join('/tmp', '.keras')
A:tensorflow.contrib.keras.python.keras.utils.data_utils.datadir->os.path.join(datadir_base, cache_subdir)
A:tensorflow.contrib.keras.python.keras.utils.data_utils.untar_fpath->os.path.join(datadir, fname)
A:tensorflow.contrib.keras.python.keras.utils.data_utils.fpath->os.path.join(datadir, fname)
A:tensorflow.contrib.keras.python.keras.utils.data_utils.progbar->Progbar(total_size)
A:tensorflow.contrib.keras.python.keras.utils.data_utils.hasher->hashlib.md5()
tensorflow.contrib.keras.python.keras.utils.data_utils._extract_archive(file_path,path='.',archive_format='auto')
tensorflow.contrib.keras.python.keras.utils.data_utils._hash_file(fpath,algorithm='sha256',chunk_size=65535)
tensorflow.contrib.keras.python.keras.utils.data_utils.get_file(fname,origin,untar=False,md5_hash=None,file_hash=None,cache_subdir='datasets',hash_algorithm='auto',extract=False,archive_format='auto',cache_dir=None)
tensorflow.contrib.keras.python.keras.utils.data_utils.validate_file(fpath,file_hash,algorithm='auto',chunk_size=65535)
tensorflow.contrib.keras.utils.data_utils._extract_archive(file_path,path='.',archive_format='auto')
tensorflow.contrib.keras.utils.data_utils._hash_file(fpath,algorithm='sha256',chunk_size=65535)
tensorflow.contrib.keras.utils.data_utils.validate_file(fpath,file_hash,algorithm='auto',chunk_size=65535)
tensorflow.contrib.keras.utils.get_file(fname,origin,untar=False,md5_hash=None,file_hash=None,cache_subdir='datasets',hash_algorithm='auto',extract=False,archive_format='auto',cache_dir=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/utils/conv_utils.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.utils.conv_utils.value_tuple->tuple(value)
A:tensorflow.contrib.keras.python.keras.utils.conv_utils.value->tensorflow.contrib.keras.python.keras.backend.image_data_format()
A:tensorflow.contrib.keras.python.keras.utils.conv_utils.data_format->tensorflow.contrib.keras.python.keras.backend.image_data_format().lower()
A:tensorflow.contrib.keras.python.keras.utils.conv_utils.padding->tensorflow.contrib.keras.python.keras.backend.image_data_format().lower()
tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_input_length(output_length,filter_size,padding,stride)
tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(input_length,filter_size,padding,stride,dilation=1)
tensorflow.contrib.keras.python.keras.utils.conv_utils.convert_kernel(kernel)
tensorflow.contrib.keras.python.keras.utils.conv_utils.deconv_length(dim_size,stride_size,kernel_size,padding)
tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_data_format(value)
tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_padding(value)
tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(value,n,name)
tensorflow.contrib.keras.utils.conv_utils.conv_input_length(output_length,filter_size,padding,stride)
tensorflow.contrib.keras.utils.conv_utils.conv_output_length(input_length,filter_size,padding,stride,dilation=1)
tensorflow.contrib.keras.utils.conv_utils.convert_kernel(kernel)
tensorflow.contrib.keras.utils.conv_utils.deconv_length(dim_size,stride_size,kernel_size,padding)
tensorflow.contrib.keras.utils.conv_utils.normalize_data_format(value)
tensorflow.contrib.keras.utils.conv_utils.normalize_padding(value)
tensorflow.contrib.keras.utils.conv_utils.normalize_tuple(value,n,name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/utils/np_utils.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.utils.np_utils.y->numpy.array(y, dtype='int').ravel()
A:tensorflow.contrib.keras.python.keras.utils.np_utils.categorical->numpy.zeros((n, num_classes))
A:tensorflow.contrib.keras.python.keras.utils.np_utils.l2->numpy.atleast_1d(np.linalg.norm(x, order, axis))
tensorflow.contrib.keras.python.keras.utils.np_utils.normalize(x,axis=-1,order=2)
tensorflow.contrib.keras.python.keras.utils.np_utils.to_categorical(y,num_classes=None)
tensorflow.contrib.keras.utils.normalize(x,axis=-1,order=2)
tensorflow.contrib.keras.utils.to_categorical(y,num_classes=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/layers/convolutional_recurrent.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.kernel_size->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(kernel_size, 2, 'kernel_size')
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.strides->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(strides, 2, 'strides')
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.padding->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_padding(padding)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.data_format->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_data_format(data_format)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.dilation_rate->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(dilation_rate, 2, 'dilation_rate')
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.input_spec->InputSpec(shape=input_shape)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.input_shape->tensorflow.python.framework.tensor_shape.TensorShape(input_shape).as_list()
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.rows->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(rows, self.kernel_size[0], padding=self.padding, stride=self.strides[0], dilation=self.dilation_rate[0])
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.cols->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(cols, self.kernel_size[1], padding=self.padding, stride=self.strides[1], dilation=self.dilation_rate[1])
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.base_config->super(ConvLSTM2D, self).get_config()
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.activation->tensorflow.contrib.keras.python.keras.activations.get(activation)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.recurrent_activation->tensorflow.contrib.keras.python.keras.activations.get(recurrent_activation)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.kernel_initializer->tensorflow.contrib.keras.python.keras.initializers.get(kernel_initializer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.recurrent_initializer->tensorflow.contrib.keras.python.keras.initializers.get(recurrent_initializer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.bias_initializer->tensorflow.contrib.keras.python.keras.initializers.get(bias_initializer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.kernel_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(kernel_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.recurrent_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(recurrent_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.bias_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(bias_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.activity_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(activity_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.kernel_constraint->tensorflow.contrib.keras.python.keras.constraints.get(kernel_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.recurrent_constraint->tensorflow.contrib.keras.python.keras.constraints.get(recurrent_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.bias_constraint->tensorflow.contrib.keras.python.keras.constraints.get(bias_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.dropout->min(1.0, max(0.0, dropout))
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.recurrent_dropout->min(1.0, max(0.0, recurrent_dropout))
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.kernel->self.add_weight(kernel_shape, initializer=self.kernel_initializer, name='kernel', regularizer=self.kernel_regularizer, constraint=self.kernel_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.recurrent_kernel->self.add_weight(recurrent_kernel_shape, initializer=self.recurrent_initializer, name='recurrent_kernel', regularizer=self.recurrent_regularizer, constraint=self.recurrent_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.self.bias->self.add_weight((self.filters * 4,), initializer=self.bias_initializer, name='bias', regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.bias_value->numpy.zeros((self.filters * 4,))
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.initial_state->self.input_conv(initial_state, K.zeros(tuple(shape)), padding=self.padding)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.shape->list(self.kernel_shape)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.output_shape->self._compute_output_shape(input_shape)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.ones->self.input_conv(ones, K.zeros(shape), padding=self.padding)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.conv_out->tensorflow.contrib.keras.python.keras.backend.conv2d(x, w, strides=(1, 1), padding='same', data_format=self.data_format)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.x_i->self.input_conv(inputs * dp_mask[0], self.kernel_i, self.bias_i, padding=self.padding)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.x_f->self.input_conv(inputs * dp_mask[1], self.kernel_f, self.bias_f, padding=self.padding)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.x_c->self.input_conv(inputs * dp_mask[2], self.kernel_c, self.bias_c, padding=self.padding)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.x_o->self.input_conv(inputs * dp_mask[3], self.kernel_o, self.bias_o, padding=self.padding)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.h_i->self.reccurent_conv(h_tm1 * rec_dp_mask[0], self.recurrent_kernel_i)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.h_f->self.reccurent_conv(h_tm1 * rec_dp_mask[1], self.recurrent_kernel_f)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.h_c->self.reccurent_conv(h_tm1 * rec_dp_mask[2], self.recurrent_kernel_c)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.h_o->self.reccurent_conv(h_tm1 * rec_dp_mask[3], self.recurrent_kernel_o)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.i->self.recurrent_activation(x_i + h_i)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.f->self.recurrent_activation(x_f + h_f)
A:tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.o->self.recurrent_activation(x_o + h_o)
tensorflow.contrib.keras.layers.convolutional_ConvLSTM2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,go_backwards=False,stateful=False,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tensorflow.contrib.keras.layers.convolutional_ConvLSTM2D.build(self,input_shape)
tensorflow.contrib.keras.layers.convolutional_ConvLSTM2D.get_config(self)
tensorflow.contrib.keras.layers.convolutional_ConvLSTM2D.get_constants(self,inputs,training=None)
tensorflow.contrib.keras.layers.convolutional_ConvLSTM2D.get_initial_states(self,inputs)
tensorflow.contrib.keras.layers.convolutional_ConvLSTM2D.input_conv(self,x,w,b=None,padding='valid')
tensorflow.contrib.keras.layers.convolutional_ConvLSTM2D.reccurent_conv(self,x,w)
tensorflow.contrib.keras.layers.convolutional_ConvLSTM2D.reset_states(self)
tensorflow.contrib.keras.layers.convolutional_ConvLSTM2D.step(self,inputs,states)
tensorflow.contrib.keras.layers.convolutional_ConvRecurrent2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),return_sequences=False,go_backwards=False,stateful=False,**kwargs)
tensorflow.contrib.keras.layers.convolutional_ConvRecurrent2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.convolutional_ConvRecurrent2D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.ConvLSTM2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,go_backwards=False,stateful=False,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.ConvLSTM2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,go_backwards=False,stateful=False,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.ConvLSTM2D.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.ConvLSTM2D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.ConvLSTM2D.get_constants(self,inputs,training=None)
tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.ConvLSTM2D.get_initial_states(self,inputs)
tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.ConvLSTM2D.input_conv(self,x,w,b=None,padding='valid')
tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.ConvLSTM2D.reccurent_conv(self,x,w)
tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.ConvLSTM2D.reset_states(self)
tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.ConvLSTM2D.step(self,inputs,states)
tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.ConvRecurrent2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),return_sequences=False,go_backwards=False,stateful=False,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.ConvRecurrent2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),return_sequences=False,go_backwards=False,stateful=False,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.ConvRecurrent2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional_recurrent.ConvRecurrent2D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/layers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/layers/local.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.layers.local.self.kernel_size->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(kernel_size, 2, 'kernel_size')
A:tensorflow.contrib.keras.python.keras.layers.local.self.strides->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(strides, 2, 'strides')
A:tensorflow.contrib.keras.python.keras.layers.local.self.padding->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_padding(padding)
A:tensorflow.contrib.keras.python.keras.layers.local.self.data_format->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_data_format(data_format)
A:tensorflow.contrib.keras.python.keras.layers.local.self.activation->tensorflow.contrib.keras.python.keras.activations.get(activation)
A:tensorflow.contrib.keras.python.keras.layers.local.self.kernel_initializer->tensorflow.contrib.keras.python.keras.initializers.get(kernel_initializer)
A:tensorflow.contrib.keras.python.keras.layers.local.self.bias_initializer->tensorflow.contrib.keras.python.keras.initializers.get(bias_initializer)
A:tensorflow.contrib.keras.python.keras.layers.local.self.kernel_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(kernel_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.local.self.bias_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(bias_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.local.self.activity_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(activity_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.local.self.kernel_constraint->tensorflow.contrib.keras.python.keras.constraints.get(kernel_constraint)
A:tensorflow.contrib.keras.python.keras.layers.local.self.bias_constraint->tensorflow.contrib.keras.python.keras.constraints.get(bias_constraint)
A:tensorflow.contrib.keras.python.keras.layers.local.self.input_spec->InputSpec(ndim=4, axes={-1: input_filter})
A:tensorflow.contrib.keras.python.keras.layers.local.input_shape->tensorflow.python.framework.tensor_shape.TensorShape(input_shape).as_list()
A:tensorflow.contrib.keras.python.keras.layers.local.output_length->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(input_shape[1], self.kernel_size[0], self.padding, self.strides[0])
A:tensorflow.contrib.keras.python.keras.layers.local.self.kernel->self.add_weight(self.kernel_shape, initializer=self.kernel_initializer, name='kernel', regularizer=self.kernel_regularizer, constraint=self.kernel_constraint)
A:tensorflow.contrib.keras.python.keras.layers.local.self.bias->self.add_weight((output_row, output_col, self.filters), initializer=self.bias_initializer, name='bias', regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:tensorflow.contrib.keras.python.keras.layers.local.length->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(input_shape[1], self.kernel_size[0], self.padding, self.strides[0])
A:tensorflow.contrib.keras.python.keras.layers.local.slice_length->slice(i * stride, i * stride + self.kernel_size[0])
A:tensorflow.contrib.keras.python.keras.layers.local.x_aggregate->tensorflow.contrib.keras.python.keras.backend.concatenate(xs, axis=0)
A:tensorflow.contrib.keras.python.keras.layers.local.output->self.activation(output)
A:tensorflow.contrib.keras.python.keras.layers.local.base_config->super(LocallyConnected2D, self).get_config()
A:tensorflow.contrib.keras.python.keras.layers.local.output_row->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(input_row, self.kernel_size[0], self.padding, self.strides[0])
A:tensorflow.contrib.keras.python.keras.layers.local.output_col->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(input_col, self.kernel_size[1], self.padding, self.strides[1])
A:tensorflow.contrib.keras.python.keras.layers.local.rows->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(rows, self.kernel_size[0], self.padding, self.strides[0])
A:tensorflow.contrib.keras.python.keras.layers.local.cols->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(cols, self.kernel_size[1], self.padding, self.strides[1])
A:tensorflow.contrib.keras.python.keras.layers.local.slice_row->slice(i * stride_row, i * stride_row + self.kernel_size[0])
A:tensorflow.contrib.keras.python.keras.layers.local.slice_col->slice(j * stride_col, j * stride_col + self.kernel_size[1])
A:tensorflow.contrib.keras.python.keras.layers.local.x_flatten->tensorflow.contrib.keras.python.keras.backend.reshape(inputs[:, :, slice_row, slice_col], (1, -1, feature_dim))
tensorflow.contrib.keras.layers.LocallyConnected1D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.layers.LocallyConnected1D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.LocallyConnected1D.build(self,input_shape)
tensorflow.contrib.keras.layers.LocallyConnected1D.call(self,inputs)
tensorflow.contrib.keras.layers.LocallyConnected1D.get_config(self)
tensorflow.contrib.keras.layers.LocallyConnected2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.layers.LocallyConnected2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.LocallyConnected2D.build(self,input_shape)
tensorflow.contrib.keras.layers.LocallyConnected2D.call(self,inputs)
tensorflow.contrib.keras.layers.LocallyConnected2D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.local.LocallyConnected1D(self,filters,kernel_size,strides=1,padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.local.LocallyConnected1D.__init__(self,filters,kernel_size,strides=1,padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.local.LocallyConnected1D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.local.LocallyConnected1D.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.local.LocallyConnected1D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.local.LocallyConnected1D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.local.LocallyConnected2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.local.LocallyConnected2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.local.LocallyConnected2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.local.LocallyConnected2D.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.local.LocallyConnected2D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.local.LocallyConnected2D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/layers/noise.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.layers.noise.base_config->super(GaussianDropout, self).get_config()
A:tensorflow.contrib.keras.python.keras.layers.noise.stddev->numpy.sqrt(self.rate / (1.0 - self.rate))
tensorflow.contrib.keras.layers.GaussianDropout(self,rate,**kwargs)
tensorflow.contrib.keras.layers.GaussianDropout.call(self,inputs,training=None)
tensorflow.contrib.keras.layers.GaussianDropout.get_config(self)
tensorflow.contrib.keras.layers.GaussianNoise(self,stddev,**kwargs)
tensorflow.contrib.keras.layers.GaussianNoise.call(self,inputs,training=None)
tensorflow.contrib.keras.layers.GaussianNoise.get_config(self)
tensorflow.contrib.keras.python.keras.layers.noise.GaussianDropout(self,rate,**kwargs)
tensorflow.contrib.keras.python.keras.layers.noise.GaussianDropout.__init__(self,rate,**kwargs)
tensorflow.contrib.keras.python.keras.layers.noise.GaussianDropout.call(self,inputs,training=None)
tensorflow.contrib.keras.python.keras.layers.noise.GaussianDropout.get_config(self)
tensorflow.contrib.keras.python.keras.layers.noise.GaussianNoise(self,stddev,**kwargs)
tensorflow.contrib.keras.python.keras.layers.noise.GaussianNoise.__init__(self,stddev,**kwargs)
tensorflow.contrib.keras.python.keras.layers.noise.GaussianNoise.call(self,inputs,training=None)
tensorflow.contrib.keras.python.keras.layers.noise.GaussianNoise.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/layers/core.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.layers.core.boolean_mask->tensorflow.contrib.keras.python.keras.backend.any(K.not_equal(inputs, self.mask_value), axis=-1, keepdims=True)
A:tensorflow.contrib.keras.python.keras.layers.core.base_config->super(ActivityRegularization, self).get_config()
A:tensorflow.contrib.keras.python.keras.layers.core.self.rate->min(1.0, max(0.0, rate))
A:tensorflow.contrib.keras.python.keras.layers.core.noise_shape->self._get_noise_shape(inputs)
A:tensorflow.contrib.keras.python.keras.layers.core.self.input_spec->InputSpec(min_ndim=2, axes={-1: input_dim})
A:tensorflow.contrib.keras.python.keras.layers.core.input_shape->tensorflow.python.framework.tensor_shape.TensorShape(input_shape).as_list()
A:tensorflow.contrib.keras.python.keras.layers.core.data_format->tensorflow.contrib.keras.python.keras.backend.image_data_format()
A:tensorflow.contrib.keras.python.keras.layers.core.self.activation->tensorflow.contrib.keras.python.keras.activations.get(activation)
A:tensorflow.contrib.keras.python.keras.layers.core.self.target_shape->tuple(target_shape)
A:tensorflow.contrib.keras.python.keras.layers.core.output_shape->list(input_shape)
A:tensorflow.contrib.keras.python.keras.layers.core.original->numpy.prod(input_shape, dtype=int)
A:tensorflow.contrib.keras.python.keras.layers.core.target_shape->self._compute_output_shape(inputs.get_shape())
A:tensorflow.contrib.keras.python.keras.layers.core.self.dims->tuple(dims)
A:tensorflow.contrib.keras.python.keras.layers.core.outputs->tensorflow.contrib.keras.python.keras.backend.batch_flatten(inputs)
A:tensorflow.contrib.keras.python.keras.layers.core.arg_spec->inspect.getargspec(self.function)
A:tensorflow.contrib.keras.python.keras.layers.core.function->func_load(config['function'], globs=globs)
A:tensorflow.contrib.keras.python.keras.layers.core.globs->dict(list(globs.items()) + list(custom_objects.items()))
A:tensorflow.contrib.keras.python.keras.layers.core.function_type->config.pop('function_type')
A:tensorflow.contrib.keras.python.keras.layers.core.self.kernel_initializer->tensorflow.contrib.keras.python.keras.initializers.get(kernel_initializer)
A:tensorflow.contrib.keras.python.keras.layers.core.self.bias_initializer->tensorflow.contrib.keras.python.keras.initializers.get(bias_initializer)
A:tensorflow.contrib.keras.python.keras.layers.core.self.kernel_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(kernel_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.core.self.bias_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(bias_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.core.self.activity_regularizer->tensorflow.contrib.keras.python.keras.regularizers.L1L2(l1=l1, l2=l2)
A:tensorflow.contrib.keras.python.keras.layers.core.self.kernel_constraint->tensorflow.contrib.keras.python.keras.constraints.get(kernel_constraint)
A:tensorflow.contrib.keras.python.keras.layers.core.self.bias_constraint->tensorflow.contrib.keras.python.keras.constraints.get(bias_constraint)
A:tensorflow.contrib.keras.python.keras.layers.core.self.kernel->self.add_weight((input_dim, self.units), initializer=self.kernel_initializer, name='kernel', regularizer=self.kernel_regularizer, constraint=self.kernel_constraint)
A:tensorflow.contrib.keras.python.keras.layers.core.self.bias->self.add_weight((self.units,), initializer=self.bias_initializer, name='bias', regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:tensorflow.contrib.keras.python.keras.layers.core.output->self.activation(output)
tensorflow.contrib.keras.layers.Activation(self,activation,**kwargs)
tensorflow.contrib.keras.layers.Activation.call(self,inputs)
tensorflow.contrib.keras.layers.Activation.get_config(self)
tensorflow.contrib.keras.layers.ActivityRegularization(self,l1=0.0,l2=0.0,**kwargs)
tensorflow.contrib.keras.layers.ActivityRegularization.get_config(self)
tensorflow.contrib.keras.layers.Dense(self,units,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.layers.Dense._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.Dense.build(self,input_shape)
tensorflow.contrib.keras.layers.Dense.call(self,inputs)
tensorflow.contrib.keras.layers.Dense.get_config(self)
tensorflow.contrib.keras.layers.Dropout(self,rate,noise_shape=None,seed=None,**kwargs)
tensorflow.contrib.keras.layers.Dropout._get_noise_shape(self,_)
tensorflow.contrib.keras.layers.Dropout.call(self,inputs,training=None)
tensorflow.contrib.keras.layers.Dropout.get_config(self)
tensorflow.contrib.keras.layers.Flatten(self,**kwargs)
tensorflow.contrib.keras.layers.Flatten._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.Flatten.call(self,inputs)
tensorflow.contrib.keras.layers.Lambda(self,function,mask=None,arguments=None,**kwargs)
tensorflow.contrib.keras.layers.Lambda.call(self,inputs,mask=None)
tensorflow.contrib.keras.layers.Lambda.compute_mask(self,inputs,mask=None)
tensorflow.contrib.keras.layers.Lambda.from_config(cls,config,custom_objects=None)
tensorflow.contrib.keras.layers.Lambda.get_config(self)
tensorflow.contrib.keras.layers.Masking(self,mask_value=0.0,**kwargs)
tensorflow.contrib.keras.layers.Masking.call(self,inputs)
tensorflow.contrib.keras.layers.Masking.compute_mask(self,inputs,mask=None)
tensorflow.contrib.keras.layers.Masking.get_config(self)
tensorflow.contrib.keras.layers.Permute(self,dims,**kwargs)
tensorflow.contrib.keras.layers.Permute._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.Permute.call(self,inputs)
tensorflow.contrib.keras.layers.Permute.get_config(self)
tensorflow.contrib.keras.layers.RepeatVector(self,n,**kwargs)
tensorflow.contrib.keras.layers.RepeatVector._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.RepeatVector.call(self,inputs)
tensorflow.contrib.keras.layers.RepeatVector.get_config(self)
tensorflow.contrib.keras.layers.Reshape(self,target_shape,**kwargs)
tensorflow.contrib.keras.layers.Reshape._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.Reshape._fix_unknown_dimension(self,input_shape,output_shape)
tensorflow.contrib.keras.layers.Reshape.call(self,inputs)
tensorflow.contrib.keras.layers.Reshape.get_config(self)
tensorflow.contrib.keras.layers.SpatialDropout1D(self,rate,**kwargs)
tensorflow.contrib.keras.layers.SpatialDropout1D._get_noise_shape(self,inputs)
tensorflow.contrib.keras.layers.SpatialDropout2D(self,rate,data_format=None,**kwargs)
tensorflow.contrib.keras.layers.SpatialDropout2D._get_noise_shape(self,inputs)
tensorflow.contrib.keras.layers.SpatialDropout3D(self,rate,data_format=None,**kwargs)
tensorflow.contrib.keras.layers.SpatialDropout3D._get_noise_shape(self,inputs)
tensorflow.contrib.keras.python.keras.layers.core.Activation(self,activation,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Activation.__init__(self,activation,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Activation.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.core.Activation.get_config(self)
tensorflow.contrib.keras.python.keras.layers.core.ActivityRegularization(self,l1=0.0,l2=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.ActivityRegularization.__init__(self,l1=0.0,l2=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.ActivityRegularization.get_config(self)
tensorflow.contrib.keras.python.keras.layers.core.Dense(self,units,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Dense.__init__(self,units,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Dense._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.core.Dense.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.core.Dense.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.core.Dense.get_config(self)
tensorflow.contrib.keras.python.keras.layers.core.Dropout(self,rate,noise_shape=None,seed=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Dropout.__init__(self,rate,noise_shape=None,seed=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Dropout._get_noise_shape(self,_)
tensorflow.contrib.keras.python.keras.layers.core.Dropout.call(self,inputs,training=None)
tensorflow.contrib.keras.python.keras.layers.core.Dropout.get_config(self)
tensorflow.contrib.keras.python.keras.layers.core.Flatten(self,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Flatten.__init__(self,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Flatten._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.core.Flatten.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.core.Lambda(self,function,mask=None,arguments=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Lambda.__init__(self,function,mask=None,arguments=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Lambda.call(self,inputs,mask=None)
tensorflow.contrib.keras.python.keras.layers.core.Lambda.compute_mask(self,inputs,mask=None)
tensorflow.contrib.keras.python.keras.layers.core.Lambda.from_config(cls,config,custom_objects=None)
tensorflow.contrib.keras.python.keras.layers.core.Lambda.get_config(self)
tensorflow.contrib.keras.python.keras.layers.core.Masking(self,mask_value=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Masking.__init__(self,mask_value=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Masking.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.core.Masking.compute_mask(self,inputs,mask=None)
tensorflow.contrib.keras.python.keras.layers.core.Masking.get_config(self)
tensorflow.contrib.keras.python.keras.layers.core.Permute(self,dims,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Permute.__init__(self,dims,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Permute._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.core.Permute.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.core.Permute.get_config(self)
tensorflow.contrib.keras.python.keras.layers.core.RepeatVector(self,n,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.RepeatVector.__init__(self,n,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.RepeatVector._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.core.RepeatVector.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.core.RepeatVector.get_config(self)
tensorflow.contrib.keras.python.keras.layers.core.Reshape(self,target_shape,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Reshape.__init__(self,target_shape,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.Reshape._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.core.Reshape._fix_unknown_dimension(self,input_shape,output_shape)
tensorflow.contrib.keras.python.keras.layers.core.Reshape.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.core.Reshape.get_config(self)
tensorflow.contrib.keras.python.keras.layers.core.SpatialDropout1D(self,rate,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.SpatialDropout1D.__init__(self,rate,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.SpatialDropout1D._get_noise_shape(self,inputs)
tensorflow.contrib.keras.python.keras.layers.core.SpatialDropout2D(self,rate,data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.SpatialDropout2D.__init__(self,rate,data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.SpatialDropout2D._get_noise_shape(self,inputs)
tensorflow.contrib.keras.python.keras.layers.core.SpatialDropout3D(self,rate,data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.SpatialDropout3D.__init__(self,rate,data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.core.SpatialDropout3D._get_noise_shape(self,inputs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/layers/pooling.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.layers.pooling.self.pool_size->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(pool_size, 3, 'pool_size')
A:tensorflow.contrib.keras.python.keras.layers.pooling.self.strides->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(strides, 3, 'strides')
A:tensorflow.contrib.keras.python.keras.layers.pooling.self.padding->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_padding(padding)
A:tensorflow.contrib.keras.python.keras.layers.pooling.self.input_spec->InputSpec(ndim=5)
A:tensorflow.contrib.keras.python.keras.layers.pooling.input_shape->tensorflow.python.framework.tensor_shape.TensorShape(input_shape).as_list()
A:tensorflow.contrib.keras.python.keras.layers.pooling.length->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(input_shape[1], self.pool_size[0], self.padding, self.strides[0])
A:tensorflow.contrib.keras.python.keras.layers.pooling.inputs->tensorflow.contrib.keras.python.keras.backend.expand_dims(inputs, 2)
A:tensorflow.contrib.keras.python.keras.layers.pooling.output->tensorflow.contrib.keras.python.keras.backend.pool3d(inputs, pool_size, strides, padding, data_format, pool_mode='avg')
A:tensorflow.contrib.keras.python.keras.layers.pooling.base_config->super(_GlobalPooling3D, self).get_config()
A:tensorflow.contrib.keras.python.keras.layers.pooling.data_format->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_data_format(data_format)
A:tensorflow.contrib.keras.python.keras.layers.pooling.self.data_format->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_data_format(data_format)
A:tensorflow.contrib.keras.python.keras.layers.pooling.rows->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(rows, self.pool_size[0], self.padding, self.strides[0])
A:tensorflow.contrib.keras.python.keras.layers.pooling.cols->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(cols, self.pool_size[1], self.padding, self.strides[1])
A:tensorflow.contrib.keras.python.keras.layers.pooling.len_dim1->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(len_dim1, self.pool_size[0], self.padding, self.strides[0])
A:tensorflow.contrib.keras.python.keras.layers.pooling.len_dim2->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(len_dim2, self.pool_size[1], self.padding, self.strides[1])
A:tensorflow.contrib.keras.python.keras.layers.pooling.len_dim3->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(len_dim3, self.pool_size[2], self.padding, self.strides[2])
tensorflow.contrib.keras.layers.AveragePooling1D(self,pool_size=2,strides=None,padding='valid',**kwargs)
tensorflow.contrib.keras.layers.AveragePooling1D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.layers.AveragePooling2D(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.layers.AveragePooling2D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.layers.AveragePooling3D(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.layers.AveragePooling3D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.layers.GlobalAveragePooling1D(_GlobalPooling1D)
tensorflow.contrib.keras.layers.GlobalAveragePooling1D.call(self,inputs)
tensorflow.contrib.keras.layers.GlobalAveragePooling2D(_GlobalPooling2D)
tensorflow.contrib.keras.layers.GlobalAveragePooling2D.call(self,inputs)
tensorflow.contrib.keras.layers.GlobalAveragePooling3D(_GlobalPooling3D)
tensorflow.contrib.keras.layers.GlobalAveragePooling3D.call(self,inputs)
tensorflow.contrib.keras.layers.GlobalMaxPooling1D(_GlobalPooling1D)
tensorflow.contrib.keras.layers.GlobalMaxPooling1D.call(self,inputs)
tensorflow.contrib.keras.layers.GlobalMaxPooling2D(_GlobalPooling2D)
tensorflow.contrib.keras.layers.GlobalMaxPooling2D.call(self,inputs)
tensorflow.contrib.keras.layers.GlobalMaxPooling3D(_GlobalPooling3D)
tensorflow.contrib.keras.layers.GlobalMaxPooling3D.call(self,inputs)
tensorflow.contrib.keras.layers.MaxPooling1D(self,pool_size=2,strides=None,padding='valid',**kwargs)
tensorflow.contrib.keras.layers.MaxPooling1D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.layers.MaxPooling2D(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.layers.MaxPooling2D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.layers.MaxPooling3D(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.layers.MaxPooling3D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.layers._GlobalPooling1D(self,**kwargs)
tensorflow.contrib.keras.layers._GlobalPooling1D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers._GlobalPooling1D.call(self,inputs)
tensorflow.contrib.keras.layers._GlobalPooling2D(self,data_format=None,**kwargs)
tensorflow.contrib.keras.layers._GlobalPooling2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers._GlobalPooling2D.call(self,inputs)
tensorflow.contrib.keras.layers._GlobalPooling2D.get_config(self)
tensorflow.contrib.keras.layers._GlobalPooling3D(self,data_format=None,**kwargs)
tensorflow.contrib.keras.layers._GlobalPooling3D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers._GlobalPooling3D.call(self,inputs)
tensorflow.contrib.keras.layers._GlobalPooling3D.get_config(self)
tensorflow.contrib.keras.layers._Pooling1D(self,pool_size=2,strides=None,padding='valid',**kwargs)
tensorflow.contrib.keras.layers._Pooling1D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers._Pooling1D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.layers._Pooling1D.call(self,inputs)
tensorflow.contrib.keras.layers._Pooling1D.get_config(self)
tensorflow.contrib.keras.layers._Pooling2D(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.layers._Pooling2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers._Pooling2D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.layers._Pooling2D.call(self,inputs)
tensorflow.contrib.keras.layers._Pooling2D.get_config(self)
tensorflow.contrib.keras.layers._Pooling3D(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.layers._Pooling3D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers._Pooling3D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.layers._Pooling3D.call(self,inputs)
tensorflow.contrib.keras.layers._Pooling3D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.pooling.AveragePooling1D(self,pool_size=2,strides=None,padding='valid',**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling.AveragePooling1D.__init__(self,pool_size=2,strides=None,padding='valid',**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling.AveragePooling1D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.python.keras.layers.pooling.AveragePooling2D(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling.AveragePooling2D.__init__(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling.AveragePooling2D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.python.keras.layers.pooling.AveragePooling3D(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling.AveragePooling3D.__init__(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling.AveragePooling3D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.python.keras.layers.pooling.GlobalAveragePooling1D(_GlobalPooling1D)
tensorflow.contrib.keras.python.keras.layers.pooling.GlobalAveragePooling1D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.pooling.GlobalAveragePooling2D(_GlobalPooling2D)
tensorflow.contrib.keras.python.keras.layers.pooling.GlobalAveragePooling2D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.pooling.GlobalAveragePooling3D(_GlobalPooling3D)
tensorflow.contrib.keras.python.keras.layers.pooling.GlobalAveragePooling3D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.pooling.GlobalMaxPooling1D(_GlobalPooling1D)
tensorflow.contrib.keras.python.keras.layers.pooling.GlobalMaxPooling1D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.pooling.GlobalMaxPooling2D(_GlobalPooling2D)
tensorflow.contrib.keras.python.keras.layers.pooling.GlobalMaxPooling2D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.pooling.GlobalMaxPooling3D(_GlobalPooling3D)
tensorflow.contrib.keras.python.keras.layers.pooling.GlobalMaxPooling3D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.pooling.MaxPooling1D(self,pool_size=2,strides=None,padding='valid',**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling.MaxPooling1D.__init__(self,pool_size=2,strides=None,padding='valid',**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling.MaxPooling1D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.python.keras.layers.pooling.MaxPooling2D(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling.MaxPooling2D.__init__(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling.MaxPooling2D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.python.keras.layers.pooling.MaxPooling3D(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling.MaxPooling3D.__init__(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling.MaxPooling3D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.python.keras.layers.pooling._GlobalPooling1D(self,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling._GlobalPooling1D.__init__(self,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling._GlobalPooling1D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.pooling._GlobalPooling1D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.pooling._GlobalPooling2D(self,data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling._GlobalPooling2D.__init__(self,data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling._GlobalPooling2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.pooling._GlobalPooling2D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.pooling._GlobalPooling2D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.pooling._GlobalPooling3D(self,data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling._GlobalPooling3D.__init__(self,data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling._GlobalPooling3D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.pooling._GlobalPooling3D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.pooling._GlobalPooling3D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling1D(self,pool_size=2,strides=None,padding='valid',**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling1D.__init__(self,pool_size=2,strides=None,padding='valid',**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling1D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling1D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling1D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling1D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling2D(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling2D.__init__(self,pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling2D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling2D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling2D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling3D(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling3D.__init__(self,pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling3D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling3D._pooling_function(self,inputs,pool_size,strides,padding,data_format)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling3D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.pooling._Pooling3D.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/layers/embeddings.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.layers.embeddings.self.embeddings_initializer->tensorflow.contrib.keras.python.keras.initializers.get(embeddings_initializer)
A:tensorflow.contrib.keras.python.keras.layers.embeddings.self.embeddings_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(embeddings_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.embeddings.self.activity_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(activity_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.embeddings.self.embeddings_constraint->tensorflow.contrib.keras.python.keras.constraints.get(embeddings_constraint)
A:tensorflow.contrib.keras.python.keras.layers.embeddings.input_shape->tensorflow.python.framework.tensor_shape.TensorShape(input_shape).as_list()
A:tensorflow.contrib.keras.python.keras.layers.embeddings.self.embeddings->self.add_weight((self.input_dim, self.output_dim), initializer=self.embeddings_initializer, name='embeddings', regularizer=self.embeddings_regularizer, constraint=self.embeddings_constraint)
A:tensorflow.contrib.keras.python.keras.layers.embeddings.inputs->tensorflow.contrib.keras.python.keras.backend.cast(inputs, 'int32')
A:tensorflow.contrib.keras.python.keras.layers.embeddings.out->tensorflow.contrib.keras.python.keras.backend.gather(self.embeddings, inputs)
A:tensorflow.contrib.keras.python.keras.layers.embeddings.base_config->super(Embedding, self).get_config()
tensorflow.contrib.keras.layers.Embedding(self,input_dim,output_dim,embeddings_initializer='uniform',embeddings_regularizer=None,activity_regularizer=None,embeddings_constraint=None,mask_zero=False,input_length=None,**kwargs)
tensorflow.contrib.keras.layers.Embedding._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.Embedding.build(self,input_shape)
tensorflow.contrib.keras.layers.Embedding.call(self,inputs)
tensorflow.contrib.keras.layers.Embedding.compute_mask(self,inputs,mask=None)
tensorflow.contrib.keras.layers.Embedding.get_config(self)
tensorflow.contrib.keras.python.keras.layers.embeddings.Embedding(self,input_dim,output_dim,embeddings_initializer='uniform',embeddings_regularizer=None,activity_regularizer=None,embeddings_constraint=None,mask_zero=False,input_length=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.embeddings.Embedding.__init__(self,input_dim,output_dim,embeddings_initializer='uniform',embeddings_regularizer=None,activity_regularizer=None,embeddings_constraint=None,mask_zero=False,input_length=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.embeddings.Embedding._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.embeddings.Embedding.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.embeddings.Embedding.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.embeddings.Embedding.compute_mask(self,inputs,mask=None)
tensorflow.contrib.keras.python.keras.layers.embeddings.Embedding.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/layers/serialization.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.layers.serialization.globs->globals()
tensorflow.contrib.keras.layers.deserialize(config,custom_objects=None)
tensorflow.contrib.keras.layers.serialize(layer)
tensorflow.contrib.keras.python.keras.layers.serialization.deserialize(config,custom_objects=None)
tensorflow.contrib.keras.python.keras.layers.serialization.serialize(layer)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/layers/convolutional.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.kernel_size->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(kernel_size, rank, 'kernel_size')
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.strides->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(strides, rank, 'strides')
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.padding->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(padding, 2, 'padding')
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.data_format->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_data_format(data_format)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.dilation_rate->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(dilation_rate, rank, 'dilation_rate')
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.activation->tensorflow.contrib.keras.python.keras.activations.get(activation)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.kernel_initializer->tensorflow.contrib.keras.python.keras.initializers.get(kernel_initializer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.bias_initializer->tensorflow.contrib.keras.python.keras.initializers.get(bias_initializer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.kernel_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(kernel_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.bias_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(bias_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.activity_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(activity_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.kernel_constraint->tensorflow.contrib.keras.python.keras.constraints.get(kernel_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.bias_constraint->tensorflow.contrib.keras.python.keras.constraints.get(bias_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.input_spec->InputSpec(ndim=5)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.input_shape->tensorflow.python.framework.tensor_shape.TensorShape(input_shape).as_list()
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.kernel->self.add_weight(kernel_shape, initializer=self.kernel_initializer, name='kernel', regularizer=self.kernel_regularizer, constraint=self.kernel_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.bias->self.add_weight((self.filters,), initializer=self.bias_initializer, name='bias', regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.outputs->tensorflow.contrib.keras.python.keras.backend.bias_add(outputs, self.bias, data_format=self.data_format)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.new_dim->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(space[i], self.kernel_size[i], padding=self.padding, stride=self.strides[i], dilation=self.dilation_rate[i])
A:tensorflow.contrib.keras.python.keras.layers.convolutional.base_config->super(Cropping3D, self).get_config()
A:tensorflow.contrib.keras.python.keras.layers.convolutional.config->super(SeparableConv2D, self).get_config()
A:tensorflow.contrib.keras.python.keras.layers.convolutional.out_height->tensorflow.contrib.keras.python.keras.utils.conv_utils.deconv_length(height, stride_h, kernel_h, self.padding)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.out_width->tensorflow.contrib.keras.python.keras.utils.conv_utils.deconv_length(width, stride_w, kernel_w, self.padding)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.output_shape->list(input_shape)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.output_shape[h_axis]->tensorflow.contrib.keras.python.keras.utils.conv_utils.deconv_length(output_shape[h_axis], stride_h, kernel_h, self.padding)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.output_shape[w_axis]->tensorflow.contrib.keras.python.keras.utils.conv_utils.deconv_length(output_shape[w_axis], stride_w, kernel_w, self.padding)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.depthwise_initializer->tensorflow.contrib.keras.python.keras.initializers.get(depthwise_initializer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.pointwise_initializer->tensorflow.contrib.keras.python.keras.initializers.get(pointwise_initializer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.depthwise_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(depthwise_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.pointwise_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(pointwise_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.depthwise_constraint->tensorflow.contrib.keras.python.keras.constraints.get(depthwise_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.pointwise_constraint->tensorflow.contrib.keras.python.keras.constraints.get(pointwise_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.input_dim->int(input_shape[channel_axis])
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.depthwise_kernel->self.add_weight(depthwise_kernel_shape, initializer=self.depthwise_initializer, name='depthwise_kernel', regularizer=self.depthwise_regularizer, constraint=self.depthwise_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.pointwise_kernel->self.add_weight(pointwise_kernel_shape, initializer=self.pointwise_initializer, name='pointwise_kernel', regularizer=self.pointwise_regularizer, constraint=self.pointwise_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.rows->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(rows, self.kernel_size[0], self.padding, self.strides[0])
A:tensorflow.contrib.keras.python.keras.layers.convolutional.cols->tensorflow.contrib.keras.python.keras.utils.conv_utils.conv_output_length(cols, self.kernel_size[1], self.padding, self.strides[1])
A:tensorflow.contrib.keras.python.keras.layers.convolutional.config['depthwise_initializer']->tensorflow.contrib.keras.python.keras.initializers.serialize(self.depthwise_initializer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.config['pointwise_initializer']->tensorflow.contrib.keras.python.keras.initializers.serialize(self.pointwise_initializer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.config['depthwise_regularizer']->tensorflow.contrib.keras.python.keras.regularizers.serialize(self.depthwise_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.config['pointwise_regularizer']->tensorflow.contrib.keras.python.keras.regularizers.serialize(self.pointwise_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.config['depthwise_constraint']->tensorflow.contrib.keras.python.keras.constraints.serialize(self.depthwise_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.config['pointwise_constraint']->tensorflow.contrib.keras.python.keras.constraints.serialize(self.pointwise_constraint)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.size->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(size, 3, 'size')
A:tensorflow.contrib.keras.python.keras.layers.convolutional.output->tensorflow.contrib.keras.python.keras.backend.repeat_elements(inputs, self.size, axis=1)
A:tensorflow.contrib.keras.python.keras.layers.convolutional.height_padding->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(padding[0], 2, '1st entry of padding')
A:tensorflow.contrib.keras.python.keras.layers.convolutional.width_padding->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(padding[1], 2, '2nd entry of padding')
A:tensorflow.contrib.keras.python.keras.layers.convolutional.dim1_padding->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(padding[0], 2, '1st entry of padding')
A:tensorflow.contrib.keras.python.keras.layers.convolutional.dim2_padding->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(padding[1], 2, '2nd entry of padding')
A:tensorflow.contrib.keras.python.keras.layers.convolutional.dim3_padding->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(padding[2], 2, '3rd entry of padding')
A:tensorflow.contrib.keras.python.keras.layers.convolutional.self.cropping->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(cropping, 2, 'cropping')
A:tensorflow.contrib.keras.python.keras.layers.convolutional.height_cropping->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(cropping[0], 2, '1st entry of cropping')
A:tensorflow.contrib.keras.python.keras.layers.convolutional.width_cropping->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(cropping[1], 2, '2nd entry of cropping')
A:tensorflow.contrib.keras.python.keras.layers.convolutional.dim1_cropping->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(cropping[0], 2, '1st entry of cropping')
A:tensorflow.contrib.keras.python.keras.layers.convolutional.dim2_cropping->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(cropping[1], 2, '2nd entry of cropping')
A:tensorflow.contrib.keras.python.keras.layers.convolutional.dim3_cropping->tensorflow.contrib.keras.python.keras.utils.conv_utils.normalize_tuple(cropping[2], 2, '3rd entry of cropping')
tensorflow.contrib.keras.layers.Conv1D(self,filters,kernel_size,strides=1,padding='valid',dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.layers.Conv1D.get_config(self)
tensorflow.contrib.keras.layers.Conv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.layers.Conv2D.get_config(self)
tensorflow.contrib.keras.layers.Conv2DTranspose(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.layers.Conv2DTranspose._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.Conv2DTranspose.build(self,input_shape)
tensorflow.contrib.keras.layers.Conv2DTranspose.call(self,inputs)
tensorflow.contrib.keras.layers.Conv2DTranspose.get_config(self)
tensorflow.contrib.keras.layers.Conv3D(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.layers.Conv3D.get_config(self)
tensorflow.contrib.keras.layers.Cropping1D(self,cropping=(1,1),**kwargs)
tensorflow.contrib.keras.layers.Cropping1D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.Cropping1D.call(self,inputs)
tensorflow.contrib.keras.layers.Cropping1D.get_config(self)
tensorflow.contrib.keras.layers.Cropping2D(self,cropping=((0,0),(0,0)),data_format=None,**kwargs)
tensorflow.contrib.keras.layers.Cropping2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.Cropping2D.call(self,inputs)
tensorflow.contrib.keras.layers.Cropping2D.get_config(self)
tensorflow.contrib.keras.layers.Cropping3D(self,cropping=((1,1),(1,1),(1,1)),data_format=None,**kwargs)
tensorflow.contrib.keras.layers.Cropping3D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.Cropping3D.call(self,inputs)
tensorflow.contrib.keras.layers.Cropping3D.get_config(self)
tensorflow.contrib.keras.layers.SeparableConv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.layers.SeparableConv2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.SeparableConv2D.build(self,input_shape)
tensorflow.contrib.keras.layers.SeparableConv2D.call(self,inputs)
tensorflow.contrib.keras.layers.SeparableConv2D.get_config(self)
tensorflow.contrib.keras.layers.UpSampling1D(self,size=2,**kwargs)
tensorflow.contrib.keras.layers.UpSampling1D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.UpSampling1D.call(self,inputs)
tensorflow.contrib.keras.layers.UpSampling1D.get_config(self)
tensorflow.contrib.keras.layers.UpSampling2D(self,size=(2,2),data_format=None,**kwargs)
tensorflow.contrib.keras.layers.UpSampling2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.UpSampling2D.call(self,inputs)
tensorflow.contrib.keras.layers.UpSampling2D.get_config(self)
tensorflow.contrib.keras.layers.UpSampling3D(self,size=(2,2,2),data_format=None,**kwargs)
tensorflow.contrib.keras.layers.UpSampling3D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.UpSampling3D.call(self,inputs)
tensorflow.contrib.keras.layers.UpSampling3D.get_config(self)
tensorflow.contrib.keras.layers.ZeroPadding1D(self,padding=1,**kwargs)
tensorflow.contrib.keras.layers.ZeroPadding1D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.ZeroPadding1D.call(self,inputs)
tensorflow.contrib.keras.layers.ZeroPadding1D.get_config(self)
tensorflow.contrib.keras.layers.ZeroPadding2D(self,padding=(1,1),data_format=None,**kwargs)
tensorflow.contrib.keras.layers.ZeroPadding2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.ZeroPadding2D.call(self,inputs)
tensorflow.contrib.keras.layers.ZeroPadding2D.get_config(self)
tensorflow.contrib.keras.layers.ZeroPadding3D(self,padding=(1,1,1),data_format=None,**kwargs)
tensorflow.contrib.keras.layers.ZeroPadding3D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.ZeroPadding3D.call(self,inputs)
tensorflow.contrib.keras.layers.ZeroPadding3D.get_config(self)
tensorflow.contrib.keras.layers._Conv(self,rank,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.layers._Conv._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers._Conv.build(self,input_shape)
tensorflow.contrib.keras.layers._Conv.call(self,inputs)
tensorflow.contrib.keras.layers._Conv.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional.Conv1D(self,filters,kernel_size,strides=1,padding='valid',dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Conv1D.__init__(self,filters,kernel_size,strides=1,padding='valid',dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Conv1D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional.Conv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Conv2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Conv2D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional.Conv2DTranspose(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Conv2DTranspose.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Conv2DTranspose._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional.Conv2DTranspose.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional.Conv2DTranspose.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Conv2DTranspose.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional.Conv3D(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Conv3D.__init__(self,filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Conv3D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional.Cropping1D(self,cropping=(1,1),**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Cropping1D.__init__(self,cropping=(1,1),**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Cropping1D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional.Cropping1D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Cropping1D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional.Cropping2D(self,cropping=((0,0),(0,0)),data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Cropping2D.__init__(self,cropping=((0,0),(0,0)),data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Cropping2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional.Cropping2D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Cropping2D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional.Cropping3D(self,cropping=((1,1),(1,1),(1,1)),data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Cropping3D.__init__(self,cropping=((1,1),(1,1),(1,1)),data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Cropping3D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional.Cropping3D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.convolutional.Cropping3D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional.SeparableConv2D(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.SeparableConv2D.__init__(self,filters,kernel_size,strides=(1,1),padding='valid',data_format=None,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.SeparableConv2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional.SeparableConv2D.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional.SeparableConv2D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.convolutional.SeparableConv2D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional.UpSampling1D(self,size=2,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.UpSampling1D.__init__(self,size=2,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.UpSampling1D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional.UpSampling1D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.convolutional.UpSampling1D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional.UpSampling2D(self,size=(2,2),data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.UpSampling2D.__init__(self,size=(2,2),data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.UpSampling2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional.UpSampling2D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.convolutional.UpSampling2D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional.UpSampling3D(self,size=(2,2,2),data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.UpSampling3D.__init__(self,size=(2,2,2),data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.UpSampling3D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional.UpSampling3D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.convolutional.UpSampling3D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional.ZeroPadding1D(self,padding=1,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.ZeroPadding1D.__init__(self,padding=1,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.ZeroPadding1D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional.ZeroPadding1D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.convolutional.ZeroPadding1D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional.ZeroPadding2D(self,padding=(1,1),data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.ZeroPadding2D.__init__(self,padding=(1,1),data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.ZeroPadding2D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional.ZeroPadding2D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.convolutional.ZeroPadding2D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional.ZeroPadding3D(self,padding=(1,1,1),data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.ZeroPadding3D.__init__(self,padding=(1,1,1),data_format=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional.ZeroPadding3D._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional.ZeroPadding3D.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.convolutional.ZeroPadding3D.get_config(self)
tensorflow.contrib.keras.python.keras.layers.convolutional._Conv(self,rank,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional._Conv.__init__(self,rank,filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.convolutional._Conv._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional._Conv.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.convolutional._Conv.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.convolutional._Conv.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/layers/normalization.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.layers.normalization.self.beta_initializer->tensorflow.contrib.keras.python.keras.initializers.get(beta_initializer)
A:tensorflow.contrib.keras.python.keras.layers.normalization.self.gamma_initializer->tensorflow.contrib.keras.python.keras.initializers.get(gamma_initializer)
A:tensorflow.contrib.keras.python.keras.layers.normalization.self.moving_mean_initializer->tensorflow.contrib.keras.python.keras.initializers.get(moving_mean_initializer)
A:tensorflow.contrib.keras.python.keras.layers.normalization.self.moving_variance_initializer->tensorflow.contrib.keras.python.keras.initializers.get(moving_variance_initializer)
A:tensorflow.contrib.keras.python.keras.layers.normalization.self.beta_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(beta_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.normalization.self.gamma_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(gamma_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.normalization.self.beta_constraint->tensorflow.contrib.keras.python.keras.constraints.get(beta_constraint)
A:tensorflow.contrib.keras.python.keras.layers.normalization.self.gamma_constraint->tensorflow.contrib.keras.python.keras.constraints.get(gamma_constraint)
A:tensorflow.contrib.keras.python.keras.layers.normalization.input_shape->inputs.get_shape().as_list()
A:tensorflow.contrib.keras.python.keras.layers.normalization.self.input_spec->InputSpec(ndim=len(input_shape), axes={self.axis: dim})
A:tensorflow.contrib.keras.python.keras.layers.normalization.self.gamma->self.add_weight(shape, name='gamma', initializer=self.gamma_initializer, regularizer=self.gamma_regularizer, constraint=self.gamma_constraint)
A:tensorflow.contrib.keras.python.keras.layers.normalization.self.beta->self.add_weight(shape, name='beta', initializer=self.beta_initializer, regularizer=self.beta_regularizer, constraint=self.beta_constraint)
A:tensorflow.contrib.keras.python.keras.layers.normalization.self.moving_mean->self.add_weight(shape, name='moving_mean', initializer=self.moving_mean_initializer, trainable=False)
A:tensorflow.contrib.keras.python.keras.layers.normalization.self.moving_variance->self.add_weight(shape, name='moving_variance', initializer=self.moving_variance_initializer, trainable=False)
A:tensorflow.contrib.keras.python.keras.layers.normalization.ndim->len(input_shape)
A:tensorflow.contrib.keras.python.keras.layers.normalization.reduction_axes->list(range(len(input_shape)))
A:tensorflow.contrib.keras.python.keras.layers.normalization.(normed, mean, variance)->tensorflow.contrib.keras.python.keras.backend.normalize_batch_in_training(inputs, self.gamma, self.beta, reduction_axes, epsilon=self.epsilon)
A:tensorflow.contrib.keras.python.keras.layers.normalization.broadcast_moving_mean->tensorflow.contrib.keras.python.keras.backend.reshape(self.moving_mean, broadcast_shape)
A:tensorflow.contrib.keras.python.keras.layers.normalization.broadcast_moving_variance->tensorflow.contrib.keras.python.keras.backend.reshape(self.moving_variance, broadcast_shape)
A:tensorflow.contrib.keras.python.keras.layers.normalization.broadcast_beta->tensorflow.contrib.keras.python.keras.backend.reshape(self.beta, broadcast_shape)
A:tensorflow.contrib.keras.python.keras.layers.normalization.broadcast_gamma->tensorflow.contrib.keras.python.keras.backend.reshape(self.gamma, broadcast_shape)
A:tensorflow.contrib.keras.python.keras.layers.normalization.base_config->super(BatchNormalization, self).get_config()
tensorflow.contrib.keras.layers.BatchNormalization(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
tensorflow.contrib.keras.layers.BatchNormalization.build(self,input_shape)
tensorflow.contrib.keras.layers.BatchNormalization.call(self,inputs,training=None)
tensorflow.contrib.keras.layers.BatchNormalization.get_config(self)
tensorflow.contrib.keras.python.keras.layers.normalization.BatchNormalization(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.normalization.BatchNormalization.__init__(self,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.normalization.BatchNormalization.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.normalization.BatchNormalization.call(self,inputs,training=None)
tensorflow.contrib.keras.python.keras.layers.normalization.BatchNormalization.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/layers/recurrent.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.layers.recurrent.ones->tensorflow.contrib.keras.python.keras.backend.tile(ones, (1, self.units))
A:tensorflow.contrib.keras.python.keras.layers.recurrent.dropout_matrix->tensorflow.contrib.keras.python.keras.backend.dropout(ones, dropout)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.expanded_dropout_matrix->tensorflow.contrib.keras.python.keras.backend.repeat(dropout_matrix, timesteps)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.x->tensorflow.contrib.keras.python.keras.backend.reshape(x, (-1, timesteps, output_dim))
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.input_spec->InputSpec(shape=(batch_size, None, self.input_dim))
A:tensorflow.contrib.keras.python.keras.layers.recurrent.input_shape->tensorflow.contrib.keras.python.keras.backend.int_shape(inputs)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.initial_state->tensorflow.contrib.keras.python.keras.backend.tile(initial_state, [1, self.units])
A:tensorflow.contrib.keras.python.keras.layers.recurrent.output->self.activation(output)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.initial_states->self.get_initial_states(inputs)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.constants->self.get_constants(inputs, training=None)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.preprocessed_input->self.preprocess_input(inputs, training=None)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.(last_output, outputs, states)->tensorflow.contrib.keras.python.keras.backend.rnn(self.step, preprocessed_input, initial_states, go_backwards=self.go_backwards, mask=mask, constants=constants, unroll=self.unroll)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.value->numpy.zeros((batch_size, self.units))
A:tensorflow.contrib.keras.python.keras.layers.recurrent.base_config->super(LSTM, self).get_config()
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.activation->tensorflow.contrib.keras.python.keras.activations.get(activation)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.kernel_initializer->tensorflow.contrib.keras.python.keras.initializers.get(kernel_initializer)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.recurrent_initializer->tensorflow.contrib.keras.python.keras.initializers.get(recurrent_initializer)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.bias_initializer->tensorflow.contrib.keras.python.keras.initializers.get(bias_initializer)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.kernel_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(kernel_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.recurrent_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(recurrent_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.bias_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(bias_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.activity_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(activity_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.kernel_constraint->tensorflow.contrib.keras.python.keras.constraints.get(kernel_constraint)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.recurrent_constraint->tensorflow.contrib.keras.python.keras.constraints.get(recurrent_constraint)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.bias_constraint->tensorflow.contrib.keras.python.keras.constraints.get(bias_constraint)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.dropout->min(1.0, max(0.0, dropout))
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.recurrent_dropout->min(1.0, max(0.0, recurrent_dropout))
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.state_spec->InputSpec(shape=(batch_size, self.units))
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.kernel->self.add_weight((self.input_dim, self.units * 4), name='kernel', initializer=self.kernel_initializer, regularizer=self.kernel_regularizer, constraint=self.kernel_constraint)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.recurrent_kernel->self.add_weight((self.units, self.units * 4), name='recurrent_kernel', initializer=self.recurrent_initializer, regularizer=self.recurrent_regularizer, constraint=self.recurrent_constraint)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.bias->self.add_weight((self.units * 4,), name='bias', initializer=self.bias_initializer, regularizer=self.bias_regularizer, constraint=self.bias_constraint)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.h->tensorflow.contrib.keras.python.keras.backend.bias_add(h, self.bias)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.dp_mask->tensorflow.contrib.keras.python.keras.backend.in_train_phase(dropped_inputs, ones, training=training)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.rec_dp_mask->tensorflow.contrib.keras.python.keras.backend.in_train_phase(dropped_inputs, ones, training=training)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.self.recurrent_activation->tensorflow.contrib.keras.python.keras.activations.get(recurrent_activation)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.x_z->tensorflow.contrib.keras.python.keras.backend.bias_add(x_z, self.bias_z)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.x_r->tensorflow.contrib.keras.python.keras.backend.bias_add(x_r, self.bias_r)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.x_h->tensorflow.contrib.keras.python.keras.backend.bias_add(x_r, self.bias_h)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.matrix_x->tensorflow.contrib.keras.python.keras.backend.bias_add(matrix_x, self.bias)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.matrix_inner->tensorflow.contrib.keras.python.keras.backend.dot(h_tm1 * rec_dp_mask[0], self.recurrent_kernel[:, :2 * self.units])
A:tensorflow.contrib.keras.python.keras.layers.recurrent.z->tensorflow.contrib.keras.python.keras.backend.bias_add(z, self.bias)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.r->self.recurrent_activation(x_r + K.dot(h_tm1 * rec_dp_mask[1], self.recurrent_kernel_r))
A:tensorflow.contrib.keras.python.keras.layers.recurrent.recurrent_h->tensorflow.contrib.keras.python.keras.backend.dot(r * h_tm1 * rec_dp_mask[0], self.recurrent_kernel[:, 2 * self.units:])
A:tensorflow.contrib.keras.python.keras.layers.recurrent.hh->self.activation(x_h + K.dot(r * h_tm1 * rec_dp_mask[2], self.recurrent_kernel_h))
A:tensorflow.contrib.keras.python.keras.layers.recurrent.bias_value->numpy.zeros((self.units * 4,))
A:tensorflow.contrib.keras.python.keras.layers.recurrent.x_i->_time_distributed_dense(inputs, self.kernel_i, self.bias_i, self.dropout, input_dim, self.units, timesteps, training=training)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.x_f->_time_distributed_dense(inputs, self.kernel_f, self.bias_f, self.dropout, input_dim, self.units, timesteps, training=training)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.x_c->_time_distributed_dense(inputs, self.kernel_c, self.bias_c, self.dropout, input_dim, self.units, timesteps, training=training)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.x_o->_time_distributed_dense(inputs, self.kernel_o, self.bias_o, self.dropout, input_dim, self.units, timesteps, training=training)
A:tensorflow.contrib.keras.python.keras.layers.recurrent.i->self.recurrent_activation(x_i + K.dot(h_tm1 * rec_dp_mask[0], self.recurrent_kernel_i))
A:tensorflow.contrib.keras.python.keras.layers.recurrent.f->self.recurrent_activation(x_f + K.dot(h_tm1 * rec_dp_mask[1], self.recurrent_kernel_f))
A:tensorflow.contrib.keras.python.keras.layers.recurrent.o->self.recurrent_activation(x_o + K.dot(h_tm1 * rec_dp_mask[3], self.recurrent_kernel_o))
tensorflow.contrib.keras.layers.GRU(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tensorflow.contrib.keras.layers.GRU.build(self,input_shape)
tensorflow.contrib.keras.layers.GRU.get_config(self)
tensorflow.contrib.keras.layers.GRU.get_constants(self,inputs,training=None)
tensorflow.contrib.keras.layers.GRU.preprocess_input(self,inputs,training=None)
tensorflow.contrib.keras.layers.GRU.step(self,inputs,states)
tensorflow.contrib.keras.layers.LSTM(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tensorflow.contrib.keras.layers.LSTM.build(self,input_shape)
tensorflow.contrib.keras.layers.LSTM.get_config(self)
tensorflow.contrib.keras.layers.LSTM.get_constants(self,inputs,training=None)
tensorflow.contrib.keras.layers.LSTM.preprocess_input(self,inputs,training=None)
tensorflow.contrib.keras.layers.LSTM.step(self,inputs,states)
tensorflow.contrib.keras.layers.Recurrent(self,return_sequences=False,go_backwards=False,stateful=False,unroll=False,implementation=0,**kwargs)
tensorflow.contrib.keras.layers.Recurrent._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.Recurrent.call(self,inputs,mask=None,initial_state=None,training=None)
tensorflow.contrib.keras.layers.Recurrent.compute_mask(self,inputs,mask)
tensorflow.contrib.keras.layers.Recurrent.get_config(self)
tensorflow.contrib.keras.layers.Recurrent.get_constants(self,inputs,training=None)
tensorflow.contrib.keras.layers.Recurrent.get_initial_states(self,inputs)
tensorflow.contrib.keras.layers.Recurrent.preprocess_input(self,inputs,training=None)
tensorflow.contrib.keras.layers.Recurrent.reset_states(self,states_value=None)
tensorflow.contrib.keras.layers.Recurrent.step(self,inputs,states)
tensorflow.contrib.keras.layers.SimpleRNN(self,units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tensorflow.contrib.keras.layers.SimpleRNN.build(self,input_shape)
tensorflow.contrib.keras.layers.SimpleRNN.get_config(self)
tensorflow.contrib.keras.layers.SimpleRNN.get_constants(self,inputs,training=None)
tensorflow.contrib.keras.layers.SimpleRNN.preprocess_input(self,inputs,training=None)
tensorflow.contrib.keras.layers.SimpleRNN.step(self,inputs,states)
tensorflow.contrib.keras.layers._time_distributed_dense(x,w,b=None,dropout=None,input_dim=None,output_dim=None,timesteps=None,training=None)
tensorflow.contrib.keras.python.keras.layers.recurrent.GRU(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.recurrent.GRU.__init__(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.recurrent.GRU.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.recurrent.GRU.get_config(self)
tensorflow.contrib.keras.python.keras.layers.recurrent.GRU.get_constants(self,inputs,training=None)
tensorflow.contrib.keras.python.keras.layers.recurrent.GRU.preprocess_input(self,inputs,training=None)
tensorflow.contrib.keras.python.keras.layers.recurrent.GRU.step(self,inputs,states)
tensorflow.contrib.keras.python.keras.layers.recurrent.LSTM(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.recurrent.LSTM.__init__(self,units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.recurrent.LSTM.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.recurrent.LSTM.get_config(self)
tensorflow.contrib.keras.python.keras.layers.recurrent.LSTM.get_constants(self,inputs,training=None)
tensorflow.contrib.keras.python.keras.layers.recurrent.LSTM.preprocess_input(self,inputs,training=None)
tensorflow.contrib.keras.python.keras.layers.recurrent.LSTM.step(self,inputs,states)
tensorflow.contrib.keras.python.keras.layers.recurrent.Recurrent(self,return_sequences=False,go_backwards=False,stateful=False,unroll=False,implementation=0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.recurrent.Recurrent.__init__(self,return_sequences=False,go_backwards=False,stateful=False,unroll=False,implementation=0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.recurrent.Recurrent._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.recurrent.Recurrent.call(self,inputs,mask=None,initial_state=None,training=None)
tensorflow.contrib.keras.python.keras.layers.recurrent.Recurrent.compute_mask(self,inputs,mask)
tensorflow.contrib.keras.python.keras.layers.recurrent.Recurrent.get_config(self)
tensorflow.contrib.keras.python.keras.layers.recurrent.Recurrent.get_constants(self,inputs,training=None)
tensorflow.contrib.keras.python.keras.layers.recurrent.Recurrent.get_initial_states(self,inputs)
tensorflow.contrib.keras.python.keras.layers.recurrent.Recurrent.preprocess_input(self,inputs,training=None)
tensorflow.contrib.keras.python.keras.layers.recurrent.Recurrent.reset_states(self,states_value=None)
tensorflow.contrib.keras.python.keras.layers.recurrent.Recurrent.step(self,inputs,states)
tensorflow.contrib.keras.python.keras.layers.recurrent.SimpleRNN(self,units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.recurrent.SimpleRNN.__init__(self,units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.recurrent.SimpleRNN.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.recurrent.SimpleRNN.get_config(self)
tensorflow.contrib.keras.python.keras.layers.recurrent.SimpleRNN.get_constants(self,inputs,training=None)
tensorflow.contrib.keras.python.keras.layers.recurrent.SimpleRNN.preprocess_input(self,inputs,training=None)
tensorflow.contrib.keras.python.keras.layers.recurrent.SimpleRNN.step(self,inputs,states)
tensorflow.contrib.keras.python.keras.layers.recurrent._time_distributed_dense(x,w,b=None,dropout=None,input_dim=None,output_dim=None,timesteps=None,training=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/layers/advanced_activations.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.layers.advanced_activations.self.alpha->tensorflow.contrib.keras.python.keras.backend.cast_to_floatx(alpha)
A:tensorflow.contrib.keras.python.keras.layers.advanced_activations.base_config->super(ThresholdedReLU, self).get_config()
A:tensorflow.contrib.keras.python.keras.layers.advanced_activations.self.alpha_initializer->tensorflow.contrib.keras.python.keras.initializers.get(alpha_initializer)
A:tensorflow.contrib.keras.python.keras.layers.advanced_activations.self.alpha_regularizer->tensorflow.contrib.keras.python.keras.regularizers.get(alpha_regularizer)
A:tensorflow.contrib.keras.python.keras.layers.advanced_activations.self.alpha_constraint->tensorflow.contrib.keras.python.keras.constraints.get(alpha_constraint)
A:tensorflow.contrib.keras.python.keras.layers.advanced_activations.self.shared_axes->list(shared_axes)
A:tensorflow.contrib.keras.python.keras.layers.advanced_activations.input_shape->tensorflow.python.framework.tensor_shape.TensorShape(input_shape).as_list()
A:tensorflow.contrib.keras.python.keras.layers.advanced_activations.self.input_spec->InputSpec(ndim=len(input_shape), axes=axes)
A:tensorflow.contrib.keras.python.keras.layers.advanced_activations.pos->tensorflow.contrib.keras.python.keras.backend.relu(inputs)
A:tensorflow.contrib.keras.python.keras.layers.advanced_activations.self.theta->tensorflow.contrib.keras.python.keras.backend.cast_to_floatx(theta)
tensorflow.contrib.keras.layers.ELU(self,alpha=1.0,**kwargs)
tensorflow.contrib.keras.layers.ELU.call(self,inputs)
tensorflow.contrib.keras.layers.ELU.get_config(self)
tensorflow.contrib.keras.layers.LeakyReLU(self,alpha=0.3,**kwargs)
tensorflow.contrib.keras.layers.LeakyReLU.call(self,inputs)
tensorflow.contrib.keras.layers.LeakyReLU.get_config(self)
tensorflow.contrib.keras.layers.PReLU(self,alpha_initializer='zeros',alpha_regularizer=None,alpha_constraint=None,shared_axes=None,**kwargs)
tensorflow.contrib.keras.layers.PReLU.build(self,input_shape)
tensorflow.contrib.keras.layers.PReLU.call(self,inputs,mask=None)
tensorflow.contrib.keras.layers.PReLU.get_config(self)
tensorflow.contrib.keras.layers.ThresholdedReLU(self,theta=1.0,**kwargs)
tensorflow.contrib.keras.layers.ThresholdedReLU.call(self,inputs,mask=None)
tensorflow.contrib.keras.layers.ThresholdedReLU.get_config(self)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.ELU(self,alpha=1.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.ELU.__init__(self,alpha=1.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.ELU.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.ELU.get_config(self)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.LeakyReLU(self,alpha=0.3,**kwargs)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.LeakyReLU.__init__(self,alpha=0.3,**kwargs)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.LeakyReLU.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.LeakyReLU.get_config(self)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.PReLU(self,alpha_initializer='zeros',alpha_regularizer=None,alpha_constraint=None,shared_axes=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.PReLU.__init__(self,alpha_initializer='zeros',alpha_regularizer=None,alpha_constraint=None,shared_axes=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.PReLU.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.PReLU.call(self,inputs,mask=None)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.PReLU.get_config(self)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.ThresholdedReLU(self,theta=1.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.ThresholdedReLU.__init__(self,theta=1.0,**kwargs)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.ThresholdedReLU.call(self,inputs,mask=None)
tensorflow.contrib.keras.python.keras.layers.advanced_activations.ThresholdedReLU.get_config(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/layers/wrappers.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.layers.wrappers.updates->self.layer.get_updates_for(None)
A:tensorflow.contrib.keras.python.keras.layers.wrappers.losses->self.layer.get_losses_for(None)
A:tensorflow.contrib.keras.python.keras.layers.wrappers.base_config->super(Bidirectional, self).get_config()
A:tensorflow.contrib.keras.python.keras.layers.wrappers.layer->deserialize_layer(config.pop('layer'))
A:tensorflow.contrib.keras.python.keras.layers.wrappers.input_shape->tensorflow.python.framework.tensor_shape.TensorShape(input_shape).as_list()
A:tensorflow.contrib.keras.python.keras.layers.wrappers.self.input_spec->InputSpec(shape=input_shape)
A:tensorflow.contrib.keras.python.keras.layers.wrappers.child_input_shape->tensorflow.python.framework.tensor_shape.TensorShape([input_shape[0]] + input_shape[2:])
A:tensorflow.contrib.keras.python.keras.layers.wrappers.child_output_shape->self.layer._compute_output_shape(child_input_shape).as_list()
A:tensorflow.contrib.keras.python.keras.layers.wrappers.output->self.layer.call(x)
A:tensorflow.contrib.keras.python.keras.layers.wrappers.(_, outputs, _)->tensorflow.contrib.keras.python.keras.backend.rnn(step, inputs, initial_states=[], input_length=input_shape[1], unroll=False)
A:tensorflow.contrib.keras.python.keras.layers.wrappers.inputs->tensorflow.contrib.keras.python.keras.backend.reshape(inputs, (-1,) + input_shape[2:])
A:tensorflow.contrib.keras.python.keras.layers.wrappers.y->self.forward_layer.call(inputs, mask)
A:tensorflow.contrib.keras.python.keras.layers.wrappers.output_shape->self._compute_output_shape(input_shape).as_list()
A:tensorflow.contrib.keras.python.keras.layers.wrappers.regularization_loss->self.layer.activity_regularizer(y)
A:tensorflow.contrib.keras.python.keras.layers.wrappers.self.forward_layer->copy.copy(layer)
A:tensorflow.contrib.keras.python.keras.layers.wrappers.config->deserialize_layer(config.pop('layer')).get_config()
A:tensorflow.contrib.keras.python.keras.layers.wrappers.self.backward_layer->deserialize_layer(config.pop('layer')).__class__.from_config(config)
A:tensorflow.contrib.keras.python.keras.layers.wrappers.nw->len(weights)
A:tensorflow.contrib.keras.python.keras.layers.wrappers.shape->self.forward_layer._compute_output_shape(input_shape)
A:tensorflow.contrib.keras.python.keras.layers.wrappers.y_rev->tensorflow.contrib.keras.python.keras.backend.reverse(y_rev, 1)
tensorflow.contrib.keras.layers.Bidirectional(self,layer,merge_mode='concat',weights=None,**kwargs)
tensorflow.contrib.keras.layers.Bidirectional._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.Bidirectional.build(self,input_shape)
tensorflow.contrib.keras.layers.Bidirectional.call(self,inputs,mask=None)
tensorflow.contrib.keras.layers.Bidirectional.compute_mask(self,inputs,mask)
tensorflow.contrib.keras.layers.Bidirectional.constraints(self)
tensorflow.contrib.keras.layers.Bidirectional.get_config(self)
tensorflow.contrib.keras.layers.Bidirectional.get_weights(self)
tensorflow.contrib.keras.layers.Bidirectional.losses(self)
tensorflow.contrib.keras.layers.Bidirectional.non_trainable_weights(self)
tensorflow.contrib.keras.layers.Bidirectional.reset_states(self)
tensorflow.contrib.keras.layers.Bidirectional.set_weights(self,weights)
tensorflow.contrib.keras.layers.Bidirectional.trainable_weights(self)
tensorflow.contrib.keras.layers.Bidirectional.updates(self)
tensorflow.contrib.keras.layers.TimeDistributed(self,layer,**kwargs)
tensorflow.contrib.keras.layers.TimeDistributed._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.TimeDistributed.build(self,input_shape)
tensorflow.contrib.keras.layers.TimeDistributed.call(self,inputs,mask=None)
tensorflow.contrib.keras.layers.Wrapper(self,layer,**kwargs)
tensorflow.contrib.keras.layers.Wrapper.activity_regularizer(self)
tensorflow.contrib.keras.layers.Wrapper.build(self,input_shape=None)
tensorflow.contrib.keras.layers.Wrapper.constraints(self)
tensorflow.contrib.keras.layers.Wrapper.from_config(cls,config)
tensorflow.contrib.keras.layers.Wrapper.get_config(self)
tensorflow.contrib.keras.layers.Wrapper.get_losses_for(self,inputs=None)
tensorflow.contrib.keras.layers.Wrapper.get_updates_for(self,inputs=None)
tensorflow.contrib.keras.layers.Wrapper.get_weights(self)
tensorflow.contrib.keras.layers.Wrapper.losses(self)
tensorflow.contrib.keras.layers.Wrapper.non_trainable_weights(self)
tensorflow.contrib.keras.layers.Wrapper.set_weights(self,weights)
tensorflow.contrib.keras.layers.Wrapper.trainable_weights(self)
tensorflow.contrib.keras.layers.Wrapper.updates(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.Bidirectional(self,layer,merge_mode='concat',weights=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.wrappers.Bidirectional.__init__(self,layer,merge_mode='concat',weights=None,**kwargs)
tensorflow.contrib.keras.python.keras.layers.wrappers.Bidirectional._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.wrappers.Bidirectional.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.wrappers.Bidirectional.call(self,inputs,mask=None)
tensorflow.contrib.keras.python.keras.layers.wrappers.Bidirectional.compute_mask(self,inputs,mask)
tensorflow.contrib.keras.python.keras.layers.wrappers.Bidirectional.constraints(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.Bidirectional.get_config(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.Bidirectional.get_weights(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.Bidirectional.losses(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.Bidirectional.non_trainable_weights(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.Bidirectional.reset_states(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.Bidirectional.set_weights(self,weights)
tensorflow.contrib.keras.python.keras.layers.wrappers.Bidirectional.trainable_weights(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.Bidirectional.updates(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.TimeDistributed(self,layer,**kwargs)
tensorflow.contrib.keras.python.keras.layers.wrappers.TimeDistributed.__init__(self,layer,**kwargs)
tensorflow.contrib.keras.python.keras.layers.wrappers.TimeDistributed._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.wrappers.TimeDistributed.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.wrappers.TimeDistributed.call(self,inputs,mask=None)
tensorflow.contrib.keras.python.keras.layers.wrappers.Wrapper(self,layer,**kwargs)
tensorflow.contrib.keras.python.keras.layers.wrappers.Wrapper.__init__(self,layer,**kwargs)
tensorflow.contrib.keras.python.keras.layers.wrappers.Wrapper.activity_regularizer(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.Wrapper.build(self,input_shape=None)
tensorflow.contrib.keras.python.keras.layers.wrappers.Wrapper.constraints(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.Wrapper.from_config(cls,config)
tensorflow.contrib.keras.python.keras.layers.wrappers.Wrapper.get_config(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.Wrapper.get_losses_for(self,inputs=None)
tensorflow.contrib.keras.python.keras.layers.wrappers.Wrapper.get_updates_for(self,inputs=None)
tensorflow.contrib.keras.python.keras.layers.wrappers.Wrapper.get_weights(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.Wrapper.losses(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.Wrapper.non_trainable_weights(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.Wrapper.set_weights(self,weights)
tensorflow.contrib.keras.python.keras.layers.wrappers.Wrapper.trainable_weights(self)
tensorflow.contrib.keras.python.keras.layers.wrappers.Wrapper.updates(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/python/keras/layers/merge.py----------------------------------------
A:tensorflow.contrib.keras.python.keras.layers.merge.output_shape->tensorflow.python.framework.tensor_shape.TensorShape(input_shapes[0]).as_list()
A:tensorflow.contrib.keras.python.keras.layers.merge.batch_sizes->set(batch_sizes)
A:tensorflow.contrib.keras.python.keras.layers.merge.output->tensorflow.contrib.keras.python.keras.backend.batch_dot(x1, x2, axes)
A:tensorflow.contrib.keras.python.keras.layers.merge.shape_set->set()
A:tensorflow.contrib.keras.python.keras.layers.merge.shape->tensorflow.python.framework.tensor_shape.TensorShape(shape).as_list()
A:tensorflow.contrib.keras.python.keras.layers.merge.concatenated->tensorflow.contrib.keras.python.keras.backend.concatenate(masks, axis=self.axis)
A:tensorflow.contrib.keras.python.keras.layers.merge.base_config->super(Dot, self).get_config()
A:tensorflow.contrib.keras.python.keras.layers.merge.shape1->tensorflow.python.framework.tensor_shape.TensorShape(input_shape[0]).as_list()
A:tensorflow.contrib.keras.python.keras.layers.merge.shape2->tensorflow.python.framework.tensor_shape.TensorShape(input_shape[1]).as_list()
A:tensorflow.contrib.keras.python.keras.layers.merge.x1->tensorflow.contrib.keras.python.keras.backend.l2_normalize(x1, axis=axes[0])
A:tensorflow.contrib.keras.python.keras.layers.merge.x2->tensorflow.contrib.keras.python.keras.backend.l2_normalize(x2, axis=axes[1])
tensorflow.contrib.keras.layers.Add(_Merge)
tensorflow.contrib.keras.layers.Add._merge_function(self,inputs)
tensorflow.contrib.keras.layers.Average(_Merge)
tensorflow.contrib.keras.layers.Average._merge_function(self,inputs)
tensorflow.contrib.keras.layers.Concatenate(self,axis=-1,**kwargs)
tensorflow.contrib.keras.layers.Concatenate._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.Concatenate.build(self,input_shape)
tensorflow.contrib.keras.layers.Concatenate.call(self,inputs)
tensorflow.contrib.keras.layers.Concatenate.compute_mask(self,inputs,mask=None)
tensorflow.contrib.keras.layers.Concatenate.get_config(self)
tensorflow.contrib.keras.layers.Dot(self,axes,normalize=False,**kwargs)
tensorflow.contrib.keras.layers.Dot._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.layers.Dot.build(self,input_shape)
tensorflow.contrib.keras.layers.Dot.call(self,inputs)
tensorflow.contrib.keras.layers.Dot.compute_mask(self,inputs,mask=None)
tensorflow.contrib.keras.layers.Dot.get_config(self)
tensorflow.contrib.keras.layers.Maximum(_Merge)
tensorflow.contrib.keras.layers.Maximum._merge_function(self,inputs)
tensorflow.contrib.keras.layers.Multiply(_Merge)
tensorflow.contrib.keras.layers.Multiply._merge_function(self,inputs)
tensorflow.contrib.keras.layers._Merge(self,**kwargs)
tensorflow.contrib.keras.layers._Merge._compute_elemwise_op_output_shape(self,shape1,shape2)
tensorflow.contrib.keras.layers._Merge._merge_function(self,inputs)
tensorflow.contrib.keras.layers._Merge.build(self,input_shape)
tensorflow.contrib.keras.layers._Merge.call(self,inputs)
tensorflow.contrib.keras.layers._Merge.compute_mask(self,inputs,mask=None)
tensorflow.contrib.keras.layers.add(inputs,**kwargs)
tensorflow.contrib.keras.layers.average(inputs,**kwargs)
tensorflow.contrib.keras.layers.concatenate(inputs,axis=-1,**kwargs)
tensorflow.contrib.keras.layers.dot(inputs,axes,normalize=False,**kwargs)
tensorflow.contrib.keras.layers.maximum(inputs,**kwargs)
tensorflow.contrib.keras.layers.multiply(inputs,**kwargs)
tensorflow.contrib.keras.python.keras.layers.merge.Add(_Merge)
tensorflow.contrib.keras.python.keras.layers.merge.Add._merge_function(self,inputs)
tensorflow.contrib.keras.python.keras.layers.merge.Average(_Merge)
tensorflow.contrib.keras.python.keras.layers.merge.Average._merge_function(self,inputs)
tensorflow.contrib.keras.python.keras.layers.merge.Concatenate(self,axis=-1,**kwargs)
tensorflow.contrib.keras.python.keras.layers.merge.Concatenate.__init__(self,axis=-1,**kwargs)
tensorflow.contrib.keras.python.keras.layers.merge.Concatenate._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.merge.Concatenate.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.merge.Concatenate.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.merge.Concatenate.compute_mask(self,inputs,mask=None)
tensorflow.contrib.keras.python.keras.layers.merge.Concatenate.get_config(self)
tensorflow.contrib.keras.python.keras.layers.merge.Dot(self,axes,normalize=False,**kwargs)
tensorflow.contrib.keras.python.keras.layers.merge.Dot.__init__(self,axes,normalize=False,**kwargs)
tensorflow.contrib.keras.python.keras.layers.merge.Dot._compute_output_shape(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.merge.Dot.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.merge.Dot.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.merge.Dot.compute_mask(self,inputs,mask=None)
tensorflow.contrib.keras.python.keras.layers.merge.Dot.get_config(self)
tensorflow.contrib.keras.python.keras.layers.merge.Maximum(_Merge)
tensorflow.contrib.keras.python.keras.layers.merge.Maximum._merge_function(self,inputs)
tensorflow.contrib.keras.python.keras.layers.merge.Multiply(_Merge)
tensorflow.contrib.keras.python.keras.layers.merge.Multiply._merge_function(self,inputs)
tensorflow.contrib.keras.python.keras.layers.merge._Merge(self,**kwargs)
tensorflow.contrib.keras.python.keras.layers.merge._Merge.__init__(self,**kwargs)
tensorflow.contrib.keras.python.keras.layers.merge._Merge._compute_elemwise_op_output_shape(self,shape1,shape2)
tensorflow.contrib.keras.python.keras.layers.merge._Merge._merge_function(self,inputs)
tensorflow.contrib.keras.python.keras.layers.merge._Merge.build(self,input_shape)
tensorflow.contrib.keras.python.keras.layers.merge._Merge.call(self,inputs)
tensorflow.contrib.keras.python.keras.layers.merge._Merge.compute_mask(self,inputs,mask=None)
tensorflow.contrib.keras.python.keras.layers.merge.add(inputs,**kwargs)
tensorflow.contrib.keras.python.keras.layers.merge.average(inputs,**kwargs)
tensorflow.contrib.keras.python.keras.layers.merge.concatenate(inputs,axis=-1,**kwargs)
tensorflow.contrib.keras.python.keras.layers.merge.dot(inputs,axes,normalize=False,**kwargs)
tensorflow.contrib.keras.python.keras.layers.merge.maximum(inputs,**kwargs)
tensorflow.contrib.keras.python.keras.layers.merge.multiply(inputs,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/preprocessing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/preprocessing/image/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/preprocessing/text/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/preprocessing/sequence/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/datasets/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/datasets/cifar100/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/datasets/imdb/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/datasets/boston_housing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/datasets/cifar10/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/datasets/reuters/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/datasets/mnist/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/metrics/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/applications/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/applications/inception_v3/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/applications/vgg19/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/applications/xception/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/applications/resnet50/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/applications/vgg16/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/activations/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/backend/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/wrappers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/wrappers/scikit_learn/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/initializers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/optimizers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/callbacks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/losses/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/constraints/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/models/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/regularizers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/keras/api/keras/layers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/session_bundle/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/session_bundle/exporter.py----------------------------------------
A:tensorflow.contrib.session_bundle.exporter.new_path->os.path.join(compat.as_bytes(export_dir_path), compat.as_bytes(basename))
A:tensorflow.contrib.session_bundle.exporter.signature->tensorflow.contrib.session_bundle.manifest_pb2.Signature()
A:tensorflow.contrib.session_bundle.exporter.saver_def->saver.as_saver_def()
A:tensorflow.contrib.session_bundle.exporter.self._saver->tensorflow.python.training.saver.Saver(saver_def=saver_def)
A:tensorflow.contrib.session_bundle.exporter.asset_filepath->self._file_path_value(asset_tensor)
A:tensorflow.contrib.session_bundle.exporter.basename->os.path.basename(asset_filepath)
A:tensorflow.contrib.session_bundle.exporter.copy->tensorflow.core.framework.graph_pb2.GraphDef()
A:tensorflow.contrib.session_bundle.exporter.graph_any_buf->Any()
A:tensorflow.contrib.session_bundle.exporter.signatures_proto->tensorflow.contrib.session_bundle.manifest_pb2.Signatures()
A:tensorflow.contrib.session_bundle.exporter.signatures_any_buf->Any()
A:tensorflow.contrib.session_bundle.exporter.asset->tensorflow.contrib.session_bundle.manifest_pb2.AssetFile()
A:tensorflow.contrib.session_bundle.exporter.asset_any_buf->Any()
A:tensorflow.contrib.session_bundle.exporter.global_step->tensorflow.python.training.training_util.global_step(sess, global_step_tensor)
A:tensorflow.contrib.session_bundle.exporter.export_dir->os.path.join(compat.as_bytes(export_dir_base), compat.as_bytes(constants.VERSION_FORMAT_SPECIFIER % global_step))
A:tensorflow.contrib.session_bundle.exporter.assets_dir->os.path.join(compat.as_bytes(tmp_export_dir), compat.as_bytes(constants.ASSETS_DIRECTORY))
A:tensorflow.contrib.session_bundle.exporter.match->re.match('^' + export_dir_base + '/(\\d{8})$', path.path)
A:tensorflow.contrib.session_bundle.exporter.paths_to_delete->tensorflow.contrib.session_bundle.gc.negation(exports_to_keep)
tensorflow.contrib.session_bundle.exporter.Exporter(self,saver)
tensorflow.contrib.session_bundle.exporter.Exporter.__init__(self,saver)
tensorflow.contrib.session_bundle.exporter.Exporter._file_path_value(self,path_tensor)
tensorflow.contrib.session_bundle.exporter.Exporter.export(self,export_dir_base,global_step_tensor,sess=None,exports_to_keep=None)
tensorflow.contrib.session_bundle.exporter.Exporter.init(self,graph_def=None,init_op=None,clear_devices=False,default_graph_signature=None,named_graph_signatures=None,assets_collection=None,assets_callback=gfile_copy_callback)
tensorflow.contrib.session_bundle.exporter.classification_signature(input_tensor,classes_tensor=None,scores_tensor=None)
tensorflow.contrib.session_bundle.exporter.generic_signature(name_tensor_map)
tensorflow.contrib.session_bundle.exporter.gfile_copy_callback(files_to_copy,export_dir_path)
tensorflow.contrib.session_bundle.exporter.regression_signature(input_tensor,output_tensor)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/session_bundle/session_bundle.py----------------------------------------
A:tensorflow.contrib.session_bundle.session_bundle.meta_graph_filename->os.path.join(export_dir, constants.META_GRAPH_DEF_FILENAME)
A:tensorflow.contrib.session_bundle.session_bundle.meta_graph_def->tensorflow.core.protobuf.meta_graph_pb2.MetaGraphDef()
A:tensorflow.contrib.session_bundle.session_bundle.variables_index_filename->os.path.join(export_dir, constants.VARIABLES_INDEX_FILENAME_V2)
A:tensorflow.contrib.session_bundle.session_bundle.checkpoint_v2->tensorflow.python.lib.io.file_io.file_exists(variables_index_filename)
A:tensorflow.contrib.session_bundle.session_bundle.variables_filename_pattern->os.path.join(export_dir, constants.VARIABLES_FILENAME_PATTERN_V2)
A:tensorflow.contrib.session_bundle.session_bundle.variables_filename_list->tensorflow.python.lib.io.file_io.get_matching_files(variables_filename)
A:tensorflow.contrib.session_bundle.session_bundle.variables_filename->os.path.join(export_dir, constants.VARIABLES_FILENAME_PATTERN)
A:tensorflow.contrib.session_bundle.session_bundle.assets_dir->os.path.join(export_dir, constants.ASSETS_DIRECTORY)
A:tensorflow.contrib.session_bundle.session_bundle.graph_def->tensorflow.core.framework.graph_pb2.GraphDef()
A:tensorflow.contrib.session_bundle.session_bundle.sess->tensorflow.python.client.session.Session(target, graph=None, config=config)
A:tensorflow.contrib.session_bundle.session_bundle.saver->tensorflow.python.training.saver.import_meta_graph(meta_graph_def)
A:tensorflow.contrib.session_bundle.session_bundle.asset_pb->tensorflow.contrib.session_bundle.manifest_pb2.AssetFile()
A:tensorflow.contrib.session_bundle.session_bundle.asset_tensor_dict[asset_pb.tensor_binding.tensor_name]->os.path.join(assets_dir, asset_pb.filename)
tensorflow.contrib.session_bundle.session_bundle.load_session_bundle_from_path(export_dir,target='',config=None,meta_graph_def=None)
tensorflow.contrib.session_bundle.session_bundle.maybe_session_bundle_dir(export_dir)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/session_bundle/bundle_shim.py----------------------------------------
A:tensorflow.contrib.session_bundle.bundle_shim.tensor_info->tensorflow.core.protobuf.meta_graph_pb2.TensorInfo(name=tensor_name)
A:tensorflow.contrib.session_bundle.bundle_shim.signature_def->tensorflow.core.protobuf.meta_graph_pb2.SignatureDef()
A:tensorflow.contrib.session_bundle.bundle_shim.signatures_proto->tensorflow.contrib.session_bundle.manifest_pb2.Signatures()
A:tensorflow.contrib.session_bundle.bundle_shim.default_signature_def->_convert_default_signature_to_signature_def(signatures_proto)
A:tensorflow.contrib.session_bundle.bundle_shim.named_signature_def->_convert_named_signatures_to_signature_def(signatures_proto)
A:tensorflow.contrib.session_bundle.bundle_shim.meta_graph_filename->os.path.join(export_dir, legacy_constants.META_GRAPH_DEF_FILENAME)
A:tensorflow.contrib.session_bundle.bundle_shim.metagraph_def->tensorflow.python.saved_model.loader.load(sess, tags, export_dir)
A:tensorflow.contrib.session_bundle.bundle_shim.(default_signature_def, named_signature_def)->_convert_signatures_to_signature_defs(metagraph_def)
A:tensorflow.contrib.session_bundle.bundle_shim.(sess, metagraph_def)->_load_saved_model_from_session_bundle_path(export_dir, target, config)
A:tensorflow.contrib.session_bundle.bundle_shim.sess->tensorflow.python.client.session.Session(target, graph=None, config=config)
tensorflow.contrib.session_bundle.bundle_shim._add_input_to_signature_def(tensor_name,map_key,signature_def)
tensorflow.contrib.session_bundle.bundle_shim._add_output_to_signature_def(tensor_name,map_key,signature_def)
tensorflow.contrib.session_bundle.bundle_shim._convert_default_signature_to_signature_def(signatures)
tensorflow.contrib.session_bundle.bundle_shim._convert_named_signatures_to_signature_def(signatures)
tensorflow.contrib.session_bundle.bundle_shim._convert_signatures_to_signature_defs(metagraph_def)
tensorflow.contrib.session_bundle.bundle_shim._load_saved_model_from_session_bundle_path(export_dir,target,config)
tensorflow.contrib.session_bundle.bundle_shim.load_session_bundle_or_saved_model_bundle_from_path(export_dir,tags=None,target='',config=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/session_bundle/manifest_pb2.py----------------------------------------
A:tensorflow.contrib.session_bundle.manifest_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.contrib.session_bundle.manifest_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/contrib/session_bundle/manifest.proto', package='tensorflow.serving', syntax='proto3', serialized_pb=_b('\n0tensorflow/contrib/session_bundle/manifest.proto\x12\x12tensorflow.serving"ì\x01\n\nSignatures\x128\n\x11default_signature\x18\x01 \x01(\x0b2\x1d.tensorflow.serving.Signature\x12M\n\x10named_signatures\x18\x02 \x03(\x0b23.tensorflow.serving.Signatures.NamedSignaturesEntry\x1aU\n\x14NamedSignaturesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12,\n\x05value\x18\x02 \x01(\x0b2\x1d.tensorflow.serving.Signature:\x028\x01"$\n\rTensorBinding\x12\x13\n\x0btensor_name\x18\x01 \x01(\t"X\n\tAssetFile\x129\n\x0etensor_binding\x18\x01 \x01(\x0b2!.tensorflow.serving.TensorBinding\x12\x10\n\x08filename\x18\x02 \x01(\t"ð\x01\n\tSignature\x12G\n\x14regression_signature\x18\x01 \x01(\x0b2\'.tensorflow.serving.RegressionSignatureH\x00\x12O\n\x18classification_signature\x18\x02 \x01(\x0b2+.tensorflow.serving.ClassificationSignatureH\x00\x12A\n\x11generic_signature\x18\x03 \x01(\x0b2$.tensorflow.serving.GenericSignatureH\x00B\x06\n\x04type"z\n\x13RegressionSignature\x120\n\x05input\x18\x01 \x01(\x0b2!.tensorflow.serving.TensorBinding\x121\n\x06output\x18\x02 \x01(\x0b2!.tensorflow.serving.TensorBinding"²\x01\n\x17ClassificationSignature\x120\n\x05input\x18\x01 \x01(\x0b2!.tensorflow.serving.TensorBinding\x122\n\x07classes\x18\x02 \x01(\x0b2!.tensorflow.serving.TensorBinding\x121\n\x06scores\x18\x03 \x01(\x0b2!.tensorflow.serving.TensorBinding"\x9d\x01\n\x10GenericSignature\x12:\n\x03map\x18\x01 \x03(\x0b2-.tensorflow.serving.GenericSignature.MapEntry\x1aM\n\x08MapEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x120\n\x05value\x18\x02 \x01(\x0b2!.tensorflow.serving.TensorBinding:\x028\x01b\x06proto3'))
A:tensorflow.contrib.session_bundle.manifest_pb2._SIGNATURES_NAMEDSIGNATURESENTRY->google.protobuf.descriptor.Descriptor(name='NamedSignaturesEntry', full_name='tensorflow.serving.Signatures.NamedSignaturesEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.serving.Signatures.NamedSignaturesEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.serving.Signatures.NamedSignaturesEntry.value', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=224, serialized_end=309)
A:tensorflow.contrib.session_bundle.manifest_pb2._SIGNATURES->google.protobuf.descriptor.Descriptor(name='Signatures', full_name='tensorflow.serving.Signatures', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='default_signature', full_name='tensorflow.serving.Signatures.default_signature', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='named_signatures', full_name='tensorflow.serving.Signatures.named_signatures', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_SIGNATURES_NAMEDSIGNATURESENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=73, serialized_end=309)
A:tensorflow.contrib.session_bundle.manifest_pb2._TENSORBINDING->google.protobuf.descriptor.Descriptor(name='TensorBinding', full_name='tensorflow.serving.TensorBinding', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='tensor_name', full_name='tensorflow.serving.TensorBinding.tensor_name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=311, serialized_end=347)
A:tensorflow.contrib.session_bundle.manifest_pb2._ASSETFILE->google.protobuf.descriptor.Descriptor(name='AssetFile', full_name='tensorflow.serving.AssetFile', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='tensor_binding', full_name='tensorflow.serving.AssetFile.tensor_binding', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='filename', full_name='tensorflow.serving.AssetFile.filename', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=349, serialized_end=437)
A:tensorflow.contrib.session_bundle.manifest_pb2._SIGNATURE->google.protobuf.descriptor.Descriptor(name='Signature', full_name='tensorflow.serving.Signature', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='regression_signature', full_name='tensorflow.serving.Signature.regression_signature', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='classification_signature', full_name='tensorflow.serving.Signature.classification_signature', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='generic_signature', full_name='tensorflow.serving.Signature.generic_signature', index=2, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[_descriptor.OneofDescriptor(name='type', full_name='tensorflow.serving.Signature.type', index=0, containing_type=None, fields=[])], serialized_start=440, serialized_end=680)
A:tensorflow.contrib.session_bundle.manifest_pb2._REGRESSIONSIGNATURE->google.protobuf.descriptor.Descriptor(name='RegressionSignature', full_name='tensorflow.serving.RegressionSignature', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='input', full_name='tensorflow.serving.RegressionSignature.input', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='output', full_name='tensorflow.serving.RegressionSignature.output', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=682, serialized_end=804)
A:tensorflow.contrib.session_bundle.manifest_pb2._CLASSIFICATIONSIGNATURE->google.protobuf.descriptor.Descriptor(name='ClassificationSignature', full_name='tensorflow.serving.ClassificationSignature', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='input', full_name='tensorflow.serving.ClassificationSignature.input', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='classes', full_name='tensorflow.serving.ClassificationSignature.classes', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='scores', full_name='tensorflow.serving.ClassificationSignature.scores', index=2, number=3, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=807, serialized_end=985)
A:tensorflow.contrib.session_bundle.manifest_pb2._GENERICSIGNATURE_MAPENTRY->google.protobuf.descriptor.Descriptor(name='MapEntry', full_name='tensorflow.serving.GenericSignature.MapEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.serving.GenericSignature.MapEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.serving.GenericSignature.MapEntry.value', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1068, serialized_end=1145)
A:tensorflow.contrib.session_bundle.manifest_pb2._GENERICSIGNATURE->google.protobuf.descriptor.Descriptor(name='GenericSignature', full_name='tensorflow.serving.GenericSignature', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='map', full_name='tensorflow.serving.GenericSignature.map', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_GENERICSIGNATURE_MAPENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=988, serialized_end=1145)
A:tensorflow.contrib.session_bundle.manifest_pb2.Signatures->google.protobuf.reflection.GeneratedProtocolMessageType('Signatures', (_message.Message,), dict(NamedSignaturesEntry=_reflection.GeneratedProtocolMessageType('NamedSignaturesEntry', (_message.Message,), dict(DESCRIPTOR=_SIGNATURES_NAMEDSIGNATURESENTRY, __module__='tensorflow.contrib.session_bundle.manifest_pb2')), DESCRIPTOR=_SIGNATURES, __module__='tensorflow.contrib.session_bundle.manifest_pb2'))
A:tensorflow.contrib.session_bundle.manifest_pb2.TensorBinding->google.protobuf.reflection.GeneratedProtocolMessageType('TensorBinding', (_message.Message,), dict(DESCRIPTOR=_TENSORBINDING, __module__='tensorflow.contrib.session_bundle.manifest_pb2'))
A:tensorflow.contrib.session_bundle.manifest_pb2.AssetFile->google.protobuf.reflection.GeneratedProtocolMessageType('AssetFile', (_message.Message,), dict(DESCRIPTOR=_ASSETFILE, __module__='tensorflow.contrib.session_bundle.manifest_pb2'))
A:tensorflow.contrib.session_bundle.manifest_pb2.Signature->google.protobuf.reflection.GeneratedProtocolMessageType('Signature', (_message.Message,), dict(DESCRIPTOR=_SIGNATURE, __module__='tensorflow.contrib.session_bundle.manifest_pb2'))
A:tensorflow.contrib.session_bundle.manifest_pb2.RegressionSignature->google.protobuf.reflection.GeneratedProtocolMessageType('RegressionSignature', (_message.Message,), dict(DESCRIPTOR=_REGRESSIONSIGNATURE, __module__='tensorflow.contrib.session_bundle.manifest_pb2'))
A:tensorflow.contrib.session_bundle.manifest_pb2.ClassificationSignature->google.protobuf.reflection.GeneratedProtocolMessageType('ClassificationSignature', (_message.Message,), dict(DESCRIPTOR=_CLASSIFICATIONSIGNATURE, __module__='tensorflow.contrib.session_bundle.manifest_pb2'))
A:tensorflow.contrib.session_bundle.manifest_pb2.GenericSignature->google.protobuf.reflection.GeneratedProtocolMessageType('GenericSignature', (_message.Message,), dict(MapEntry=_reflection.GeneratedProtocolMessageType('MapEntry', (_message.Message,), dict(DESCRIPTOR=_GENERICSIGNATURE_MAPENTRY, __module__='tensorflow.contrib.session_bundle.manifest_pb2')), DESCRIPTOR=_GENERICSIGNATURE, __module__='tensorflow.contrib.session_bundle.manifest_pb2'))
A:tensorflow.contrib.session_bundle.manifest_pb2._SIGNATURES_NAMEDSIGNATURESENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))
A:tensorflow.contrib.session_bundle.manifest_pb2._GENERICSIGNATURE_MAPENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/session_bundle/constants.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/session_bundle/gc.py----------------------------------------
A:tensorflow.contrib.session_bundle.gc.Path->collections.namedtuple('Path', 'path export_version')
A:tensorflow.contrib.session_bundle.gc.existing->keeper_map.get(interval, None)
A:tensorflow.contrib.session_bundle.gc.l->set(paths)
A:tensorflow.contrib.session_bundle.gc.r->set(f(paths))
A:tensorflow.contrib.session_bundle.gc.raw_paths->tensorflow.python.platform.gfile.ListDirectory(base_dir)
A:tensorflow.contrib.session_bundle.gc.p->parser(Path(os.path.join(base_dir, r), None))
tensorflow.contrib.session_bundle.gc.get_paths(base_dir,parser)
tensorflow.contrib.session_bundle.gc.largest_export_versions(n)
tensorflow.contrib.session_bundle.gc.mod_export_version(n)
tensorflow.contrib.session_bundle.gc.negation(f)
tensorflow.contrib.session_bundle.gc.one_of_every_n_export_versions(n)
tensorflow.contrib.session_bundle.gc.union(lf,rf)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensorboard/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensorboard/plugins/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensorboard/plugins/trace/trace_info_pb2.py----------------------------------------
A:tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/contrib/tensorboard/plugins/trace/trace_info.proto', package='tensorflow.contrib.tensorboard', syntax='proto3', serialized_pb=_b('\n=tensorflow/contrib/tensorboard/plugins/trace/trace_info.proto\x12\x1etensorflow.contrib.tensorboard"y\n\tTraceInfo\x123\n\x03ops\x18\x01 \x03(\x0b2&.tensorflow.contrib.tensorboard.OpInfo\x127\n\x05files\x18\x02 \x03(\x0b2(.tensorflow.contrib.tensorboard.FileInfo"î\x01\n\x06OpInfo\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0f\n\x07op_type\x18\x02 \x01(\t\x12\x0e\n\x06device\x18\x03 \x01(\t\x12<\n\ttraceback\x18\x04 \x03(\x0b2).tensorflow.contrib.tensorboard.LineTrace\x12:\n\x06inputs\x18\x05 \x03(\x0b2*.tensorflow.contrib.tensorboard.TensorInfo\x12;\n\x07outputs\x18\x06 \x03(\x0b2*.tensorflow.contrib.tensorboard.TensorInfo"3\n\tLineTrace\x12\x11\n\tfile_path\x18\x01 \x01(\t\x12\x13\n\x0bline_number\x18\x02 \x01(\r"Y\n\nTensorInfo\x12\r\n\x05shape\x18\x01 \x03(\x05\x12\r\n\x05dtype\x18\x02 \x01(\t\x12\x1a\n\x12num_bytes_per_elem\x18\x03 \x01(\r\x12\x11\n\tconsumers\x18\x04 \x03(\t"Ï\x01\n\x08FileInfo\x12\x11\n\tfile_path\x18\x01 \x01(\t\x12\x13\n\x0bsource_code\x18\x02 \x01(\t\x12_\n\x14multiline_statements\x18\x03 \x03(\x0b2A.tensorflow.contrib.tensorboard.FileInfo.MultilineStatementsEntry\x1a:\n\x18MultilineStatementsEntry\x12\x0b\n\x03key\x18\x01 \x01(\r\x12\r\n\x05value\x18\x02 \x01(\r:\x028\x01b\x06proto3'))
A:tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2._TRACEINFO->google.protobuf.descriptor.Descriptor(name='TraceInfo', full_name='tensorflow.contrib.tensorboard.TraceInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='ops', full_name='tensorflow.contrib.tensorboard.TraceInfo.ops', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='files', full_name='tensorflow.contrib.tensorboard.TraceInfo.files', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=97, serialized_end=218)
A:tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2._OPINFO->google.protobuf.descriptor.Descriptor(name='OpInfo', full_name='tensorflow.contrib.tensorboard.OpInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='tensorflow.contrib.tensorboard.OpInfo.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='op_type', full_name='tensorflow.contrib.tensorboard.OpInfo.op_type', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='device', full_name='tensorflow.contrib.tensorboard.OpInfo.device', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='traceback', full_name='tensorflow.contrib.tensorboard.OpInfo.traceback', index=3, number=4, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='inputs', full_name='tensorflow.contrib.tensorboard.OpInfo.inputs', index=4, number=5, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='outputs', full_name='tensorflow.contrib.tensorboard.OpInfo.outputs', index=5, number=6, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=221, serialized_end=459)
A:tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2._LINETRACE->google.protobuf.descriptor.Descriptor(name='LineTrace', full_name='tensorflow.contrib.tensorboard.LineTrace', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='file_path', full_name='tensorflow.contrib.tensorboard.LineTrace.file_path', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='line_number', full_name='tensorflow.contrib.tensorboard.LineTrace.line_number', index=1, number=2, type=13, cpp_type=3, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=461, serialized_end=512)
A:tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2._TENSORINFO->google.protobuf.descriptor.Descriptor(name='TensorInfo', full_name='tensorflow.contrib.tensorboard.TensorInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='shape', full_name='tensorflow.contrib.tensorboard.TensorInfo.shape', index=0, number=1, type=5, cpp_type=1, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='dtype', full_name='tensorflow.contrib.tensorboard.TensorInfo.dtype', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='num_bytes_per_elem', full_name='tensorflow.contrib.tensorboard.TensorInfo.num_bytes_per_elem', index=2, number=3, type=13, cpp_type=3, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='consumers', full_name='tensorflow.contrib.tensorboard.TensorInfo.consumers', index=3, number=4, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=514, serialized_end=603)
A:tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2._FILEINFO_MULTILINESTATEMENTSENTRY->google.protobuf.descriptor.Descriptor(name='MultilineStatementsEntry', full_name='tensorflow.contrib.tensorboard.FileInfo.MultilineStatementsEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.contrib.tensorboard.FileInfo.MultilineStatementsEntry.key', index=0, number=1, type=13, cpp_type=3, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.contrib.tensorboard.FileInfo.MultilineStatementsEntry.value', index=1, number=2, type=13, cpp_type=3, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=755, serialized_end=813)
A:tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2._FILEINFO->google.protobuf.descriptor.Descriptor(name='FileInfo', full_name='tensorflow.contrib.tensorboard.FileInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='file_path', full_name='tensorflow.contrib.tensorboard.FileInfo.file_path', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='source_code', full_name='tensorflow.contrib.tensorboard.FileInfo.source_code', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='multiline_statements', full_name='tensorflow.contrib.tensorboard.FileInfo.multiline_statements', index=2, number=3, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_FILEINFO_MULTILINESTATEMENTSENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=606, serialized_end=813)
A:tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2.TraceInfo->google.protobuf.reflection.GeneratedProtocolMessageType('TraceInfo', (_message.Message,), dict(DESCRIPTOR=_TRACEINFO, __module__='tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2'))
A:tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2.OpInfo->google.protobuf.reflection.GeneratedProtocolMessageType('OpInfo', (_message.Message,), dict(DESCRIPTOR=_OPINFO, __module__='tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2'))
A:tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2.LineTrace->google.protobuf.reflection.GeneratedProtocolMessageType('LineTrace', (_message.Message,), dict(DESCRIPTOR=_LINETRACE, __module__='tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2'))
A:tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2.TensorInfo->google.protobuf.reflection.GeneratedProtocolMessageType('TensorInfo', (_message.Message,), dict(DESCRIPTOR=_TENSORINFO, __module__='tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2'))
A:tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2.FileInfo->google.protobuf.reflection.GeneratedProtocolMessageType('FileInfo', (_message.Message,), dict(MultilineStatementsEntry=_reflection.GeneratedProtocolMessageType('MultilineStatementsEntry', (_message.Message,), dict(DESCRIPTOR=_FILEINFO_MULTILINESTATEMENTSENTRY, __module__='tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2')), DESCRIPTOR=_FILEINFO, __module__='tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2'))
A:tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2._FILEINFO_MULTILINESTATEMENTSENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensorboard/plugins/trace/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensorboard/plugins/trace/trace.py----------------------------------------
A:tensorflow.contrib.tensorboard.plugins.trace.trace.trace_info->TraceInfo()
A:tensorflow.contrib.tensorboard.plugins.trace.trace.source_fpaths->set()
A:tensorflow.contrib.tensorboard.plugins.trace.trace.op_info->TraceInfo().ops.add()
A:tensorflow.contrib.tensorboard.plugins.trace.trace.line_trace->TraceInfo().ops.add().traceback.add()
A:tensorflow.contrib.tensorboard.plugins.trace.trace.file_info->TraceInfo().files.add()
A:tensorflow.contrib.tensorboard.plugins.trace.trace.source->f.read()
A:tensorflow.contrib.tensorboard.plugins.trace.trace.line2start->find_multiline_statements(source)
A:tensorflow.contrib.tensorboard.plugins.trace.trace.output_file_path->os.path.expanduser(output_file_path)
A:tensorflow.contrib.tensorboard.plugins.trace.trace.output_dir->os.path.dirname(output_file_path)
A:tensorflow.contrib.tensorboard.plugins.trace.trace.tree->parser.suite(source)
A:tensorflow.contrib.tensorboard.plugins.trace.trace.tensor_info->info.add()
A:tensorflow.contrib.tensorboard.plugins.trace.trace.shape->t.get_shape()
tensorflow.contrib.tensorboard.plugins._add_data_from_tensors(tensors,info)
tensorflow.contrib.tensorboard.plugins._count_brackets_braces_parenthesis(node,line2par)
tensorflow.contrib.tensorboard.plugins._ignore_file_path(fname,ignore_regex_fpaths)
tensorflow.contrib.tensorboard.plugins.find_multiline_statements(source)
tensorflow.contrib.tensorboard.plugins.store_trace_info(output_file_path,graph=ops.get_default_graph(),ignore_regex_fpaths=None)
tensorflow.contrib.tensorboard.plugins.trace.trace._add_data_from_tensors(tensors,info)
tensorflow.contrib.tensorboard.plugins.trace.trace._count_brackets_braces_parenthesis(node,line2par)
tensorflow.contrib.tensorboard.plugins.trace.trace._ignore_file_path(fname,ignore_regex_fpaths)
tensorflow.contrib.tensorboard.plugins.trace.trace.find_multiline_statements(source)
tensorflow.contrib.tensorboard.plugins.trace.trace.store_trace_info(output_file_path,graph=ops.get_default_graph(),ignore_regex_fpaths=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensorboard/plugins/projector/__init__.py----------------------------------------
A:tensorflow.contrib.tensorboard.plugins.projector.__init__.logdir->summary_writer.get_logdir()
A:tensorflow.contrib.tensorboard.plugins.projector.__init__.config_pbtxt->google.protobuf.text_format.MessageToString(config)
tensorflow.contrib.tensorboard.plugins.projector.__init__.visualize_embeddings(summary_writer,config)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensorboard/plugins/projector/projector_config_pb2.py----------------------------------------
A:tensorflow.contrib.tensorboard.plugins.projector.projector_config_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.contrib.tensorboard.plugins.projector.projector_config_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/contrib/tensorboard/plugins/projector/projector_config.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\nGtensorflow/contrib/tensorboard/plugins/projector/projector_config.proto\x12\ntensorflow">\n\x0eSpriteMetadata\x12\x12\n\nimage_path\x18\x01 \x01(\t\x12\x18\n\x10single_image_dim\x18\x02 \x03(\r"ª\x01\n\rEmbeddingInfo\x12\x13\n\x0btensor_name\x18\x01 \x01(\t\x12\x15\n\rmetadata_path\x18\x02 \x01(\t\x12\x16\n\x0ebookmarks_path\x18\x03 \x01(\t\x12\x14\n\x0ctensor_shape\x18\x04 \x03(\r\x12*\n\x06sprite\x18\x05 \x01(\x0b2\x1a.tensorflow.SpriteMetadata\x12\x13\n\x0btensor_path\x18\x06 \x01(\t"}\n\x0fProjectorConfig\x12\x1d\n\x15model_checkpoint_path\x18\x01 \x01(\t\x12-\n\nembeddings\x18\x02 \x03(\x0b2\x19.tensorflow.EmbeddingInfo\x12\x1c\n\x14model_checkpoint_dir\x18\x03 \x01(\tb\x06proto3'))
A:tensorflow.contrib.tensorboard.plugins.projector.projector_config_pb2._SPRITEMETADATA->google.protobuf.descriptor.Descriptor(name='SpriteMetadata', full_name='tensorflow.SpriteMetadata', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='image_path', full_name='tensorflow.SpriteMetadata.image_path', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='single_image_dim', full_name='tensorflow.SpriteMetadata.single_image_dim', index=1, number=2, type=13, cpp_type=3, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=87, serialized_end=149)
A:tensorflow.contrib.tensorboard.plugins.projector.projector_config_pb2._EMBEDDINGINFO->google.protobuf.descriptor.Descriptor(name='EmbeddingInfo', full_name='tensorflow.EmbeddingInfo', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='tensor_name', full_name='tensorflow.EmbeddingInfo.tensor_name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='metadata_path', full_name='tensorflow.EmbeddingInfo.metadata_path', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='bookmarks_path', full_name='tensorflow.EmbeddingInfo.bookmarks_path', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tensor_shape', full_name='tensorflow.EmbeddingInfo.tensor_shape', index=3, number=4, type=13, cpp_type=3, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='sprite', full_name='tensorflow.EmbeddingInfo.sprite', index=4, number=5, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='tensor_path', full_name='tensorflow.EmbeddingInfo.tensor_path', index=5, number=6, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=152, serialized_end=322)
A:tensorflow.contrib.tensorboard.plugins.projector.projector_config_pb2._PROJECTORCONFIG->google.protobuf.descriptor.Descriptor(name='ProjectorConfig', full_name='tensorflow.ProjectorConfig', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='model_checkpoint_path', full_name='tensorflow.ProjectorConfig.model_checkpoint_path', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='embeddings', full_name='tensorflow.ProjectorConfig.embeddings', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='model_checkpoint_dir', full_name='tensorflow.ProjectorConfig.model_checkpoint_dir', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=324, serialized_end=449)
A:tensorflow.contrib.tensorboard.plugins.projector.projector_config_pb2.SpriteMetadata->google.protobuf.reflection.GeneratedProtocolMessageType('SpriteMetadata', (_message.Message,), dict(DESCRIPTOR=_SPRITEMETADATA, __module__='tensorflow.contrib.tensorboard.plugins.projector.projector_config_pb2'))
A:tensorflow.contrib.tensorboard.plugins.projector.projector_config_pb2.EmbeddingInfo->google.protobuf.reflection.GeneratedProtocolMessageType('EmbeddingInfo', (_message.Message,), dict(DESCRIPTOR=_EMBEDDINGINFO, __module__='tensorflow.contrib.tensorboard.plugins.projector.projector_config_pb2'))
A:tensorflow.contrib.tensorboard.plugins.projector.projector_config_pb2.ProjectorConfig->google.protobuf.reflection.GeneratedProtocolMessageType('ProjectorConfig', (_message.Message,), dict(DESCRIPTOR=_PROJECTORCONFIG, __module__='tensorflow.contrib.tensorboard.plugins.projector.projector_config_pb2'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensorboard/graph_explorer/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensorboard/graph_explorer/proto/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tensorboard/graph_explorer/proto/graph_explorer_pb2.py----------------------------------------
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/contrib/tensorboard/graph_explorer/proto/graph_explorer.proto', package='graph_explorer', syntax='proto3', serialized_pb=_b('\nHtensorflow/contrib/tensorboard/graph_explorer/proto/graph_explorer.proto\x12\x0egraph_explorer"ð\x01\n\x04Node\x12\x0c\n\x04name\x18\x01 \x01(\t\x125\n\tnode_attr\x18\x02 \x03(\x0b2".graph_explorer.Node.NodeAttrEntry\x12=\n\rmetanode_attr\x18\x03 \x03(\x0b2&.graph_explorer.Node.MetanodeAttrEntry\x1a/\n\rNodeAttrEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x028\x01\x1a3\n\x11MetanodeAttrEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x028\x01"\x8e\x01\n\x04Edge\x12\x0e\n\x06source\x18\x01 \x01(\t\x12\x0e\n\x06target\x18\x02 \x01(\t\x125\n\tedge_attr\x18\x03 \x03(\x0b2".graph_explorer.Edge.EdgeAttrEntry\x1a/\n\rEdgeAttrEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x028\x01"\x82\x04\n\x05Graph\x12"\n\x04node\x18\x01 \x03(\x0b2\x14.graph_explorer.Node\x12"\n\x04edge\x18\x02 \x03(\x0b2\x14.graph_explorer.Edge\x126\n\tnode_attr\x18\x03 \x03(\x0b2#.graph_explorer.Graph.NodeAttrEntry\x12>\n\rmetanode_attr\x18\x04 \x03(\x0b2\'.graph_explorer.Graph.MetanodeAttrEntry\x126\n\tedge_attr\x18\x05 \x03(\x0b2#.graph_explorer.Graph.EdgeAttrEntry\x128\n\ngraph_attr\x18\x06 \x03(\x0b2$.graph_explorer.Graph.GraphAttrEntry\x1a/\n\rNodeAttrEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x028\x01\x1a3\n\x11MetanodeAttrEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x028\x01\x1a/\n\rEdgeAttrEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x028\x01\x1a0\n\x0eGraphAttrEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x028\x01b\x06proto3'))
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._NODE_NODEATTRENTRY->google.protobuf.descriptor.Descriptor(name='NodeAttrEntry', full_name='graph_explorer.Node.NodeAttrEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='graph_explorer.Node.NodeAttrEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='graph_explorer.Node.NodeAttrEntry.value', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=233, serialized_end=280)
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._NODE_METANODEATTRENTRY->google.protobuf.descriptor.Descriptor(name='MetanodeAttrEntry', full_name='graph_explorer.Node.MetanodeAttrEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='graph_explorer.Node.MetanodeAttrEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='graph_explorer.Node.MetanodeAttrEntry.value', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=282, serialized_end=333)
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._NODE->google.protobuf.descriptor.Descriptor(name='Node', full_name='graph_explorer.Node', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='name', full_name='graph_explorer.Node.name', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='node_attr', full_name='graph_explorer.Node.node_attr', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='metanode_attr', full_name='graph_explorer.Node.metanode_attr', index=2, number=3, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_NODE_NODEATTRENTRY, _NODE_METANODEATTRENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=93, serialized_end=333)
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._EDGE_EDGEATTRENTRY->google.protobuf.descriptor.Descriptor(name='EdgeAttrEntry', full_name='graph_explorer.Edge.EdgeAttrEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='graph_explorer.Edge.EdgeAttrEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='graph_explorer.Edge.EdgeAttrEntry.value', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=431, serialized_end=478)
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._EDGE->google.protobuf.descriptor.Descriptor(name='Edge', full_name='graph_explorer.Edge', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='source', full_name='graph_explorer.Edge.source', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='target', full_name='graph_explorer.Edge.target', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='edge_attr', full_name='graph_explorer.Edge.edge_attr', index=2, number=3, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_EDGE_EDGEATTRENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=336, serialized_end=478)
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._GRAPH_NODEATTRENTRY->google.protobuf.descriptor.Descriptor(name='NodeAttrEntry', full_name='graph_explorer.Graph.NodeAttrEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='graph_explorer.Graph.NodeAttrEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='graph_explorer.Graph.NodeAttrEntry.value', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=233, serialized_end=280)
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._GRAPH_METANODEATTRENTRY->google.protobuf.descriptor.Descriptor(name='MetanodeAttrEntry', full_name='graph_explorer.Graph.MetanodeAttrEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='graph_explorer.Graph.MetanodeAttrEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='graph_explorer.Graph.MetanodeAttrEntry.value', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=282, serialized_end=333)
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._GRAPH_EDGEATTRENTRY->google.protobuf.descriptor.Descriptor(name='EdgeAttrEntry', full_name='graph_explorer.Graph.EdgeAttrEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='graph_explorer.Graph.EdgeAttrEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='graph_explorer.Graph.EdgeAttrEntry.value', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=431, serialized_end=478)
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._GRAPH_GRAPHATTRENTRY->google.protobuf.descriptor.Descriptor(name='GraphAttrEntry', full_name='graph_explorer.Graph.GraphAttrEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='graph_explorer.Graph.GraphAttrEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='graph_explorer.Graph.GraphAttrEntry.value', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=947, serialized_end=995)
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._GRAPH->google.protobuf.descriptor.Descriptor(name='Graph', full_name='graph_explorer.Graph', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='node', full_name='graph_explorer.Graph.node', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='edge', full_name='graph_explorer.Graph.edge', index=1, number=2, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='node_attr', full_name='graph_explorer.Graph.node_attr', index=2, number=3, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='metanode_attr', full_name='graph_explorer.Graph.metanode_attr', index=3, number=4, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='edge_attr', full_name='graph_explorer.Graph.edge_attr', index=4, number=5, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='graph_attr', full_name='graph_explorer.Graph.graph_attr', index=5, number=6, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_GRAPH_NODEATTRENTRY, _GRAPH_METANODEATTRENTRY, _GRAPH_EDGEATTRENTRY, _GRAPH_GRAPHATTRENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=481, serialized_end=995)
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2.Node->google.protobuf.reflection.GeneratedProtocolMessageType('Node', (_message.Message,), dict(NodeAttrEntry=_reflection.GeneratedProtocolMessageType('NodeAttrEntry', (_message.Message,), dict(DESCRIPTOR=_NODE_NODEATTRENTRY, __module__='tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2')), MetanodeAttrEntry=_reflection.GeneratedProtocolMessageType('MetanodeAttrEntry', (_message.Message,), dict(DESCRIPTOR=_NODE_METANODEATTRENTRY, __module__='tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2')), DESCRIPTOR=_NODE, __module__='tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2'))
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2.Edge->google.protobuf.reflection.GeneratedProtocolMessageType('Edge', (_message.Message,), dict(EdgeAttrEntry=_reflection.GeneratedProtocolMessageType('EdgeAttrEntry', (_message.Message,), dict(DESCRIPTOR=_EDGE_EDGEATTRENTRY, __module__='tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2')), DESCRIPTOR=_EDGE, __module__='tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2'))
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2.Graph->google.protobuf.reflection.GeneratedProtocolMessageType('Graph', (_message.Message,), dict(NodeAttrEntry=_reflection.GeneratedProtocolMessageType('NodeAttrEntry', (_message.Message,), dict(DESCRIPTOR=_GRAPH_NODEATTRENTRY, __module__='tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2')), MetanodeAttrEntry=_reflection.GeneratedProtocolMessageType('MetanodeAttrEntry', (_message.Message,), dict(DESCRIPTOR=_GRAPH_METANODEATTRENTRY, __module__='tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2')), EdgeAttrEntry=_reflection.GeneratedProtocolMessageType('EdgeAttrEntry', (_message.Message,), dict(DESCRIPTOR=_GRAPH_EDGEATTRENTRY, __module__='tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2')), GraphAttrEntry=_reflection.GeneratedProtocolMessageType('GraphAttrEntry', (_message.Message,), dict(DESCRIPTOR=_GRAPH_GRAPHATTRENTRY, __module__='tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2')), DESCRIPTOR=_GRAPH, __module__='tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2'))
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._NODE_NODEATTRENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._NODE_METANODEATTRENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._EDGE_EDGEATTRENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._GRAPH_NODEATTRENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._GRAPH_METANODEATTRENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._GRAPH_EDGEATTRENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))
A:tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2._GRAPH_GRAPHATTRENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/framework/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/framework/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/framework/python/framework/tensor_util.py----------------------------------------
A:tensorflow.contrib.framework.python.framework.tensor_util.dtype->_assert_same_base_type(tensors, dtype)
A:tensorflow.contrib.framework.python.framework.tensor_util.tensor->tensorflow.python.framework.ops.convert_to_tensor(tensor, name=name_scope)
A:tensorflow.contrib.framework.python.framework.tensor_util.shape->tensorflow.python.framework.ops.convert_to_tensor(tensor, name=name_scope).get_shape()
A:tensorflow.contrib.framework.python.framework.tensor_util.predictions->tensorflow.python.ops.control_flow_ops.cond(math_ops.equal(1, rank_diff), lambda : array_ops.squeeze(predictions, [-1]), lambda : predictions)
A:tensorflow.contrib.framework.python.framework.tensor_util.labels->tensorflow.python.ops.control_flow_ops.cond(math_ops.equal(-1, rank_diff), lambda : array_ops.squeeze(labels, [-1]), lambda : labels)
A:tensorflow.contrib.framework.python.framework.tensor_util.predictions_shape->tensorflow.python.ops.control_flow_ops.cond(math_ops.equal(1, rank_diff), lambda : array_ops.squeeze(predictions, [-1]), lambda : predictions).get_shape()
A:tensorflow.contrib.framework.python.framework.tensor_util.labels_shape->tensorflow.python.ops.control_flow_ops.cond(math_ops.equal(-1, rank_diff), lambda : array_ops.squeeze(labels, [-1]), lambda : labels).get_shape()
A:tensorflow.contrib.framework.python.framework.tensor_util.expected->tensorflow.python.framework.ops.convert_to_tensor(expected_rank, name='expected')
A:tensorflow.contrib.framework.python.framework.tensor_util.actual->tensorflow.python.ops.array_ops.rank(actual_tensor, name='actual')
A:tensorflow.contrib.framework.python.framework.tensor_util.is_rank->_is_rank(array_ops.size(expected_shape), actual_tensor)
A:tensorflow.contrib.framework.python.framework.tensor_util.actual_shape->tensorflow.python.framework.ops.convert_to_tensor(tensor, name=name_scope).get_shape()
A:tensorflow.contrib.framework.python.framework.tensor_util.shape_equal->_all_equal(ops.convert_to_tensor(expected_shape, name='expected'), actual_shape)
A:tensorflow.contrib.framework.python.framework.tensor_util.is_shape->_is_shape(expected_shape, actual_tensor, actual_shape)
A:tensorflow.contrib.framework.python.framework.tensor_util.tensor_shape->expected_tensor.get_shape()
A:tensorflow.contrib.framework.python.framework.tensor_util.expected_shape->numpy.asarray([], dtype=np.int32)
A:tensorflow.contrib.framework.python.framework.tensor_util.np_expected_shape->numpy.asarray(expected_shape)
A:tensorflow.contrib.framework.python.framework.tensor_util.result->tensorflow.python.ops.array_ops.identity(tensor)
tensorflow.contrib.framework._all_equal(tensor0,tensor1)
tensorflow.contrib.framework._assert_same_base_type(items,expected_type=None)
tensorflow.contrib.framework._assert_shape_op(expected_shape,actual_tensor)
tensorflow.contrib.framework._is_rank(expected_rank,actual_tensor)
tensorflow.contrib.framework._is_shape(expected_shape,actual_tensor,actual_shape=None)
tensorflow.contrib.framework.assert_same_float_dtype(tensors=None,dtype=None)
tensorflow.contrib.framework.assert_scalar(tensor,name=None)
tensorflow.contrib.framework.assert_scalar_int(tensor,name=None)
tensorflow.contrib.framework.is_tensor(x)
tensorflow.contrib.framework.python.framework.tensor_util._all_equal(tensor0,tensor1)
tensorflow.contrib.framework.python.framework.tensor_util._assert_same_base_type(items,expected_type=None)
tensorflow.contrib.framework.python.framework.tensor_util._assert_shape_op(expected_shape,actual_tensor)
tensorflow.contrib.framework.python.framework.tensor_util._is_rank(expected_rank,actual_tensor)
tensorflow.contrib.framework.python.framework.tensor_util._is_shape(expected_shape,actual_tensor,actual_shape=None)
tensorflow.contrib.framework.python.framework.tensor_util.assert_same_float_dtype(tensors=None,dtype=None)
tensorflow.contrib.framework.python.framework.tensor_util.assert_scalar(tensor,name=None)
tensorflow.contrib.framework.python.framework.tensor_util.assert_scalar_int(tensor,name=None)
tensorflow.contrib.framework.python.framework.tensor_util.is_tensor(x)
tensorflow.contrib.framework.python.framework.tensor_util.reduce_sum_n(tensors,name=None)
tensorflow.contrib.framework.python.framework.tensor_util.remove_squeezable_dimensions(predictions,labels,name=None)
tensorflow.contrib.framework.python.framework.tensor_util.with_same_shape(expected_tensor,tensor)
tensorflow.contrib.framework.python.framework.tensor_util.with_shape(expected_shape,tensor)
tensorflow.contrib.framework.reduce_sum_n(tensors,name=None)
tensorflow.contrib.framework.remove_squeezable_dimensions(predictions,labels,name=None)
tensorflow.contrib.framework.with_same_shape(expected_tensor,tensor)
tensorflow.contrib.framework.with_shape(expected_shape,tensor)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/framework/python/framework/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/framework/python/framework/checkpoint_utils.py----------------------------------------
A:tensorflow.contrib.framework.python.framework.checkpoint_utils.filename->_get_checkpoint_filename(filepattern)
A:tensorflow.contrib.framework.python.framework.checkpoint_utils.reader->load_checkpoint(checkpoint_dir)
A:tensorflow.contrib.framework.python.framework.checkpoint_utils.variable_map->load_checkpoint(checkpoint_dir).get_variable_to_shape_map()
A:tensorflow.contrib.framework.python.framework.checkpoint_utils.names->sorted(variable_map.keys())
A:tensorflow.contrib.framework.python.framework.checkpoint_utils.variable._initializer_op->tensorflow.python.ops.state_ops.assign(variable, restore_op)
A:tensorflow.contrib.framework.python.framework.checkpoint_utils.filepattern->_get_checkpoint_filename(checkpoint_dir)
A:tensorflow.contrib.framework.python.framework.checkpoint_utils.var_scope->tensorflow.python.ops.variable_scope._get_default_variable_store()
A:tensorflow.contrib.framework.python.framework.checkpoint_utils.var->_collect_partitioned_variable(var_name, var_scope)
A:tensorflow.contrib.framework.python.framework.checkpoint_utils.var_name->','.join([v.name for v in var])
A:tensorflow.contrib.framework.python.framework.checkpoint_utils.scope_variables->set()
tensorflow.contrib.framework._collect_partitioned_variable(name,var_scope)
tensorflow.contrib.framework._get_checkpoint_filename(filepattern)
tensorflow.contrib.framework._set_checkpoint_initializer(variable,file_pattern,tensor_name,slice_spec,name='checkpoint_initializer')
tensorflow.contrib.framework._set_variable_or_list_initializer(variable_or_list,file_pattern,tensor_name)
tensorflow.contrib.framework.init_from_checkpoint(checkpoint_dir,assignment_map)
tensorflow.contrib.framework.list_variables(checkpoint_dir)
tensorflow.contrib.framework.load_checkpoint(filepattern)
tensorflow.contrib.framework.load_variable(checkpoint_dir,name)
tensorflow.contrib.framework.python.framework.checkpoint_utils._collect_partitioned_variable(name,var_scope)
tensorflow.contrib.framework.python.framework.checkpoint_utils._get_checkpoint_filename(filepattern)
tensorflow.contrib.framework.python.framework.checkpoint_utils._set_checkpoint_initializer(variable,file_pattern,tensor_name,slice_spec,name='checkpoint_initializer')
tensorflow.contrib.framework.python.framework.checkpoint_utils._set_variable_or_list_initializer(variable_or_list,file_pattern,tensor_name)
tensorflow.contrib.framework.python.framework.checkpoint_utils.init_from_checkpoint(checkpoint_dir,assignment_map)
tensorflow.contrib.framework.python.framework.checkpoint_utils.list_variables(checkpoint_dir)
tensorflow.contrib.framework.python.framework.checkpoint_utils.load_checkpoint(filepattern)
tensorflow.contrib.framework.python.framework.checkpoint_utils.load_variable(checkpoint_dir,name)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/framework/python/framework/experimental.py----------------------------------------
A:tensorflow.contrib.framework.python.framework.experimental.new_func.__doc__->_add_experimental_function_notice_to_docstring(func.__doc__)
tensorflow.contrib.framework.experimental(func)
tensorflow.contrib.framework.experimental._add_experimental_function_notice_to_docstring(doc)
tensorflow.contrib.framework.python.framework.experimental._add_experimental_function_notice_to_docstring(doc)
tensorflow.contrib.framework.python.framework.experimental.experimental(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/framework/python/ops/variables.py----------------------------------------
A:tensorflow.contrib.framework.python.ops.variables.global_step_tensor->get_global_step(graph)
A:tensorflow.contrib.framework.python.ops.variables.collections->list(collections or [])
A:tensorflow.contrib.framework.python.ops.variables.getter->functools.partial(custom_getter, reuse=variable_scope.get_variable_scope().reuse)
A:tensorflow.contrib.framework.python.ops.variables.var->tensorflow.python.framework.ops.get_collection(ops.GraphKeys.GLOBAL_VARIABLES, var_name)
A:tensorflow.contrib.framework.python.ops.variables.vars_to_include->get_variables()
A:tensorflow.contrib.framework.python.ops.variables.vars_to_exclude->set()
A:tensorflow.contrib.framework.python.ops.variables.candidates->get_variables(scope=var_op_name)
A:tensorflow.contrib.framework.python.ops.variables.placeholder_value->tensorflow.python.ops.array_ops.placeholder(dtype=var.dtype.base_dtype, shape=var.get_shape(), name=placeholder_name)
A:tensorflow.contrib.framework.python.ops.variables.feed_dict[placeholder_value]->var_value.reshape(var.get_shape())
A:tensorflow.contrib.framework.python.ops.variables.assign_op->tensorflow.python.ops.control_flow_ops.group(*assign_ops)
A:tensorflow.contrib.framework.python.ops.variables.(assign_op, feed_dict)->assign_from_values(var_names_to_values)
A:tensorflow.contrib.framework.python.ops.variables.ckpt_name->get_variable_full_name(var)
A:tensorflow.contrib.framework.python.ops.variables.reader->tensorflow.python.pywrap_tensorflow.NewCheckpointReader(model_path)
A:tensorflow.contrib.framework.python.ops.variables.ckpt_value->tensorflow.python.pywrap_tensorflow.NewCheckpointReader(model_path).get_tensor(ckpt_name)
A:tensorflow.contrib.framework.python.ops.variables.placeholder_tensor->tensorflow.python.ops.array_ops.placeholder(dtype=var.dtype.base_dtype, shape=var.get_shape(), name='placeholder/' + var.op.name)
A:tensorflow.contrib.framework.python.ops.variables.feed_dict[placeholder_tensor]->tensorflow.python.pywrap_tensorflow.NewCheckpointReader(model_path).get_tensor(ckpt_name).reshape(ckpt_value.shape)
A:tensorflow.contrib.framework.python.ops.variables.slice_dims->zip(var._save_slice_info.var_offset, var._save_slice_info.var_shape)
A:tensorflow.contrib.framework.python.ops.variables.slice_value->slice_value.reshape(var._save_slice_info.var_shape).reshape(var._save_slice_info.var_shape)
A:tensorflow.contrib.framework.python.ops.variables.saver->tensorflow.python.training.saver.Saver(var_list, reshape=reshape_variables)
A:tensorflow.contrib.framework.python.ops.variables.device_spec->tensorflow.python.framework.device.DeviceSpec(device_type=self._device_type, device_index=self._device_index)
A:tensorflow.contrib.framework.python.ops.variables.included_variables->list(var_list)
tensorflow.contrib.framework.VariableDeviceChooser(self,num_tasks=0,job_name='ps',device_type='CPU',device_index=0)
tensorflow.contrib.framework.add_model_variable(var)
tensorflow.contrib.framework.assert_global_step(global_step_tensor)
tensorflow.contrib.framework.assert_or_get_global_step(graph=None,global_step_tensor=None)
tensorflow.contrib.framework.assign_from_checkpoint(model_path,var_list)
tensorflow.contrib.framework.assign_from_checkpoint_fn(model_path,var_list,ignore_missing_vars=False,reshape_variables=False)
tensorflow.contrib.framework.assign_from_values(var_names_to_values)
tensorflow.contrib.framework.assign_from_values_fn(var_names_to_values)
tensorflow.contrib.framework.create_global_step(graph=None)
tensorflow.contrib.framework.filter_variables(var_list,include_patterns=None,exclude_patterns=None,reg_search=True)
tensorflow.contrib.framework.get_global_step(graph=None)
tensorflow.contrib.framework.get_local_variables(scope=None,suffix=None)
tensorflow.contrib.framework.get_model_variables(scope=None,suffix=None)
tensorflow.contrib.framework.get_or_create_global_step(graph=None)
tensorflow.contrib.framework.get_trainable_variables(scope=None,suffix=None)
tensorflow.contrib.framework.get_unique_variable(var_op_name)
tensorflow.contrib.framework.get_variable_full_name(var)
tensorflow.contrib.framework.get_variables(scope=None,suffix=None,collection=ops.GraphKeys.GLOBAL_VARIABLES)
tensorflow.contrib.framework.get_variables_by_name(given_name,scope=None)
tensorflow.contrib.framework.get_variables_by_suffix(suffix,scope=None)
tensorflow.contrib.framework.get_variables_to_restore(include=None,exclude=None)
tensorflow.contrib.framework.local_variable(initial_value,validate_shape=True,name=None)
tensorflow.contrib.framework.model_variable(name,shape=None,dtype=dtypes.float32,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,device=None,partitioner=None,custom_getter=None,use_resource=None)
tensorflow.contrib.framework.python.ops.variables.VariableDeviceChooser(self,num_tasks=0,job_name='ps',device_type='CPU',device_index=0)
tensorflow.contrib.framework.python.ops.variables.VariableDeviceChooser.__init__(self,num_tasks=0,job_name='ps',device_type='CPU',device_index=0)
tensorflow.contrib.framework.python.ops.variables.add_model_variable(var)
tensorflow.contrib.framework.python.ops.variables.assert_global_step(global_step_tensor)
tensorflow.contrib.framework.python.ops.variables.assert_or_get_global_step(graph=None,global_step_tensor=None)
tensorflow.contrib.framework.python.ops.variables.assign_from_checkpoint(model_path,var_list)
tensorflow.contrib.framework.python.ops.variables.assign_from_checkpoint_fn(model_path,var_list,ignore_missing_vars=False,reshape_variables=False)
tensorflow.contrib.framework.python.ops.variables.assign_from_values(var_names_to_values)
tensorflow.contrib.framework.python.ops.variables.assign_from_values_fn(var_names_to_values)
tensorflow.contrib.framework.python.ops.variables.create_global_step(graph=None)
tensorflow.contrib.framework.python.ops.variables.filter_variables(var_list,include_patterns=None,exclude_patterns=None,reg_search=True)
tensorflow.contrib.framework.python.ops.variables.get_global_step(graph=None)
tensorflow.contrib.framework.python.ops.variables.get_local_variables(scope=None,suffix=None)
tensorflow.contrib.framework.python.ops.variables.get_model_variables(scope=None,suffix=None)
tensorflow.contrib.framework.python.ops.variables.get_or_create_global_step(graph=None)
tensorflow.contrib.framework.python.ops.variables.get_trainable_variables(scope=None,suffix=None)
tensorflow.contrib.framework.python.ops.variables.get_unique_variable(var_op_name)
tensorflow.contrib.framework.python.ops.variables.get_variable_full_name(var)
tensorflow.contrib.framework.python.ops.variables.get_variables(scope=None,suffix=None,collection=ops.GraphKeys.GLOBAL_VARIABLES)
tensorflow.contrib.framework.python.ops.variables.get_variables_by_name(given_name,scope=None)
tensorflow.contrib.framework.python.ops.variables.get_variables_by_suffix(suffix,scope=None)
tensorflow.contrib.framework.python.ops.variables.get_variables_to_restore(include=None,exclude=None)
tensorflow.contrib.framework.python.ops.variables.local_variable(initial_value,validate_shape=True,name=None)
tensorflow.contrib.framework.python.ops.variables.model_variable(name,shape=None,dtype=dtypes.float32,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,device=None,partitioner=None,custom_getter=None,use_resource=None)
tensorflow.contrib.framework.python.ops.variables.variable(name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,device=None,partitioner=None,custom_getter=None,use_resource=None)
tensorflow.contrib.framework.python.ops.variables.zero_initializer(ref,use_locking=True,name='zero_initializer')
tensorflow.contrib.framework.variable(name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,device=None,partitioner=None,custom_getter=None,use_resource=None)
tensorflow.contrib.framework.zero_initializer(ref,use_locking=True,name='zero_initializer')


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/framework/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/framework/python/ops/arg_scope.py----------------------------------------
A:tensorflow.contrib.framework.python.ops.arg_scope.stack->_get_arg_stack()
A:tensorflow.contrib.framework.python.ops.arg_scope.key_op->_key_op(op)
A:tensorflow.contrib.framework.python.ops.arg_scope._DECORATED_OPS[key_op]->_kwarg_names(op)
A:tensorflow.contrib.framework.python.ops.arg_scope.current_scope->_current_arg_scope()
A:tensorflow.contrib.framework.python.ops.arg_scope.current_kwargs->kwargs.copy().copy()
A:tensorflow.contrib.framework.python.ops.arg_scope.current_scope[key_op]->kwargs.copy()
A:tensorflow.contrib.framework.python.ops.arg_scope.key_func->_key_op(func)
A:tensorflow.contrib.framework.python.ops.arg_scope.current_args->current_scope[key_func].copy()
tensorflow.contrib.framework.arg_scope._add_op(op)
tensorflow.contrib.framework.arg_scope._current_arg_scope()
tensorflow.contrib.framework.arg_scope._get_arg_stack()
tensorflow.contrib.framework.arg_scope._key_op(op)
tensorflow.contrib.framework.arg_scope._kwarg_names(func)
tensorflow.contrib.framework.arg_scope._name_op(op)
tensorflow.contrib.framework.arg_scope.add_arg_scope(func)
tensorflow.contrib.framework.arg_scope.arg_scope(list_ops_or_scope,**kwargs)
tensorflow.contrib.framework.arg_scope.arg_scoped_arguments(func)
tensorflow.contrib.framework.arg_scope.has_arg_scope(func)
tensorflow.contrib.framework.python.ops.arg_scope._add_op(op)
tensorflow.contrib.framework.python.ops.arg_scope._current_arg_scope()
tensorflow.contrib.framework.python.ops.arg_scope._get_arg_stack()
tensorflow.contrib.framework.python.ops.arg_scope._key_op(op)
tensorflow.contrib.framework.python.ops.arg_scope._kwarg_names(func)
tensorflow.contrib.framework.python.ops.arg_scope._name_op(op)
tensorflow.contrib.framework.python.ops.arg_scope.add_arg_scope(func)
tensorflow.contrib.framework.python.ops.arg_scope.arg_scope(list_ops_or_scope,**kwargs)
tensorflow.contrib.framework.python.ops.arg_scope.arg_scoped_arguments(func)
tensorflow.contrib.framework.python.ops.arg_scope.has_arg_scope(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/framework/python/ops/gen_variable_ops.py----------------------------------------
A:tensorflow.contrib.framework.python.ops.gen_variable_ops.result->_InitOpDefLibrary().apply_op('ZeroInitializer', ref=ref, name=name)
A:tensorflow.contrib.framework.python.ops.gen_variable_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.framework.python.ops.gen_variable_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.framework.python.ops.gen_variable_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.framework.gen_variable__InitOpDefLibrary()
tensorflow.contrib.framework.gen_variable_zero_initializer(ref,name=None)
tensorflow.contrib.framework.python.ops.gen_variable_ops._InitOpDefLibrary()
tensorflow.contrib.framework.python.ops.gen_variable_ops.zero_initializer(ref,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/framework/python/ops/prettyprint_ops.py----------------------------------------
A:tensorflow.contrib.framework.python.ops.prettyprint_ops.t_type_str->'Type: Variable ({})'.format(t.dtype.name)
A:tensorflow.contrib.framework.python.ops.prettyprint_ops.int_tensor->tensorflow.python.ops.math_ops.cast(t, dtypes.uint8)
A:tensorflow.contrib.framework.python.ops.prettyprint_ops.tensor_list->_get_tensor_repr(input_, print_tensor_name, print_tensor_type, print_shape, summarize_indicator_vector)
A:tensorflow.contrib.framework.python.ops.prettyprint_ops.input_->tensorflow.python.ops.tensor_array_ops.TensorArray(dtype=input_.dtype, handle=input_.handle, flow=input_.flow)
A:tensorflow.contrib.framework.python.ops.prettyprint_ops.p->tensorflow.python.ops.logging_ops.Print(constant_op.constant([]), tensor_list, message, first_n, summarize, name)
tensorflow.contrib.framework._get_tensor_repr(t,print_tensor_name=True,print_tensor_type=True,print_shape=True,summarize_indicator_vector=True)
tensorflow.contrib.framework.print_op(input_,data=None,message=None,first_n=None,summarize=20,print_tensor_name=True,print_tensor_type=True,print_shape=True,summarize_indicator_vector=True,name=None)
tensorflow.contrib.framework.python.ops.prettyprint_ops._get_tensor_repr(t,print_tensor_name=True,print_tensor_type=True,print_shape=True,summarize_indicator_vector=True)
tensorflow.contrib.framework.python.ops.prettyprint_ops.print_op(input_,data=None,message=None,first_n=None,summarize=20,print_tensor_name=True,print_tensor_type=True,print_shape=True,summarize_indicator_vector=True,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/framework/python/ops/ops.py----------------------------------------
tensorflow.contrib.framework.get_graph_from_inputs(op_input_list,graph=None)
tensorflow.contrib.framework.python.ops.ops.get_graph_from_inputs(op_input_list,graph=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/lookup/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/lookup/lookup_ops.py----------------------------------------
A:tensorflow.contrib.lookup.lookup_ops.self._key_dtype->tensorflow.python.framework.dtypes.as_dtype(key_dtype)
A:tensorflow.contrib.lookup.lookup_ops.self._value_dtype->tensorflow.python.framework.dtypes.as_dtype(value_dtype)
A:tensorflow.contrib.lookup.lookup_ops.self._default_value->tensorflow.python.framework.ops.convert_to_tensor(default_value, dtype=value_dtype)
A:tensorflow.contrib.lookup.lookup_ops.self._init->initializer.initialize(self)
A:tensorflow.contrib.lookup.lookup_ops.values->tensorflow.python.ops.gen_data_flow_ops._lookup_table_find(self._table_ref, keys, self._default_value, name=name)
A:tensorflow.contrib.lookup.lookup_ops.table_ref->tensorflow.python.ops.gen_data_flow_ops._hash_table(shared_name=shared_name, key_dtype=initializer.key_dtype, value_dtype=initializer.value_dtype, name=scope)
A:tensorflow.contrib.lookup.lookup_ops.self._keys->tensorflow.python.framework.ops.convert_to_tensor(keys, dtype=key_dtype, name='keys')
A:tensorflow.contrib.lookup.lookup_ops.self._values->tensorflow.python.framework.ops.convert_to_tensor(values, dtype=value_dtype, name='values')
A:tensorflow.contrib.lookup.lookup_ops.init_op->tensorflow.python.ops.gen_data_flow_ops._initialize_table_from_text_file(table.table_ref, filename, self._key_index, self._value_index, -1 if self._vocab_size is None else self._vocab_size, self._delimiter, name=scope)
A:tensorflow.contrib.lookup.lookup_ops.key_dtype->tensorflow.python.framework.dtypes.as_dtype(key_dtype)
A:tensorflow.contrib.lookup.lookup_ops.value_dtype->tensorflow.python.framework.dtypes.as_dtype(value_dtype)
A:tensorflow.contrib.lookup.lookup_ops.filename->tensorflow.python.framework.ops.convert_to_tensor(self._filename, dtypes.string, name='asset_filepath')
A:tensorflow.contrib.lookup.lookup_ops.FastHashSpec->HasherSpec('fasthash', None)
A:tensorflow.contrib.lookup.lookup_ops.name->name.rstrip('/').rstrip('/')
A:tensorflow.contrib.lookup.lookup_ops.tsize->tensorflow.python.framework.ops.convert_to_tensor(0, dtype=dtypes.int64)
A:tensorflow.contrib.lookup.lookup_ops.ids->tensorflow.python.ops.array_ops.where(is_id_non_default, ids, buckets, name=scope)
A:tensorflow.contrib.lookup.lookup_ops.str_to_hash_bucket->self._get_string_to_hash_bucket_fn(self._hasher_spec)
A:tensorflow.contrib.lookup.lookup_ops.buckets->tensorflow.python.ops.math_ops.add(buckets, self._table.size())
A:tensorflow.contrib.lookup.lookup_ops.is_id_non_default->tensorflow.python.ops.math_ops.not_equal(ids, self._table.default_value)
A:tensorflow.contrib.lookup.lookup_ops.init->KeyValueTensorInitializer(keys, values, dtypes.int64, dtypes.string, name='table_init')
A:tensorflow.contrib.lookup.lookup_ops.table->index_to_string_table_from_tensor(mapping=mapping, default_value=default_value, name=name)
A:tensorflow.contrib.lookup.lookup_ops.mapping->tensorflow.python.framework.ops.convert_to_tensor(mapping)
A:tensorflow.contrib.lookup.lookup_ops.keys->tensorflow.python.ops.math_ops.to_int64(math_ops.range(num_elements))
A:tensorflow.contrib.lookup.lookup_ops.num_elements->tensorflow.python.ops.array_ops.size(values)
A:tensorflow.contrib.lookup.lookup_ops.self._value_shape->self._default_value.get_shape()
A:tensorflow.contrib.lookup.lookup_ops.self._table_ref->tensorflow.python.ops.gen_data_flow_ops._mutable_dense_hash_table(empty_key=empty_key, shared_name=shared_name, use_node_name_sharing=use_node_name_sharing, value_dtype=value_dtype, value_shape=self._value_shape, initial_num_buckets=initial_num_buckets, name=name)
A:tensorflow.contrib.lookup.lookup_ops.saveable->MutableDenseHashTable._Saveable(self, name)
A:tensorflow.contrib.lookup.lookup_ops.op->tensorflow.python.ops.gen_data_flow_ops._lookup_table_insert(self._table_ref, keys, values, name=name)
A:tensorflow.contrib.lookup.lookup_ops.(exported_keys, exported_values)->tensorflow.python.ops.gen_data_flow_ops._lookup_table_export(self._table_ref, self._key_dtype, self._value_dtype, name=name)
A:tensorflow.contrib.lookup.lookup_ops.tensors->index_to_string_table_from_tensor(mapping=mapping, default_value=default_value, name=name).export()
A:tensorflow.contrib.lookup.lookup_ops.empty_key->tensorflow.python.framework.ops.convert_to_tensor(empty_key, dtype=key_dtype)
tensorflow.contrib.lookup.HashTable(self,initializer,default_value,shared_name=None,name=None)
tensorflow.contrib.lookup.HasherSpec(collections.namedtuple('HasherSpec',['hasher','key']))
tensorflow.contrib.lookup.IdTableWithHashBuckets(self,table,num_oov_buckets,hasher_spec=FastHashSpec,name=None,key_dtype=None)
tensorflow.contrib.lookup.IdTableWithHashBuckets._get_string_to_hash_bucket_fn(self,hasher_spec)
tensorflow.contrib.lookup.IdTableWithHashBuckets.init(self)
tensorflow.contrib.lookup.IdTableWithHashBuckets.lookup(self,keys,name=None)
tensorflow.contrib.lookup.IdTableWithHashBuckets.size(self,name=None)
tensorflow.contrib.lookup.InitializableLookupTableBase(self,table_ref,default_value,initializer)
tensorflow.contrib.lookup.InitializableLookupTableBase.default_value(self)
tensorflow.contrib.lookup.InitializableLookupTableBase.init(self)
tensorflow.contrib.lookup.InitializableLookupTableBase.lookup(self,keys,name=None)
tensorflow.contrib.lookup.InitializableLookupTableBase.size(self,name=None)
tensorflow.contrib.lookup.InitializableLookupTableBase.table_ref(self)
tensorflow.contrib.lookup.KeyValueTensorInitializer(self,keys,values,key_dtype=None,value_dtype=None,name=None)
tensorflow.contrib.lookup.KeyValueTensorInitializer.initialize(self,table)
tensorflow.contrib.lookup.LookupInterface(self,key_dtype,value_dtype,name)
tensorflow.contrib.lookup.LookupInterface.check_table_dtypes(self,key_dtype,value_dtype)
tensorflow.contrib.lookup.LookupInterface.init(self)
tensorflow.contrib.lookup.LookupInterface.key_dtype(self)
tensorflow.contrib.lookup.LookupInterface.lookup(self,keys,name=None)
tensorflow.contrib.lookup.LookupInterface.name(self)
tensorflow.contrib.lookup.LookupInterface.size(self,name=None)
tensorflow.contrib.lookup.LookupInterface.value_dtype(self)
tensorflow.contrib.lookup.MutableDenseHashTable(self,key_dtype,value_dtype,default_value,empty_key,initial_num_buckets=None,shared_name=None,name='MutableDenseHashTable',checkpoint=True)
tensorflow.contrib.lookup.MutableDenseHashTable._Saveable(self,table,name)
tensorflow.contrib.lookup.MutableDenseHashTable._Saveable.restore(self,restored_tensors,unused_restored_shapes)
tensorflow.contrib.lookup.MutableDenseHashTable.export(self,name=None)
tensorflow.contrib.lookup.MutableDenseHashTable.insert(self,keys,values,name=None)
tensorflow.contrib.lookup.MutableDenseHashTable.lookup(self,keys,name=None)
tensorflow.contrib.lookup.MutableDenseHashTable.size(self,name=None)
tensorflow.contrib.lookup.MutableHashTable(self,key_dtype,value_dtype,default_value,shared_name=None,name='MutableHashTable',checkpoint=True)
tensorflow.contrib.lookup.MutableHashTable._Saveable(self,table,name)
tensorflow.contrib.lookup.MutableHashTable._Saveable.restore(self,restored_tensors,unused_restored_shapes)
tensorflow.contrib.lookup.MutableHashTable.export(self,name=None)
tensorflow.contrib.lookup.MutableHashTable.insert(self,keys,values,name=None)
tensorflow.contrib.lookup.MutableHashTable.lookup(self,keys,name=None)
tensorflow.contrib.lookup.MutableHashTable.size(self,name=None)
tensorflow.contrib.lookup.StrongHashSpec(cls,key)
tensorflow.contrib.lookup.TableInitializerBase(self,key_dtype,value_dtype)
tensorflow.contrib.lookup.TableInitializerBase.initialize(self,table)
tensorflow.contrib.lookup.TableInitializerBase.key_dtype(self)
tensorflow.contrib.lookup.TableInitializerBase.value_dtype(self)
tensorflow.contrib.lookup.TextFileIdTableInitializer(self,filename,key_column_index=TextFileIndex.WHOLE_LINE,value_column_index=TextFileIndex.LINE_NUMBER,vocab_size=None,delimiter='\t',name='text_file_id_table_init',key_dtype=dtypes.string)
tensorflow.contrib.lookup.TextFileIndex(object)
tensorflow.contrib.lookup.TextFileInitializer(self,filename,key_dtype,key_index,value_dtype,value_index,vocab_size=None,delimiter='\t',name=None)
tensorflow.contrib.lookup.TextFileInitializer.initialize(self,table)
tensorflow.contrib.lookup.TextFileStringTableInitializer(self,filename,key_column_index=TextFileIndex.LINE_NUMBER,value_column_index=TextFileIndex.WHOLE_LINE,vocab_size=None,delimiter='\t',name='text_file_string_table_init')
tensorflow.contrib.lookup._as_string(tensor)
tensorflow.contrib.lookup.index_table_from_file(vocabulary_file=None,num_oov_buckets=0,vocab_size=None,default_value=-1,hasher_spec=FastHashSpec,key_dtype=dtypes.string,name=None)
tensorflow.contrib.lookup.index_table_from_tensor(mapping,num_oov_buckets=0,default_value=-1,hasher_spec=FastHashSpec,dtype=dtypes.string,name=None)
tensorflow.contrib.lookup.index_to_string(tensor,mapping,default_value='UNK',name=None)
tensorflow.contrib.lookup.index_to_string_table_from_file(vocabulary_file,vocab_size=None,default_value='UNK',name=None)
tensorflow.contrib.lookup.index_to_string_table_from_tensor(mapping,default_value='UNK',name=None)
tensorflow.contrib.lookup.lookup_ops.HashTable(self,initializer,default_value,shared_name=None,name=None)
tensorflow.contrib.lookup.lookup_ops.HashTable.__init__(self,initializer,default_value,shared_name=None,name=None)
tensorflow.contrib.lookup.lookup_ops.HasherSpec(collections.namedtuple('HasherSpec',['hasher','key']))
tensorflow.contrib.lookup.lookup_ops.IdTableWithHashBuckets(self,table,num_oov_buckets,hasher_spec=FastHashSpec,name=None,key_dtype=None)
tensorflow.contrib.lookup.lookup_ops.IdTableWithHashBuckets.__init__(self,table,num_oov_buckets,hasher_spec=FastHashSpec,name=None,key_dtype=None)
tensorflow.contrib.lookup.lookup_ops.IdTableWithHashBuckets._get_string_to_hash_bucket_fn(self,hasher_spec)
tensorflow.contrib.lookup.lookup_ops.IdTableWithHashBuckets.init(self)
tensorflow.contrib.lookup.lookup_ops.IdTableWithHashBuckets.lookup(self,keys,name=None)
tensorflow.contrib.lookup.lookup_ops.IdTableWithHashBuckets.size(self,name=None)
tensorflow.contrib.lookup.lookup_ops.InitializableLookupTableBase(self,table_ref,default_value,initializer)
tensorflow.contrib.lookup.lookup_ops.InitializableLookupTableBase.__init__(self,table_ref,default_value,initializer)
tensorflow.contrib.lookup.lookup_ops.InitializableLookupTableBase.default_value(self)
tensorflow.contrib.lookup.lookup_ops.InitializableLookupTableBase.init(self)
tensorflow.contrib.lookup.lookup_ops.InitializableLookupTableBase.lookup(self,keys,name=None)
tensorflow.contrib.lookup.lookup_ops.InitializableLookupTableBase.size(self,name=None)
tensorflow.contrib.lookup.lookup_ops.InitializableLookupTableBase.table_ref(self)
tensorflow.contrib.lookup.lookup_ops.KeyValueTensorInitializer(self,keys,values,key_dtype=None,value_dtype=None,name=None)
tensorflow.contrib.lookup.lookup_ops.KeyValueTensorInitializer.__init__(self,keys,values,key_dtype=None,value_dtype=None,name=None)
tensorflow.contrib.lookup.lookup_ops.KeyValueTensorInitializer.initialize(self,table)
tensorflow.contrib.lookup.lookup_ops.LookupInterface(self,key_dtype,value_dtype,name)
tensorflow.contrib.lookup.lookup_ops.LookupInterface.__init__(self,key_dtype,value_dtype,name)
tensorflow.contrib.lookup.lookup_ops.LookupInterface.check_table_dtypes(self,key_dtype,value_dtype)
tensorflow.contrib.lookup.lookup_ops.LookupInterface.init(self)
tensorflow.contrib.lookup.lookup_ops.LookupInterface.key_dtype(self)
tensorflow.contrib.lookup.lookup_ops.LookupInterface.lookup(self,keys,name=None)
tensorflow.contrib.lookup.lookup_ops.LookupInterface.name(self)
tensorflow.contrib.lookup.lookup_ops.LookupInterface.size(self,name=None)
tensorflow.contrib.lookup.lookup_ops.LookupInterface.value_dtype(self)
tensorflow.contrib.lookup.lookup_ops.MutableDenseHashTable(self,key_dtype,value_dtype,default_value,empty_key,initial_num_buckets=None,shared_name=None,name='MutableDenseHashTable',checkpoint=True)
tensorflow.contrib.lookup.lookup_ops.MutableDenseHashTable._Saveable(self,table,name)
tensorflow.contrib.lookup.lookup_ops.MutableDenseHashTable._Saveable.__init__(self,table,name)
tensorflow.contrib.lookup.lookup_ops.MutableDenseHashTable._Saveable.restore(self,restored_tensors,unused_restored_shapes)
tensorflow.contrib.lookup.lookup_ops.MutableDenseHashTable.__init__(self,key_dtype,value_dtype,default_value,empty_key,initial_num_buckets=None,shared_name=None,name='MutableDenseHashTable',checkpoint=True)
tensorflow.contrib.lookup.lookup_ops.MutableDenseHashTable.export(self,name=None)
tensorflow.contrib.lookup.lookup_ops.MutableDenseHashTable.insert(self,keys,values,name=None)
tensorflow.contrib.lookup.lookup_ops.MutableDenseHashTable.lookup(self,keys,name=None)
tensorflow.contrib.lookup.lookup_ops.MutableDenseHashTable.size(self,name=None)
tensorflow.contrib.lookup.lookup_ops.MutableHashTable(self,key_dtype,value_dtype,default_value,shared_name=None,name='MutableHashTable',checkpoint=True)
tensorflow.contrib.lookup.lookup_ops.MutableHashTable._Saveable(self,table,name)
tensorflow.contrib.lookup.lookup_ops.MutableHashTable._Saveable.__init__(self,table,name)
tensorflow.contrib.lookup.lookup_ops.MutableHashTable._Saveable.restore(self,restored_tensors,unused_restored_shapes)
tensorflow.contrib.lookup.lookup_ops.MutableHashTable.__init__(self,key_dtype,value_dtype,default_value,shared_name=None,name='MutableHashTable',checkpoint=True)
tensorflow.contrib.lookup.lookup_ops.MutableHashTable.export(self,name=None)
tensorflow.contrib.lookup.lookup_ops.MutableHashTable.insert(self,keys,values,name=None)
tensorflow.contrib.lookup.lookup_ops.MutableHashTable.lookup(self,keys,name=None)
tensorflow.contrib.lookup.lookup_ops.MutableHashTable.size(self,name=None)
tensorflow.contrib.lookup.lookup_ops.StrongHashSpec(cls,key)
tensorflow.contrib.lookup.lookup_ops.StrongHashSpec.__new__(cls,key)
tensorflow.contrib.lookup.lookup_ops.TableInitializerBase(self,key_dtype,value_dtype)
tensorflow.contrib.lookup.lookup_ops.TableInitializerBase.__init__(self,key_dtype,value_dtype)
tensorflow.contrib.lookup.lookup_ops.TableInitializerBase.initialize(self,table)
tensorflow.contrib.lookup.lookup_ops.TableInitializerBase.key_dtype(self)
tensorflow.contrib.lookup.lookup_ops.TableInitializerBase.value_dtype(self)
tensorflow.contrib.lookup.lookup_ops.TextFileIdTableInitializer(self,filename,key_column_index=TextFileIndex.WHOLE_LINE,value_column_index=TextFileIndex.LINE_NUMBER,vocab_size=None,delimiter='\t',name='text_file_id_table_init',key_dtype=dtypes.string)
tensorflow.contrib.lookup.lookup_ops.TextFileIdTableInitializer.__init__(self,filename,key_column_index=TextFileIndex.WHOLE_LINE,value_column_index=TextFileIndex.LINE_NUMBER,vocab_size=None,delimiter='\t',name='text_file_id_table_init',key_dtype=dtypes.string)
tensorflow.contrib.lookup.lookup_ops.TextFileIndex(object)
tensorflow.contrib.lookup.lookup_ops.TextFileInitializer(self,filename,key_dtype,key_index,value_dtype,value_index,vocab_size=None,delimiter='\t',name=None)
tensorflow.contrib.lookup.lookup_ops.TextFileInitializer.__init__(self,filename,key_dtype,key_index,value_dtype,value_index,vocab_size=None,delimiter='\t',name=None)
tensorflow.contrib.lookup.lookup_ops.TextFileInitializer.initialize(self,table)
tensorflow.contrib.lookup.lookup_ops.TextFileStringTableInitializer(self,filename,key_column_index=TextFileIndex.LINE_NUMBER,value_column_index=TextFileIndex.WHOLE_LINE,vocab_size=None,delimiter='\t',name='text_file_string_table_init')
tensorflow.contrib.lookup.lookup_ops.TextFileStringTableInitializer.__init__(self,filename,key_column_index=TextFileIndex.LINE_NUMBER,value_column_index=TextFileIndex.WHOLE_LINE,vocab_size=None,delimiter='\t',name='text_file_string_table_init')
tensorflow.contrib.lookup.lookup_ops._as_string(tensor)
tensorflow.contrib.lookup.lookup_ops.index_table_from_file(vocabulary_file=None,num_oov_buckets=0,vocab_size=None,default_value=-1,hasher_spec=FastHashSpec,key_dtype=dtypes.string,name=None)
tensorflow.contrib.lookup.lookup_ops.index_table_from_tensor(mapping,num_oov_buckets=0,default_value=-1,hasher_spec=FastHashSpec,dtype=dtypes.string,name=None)
tensorflow.contrib.lookup.lookup_ops.index_to_string(tensor,mapping,default_value='UNK',name=None)
tensorflow.contrib.lookup.lookup_ops.index_to_string_table_from_file(vocabulary_file,vocab_size=None,default_value='UNK',name=None)
tensorflow.contrib.lookup.lookup_ops.index_to_string_table_from_tensor(mapping,default_value='UNK',name=None)
tensorflow.contrib.lookup.lookup_ops.string_to_index(tensor,mapping,default_value=-1,name=None)
tensorflow.contrib.lookup.lookup_ops.string_to_index_table_from_file(vocabulary_file=None,num_oov_buckets=0,vocab_size=None,default_value=-1,hasher_spec=FastHashSpec,name=None)
tensorflow.contrib.lookup.lookup_ops.string_to_index_table_from_tensor(mapping,num_oov_buckets=0,default_value=-1,hasher_spec=FastHashSpec,name=None)
tensorflow.contrib.lookup.string_to_index(tensor,mapping,default_value=-1,name=None)
tensorflow.contrib.lookup.string_to_index_table_from_file(vocabulary_file=None,num_oov_buckets=0,vocab_size=None,default_value=-1,hasher_spec=FastHashSpec,name=None)
tensorflow.contrib.lookup.string_to_index_table_from_tensor(mapping,num_oov_buckets=0,default_value=-1,hasher_spec=FastHashSpec,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/ndlstm/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/ndlstm/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/ndlstm/python/lstm1d.py----------------------------------------
A:tensorflow.contrib.ndlstm.python.lstm1d.(length, batch_size, _)->_shape(inputs)
A:tensorflow.contrib.ndlstm.python.lstm1d.lstm_cell->tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.BasicLSTMCell(noutput, state_is_tuple=False)
A:tensorflow.contrib.ndlstm.python.lstm1d.state->tensorflow.python.ops.array_ops.zeros([batch_size, lstm.state_size])
A:tensorflow.contrib.ndlstm.python.lstm1d.inputs_u->tensorflow.python.ops.array_ops.unstack(inputs)
A:tensorflow.contrib.ndlstm.python.lstm1d.(output, state)->lstm(inputs_u[i], state)
A:tensorflow.contrib.ndlstm.python.lstm1d.output_u->list(reversed(output_u))
A:tensorflow.contrib.ndlstm.python.lstm1d.outputs->tensorflow.python.ops.array_ops.stack(output_u, name=name)
A:tensorflow.contrib.ndlstm.python.lstm1d.(_, batch_size, _)->_shape(inputs)
A:tensorflow.contrib.ndlstm.python.lstm1d.sequence_length->int(inputs.get_shape()[0])
A:tensorflow.contrib.ndlstm.python.lstm1d.sequence_lengths->tensorflow.python.ops.math_ops.to_int64(array_ops.fill([batch_size], sequence_length))
A:tensorflow.contrib.ndlstm.python.lstm1d.inputs->tensorflow.python.ops.array_ops.reverse_v2(inputs, [0])
A:tensorflow.contrib.ndlstm.python.lstm1d.(outputs, _)->tensorflow.python.ops.rnn.dynamic_rnn(lstm_cell, inputs, sequence_lengths, state, time_major=True)
A:tensorflow.contrib.ndlstm.python.lstm1d.lstm->tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.BasicLSTMCell(noutput, state_is_tuple=False)
A:tensorflow.contrib.ndlstm.python.lstm1d.(length, _, ninputs)->_shape(inputs)
A:tensorflow.contrib.ndlstm.python.lstm1d.initial_w->tensorflow.python.ops.random_ops.truncated_normal([0 + ninputs, noutput], stddev=0.1)
A:tensorflow.contrib.ndlstm.python.lstm1d.initial_b->tensorflow.python.framework.constant_op.constant(0.1, shape=[noutput])
A:tensorflow.contrib.ndlstm.python.lstm1d.w->tensorflow.contrib.framework.python.ops.variables.model_variable('weights', initializer=initial_w)
A:tensorflow.contrib.ndlstm.python.lstm1d.b->tensorflow.contrib.framework.python.ops.variables.model_variable('biases', initializer=initial_b)
A:tensorflow.contrib.ndlstm.python.lstm1d.linear->tensorflow.python.ops.nn_ops.xw_plus_b(inputs_u[i], w, b, name=linear_name)
A:tensorflow.contrib.ndlstm.python.lstm1d.output->tensorflow.python.ops.nn_ops.softmax(linear)
tensorflow.contrib.ndlstm._shape(tensor)
tensorflow.contrib.ndlstm.ndlstm_base(inputs,noutput,scope=None,reverse=False,dynamic=True)
tensorflow.contrib.ndlstm.ndlstm_base_dynamic(inputs,noutput,scope=None,reverse=False)
tensorflow.contrib.ndlstm.ndlstm_base_unrolled(inputs,noutput,scope=None,reverse=False)
tensorflow.contrib.ndlstm.python.lstm1d._shape(tensor)
tensorflow.contrib.ndlstm.python.lstm1d.ndlstm_base(inputs,noutput,scope=None,reverse=False,dynamic=True)
tensorflow.contrib.ndlstm.python.lstm1d.ndlstm_base_dynamic(inputs,noutput,scope=None,reverse=False)
tensorflow.contrib.ndlstm.python.lstm1d.ndlstm_base_unrolled(inputs,noutput,scope=None,reverse=False)
tensorflow.contrib.ndlstm.python.lstm1d.sequence_softmax(inputs,noutput,scope=None,name=None,linear_name=None)
tensorflow.contrib.ndlstm.python.lstm1d.sequence_to_final(inputs,noutput,scope=None,name=None,reverse=False)
tensorflow.contrib.ndlstm.sequence_softmax(inputs,noutput,scope=None,name=None,linear_name=None)
tensorflow.contrib.ndlstm.sequence_to_final(inputs,noutput,scope=None,name=None,reverse=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/ndlstm/python/lstm2d.py----------------------------------------
A:tensorflow.contrib.ndlstm.python.lstm2d.(num_image_batches, height, width, depth)->_shape(tensor)
A:tensorflow.contrib.ndlstm.python.lstm2d.transposed->tensorflow.python.ops.array_ops.transpose(images, [1, 0, 2, 3])
A:tensorflow.contrib.ndlstm.python.lstm2d.(width, num_batches, depth)->_shape(tensor)
A:tensorflow.contrib.ndlstm.python.lstm2d.reshaped->tensorflow.python.ops.array_ops.reshape(transposed, [height, batch_size * width, depth])
A:tensorflow.contrib.ndlstm.python.lstm2d.(batch_size, _, _, _)->_shape(images)
A:tensorflow.contrib.ndlstm.python.lstm2d.sequence->images_to_sequence(images)
A:tensorflow.contrib.ndlstm.python.lstm2d.hidden_sequence_lr->tensorflow.contrib.ndlstm.python.lstm1d.ndlstm_base(sequence, num_filters_out // 2)
A:tensorflow.contrib.ndlstm.python.lstm2d.hidden_sequence_rl->tensorflow.contrib.ndlstm.python.lstm1d.ndlstm_base(sequence, num_filters_out - num_filters_out // 2, reverse=1)
A:tensorflow.contrib.ndlstm.python.lstm2d.output_sequence->tensorflow.python.ops.array_ops.concat([hidden_sequence_lr, hidden_sequence_rl], 2)
A:tensorflow.contrib.ndlstm.python.lstm2d.output->tensorflow.contrib.ndlstm.python.lstm1d.sequence_to_final(hidden, num_filters_out)
A:tensorflow.contrib.ndlstm.python.lstm2d.hidden->tensorflow.python.ops.array_ops.transpose(transposed_hidden, [1, 0, 2])
A:tensorflow.contrib.ndlstm.python.lstm2d.output_transposed->horizontal_lstm(transposed, num_filters_out)
A:tensorflow.contrib.ndlstm.python.lstm2d.(batch_size, height, width, depth)->_shape(images)
A:tensorflow.contrib.ndlstm.python.lstm2d.reduced->tensorflow.contrib.ndlstm.python.lstm1d.sequence_to_final(reshaped, nhidden)
A:tensorflow.contrib.ndlstm.python.lstm2d.transposed_hidden->tensorflow.python.ops.array_ops.reshape(reduced, [batch_size, width, nhidden])
tensorflow.contrib.ndlstm._shape(tensor)
tensorflow.contrib.ndlstm.horizontal_lstm(images,num_filters_out,scope=None)
tensorflow.contrib.ndlstm.images_to_sequence(tensor)
tensorflow.contrib.ndlstm.python.lstm2d._shape(tensor)
tensorflow.contrib.ndlstm.python.lstm2d.horizontal_lstm(images,num_filters_out,scope=None)
tensorflow.contrib.ndlstm.python.lstm2d.images_to_sequence(tensor)
tensorflow.contrib.ndlstm.python.lstm2d.reduce_to_final(images,num_filters_out,nhidden=None,scope=None)
tensorflow.contrib.ndlstm.python.lstm2d.reduce_to_sequence(images,num_filters_out,scope=None)
tensorflow.contrib.ndlstm.python.lstm2d.separable_lstm(images,num_filters_out,nhidden=None,scope=None)
tensorflow.contrib.ndlstm.python.lstm2d.sequence_to_images(tensor,num_image_batches)
tensorflow.contrib.ndlstm.reduce_to_final(images,num_filters_out,nhidden=None,scope=None)
tensorflow.contrib.ndlstm.reduce_to_sequence(images,num_filters_out,scope=None)
tensorflow.contrib.ndlstm.separable_lstm(images,num_filters_out,nhidden=None,scope=None)
tensorflow.contrib.ndlstm.sequence_to_images(tensor,num_image_batches)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/ndlstm/python/misc.py----------------------------------------
A:tensorflow.contrib.ndlstm.python.misc.(batch_size, height, width, depth)->_shape(images)
A:tensorflow.contrib.ndlstm.python.misc.(batch_size,)->_shape(labels)
A:tensorflow.contrib.ndlstm.python.misc.batched->tensorflow.contrib.layers.python.layers.layers.one_hot_encoding(labels, num_classes)
A:tensorflow.contrib.ndlstm.python.misc.(height, width, depth)->_shape(labels)
A:tensorflow.contrib.ndlstm.python.misc.sparse_labels->tensorflow.python.ops.math_ops.to_int32(array_ops.reshape(labels, [-1, 1]))
A:tensorflow.contrib.ndlstm.python.misc.(sparse_size, _)->_shape(sparse_labels)
A:tensorflow.contrib.ndlstm.python.misc.indices->tensorflow.python.ops.array_ops.reshape(math_ops.range(0, sparse_size, 1), [-1, 1])
A:tensorflow.contrib.ndlstm.python.misc.concated->tensorflow.python.ops.array_ops.concat([indices, sparse_labels], 1)
A:tensorflow.contrib.ndlstm.python.misc.dense_result->tensorflow.python.ops.sparse_ops.sparse_to_dense(concated, [sparse_size, num_classes], 1.0, 0.0)
A:tensorflow.contrib.ndlstm.python.misc.result->tensorflow.python.ops.array_ops.reshape(dense_result, [height, width, num_classes])
tensorflow.contrib.ndlstm._shape(tensor)
tensorflow.contrib.ndlstm.one_hot_mask(labels,num_classes,scope=None)
tensorflow.contrib.ndlstm.one_hot_planes(labels,num_classes,scope=None)
tensorflow.contrib.ndlstm.pixels_as_vector(images,scope=None)
tensorflow.contrib.ndlstm.pool_as_vector(images,scope=None)
tensorflow.contrib.ndlstm.python.misc._shape(tensor)
tensorflow.contrib.ndlstm.python.misc.one_hot_mask(labels,num_classes,scope=None)
tensorflow.contrib.ndlstm.python.misc.one_hot_planes(labels,num_classes,scope=None)
tensorflow.contrib.ndlstm.python.misc.pixels_as_vector(images,scope=None)
tensorflow.contrib.ndlstm.python.misc.pool_as_vector(images,scope=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/ops/bucketization_op.py----------------------------------------
A:tensorflow.contrib.layers.python.ops.bucketization_op._bucketization_op->tensorflow.contrib.util.loader.load_op_library(resource_loader.get_path_to_datafile('_bucketization_op.so'))
tensorflow.contrib.layers.ops.bucketization_op.bucketize(input_tensor,boundaries,name=None)
tensorflow.contrib.layers.python.ops.bucketization_op.bucketize(input_tensor,boundaries,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/ops/sparse_feature_cross_op.py----------------------------------------
A:tensorflow.contrib.layers.python.ops.sparse_feature_cross_op._sparse_feature_cross_op->tensorflow.contrib.util.loader.load_op_library(resource_loader.get_path_to_datafile('_sparse_feature_cross_op.so'))
A:tensorflow.contrib.layers.python.ops.sparse_feature_cross_op.values[i]->tensorflow.python.ops.math_ops.to_int64(values[i])
A:tensorflow.contrib.layers.python.ops.sparse_feature_cross_op.dense_inputs[i]->tensorflow.python.ops.math_ops.to_int64(dense_inputs[i])
A:tensorflow.contrib.layers.python.ops.sparse_feature_cross_op.(indices_out, values_out, shape_out)->tensorflow.contrib.layers.ops.gen_sparse_feature_cross_op.sparse_feature_cross(indices, values, shapes, dense_inputs, hashed_output, num_buckets, out_type=out_type, internal_type=internal_type, name=name)
tensorflow.contrib.layers.ops.sparse_feature_cross_op.sparse_feature_cross(inputs,hashed_output=False,num_buckets=0,name=None,hash_key=None)
tensorflow.contrib.layers.python.ops.sparse_feature_cross_op.sparse_feature_cross(inputs,hashed_output=False,num_buckets=0,name=None,hash_key=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/ops/sparse_ops.py----------------------------------------
A:tensorflow.contrib.layers.python.ops.sparse_ops.dense_t->tensorflow.python.framework.ops.convert_to_tensor(dense_tensor)
A:tensorflow.contrib.layers.python.ops.sparse_ops.ignore_value->tensorflow.python.framework.ops.convert_to_tensor(dense_tensor).dtype.as_numpy_dtype()
A:tensorflow.contrib.layers.python.ops.sparse_ops.dense_shape->tensorflow.python.ops.math_ops.cast(array_ops.shape(dense_t), dtypes.int64)
A:tensorflow.contrib.layers.python.ops.sparse_ops.indices->tensorflow.python.ops.array_ops.where(math_ops.not_equal(dense_t, math_ops.cast(ignore_value, dense_t.dtype)))
A:tensorflow.contrib.layers.python.ops.sparse_ops.index_dims->len(dense_t.get_shape())
A:tensorflow.contrib.layers.python.ops.sparse_ops.flat_tensor->tensorflow.python.ops.array_ops.reshape(dense_t, [-1])
A:tensorflow.contrib.layers.python.ops.sparse_ops.shape_multipliers->tensorflow.python.ops.array_ops.stack(_multiplier_helper(array_ops.unstack(dense_shape)[1:]))
A:tensorflow.contrib.layers.python.ops.sparse_ops.offsets->tensorflow.python.ops.math_ops.reduce_sum(math_ops.multiply(higher_dims, shape_multipliers), reduction_indices=[1])
A:tensorflow.contrib.layers.python.ops.sparse_ops.flat_indices->tensorflow.python.ops.math_ops.add(flat_indices, offsets)
A:tensorflow.contrib.layers.python.ops.sparse_ops.values->tensorflow.python.ops.array_ops.gather(flat_tensor, flat_indices)
tensorflow.contrib.layers.ops.sparse_ops._multiplier_helper(shape)
tensorflow.contrib.layers.ops.sparse_ops.dense_to_sparse_tensor(dense_tensor,ignore_value=None)
tensorflow.contrib.layers.python.ops.sparse_ops._multiplier_helper(shape)
tensorflow.contrib.layers.python.ops.sparse_ops.dense_to_sparse_tensor(dense_tensor,ignore_value=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/layers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/layers/target_column.py----------------------------------------
A:tensorflow.contrib.layers.python.layers.target_column.unweighted_loss->tensorflow.python.ops.array_ops.reshape(loss, shape=(-1,))
A:tensorflow.contrib.layers.python.layers.target_column.weighted_loss->tensorflow.python.ops.math_ops.multiply(unweighted_loss, array_ops.reshape(weight_tensor, shape=(-1,)))
A:tensorflow.contrib.layers.python.layers.target_column.loss_unweighted->self._loss_fn(logits, target)
A:tensorflow.contrib.layers.python.layers.target_column.weight_tensor->self.get_weight_tensor(features)
A:tensorflow.contrib.layers.python.layers.target_column.loss_weighted->self._weighted_loss(loss_unweighted, weight_tensor)
A:tensorflow.contrib.layers.python.layers.target_column.loss->self.loss(logits, labels, features)
A:tensorflow.contrib.layers.python.layers.target_column.predictions->self.logits_to_predictions(logits, proba=True)
A:tensorflow.contrib.layers.python.layers.target_column.logits->tensorflow.python.ops.array_ops.concat([array_ops.zeros_like(logits), logits], 1)
A:tensorflow.contrib.layers.python.layers.target_column.labels_float->tensorflow.python.ops.math_ops.to_float(labels)
A:tensorflow.contrib.layers.python.layers.target_column.default_metrics->self._default_eval_metrics()
A:tensorflow.contrib.layers.python.layers.target_column.result[metric_name]->metric_op(predictions, labels_float)
A:tensorflow.contrib.layers.python.layers.target_column.class_predictions->self.logits_to_predictions(logits, proba=False)
A:tensorflow.contrib.layers.python.layers.target_column.check_shape_op->tensorflow.python.ops.control_flow_ops.Assert(math_ops.less_equal(array_ops.rank(target), 2), ["target's shape should be either [batch_size, 1] or [batch_size]"])
A:tensorflow.contrib.layers.python.layers.target_column.target->tensorflow.python.ops.array_ops.squeeze(target, squeeze_dims=[1])
A:tensorflow.contrib.layers.python.layers.target_column.loss_vec->tensorflow.python.ops.nn.sparse_softmax_cross_entropy_with_logits(labels=target, logits=logits)
A:tensorflow.contrib.layers.python.layers.target_column.labels->tensorflow.python.ops.math_ops.cast(labels, predictions.dtype)
A:tensorflow.contrib.layers.python.layers.target_column.result[name]->metric(predictions, labels)
A:tensorflow.contrib.layers.python.layers.target_column.metrics[_MetricKeys.ACCURACY_MEAN % threshold]->_accuracy_at_threshold(threshold)
A:tensorflow.contrib.layers.python.layers.target_column.metrics[_MetricKeys.PRECISION_MEAN % threshold]->_streaming_at_threshold(metric_ops.streaming_precision_at_thresholds, threshold)
A:tensorflow.contrib.layers.python.layers.target_column.metrics[_MetricKeys.RECALL_MEAN % threshold]->_streaming_at_threshold(metric_ops.streaming_recall_at_thresholds, threshold)
A:tensorflow.contrib.layers.python.layers.target_column.threshold_predictions->tensorflow.python.ops.math_ops.to_float(math_ops.greater_equal(predictions, threshold))
A:tensorflow.contrib.layers.python.layers.target_column.(precision_tensor, update_op)->streaming_metrics_fn(predictions, labels=labels, thresholds=[threshold], weights=_float_weights_or_none(weights))
tensorflow.contrib.layers.ProblemType(object)
tensorflow.contrib.layers._BinarySvmTargetColumn(self,label_name,weight_column_name)
tensorflow.contrib.layers._BinarySvmTargetColumn.logits_to_predictions(self,logits,proba=False)
tensorflow.contrib.layers._MetricKeys(object)
tensorflow.contrib.layers._MultiClassTargetColumn(self,loss_fn,n_classes,label_name,weight_column_name)
tensorflow.contrib.layers._MultiClassTargetColumn._default_eval_metrics(self)
tensorflow.contrib.layers._MultiClassTargetColumn.get_eval_ops(self,features,logits,labels,metrics=None)
tensorflow.contrib.layers._MultiClassTargetColumn.logits_to_predictions(self,logits,proba=False)
tensorflow.contrib.layers._RegressionTargetColumn(self,loss_fn,label_name,weight_column_name,label_dimension)
tensorflow.contrib.layers._RegressionTargetColumn.get_eval_ops(self,features,logits,labels,metrics=None)
tensorflow.contrib.layers._RegressionTargetColumn.logits_to_predictions(self,logits,proba=False)
tensorflow.contrib.layers._TargetColumn(self,loss_fn,num_label_columns,label_name,weight_column_name,problem_type)
tensorflow.contrib.layers._TargetColumn._weighted_loss(self,loss,weight_tensor)
tensorflow.contrib.layers._TargetColumn.get_eval_ops(self,features,logits,labels,metrics=None)
tensorflow.contrib.layers._TargetColumn.get_weight_tensor(self,features)
tensorflow.contrib.layers._TargetColumn.label_name(self)
tensorflow.contrib.layers._TargetColumn.logits_to_predictions(self,logits,proba=False)
tensorflow.contrib.layers._TargetColumn.loss(self,logits,target,features)
tensorflow.contrib.layers._TargetColumn.num_label_columns(self)
tensorflow.contrib.layers._TargetColumn.problem_type(self)
tensorflow.contrib.layers._TargetColumn.training_loss(self,logits,target,features,name='training_loss')
tensorflow.contrib.layers._TargetColumn.weight_column_name(self)
tensorflow.contrib.layers._accuracy_at_threshold(threshold)
tensorflow.contrib.layers._float_weights_or_none(weights)
tensorflow.contrib.layers._labels_streaming_mean(unused_predictions,labels,weights=None)
tensorflow.contrib.layers._log_loss_with_two_classes(logits,target)
tensorflow.contrib.layers._mean_squared_loss(logits,target)
tensorflow.contrib.layers._predictions_streaming_mean(predictions,unused_labels,weights=None)
tensorflow.contrib.layers._run_metrics(predictions,labels,metrics,weights)
tensorflow.contrib.layers._softmax_cross_entropy_loss(logits,target)
tensorflow.contrib.layers._streaming_at_threshold(streaming_metrics_fn,threshold)
tensorflow.contrib.layers._streaming_auc(predictions,labels,weights=None)
tensorflow.contrib.layers.binary_svm_target(label_name=None,weight_column_name=None)
tensorflow.contrib.layers.get_default_binary_metrics_for_eval(thresholds)
tensorflow.contrib.layers.multi_class_target(n_classes,label_name=None,weight_column_name=None)
tensorflow.contrib.layers.python.layers.target_column.ProblemType(object)
tensorflow.contrib.layers.python.layers.target_column._BinarySvmTargetColumn(self,label_name,weight_column_name)
tensorflow.contrib.layers.python.layers.target_column._BinarySvmTargetColumn.__init__(self,label_name,weight_column_name)
tensorflow.contrib.layers.python.layers.target_column._BinarySvmTargetColumn.logits_to_predictions(self,logits,proba=False)
tensorflow.contrib.layers.python.layers.target_column._MetricKeys(object)
tensorflow.contrib.layers.python.layers.target_column._MultiClassTargetColumn(self,loss_fn,n_classes,label_name,weight_column_name)
tensorflow.contrib.layers.python.layers.target_column._MultiClassTargetColumn.__init__(self,loss_fn,n_classes,label_name,weight_column_name)
tensorflow.contrib.layers.python.layers.target_column._MultiClassTargetColumn._default_eval_metrics(self)
tensorflow.contrib.layers.python.layers.target_column._MultiClassTargetColumn.get_eval_ops(self,features,logits,labels,metrics=None)
tensorflow.contrib.layers.python.layers.target_column._MultiClassTargetColumn.logits_to_predictions(self,logits,proba=False)
tensorflow.contrib.layers.python.layers.target_column._RegressionTargetColumn(self,loss_fn,label_name,weight_column_name,label_dimension)
tensorflow.contrib.layers.python.layers.target_column._RegressionTargetColumn.__init__(self,loss_fn,label_name,weight_column_name,label_dimension)
tensorflow.contrib.layers.python.layers.target_column._RegressionTargetColumn.get_eval_ops(self,features,logits,labels,metrics=None)
tensorflow.contrib.layers.python.layers.target_column._RegressionTargetColumn.logits_to_predictions(self,logits,proba=False)
tensorflow.contrib.layers.python.layers.target_column._TargetColumn(self,loss_fn,num_label_columns,label_name,weight_column_name,problem_type)
tensorflow.contrib.layers.python.layers.target_column._TargetColumn.__init__(self,loss_fn,num_label_columns,label_name,weight_column_name,problem_type)
tensorflow.contrib.layers.python.layers.target_column._TargetColumn._weighted_loss(self,loss,weight_tensor)
tensorflow.contrib.layers.python.layers.target_column._TargetColumn.get_eval_ops(self,features,logits,labels,metrics=None)
tensorflow.contrib.layers.python.layers.target_column._TargetColumn.get_weight_tensor(self,features)
tensorflow.contrib.layers.python.layers.target_column._TargetColumn.label_name(self)
tensorflow.contrib.layers.python.layers.target_column._TargetColumn.logits_to_predictions(self,logits,proba=False)
tensorflow.contrib.layers.python.layers.target_column._TargetColumn.loss(self,logits,target,features)
tensorflow.contrib.layers.python.layers.target_column._TargetColumn.num_label_columns(self)
tensorflow.contrib.layers.python.layers.target_column._TargetColumn.problem_type(self)
tensorflow.contrib.layers.python.layers.target_column._TargetColumn.training_loss(self,logits,target,features,name='training_loss')
tensorflow.contrib.layers.python.layers.target_column._TargetColumn.weight_column_name(self)
tensorflow.contrib.layers.python.layers.target_column._accuracy_at_threshold(threshold)
tensorflow.contrib.layers.python.layers.target_column._float_weights_or_none(weights)
tensorflow.contrib.layers.python.layers.target_column._labels_streaming_mean(unused_predictions,labels,weights=None)
tensorflow.contrib.layers.python.layers.target_column._log_loss_with_two_classes(logits,target)
tensorflow.contrib.layers.python.layers.target_column._mean_squared_loss(logits,target)
tensorflow.contrib.layers.python.layers.target_column._predictions_streaming_mean(predictions,unused_labels,weights=None)
tensorflow.contrib.layers.python.layers.target_column._run_metrics(predictions,labels,metrics,weights)
tensorflow.contrib.layers.python.layers.target_column._softmax_cross_entropy_loss(logits,target)
tensorflow.contrib.layers.python.layers.target_column._streaming_at_threshold(streaming_metrics_fn,threshold)
tensorflow.contrib.layers.python.layers.target_column._streaming_auc(predictions,labels,weights=None)
tensorflow.contrib.layers.python.layers.target_column.binary_svm_target(label_name=None,weight_column_name=None)
tensorflow.contrib.layers.python.layers.target_column.get_default_binary_metrics_for_eval(thresholds)
tensorflow.contrib.layers.python.layers.target_column.multi_class_target(n_classes,label_name=None,weight_column_name=None)
tensorflow.contrib.layers.python.layers.target_column.regression_target(label_name=None,weight_column_name=None,label_dimension=1)
tensorflow.contrib.layers.regression_target(label_name=None,weight_column_name=None,label_dimension=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/layers/layers.py----------------------------------------
A:tensorflow.contrib.layers.python.layers.layers.inputs->tensorflow.python.framework.ops.convert_to_tensor(inputs)
A:tensorflow.contrib.layers.python.layers.layers.layer->tensorflow.python.layers.convolutional.SeparableConvolution2D(filters=num_outputs, kernel_size=kernel_size, strides=stride, padding=padding, data_format='channels_last', dilation_rate=utils.two_element_tuple(rate), activation=None, depth_multiplier=depth_multiplier, use_bias=not normalizer_fn and biases_initializer, depthwise_initializer=weights_initializer, pointwise_initializer=weights_initializer, bias_initializer=biases_initializer, depthwise_regularizer=weights_regularizer, pointwise_regularizer=weights_regularizer, bias_regularizer=biases_regularizer, activity_regularizer=None, trainable=trainable, name=sc.name, dtype=inputs.dtype.base_dtype, _scope=sc, _reuse=reuse)
A:tensorflow.contrib.layers.python.layers.layers.outputs->layer(outputs, *layer_args, **kwargs)
A:tensorflow.contrib.layers.python.layers.layers.original_shape->tensorflow.python.framework.ops.convert_to_tensor(inputs).get_shape()
A:tensorflow.contrib.layers.python.layers.layers.inputs_shape->tensorflow.python.framework.ops.convert_to_tensor(inputs).get_shape()
A:tensorflow.contrib.layers.python.layers.layers.beta_collections->tensorflow.contrib.layers.python.layers.utils.get_variable_collections(variables_collections, 'beta')
A:tensorflow.contrib.layers.python.layers.layers.beta_initializer->param_initializers.get('beta', init_ops.zeros_initializer())
A:tensorflow.contrib.layers.python.layers.layers.beta->tensorflow.contrib.framework.python.ops.variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=init_ops.zeros_initializer(), collections=beta_collections, trainable=trainable)
A:tensorflow.contrib.layers.python.layers.layers.gamma_collections->tensorflow.contrib.layers.python.layers.utils.get_variable_collections(variables_collections, 'gamma')
A:tensorflow.contrib.layers.python.layers.layers.gamma_initializer->param_initializers.get('gamma', init_ops.ones_initializer())
A:tensorflow.contrib.layers.python.layers.layers.gamma->tensorflow.contrib.framework.python.ops.variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=init_ops.ones_initializer(), collections=gamma_collections, trainable=trainable)
A:tensorflow.contrib.layers.python.layers.layers.moving_mean_collections->tensorflow.contrib.layers.python.layers.utils.get_variable_collections(variables_collections, 'moving_mean')
A:tensorflow.contrib.layers.python.layers.layers.moving_mean_initializer->param_initializers.get('moving_mean', init_ops.zeros_initializer())
A:tensorflow.contrib.layers.python.layers.layers.moving_mean->tensorflow.contrib.framework.python.ops.variables.model_variable('moving_mean', shape=params_shape, dtype=dtype, initializer=moving_mean_initializer, trainable=False, collections=moving_mean_collections)
A:tensorflow.contrib.layers.python.layers.layers.moving_variance_collections->tensorflow.contrib.layers.python.layers.utils.get_variable_collections(variables_collections, 'moving_variance')
A:tensorflow.contrib.layers.python.layers.layers.moving_variance_initializer->param_initializers.get('moving_variance', init_ops.ones_initializer())
A:tensorflow.contrib.layers.python.layers.layers.moving_variance->tensorflow.contrib.framework.python.ops.variables.model_variable('moving_variance', shape=params_shape, dtype=dtype, initializer=moving_variance_initializer, trainable=False, collections=moving_variance_collections)
A:tensorflow.contrib.layers.python.layers.layers.(outputs, mean, variance)->tensorflow.contrib.layers.python.layers.utils.smart_cond(is_training, _fused_batch_norm_training, _fused_batch_norm_inference)
A:tensorflow.contrib.layers.python.layers.layers.is_training_value->tensorflow.contrib.layers.python.layers.utils.constant_value(is_training)
A:tensorflow.contrib.layers.python.layers.layers.update_moving_mean->tensorflow.python.training.moving_averages.assign_moving_average(moving_mean, mean, decay, zero_debias=zero_debias_moving_mean)
A:tensorflow.contrib.layers.python.layers.layers.update_moving_variance->tensorflow.python.training.moving_averages.assign_moving_average(moving_variance, variance, decay, zero_debias=False)
A:tensorflow.contrib.layers.python.layers.layers.(update_mean, update_variance)->tensorflow.contrib.layers.python.layers.utils.smart_cond(is_training, _delay_updates, moving_vars_fn)
A:tensorflow.contrib.layers.python.layers.layers.layer_variable_getter->_build_variable_getter({'bias': 'biases', 'depthwise_kernel': 'depthwise_weights', 'pointwise_kernel': 'pointwise_weights'})
A:tensorflow.contrib.layers.python.layers.layers.beta_regularizer->param_regularizers.get('beta')
A:tensorflow.contrib.layers.python.layers.layers.gamma_regularizer->param_regularizers.get('gamma')
A:tensorflow.contrib.layers.python.layers.layers.batch_weights->tensorflow.python.ops.array_ops.reshape(batch_weights, nshape)
A:tensorflow.contrib.layers.python.layers.layers.params_shape_broadcast->list([1, inputs_shape[1].value] + [1 for _ in range(2, inputs_rank)])
A:tensorflow.contrib.layers.python.layers.layers.moments_axes->list(range(inputs_rank - 1))
A:tensorflow.contrib.layers.python.layers.layers.(mean, variance)->tensorflow.python.ops.nn.moments(inputs, axis, keep_dims=True)
A:tensorflow.contrib.layers.python.layers.layers.mean->tensorflow.python.ops.array_ops.reshape(mean, params_shape_broadcast)
A:tensorflow.contrib.layers.python.layers.layers.variance->tensorflow.python.ops.array_ops.reshape(variance, params_shape_broadcast)
A:tensorflow.contrib.layers.python.layers.layers.biases_collections->tensorflow.contrib.layers.python.layers.utils.get_variable_collections(variables_collections, 'biases')
A:tensorflow.contrib.layers.python.layers.layers.biases->tensorflow.contrib.framework.python.ops.variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, collections=biases_collections)
A:tensorflow.contrib.layers.python.layers.layers.(kernel_h, kernel_w)->tensorflow.contrib.layers.python.layers.utils.two_element_tuple(kernel_size)
A:tensorflow.contrib.layers.python.layers.layers.(stride_h, stride_w)->tensorflow.contrib.layers.python.layers.utils.two_element_tuple(stride)
A:tensorflow.contrib.layers.python.layers.layers.num_filters_in->tensorflow.contrib.layers.python.layers.utils.last_dimension(inputs.get_shape(), min_rank=4)
A:tensorflow.contrib.layers.python.layers.layers.weights_collections->tensorflow.contrib.layers.python.layers.utils.get_variable_collections(variables_collections, 'weights')
A:tensorflow.contrib.layers.python.layers.layers.weights->tensorflow.contrib.framework.python.ops.variables.model_variable('weights', shape=weights_shape, dtype=dtype, initializer=weights_initializer, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)
A:tensorflow.contrib.layers.python.layers.layers.depthwise_weights->tensorflow.contrib.framework.python.ops.variables.model_variable('depthwise_weights', shape=depthwise_shape, dtype=dtype, initializer=weights_initializer, regularizer=weights_regularizer, trainable=trainable, collections=weights_collections)
A:tensorflow.contrib.layers.python.layers.layers.batch_dim->tensorflow.python.ops.array_ops.slice(inputs_shape, [0], [1])
A:tensorflow.contrib.layers.python.layers.layers.spatial_dims->tensorflow.python.ops.array_ops.slice(inputs_shape, [1], [inputs_rank - 1])
A:tensorflow.contrib.layers.python.layers.layers.flat_spatial_dim->tensorflow.python.ops.array_ops.expand_dims(flat_spatial_dim, 0)
A:tensorflow.contrib.layers.python.layers.layers.flat_shape->tensorflow.python.ops.array_ops.concat([batch_dim, flat_spatial_dim], 0)
A:tensorflow.contrib.layers.python.layers.layers.input_shape->tensorflow.python.framework.ops.convert_to_tensor(inputs).get_shape().as_list()
A:tensorflow.contrib.layers.python.layers.layers.new_shape->tensorflow.python.ops.array_ops.concat((outer_dimensions, [-1]), 0)
A:tensorflow.contrib.layers.python.layers.layers.flattened->_dense_inner_flatten(inputs, new_rank)
A:tensorflow.contrib.layers.python.layers.layers.rank_assertion->tensorflow.python.ops.check_ops.assert_rank_at_least(inputs, new_rank, message='inputs has rank less than new_rank')
A:tensorflow.contrib.layers.python.layers.layers.outer_dimensions->tensorflow.python.ops.array_ops.strided_slice(array_ops.shape(inputs), [0], [new_rank - 1])
A:tensorflow.contrib.layers.python.layers.layers.reshaped->tensorflow.python.ops.array_ops.reshape(inputs, new_shape)
A:tensorflow.contrib.layers.python.layers.layers.static_shape->tensorflow.python.framework.ops.convert_to_tensor(x).get_shape().as_list()
A:tensorflow.contrib.layers.python.layers.layers.name_components->'/'.join(name_components).split('/')
A:tensorflow.contrib.layers.python.layers.layers.name->'/'.join(name_components)
A:tensorflow.contrib.layers.python.layers.layers.axis->list(range(1, inputs_rank))
A:tensorflow.contrib.layers.python.layers.layers.output->tensorflow.python.ops.nn.pool(input=inputs, window_shape=utils.n_positive_integers(num_spatial_dims, kernel_size), pooling_type=pooling_type, padding=padding, data_format=data_format, dilation_rate=utils.n_positive_integers(num_spatial_dims, dilation_rate), strides=utils.n_positive_integers(num_spatial_dims, stride), name=sc)
A:tensorflow.contrib.layers.python.layers.layers.labels->tensorflow.python.ops.standard_ops.to_int64(labels)
A:tensorflow.contrib.layers.python.layers.layers.y->tensorflow.python.ops.array_ops.reshape(y, array_ops.stack(out_shape))
A:tensorflow.contrib.layers.python.layers.layers.scope->kwargs.pop('scope', None)
A:tensorflow.contrib.layers.python.layers.layers.num_logits->tensorflow.contrib.layers.python.layers.utils.last_dimension(logits.get_shape(), min_rank=2)
A:tensorflow.contrib.layers.python.layers.layers.logits_2d->tensorflow.python.ops.array_ops.reshape(logits, [-1, num_logits])
A:tensorflow.contrib.layers.python.layers.layers.predictions->tensorflow.python.ops.array_ops.reshape(predictions, array_ops.shape(logits))
A:tensorflow.contrib.layers.python.layers.layers.input_rank->len(inputs.get_shape().as_list())
A:tensorflow.contrib.layers.python.layers.layers.lengths->tensorflow.python.ops.math_ops.sqrt(epsilon + math_ops.reduce_sum(math_ops.square(inputs), dim, True))
A:tensorflow.contrib.layers.python.layers.layers.multiples->tensorflow.python.ops.array_ops.concat(multiples, 0)
A:tensorflow.contrib.layers.python.layers.layers.x->tensorflow.python.framework.ops.convert_to_tensor(x)
A:tensorflow.contrib.layers.python.layers.layers.weight_collections->set(list(weight_collections or []) + [ops.GraphKeys.GLOBAL_VARIABLES])
A:tensorflow.contrib.layers.python.layers.layers.w->tensorflow.python.ops.variable_scope.get_variable('weights', shape=[num_input_units, num_output_units], dtype=dtype, initializer=weight_init, collections=weight_collections, regularizer=weight_regularizer, trainable=trainable)
A:tensorflow.contrib.layers.python.layers.layers.bias_collections->set(list(bias_collections or []) + [ops.GraphKeys.GLOBAL_VARIABLES])
A:tensorflow.contrib.layers.python.layers.layers.b->tensorflow.python.ops.variable_scope.get_variable('bias', shape=[num_output_units], dtype=dtype, initializer=bias_init, collections=bias_collections, regularizer=bias_regularizer, trainable=trainable)
A:tensorflow.contrib.layers.python.layers.layers.out_shape->tensorflow.python.ops.array_ops.unstack(array_ops.shape(x))
A:tensorflow.contrib.layers.python.layers.layers.legacy_relu->functools.partial(legacy_fully_connected, activation_fn=nn.relu)
A:tensorflow.contrib.layers.python.layers.layers.legacy_linear->functools.partial(legacy_fully_connected, activation_fn=None)
A:tensorflow.contrib.layers.python.layers.layers.relu->functools.partial(fully_connected, activation_fn=nn.relu)
A:tensorflow.contrib.layers.python.layers.layers.relu6->functools.partial(fully_connected, activation_fn=nn.relu6)
A:tensorflow.contrib.layers.python.layers.layers.linear->functools.partial(fully_connected, activation_fn=None)
tensorflow.contrib.layers._add_variable_to_collections(variable,collections_set,collections_name)
tensorflow.contrib.layers._apply_activation(y,activation_fn,output_collections)
tensorflow.contrib.layers._build_variable_getter(rename=None)
tensorflow.contrib.layers._dense_inner_flatten(inputs,new_rank)
tensorflow.contrib.layers._fused_batch_norm(inputs,decay=0.999,center=True,scale=False,epsilon=0.001,activation_fn=None,param_initializers=None,updates_collections=ops.GraphKeys.UPDATE_OPS,is_training=True,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,data_format=DATA_FORMAT_NHWC,zero_debias_moving_mean=False,scope=None)
tensorflow.contrib.layers._inner_flatten(inputs,new_rank,output_collections=None,scope=None)
tensorflow.contrib.layers._model_variable_getter(getter,name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,partitioner=None,rename=None,use_resource=None,**_)
tensorflow.contrib.layers._sparse_inner_flatten(inputs,new_rank)
tensorflow.contrib.layers.avg_pool2d(inputs,kernel_size,stride=2,padding='VALID',data_format=DATA_FORMAT_NHWC,outputs_collections=None,scope=None)
tensorflow.contrib.layers.batch_norm(inputs,decay=0.999,center=True,scale=False,epsilon=0.001,activation_fn=None,param_initializers=None,param_regularizers=None,updates_collections=ops.GraphKeys.UPDATE_OPS,is_training=True,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,batch_weights=None,fused=False,data_format=DATA_FORMAT_NHWC,zero_debias_moving_mean=False,scope=None)
tensorflow.contrib.layers.bias_add(inputs,activation_fn=None,initializer=init_ops.zeros_initializer(),regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,data_format=DATA_FORMAT_NHWC,scope=None)
tensorflow.contrib.layers.convolution(inputs,num_outputs,kernel_size,stride=1,padding='SAME',data_format=None,rate=1,activation_fn=nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=init_ops.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.convolution2d_in_plane(inputs,kernel_size,stride=1,padding='SAME',activation_fn=nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=init_ops.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.convolution2d_transpose(inputs,num_outputs,kernel_size,stride=1,padding='SAME',data_format=DATA_FORMAT_NHWC,activation_fn=nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=init_ops.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.dropout(inputs,keep_prob=0.5,noise_shape=None,is_training=True,outputs_collections=None,scope=None)
tensorflow.contrib.layers.flatten(inputs,outputs_collections=None,scope=None)
tensorflow.contrib.layers.fully_connected(inputs,num_outputs,activation_fn=nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=init_ops.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.layer_norm(inputs,center=True,scale=True,activation_fn=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.legacy_fully_connected(x,num_output_units,activation_fn=None,weight_init=initializers.xavier_initializer(),bias_init=init_ops.zeros_initializer(),name=None,weight_collections=(ops.GraphKeys.WEIGHTS,),bias_collections=(ops.GraphKeys.BIASES,),output_collections=(ops.GraphKeys.ACTIVATIONS,),trainable=True,weight_regularizer=None,bias_regularizer=None)
tensorflow.contrib.layers.max_pool2d(inputs,kernel_size,stride=2,padding='VALID',data_format=DATA_FORMAT_NHWC,outputs_collections=None,scope=None)
tensorflow.contrib.layers.one_hot_encoding(labels,num_classes,on_value=1.0,off_value=0.0,outputs_collections=None,scope=None)
tensorflow.contrib.layers.pool(inputs,kernel_size,pooling_type,padding='VALID',data_format=None,dilation_rate=1,stride=1,outputs_collections=None,scope=None)
tensorflow.contrib.layers.python.layers.layers._add_variable_to_collections(variable,collections_set,collections_name)
tensorflow.contrib.layers.python.layers.layers._apply_activation(y,activation_fn,output_collections)
tensorflow.contrib.layers.python.layers.layers._build_variable_getter(rename=None)
tensorflow.contrib.layers.python.layers.layers._dense_inner_flatten(inputs,new_rank)
tensorflow.contrib.layers.python.layers.layers._fused_batch_norm(inputs,decay=0.999,center=True,scale=False,epsilon=0.001,activation_fn=None,param_initializers=None,updates_collections=ops.GraphKeys.UPDATE_OPS,is_training=True,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,data_format=DATA_FORMAT_NHWC,zero_debias_moving_mean=False,scope=None)
tensorflow.contrib.layers.python.layers.layers._inner_flatten(inputs,new_rank,output_collections=None,scope=None)
tensorflow.contrib.layers.python.layers.layers._model_variable_getter(getter,name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,partitioner=None,rename=None,use_resource=None,**_)
tensorflow.contrib.layers.python.layers.layers._sparse_inner_flatten(inputs,new_rank)
tensorflow.contrib.layers.python.layers.layers.avg_pool2d(inputs,kernel_size,stride=2,padding='VALID',data_format=DATA_FORMAT_NHWC,outputs_collections=None,scope=None)
tensorflow.contrib.layers.python.layers.layers.batch_norm(inputs,decay=0.999,center=True,scale=False,epsilon=0.001,activation_fn=None,param_initializers=None,param_regularizers=None,updates_collections=ops.GraphKeys.UPDATE_OPS,is_training=True,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,batch_weights=None,fused=False,data_format=DATA_FORMAT_NHWC,zero_debias_moving_mean=False,scope=None)
tensorflow.contrib.layers.python.layers.layers.bias_add(inputs,activation_fn=None,initializer=init_ops.zeros_initializer(),regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,data_format=DATA_FORMAT_NHWC,scope=None)
tensorflow.contrib.layers.python.layers.layers.convolution(inputs,num_outputs,kernel_size,stride=1,padding='SAME',data_format=None,rate=1,activation_fn=nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=init_ops.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.python.layers.layers.convolution2d_in_plane(inputs,kernel_size,stride=1,padding='SAME',activation_fn=nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=init_ops.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.python.layers.layers.convolution2d_transpose(inputs,num_outputs,kernel_size,stride=1,padding='SAME',data_format=DATA_FORMAT_NHWC,activation_fn=nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=init_ops.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.python.layers.layers.dropout(inputs,keep_prob=0.5,noise_shape=None,is_training=True,outputs_collections=None,scope=None)
tensorflow.contrib.layers.python.layers.layers.flatten(inputs,outputs_collections=None,scope=None)
tensorflow.contrib.layers.python.layers.layers.fully_connected(inputs,num_outputs,activation_fn=nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=init_ops.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.python.layers.layers.layer_norm(inputs,center=True,scale=True,activation_fn=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.python.layers.layers.legacy_fully_connected(x,num_output_units,activation_fn=None,weight_init=initializers.xavier_initializer(),bias_init=init_ops.zeros_initializer(),name=None,weight_collections=(ops.GraphKeys.WEIGHTS,),bias_collections=(ops.GraphKeys.BIASES,),output_collections=(ops.GraphKeys.ACTIVATIONS,),trainable=True,weight_regularizer=None,bias_regularizer=None)
tensorflow.contrib.layers.python.layers.layers.max_pool2d(inputs,kernel_size,stride=2,padding='VALID',data_format=DATA_FORMAT_NHWC,outputs_collections=None,scope=None)
tensorflow.contrib.layers.python.layers.layers.one_hot_encoding(labels,num_classes,on_value=1.0,off_value=0.0,outputs_collections=None,scope=None)
tensorflow.contrib.layers.python.layers.layers.pool(inputs,kernel_size,pooling_type,padding='VALID',data_format=None,dilation_rate=1,stride=1,outputs_collections=None,scope=None)
tensorflow.contrib.layers.python.layers.layers.repeat(inputs,repetitions,layer,*args,**kwargs)
tensorflow.contrib.layers.python.layers.layers.separable_convolution2d(inputs,num_outputs,kernel_size,depth_multiplier,stride=1,padding='SAME',rate=1,activation_fn=nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=init_ops.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.python.layers.layers.softmax(logits,scope=None)
tensorflow.contrib.layers.python.layers.layers.stack(inputs,layer,stack_args,**kwargs)
tensorflow.contrib.layers.python.layers.layers.unit_norm(inputs,dim,epsilon=1e-07,scope=None)
tensorflow.contrib.layers.repeat(inputs,repetitions,layer,*args,**kwargs)
tensorflow.contrib.layers.separable_convolution2d(inputs,num_outputs,kernel_size,depth_multiplier,stride=1,padding='SAME',rate=1,activation_fn=nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=init_ops.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.softmax(logits,scope=None)
tensorflow.contrib.layers.stack(inputs,layer,stack_args,**kwargs)
tensorflow.contrib.layers.unit_norm(inputs,dim,epsilon=1e-07,scope=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/layers/optimizers.py----------------------------------------
A:tensorflow.contrib.layers.python.layers.optimizers.loss->tensorflow.python.ops.control_flow_ops.with_dependencies(list(update_ops), loss)
A:tensorflow.contrib.layers.python.layers.optimizers.global_step->tensorflow.contrib.framework.get_global_step()
A:tensorflow.contrib.layers.python.layers.optimizers.update_ops->set(ops.get_collection(ops.GraphKeys.UPDATE_OPS))
A:tensorflow.contrib.layers.python.layers.optimizers.lr->learning_rate_decay_fn(lr, global_step)
A:tensorflow.contrib.layers.python.layers.optimizers.opt->optimizer()
A:tensorflow.contrib.layers.python.layers.optimizers.variables->tensorflow.python.ops.variables.trainable_variables()
A:tensorflow.contrib.layers.python.layers.optimizers.gradients->clip_gradients(gradients)
A:tensorflow.contrib.layers.python.layers.optimizers.var_name->variable.name.replace(':', '_')
A:tensorflow.contrib.layers.python.layers.optimizers.grad_updates->optimizer().apply_gradients(gradients, global_step=global_step if increment_global_step else None, name='train')
A:tensorflow.contrib.layers.python.layers.optimizers.train_tensor->tensorflow.python.ops.control_flow_ops.with_dependencies([grad_updates], loss)
A:tensorflow.contrib.layers.python.layers.optimizers.(gradients, variables)->zip(*grads_and_vars)
A:tensorflow.contrib.layers.python.layers.optimizers.(clipped_gradients, _)->tensorflow.python.ops.clip_ops.clip_by_global_norm(gradients, clip_gradients)
A:tensorflow.contrib.layers.python.layers.optimizers.log_norm->tensorflow.python.ops.math_ops.log(norm + epsilon)
A:tensorflow.contrib.layers.python.layers.optimizers.moving_average_variable->tensorflow.python.ops.variable_scope.get_variable(name, shape=value.get_shape(), dtype=value.dtype, initializer=init_ops.zeros_initializer(), trainable=False)
A:tensorflow.contrib.layers.python.layers.optimizers.n->tensorflow.python.ops.math_ops.to_float(global_step)
A:tensorflow.contrib.layers.python.layers.optimizers.decay->tensorflow.python.ops.math_ops.minimum(decay, n / (n + 1.0))
A:tensorflow.contrib.layers.python.layers.optimizers.mean->moving_average('mean', log_norm, decay)
A:tensorflow.contrib.layers.python.layers.optimizers.sq_mean->moving_average('sq_mean', math_ops.square(log_norm), decay)
A:tensorflow.contrib.layers.python.layers.optimizers.std->tensorflow.python.ops.math_ops.sqrt(math_ops.maximum(epsilon, variance))
A:tensorflow.contrib.layers.python.layers.optimizers.max_norms->tensorflow.python.ops.math_ops.exp(mean + std_factor * std)
A:tensorflow.contrib.layers.python.layers.optimizers.(grads, variables)->zip(*grads_and_vars)
A:tensorflow.contrib.layers.python.layers.optimizers.norm->tensorflow.python.ops.clip_ops.global_norm(grads)
A:tensorflow.contrib.layers.python.layers.optimizers.(max_norm, log_mean)->_adaptive_max_norm(norm, std_factor, decay, global_step, epsilon, name)
A:tensorflow.contrib.layers.python.layers.optimizers.factor->tensorflow.python.ops.math_ops.minimum(static_max_norm / norm, factor)
A:tensorflow.contrib.layers.python.layers.optimizers.gradient_shape->gradient.get_shape()
A:tensorflow.contrib.layers.python.layers.optimizers.multiplier->tensorflow.python.framework.constant_op.constant(gradient_multipliers[key], dtype=dtypes.float32)
A:tensorflow.contrib.layers.python.layers.optimizers.grad->tensorflow.python.framework.ops.IndexedSlices(grad_values, grad.indices, grad.dense_shape)
tensorflow.contrib.layers._adaptive_max_norm(norm,std_factor,decay,global_step,epsilon,name)
tensorflow.contrib.layers._add_scaled_noise_to_gradients(grads_and_vars,gradient_noise_scale)
tensorflow.contrib.layers._clip_gradients_by_norm(grads_and_vars,clip_gradients)
tensorflow.contrib.layers._multiply_gradients(grads_and_vars,gradient_multipliers)
tensorflow.contrib.layers.adaptive_clipping_fn(std_factor=2.0,decay=0.95,static_max_norm=None,global_step=None,report_summary=False,epsilon=1e-08,name=None)
tensorflow.contrib.layers.optimize_loss(loss,global_step,learning_rate,optimizer,gradient_noise_scale=None,gradient_multipliers=None,clip_gradients=None,learning_rate_decay_fn=None,update_ops=None,variables=None,name=None,summaries=None,colocate_gradients_with_ops=False,increment_global_step=True)
tensorflow.contrib.layers.python.layers.optimizers._adaptive_max_norm(norm,std_factor,decay,global_step,epsilon,name)
tensorflow.contrib.layers.python.layers.optimizers._add_scaled_noise_to_gradients(grads_and_vars,gradient_noise_scale)
tensorflow.contrib.layers.python.layers.optimizers._clip_gradients_by_norm(grads_and_vars,clip_gradients)
tensorflow.contrib.layers.python.layers.optimizers._multiply_gradients(grads_and_vars,gradient_multipliers)
tensorflow.contrib.layers.python.layers.optimizers.adaptive_clipping_fn(std_factor=2.0,decay=0.95,static_max_norm=None,global_step=None,report_summary=False,epsilon=1e-08,name=None)
tensorflow.contrib.layers.python.layers.optimizers.optimize_loss(loss,global_step,learning_rate,optimizer,gradient_noise_scale=None,gradient_multipliers=None,clip_gradients=None,learning_rate_decay_fn=None,update_ops=None,variables=None,name=None,summaries=None,colocate_gradients_with_ops=False,increment_global_step=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/layers/utils.py----------------------------------------
A:tensorflow.contrib.layers.python.layers.utils.NamedOutputs->namedtuple('NamedOutputs', ['name', 'outputs'])
A:tensorflow.contrib.layers.python.layers.utils.value->int(value)
A:tensorflow.contrib.layers.python.layers.utils.pred_value->constant_value(pred)
A:tensorflow.contrib.layers.python.layers.utils.variable_collections->variables_collections.get(name, None)
A:tensorflow.contrib.layers.python.layers.utils.n->int(n)
A:tensorflow.contrib.layers.python.layers.utils.sequence_len->len(value)
A:tensorflow.contrib.layers.python.layers.utils.values->tuple((int(x) for x in value))
tensorflow.contrib.layers.python.layers.utils.append_tensor_alias(tensor,alias)
tensorflow.contrib.layers.python.layers.utils.collect_named_outputs(collections,alias,outputs)
tensorflow.contrib.layers.python.layers.utils.constant_value(value_or_tensor_or_var,dtype=None)
tensorflow.contrib.layers.python.layers.utils.convert_collection_to_dict(collection)
tensorflow.contrib.layers.python.layers.utils.first_dimension(shape,min_rank=1)
tensorflow.contrib.layers.python.layers.utils.gather_tensors_aliases(tensors)
tensorflow.contrib.layers.python.layers.utils.get_tensor_aliases(tensor)
tensorflow.contrib.layers.python.layers.utils.get_variable_collections(variables_collections,name)
tensorflow.contrib.layers.python.layers.utils.last_dimension(shape,min_rank=1)
tensorflow.contrib.layers.python.layers.utils.n_positive_integers(n,value)
tensorflow.contrib.layers.python.layers.utils.smart_cond(pred,fn1,fn2,name=None)
tensorflow.contrib.layers.python.layers.utils.static_cond(pred,fn1,fn2)
tensorflow.contrib.layers.python.layers.utils.two_element_tuple(int_or_tuple)
tensorflow.contrib.layers.utils.append_tensor_alias(tensor,alias)
tensorflow.contrib.layers.utils.collect_named_outputs(collections,alias,outputs)
tensorflow.contrib.layers.utils.constant_value(value_or_tensor_or_var,dtype=None)
tensorflow.contrib.layers.utils.convert_collection_to_dict(collection)
tensorflow.contrib.layers.utils.first_dimension(shape,min_rank=1)
tensorflow.contrib.layers.utils.gather_tensors_aliases(tensors)
tensorflow.contrib.layers.utils.get_tensor_aliases(tensor)
tensorflow.contrib.layers.utils.get_variable_collections(variables_collections,name)
tensorflow.contrib.layers.utils.last_dimension(shape,min_rank=1)
tensorflow.contrib.layers.utils.n_positive_integers(n,value)
tensorflow.contrib.layers.utils.smart_cond(pred,fn1,fn2,name=None)
tensorflow.contrib.layers.utils.static_cond(pred,fn1,fn2)
tensorflow.contrib.layers.utils.two_element_tuple(int_or_tuple)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/layers/summaries.py----------------------------------------
A:tensorflow.contrib.layers.python.layers.summaries.summarize_variables->functools.partial(summarize_collection, ops.GraphKeys.GLOBAL_VARIABLES)
A:tensorflow.contrib.layers.python.layers.summaries.summarize_weights->functools.partial(summarize_collection, ops.GraphKeys.WEIGHTS)
A:tensorflow.contrib.layers.python.layers.summaries.summarize_biases->functools.partial(summarize_collection, ops.GraphKeys.BIASES)
tensorflow.contrib.layers._add_histogram_summary(tensor,tag=None)
tensorflow.contrib.layers._add_scalar_summary(tensor,tag=None)
tensorflow.contrib.layers.python.layers.summaries._add_histogram_summary(tensor,tag=None)
tensorflow.contrib.layers.python.layers.summaries._add_scalar_summary(tensor,tag=None)
tensorflow.contrib.layers.python.layers.summaries.summarize_activation(op)
tensorflow.contrib.layers.python.layers.summaries.summarize_activations(name_filter=None,summarizer=summarize_activation)
tensorflow.contrib.layers.python.layers.summaries.summarize_collection(collection,name_filter=None,summarizer=summarize_tensor)
tensorflow.contrib.layers.python.layers.summaries.summarize_tensor(tensor,tag=None)
tensorflow.contrib.layers.python.layers.summaries.summarize_tensors(tensors,summarizer=summarize_tensor)
tensorflow.contrib.layers.summarize_activation(op)
tensorflow.contrib.layers.summarize_activations(name_filter=None,summarizer=summarize_activation)
tensorflow.contrib.layers.summarize_collection(collection,name_filter=None,summarizer=summarize_tensor)
tensorflow.contrib.layers.summarize_tensor(tensor,tag=None)
tensorflow.contrib.layers.summarize_tensors(tensors,summarizer=summarize_tensor)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/layers/feature_column_ops.py----------------------------------------
A:tensorflow.contrib.layers.python.layers.feature_column_ops.input_tensor->tensorflow.contrib.layers.python.layers.layers._inner_flatten(args.input_tensor, output_rank)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.weight_tensor->tensorflow.contrib.layers.python.layers.layers._inner_flatten(args.weight_tensor, output_rank)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.embeddings->embeddings._get_variable_list()._get_variable_list()
A:tensorflow.contrib.layers.python.layers.feature_column_ops.graph->tensorflow.python.framework.ops.get_default_graph()
A:tensorflow.contrib.layers.python.layers.feature_column_ops.shared_embedding_collection->tensorflow.python.framework.ops.get_default_graph().get_collection_ref(shared_embedding_collection_name)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.transformer->_Transformer(columns_to_tensor)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.weight_collections->list(set(list(weight_collections) + [ops.GraphKeys.GLOBAL_VARIABLES]))
A:tensorflow.contrib.layers.python.layers.feature_column_ops.transformed_tensor->_Transformer(columns_to_tensor).transform(column)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.arguments->column._deep_embedding_lookup_arguments(transformed_tensor)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.variable->variable._get_variable_list()._get_variable_list()
A:tensorflow.contrib.layers.python.layers.feature_column_ops.predictions->tensorflow.python.ops.nn_ops.bias_add(predictions_no_bias, bias)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.sparse_tensor->tensorflow.python.ops.sparse_ops.sparse_concat(1, sparse_tensors)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.(variable, predictions_no_bias)->_create_joint_embedding_lookup(columns_to_tensors, embedding_lookup_arguments, num_outputs, trainable, weight_collections)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.bias->tensorflow.contrib.framework.python.ops.variables.model_variable('bias_weight', shape=[num_outputs], initializer=init_ops.zeros_initializer(), trainable=trainable, collections=_add_variable_collection(weight_collections))
A:tensorflow.contrib.layers.python.layers.feature_column_ops.column_to_variable->dict()
A:tensorflow.contrib.layers.python.layers.feature_column_ops.embedding_lookup_arguments->column._wide_embedding_lookup_arguments(transformed_tensor)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.(variable, predictions)->_create_embedding_lookup(column, columns_to_tensors, embedding_lookup_arguments, num_outputs, trainable, weight_collections)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.tensor->tensorflow.contrib.layers.python.layers.feature_column._reshape_real_valued_tensor(tensor, 2, column.name)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.predictions_no_bias->tensorflow.python.ops.math_ops.add_n(output_tensors)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.columns_to_tensors->tensorflow.python.ops.parsing_ops.parse_example(serialized=serialized, features=fc.create_feature_spec_for_parsing(feature_columns), name=name, example_names=example_names)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.columns_to_tensor->features.copy()
A:tensorflow.contrib.layers.python.layers.feature_column_ops.keys->list(columns_to_tensor.keys())
A:tensorflow.contrib.layers.python.layers.feature_column_ops.serialized->tensorflow.python.ops.array_ops.reshape(serialized, [])
A:tensorflow.contrib.layers.python.layers.feature_column_ops.context_feature_spec->tensorflow.contrib.layers.python.layers.feature_column.create_feature_spec_for_parsing(context_feature_columns)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.sequence_feature_spec->tensorflow.contrib.layers.python.layers.feature_column._create_sequence_feature_spec_for_parsing(sequence_feature_columns, allow_missing_by_default=False)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.shape->tensorflow.contrib.layers.python.layers.feature_column._reshape_real_valued_tensor(tensor, 2, column.name).get_shape().as_list()
A:tensorflow.contrib.layers.python.layers.feature_column_ops.seen_keys->set()
A:tensorflow.contrib.layers.python.layers.feature_column_ops.gathered->list(feature_columns)
A:tensorflow.contrib.layers.python.layers.feature_column_ops.all_feature_columns->_gather_feature_columns(feature_columns)
tensorflow.contrib.layers._Transformer(self,columns_to_tensors)
tensorflow.contrib.layers._Transformer.transform(self,feature_column)
tensorflow.contrib.layers._add_variable_collection(weight_collections)
tensorflow.contrib.layers._check_forbidden_sequence_columns(feature_columns)
tensorflow.contrib.layers._check_supported_sequence_columns(feature_columns)
tensorflow.contrib.layers._create_embedding_lookup(column,columns_to_tensors,embedding_lookup_arguments,num_outputs,trainable,weight_collections)
tensorflow.contrib.layers._create_joint_embedding_lookup(columns_to_tensors,embedding_lookup_arguments,num_outputs,trainable,weight_collections)
tensorflow.contrib.layers._embeddings_from_arguments(column,args,weight_collections,trainable,output_rank=2)
tensorflow.contrib.layers._gather_feature_columns(feature_columns)
tensorflow.contrib.layers._get_parent_columns(feature_column)
tensorflow.contrib.layers._infer_real_valued_column_for_tensor(name,tensor)
tensorflow.contrib.layers._input_from_feature_columns(columns_to_tensors,feature_columns,weight_collections,trainable,scope,output_rank,default_name)
tensorflow.contrib.layers._log_variable(variable)
tensorflow.contrib.layers._maybe_restore_from_checkpoint(checkpoint_path,variable)
tensorflow.contrib.layers.check_feature_columns(feature_columns)
tensorflow.contrib.layers.infer_real_valued_columns(features)
tensorflow.contrib.layers.input_from_feature_columns(columns_to_tensors,feature_columns,weight_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.joint_weighted_sum_from_feature_columns(columns_to_tensors,feature_columns,num_outputs,weight_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.parse_feature_columns_from_examples(serialized,feature_columns,name=None,example_names=None)
tensorflow.contrib.layers.parse_feature_columns_from_sequence_examples(serialized,context_feature_columns,sequence_feature_columns,name=None,example_name=None)
tensorflow.contrib.layers.python.layers.feature_column_ops._Transformer(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column_ops._Transformer.__init__(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column_ops._Transformer.transform(self,feature_column)
tensorflow.contrib.layers.python.layers.feature_column_ops._add_variable_collection(weight_collections)
tensorflow.contrib.layers.python.layers.feature_column_ops._check_forbidden_sequence_columns(feature_columns)
tensorflow.contrib.layers.python.layers.feature_column_ops._check_supported_sequence_columns(feature_columns)
tensorflow.contrib.layers.python.layers.feature_column_ops._create_embedding_lookup(column,columns_to_tensors,embedding_lookup_arguments,num_outputs,trainable,weight_collections)
tensorflow.contrib.layers.python.layers.feature_column_ops._create_joint_embedding_lookup(columns_to_tensors,embedding_lookup_arguments,num_outputs,trainable,weight_collections)
tensorflow.contrib.layers.python.layers.feature_column_ops._embeddings_from_arguments(column,args,weight_collections,trainable,output_rank=2)
tensorflow.contrib.layers.python.layers.feature_column_ops._gather_feature_columns(feature_columns)
tensorflow.contrib.layers.python.layers.feature_column_ops._get_parent_columns(feature_column)
tensorflow.contrib.layers.python.layers.feature_column_ops._infer_real_valued_column_for_tensor(name,tensor)
tensorflow.contrib.layers.python.layers.feature_column_ops._input_from_feature_columns(columns_to_tensors,feature_columns,weight_collections,trainable,scope,output_rank,default_name)
tensorflow.contrib.layers.python.layers.feature_column_ops._log_variable(variable)
tensorflow.contrib.layers.python.layers.feature_column_ops._maybe_restore_from_checkpoint(checkpoint_path,variable)
tensorflow.contrib.layers.python.layers.feature_column_ops.check_feature_columns(feature_columns)
tensorflow.contrib.layers.python.layers.feature_column_ops.infer_real_valued_columns(features)
tensorflow.contrib.layers.python.layers.feature_column_ops.input_from_feature_columns(columns_to_tensors,feature_columns,weight_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.python.layers.feature_column_ops.joint_weighted_sum_from_feature_columns(columns_to_tensors,feature_columns,num_outputs,weight_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.python.layers.feature_column_ops.parse_feature_columns_from_examples(serialized,feature_columns,name=None,example_names=None)
tensorflow.contrib.layers.python.layers.feature_column_ops.parse_feature_columns_from_sequence_examples(serialized,context_feature_columns,sequence_feature_columns,name=None,example_name=None)
tensorflow.contrib.layers.python.layers.feature_column_ops.sequence_input_from_feature_columns(columns_to_tensors,feature_columns,weight_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.python.layers.feature_column_ops.transform_features(features,feature_columns)
tensorflow.contrib.layers.python.layers.feature_column_ops.weighted_sum_from_feature_columns(columns_to_tensors,feature_columns,num_outputs,weight_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.sequence_input_from_feature_columns(columns_to_tensors,feature_columns,weight_collections=None,trainable=True,scope=None)
tensorflow.contrib.layers.transform_features(features,feature_columns)
tensorflow.contrib.layers.weighted_sum_from_feature_columns(columns_to_tensors,feature_columns,num_outputs,weight_collections=None,trainable=True,scope=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/layers/regularizers.py----------------------------------------
A:tensorflow.contrib.layers.python.layers.regularizers.my_scale->tensorflow.python.framework.ops.convert_to_tensor(scale, dtype=weights.dtype.base_dtype, name='scale')
A:tensorflow.contrib.layers.python.layers.regularizers.weights_list->tensorflow.python.framework.ops.get_collection(ops.GraphKeys.WEIGHTS)
A:tensorflow.contrib.layers.python.layers.regularizers.summed_penalty->tensorflow.python.ops.math_ops.add_n(penalties, name=scope)
tensorflow.contrib.layers.apply_regularization(regularizer,weights_list=None)
tensorflow.contrib.layers.l1_l2_regularizer(scale_l1=1.0,scale_l2=1.0,scope=None)
tensorflow.contrib.layers.l1_regularizer(scale,scope=None)
tensorflow.contrib.layers.l2_regularizer(scale,scope=None)
tensorflow.contrib.layers.python.layers.regularizers.apply_regularization(regularizer,weights_list=None)
tensorflow.contrib.layers.python.layers.regularizers.l1_l2_regularizer(scale_l1=1.0,scale_l2=1.0,scope=None)
tensorflow.contrib.layers.python.layers.regularizers.l1_regularizer(scale,scope=None)
tensorflow.contrib.layers.python.layers.regularizers.l2_regularizer(scale,scope=None)
tensorflow.contrib.layers.python.layers.regularizers.sum_regularizer(regularizer_list,scope=None)
tensorflow.contrib.layers.sum_regularizer(regularizer_list,scope=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/layers/embedding_ops.py----------------------------------------
A:tensorflow.contrib.layers.python.layers.embedding_ops.embedding_weights->list(embedding_weights)
A:tensorflow.contrib.layers.python.layers.embedding_ops.sparse_ids->tensorflow.python.ops.sparse_ops.sparse_retain(sparse_ids, is_id_valid)
A:tensorflow.contrib.layers.python.layers.embedding_ops.sparse_weights->tensorflow.python.ops.sparse_ops.sparse_retain(sparse_weights, is_id_valid)
A:tensorflow.contrib.layers.python.layers.embedding_ops.(sparse_ids, sparse_weights)->_prune_invalid_ids(sparse_ids, sparse_weights)
A:tensorflow.contrib.layers.python.layers.embedding_ops.(sparse_ids, is_row_empty)->tensorflow.python.ops.sparse_ops.sparse_fill_empty_rows(sparse_ids, default_id or 0)
A:tensorflow.contrib.layers.python.layers.embedding_ops.(sparse_weights, _)->tensorflow.python.ops.sparse_ops.sparse_fill_empty_rows(sparse_weights, 1.0)
A:tensorflow.contrib.layers.python.layers.embedding_ops.result->tensorflow.python.ops.embedding_ops.embedding_lookup(params, ids, partition_strategy='div', validate_indices=False)
A:tensorflow.contrib.layers.python.layers.embedding_ops.is_row_empty->tensorflow.python.ops.array_ops.tile(array_ops.reshape(is_row_empty, [-1, 1]), array_ops.stack([1, array_ops.shape(result)[1]]))
A:tensorflow.contrib.layers.python.layers.embedding_ops.final_result->tensorflow.python.ops.array_ops.reshape(result, array_ops.concat([array_ops.slice(math_ops.cast(original_shape, dtypes.int32), [0], [original_rank - 1]), array_ops.slice(array_ops.shape(result), [1], [-1])], 0))
A:tensorflow.contrib.layers.python.layers.embedding_ops.is_id_valid->tensorflow.python.ops.math_ops.logical_and(is_id_valid, math_ops.greater(sparse_weights.values, 0))
A:tensorflow.contrib.layers.python.layers.embedding_ops.params->list(params)
A:tensorflow.contrib.layers.python.layers.embedding_ops.values_shape->tensorflow.python.ops.array_ops.shape(values)
A:tensorflow.contrib.layers.python.layers.embedding_ops.values->tensorflow.python.ops.array_ops.reshape(values, [-1, 1])
A:tensorflow.contrib.layers.python.layers.embedding_ops.sampled_candidates->tensorflow.python.ops.array_ops.gather(sampled_candidates, segment_ids)
A:tensorflow.contrib.layers.python.layers.embedding_ops.sampled_candidates_shape->tensorflow.python.ops.array_ops.shape(sampled_candidates)
A:tensorflow.contrib.layers.python.layers.embedding_ops.dimension_tensor->tensorflow.python.ops.array_ops.reshape(dimension, shape=[1])
A:tensorflow.contrib.layers.python.layers.embedding_ops.expected_shape->tensorflow.python.ops.array_ops.concat([values_shape, dimension_tensor], 0)
A:tensorflow.contrib.layers.python.layers.embedding_ops.num_partitions->len(params)
A:tensorflow.contrib.layers.python.layers.embedding_ops.shape->tensorflow.python.ops.array_ops.shape(ids)
A:tensorflow.contrib.layers.python.layers.embedding_ops.num_params->sum(partition_sizes)
A:tensorflow.contrib.layers.python.layers.embedding_ops.ids->tensorflow.python.framework.ops.convert_to_tensor(ids)
A:tensorflow.contrib.layers.python.layers.embedding_ops.(sparse_values, _)->tensorflow.python.ops.sparse_ops.sparse_fill_empty_rows(sparse_values, default_value)
A:tensorflow.contrib.layers.python.layers.embedding_ops.segment_ids->tensorflow.python.ops.math_ops.cast(segment_ids, dtypes.int32)
A:tensorflow.contrib.layers.python.layers.embedding_ops.(values, idx)->tensorflow.python.ops.array_ops.unique(values)
A:tensorflow.contrib.layers.python.layers.embedding_ops.embeddings->tensorflow.python.ops.math_ops.multiply(signs, embeddings, name='signs_hash')
A:tensorflow.contrib.layers.python.layers.embedding_ops.ids_flat->tensorflow.python.ops.array_ops.reshape(ids, math_ops.reduce_prod(shape, keep_dims=True))
A:tensorflow.contrib.layers.python.layers.embedding_ops.(unique_ids, idx)->tensorflow.python.ops.array_ops.unique(ids_flat)
A:tensorflow.contrib.layers.python.layers.embedding_ops.unique_embeddings->tensorflow.python.ops.embedding_ops.embedding_lookup(params, unique_ids)
A:tensorflow.contrib.layers.python.layers.embedding_ops.embeds_flat->tensorflow.python.ops.array_ops.gather(unique_embeddings, idx)
A:tensorflow.contrib.layers.python.layers.embedding_ops.embed_shape->tensorflow.python.ops.array_ops.concat([shape, array_ops.shape(unique_embeddings)[1:]], 0)
A:tensorflow.contrib.layers.python.layers.embedding_ops.embeds->tensorflow.python.ops.array_ops.reshape(embeds_flat, embed_shape)
A:tensorflow.contrib.layers.python.layers.embedding_ops.signs->_sampled_scattered_embedding_lookup(array_ops.constant([-1.0, 1.0]), sp_values.values, dimension=dimension, sampled_candidates=sampled_candidates, hash_key=hash_key, name='signs_lookup')
tensorflow.contrib.layers._prune_invalid_ids(sparse_ids,sparse_weights)
tensorflow.contrib.layers._sampled_scattered_embedding_lookup(params,values,dimension=None,sampled_candidates=None,hash_key=None,name=None)
tensorflow.contrib.layers._sampled_scattered_embedding_lookup_sparse(params,sp_values,dimension=None,sampled_candidates=None,hash_key=None,with_sign_hash=False,name=None)
tensorflow.contrib.layers.embedding_lookup_unique(params,ids,name=None)
tensorflow.contrib.layers.python.layers.embedding_ops._prune_invalid_ids(sparse_ids,sparse_weights)
tensorflow.contrib.layers.python.layers.embedding_ops._sampled_scattered_embedding_lookup(params,values,dimension=None,sampled_candidates=None,hash_key=None,name=None)
tensorflow.contrib.layers.python.layers.embedding_ops._sampled_scattered_embedding_lookup_sparse(params,sp_values,dimension=None,sampled_candidates=None,hash_key=None,with_sign_hash=False,name=None)
tensorflow.contrib.layers.python.layers.embedding_ops.embedding_lookup_unique(params,ids,name=None)
tensorflow.contrib.layers.python.layers.embedding_ops.safe_embedding_lookup_sparse(embedding_weights,sparse_ids,sparse_weights=None,combiner=None,default_id=None,name=None,partition_strategy='div',max_norm=None)
tensorflow.contrib.layers.python.layers.embedding_ops.scattered_embedding_lookup(params,values,dimension,name=None,hash_key=None)
tensorflow.contrib.layers.python.layers.embedding_ops.scattered_embedding_lookup_sparse(params,sparse_values,dimension,combiner=None,default_value=None,name=None,hash_key=None)
tensorflow.contrib.layers.safe_embedding_lookup_sparse(embedding_weights,sparse_ids,sparse_weights=None,combiner=None,default_id=None,name=None,partition_strategy='div',max_norm=None)
tensorflow.contrib.layers.scattered_embedding_lookup(params,values,dimension,name=None,hash_key=None)
tensorflow.contrib.layers.scattered_embedding_lookup_sparse(params,sparse_values,dimension,combiner=None,default_value=None,name=None,hash_key=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/layers/initializers.py----------------------------------------
A:tensorflow.contrib.layers.python.layers.initializers.fan_out->float(shape[-1])
A:tensorflow.contrib.layers.python.layers.initializers.limit->math.sqrt(3.0 * factor / n)
A:tensorflow.contrib.layers.python.layers.initializers.trunc_stddev->math.sqrt(1.3 * factor / n)
tensorflow.contrib.layers.python.layers.initializers.variance_scaling_initializer(factor=2.0,mode='FAN_IN',uniform=False,seed=None,dtype=dtypes.float32)
tensorflow.contrib.layers.python.layers.initializers.xavier_initializer(uniform=True,seed=None,dtype=dtypes.float32)
tensorflow.contrib.layers.variance_scaling_initializer(factor=2.0,mode='FAN_IN',uniform=False,seed=None,dtype=dtypes.float32)
tensorflow.contrib.layers.xavier_initializer(uniform=True,seed=None,dtype=dtypes.float32)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/layers/encoders.py----------------------------------------
A:tensorflow.contrib.layers.python.layers.encoders.embeddings->tensorflow.contrib.framework.python.ops.variables.model_variable('embeddings', shape=shape, initializer=initializer, regularizer=regularizer, trainable=trainable)
A:tensorflow.contrib.layers.python.layers.encoders.sparse_ids->tensorflow.contrib.layers.python.ops.sparse_ops.dense_to_sparse_tensor(ids)
tensorflow.contrib.layers.bow_encoder(ids,vocab_size,embed_dim,sparse_lookup=True,initializer=None,regularizer=None,trainable=True,scope=None,reuse=None)
tensorflow.contrib.layers.embed_sequence(ids,vocab_size=None,embed_dim=None,unique=False,initializer=None,regularizer=None,trainable=True,scope=None,reuse=None)
tensorflow.contrib.layers.python.layers.encoders.bow_encoder(ids,vocab_size,embed_dim,sparse_lookup=True,initializer=None,regularizer=None,trainable=True,scope=None,reuse=None)
tensorflow.contrib.layers.python.layers.encoders.embed_sequence(ids,vocab_size=None,embed_dim=None,unique=False,initializer=None,regularizer=None,trainable=True,scope=None,reuse=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/python/layers/feature_column.py----------------------------------------
A:tensorflow.contrib.layers.python.layers.feature_column.input_tensor->tensorflow.python.ops.math_ops.to_float(input_tensor)
A:tensorflow.contrib.layers.python.layers.feature_column.sparse_id_values->tensorflow.python.framework.sparse_tensor.SparseTensor(indices, bucket_indices, shape)
A:tensorflow.contrib.layers.python.layers.feature_column.columns_to_tensors[self]->self.series.build(columns_to_tensors)
A:tensorflow.contrib.layers.python.layers.feature_column.sparse_values->tensorflow.python.ops.string_ops.as_string(input_tensor.values)
A:tensorflow.contrib.layers.python.layers.feature_column.table->tensorflow.contrib.lookup.string_to_index_table_from_file(vocabulary_file=self.lookup_config.vocabulary_file, num_oov_buckets=self.lookup_config.num_oov_buckets, vocab_size=self.lookup_config.vocab_size, default_value=self.lookup_config.default_value, name=self.name + '_lookup')
A:tensorflow.contrib.layers.python.layers.feature_column.keys->tuple(keys)
A:tensorflow.contrib.layers.python.layers.feature_column.st->self._get_input_sparse_tensor(columns_to_tensors)
A:tensorflow.contrib.layers.python.layers.feature_column.sparse_string_values->tensorflow.python.ops.string_ops.as_string(st.values)
A:tensorflow.contrib.layers.python.layers.feature_column.sparse_string_tensor->tensorflow.python.framework.sparse_tensor.SparseTensor(st.indices, sparse_string_values, st.dense_shape)
A:tensorflow.contrib.layers.python.layers.feature_column.config->_get_feature_config(self.sparse_id_column)
A:tensorflow.contrib.layers.python.layers.feature_column.weight_tensor->self.sparse_id_column.weight_tensor(transformed_input_tensor)
A:tensorflow.contrib.layers.python.layers.feature_column.sparse_id_column->tensorflow.contrib.layers.python.layers.layers._inner_flatten(sparse_id_column, output_rank)
A:tensorflow.contrib.layers.python.layers.feature_column.weighted_column->tensorflow.python.ops.sparse_ops.sparse_merge(sp_ids=sparse_id_column, sp_values=weight_tensor, vocab_size=self.length)
A:tensorflow.contrib.layers.python.layers.feature_column.dense_id_tensor->tensorflow.python.ops.sparse_ops.sparse_tensor_to_dense(sparse_id_column, default_value=-1)
A:tensorflow.contrib.layers.python.layers.feature_column.one_hot_id_tensor->tensorflow.python.ops.array_ops.one_hot(dense_id_tensor, depth=self.length, on_value=1.0, off_value=0.0)
A:tensorflow.contrib.layers.python.layers.feature_column.initializer->tensorflow.python.ops.init_ops.truncated_normal_initializer(mean=0.0, stddev=stddev)
A:tensorflow.contrib.layers.python.layers.feature_column.sorted_columns->sorted([column for column in columns], key=lambda column: column.name)
A:tensorflow.contrib.layers.python.layers.feature_column.shared_embedding_name->'_'.join([column.name for column in sorted_columns[0:3]])
A:tensorflow.contrib.layers.python.layers.feature_column.error_string->'Rank of input Tensor ({}) should be the same as output_rank ({}). For example, sequence data should typically be 3 dimensional (rank 3) while non-sequence data is typically 2 dimensional (rank 2).'.format(input_rank, output_rank)
A:tensorflow.contrib.layers.python.layers.feature_column.default_value->float(default_value)
A:tensorflow.contrib.layers.python.layers.feature_column.i1->tensorflow.python.ops.math_ops.range(0, batch_size)
A:tensorflow.contrib.layers.python.layers.feature_column.i2->tensorflow.python.ops.array_ops.zeros([batch_size], dtype=dtypes.int32, name='zeros')
A:tensorflow.contrib.layers.python.layers.feature_column.bucket_indices->tensorflow.python.ops.array_ops.reshape(input_tensor, [-1], name='reshape')
A:tensorflow.contrib.layers.python.layers.feature_column.indices->tensorflow.python.ops.math_ops.to_int64(array_ops.transpose(array_ops.stack((i1, i2))))
A:tensorflow.contrib.layers.python.layers.feature_column.shape->tensorflow.python.ops.math_ops.to_int64(array_ops.stack([batch_size, dimension]))
A:tensorflow.contrib.layers.python.layers.feature_column.sorted_names->sorted([column.name for column in self.columns])
A:tensorflow.contrib.layers.python.layers.feature_column.feature_columns->feature_columns.values().values()
A:tensorflow.contrib.layers.python.layers.feature_column.feature_spec->create_feature_spec_for_parsing(sequence_feature_columns)
A:tensorflow.contrib.layers.python.layers.feature_column.sequence_feature->tensorflow.python.ops.parsing_ops.FixedLenSequenceFeature(shape=feature.shape, dtype=feature.dtype, allow_missing=allow_missing_by_default or default_is_set)
A:tensorflow.contrib.layers.python.layers.feature_column.dict_for_parse_example->create_feature_spec_for_parsing(feature_columns)
A:tensorflow.contrib.layers.python.layers.feature_column.placeholders[column_name]->tensorflow.python.ops.array_ops.placeholder(column_type.dtype, shape=(None, column_type.shape[0]), name='Placeholder_{}'.format(column_name))
tensorflow.contrib.layers.DataFrameColumn(cls,column_name,series)
tensorflow.contrib.layers.DataFrameColumn.__eq__(self,other)
tensorflow.contrib.layers.DataFrameColumn.__ne__(self,other)
tensorflow.contrib.layers.DataFrameColumn._to_dense_tensor(self,input_tensor)
tensorflow.contrib.layers.DataFrameColumn._to_dnn_input_layer(self,input_tensor,weight_collections=None,trainable=True,output_rank=2)
tensorflow.contrib.layers.DataFrameColumn.config(self)
tensorflow.contrib.layers.DataFrameColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers.DataFrameColumn.key(self)
tensorflow.contrib.layers.DataFrameColumn.name(self)
tensorflow.contrib.layers._BucketizedColumn(cls,source_column,boundaries)
tensorflow.contrib.layers._BucketizedColumn._to_dnn_input_layer(self,input_tensor,weight_collections=None,trainable=True,output_rank=2)
tensorflow.contrib.layers._BucketizedColumn._wide_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers._BucketizedColumn.config(self)
tensorflow.contrib.layers._BucketizedColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers._BucketizedColumn.key(self)
tensorflow.contrib.layers._BucketizedColumn.length(self)
tensorflow.contrib.layers._BucketizedColumn.name(self)
tensorflow.contrib.layers._BucketizedColumn.to_sparse_tensor(self,input_tensor)
tensorflow.contrib.layers._CrossedColumn(cls,columns,hash_bucket_size,hash_key,combiner='sum',ckpt_to_load_from=None,tensor_name_in_ckpt=None)
tensorflow.contrib.layers._CrossedColumn._assert_is_crossable(column)
tensorflow.contrib.layers._CrossedColumn._checkpoint_path(self)
tensorflow.contrib.layers._CrossedColumn._to_dnn_input_layer(self,input_tensor,weight_collections=None,trainable=True,output_rank=2)
tensorflow.contrib.layers._CrossedColumn._wide_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers._CrossedColumn.config(self)
tensorflow.contrib.layers._CrossedColumn.id_tensor(self,input_tensor)
tensorflow.contrib.layers._CrossedColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers._CrossedColumn.key(self)
tensorflow.contrib.layers._CrossedColumn.length(self)
tensorflow.contrib.layers._CrossedColumn.name(self)
tensorflow.contrib.layers._CrossedColumn.weight_tensor(self,input_tensor)
tensorflow.contrib.layers._DeepEmbeddingLookupArguments(collections.namedtuple('_DeepEmbeddingLookupArguments',['input_tensor','weight_tensor','vocab_size','initializer','combiner','dimension','shared_embedding_name','hash_key','max_norm','trainable']))
tensorflow.contrib.layers._EmbeddingColumn(cls,sparse_id_column,dimension,combiner='mean',initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,shared_embedding_name=None,shared_vocab_size=None,max_norm=None,trainable=True)
tensorflow.contrib.layers._EmbeddingColumn._checkpoint_path(self)
tensorflow.contrib.layers._EmbeddingColumn._deep_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers._EmbeddingColumn._wide_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers._EmbeddingColumn.config(self)
tensorflow.contrib.layers._EmbeddingColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers._EmbeddingColumn.key(self)
tensorflow.contrib.layers._EmbeddingColumn.length(self)
tensorflow.contrib.layers._EmbeddingColumn.name(self)
tensorflow.contrib.layers._FeatureColumn(object)
tensorflow.contrib.layers._FeatureColumn._checkpoint_path(self)
tensorflow.contrib.layers._FeatureColumn._deep_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers._FeatureColumn._key_without_properties(self,properties)
tensorflow.contrib.layers._FeatureColumn._to_dense_tensor(self,input_tensor)
tensorflow.contrib.layers._FeatureColumn._to_dnn_input_layer(self,input_tensor,weight_collection=None,trainable=True,output_rank=2)
tensorflow.contrib.layers._FeatureColumn._wide_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers._FeatureColumn.config(self)
tensorflow.contrib.layers._FeatureColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers._FeatureColumn.key(self)
tensorflow.contrib.layers._FeatureColumn.name(self)
tensorflow.contrib.layers._LinearEmbeddingLookupArguments(collections.namedtuple('_LinearEmbeddingLookupArguments',['input_tensor','weight_tensor','vocab_size','initializer','combiner']))
tensorflow.contrib.layers._OneHotColumn(_FeatureColumn,collections.namedtuple('_OneHotColumn',['sparse_id_column']))
tensorflow.contrib.layers._OneHotColumn._to_dnn_input_layer(self,transformed_input_tensor,unused_weight_collections=None,unused_trainable=False,output_rank=2)
tensorflow.contrib.layers._OneHotColumn.config(self)
tensorflow.contrib.layers._OneHotColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers._OneHotColumn.key(self)
tensorflow.contrib.layers._OneHotColumn.length(self)
tensorflow.contrib.layers._OneHotColumn.name(self)
tensorflow.contrib.layers._RealValuedColumn(cls,column_name,dimension,default_value,dtype,normalizer)
tensorflow.contrib.layers._RealValuedColumn._normalized_input_tensor(self,input_tensor)
tensorflow.contrib.layers._RealValuedColumn._to_dense_tensor(self,input_tensor)
tensorflow.contrib.layers._RealValuedColumn._to_dnn_input_layer(self,input_tensor,weight_collections=None,trainable=True,output_rank=2)
tensorflow.contrib.layers._RealValuedColumn.config(self)
tensorflow.contrib.layers._RealValuedColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers._RealValuedColumn.key(self)
tensorflow.contrib.layers._RealValuedColumn.name(self)
tensorflow.contrib.layers._RealValuedColumn.normalizer_fn(self)
tensorflow.contrib.layers._ScatteredEmbeddingColumn(cls,column_name,size,dimension,hash_key,combiner='sqrtn',initializer=None)
tensorflow.contrib.layers._ScatteredEmbeddingColumn._deep_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers._ScatteredEmbeddingColumn.config(self)
tensorflow.contrib.layers._ScatteredEmbeddingColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers._ScatteredEmbeddingColumn.name(self)
tensorflow.contrib.layers._SparseColumn(cls,column_name,is_integerized=False,bucket_size=None,lookup_config=None,combiner='sum',dtype=dtypes.string)
tensorflow.contrib.layers._SparseColumn._get_input_sparse_tensor(self,columns_to_tensors)
tensorflow.contrib.layers._SparseColumn._to_dnn_input_layer(self,input_tensor,weight_collections=None,trainable=True,output_rank=2)
tensorflow.contrib.layers._SparseColumn._wide_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers._SparseColumn.config(self)
tensorflow.contrib.layers._SparseColumn.id_tensor(self,input_tensor)
tensorflow.contrib.layers._SparseColumn.is_compatible(self,other_column)
tensorflow.contrib.layers._SparseColumn.key(self)
tensorflow.contrib.layers._SparseColumn.length(self)
tensorflow.contrib.layers._SparseColumn.name(self)
tensorflow.contrib.layers._SparseColumn.weight_tensor(self,input_tensor)
tensorflow.contrib.layers._SparseColumnHashed(_SparseColumn)
tensorflow.contrib.layers._SparseColumnHashed.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers._SparseColumnIntegerized(_SparseColumn)
tensorflow.contrib.layers._SparseColumnIntegerized.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers._SparseColumnKeys(_SparseColumn)
tensorflow.contrib.layers._SparseColumnKeys.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers._SparseColumnVocabulary(_SparseColumn)
tensorflow.contrib.layers._SparseColumnVocabulary.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers._SparseIdLookupConfig(cls,vocabulary_file=None,keys=None,num_oov_buckets=0,vocab_size=None,default_value=-1)
tensorflow.contrib.layers._WeightedSparseColumn(cls,sparse_id_column,weight_column_name,dtype)
tensorflow.contrib.layers._WeightedSparseColumn._to_dnn_input_layer(self,input_tensor,weight_collections=None,trainable=True,output_rank=2)
tensorflow.contrib.layers._WeightedSparseColumn._wide_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers._WeightedSparseColumn.config(self)
tensorflow.contrib.layers._WeightedSparseColumn.id_tensor(self,input_tensor)
tensorflow.contrib.layers._WeightedSparseColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers._WeightedSparseColumn.key(self)
tensorflow.contrib.layers._WeightedSparseColumn.length(self)
tensorflow.contrib.layers._WeightedSparseColumn.name(self)
tensorflow.contrib.layers._WeightedSparseColumn.weight_tensor(self,input_tensor)
tensorflow.contrib.layers._create_sequence_feature_spec_for_parsing(sequence_feature_columns,allow_missing_by_default=False)
tensorflow.contrib.layers._get_feature_config(feature_column)
tensorflow.contrib.layers._reshape_real_valued_tensor(input_tensor,output_rank,column_name=None)
tensorflow.contrib.layers.bucketized_column(source_column,boundaries)
tensorflow.contrib.layers.create_feature_spec_for_parsing(feature_columns)
tensorflow.contrib.layers.crossed_column(columns,hash_bucket_size,combiner='sum',ckpt_to_load_from=None,tensor_name_in_ckpt=None,hash_key=None)
tensorflow.contrib.layers.embedding_column(sparse_id_column,dimension,combiner='mean',initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)
tensorflow.contrib.layers.make_place_holder_tensors_for_base_features(feature_columns)
tensorflow.contrib.layers.one_hot_column(sparse_id_column)
tensorflow.contrib.layers.python.layers.feature_column.DataFrameColumn(cls,column_name,series)
tensorflow.contrib.layers.python.layers.feature_column.DataFrameColumn.__eq__(self,other)
tensorflow.contrib.layers.python.layers.feature_column.DataFrameColumn.__ne__(self,other)
tensorflow.contrib.layers.python.layers.feature_column.DataFrameColumn.__new__(cls,column_name,series)
tensorflow.contrib.layers.python.layers.feature_column.DataFrameColumn._to_dense_tensor(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column.DataFrameColumn._to_dnn_input_layer(self,input_tensor,weight_collections=None,trainable=True,output_rank=2)
tensorflow.contrib.layers.python.layers.feature_column.DataFrameColumn.config(self)
tensorflow.contrib.layers.python.layers.feature_column.DataFrameColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column.DataFrameColumn.key(self)
tensorflow.contrib.layers.python.layers.feature_column.DataFrameColumn.name(self)
tensorflow.contrib.layers.python.layers.feature_column._BucketizedColumn(cls,source_column,boundaries)
tensorflow.contrib.layers.python.layers.feature_column._BucketizedColumn.__new__(cls,source_column,boundaries)
tensorflow.contrib.layers.python.layers.feature_column._BucketizedColumn._to_dnn_input_layer(self,input_tensor,weight_collections=None,trainable=True,output_rank=2)
tensorflow.contrib.layers.python.layers.feature_column._BucketizedColumn._wide_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._BucketizedColumn.config(self)
tensorflow.contrib.layers.python.layers.feature_column._BucketizedColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column._BucketizedColumn.key(self)
tensorflow.contrib.layers.python.layers.feature_column._BucketizedColumn.length(self)
tensorflow.contrib.layers.python.layers.feature_column._BucketizedColumn.name(self)
tensorflow.contrib.layers.python.layers.feature_column._BucketizedColumn.to_sparse_tensor(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._CrossedColumn(cls,columns,hash_bucket_size,hash_key,combiner='sum',ckpt_to_load_from=None,tensor_name_in_ckpt=None)
tensorflow.contrib.layers.python.layers.feature_column._CrossedColumn.__new__(cls,columns,hash_bucket_size,hash_key,combiner='sum',ckpt_to_load_from=None,tensor_name_in_ckpt=None)
tensorflow.contrib.layers.python.layers.feature_column._CrossedColumn._assert_is_crossable(column)
tensorflow.contrib.layers.python.layers.feature_column._CrossedColumn._checkpoint_path(self)
tensorflow.contrib.layers.python.layers.feature_column._CrossedColumn._to_dnn_input_layer(self,input_tensor,weight_collections=None,trainable=True,output_rank=2)
tensorflow.contrib.layers.python.layers.feature_column._CrossedColumn._wide_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._CrossedColumn.config(self)
tensorflow.contrib.layers.python.layers.feature_column._CrossedColumn.id_tensor(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._CrossedColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column._CrossedColumn.key(self)
tensorflow.contrib.layers.python.layers.feature_column._CrossedColumn.length(self)
tensorflow.contrib.layers.python.layers.feature_column._CrossedColumn.name(self)
tensorflow.contrib.layers.python.layers.feature_column._CrossedColumn.weight_tensor(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._DeepEmbeddingLookupArguments(collections.namedtuple('_DeepEmbeddingLookupArguments',['input_tensor','weight_tensor','vocab_size','initializer','combiner','dimension','shared_embedding_name','hash_key','max_norm','trainable']))
tensorflow.contrib.layers.python.layers.feature_column._EmbeddingColumn(cls,sparse_id_column,dimension,combiner='mean',initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,shared_embedding_name=None,shared_vocab_size=None,max_norm=None,trainable=True)
tensorflow.contrib.layers.python.layers.feature_column._EmbeddingColumn.__new__(cls,sparse_id_column,dimension,combiner='mean',initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,shared_embedding_name=None,shared_vocab_size=None,max_norm=None,trainable=True)
tensorflow.contrib.layers.python.layers.feature_column._EmbeddingColumn._checkpoint_path(self)
tensorflow.contrib.layers.python.layers.feature_column._EmbeddingColumn._deep_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._EmbeddingColumn._wide_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._EmbeddingColumn.config(self)
tensorflow.contrib.layers.python.layers.feature_column._EmbeddingColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column._EmbeddingColumn.key(self)
tensorflow.contrib.layers.python.layers.feature_column._EmbeddingColumn.length(self)
tensorflow.contrib.layers.python.layers.feature_column._EmbeddingColumn.name(self)
tensorflow.contrib.layers.python.layers.feature_column._FeatureColumn(object)
tensorflow.contrib.layers.python.layers.feature_column._FeatureColumn._checkpoint_path(self)
tensorflow.contrib.layers.python.layers.feature_column._FeatureColumn._deep_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._FeatureColumn._key_without_properties(self,properties)
tensorflow.contrib.layers.python.layers.feature_column._FeatureColumn._to_dense_tensor(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._FeatureColumn._to_dnn_input_layer(self,input_tensor,weight_collection=None,trainable=True,output_rank=2)
tensorflow.contrib.layers.python.layers.feature_column._FeatureColumn._wide_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._FeatureColumn.config(self)
tensorflow.contrib.layers.python.layers.feature_column._FeatureColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column._FeatureColumn.key(self)
tensorflow.contrib.layers.python.layers.feature_column._FeatureColumn.name(self)
tensorflow.contrib.layers.python.layers.feature_column._LinearEmbeddingLookupArguments(collections.namedtuple('_LinearEmbeddingLookupArguments',['input_tensor','weight_tensor','vocab_size','initializer','combiner']))
tensorflow.contrib.layers.python.layers.feature_column._OneHotColumn(_FeatureColumn,collections.namedtuple('_OneHotColumn',['sparse_id_column']))
tensorflow.contrib.layers.python.layers.feature_column._OneHotColumn._to_dnn_input_layer(self,transformed_input_tensor,unused_weight_collections=None,unused_trainable=False,output_rank=2)
tensorflow.contrib.layers.python.layers.feature_column._OneHotColumn.config(self)
tensorflow.contrib.layers.python.layers.feature_column._OneHotColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column._OneHotColumn.key(self)
tensorflow.contrib.layers.python.layers.feature_column._OneHotColumn.length(self)
tensorflow.contrib.layers.python.layers.feature_column._OneHotColumn.name(self)
tensorflow.contrib.layers.python.layers.feature_column._RealValuedColumn(cls,column_name,dimension,default_value,dtype,normalizer)
tensorflow.contrib.layers.python.layers.feature_column._RealValuedColumn.__new__(cls,column_name,dimension,default_value,dtype,normalizer)
tensorflow.contrib.layers.python.layers.feature_column._RealValuedColumn._normalized_input_tensor(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._RealValuedColumn._to_dense_tensor(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._RealValuedColumn._to_dnn_input_layer(self,input_tensor,weight_collections=None,trainable=True,output_rank=2)
tensorflow.contrib.layers.python.layers.feature_column._RealValuedColumn.config(self)
tensorflow.contrib.layers.python.layers.feature_column._RealValuedColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column._RealValuedColumn.key(self)
tensorflow.contrib.layers.python.layers.feature_column._RealValuedColumn.name(self)
tensorflow.contrib.layers.python.layers.feature_column._RealValuedColumn.normalizer_fn(self)
tensorflow.contrib.layers.python.layers.feature_column._ScatteredEmbeddingColumn(cls,column_name,size,dimension,hash_key,combiner='sqrtn',initializer=None)
tensorflow.contrib.layers.python.layers.feature_column._ScatteredEmbeddingColumn.__new__(cls,column_name,size,dimension,hash_key,combiner='sqrtn',initializer=None)
tensorflow.contrib.layers.python.layers.feature_column._ScatteredEmbeddingColumn._deep_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._ScatteredEmbeddingColumn.config(self)
tensorflow.contrib.layers.python.layers.feature_column._ScatteredEmbeddingColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column._ScatteredEmbeddingColumn.name(self)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumn(cls,column_name,is_integerized=False,bucket_size=None,lookup_config=None,combiner='sum',dtype=dtypes.string)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumn.__new__(cls,column_name,is_integerized=False,bucket_size=None,lookup_config=None,combiner='sum',dtype=dtypes.string)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumn._get_input_sparse_tensor(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumn._to_dnn_input_layer(self,input_tensor,weight_collections=None,trainable=True,output_rank=2)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumn._wide_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumn.config(self)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumn.id_tensor(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumn.is_compatible(self,other_column)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumn.key(self)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumn.length(self)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumn.name(self)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumn.weight_tensor(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumnHashed(_SparseColumn)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumnHashed.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumnIntegerized(_SparseColumn)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumnIntegerized.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumnKeys(_SparseColumn)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumnKeys.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumnVocabulary(_SparseColumn)
tensorflow.contrib.layers.python.layers.feature_column._SparseColumnVocabulary.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column._SparseIdLookupConfig(cls,vocabulary_file=None,keys=None,num_oov_buckets=0,vocab_size=None,default_value=-1)
tensorflow.contrib.layers.python.layers.feature_column._SparseIdLookupConfig.__new__(cls,vocabulary_file=None,keys=None,num_oov_buckets=0,vocab_size=None,default_value=-1)
tensorflow.contrib.layers.python.layers.feature_column._WeightedSparseColumn(cls,sparse_id_column,weight_column_name,dtype)
tensorflow.contrib.layers.python.layers.feature_column._WeightedSparseColumn.__new__(cls,sparse_id_column,weight_column_name,dtype)
tensorflow.contrib.layers.python.layers.feature_column._WeightedSparseColumn._to_dnn_input_layer(self,input_tensor,weight_collections=None,trainable=True,output_rank=2)
tensorflow.contrib.layers.python.layers.feature_column._WeightedSparseColumn._wide_embedding_lookup_arguments(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._WeightedSparseColumn.config(self)
tensorflow.contrib.layers.python.layers.feature_column._WeightedSparseColumn.id_tensor(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._WeightedSparseColumn.insert_transformed_feature(self,columns_to_tensors)
tensorflow.contrib.layers.python.layers.feature_column._WeightedSparseColumn.key(self)
tensorflow.contrib.layers.python.layers.feature_column._WeightedSparseColumn.length(self)
tensorflow.contrib.layers.python.layers.feature_column._WeightedSparseColumn.name(self)
tensorflow.contrib.layers.python.layers.feature_column._WeightedSparseColumn.weight_tensor(self,input_tensor)
tensorflow.contrib.layers.python.layers.feature_column._create_sequence_feature_spec_for_parsing(sequence_feature_columns,allow_missing_by_default=False)
tensorflow.contrib.layers.python.layers.feature_column._get_feature_config(feature_column)
tensorflow.contrib.layers.python.layers.feature_column._reshape_real_valued_tensor(input_tensor,output_rank,column_name=None)
tensorflow.contrib.layers.python.layers.feature_column.bucketized_column(source_column,boundaries)
tensorflow.contrib.layers.python.layers.feature_column.create_feature_spec_for_parsing(feature_columns)
tensorflow.contrib.layers.python.layers.feature_column.crossed_column(columns,hash_bucket_size,combiner='sum',ckpt_to_load_from=None,tensor_name_in_ckpt=None,hash_key=None)
tensorflow.contrib.layers.python.layers.feature_column.embedding_column(sparse_id_column,dimension,combiner='mean',initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)
tensorflow.contrib.layers.python.layers.feature_column.make_place_holder_tensors_for_base_features(feature_columns)
tensorflow.contrib.layers.python.layers.feature_column.one_hot_column(sparse_id_column)
tensorflow.contrib.layers.python.layers.feature_column.real_valued_column(column_name,dimension=1,default_value=None,dtype=dtypes.float32,normalizer=None)
tensorflow.contrib.layers.python.layers.feature_column.scattered_embedding_column(column_name,size,dimension,hash_key,combiner='mean',initializer=None)
tensorflow.contrib.layers.python.layers.feature_column.shared_embedding_columns(sparse_id_columns,dimension,combiner='mean',shared_embedding_name=None,initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)
tensorflow.contrib.layers.python.layers.feature_column.sparse_column_with_hash_bucket(column_name,hash_bucket_size,combiner='sum',dtype=dtypes.string)
tensorflow.contrib.layers.python.layers.feature_column.sparse_column_with_integerized_feature(column_name,bucket_size,combiner='sum',dtype=dtypes.int64)
tensorflow.contrib.layers.python.layers.feature_column.sparse_column_with_keys(column_name,keys,default_value=-1,combiner='sum',dtype=dtypes.string)
tensorflow.contrib.layers.python.layers.feature_column.sparse_column_with_vocabulary_file(column_name,vocabulary_file,num_oov_buckets=0,vocab_size=None,default_value=-1,combiner='sum',dtype=dtypes.string)
tensorflow.contrib.layers.python.layers.feature_column.weighted_sparse_column(sparse_id_column,weight_column_name,dtype=dtypes.float32)
tensorflow.contrib.layers.real_valued_column(column_name,dimension=1,default_value=None,dtype=dtypes.float32,normalizer=None)
tensorflow.contrib.layers.scattered_embedding_column(column_name,size,dimension,hash_key,combiner='mean',initializer=None)
tensorflow.contrib.layers.shared_embedding_columns(sparse_id_columns,dimension,combiner='mean',shared_embedding_name=None,initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)
tensorflow.contrib.layers.sparse_column_with_hash_bucket(column_name,hash_bucket_size,combiner='sum',dtype=dtypes.string)
tensorflow.contrib.layers.sparse_column_with_integerized_feature(column_name,bucket_size,combiner='sum',dtype=dtypes.int64)
tensorflow.contrib.layers.sparse_column_with_keys(column_name,keys,default_value=-1,combiner='sum',dtype=dtypes.string)
tensorflow.contrib.layers.sparse_column_with_vocabulary_file(column_name,vocabulary_file,num_oov_buckets=0,vocab_size=None,default_value=-1,combiner='sum',dtype=dtypes.string)
tensorflow.contrib.layers.weighted_sparse_column(sparse_id_column,weight_column_name,dtype=dtypes.float32)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/ops/gen_bucketization_op.py----------------------------------------
A:tensorflow.contrib.layers.ops.gen_bucketization_op.result->_InitOpDefLibrary().apply_op('Bucketize', input=input, boundaries=boundaries, name=name)
A:tensorflow.contrib.layers.ops.gen_bucketization_op.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.layers.ops.gen_bucketization_op.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.layers.ops.gen_bucketization_op._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.layers.ops.gen_bucketization_op._InitOpDefLibrary()
tensorflow.contrib.layers.ops.gen_bucketization_op.bucketize(input,boundaries,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/layers/ops/gen_sparse_feature_cross_op.py----------------------------------------
A:tensorflow.contrib.layers.ops.gen_sparse_feature_cross_op._SparseFeatureCrossOutput->collections.namedtuple('SparseFeatureCross', _sparse_feature_cross_outputs)
A:tensorflow.contrib.layers.ops.gen_sparse_feature_cross_op.result->_InitOpDefLibrary().apply_op('SparseFeatureCrossV2', indices=indices, values=values, shapes=shapes, dense=dense, hashed_output=hashed_output, num_buckets=num_buckets, hash_key=hash_key, out_type=out_type, internal_type=internal_type, name=name)
A:tensorflow.contrib.layers.ops.gen_sparse_feature_cross_op._SparseFeatureCrossV2Output->collections.namedtuple('SparseFeatureCrossV2', _sparse_feature_cross_v2_outputs)
A:tensorflow.contrib.layers.ops.gen_sparse_feature_cross_op.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.layers.ops.gen_sparse_feature_cross_op.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.layers.ops.gen_sparse_feature_cross_op._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.layers.ops.gen_sparse_feature_cross_op._InitOpDefLibrary()
tensorflow.contrib.layers.ops.gen_sparse_feature_cross_op.sparse_feature_cross(indices,values,shapes,dense,hashed_output,num_buckets,out_type,internal_type,name=None)
tensorflow.contrib.layers.ops.gen_sparse_feature_cross_op.sparse_feature_cross_v2(indices,values,shapes,dense,hashed_output,num_buckets,hash_key,out_type,internal_type,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tfprof/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tfprof/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tfprof/python/tools/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tfprof/python/tools/tfprof/model_analyzer.py----------------------------------------
A:tensorflow.contrib.tfprof.python.tools.tfprof.model_analyzer.op_log->tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger._merge_default_with_oplog(graph, op_log, run_meta)
A:tensorflow.contrib.tfprof.python.tools.tfprof.model_analyzer.opts->tensorflow.tools.tfprof.tfprof_options_pb2.OptionsProto()
A:tensorflow.contrib.tfprof.python.tools.tfprof.model_analyzer.tfprof_node->tensorflow.tools.tfprof.tfprof_output_pb2.TFProfNode()
tensorflow.contrib.tfprof.model_analyzer.print_model_analysis(graph,run_meta=None,op_log=None,tfprof_cmd='scope',tfprof_options=TRAINABLE_VARS_PARAMS_STAT_OPTIONS)
tensorflow.contrib.tfprof.python.tools.tfprof.model_analyzer.print_model_analysis(graph,run_meta=None,op_log=None,tfprof_cmd='scope',tfprof_options=TRAINABLE_VARS_PARAMS_STAT_OPTIONS)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tfprof/python/tools/tfprof/pywrap_tensorflow_print_model_analysis_lib.py----------------------------------------
A:tensorflow.contrib.tfprof.python.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib.(fp, pathname, description)->imp.find_module('_pywrap_tensorflow_print_model_analysis_lib', [dirname(__file__)])
A:tensorflow.contrib.tfprof.python.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib._mod->imp.load_module('_pywrap_tensorflow_print_model_analysis_lib', fp, pathname, description)
A:tensorflow.contrib.tfprof.python.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib._pywrap_tensorflow_print_model_analysis_lib->swig_import_helper()
A:tensorflow.contrib.tfprof.python.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib.method->class_type.__swig_getmethods__.get(name, None)
tensorflow.contrib.tfprof.python.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib.PrintModelAnalysis(graph,run_meta,op_log,command,options)
tensorflow.contrib.tfprof.python.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib._swig_getattr(self,class_type,name)
tensorflow.contrib.tfprof.python.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib._swig_getattr_nondynamic(self,class_type,name,static=1)
tensorflow.contrib.tfprof.python.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib._swig_repr(self)
tensorflow.contrib.tfprof.python.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib._swig_setattr(self,class_type,name,value)
tensorflow.contrib.tfprof.python.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib._swig_setattr_nondynamic(self,class_type,name,value,static=1)
tensorflow.contrib.tfprof.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib.PrintModelAnalysis(graph,run_meta,op_log,command,options)
tensorflow.contrib.tfprof.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib._swig_getattr(self,class_type,name)
tensorflow.contrib.tfprof.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib._swig_getattr_nondynamic(self,class_type,name,static=1)
tensorflow.contrib.tfprof.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib._swig_repr(self)
tensorflow.contrib.tfprof.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib._swig_setattr(self,class_type,name,value)
tensorflow.contrib.tfprof.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib._swig_setattr_nondynamic(self,class_type,name,value,static=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tfprof/python/tools/tfprof/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/tfprof/python/tools/tfprof/tfprof_logger.py----------------------------------------
A:tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger.op->_fill_missing_graph_shape(graph, run_meta).get_operation_by_name(node_stat.node_name)
A:tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger.node_stat_shape->tensorflow.python.framework.tensor_shape.TensorShape([d.size for d in node_stat_dims])
A:tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger.graph->_fill_missing_graph_shape(graph, run_meta)
A:tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger.graph_def->_fill_missing_graph_shape(graph, run_meta).as_graph_def()
A:tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger.stats->tensorflow.python.framework.ops.get_stats_for_node_def(graph, node, REGISTERED_FLOP_STATS)
A:tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger.entry->tensorflow.tools.tfprof.tfprof_log_pb2.OpLogEntry()
A:tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger.entry.float_ops->int(stats.value)
A:tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger.tmp_op_log->tensorflow.tools.tfprof.tfprof_log_pb2.OpLog()
A:tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger.logged_ops->_get_logged_ops(graph, run_meta)
A:tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger.all_ops->dict()
A:tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger.op_log->_merge_default_with_oplog(graph, op_log, run_meta)
tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger._fill_missing_graph_shape(graph,run_meta)
tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger._get_logged_ops(graph,run_meta=None)
tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger._merge_default_with_oplog(graph,op_log=None,run_meta=None)
tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger.write_op_log(graph,log_dir,op_log=None,run_meta=None)
tensorflow.contrib.tfprof.tfprof_logger._fill_missing_graph_shape(graph,run_meta)
tensorflow.contrib.tfprof.tfprof_logger._get_logged_ops(graph,run_meta=None)
tensorflow.contrib.tfprof.tfprof_logger._merge_default_with_oplog(graph,op_log=None,run_meta=None)
tensorflow.contrib.tfprof.tfprof_logger.write_op_log(graph,log_dir,op_log=None,run_meta=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linear_optimizer/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linear_optimizer/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linear_optimizer/python/sdca_optimizer.py----------------------------------------
A:tensorflow.contrib.linear_optimizer.python.sdca_optimizer.sparse_indices->tensorflow.python.ops.array_ops.where(math_ops.not_equal(dense_tensor, math_ops.cast(ignore_value, dense_tensor.dtype)))
A:tensorflow.contrib.linear_optimizer.python.sdca_optimizer.sparse_values->tensorflow.python.ops.array_ops.gather_nd(dense_tensor, sparse_indices)
A:tensorflow.contrib.linear_optimizer.python.sdca_optimizer.dense_bucket_tensor->tensorflow.contrib.layers.input_from_feature_columns({column: transformed_tensor}, [column])
A:tensorflow.contrib.linear_optimizer.python.sdca_optimizer.sparse_feature_column->_tensor_to_sparse_feature_column(dense_bucket_tensor)
A:tensorflow.contrib.linear_optimizer.python.sdca_optimizer.id_tensor->column.id_tensor(transformed_tensor)
A:tensorflow.contrib.linear_optimizer.python.sdca_optimizer.weight_tensor->column.weight_tensor(transformed_tensor)
A:tensorflow.contrib.linear_optimizer.python.sdca_optimizer.examples->dict(sparse_features=sparse_feature_with_values, dense_features=dense_features, example_labels=math_ops.to_float(array_ops.reshape(targets, shape=[-1])), example_weights=example_weights, example_ids=example_ids)
A:tensorflow.contrib.linear_optimizer.python.sdca_optimizer.sdca_variables->dict(sparse_features_weights=sparse_feature_with_values_weights, dense_features_weights=dense_feature_weights)
A:tensorflow.contrib.linear_optimizer.python.sdca_optimizer.(training_examples, training_variables)->_training_examples_and_variables()
A:tensorflow.contrib.linear_optimizer.python.sdca_optimizer.sdca_model->tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel(examples=training_examples, variables=training_variables, options=dict(symmetric_l1_regularization=self._symmetric_l1_regularization, symmetric_l2_regularization=self._symmetric_l2_regularization, num_loss_partitions=self._num_loss_partitions, num_table_shards=self._num_table_shards, loss_type=loss_type))
A:tensorflow.contrib.linear_optimizer.python.sdca_optimizer.train_op->tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel(examples=training_examples, variables=training_variables, options=dict(symmetric_l1_regularization=self._symmetric_l1_regularization, symmetric_l2_regularization=self._symmetric_l2_regularization, num_loss_partitions=self._num_loss_partitions, num_table_shards=self._num_table_shards, loss_type=loss_type)).minimize(global_step=global_step)
tensorflow.contrib.linear_optimizer.SDCAOptimizer(self,example_id_column,num_loss_partitions=1,num_table_shards=None,symmetric_l1_regularization=0.0,symmetric_l2_regularization=1.0)
tensorflow.contrib.linear_optimizer.SDCAOptimizer.example_id_column(self)
tensorflow.contrib.linear_optimizer.SDCAOptimizer.get_name(self)
tensorflow.contrib.linear_optimizer.SDCAOptimizer.get_train_step(self,columns_to_variables,weight_column_name,loss_type,features,targets,global_step)
tensorflow.contrib.linear_optimizer.SDCAOptimizer.num_loss_partitions(self)
tensorflow.contrib.linear_optimizer.SDCAOptimizer.num_table_shards(self)
tensorflow.contrib.linear_optimizer.SDCAOptimizer.symmetric_l1_regularization(self)
tensorflow.contrib.linear_optimizer.SDCAOptimizer.symmetric_l2_regularization(self)
tensorflow.contrib.linear_optimizer.python.sdca_optimizer.SDCAOptimizer(self,example_id_column,num_loss_partitions=1,num_table_shards=None,symmetric_l1_regularization=0.0,symmetric_l2_regularization=1.0)
tensorflow.contrib.linear_optimizer.python.sdca_optimizer.SDCAOptimizer.__init__(self,example_id_column,num_loss_partitions=1,num_table_shards=None,symmetric_l1_regularization=0.0,symmetric_l2_regularization=1.0)
tensorflow.contrib.linear_optimizer.python.sdca_optimizer.SDCAOptimizer.example_id_column(self)
tensorflow.contrib.linear_optimizer.python.sdca_optimizer.SDCAOptimizer.get_name(self)
tensorflow.contrib.linear_optimizer.python.sdca_optimizer.SDCAOptimizer.get_train_step(self,columns_to_variables,weight_column_name,loss_type,features,targets,global_step)
tensorflow.contrib.linear_optimizer.python.sdca_optimizer.SDCAOptimizer.num_loss_partitions(self)
tensorflow.contrib.linear_optimizer.python.sdca_optimizer.SDCAOptimizer.num_table_shards(self)
tensorflow.contrib.linear_optimizer.python.sdca_optimizer.SDCAOptimizer.symmetric_l1_regularization(self)
tensorflow.contrib.linear_optimizer.python.sdca_optimizer.SDCAOptimizer.symmetric_l2_regularization(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linear_optimizer/python/sdca_estimator.py----------------------------------------
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.shape->tensorflow.python.framework.tensor_util.constant_value(column.dense_shape)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.bias_column->tensorflow.contrib.layers.real_valued_column(bias_column_name)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.columns_to_tensors[bias_column]->tensorflow.python.ops.array_ops.ones([batch_size, 1], dtype=dtypes.float32)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.sparse_indices->tensorflow.python.ops.array_ops.where(math_ops.not_equal(dense_tensor, math_ops.cast(ignore_value, dense_tensor.dtype)))
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.sparse_values->tensorflow.python.ops.array_ops.gather_nd(dense_tensor, sparse_indices)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.dense_bucket_tensor->column._to_dnn_input_layer(transformed_tensor)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.sparse_feature_column->_dense_tensor_to_sparse_feature_column(dense_bucket_tensor)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.id_tensor->column.id_tensor(transformed_tensor)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.weight_tensor->column.weight_tensor(transformed_tensor)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.examples->dict(sparse_features=sparse_feature_with_values, dense_features=dense_features, example_labels=math_ops.to_float(array_ops.reshape(targets, shape=[-1])), example_weights=example_weights, example_ids=example_ids)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.sdca_variables->dict(sparse_features_weights=sparse_feature_with_values_weights, dense_features_weights=dense_feature_weights)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.(training_examples, training_variables)->_training_examples_and_variables()
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.sdca_model->tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel(examples=training_examples, variables=training_variables, options=dict(symmetric_l1_regularization=optimizer.symmetric_l1_regularization, symmetric_l2_regularization=optimizer.symmetric_l2_regularization, num_loss_partitions=optimizer.num_loss_partitions, num_table_shards=optimizer.num_table_shards, loss_type=loss_type))
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.train_op->tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel(examples=training_examples, variables=training_variables, options=dict(symmetric_l1_regularization=optimizer.symmetric_l1_regularization, symmetric_l2_regularization=optimizer.symmetric_l2_regularization, num_loss_partitions=optimizer.num_loss_partitions, num_table_shards=optimizer.num_table_shards, loss_type=loss_type)).minimize(global_step=global_step)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.update_weights_hook->params.get('update_weights_hook', None)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.optimizer->tensorflow.contrib.linear_optimizer.python.sdca_optimizer.SDCAOptimizer(example_id_column=example_id_column, num_loss_partitions=n_loss_partitions, symmetric_l1_regularization=l1_regularization, symmetric_l2_regularization=l2_regularization)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.(logits, columns_to_variables, bias)->tensorflow.contrib.layers.weighted_sum_from_feature_columns(columns_to_tensors=features, feature_columns=feature_columns, num_outputs=1, scope=scope)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.global_step->tensorflow.contrib.framework.python.ops.variables.get_global_step()
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.(sdca_model, train_op)->_get_sdca_train_step(optimizer, columns_to_variables, weight_column_name, loss_type, features, labels, global_step)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.model_fn_ops->head.create_model_fn_ops(features=features, labels=labels, mode=mode, train_op_fn=_train_op_fn, logits=logits)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.self._update_op->self._sdca_model.update_weights(self._train_op)
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.self._feature_columns->tuple(feature_columns or [])
A:tensorflow.contrib.linear_optimizer.python.sdca_estimator.predictions->super(SDCARegressor, self).predict(input_fn=input_fn, outputs=[key])
tensorflow.contrib.linear_optimizer.python.sdca_estimator.SDCALogisticClassifier(self,example_id_column,feature_columns,weight_column_name=None,model_dir=None,l1_regularization=0.0,l2_regularization=1.0,num_loss_partitions=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.linear_optimizer.python.sdca_estimator.SDCALogisticClassifier.__init__(self,example_id_column,feature_columns,weight_column_name=None,model_dir=None,l1_regularization=0.0,l2_regularization=1.0,num_loss_partitions=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.linear_optimizer.python.sdca_estimator.SDCALogisticClassifier.predict_classes(self,input_fn=None)
tensorflow.contrib.linear_optimizer.python.sdca_estimator.SDCALogisticClassifier.predict_proba(self,input_fn=None)
tensorflow.contrib.linear_optimizer.python.sdca_estimator.SDCARegressor(self,example_id_column,feature_columns,weight_column_name=None,model_dir=None,l1_regularization=0.0,l2_regularization=1.0,num_loss_partitions=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.linear_optimizer.python.sdca_estimator.SDCARegressor.__init__(self,example_id_column,feature_columns,weight_column_name=None,model_dir=None,l1_regularization=0.0,l2_regularization=1.0,num_loss_partitions=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.linear_optimizer.python.sdca_estimator.SDCARegressor.predict_scores(self,input_fn)
tensorflow.contrib.linear_optimizer.python.sdca_estimator._SDCAEstimator(self,example_id_column,feature_columns,weight_column_name=None,model_dir=None,head=None,l1_regularization=0.0,l2_regularization=1.0,num_loss_partitions=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.linear_optimizer.python.sdca_estimator._SDCAEstimator.__init__(self,example_id_column,feature_columns,weight_column_name=None,model_dir=None,head=None,l1_regularization=0.0,l2_regularization=1.0,num_loss_partitions=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.linear_optimizer.python.sdca_estimator._SdcaUpdateWeightsHook(self)
tensorflow.contrib.linear_optimizer.python.sdca_estimator._SdcaUpdateWeightsHook.__init__(self)
tensorflow.contrib.linear_optimizer.python.sdca_estimator._SdcaUpdateWeightsHook.before_run(self,run_context)
tensorflow.contrib.linear_optimizer.python.sdca_estimator._SdcaUpdateWeightsHook.begin(self)
tensorflow.contrib.linear_optimizer.python.sdca_estimator._SdcaUpdateWeightsHook.set_parameters(self,sdca_model,train_op)
tensorflow.contrib.linear_optimizer.python.sdca_estimator._add_bias_column(feature_columns,columns_to_tensors,bias_variable,columns_to_variables)
tensorflow.contrib.linear_optimizer.python.sdca_estimator._get_sdca_train_step(optimizer,columns_to_variables,weight_column_name,loss_type,features,targets,global_step)
tensorflow.contrib.linear_optimizer.python.sdca_estimator._head_is_valid_for_sdca(head)
tensorflow.contrib.linear_optimizer.python.sdca_estimator.sdca_model_fn(features,labels,mode,params,config=None)
tensorflow.contrib.linear_optimizer.sdca_estimator.SDCALogisticClassifier(self,example_id_column,feature_columns,weight_column_name=None,model_dir=None,l1_regularization=0.0,l2_regularization=1.0,num_loss_partitions=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.linear_optimizer.sdca_estimator.SDCALogisticClassifier.predict_classes(self,input_fn=None)
tensorflow.contrib.linear_optimizer.sdca_estimator.SDCALogisticClassifier.predict_proba(self,input_fn=None)
tensorflow.contrib.linear_optimizer.sdca_estimator.SDCARegressor(self,example_id_column,feature_columns,weight_column_name=None,model_dir=None,l1_regularization=0.0,l2_regularization=1.0,num_loss_partitions=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.linear_optimizer.sdca_estimator.SDCARegressor.predict_scores(self,input_fn)
tensorflow.contrib.linear_optimizer.sdca_estimator._SDCAEstimator(self,example_id_column,feature_columns,weight_column_name=None,model_dir=None,head=None,l1_regularization=0.0,l2_regularization=1.0,num_loss_partitions=None,config=None,feature_engineering_fn=None)
tensorflow.contrib.linear_optimizer.sdca_estimator._SdcaUpdateWeightsHook(self)
tensorflow.contrib.linear_optimizer.sdca_estimator._SdcaUpdateWeightsHook.before_run(self,run_context)
tensorflow.contrib.linear_optimizer.sdca_estimator._SdcaUpdateWeightsHook.begin(self)
tensorflow.contrib.linear_optimizer.sdca_estimator._SdcaUpdateWeightsHook.set_parameters(self,sdca_model,train_op)
tensorflow.contrib.linear_optimizer.sdca_estimator._add_bias_column(feature_columns,columns_to_tensors,bias_variable,columns_to_variables)
tensorflow.contrib.linear_optimizer.sdca_estimator._get_sdca_train_step(optimizer,columns_to_variables,weight_column_name,loss_type,features,targets,global_step)
tensorflow.contrib.linear_optimizer.sdca_estimator._head_is_valid_for_sdca(head)
tensorflow.contrib.linear_optimizer.sdca_estimator.sdca_model_fn(features,labels,mode,params,config=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linear_optimizer/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linear_optimizer/python/ops/sdca_ops.py----------------------------------------
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.self._hashtable->ShardedMutableDenseHashTable(key_dtype=dtypes.int64, value_dtype=dtypes.float32, num_shards=self._num_table_shards(), default_value=[0.0, 0.0, 0.0, 0.0], empty_key=[0, 0])
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.num_shards->self._options.get('num_table_shards')
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.self._slots->collections.defaultdict(list)
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.sum->tensorflow.python.ops.math_ops.add_n(sums)
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.sparse_variables->self._convert_n_to_tensor(self._variables['sparse_features_weights'])
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.dense_features->self._convert_n_to_tensor(examples['dense_features'])
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.dense_variables->self._convert_n_to_tensor(self._variables['dense_features_weights'])
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.result->tensorflow.python.ops.math_ops.sigmoid(result)
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.example_ids_hashed->tensorflow.python.ops.gen_sdca_ops._sdca_fprint(internal_convert_to_tensor(self._examples['example_ids']))
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.example_state_data->self._hashtable.lookup(example_ids_hashed)
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.weights_tensor->self._convert_n_to_tensor(self._slots['unshrinked_sparse_features_weights'])
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.(esu, sfw, dfw)->tensorflow.python.ops.gen_sdca_ops._sdca_optimizer(sparse_example_indices, sparse_feature_indices, sparse_features_values, self._convert_n_to_tensor(self._examples['dense_features']), internal_convert_to_tensor(self._examples['example_weights']), internal_convert_to_tensor(self._examples['example_labels']), sparse_indices, sparse_weights, self._convert_n_to_tensor(self._slots['unshrinked_dense_features_weights']), example_state_data, loss_type=self._options['loss_type'], l1=self._options['symmetric_l1_regularization'], l2=self._symmetric_l2_regularization(), num_loss_partitions=self._num_loss_partitions(), num_inner_iterations=1)
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.(_, values_list)->self._hashtable.export_sharded()
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.summed_values->tensorflow.python.ops.math_ops.add_n(shard_sums)
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.predictions->tensorflow.python.ops.math_ops.cast(self._linear_predictions(examples), dtypes.float64)
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.labels->tensorflow.python.ops.math_ops.cast(internal_convert_to_tensor(examples['example_labels']), dtypes.float64)
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.weights->internal_convert_to_tensor(examples['example_weights'])
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.all_ones->tensorflow.python.ops.array_ops.ones_like(predictions)
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.adjusted_labels->tensorflow.python.ops.math_ops.subtract(2 * labels, all_ones)
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.error->tensorflow.python.ops.nn_ops.relu(math_ops.subtract(all_ones, math_ops.multiply(adjusted_labels, predictions)))
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.weighted_error->tensorflow.python.ops.math_ops.multiply(error, weights)
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.err->tensorflow.python.ops.math_ops.subtract(labels, predictions)
A:tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.weighted_squared_err->tensorflow.python.ops.math_ops.multiply(math_ops.square(err), weights)
tensorflow.contrib.linear_optimizer.SdcaModel(self,examples,variables,options)
tensorflow.contrib.linear_optimizer.SdcaModel._assertList(self,items,check_in)
tensorflow.contrib.linear_optimizer.SdcaModel._assertSpecified(self,items,check_in)
tensorflow.contrib.linear_optimizer.SdcaModel._convert_n_to_tensor(self,input_list,as_ref=False)
tensorflow.contrib.linear_optimizer.SdcaModel._create_slots(self)
tensorflow.contrib.linear_optimizer.SdcaModel._l1_loss(self)
tensorflow.contrib.linear_optimizer.SdcaModel._l2_loss(self,l2)
tensorflow.contrib.linear_optimizer.SdcaModel._linear_predictions(self,examples)
tensorflow.contrib.linear_optimizer.SdcaModel._num_loss_partitions(self)
tensorflow.contrib.linear_optimizer.SdcaModel._num_table_shards(self)
tensorflow.contrib.linear_optimizer.SdcaModel._symmetric_l1_regularization(self)
tensorflow.contrib.linear_optimizer.SdcaModel._symmetric_l2_regularization(self)
tensorflow.contrib.linear_optimizer.SdcaModel.approximate_duality_gap(self)
tensorflow.contrib.linear_optimizer.SdcaModel.minimize(self,global_step=None,name=None)
tensorflow.contrib.linear_optimizer.SdcaModel.predictions(self,examples)
tensorflow.contrib.linear_optimizer.SdcaModel.regularized_loss(self,examples)
tensorflow.contrib.linear_optimizer.SdcaModel.unregularized_loss(self,examples)
tensorflow.contrib.linear_optimizer.SdcaModel.update_weights(self,train_op)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel(self,examples,variables,options)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel.__init__(self,examples,variables,options)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel._assertList(self,items,check_in)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel._assertSpecified(self,items,check_in)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel._convert_n_to_tensor(self,input_list,as_ref=False)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel._create_slots(self)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel._l1_loss(self)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel._l2_loss(self,l2)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel._linear_predictions(self,examples)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel._num_loss_partitions(self)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel._num_table_shards(self)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel._symmetric_l1_regularization(self)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel._symmetric_l2_regularization(self)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel.approximate_duality_gap(self)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel.minimize(self,global_step=None,name=None)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel.predictions(self,examples)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel.regularized_loss(self,examples)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel.unregularized_loss(self,examples)
tensorflow.contrib.linear_optimizer.python.ops.sdca_ops.SdcaModel.update_weights(self,train_op)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linear_optimizer/python/ops/sharded_mutable_dense_hashtable.py----------------------------------------
A:tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.key_shape->tensorflow.python.ops.array_ops.reshape(keys, [-1]).get_shape()
A:tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.keys->tensorflow.python.ops.array_ops.reshape(keys, [-1])
A:tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.indices->tensorflow.python.ops.math_ops.mod(math_ops.abs(keys), self._num_shards)
A:tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.shard_indices->self._shard_indices(keys)
A:tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.key_shards->tensorflow.python.ops.data_flow_ops.dynamic_partition(keys, shard_indices, num_shards)
A:tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.original_indices->tensorflow.python.ops.math_ops.range(num_keys)
A:tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.partitioned_indices->tensorflow.python.ops.data_flow_ops.dynamic_partition(original_indices, shard_indices, num_shards)
A:tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.result->tensorflow.python.ops.data_flow_ops.dynamic_stitch(partitioned_indices, value_shards)
A:tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.value_shards->tensorflow.python.ops.data_flow_ops.dynamic_partition(values, shard_indices, num_shards)
A:tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.(exported_keys, exported_values)->table_shard.export(name=name)
tensorflow.contrib.linear_optimizer.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable(self,key_dtype,value_dtype,default_value,empty_key,num_shards=1,name='ShardedMutableHashTable')
tensorflow.contrib.linear_optimizer.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable._check_keys(self,keys)
tensorflow.contrib.linear_optimizer.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable._num_shards(self)
tensorflow.contrib.linear_optimizer.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable._shard_indices(self,keys)
tensorflow.contrib.linear_optimizer.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable.export_sharded(self,name=None)
tensorflow.contrib.linear_optimizer.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable.insert(self,keys,values,name=None)
tensorflow.contrib.linear_optimizer.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable.lookup(self,keys,name=None)
tensorflow.contrib.linear_optimizer.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable.size(self,name=None)
tensorflow.contrib.linear_optimizer.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable.table_shards(self)
tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable(self,key_dtype,value_dtype,default_value,empty_key,num_shards=1,name='ShardedMutableHashTable')
tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable.__init__(self,key_dtype,value_dtype,default_value,empty_key,num_shards=1,name='ShardedMutableHashTable')
tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable._check_keys(self,keys)
tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable._num_shards(self)
tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable._shard_indices(self,keys)
tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable.export_sharded(self,name=None)
tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable.insert(self,keys,values,name=None)
tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable.lookup(self,keys,name=None)
tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable.size(self,name=None)
tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable.ShardedMutableDenseHashTable.table_shards(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/linear_optimizer/python/ops/sparse_feature_column.py----------------------------------------
A:tensorflow.contrib.linear_optimizer.python.ops.sparse_feature_column.self._example_indices->internal_convert_to_tensor(example_indices, name='example_indices', dtype=dtypes.int64)
A:tensorflow.contrib.linear_optimizer.python.ops.sparse_feature_column.self._feature_indices->internal_convert_to_tensor(feature_indices, name='feature_indices', dtype=dtypes.int64)
A:tensorflow.contrib.linear_optimizer.python.ops.sparse_feature_column.self._feature_values->internal_convert_to_tensor(feature_values, name='feature_values', dtype=dtypes.float32)
tensorflow.contrib.linear_optimizer.SparseFeatureColumn(self,example_indices,feature_indices,feature_values)
tensorflow.contrib.linear_optimizer.SparseFeatureColumn.example_indices(self)
tensorflow.contrib.linear_optimizer.SparseFeatureColumn.feature_indices(self)
tensorflow.contrib.linear_optimizer.SparseFeatureColumn.feature_values(self)
tensorflow.contrib.linear_optimizer.python.ops.sparse_feature_column.SparseFeatureColumn(self,example_indices,feature_indices,feature_values)
tensorflow.contrib.linear_optimizer.python.ops.sparse_feature_column.SparseFeatureColumn.__init__(self,example_indices,feature_indices,feature_values)
tensorflow.contrib.linear_optimizer.python.ops.sparse_feature_column.SparseFeatureColumn.example_indices(self)
tensorflow.contrib.linear_optimizer.python.ops.sparse_feature_column.SparseFeatureColumn.feature_indices(self)
tensorflow.contrib.linear_optimizer.python.ops.sparse_feature_column.SparseFeatureColumn.feature_values(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/training/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/training/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/training/python/training/evaluation.py----------------------------------------
A:tensorflow.contrib.training.python.training.evaluation.checkpoint_path->tensorflow.python.training.saver.latest_checkpoint(checkpoint_dir)
A:tensorflow.contrib.training.python.training.evaluation.new_checkpoint_path->wait_for_new_checkpoint(checkpoint_dir, checkpoint_path, timeout=timeout)
A:tensorflow.contrib.training.python.training.evaluation.start->time.time()
A:tensorflow.contrib.training.python.training.evaluation.self._global_step->tensorflow.contrib.framework.python.ops.variables.get_or_create_global_step()
A:tensorflow.contrib.training.python.training.evaluation.self._summary_writer->tensorflow.python.summary.summary.FileWriterCache.get(self._log_dir)
A:tensorflow.contrib.training.python.training.evaluation.self._summary_op->tensorflow.python.summary.summary.merge_all()
A:tensorflow.contrib.training.python.training.evaluation.global_step->tensorflow.python.training.training_util.global_step(session, self._global_step)
A:tensorflow.contrib.training.python.training.evaluation.summary_str->session.run(self._summary_op, self._feed_dict)
A:tensorflow.contrib.training.python.training.evaluation.scaffold->tensorflow.python.training.monitored_session.Scaffold(init_op=scaffold.init_op, init_feed_dict=scaffold.init_feed_dict, init_fn=restore_checkpoint, ready_op=scaffold.ready_op, local_init_op=scaffold.local_init_op, summary_op=scaffold.summary_op, saver=scaffold.saver)
A:tensorflow.contrib.training.python.training.evaluation.eval_step->get_or_create_eval_step()
A:tensorflow.contrib.training.python.training.evaluation.update_eval_step->tensorflow.python.ops.state_ops.assign_add(eval_step, 1)
A:tensorflow.contrib.training.python.training.evaluation.final_ops_hook->tensorflow.python.training.basic_session_run_hooks.FinalOpsHook(final_ops, final_ops_feed_dict)
A:tensorflow.contrib.training.python.training.evaluation.session_creator->tensorflow.python.training.monitored_session.ChiefSessionCreator(scaffold=scaffold, checkpoint_filename_with_path=checkpoint_path, master=master, config=config)
tensorflow.contrib.training.SummaryAtEndHook(self,log_dir=None,summary_writer=None,summary_op=None,feed_dict=None)
tensorflow.contrib.training.SummaryAtEndHook.begin(self)
tensorflow.contrib.training.SummaryAtEndHook.end(self,session)
tensorflow.contrib.training.checkpoints_iterator(checkpoint_dir,min_interval_secs=0,timeout=None,timeout_fn=None)
tensorflow.contrib.training.evaluate_repeatedly(checkpoint_dir,master='',scaffold=None,eval_ops=None,feed_dict=None,final_ops=None,final_ops_feed_dict=None,eval_interval_secs=60,hooks=None,config=None,max_number_of_evaluations=None,timeout=None,timeout_fn=None)
tensorflow.contrib.training.python.training.evaluation.SummaryAtEndHook(self,log_dir=None,summary_writer=None,summary_op=None,feed_dict=None)
tensorflow.contrib.training.python.training.evaluation.SummaryAtEndHook.__init__(self,log_dir=None,summary_writer=None,summary_op=None,feed_dict=None)
tensorflow.contrib.training.python.training.evaluation.SummaryAtEndHook.begin(self)
tensorflow.contrib.training.python.training.evaluation.SummaryAtEndHook.end(self,session)
tensorflow.contrib.training.python.training.evaluation._scaffold_with_init(scaffold,saver,checkpoint_path)
tensorflow.contrib.training.python.training.evaluation.checkpoints_iterator(checkpoint_dir,min_interval_secs=0,timeout=None,timeout_fn=None)
tensorflow.contrib.training.python.training.evaluation.evaluate_repeatedly(checkpoint_dir,master='',scaffold=None,eval_ops=None,feed_dict=None,final_ops=None,final_ops_feed_dict=None,eval_interval_secs=60,hooks=None,config=None,max_number_of_evaluations=None,timeout=None,timeout_fn=None)
tensorflow.contrib.training.python.training.evaluation.wait_for_new_checkpoint(checkpoint_dir,last_checkpoint=None,seconds_to_sleep=1,timeout=None)
tensorflow.contrib.training.training.evaluation._scaffold_with_init(scaffold,saver,checkpoint_path)
tensorflow.contrib.training.wait_for_new_checkpoint(checkpoint_dir,last_checkpoint=None,seconds_to_sleep=1,timeout=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/training/python/training/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/training/python/training/device_setter.py----------------------------------------
A:tensorflow.contrib.training.python.training.device_setter.self._ps_loads->numpy.zeros(num_tasks)
A:tensorflow.contrib.training.python.training.device_setter.task->numpy.argmin(self._ps_loads)
A:tensorflow.contrib.training.python.training.device_setter.shape->tensorflow.python.framework.tensor_shape.TensorShape(op.get_attr('shape'))
tensorflow.contrib.training.GreedyLoadBalancingStrategy(self,num_tasks,load_fn)
tensorflow.contrib.training.byte_size_load_fn(op)
tensorflow.contrib.training.python.training.device_setter.GreedyLoadBalancingStrategy(self,num_tasks,load_fn)
tensorflow.contrib.training.python.training.device_setter.GreedyLoadBalancingStrategy.__init__(self,num_tasks,load_fn)
tensorflow.contrib.training.python.training.device_setter.byte_size_load_fn(op)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/training/python/training/sampling_ops.py----------------------------------------
A:tensorflow.contrib.training.python.training.sampling_ops.tensor_list->tensorflow.python.framework.ops.convert_n_to_tensor_or_indexed_slices(tensors)
A:tensorflow.contrib.training.python.training.sampling_ops.batched->tensorflow.python.training.input.maybe_batch(val_list + [label], keep_input=random_ops.random_uniform([]) < cur_prob, batch_size=batch_size, num_threads=threads_per_queue)
A:tensorflow.contrib.training.python.training.sampling_ops.cur_prob->tensorflow.python.ops.array_ops.gather(accept_probs, label)
A:tensorflow.contrib.training.python.training.sampling_ops.minibatch->tensorflow.python.training.input.maybe_batch(tensor_list, keep_input=random_ops.random_uniform([]) < cur_prob, batch_size=batch_size, num_threads=queue_threads)
A:tensorflow.contrib.training.python.training.sampling_ops.labels->tensorflow.python.ops.control_flow_ops.with_dependencies([check_ops.assert_integer(labels), check_ops.assert_non_negative(labels), check_ops.assert_less(labels, math_ops.cast(prob_length, labels.dtype))], labels)
A:tensorflow.contrib.training.python.training.sampling_ops.target_probs->tensorflow.python.framework.ops.convert_to_tensor(target_probs, dtype=dtypes.float32)
A:tensorflow.contrib.training.python.training.sampling_ops.init_probs->tensorflow.python.ops.control_flow_ops.with_dependencies([assert_op], init_probs)
A:tensorflow.contrib.training.python.training.sampling_ops.(tensor_list, labels, [init_probs, target_probs])->_verify_input(tensor_list, labels, [init_probs, target_probs])
A:tensorflow.contrib.training.python.training.sampling_ops.assert_op->tensorflow.python.ops.control_flow_ops.Assert(math_ops.reduce_all(math_ops.logical_or(math_ops.not_equal(init_probs, 0), math_ops.equal(target_probs, 0))), ['All classes with zero initial probability must also have zero target probability: ', init_probs, target_probs])
A:tensorflow.contrib.training.python.training.sampling_ops.accept_probs->tensorflow.python.ops.control_flow_ops.cond(math_ops.less(proportion_rejected, 0.5), lambda : accept_probs, lambda : logging_ops.Print(accept_probs, [accept_probs], message='Proportion of examples rejected by sampler is high.', first_n=10))
A:tensorflow.contrib.training.python.training.sampling_ops.proportion_rejected->tensorflow.python.ops.math_ops.reduce_sum((1 - accept_probs) * init_probs)
A:tensorflow.contrib.training.python.training.sampling_ops.label->tensorflow.python.ops.array_ops.squeeze(batched[-1], [0])
A:tensorflow.contrib.training.python.training.sampling_ops.num_examples_per_class_seen->num_examples_per_class_seen.assign_add(math_ops.reduce_sum(array_ops.one_hot(labels, num_classes, dtype=dtypes.int64), 0)).assign_add(math_ops.reduce_sum(array_ops.one_hot(labels, num_classes, dtype=dtypes.int64), 0))
A:tensorflow.contrib.training.python.training.sampling_ops.init_prob_estimate->tensorflow.python.ops.math_ops.truediv(num_examples_per_class_seen, math_ops.reduce_sum(num_examples_per_class_seen))
A:tensorflow.contrib.training.python.training.sampling_ops.tensor_shape->tensor.get_shape().with_rank_at_least(1)
A:tensorflow.contrib.training.python.training.sampling_ops.prob_sum->tensorflow.python.ops.math_ops.reduce_sum(probs)
A:tensorflow.contrib.training.python.training.sampling_ops.checked_probs->tensorflow.python.ops.control_flow_ops.with_dependencies([check_ops.assert_non_negative(probs), check_ops.assert_less(prob_sum, 1.0 + tol), check_ops.assert_less(1.0 - tol, prob_sum)], probs)
A:tensorflow.contrib.training.python.training.sampling_ops.prob_length->checked_probs_list[0].get_shape().num_elements()
A:tensorflow.contrib.training.python.training.sampling_ops.lbl_assert->tensorflow.python.ops.check_ops.assert_positive(labels_batch_size)
A:tensorflow.contrib.training.python.training.sampling_ops.ratio_l->tensorflow.python.ops.array_ops.where(math_ops.is_nan(ratio_l), array_ops.zeros_like(ratio_l), ratio_l)
A:tensorflow.contrib.training.python.training.sampling_ops.max_ratio->tensorflow.python.ops.math_ops.reduce_max(ratio_l)
tensorflow.contrib.training._calculate_acceptance_probabilities(init_probs,target_probs)
tensorflow.contrib.training._estimate_data_distribution(labels,num_classes,smoothing_constant=10)
tensorflow.contrib.training._verify_data_inputs(tensor_list)
tensorflow.contrib.training._verify_input(tensor_list,labels,probs_list)
tensorflow.contrib.training.python.training.sampling_ops._calculate_acceptance_probabilities(init_probs,target_probs)
tensorflow.contrib.training.python.training.sampling_ops._estimate_data_distribution(labels,num_classes,smoothing_constant=10)
tensorflow.contrib.training.python.training.sampling_ops._verify_data_inputs(tensor_list)
tensorflow.contrib.training.python.training.sampling_ops._verify_input(tensor_list,labels,probs_list)
tensorflow.contrib.training.python.training.sampling_ops.rejection_sample(tensors,accept_prob_fn,batch_size,queue_threads=1,enqueue_many=False,prebatch_capacity=16,prebatch_threads=1,runtime_checks=False,name=None)
tensorflow.contrib.training.python.training.sampling_ops.stratified_sample(tensors,labels,target_probs,batch_size,init_probs=None,enqueue_many=False,queue_capacity=16,threads_per_queue=1,name=None)
tensorflow.contrib.training.rejection_sample(tensors,accept_prob_fn,batch_size,queue_threads=1,enqueue_many=False,prebatch_capacity=16,prebatch_threads=1,runtime_checks=False,name=None)
tensorflow.contrib.training.stratified_sample(tensors,labels,target_probs,batch_size,init_probs=None,enqueue_many=False,queue_capacity=16,threads_per_queue=1,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/training/python/training/sequence_queueing_state_saver.py----------------------------------------
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.length->tensorflow.python.ops.math_ops.maximum(sparse_lengths)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.key->_check_rank(inputs.key, 0)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.sequences->dict(((k, ops.convert_to_tensor(v, name='sequence_%s' % k)) for (k, v) in sequences.items()))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.context->dict(((k, ops.convert_to_tensor(v, name='context_%s' % k)) for (k, v) in context.items()))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.new_value->tensorflow.python.ops.array_ops.identity(value, name='dims_checked_%s' % debug_prefix)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.expected_rank_value->tensorflow.python.framework.tensor_util.constant_value(expected_rank)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.expected_rank->int(expected_rank_value)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.expected_shape->expected_shape.as_list().as_list()
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.expected_shape_value->tensorflow.python.framework.tensor_util.constant_value(expected_shape)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.value->tensorflow.python.framework.ops.convert_to_tensor(value)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.value_shape->tensorflow.python.framework.ops.convert_to_tensor(value).get_shape()
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.value_dims->tensorflow.python.framework.ops.convert_to_tensor(value).get_shape().as_list()
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.states->dict(((k, ops.convert_to_tensor(v, name='state_%s' % k)) for (k, v) in states.items()))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.sorted_sequences->_sort_by_name(inputs.sequences)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.sorted_context->_sort_by_name(inputs.context)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.sorted_states->_sort_by_name(states)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.indices_where_not_done->tensorflow.python.ops.array_ops.reshape(array_ops.where(math_ops.logical_not(self._state_saver._sequence_is_done)), [-1])
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.keeping_next_key->tensorflow.python.ops.array_ops.gather(self._state_saver._received_next_key, indices_where_not_done)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.keeping_state->tensorflow.python.ops.array_ops.gather(value, indices_where_not_done)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.input_key->tensorflow.python.ops.string_ops.string_join([input_key, string_ops.as_string(random_ops.random_uniform((), minval=0, maxval=100000000, dtype=dtypes.int32, seed=make_keys_unique_seed))])
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.self._capacity_queue->tensorflow.python.ops.data_flow_ops.FIFOQueue(capacity=capacity, dtypes=[dtypes.int32], shapes=[[]])
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.inputs->_SequenceInputWrapper(input_length, input_key, input_sequences, input_context)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.(self._length, self._key, self._sorted_states, self._sorted_sequences, self._sorted_context)->_prepare_sequence_inputs(inputs, initial_states)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.self._padded_length->_check_multiple_of(self._padded_length, self._num_unroll)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.self._sorted_sequences->collections.OrderedDict(((k, _check_dimensions(v, [0], [self._padded_length], debug_prefix='sorted_sequences_%s' % k)) for (k, v) in self._sorted_sequences.items()))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.self._length->tensorflow.python.ops.array_ops.identity(self._length)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.barrier_close->self.barrier.close(cancel_pending_enqueues, 'BarrierClose')
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.fifo_queue_close->self._capacity_queue.close(cancel_pending_enqueues, 'FIFOClose')
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.self._name_to_index->dict(((name, ix) for (ix, name) in enumerate(['__length', '__total_length', '__next_key', '__sequence', '__sequence_count'] + ['__sequence__%s' % k for k in sequences.keys()] + ['__context__%s' % k for k in context.keys()] + ['__state__%s' % k for k in states.keys()])))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.self._barrier->tensorflow.python.ops.data_flow_ops.Barrier(types=types, shapes=shapes)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.sequence_count->tensorflow.python.ops.math_ops.div(self._padded_length, self._num_unroll)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.sequence_count_vec->tensorflow.python.ops.array_ops.expand_dims(sequence_count, 0)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.ones->tensorflow.python.ops.array_ops.ones(sequence_count_vec, dtype=dtypes.int32)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.sequence->tensorflow.python.ops.math_ops.range(sequence_count)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.expanded_length->tensorflow.python.ops.math_ops.minimum(self._num_unroll, expanded_length)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.current_keys->tensorflow.python.ops.string_ops.string_join([string_ops.as_string(sequence, width=5, fill='0'), '_of_', string_ops.as_string(sequence_count, width=5, fill='0'), ':', self._key], name='StringJoinCurrentKeys')
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.next_keys->tensorflow.python.ops.array_ops.concat([array_ops.slice(current_keys, [1], [-1]), array_ops.expand_dims(string_ops.string_join(['STOP:', self._key], name='StringJoinStop'), 0)], 0, name='concat_next_keys')
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.reshaped_sequences->collections.OrderedDict(((k, _check_dimensions(array_ops.reshape(v, array_ops.concat([array_ops.expand_dims(sequence_count, 0), array_ops.expand_dims(self._num_unroll, 0), v.get_shape().as_list()[1:]], 0, name='concat_sequences_%s' % k), name='reshape_sequences_%s' % k), [0, 1] + list(range(2, v.get_shape().ndims + 1)), [sequence_count, self._num_unroll] + v.get_shape().as_list()[1:], debug_prefix='reshaped_sequences_%s' % k)) for (k, v) in self._sorted_sequences.items()))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.expanded_context->collections.OrderedDict(((k, _check_dimensions(array_ops.tile(array_ops.expand_dims(v, 0), array_ops.concat([array_ops.expand_dims(sequence_count, 0), [1] * v.get_shape().ndims], 0, name='concat_context_%s' % k), name='tile_context_%s' % k), [0] + list(range(1, v.get_shape().ndims + 1)), [sequence_count] + v.get_shape().as_list(), debug_prefix='expanded_context_%s' % k)) for (k, v) in self._sorted_context.items()))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.insert_sequence_op->self._barrier.insert_many(self._get_barrier_sequence_index(), current_keys, sequence, name='BarrierInsertSequence')
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.insert_sequence_count_op->self._barrier.insert_many(self._get_barrier_sequence_count_index(), current_keys, expanded_sequence_count, name='BarrierInsertSequenceCount')
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.insert_next_key_op->self._barrier.insert_many(self._get_barrier_next_key_index(), current_keys, next_keys, name='BarrierInsertNextKey')
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.insert_length_op->self._barrier.insert_many(self._get_barrier_length_index(), current_keys, expanded_length, name='BarrierInsertLength')
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.insert_total_length_op->self._barrier.insert_many(self._get_barrier_total_length_index(), current_keys, expanded_total_length, name='BarrierInsertTotalLength')
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.insert_context_ops->dict(((name, self._barrier.insert_many(self._get_barrier_index('context', name), current_keys, value, name='BarrierInsertContext_%s' % name)) for (name, value) in expanded_context.items()))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.insert_sequences_ops->dict(((name, self._barrier.insert_many(self._get_barrier_index('sequence', name), current_keys, value, name='BarrierInsertSequences_%s' % name)) for (name, value) in reshaped_sequences.items()))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.insert_capacity_token_op->self._capacity_queue.enqueue((TOKEN_WITH_IGNORED_VALUE,))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.insert_initial_state_ops->dict(((name, self._barrier.insert_many(self._get_barrier_index('state', name), array_ops.stack([current_keys[0]]), array_ops.stack([value]), name='BarrierInitialInsertState_%s' % name)) for (name, value) in self._uninitialized_states.items()))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.self._prefetch_op->tensorflow.python.ops.control_flow_ops.group(*all_inserts, name='StateSaverPrefetchGroup')
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.received->self._barrier.take_many(self._batch_size, self._allow_small_batch, name='BarrierTakeMany')
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.self._received_context->collections.OrderedDict(((name, received_values[self._get_barrier_index('context', name)]) for name in self._sorted_context.keys()))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.self._received_sequences->collections.OrderedDict(((name, received_values[self._get_barrier_index('sequence', name)]) for name in self._sorted_sequences.keys()))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.self._received_batch_size->tensorflow.python.ops.array_ops.squeeze(array_ops.shape(self._received_length))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.finished_sequences->tensorflow.python.ops.math_ops.reduce_sum(math_ops.cast(self._sequence_is_done, dtypes.int32))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.dequeue_op->self._capacity_queue.dequeue_many(finished_sequences)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.self._received_states->collections.OrderedDict(((name, array_ops.identity(received_values[self._get_barrier_index('state', name)])) for name in self._sorted_states.keys()))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.self._next_batch->NextQueuedSequenceBatch(self)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.(length, input_sequences)->_padding(input_sequences, num_unroll)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.input_sequences[key]->tensorflow.python.ops.array_ops.identity(value, name='multiple_of_checked')
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.(transformed_input_seq, sparse_tensor_keys, tensor_list)->_deconstruct_sparse_tensor_seq(input_sequences)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.stateful_reader->SequenceQueueingStateSaver(batch_size, num_unroll, input_length=input_length, input_key=input_key, input_sequences=transformed_input_seq, input_context=input_context, initial_states=initial_states, capacity=capacity, allow_small_batch=allow_small_batch)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.q_runner->tensorflow.python.training.queue_runner.QueueRunner(stateful_reader, [stateful_reader.prefetch_op] * num_threads, queue_closed_exception_types=(errors.OutOfRangeError, errors.CancelledError))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.sequences_dict[key]->tensorflow.python.framework.ops.convert_to_tensor(value)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.unroll->tensorflow.python.ops.array_ops.constant(num_unroll)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.padding_shape->tensorflow.python.ops.array_ops.concat((num_paddings, array_ops.shape(value)[1:]), 0)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.dummy->tensorflow.python.ops.array_ops.constant('' if value.dtype == dtypes.string else 0, dtype=value.dtype)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.paddings->tensorflow.python.ops.array_ops.fill(dims=padding_shape, value=dummy)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.padded_sequences[key]->tensorflow.python.framework.sparse_tensor.SparseTensor(indices=value.indices, values=value.values, dense_shape=padded_shape)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.padded_shape->tensorflow.python.ops.array_ops.concat([[math_ops.to_int64(padded_length)], value.dense_shape[1:]], 0)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.value_length->tensorflow.python.ops.math_ops.cast(value_length, dtype=dtypes.int64)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.n->tensorflow.python.ops.math_ops.cast(n, dtype=dtypes.int32)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.values->tensorflow.python.ops.array_ops.tile(sp_tensor.values, array_ops.expand_dims(n, 0))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.shape->tensorflow.python.ops.array_ops.concat([array_ops.expand_dims(value_length, 0), sp_tensor.dense_shape], 0)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.multiplied_indices->tensorflow.python.ops.array_ops.tile(array_ops.expand_dims(sp_tensor.indices, 0), array_ops.stack([n, 1, 1]))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.ind->tensorflow.python.ops.array_ops.tile(ind, [1, dim0, 1])
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.indices->tensorflow.python.ops.array_ops.concat([array_ops.expand_dims(idx_batch, 1), array_ops.expand_dims(idx_time, 1), sp_tensor.indices[:, 1:]], axis=1)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.input_sequences[_SPARSE_CONTEXT_PREFIX_KEY + key]->_copy_sparse_tensor(input_context[key])
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.sp_tensor->tensorflow.python.framework.sparse_tensor.SparseTensor(sp_tensor.indices, sp_tensor.values, array_ops.concat([[sp_tensor.dense_shape[0]], [1], sp_tensor.dense_shape[2:]], 0))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.new_shape->tensorflow.python.ops.array_ops.concat([[sp_tensor.dense_shape[0]], sp_tensor.dense_shape[2:]], 0)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.context[new_key]->tensorflow.python.ops.sparse_ops.sparse_reshape(sp_tensor, new_shape)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.transformed_input_seq->dict(input_sequence)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.idx_batch->tensorflow.python.ops.math_ops.to_int64(math_ops.floor(sp_tensor.indices[:, 0] / num_unroll))
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.idx_time->tensorflow.python.ops.math_ops.mod(sp_tensor.indices[:, 0], num_unroll)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.dense_shape->tensorflow.python.ops.array_ops.concat([[math_ops.cast(batch_size, dtype=dtypes.int64)], [math_ops.cast(num_unroll, dtype=dtypes.int64)], sp_tensor.dense_shape[1:]], axis=0)
A:tensorflow.contrib.training.python.training.sequence_queueing_state_saver.num_unroll->tensorflow.python.framework.ops.convert_to_tensor(num_unroll, dtype=dtypes.int64, name='num_unroll_int64')
tensorflow.contrib.training.NextQueuedSequenceBatch(self,state_saver)
tensorflow.contrib.training.NextQueuedSequenceBatch.batch_size(self)
tensorflow.contrib.training.NextQueuedSequenceBatch.context(self)
tensorflow.contrib.training.NextQueuedSequenceBatch.insertion_index(self)
tensorflow.contrib.training.NextQueuedSequenceBatch.key(self)
tensorflow.contrib.training.NextQueuedSequenceBatch.length(self)
tensorflow.contrib.training.NextQueuedSequenceBatch.next_key(self)
tensorflow.contrib.training.NextQueuedSequenceBatch.save_state(self,state_name,value,name=None)
tensorflow.contrib.training.NextQueuedSequenceBatch.sequence(self)
tensorflow.contrib.training.NextQueuedSequenceBatch.sequence_count(self)
tensorflow.contrib.training.NextQueuedSequenceBatch.sequences(self)
tensorflow.contrib.training.NextQueuedSequenceBatch.state(self,state_name)
tensorflow.contrib.training.NextQueuedSequenceBatch.total_length(self)
tensorflow.contrib.training.SequenceQueueingStateSaver(self,batch_size,num_unroll,input_length,input_key,input_sequences,input_context,initial_states,capacity=None,allow_small_batch=False,name=None)
tensorflow.contrib.training.SequenceQueueingStateSaver._create_barrier(self)
tensorflow.contrib.training.SequenceQueueingStateSaver._create_prefetch_op(self)
tensorflow.contrib.training.SequenceQueueingStateSaver._get_barrier_index(self,index_type,name)
tensorflow.contrib.training.SequenceQueueingStateSaver._get_barrier_length_index(self)
tensorflow.contrib.training.SequenceQueueingStateSaver._get_barrier_next_key_index(self)
tensorflow.contrib.training.SequenceQueueingStateSaver._get_barrier_sequence_count_index(self)
tensorflow.contrib.training.SequenceQueueingStateSaver._get_barrier_sequence_index(self)
tensorflow.contrib.training.SequenceQueueingStateSaver._get_barrier_total_length_index(self)
tensorflow.contrib.training.SequenceQueueingStateSaver._prepare_barrier_reads(self)
tensorflow.contrib.training.SequenceQueueingStateSaver._store_index_maps(self,sequences,context,states)
tensorflow.contrib.training.SequenceQueueingStateSaver.barrier(self)
tensorflow.contrib.training.SequenceQueueingStateSaver.batch_size(self)
tensorflow.contrib.training.SequenceQueueingStateSaver.close(self,cancel_pending_enqueues=False,name=None)
tensorflow.contrib.training.SequenceQueueingStateSaver.name(self)
tensorflow.contrib.training.SequenceQueueingStateSaver.next_batch(self)
tensorflow.contrib.training.SequenceQueueingStateSaver.num_unroll(self)
tensorflow.contrib.training.SequenceQueueingStateSaver.prefetch_op(self)
tensorflow.contrib.training._SequenceInputWrapper(self,length,key,sequences,context)
tensorflow.contrib.training._SequenceInputWrapper.context(self)
tensorflow.contrib.training._SequenceInputWrapper.key(self)
tensorflow.contrib.training._SequenceInputWrapper.length(self)
tensorflow.contrib.training._SequenceInputWrapper.sequences(self)
tensorflow.contrib.training._check_dimensions(value,dimensions,expected_sizes,debug_prefix)
tensorflow.contrib.training._check_multiple_of(value,multiple_of)
tensorflow.contrib.training._check_rank(value,expected_rank)
tensorflow.contrib.training._check_shape(value,expected_shape)
tensorflow.contrib.training._deconstruct_sparse_tensor_seq(input_sequence,shared_name=None)
tensorflow.contrib.training._move_sparse_tensor_in_context(context,sequences)
tensorflow.contrib.training._move_sparse_tensor_out_context(input_context,input_sequences,num_unroll)
tensorflow.contrib.training._padding(sequences,num_unroll)
tensorflow.contrib.training._prepare_sequence_inputs(inputs,states)
tensorflow.contrib.training._reconstruct_sparse_tensor_seq(sequence,sparse_tensor_keys,tensor_op_list,batch_size,num_unroll)
tensorflow.contrib.training.batch_sequences_with_states(input_key,input_sequences,input_context,input_length,initial_states,num_unroll,batch_size,num_threads=3,capacity=1000,allow_small_batch=True,pad=True,make_keys_unique=False,make_keys_unique_seed=None,name=None)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.NextQueuedSequenceBatch(self,state_saver)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.NextQueuedSequenceBatch.__init__(self,state_saver)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.NextQueuedSequenceBatch.batch_size(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.NextQueuedSequenceBatch.context(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.NextQueuedSequenceBatch.insertion_index(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.NextQueuedSequenceBatch.key(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.NextQueuedSequenceBatch.length(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.NextQueuedSequenceBatch.next_key(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.NextQueuedSequenceBatch.save_state(self,state_name,value,name=None)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.NextQueuedSequenceBatch.sequence(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.NextQueuedSequenceBatch.sequence_count(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.NextQueuedSequenceBatch.sequences(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.NextQueuedSequenceBatch.state(self,state_name)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.NextQueuedSequenceBatch.total_length(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver(self,batch_size,num_unroll,input_length,input_key,input_sequences,input_context,initial_states,capacity=None,allow_small_batch=False,name=None)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver.__init__(self,batch_size,num_unroll,input_length,input_key,input_sequences,input_context,initial_states,capacity=None,allow_small_batch=False,name=None)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver._create_barrier(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver._create_prefetch_op(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver._get_barrier_index(self,index_type,name)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver._get_barrier_length_index(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver._get_barrier_next_key_index(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver._get_barrier_sequence_count_index(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver._get_barrier_sequence_index(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver._get_barrier_total_length_index(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver._prepare_barrier_reads(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver._store_index_maps(self,sequences,context,states)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver.barrier(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver.batch_size(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver.close(self,cancel_pending_enqueues=False,name=None)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver.name(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver.next_batch(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver.num_unroll(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.SequenceQueueingStateSaver.prefetch_op(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._SequenceInputWrapper(self,length,key,sequences,context)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._SequenceInputWrapper.__init__(self,length,key,sequences,context)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._SequenceInputWrapper.context(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._SequenceInputWrapper.key(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._SequenceInputWrapper.length(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._SequenceInputWrapper.sequences(self)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._check_dimensions(value,dimensions,expected_sizes,debug_prefix)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._check_multiple_of(value,multiple_of)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._check_rank(value,expected_rank)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._check_shape(value,expected_shape)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._deconstruct_sparse_tensor_seq(input_sequence,shared_name=None)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._move_sparse_tensor_in_context(context,sequences)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._move_sparse_tensor_out_context(input_context,input_sequences,num_unroll)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._padding(sequences,num_unroll)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._prepare_sequence_inputs(inputs,states)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver._reconstruct_sparse_tensor_seq(sequence,sparse_tensor_keys,tensor_op_list,batch_size,num_unroll)
tensorflow.contrib.training.python.training.sequence_queueing_state_saver.batch_sequences_with_states(input_key,input_sequences,input_context,input_length,initial_states,num_unroll,batch_size,num_threads=3,capacity=1000,allow_small_batch=True,pad=True,make_keys_unique=False,make_keys_unique_seed=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/training/python/training/bucket_ops.py----------------------------------------
A:tensorflow.contrib.training.python.training.bucket_ops.tensor_list->_as_tensor_list(tensors)
A:tensorflow.contrib.training.python.training.bucket_ops.keep_input->_validate_keep_input(keep_input, enqueue_many=False)
A:tensorflow.contrib.training.python.training.bucket_ops.(tensor_list, sparse_info)->_store_sparse_tensors(tensor_list, enqueue_many=False, keep_input=keep_input)
A:tensorflow.contrib.training.python.training.bucket_ops.bucket_batch_size->tensorflow.python.framework.ops.convert_to_tensor(bucket_batch_size, dtype=dtypes.int32, name='batch_size')
A:tensorflow.contrib.training.python.training.bucket_ops.static_batch_size->tensorflow.python.framework.tensor_util.constant_value(bucket_batch_size)
A:tensorflow.contrib.training.python.training.bucket_ops.types->_dtypes([tensor_list])
A:tensorflow.contrib.training.python.training.bucket_ops.shapes->_shapes([tensor_list], shapes, enqueue_many=False)
A:tensorflow.contrib.training.python.training.bucket_ops.which_bucket->tensorflow.python.ops.math_ops.to_int32(which_bucket)
A:tensorflow.contrib.training.python.training.bucket_ops.queue_creator->_which_queue(dynamic_pad)
A:tensorflow.contrib.training.python.training.bucket_ops.top_queue->tensorflow.python.ops.data_flow_ops.PaddingFIFOQueue(capacity=capacity, dtypes=[dtypes.int32] + types, shapes=[tensor_shape.scalar()] + bucket_shapes, shared_name=shared_name, name='top_queue')
A:tensorflow.contrib.training.python.training.bucket_ops.maybe_enqueue->_smart_cond(keep_input, enqueue_which, control_flow_ops.no_op)
A:tensorflow.contrib.training.python.training.bucket_ops.dequeued->_restore_sparse_tensors(dequeued, sparse_info)
A:tensorflow.contrib.training.python.training.bucket_ops.input_length->tensorflow.python.framework.ops.convert_to_tensor(input_length, dtype=dtypes.int32, name='input_length')
A:tensorflow.contrib.training.python.training.bucket_ops.conditions_c->tensorflow.python.ops.math_ops.logical_and(math_ops.less_equal(buckets_min, input_length), math_ops.less(input_length, buckets_max))
A:tensorflow.contrib.training.python.training.bucket_ops.(_, dequeued)->bucket(tensors=[input_length] + tensor_list, which_bucket=which_bucket, batch_size=batch_size, num_buckets=len(bucket_boundaries) + 1, num_threads=num_threads, capacity=capacity, shapes=shapes, dynamic_pad=dynamic_pad, allow_smaller_final_batch=allow_smaller_final_batch, keep_input=keep_input, shared_name=shared_name)
tensorflow.contrib.training._validate_bucket(tensor_list)
tensorflow.contrib.training.bucket(tensors,which_bucket,batch_size,num_buckets,num_threads=1,capacity=32,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,keep_input=True,shared_name=None,name=None)
tensorflow.contrib.training.bucket_by_sequence_length(input_length,tensors,batch_size,bucket_boundaries,num_threads=1,capacity=32,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,keep_input=True,shared_name=None,name=None)
tensorflow.contrib.training.python.training.bucket_ops._validate_bucket(tensor_list)
tensorflow.contrib.training.python.training.bucket_ops.bucket(tensors,which_bucket,batch_size,num_buckets,num_threads=1,capacity=32,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,keep_input=True,shared_name=None,name=None)
tensorflow.contrib.training.python.training.bucket_ops.bucket_by_sequence_length(input_length,tensors,batch_size,bucket_boundaries,num_threads=1,capacity=32,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,keep_input=True,shared_name=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/training/python/training/hparam_pb2.py----------------------------------------
A:tensorflow.contrib.training.python.training.hparam_pb2._sym_db->google.protobuf.symbol_database.Default()
A:tensorflow.contrib.training.python.training.hparam_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/contrib/training/python/training/hparam.proto', package='tensorflow', syntax='proto3', serialized_pb=_b('\n8tensorflow/contrib/training/python/training/hparam.proto\x12\ntensorflow"Ö\x04\n\tHParamDef\x121\n\x06hparam\x18\x01 \x03(\x0b2!.tensorflow.HParamDef.HparamEntry\x1a\x1a\n\tBytesList\x12\r\n\x05value\x18\x01 \x03(\x0c\x1a\x1e\n\tFloatList\x12\x11\n\x05value\x18\x01 \x03(\x02B\x02\x10\x01\x1a\x1e\n\tInt64List\x12\x11\n\x05value\x18\x01 \x03(\x03B\x02\x10\x01\x1a\x1d\n\x08BoolList\x12\x11\n\x05value\x18\x01 \x03(\x08B\x02\x10\x01\x1aÉ\x02\n\nHParamType\x12\x15\n\x0bint64_value\x18\x01 \x01(\x03H\x00\x12\x15\n\x0bfloat_value\x18\x02 \x01(\x02H\x00\x12\x15\n\x0bbytes_value\x18\x03 \x01(\x0cH\x00\x12\x14\n\nbool_value\x18\x07 \x01(\x08H\x00\x125\n\nint64_list\x18\x04 \x01(\x0b2\x1f.tensorflow.HParamDef.Int64ListH\x00\x125\n\nfloat_list\x18\x05 \x01(\x0b2\x1f.tensorflow.HParamDef.FloatListH\x00\x125\n\nbytes_list\x18\x06 \x01(\x0b2\x1f.tensorflow.HParamDef.BytesListH\x00\x123\n\tbool_list\x18\x08 \x01(\x0b2\x1e.tensorflow.HParamDef.BoolListH\x00B\x06\n\x04kind\x1aO\n\x0bHparamEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12/\n\x05value\x18\x02 \x01(\x0b2 .tensorflow.HParamDef.HParamType:\x028\x01B\x03ø\x01\x01b\x06proto3'))
A:tensorflow.contrib.training.python.training.hparam_pb2._HPARAMDEF_BYTESLIST->google.protobuf.descriptor.Descriptor(name='BytesList', full_name='tensorflow.HParamDef.BytesList', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='value', full_name='tensorflow.HParamDef.BytesList.value', index=0, number=1, type=12, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=137, serialized_end=163)
A:tensorflow.contrib.training.python.training.hparam_pb2._HPARAMDEF_FLOATLIST->google.protobuf.descriptor.Descriptor(name='FloatList', full_name='tensorflow.HParamDef.FloatList', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='value', full_name='tensorflow.HParamDef.FloatList.value', index=0, number=1, type=2, cpp_type=6, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01')))], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=165, serialized_end=195)
A:tensorflow.contrib.training.python.training.hparam_pb2._HPARAMDEF_INT64LIST->google.protobuf.descriptor.Descriptor(name='Int64List', full_name='tensorflow.HParamDef.Int64List', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='value', full_name='tensorflow.HParamDef.Int64List.value', index=0, number=1, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01')))], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=197, serialized_end=227)
A:tensorflow.contrib.training.python.training.hparam_pb2._HPARAMDEF_BOOLLIST->google.protobuf.descriptor.Descriptor(name='BoolList', full_name='tensorflow.HParamDef.BoolList', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='value', full_name='tensorflow.HParamDef.BoolList.value', index=0, number=1, type=8, cpp_type=7, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01')))], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=229, serialized_end=258)
A:tensorflow.contrib.training.python.training.hparam_pb2._HPARAMDEF_HPARAMTYPE->google.protobuf.descriptor.Descriptor(name='HParamType', full_name='tensorflow.HParamDef.HParamType', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='int64_value', full_name='tensorflow.HParamDef.HParamType.int64_value', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='float_value', full_name='tensorflow.HParamDef.HParamType.float_value', index=1, number=2, type=2, cpp_type=6, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='bytes_value', full_name='tensorflow.HParamDef.HParamType.bytes_value', index=2, number=3, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='bool_value', full_name='tensorflow.HParamDef.HParamType.bool_value', index=3, number=7, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='int64_list', full_name='tensorflow.HParamDef.HParamType.int64_list', index=4, number=4, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='float_list', full_name='tensorflow.HParamDef.HParamType.float_list', index=5, number=5, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='bytes_list', full_name='tensorflow.HParamDef.HParamType.bytes_list', index=6, number=6, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='bool_list', full_name='tensorflow.HParamDef.HParamType.bool_list', index=7, number=8, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[_descriptor.OneofDescriptor(name='kind', full_name='tensorflow.HParamDef.HParamType.kind', index=0, containing_type=None, fields=[])], serialized_start=261, serialized_end=590)
A:tensorflow.contrib.training.python.training.hparam_pb2._HPARAMDEF_HPARAMENTRY->google.protobuf.descriptor.Descriptor(name='HparamEntry', full_name='tensorflow.HParamDef.HparamEntry', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='key', full_name='tensorflow.HParamDef.HparamEntry.key', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None), _descriptor.FieldDescriptor(name='value', full_name='tensorflow.HParamDef.HparamEntry.value', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[], enum_types=[], options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01')), is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=592, serialized_end=671)
A:tensorflow.contrib.training.python.training.hparam_pb2._HPARAMDEF->google.protobuf.descriptor.Descriptor(name='HParamDef', full_name='tensorflow.HParamDef', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='hparam', full_name='tensorflow.HParamDef.hparam', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, options=None)], extensions=[], nested_types=[_HPARAMDEF_BYTESLIST, _HPARAMDEF_FLOATLIST, _HPARAMDEF_INT64LIST, _HPARAMDEF_BOOLLIST, _HPARAMDEF_HPARAMTYPE, _HPARAMDEF_HPARAMENTRY], enum_types=[], options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=73, serialized_end=671)
A:tensorflow.contrib.training.python.training.hparam_pb2.HParamDef->google.protobuf.reflection.GeneratedProtocolMessageType('HParamDef', (_message.Message,), dict(BytesList=_reflection.GeneratedProtocolMessageType('BytesList', (_message.Message,), dict(DESCRIPTOR=_HPARAMDEF_BYTESLIST, __module__='tensorflow.contrib.training.python.training.hparam_pb2')), FloatList=_reflection.GeneratedProtocolMessageType('FloatList', (_message.Message,), dict(DESCRIPTOR=_HPARAMDEF_FLOATLIST, __module__='tensorflow.contrib.training.python.training.hparam_pb2')), Int64List=_reflection.GeneratedProtocolMessageType('Int64List', (_message.Message,), dict(DESCRIPTOR=_HPARAMDEF_INT64LIST, __module__='tensorflow.contrib.training.python.training.hparam_pb2')), BoolList=_reflection.GeneratedProtocolMessageType('BoolList', (_message.Message,), dict(DESCRIPTOR=_HPARAMDEF_BOOLLIST, __module__='tensorflow.contrib.training.python.training.hparam_pb2')), HParamType=_reflection.GeneratedProtocolMessageType('HParamType', (_message.Message,), dict(DESCRIPTOR=_HPARAMDEF_HPARAMTYPE, __module__='tensorflow.contrib.training.python.training.hparam_pb2')), HparamEntry=_reflection.GeneratedProtocolMessageType('HparamEntry', (_message.Message,), dict(DESCRIPTOR=_HPARAMDEF_HPARAMENTRY, __module__='tensorflow.contrib.training.python.training.hparam_pb2')), DESCRIPTOR=_HPARAMDEF, __module__='tensorflow.contrib.training.python.training.hparam_pb2'))
A:tensorflow.contrib.training.python.training.hparam_pb2.DESCRIPTOR._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('ø\x01\x01'))
A:tensorflow.contrib.training.python.training.hparam_pb2._HPARAMDEF_FLOATLIST.fields_by_name['value']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.contrib.training.python.training.hparam_pb2._HPARAMDEF_INT64LIST.fields_by_name['value']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.contrib.training.python.training.hparam_pb2._HPARAMDEF_BOOLLIST.fields_by_name['value']._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\x10\x01'))
A:tensorflow.contrib.training.python.training.hparam_pb2._HPARAMDEF_HPARAMENTRY._options->google.protobuf.descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\x01'))


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/training/python/training/training.py----------------------------------------
A:tensorflow.contrib.training.python.training.training.tmp->tensorflow.python.ops.clip_ops.clip_by_norm(grad.values, max_norm)
A:tensorflow.contrib.training.python.training.training.grad->tensorflow.python.framework.ops.IndexedSlices(tmp, grad.indices, grad.dense_shape)
A:tensorflow.contrib.training.python.training.training.global_step->tensorflow.contrib.framework.python.ops.variables.get_or_create_global_step()
A:tensorflow.contrib.training.python.training.training.global_update_ops->set(ops.get_collection(ops.GraphKeys.UPDATE_OPS))
A:tensorflow.contrib.training.python.training.training.update_ops->set(update_ops)
A:tensorflow.contrib.training.python.training.training.barrier->tensorflow.python.ops.control_flow_ops.no_op(name='update_barrier')
A:tensorflow.contrib.training.python.training.training.total_loss->tensorflow.python.ops.array_ops.check_numerics(total_loss, 'LossTensor is inf or nan')
A:tensorflow.contrib.training.python.training.training.variables_to_train->tensorflow.python.ops.variables.trainable_variables()
A:tensorflow.contrib.training.python.training.training.grads->transform_grads_fn(grads)
A:tensorflow.contrib.training.python.training.training.grad_updates->optimizer.apply_gradients(grads, global_step=global_step)
A:tensorflow.contrib.training.python.training.training.train_op->tensorflow.python.ops.control_flow_ops.with_dependencies([grad_updates], total_loss)
A:tensorflow.contrib.training.python.training.training.train_ops->tensorflow.python.framework.ops.get_collection_ref(ops.GraphKeys.TRAIN_OP)
A:tensorflow.contrib.training.python.training.training.loss->session.run(train_op)
tensorflow.contrib.training.add_gradients_summaries(grads_and_vars)
tensorflow.contrib.training.clip_gradient_norms(gradients_to_variables,max_norm)
tensorflow.contrib.training.create_train_op(total_loss,optimizer,global_step=_USE_GLOBAL_STEP,update_ops=None,variables_to_train=None,transform_grads_fn=None,summarize_gradients=False,gate_gradients=tf_optimizer.Optimizer.GATE_OP,aggregation_method=None,colocate_gradients_with_ops=False)
tensorflow.contrib.training.multiply_gradients(grads_and_vars,gradient_multipliers)
tensorflow.contrib.training.python.training.training.add_gradients_summaries(grads_and_vars)
tensorflow.contrib.training.python.training.training.clip_gradient_norms(gradients_to_variables,max_norm)
tensorflow.contrib.training.python.training.training.create_train_op(total_loss,optimizer,global_step=_USE_GLOBAL_STEP,update_ops=None,variables_to_train=None,transform_grads_fn=None,summarize_gradients=False,gate_gradients=tf_optimizer.Optimizer.GATE_OP,aggregation_method=None,colocate_gradients_with_ops=False)
tensorflow.contrib.training.python.training.training.multiply_gradients(grads_and_vars,gradient_multipliers)
tensorflow.contrib.training.python.training.training.train(train_op,logdir,master='',is_chief=True,scaffold=None,hooks=None,chief_only_hooks=None,save_checkpoint_secs=600,save_summaries_steps=100,config=None)
tensorflow.contrib.training.train(train_op,logdir,master='',is_chief=True,scaffold=None,hooks=None,chief_only_hooks=None,save_checkpoint_secs=600,save_summaries_steps=100,config=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/training/python/training/failure_tolerator.py----------------------------------------
A:tensorflow.contrib.training.python.training.failure_tolerator.self.handled->tuple(handled_exceptions)
A:tensorflow.contrib.training.python.training.failure_tolerator.adjusted_now->self._adjusted_now()
tensorflow.contrib.training.FailureTolerator(self,limit=5,init_delay=5.0,backoff_factor=2.0,forgive_after_seconds=6000,handled_exceptions=None)
tensorflow.contrib.training.FailureTolerator._adjusted_now(self)
tensorflow.contrib.training.FailureTolerator._forgive_old(self)
tensorflow.contrib.training.FailureTolerator._handle_error(self,e)
tensorflow.contrib.training.FailureTolerator.forgive(self)
tensorflow.contrib.training.python.training.failure_tolerator.FailureTolerator(self,limit=5,init_delay=5.0,backoff_factor=2.0,forgive_after_seconds=6000,handled_exceptions=None)
tensorflow.contrib.training.python.training.failure_tolerator.FailureTolerator.__init__(self,limit=5,init_delay=5.0,backoff_factor=2.0,forgive_after_seconds=6000,handled_exceptions=None)
tensorflow.contrib.training.python.training.failure_tolerator.FailureTolerator._adjusted_now(self)
tensorflow.contrib.training.python.training.failure_tolerator.FailureTolerator._forgive_old(self)
tensorflow.contrib.training.python.training.failure_tolerator.FailureTolerator._handle_error(self,e)
tensorflow.contrib.training.python.training.failure_tolerator.FailureTolerator.forgive(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/training/python/training/hparam.py----------------------------------------
A:tensorflow.contrib.training.python.training.hparam.param_re->re.compile('(?P<name>[a-zA-Z][\\w]*)\\s*=\\s*((?P<val>[^,\\[]*)|\\[(?P<vals>[^\\]]*)\\])($|,)')
A:tensorflow.contrib.training.python.training.hparam.m->re.compile('(?P<name>[a-zA-Z][\\w]*)\\s*=\\s*((?P<val>[^,\\[]*)|\\[(?P<vals>[^\\]]*)\\])($|,)').match(values, pos)
A:tensorflow.contrib.training.python.training.hparam.pos->re.compile('(?P<name>[a-zA-Z][\\w]*)\\s*=\\s*((?P<val>[^,\\[]*)|\\[(?P<vals>[^\\]]*)\\])($|,)').match(values, pos).end()
A:tensorflow.contrib.training.python.training.hparam.m_dict->re.compile('(?P<name>[a-zA-Z][\\w]*)\\s*=\\s*((?P<val>[^,\\[]*)|\\[(?P<vals>[^\\]]*)\\])($|,)').match(values, pos).groupdict()
A:tensorflow.contrib.training.python.training.hparam.ret[name]->parse(m_dict['val'])
A:tensorflow.contrib.training.python.training.hparam.elements->filter(None, re.split('[ ,]', m_dict['vals']))
A:tensorflow.contrib.training.python.training.hparam.kind->HParams._get_kind_name(param_type, is_list)
A:tensorflow.contrib.training.python.training.hparam.type_map->dict()
A:tensorflow.contrib.training.python.training.hparam.values_map->json.loads(values_json)
A:tensorflow.contrib.training.python.training.hparam.hparam_proto->tensorflow.contrib.training.python.training.hparam_pb2.HParamDef()
A:tensorflow.contrib.training.python.training.hparam.(param_type, is_list)->self._hparam_types.get(name, (None, None))
A:tensorflow.contrib.training.python.training.hparam.v->tensorflow.python.util.compat.as_bytes(getattr(self, name))
tensorflow.contrib.training.HParams(self,hparam_def=None,model_structure=None,**kwargs)
tensorflow.contrib.training.HParams.__str__(self)
tensorflow.contrib.training.HParams._get_kind_name(param_type,is_list)
tensorflow.contrib.training.HParams._init_from_proto(self,hparam_def)
tensorflow.contrib.training.HParams._set_from_map(self,values_map)
tensorflow.contrib.training.HParams.add_hparam(self,name,value)
tensorflow.contrib.training.HParams.from_proto(hparam_def,import_scope=None)
tensorflow.contrib.training.HParams.get_model_structure(self)
tensorflow.contrib.training.HParams.parse(self,values)
tensorflow.contrib.training.HParams.parse_json(self,values_json)
tensorflow.contrib.training.HParams.set_model_structure(self,model_structure)
tensorflow.contrib.training.HParams.to_json(self)
tensorflow.contrib.training.HParams.to_proto(self,export_scope=None)
tensorflow.contrib.training.HParams.values(self)
tensorflow.contrib.training.parse_values(values,type_map)
tensorflow.contrib.training.python.training.hparam.HParams(self,hparam_def=None,model_structure=None,**kwargs)
tensorflow.contrib.training.python.training.hparam.HParams.__init__(self,hparam_def=None,model_structure=None,**kwargs)
tensorflow.contrib.training.python.training.hparam.HParams.__str__(self)
tensorflow.contrib.training.python.training.hparam.HParams._get_kind_name(param_type,is_list)
tensorflow.contrib.training.python.training.hparam.HParams._init_from_proto(self,hparam_def)
tensorflow.contrib.training.python.training.hparam.HParams._set_from_map(self,values_map)
tensorflow.contrib.training.python.training.hparam.HParams.add_hparam(self,name,value)
tensorflow.contrib.training.python.training.hparam.HParams.from_proto(hparam_def,import_scope=None)
tensorflow.contrib.training.python.training.hparam.HParams.get_model_structure(self)
tensorflow.contrib.training.python.training.hparam.HParams.parse(self,values)
tensorflow.contrib.training.python.training.hparam.HParams.parse_json(self,values_json)
tensorflow.contrib.training.python.training.hparam.HParams.set_model_structure(self,model_structure)
tensorflow.contrib.training.python.training.hparam.HParams.to_json(self)
tensorflow.contrib.training.python.training.hparam.HParams.to_proto(self,export_scope=None)
tensorflow.contrib.training.python.training.hparam.HParams.values(self)
tensorflow.contrib.training.python.training.hparam.parse_values(values,type_map)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/training/python/training/feeder.py----------------------------------------
A:tensorflow.contrib.training.python.training.feeder.self._local_q->tensorflow.python.ops.data_flow_ops.FIFOQueue(capacity=self._capacity, dtypes=self._dtypes, shapes=self._shapes, name=self._shared_name, shared_name=self._shared_name)
A:tensorflow.contrib.training.python.training.feeder.self._feeding_event->threading.Event()
A:tensorflow.contrib.training.python.training.feeder.enq_op->self._local_q.enqueue_many(tensors)
A:tensorflow.contrib.training.python.training.feeder.local_value->self.get_fed_tensors()
A:tensorflow.contrib.training.python.training.feeder.remote_q->tensorflow.python.ops.data_flow_ops.FIFOQueue(capacity=self._capacity, dtypes=self._dtypes, shapes=self._shapes, name=self._shared_name, shared_name=self._shared_name)
A:tensorflow.contrib.training.python.training.feeder.remote_enq_op->tensorflow.python.ops.data_flow_ops.FIFOQueue(capacity=self._capacity, dtypes=self._dtypes, shapes=self._shapes, name=self._shared_name, shared_name=self._shared_name).enqueue(local_value)
A:tensorflow.contrib.training.python.training.feeder.device_spec->tensorflow.python.framework.device.DeviceSpec.from_string(base_device_spec or '')
A:tensorflow.contrib.training.python.training.feeder.outer_coordinator->tensorflow.python.training.coordinator.Coordinator()
A:tensorflow.contrib.training.python.training.feeder.session->sess_callback()
A:tensorflow.contrib.training.python.training.feeder.tolerator->tensorflow.contrib.training.python.training.failure_tolerator.FailureTolerator(limit=5)
A:tensorflow.contrib.training.python.training.feeder.inner_coordinator->tensorflow.python.training.coordinator.Coordinator()
A:tensorflow.contrib.training.python.training.feeder.inner_session->sess_callback()
A:tensorflow.contrib.training.python.training.feeder.runner->tensorflow.python.training.queue_runner.QueueRunner(queue, enq_ops, cancel_op=self._fake_op, close_op=self._fake_op)
A:tensorflow.contrib.training.python.training.feeder.result->threading.Thread(target=_link_thread)
tensorflow.contrib.training.Feeder(self,dtypes,shapes=None,capacity=10,shared_name='feeding_queue')
tensorflow.contrib.training.Feeder._add_remote_queue_runner(self,queue,enq_ops)
tensorflow.contrib.training.Feeder._feed_remote_queues_forever(self,sess_callback,outer_coordinator,tolerator)
tensorflow.contrib.training.Feeder.add_remote_device(self,remote_device)
tensorflow.contrib.training.Feeder.add_remote_devices(self,devices)
tensorflow.contrib.training.Feeder.add_remote_replicas(self,job_name,replica_count,feeder_task_num=None,replicas_per_feeder=None,base_device_spec=None)
tensorflow.contrib.training.Feeder.get_fed_tensors(self)
tensorflow.contrib.training.Feeder.get_many_fed_tensors(self,batch_size)
tensorflow.contrib.training.Feeder.run_feeding_forever(self,sess_callback,outer_coordinator=None,tolerator=None,start_queue_runners=True)
tensorflow.contrib.training.Feeder.set_fed_tensors(self,tensors)
tensorflow.contrib.training.Feeder.set_many_fed_tensors(self,tensors)
tensorflow.contrib.training.Feeder.wait_until_feeding(self,timeout=None)
tensorflow.contrib.training._link_coordinators(inner_coord,outer_coord,start=True,wait_time=5)
tensorflow.contrib.training.python.training.feeder.Feeder(self,dtypes,shapes=None,capacity=10,shared_name='feeding_queue')
tensorflow.contrib.training.python.training.feeder.Feeder.__init__(self,dtypes,shapes=None,capacity=10,shared_name='feeding_queue')
tensorflow.contrib.training.python.training.feeder.Feeder._add_remote_queue_runner(self,queue,enq_ops)
tensorflow.contrib.training.python.training.feeder.Feeder._feed_remote_queues_forever(self,sess_callback,outer_coordinator,tolerator)
tensorflow.contrib.training.python.training.feeder.Feeder.add_remote_device(self,remote_device)
tensorflow.contrib.training.python.training.feeder.Feeder.add_remote_devices(self,devices)
tensorflow.contrib.training.python.training.feeder.Feeder.add_remote_replicas(self,job_name,replica_count,feeder_task_num=None,replicas_per_feeder=None,base_device_spec=None)
tensorflow.contrib.training.python.training.feeder.Feeder.get_fed_tensors(self)
tensorflow.contrib.training.python.training.feeder.Feeder.get_many_fed_tensors(self,batch_size)
tensorflow.contrib.training.python.training.feeder.Feeder.run_feeding_forever(self,sess_callback,outer_coordinator=None,tolerator=None,start_queue_runners=True)
tensorflow.contrib.training.python.training.feeder.Feeder.set_fed_tensors(self,tensors)
tensorflow.contrib.training.python.training.feeder.Feeder.set_many_fed_tensors(self,tensors)
tensorflow.contrib.training.python.training.feeder.Feeder.wait_until_feeding(self,timeout=None)
tensorflow.contrib.training.python.training.feeder._link_coordinators(inner_coord,outer_coord,start=True,wait_time=5)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/training/python/training/tuner.py----------------------------------------
tensorflow.contrib.training.Tuner(object)
tensorflow.contrib.training.Tuner.next_trial(self)
tensorflow.contrib.training.Tuner.run_experiment(self,experiment_fn)
tensorflow.contrib.training.python.training.tuner.Tuner(object)
tensorflow.contrib.training.python.training.tuner.Tuner.next_trial(self)
tensorflow.contrib.training.python.training.tuner.Tuner.run_experiment(self,experiment_fn)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/training/python/training/resample.py----------------------------------------
A:tensorflow.contrib.training.python.training.resample.counts->tensorflow.python.framework.ops.convert_to_tensor(counts, name='counts')
A:tensorflow.contrib.training.python.training.resample.value->tensorflow.python.ops.array_ops.fill(counts[i:i + 1], i)
A:tensorflow.contrib.training.python.training.resample.init_output_array->tensorflow.python.ops.tensor_array_ops.TensorArray(dtype=dtypes.int32, size=size, infer_shape=False)
A:tensorflow.contrib.training.python.training.resample.(output_array, num_writes)->tensorflow.python.ops.control_flow_ops.while_loop(cond, body, loop_vars=[init_output_array, 0])
A:tensorflow.contrib.training.python.training.resample.rates->tensorflow.python.framework.ops.convert_to_tensor(rates, name='rates')
A:tensorflow.contrib.training.python.training.resample.sample_counts->tensorflow.python.ops.math_ops.cast(control_flow_ops.cond(array_ops.shape(rates)[0] > 0, lambda : random_ops.random_poisson(rates, (), rates.dtype, seed=seed), lambda : array_ops.zeros(shape=[0], dtype=rates.dtype)), dtypes.int32)
A:tensorflow.contrib.training.python.training.resample.sample_indices->tensorflow.python.ops.array_ops.stop_gradient(sample_indices)
A:tensorflow.contrib.training.python.training.resample.estimated_mean->tensorflow.python.ops.variable_scope.get_local_variable('estimated_mean', initializer=math_ops.cast(0, weights.dtype), dtype=weights.dtype)
A:tensorflow.contrib.training.python.training.resample.batch_mean->tensorflow.python.ops.math_ops.reduce_mean(weights)
A:tensorflow.contrib.training.python.training.resample.mean->tensorflow.python.training.moving_averages.assign_moving_average(estimated_mean, batch_mean, mean_decay)
A:tensorflow.contrib.training.python.training.resample.results->resample_at_rate([rates] + inputs, rates, scope=opscope, seed=seed, back_prop=False)
tensorflow.contrib.training._repeat_range(counts,name=None)
tensorflow.contrib.training.python.training.resample._repeat_range(counts,name=None)
tensorflow.contrib.training.python.training.resample.resample_at_rate(inputs,rates,scope=None,seed=None,back_prop=False)
tensorflow.contrib.training.python.training.resample.weighted_resample(inputs,weights,overall_rate,scope=None,mean_decay=0.999,seed=None)
tensorflow.contrib.training.resample_at_rate(inputs,rates,scope=None,seed=None,back_prop=False)
tensorflow.contrib.training.weighted_resample(inputs,weights,overall_rate,scope=None,mean_decay=0.999,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/nccl/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/nccl/python/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/nccl/python/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/nccl/python/ops/nccl_ops.py----------------------------------------
A:tensorflow.contrib.nccl.python.ops.nccl_ops._nccl_ops_so->tensorflow.contrib.util.loader.load_op_library(resource_loader.get_path_to_datafile('_nccl_ops.so'))
A:tensorflow.contrib.nccl.python.ops.nccl_ops.shared_name->_get_shared_name()
A:tensorflow.contrib.nccl.python.ops.nccl_ops.send->tensorflow.contrib.nccl.ops.gen_nccl_ops.nccl_broadcast_send(input=src_tensor, num_devices=len(all_devices), shared_name=shared_name)
A:tensorflow.contrib.nccl.python.ops.nccl_ops.shape_op->tensorflow.python.ops.array_ops.shape(src_tensor, out_type=dtypes.int64)
A:tensorflow.contrib.nccl.python.ops.nccl_ops._lock->threading.Lock()
tensorflow.contrib.nccl._apply_all_reduce(reduction_op,tensors)
tensorflow.contrib.nccl._get_shared_name()
tensorflow.contrib.nccl.all_max(tensors)
tensorflow.contrib.nccl.all_min(tensors)
tensorflow.contrib.nccl.all_prod(tensors)
tensorflow.contrib.nccl.all_sum(tensors)
tensorflow.contrib.nccl.broadcast(src_tensor,dst_devices)
tensorflow.contrib.nccl.python.ops.nccl_ops._apply_all_reduce(reduction_op,tensors)
tensorflow.contrib.nccl.python.ops.nccl_ops._get_shared_name()
tensorflow.contrib.nccl.python.ops.nccl_ops.all_max(tensors)
tensorflow.contrib.nccl.python.ops.nccl_ops.all_min(tensors)
tensorflow.contrib.nccl.python.ops.nccl_ops.all_prod(tensors)
tensorflow.contrib.nccl.python.ops.nccl_ops.all_sum(tensors)
tensorflow.contrib.nccl.python.ops.nccl_ops.broadcast(src_tensor,dst_devices)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/nccl/ops/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/nccl/ops/gen_nccl_ops.py----------------------------------------
A:tensorflow.contrib.nccl.ops.gen_nccl_ops.result->_InitOpDefLibrary().apply_op('NcclBroadcastSend', input=input, num_devices=num_devices, shared_name=shared_name, name=name)
A:tensorflow.contrib.nccl.ops.gen_nccl_ops.op_list->tensorflow.core.framework.op_def_pb2.OpList()
A:tensorflow.contrib.nccl.ops.gen_nccl_ops.op_def_lib->tensorflow.python.framework.op_def_library.OpDefLibrary()
A:tensorflow.contrib.nccl.ops.gen_nccl_ops._op_def_lib->_InitOpDefLibrary()
tensorflow.contrib.nccl.ops.gen_nccl_ops._InitOpDefLibrary()
tensorflow.contrib.nccl.ops.gen_nccl_ops.nccl_all_reduce(input,reduction,num_devices,shared_name,name=None)
tensorflow.contrib.nccl.ops.gen_nccl_ops.nccl_broadcast_recv(shape,T,num_devices,shared_name,name=None)
tensorflow.contrib.nccl.ops.gen_nccl_ops.nccl_broadcast_send(input,num_devices,shared_name,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/util/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/util/loader.py----------------------------------------
A:tensorflow.contrib.util.loader.path->tensorflow.python.platform.resource_loader.get_path_to_datafile(path)
A:tensorflow.contrib.util.loader.ret->tensorflow.python.framework.load_library.load_op_library(path)
tensorflow.contrib.util.loader.load_op_library(path)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/graph_editor/select.py----------------------------------------
A:tensorflow.contrib.graph_editor.select._RE_TYPE->type(re.compile(''))
A:tensorflow.contrib.graph_editor.select.ops->select_ops(*args, restrict_ops_regex=False, **kwargs)
A:tensorflow.contrib.graph_editor.select.ts_set->set()
A:tensorflow.contrib.graph_editor.select.ts->select_ts(*args, restrict_ts_regex=True, **kwargs)
A:tensorflow.contrib.graph_editor.select.regex_obj->make_regex(regex)
A:tensorflow.contrib.graph_editor.select.(control_inputs, control_outputs)->check_cios(control_inputs, control_outputs, control_ios)
A:tensorflow.contrib.graph_editor.select.input_ts->_get_input_ts(ops)
A:tensorflow.contrib.graph_editor.select.output_ts->_get_output_ts(ops)
A:tensorflow.contrib.graph_editor.select.output_ts_set->frozenset(output_ts)
A:tensorflow.contrib.graph_editor.select.ops_set->frozenset(ops)
A:tensorflow.contrib.graph_editor.select.consumers->frozenset(t.consumers())
A:tensorflow.contrib.graph_editor.select.inside_ts_set->frozenset(inside_ts)
A:tensorflow.contrib.graph_editor.select.only_inside_ts_set->frozenset(only_inside_ts)
A:tensorflow.contrib.graph_editor.select.seed_ops->frozenset(util.make_list_of_op(seed_ops))
A:tensorflow.contrib.graph_editor.select.boundary_ops->set(util.make_list_of_op(boundary_ops))
A:tensorflow.contrib.graph_editor.select.res->set(seed_ops)
A:tensorflow.contrib.graph_editor.select.wave->set(seed_ops)
A:tensorflow.contrib.graph_editor.select.new_wave->set()
A:tensorflow.contrib.graph_editor.select.ops_io->get_ops_ios(wave, control_inputs, control_outputs)
A:tensorflow.contrib.graph_editor.select.(_, control_outputs)->check_cios(False, control_outputs)
A:tensorflow.contrib.graph_editor.select.stop_at_ts->frozenset(util.make_list_of_t(stop_at_ts))
A:tensorflow.contrib.graph_editor.select.within_ops->frozenset(within_ops)
A:tensorflow.contrib.graph_editor.select.result->list(seed_ops)
A:tensorflow.contrib.graph_editor.select.forward_ops->get_forward_walk_ops(forward_seed_ops, inclusive=forward_inclusive, within_ops=within_ops, control_outputs=control_outputs)
A:tensorflow.contrib.graph_editor.select.backward_ops->get_backward_walk_ops(backward_seed_ops, inclusive=backward_inclusive, within_ops=within_ops, control_inputs=control_inputs)
A:tensorflow.contrib.graph_editor.select.regex->make_regex(arg)
A:tensorflow.contrib.graph_editor.select.ops_->filter_ops_from_regex(graph, regex)
A:tensorflow.contrib.graph_editor.select.ops_aux->tensorflow.contrib.graph_editor.util.make_list_of_op(arg, ignore_ts=True)
A:tensorflow.contrib.graph_editor.select.ts_->filter_ts_from_regex(graph, regex)
A:tensorflow.contrib.graph_editor.select.ts_aux->tensorflow.contrib.graph_editor.util.make_list_of_t(arg, ignore_ops=True)
tensorflow.contrib.graph_editor._get_input_ts(ops)
tensorflow.contrib.graph_editor._get_output_ts(ops)
tensorflow.contrib.graph_editor.can_be_regex(obj)
tensorflow.contrib.graph_editor.check_cios(control_inputs=False,control_outputs=None,control_ios=None)
tensorflow.contrib.graph_editor.compute_boundary_ts(ops)
tensorflow.contrib.graph_editor.filter_ops(ops,positive_filter)
tensorflow.contrib.graph_editor.filter_ops_from_regex(ops,regex)
tensorflow.contrib.graph_editor.filter_ts(ops,positive_filter)
tensorflow.contrib.graph_editor.filter_ts_from_regex(ops,regex)
tensorflow.contrib.graph_editor.get_backward_walk_ops(seed_ops,inclusive=True,within_ops=None,stop_at_ts=(),control_inputs=False)
tensorflow.contrib.graph_editor.get_forward_walk_ops(seed_ops,inclusive=True,within_ops=None,stop_at_ts=(),control_outputs=None)
tensorflow.contrib.graph_editor.get_name_scope_ops(ops,scope)
tensorflow.contrib.graph_editor.get_ops_ios(ops,control_inputs=False,control_outputs=None,control_ios=None)
tensorflow.contrib.graph_editor.get_walks_intersection_ops(forward_seed_ops,backward_seed_ops,forward_inclusive=True,backward_inclusive=True,within_ops=None,control_inputs=False,control_outputs=None,control_ios=None)
tensorflow.contrib.graph_editor.get_walks_union_ops(forward_seed_ops,backward_seed_ops,forward_inclusive=True,backward_inclusive=True,within_ops=None,control_inputs=False,control_outputs=None,control_ios=None)
tensorflow.contrib.graph_editor.get_within_boundary_ops(ops,seed_ops,boundary_ops=(),inclusive=True,control_inputs=False,control_outputs=None,control_ios=None)
tensorflow.contrib.graph_editor.make_regex(obj)
tensorflow.contrib.graph_editor.select._get_input_ts(ops)
tensorflow.contrib.graph_editor.select._get_output_ts(ops)
tensorflow.contrib.graph_editor.select.can_be_regex(obj)
tensorflow.contrib.graph_editor.select.check_cios(control_inputs=False,control_outputs=None,control_ios=None)
tensorflow.contrib.graph_editor.select.compute_boundary_ts(ops)
tensorflow.contrib.graph_editor.select.filter_ops(ops,positive_filter)
tensorflow.contrib.graph_editor.select.filter_ops_from_regex(ops,regex)
tensorflow.contrib.graph_editor.select.filter_ts(ops,positive_filter)
tensorflow.contrib.graph_editor.select.filter_ts_from_regex(ops,regex)
tensorflow.contrib.graph_editor.select.get_backward_walk_ops(seed_ops,inclusive=True,within_ops=None,stop_at_ts=(),control_inputs=False)
tensorflow.contrib.graph_editor.select.get_forward_walk_ops(seed_ops,inclusive=True,within_ops=None,stop_at_ts=(),control_outputs=None)
tensorflow.contrib.graph_editor.select.get_name_scope_ops(ops,scope)
tensorflow.contrib.graph_editor.select.get_ops_ios(ops,control_inputs=False,control_outputs=None,control_ios=None)
tensorflow.contrib.graph_editor.select.get_walks_intersection_ops(forward_seed_ops,backward_seed_ops,forward_inclusive=True,backward_inclusive=True,within_ops=None,control_inputs=False,control_outputs=None,control_ios=None)
tensorflow.contrib.graph_editor.select.get_walks_union_ops(forward_seed_ops,backward_seed_ops,forward_inclusive=True,backward_inclusive=True,within_ops=None,control_inputs=False,control_outputs=None,control_ios=None)
tensorflow.contrib.graph_editor.select.get_within_boundary_ops(ops,seed_ops,boundary_ops=(),inclusive=True,control_inputs=False,control_outputs=None,control_ios=None)
tensorflow.contrib.graph_editor.select.make_regex(obj)
tensorflow.contrib.graph_editor.select.select_ops(*args,**kwargs)
tensorflow.contrib.graph_editor.select.select_ops_and_ts(*args,**kwargs)
tensorflow.contrib.graph_editor.select.select_ts(*args,**kwargs)
tensorflow.contrib.graph_editor.select_ops(*args,**kwargs)
tensorflow.contrib.graph_editor.select_ops_and_ts(*args,**kwargs)
tensorflow.contrib.graph_editor.select_ts(*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/graph_editor/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/graph_editor/reroute.py----------------------------------------
A:tensorflow.contrib.graph_editor.reroute.ts0->tensorflow.contrib.graph_editor.util.make_list_of_t(ts0)
A:tensorflow.contrib.graph_editor.reroute.ts1->tensorflow.contrib.graph_editor.util.make_list_of_t(ts1)
A:tensorflow.contrib.graph_editor.reroute.(swap, a2b, b2a)->range(3)
A:tensorflow.contrib.graph_editor.reroute.(a2b, b2a)->_RerouteMode.check(mode)
A:tensorflow.contrib.graph_editor.reroute.cannot_modify->frozenset(_util.make_list_of_op(cannot_modify))
A:tensorflow.contrib.graph_editor.reroute.can_modify->frozenset(_util.make_list_of_op(can_modify))
A:tensorflow.contrib.graph_editor.reroute.consumers0->set(t0.consumers())
A:tensorflow.contrib.graph_editor.reroute.consumers1->set(t1.consumers())
A:tensorflow.contrib.graph_editor.reroute.sgv0_->tensorflow.contrib.graph_editor.subgraph.make_view(sgv0).copy()
A:tensorflow.contrib.graph_editor.reroute.sgv1_->tensorflow.contrib.graph_editor.subgraph.make_view(sgv1).copy()
A:tensorflow.contrib.graph_editor.reroute.ii->a._input_ts.index(t)
A:tensorflow.contrib.graph_editor.reroute.sgv0->tensorflow.contrib.graph_editor.subgraph.make_view(sgv0)
A:tensorflow.contrib.graph_editor.reroute.sgv1->tensorflow.contrib.graph_editor.subgraph.make_view(sgv1)
A:tensorflow.contrib.graph_editor.reroute.cops->tensorflow.contrib.graph_editor.util.make_list_of_op(cops, allow_graph=False)
tensorflow.contrib.graph_editor._RerouteMode(object)
tensorflow.contrib.graph_editor._RerouteMode.check(cls,mode)
tensorflow.contrib.graph_editor._check_ts_compatibility(ts0,ts1)
tensorflow.contrib.graph_editor._reroute_sgv(sgv0,sgv1,mode)
tensorflow.contrib.graph_editor._reroute_sgv_inputs(sgv0,sgv1,mode)
tensorflow.contrib.graph_editor._reroute_sgv_outputs(sgv0,sgv1,mode)
tensorflow.contrib.graph_editor._reroute_sgv_remap(sgv0,sgv1,mode)
tensorflow.contrib.graph_editor._reroute_t(t0,t1,consumers1,can_modify=None,cannot_modify=None)
tensorflow.contrib.graph_editor._reroute_ts(ts0,ts1,mode,can_modify=None,cannot_modify=None)
tensorflow.contrib.graph_editor.add_control_inputs(op,cops)
tensorflow.contrib.graph_editor.remove_control_inputs(op,cops)
tensorflow.contrib.graph_editor.reroute._RerouteMode(object)
tensorflow.contrib.graph_editor.reroute._RerouteMode.check(cls,mode)
tensorflow.contrib.graph_editor.reroute._check_ts_compatibility(ts0,ts1)
tensorflow.contrib.graph_editor.reroute._reroute_sgv(sgv0,sgv1,mode)
tensorflow.contrib.graph_editor.reroute._reroute_sgv_inputs(sgv0,sgv1,mode)
tensorflow.contrib.graph_editor.reroute._reroute_sgv_outputs(sgv0,sgv1,mode)
tensorflow.contrib.graph_editor.reroute._reroute_sgv_remap(sgv0,sgv1,mode)
tensorflow.contrib.graph_editor.reroute._reroute_t(t0,t1,consumers1,can_modify=None,cannot_modify=None)
tensorflow.contrib.graph_editor.reroute._reroute_ts(ts0,ts1,mode,can_modify=None,cannot_modify=None)
tensorflow.contrib.graph_editor.reroute.add_control_inputs(op,cops)
tensorflow.contrib.graph_editor.reroute.remove_control_inputs(op,cops)
tensorflow.contrib.graph_editor.reroute.reroute_inputs(sgv0,sgv1)
tensorflow.contrib.graph_editor.reroute.reroute_ios(sgv0,sgv1)
tensorflow.contrib.graph_editor.reroute.reroute_outputs(sgv0,sgv1)
tensorflow.contrib.graph_editor.reroute.reroute_ts(ts0,ts1,can_modify=None,cannot_modify=None)
tensorflow.contrib.graph_editor.reroute.swap_inputs(sgv0,sgv1)
tensorflow.contrib.graph_editor.reroute.swap_ios(sgv0,sgv1)
tensorflow.contrib.graph_editor.reroute.swap_outputs(sgv0,sgv1)
tensorflow.contrib.graph_editor.reroute.swap_ts(ts0,ts1,can_modify=None,cannot_modify=None)
tensorflow.contrib.graph_editor.reroute_inputs(sgv0,sgv1)
tensorflow.contrib.graph_editor.reroute_ios(sgv0,sgv1)
tensorflow.contrib.graph_editor.reroute_outputs(sgv0,sgv1)
tensorflow.contrib.graph_editor.reroute_ts(ts0,ts1,can_modify=None,cannot_modify=None)
tensorflow.contrib.graph_editor.swap_inputs(sgv0,sgv1)
tensorflow.contrib.graph_editor.swap_ios(sgv0,sgv1)
tensorflow.contrib.graph_editor.swap_outputs(sgv0,sgv1)
tensorflow.contrib.graph_editor.swap_ts(ts0,ts1,can_modify=None,cannot_modify=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/graph_editor/edit.py----------------------------------------
A:tensorflow.contrib.graph_editor.edit.sgv->tensorflow.contrib.graph_editor.subgraph.make_view(sgv)
A:tensorflow.contrib.graph_editor.edit.sgv_->tensorflow.contrib.graph_editor.subgraph.make_view(sgv).remap_outputs([output_id for (output_id, output_t) in enumerate(sgv.outputs) if output_t.consumers()])
A:tensorflow.contrib.graph_editor.edit.consumers_sgv->consumers_sgv.remap_inputs([input_id for (input_id, input_t) in enumerate(consumers_sgv.inputs) if input_t in sgv_.outputs]).remap_inputs([input_id for (input_id, input_t) in enumerate(consumers_sgv.inputs) if input_t in sgv_.outputs])
A:tensorflow.contrib.graph_editor.edit.(control_inputs, control_outputs)->tensorflow.contrib.graph_editor.select.check_cios(control_inputs, control_outputs, control_ios)
A:tensorflow.contrib.graph_editor.edit.(_, detached_inputs)->detach_inputs(sgv, control_inputs)
A:tensorflow.contrib.graph_editor.edit.(_, detached_outputs)->detach_outputs(sgv, control_outputs)
A:tensorflow.contrib.graph_editor.edit.sgv0->tensorflow.contrib.graph_editor.subgraph.make_view(sgv0)
A:tensorflow.contrib.graph_editor.edit.sgv1->tensorflow.contrib.graph_editor.subgraph.make_view(sgv1)
A:tensorflow.contrib.graph_editor.edit.sgv0_outputs->tensorflow.contrib.graph_editor.subgraph.SubGraphView(passthrough_ts=sgv0.outputs)
A:tensorflow.contrib.graph_editor.edit.sgv_inputs->list(sgv.inputs)
A:tensorflow.contrib.graph_editor.edit.(sgv, detached_inputs)->detach_inputs(sgv)
tensorflow.contrib.graph_editor.bypass(sgv)
tensorflow.contrib.graph_editor.connect(sgv0,sgv1,disconnect_first=False)
tensorflow.contrib.graph_editor.detach(sgv,control_inputs=False,control_outputs=None,control_ios=None)
tensorflow.contrib.graph_editor.detach_control_inputs(sgv)
tensorflow.contrib.graph_editor.detach_control_outputs(sgv,control_outputs)
tensorflow.contrib.graph_editor.detach_inputs(sgv,control_inputs=False)
tensorflow.contrib.graph_editor.detach_outputs(sgv,control_outputs=None)
tensorflow.contrib.graph_editor.edit.bypass(sgv)
tensorflow.contrib.graph_editor.edit.connect(sgv0,sgv1,disconnect_first=False)
tensorflow.contrib.graph_editor.edit.detach(sgv,control_inputs=False,control_outputs=None,control_ios=None)
tensorflow.contrib.graph_editor.edit.detach_control_inputs(sgv)
tensorflow.contrib.graph_editor.edit.detach_control_outputs(sgv,control_outputs)
tensorflow.contrib.graph_editor.edit.detach_inputs(sgv,control_inputs=False)
tensorflow.contrib.graph_editor.edit.detach_outputs(sgv,control_outputs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/graph_editor/util.py----------------------------------------
A:tensorflow.contrib.graph_editor.util.other->list(other)
A:tensorflow.contrib.graph_editor.util._->iter(obj)
A:tensorflow.contrib.graph_editor.util.res->tree.__new__(type(tree))
A:tensorflow.contrib.graph_editor.util.ts->make_list_of_t(ts, allow_graph=False)
A:tensorflow.contrib.graph_editor.util.ops->self._graph.get_operations()
A:tensorflow.contrib.graph_editor.util.slash->scope_finalize(scope).rfind('/')
A:tensorflow.contrib.graph_editor.util.scope->scope_finalize(scope)
A:tensorflow.contrib.graph_editor.util.op_dirname->scope_dirname(t.op.name)
A:tensorflow.contrib.graph_editor.util.op_basename->scope_basename(t.op.name)
A:tensorflow.contrib.graph_editor.util.ph_name->'geph__{}_{}'.format(op_basename, t.value_index)
A:tensorflow.contrib.graph_editor.util._INTERNAL_VARIABLE_RE->re.compile('^__\\w+__$')
A:tensorflow.contrib.graph_editor.util.src_scope->scope_finalize(src_scope)
A:tensorflow.contrib.graph_editor.util.dst_scope->scope_finalize(dst_scope)
tensorflow.contrib.graph_editor._util.ControlOutputs(self,graph)
tensorflow.contrib.graph_editor._util.ControlOutputs._build(self)
tensorflow.contrib.graph_editor._util.ControlOutputs.get(self,op)
tensorflow.contrib.graph_editor._util.ControlOutputs.get_all(self)
tensorflow.contrib.graph_editor._util.ControlOutputs.graph(self)
tensorflow.contrib.graph_editor._util.ControlOutputs.update(self)
tensorflow.contrib.graph_editor._util.ListView(self,list_)
tensorflow.contrib.graph_editor._util.ListView.__add__(self,other)
tensorflow.contrib.graph_editor._util.ListView.__bool__(self)
tensorflow.contrib.graph_editor._util.ListView.__getitem__(self,i)
tensorflow.contrib.graph_editor._util.ListView.__iter__(self)
tensorflow.contrib.graph_editor._util.ListView.__len__(self)
tensorflow.contrib.graph_editor._util.check_graphs(*args)
tensorflow.contrib.graph_editor._util.concatenate_unique(la,lb)
tensorflow.contrib.graph_editor._util.find_corresponding(targets,dst_graph,dst_scope='',src_scope='')
tensorflow.contrib.graph_editor._util.find_corresponding_elem(target,dst_graph,dst_scope='',src_scope='')
tensorflow.contrib.graph_editor._util.flatten_tree(tree,leaves=None)
tensorflow.contrib.graph_editor._util.get_consuming_ops(ts)
tensorflow.contrib.graph_editor._util.get_generating_ops(ts)
tensorflow.contrib.graph_editor._util.get_predefined_collection_names()
tensorflow.contrib.graph_editor._util.get_tensors(graph)
tensorflow.contrib.graph_editor._util.get_unique_graph(tops,check_types=None,none_if_empty=False)
tensorflow.contrib.graph_editor._util.is_iterable(obj)
tensorflow.contrib.graph_editor._util.make_list_of_op(ops,check_graph=True,allow_graph=True,ignore_ts=False)
tensorflow.contrib.graph_editor._util.make_list_of_t(ts,check_graph=True,allow_graph=True,ignore_ops=False)
tensorflow.contrib.graph_editor._util.make_placeholder_from_dtype_and_shape(dtype,shape=None,scope=None)
tensorflow.contrib.graph_editor._util.make_placeholder_from_tensor(t,scope=None)
tensorflow.contrib.graph_editor._util.placeholder_name(t=None,scope=None)
tensorflow.contrib.graph_editor._util.scope_basename(scope)
tensorflow.contrib.graph_editor._util.scope_dirname(scope)
tensorflow.contrib.graph_editor._util.scope_finalize(scope)
tensorflow.contrib.graph_editor._util.transform_tree(tree,fn,iterable_type=tuple)
tensorflow.contrib.graph_editor.util.ControlOutputs(self,graph)
tensorflow.contrib.graph_editor.util.ControlOutputs.__init__(self,graph)
tensorflow.contrib.graph_editor.util.ControlOutputs._build(self)
tensorflow.contrib.graph_editor.util.ControlOutputs.get(self,op)
tensorflow.contrib.graph_editor.util.ControlOutputs.get_all(self)
tensorflow.contrib.graph_editor.util.ControlOutputs.graph(self)
tensorflow.contrib.graph_editor.util.ControlOutputs.update(self)
tensorflow.contrib.graph_editor.util.ListView(self,list_)
tensorflow.contrib.graph_editor.util.ListView.__add__(self,other)
tensorflow.contrib.graph_editor.util.ListView.__bool__(self)
tensorflow.contrib.graph_editor.util.ListView.__getitem__(self,i)
tensorflow.contrib.graph_editor.util.ListView.__init__(self,list_)
tensorflow.contrib.graph_editor.util.ListView.__iter__(self)
tensorflow.contrib.graph_editor.util.ListView.__len__(self)
tensorflow.contrib.graph_editor.util.check_graphs(*args)
tensorflow.contrib.graph_editor.util.concatenate_unique(la,lb)
tensorflow.contrib.graph_editor.util.find_corresponding(targets,dst_graph,dst_scope='',src_scope='')
tensorflow.contrib.graph_editor.util.find_corresponding_elem(target,dst_graph,dst_scope='',src_scope='')
tensorflow.contrib.graph_editor.util.flatten_tree(tree,leaves=None)
tensorflow.contrib.graph_editor.util.get_consuming_ops(ts)
tensorflow.contrib.graph_editor.util.get_generating_ops(ts)
tensorflow.contrib.graph_editor.util.get_predefined_collection_names()
tensorflow.contrib.graph_editor.util.get_tensors(graph)
tensorflow.contrib.graph_editor.util.get_unique_graph(tops,check_types=None,none_if_empty=False)
tensorflow.contrib.graph_editor.util.is_iterable(obj)
tensorflow.contrib.graph_editor.util.make_list_of_op(ops,check_graph=True,allow_graph=True,ignore_ts=False)
tensorflow.contrib.graph_editor.util.make_list_of_t(ts,check_graph=True,allow_graph=True,ignore_ops=False)
tensorflow.contrib.graph_editor.util.make_placeholder_from_dtype_and_shape(dtype,shape=None,scope=None)
tensorflow.contrib.graph_editor.util.make_placeholder_from_tensor(t,scope=None)
tensorflow.contrib.graph_editor.util.placeholder_name(t=None,scope=None)
tensorflow.contrib.graph_editor.util.scope_basename(scope)
tensorflow.contrib.graph_editor.util.scope_dirname(scope)
tensorflow.contrib.graph_editor.util.scope_finalize(scope)
tensorflow.contrib.graph_editor.util.transform_tree(tree,fn,iterable_type=tuple)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/graph_editor/transform.py----------------------------------------
A:tensorflow.contrib.graph_editor.transform.t_->tensorflow.contrib.graph_editor.util.make_placeholder_from_tensor(t, scope=info.scope_)
A:tensorflow.contrib.graph_editor.transform.known_collection_names->tensorflow.contrib.graph_editor.util.get_predefined_collection_names()
A:tensorflow.contrib.graph_editor.transform.transformed_name->_TmpInfo(sgv, dst_graph, dst_scope, src_scope).new_name(name)
A:tensorflow.contrib.graph_editor.transform.node_def_->deepcopy(op._node_def)
A:tensorflow.contrib.graph_editor.transform.name_->_TmpInfo(sgv, dst_graph, dst_scope, src_scope).graph_.unique_name(name_)
A:tensorflow.contrib.graph_editor.transform.op_def_->deepcopy(op._op_def)
A:tensorflow.contrib.graph_editor.transform.op_->tensorflow.python.framework.ops.Operation(node_def_, info.graph_, [], output_types_, [], input_types_, None, op_def_)
A:tensorflow.contrib.graph_editor.transform.original_op->_TmpInfo(sgv, dst_graph, dst_scope, src_scope).transform_original_op_handler(info, op._original_op)
A:tensorflow.contrib.graph_editor.transform.transformed_map->self._get_transformed_map(transformed_top)
A:tensorflow.contrib.graph_editor.transform.transformed_elem->partial(self._transformed_elem, missing_fn=missing_fn)
A:tensorflow.contrib.graph_editor.transform.original_elem->partial(self._original_elem, missing_fn=missing_fn)
A:tensorflow.contrib.graph_editor.transform.res->StringIO()
A:tensorflow.contrib.graph_editor.transform.self.sgv_inputs_set->frozenset(sgv.inputs)
A:tensorflow.contrib.graph_editor.transform.self.ops->frozenset(sgv.ops)
A:tensorflow.contrib.graph_editor.transform.self.control_outputs->tensorflow.contrib.graph_editor.util.ControlOutputs(sgv.graph)
A:tensorflow.contrib.graph_editor.transform.self.collections->dict(((key, self.graph.get_collection(key)) for key in self.graph.get_all_collection_keys()))
A:tensorflow.contrib.graph_editor.transform.sgv->tensorflow.contrib.graph_editor.subgraph.make_view(sgv)
A:tensorflow.contrib.graph_editor.transform.src_scope->tensorflow.contrib.graph_editor.util.scope_finalize(src_scope)
A:tensorflow.contrib.graph_editor.transform.dst_scope->tensorflow.contrib.graph_editor.util.scope_finalize(dst_graph.unique_name(dst_scope[:-1]))
A:tensorflow.contrib.graph_editor.transform.info->_TmpInfo(sgv, dst_graph, dst_scope, src_scope)
A:tensorflow.contrib.graph_editor.transform.res_info->TransformerInfo(info)
A:tensorflow.contrib.graph_editor.transform.sgv_->tensorflow.contrib.graph_editor.subgraph.SubGraphView(ops_)
A:tensorflow.contrib.graph_editor.transform.(op_, op_outputs_)->self.transform_op_handler(info, op)
A:tensorflow.contrib.graph_editor.transform.input_t_index_->tensorflow.contrib.graph_editor.subgraph.SubGraphView(ops_).input_index(input_t_)
A:tensorflow.contrib.graph_editor.transform.output_t_index_->tensorflow.contrib.graph_editor.subgraph.SubGraphView(ops_).output_index(output_t_)
A:tensorflow.contrib.graph_editor.transform.copier->Transformer()
A:tensorflow.contrib.graph_editor.transform.flatten_target_ts->tensorflow.contrib.graph_editor.util.flatten_tree(target_ts)
A:tensorflow.contrib.graph_editor.transform.graph->tensorflow.contrib.graph_editor.util.get_unique_graph(flatten_target_ts, check_types=tf_ops.Tensor)
A:tensorflow.contrib.graph_editor.transform.control_ios->tensorflow.contrib.graph_editor.util.ControlOutputs(graph)
A:tensorflow.contrib.graph_editor.transform.ops->tensorflow.contrib.graph_editor.select.get_walks_intersection_ops(list(iterkeys(replacement_ts)), flatten_target_ts, control_ios=control_ios)
A:tensorflow.contrib.graph_editor.transform.(_, info)->copy_with_input_replacements(ops, replacement_ts, None, dst_scope, src_scope, reuse_dst_scope)
tensorflow.contrib.graph_editor.Transformer(self)
tensorflow.contrib.graph_editor.Transformer._connect_ops(self,info)
tensorflow.contrib.graph_editor.Transformer._copy_ops(self,info)
tensorflow.contrib.graph_editor.Transformer._transform_sgv(self,info,sgv)
tensorflow.contrib.graph_editor.Transformer._transformed_t(self,info,t)
tensorflow.contrib.graph_editor.TransformerInfo(self,info)
tensorflow.contrib.graph_editor.TransformerInfo.__str__(self)
tensorflow.contrib.graph_editor.TransformerInfo._get_transformed_map(self,top)
tensorflow.contrib.graph_editor.TransformerInfo._original_elem(self,transformed_top,missing_fn=None)
tensorflow.contrib.graph_editor.TransformerInfo._transformed_elem(self,original_top,missing_fn=None)
tensorflow.contrib.graph_editor.TransformerInfo.original(self,transformed,missing_fn=None)
tensorflow.contrib.graph_editor.TransformerInfo.transformed(self,original,missing_fn=None)
tensorflow.contrib.graph_editor._TmpInfo(self,sgv,dst_graph,dst_scope,src_scope)
tensorflow.contrib.graph_editor._TmpInfo.new_name(self,name)
tensorflow.contrib.graph_editor.assign_renamed_collections_handler(info,elem,elem_)
tensorflow.contrib.graph_editor.copy(sgv,dst_graph=None,dst_scope='',src_scope='',reuse_dst_scope=False)
tensorflow.contrib.graph_editor.copy_op_handler(info,op,copy_shape=True)
tensorflow.contrib.graph_editor.copy_with_input_replacements(sgv,replacement_ts,dst_graph=None,dst_scope='',src_scope='',reuse_dst_scope=False)
tensorflow.contrib.graph_editor.graph_replace(target_ts,replacement_ts,dst_scope='',src_scope='',reuse_dst_scope=False)
tensorflow.contrib.graph_editor.keep_t_if_possible_handler(info,t)
tensorflow.contrib.graph_editor.replace_t_with_placeholder_handler(info,t)
tensorflow.contrib.graph_editor.transform.Transformer(self)
tensorflow.contrib.graph_editor.transform.Transformer.__init__(self)
tensorflow.contrib.graph_editor.transform.Transformer._connect_ops(self,info)
tensorflow.contrib.graph_editor.transform.Transformer._copy_ops(self,info)
tensorflow.contrib.graph_editor.transform.Transformer._transform_sgv(self,info,sgv)
tensorflow.contrib.graph_editor.transform.Transformer._transformed_t(self,info,t)
tensorflow.contrib.graph_editor.transform.TransformerInfo(self,info)
tensorflow.contrib.graph_editor.transform.TransformerInfo.__init__(self,info)
tensorflow.contrib.graph_editor.transform.TransformerInfo.__str__(self)
tensorflow.contrib.graph_editor.transform.TransformerInfo._get_transformed_map(self,top)
tensorflow.contrib.graph_editor.transform.TransformerInfo._original_elem(self,transformed_top,missing_fn=None)
tensorflow.contrib.graph_editor.transform.TransformerInfo._transformed_elem(self,original_top,missing_fn=None)
tensorflow.contrib.graph_editor.transform.TransformerInfo.original(self,transformed,missing_fn=None)
tensorflow.contrib.graph_editor.transform.TransformerInfo.transformed(self,original,missing_fn=None)
tensorflow.contrib.graph_editor.transform._TmpInfo(self,sgv,dst_graph,dst_scope,src_scope)
tensorflow.contrib.graph_editor.transform._TmpInfo.__init__(self,sgv,dst_graph,dst_scope,src_scope)
tensorflow.contrib.graph_editor.transform._TmpInfo.new_name(self,name)
tensorflow.contrib.graph_editor.transform.assign_renamed_collections_handler(info,elem,elem_)
tensorflow.contrib.graph_editor.transform.copy(sgv,dst_graph=None,dst_scope='',src_scope='',reuse_dst_scope=False)
tensorflow.contrib.graph_editor.transform.copy_op_handler(info,op,copy_shape=True)
tensorflow.contrib.graph_editor.transform.copy_with_input_replacements(sgv,replacement_ts,dst_graph=None,dst_scope='',src_scope='',reuse_dst_scope=False)
tensorflow.contrib.graph_editor.transform.graph_replace(target_ts,replacement_ts,dst_scope='',src_scope='',reuse_dst_scope=False)
tensorflow.contrib.graph_editor.transform.keep_t_if_possible_handler(info,t)
tensorflow.contrib.graph_editor.transform.replace_t_with_placeholder_handler(info,t)
tensorflow.contrib.graph_editor.transform.transform_op_if_inside_handler(info,op,keep_if_possible=True)
tensorflow.contrib.graph_editor.transform_op_if_inside_handler(info,op,keep_if_possible=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/graph_editor/subgraph.py----------------------------------------
A:tensorflow.contrib.graph_editor.subgraph.inside_ops->tensorflow.contrib.graph_editor.util.make_list_of_op(inside_ops)
A:tensorflow.contrib.graph_editor.subgraph.passthrough_ts->tensorflow.contrib.graph_editor.util.make_list_of_t(passthrough_ts)
A:tensorflow.contrib.graph_editor.subgraph.self._graph->tensorflow.contrib.graph_editor.util.get_unique_graph(ops_and_ts)
A:tensorflow.contrib.graph_editor.subgraph.(inputs, outputs, insides)->tensorflow.contrib.graph_editor.select.compute_boundary_ts(inside_ops)
A:tensorflow.contrib.graph_editor.subgraph.all_tensors->frozenset(inputs + outputs + list(insides))
A:tensorflow.contrib.graph_editor.subgraph.result->cls.__new__(cls)
A:tensorflow.contrib.graph_editor.subgraph.self._ops->list(other._ops)
A:tensorflow.contrib.graph_editor.subgraph.self._passthrough_ts->list(other._passthrough_ts)
A:tensorflow.contrib.graph_editor.subgraph.self._input_ts->list(other._input_ts)
A:tensorflow.contrib.graph_editor.subgraph.self._output_ts->list(other._output_ts)
A:tensorflow.contrib.graph_editor.subgraph.(inputs, outputs, _)->tensorflow.contrib.graph_editor.select.compute_boundary_ts(self._ops)
A:tensorflow.contrib.graph_editor.subgraph.res->StringIO()
A:tensorflow.contrib.graph_editor.subgraph.new_input_indices->_finalize_indices(new_input_indices, self._input_ts)
A:tensorflow.contrib.graph_editor.subgraph.new_output_indices->_finalize_indices(new_output_indices, self._output_ts)
A:tensorflow.contrib.graph_editor.subgraph.output_ts->list(self._output_ts)
A:tensorflow.contrib.graph_editor.subgraph.ops->tensorflow.contrib.graph_editor.select.get_name_scope_ops(graph, scope)
A:tensorflow.contrib.graph_editor.subgraph.subgraph_id->self._output_ts.index(t)
A:tensorflow.contrib.graph_editor.subgraph.ops_set->frozenset(self._ops)
A:tensorflow.contrib.graph_editor.subgraph.(ops, ts)->tensorflow.contrib.graph_editor.select.select_ops_and_ts(*args, **kwargs)
A:tensorflow.contrib.graph_editor.subgraph.sgv->SubGraphView(ops, ts)
tensorflow.contrib.graph_editor._subgraph.SubGraphView(self,inside_ops=(),passthrough_ts=())
tensorflow.contrib.graph_editor._subgraph.SubGraphView.__bool__(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.__copy__(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.__enter__(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.__exit__(self,exc_type,exc_value,traceback)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.__str__(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView._assign_from(self,other)
tensorflow.contrib.graph_editor._subgraph.SubGraphView._remap_default(self,remove_input_map=True,remove_output_map=True)
tensorflow.contrib.graph_editor._subgraph.SubGraphView._remap_inputs(self,new_input_indices)
tensorflow.contrib.graph_editor._subgraph.SubGraphView._remap_outputs(self,new_output_indices)
tensorflow.contrib.graph_editor._subgraph.SubGraphView._remap_outputs_make_unique(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView._remap_outputs_to_consumers(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView._remove_unused_ops(self,control_inputs=True)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.connected_inputs(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.connected_outputs(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.consumers(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.copy(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.find_op_by_name(self,op_name)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.graph(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.input_index(self,t)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.inputs(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.is_passthrough(self,t)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.op(self,op_id)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.ops(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.output_index(self,t)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.outputs(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.passthroughs(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.remap(self,new_input_indices=None,new_output_indices=None)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.remap_default(self,remove_input_map=True,remove_output_map=True)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.remap_inputs(self,new_input_indices)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.remap_outputs(self,new_output_indices)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.remap_outputs_make_unique(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.remap_outputs_to_consumers(self)
tensorflow.contrib.graph_editor._subgraph.SubGraphView.remove_unused_ops(self,control_inputs=True)
tensorflow.contrib.graph_editor._subgraph._check_graph(sgv,graph)
tensorflow.contrib.graph_editor._subgraph._check_within_range(mapping,n,repetition)
tensorflow.contrib.graph_editor._subgraph._finalize_index(index_or_t,ts)
tensorflow.contrib.graph_editor._subgraph._finalize_indices(list_of_index_or_t,ts)
tensorflow.contrib.graph_editor._subgraph.make_view(*args,**kwargs)
tensorflow.contrib.graph_editor._subgraph.make_view_from_scope(scope,graph)
tensorflow.contrib.graph_editor.subgraph.SubGraphView(self,inside_ops=(),passthrough_ts=())
tensorflow.contrib.graph_editor.subgraph.SubGraphView.__bool__(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.__copy__(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.__enter__(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.__exit__(self,exc_type,exc_value,traceback)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.__init__(self,inside_ops=(),passthrough_ts=())
tensorflow.contrib.graph_editor.subgraph.SubGraphView.__str__(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView._assign_from(self,other)
tensorflow.contrib.graph_editor.subgraph.SubGraphView._remap_default(self,remove_input_map=True,remove_output_map=True)
tensorflow.contrib.graph_editor.subgraph.SubGraphView._remap_inputs(self,new_input_indices)
tensorflow.contrib.graph_editor.subgraph.SubGraphView._remap_outputs(self,new_output_indices)
tensorflow.contrib.graph_editor.subgraph.SubGraphView._remap_outputs_make_unique(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView._remap_outputs_to_consumers(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView._remove_unused_ops(self,control_inputs=True)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.connected_inputs(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.connected_outputs(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.consumers(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.copy(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.find_op_by_name(self,op_name)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.graph(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.input_index(self,t)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.inputs(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.is_passthrough(self,t)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.op(self,op_id)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.ops(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.output_index(self,t)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.outputs(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.passthroughs(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.remap(self,new_input_indices=None,new_output_indices=None)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.remap_default(self,remove_input_map=True,remove_output_map=True)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.remap_inputs(self,new_input_indices)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.remap_outputs(self,new_output_indices)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.remap_outputs_make_unique(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.remap_outputs_to_consumers(self)
tensorflow.contrib.graph_editor.subgraph.SubGraphView.remove_unused_ops(self,control_inputs=True)
tensorflow.contrib.graph_editor.subgraph._check_graph(sgv,graph)
tensorflow.contrib.graph_editor.subgraph._check_within_range(mapping,n,repetition)
tensorflow.contrib.graph_editor.subgraph._finalize_index(index_or_t,ts)
tensorflow.contrib.graph_editor.subgraph._finalize_indices(list_of_index_or_t,ts)
tensorflow.contrib.graph_editor.subgraph.make_view(*args,**kwargs)
tensorflow.contrib.graph_editor.subgraph.make_view_from_scope(scope,graph)


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/graph_editor/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/tensorflow1.1.0/lib/python3.6/site-packages/tensorflow/contrib/graph_editor/tests/match.py----------------------------------------
A:tensorflow.contrib.graph_editor.tests.match.graph_match->OpMatcher(graph_match)
A:tensorflow.contrib.graph_editor.tests.match.positive_filter->self._finalize_positive_filter(positive_filter)
A:tensorflow.contrib.graph_editor.tests.match.regex_->tensorflow.contrib.graph_editor.select.make_regex(elem)
tensorflow.contrib.graph_editor.tests.match.OpMatcher(self,positive_filter)
tensorflow.contrib.graph_editor.tests.match.OpMatcher.__init__(self,positive_filter)
tensorflow.contrib.graph_editor.tests.match.OpMatcher._finalize_positive_filter(self,elem)
tensorflow.contrib.graph_editor.tests.match.OpMatcher.control_input_ops(self,*args)
tensorflow.contrib.graph_editor.tests.match.OpMatcher.input_ops(self,*args)
tensorflow.contrib.graph_editor.tests.match.OpMatcher.output_ops(self,*args)
tensorflow.contrib.graph_editor.tests.match._make_graph_match(graph_match)
tensorflow.contrib.graph_editor.tests.match.op_type(op_types,op=None)

